void sub_239A7EE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_Event **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_Event::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7EF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_Fallback **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_Fallback::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7EFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_InputGroup_LegacyEvent **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_InputGroup_LegacyEvent::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7F0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_NLParameters **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_NLParameters::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7F150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_State_Memory **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_State_Memory::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7F200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    v3 = (protobuf::Intelligence_Condition_ConditionEntry **)(*(void *)(a1 + 16) + 8);
    do
    {
      v4 = *v3++;
      protobuf::Intelligence_Condition_ConditionEntry::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239A7F2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(unint64_t *a1, uint64_t a2)
{
  if (*a1) {
    v3 = (std::string *)(*a1 & 0xFFFFFFFFFFFFFFFELL);
  }
  else {
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(a1);
  }
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    v5 = (const std::string::value_type *)a2;
  }
  else {
    v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }

  return std::string::append(v3, v5, v6);
}

void google::protobuf::internal::arena_destruct_object<google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::Container>(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(google::protobuf::internal::InternalMetadataWithArenaLite *this)
{
  if (*(void *)this) {
    unint64_t v1 = *(void *)this & 0xFFFFFFFFFFFFFFFELL;
  }
  else {
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)this);
  }
  if (*(char *)(v1 + 23) < 0)
  {
    **(unsigned char **)unint64_t v1 = 0;
    *(void *)(v1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v1 = 0;
    *(unsigned char *)(v1 + 23) = 0;
  }
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::~RepeatedPtrField(google::protobuf::internal::RepeatedPtrFieldBase *this)
{
  v2 = (unsigned int *)*((void *)this + 2);
  if (v2 && !*(void *)this)
  {
    v3 = v2 + 2;
    uint64_t v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3) {
          (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)*((void *)this + 2);
    }
    operator delete(v2);
  }
  *((void *)this + 2) = 0;

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase((google::protobuf::internal::ArenaImpl **)this);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Intent>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Intent **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Intent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Intent **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Intent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Intent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7F578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Intent>::Merge(protobuf::Intelligence_InputGroup_Intent *a1, protobuf::Intelligence_InputGroup_Intent *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Fallback **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Fallback **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Fallback **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Fallback **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Fallback>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7F6F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Fallback>::Merge(protobuf::Intelligence_InputGroup_Fallback *a1, protobuf::Intelligence_InputGroup_Fallback *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_LegacyEvent>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_InputGroup_LegacyEvent **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_LegacyEvent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_LegacyEvent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_LegacyEvent **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_InputGroup_LegacyEvent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_LegacyEvent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_LegacyEvent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7F878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_InputGroup_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_InputGroup_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7F9E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup_Event>::Merge(protobuf::Intelligence_InputGroup_Event *a1, protobuf::Intelligence_InputGroup_Event *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_NLParameters>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_NLParameters **)(v6 + 8);
      v14 = (protobuf::Intelligence_NLParameters **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_NLParameters>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_NLParameters **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_NLParameters **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_NLParameters>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_NLParameters>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7FB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState_Frame_ResponseState **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7FCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>::Merge(protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *a1, protobuf::Intelligence_State_ExecutionState_Frame_ResponseState *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState_Frame>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState_Frame **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState_Frame **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState_Frame **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState_Frame **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState_Frame>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState_Frame>::Merge(protobuf::Intelligence_State_ExecutionState_Frame *a1, protobuf::Intelligence_State_ExecutionState_Frame *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Memory **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Memory **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Memory **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Memory **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A7FFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Memory>::Merge(protobuf::Intelligence_State_Memory *a1, protobuf::Intelligence_State_Memory *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Response>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Response **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Response **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Response **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Response **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Response>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A80158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Response>::Merge(protobuf::Intelligence_State_Response *a1, protobuf::Intelligence_State_Response *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_ExecutionState>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_ExecutionState **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_ExecutionState **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_ExecutionState **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_ExecutionState **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_ExecutionState>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A802D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_ExecutionState>::Merge(protobuf::Intelligence_State_ExecutionState *a1, protobuf::Intelligence_State_ExecutionState *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_InputGroup>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_InputGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_InputGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_InputGroup **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_InputGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_InputGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A80458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_InputGroup>::Merge(protobuf::Intelligence_State_InputGroup *a1, protobuf::Intelligence_State_InputGroup *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Timer>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Timer **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Timer **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Timer **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Timer **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Timer>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A805D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Timer>::Merge(protobuf::Intelligence_State_Timer *a1, protobuf::Intelligence_State_Timer *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Event>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_State_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_State_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_State_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_State_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A80758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_State_Event>::Merge(protobuf::Intelligence_State_Event *a1, protobuf::Intelligence_State_Event *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Condition_ConditionEntry **)(v6 + 8);
      v14 = (protobuf::Intelligence_Condition_ConditionEntry **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Condition_ConditionEntry **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Condition_ConditionEntry **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition_ConditionEntry>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A808D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition_ConditionEntry>::Merge(protobuf::Intelligence_Condition_ConditionEntry *a1, protobuf::Intelligence_Condition_ConditionEntry *this)
{
  return protobuf::Intelligence_Condition_ConditionEntry::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Meta **)(v6 + 8);
      v14 = (protobuf::Intelligence_Meta **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Meta **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Meta **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Meta>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A80E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Meta>::Merge(protobuf::Intelligence_Meta *a1, protobuf::Intelligence_Meta *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_DialogResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_DialogResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_DialogResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_DialogResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_DialogResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A80FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_DialogResponse>::Merge(protobuf::Intelligence_DialogResponse *a1, protobuf::Intelligence_DialogResponse *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_BehaviorResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_BehaviorResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_BehaviorResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_BehaviorResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_BehaviorResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_BehaviorResponse>::Merge(protobuf::Intelligence_BehaviorResponse *a1, protobuf::Intelligence_BehaviorResponse *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_ReferenceResponse **)(v6 + 8);
      v14 = (protobuf::Intelligence_ReferenceResponse **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_ReferenceResponse **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_ReferenceResponse **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ReferenceResponse>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A812D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ReferenceResponse>::Merge(protobuf::Intelligence_ReferenceResponse *a1, protobuf::Intelligence_ReferenceResponse *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_ResponseGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_ResponseGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_ResponseGroup **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_ResponseGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_ResponseGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_ResponseGroup>::Merge(protobuf::Intelligence_ResponseGroup *a1, protobuf::Intelligence_ResponseGroup *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (const protobuf::Intelligence_InputGroup **)(v6 + 8);
      v14 = (protobuf::Intelligence_InputGroup **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_InputGroup **)((char *)v8 + v20);
      v22 = (const protobuf::Intelligence_InputGroup **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_InputGroup>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_InputGroup>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A815D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Activity **)(v6 + 8);
      v14 = (protobuf::Intelligence_Activity **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Activity **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Activity **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Activity>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Activity>::Merge(protobuf::Intelligence_Activity *a1, protobuf::Intelligence_Activity *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Utterance>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Utterance **)(v6 + 8);
      v14 = (protobuf::Intelligence_Utterance **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Utterance **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Utterance **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Utterance>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A818C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Utterance>::Merge(protobuf::Intelligence_Utterance *a1, protobuf::Intelligence_Utterance *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Character>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Character **)(v6 + 8);
      v14 = (protobuf::Intelligence_Character **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Character **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Character **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Character>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Character>::Merge(protobuf::Intelligence_Character *a1, protobuf::Intelligence_Character *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Intent>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Intent **)(v6 + 8);
      v14 = (protobuf::Intelligence_Intent **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Intent **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Intent **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Intent>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Intent>::Merge(protobuf::Intelligence_Intent *a1, protobuf::Intelligence_Intent *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Condition **)(v6 + 8);
      v14 = (protobuf::Intelligence_Condition **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Condition **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Condition **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Condition>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Condition>::Merge(protobuf::Intelligence_Condition *a1, protobuf::Intelligence_Condition *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Counter>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Counter **)(v6 + 8);
      v14 = (protobuf::Intelligence_Counter **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Counter **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Counter **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Counter>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A81EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Counter>::Merge(protobuf::Intelligence_Counter *a1, protobuf::Intelligence_Counter *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Flag>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Flag **)(v6 + 8);
      v14 = (protobuf::Intelligence_Flag **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Flag **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Flag **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Flag>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A82044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Flag>::Merge(protobuf::Intelligence_Flag *a1, protobuf::Intelligence_Flag *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Label>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Label **)(v6 + 8);
      v14 = (protobuf::Intelligence_Label **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Label **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Label **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Label>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A821C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Label>::Merge(protobuf::Intelligence_Label *a1, protobuf::Intelligence_Label *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_List>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_List **)(v6 + 8);
      v14 = (protobuf::Intelligence_List **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_List **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_List **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_List>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A82344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_List>::Merge(protobuf::Intelligence_List *a1, protobuf::Intelligence_List *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Variable **)(v6 + 8);
      v14 = (protobuf::Intelligence_Variable **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Variable **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Variable **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Variable>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A824C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Variable>::Merge(protobuf::Intelligence_Variable *a1, protobuf::Intelligence_Variable *this)
{
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      v13 = (protobuf::Intelligence_Event **)(v6 + 8);
      v14 = (protobuf::Intelligence_Event **)v7;
      do
      {
        v16 = *v13++;
        v15 = v16;
        v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      v21 = (protobuf::Intelligence_Event **)((char *)v8 + v20);
      v22 = (protobuf::Intelligence_Event **)(v20 + v6 + 8);
      do
      {
        v23 = *v22++;
        v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_Event>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239A82644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::Intelligence_Event>::Merge(protobuf::Intelligence_Event *a1, protobuf::Intelligence_Event *this)
{
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Meta>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_KeyValueParameter>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Undo>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_DialogResponse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_BehaviorResponse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ReferenceResponse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_ResponseGroup>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Interjection>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Intent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Event>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_Fallback>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup_LegacyEvent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_InputGroup>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Activity>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Utterance>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Character>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Counter>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Flag>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Label>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_List>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Variable>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Start>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_NLParameters>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Event>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Intent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory_Value>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Memory>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_InputGroup>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Event>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Response>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_Timer>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame_ResponseState>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState_Frame>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State_ExecutionState>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_State>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition_ConditionEntry>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence_Condition>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::Intelligence>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void siri::intelligence::FunctionHandler::GetAllDescriptions(int64x2_t *a1@<X8>)
{
  siri::intelligence::GetFunctionDefinitions((siri::intelligence *)&v25);
  unint64_t v3 = 126 - 2 * __clz(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v26 - v25) >> 4));
  if (v26 == v25) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>(v25, v26, v4, 1);
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  uint64_t v5 = v25;
  for (unint64_t i = v26; v5 != i; v5 += 80)
  {
    std::string::basic_string[abi:ne180100]<0>(&v22, "");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(v24, 0, sizeof(v24));
    std::string::operator=(&v22, (const std::string *)v5);
    std::string::operator=(&__p, (const std::string *)(v5 + 32));
    if (v24 != (unsigned char *)(v5 + 56)) {
      std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)v24, *(std::string **)(v5 + 56), *(std::string **)(v5 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v5 + 64) - *(void *)(v5 + 56)) >> 3));
    }
    unint64_t v8 = a1->u64[1];
    unint64_t v7 = a1[1].u64[0];
    if (v8 >= v7)
    {
      unint64_t v10 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - a1->i64[0]) >> 3);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x38E38E38E38E38ELL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - a1->i64[0]) >> 3);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x1C71C71C71C71C7) {
        unint64_t v13 = 0x38E38E38E38E38ELL;
      }
      else {
        unint64_t v13 = v11;
      }
      v30 = a1 + 1;
      if (v13)
      {
        if (v13 > 0x38E38E38E38E38ELL) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v14 = (void **)operator new(72 * v13);
      }
      else
      {
        v14 = 0;
      }
      char v27 = v14;
      v28.i64[0] = (uint64_t)&v14[9 * v10];
      v28.i64[1] = v28.i64[0];
      v29 = &v14[9 * v13];
      std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>((std::string *)v28.i64[0], (long long *)&v22);
      uint64_t v15 = v28.i64[0];
      uint64_t v9 = v28.i64[1] + 72;
      v28.i64[1] += 72;
      uint64_t v17 = a1->i64[0];
      unint64_t v16 = a1->u64[1];
      if (v16 == a1->i64[0])
      {
        int64x2_t v20 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          long long v18 = *(_OWORD *)(v16 - 72);
          *(void *)(v15 - 56) = *(void *)(v16 - 56);
          *(_OWORD *)(v15 - 72) = v18;
          *(void *)(v16 - 64) = 0;
          *(void *)(v16 - 56) = 0;
          *(void *)(v16 - 72) = 0;
          long long v19 = *(_OWORD *)(v16 - 48);
          *(void *)(v15 - 32) = *(void *)(v16 - 32);
          *(_OWORD *)(v15 - 48) = v19;
          *(void *)(v16 - 40) = 0;
          *(void *)(v16 - 32) = 0;
          *(void *)(v16 - 48) = 0;
          *(void *)(v15 - 24) = 0;
          *(void *)(v15 - 16) = 0;
          *(void *)(v15 - 8) = 0;
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v16 - 24);
          *(void *)(v15 - 8) = *(void *)(v16 - 8);
          v15 -= 72;
          *(void *)(v16 - 24) = 0;
          *(void *)(v16 - 16) = 0;
          *(void *)(v16 - 8) = 0;
          v16 -= 72;
        }
        while (v16 != v17);
        int64x2_t v20 = *a1;
        uint64_t v9 = v28.i64[1];
      }
      a1->i64[0] = v15;
      a1->i64[1] = v9;
      int64x2_t v28 = v20;
      v21 = (void **)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v29;
      v29 = v21;
      char v27 = (void **)v20.i64[0];
      std::__split_buffer<siri::intelligence::FunctionDescription>::~__split_buffer((uint64_t)&v27);
    }
    else
    {
      std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>((std::string *)a1->i64[1], (long long *)&v22);
      uint64_t v9 = v8 + 72;
      a1->i64[1] = v9;
    }
    a1->i64[1] = v9;
    char v27 = (void **)v24;
    std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v27);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
  }
  v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&v22);
}

void sub_239A82EC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25)
{
  std::string __p = &a22;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetFunctionDefinitions(siri::intelligence *this)
{
  v209[3] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_8))
  {
    char v27 = this;
    std::string::basic_string[abi:ne180100]<0>(&v136, "abs");
    v138 = siri::intelligence::FunctionAbs;
    std::string::basic_string[abi:ne180100]<0>(v139, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v133, "value");
    std::string::basic_string[abi:ne180100]<0>(v134, siri::intelligence::TYPE_NUMBER[0]);
    char v135 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v140, (uint64_t)v133, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v141, "sqrt");
    v141[3] = siri::intelligence::FunctionSqrt;
    std::string::basic_string[abi:ne180100]<0>(v142, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v130, "value");
    std::string::basic_string[abi:ne180100]<0>(v131, siri::intelligence::TYPE_NUMBER[0]);
    char v132 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v143, (uint64_t)v130, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v144, "odd");
    v144[3] = siri::intelligence::FunctionOdd;
    std::string::basic_string[abi:ne180100]<0>(v145, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v127, "value");
    std::string::basic_string[abi:ne180100]<0>(v128, siri::intelligence::TYPE_NUMBER[0]);
    char v129 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v146, (uint64_t)v127, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v147, "even");
    v147[3] = siri::intelligence::FunctionEven;
    std::string::basic_string[abi:ne180100]<0>(v148, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v124, "value");
    std::string::basic_string[abi:ne180100]<0>(v125, siri::intelligence::TYPE_NUMBER[0]);
    char v126 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v149, (uint64_t)v124, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v150, "add");
    v150[3] = siri::intelligence::FunctionAdd;
    std::string::basic_string[abi:ne180100]<0>(v151, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v118, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v119, siri::intelligence::TYPE_NUMBER[0]);
    char v120 = 1;
    std::string::basic_string[abi:ne180100]<0>(v121, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v122, siri::intelligence::TYPE_NUMBER[0]);
    char v123 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v152, (uint64_t)v118, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v153, "subtract");
    v153[3] = siri::intelligence::FunctionSubtract;
    std::string::basic_string[abi:ne180100]<0>(v154, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v112, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v113, siri::intelligence::TYPE_NUMBER[0]);
    char v114 = 1;
    std::string::basic_string[abi:ne180100]<0>(v115, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v116, siri::intelligence::TYPE_NUMBER[0]);
    char v117 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v155, (uint64_t)v112, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v156, "multiply");
    v156[3] = siri::intelligence::FunctionMultiply;
    std::string::basic_string[abi:ne180100]<0>(v157, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v106, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v107, siri::intelligence::TYPE_NUMBER[0]);
    char v108 = 1;
    std::string::basic_string[abi:ne180100]<0>(v109, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v110, siri::intelligence::TYPE_NUMBER[0]);
    char v111 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v158, (uint64_t)v106, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v159, "divide");
    v159[3] = siri::intelligence::FunctionDivide;
    std::string::basic_string[abi:ne180100]<0>(v160, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v100, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v101, siri::intelligence::TYPE_NUMBER[0]);
    char v102 = 1;
    std::string::basic_string[abi:ne180100]<0>(v103, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v104, siri::intelligence::TYPE_NUMBER[0]);
    char v105 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v161, (uint64_t)v100, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v162, "min");
    v162[3] = siri::intelligence::FunctionMin;
    std::string::basic_string[abi:ne180100]<0>(v163, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v94, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v95, siri::intelligence::TYPE_NUMBER[0]);
    char v96 = 1;
    std::string::basic_string[abi:ne180100]<0>(v97, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v98, siri::intelligence::TYPE_NUMBER[0]);
    char v99 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v164, (uint64_t)v94, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v165, "max");
    v165[3] = siri::intelligence::FunctionMax;
    std::string::basic_string[abi:ne180100]<0>(v166, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v88, "firstValue");
    std::string::basic_string[abi:ne180100]<0>(v89, siri::intelligence::TYPE_NUMBER[0]);
    char v90 = 1;
    std::string::basic_string[abi:ne180100]<0>(v91, "secondValue");
    std::string::basic_string[abi:ne180100]<0>(v92, siri::intelligence::TYPE_NUMBER[0]);
    char v93 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v167, (uint64_t)v88, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v168, "randomInt");
    v168[3] = siri::intelligence::FunctionRandomInt;
    std::string::basic_string[abi:ne180100]<0>(v169, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v82, "minValue");
    std::string::basic_string[abi:ne180100]<0>(v83, siri::intelligence::TYPE_NUMBER[0]);
    char v84 = 1;
    std::string::basic_string[abi:ne180100]<0>(v85, "maxValue");
    std::string::basic_string[abi:ne180100]<0>(v86, siri::intelligence::TYPE_NUMBER[0]);
    char v87 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v170, (uint64_t)v82, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v171, "upper");
    v171[3] = siri::intelligence::FunctionUpper;
    std::string::basic_string[abi:ne180100]<0>(v172, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v79, "string");
    std::string::basic_string[abi:ne180100]<0>(v80, siri::intelligence::TYPE_STRING[0]);
    char v81 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v173, (uint64_t)v79, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v174, "lower");
    v174[3] = siri::intelligence::FunctionLower;
    std::string::basic_string[abi:ne180100]<0>(v175, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v76, "string");
    std::string::basic_string[abi:ne180100]<0>(v77, siri::intelligence::TYPE_STRING[0]);
    char v78 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v176, (uint64_t)v76, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v177, "startsWith");
    v177[3] = siri::intelligence::FunctionStartsWith;
    std::string::basic_string[abi:ne180100]<0>(v178, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v70, "string");
    std::string::basic_string[abi:ne180100]<0>(v71, siri::intelligence::TYPE_STRING[0]);
    char v72 = 1;
    std::string::basic_string[abi:ne180100]<0>(v73, "prefix");
    std::string::basic_string[abi:ne180100]<0>(v74, siri::intelligence::TYPE_STRING[0]);
    char v75 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v179, (uint64_t)v70, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v180, "endsWith");
    v180[3] = siri::intelligence::FunctionEndsWith;
    std::string::basic_string[abi:ne180100]<0>(v181, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v64, "string");
    std::string::basic_string[abi:ne180100]<0>(v65, siri::intelligence::TYPE_STRING[0]);
    char v66 = 1;
    std::string::basic_string[abi:ne180100]<0>(v67, "suffix");
    std::string::basic_string[abi:ne180100]<0>(v68, siri::intelligence::TYPE_STRING[0]);
    char v69 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v182, (uint64_t)v64, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v183, "contains");
    v183[3] = siri::intelligence::FunctionContains;
    std::string::basic_string[abi:ne180100]<0>(v184, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v58, "haystack");
    std::string::basic_string[abi:ne180100]<0>(v59, siri::intelligence::TYPE_UNKNOWN);
    char v60 = 1;
    std::string::basic_string[abi:ne180100]<0>(v61, "needle");
    std::string::basic_string[abi:ne180100]<0>(v62, siri::intelligence::TYPE_UNKNOWN);
    char v63 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v185, (uint64_t)v58, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v186, "length");
    v186[3] = siri::intelligence::FunctionLength;
    std::string::basic_string[abi:ne180100]<0>(v187, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v55, "variable");
    std::string::basic_string[abi:ne180100]<0>(v56, siri::intelligence::TYPE_UNKNOWN);
    char v57 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v188, (uint64_t)v55, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v189, "arrayIndex");
    v189[3] = siri::intelligence::ArrayIndex;
    std::string::basic_string[abi:ne180100]<0>(v190, siri::intelligence::TYPE_UNKNOWN);
    std::string::basic_string[abi:ne180100]<0>(v49, "variable");
    std::string::basic_string[abi:ne180100]<0>(v50, siri::intelligence::TYPE_ARRAY[0]);
    char v51 = 1;
    std::string::basic_string[abi:ne180100]<0>(v52, "index");
    std::string::basic_string[abi:ne180100]<0>(v53, siri::intelligence::TYPE_NUMBER[0]);
    char v54 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v191, (uint64_t)v49, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v192, "defined");
    v192[3] = siri::intelligence::FunctionDefined;
    std::string::basic_string[abi:ne180100]<0>(v193, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v46, "variable");
    std::string::basic_string[abi:ne180100]<0>(v47, siri::intelligence::TYPE_UNKNOWN);
    char v48 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v194, (uint64_t)v46, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v195, "undefined");
    v195[3] = siri::intelligence::FunctionUndefined;
    std::string::basic_string[abi:ne180100]<0>(v196, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v43, "variable");
    std::string::basic_string[abi:ne180100]<0>(v44, siri::intelligence::TYPE_UNKNOWN);
    char v45 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v197, (uint64_t)v43, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v198, "empty");
    v198[3] = siri::intelligence::FunctionEmpty;
    std::string::basic_string[abi:ne180100]<0>(v199, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v40, "variable");
    std::string::basic_string[abi:ne180100]<0>(v41, siri::intelligence::TYPE_UNKNOWN);
    char v42 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v200, (uint64_t)v40, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v201, "nonempty");
    v201[3] = siri::intelligence::FunctionNonEmpty;
    std::string::basic_string[abi:ne180100]<0>(v202, siri::intelligence::TYPE_BOOLEAN[0]);
    std::string::basic_string[abi:ne180100]<0>(v37, "variable");
    std::string::basic_string[abi:ne180100]<0>(v38, siri::intelligence::TYPE_UNKNOWN);
    char v39 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v203, (uint64_t)v37, 1uLL);
    std::string::basic_string[abi:ne180100]<0>(v204, "directInvocationBuilder");
    v204[3] = siri::intelligence::FunctionDirectInvocationBuilder;
    std::string::basic_string[abi:ne180100]<0>(v205, siri::intelligence::TYPE_STRING[0]);
    std::string::basic_string[abi:ne180100]<0>(v31, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v32, siri::intelligence::TYPE_STRING[0]);
    char v33 = 1;
    std::string::basic_string[abi:ne180100]<0>(v34, "userData");
    std::string::basic_string[abi:ne180100]<0>(v35, siri::intelligence::TYPE_DICTIONARY[0]);
    char v36 = 0;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v206, (uint64_t)v31, 2uLL);
    std::string::basic_string[abi:ne180100]<0>(v207, "visitCount");
    v207[3] = siri::intelligence::FunctionVisitCount;
    std::string::basic_string[abi:ne180100]<0>(v208, siri::intelligence::TYPE_NUMBER[0]);
    std::string::basic_string[abi:ne180100]<0>(v28, "responseId");
    std::string::basic_string[abi:ne180100]<0>(v29, siri::intelligence::TYPE_STRING[0]);
    char v30 = 1;
    std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](v209, (uint64_t)v28, 1uLL);
    std::vector<siri::intelligence::FunctionDefinition>::vector[abi:ne180100](&v136, 0x18uLL);
    for (uint64_t i = 1840; i != -80; i -= 80)
      siri::intelligence::FunctionDefinition::~FunctionDefinition((void **)((char *)&v136 + i));
    siri::intelligence::TestParseError::~TestParseError(v28);
    for (uint64_t j = 7; j != -7; j -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v31[j]);
    siri::intelligence::TestParseError::~TestParseError(v37);
    siri::intelligence::TestParseError::~TestParseError(v40);
    siri::intelligence::TestParseError::~TestParseError(v43);
    siri::intelligence::TestParseError::~TestParseError(v46);
    for (uint64_t k = 7; k != -7; k -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v49[k]);
    siri::intelligence::TestParseError::~TestParseError(v55);
    for (uint64_t m = 7; m != -7; m -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v58[m]);
    for (uint64_t n = 7; n != -7; n -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v64[n]);
    for (iuint64_t i = 7; ii != -7; ii -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v70[ii]);
    siri::intelligence::TestParseError::~TestParseError(v76);
    siri::intelligence::TestParseError::~TestParseError(v79);
    for (juint64_t j = 7; jj != -7; jj -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v82[jj]);
    for (kuint64_t k = 7; kk != -7; kk -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v88[kk]);
    for (muint64_t m = 7; mm != -7; mm -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v94[mm]);
    for (nuint64_t n = 7; nn != -7; nn -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v100[nn]);
    for (uint64_t i1 = 7; i1 != -7; i1 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v106[i1]);
    for (uint64_t i2 = 7; i2 != -7; i2 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v112[i2]);
    for (uint64_t i3 = 7; i3 != -7; i3 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v118[i3]);
    siri::intelligence::TestParseError::~TestParseError(v124);
    siri::intelligence::TestParseError::~TestParseError(v127);
    siri::intelligence::TestParseError::~TestParseError(v130);
    siri::intelligence::TestParseError::~TestParseError(v133);
    __cxa_atexit((void (*)(void *))std::vector<siri::intelligence::FunctionDefinition>::~vector[abi:ne180100], &qword_26AD86908, &dword_239A02000);
    __cxa_guard_release(&_MergedGlobals_8);
    this = v27;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v2 = qword_26AD86908;
  uint64_t v3 = qword_26AD86910;
  v136 = this;
  char v137 = 0;
  if (qword_26AD86910 != qword_26AD86908)
  {
    std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](this, 0xCCCCCCCCCCCCCCCDLL * ((qword_26AD86910 - qword_26AD86908) >> 4));
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 1);
    do
    {
      uint64_t v6 = (std::string *)(v5 + v4);
      unint64_t v7 = (long long *)(v2 + v4);
      if (*(char *)(v2 + v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        v6->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
      }
      *(void *)(v5 + v4 + 24) = *(void *)(v2 + v4 + 24);
      uint64_t v9 = (std::string *)(v5 + v4 + 32);
      unint64_t v10 = (const std::string::value_type **)(v2 + v4 + 32);
      if (*(char *)(v2 + v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *v10, *(void *)(v2 + v4 + 40));
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        *(void *)(v5 + v4 + 48) = *(void *)(v2 + v4 + 48);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      uint64_t v12 = v5 + v4;
      *(void *)(v12 + 56) = 0;
      *(void *)(v12 + 64) = 0;
      unint64_t v13 = (void *)(v5 + v4 + 56);
      v13[2] = 0;
      std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(v13, *(void *)(v2 + v4 + 56), *(void *)(v2 + v4 + 64), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v2 + v4 + 64) - *(void *)(v2 + v4 + 56)) >> 3));
      v4 += 80;
    }
    while (v2 + v4 != v3);
    *((void *)this + 1) = v5 + v4;
  }
}

void sub_239A83F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59)
{
  for (uint64_t i = 1840; i != -80; i -= 80)
    siri::intelligence::FunctionDefinition::~FunctionDefinition((void **)(v59 + i));
  siri::intelligence::TestParseError::~TestParseError(&a10);
  for (uint64_t j = 56; j != -56; j -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a17 + j));
  siri::intelligence::TestParseError::~TestParseError(&a31);
  siri::intelligence::TestParseError::~TestParseError(&a38);
  siri::intelligence::TestParseError::~TestParseError(&a45);
  siri::intelligence::TestParseError::~TestParseError(&a52);
  for (uint64_t k = 56; k != -56; k -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a59 + k));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x200]);
  for (uint64_t m = 56; m != -56; m -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x238] + m));
  for (uint64_t n = 56; n != -56; n -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2A8] + n));
  for (iuint64_t i = 56; ii != -56; ii -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x318] + ii));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x388]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x3C0]);
  for (juint64_t j = 56; jj != -56; jj -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x3F8] + jj));
  for (kuint64_t k = 56; kk != -56; kk -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x468] + kk));
  for (muint64_t m = 56; mm != -56; mm -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x4D8] + mm));
  for (nuint64_t n = 56; nn != -56; nn -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x548] + nn));
  for (uint64_t i1 = 56; i1 != -56; i1 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x5B8] + i1));
  for (uint64_t i2 = 56; i2 != -56; i2 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x628] + i2));
  for (uint64_t i3 = 56; i3 != -56; i3 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x698] + i3));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x708]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x740]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x778]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x7B0]);
  __cxa_guard_abort(&_MergedGlobals_8);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionDescription::~FunctionDescription(void **this)
{
  uint64_t v2 = this + 6;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 47) < 0) {
    operator delete(this[3]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void **std::vector<siri::intelligence::FunctionDefinition>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void siri::intelligence::FunctionHandler::Validate(uint64_t a1, const void **a2, siri::intelligence::ValidationResults *a3, uint64_t a4, uint64_t *a5, uint64_t a6, int a7)
{
  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v145);
  uint64_t v122 = a4;
  unint64_t v10 = (void **)std::__tree<std::string>::find<std::string>((uint64_t)v145, (const void **)a4);
  if (&v146 == v10)
  {
    if (*((char *)a2 + 23) >= 0) {
      size_t v115 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v115 = (size_t)a2[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v144, v115 + 25);
    if ((v144.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v116 = &v144;
    }
    else {
      v116 = (std::string *)v144.__r_.__value_.__r.__words[0];
    }
    if (v115)
    {
      if (*((char *)a2 + 23) >= 0) {
        char v117 = a2;
      }
      else {
        char v117 = *a2;
      }
      memmove(v116, v117, v115);
    }
    strcpy((char *)v116 + v115, "undefined function name: ");
    int v118 = *(char *)(a4 + 23);
    if (v118 >= 0) {
      v119 = (const std::string::value_type *)a4;
    }
    else {
      v119 = *(const std::string::value_type **)a4;
    }
    if (v118 >= 0) {
      std::string::size_type v120 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      std::string::size_type v120 = *(void *)(a4 + 8);
    }
    v121 = std::string::append(&v144, v119, v120);
    std::string v140 = *v121;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_FUNC, (long long *)&v140, a7);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v144.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    long long v11 = v10;
    v125 = a5;
    if (*a5)
    {
      uint64_t v12 = a6 + 312;
      if (!a6) {
        uint64_t v12 = 0;
      }
      uint64_t v124 = v12;
      std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v144, (const void ***)(*a5 + 72));
      std::string::size_type v13 = v144.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v144.__r_.__value_.__l.__data_ != &v144.__r_.__value_.__r.__words[1])
      {
        v14 = "";
        do
        {
          if (*(char *)(v13 + 55) < 0) {
            std::string::__init_copy_ctor_external(&v143, *(const std::string::value_type **)(v13 + 32), *(void *)(v13 + 40));
          }
          else {
            std::string v143 = *(std::string *)(v13 + 32);
          }
          std::string::basic_string[abi:ne180100]<0>(&v140, v14);
          uint64_t v15 = v14;
          std::string::basic_string[abi:ne180100]<0>(&v141, v14);
          char v142 = 1;
          uint64_t v17 = (const std::string *)v11[14];
          unint64_t v16 = (const std::string *)v11[15];
          if (v17 != v16)
          {
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = v143.__r_.__value_.__l.__size_;
            }
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v19 = &v143;
            }
            else {
              long long v19 = (std::string *)v143.__r_.__value_.__r.__words[0];
            }
            do
            {
              uint64_t v20 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
              if ((v20 & 0x80u) == 0) {
                std::string::size_type v21 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v21 = v17->__r_.__value_.__l.__size_;
              }
              if (v21 == size)
              {
                if ((v20 & 0x80) != 0)
                {
                  if (!memcmp(v17->__r_.__value_.__l.__data_, v19, v17->__r_.__value_.__l.__size_))
                  {
LABEL_30:
                    std::string::operator=(&v140, v17);
                    std::string::operator=(&v141, v17 + 1);
                    char v142 = v17[2].__r_.__value_.__s.__data_[0];
                    break;
                  }
                }
                else
                {
                  if (!*((unsigned char *)&v17->__r_.__value_.__s + 23)) {
                    goto LABEL_30;
                  }
                  uint64_t v22 = 0;
                  while (v17->__r_.__value_.__s.__data_[v22] == v19->__r_.__value_.__s.__data_[v22])
                  {
                    if (v20 == ++v22) {
                      goto LABEL_30;
                    }
                  }
                }
              }
              uint64_t v17 = (const std::string *)((char *)v17 + 56);
            }
            while (v17 != v16);
          }
          std::string::size_type v23 = HIBYTE(v140.__r_.__value_.__r.__words[2]);
          if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v23 = v140.__r_.__value_.__l.__size_;
          }
          if (!v23)
          {
            std::string::size_type v26 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type v26 = v143.__r_.__value_.__l.__size_;
            }
            if (v26)
            {
              std::operator+<char>();
              v14 = v15;
            }
            else
            {
              v14 = v15;
              std::string::basic_string[abi:ne180100]<0>(&v139, v15);
            }
            if (*((char *)a2 + 23) >= 0) {
              size_t v32 = *((unsigned __int8 *)a2 + 23);
            }
            else {
              size_t v32 = (size_t)a2[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v137, v32 + 41);
            if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              char v33 = &v137;
            }
            else {
              char v33 = (std::string *)v137.__r_.__value_.__r.__words[0];
            }
            if (v32)
            {
              if (*((char *)a2 + 23) >= 0) {
                v34 = a2;
              }
              else {
                v34 = *a2;
              }
              memmove(v33, v34, v32);
            }
            strcpy((char *)v33 + v32, "defines an unsupported function parameter");
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v35 = &v139;
            }
            else {
              v35 = (std::string *)v139.__r_.__value_.__r.__words[0];
            }
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v36 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v36 = v139.__r_.__value_.__l.__size_;
            }
            v37 = std::string::append(&v137, (const std::string::value_type *)v35, v36);
            std::string __p = *v37;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v37->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNDEF_PARAM, (long long *)&__p, a7);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v137.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v139.__r_.__value_.__l.__data_);
            }
            goto LABEL_211;
          }
          uint64_t v25 = *(void *)(v13 + 56);
          v24 = *(std::__shared_weak_count **)(v13 + 64);
          if (v24) {
            atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v139, v141.__r_.__value_.__l.__data_, v141.__r_.__value_.__l.__size_);
          }
          else {
            std::string v139 = v141;
          }
          size_t v27 = strlen(siri::intelligence::TYPE_UNKNOWN);
          size_t v28 = v27;
          char v29 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v27 != v139.__r_.__value_.__l.__size_)
            {
LABEL_56:
              if (v25) {
                goto LABEL_57;
              }
              goto LABEL_54;
            }
            if (v27 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            char v30 = (std::string *)v139.__r_.__value_.__r.__words[0];
          }
          else
          {
            if (v27 != HIBYTE(v139.__r_.__value_.__r.__words[2])) {
              goto LABEL_56;
            }
            char v30 = &v139;
          }
          BOOL v31 = !memcmp(v30, siri::intelligence::TYPE_UNKNOWN, v28) || v25 == 0;
          if (!v31)
          {
LABEL_57:
            if (*(char *)(v25 + 55) < 0) {
              std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v25 + 32), *(void *)(v25 + 40));
            }
            else {
              std::string __p = *(std::string *)(v25 + 32);
            }
            if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&__p, (unsigned __int8 *)&v139))
            {
              int v38 = 0;
            }
            else
            {
              (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v25 + 96))(&v137, v25, v124);
              int IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v137, (unsigned __int8 *)&v139);
              if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v137.__r_.__value_.__l.__data_);
              }
              int v38 = IsEquivalentType ^ 1;
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(__p.__r_.__value_.__l.__data_);
              if (!v38) {
                goto LABEL_146;
              }
            }
            else if (!v38)
            {
              goto LABEL_146;
            }
            if (*((char *)a2 + 23) >= 0) {
              size_t v40 = *((unsigned __int8 *)a2 + 23);
            }
            else {
              size_t v40 = (size_t)a2[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v131, v40 + 28);
            if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v41 = &v131;
            }
            else {
              v41 = (std::string *)v131.__r_.__value_.__r.__words[0];
            }
            if (v40)
            {
              if (*((char *)a2 + 23) >= 0) {
                char v42 = a2;
              }
              else {
                char v42 = *a2;
              }
              memmove(v41, v42, v40);
            }
            strcpy((char *)v41 + v40, "type mismatch for function '");
            int v43 = *(char *)(v122 + 23);
            if (v43 >= 0) {
              v44 = (const std::string::value_type *)v122;
            }
            else {
              v44 = *(const std::string::value_type **)v122;
            }
            if (v43 >= 0) {
              std::string::size_type v45 = *(unsigned __int8 *)(v122 + 23);
            }
            else {
              std::string::size_type v45 = *(void *)(v122 + 8);
            }
            v46 = std::string::append(&v131, v44, v45);
            long long v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
            v132.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v47;
            v46->__r_.__value_.__l.__size_ = 0;
            v46->__r_.__value_.__r.__words[2] = 0;
            v46->__r_.__value_.__r.__words[0] = 0;
            char v48 = std::string::append(&v132, "': parameter '");
            long long v49 = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
            v133.__r_.__value_.__r.__words[2] = v48->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v49;
            v48->__r_.__value_.__l.__size_ = 0;
            v48->__r_.__value_.__r.__words[2] = 0;
            v48->__r_.__value_.__r.__words[0] = 0;
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v50 = &v143;
            }
            else {
              v50 = (std::string *)v143.__r_.__value_.__r.__words[0];
            }
            if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v51 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v51 = v143.__r_.__value_.__l.__size_;
            }
            v52 = std::string::append(&v133, (const std::string::value_type *)v50, v51);
            long long v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
            v134.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v53;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            char v54 = std::string::append(&v134, "' should be type ");
            long long v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
            v135.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v55;
            v54->__r_.__value_.__l.__size_ = 0;
            v54->__r_.__value_.__r.__words[2] = 0;
            v54->__r_.__value_.__r.__words[0] = 0;
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v56 = &v139;
            }
            else {
              v56 = (std::string *)v139.__r_.__value_.__r.__words[0];
            }
            if ((v139.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v57 = HIBYTE(v139.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v57 = v139.__r_.__value_.__l.__size_;
            }
            v58 = std::string::append(&v135, (const std::string::value_type *)v56, v57);
            long long v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
            v136.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v59;
            v58->__r_.__value_.__l.__size_ = 0;
            v58->__r_.__value_.__r.__words[2] = 0;
            v58->__r_.__value_.__r.__words[0] = 0;
            char v60 = std::string::append(&v136, " but it's type is ");
            long long v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
            v137.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v61;
            v60->__r_.__value_.__l.__size_ = 0;
            v60->__r_.__value_.__r.__words[2] = 0;
            v60->__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v25 + 96))(&v128, v25, v124);
            if ((v130 & 0x80u) == 0) {
              v62 = (const std::string::value_type *)&v128;
            }
            else {
              v62 = (const std::string::value_type *)v128;
            }
            if ((v130 & 0x80u) == 0) {
              std::string::size_type v63 = v130;
            }
            else {
              std::string::size_type v63 = v129;
            }
            v64 = std::string::append(&v137, v62, v63);
            std::string __p = *v64;
            v64->__r_.__value_.__l.__size_ = 0;
            v64->__r_.__value_.__r.__words[2] = 0;
            v64->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&__p, a7);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if ((char)v130 < 0) {
              operator delete(v128);
            }
            if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v137.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v136.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v135.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v134.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v133.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v132.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v131.__r_.__value_.__l.__data_);
            }
LABEL_146:
            if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v140.__r_.__value_.__l.__size_ == 10)
              {
                v65 = (std::string *)v140.__r_.__value_.__r.__words[0];
                goto LABEL_151;
              }
            }
            else if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) == 10)
            {
              v65 = &v140;
LABEL_151:
              std::string::size_type v66 = v65->__r_.__value_.__r.__words[0];
              int v67 = LOWORD(v65->__r_.__value_.__r.__words[1]);
              BOOL v69 = v66 != 0x65736E6F70736572 || v67 != 25673;
              if (a6 && !v69)
              {
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v25 + 56))(&__p, v25);
                if (a6 + 80 == std::__tree<std::string>::find<std::string>(a6 + 72, (const void **)&__p.__r_.__value_.__l.__data_))
                {
                  if (*((char *)a2 + 23) >= 0) {
                    size_t v70 = *((unsigned __int8 *)a2 + 23);
                  }
                  else {
                    size_t v70 = (size_t)a2[1];
                  }
                  std::string::basic_string[abi:ne180100]((uint64_t)&v131, v70 + 21);
                  if ((v131.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v71 = &v131;
                  }
                  else {
                    v71 = (std::string *)v131.__r_.__value_.__r.__words[0];
                  }
                  if (v70)
                  {
                    if (*((char *)a2 + 23) >= 0) {
                      char v72 = a2;
                    }
                    else {
                      char v72 = *a2;
                    }
                    memmove(v71, v72, v70);
                  }
                  strcpy((char *)v71 + v70, "invalid response ID '");
                  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v25 + 56))(&v128, v25);
                  if ((v130 & 0x80u) == 0) {
                    v73 = (const std::string::value_type *)&v128;
                  }
                  else {
                    v73 = (const std::string::value_type *)v128;
                  }
                  if ((v130 & 0x80u) == 0) {
                    std::string::size_type v74 = v130;
                  }
                  else {
                    std::string::size_type v74 = v129;
                  }
                  char v75 = std::string::append(&v131, v73, v74);
                  long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                  v132.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v132.__r_.__value_.__l.__data_ = v76;
                  v75->__r_.__value_.__l.__size_ = 0;
                  v75->__r_.__value_.__r.__words[2] = 0;
                  v75->__r_.__value_.__r.__words[0] = 0;
                  v77 = std::string::append(&v132, "' for function '");
                  long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                  v133.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v133.__r_.__value_.__l.__data_ = v78;
                  v77->__r_.__value_.__l.__size_ = 0;
                  v77->__r_.__value_.__r.__words[2] = 0;
                  v77->__r_.__value_.__r.__words[0] = 0;
                  int v79 = *(char *)(v122 + 23);
                  if (v79 >= 0) {
                    v80 = (const std::string::value_type *)v122;
                  }
                  else {
                    v80 = *(const std::string::value_type **)v122;
                  }
                  if (v79 >= 0) {
                    std::string::size_type v81 = *(unsigned __int8 *)(v122 + 23);
                  }
                  else {
                    std::string::size_type v81 = *(void *)(v122 + 8);
                  }
                  v82 = std::string::append(&v133, v80, v81);
                  long long v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
                  v134.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v134.__r_.__value_.__l.__data_ = v83;
                  v82->__r_.__value_.__l.__size_ = 0;
                  v82->__r_.__value_.__r.__words[2] = 0;
                  v82->__r_.__value_.__r.__words[0] = 0;
                  char v84 = std::string::append(&v134, "' parameter '");
                  long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
                  v135.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v135.__r_.__value_.__l.__data_ = v85;
                  v84->__r_.__value_.__l.__size_ = 0;
                  v84->__r_.__value_.__r.__words[2] = 0;
                  v84->__r_.__value_.__r.__words[0] = 0;
                  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v86 = &v143;
                  }
                  else {
                    v86 = (std::string *)v143.__r_.__value_.__r.__words[0];
                  }
                  if ((v143.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v87 = HIBYTE(v143.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v87 = v143.__r_.__value_.__l.__size_;
                  }
                  v88 = std::string::append(&v135, (const std::string::value_type *)v86, v87);
                  long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                  v136.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v89;
                  v88->__r_.__value_.__l.__size_ = 0;
                  v88->__r_.__value_.__r.__words[2] = 0;
                  v88->__r_.__value_.__r.__words[0] = 0;
                  char v90 = std::string::append(&v136, "'");
                  std::string v137 = *v90;
                  v90->__r_.__value_.__l.__size_ = 0;
                  v90->__r_.__value_.__r.__words[2] = 0;
                  v90->__r_.__value_.__r.__words[0] = 0;
                  siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v137, a7);
                  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v137.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v136.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v135.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v134.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v134.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v133.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v133.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v132.__r_.__value_.__l.__data_);
                  }
                  if ((char)v130 < 0) {
                    operator delete(v128);
                  }
                  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v131.__r_.__value_.__l.__data_);
                  }
                }
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
            }
            if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_209;
            }
            goto LABEL_208;
          }
LABEL_54:
          if ((v29 & 0x80) == 0) {
            goto LABEL_209;
          }
LABEL_208:
          operator delete(v139.__r_.__value_.__l.__data_);
LABEL_209:
          v14 = v15;
          if (v24) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v24);
          }
LABEL_211:
          if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v141.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          v91 = *(std::string **)(v13 + 8);
          if (v91)
          {
            do
            {
              v92 = v91;
              v91 = (std::string *)v91->__r_.__value_.__r.__words[0];
            }
            while (v91);
          }
          else
          {
            do
            {
              v92 = *(std::string **)(v13 + 16);
              BOOL v31 = v92->__r_.__value_.__r.__words[0] == v13;
              std::string::size_type v13 = (std::string::size_type)v92;
            }
            while (!v31);
          }
          std::string::size_type v13 = (std::string::size_type)v92;
        }
        while (v92 != (std::string *)&v144.__r_.__value_.__r.__words[1]);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v144, (void *)v144.__r_.__value_.__l.__size_);
    }
    v94 = (const void **)v11[14];
    for (uint64_t i = (const void **)v11[15]; v94 != i; v94 += 7)
    {
      if (*((unsigned char *)v94 + 48))
      {
        uint64_t v95 = *a5;
        if (!*a5) {
          goto LABEL_231;
        }
        uint64_t v96 = std::__tree<std::string>::find<std::string>(v95 + 72, v94);
        if (v95 + 80 == v96) {
          goto LABEL_231;
        }
        uint64_t v98 = *(void *)(v96 + 56);
        v97 = *(std::__shared_weak_count **)(v96 + 64);
        if (v97)
        {
          atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v97);
        }
        if (!v98)
        {
LABEL_231:
          if (*((char *)a2 + 23) >= 0) {
            size_t v99 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v99 = (size_t)a2[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&__p, v99 + 9);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v99)
          {
            if (*((char *)a2 + 23) >= 0) {
              v101 = a2;
            }
            else {
              v101 = *a2;
            }
            memmove(p_p, v101, v99);
          }
          strcpy((char *)p_p + v99, "function ");
          int v102 = *((char *)v11 + 79);
          if (v102 >= 0) {
            v103 = (const std::string::value_type *)(v11 + 7);
          }
          else {
            v103 = (const std::string::value_type *)v11[7];
          }
          if (v102 >= 0) {
            std::string::size_type v104 = *((unsigned __int8 *)v11 + 79);
          }
          else {
            std::string::size_type v104 = (std::string::size_type)v11[8];
          }
          char v105 = std::string::append(&__p, v103, v104);
          long long v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
          v139.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v139.__r_.__value_.__l.__data_ = v106;
          v105->__r_.__value_.__l.__size_ = 0;
          v105->__r_.__value_.__r.__words[2] = 0;
          v105->__r_.__value_.__r.__words[0] = 0;
          v107 = std::string::append(&v139, " does not define the required function parameter: '");
          a5 = v125;
          long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
          v143.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v143.__r_.__value_.__l.__data_ = v108;
          v107->__r_.__value_.__l.__size_ = 0;
          v107->__r_.__value_.__r.__words[2] = 0;
          v107->__r_.__value_.__r.__words[0] = 0;
          int v109 = *((char *)v94 + 23);
          if (v109 >= 0) {
            v110 = (const std::string::value_type *)v94;
          }
          else {
            v110 = (const std::string::value_type *)*v94;
          }
          if (v109 >= 0) {
            std::string::size_type v111 = *((unsigned __int8 *)v94 + 23);
          }
          else {
            std::string::size_type v111 = (std::string::size_type)v94[1];
          }
          v112 = std::string::append(&v143, v110, v111);
          long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
          v144.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v144.__r_.__value_.__l.__data_ = v113;
          v112->__r_.__value_.__l.__size_ = 0;
          v112->__r_.__value_.__r.__words[2] = 0;
          v112->__r_.__value_.__r.__words[0] = 0;
          char v114 = std::string::append(&v144, "'");
          std::string v140 = *v114;
          v114->__r_.__value_.__l.__size_ = 0;
          v114->__r_.__value_.__r.__words[2] = 0;
          v114->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_PARAM, (long long *)&v140, a7);
          if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v140.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v144.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v144.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v143.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v139.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v146);
}

void sub_239A85C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,uint64_t a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  if (a71 < 0) {
    operator delete(__p);
  }
  if (a64 < 0) {
    operator delete(a59);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a73 < 0) {
    operator delete(a72);
  }
  if (a75 < 0) {
    operator delete(a74);
  }
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  siri::intelligence::TestParseError::~TestParseError((void **)(v76 - 240));
  if (*(char *)(v76 - 153) < 0) {
    operator delete(*(void **)(v76 - 176));
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy(v76 - 144, *(void **)(v76 - 136));
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*(void **)(v76 - 104));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::GetFunctionDefinitionsMap(siri::intelligence *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86900, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD86900))
  {
    qword_26AD86930 = 0;
    qword_26AD86928 = 0;
    qword_26AD86920 = (uint64_t)&qword_26AD86928;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::intelligence::FunctionDefinition>::~map[abi:ne180100], &qword_26AD86920, &dword_239A02000);
    __cxa_guard_release(&qword_26AD86900);
  }
  if (qword_26AD86930)
  {
    return std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100]((uint64_t)this);
  }
  else
  {
    siri::intelligence::GetFunctionDefinitions((siri::intelligence *)&v10);
    uint64_t v3 = (uint64_t *)v10;
    uint64_t v4 = v11;
    if (v10 != v11)
    {
      do
      {
        uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&qword_26AD86920, &v14, (const void **)v3);
        uint64_t v6 = *v5;
        if (!*v5)
        {
          unint64_t v7 = v5;
          long long v8 = (char *)operator new(0x88uLL);
          uint64_t v6 = (uint64_t *)v8;
          v12[0] = (void **)v8;
          v12[1] = (void **)&qword_26AD86928;
          char v13 = 0;
          if (*((char *)v3 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v8 + 32), (const std::string::value_type *)*v3, v3[1]);
          }
          else
          {
            long long v9 = *(_OWORD *)v3;
            *((void *)v8 + 6) = v3[2];
            *((_OWORD *)v8 + 2) = v9;
          }
          *(_OWORD *)(v6 + 7) = 0u;
          *(_OWORD *)(v6 + 13) = 0u;
          *(_OWORD *)(v6 + 15) = 0u;
          *(_OWORD *)(v6 + 9) = 0u;
          *(_OWORD *)(v6 + 11) = 0u;
          std::string::basic_string[abi:ne180100]<0>(v6 + 7, "");
          v6[10] = 0;
          std::string::basic_string[abi:ne180100]<0>(v6 + 11, siri::intelligence::TYPE_UNKNOWN);
          v6[14] = 0;
          v6[15] = 0;
          v6[16] = 0;
          char v13 = 1;
          std::__tree<std::string>::__insert_node_at((uint64_t **)&qword_26AD86920, v14, v7, v6);
          v12[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
        }
        std::string::operator=((std::string *)(v6 + 7), (const std::string *)v3);
        v6[10] = v3[3];
        std::string::operator=((std::string *)(v6 + 11), (const std::string *)(v3 + 4));
        if (v3 != v6 + 7) {
          std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)(v6 + 14), (std::string *)v3[7], (std::string *)v3[8], 0x6DB6DB6DB6DB6DB7 * ((v3[8] - v3[7]) >> 3));
        }
        v3 += 10;
      }
      while (v3 != (uint64_t *)v4);
    }
    v12[0] = (void **)&v10;
    std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](v12);
    return std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100]((uint64_t)this);
  }
}

void sub_239A86214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v8 = va_arg(va2, void **);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v8, va);
  std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::map<std::string,siri::intelligence::FunctionDefinition>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

void siri::intelligence::FunctionHandler::GetReturnType(const void **a1@<X1>, uint64_t *a2@<X2>, std::string *a3@<X8>)
{
  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v31);
  uint64_t v6 = std::__tree<std::string>::find<std::string>((uint64_t)v31, a1);
  if (&v32 == (void **)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(a3, siri::intelligence::TYPE_UNKNOWN);
    goto LABEL_15;
  }
  uint64_t v7 = v6;
  uint64_t v8 = v6 + 56;
  int v9 = *(char *)(v6 + 79);
  if (v9 < 0)
  {
    if (*(void *)(v6 + 64) != 10) {
      goto LABEL_12;
    }
    uint64_t v8 = *(void *)v8;
  }
  else if (v9 != 10)
  {
LABEL_12:
    if (*(char *)(v7 + 111) < 0)
    {
      std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v7 + 88), *(void *)(v7 + 96));
    }
    else
    {
      long long v13 = *(_OWORD *)(v7 + 88);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v7 + 104);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
    goto LABEL_15;
  }
  uint64_t v10 = *(void *)v8;
  int v11 = *(unsigned __int16 *)(v8 + 8);
  if (v10 != 0x646E497961727261 || v11 != 30821) {
    goto LABEL_12;
  }
  uint64_t v14 = *a2;
  if (!v14) {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v15 = std::__tree<std::string>::find<std::string>(v14 + 72, (const void **)__p);
  uint64_t v16 = v15;
  if (v14 + 80 == v15)
  {
    uint64_t v22 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    uint64_t v17 = *(const void **)(v15 + 56);
    long long v18 = *(std::__shared_weak_count **)(v16 + 64);
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v17
    {
      std::string::size_type v21 = 0;
      uint64_t v20 = 0;
      uint64_t v22 = 0;
      if (!v18) {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
    uint64_t v20 = v19;
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::string::size_type v21 = v18;
LABEL_25:
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      uint64_t v22 = v21;
      goto LABEL_27;
    }
    uint64_t v22 = 0;
  }
LABEL_27:
  if (v30 < 0) {
    operator delete(__p[0]);
  }
  if (!v20) {
    goto LABEL_42;
  }
  if ((*(uint64_t (**)(void *))(*v20 + 40))(v20)) {
    goto LABEL_42;
  }
  std::string::size_type v23 = (uint64_t *)v20[9];
  if ((int)((v20[10] - (void)v23) >> 4) < 1) {
    goto LABEL_42;
  }
  uint64_t v25 = *v23;
  v24 = (std::__shared_weak_count *)v23[1];
  if (!v24)
  {
    if (v25)
    {
LABEL_38:
      uint64_t v26 = *v23;
      size_t v27 = (std::__shared_weak_count *)v23[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      goto LABEL_40;
    }
LABEL_42:
    if (v22) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  if (!v25) {
    goto LABEL_42;
  }
  std::string::size_type v23 = (uint64_t *)v20[9];
  if ((int)((v20[10] - (void)v23) >> 4) >= 1) {
    goto LABEL_38;
  }
  uint64_t v26 = 0;
  size_t v27 = 0;
LABEL_40:
  if (*(char *)(v26 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a3, *(const std::string::value_type **)(v26 + 32), *(void *)(v26 + 40));
  }
  else
  {
    long long v28 = *(_OWORD *)(v26 + 32);
    a3->__r_.__value_.__r.__words[2] = *(void *)(v26 + 48);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v28;
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_15:
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v32);
}

void sub_239A86578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16)
{
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a16);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionHandler::Execute(uint64_t a1@<X1>, void *a2@<X2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  void (*v23)(void **__return_ptr);
  void **v24;
  const char *v25;
  uint64_t v26;
  void **v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unsigned char v34[8];
  void *v35;

  siri::intelligence::GetFunctionDefinitionsMap((siri::intelligence *)v34);
  uint64_t v8 = std::__tree<std::string>::find<std::string>((uint64_t)v34, (const void **)a1);
  if (&v35 == (void **)v8) {
    goto LABEL_33;
  }
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 + 112);
  uint64_t v11 = *(void *)(v8 + 120);
  if (v10 == v11) {
    goto LABEL_20;
  }
  char v12 = 1;
  do
  {
    while (*(unsigned char *)(v10 + 48))
    {
      uint64_t v13 = *a2;
      if (!*a2) {
        break;
      }
      uint64_t v14 = std::__tree<std::string>::find<std::string>(v13 + 72, (const void **)v10);
      if (v13 + 80 != v14)
      {
        uint64_t v17 = *(void *)(v14 + 56);
        uint64_t v16 = *(std::__shared_weak_count **)(v14 + 64);
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v17) {
          break;
        }
      }
      long long v18 = (const void *)v10;
      if (*(char *)(v10 + 23) < 0) {
        long long v18 = *(const void **)v10;
      }
      if (*(char *)(a1 + 23) >= 0) {
        long long v19 = (const void *)a1;
      }
      else {
        long long v19 = *(const void **)a1;
      }
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Required parameter '%s' not provided for function '%s'. Function will have no effect.", v15, v18, v19);
      char v12 = 0;
      v10 += 56;
      if (v10 == v11) {
        goto LABEL_33;
      }
    }
    v10 += 56;
  }
  while (v10 != v11);
  if (v12)
  {
LABEL_20:
    uint64_t v20 = *(void (**)(uint64_t *, uint64_t))(v9 + 80);
    std::string::size_type v21 = (std::__shared_weak_count *)a2[1];
    size_t v32 = *a2;
    char v33 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v20(&v32, a3);
    if (v33) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v33);
    }
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v22 = (const void *)a1;
    }
    else {
      uint64_t v22 = *(const void **)a1;
    }
    std::string::size_type v23 = *(void (**)(void **__return_ptr))(*(void *)*a2 + 56);
    v24 = v30;
    v23(v30);
    if (v31 < 0) {
      v24 = (void **)v30[0];
    }
    uint64_t v26 = *a4;
    if (*a4)
    {
      (*(void (**)(void **__return_ptr, void))(*(void *)v26 + 56))(__p, *a4);
      if (v29 >= 0) {
        size_t v27 = __p;
      }
      else {
        size_t v27 = (void **)__p[0];
      }
    }
    else
    {
      size_t v27 = (void **)"nullptr";
    }
    siri::intelligence::Log::Debug((siri::intelligence::Log *)"Executing function %s(%s) -> %s", v25, v22, v24, v27);
    if (v26 && v29 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(v30[0]);
    }
  }
  else
  {
LABEL_33:
    *a4 = 0;
    a4[1] = 0;
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(v35);
}

void sub_239A8681C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  char v29 = *(std::__shared_weak_count **)(v27 + 8);
  if (v29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v29);
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a27);
  _Unwind_Resume(a1);
}

void siri::intelligence::FunctionAbs(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      double v8 = fabs((*(double (**)(uint64_t))(*(void *)v7 + 72))(v7));
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v8, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "abs");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A869A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<siri::intelligence::FunctionArgument>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v6 = 0;
    uint64_t v7 = a1[1];
    uint64_t v8 = 56 * a3;
    do
    {
      uint64_t v9 = (std::string *)(v7 + v6);
      char v10 = (long long *)(a2 + v6);
      if (*(char *)(a2 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((void *)v10 + 1));
      }
      else
      {
        long long v11 = *v10;
        v9->__r_.__value_.__r.__words[2] = *((void *)v10 + 2);
        *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
      }
      char v12 = (std::string *)(v7 + v6 + 24);
      uint64_t v13 = (const std::string::value_type **)(a2 + v6 + 24);
      if (*(char *)(a2 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v12, *v13, *(void *)(a2 + v6 + 32));
      }
      else
      {
        long long v14 = *(_OWORD *)v13;
        *(void *)(v7 + v6 + 40) = *(void *)(a2 + v6 + 40);
        *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v14;
      }
      *(unsigned char *)(v7 + v6 + 48) = *(unsigned char *)(a2 + v6 + 48);
      v6 += 56;
    }
    while (v8 != v6);
    a1[1] = v7 + v6;
  }
  return a1;
}

void sub_239A86AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

double siri::intelligence::FunctionSqrt@<D0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v13 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_10:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "sqrt");
LABEL_11:
    *a2 = 0;
    a2[1] = 0;
    if (!v6) {
      return result;
    }
    goto LABEL_12;
  }
  operator delete(__p[0]);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  double v9 = (*(double (**)(uint64_t))(*(void *)v7 + 72))(v7);
  if (v9 == 0.0)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Function '%s' was passed an illegal value of 0", v8, "sqrt");
    goto LABEL_11;
  }
  double v11 = sqrt(v9);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v11, __p);
  double result = *(double *)__p;
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (!v6) {
    return result;
  }
LABEL_12:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  return result;
}

void sub_239A86C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionOdd(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      double v8 = (*(double (**)(uint64_t))(*(void *)v7 + 72))(v7);
      char v9 = (v8 == (double)(int)v8) & (int)v8;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(__p, &v9);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "odd");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A86DB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionEven(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "value");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v12 & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_14:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "value", "even");
    *a2 = 0;
    a2[1] = 0;
    if (!v6) {
      return;
    }
    goto LABEL_11;
  }
  operator delete(__p[0]);
  if (!v7) {
    goto LABEL_14;
  }
LABEL_7:
  double v8 = (*(double (**)(uint64_t))(*(void *)v7 + 72))(v7);
  BOOL v9 = ((int)v8 & 1) == 0 && v8 == (double)(int)v8;
  BOOL v10 = v9;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(__p, (char *)&v10);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (v6) {
LABEL_11:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A86F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionAdd(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "add");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_15:
      double v14 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      double v15 = v14 + (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v15, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "add");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_17:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A87134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionSubtract(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "subtract");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_15:
      double v14 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      double v15 = v14 - (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v15, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "subtract");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_17:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A87384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionMultiply(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "multiply");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_17;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_15:
      double v14 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      double v15 = v14 * (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v15, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v12) {
        goto LABEL_17;
      }
      goto LABEL_16;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "multiply");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_16:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_17:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A875D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionDivide(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "divide");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_21;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v13) {
      goto LABEL_15;
    }
LABEL_18:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "divide");
LABEL_19:
    *a2 = 0;
    a2[1] = 0;
    if (!v12) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if (!v13) {
    goto LABEL_18;
  }
LABEL_15:
  double v14 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
  double v16 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
  if (v16 == 0.0)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to divide a number by zero", v15);
    goto LABEL_19;
  }
  double v17 = v14 / v16;
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>("", &v17, __p);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  if (v12) {
LABEL_20:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_21:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A8783C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionMin(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v18 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "min");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_15:
      double v16 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      double v15 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      if (v15 >= v16) {
        double v14 = &v16;
      }
      else {
        double v14 = &v15;
      }
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(__p, v14);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (v12) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "min");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_20:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A87A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionMax(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "firstValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v18 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "firstValue", "max");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "secondValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (v13)
    {
LABEL_15:
      double v16 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      double v15 = (*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      if (v16 >= v15) {
        double v14 = &v16;
      }
      else {
        double v14 = &v15;
      }
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(__p, v14);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (v12) {
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "secondValue", "max");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_20:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A87CEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionRandomInt(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "minValue");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "minValue", "randomInt");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_25;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "maxValue");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v9 + 80 == v10)
  {
    char v12 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13)
    {
LABEL_15:
      double v14 = (*(double (**)(uint64_t))(*(void *)v8 + 72))(v8);
      int v15 = (int)(*(double (**)(uint64_t))(*(void *)v13 + 72))(v13);
      if (v15 < 1) {
        double v16 = 0.0;
      }
      else {
        double v16 = (double)(int)v14
      }
            + (double)(uint64_t)(erand48((unsigned __int16 *)&siri::intelligence::Utils::sRandomNumberGeneratorState)
                              * (double)(v15 - (int)v14 + 1));
      double v17 = operator new(0x68uLL);
      v17[1] = 0;
      v17[2] = 0;
      void *v17 = &unk_26ED291C0;
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v17 + 3), &__p, v16);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      *a2 = v17 + 3;
      a2[1] = v17;
      if (v12) {
        goto LABEL_24;
      }
      goto LABEL_25;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "maxValue", "randomInt");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_24:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_25:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A87FC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A88048(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x239A88040);
}

void siri::intelligence::FunctionUpper(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v10, "string");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)v10);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (v7) {
      goto LABEL_7;
    }
LABEL_12:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "string", "upper");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_13;
  }
  if (!v7) {
    goto LABEL_12;
  }
LABEL_7:
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 56))(v10, v7);
  siri::intelligence::StringToUpper((uint64_t)v10, &__p);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>("", &__p, &v9);
  *(_OWORD *)a2 = v9;
  long long v9 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
LABEL_13:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_239A881A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionLower(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(v10, "string");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)v10);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v11 < 0)
  {
    operator delete(v10[0]);
    if (v7) {
      goto LABEL_7;
    }
LABEL_12:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "string", "lower");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_13;
  }
  if (!v7) {
    goto LABEL_12;
  }
LABEL_7:
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v7 + 56))(v10, v7);
  siri::intelligence::StringToLower((uint64_t)v10, &__p);
  std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>("", &__p, &v9);
  *(_OWORD *)a2 = v9;
  long long v9 = 0uLL;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
LABEL_13:
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_239A88344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionStartsWith(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "string");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "string", "startsWith");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_23;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "prefix");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_15;
    }
  }
  else if (v13)
  {
LABEL_15:
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v8 + 56))(&__p, v8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 56))(v16, v13);
    BOOL v14 = siri::intelligence::StringStartsWith(&__p, (unsigned __int8 *)v16);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)&v14, &v15);
    *(_OWORD *)a2 = v15;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "prefix", "startsWith");
  *a2 = 0;
  a2[1] = 0;
LABEL_21:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_23:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A885B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionEndsWith(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "string");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "string", "endsWith");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_23;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "suffix");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v13) {
      goto LABEL_15;
    }
  }
  else if (v13)
  {
LABEL_15:
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v8 + 56))(&__p, v8);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v13 + 56))(v16, v13);
    BOOL v14 = siri::intelligence::StringEndsWith(&__p, (unsigned __int8 *)v16);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)&v14, &v15);
    *(_OWORD *)a2 = v15;
    if (v17 < 0) {
      operator delete(v16[0]);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_21;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "suffix", "endsWith");
  *a2 = 0;
  a2[1] = 0;
LABEL_21:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_23:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A88854(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (v28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  }
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionContains(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "haystack");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__first_);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(__p.__end_) & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "haystack", "contains");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_62;
  }
  operator delete(__p.__first_);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "needle");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)&__p.__first_);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(void *)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__end_) < 0)
  {
    operator delete(__p.__first_);
    if (v13)
    {
LABEL_15:
      if (*(char *)(v8 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&__p, *(const std::string::value_type **)(v8 + 32), *(void *)(v8 + 40));
      }
      else
      {
        *(_OWORD *)&__p.__first_ = *(_OWORD *)(v8 + 32);
        __p.__end_ = *(std::__split_buffer<std::string>::pointer *)(v8 + 48);
      }
      BOOL v14 = (std::string *)strlen(siri::intelligence::TYPE_ARRAY[0]);
      if (SHIBYTE(__p.__end_) < 0)
      {
        if (v14 == __p.__begin_)
        {
          if (v14 == (std::string *)-1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          std::__split_buffer<std::string>::pointer first = __p.__first_;
          int v16 = memcmp(__p.__first_, siri::intelligence::TYPE_ARRAY[0], (size_t)v14);
          operator delete(first);
          if (!v16) {
            goto LABEL_27;
          }
        }
        else
        {
          operator delete(__p.__first_);
        }
      }
      else if (v14 == (std::string *)HIBYTE(__p.__end_) {
             && !memcmp(&__p, siri::intelligence::TYPE_ARRAY[0], (size_t)v14))
      }
      {
LABEL_27:
        memset(&v36, 0, sizeof(v36));
        char v18 = 0;
        if (v7 && v17)
        {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          char v18 = v7;
        }
        long long v34 = 0uLL;
        uint64_t v35 = 0;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(&v34, v17[9], v17[10], ((char *)v17[10] - (char *)v17[9]) >> 4);
        if (v18) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v18);
        }
        uint64_t v20 = (uint64_t *)*((void *)&v34 + 1);
        for (uint64_t i = (uint64_t *)v34; i != v20; i += 2)
        {
          uint64_t v21 = *i;
          uint64_t v22 = (std::__shared_weak_count *)i[1];
          if (v22) {
            atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v21)
          {
            (*(void (**)(void **__return_ptr))(*(void *)v21 + 56))(v32);
            std::vector<std::string>::pointer end = v36.__end_;
            if (v36.__end_ >= v36.__end_cap_.__value_)
            {
              unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_ - (char *)v36.__begin_) >> 3);
              unint64_t v26 = v25 + 1;
              if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
              }
              if (0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) > v26) {
                unint64_t v26 = 0x5555555555555556 * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * (((char *)v36.__end_cap_.__value_ - (char *)v36.__begin_) >> 3) >= 0x555555555555555) {
                unint64_t v27 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v27 = v26;
              }
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v36.__end_cap_;
              if (v27) {
                long long v28 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v36.__end_cap_, v27);
              }
              else {
                long long v28 = 0;
              }
              char v29 = v28 + v25;
              __p.__first_ = v28;
              __p.__begin_ = v29;
              __p.__end_cap_.__value_ = &v28[v27];
              long long v30 = *(_OWORD *)v32;
              v29->__r_.__value_.__r.__words[2] = v33;
              *(_OWORD *)&v29->__r_.__value_.__l.__data_ = v30;
              v32[1] = 0;
              std::string::size_type v33 = 0;
              v32[0] = 0;
              __p.__end_ = v29 + 1;
              std::vector<std::string>::__swap_out_circular_buffer(&v36, &__p);
              BOOL v31 = v36.__end_;
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              v36.__end_ = v31;
              if (SHIBYTE(v33) < 0) {
                operator delete(v32[0]);
              }
            }
            else
            {
              long long v24 = *(_OWORD *)v32;
              v36.__end_->__r_.__value_.__r.__words[2] = v33;
              *(_OWORD *)&end->__r_.__value_.__l.__data_ = v24;
              v36.__end_ = end + 1;
            }
          }
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
        __p.__first_ = (std::__split_buffer<std::string>::pointer)&v34;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v13 + 56))(&__p, v13);
        LOBYTE(v32[0]) = siri::intelligence::VectorContains((const std::string **)&v36.__begin_, (const std::string *)&__p);
        std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", (char *)v32, &v34);
        *(_OWORD *)a2 = v34;
        if (SHIBYTE(__p.__end_) < 0) {
          operator delete(__p.__first_);
        }
        __p.__first_ = (std::__split_buffer<std::string>::pointer)&v36;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
        goto LABEL_60;
      }
      (*(void (**)(std::__split_buffer<std::string> *__return_ptr, uint64_t))(*(void *)v8 + 56))(&__p, v8);
      (*(void (**)(std::vector<std::string> *__return_ptr, uint64_t))(*(void *)v13 + 56))(&v36, v13);
      char v38 = siri::intelligence::StringContains((char **)&__p, (char *)&v36);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v38, &v34);
      *(_OWORD *)a2 = v34;
      if (SHIBYTE(v36.__end_cap_.__value_) < 0) {
        operator delete(v36.__begin_);
      }
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      goto LABEL_60;
    }
  }
  else if (v13)
  {
    goto LABEL_15;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "needle", "contains");
  *a2 = 0;
  a2[1] = 0;
LABEL_60:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
LABEL_62:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A88E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  a12 = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  _Unwind_Resume(a1);
}

void sub_239A88F58(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x239A88F50);
}

void siri::intelligence::FunctionLength(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "variable");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v3 + 80 == v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v7) {
      goto LABEL_7;
    }
LABEL_10:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "length");
    *a2 = 0;
    a2[1] = 0;
    if (!v6) {
      return;
    }
    goto LABEL_67;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v7) {
    goto LABEL_10;
  }
LABEL_7:
  uint64_t v8 = (_OWORD *)(v7 + 32);
  if (*(char *)(v7 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 48);
  }
  size_t v9 = strlen(siri::intelligence::TYPE_ARRAY[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v9 == __p.__r_.__value_.__l.__size_)
    {
      if (v9 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
      int v11 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_ARRAY[0], v9);
      operator delete(v10);
      if (!v11) {
        goto LABEL_20;
      }
    }
    else
    {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
LABEL_24:
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 48);
    }
    size_t v14 = strlen(siri::intelligence::TYPE_STRING[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v14 == __p.__r_.__value_.__l.__size_)
      {
        if (v14 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        long long v15 = (void *)__p.__r_.__value_.__r.__words[0];
        int v16 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_STRING[0], v14);
        operator delete(v15);
        if (!v16) {
          goto LABEL_34;
        }
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v14 == HIBYTE(__p.__r_.__value_.__r.__words[2]) && !memcmp(&__p, siri::intelligence::TYPE_STRING[0], v14))
    {
LABEL_34:
      char v18 = 0;
      if (v6 && v17)
      {
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        char v18 = v6;
      }
      if (v17[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v17 + 9), *((void *)v17 + 10));
      }
      else {
        std::string __p = *(std::string *)(v17 + 3);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        LODWORD(v13) = __p.__r_.__value_.__r.__words[1];
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v18) {
          goto LABEL_64;
        }
      }
      else
      {
        LODWORD(v13) = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if (!v18) {
          goto LABEL_64;
        }
      }
      std::string::size_type v23 = v18;
LABEL_63:
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
      goto LABEL_64;
    }
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v8;
      __p.__r_.__value_.__r.__words[2] = *(void *)(v7 + 48);
    }
    size_t v19 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v19 == __p.__r_.__value_.__l.__size_)
      {
        if (v19 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v20 = (void *)__p.__r_.__value_.__r.__words[0];
        int v21 = memcmp(__p.__r_.__value_.__l.__data_, siri::intelligence::TYPE_DICTIONARY[0], v19);
        operator delete(v20);
        if (!v21) {
          goto LABEL_50;
        }
      }
      else
      {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else if (v19 == HIBYTE(__p.__r_.__value_.__r.__words[2]) {
           && !memcmp(&__p, siri::intelligence::TYPE_DICTIONARY[0], v19))
    }
    {
LABEL_50:
      if (!v6 || !v22)
      {
        LODWORD(v13) = v22[22];
        goto LABEL_64;
      }
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
      LODWORD(v13) = v22[22];
      std::string::size_type v23 = v6;
      goto LABEL_63;
    }
    LODWORD(v13) = 0;
    goto LABEL_64;
  }
  if (v9 != HIBYTE(__p.__r_.__value_.__r.__words[2]) || memcmp(&__p, siri::intelligence::TYPE_ARRAY[0], v9)) {
    goto LABEL_24;
  }
LABEL_20:
  if (v6 && v12)
  {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v13 = (v12[10] - v12[9]) >> 4;
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  else
  {
    uint64_t v13 = (v12[10] - v12[9]) >> 4;
  }
LABEL_64:
  long long v24 = operator new(0x68uLL);
  v24[1] = 0;
  v24[2] = 0;
  void *v24 = &unk_26ED291C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v24 + 3), &__p, (double)(int)v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a2 = v24 + 3;
  a2[1] = v24;
  if (v6) {
LABEL_67:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A89464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ArrayIndex(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)__p);
  if (v4 + 80 == v5)
  {
    uint64_t v8 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v8 = *(const void **)(v5 + 56);
    uint64_t v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if ((v20 & 0x80000000) == 0)
  {
    if (v8) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v6, "variable", "arrayIndex");
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_30;
  }
  operator delete(__p[0]);
  if (!v8) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "index");
  uint64_t v10 = std::__tree<std::string>::find<std::string>(v9 + 72, (const void **)__p);
  if (v9 + 80 == v10)
  {
    uint64_t v13 = 0;
    char v12 = 0;
  }
  else
  {
    uint64_t v13 = *(const void **)(v10 + 56);
    char v12 = *(std::__shared_weak_count **)(v10 + 64);
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v13) {
      goto LABEL_15;
    }
  }
  else if (v13)
  {
LABEL_15:
    uint64_t v15 = (uint64_t)v14;
    int v16 = 0;
    if (v7 && v14)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      int v16 = v7;
    }
    if (!v17) {
      goto LABEL_24;
    }
    char v18 = v17;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v17 = v12;
    if (v15)
    {
      siri::intelligence::VariableArray::GetItem(v15, (int)*(double *)&v18[3].__vftable, a2);
      char v17 = v12;
      if (!v12)
      {
LABEL_26:
        if (v16) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v16);
        }
        if (v12) {
          goto LABEL_29;
        }
        goto LABEL_30;
      }
    }
    else
    {
LABEL_24:
      *a2 = 0;
      a2[1] = 0;
      if (!v17) {
        goto LABEL_26;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    goto LABEL_26;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v11, "index", "arrayIndex");
  *a2 = 0;
  a2[1] = 0;
  if (v12) {
LABEL_29:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_30:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_239A89758(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionDefined(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v8, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "defined");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A898CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionUndefined(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7) ^ 1;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v8, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "undefined");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A89A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionEmpty(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7);
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v8, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "empty");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A89B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionNonEmpty(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "variable");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v4 + 56);
    uint64_t v6 = *(std::__shared_weak_count **)(v4 + 64);
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v10 < 0)
  {
    operator delete(__p[0]);
    if (v7)
    {
LABEL_7:
      char v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 40))(v7) ^ 1;
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>("", &v8, __p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      if (!v6) {
        return;
      }
      goto LABEL_8;
    }
  }
  else if (v7)
  {
    goto LABEL_7;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v5, "variable", "nonempty");
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  if (!v6) {
    return;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_239A89CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::FunctionDirectInvocationBuilder(uint64_t *a1@<X0>, std::__shared_weak_count *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "identifier");
  uint64_t v7 = std::__tree<std::string>::find<std::string>(v6 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v6 + 80 == v7)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_7;
    }
LABEL_11:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v8, "identifier", "directInvocationBuilder");
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_43;
  }
  if (!v10) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "userData");
  uint64_t v12 = std::__tree<std::string>::find<std::string>(v11 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v11 + 80 == v12)
  {
    size_t v14 = 0;
    uint64_t v13 = 0;
  }
  else
  {
    size_t v14 = *(std::__shared_weak_count **)(v12 + 56);
    uint64_t v13 = *(std::__shared_weak_count **)(v12 + 64);
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  memset(&v24, 0, sizeof(v24));
  if (a2)
  {
    shared_weak_owners = (uint64_t *)a2[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      uint64_t v16 = *shared_weak_owners;
      uint64_t v17 = *(void *)(v16 + 232);
      a2 = *(std::__shared_weak_count **)(v16 + 240);
      if (a2) {
        atomic_fetch_add_explicit(&a2->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v17)
      {
        if (v14)
        {
          if (v18 && v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            size_t v14 = v13;
          }
          else
          {
            size_t v14 = 0;
          }
        }
        else
        {
          char v18 = 0;
        }
        (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v10 + 56))(v22, v10);
        char v20 = v18;
        int v21 = v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::intelligence::Callbacks::InvokeDirectInvocationBuilder(v17, (const char *)v22, (uint64_t *)&v20, &__p);
        std::string v24 = __p;
        *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
        __p.__r_.__value_.__s.__data_[0] = 0;
        if (v21) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v21);
        }
        if (v23 < 0) {
          operator delete(v22[0]);
        }
        if (v14) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
      }
    }
    else
    {
      a2 = 0;
    }
  }
  size_t v19 = (std::string *)operator new(0x78uLL);
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED27560;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableString::VariableString(v19 + 1, &__p, &v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a3 = v19 + 1;
  a3[1] = v19;
  if (a2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a2);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_43:
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_239A89FE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19 < 0)
  {
    operator delete(a14);
    if (!v34)
    {
LABEL_5:
      if (!v33) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
  }
  else if (!v34)
  {
    goto LABEL_5;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  if (!v33)
  {
LABEL_7:
    if (a25 < 0) {
      operator delete(__p);
    }
    if (v32) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v32);
    }
    if (v31) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v31);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_6:
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  goto LABEL_7;
}

void siri::intelligence::FunctionVisitCount(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "responseId");
  uint64_t v6 = std::__tree<std::string>::find<std::string>(v5 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v5 + 80 == v6)
  {
    char v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = *(void *)(v6 + 56);
    char v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v9) {
      goto LABEL_7;
    }
LABEL_19:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No value provided for '%s' parameter for function '%s'", v7, "responseId", "nonempty");
LABEL_20:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_21;
  }
  if (!v9) {
    goto LABEL_19;
  }
LABEL_7:
  if (!a2) {
    goto LABEL_20;
  }
  uint64_t v10 = *(uint64_t **)(a2 + 40);
  if (!v10) {
    goto LABEL_20;
  }
  uint64_t v11 = *v10;
  (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v9 + 56))(&__p, v9);
  uint64_t v12 = (void *)(v11 + 8);
  siri::intelligence::FlowGraph::GetResponse((void *)(v11 + 8), (uint64_t)&__p, &v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (!v17)
  {
    uint64_t v13 = (std::__shared_weak_count *)v18;
    *a3 = 0;
    a3[1] = 0;
    if (!v13) {
      goto LABEL_21;
    }
    goto LABEL_25;
  }
  uint64_t v13 = (std::__shared_weak_count *)v18;
  v16[0] = v17;
  v16[1] = v18;
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  int ResponseVisitCount = siri::intelligence::FlowGraph::GetResponseVisitCount(v12, v16);
  uint64_t v15 = operator new(0x68uLL);
  v15[1] = 0;
  v15[2] = 0;
  void *v15 = &unk_26ED291C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v15 + 3), &__p, (double)ResponseVisitCount);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a3 = v15 + 3;
  a3[1] = v15;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_25:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
LABEL_21:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_239A8A2C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v25);
  if (v22)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(a1);
}

void *std::vector<siri::intelligence::FunctionDefinition>::vector[abi:ne180100](void *result, unint64_t a2)
{
  qword_26AD86908 = 0;
  qword_26AD86910 = 0;
  qword_26AD86918 = 0;
  if (a2)
  {
    uint64_t v3 = result;
    std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](&qword_26AD86908, a2);
    unint64_t v4 = 0;
    uint64_t v5 = qword_26AD86910;
    uint64_t v6 = 80 * a2;
    do
    {
      uint64_t v7 = (std::string *)(v5 + v4);
      char v8 = (const std::string::value_type **)&v3[v4 / 8];
      if (SHIBYTE(v3[v4 / 8 + 2]) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *v8, (std::string::size_type)v8[1]);
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        v7->__r_.__value_.__r.__words[2] = (std::string::size_type)v8[2];
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      *(void *)(v5 + v4 + 24) = v3[v4 / 8 + 3];
      uint64_t v10 = (std::string *)(v5 + v4 + 32);
      uint64_t v11 = (const std::string::value_type **)&v3[v4 / 8 + 4];
      if (SHIBYTE(v3[v4 / 8 + 6]) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, v3[v4 / 8 + 5]);
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(v5 + v4 + 48) = v3[v4 / 8 + 6];
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      unint64_t v13 = v5 + v4;
      *(void *)(v13 + 56) = 0;
      *(void *)(v13 + 64) = 0;
      size_t v14 = (void *)(v5 + v4 + 56);
      v14[2] = 0;
      double result = std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(v14, v3[v4 / 8 + 7], v3[v4 / 8 + 8], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v3[v4 / 8 + 8] - v3[v4 / 8 + 7]) >> 3));
      v4 += 80;
    }
    while (v6 != v4);
    qword_26AD86910 = v5 + v4;
  }
  return result;
}

void sub_239A8A490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::intelligence::FunctionDefinition::~FunctionDefinition(void **this)
{
  uint64_t v2 = this + 7;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>@<X0>(char *a1@<X1>, double *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x68uLL);
  double result = std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],double,std::allocator<siri::intelligence::VariableNumber>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_239A8A5A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],double,std::allocator<siri::intelligence::VariableNumber>,0>(void *a1, char *__s, double *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED291C0;
  std::allocator<siri::intelligence::VariableNumber>::construct[abi:ne180100]<siri::intelligence::VariableNumber,char const(&)[1],double>((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_239A8A61C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED291C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED291C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableNumber>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocator<siri::intelligence::VariableNumber>::construct[abi:ne180100]<siri::intelligence::VariableNumber,char const(&)[1],double>(int a1, uint64_t a2, char *__s, double *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableNumber::VariableNumber(a2, &__p, *a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239A8A724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 56 * a2;
  double result = (char *)operator new(56 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[v3];
  return result;
}

void std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL &,void>(void *a1, char *a2)
{
  uint64_t v4 = operator new(0x60uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26ED29170;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_239A8A8B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29170;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double const&,void>(void *a1, double *a2)
{
  uint64_t v4 = operator new(0x68uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26ED291C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  siri::intelligence::VariableNumber::VariableNumber((uint64_t)(v4 + 3), &__p, *a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = v4 + 3;
  a1[1] = v4;
}

void sub_239A8AA18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

std::string *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],std::string,void>@<X0>(char *a1@<X1>, const std::string *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = (std::string *)operator new(0x78uLL);
  double result = std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::string,std::allocator<siri::intelligence::VariableString>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_239A8AA98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::string,std::allocator<siri::intelligence::VariableString>,0>(std::string *a1, char *__s, const std::string *a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED27560;
  std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],std::string>((int)&v5, a1 + 1, __s, a3);
  return a1;
}

void sub_239A8AB0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],std::string>(int a1, std::string *a2, char *__s, const std::string *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableString::VariableString(a2, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239A8AB78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>@<X0>(char *a1@<X1>, char *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x60uLL);
  double result = std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],BOOL,std::allocator<siri::intelligence::VariableBoolean>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_239A8ABE4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableBoolean>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],BOOL,std::allocator<siri::intelligence::VariableBoolean>,0>(void *a1, char *__s, char *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29170;
  std::allocator<siri::intelligence::VariableBoolean>::construct[abi:ne180100]<siri::intelligence::VariableBoolean,char const(&)[1],BOOL>((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_239A8AC58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableBoolean>::construct[abi:ne180100]<siri::intelligence::VariableBoolean,char const(&)[1],BOOL>(int a1, uint64_t a2, char *__s, char *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableBoolean::VariableBoolean(a2, &__p, *a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239A8ACC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<siri::intelligence::FunctionDefinition>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v3 = 5 * a2;
  double result = (char *)operator new(80 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v3];
  return result;
}

void *std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239A8AD94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = (std::string *)(a3 + v6);
      char v8 = (long long *)(a1 + v6);
      if (*(char *)(a1 + v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *v8;
        v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      uint64_t v10 = (std::string *)(a3 + v6 + 24);
      uint64_t v11 = (const std::string::value_type **)(a1 + v6 + 24);
      if (*(char *)(a1 + v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(void *)(a1 + v6 + 32));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        *(void *)(a3 + v6 + 40) = *(void *)(a1 + v6 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      *(unsigned char *)(a3 + v6 + 48) = *(unsigned char *)(a1 + v6 + 48);
      v6 += 56;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_239A8AE7C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + v2 + 23) < 0) {
    operator delete(*(void **)(v1 + v2));
  }
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::allocator<siri::intelligence::FunctionDefinition>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 56);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::vector<siri::intelligence::FunctionDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        std::allocator<siri::intelligence::FunctionDefinition>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::map<std::string,siri::intelligence::FunctionDefinition>::map[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = qword_26AD86920;
  if ((uint64_t *)qword_26AD86920 != &qword_26AD86928)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v2) {
        break;
      }
      char v5 = v2;
      if (v4)
      {
        do
        {
          uint64_t v6 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t)v5[2];
          BOOL v7 = *(void *)v6 == (void)v5;
          char v5 = (uint64_t **)v6;
        }
        while (v7);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v6 + 32), (const void **)(v3 + 32)))
      {
        if (!*v2) {
          goto LABEL_9;
        }
LABEL_11:
        size_t v19 = (void *)v6;
        char v8 = (uint64_t **)(v6 + 8);
        goto LABEL_13;
      }
      char v8 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v19, (const void **)(v3 + 32));
LABEL_13:
      if (!*v8) {
        goto LABEL_14;
      }
LABEL_24:
      size_t v14 = *(uint64_t **)(v3 + 8);
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          size_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = *(uint64_t **)(v3 + 16);
          BOOL v7 = *v15 == v3;
          uint64_t v3 = (uint64_t)v15;
        }
        while (!v7);
      }
      uint64_t v3 = (uint64_t)v15;
      if (v15 == &qword_26AD86928) {
        return a1;
      }
    }
    uint64_t v6 = (uint64_t)v2;
    if (!v4)
    {
LABEL_9:
      size_t v19 = v2;
      char v8 = v2;
LABEL_14:
      long long v9 = (char *)operator new(0x88uLL);
      uint64_t v10 = v9;
      v17[0] = v9;
      v17[1] = v2;
      char v18 = 0;
      if (*(char *)(v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)(v3 + 32), *(void *)(v3 + 40));
      }
      else
      {
        long long v11 = *(_OWORD *)(v3 + 32);
        *((void *)v9 + 6) = *(void *)(v3 + 48);
        *((_OWORD *)v9 + 2) = v11;
      }
      if (*(char *)(v3 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 56), *(const std::string::value_type **)(v3 + 56), *(void *)(v3 + 64));
      }
      else
      {
        long long v12 = *(_OWORD *)(v3 + 56);
        *((void *)v10 + 9) = *(void *)(v3 + 72);
        *(_OWORD *)(v10 + 56) = v12;
      }
      *((void *)v10 + 10) = *(void *)(v3 + 80);
      if (*(char *)(v3 + 111) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 88), *(const std::string::value_type **)(v3 + 88), *(void *)(v3 + 96));
      }
      else
      {
        long long v13 = *(_OWORD *)(v3 + 88);
        *((void *)v10 + 13) = *(void *)(v3 + 104);
        *(_OWORD *)(v10 + 88) = v13;
      }
      *((void *)v10 + 14) = 0;
      *((void *)v10 + 15) = 0;
      *((void *)v10 + 16) = 0;
      std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((void *)v10 + 14, *(void *)(v3 + 112), *(void *)(v3 + 120), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 120) - *(void *)(v3 + 112)) >> 3));
      char v18 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v8, (uint64_t *)v10);
      v17[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      goto LABEL_24;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_239A8B1FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 79) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v9 + 55) < 0) {
    operator delete(*v10);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*v12);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 80);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::FunctionDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::FunctionDefinition>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::FunctionDefinition>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void std::vector<siri::intelligence::FunctionArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(uint64_t a1, std::string *__str, std::string *a3, unint64_t a4)
{
  char v8 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492) {
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v9 <= a4) {
      unint64_t v9 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v10 = 0x492492492492492;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100]((void *)a1, v10);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)__str, (uint64_t)a3, *(void *)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3) < a4)
  {
    long long v12 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v8) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, v12, v8);
    uint64_t v11 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::FunctionArgument>,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>((uint64_t)v12, (uint64_t)a3, *(void *)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v11;
    return;
  }
  long long v13 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, a3, v8);
  for (uint64_t i = *(void *)(a1 + 8);
        (std::string *)i != v13;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(i))
  {
    i -= 56;
  }
  *(void *)(a1 + 8) = v13;
}

void sub_239A8B508(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_239A8B510(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    char v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      this[2].__r_.__value_.__s.__data_[0] = v5[2].__r_.__value_.__s.__data_[0];
      this = (std::string *)((char *)this + 56);
      char v5 = (std::string *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return this;
}

void std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v7 = a1;
    v336 = (const void **)(a2 - 80);
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v7;
        uint64_t v9 = a2 - v7;
        unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v7) >> 4);
        a1 = v8;
        if (v5 || !v4)
        {
          switch(v10)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              int v128 = *(char *)(v8 + 23);
              int v129 = *(char *)(a2 - 57);
              if (v129 >= 0) {
                size_t v130 = *(unsigned __int8 *)(a2 - 57);
              }
              else {
                size_t v130 = *(void *)(a2 - 72);
              }
              if (v129 >= 0) {
                std::string v131 = (const void *)(a2 - 80);
              }
              else {
                std::string v131 = *(const void **)(a2 - 80);
              }
              if (v128 >= 0) {
                size_t v132 = *(unsigned __int8 *)(v8 + 23);
              }
              else {
                size_t v132 = *(void *)(v8 + 8);
              }
              if (v128 >= 0) {
                std::string v133 = (const void *)v8;
              }
              else {
                std::string v133 = *(const void **)v8;
              }
              if (v132 >= v130) {
                size_t v134 = v130;
              }
              else {
                size_t v134 = v132;
              }
              int v135 = memcmp(v131, v133, v134);
              BOOL v136 = v130 < v132;
              if (v135) {
                BOOL v136 = v135 < 0;
              }
              if (v136) {
                std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v8, (long long *)(a2 - 80));
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8, v8 + 80, v336);
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8, v8 + 80, v8 + 160, v336);
              break;
            case 5uLL:
              std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(v8, v8 + 80, v8 + 160, v8 + 240, v336);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        if (v9 <= 1919)
        {
          if (a4)
          {
            if (v8 != a2)
            {
              std::string v137 = (const void **)(v8 + 80);
              if (v8 + 80 != a2)
              {
                uint64_t v138 = 0;
                std::string v139 = (const void **)v8;
                do
                {
                  std::string v140 = v137;
                  int v141 = *((char *)v139 + 23);
                  int v142 = *((char *)v139 + 103);
                  if (v142 >= 0) {
                    size_t v143 = *((unsigned __int8 *)v139 + 103);
                  }
                  else {
                    size_t v143 = (size_t)v139[11];
                  }
                  if (v142 >= 0) {
                    std::string v144 = v137;
                  }
                  else {
                    std::string v144 = (const void **)v139[10];
                  }
                  if (v141 >= 0) {
                    size_t v145 = *((unsigned __int8 *)v139 + 23);
                  }
                  else {
                    size_t v145 = (size_t)v139[1];
                  }
                  if (v141 >= 0) {
                    v146 = v139;
                  }
                  else {
                    v146 = *v139;
                  }
                  if (v145 >= v143) {
                    size_t v147 = v143;
                  }
                  else {
                    size_t v147 = v145;
                  }
                  int v148 = memcmp(v144, v146, v147);
                  BOOL v149 = v143 < v145;
                  if (v148) {
                    BOOL v149 = v148 < 0;
                  }
                  if (v149)
                  {
                    long long v150 = *(_OWORD *)v140;
                    v349 = v140[2];
                    *(_OWORD *)v348 = v150;
                    v140[1] = 0;
                    v140[2] = 0;
                    *std::string v140 = 0;
                    v151 = v139[13];
                    long long __p = *((_OWORD *)v139 + 7);
                    v352 = v139[16];
                    v139[14] = 0;
                    v139[15] = 0;
                    long long v353 = *(_OWORD *)(v139 + 17);
                    v152 = v139[19];
                    v350 = v151;
                    v354 = v152;
                    v139[16] = 0;
                    v139[17] = 0;
                    uint64_t v153 = v138;
                    v139[18] = 0;
                    v139[19] = 0;
                    while (1)
                    {
                      uint64_t v154 = v8 + v153;
                      v155 = (void **)(v8 + v153 + 80);
                      if (*(char *)(v8 + v153 + 103) < 0) {
                        operator delete(*v155);
                      }
                      *(_OWORD *)v155 = *(_OWORD *)v154;
                      uint64_t v156 = *(void *)(v154 + 24);
                      *(void *)(v8 + v153 + 96) = *(void *)(v154 + 16);
                      *(unsigned char *)(v154 + 23) = 0;
                      *(unsigned char *)uint64_t v154 = 0;
                      *(void *)(v154 + 104) = v156;
                      uint64_t v157 = v154 + 112;
                      if (*(char *)(v154 + 135) < 0) {
                        operator delete(*(void **)v157);
                      }
                      uint64_t v158 = v8 + v153;
                      *(_OWORD *)uint64_t v157 = *(_OWORD *)(v8 + v153 + 32);
                      *(void *)(v157 + 16) = *(void *)(v8 + v153 + 48);
                      *(unsigned char *)(v158 + 55) = 0;
                      *(unsigned char *)(v158 + 32) = 0;
                      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v8 + v153 + 136));
                      *(_OWORD *)(v158 + 136) = *(_OWORD *)(v158 + 56);
                      *(void *)(v158 + 152) = *(void *)(v158 + 72);
                      *(void *)(v158 + 64) = 0;
                      *(void *)(v158 + 72) = 0;
                      *(void *)(v158 + 56) = 0;
                      if (!v153) {
                        break;
                      }
                      int v159 = *(char *)(v158 - 57);
                      if (SHIBYTE(v349) >= 0) {
                        v160 = (void *)HIBYTE(v349);
                      }
                      else {
                        v160 = v348[1];
                      }
                      if (SHIBYTE(v349) >= 0) {
                        v161 = v348;
                      }
                      else {
                        v161 = (void **)v348[0];
                      }
                      if (v159 >= 0) {
                        size_t v162 = *(unsigned __int8 *)(v158 - 57);
                      }
                      else {
                        size_t v162 = *(void *)(v158 - 72);
                      }
                      if (v159 >= 0) {
                        v163 = (const void *)(v158 - 80);
                      }
                      else {
                        v163 = *(const void **)(v158 - 80);
                      }
                      if (v162 >= (unint64_t)v160) {
                        size_t v164 = (size_t)v160;
                      }
                      else {
                        size_t v164 = v162;
                      }
                      int v165 = memcmp(v161, v163, v164);
                      BOOL v166 = (unint64_t)v160 < v162;
                      if (v165) {
                        BOOL v166 = v165 < 0;
                      }
                      v153 -= 80;
                      if (!v166)
                      {
                        uint64_t v167 = v8 + v153 + 80;
                        goto LABEL_300;
                      }
                    }
                    uint64_t v167 = v8;
LABEL_300:
                    if (*(char *)(v167 + 23) < 0) {
                      operator delete(*(void **)v167);
                    }
                    uint64_t v168 = v158 + 32;
                    long long v169 = *(_OWORD *)v348;
                    *(void *)(v167 + 16) = v349;
                    *(_OWORD *)uint64_t v167 = v169;
                    HIBYTE(v349) = 0;
                    LOBYTE(v348[0]) = 0;
                    *(void *)(v167 + 24) = v350;
                    if (*(char *)(v167 + 55) < 0) {
                      operator delete(*(void **)v168);
                    }
                    v170 = (void **)(v158 + 56);
                    long long v171 = __p;
                    *(void *)(v168 + 16) = v352;
                    *(_OWORD *)uint64_t v168 = v171;
                    HIBYTE(v352) = 0;
                    LOBYTE(__p) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v170);
                    *v170 = (void *)v353;
                    *(void *)(v167 + 64) = *((void *)&v353 + 1);
                    *(void *)(v167 + 72) = v354;
                    long long v353 = 0uLL;
                    v354 = 0;
                    v340[0] = &v353;
                    std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
                    if (SHIBYTE(v352) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v349) < 0) {
                      operator delete(v348[0]);
                    }
                  }
                  std::string v137 = v140 + 10;
                  v138 += 80;
                  std::string v139 = v140;
                }
                while (v140 + 10 != (const void **)a2);
              }
            }
          }
          else if (v8 != a2)
          {
            v296 = (const void *)(v8 + 80);
            if (v8 + 80 != a2)
            {
              v297 = (void *)(v8 + 152);
              do
              {
                uint64_t v298 = (uint64_t)v296;
                int v299 = *(char *)(a1 + 23);
                int v300 = *(char *)(a1 + 103);
                if (v300 >= 0) {
                  size_t v301 = *(unsigned __int8 *)(a1 + 103);
                }
                else {
                  size_t v301 = *(void *)(a1 + 88);
                }
                if (v300 >= 0) {
                  v302 = v296;
                }
                else {
                  v302 = *(const void **)(a1 + 80);
                }
                if (v299 >= 0) {
                  size_t v303 = *(unsigned __int8 *)(a1 + 23);
                }
                else {
                  size_t v303 = *(void *)(a1 + 8);
                }
                if (v299 >= 0) {
                  v304 = (const void *)a1;
                }
                else {
                  v304 = *(const void **)a1;
                }
                if (v303 >= v301) {
                  size_t v305 = v301;
                }
                else {
                  size_t v305 = v303;
                }
                int v306 = memcmp(v302, v304, v305);
                BOOL v307 = v301 < v303;
                if (v306) {
                  BOOL v307 = v306 < 0;
                }
                if (v307)
                {
                  long long v308 = *(_OWORD *)v298;
                  v349 = *(const void **)(v298 + 16);
                  *(_OWORD *)v348 = v308;
                  *(void *)(v298 + 8) = 0;
                  *(void *)(v298 + 16) = 0;
                  *(void *)uint64_t v298 = 0;
                  v309 = *(const void **)(a1 + 104);
                  long long __p = *(_OWORD *)(a1 + 112);
                  v352 = *(const void **)(a1 + 128);
                  *(void *)(a1 + 112) = 0;
                  *(void *)(a1 + 120) = 0;
                  long long v353 = *(_OWORD *)(a1 + 136);
                  v310 = *(const void **)(a1 + 152);
                  v350 = v309;
                  v354 = v310;
                  *(void *)(a1 + 128) = 0;
                  *(void *)(a1 + 136) = 0;
                  v311 = v297;
                  *(void *)(a1 + 144) = 0;
                  *(void *)(a1 + 152) = 0;
                  do
                  {
                    v312 = (void **)(v311 - 9);
                    if (*((char *)v311 - 49) < 0) {
                      operator delete(*v312);
                    }
                    *(_OWORD *)v312 = *(_OWORD *)(v311 - 19);
                    *(v311 - 7) = *(v311 - 17);
                    *((unsigned char *)v311 - 129) = 0;
                    *((unsigned char *)v311 - 152) = 0;
                    *(v311 - 6) = *(v311 - 16);
                    v313 = (void **)(v311 - 5);
                    if (*((char *)v311 - 17) < 0) {
                      operator delete(*v313);
                    }
                    *(_OWORD *)v313 = *(_OWORD *)(v311 - 15);
                    *(v311 - 3) = *(v311 - 13);
                    *((unsigned char *)v311 - 97) = 0;
                    *((unsigned char *)v311 - 120) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)v311 - 2);
                    *((_OWORD *)v311 - 1) = *((_OWORD *)v311 - 6);
                    v314 = v311 - 10;
                    void *v311 = *(v311 - 10);
                    *(v311 - 10) = 0;
                    *(v311 - 12) = 0;
                    *(v311 - 11) = 0;
                    size_t v315 = *((unsigned __int8 *)v311 - 209);
                    v316 = v311 - 29;
                    v317 = (const void *)*(v311 - 29);
                    size_t v318 = *(v311 - 28);
                    if (SHIBYTE(v349) >= 0) {
                      v319 = (void *)HIBYTE(v349);
                    }
                    else {
                      v319 = v348[1];
                    }
                    if (SHIBYTE(v349) >= 0) {
                      v320 = v348;
                    }
                    else {
                      v320 = (void **)v348[0];
                    }
                    if ((v315 & 0x80u) == 0) {
                      size_t v321 = v315;
                    }
                    else {
                      size_t v321 = v318;
                    }
                    if ((v315 & 0x80u) == 0) {
                      v322 = v316;
                    }
                    else {
                      v322 = v317;
                    }
                    if (v321 >= (unint64_t)v319) {
                      size_t v323 = (size_t)v319;
                    }
                    else {
                      size_t v323 = v321;
                    }
                    int v324 = memcmp(v320, v322, v323);
                    BOOL v325 = (unint64_t)v319 < v321;
                    if (v324) {
                      BOOL v325 = v324 < 0;
                    }
                    v311 = v314;
                  }
                  while (v325);
                  v326 = (void **)(v314 - 9);
                  if (*((char *)v314 - 49) < 0) {
                    operator delete(*v326);
                  }
                  v327 = (void **)(v314 - 5);
                  long long v328 = *(_OWORD *)v348;
                  *(v314 - 7) = v349;
                  *(_OWORD *)v326 = v328;
                  HIBYTE(v349) = 0;
                  LOBYTE(v348[0]) = 0;
                  *(v314 - 6) = v350;
                  if (*((char *)v314 - 17) < 0) {
                    operator delete(*v327);
                  }
                  long long v329 = __p;
                  *(v314 - 3) = v352;
                  *(_OWORD *)v327 = v329;
                  HIBYTE(v352) = 0;
                  LOBYTE(__p) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)v314 - 2);
                  *((_OWORD *)v314 - 1) = v353;
                  void *v314 = v354;
                  long long v353 = 0uLL;
                  v354 = 0;
                  v340[0] = &v353;
                  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
                  if (SHIBYTE(v352) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SHIBYTE(v349) < 0) {
                    operator delete(v348[0]);
                  }
                }
                v296 = (const void *)(v298 + 80);
                v297 += 10;
                a1 = v298;
              }
              while (v298 + 80 != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            int64_t v172 = (v10 - 2) >> 1;
            unint64_t v331 = v10;
            unint64_t v330 = v9;
            int64_t v173 = v172;
            uint64_t v174 = v8;
            int64_t v337 = v172;
            do
            {
              int64_t v175 = v173;
              if (v172 >= v173)
              {
                uint64_t v176 = (2 * v173) | 1;
                uint64_t v177 = v174 + 80 * v176;
                uint64_t v178 = 2 * v173 + 2;
                int64_t v335 = v173;
                if (v178 < (uint64_t)v10)
                {
                  int v179 = *(char *)(v177 + 103);
                  v180 = *(const void **)(v177 + 80);
                  int v181 = *(char *)(v177 + 23);
                  v182 = *(const void **)v177;
                  if (v181 >= 0) {
                    size_t v183 = *(unsigned __int8 *)(v177 + 23);
                  }
                  else {
                    size_t v183 = *(void *)(v177 + 8);
                  }
                  if (v181 >= 0) {
                    v184 = (const void *)v177;
                  }
                  else {
                    v184 = *(const void **)v177;
                  }
                  if (v179 >= 0) {
                    size_t v185 = *(unsigned __int8 *)(v177 + 103);
                  }
                  else {
                    size_t v185 = *(void *)(v177 + 88);
                  }
                  if (v179 >= 0) {
                    v186 = (const void *)(v177 + 80);
                  }
                  else {
                    v186 = *(const void **)(v177 + 80);
                  }
                  if (v185 >= v183) {
                    size_t v187 = v183;
                  }
                  else {
                    size_t v187 = v185;
                  }
                  int v188 = memcmp(v184, v186, v187);
                  BOOL v189 = v183 < v185;
                  if (v188) {
                    BOOL v189 = v188 < 0;
                  }
                  BOOL v190 = !v189;
                  if (v189) {
                    v191 = v180;
                  }
                  else {
                    v191 = v182;
                  }
                  uint64_t v174 = a1;
                  if (!v190)
                  {
                    v177 += 80;
                    uint64_t v176 = v178;
                  }
                }
                else
                {
                  v191 = *(const void **)v177;
                }
                uint64_t v192 = v174 + 80 * v175;
                int v193 = *(char *)(v192 + 23);
                int v194 = *(char *)(v177 + 23);
                if (v194 >= 0) {
                  size_t v195 = *(unsigned __int8 *)(v177 + 23);
                }
                else {
                  size_t v195 = *(void *)(v177 + 8);
                }
                if (v194 >= 0) {
                  v196 = (const void *)v177;
                }
                else {
                  v196 = v191;
                }
                if (v193 >= 0) {
                  size_t v197 = *(unsigned __int8 *)(v192 + 23);
                }
                else {
                  size_t v197 = *(void *)(v192 + 8);
                }
                if (v193 >= 0) {
                  v198 = (const void *)(v174 + 80 * v175);
                }
                else {
                  v198 = *(const void **)v192;
                }
                if (v197 >= v195) {
                  size_t v199 = v195;
                }
                else {
                  size_t v199 = v197;
                }
                int v200 = memcmp(v196, v198, v199);
                uint64_t v174 = a1;
                BOOL v201 = v195 < v197;
                if (v200) {
                  BOOL v201 = v200 < 0;
                }
                if (!v201)
                {
                  long long v202 = *(_OWORD *)v192;
                  v349 = *(const void **)(v192 + 16);
                  *(_OWORD *)v348 = v202;
                  *(void *)(v192 + 8) = 0;
                  *(void *)(v192 + 16) = 0;
                  *(void *)uint64_t v192 = 0;
                  uint64_t v203 = a1 + 80 * v175;
                  v350 = *(const void **)(v203 + 24);
                  long long v204 = *(_OWORD *)(v203 + 32);
                  v352 = *(const void **)(v203 + 48);
                  long long __p = v204;
                  *(void *)(v203 + 40) = 0;
                  *(void *)(v203 + 48) = 0;
                  *(void *)(v203 + 32) = 0;
                  long long v353 = *(_OWORD *)(v203 + 56);
                  v354 = *(const void **)(v203 + 72);
                  *(void *)(v203 + 56) = 0;
                  *(void *)(v203 + 64) = 0;
                  *(void *)(v203 + 72) = 0;
                  do
                  {
                    uint64_t v205 = v177;
                    if (*(char *)(v192 + 23) < 0) {
                      operator delete(*(void **)v192);
                    }
                    long long v206 = *(_OWORD *)v177;
                    *(void *)(v192 + 16) = *(void *)(v177 + 16);
                    *(_OWORD *)uint64_t v192 = v206;
                    *(unsigned char *)(v177 + 23) = 0;
                    *(unsigned char *)uint64_t v177 = 0;
                    *(void *)(v192 + 24) = *(void *)(v177 + 24);
                    v207 = (void **)(v192 + 32);
                    if (*(char *)(v192 + 55) < 0) {
                      operator delete(*v207);
                    }
                    long long v208 = *(_OWORD *)(v177 + 32);
                    *(void *)(v192 + 48) = *(void *)(v177 + 48);
                    *(_OWORD *)v207 = v208;
                    *(unsigned char *)(v177 + 55) = 0;
                    *(unsigned char *)(v177 + 32) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v192 + 56));
                    *(_OWORD *)(v192 + 56) = *(_OWORD *)(v177 + 56);
                    *(void *)(v192 + 72) = *(void *)(v177 + 72);
                    *(void *)(v177 + 56) = 0;
                    *(void *)(v177 + 64) = 0;
                    *(void *)(v177 + 72) = 0;
                    if (v172 < v176) {
                      break;
                    }
                    uint64_t v209 = (2 * v176) | 1;
                    uint64_t v177 = v174 + 80 * v209;
                    uint64_t v176 = 2 * v176 + 2;
                    if (v176 < (uint64_t)v10)
                    {
                      int v210 = *(char *)(v177 + 103);
                      v211 = *(const void **)(v177 + 80);
                      int v212 = *(char *)(v177 + 23);
                      v213 = *(const void **)v177;
                      if (v212 >= 0) {
                        size_t v214 = *(unsigned __int8 *)(v177 + 23);
                      }
                      else {
                        size_t v214 = *(void *)(v177 + 8);
                      }
                      if (v212 >= 0) {
                        v215 = (const void *)(v174 + 80 * v209);
                      }
                      else {
                        v215 = *(const void **)v177;
                      }
                      if (v210 >= 0) {
                        size_t v216 = *(unsigned __int8 *)(v177 + 103);
                      }
                      else {
                        size_t v216 = *(void *)(v177 + 88);
                      }
                      if (v210 >= 0) {
                        v217 = (const void *)(v177 + 80);
                      }
                      else {
                        v217 = *(const void **)(v177 + 80);
                      }
                      if (v216 >= v214) {
                        size_t v218 = v214;
                      }
                      else {
                        size_t v218 = v216;
                      }
                      int v219 = memcmp(v215, v217, v218);
                      BOOL v4 = v214 >= v216;
                      unint64_t v10 = v331;
                      BOOL v220 = !v4;
                      if (v219) {
                        BOOL v220 = v219 < 0;
                      }
                      BOOL v221 = !v220;
                      v222 = v220 ? v211 : v213;
                      int64_t v172 = v337;
                      if (v221) {
                        uint64_t v176 = v209;
                      }
                      else {
                        v177 += 80;
                      }
                    }
                    else
                    {
                      v222 = *(const void **)v177;
                      uint64_t v176 = v209;
                    }
                    int v223 = *(char *)(v177 + 23);
                    if (v223 >= 0) {
                      size_t v224 = *(unsigned __int8 *)(v177 + 23);
                    }
                    else {
                      size_t v224 = *(void *)(v177 + 8);
                    }
                    if (v223 >= 0) {
                      v225 = (const void *)v177;
                    }
                    else {
                      v225 = v222;
                    }
                    if (SHIBYTE(v349) >= 0) {
                      v226 = (void *)HIBYTE(v349);
                    }
                    else {
                      v226 = v348[1];
                    }
                    if (SHIBYTE(v349) >= 0) {
                      v227 = v348;
                    }
                    else {
                      v227 = (void **)v348[0];
                    }
                    if ((unint64_t)v226 >= v224) {
                      size_t v228 = v224;
                    }
                    else {
                      size_t v228 = (size_t)v226;
                    }
                    int v229 = memcmp(v225, v227, v228);
                    BOOL v230 = v224 < (unint64_t)v226;
                    if (v229) {
                      BOOL v230 = v229 < 0;
                    }
                    uint64_t v192 = v205;
                    uint64_t v174 = a1;
                  }
                  while (!v230);
                  if (*(char *)(v205 + 23) < 0) {
                    operator delete(*(void **)v205);
                  }
                  v231 = (void **)(v205 + 32);
                  long long v232 = *(_OWORD *)v348;
                  *(void *)(v205 + 16) = v349;
                  *(_OWORD *)uint64_t v205 = v232;
                  HIBYTE(v349) = 0;
                  LOBYTE(v348[0]) = 0;
                  *(void *)(v205 + 24) = v350;
                  if (*(char *)(v205 + 55) < 0) {
                    operator delete(*v231);
                  }
                  long long v233 = __p;
                  *(void *)(v205 + 48) = v352;
                  *(_OWORD *)v231 = v233;
                  HIBYTE(v352) = 0;
                  LOBYTE(__p) = 0;
                  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v205 + 56));
                  *(_OWORD *)(v205 + 56) = v353;
                  *(void *)(v205 + 72) = v354;
                  long long v353 = 0uLL;
                  v354 = 0;
                  v340[0] = &v353;
                  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
                  if (SHIBYTE(v352) < 0) {
                    operator delete((void *)__p);
                  }
                  int64_t v175 = v335;
                  if (SHIBYTE(v349) < 0) {
                    operator delete(v348[0]);
                  }
                }
              }
              int64_t v173 = v175 - 1;
            }
            while (v175);
            int64_t v234 = v330 / 0x50;
            v332 = (void *)(v174 + 56);
            uint64_t v334 = v174 + 32;
            do
            {
              uint64_t v235 = 0;
              unint64_t v236 = a2;
              uint64_t v237 = a1;
              long long v238 = *(_OWORD *)a1;
              uint64_t v239 = *(void *)(a1 + 24);
              uint64_t v341 = *(void *)(a1 + 16);
              *(_OWORD *)v340 = v238;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              uint64_t v342 = v239;
              uint64_t v240 = *(void *)(v334 + 16);
              long long v343 = *(_OWORD *)v334;
              uint64_t v344 = v240;
              *(void *)(v334 + 8) = 0;
              *(void *)(v334 + 16) = 0;
              *(void *)uint64_t v334 = 0;
              long long v345 = *(_OWORD *)(a1 + 56);
              uint64_t v346 = *(void *)(a1 + 72);
              void *v332 = 0;
              v332[1] = 0;
              v332[2] = 0;
              do
              {
                uint64_t v241 = v237 + 80 * v235 + 80;
                uint64_t v242 = 2 * v235;
                uint64_t v235 = (2 * v235) | 1;
                uint64_t v243 = v242 + 2;
                if (v242 + 2 < v234)
                {
                  int v244 = *(char *)(v241 + 103);
                  int v245 = *(char *)(v241 + 23);
                  if (v245 >= 0) {
                    size_t v246 = *(unsigned __int8 *)(v241 + 23);
                  }
                  else {
                    size_t v246 = *(void *)(v241 + 8);
                  }
                  if (v245 >= 0) {
                    v247 = (const void *)v241;
                  }
                  else {
                    v247 = *(const void **)v241;
                  }
                  if (v244 >= 0) {
                    size_t v248 = *(unsigned __int8 *)(v241 + 103);
                  }
                  else {
                    size_t v248 = *(void *)(v241 + 88);
                  }
                  if (v244 >= 0) {
                    v249 = (const void *)(v241 + 80);
                  }
                  else {
                    v249 = *(const void **)(v241 + 80);
                  }
                  if (v248 >= v246) {
                    size_t v250 = v246;
                  }
                  else {
                    size_t v250 = v248;
                  }
                  int v251 = memcmp(v247, v249, v250);
                  BOOL v252 = v246 < v248;
                  if (v251) {
                    BOOL v252 = v251 < 0;
                  }
                  if (v252)
                  {
                    v241 += 80;
                    uint64_t v235 = v243;
                  }
                }
                if (*(char *)(v237 + 23) < 0) {
                  operator delete(*(void **)v237);
                }
                long long v253 = *(_OWORD *)v241;
                *(void *)(v237 + 16) = *(void *)(v241 + 16);
                *(_OWORD *)uint64_t v237 = v253;
                *(unsigned char *)(v241 + 23) = 0;
                *(unsigned char *)uint64_t v241 = 0;
                *(void *)(v237 + 24) = *(void *)(v241 + 24);
                v254 = (void **)(v237 + 32);
                if (*(char *)(v237 + 55) < 0) {
                  operator delete(*v254);
                }
                long long v255 = *(_OWORD *)(v241 + 32);
                *(void *)(v237 + 48) = *(void *)(v241 + 48);
                *(_OWORD *)v254 = v255;
                *(unsigned char *)(v241 + 55) = 0;
                *(unsigned char *)(v241 + 32) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v237 + 56));
                *(_OWORD *)(v237 + 56) = *(_OWORD *)(v241 + 56);
                *(void *)(v237 + 72) = *(void *)(v241 + 72);
                *(void *)(v241 + 56) = 0;
                *(void *)(v241 + 64) = 0;
                *(void *)(v241 + 72) = 0;
                uint64_t v237 = v241;
              }
              while (v235 <= (uint64_t)((unint64_t)(v234 - 2) >> 1));
              v256 = (void **)(v241 + 32);
              int v257 = *(char *)(v241 + 23);
              a2 -= 80;
              if (v241 == v236 - 80)
              {
                if (v257 < 0) {
                  operator delete(*(void **)v241);
                }
                long long v293 = *(_OWORD *)v340;
                *(void *)(v241 + 16) = v341;
                *(_OWORD *)uint64_t v241 = v293;
                HIBYTE(v341) = 0;
                LOBYTE(v340[0]) = 0;
                *(void *)(v241 + 24) = v342;
                if (*(char *)(v241 + 55) < 0) {
                  operator delete(*v256);
                }
                long long v294 = v343;
                *(void *)(v241 + 48) = v344;
                *(_OWORD *)v256 = v294;
                HIBYTE(v344) = 0;
                LOBYTE(v343) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v241 + 56));
                *(_OWORD *)(v241 + 56) = v345;
                *(void *)(v241 + 72) = v346;
                long long v345 = 0uLL;
                uint64_t v346 = 0;
              }
              else
              {
                if (v257 < 0) {
                  operator delete(*(void **)v241);
                }
                long long v258 = *(_OWORD *)a2;
                *(void *)(v241 + 16) = *(void *)(a2 + 16);
                *(_OWORD *)uint64_t v241 = v258;
                *(unsigned char *)(v236 - 57) = 0;
                *(unsigned char *)(v236 - 80) = 0;
                *(void *)(v241 + 24) = *(void *)(v236 - 56);
                if (*(char *)(v241 + 55) < 0) {
                  operator delete(*v256);
                }
                long long v259 = *(_OWORD *)(v236 - 48);
                *(void *)(v241 + 48) = *(void *)(v236 - 32);
                *(_OWORD *)v256 = v259;
                *(unsigned char *)(v236 - 25) = 0;
                *(unsigned char *)(v236 - 48) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v241 + 56));
                v260 = (void *)(v236 - 24);
                *(_OWORD *)(v241 + 56) = *(_OWORD *)(v236 - 24);
                *(void *)(v241 + 72) = *(void *)(v236 - 8);
                void *v260 = 0;
                v260[1] = 0;
                v260[2] = 0;
                if (*(char *)(v236 - 57) < 0) {
                  operator delete(*(void **)a2);
                }
                v261 = (void **)(v236 - 48);
                long long v262 = *(_OWORD *)v340;
                *(void *)(a2 + 16) = v341;
                *(_OWORD *)a2 = v262;
                HIBYTE(v341) = 0;
                LOBYTE(v340[0]) = 0;
                *(void *)(v236 - 56) = v342;
                if (*(char *)(v236 - 25) < 0) {
                  operator delete(*v261);
                }
                long long v263 = v343;
                *(void *)(v236 - 32) = v344;
                *(_OWORD *)v261 = v263;
                HIBYTE(v344) = 0;
                LOBYTE(v343) = 0;
                std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v236 - 24));
                *(_OWORD *)(v236 - 24) = v345;
                *(void *)(v236 - 8) = v346;
                long long v345 = 0uLL;
                uint64_t v346 = 0;
                uint64_t v264 = v241 + 80 - a1;
                if (v264 >= 81)
                {
                  unint64_t v265 = (v264 / 0x50uLL - 2) >> 1;
                  unint64_t v266 = a1 + 80 * v265;
                  int v267 = *(char *)(v241 + 23);
                  int v268 = *(char *)(v266 + 23);
                  if (v268 >= 0) {
                    size_t v269 = *(unsigned __int8 *)(v266 + 23);
                  }
                  else {
                    size_t v269 = *(void *)(v266 + 8);
                  }
                  if (v268 >= 0) {
                    v270 = (const void *)(a1 + 80 * v265);
                  }
                  else {
                    v270 = *(const void **)v266;
                  }
                  if (v267 >= 0) {
                    size_t v271 = *(unsigned __int8 *)(v241 + 23);
                  }
                  else {
                    size_t v271 = *(void *)(v241 + 8);
                  }
                  if (v267 >= 0) {
                    v272 = (const void *)v241;
                  }
                  else {
                    v272 = *(const void **)v241;
                  }
                  if (v271 >= v269) {
                    size_t v273 = v269;
                  }
                  else {
                    size_t v273 = v271;
                  }
                  int v274 = memcmp(v270, v272, v273);
                  BOOL v275 = v269 < v271;
                  if (v274) {
                    BOOL v275 = v274 < 0;
                  }
                  if (v275)
                  {
                    long long v276 = *(_OWORD *)v241;
                    v349 = *(const void **)(v241 + 16);
                    *(_OWORD *)v348 = v276;
                    *(void *)(v241 + 8) = 0;
                    *(void *)(v241 + 16) = 0;
                    *(void *)uint64_t v241 = 0;
                    v350 = *(const void **)(v241 + 24);
                    long long v277 = *(_OWORD *)v256;
                    v352 = *(const void **)(v241 + 48);
                    long long __p = v277;
                    *(void *)(v241 + 40) = 0;
                    *(void *)(v241 + 48) = 0;
                    *v256 = 0;
                    long long v353 = *(_OWORD *)(v241 + 56);
                    v354 = *(const void **)(v241 + 72);
                    *(void *)(v241 + 56) = 0;
                    *(void *)(v241 + 64) = 0;
                    *(void *)(v241 + 72) = 0;
                    if (SHIBYTE(v349) >= 0) {
                      v278 = (void *)HIBYTE(v349);
                    }
                    else {
                      v278 = v348[1];
                    }
                    if (SHIBYTE(v349) >= 0) {
                      v279 = v348;
                    }
                    else {
                      v279 = (void **)v348[0];
                    }
                    do
                    {
                      uint64_t v280 = v266;
                      if (*(char *)(v241 + 23) < 0) {
                        operator delete(*(void **)v241);
                      }
                      long long v281 = *(_OWORD *)v266;
                      *(void *)(v241 + 16) = *(void *)(v266 + 16);
                      *(_OWORD *)uint64_t v241 = v281;
                      *(unsigned char *)(v266 + 23) = 0;
                      *(unsigned char *)unint64_t v266 = 0;
                      *(void *)(v241 + 24) = *(void *)(v266 + 24);
                      v282 = (void **)(v241 + 32);
                      if (*(char *)(v241 + 55) < 0) {
                        operator delete(*v282);
                      }
                      long long v283 = *(_OWORD *)(v266 + 32);
                      *(void *)(v241 + 48) = *(void *)(v266 + 48);
                      *(_OWORD *)v282 = v283;
                      *(unsigned char *)(v266 + 55) = 0;
                      *(unsigned char *)(v266 + 32) = 0;
                      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v241 + 56));
                      *(_OWORD *)(v241 + 56) = *(_OWORD *)(v266 + 56);
                      *(void *)(v241 + 72) = *(void *)(v266 + 72);
                      *(void *)(v266 + 56) = 0;
                      *(void *)(v266 + 64) = 0;
                      *(void *)(v266 + 72) = 0;
                      if (!v265) {
                        break;
                      }
                      unint64_t v265 = (v265 - 1) >> 1;
                      unint64_t v266 = a1 + 80 * v265;
                      int v284 = *(char *)(v266 + 23);
                      if (v284 >= 0) {
                        size_t v285 = *(unsigned __int8 *)(v266 + 23);
                      }
                      else {
                        size_t v285 = *(void *)(v266 + 8);
                      }
                      if (v284 >= 0) {
                        v286 = (const void *)(a1 + 80 * v265);
                      }
                      else {
                        v286 = *(const void **)v266;
                      }
                      if ((unint64_t)v278 >= v285) {
                        size_t v287 = v285;
                      }
                      else {
                        size_t v287 = (size_t)v278;
                      }
                      int v288 = memcmp(v286, v279, v287);
                      BOOL v289 = v285 < (unint64_t)v278;
                      if (v288) {
                        BOOL v289 = v288 < 0;
                      }
                      uint64_t v241 = v280;
                    }
                    while (v289);
                    if (*(char *)(v280 + 23) < 0) {
                      operator delete(*(void **)v280);
                    }
                    v290 = (void **)(v280 + 32);
                    long long v291 = *(_OWORD *)v348;
                    *(void *)(v280 + 16) = v349;
                    *(_OWORD *)uint64_t v280 = v291;
                    HIBYTE(v349) = 0;
                    LOBYTE(v348[0]) = 0;
                    *(void *)(v280 + 24) = v350;
                    if (*(char *)(v280 + 55) < 0) {
                      operator delete(*v290);
                    }
                    long long v292 = __p;
                    *(void *)(v280 + 48) = v352;
                    *(_OWORD *)v290 = v292;
                    HIBYTE(v352) = 0;
                    LOBYTE(__p) = 0;
                    std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v280 + 56));
                    *(_OWORD *)(v280 + 56) = v353;
                    *(void *)(v280 + 72) = v354;
                    long long v353 = 0uLL;
                    v354 = 0;
                    v347 = (void **)&v353;
                    std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v347);
                    if (SHIBYTE(v352) < 0) {
                      operator delete((void *)__p);
                    }
                    if (SHIBYTE(v349) < 0) {
                      operator delete(v348[0]);
                    }
                  }
                }
              }
              v348[0] = &v345;
              std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v348);
              if (SHIBYTE(v344) < 0) {
                operator delete((void *)v343);
              }
              if (SHIBYTE(v341) < 0) {
                operator delete(v340[0]);
              }
            }
            while (v234-- > 2);
          }
          return;
        }
        uint64_t v11 = (long long *)(v8 + 80 * (v10 >> 1));
        if ((unint64_t)v9 >= 0x2801)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8, v8 + 80 * (v10 >> 1), v336);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8 + 80, v8 + 80 * (v10 >> 1) - 80, (const void **)(a2 - 160));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8 + 160, v8 + 80 + 80 * (v10 >> 1), (const void **)(a2 - 240));
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8 + 80 * (v10 >> 1) - 80, (uint64_t)v11, (const void **)(v8 + 80 + 80 * (v10 >> 1)));
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v8, v11);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v8 + 80 * (v10 >> 1), v8, v336);
        }
        --a3;
        if (a4) {
          break;
        }
        int v12 = *(char *)(v8 + 23);
        int v13 = *(char *)(v8 - 57);
        if (v13 >= 0) {
          size_t v14 = *(unsigned __int8 *)(v8 - 57);
        }
        else {
          size_t v14 = *(void *)(v8 - 72);
        }
        if (v13 >= 0) {
          uint64_t v15 = (const void *)(v8 - 80);
        }
        else {
          uint64_t v15 = *(const void **)(v8 - 80);
        }
        if (v12 >= 0) {
          size_t v16 = *(unsigned __int8 *)(v8 + 23);
        }
        else {
          size_t v16 = *(void *)(v8 + 8);
        }
        if (v12 >= 0) {
          uint64_t v17 = (const void *)v8;
        }
        else {
          uint64_t v17 = *(const void **)v8;
        }
        if (v16 >= v14) {
          size_t v18 = v14;
        }
        else {
          size_t v18 = v16;
        }
        int v19 = memcmp(v15, v17, v18);
        BOOL v20 = v14 < v16;
        if (v19) {
          BOOL v20 = v19 < 0;
        }
        if (v20) {
          break;
        }
        long long v73 = *(_OWORD *)v8;
        std::string::size_type v74 = *(const void **)(v8 + 24);
        v349 = *(const void **)(v8 + 16);
        *(_OWORD *)v348 = v73;
        *(void *)(v8 + 8) = 0;
        *(void *)(v8 + 16) = 0;
        *(void *)uint64_t v8 = 0;
        long long v75 = *(_OWORD *)(v8 + 32);
        v352 = *(const void **)(v8 + 48);
        long long __p = v75;
        *(void *)(v8 + 40) = 0;
        *(void *)(v8 + 48) = 0;
        long long v76 = *(_OWORD *)(v8 + 56);
        *(void *)(v8 + 32) = 0;
        long long v353 = v76;
        v77 = *(const void **)(v8 + 72);
        v350 = v74;
        v354 = v77;
        *(void *)(v8 + 56) = 0;
        *(void *)(v8 + 64) = 0;
        *(void *)(v8 + 72) = 0;
        int v78 = *(char *)(a2 - 57);
        if (SHIBYTE(v349) >= 0) {
          int v79 = (void *)HIBYTE(v349);
        }
        else {
          int v79 = v348[1];
        }
        if (SHIBYTE(v349) >= 0) {
          v80 = v348;
        }
        else {
          v80 = (void **)v348[0];
        }
        if (v78 >= 0) {
          size_t v81 = *(unsigned __int8 *)(a2 - 57);
        }
        else {
          size_t v81 = *(void *)(a2 - 72);
        }
        if (v78 >= 0) {
          v82 = (const void *)(a2 - 80);
        }
        else {
          v82 = *(const void **)(a2 - 80);
        }
        if (v81 >= (unint64_t)v79) {
          size_t v83 = (size_t)v79;
        }
        else {
          size_t v83 = v81;
        }
        int v84 = memcmp(v80, v82, v83);
        BOOL v85 = (unint64_t)v79 < v81;
        if (v84) {
          BOOL v85 = v84 < 0;
        }
        if (v85)
        {
          v86 = (const void **)(v8 + 80);
          do
          {
            int v87 = *((char *)v86 + 23);
            if (v87 >= 0) {
              size_t v88 = *((unsigned __int8 *)v86 + 23);
            }
            else {
              size_t v88 = (size_t)v86[1];
            }
            if (v87 >= 0) {
              long long v89 = v86;
            }
            else {
              long long v89 = *v86;
            }
            if (v88 >= (unint64_t)v79) {
              size_t v90 = (size_t)v79;
            }
            else {
              size_t v90 = v88;
            }
            int v91 = memcmp(v80, v89, v90);
            BOOL v92 = (unint64_t)v79 < v88;
            if (v91) {
              BOOL v92 = v91 < 0;
            }
            v86 += 10;
          }
          while (!v92);
          unint64_t v7 = (unint64_t)(v86 - 10);
        }
        else
        {
          char v93 = (const void **)(v8 + 80);
          do
          {
            unint64_t v7 = (unint64_t)v93;
            if ((unint64_t)v93 >= a2) {
              break;
            }
            int v94 = *((char *)v93 + 23);
            if (v94 >= 0) {
              size_t v95 = *((unsigned __int8 *)v93 + 23);
            }
            else {
              size_t v95 = (size_t)v93[1];
            }
            if (v94 >= 0) {
              uint64_t v96 = v93;
            }
            else {
              uint64_t v96 = *v93;
            }
            if (v95 >= (unint64_t)v79) {
              size_t v97 = (size_t)v79;
            }
            else {
              size_t v97 = v95;
            }
            int v98 = memcmp(v80, v96, v97);
            BOOL v99 = v98 < 0;
            if (!v98) {
              BOOL v99 = (unint64_t)v79 < v95;
            }
            char v93 = (const void **)(v7 + 80);
          }
          while (!v99);
        }
        v100 = (long long *)a2;
        if (v7 < a2)
        {
          v101 = (const void **)(a2 - 80);
          do
          {
            int v102 = *((char *)v101 + 23);
            if (v102 >= 0) {
              size_t v103 = *((unsigned __int8 *)v101 + 23);
            }
            else {
              size_t v103 = (size_t)v101[1];
            }
            if (v102 >= 0) {
              std::string::size_type v104 = v101;
            }
            else {
              std::string::size_type v104 = *v101;
            }
            if (v103 >= (unint64_t)v79) {
              size_t v105 = (size_t)v79;
            }
            else {
              size_t v105 = v103;
            }
            int v106 = memcmp(v80, v104, v105);
            BOOL v107 = (unint64_t)v79 < v103;
            if (v106) {
              BOOL v107 = v106 < 0;
            }
            v101 -= 10;
          }
          while (v107);
          goto LABEL_184;
        }
        while (v7 < (unint64_t)v100)
        {
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v7, v100);
          long long v108 = (const void **)(v7 + 80);
          do
          {
            int v109 = *((char *)v108 + 23);
            if (v109 >= 0) {
              size_t v110 = *((unsigned __int8 *)v108 + 23);
            }
            else {
              size_t v110 = (size_t)v108[1];
            }
            if (v109 >= 0) {
              std::string::size_type v111 = v108;
            }
            else {
              std::string::size_type v111 = *v108;
            }
            if (v110 >= (unint64_t)v79) {
              size_t v112 = (size_t)v79;
            }
            else {
              size_t v112 = v110;
            }
            int v113 = memcmp(v80, v111, v112);
            BOOL v114 = (unint64_t)v79 < v110;
            if (v113) {
              BOOL v114 = v113 < 0;
            }
            v108 += 10;
          }
          while (!v114);
          unint64_t v7 = (unint64_t)(v108 - 10);
          v101 = (const void **)(v100 - 5);
          do
          {
            int v115 = *((char *)v101 + 23);
            if (v115 >= 0) {
              size_t v116 = *((unsigned __int8 *)v101 + 23);
            }
            else {
              size_t v116 = (size_t)v101[1];
            }
            if (v115 >= 0) {
              char v117 = v101;
            }
            else {
              char v117 = *v101;
            }
            if (v116 >= (unint64_t)v79) {
              size_t v118 = (size_t)v79;
            }
            else {
              size_t v118 = v116;
            }
            int v119 = memcmp(v80, v117, v118);
            BOOL v120 = (unint64_t)v79 < v116;
            if (v119) {
              BOOL v120 = v119 < 0;
            }
            v101 -= 10;
          }
          while (v120);
LABEL_184:
          v100 = (long long *)(v101 + 10);
        }
        v121 = (void **)(v7 - 80);
        if (v7 - 80 != v8)
        {
          if (*(char *)(v8 + 23) < 0) {
            operator delete(*(void **)v8);
          }
          uint64_t v122 = (void **)(v8 + 32);
          long long v123 = *(_OWORD *)v121;
          *(void *)(v8 + 16) = *(void *)(v7 - 64);
          *(_OWORD *)uint64_t v8 = v123;
          *(unsigned char *)(v7 - 57) = 0;
          *(unsigned char *)(v7 - 80) = 0;
          *(void *)(v8 + 24) = *(void *)(v7 - 56);
          if (*(char *)(v8 + 55) < 0) {
            operator delete(*v122);
          }
          long long v124 = *(_OWORD *)(v7 - 48);
          *(void *)(v8 + 48) = *(void *)(v7 - 32);
          *(_OWORD *)uint64_t v122 = v124;
          *(unsigned char *)(v7 - 25) = 0;
          *(unsigned char *)(v7 - 48) = 0;
          std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v8 + 56));
          *(_OWORD *)(v8 + 56) = *(_OWORD *)(v7 - 24);
          *(void *)(v8 + 72) = *(void *)(v7 - 8);
          *(void *)(v7 - 24) = 0;
          *(void *)(v7 - 16) = 0;
          *(void *)(v7 - 8) = 0;
        }
        if (*(char *)(v7 - 57) < 0) {
          operator delete(*v121);
        }
        long long v125 = *(_OWORD *)v348;
        *(void *)(v7 - 64) = v349;
        *(_OWORD *)v121 = v125;
        HIBYTE(v349) = 0;
        LOBYTE(v348[0]) = 0;
        *(void *)(v7 - 56) = v350;
        char v126 = (void **)(v7 - 48);
        if (*(char *)(v7 - 25) < 0) {
          operator delete(*v126);
        }
        long long v127 = __p;
        *(void *)(v7 - 32) = v352;
        *(_OWORD *)char v126 = v127;
        HIBYTE(v352) = 0;
        LOBYTE(__p) = 0;
        std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v7 - 24));
        *(_OWORD *)(v7 - 24) = v353;
        *(void *)(v7 - 8) = v354;
        long long v353 = 0uLL;
        v354 = 0;
        v340[0] = &v353;
        std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
        if (SHIBYTE(v352) < 0) {
          operator delete((void *)__p);
        }
        if (SHIBYTE(v349) < 0) {
          operator delete(v348[0]);
        }
LABEL_123:
        a4 = 0;
      }
      uint64_t v21 = 0;
      long long v22 = *(_OWORD *)v8;
      char v23 = *(const void **)(v8 + 24);
      v349 = *(const void **)(v8 + 16);
      *(_OWORD *)v348 = v22;
      *(void *)(v8 + 8) = 0;
      *(void *)(v8 + 16) = 0;
      *(void *)uint64_t v8 = 0;
      uint64_t v24 = v8 + 32;
      long long v25 = *(_OWORD *)(v8 + 32);
      v352 = *(const void **)(v8 + 48);
      long long __p = v25;
      *(void *)(v8 + 40) = 0;
      *(void *)(v8 + 48) = 0;
      *(void *)(v8 + 32) = 0;
      unint64_t v26 = (void **)(v8 + 56);
      long long v353 = *(_OWORD *)(v8 + 56);
      unint64_t v27 = *(const void **)(v8 + 72);
      v350 = v23;
      v354 = v27;
      *(void *)(v8 + 56) = 0;
      *(void *)(v8 + 64) = 0;
      if (SHIBYTE(v349) >= 0) {
        long long v28 = (void *)HIBYTE(v349);
      }
      else {
        long long v28 = v348[1];
      }
      if (SHIBYTE(v349) >= 0) {
        char v29 = v348;
      }
      else {
        char v29 = (void **)v348[0];
      }
      *(void *)(v8 + 72) = 0;
      do
      {
        int v30 = *(char *)(v8 + v21 + 103);
        if (v30 >= 0) {
          size_t v31 = *(unsigned __int8 *)(v8 + v21 + 103);
        }
        else {
          size_t v31 = *(void *)(v8 + v21 + 88);
        }
        if (v30 >= 0) {
          size_t v32 = (const void *)(v8 + v21 + 80);
        }
        else {
          size_t v32 = *(const void **)(v8 + v21 + 80);
        }
        if ((unint64_t)v28 >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = (size_t)v28;
        }
        int v34 = memcmp(v32, v29, v33);
        BOOL v35 = v31 < (unint64_t)v28;
        if (v34) {
          BOOL v35 = v34 < 0;
        }
        v21 += 80;
      }
      while (v35);
      unint64_t v36 = v8 + v21;
      v37 = (const void **)(a2 - 80);
      if (v21 == 80)
      {
        v37 = (const void **)(a2 - 80);
        while (1)
        {
          v44 = (long long *)(v37 + 10);
          if (v36 >= (unint64_t)(v37 + 10)) {
            break;
          }
          int v45 = *((char *)v37 + 23);
          if (v45 >= 0) {
            size_t v46 = *((unsigned __int8 *)v37 + 23);
          }
          else {
            size_t v46 = (size_t)v37[1];
          }
          if (v45 >= 0) {
            long long v47 = v37;
          }
          else {
            long long v47 = *v37;
          }
          if ((unint64_t)v28 >= v46) {
            size_t v48 = v46;
          }
          else {
            size_t v48 = (size_t)v28;
          }
          int v49 = memcmp(v47, v29, v48);
          BOOL v50 = v46 < (unint64_t)v28;
          if (v49) {
            BOOL v50 = v49 < 0;
          }
          v37 -= 10;
          if (v50) {
            goto LABEL_75;
          }
        }
      }
      else
      {
        do
        {
          int v38 = *((char *)v37 + 23);
          if (v38 >= 0) {
            size_t v39 = *((unsigned __int8 *)v37 + 23);
          }
          else {
            size_t v39 = (size_t)v37[1];
          }
          if (v38 >= 0) {
            size_t v40 = v37;
          }
          else {
            size_t v40 = *v37;
          }
          if ((unint64_t)v28 >= v39) {
            size_t v41 = v39;
          }
          else {
            size_t v41 = (size_t)v28;
          }
          int v42 = memcmp(v40, v29, v41);
          BOOL v43 = v39 < (unint64_t)v28;
          if (v42) {
            BOOL v43 = v42 < 0;
          }
          v37 -= 10;
        }
        while (!v43);
LABEL_75:
        v44 = (long long *)(v37 + 10);
      }
      unint64_t v7 = v36;
      if (v36 < (unint64_t)v44)
      {
        std::string::size_type v51 = v44;
        do
        {
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v7, v51);
          v52 = (const void **)(v7 + 80);
          do
          {
            int v53 = *((char *)v52 + 23);
            if (v53 >= 0) {
              size_t v54 = *((unsigned __int8 *)v52 + 23);
            }
            else {
              size_t v54 = (size_t)v52[1];
            }
            if (v53 >= 0) {
              long long v55 = v52;
            }
            else {
              long long v55 = *v52;
            }
            if ((unint64_t)v28 >= v54) {
              size_t v56 = v54;
            }
            else {
              size_t v56 = (size_t)v28;
            }
            int v57 = memcmp(v55, v29, v56);
            BOOL v58 = v54 < (unint64_t)v28;
            if (v57) {
              BOOL v58 = v57 < 0;
            }
            v52 += 10;
          }
          while (v58);
          unint64_t v7 = (unint64_t)(v52 - 10);
          long long v59 = (const void **)(v51 - 5);
          do
          {
            int v60 = *((char *)v59 + 23);
            if (v60 >= 0) {
              size_t v61 = *((unsigned __int8 *)v59 + 23);
            }
            else {
              size_t v61 = (size_t)v59[1];
            }
            if (v60 >= 0) {
              v62 = v59;
            }
            else {
              v62 = *v59;
            }
            if ((unint64_t)v28 >= v61) {
              size_t v63 = v61;
            }
            else {
              size_t v63 = (size_t)v28;
            }
            int v64 = memcmp(v62, v29, v63);
            BOOL v65 = v61 < (unint64_t)v28;
            if (v64) {
              BOOL v65 = v64 < 0;
            }
            v59 -= 10;
          }
          while (!v65);
          std::string::size_type v51 = (long long *)(v59 + 10);
        }
        while (v7 < (unint64_t)v51);
      }
      std::string::size_type v66 = (void **)(v7 - 80);
      if (v7 - 80 != a1)
      {
        if (*(char *)(a1 + 23) < 0) {
          operator delete(*(void **)a1);
        }
        long long v67 = *(_OWORD *)v66;
        *(void *)(a1 + 16) = *(void *)(v7 - 64);
        *(_OWORD *)a1 = v67;
        *(unsigned char *)(v7 - 57) = 0;
        *(unsigned char *)(v7 - 80) = 0;
        *(void *)(a1 + 24) = *(void *)(v7 - 56);
        if (*(char *)(a1 + 55) < 0) {
          operator delete(*(void **)v24);
        }
        long long v68 = *(_OWORD *)(v7 - 48);
        *(void *)(v24 + 16) = *(void *)(v7 - 32);
        *(_OWORD *)uint64_t v24 = v68;
        *(unsigned char *)(v7 - 25) = 0;
        *(unsigned char *)(v7 - 48) = 0;
        std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v26);
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(v7 - 24);
        *(void *)(a1 + 72) = *(void *)(v7 - 8);
        *(void *)(v7 - 24) = 0;
        *(void *)(v7 - 16) = 0;
        *(void *)(v7 - 8) = 0;
      }
      if (*(char *)(v7 - 57) < 0) {
        operator delete(*v66);
      }
      long long v69 = *(_OWORD *)v348;
      *(void *)(v7 - 64) = v349;
      *(_OWORD *)std::string::size_type v66 = v69;
      HIBYTE(v349) = 0;
      LOBYTE(v348[0]) = 0;
      *(void *)(v7 - 56) = v350;
      size_t v70 = (void **)(v7 - 48);
      if (*(char *)(v7 - 25) < 0) {
        operator delete(*v70);
      }
      long long v71 = __p;
      *(void *)(v7 - 32) = v352;
      *(_OWORD *)size_t v70 = v71;
      HIBYTE(v352) = 0;
      LOBYTE(__p) = 0;
      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v7 - 24));
      *(_OWORD *)(v7 - 24) = v353;
      *(void *)(v7 - 8) = v354;
      long long v353 = 0uLL;
      v354 = 0;
      v340[0] = &v353;
      std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v340);
      if (SHIBYTE(v352) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v349) < 0) {
        operator delete(v348[0]);
      }
      if (v36 < (unint64_t)v44)
      {
LABEL_122:
        std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,false>(a1, v7 - 80, a3, a4 & 1);
        goto LABEL_123;
      }
      BOOL v72 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, (const void **)(v7 - 80));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(v7, (const void **)a2))
      {
        break;
      }
      if (!v72) {
        goto LABEL_122;
      }
    }
    a2 = v7 - 80;
    if (!v72) {
      continue;
    }
    break;
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a2, a3, (const void **)a4);
  int v10 = *(char *)(a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    int v13 = a5;
  }
  else {
    int v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v14 = *(void *)(a4 + 8);
  }
  if (v10 >= 0) {
    uint64_t v15 = (const void *)a4;
  }
  else {
    uint64_t v15 = *(const void **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a4, (long long *)a5);
    int v19 = *(char *)(a3 + 23);
    int v20 = *(char *)(a4 + 23);
    if (v20 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v21 = *(void *)(a4 + 8);
    }
    if (v20 >= 0) {
      long long v22 = (const void *)a4;
    }
    else {
      long long v22 = *(const void **)a4;
    }
    if (v19 >= 0) {
      size_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v23 = *(void *)(a3 + 8);
    }
    if (v19 >= 0) {
      uint64_t v24 = (const void *)a3;
    }
    else {
      uint64_t v24 = *(const void **)a3;
    }
    if (v23 >= v21) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v23;
    }
    int v26 = memcmp(v22, v24, v25);
    BOOL v27 = v21 < v23;
    if (v26) {
      BOOL v27 = v26 < 0;
    }
    if (v27)
    {
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a3, (long long *)a4);
      int v28 = *(char *)(a2 + 23);
      int v29 = *(char *)(a3 + 23);
      if (v29 >= 0) {
        size_t v30 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v30 = *(void *)(a3 + 8);
      }
      if (v29 >= 0) {
        size_t v31 = (const void *)a3;
      }
      else {
        size_t v31 = *(const void **)a3;
      }
      if (v28 >= 0) {
        size_t v32 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v32 = *(void *)(a2 + 8);
      }
      if (v28 >= 0) {
        size_t v33 = (const void *)a2;
      }
      else {
        size_t v33 = *(const void **)a2;
      }
      if (v32 >= v30) {
        size_t v34 = v30;
      }
      else {
        size_t v34 = v32;
      }
      int v35 = memcmp(v31, v33, v34);
      BOOL v36 = v30 < v32;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
      if (v36)
      {
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (long long *)a3);
        int v37 = *(char *)(a1 + 23);
        int v38 = *(char *)(a2 + 23);
        if (v38 >= 0) {
          size_t v39 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v39 = *(void *)(a2 + 8);
        }
        if (v38 >= 0) {
          size_t v40 = (const void *)a2;
        }
        else {
          size_t v40 = *(const void **)a2;
        }
        if (v37 >= 0) {
          size_t v41 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v41 = *(void *)(a1 + 8);
        }
        if (v37 >= 0) {
          int v42 = (const void *)a1;
        }
        else {
          int v42 = *(const void **)a1;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        if (v45)
        {
          std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (long long *)a2);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, uint64_t a2, const void **a3)
{
  int v6 = *(char *)(a1 + 23);
  int v7 = *(char *)(a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v8 = *(void *)(a2 + 8);
  }
  if (v7 >= 0) {
    uint64_t v9 = (const void *)a2;
  }
  else {
    uint64_t v9 = *(const void **)a2;
  }
  if (v6 >= 0) {
    size_t v10 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v10 = *(void *)(a1 + 8);
  }
  if (v6 >= 0) {
    int v11 = (const void *)a1;
  }
  else {
    int v11 = *(const void **)a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    int v17 = a3;
  }
  else {
    int v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  int v19 = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v14)
  {
    uint64_t v21 = a1;
    if (v20)
    {
LABEL_51:
      size_t v31 = (long long *)a3;
LABEL_72:
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(v21, v31);
      return;
    }
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (long long *)a2);
    int v22 = *(char *)(a2 + 23);
    int v23 = *((char *)a3 + 23);
    if (v23 >= 0) {
      size_t v24 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v24 = (size_t)a3[1];
    }
    if (v23 >= 0) {
      size_t v25 = a3;
    }
    else {
      size_t v25 = *a3;
    }
    if (v22 >= 0) {
      size_t v26 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v26 = *(void *)(a2 + 8);
    }
    if (v22 >= 0) {
      BOOL v27 = (const void *)a2;
    }
    else {
      BOOL v27 = *(const void **)a2;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v25, v27, v28);
    BOOL v30 = v24 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30)
    {
      uint64_t v21 = a2;
      goto LABEL_51;
    }
  }
  else if (v20)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (long long *)a3);
    int v32 = *(char *)(a1 + 23);
    int v33 = *(char *)(a2 + 23);
    if (v33 >= 0) {
      size_t v34 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v34 = *(void *)(a2 + 8);
    }
    if (v33 >= 0) {
      int v35 = (const void *)a2;
    }
    else {
      int v35 = *(const void **)a2;
    }
    if (v32 >= 0) {
      size_t v36 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v36 = *(void *)(a1 + 8);
    }
    if (v32 >= 0) {
      int v37 = (const void *)a1;
    }
    else {
      int v37 = *(const void **)a1;
    }
    if (v36 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v36;
    }
    int v39 = memcmp(v35, v37, v38);
    BOOL v40 = v34 < v36;
    if (v39) {
      BOOL v40 = v39 < 0;
    }
    if (v40)
    {
      uint64_t v21 = a1;
      size_t v31 = (long long *)a2;
      goto LABEL_72;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 4;
  BOOL result = 1;
  switch(0xCCCCCCCCCCCCCCCDLL * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      int v6 = (long long *)(a2 - 10);
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 57);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 57);
      }
      else {
        size_t v9 = (size_t)*(a2 - 9);
      }
      if (v8 >= 0) {
        size_t v10 = a2 - 10;
      }
      else {
        size_t v10 = (const void **)*(a2 - 10);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15) {
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, v6);
      }
      return 1;
    case 3uLL:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, a2 - 10);
      return 1;
    case 4uLL:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, a1 + 160, a2 - 10);
      return 1;
    case 5uLL:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *,0>(a1, a1 + 80, a1 + 160, a1 + 240, a2 - 10);
      return 1;
    default:
      size_t v16 = (const void **)(a1 + 160);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a1 + 80, (const void **)(a1 + 160));
      int v17 = (const void **)(a1 + 240);
      if ((const void **)(a1 + 240) == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    int v20 = *((char *)v16 + 23);
    int v21 = *((char *)v17 + 23);
    if (v21 >= 0) {
      size_t v22 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v22 = (size_t)v17[1];
    }
    if (v21 >= 0) {
      int v23 = v17;
    }
    else {
      int v23 = *v17;
    }
    if (v20 >= 0) {
      size_t v24 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v24 = (size_t)v16[1];
    }
    if (v20 >= 0) {
      size_t v25 = v16;
    }
    else {
      size_t v25 = *v16;
    }
    if (v24 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v23, v25, v26);
    BOOL v28 = v22 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      *(_OWORD *)BOOL v50 = *(_OWORD *)v17;
      int v29 = v17[2];
      BOOL v30 = v17[3];
      v17[1] = 0;
      void v17[2] = 0;
      const void *v17 = 0;
      uint64_t v51 = (uint64_t)v29;
      uint64_t v52 = (uint64_t)v30;
      long long __p = *((_OWORD *)v17 + 2);
      size_t v54 = v17[6];
      v17[4] = 0;
      v17[5] = 0;
      long long v55 = *(_OWORD *)(v17 + 7);
      size_t v56 = v17[9];
      v17[8] = 0;
      v17[9] = 0;
      uint64_t v31 = v18;
      v17[6] = 0;
      v17[7] = 0;
      while (1)
      {
        uint64_t v32 = a1 + v31;
        int v33 = (void **)(a1 + v31 + 240);
        if (*(char *)(a1 + v31 + 263) < 0) {
          operator delete(*v33);
        }
        *(_OWORD *)int v33 = *(_OWORD *)(v32 + 160);
        *(void *)(a1 + v31 + 256) = *(void *)(v32 + 176);
        *(unsigned char *)(v32 + 183) = 0;
        *(unsigned char *)(v32 + 160) = 0;
        *(void *)(v32 + 264) = *(void *)(v32 + 184);
        size_t v34 = (void **)(v32 + 272);
        if (*(char *)(v32 + 295) < 0) {
          operator delete(*v34);
        }
        uint64_t v35 = a1 + v31;
        *(_OWORD *)size_t v34 = *(_OWORD *)(a1 + v31 + 192);
        *(void *)(v32 + 288) = *(void *)(a1 + v31 + 208);
        *(unsigned char *)(v35 + 215) = 0;
        *(unsigned char *)(v35 + 192) = 0;
        std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(a1 + v31 + 296));
        *(_OWORD *)(a1 + v31 + 296) = *(_OWORD *)(a1 + v31 + 216);
        *(void *)(v35 + 312) = *(void *)(v35 + 232);
        *(void *)(v35 + 224) = 0;
        *(void *)(v35 + 232) = 0;
        *(void *)(v35 + 216) = 0;
        if (v31 == -160) {
          break;
        }
        int v36 = *(char *)(v35 + 103);
        if (v51 >= 0) {
          int v37 = (void *)HIBYTE(v51);
        }
        else {
          int v37 = v50[1];
        }
        if (v51 >= 0) {
          size_t v38 = v50;
        }
        else {
          size_t v38 = (void **)v50[0];
        }
        if (v36 >= 0) {
          size_t v39 = *(unsigned __int8 *)(v35 + 103);
        }
        else {
          size_t v39 = *(void *)(v35 + 88);
        }
        if (v36 >= 0) {
          BOOL v40 = (const void *)(v35 + 80);
        }
        else {
          BOOL v40 = *(const void **)(v35 + 80);
        }
        if (v39 >= (unint64_t)v37) {
          size_t v41 = (size_t)v37;
        }
        else {
          size_t v41 = v39;
        }
        int v42 = memcmp(v38, v40, v41);
        BOOL v43 = (unint64_t)v37 < v39;
        if (v42) {
          BOOL v43 = v42 < 0;
        }
        v31 -= 80;
        if (!v43)
        {
          uint64_t v44 = a1 + v31 + 240;
          goto LABEL_67;
        }
      }
      uint64_t v44 = a1;
LABEL_67:
      if (*(char *)(v44 + 23) < 0) {
        operator delete(*(void **)v44);
      }
      BOOL v45 = (void **)(v35 + 192);
      *(_OWORD *)uint64_t v44 = *(_OWORD *)v50;
      uint64_t v46 = v51;
      uint64_t v47 = v52;
      HIBYTE(v51) = 0;
      LOBYTE(v50[0]) = 0;
      *(void *)(v44 + 16) = v46;
      *(void *)(v44 + 24) = v47;
      if (*(char *)(v44 + 55) < 0) {
        operator delete(*v45);
      }
      *(_OWORD *)BOOL v45 = __p;
      *(void *)(v35 + 208) = v54;
      HIBYTE(v54) = 0;
      LOBYTE(__p) = 0;
      std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)(v35 + 216));
      uint64_t v48 = *((void *)&v55 + 1);
      *(void *)(v35 + 216) = v55;
      int v49 = v56;
      *(void *)(v44 + 64) = v48;
      *(void *)(v44 + 72) = v49;
      size_t v56 = 0;
      long long v55 = 0uLL;
      int v57 = (void **)&v55;
      std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v57);
      if (SHIBYTE(v54) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(v50[0]);
      }
      if (++v19 == 8) {
        return v17 + 10 == a2;
      }
    }
    size_t v16 = v17;
    v18 += 80;
    v17 += 10;
    if (v17 == a2) {
      return 1;
    }
  }
}

void std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(uint64_t a1, long long *a2)
{
  *(_OWORD *)BOOL v15 = *(_OWORD *)a1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = 0;
  uint64_t v16 = v4;
  uint64_t v6 = a1 + 32;
  *(_OWORD *)long long __p = *(_OWORD *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  int v8 = (void **)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v18 = v7;
  uint64_t v19 = v9;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v20 = v10;
  uint64_t v21 = v11;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  long long v12 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v12;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)v6);
  }
  long long v13 = a2[2];
  *(void *)(v6 + 16) = *((void *)a2 + 6);
  *(_OWORD *)uint64_t v6 = v13;
  *((unsigned char *)a2 + 55) = 0;
  *((unsigned char *)a2 + 32) = 0;
  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate(v8);
  *(_OWORD *)(a1 + 56) = *(long long *)((char *)a2 + 56);
  *(void *)(a1 + 72) = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 9) = 0;
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  int v14 = (void **)(a2 + 2);
  *a2 = *(_OWORD *)v15;
  *((void *)a2 + 2) = v16;
  *((void *)a2 + 3) = v5;
  if (*((char *)a2 + 55) < 0) {
    operator delete(*v14);
  }
  *(_OWORD *)int v14 = *(_OWORD *)__p;
  *((void *)a2 + 6) = v18;
  std::vector<siri::intelligence::FunctionArgument>::__vdeallocate((void **)a2 + 7);
  *((void *)a2 + 7) = v9;
  *((void *)a2 + 8) = v10;
  *((void *)a2 + 9) = v11;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v19 = 0;
  size_t v22 = (void **)&v19;
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v22);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::FunctionHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::FunctionDefinition *>(a1, a2, (const void **)a3);
  int v8 = *(char *)(a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    uint64_t v11 = a4;
  }
  else {
    uint64_t v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v12 = *(void *)(a3 + 8);
  }
  if (v8 >= 0) {
    long long v13 = (const void *)a3;
  }
  else {
    long long v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v16 = v10 < v12;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16)
  {
    std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a3, (long long *)a4);
    int v17 = *(char *)(a2 + 23);
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      size_t v19 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v19 = *(void *)(a3 + 8);
    }
    if (v18 >= 0) {
      uint64_t v20 = (const void *)a3;
    }
    else {
      uint64_t v20 = *(const void **)a3;
    }
    if (v17 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    if (v17 >= 0) {
      size_t v22 = (const void *)a2;
    }
    else {
      size_t v22 = *(const void **)a2;
    }
    if (v21 >= v19) {
      size_t v23 = v19;
    }
    else {
      size_t v23 = v21;
    }
    int v24 = memcmp(v20, v22, v23);
    BOOL v25 = v19 < v21;
    if (v24) {
      BOOL v25 = v24 < 0;
    }
    if (v25)
    {
      std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a2, (long long *)a3);
      int v26 = *(char *)(a1 + 23);
      int v27 = *(char *)(a2 + 23);
      if (v27 >= 0) {
        size_t v28 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v28 = *(void *)(a2 + 8);
      }
      if (v27 >= 0) {
        int v29 = (const void *)a2;
      }
      else {
        int v29 = *(const void **)a2;
      }
      if (v26 >= 0) {
        size_t v30 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v30 = *(void *)(a1 + 8);
      }
      if (v26 >= 0) {
        uint64_t v31 = (const void *)a1;
      }
      else {
        uint64_t v31 = *(const void **)a1;
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v29, v31, v32);
      BOOL v34 = v28 < v30;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      if (v34)
      {
        std::swap[abi:ne180100]<siri::intelligence::FunctionDefinition>(a1, (long long *)a2);
      }
    }
  }
}

void std::vector<siri::intelligence::FunctionDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 48);
  std::vector<siri::intelligence::FunctionArgument>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *std::allocator<siri::intelligence::FunctionDescription>::construct[abi:ne180100]<siri::intelligence::FunctionDescription,siri::intelligence::FunctionDescription const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  this[2].__r_.__value_.__r.__words[0] = 0;
  this[2].__r_.__value_.__l.__size_ = 0;
  this[2].__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::FunctionArgument>::__init_with_size[abi:ne180100]<siri::intelligence::FunctionArgument*,siri::intelligence::FunctionArgument*>(this[2].__r_.__value_.__r.__words, *((void *)a2 + 6), *((void *)a2 + 7), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 3));
}

void sub_239A8DC48(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::intelligence::FunctionDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    std::allocator<siri::intelligence::FunctionDescription>::destroy[abi:ne180100](i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::intelligence::BehaviorHandler::GetAllDescriptions(int64x2_t *a1@<X8>)
{
  siri::intelligence::GetBehaviorDefinitions((siri::intelligence *)&v23);
  unint64_t v3 = 126 - 2 * __clz(((char *)v24 - (char *)v23) >> 6);
  if (v24 == v23) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>((unint64_t)v23, v24, v4, 1);
  a1->i64[0] = 0;
  a1->i64[1] = 0;
  a1[1].i64[0] = 0;
  long long v5 = v23;
  for (uint64_t i = v24; v5 != i; v5 += 8)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    memset(v22, 0, sizeof(v22));
    std::string::operator=(&__p, (const std::string *)v5);
    if (v22 != (unsigned char *)(v5 + 4)) {
      std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((uint64_t)v22, (std::string *)v5[4], (long long *)v5[5], 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v5[5] - (unsigned char *)v5[4]) >> 3));
    }
    unint64_t v8 = a1->u64[1];
    unint64_t v7 = a1[1].u64[0];
    if (v8 >= v7)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - a1->i64[0]) >> 4);
      unint64_t v11 = v10 + 1;
      if (v10 + 1 > 0x555555555555555) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - a1->i64[0]) >> 4);
      if (2 * v12 > v11) {
        unint64_t v11 = 2 * v12;
      }
      if (v12 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x555555555555555;
      }
      else {
        unint64_t v13 = v11;
      }
      size_t v28 = a1 + 1;
      if (v13)
      {
        if (v13 > 0x555555555555555) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        size_t v14 = (void **)operator new(48 * v13);
      }
      else
      {
        size_t v14 = 0;
      }
      BOOL v25 = v14;
      v26.i64[0] = (uint64_t)&v14[6 * v10];
      v26.i64[1] = v26.i64[0];
      int v27 = &v14[6 * v13];
      std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>((std::string *)v26.i64[0], (long long *)&__p);
      uint64_t v15 = v26.i64[0];
      uint64_t v9 = v26.i64[1] + 48;
      v26.i64[1] += 48;
      uint64_t v17 = a1->i64[0];
      unint64_t v16 = a1->u64[1];
      if (v16 == a1->i64[0])
      {
        int64x2_t v19 = vdupq_n_s64(v16);
      }
      else
      {
        do
        {
          long long v18 = *(_OWORD *)(v16 - 48);
          *(void *)(v15 - 32) = *(void *)(v16 - 32);
          *(_OWORD *)(v15 - 48) = v18;
          *(void *)(v16 - 40) = 0;
          *(void *)(v16 - 32) = 0;
          *(void *)(v16 - 48) = 0;
          *(void *)(v15 - 24) = 0;
          *(void *)(v15 - 16) = 0;
          *(void *)(v15 - 8) = 0;
          *(_OWORD *)(v15 - 24) = *(_OWORD *)(v16 - 24);
          *(void *)(v15 - 8) = *(void *)(v16 - 8);
          v15 -= 48;
          *(void *)(v16 - 24) = 0;
          *(void *)(v16 - 16) = 0;
          *(void *)(v16 - 8) = 0;
          v16 -= 48;
        }
        while (v16 != v17);
        int64x2_t v19 = *a1;
        uint64_t v9 = v26.i64[1];
      }
      a1->i64[0] = v15;
      a1->i64[1] = v9;
      int64x2_t v26 = v19;
      uint64_t v20 = (void **)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v27;
      int v27 = v20;
      BOOL v25 = (void **)v19.i64[0];
      std::__split_buffer<siri::intelligence::BehaviorDescription>::~__split_buffer((uint64_t)&v25);
    }
    else
    {
      std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>((std::string *)a1->i64[1], (long long *)&__p);
      uint64_t v9 = v8 + 48;
      a1->i64[1] = v9;
    }
    a1->i64[1] = v9;
    BOOL v25 = (void **)v22;
    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v25);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v23;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_239A8DF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  a9 = &a15;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  _Unwind_Resume(a1);
}

void siri::intelligence::GetBehaviorDefinitions(siri::intelligence *this)
{
  uint64_t v179 = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_9, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_9))
  {
    int v24 = this;
    std::string::basic_string[abi:ne180100]<0>(&v124, "setString");
    long long v125 = siri::intelligence::BehaviorSetString;
    std::string::basic_string[abi:ne180100]<0>(v118, "name");
    std::string::basic_string[abi:ne180100]<0>(v119, siri::intelligence::TYPE_REFERENCE[0]);
    char v120 = 1;
    std::string::basic_string[abi:ne180100]<0>(v121, "value");
    std::string::basic_string[abi:ne180100]<0>(v122, siri::intelligence::TYPE_STRING[0]);
    char v123 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v126, (uint64_t)v118, 2uLL);
    __int16 v127 = 0;
    std::string::basic_string[abi:ne180100]<0>(v128, "setNumber");
    void v128[3] = siri::intelligence::BehaviorSetNumber;
    std::string::basic_string[abi:ne180100]<0>(v112, "name");
    std::string::basic_string[abi:ne180100]<0>(v113, siri::intelligence::TYPE_REFERENCE[0]);
    char v114 = 1;
    std::string::basic_string[abi:ne180100]<0>(v115, "value");
    std::string::basic_string[abi:ne180100]<0>(v116, siri::intelligence::TYPE_NUMBER[0]);
    char v117 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v129, (uint64_t)v112, 2uLL);
    __int16 v130 = 0;
    std::string::basic_string[abi:ne180100]<0>(v131, "setBoolean");
    void v131[3] = siri::intelligence::BehaviorSetBoolean;
    std::string::basic_string[abi:ne180100]<0>(v106, "name");
    std::string::basic_string[abi:ne180100]<0>(v107, siri::intelligence::TYPE_REFERENCE[0]);
    char v108 = 1;
    std::string::basic_string[abi:ne180100]<0>(v109, "value");
    std::string::basic_string[abi:ne180100]<0>(v110, siri::intelligence::TYPE_BOOLEAN[0]);
    char v111 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v132, (uint64_t)v106, 2uLL);
    __int16 v133 = 0;
    std::string::basic_string[abi:ne180100]<0>(v134, "setArray");
    void v134[3] = siri::intelligence::BehaviorSetArray;
    std::string::basic_string[abi:ne180100]<0>(v100, "name");
    std::string::basic_string[abi:ne180100]<0>(v101, siri::intelligence::TYPE_REFERENCE[0]);
    char v102 = 1;
    std::string::basic_string[abi:ne180100]<0>(v103, "value");
    std::string::basic_string[abi:ne180100]<0>(v104, siri::intelligence::TYPE_ARRAY[0]);
    char v105 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v135, (uint64_t)v100, 2uLL);
    __int16 v136 = 0;
    std::string::basic_string[abi:ne180100]<0>(v137, "setDictionary");
    v137[3] = siri::intelligence::BehaviorSetDictionary;
    std::string::basic_string[abi:ne180100]<0>(v94, "name");
    std::string::basic_string[abi:ne180100]<0>(v95, siri::intelligence::TYPE_REFERENCE[0]);
    char v96 = 1;
    std::string::basic_string[abi:ne180100]<0>(v97, "value");
    std::string::basic_string[abi:ne180100]<0>(v98, siri::intelligence::TYPE_DICTIONARY[0]);
    char v99 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v138, (uint64_t)v94, 2uLL);
    __int16 v139 = 0;
    std::string::basic_string[abi:ne180100]<0>(v140, "pushBack");
    void v140[3] = siri::intelligence::BehaviorPushBack;
    std::string::basic_string[abi:ne180100]<0>(v88, "name");
    std::string::basic_string[abi:ne180100]<0>(v89, siri::intelligence::TYPE_REFERENCE[0]);
    char v90 = 1;
    std::string::basic_string[abi:ne180100]<0>(v91, "value");
    std::string::basic_string[abi:ne180100]<0>(v92, siri::intelligence::TYPE_UNKNOWN);
    char v93 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v141, (uint64_t)v88, 2uLL);
    __int16 v142 = 0;
    std::string::basic_string[abi:ne180100]<0>(v143, "popBack");
    void v143[3] = siri::intelligence::BehaviorPopBack;
    std::string::basic_string[abi:ne180100]<0>(v82, "name");
    std::string::basic_string[abi:ne180100]<0>(v83, siri::intelligence::TYPE_REFERENCE[0]);
    char v84 = 1;
    std::string::basic_string[abi:ne180100]<0>(v85, "destination");
    std::string::basic_string[abi:ne180100]<0>(v86, siri::intelligence::TYPE_REFERENCE[0]);
    char v87 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v144, (uint64_t)v82, 2uLL);
    __int16 v145 = 0;
    std::string::basic_string[abi:ne180100]<0>(v146, "setUndefined");
    void v146[3] = siri::intelligence::BehaviorSetUndefined;
    std::string::basic_string[abi:ne180100]<0>(v79, "name");
    std::string::basic_string[abi:ne180100]<0>(v80, siri::intelligence::TYPE_REFERENCE[0]);
    char v81 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v147, (uint64_t)v79, 1uLL);
    __int16 v148 = 0;
    std::string::basic_string[abi:ne180100]<0>(v149, "setEmpty");
    void v149[3] = siri::intelligence::BehaviorSetEmpty;
    std::string::basic_string[abi:ne180100]<0>(v76, "name");
    std::string::basic_string[abi:ne180100]<0>(v77, siri::intelligence::TYPE_REFERENCE[0]);
    char v78 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v150, (uint64_t)v76, 1uLL);
    __int16 v151 = 0;
    std::string::basic_string[abi:ne180100]<0>(v152, "retryInputs");
    void v152[3] = siri::intelligence::BehaviorRetryInputs;
    std::string::basic_string[abi:ne180100]<0>(v73, "responseId");
    std::string::basic_string[abi:ne180100]<0>(v74, siri::intelligence::TYPE_STRING[0]);
    char v75 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v153, (uint64_t)v73, 1uLL);
    __int16 v154 = 0;
    std::string::basic_string[abi:ne180100]<0>(v155, "repeatLastResponse");
    void v155[3] = siri::intelligence::BehaviorRepeatLastResponse;
    memset(&v155[4], 0, 24);
    __int16 v156 = 0;
    std::string::basic_string[abi:ne180100]<0>(v157, "switchActivity");
    void v157[3] = siri::intelligence::BehaviorSwitchActivity;
    std::string::basic_string[abi:ne180100]<0>(v70, "activityId");
    std::string::basic_string[abi:ne180100]<0>(v71, siri::intelligence::TYPE_STRING[0]);
    char v72 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v158, (uint64_t)v70, 1uLL);
    __int16 v159 = 0;
    std::string::basic_string[abi:ne180100]<0>(v160, "registerUndo");
    void v160[3] = siri::intelligence::BehaviorRegisterUndo;
    std::string::basic_string[abi:ne180100]<0>(v64, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v65, siri::intelligence::TYPE_STRING[0]);
    char v66 = 1;
    std::string::basic_string[abi:ne180100]<0>(v67, "userData");
    std::string::basic_string[abi:ne180100]<0>(v68, siri::intelligence::TYPE_DICTIONARY[0]);
    char v69 = 1;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v161, (uint64_t)v64, 2uLL);
    __int16 v162 = 0;
    std::string::basic_string[abi:ne180100]<0>(v163, "exitValue");
    void v163[3] = siri::intelligence::BehaviorExitValue;
    memset(&v163[4], 0, 24);
    __int16 v164 = 1;
    std::string::basic_string[abi:ne180100]<0>(v165, "setVariables");
    v165[3] = siri::intelligence::BehaviorSetVariables;
    memset(&v165[4], 0, 24);
    __int16 v166 = 256;
    std::string::basic_string[abi:ne180100]<0>(v167, "pickFromArray");
    void v167[3] = siri::intelligence::BehaviorPickFromArray;
    std::string::basic_string[abi:ne180100]<0>(v55, "name");
    std::string::basic_string[abi:ne180100]<0>(v56, siri::intelligence::TYPE_REFERENCE[0]);
    char v57 = 1;
    std::string::basic_string[abi:ne180100]<0>(v58, "destination");
    std::string::basic_string[abi:ne180100]<0>(v59, siri::intelligence::TYPE_REFERENCE[0]);
    char v60 = 1;
    std::string::basic_string[abi:ne180100]<0>(v61, "deleteItem");
    std::string::basic_string[abi:ne180100]<0>(v62, siri::intelligence::TYPE_BOOLEAN[0]);
    char v63 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v168, (uint64_t)v55, 3uLL);
    __int16 v169 = 0;
    std::string::basic_string[abi:ne180100]<0>(v170, "directInvocation");
    void v170[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v49, "identifier");
    std::string::basic_string[abi:ne180100]<0>(v50, siri::intelligence::TYPE_STRING[0]);
    char v51 = 1;
    std::string::basic_string[abi:ne180100]<0>(v52, "userData");
    std::string::basic_string[abi:ne180100]<0>(v53, siri::intelligence::TYPE_DICTIONARY[0]);
    char v54 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v171, (uint64_t)v49, 2uLL);
    __int16 v172 = 0;
    std::string::basic_string[abi:ne180100]<0>(v173, "externalFlow");
    void v173[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v34, "flowBuilderClass");
    std::string::basic_string[abi:ne180100]<0>(v35, siri::intelligence::TYPE_STRING[0]);
    char v36 = 1;
    std::string::basic_string[abi:ne180100]<0>(v37, "flowName");
    std::string::basic_string[abi:ne180100]<0>(v38, siri::intelligence::TYPE_STRING[0]);
    char v39 = 1;
    std::string::basic_string[abi:ne180100]<0>(v40, "builderParameters");
    std::string::basic_string[abi:ne180100]<0>(v41, siri::intelligence::TYPE_DICTIONARY[0]);
    char v42 = 0;
    std::string::basic_string[abi:ne180100]<0>(v43, "bundleIdentifier");
    std::string::basic_string[abi:ne180100]<0>(v44, siri::intelligence::TYPE_STRING[0]);
    char v45 = 0;
    std::string::basic_string[abi:ne180100]<0>(v46, "libraryPath");
    std::string::basic_string[abi:ne180100]<0>(v47, siri::intelligence::TYPE_STRING[0]);
    char v48 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v174, (uint64_t)v34, 5uLL);
    __int16 v175 = 0;
    std::string::basic_string[abi:ne180100]<0>(v176, "authoredFlow");
    void v176[3] = 0;
    std::string::basic_string[abi:ne180100]<0>(v25, "flowId");
    std::string::basic_string[abi:ne180100]<0>(v26, siri::intelligence::TYPE_STRING[0]);
    char v27 = 1;
    std::string::basic_string[abi:ne180100]<0>(v28, "bundleIdentifier");
    std::string::basic_string[abi:ne180100]<0>(v29, siri::intelligence::TYPE_STRING[0]);
    char v30 = 0;
    std::string::basic_string[abi:ne180100]<0>(v31, "libraryPath");
    std::string::basic_string[abi:ne180100]<0>(v32, siri::intelligence::TYPE_STRING[0]);
    char v33 = 0;
    std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](v177, (uint64_t)v25, 3uLL);
    __int16 v178 = 0;
    std::vector<siri::intelligence::BehaviorDefinition>::vector[abi:ne180100](&v124, 0x13uLL);
    for (uint64_t i = 1152; i != -64; i -= 64)
      siri::intelligence::BehaviorDefinition::~BehaviorDefinition((void **)((char *)&v124.__r_.__value_.__l.__data_ + i));
    for (uint64_t j = 14; j != -7; j -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v25[j]);
    for (uint64_t k = 28; k != -7; k -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v34[k]);
    for (uint64_t m = 7; m != -7; m -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v49[m]);
    for (uint64_t n = 14; n != -7; n -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v55[n]);
    for (iuint64_t i = 7; ii != -7; ii -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v64[ii]);
    siri::intelligence::TestParseError::~TestParseError(v70);
    siri::intelligence::TestParseError::~TestParseError(v73);
    siri::intelligence::TestParseError::~TestParseError(v76);
    siri::intelligence::TestParseError::~TestParseError(v79);
    for (juint64_t j = 7; jj != -7; jj -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v82[jj]);
    for (kuint64_t k = 7; kk != -7; kk -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v88[kk]);
    for (muint64_t m = 7; mm != -7; mm -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v94[mm]);
    for (nuint64_t n = 7; nn != -7; nn -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v100[nn]);
    for (uint64_t i1 = 7; i1 != -7; i1 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v106[i1]);
    for (uint64_t i2 = 7; i2 != -7; i2 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v112[i2]);
    for (uint64_t i3 = 7; i3 != -7; i3 -= 7)
      siri::intelligence::TestParseError::~TestParseError((void **)&v118[i3]);
    __cxa_atexit((void (*)(void *))std::vector<siri::intelligence::BehaviorDefinition>::~vector[abi:ne180100], &qword_26AD86948, &dword_239A02000);
    __cxa_guard_release(&_MergedGlobals_9);
    this = v24;
  }
  *(void *)this = 0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  uint64_t v2 = qword_26AD86948;
  uint64_t v3 = qword_26AD86950;
  v124.__r_.__value_.__r.__words[0] = (std::string::size_type)this;
  v124.__r_.__value_.__s.__data_[8] = 0;
  if (qword_26AD86950 != qword_26AD86948)
  {
    std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](this, (qword_26AD86950 - qword_26AD86948) >> 6);
    uint64_t v4 = 0;
    uint64_t v5 = *((void *)this + 1);
    do
    {
      uint64_t v6 = (std::string *)(v5 + v4);
      unint64_t v7 = (long long *)(v2 + v4);
      if (*(char *)(v2 + v4 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)v7, *((void *)v7 + 1));
      }
      else
      {
        long long v8 = *v7;
        v6->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
        *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v8;
      }
      std::string::size_type v9 = *(void *)(v2 + v4 + 24);
      *(void *)(v5 + v4 + 32) = 0;
      unint64_t v10 = (std::string *)(v5 + v4 + 32);
      v10[-1].__r_.__value_.__r.__words[2] = v9;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v10, *(long long **)(v2 + v4 + 32), *(long long **)(v2 + v4 + 40), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v2 + v4 + 40) - *(void *)(v2 + v4 + 32)) >> 3));
      *(_WORD *)(v5 + v4 + 56) = *(_WORD *)(v2 + v4 + 56);
      v4 += 64;
    }
    while (v2 + v4 != v3);
    *((void *)this + 1) = v5 + v4;
  }
}

void sub_239A8ECC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  for (uint64_t i = 1152; i != -64; i -= 64)
    siri::intelligence::BehaviorDefinition::~BehaviorDefinition((void **)(v67 + i));
  for (uint64_t j = 112; j != -56; j -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a11 + j));
  for (uint64_t k = 224; k != -56; k -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a32 + k));
  for (uint64_t m = 56; m != -56; m -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&a67 + m));
  for (uint64_t n = 112; n != -56; n -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x240] + n));
  for (iuint64_t i = 56; ii != -56; ii -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x2E8] + ii));
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x358]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x390]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x3C8]);
  siri::intelligence::TestParseError::~TestParseError((void **)&STACK[0x400]);
  for (juint64_t j = 56; jj != -56; jj -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x438] + jj));
  for (kuint64_t k = 56; kk != -56; kk -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x4A8] + kk));
  for (muint64_t m = 56; mm != -56; mm -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x518] + mm));
  for (nuint64_t n = 56; nn != -56; nn -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x588] + nn));
  for (uint64_t i1 = 56; i1 != -56; i1 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x5F8] + i1));
  for (uint64_t i2 = 56; i2 != -56; i2 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x668] + i2));
  for (uint64_t i3 = 56; i3 != -56; i3 -= 56)
    siri::intelligence::TestParseError::~TestParseError((void **)((char *)&STACK[0x6D8] + i3));
  __cxa_guard_abort(&_MergedGlobals_9);
  _Unwind_Resume(a1);
}

void siri::intelligence::BehaviorDescription::~BehaviorDescription(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

void **std::vector<siri::intelligence::BehaviorDefinition>::~vector[abi:ne180100](void **a1)
{
  uint64_t v3 = a1;
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

void siri::intelligence::BehaviorHandler::Validate(uint64_t a1, const void **a2, siri::intelligence::ValidationResults *a3, uint64_t a4, void ***a5, uint64_t a6, int a7)
{
  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v223);
  uint64_t v10 = std::__tree<std::string>::find<std::string>((uint64_t)v223, (const void **)a4);
  uint64_t v11 = v10;
  if (&v224 == (void **)v10 || *(unsigned char *)(v10 + 112)) {
    goto LABEL_3;
  }
  if (a6) {
    uint64_t v12 = a6 + 312;
  }
  else {
    uint64_t v12 = 0;
  }
  long long v202 = (std::string::value_type *)a4;
  if (*(unsigned char *)(v10 + 113))
  {
    if (!a6) {
      goto LABEL_3;
    }
    siri::intelligence::VariableDictionary::GetValues(*a5, (uint64_t *)&v209);
    std::string::size_type size = v209.__r_.__value_.__l.__size_;
    std::string::size_type v13 = v209.__r_.__value_.__r.__words[0];
    if (v209.__r_.__value_.__r.__words[0] == v209.__r_.__value_.__l.__size_)
    {
LABEL_148:
      v222.__r_.__value_.__r.__words[0] = (std::string::size_type)&v209;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v222);
      goto LABEL_3;
    }
    while (1)
    {
      uint64_t v15 = *(void *)v13;
      if (*(char *)(*(void *)v13 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v222, *(const std::string::value_type **)(v15 + 8), *(void *)(v15 + 16));
      }
      else
      {
        long long v16 = *(_OWORD *)(v15 + 8);
        v222.__r_.__value_.__r.__words[2] = *(void *)(v15 + 24);
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v16;
      }
      if (!siri::intelligence::Memory::HasVariable(v12, (uint64_t)&v222))
      {
        if (*((char *)a2 + 23) >= 0) {
          size_t v23 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v23 = (size_t)a2[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v219, v23 + 59);
        if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v24 = &v219;
        }
        else {
          int v24 = (std::string *)v219.__r_.__value_.__r.__words[0];
        }
        if (v23)
        {
          if (*((char *)a2 + 23) >= 0) {
            BOOL v25 = a2;
          }
          else {
            BOOL v25 = *a2;
          }
          memmove(v24, v25, v23);
        }
        strcpy((char *)v24 + v23, "defines a parameter key that's not a valid variable name: '");
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64x2_t v26 = &v222;
        }
        else {
          int64x2_t v26 = (std::string *)v222.__r_.__value_.__r.__words[0];
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v27 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v27 = v222.__r_.__value_.__l.__size_;
        }
        size_t v28 = std::string::append(&v219, (const std::string::value_type *)v26, v27);
        long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        char v30 = std::string::append(&v220, "'");
        std::string v221 = *v30;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_PARAM, (long long *)&v221, a7);
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v221.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v220.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_145;
        }
        uint64_t v31 = (void *)v219.__r_.__value_.__r.__words[0];
        goto LABEL_144;
      }
      if (siri::intelligence::Memory::IsGlobalVariable(v12, (unsigned __int8 *)&v222))
      {
        if (*((char *)a2 + 23) >= 0) {
          size_t v17 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v17 = (size_t)a2[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v220, v17 + 38);
        if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v18 = &v220;
        }
        else {
          long long v18 = (std::string *)v220.__r_.__value_.__r.__words[0];
        }
        if (v17)
        {
          if (*((char *)a2 + 23) >= 0) {
            int64x2_t v19 = a2;
          }
          else {
            int64x2_t v19 = *a2;
          }
          memmove(v18, v19, v17);
        }
        strcpy((char *)v18 + v17, "modifies a read-only global variable: ");
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v20 = &v222;
        }
        else {
          uint64_t v20 = (std::string *)v222.__r_.__value_.__r.__words[0];
        }
        if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v21 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v21 = v222.__r_.__value_.__l.__size_;
        }
        size_t v22 = std::string::append(&v220, (const std::string::value_type *)v20, v21);
        std::string v221 = *v22;
        v22->__r_.__value_.__l.__size_ = 0;
        v22->__r_.__value_.__r.__words[2] = 0;
        v22->__r_.__value_.__r.__words[0] = 0;
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_READ_ONLY, (long long *)&v221, a7);
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v221.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v220.__r_.__value_.__l.__data_);
        }
      }
      siri::intelligence::Memory::GetVariable(v12, (uint64_t)&v222, &v220);
      if (*(char *)(v220.__r_.__value_.__r.__words[0] + 55) < 0) {
        std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(v220.__r_.__value_.__r.__words[0] + 32), *(void *)(v220.__r_.__value_.__r.__words[0] + 40));
      }
      else {
        std::string v221 = *(std::string *)(v220.__r_.__value_.__r.__words[0] + 32);
      }
      if (v220.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v220.__r_.__value_.__l.__size_);
      }
      (*(void (**)(std::string *__return_ptr))(**(void **)v13 + 96))(&v220);
      size_t v32 = (const void *)siri::intelligence::TYPE_UNKNOWN;
      size_t v33 = strlen(siri::intelligence::TYPE_UNKNOWN);
      size_t v34 = v33;
      if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v33 != v221.__r_.__value_.__l.__size_) {
          goto LABEL_71;
        }
        if (v33 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v35 = (std::string *)v221.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v33 != HIBYTE(v221.__r_.__value_.__r.__words[2])) {
          goto LABEL_71;
        }
        uint64_t v35 = &v221;
      }
      if (!memcmp(v35, siri::intelligence::TYPE_UNKNOWN, v34)) {
        goto LABEL_140;
      }
LABEL_71:
      if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v34 == v220.__r_.__value_.__l.__size_)
        {
          if (v34 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          char v36 = (std::string *)v220.__r_.__value_.__r.__words[0];
LABEL_77:
          if (!memcmp(v36, v32, v34)) {
            goto LABEL_140;
          }
        }
      }
      else if (v34 == HIBYTE(v220.__r_.__value_.__r.__words[2]))
      {
        char v36 = &v220;
        goto LABEL_77;
      }
      uint64_t v37 = *(void *)v13;
      if (*(char *)(*(void *)v13 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v219, *(const std::string::value_type **)(v37 + 32), *(void *)(v37 + 40));
      }
      else {
        std::string v219 = *(std::string *)(v37 + 32);
      }
      if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v219, (unsigned __int8 *)&v221))
      {
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t v38 = (void *)v219.__r_.__value_.__r.__words[0];
          goto LABEL_139;
        }
      }
      else
      {
        char IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v220, (unsigned __int8 *)&v221);
        char v40 = IsEquivalentType;
        if ((SHIBYTE(v219.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          if (IsEquivalentType) {
            goto LABEL_140;
          }
LABEL_88:
          if (*((char *)a2 + 23) >= 0) {
            size_t v41 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v41 = (size_t)a2[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v212, v41 + 19);
          if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v42 = &v212;
          }
          else {
            char v42 = (std::string *)v212.__r_.__value_.__r.__words[0];
          }
          if (v41)
          {
            if (*((char *)a2 + 23) >= 0) {
              BOOL v43 = a2;
            }
            else {
              BOOL v43 = *a2;
            }
            memmove(v42, v43, v41);
          }
          strcpy((char *)v42 + v41, "type mismatch for '");
          int v44 = *(char *)(a4 + 23);
          if (v44 >= 0) {
            char v45 = (const std::string::value_type *)a4;
          }
          else {
            char v45 = *(const std::string::value_type **)a4;
          }
          if (v44 >= 0) {
            std::string::size_type v46 = *(unsigned __int8 *)(a4 + 23);
          }
          else {
            std::string::size_type v46 = *(void *)(a4 + 8);
          }
          uint64_t v47 = std::string::append(&v212, v45, v46);
          long long v48 = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
          v213.__r_.__value_.__r.__words[2] = v47->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v48;
          v47->__r_.__value_.__l.__size_ = 0;
          v47->__r_.__value_.__r.__words[2] = 0;
          v47->__r_.__value_.__r.__words[0] = 0;
          int v49 = std::string::append(&v213, "': parameter '");
          long long v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v50;
          v49->__r_.__value_.__l.__size_ = 0;
          v49->__r_.__value_.__r.__words[2] = 0;
          v49->__r_.__value_.__r.__words[0] = 0;
          if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v51 = &v222;
          }
          else {
            char v51 = (std::string *)v222.__r_.__value_.__r.__words[0];
          }
          if ((v222.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v52 = HIBYTE(v222.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v52 = v222.__r_.__value_.__l.__size_;
          }
          int v53 = std::string::append(&v214, (const std::string::value_type *)v51, v52);
          long long v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
          v215.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v54;
          v53->__r_.__value_.__l.__size_ = 0;
          v53->__r_.__value_.__r.__words[2] = 0;
          v53->__r_.__value_.__r.__words[0] = 0;
          long long v55 = std::string::append(&v215, "' should be type ");
          long long v56 = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
          v216.__r_.__value_.__r.__words[2] = v55->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v56;
          v55->__r_.__value_.__l.__size_ = 0;
          v55->__r_.__value_.__r.__words[2] = 0;
          v55->__r_.__value_.__r.__words[0] = 0;
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v57 = &v221;
          }
          else {
            char v57 = (std::string *)v221.__r_.__value_.__r.__words[0];
          }
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v58 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v58 = v221.__r_.__value_.__l.__size_;
          }
          long long v59 = std::string::append(&v216, (const std::string::value_type *)v57, v58);
          long long v60 = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v217.__r_.__value_.__r.__words[2] = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          size_t v61 = std::string::append(&v217, " but it's type is ");
          long long v62 = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          v218.__r_.__value_.__r.__words[2] = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v63 = &v220;
          }
          else {
            char v63 = (std::string *)v220.__r_.__value_.__r.__words[0];
          }
          if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v64 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v64 = v220.__r_.__value_.__l.__size_;
          }
          BOOL v65 = std::string::append(&v218, (const std::string::value_type *)v63, v64);
          std::string v219 = *v65;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&v219, a7);
          if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v219.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v218.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v216.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v215.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v214.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v213.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v212.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_140;
          }
          size_t v38 = (void *)v212.__r_.__value_.__r.__words[0];
LABEL_139:
          operator delete(v38);
          goto LABEL_140;
        }
        operator delete(v219.__r_.__value_.__l.__data_);
        if ((v40 & 1) == 0) {
          goto LABEL_88;
        }
      }
LABEL_140:
      if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v220.__r_.__value_.__l.__data_);
      }
      if ((SHIBYTE(v221.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_145;
      }
      uint64_t v31 = (void *)v221.__r_.__value_.__r.__words[0];
LABEL_144:
      operator delete(v31);
LABEL_145:
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v222.__r_.__value_.__l.__data_);
      }
      v13 += 16;
      if (v13 == size) {
        goto LABEL_148;
      }
    }
  }
  if (!*a5) {
    goto LABEL_442;
  }
  uint64_t v201 = a6;
  std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v222, (const void ***)*a5 + 9);
  std::string::size_type v66 = v222.__r_.__value_.__r.__words[0];
  if ((std::string::size_type *)v222.__r_.__value_.__l.__data_ != &v222.__r_.__value_.__r.__words[1])
  {
    uint64_t v199 = a6 + 80;
    uint64_t v200 = a6 + 72;
    uint64_t v67 = "";
    do
    {
      if (*(char *)(v66 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v221, *(const std::string::value_type **)(v66 + 32), *(void *)(v66 + 40));
      }
      else {
        std::string v221 = *(std::string *)(v66 + 32);
      }
      std::string::basic_string[abi:ne180100]<0>(&v209, v67);
      long long v68 = v67;
      std::string::basic_string[abi:ne180100]<0>(&__p, v67);
      char v211 = 1;
      uint64_t v70 = *(void *)(v11 + 88);
      uint64_t v69 = *(void *)(v11 + 96);
      if (v70 != v69)
      {
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v71 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v71 = v221.__r_.__value_.__l.__size_;
        }
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v72 = &v221;
        }
        else {
          char v72 = (std::string *)v221.__r_.__value_.__r.__words[0];
        }
        do
        {
          uint64_t v73 = *(unsigned __int8 *)(v70 + 23);
          if ((v73 & 0x80u) == 0) {
            uint64_t v74 = *(unsigned __int8 *)(v70 + 23);
          }
          else {
            uint64_t v74 = *(void *)(v70 + 8);
          }
          if (v74 == v71)
          {
            if ((v73 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)v70, v72, *(void *)(v70 + 8)))
              {
LABEL_175:
                std::string::operator=(&v209, (const std::string *)v70);
                std::string::operator=(&__p, (const std::string *)(v70 + 24));
                char v211 = *(unsigned char *)(v70 + 48);
                break;
              }
            }
            else
            {
              if (!*(unsigned char *)(v70 + 23)) {
                goto LABEL_175;
              }
              uint64_t v75 = 0;
              while (*(unsigned __int8 *)(v70 + v75) == v72->__r_.__value_.__s.__data_[v75])
              {
                if (v73 == ++v75) {
                  goto LABEL_175;
                }
              }
            }
          }
          v70 += 56;
        }
        while (v70 != v69);
      }
      std::string::size_type v76 = HIBYTE(v209.__r_.__value_.__r.__words[2]);
      if ((v209.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v76 = v209.__r_.__value_.__l.__size_;
      }
      if (!v76)
      {
        if (*((char *)a2 + 23) >= 0) {
          size_t v79 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v79 = (size_t)a2[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v218, v79 + 35);
        if ((v218.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v80 = &v218;
        }
        else {
          v80 = (std::string *)v218.__r_.__value_.__r.__words[0];
        }
        if (v79)
        {
          if (*((char *)a2 + 23) >= 0) {
            char v81 = a2;
          }
          else {
            char v81 = *a2;
          }
          memmove(v80, v81, v79);
        }
        strcpy((char *)v80 + v79, "defines an unsupported parameter: '");
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v82 = &v221;
        }
        else {
          v82 = (std::string *)v221.__r_.__value_.__r.__words[0];
        }
        if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v83 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v83 = v221.__r_.__value_.__l.__size_;
        }
        char v84 = std::string::append(&v218, (const std::string::value_type *)v82, v83);
        long long v85 = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
        v219.__r_.__value_.__r.__words[2] = v84->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v85;
        v84->__r_.__value_.__l.__size_ = 0;
        v84->__r_.__value_.__r.__words[2] = 0;
        v84->__r_.__value_.__r.__words[0] = 0;
        v86 = std::string::append(&v219, "'");
        std::string v220 = *v86;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNDEF_PARAM, (long long *)&v220, a7);
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v220.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v218.__r_.__value_.__l.__data_);
        }
        goto LABEL_221;
      }
      uint64_t v77 = *(void *)(v66 + 56);
      char v78 = *(std::__shared_weak_count **)(v66 + 64);
      if (v78) {
        atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v220, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v220 = __p;
      }
      size_t v87 = strlen(siri::intelligence::TYPE_UNKNOWN);
      size_t v88 = v87;
      char v89 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v87 != v220.__r_.__value_.__l.__size_)
        {
LABEL_234:
          if (!v77) {
            goto LABEL_218;
          }
          goto LABEL_235;
        }
        if (v87 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        char v90 = (std::string *)v220.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v87 != HIBYTE(v220.__r_.__value_.__r.__words[2])) {
          goto LABEL_234;
        }
        char v90 = &v220;
      }
      BOOL v91 = !memcmp(v90, siri::intelligence::TYPE_UNKNOWN, v88) || v77 == 0;
      if (v91)
      {
LABEL_218:
        if (v89 < 0) {
          goto LABEL_368;
        }
        goto LABEL_219;
      }
LABEL_235:
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v77 + 96))(&v219, v77, v12);
      size_t v94 = strlen(siri::intelligence::TYPE_UNKNOWN);
      size_t v95 = v94;
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v94 != v219.__r_.__value_.__l.__size_) {
          goto LABEL_242;
        }
        if (v94 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        char v96 = (std::string *)v219.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v94 != HIBYTE(v219.__r_.__value_.__r.__words[2])) {
          goto LABEL_242;
        }
        char v96 = &v219;
      }
      if (!memcmp(v96, siri::intelligence::TYPE_UNKNOWN, v95)) {
        goto LABEL_365;
      }
LABEL_242:
      if (*(char *)(v77 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v218, *(const std::string::value_type **)(v77 + 32), *(void *)(v77 + 40));
      }
      else {
        std::string v218 = *(std::string *)(v77 + 32);
      }
      if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v218, (unsigned __int8 *)&v220))
      {
        if ((SHIBYTE(v218.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_304;
        }
        size_t v97 = (void *)v218.__r_.__value_.__r.__words[0];
        goto LABEL_303;
      }
      char v98 = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v219, (unsigned __int8 *)&v220);
      char v99 = v98;
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v218.__r_.__value_.__l.__data_);
        if (v99) {
          goto LABEL_304;
        }
      }
      else if (v98)
      {
        goto LABEL_304;
      }
      if (*((char *)a2 + 23) >= 0) {
        size_t v100 = *((unsigned __int8 *)a2 + 23);
      }
      else {
        size_t v100 = (size_t)a2[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v208, v100 + 19);
      if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v101 = &v208;
      }
      else {
        v101 = (std::string *)v208.__r_.__value_.__r.__words[0];
      }
      if (v100)
      {
        if (*((char *)a2 + 23) >= 0) {
          char v102 = a2;
        }
        else {
          char v102 = *a2;
        }
        memmove(v101, v102, v100);
      }
      strcpy((char *)v101 + v100, "type mismatch for '");
      int v103 = v202[23];
      if (v103 >= 0) {
        std::string::size_type v104 = v202;
      }
      else {
        std::string::size_type v104 = *(const std::string::value_type **)v202;
      }
      if (v103 >= 0) {
        std::string::size_type v105 = v202[23];
      }
      else {
        std::string::size_type v105 = *((void *)v202 + 1);
      }
      int v106 = std::string::append(&v208, v104, v105);
      long long v107 = *(_OWORD *)&v106->__r_.__value_.__l.__data_;
      v212.__r_.__value_.__r.__words[2] = v106->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v107;
      v106->__r_.__value_.__l.__size_ = 0;
      v106->__r_.__value_.__r.__words[2] = 0;
      v106->__r_.__value_.__r.__words[0] = 0;
      char v108 = std::string::append(&v212, "': parameter '");
      long long v109 = *(_OWORD *)&v108->__r_.__value_.__l.__data_;
      v213.__r_.__value_.__r.__words[2] = v108->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v109;
      v108->__r_.__value_.__l.__size_ = 0;
      v108->__r_.__value_.__r.__words[2] = 0;
      v108->__r_.__value_.__r.__words[0] = 0;
      if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v110 = &v221;
      }
      else {
        size_t v110 = (std::string *)v221.__r_.__value_.__r.__words[0];
      }
      if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v111 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v111 = v221.__r_.__value_.__l.__size_;
      }
      size_t v112 = std::string::append(&v213, (const std::string::value_type *)v110, v111);
      long long v113 = *(_OWORD *)&v112->__r_.__value_.__l.__data_;
      v214.__r_.__value_.__r.__words[2] = v112->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v113;
      v112->__r_.__value_.__l.__size_ = 0;
      v112->__r_.__value_.__r.__words[2] = 0;
      v112->__r_.__value_.__r.__words[0] = 0;
      char v114 = std::string::append(&v214, "' should be type ");
      long long v115 = *(_OWORD *)&v114->__r_.__value_.__l.__data_;
      v215.__r_.__value_.__r.__words[2] = v114->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v115;
      v114->__r_.__value_.__l.__size_ = 0;
      v114->__r_.__value_.__r.__words[2] = 0;
      v114->__r_.__value_.__r.__words[0] = 0;
      if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v116 = &v220;
      }
      else {
        size_t v116 = (std::string *)v220.__r_.__value_.__r.__words[0];
      }
      if ((v220.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v117 = HIBYTE(v220.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v117 = v220.__r_.__value_.__l.__size_;
      }
      size_t v118 = std::string::append(&v215, (const std::string::value_type *)v116, v117);
      long long v119 = *(_OWORD *)&v118->__r_.__value_.__l.__data_;
      v216.__r_.__value_.__r.__words[2] = v118->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v119;
      v118->__r_.__value_.__l.__size_ = 0;
      v118->__r_.__value_.__r.__words[2] = 0;
      v118->__r_.__value_.__r.__words[0] = 0;
      char v120 = std::string::append(&v216, " but it's type is ");
      long long v121 = *(_OWORD *)&v120->__r_.__value_.__l.__data_;
      v217.__r_.__value_.__r.__words[2] = v120->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v121;
      v120->__r_.__value_.__l.__size_ = 0;
      v120->__r_.__value_.__r.__words[2] = 0;
      v120->__r_.__value_.__r.__words[0] = 0;
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v122 = &v219;
      }
      else {
        uint64_t v122 = (std::string *)v219.__r_.__value_.__r.__words[0];
      }
      if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v123 = HIBYTE(v219.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v123 = v219.__r_.__value_.__l.__size_;
      }
      std::string v124 = std::string::append(&v217, (const std::string::value_type *)v122, v123);
      std::string v218 = *v124;
      v124->__r_.__value_.__l.__size_ = 0;
      v124->__r_.__value_.__r.__words[2] = 0;
      v124->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&v218, a7);
      if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v216.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v215.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v214.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v212.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v97 = (void *)v208.__r_.__value_.__r.__words[0];
LABEL_303:
        operator delete(v97);
      }
LABEL_304:
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v209.__r_.__value_.__l.__size_ != 10) {
          goto LABEL_365;
        }
        long long v125 = (std::string *)v209.__r_.__value_.__r.__words[0];
      }
      else
      {
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) != 10) {
          goto LABEL_365;
        }
        long long v125 = &v209;
      }
      std::string::size_type v126 = v125->__r_.__value_.__r.__words[0];
      int v127 = LOWORD(v125->__r_.__value_.__r.__words[1]);
      BOOL v129 = v126 != 0x65736E6F70736572 || v127 != 25673;
      if (v201 && !v129)
      {
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v77 + 56))(&v218, v77);
        if (v199 == std::__tree<std::string>::find<std::string>(v200, (const void **)&v218.__r_.__value_.__l.__data_))
        {
          if (*((char *)a2 + 23) >= 0) {
            size_t v130 = *((unsigned __int8 *)a2 + 23);
          }
          else {
            size_t v130 = (size_t)a2[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v208, v130 + 21);
          if ((v208.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string v131 = &v208;
          }
          else {
            std::string v131 = (std::string *)v208.__r_.__value_.__r.__words[0];
          }
          if (v130)
          {
            if (*((char *)a2 + 23) >= 0) {
              size_t v132 = a2;
            }
            else {
              size_t v132 = *a2;
            }
            memmove(v131, v132, v130);
          }
          strcpy((char *)v131 + v130, "invalid response ID '");
          (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v77 + 56))(v206, v77);
          if ((v207 & 0x80u) == 0) {
            __int16 v133 = v206;
          }
          else {
            __int16 v133 = (void **)v206[0];
          }
          if ((v207 & 0x80u) == 0) {
            std::string::size_type v134 = v207;
          }
          else {
            std::string::size_type v134 = (std::string::size_type)v206[1];
          }
          int v135 = std::string::append(&v208, (const std::string::value_type *)v133, v134);
          long long v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
          v212.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v136;
          v135->__r_.__value_.__l.__size_ = 0;
          v135->__r_.__value_.__r.__words[2] = 0;
          v135->__r_.__value_.__r.__words[0] = 0;
          std::string v137 = std::string::append(&v212, "' for behavior '");
          long long v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
          v213.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v138;
          v137->__r_.__value_.__l.__size_ = 0;
          v137->__r_.__value_.__r.__words[2] = 0;
          v137->__r_.__value_.__r.__words[0] = 0;
          int v139 = v202[23];
          if (v139 >= 0) {
            std::string v140 = v202;
          }
          else {
            std::string v140 = *(const std::string::value_type **)v202;
          }
          if (v139 >= 0) {
            std::string::size_type v141 = v202[23];
          }
          else {
            std::string::size_type v141 = *((void *)v202 + 1);
          }
          __int16 v142 = std::string::append(&v213, v140, v141);
          long long v143 = *(_OWORD *)&v142->__r_.__value_.__l.__data_;
          v214.__r_.__value_.__r.__words[2] = v142->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v143;
          v142->__r_.__value_.__l.__size_ = 0;
          v142->__r_.__value_.__r.__words[2] = 0;
          v142->__r_.__value_.__r.__words[0] = 0;
          std::string v144 = std::string::append(&v214, "' parameter '");
          long long v145 = *(_OWORD *)&v144->__r_.__value_.__l.__data_;
          v215.__r_.__value_.__r.__words[2] = v144->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v145;
          v144->__r_.__value_.__l.__size_ = 0;
          v144->__r_.__value_.__r.__words[2] = 0;
          v144->__r_.__value_.__r.__words[0] = 0;
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v146 = &v221;
          }
          else {
            v146 = (std::string *)v221.__r_.__value_.__r.__words[0];
          }
          if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v147 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v147 = v221.__r_.__value_.__l.__size_;
          }
          __int16 v148 = std::string::append(&v215, (const std::string::value_type *)v146, v147);
          long long v149 = *(_OWORD *)&v148->__r_.__value_.__l.__data_;
          v216.__r_.__value_.__r.__words[2] = v148->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v149;
          v148->__r_.__value_.__l.__size_ = 0;
          v148->__r_.__value_.__r.__words[2] = 0;
          v148->__r_.__value_.__r.__words[0] = 0;
          long long v150 = std::string::append(&v216, "'");
          std::string v217 = *v150;
          v150->__r_.__value_.__l.__size_ = 0;
          v150->__r_.__value_.__r.__words[2] = 0;
          v150->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v217, a7);
          if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v217.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v216.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v215.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v214.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v213.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v212.__r_.__value_.__l.__data_);
          }
          if ((char)v207 < 0) {
            operator delete(v206[0]);
          }
          if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v208.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v218.__r_.__value_.__l.__data_);
        }
      }
LABEL_365:
      if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v219.__r_.__value_.__l.__data_);
      }
      if ((*((unsigned char *)&v220.__r_.__value_.__s + 23) & 0x80) != 0)
      {
LABEL_368:
        operator delete(v220.__r_.__value_.__l.__data_);
        if (!v78) {
          goto LABEL_221;
        }
LABEL_220:
        std::__shared_weak_count::__release_shared[abi:ne180100](v78);
        goto LABEL_221;
      }
LABEL_219:
      if (v78) {
        goto LABEL_220;
      }
LABEL_221:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      uint64_t v67 = v68;
      if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v209.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v221.__r_.__value_.__l.__data_);
      }
      BOOL v92 = *(std::string **)(v66 + 8);
      if (v92)
      {
        do
        {
          char v93 = v92;
          BOOL v92 = (std::string *)v92->__r_.__value_.__r.__words[0];
        }
        while (v92);
      }
      else
      {
        do
        {
          char v93 = *(std::string **)(v66 + 16);
          BOOL v91 = v93->__r_.__value_.__r.__words[0] == v66;
          std::string::size_type v66 = (std::string::size_type)v93;
        }
        while (!v91);
      }
      std::string::size_type v66 = (std::string::size_type)v93;
    }
    while (v93 != (std::string *)&v222.__r_.__value_.__r.__words[1]);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v222, (void *)v222.__r_.__value_.__l.__size_);
  if (v202[23] < 0)
  {
    uint64_t v152 = *((void *)v202 + 1);
    if (v152 == 9)
    {
      uint64_t v153 = *(const std::string::value_type **)v202;
      if (**(void **)v202 == 0x6E69727453746573 && *(unsigned char *)(*(void *)v202 + 8) == 103) {
        goto LABEL_406;
      }
      uint64_t v155 = *(void *)v153;
      int v156 = *((unsigned __int8 *)v153 + 8);
      if (v155 == 0x65626D754E746573 && v156 == 114) {
        goto LABEL_406;
      }
      uint64_t v152 = *((void *)v202 + 1);
    }
    if (v152 != 10) {
      goto LABEL_400;
    }
    __int16 v151 = *(std::string::value_type **)v202;
LABEL_386:
    uint64_t v158 = *(void *)v151;
    int v159 = *((unsigned __int16 *)v151 + 4);
    if (v158 != 0x656C6F6F42746573 || v159 != 28257) {
      goto LABEL_400;
    }
LABEL_406:
    v163 = *a5;
    std::string::basic_string[abi:ne180100]<0>(&v209, "name");
    uint64_t v164 = std::__tree<std::string>::find<std::string>((uint64_t)(v163 + 9), (const void **)&v209.__r_.__value_.__l.__data_);
    uint64_t v165 = v164;
    if (v163 + 10 == (void **)v164)
    {
      long long v171 = 0;
      __int16 v169 = 0;
      goto LABEL_416;
    }
    __int16 v166 = *(const void **)(v164 + 56);
    uint64_t v167 = *(std::__shared_weak_count **)(v165 + 64);
    if (v167) {
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v166
    {
      __int16 v169 = v168;
      if (!v167)
      {
        long long v171 = 0;
        goto LABEL_416;
      }
      atomic_fetch_add_explicit(&v167->__shared_owners_, 1uLL, memory_order_relaxed);
      v170 = v167;
    }
    else
    {
      v170 = 0;
      __int16 v169 = 0;
      long long v171 = 0;
      if (!v167)
      {
LABEL_416:
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
        if (v169)
        {
          __int16 v172 = v169 + 72;
          if (v169[95] < 0)
          {
            std::string::__init_copy_ctor_external(&v209, *((const std::string::value_type **)v169 + 9), *((void *)v169 + 10));
          }
          else
          {
            *(_OWORD *)&v209.__r_.__value_.__l.__data_ = *v172;
            v209.__r_.__value_.__r.__words[2] = *((void *)v169 + 11);
          }
          int IsGlobalVariable = siri::intelligence::Memory::IsGlobalVariable(v12, (unsigned __int8 *)&v209);
          if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v209.__r_.__value_.__l.__data_);
          }
          if (IsGlobalVariable)
          {
            std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>("cannot modify read-only global variable: ", a2, (void **)&v222.__r_.__value_.__l.__data_);
            if (v169[95] < 0)
            {
              std::string::__init_copy_ctor_external(&v221, *((const std::string::value_type **)v169 + 9), *((void *)v169 + 10));
            }
            else
            {
              *(_OWORD *)&v221.__r_.__value_.__l.__data_ = *v172;
              v221.__r_.__value_.__r.__words[2] = *((void *)v169 + 11);
            }
            if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v174 = &v221;
            }
            else {
              uint64_t v174 = (std::string *)v221.__r_.__value_.__r.__words[0];
            }
            if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v175 = HIBYTE(v221.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v175 = v221.__r_.__value_.__l.__size_;
            }
            uint64_t v176 = std::string::append(&v222, (const std::string::value_type *)v174, v175);
            std::string v209 = *v176;
            v176->__r_.__value_.__l.__size_ = 0;
            v176->__r_.__value_.__r.__words[2] = 0;
            v176->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_READ_ONLY, (long long *)&v209, a7);
            if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v209.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v221.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v222.__r_.__value_.__l.__data_);
            }
          }
        }
        if (v171) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v171);
        }
        goto LABEL_442;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v167);
    long long v171 = v170;
    goto LABEL_416;
  }
  if (v202[23] != 9)
  {
    __int16 v151 = v202;
    if (v202[23] != 10) {
      goto LABEL_400;
    }
    goto LABEL_386;
  }
  if (*(void *)v202 == 0x6E69727453746573 && v202[8] == 103) {
    goto LABEL_406;
  }
  if (*(void *)v202 == 0x65626D754E746573 && v202[8] == 114) {
    goto LABEL_406;
  }
LABEL_400:
  if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "setArray")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "setDictionary")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "pushBack")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "popBack")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "setUndefined")
    || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v202, "setEmpty"))
  {
    goto LABEL_406;
  }
LABEL_442:
  uint64_t v177 = *(void *)(v11 + 88);
  for (uint64_t i = *(void *)(v11 + 96); v177 != i; v177 += 56)
  {
    if (*(unsigned char *)(v177 + 48))
    {
      uint64_t v179 = *a5;
      if (!*a5) {
        goto LABEL_449;
      }
      uint64_t v180 = std::__tree<std::string>::find<std::string>((uint64_t)(v179 + 9), (const void **)v177);
      if (v179 + 10 == (void **)v180) {
        goto LABEL_449;
      }
      uint64_t v182 = *(void *)(v180 + 56);
      int v181 = *(std::__shared_weak_count **)(v180 + 64);
      if (v181)
      {
        atomic_fetch_add_explicit(&v181->__shared_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_shared[abi:ne180100](v181);
      }
      if (!v182)
      {
LABEL_449:
        if (*((char *)a2 + 23) >= 0) {
          size_t v183 = *((unsigned __int8 *)a2 + 23);
        }
        else {
          size_t v183 = (size_t)a2[1];
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v219, v183 + 9);
        if ((v219.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v184 = &v219;
        }
        else {
          v184 = (std::string *)v219.__r_.__value_.__r.__words[0];
        }
        if (v183)
        {
          if (*((char *)a2 + 23) >= 0) {
            size_t v185 = a2;
          }
          else {
            size_t v185 = *a2;
          }
          memmove(v184, v185, v183);
        }
        strcpy((char *)v184 + v183, "behavior ");
        int v186 = *(char *)(v11 + 79);
        if (v186 >= 0) {
          size_t v187 = (const std::string::value_type *)(v11 + 56);
        }
        else {
          size_t v187 = *(const std::string::value_type **)(v11 + 56);
        }
        if (v186 >= 0) {
          std::string::size_type v188 = *(unsigned __int8 *)(v11 + 79);
        }
        else {
          std::string::size_type v188 = *(void *)(v11 + 64);
        }
        BOOL v189 = std::string::append(&v219, v187, v188);
        long long v190 = *(_OWORD *)&v189->__r_.__value_.__l.__data_;
        v220.__r_.__value_.__r.__words[2] = v189->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v190;
        v189->__r_.__value_.__l.__size_ = 0;
        v189->__r_.__value_.__r.__words[2] = 0;
        v189->__r_.__value_.__r.__words[0] = 0;
        v191 = std::string::append(&v220, " does not define the required parameter: '");
        long long v192 = *(_OWORD *)&v191->__r_.__value_.__l.__data_;
        v221.__r_.__value_.__r.__words[2] = v191->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v192;
        v191->__r_.__value_.__l.__size_ = 0;
        v191->__r_.__value_.__r.__words[2] = 0;
        v191->__r_.__value_.__r.__words[0] = 0;
        int v193 = *(char *)(v177 + 23);
        if (v193 >= 0) {
          int v194 = (const std::string::value_type *)v177;
        }
        else {
          int v194 = *(const std::string::value_type **)v177;
        }
        if (v193 >= 0) {
          std::string::size_type v195 = *(unsigned __int8 *)(v177 + 23);
        }
        else {
          std::string::size_type v195 = *(void *)(v177 + 8);
        }
        v196 = std::string::append(&v221, v194, v195);
        long long v197 = *(_OWORD *)&v196->__r_.__value_.__l.__data_;
        v222.__r_.__value_.__r.__words[2] = v196->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v197;
        v196->__r_.__value_.__l.__size_ = 0;
        v196->__r_.__value_.__r.__words[2] = 0;
        v196->__r_.__value_.__r.__words[0] = 0;
        v198 = std::string::append(&v222, "'");
        std::string v209 = *v198;
        v198->__r_.__value_.__l.__size_ = 0;
        v198->__r_.__value_.__r.__words[2] = 0;
        v198->__r_.__value_.__r.__words[0] = 0;
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_PARAM, (long long *)&v209, a7);
        if (SHIBYTE(v209.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v209.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v222.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v221.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v220.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v219.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_3:
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v223, v224);
}

void sub_239A90E70(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 121) < 0) {
    operator delete(*(void **)(v2 - 144));
  }
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(v2 - 112, *(void **)(v2 - 104));
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::GetBehaviorDefinitionsMap@<X0>(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86940, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD86940))
  {
    qword_26AD86970 = 0;
    qword_26AD86968 = 0;
    qword_26AD86960 = (uint64_t)&qword_26AD86968;
    __cxa_atexit((void (*)(void *))std::map<std::string,siri::intelligence::BehaviorDefinition>::~map[abi:ne180100], &qword_26AD86960, &dword_239A02000);
    __cxa_guard_release(&qword_26AD86940);
  }
  if (qword_26AD86970)
  {
    return std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](a1);
  }
  else
  {
    siri::intelligence::GetBehaviorDefinitions((siri::intelligence *)&v11);
    uint64_t v4 = (uint64_t *)v11;
    uint64_t v5 = v12;
    if (v11 != v12)
    {
      do
      {
        uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)&qword_26AD86960, &v15, (const void **)v4);
        unint64_t v7 = *v6;
        if (!*v6)
        {
          long long v8 = v6;
          std::string::size_type v9 = (char *)operator new(0x78uLL);
          unint64_t v7 = (uint64_t *)v9;
          v13[0] = (void **)v9;
          v13[1] = (void **)&qword_26AD86968;
          char v14 = 0;
          if (*((char *)v4 + 23) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v9 + 32), (const std::string::value_type *)*v4, v4[1]);
          }
          else
          {
            long long v10 = *(_OWORD *)v4;
            *((void *)v9 + 6) = v4[2];
            *((_OWORD *)v9 + 2) = v10;
          }
          *(_OWORD *)(v7 + 7) = 0u;
          *(_OWORD *)(v7 + 11) = 0u;
          *(_OWORD *)(v7 + 13) = 0u;
          *(_OWORD *)(v7 + 9) = 0u;
          std::string::basic_string[abi:ne180100]<0>(v7 + 7, "");
          *((_WORD *)v7 + 56) = 0;
          *((_OWORD *)v7 + 5) = 0u;
          *((_OWORD *)v7 + 6) = 0u;
          char v14 = 1;
          std::__tree<std::string>::__insert_node_at((uint64_t **)&qword_26AD86960, v15, v8, v7);
          v13[0] = 0;
          std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v13);
        }
        std::string::operator=((std::string *)(v7 + 7), (const std::string *)v4);
        v7[10] = v4[3];
        if (v4 != v7 + 7) {
          std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((uint64_t)(v7 + 11), (std::string *)v4[4], (long long *)v4[5], 0x6DB6DB6DB6DB6DB7 * ((v4[5] - v4[4]) >> 3));
        }
        *((_WORD *)v7 + 56) = *((_WORD *)v4 + 28);
        v4 += 8;
      }
      while (v4 != (uint64_t *)v5);
    }
    v13[0] = (void **)&v11;
    std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](v13);
    return std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](a1);
  }
}

void sub_239A91634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  long long v8 = va_arg(va2, void **);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)va2);
  va_copy((va_list)v8, va);
  std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100]((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(char *__s@<X1>, const void **a2@<X0>, void **a3@<X8>)
{
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  size_t v7 = strlen(__s);
  uint64_t result = std::string::basic_string[abi:ne180100]((uint64_t)a3, v6 + v7);
  if (*((char *)a3 + 23) < 0) {
    a3 = (void **)*a3;
  }
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v9 = a2;
    }
    else {
      std::string::size_type v9 = *a2;
    }
    uint64_t result = (uint64_t)memmove(a3, v9, v6);
  }
  long long v10 = (char *)a3 + v6;
  if (v7) {
    uint64_t result = (uint64_t)memmove(v10, __s, v7);
  }
  v10[v7] = 0;
  return result;
}

uint64_t std::map<std::string,siri::intelligence::BehaviorDefinition>::~map[abi:ne180100](uint64_t a1)
{
  return a1;
}

uint64_t siri::intelligence::BehaviorHandler::Execute(uint64_t a1, const char *a2, void *a3, void *a4, void *a5, uint64_t a6)
{
  if (a4)
  {
    long long v10 = (const void **)a2;
    siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v41);
    uint64_t v11 = std::__tree<std::string>::find<std::string>((uint64_t)v41, v10);
    uint64_t v12 = v11;
    if (&v42 == (void **)v11 || (std::string::size_type v13 = *(uint64_t (**)(uint64_t *, void **))(v11 + 80)) == 0)
    {
      uint64_t v24 = 0;
LABEL_49:
      std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v41, v42);
      return v24;
    }
    uint64_t v14 = *(void *)(v11 + 88);
    uint64_t v15 = *(void *)(v11 + 96);
    if (v14 != v15)
    {
      char v16 = 1;
      do
      {
        while (*(unsigned char *)(v14 + 48))
        {
          uint64_t v17 = *a3;
          if (!*a3) {
            break;
          }
          uint64_t v18 = std::__tree<std::string>::find<std::string>(v17 + 72, (const void **)v14);
          if (v17 + 80 != v18)
          {
            uint64_t v21 = *(void *)(v18 + 56);
            uint64_t v20 = *(std::__shared_weak_count **)(v18 + 64);
            if (v20)
            {
              atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }
            if (v21) {
              break;
            }
          }
          size_t v22 = (const void *)v14;
          if (*(char *)(v14 + 23) < 0) {
            size_t v22 = *(const void **)v14;
          }
          if (*((char *)v10 + 23) >= 0) {
            size_t v23 = v10;
          }
          else {
            size_t v23 = *v10;
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Required parameter '%s' not provided for behavior '%s'. Behavior will have no effect.", v19, v22, v23);
          char v16 = 0;
          uint64_t v24 = 0;
          v14 += 56;
          if (v14 == v15) {
            goto LABEL_35;
          }
        }
        v14 += 56;
      }
      while (v14 != v15);
      if ((v16 & 1) == 0)
      {
        uint64_t v24 = 0;
LABEL_35:
        if (*((char *)v10 + 23) < 0) {
          long long v10 = (const void **)*v10;
        }
        (*(void (**)(void **__return_ptr))(*(void *)*a3 + 56))(v39);
        int v28 = SHIBYTE(v40);
        long long v29 = (void **)v39[0];
        if (v24) {
          char v30 = "true";
        }
        else {
          char v30 = "false";
        }
        std::string::basic_string[abi:ne180100]<0>(__p, v30);
        size_t v32 = v39;
        if (v28 < 0) {
          size_t v32 = v29;
        }
        if (v36 >= 0) {
          size_t v33 = __p;
        }
        else {
          size_t v33 = (void **)__p[0];
        }
        siri::intelligence::Log::Debug((siri::intelligence::Log *)"Executing behavior %s(%s) -> %s", v31, v10, v32, v33);
        if (v36 < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v40) < 0) {
          operator delete(v39[0]);
        }
        goto LABEL_49;
      }
      std::string::size_type v13 = *(uint64_t (**)(uint64_t *, void **))(v12 + 80);
    }
    v39[0] = a4;
    v39[1] = a5;
    uint64_t v40 = a6;
    BOOL v25 = (std::__shared_weak_count *)a3[1];
    uint64_t v37 = *a3;
    size_t v38 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v24 = v13(&v37, v39);
    if (v38) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v38);
    }
    if ((v24 & 1) == 0)
    {
      if (*((char *)v10 + 23) >= 0) {
        std::string::size_type v27 = v10;
      }
      else {
        std::string::size_type v27 = *v10;
      }
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Error returned from system behavior '%s'", v26, v27);
    }
    goto LABEL_35;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Behavior execution called will NULL intelligence or memory. Skipping execution.", a2);
  return 0;
}

void sub_239A919EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27)
{
}

BOOL siri::intelligence::BehaviorHandler::IsNameHandled(uint64_t a1, const void **a2)
{
  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v5);
  BOOL v3 = &v6 != (void **)std::__tree<std::string>::find<std::string>((uint64_t)v5, a2);
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v5, v6);
  return v3;
}

void sub_239A91AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

BOOL siri::intelligence::BehaviorHandler::AreKeysVariableNames(uint64_t a1, const void **a2)
{
  siri::intelligence::GetBehaviorDefinitionsMap((uint64_t)v6);
  uint64_t v3 = std::__tree<std::string>::find<std::string>((uint64_t)v6, a2);
  BOOL v4 = &v7 != (void **)v3 && *(unsigned char *)(v3 + 113) != 0;
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy((uint64_t)v6, v7);
  return v4;
}

void sub_239A91B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t siri::intelligence::BehaviorSetString(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    std::string::size_type v13 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    std::string::size_type v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      std::string::size_type v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    uint64_t v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      std::string::size_type v13 = v12;
      goto LABEL_11;
    }
    std::string::size_type v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_20:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setString");
    uint64_t v23 = 0;
    goto LABEL_43;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(std::string *__return_ptr))(*(void *)v18 + 88))(&lpsrc);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    uint64_t v21 = 0;
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_22:
    std::string::size_type size = 0;
    goto LABEL_23;
  }
  std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_23:
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v21) {
      goto LABEL_29;
    }
  }
  else if (v21)
  {
LABEL_29:
    if (v11[95] < 0) {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
    }
    else {
      std::string __p = *(std::string *)(v11 + 3);
    }
    if (v21[95] < 0) {
      std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v21 + 9), *((void *)v21 + 10));
    }
    else {
      std::string lpsrc = *(std::string *)(v21 + 3);
    }
    uint64_t v23 = siri::intelligence::Memory::SetStringValue(v17, (uint64_t)&__p, &lpsrc);
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_41;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a string", v20, "value", "setString");
  uint64_t v23 = 0;
LABEL_41:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
LABEL_43:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v23;
}

void sub_239A91E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<siri::intelligence::BehaviorArgument>::vector[abi:ne180100](void *a1, uint64_t a2, unint64_t a3)
{
  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  if (a3)
  {
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](a1, a3);
    uint64_t v13 = a1[1];
    size_t v6 = (long long *)(a2 + 24);
    uint64_t v7 = 56 * a3;
    long long v8 = (std::string *)v13;
    do
    {
      if (*((char *)v6 - 1) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)v6 - 3), *((void *)v6 - 2));
      }
      else
      {
        long long v9 = *(long long *)((char *)v6 - 24);
        v8->__r_.__value_.__r.__words[2] = *((void *)v6 - 1);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      long long v10 = v8 + 1;
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v11 = *v6;
        v8[1].__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
      }
      v8[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)v6 + 24);
      long long v8 = (std::string *)(v13 + 56);
      v13 += 56;
      size_t v6 = (long long *)((char *)v6 + 56);
      v7 -= 56;
    }
    while (v7);
    a1[1] = v8;
  }
  return a1;
}

void sub_239A92040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

uint64_t siri::intelligence::BehaviorSetNumber(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_20:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setNumber");
    uint64_t v23 = 0;
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 88))(&lpsrc);
  if (!lpsrc)
  {
    uint64_t v21 = 0;
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_22:
    size_t v22 = 0;
    goto LABEL_23;
  }
  size_t v22 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_23:
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v21)
    {
LABEL_29:
      if (v11[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      }
      else {
        std::string __p = *(std::string *)(v11 + 3);
      }
      uint64_t v23 = siri::intelligence::Memory::SetNumberValue(v17, (uint64_t)&__p, v21[9]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_36;
    }
  }
  else if (v21)
  {
    goto LABEL_29;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a number", v20, "value", "setNumber");
  uint64_t v23 = 0;
LABEL_36:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_38:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v23;
}

void sub_239A9237C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::BehaviorSetBoolean(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_20:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setBoolean");
    uint64_t v23 = 0;
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 88))(&lpsrc);
  if (!lpsrc)
  {
    uint64_t v21 = 0;
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_22:
    size_t v22 = 0;
    goto LABEL_23;
  }
  size_t v22 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_23:
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v21)
    {
LABEL_29:
      if (v11[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      }
      else {
        std::string __p = *(std::string *)(v11 + 3);
      }
      uint64_t v23 = siri::intelligence::Memory::SetBooleanValue(v17, (uint64_t)&__p, v21[66]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_36;
    }
  }
  else if (v21)
  {
    goto LABEL_29;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a BOOLean", v20, "value", "setBoolean");
  uint64_t v23 = 0;
LABEL_36:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_38:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v23;
}

void sub_239A92708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::BehaviorSetArray(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_20:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setArray");
    uint64_t v23 = 0;
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 88))(&lpsrc);
  if (!lpsrc)
  {
    uint64_t v21 = 0;
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_22:
    size_t v22 = 0;
    goto LABEL_23;
  }
  size_t v22 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_23:
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v21)
    {
LABEL_29:
      if (v11[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      }
      else {
        std::string __p = *(std::string *)(v11 + 3);
      }
      std::string lpsrc = 0;
      int64x2_t v26 = 0;
      uint64_t v27 = 0;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(&lpsrc, v21[9], v21[10], ((char *)v21[10] - (char *)v21[9]) >> 4);
      uint64_t v23 = siri::intelligence::Memory::SetArrayValue(v17, (uint64_t)&__p, (uint64_t **)&lpsrc);
      p_std::string lpsrc = &lpsrc;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_36;
    }
  }
  else if (v21)
  {
    goto LABEL_29;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not an array", v20, "value", "setArray");
  uint64_t v23 = 0;
LABEL_36:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_38:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v23;
}

void sub_239A92AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::BehaviorSetDictionary(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_20:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "setDictionary");
    uint64_t v23 = 0;
    goto LABEL_38;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_20;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr))(*(void *)v18 + 88))(&lpsrc);
  if (!lpsrc)
  {
    uint64_t v21 = 0;
    goto LABEL_22;
  }
  if (!v21)
  {
LABEL_22:
    size_t v22 = 0;
    goto LABEL_23;
  }
  size_t v22 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_23:
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v21)
    {
LABEL_29:
      if (v11[95] < 0) {
        std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      }
      else {
        std::string __p = *(std::string *)(v11 + 3);
      }
      siri::intelligence::VariableDictionary::GetValues(v21, (uint64_t *)&lpsrc);
      uint64_t v23 = siri::intelligence::Memory::SetDictionaryValue(v17, (uint64_t)&__p, (uint64_t **)&lpsrc);
      p_std::string lpsrc = &lpsrc;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&p_lpsrc);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_36;
    }
  }
  else if (v21)
  {
    goto LABEL_29;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a dictionary", v20, "value", "setDictionary");
  uint64_t v23 = 0;
LABEL_36:
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
LABEL_38:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v23;
}

void sub_239A92E7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::BehaviorPushBack(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v11) {
      goto LABEL_13;
    }
LABEL_23:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "pushBack");
    BOOL v21 = 0;
    goto LABEL_34;
  }
  if (!v11) {
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v14 = **a2;
  uint64_t v15 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "value");
  uint64_t v16 = std::__tree<std::string>::find<std::string>(v15 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v17 = v14 + 24;
  uint64_t v18 = *(void *)(v16 + 56);
  int64x2_t v19 = *(std::__shared_weak_count **)(v16 + 64);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v18 + 88))(&v25);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v20 = v25;
  if (v25)
  {
    if (v11[95] < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
      uint64_t v20 = v25;
    }
    else
    {
      std::string __p = *(std::string *)(v11 + 3);
    }
    uint64_t v23 = v20;
    uint64_t v24 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v21 = siri::intelligence::Memory::PushBackArrayValue(v17, (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&v23);
    if (v24) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    BOOL v21 = 0;
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
LABEL_34:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v21;
}

void sub_239A931AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::BehaviorPopBack(uint64_t *a1, uint64_t **a2)
{
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    long long v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      long long v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_17:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "popBack");
    uint64_t v18 = 0;
    goto LABEL_42;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_17;
  }
LABEL_13:
  memset(&__p, 0, sizeof(__p));
  uint64_t v14 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&v23, "destination");
  uint64_t v15 = std::__tree<std::string>::find<std::string>(v14 + 72, (const void **)&v23.__r_.__value_.__l.__data_);
  if (v14 + 80 == v15)
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  else
  {
    uint64_t v17 = *(const void **)(v15 + 56);
    uint64_t v16 = *(std::__shared_weak_count **)(v15 + 64);
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v23.__r_.__value_.__l.__data_);
    if (!v17) {
      goto LABEL_33;
    }
  }
  else if (!v17)
  {
LABEL_33:
    uint64_t v21 = **a2;
    if (v11[95] < 0) {
      std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)v11 + 9), *((void *)v11 + 10));
    }
    else {
      std::string v23 = *(std::string *)(v11 + 3);
    }
    uint64_t v18 = siri::intelligence::Memory::PopBackArrayValue(v21 + 24, (const void **)&v23.__r_.__value_.__l.__data_, (uint64_t)&__p);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    goto LABEL_38;
  }
  if (v19)
  {
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v19[95] < 0) {
      std::string::__init_copy_ctor_external(&v23, *((const std::string::value_type **)v19 + 9), *((void *)v19 + 10));
    }
    else {
      std::string v23 = *(std::string *)(v19 + 3);
    }
    std::string __p = v23;
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    goto LABEL_33;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v20, "destination", "popBack");
  uint64_t v18 = 0;
LABEL_38:
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_42:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v18;
}

void sub_239A93554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::BehaviorSetUndefined(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v6 = v4;
  if (v3 + 80 == v4)
  {
    uint64_t v12 = 0;
    long long v10 = 0;
  }
  else
  {
    uint64_t v7 = *(const void **)(v4 + 56);
    long long v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v7
    {
      long long v11 = 0;
      long long v10 = 0;
      uint64_t v12 = 0;
      if (!v8) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v10 = v9;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v11 = v8;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v12 = v11;
      goto LABEL_11;
    }
    uint64_t v12 = 0;
  }
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_13;
    }
LABEL_16:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v5, "name", "setUndefined");
    BOOL v14 = 0;
    goto LABEL_24;
  }
  if (!v10) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v13 = **a2;
  if (v10[95] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((void *)v10 + 10));
  }
  else {
    std::string __p = *(std::string *)(v10 + 3);
  }
  siri::intelligence::Memory::GetVariable(v13 + 24, (uint64_t)&__p, &v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v14 = v16 != 0;
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 24))();
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
LABEL_24:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v14;
}

void sub_239A937E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::BehaviorSetEmpty(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "name");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  uint64_t v6 = v4;
  if (v3 + 80 == v4)
  {
    uint64_t v12 = 0;
    long long v10 = 0;
  }
  else
  {
    uint64_t v7 = *(const void **)(v4 + 56);
    long long v8 = *(std::__shared_weak_count **)(v6 + 64);
    if (v8) {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v7
    {
      long long v11 = 0;
      long long v10 = 0;
      uint64_t v12 = 0;
      if (!v8) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    long long v10 = v9;
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v11 = v8;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v12 = v11;
      goto LABEL_11;
    }
    uint64_t v12 = 0;
  }
LABEL_11:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v10) {
      goto LABEL_13;
    }
LABEL_16:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v5, "name", "setEmpty");
    BOOL v14 = 0;
    goto LABEL_24;
  }
  if (!v10) {
    goto LABEL_16;
  }
LABEL_13:
  uint64_t v13 = **a2;
  if (v10[95] < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)v10 + 9), *((void *)v10 + 10));
  }
  else {
    std::string __p = *(std::string *)(v10 + 3);
  }
  siri::intelligence::Memory::GetVariable(v13 + 24, (uint64_t)&__p, &v16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v14 = v16 != 0;
  if (v16) {
    (*(void (**)(void))(*(void *)v16 + 32))();
  }
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
LABEL_24:
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  return v14;
}

void sub_239A93A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::BehaviorRetryInputs(uint64_t *a1, siri::intelligence::Intelligence::Impl ***a2)
{
  uint64_t v3 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "responseId");
  uint64_t v4 = std::__tree<std::string>::find<std::string>(v3 + 72, (const void **)__p);
  if (v3 + 80 == v4)
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(v4 + 56);
    uint64_t v5 = *(std::__shared_weak_count **)(v4 + 64);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v11 < 0)
  {
    operator delete(__p[0]);
    if (v6) {
      goto LABEL_7;
    }
LABEL_12:
    siri::intelligence::ExecutionState::RewindToLastInputGroup((siri::intelligence::Intelligence::Impl *)((char *)**a2 + 96));
    goto LABEL_13;
  }
  if (!v6) {
    goto LABEL_12;
  }
LABEL_7:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v6 + 88))(&v8, v6, (uint64_t)**a2 + 24);
  (*(void (**)(void **__return_ptr))(*(void *)v8 + 56))(__p);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  siri::intelligence::Intelligence::RetryInputsForResponseId(*a2, (unsigned __int8 **)__p);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return 1;
}

void sub_239A93BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

siri::intelligence::ExecutionState *siri::intelligence::BehaviorRepeatLastResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t result = (siri::intelligence::ExecutionState *)a2[2];
  if (result)
  {
    if (a2[1])
    {
      siri::intelligence::ExecutionState::PopLastResponseIfDone(result);
      uint64_t v4 = a2[2];
      uint64_t v5 = *(std::__shared_weak_count **)(v4 + 32);
      v6[0] = *(void *)(v4 + 24);
      v6[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::ExecStateResponse::ExecStateResponse((uint64_t)&v7, v6, (siri::intelligence::Memory *)(*(void *)*a2 + 24));
      siri::intelligence::ExecStateResponse::operator=(a2[1], &v7);
      uint64_t v13 = (void **)&v12;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v13);
      long long v10 = &unk_26ED272B0;
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v10);
      uint64_t v8 = &unk_26ED27318;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v8);
      if (*((void *)&v7 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v7 + 1));
      }
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
      return (siri::intelligence::ExecutionState *)1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_239A93D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  siri::intelligence::ExecStateResponse::~ExecStateResponse((siri::intelligence::ExecStateResponse *)va);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::BehaviorSwitchActivity()
{
  return 1;
}

BOOL siri::intelligence::BehaviorRegisterUndo(uint64_t *a1, const char *a2)
{
  if (!*(void *)a2)
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"BehaviorRegisterUndo() called with null intelligence object. This should never happen.", a2);
    return 0;
  }
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "identifier");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
  if (v4 + 80 == v5)
  {
    long long v7 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 56);
    long long v7 = *(std::__shared_weak_count **)(v5 + 64);
    if (v7) {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  BOOL v9 = v8 != 0;
  if (v8)
  {
    uint64_t v10 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&__p, "userData");
    uint64_t v11 = std::__tree<std::string>::find<std::string>(v10 + 72, (const void **)&__p.__r_.__value_.__l.__data_);
    if (v10 + 80 == v11)
    {
      uint64_t v13 = 0;
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v13 = *(void *)(v11 + 56);
      uint64_t v12 = *(std::__shared_weak_count **)(v11 + 64);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v13)
      {
LABEL_17:
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 88))(&__p, v13, **(void **)a2 + 24);
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
        uint64_t v15 = (const void *)__p.__r_.__value_.__r.__words[0];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        if (v12)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          if (__p.__r_.__value_.__l.__size_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
          }
        }
        uint64_t v12 = (std::__shared_weak_count *)size;
LABEL_23:
        uint64_t v16 = (char *)operator new(0x40uLL);
        *((void *)v16 + 1) = 0;
        *((void *)v16 + 2) = 0;
        *(void *)uint64_t v16 = &unk_26ED27830;
        *(_OWORD *)(v16 + 24) = 0u;
        *(_OWORD *)(v16 + 40) = 0u;
        *((void *)v16 + 7) = 0;
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v8 + 56))(&__p, v8);
        std::string::operator=((std::string *)v16 + 1, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v15)
          {
LABEL_25:
            if (v17 && v12)
            {
              char v18 = 0;
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              int64x2_t v19 = v12;
LABEL_32:
              uint64_t v20 = (std::__shared_weak_count *)*((void *)v16 + 7);
              *((void *)v16 + 6) = v17;
              *((void *)v16 + 7) = v19;
              if (v20) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
              }
              if ((v18 & 1) == 0) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v19);
              }
              uint64_t v21 = *(uint64_t **)a2;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
              uint64_t v22 = *v21;
              atomic_fetch_add_explicit((atomic_ullong *volatile)v16 + 1, 1uLL, memory_order_relaxed);
              std::string v23 = *(std::__shared_weak_count **)(v22 + 224);
              *(void *)(v22 + 216) = v16 + 24;
              *(void *)(v22 + 224) = v16;
              if (v23) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v23);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
              std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v16);
              if (v12) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v12);
              }
              goto LABEL_40;
            }
            int64x2_t v19 = 0;
LABEL_31:
            char v18 = 1;
            goto LABEL_32;
          }
        }
        else if (v15)
        {
          goto LABEL_25;
        }
        int64x2_t v19 = 0;
        uint64_t v17 = 0;
        goto LABEL_31;
      }
    }
    else if (v13)
    {
      goto LABEL_17;
    }
    uint64_t v15 = 0;
    goto LABEL_23;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not defined", v6, "identifier", "registerUndo");
LABEL_40:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v9;
}

void sub_239A940C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::BehaviorExitValue(uint64_t *a1, const char *a2)
{
  uint64_t v2 = *(uint64_t **)a2;
  if (*(void *)a2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = (std::__shared_weak_count *)a1[1];
    if (v4)
    {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v5 = *v2;
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      uint64_t v5 = *v2;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(v5 + 256);
    *(void *)(v5 + 248) = v3;
    *(void *)(v5 + 256) = v4;
    if (v6) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"BehaviorExitValue() called with null intelligence object. This should never happen.", a2);
  }
  return v2 != 0;
}

uint64_t siri::intelligence::BehaviorSetVariables(void ***a1, uint64_t **a2)
{
  uint64_t v2 = **a2;
  siri::intelligence::VariableDictionary::GetValues(*a1, &v16);
  uint64_t v3 = v16;
  uint64_t v4 = v17;
  if (v16 != v17)
  {
    uint64_t v5 = v2 + 24;
    LODWORD(v2) = 1;
    while (1)
    {
      uint64_t v6 = *(void *)v3;
      if (*(char *)(*(void *)v3 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v6 + 8), *(void *)(v6 + 16));
        uint64_t v6 = *(void *)v3;
        if (*(char *)(*(void *)v3 + 31) < 0)
        {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 8), *(void *)(v6 + 16));
          uint64_t v6 = *(void *)v3;
          goto LABEL_8;
        }
        long long v7 = (long long *)(v6 + 8);
      }
      else
      {
        long long v7 = (long long *)(v6 + 8);
        long long v8 = *(_OWORD *)(v6 + 8);
        v15.__r_.__value_.__r.__words[2] = *(void *)(v6 + 24);
        *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v8;
      }
      long long v9 = *v7;
      __p.__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
LABEL_8:
      (*(void (**)(const void **__return_ptr))(*(void *)v6 + 88))(&v12);
      int v10 = siri::intelligence::Memory::SetVariable(v5, (uint64_t)&__p, &v12);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v15.__r_.__value_.__l.__data_);
      }
      uint64_t v2 = v10 & v2;
      v3 += 16;
      if (v3 == v4) {
        goto LABEL_18;
      }
    }
  }
  uint64_t v2 = 1;
LABEL_18:
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&v16;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  return v2;
}

void sub_239A94324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::string __p = &a24;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::BehaviorPickFromArray(uint64_t *a1, uint64_t **a2)
{
  uint64_t v3 = **a2;
  uint64_t v4 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&lpsrc, "name");
  uint64_t v5 = std::__tree<std::string>::find<std::string>(v4 + 72, (const void **)&lpsrc.__r_.__value_.__l.__data_);
  uint64_t v7 = v5;
  if (v4 + 80 == v5)
  {
    uint64_t v13 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    long long v8 = *(const void **)(v5 + 56);
    long long v9 = *(std::__shared_weak_count **)(v7 + 64);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v8
    {
      uint64_t v12 = 0;
      uint64_t v11 = 0;
      uint64_t v13 = 0;
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_9;
    }
    uint64_t v11 = v10;
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v12 = v9;
LABEL_9:
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v13 = v12;
      goto LABEL_11;
    }
    uint64_t v13 = 0;
  }
LABEL_11:
  if ((SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_13;
    }
LABEL_18:
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v6, "name", "pickFromArray");
    BOOL v18 = 0;
    goto LABEL_81;
  }
  operator delete(lpsrc.__r_.__value_.__l.__data_);
  if (!v11) {
    goto LABEL_18;
  }
LABEL_13:
  uint64_t v14 = v3 + 24;
  (*((void (**)(std::string *__return_ptr, const std::string::value_type **, uint64_t))*v11 + 11))(&lpsrc, v11, v14);
  if (!lpsrc.__r_.__value_.__r.__words[0])
  {
    uint64_t v16 = 0;
    goto LABEL_20;
  }
  if (!v16)
  {
LABEL_20:
    std::string::size_type size = 0;
    goto LABEL_21;
  }
  std::string::size_type size = (std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_;
  if (lpsrc.__r_.__value_.__l.__size_) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(lpsrc.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
  }
LABEL_21:
  if (lpsrc.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
  }
  if (v16)
  {
    uint64_t v19 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "destination");
    uint64_t v20 = std::__tree<std::string>::find<std::string>(v19 + 72, (const void **)&lpsrc.__r_.__value_.__l.__data_);
    uint64_t v22 = v20;
    if (v19 + 80 == v20)
    {
      char v45 = 0;
      int64x2_t v26 = 0;
    }
    else
    {
      std::string v23 = *(const void **)(v20 + 56);
      uint64_t v24 = *(std::__shared_weak_count **)(v22 + 64);
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v23
      {
        uint64_t v27 = 0;
        int64x2_t v26 = 0;
        char v45 = 0;
        if (!v24) {
          goto LABEL_35;
        }
        goto LABEL_33;
      }
      int64x2_t v26 = v25;
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v27 = v24;
LABEL_33:
        std::__shared_weak_count::__release_shared[abi:ne180100](v24);
        char v45 = v27;
        goto LABEL_35;
      }
      char v45 = 0;
    }
LABEL_35:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    BOOL v18 = v26 != 0;
    int v28 = v45;
    if (!v26)
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a variable reference", v21, "destination", "pickFromArray");
LABEL_77:
      if (v28) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v28);
      }
      goto LABEL_79;
    }
    uint64_t v29 = *a1;
    std::string::basic_string[abi:ne180100]<0>(&lpsrc, "deleteItem");
    uint64_t v30 = std::__tree<std::string>::find<std::string>(v29 + 72, (const void **)&lpsrc.__r_.__value_.__l.__data_);
    uint64_t v31 = v30;
    if (v29 + 80 == v30)
    {
      int v44 = 0;
      uint64_t v35 = 0;
    }
    else
    {
      size_t v32 = *(const void **)(v30 + 56);
      size_t v33 = *(std::__shared_weak_count **)(v31 + 64);
      if (v33) {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v32
      {
        char v36 = 0;
        uint64_t v35 = 0;
        int v44 = 0;
        if (!v33) {
          goto LABEL_50;
        }
        goto LABEL_47;
      }
      uint64_t v35 = v34;
      if (v33)
      {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        char v36 = v33;
LABEL_47:
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        int v44 = v36;
        goto LABEL_50;
      }
      int v44 = 0;
    }
LABEL_50:
    if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(lpsrc.__r_.__value_.__l.__data_);
    }
    int v28 = v45;
    if (v35)
    {
      (*(void (**)(std::string *__return_ptr, void *, uint64_t))(*(void *)v35 + 88))(&lpsrc, v35, v14);
      LODWORD(v35) = (*(uint64_t (**)(std::string::size_type))(*(void *)lpsrc.__r_.__value_.__l.__data_
                                                                       + 80))(lpsrc.__r_.__value_.__r.__words[0]);
      if (lpsrc.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc.__r_.__value_.__l.__size_);
      }
    }
    uint64_t v38 = *((void *)v16 + 9);
    uint64_t v37 = *((void *)v16 + 10);
    uint64_t v39 = v37 - v38;
    if (v37 == v38)
    {
      if (v26[95] < 0) {
        std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v26 + 9), *((void *)v26 + 10));
      }
      else {
        std::string lpsrc = *(std::string *)(v26 + 3);
      }
      long long v50 = 0;
      char v51 = 0;
      siri::intelligence::Memory::SetVariable(v14, (uint64_t)&lpsrc, &v50);
      char v42 = v51;
      if (!v51) {
        goto LABEL_73;
      }
    }
    else
    {
      double v40 = erand48((unsigned __int16 *)&siri::intelligence::Utils::sRandomNumberGeneratorState);
      if (v26[95] < 0) {
        std::string::__init_copy_ctor_external(&lpsrc, *((const std::string::value_type **)v26 + 9), *((void *)v26 + 10));
      }
      else {
        std::string lpsrc = *(std::string *)(v26 + 3);
      }
      uint64_t v41 = (uint64_t)(v40 * (double)(v39 >> 4));
      siri::intelligence::VariableArray::GetItem((uint64_t)v16, v41, &v48);
      siri::intelligence::Memory::SetVariable(v14, (uint64_t)&lpsrc, &v48);
      if (v49) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      }
      if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(lpsrc.__r_.__value_.__l.__data_);
        if (!v35) {
          goto LABEL_75;
        }
      }
      else if (!v35)
      {
LABEL_75:
        if (v44) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v44);
        }
        goto LABEL_77;
      }
      siri::intelligence::VariableArray::RemoveItem(v16, v41);
      if (*((char *)v11 + 95) < 0) {
        std::string::__init_copy_ctor_external(&lpsrc, v11[9], (std::string::size_type)v11[10]);
      }
      else {
        std::string lpsrc = *(std::string *)((unsigned char *)v11 + 3);
      }
      std::string::size_type v46 = v16;
      uint64_t v47 = size;
      if (size) {
        atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::Memory::SetVariable(v14, (uint64_t)&lpsrc, (const void **)&v46);
      char v42 = v47;
      if (!v47)
      {
LABEL_73:
        if (SHIBYTE(lpsrc.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(lpsrc.__r_.__value_.__l.__data_);
        }
        goto LABEL_75;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    goto LABEL_73;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Parameter '%s' of '%s' behavior is not a reference to an array", v15, "name", "pickFromArray");
  BOOL v18 = 0;
LABEL_79:
  if (size) {
    std::__shared_weak_count::__release_shared[abi:ne180100](size);
  }
LABEL_81:
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  return v18;
}

void sub_239A949CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  _Unwind_Resume(exception_object);
}

std::string *std::vector<siri::intelligence::BehaviorDefinition>::vector[abi:ne180100](std::string *result, unint64_t a2)
{
  qword_26AD86948 = 0;
  qword_26AD86950 = 0;
  qword_26AD86958 = 0;
  if (a2)
  {
    uint64_t v3 = result;
    std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](&qword_26AD86948, a2);
    unint64_t v4 = 0;
    uint64_t v5 = qword_26AD86950;
    unint64_t v6 = a2 << 6;
    do
    {
      uint64_t v7 = (std::string *)(v5 + v4);
      long long v8 = (char *)v3 + v4;
      if (SHIBYTE(v3->__r_.__value_.__r.__words[v4 / 8 + 2]) < 0)
      {
        std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
      }
      else
      {
        long long v9 = *(_OWORD *)v8;
        v7->__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
        *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
      }
      std::string::size_type v10 = v3[1].__r_.__value_.__r.__words[v4 / 8];
      *(void *)(v5 + v4 + 32) = 0;
      uint64_t v11 = (std::string *)(v5 + v4 + 32);
      v11[-1].__r_.__value_.__r.__words[2] = v10;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      uint64_t result = std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v11, *(long long **)((char *)&v3[1].__r_.__value_.__l.__size_ + v4), (long long *)v3[1].__r_.__value_.__r.__words[v4 / 8 + 2], 0x6DB6DB6DB6DB6DB7* ((uint64_t)(v3[1].__r_.__value_.__r.__words[v4 / 8 + 2]- *(std::string::size_type *)((char *)&v3[1].__r_.__value_.__l.__size_ + v4)) >> 3));
      *(_WORD *)(v5 + v4 + 56) = v3[2].__r_.__value_.__r.__words[v4 / 8 + 1];
      v4 += 64;
    }
    while (v6 != v4);
    qword_26AD86950 = v5 + v4;
  }
  return result;
}

void sub_239A94BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void siri::intelligence::BehaviorDefinition::~BehaviorDefinition(void **this)
{
  uint64_t v2 = this + 4;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 23) < 0) {
    operator delete(*this);
  }
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(uint64_t **)(a1 + 8);
    uint64_t v2 = *(uint64_t **)(a1 + 16);
    uint64_t v4 = *v2;
    uint64_t v5 = *v3;
    if (*v2 != *v3)
    {
      uint64_t v6 = *(void *)a1;
      do
      {
        v4 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v6, v4);
      }
      while (v4 != v5);
    }
  }
  return a1;
}

void std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t siri::intelligence::ExecStateResponse::operator=(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)a2 + 1);
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)a2 + 2);
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)a2 + 3);
  int v6 = *((_DWORD *)a2 + 26);
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_DWORD *)(a1 + 104) = v6;
  if ((long long *)a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 112), *((std::string **)a2 + 14), *((long long **)a2 + 15), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 15) - *((void *)a2 + 14)) >> 3));
  }
  long long v7 = *(long long *)((char *)a2 + 136);
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v8 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 10));
  std::string::operator=((std::string *)(a1 + 184), (const std::string *)((char *)a2 + 184));
  std::string::operator=((std::string *)(a1 + 208), (const std::string *)(a2 + 13));
  int v9 = *((_DWORD *)a2 + 60);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_DWORD *)(a1 + 240) = v9;
  if ((long long *)a1 != a2) {
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(a1 + 248), *((std::string **)a2 + 31), *((long long **)a2 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 32) - *((void *)a2 + 31)) >> 3));
  }
  long long v10 = a2[17];
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate((uint64_t *)(a1 + 288));
  *(_OWORD *)(a1 + 288) = a2[18];
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 38) = 0;
  return a1;
}

void siri::intelligence::ExecStateResponse::~ExecStateResponse(siri::intelligence::ExecStateResponse *this)
{
  uint64_t v5 = (void **)((char *)this + 288);
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v5);
  *((void *)this + 19) = &unk_26ED272B0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 35);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  siri::intelligence::ResponseBase::~ResponseBase((void **)this + 19);
  *((void *)this + 2) = &unk_26ED27318;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  siri::intelligence::ResponseBase::~ResponseBase((void **)this + 2);
  long long v4 = (std::__shared_weak_count *)*((void *)this + 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *std::vector<siri::intelligence::BehaviorDefinition>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)operator new(a2 << 6);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * a2];
  return result;
}

std::string *std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_239A95060(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(int a1, long long *a2, long long *a3, std::string *this)
{
  long long v4 = this;
  uint64_t v11 = this;
  if (a2 != a3)
  {
    int v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      long long v8 = v4 + 1;
      if (*((char *)v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *((const std::string::value_type **)v6 + 3), *((void *)v6 + 4));
      }
      else
      {
        long long v9 = *(long long *)((char *)v6 + 24);
        v4[1].__r_.__value_.__r.__words[2] = *((void *)v6 + 5);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)v6 + 48);
      int v6 = (long long *)((char *)v6 + 56);
      long long v4 = (std::string *)((char *)v11 + 56);
      uint64_t v11 = (std::string *)((char *)v11 + 56);
    }
    while (v6 != a3);
  }
  return v4;
}

void sub_239A95150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 + 23) < 0) {
    operator delete(*(void **)v9);
  }
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::BehaviorDefinition>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 32);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::vector<siri::intelligence::BehaviorDefinition>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::allocator<siri::intelligence::BehaviorDefinition>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::map<std::string,siri::intelligence::BehaviorDefinition>::map[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v3 = qword_26AD86960;
  if ((uint64_t *)qword_26AD86960 != &qword_26AD86968)
  {
    while (1)
    {
      uint64_t v4 = *(void *)(a1 + 8);
      if (*(uint64_t ***)a1 == v2) {
        break;
      }
      uint64_t v5 = v2;
      if (v4)
      {
        do
        {
          uint64_t v6 = v4;
          uint64_t v4 = *(void *)(v4 + 8);
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t)v5[2];
          BOOL v7 = *(void *)v6 == (void)v5;
          uint64_t v5 = (uint64_t **)v6;
        }
        while (v7);
      }
      if (std::less<std::string>::operator()[abi:ne180100](a1 + 16, (const void **)(v6 + 32), (const void **)(v3 + 32)))
      {
        if (!*v2) {
          goto LABEL_9;
        }
LABEL_11:
        uint64_t v19 = (void *)v6;
        long long v8 = (uint64_t **)(v6 + 8);
        goto LABEL_13;
      }
      long long v8 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>(a1, &v19, (const void **)(v3 + 32));
LABEL_13:
      if (!*v8) {
        goto LABEL_14;
      }
LABEL_21:
      uint64_t v14 = *(uint64_t **)(v3 + 8);
      if (v14)
      {
        do
        {
          std::string v15 = v14;
          uint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          std::string v15 = *(uint64_t **)(v3 + 16);
          BOOL v7 = *v15 == v3;
          uint64_t v3 = (uint64_t)v15;
        }
        while (!v7);
      }
      uint64_t v3 = (uint64_t)v15;
      if (v15 == &qword_26AD86968) {
        return a1;
      }
    }
    uint64_t v6 = (uint64_t)v2;
    if (!v4)
    {
LABEL_9:
      uint64_t v19 = v2;
      long long v8 = v2;
LABEL_14:
      uint64_t v9 = (char *)operator new(0x78uLL);
      uint64_t v10 = v9;
      v17[0] = v9;
      v17[1] = v2;
      char v18 = 0;
      if (*(char *)(v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v9 + 32), *(const std::string::value_type **)(v3 + 32), *(void *)(v3 + 40));
      }
      else
      {
        long long v11 = *(_OWORD *)(v3 + 32);
        *((void *)v9 + 6) = *(void *)(v3 + 48);
        *((_OWORD *)v9 + 2) = v11;
      }
      if (*(char *)(v3 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)(v10 + 56), *(const std::string::value_type **)(v3 + 56), *(void *)(v3 + 64));
      }
      else
      {
        long long v12 = *(_OWORD *)(v3 + 56);
        *((void *)v10 + 9) = *(void *)(v3 + 72);
        *(_OWORD *)(v10 + 56) = v12;
      }
      uint64_t v13 = *(void *)(v3 + 80);
      *((void *)v10 + 11) = 0;
      *((void *)v10 + 10) = v13;
      *((void *)v10 + 12) = 0;
      *((void *)v10 + 13) = 0;
      std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>((std::string *)(v10 + 88), *(long long **)(v3 + 88), *(long long **)(v3 + 96), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 96) - *(void *)(v3 + 88)) >> 3));
      *((_WORD *)v10 + 56) = *(_WORD *)(v3 + 112);
      char v18 = 1;
      std::__tree<std::string>::__insert_node_at((uint64_t **)a1, (uint64_t)v19, v8, (uint64_t *)v10);
      v17[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)v17);
      goto LABEL_21;
    }
    goto LABEL_11;
  }
  return a1;
}

void sub_239A95468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v10 + 55) < 0) {
    operator delete(*v11);
  }
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(v9, *(void **)(v9 + 8));
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::__map_value_compare<std::string,std::__value_type<std::string,siri::intelligence::BehaviorDefinition>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,siri::intelligence::BehaviorDefinition>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,siri::intelligence::BehaviorDefinition>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::vector<siri::intelligence::BehaviorArgument>::__assign_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(std::string **)a1;
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3) < a4)
  {
    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a1);
    if (a4 > 0x492492492492492) {
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)) >= 0x249249249249249) {
      unint64_t v11 = 0x492492492492492;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<siri::intelligence::FunctionArgument>::__vallocate[abi:ne180100]((void *)a1, v11);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v8, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_11;
  }
  if (0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3) < a4)
  {
    uint64_t v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 3));
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, v13, v9);
    long long v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::BehaviorArgument>,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(v8, (long long *)v13, a3, *(std::string **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v12;
    return;
  }
  uint64_t v14 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *,siri::intelligence::FunctionArgument *>(__str, (std::string *)a3, v9);
  for (uint64_t i = *(void *)(a1 + 8);
        (std::string *)i != v14;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v8, i))
  {
    i -= 56;
  }
  *(void *)(a1 + 8) = v14;
}

void sub_239A9574C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_239A95754(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100]((uint64_t)(a1 + 2), v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>(unint64_t a1, void **a2, uint64_t a3, char a4)
{
  while (2)
  {
    uint64_t v9 = a2 - 8;
    long long v292 = (const void **)(a2 - 24);
    long long v294 = (const void **)(a2 - 16);
    size_t v303 = (const void **)a2;
    while (1)
    {
      while (1)
      {
        uint64_t v10 = (uint64_t)a2 - a1;
        unint64_t v11 = (uint64_t)((uint64_t)a2 - a1) >> 6;
        if (v5 || !v4)
        {
          switch(v11)
          {
            case 0uLL:
            case 1uLL:
              return;
            case 2uLL:
              uint64_t v122 = (void **)*(a2 - 8);
              long long v121 = a2 - 8;
              char v120 = v122;
              int v123 = *(char *)(a1 + 23);
              int v124 = *((char *)v121 + 23);
              if (v124 >= 0) {
                size_t v125 = *((unsigned __int8 *)v121 + 23);
              }
              else {
                size_t v125 = (size_t)v121[1];
              }
              if (v124 >= 0) {
                std::string::size_type v126 = v121;
              }
              else {
                std::string::size_type v126 = v120;
              }
              if (v123 >= 0) {
                size_t v127 = *(unsigned __int8 *)(a1 + 23);
              }
              else {
                size_t v127 = *(void *)(a1 + 8);
              }
              if (v123 >= 0) {
                int v128 = (const void *)a1;
              }
              else {
                int v128 = *(const void **)a1;
              }
              if (v127 >= v125) {
                size_t v129 = v125;
              }
              else {
                size_t v129 = v127;
              }
              int v130 = memcmp(v126, v128, v129);
              BOOL v131 = v125 < v127;
              if (v130) {
                BOOL v131 = v130 < 0;
              }
              if (v131) {
                std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, (long long *)v121);
              }
              break;
            case 3uLL:
              std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + 64), (const void **)v9);
              break;
            case 4uLL:
              std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, a1 + 64, a1 + 128, (const void **)v9);
              break;
            case 5uLL:
              std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(a1, a1 + 64, a1 + 128, a1 + 192, (const void **)v9);
              break;
            default:
              JUMPOUT(0);
          }
          return;
        }
        uint64_t v304 = a1;
        if (v10 <= 1535)
        {
          if (a4)
          {
            if ((void **)a1 != a2)
            {
              size_t v132 = (const void **)(a1 + 64);
              if ((void **)(a1 + 64) != a2)
              {
                uint64_t v133 = 0;
                std::string::size_type v134 = (const void **)a1;
                do
                {
                  int v135 = v132;
                  int v136 = *((char *)v134 + 23);
                  int v137 = *((char *)v134 + 87);
                  if (v137 >= 0) {
                    size_t v138 = *((unsigned __int8 *)v134 + 87);
                  }
                  else {
                    size_t v138 = (size_t)v134[9];
                  }
                  if (v137 >= 0) {
                    int v139 = v132;
                  }
                  else {
                    int v139 = (const void **)v134[8];
                  }
                  if (v136 >= 0) {
                    size_t v140 = *((unsigned __int8 *)v134 + 23);
                  }
                  else {
                    size_t v140 = (size_t)v134[1];
                  }
                  if (v136 >= 0) {
                    std::string::size_type v141 = v134;
                  }
                  else {
                    std::string::size_type v141 = *v134;
                  }
                  if (v140 >= v138) {
                    size_t v142 = v138;
                  }
                  else {
                    size_t v142 = v140;
                  }
                  int v143 = memcmp(v139, v141, v142);
                  BOOL v144 = v138 < v140;
                  if (v143) {
                    BOOL v144 = v143 < 0;
                  }
                  if (v144)
                  {
                    long long v145 = *(_OWORD *)v135;
                    v311 = v135[2];
                    *(_OWORD *)std::string __p = v145;
                    v135[1] = 0;
                    v135[2] = 0;
                    *int v135 = 0;
                    *(_OWORD *)v312 = *(_OWORD *)(v134 + 11);
                    *(_OWORD *)&v312[16] = *(_OWORD *)(v134 + 13);
                    v134[13] = 0;
                    v134[14] = 0;
                    v134[12] = 0;
                    __int16 v313 = *((_WORD *)v134 + 60);
                    uint64_t v146 = v133;
                    uint64_t v147 = v304;
                    while (1)
                    {
                      uint64_t v148 = v146;
                      uint64_t v149 = v147 + v146;
                      uint64_t v150 = v147 + v146 + 64;
                      if (*(char *)(v147 + v146 + 87) < 0) {
                        operator delete(*(void **)v150);
                      }
                      *(_OWORD *)uint64_t v150 = *(_OWORD *)v149;
                      uint64_t v151 = *(void *)(v149 + 24);
                      *(void *)(v150 + 16) = *(void *)(v149 + 16);
                      *(unsigned char *)(v149 + 23) = 0;
                      *(unsigned char *)uint64_t v149 = 0;
                      *(void *)(v149 + 88) = v151;
                      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v149 + 96));
                      *(_OWORD *)(v149 + 96) = *(_OWORD *)(v149 + 32);
                      *(void *)(v149 + 112) = *(void *)(v149 + 48);
                      *(void *)(v149 + 40) = 0;
                      *(void *)(v149 + 48) = 0;
                      *(void *)(v149 + 32) = 0;
                      *(_WORD *)(v149 + 120) = *(_WORD *)(v149 + 56);
                      if (!v148) {
                        break;
                      }
                      int v152 = *(char *)(v304 + v148 - 41);
                      if (SHIBYTE(v311) >= 0) {
                        uint64_t v153 = (void *)HIBYTE(v311);
                      }
                      else {
                        uint64_t v153 = __p[1];
                      }
                      if (SHIBYTE(v311) >= 0) {
                        __int16 v154 = __p;
                      }
                      else {
                        __int16 v154 = (void **)__p[0];
                      }
                      if (v152 >= 0) {
                        size_t v155 = *(unsigned __int8 *)(v304 + v148 - 41);
                      }
                      else {
                        size_t v155 = *(void *)(v304 + v148 - 56);
                      }
                      if (v152 >= 0) {
                        int v156 = (const void *)(v304 + v148 - 64);
                      }
                      else {
                        int v156 = *(const void **)(v304 + v148 - 64);
                      }
                      if (v155 >= (unint64_t)v153) {
                        size_t v157 = (size_t)v153;
                      }
                      else {
                        size_t v157 = v155;
                      }
                      int v158 = memcmp(v154, v156, v157);
                      uint64_t v147 = v304;
                      BOOL v159 = v158 < 0;
                      if (!v158) {
                        BOOL v159 = (unint64_t)v153 < v155;
                      }
                      uint64_t v146 = v148 - 64;
                      if (!v159)
                      {
                        uint64_t v160 = v304 + v148;
                        goto LABEL_286;
                      }
                    }
                    uint64_t v160 = v304;
LABEL_286:
                    if (*(char *)(v160 + 23) < 0) {
                      operator delete(*(void **)v160);
                    }
                    long long v161 = *(_OWORD *)__p;
                    *(void *)(v160 + 16) = v311;
                    *(_OWORD *)uint64_t v160 = v161;
                    HIBYTE(v311) = 0;
                    LOBYTE(__p[0]) = 0;
                    *(void *)(v160 + 24) = *(void *)v312;
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v304 + v148 + 32));
                    *(void *)(v304 + v148 + 32) = *(void *)&v312[8];
                    *(_OWORD *)(v160 + 40) = *(_OWORD *)&v312[16];
                    memset(&v312[8], 0, 24);
                    *(_WORD *)(v160 + 56) = v313;
                    v305[0] = &v312[8];
                    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                    if (SHIBYTE(v311) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                  size_t v132 = v135 + 8;
                  v133 += 64;
                  std::string::size_type v134 = v135;
                }
                while (v135 + 8 != v303);
              }
            }
          }
          else if ((void **)a1 != a2)
          {
            long long v263 = (const void *)(a1 + 64);
            if ((void **)(a1 + 64) != a2)
            {
              uint64_t v264 = (_WORD *)(a1 + 120);
              do
              {
                unint64_t v265 = (unint64_t)v263;
                int v266 = *(char *)(a1 + 23);
                int v267 = *(char *)(a1 + 87);
                if (v267 >= 0) {
                  size_t v268 = *(unsigned __int8 *)(a1 + 87);
                }
                else {
                  size_t v268 = *(void *)(a1 + 72);
                }
                if (v267 >= 0) {
                  size_t v269 = v263;
                }
                else {
                  size_t v269 = *(const void **)(a1 + 64);
                }
                if (v266 >= 0) {
                  size_t v270 = *(unsigned __int8 *)(a1 + 23);
                }
                else {
                  size_t v270 = *(void *)(a1 + 8);
                }
                if (v266 >= 0) {
                  size_t v271 = (const void *)a1;
                }
                else {
                  size_t v271 = *(const void **)a1;
                }
                if (v270 >= v268) {
                  size_t v272 = v268;
                }
                else {
                  size_t v272 = v270;
                }
                int v273 = memcmp(v269, v271, v272);
                BOOL v274 = v268 < v270;
                if (v273) {
                  BOOL v274 = v273 < 0;
                }
                if (v274)
                {
                  long long v275 = *(_OWORD *)v265;
                  v311 = *(const void **)(v265 + 16);
                  *(_OWORD *)std::string __p = v275;
                  *(void *)(v265 + 8) = 0;
                  *(void *)(v265 + 16) = 0;
                  *(void *)unint64_t v265 = 0;
                  *(_OWORD *)v312 = *(_OWORD *)(a1 + 88);
                  *(_OWORD *)&v312[16] = *(_OWORD *)(a1 + 104);
                  *(void *)(a1 + 104) = 0;
                  *(void *)(a1 + 112) = 0;
                  *(void *)(a1 + 96) = 0;
                  __int16 v313 = *(_WORD *)(a1 + 120);
                  long long v276 = v264;
                  do
                  {
                    long long v277 = (void **)(v276 - 28);
                    if (*((char *)v276 - 33) < 0) {
                      operator delete(*v277);
                    }
                    *(_OWORD *)long long v277 = *(_OWORD *)(v276 - 60);
                    *((void *)v276 - 5) = *((void *)v276 - 13);
                    *((unsigned char *)v276 - 97) = 0;
                    *((unsigned char *)v276 - 120) = 0;
                    *((void *)v276 - 4) = *((void *)v276 - 12);
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)v276 - 3);
                    *(_OWORD *)(v276 - 12) = *(_OWORD *)(v276 - 44);
                    *((void *)v276 - 1) = *((void *)v276 - 9);
                    *((void *)v276 - 10) = 0;
                    *((void *)v276 - 9) = 0;
                    *((void *)v276 - 11) = 0;
                    v278 = v276 - 32;
                    *long long v276 = *(v276 - 32);
                    size_t v279 = *((unsigned __int8 *)v276 - 161);
                    uint64_t v280 = v276 - 92;
                    long long v281 = (const void *)*((void *)v276 - 23);
                    size_t v282 = *((void *)v276 - 22);
                    if (SHIBYTE(v311) >= 0) {
                      long long v283 = (void *)HIBYTE(v311);
                    }
                    else {
                      long long v283 = __p[1];
                    }
                    if (SHIBYTE(v311) >= 0) {
                      int v284 = __p;
                    }
                    else {
                      int v284 = (void **)__p[0];
                    }
                    if ((v279 & 0x80u) == 0) {
                      size_t v285 = v279;
                    }
                    else {
                      size_t v285 = v282;
                    }
                    if ((v279 & 0x80u) == 0) {
                      v286 = v280;
                    }
                    else {
                      v286 = v281;
                    }
                    if (v285 >= (unint64_t)v283) {
                      size_t v287 = (size_t)v283;
                    }
                    else {
                      size_t v287 = v285;
                    }
                    int v288 = memcmp(v284, v286, v287);
                    BOOL v289 = (unint64_t)v283 < v285;
                    if (v288) {
                      BOOL v289 = v288 < 0;
                    }
                    long long v276 = v278;
                  }
                  while (v289);
                  v290 = (void **)(v278 - 28);
                  if (*((char *)v278 - 33) < 0) {
                    operator delete(*v290);
                  }
                  long long v291 = *(_OWORD *)__p;
                  *((void *)v278 - 5) = v311;
                  *(_OWORD *)v290 = v291;
                  HIBYTE(v311) = 0;
                  LOBYTE(__p[0]) = 0;
                  *((void *)v278 - 4) = *(void *)v312;
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)v278 - 3);
                  *(_OWORD *)(v278 - 12) = *(_OWORD *)&v312[8];
                  *((void *)v278 - 1) = *(void *)&v312[24];
                  memset(&v312[8], 0, 24);
                  _WORD *v278 = v313;
                  v305[0] = &v312[8];
                  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                  if (SHIBYTE(v311) < 0) {
                    operator delete(__p[0]);
                  }
                }
                long long v263 = (const void *)(v265 + 64);
                v264 += 32;
                a1 = v265;
              }
              while ((const void **)(v265 + 64) != v303);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((void **)a1 != a2)
          {
            unint64_t v293 = (unint64_t)a2 - a1;
            int64_t v162 = (v11 - 2) >> 1;
            int64_t v163 = v162;
            uint64_t v296 = (uint64_t)((uint64_t)a2 - a1) >> 6;
            int64_t v301 = v162;
            do
            {
              int64_t v164 = v163;
              if (v162 >= v163)
              {
                uint64_t v165 = (2 * v163) | 1;
                unint64_t v166 = a1 + (v165 << 6);
                if (2 * v163 + 2 < (uint64_t)v11)
                {
                  char v167 = *(unsigned char *)(v166 + 87);
                  v295 = *(const void **)(v166 + 64);
                  char v168 = *(unsigned char *)(v166 + 23);
                  uint64_t v298 = *(const void **)v166;
                  if (v168 >= 0) {
                    size_t v169 = *(unsigned __int8 *)(v166 + 23);
                  }
                  else {
                    size_t v169 = *(void *)(v166 + 8);
                  }
                  if (v168 >= 0) {
                    v170 = (const void *)(a1 + (v165 << 6));
                  }
                  else {
                    v170 = *(const void **)v166;
                  }
                  if (v167 >= 0) {
                    size_t v171 = *(unsigned __int8 *)(v166 + 87);
                  }
                  else {
                    size_t v171 = *(void *)(v166 + 72);
                  }
                  if (v167 >= 0) {
                    __int16 v172 = (const void *)(v166 + 64);
                  }
                  else {
                    __int16 v172 = *(const void **)(v166 + 64);
                  }
                  if (v171 >= v169) {
                    size_t v173 = v169;
                  }
                  else {
                    size_t v173 = v171;
                  }
                  int v174 = memcmp(v170, v172, v173);
                  BOOL v175 = v169 < v171;
                  if (v174) {
                    BOOL v175 = v174 < 0;
                  }
                  BOOL v5 = !v175;
                  uint64_t v176 = v298;
                  if (!v5)
                  {
                    uint64_t v176 = v295;
                    v166 += 64;
                    uint64_t v165 = 2 * v164 + 2;
                  }
                }
                else
                {
                  uint64_t v176 = *(const void **)v166;
                }
                unint64_t v177 = a1 + (v164 << 6);
                int v178 = *(char *)(v177 + 23);
                int v179 = *(char *)(v166 + 23);
                if (v179 >= 0) {
                  size_t v180 = *(unsigned __int8 *)(v166 + 23);
                }
                else {
                  size_t v180 = *(void *)(v166 + 8);
                }
                if (v179 >= 0) {
                  int v181 = (const void *)v166;
                }
                else {
                  int v181 = v176;
                }
                if (v178 >= 0) {
                  size_t v182 = *(unsigned __int8 *)(v177 + 23);
                }
                else {
                  size_t v182 = *(void *)(v177 + 8);
                }
                if (v178 >= 0) {
                  size_t v183 = (const void *)(a1 + (v164 << 6));
                }
                else {
                  size_t v183 = *(const void **)v177;
                }
                if (v182 >= v180) {
                  size_t v184 = v180;
                }
                else {
                  size_t v184 = v182;
                }
                int v185 = memcmp(v181, v183, v184);
                BOOL v186 = v180 < v182;
                if (v185) {
                  BOOL v186 = v185 < 0;
                }
                int64_t v162 = v301;
                if (!v186)
                {
                  long long v187 = *(_OWORD *)v177;
                  v311 = *(const void **)(v177 + 16);
                  *(_OWORD *)std::string __p = v187;
                  *(void *)(v177 + 8) = 0;
                  *(void *)(v177 + 16) = 0;
                  *(void *)unint64_t v177 = 0;
                  int64_t v299 = v164;
                  unint64_t v188 = a1 + (v164 << 6);
                  *(_OWORD *)v312 = *(_OWORD *)(v188 + 24);
                  *(_OWORD *)&v312[16] = *(_OWORD *)(v188 + 40);
                  *(void *)(v188 + 32) = 0;
                  *(void *)(v188 + 40) = 0;
                  *(void *)(v188 + 48) = 0;
                  __int16 v313 = *(_WORD *)(v188 + 56);
                  do
                  {
                    unint64_t v189 = v166;
                    if (*(char *)(v177 + 23) < 0) {
                      operator delete(*(void **)v177);
                    }
                    long long v190 = *(_OWORD *)v166;
                    *(void *)(v177 + 16) = *(void *)(v166 + 16);
                    *(_OWORD *)unint64_t v177 = v190;
                    *(unsigned char *)(v166 + 23) = 0;
                    *(unsigned char *)unint64_t v166 = 0;
                    *(void *)(v177 + 24) = *(void *)(v166 + 24);
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v177 + 32));
                    *(_OWORD *)(v177 + 32) = *(_OWORD *)(v166 + 32);
                    *(void *)(v177 + 48) = *(void *)(v166 + 48);
                    *(void *)(v166 + 32) = 0;
                    *(void *)(v166 + 40) = 0;
                    *(void *)(v166 + 48) = 0;
                    *(_WORD *)(v177 + 56) = *(_WORD *)(v166 + 56);
                    if (v162 < v165) {
                      break;
                    }
                    uint64_t v191 = (2 * v165) | 1;
                    unint64_t v166 = a1 + (v191 << 6);
                    uint64_t v165 = 2 * v165 + 2;
                    if (v165 < (uint64_t)v11)
                    {
                      int v192 = *(char *)(v166 + 87);
                      int v193 = *(const void **)(v166 + 64);
                      int v194 = *(char *)(v166 + 23);
                      std::string::size_type v195 = *(const void **)v166;
                      if (v194 >= 0) {
                        size_t v196 = *(unsigned __int8 *)(v166 + 23);
                      }
                      else {
                        size_t v196 = *(void *)(v166 + 8);
                      }
                      if (v194 >= 0) {
                        long long v197 = (const void *)v166;
                      }
                      else {
                        long long v197 = *(const void **)v166;
                      }
                      if (v192 >= 0) {
                        size_t v198 = *(unsigned __int8 *)(v166 + 87);
                      }
                      else {
                        size_t v198 = *(void *)(v166 + 72);
                      }
                      if (v192 >= 0) {
                        uint64_t v199 = (const void *)(v166 + 64);
                      }
                      else {
                        uint64_t v199 = *(const void **)(v166 + 64);
                      }
                      if (v198 >= v196) {
                        size_t v200 = v196;
                      }
                      else {
                        size_t v200 = v198;
                      }
                      int v201 = memcmp(v197, v199, v200);
                      BOOL v202 = v196 < v198;
                      if (v201) {
                        BOOL v202 = v201 < 0;
                      }
                      BOOL v203 = !v202;
                      if (v202) {
                        long long v204 = v193;
                      }
                      else {
                        long long v204 = v195;
                      }
                      unint64_t v11 = v296;
                      a2 = (void **)v303;
                      a1 = v304;
                      if (!v203) {
                        v166 += 64;
                      }
                      int64_t v162 = v301;
                      if (v203) {
                        uint64_t v165 = v191;
                      }
                    }
                    else
                    {
                      long long v204 = *(const void **)v166;
                      uint64_t v165 = v191;
                    }
                    int v205 = *(char *)(v166 + 23);
                    if (v205 >= 0) {
                      size_t v206 = *(unsigned __int8 *)(v166 + 23);
                    }
                    else {
                      size_t v206 = *(void *)(v166 + 8);
                    }
                    if (v205 >= 0) {
                      unsigned __int8 v207 = (const void *)v166;
                    }
                    else {
                      unsigned __int8 v207 = v204;
                    }
                    if (SHIBYTE(v311) >= 0) {
                      std::string v208 = (void *)HIBYTE(v311);
                    }
                    else {
                      std::string v208 = __p[1];
                    }
                    if (SHIBYTE(v311) >= 0) {
                      std::string v209 = __p;
                    }
                    else {
                      std::string v209 = (void **)__p[0];
                    }
                    if ((unint64_t)v208 >= v206) {
                      size_t v210 = v206;
                    }
                    else {
                      size_t v210 = (size_t)v208;
                    }
                    int v211 = memcmp(v207, v209, v210);
                    BOOL v212 = v206 < (unint64_t)v208;
                    if (v211) {
                      BOOL v212 = v211 < 0;
                    }
                    unint64_t v177 = v189;
                  }
                  while (!v212);
                  if (*(char *)(v189 + 23) < 0) {
                    operator delete(*(void **)v189);
                  }
                  long long v213 = *(_OWORD *)__p;
                  *(void *)(v189 + 16) = v311;
                  *(_OWORD *)unint64_t v189 = v213;
                  HIBYTE(v311) = 0;
                  LOBYTE(__p[0]) = 0;
                  *(void *)(v189 + 24) = *(void *)v312;
                  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v189 + 32));
                  *(_OWORD *)(v189 + 32) = *(_OWORD *)&v312[8];
                  *(void *)(v189 + 48) = *(void *)&v312[24];
                  memset(&v312[8], 0, 24);
                  *(_WORD *)(v189 + 56) = v313;
                  v305[0] = &v312[8];
                  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
                  if (SHIBYTE(v311) < 0) {
                    operator delete(__p[0]);
                  }
                  int64_t v164 = v299;
                }
              }
              int64_t v163 = v164 - 1;
            }
            while (v164);
            uint64_t v214 = v293 >> 6;
            v302 = (void *)(a1 + 32);
            do
            {
              uint64_t v215 = 0;
              long long v216 = *(_OWORD *)a1;
              std::string v217 = a2;
              int v306 = *(void **)(a1 + 16);
              *(_OWORD *)size_t v305 = v216;
              *(void *)(a1 + 8) = 0;
              *(void *)(a1 + 16) = 0;
              *(void *)a1 = 0;
              *(_OWORD *)BOOL v307 = *(_OWORD *)(a1 + 24);
              *(_OWORD *)&v307[16] = *(_OWORD *)(a1 + 40);
              void *v302 = 0;
              v302[1] = 0;
              v302[2] = 0;
              unint64_t v218 = a1;
              __int16 v308 = *(_WORD *)(a1 + 56);
              do
              {
                uint64_t v219 = v218 + (v215 << 6) + 64;
                uint64_t v220 = 2 * v215;
                uint64_t v215 = (2 * v215) | 1;
                uint64_t v221 = v220 + 2;
                if (v220 + 2 < v214)
                {
                  int v222 = *(char *)(v219 + 87);
                  int v223 = *(char *)(v219 + 23);
                  if (v223 >= 0) {
                    size_t v224 = *(unsigned __int8 *)(v219 + 23);
                  }
                  else {
                    size_t v224 = *(void *)(v219 + 8);
                  }
                  if (v223 >= 0) {
                    v225 = (const void *)v219;
                  }
                  else {
                    v225 = *(const void **)v219;
                  }
                  if (v222 >= 0) {
                    size_t v226 = *(unsigned __int8 *)(v219 + 87);
                  }
                  else {
                    size_t v226 = *(void *)(v219 + 72);
                  }
                  if (v222 >= 0) {
                    v227 = (const void *)(v219 + 64);
                  }
                  else {
                    v227 = *(const void **)(v219 + 64);
                  }
                  if (v226 >= v224) {
                    size_t v228 = v224;
                  }
                  else {
                    size_t v228 = v226;
                  }
                  int v229 = memcmp(v225, v227, v228);
                  BOOL v230 = v224 < v226;
                  if (v229) {
                    BOOL v230 = v229 < 0;
                  }
                  if (v230)
                  {
                    v219 += 64;
                    uint64_t v215 = v221;
                  }
                }
                if (*(char *)(v218 + 23) < 0) {
                  operator delete(*(void **)v218);
                }
                long long v231 = *(_OWORD *)v219;
                *(void *)(v218 + 16) = *(void *)(v219 + 16);
                *(_OWORD *)unint64_t v218 = v231;
                *(unsigned char *)(v219 + 23) = 0;
                *(unsigned char *)uint64_t v219 = 0;
                *(void *)(v218 + 24) = *(void *)(v219 + 24);
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v218 + 32));
                *(_OWORD *)(v218 + 32) = *(_OWORD *)(v219 + 32);
                *(void *)(v218 + 48) = *(void *)(v219 + 48);
                *(void *)(v219 + 32) = 0;
                *(void *)(v219 + 40) = 0;
                *(void *)(v219 + 48) = 0;
                *(_WORD *)(v218 + 56) = *(_WORD *)(v219 + 56);
                unint64_t v218 = v219;
              }
              while (v215 <= (uint64_t)((unint64_t)(v214 - 2) >> 1));
              a2 = v217 - 8;
              int v232 = *(char *)(v219 + 23);
              if ((void **)v219 == v217 - 8)
              {
                if (v232 < 0) {
                  operator delete(*(void **)v219);
                }
                long long v261 = *(_OWORD *)v305;
                *(void *)(v219 + 16) = v306;
                *(_OWORD *)uint64_t v219 = v261;
                HIBYTE(v306) = 0;
                LOBYTE(v305[0]) = 0;
                *(void *)(v219 + 24) = *(void *)v307;
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v219 + 32));
                *(_OWORD *)(v219 + 32) = *(_OWORD *)&v307[8];
                *(void *)(v219 + 48) = *(void *)&v307[24];
                memset(&v307[8], 0, 24);
                *(_WORD *)(v219 + 56) = v308;
              }
              else
              {
                if (v232 < 0) {
                  operator delete(*(void **)v219);
                }
                long long v233 = *(_OWORD *)a2;
                *(void *)(v219 + 16) = *(v217 - 6);
                *(_OWORD *)uint64_t v219 = v233;
                *((unsigned char *)v217 - 41) = 0;
                *((unsigned char *)v217 - 64) = 0;
                *(void *)(v219 + 24) = *(v217 - 5);
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v219 + 32));
                int64_t v234 = v217 - 4;
                *(_OWORD *)(v219 + 32) = *((_OWORD *)v217 - 2);
                *(void *)(v219 + 48) = *(v217 - 2);
                *int64_t v234 = 0;
                v234[1] = 0;
                v234[2] = 0;
                *(_WORD *)(v219 + 56) = *((_WORD *)v217 - 4);
                if (*((char *)v217 - 41) < 0) {
                  operator delete(*a2);
                }
                long long v235 = *(_OWORD *)v305;
                *(v217 - 6) = v306;
                *(_OWORD *)a2 = v235;
                HIBYTE(v306) = 0;
                LOBYTE(v305[0]) = 0;
                *(v217 - 5) = *(void **)v307;
                std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v217 - 4);
                *((_OWORD *)v217 - 2) = *(_OWORD *)&v307[8];
                *(v217 - 2) = *(void **)&v307[24];
                memset(&v307[8], 0, 24);
                *((_WORD *)v217 - 4) = v308;
                uint64_t v236 = v219 + 64 - v304;
                if (v236 >= 65)
                {
                  unint64_t v237 = (((unint64_t)v236 >> 6) - 2) >> 1;
                  unint64_t v238 = v304 + (v237 << 6);
                  int v239 = *(char *)(v219 + 23);
                  int v240 = *(char *)(v238 + 23);
                  if (v240 >= 0) {
                    size_t v241 = *(unsigned __int8 *)(v238 + 23);
                  }
                  else {
                    size_t v241 = *(void *)(v238 + 8);
                  }
                  if (v240 >= 0) {
                    uint64_t v242 = (const void *)(v304 + (v237 << 6));
                  }
                  else {
                    uint64_t v242 = *(const void **)v238;
                  }
                  if (v239 >= 0) {
                    size_t v243 = *(unsigned __int8 *)(v219 + 23);
                  }
                  else {
                    size_t v243 = *(void *)(v219 + 8);
                  }
                  if (v239 >= 0) {
                    int v244 = (const void *)v219;
                  }
                  else {
                    int v244 = *(const void **)v219;
                  }
                  if (v243 >= v241) {
                    size_t v245 = v241;
                  }
                  else {
                    size_t v245 = v243;
                  }
                  int v246 = memcmp(v242, v244, v245);
                  BOOL v247 = v241 < v243;
                  if (v246) {
                    BOOL v247 = v246 < 0;
                  }
                  if (v247)
                  {
                    size_t v248 = a2;
                    long long v249 = *(_OWORD *)v219;
                    v311 = *(const void **)(v219 + 16);
                    *(_OWORD *)std::string __p = v249;
                    *(void *)(v219 + 8) = 0;
                    *(void *)(v219 + 16) = 0;
                    *(void *)uint64_t v219 = 0;
                    *(_OWORD *)v312 = *(_OWORD *)(v219 + 24);
                    *(_OWORD *)&v312[16] = *(_OWORD *)(v219 + 40);
                    *(void *)(v219 + 40) = 0;
                    *(void *)(v219 + 48) = 0;
                    *(void *)(v219 + 32) = 0;
                    __int16 v313 = *(_WORD *)(v219 + 56);
                    if (SHIBYTE(v311) >= 0) {
                      size_t v250 = (void *)HIBYTE(v311);
                    }
                    else {
                      size_t v250 = __p[1];
                    }
                    if (SHIBYTE(v311) >= 0) {
                      int v251 = __p;
                    }
                    else {
                      int v251 = (void **)__p[0];
                    }
                    do
                    {
                      uint64_t v252 = v238;
                      if (*(char *)(v219 + 23) < 0) {
                        operator delete(*(void **)v219);
                      }
                      long long v253 = *(_OWORD *)v238;
                      *(void *)(v219 + 16) = *(void *)(v238 + 16);
                      *(_OWORD *)uint64_t v219 = v253;
                      *(unsigned char *)(v238 + 23) = 0;
                      *(unsigned char *)unint64_t v238 = 0;
                      *(void *)(v219 + 24) = *(void *)(v238 + 24);
                      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v219 + 32));
                      *(_OWORD *)(v219 + 32) = *(_OWORD *)(v238 + 32);
                      *(void *)(v219 + 48) = *(void *)(v238 + 48);
                      *(void *)(v238 + 32) = 0;
                      *(void *)(v238 + 40) = 0;
                      *(void *)(v238 + 48) = 0;
                      *(_WORD *)(v219 + 56) = *(_WORD *)(v238 + 56);
                      if (!v237) {
                        break;
                      }
                      unint64_t v237 = (v237 - 1) >> 1;
                      unint64_t v238 = v304 + (v237 << 6);
                      int v254 = *(char *)(v238 + 23);
                      if (v254 >= 0) {
                        size_t v255 = *(unsigned __int8 *)(v238 + 23);
                      }
                      else {
                        size_t v255 = *(void *)(v238 + 8);
                      }
                      if (v254 >= 0) {
                        v256 = (const void *)(v304 + (v237 << 6));
                      }
                      else {
                        v256 = *(const void **)v238;
                      }
                      if ((unint64_t)v250 >= v255) {
                        size_t v257 = v255;
                      }
                      else {
                        size_t v257 = (size_t)v250;
                      }
                      int v258 = memcmp(v256, v251, v257);
                      BOOL v259 = v255 < (unint64_t)v250;
                      if (v258) {
                        BOOL v259 = v258 < 0;
                      }
                      uint64_t v219 = v252;
                    }
                    while (v259);
                    if (*(char *)(v252 + 23) < 0) {
                      operator delete(*(void **)v252);
                    }
                    long long v260 = *(_OWORD *)__p;
                    *(void *)(v252 + 16) = v311;
                    *(_OWORD *)uint64_t v252 = v260;
                    HIBYTE(v311) = 0;
                    LOBYTE(__p[0]) = 0;
                    *(void *)(v252 + 24) = *(void *)v312;
                    std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v252 + 32));
                    *(_OWORD *)(v252 + 32) = *(_OWORD *)&v312[8];
                    *(void *)(v252 + 48) = *(void *)&v312[24];
                    memset(&v312[8], 0, 24);
                    *(_WORD *)(v252 + 56) = v313;
                    v309 = (void **)&v312[8];
                    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v309);
                    a2 = v248;
                    if (SHIBYTE(v311) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                }
              }
              __p[0] = &v307[8];
              std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
              if (SHIBYTE(v306) < 0) {
                operator delete(v305[0]);
              }
              BOOL v262 = v214-- <= 2;
              a1 = v304;
            }
            while (!v262);
          }
          return;
        }
        unint64_t v12 = v11 >> 1;
        uint64_t v13 = (const void **)(a1 + (v11 >> 1 << 6));
        if ((unint64_t)v10 > 0x2000)
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + (v11 >> 1 << 6)), (const void **)v9);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(a1 + 64), v13 - 8, v294);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(a1 + 128), (const void **)(a1 + 64 + (v12 << 6)), v292);
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(v13 - 8, v13, (const void **)(a1 + 64 + (v12 << 6)));
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, (long long *)v13);
        }
        else
        {
          std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)(a1 + (v11 >> 1 << 6)), (const void **)a1, (const void **)v9);
        }
        --a3;
        if (a4) {
          break;
        }
        int v14 = *(char *)(a1 + 23);
        int v15 = *(char *)(a1 - 41);
        if (v15 >= 0) {
          size_t v16 = *(unsigned __int8 *)(a1 - 41);
        }
        else {
          size_t v16 = *(void *)(a1 - 56);
        }
        if (v15 >= 0) {
          uint64_t v17 = (const void *)(a1 - 64);
        }
        else {
          uint64_t v17 = *(const void **)(a1 - 64);
        }
        if (v14 >= 0) {
          size_t v18 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v18 = *(void *)(a1 + 8);
        }
        if (v14 >= 0) {
          uint64_t v19 = (const void *)a1;
        }
        else {
          uint64_t v19 = *(const void **)a1;
        }
        if (v18 >= v16) {
          size_t v20 = v16;
        }
        else {
          size_t v20 = v18;
        }
        int v21 = memcmp(v17, v19, v20);
        BOOL v22 = v16 < v18;
        if (v21) {
          BOOL v22 = v21 < 0;
        }
        if (v22) {
          break;
        }
        long long v69 = *(_OWORD *)a1;
        v311 = *(const void **)(a1 + 16);
        *(_OWORD *)std::string __p = v69;
        *(void *)(a1 + 8) = 0;
        *(void *)(a1 + 16) = 0;
        *(void *)a1 = 0;
        *(_OWORD *)v312 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)&v312[16] = *(_OWORD *)(a1 + 40);
        uint64_t v70 = a2;
        *(void *)(a1 + 32) = 0;
        std::string::size_type v71 = (void **)(a1 + 32);
        *(void *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = 0;
        __int16 v313 = *(_WORD *)(a1 + 56);
        size_t v72 = *((unsigned __int8 *)v70 - 41);
        uint64_t v73 = (void **)*(v70 - 8);
        size_t v74 = (size_t)*(v70 - 7);
        if (SHIBYTE(v311) >= 0) {
          uint64_t v75 = (void *)HIBYTE(v311);
        }
        else {
          uint64_t v75 = __p[1];
        }
        if (SHIBYTE(v311) >= 0) {
          std::string::size_type v76 = __p;
        }
        else {
          std::string::size_type v76 = (void **)__p[0];
        }
        if ((v72 & 0x80u) == 0) {
          size_t v77 = v72;
        }
        else {
          size_t v77 = v74;
        }
        if ((v72 & 0x80u) == 0) {
          char v78 = v9;
        }
        else {
          char v78 = v73;
        }
        if (v77 >= (unint64_t)v75) {
          size_t v79 = (size_t)v75;
        }
        else {
          size_t v79 = v77;
        }
        int v80 = memcmp(v76, v78, v79);
        BOOL v81 = (unint64_t)v75 < v77;
        if (v80) {
          BOOL v81 = v80 < 0;
        }
        if (v81)
        {
          v82 = (const void **)(a1 + 64);
          do
          {
            int v83 = *((char *)v82 + 23);
            if (v83 >= 0) {
              size_t v84 = *((unsigned __int8 *)v82 + 23);
            }
            else {
              size_t v84 = (size_t)v82[1];
            }
            if (v83 >= 0) {
              long long v85 = v82;
            }
            else {
              long long v85 = *v82;
            }
            if (v84 >= (unint64_t)v75) {
              size_t v86 = (size_t)v75;
            }
            else {
              size_t v86 = v84;
            }
            int v87 = memcmp(v76, v85, v86);
            BOOL v88 = (unint64_t)v75 < v84;
            if (v87) {
              BOOL v88 = v87 < 0;
            }
            v82 += 8;
          }
          while (!v88);
          a1 = (unint64_t)(v82 - 8);
        }
        else
        {
          char v89 = (const void **)(a1 + 64);
          do
          {
            a1 = (unint64_t)v89;
            if (v89 >= v303) {
              break;
            }
            int v90 = *((char *)v89 + 23);
            if (v90 >= 0) {
              size_t v91 = *((unsigned __int8 *)v89 + 23);
            }
            else {
              size_t v91 = (size_t)v89[1];
            }
            if (v90 >= 0) {
              BOOL v92 = v89;
            }
            else {
              BOOL v92 = *v89;
            }
            if (v91 >= (unint64_t)v75) {
              size_t v93 = (size_t)v75;
            }
            else {
              size_t v93 = v91;
            }
            int v94 = memcmp(v76, v92, v93);
            BOOL v95 = v94 < 0;
            if (!v94) {
              BOOL v95 = (unint64_t)v75 < v91;
            }
            char v89 = (const void **)(a1 + 64);
          }
          while (!v95);
        }
        char v96 = (long long *)v303;
        if (a1 < (unint64_t)v303)
        {
          size_t v97 = (const void **)v9;
          do
          {
            int v98 = *((char *)v97 + 23);
            if (v98 >= 0) {
              size_t v99 = *((unsigned __int8 *)v97 + 23);
            }
            else {
              size_t v99 = (size_t)v97[1];
            }
            if (v98 >= 0) {
              size_t v100 = v97;
            }
            else {
              size_t v100 = *v97;
            }
            if (v99 >= (unint64_t)v75) {
              size_t v101 = (size_t)v75;
            }
            else {
              size_t v101 = v99;
            }
            int v102 = memcmp(v76, v100, v101);
            BOOL v103 = (unint64_t)v75 < v99;
            if (v102) {
              BOOL v103 = v102 < 0;
            }
            v97 -= 8;
          }
          while (v103);
          goto LABEL_178;
        }
        while (a1 < (unint64_t)v96)
        {
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, v96);
          std::string::size_type v104 = (const void **)(a1 + 64);
          do
          {
            int v105 = *((char *)v104 + 23);
            if (v105 >= 0) {
              size_t v106 = *((unsigned __int8 *)v104 + 23);
            }
            else {
              size_t v106 = (size_t)v104[1];
            }
            if (v105 >= 0) {
              long long v107 = v104;
            }
            else {
              long long v107 = *v104;
            }
            if (v106 >= (unint64_t)v75) {
              size_t v108 = (size_t)v75;
            }
            else {
              size_t v108 = v106;
            }
            int v109 = memcmp(v76, v107, v108);
            BOOL v110 = (unint64_t)v75 < v106;
            if (v109) {
              BOOL v110 = v109 < 0;
            }
            v104 += 8;
          }
          while (!v110);
          a1 = (unint64_t)(v104 - 8);
          size_t v97 = (const void **)(v96 - 4);
          do
          {
            int v111 = *((char *)v97 + 23);
            if (v111 >= 0) {
              size_t v112 = *((unsigned __int8 *)v97 + 23);
            }
            else {
              size_t v112 = (size_t)v97[1];
            }
            if (v111 >= 0) {
              long long v113 = v97;
            }
            else {
              long long v113 = *v97;
            }
            if (v112 >= (unint64_t)v75) {
              size_t v114 = (size_t)v75;
            }
            else {
              size_t v114 = v112;
            }
            int v115 = memcmp(v76, v113, v114);
            BOOL v116 = (unint64_t)v75 < v112;
            if (v115) {
              BOOL v116 = v115 < 0;
            }
            v97 -= 8;
          }
          while (v116);
LABEL_178:
          char v96 = (long long *)(v97 + 8);
        }
        std::string::size_type v117 = (void **)(a1 - 64);
        if (a1 - 64 != v304)
        {
          if (*(char *)(v304 + 23) < 0) {
            operator delete(*(void **)v304);
          }
          long long v118 = *(_OWORD *)v117;
          *(void *)(v304 + 16) = *(void *)(a1 - 48);
          *(_OWORD *)uint64_t v304 = v118;
          *(unsigned char *)(a1 - 41) = 0;
          *(unsigned char *)(a1 - 64) = 0;
          *(void *)(v304 + 24) = *(void *)(a1 - 40);
          std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v71);
          *(_OWORD *)(v304 + 32) = *(_OWORD *)(a1 - 32);
          *(void *)(v304 + 48) = *(void *)(a1 - 16);
          *(void *)(a1 - 32) = 0;
          *(void *)(a1 - 24) = 0;
          *(void *)(a1 - 16) = 0;
          *(_WORD *)(v304 + 56) = *(_WORD *)(a1 - 8);
        }
        if (*(char *)(a1 - 41) < 0) {
          operator delete(*v117);
        }
        long long v119 = *(_OWORD *)__p;
        *(void *)(a1 - 48) = v311;
        *(_OWORD *)std::string::size_type v117 = v119;
        HIBYTE(v311) = 0;
        LOBYTE(__p[0]) = 0;
        *(void *)(a1 - 40) = *(void *)v312;
        std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(a1 - 32));
        *(_OWORD *)(a1 - 32) = *(_OWORD *)&v312[8];
        *(void *)(a1 - 16) = *(void *)&v312[24];
        memset(&v312[8], 0, 24);
        *(_WORD *)(a1 - 8) = v313;
        v305[0] = &v312[8];
        std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
        a2 = (void **)v303;
        if (SHIBYTE(v311) < 0) {
          operator delete(__p[0]);
        }
LABEL_117:
        a4 = 0;
      }
      uint64_t v300 = a3;
      uint64_t v23 = 0;
      long long v24 = *(_OWORD *)a1;
      v311 = *(const void **)(a1 + 16);
      *(_OWORD *)std::string __p = v24;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
      *(void *)a1 = 0;
      *(_OWORD *)v312 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)&v312[16] = *(_OWORD *)(a1 + 40);
      *(void *)(a1 + 32) = 0;
      uint64_t v25 = (void **)(a1 + 32);
      *(void *)(a1 + 40) = 0;
      *(void *)(a1 + 48) = 0;
      __int16 v313 = *(_WORD *)(a1 + 56);
      if (SHIBYTE(v311) >= 0) {
        int64x2_t v26 = (void *)HIBYTE(v311);
      }
      else {
        int64x2_t v26 = __p[1];
      }
      if (SHIBYTE(v311) >= 0) {
        uint64_t v27 = __p;
      }
      else {
        uint64_t v27 = (void **)__p[0];
      }
      do
      {
        int v28 = *(char *)(a1 + v23 + 87);
        if (v28 >= 0) {
          size_t v29 = *(unsigned __int8 *)(a1 + v23 + 87);
        }
        else {
          size_t v29 = *(void *)(a1 + v23 + 72);
        }
        if (v28 >= 0) {
          uint64_t v30 = (const void *)(a1 + v23 + 64);
        }
        else {
          uint64_t v30 = *(const void **)(a1 + v23 + 64);
        }
        if ((unint64_t)v26 >= v29) {
          size_t v31 = v29;
        }
        else {
          size_t v31 = (size_t)v26;
        }
        int v32 = memcmp(v30, v27, v31);
        BOOL v33 = v29 < (unint64_t)v26;
        if (v32) {
          BOOL v33 = v32 < 0;
        }
        v23 += 64;
      }
      while (v33);
      unint64_t v34 = a1 + v23;
      uint64_t v35 = v9;
      if (v23 == 64)
      {
        BOOL v43 = (const void **)v9;
        while (1)
        {
          char v42 = (long long *)(v43 + 8);
          if (v34 >= (unint64_t)(v43 + 8)) {
            break;
          }
          int v44 = *((char *)v43 + 23);
          if (v44 >= 0) {
            size_t v45 = *((unsigned __int8 *)v43 + 23);
          }
          else {
            size_t v45 = (size_t)v43[1];
          }
          if (v44 >= 0) {
            std::string::size_type v46 = v43;
          }
          else {
            std::string::size_type v46 = *v43;
          }
          if ((unint64_t)v26 >= v45) {
            size_t v47 = v45;
          }
          else {
            size_t v47 = (size_t)v26;
          }
          int v48 = memcmp(v46, v27, v47);
          BOOL v49 = v45 < (unint64_t)v26;
          if (v48) {
            BOOL v49 = v48 < 0;
          }
          v43 -= 8;
          if (v49)
          {
            char v42 = (long long *)(v43 + 8);
            break;
          }
        }
      }
      else
      {
        do
        {
          int v36 = *((char *)v9 + 23);
          if (v36 >= 0) {
            size_t v37 = *((unsigned __int8 *)v9 + 23);
          }
          else {
            size_t v37 = (size_t)v9[1];
          }
          if (v36 >= 0) {
            uint64_t v38 = v9;
          }
          else {
            uint64_t v38 = *v9;
          }
          if ((unint64_t)v26 >= v37) {
            size_t v39 = v37;
          }
          else {
            size_t v39 = (size_t)v26;
          }
          int v40 = memcmp(v38, v27, v39);
          BOOL v41 = v37 < (unint64_t)v26;
          if (v40) {
            BOOL v41 = v40 < 0;
          }
          v9 -= 8;
        }
        while (!v41);
        char v42 = (long long *)(v9 + 8);
      }
      a1 = v34;
      if (v34 < (unint64_t)v42)
      {
        long long v50 = v42;
        do
        {
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, v50);
          char v51 = (const void **)(a1 + 64);
          do
          {
            int v52 = *((char *)v51 + 23);
            if (v52 >= 0) {
              size_t v53 = *((unsigned __int8 *)v51 + 23);
            }
            else {
              size_t v53 = (size_t)v51[1];
            }
            if (v52 >= 0) {
              long long v54 = v51;
            }
            else {
              long long v54 = *v51;
            }
            if ((unint64_t)v26 >= v53) {
              size_t v55 = v53;
            }
            else {
              size_t v55 = (size_t)v26;
            }
            int v56 = memcmp(v54, v27, v55);
            BOOL v57 = v53 < (unint64_t)v26;
            if (v56) {
              BOOL v57 = v56 < 0;
            }
            v51 += 8;
          }
          while (v57);
          a1 = (unint64_t)(v51 - 8);
          std::string::size_type v58 = (const void **)(v50 - 4);
          do
          {
            int v59 = *((char *)v58 + 23);
            if (v59 >= 0) {
              size_t v60 = *((unsigned __int8 *)v58 + 23);
            }
            else {
              size_t v60 = (size_t)v58[1];
            }
            if (v59 >= 0) {
              size_t v61 = v58;
            }
            else {
              size_t v61 = *v58;
            }
            if ((unint64_t)v26 >= v60) {
              size_t v62 = v60;
            }
            else {
              size_t v62 = (size_t)v26;
            }
            int v63 = memcmp(v61, v27, v62);
            BOOL v64 = v60 < (unint64_t)v26;
            if (v63) {
              BOOL v64 = v63 < 0;
            }
            v58 -= 8;
          }
          while (!v64);
          long long v50 = (long long *)(v58 + 8);
        }
        while (a1 < (unint64_t)(v58 + 8));
      }
      BOOL v65 = (void **)(a1 - 64);
      a3 = v300;
      if (a1 - 64 != v304)
      {
        if (*(char *)(v304 + 23) < 0) {
          operator delete(*(void **)v304);
        }
        long long v66 = *(_OWORD *)v65;
        *(void *)(v304 + 16) = *(void *)(a1 - 48);
        *(_OWORD *)uint64_t v304 = v66;
        *(unsigned char *)(a1 - 41) = 0;
        *(unsigned char *)(a1 - 64) = 0;
        *(void *)(v304 + 24) = *(void *)(a1 - 40);
        std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v25);
        *(_OWORD *)(v304 + 32) = *(_OWORD *)(a1 - 32);
        *(void *)(v304 + 48) = *(void *)(a1 - 16);
        *(void *)(a1 - 32) = 0;
        *(void *)(a1 - 24) = 0;
        *(void *)(a1 - 16) = 0;
        *(_WORD *)(v304 + 56) = *(_WORD *)(a1 - 8);
      }
      if (*(char *)(a1 - 41) < 0) {
        operator delete(*v65);
      }
      long long v67 = *(_OWORD *)__p;
      *(void *)(a1 - 48) = v311;
      *(_OWORD *)BOOL v65 = v67;
      HIBYTE(v311) = 0;
      LOBYTE(__p[0]) = 0;
      *(void *)(a1 - 40) = *(void *)v312;
      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(a1 - 32));
      *(_OWORD *)(a1 - 32) = *(_OWORD *)&v312[8];
      *(void *)(a1 - 16) = *(void *)&v312[24];
      memset(&v312[8], 0, 24);
      *(_WORD *)(a1 - 8) = v313;
      v305[0] = &v312[8];
      std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)v305);
      if (SHIBYTE(v311) < 0) {
        operator delete(__p[0]);
      }
      BOOL v4 = v34 >= (unint64_t)v42;
      a2 = (void **)v303;
      uint64_t v9 = v35;
      if (!v4)
      {
LABEL_116:
        std::__introsort<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,false>(v304, a1 - 64, v300, a4 & 1);
        goto LABEL_117;
      }
      BOOL v68 = std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(v304, (const void **)(a1 - 64));
      if (std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, v303))
      {
        break;
      }
      if (!v68) {
        goto LABEL_116;
      }
    }
    a2 = (void **)(a1 - 64);
    a1 = v304;
    if (!v68) {
      continue;
    }
    break;
  }
}

void std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5)
{
  std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, a2, a3, (const void **)a4);
  int v10 = *(char *)(a4 + 23);
  int v11 = *((char *)a5 + 23);
  if (v11 >= 0) {
    size_t v12 = *((unsigned __int8 *)a5 + 23);
  }
  else {
    size_t v12 = (size_t)a5[1];
  }
  if (v11 >= 0) {
    uint64_t v13 = a5;
  }
  else {
    uint64_t v13 = *a5;
  }
  if (v10 >= 0) {
    size_t v14 = *(unsigned __int8 *)(a4 + 23);
  }
  else {
    size_t v14 = *(void *)(a4 + 8);
  }
  if (v10 >= 0) {
    int v15 = (const void *)a4;
  }
  else {
    int v15 = *(const void **)a4;
  }
  if (v14 >= v12) {
    size_t v16 = v12;
  }
  else {
    size_t v16 = v14;
  }
  int v17 = memcmp(v13, v15, v16);
  BOOL v18 = v12 < v14;
  if (v17) {
    BOOL v18 = v17 < 0;
  }
  if (v18)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a4, (long long *)a5);
    int v19 = *(char *)(a3 + 23);
    int v20 = *(char *)(a4 + 23);
    if (v20 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a4 + 23);
    }
    else {
      size_t v21 = *(void *)(a4 + 8);
    }
    if (v20 >= 0) {
      BOOL v22 = (const void *)a4;
    }
    else {
      BOOL v22 = *(const void **)a4;
    }
    if (v19 >= 0) {
      size_t v23 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v23 = *(void *)(a3 + 8);
    }
    if (v19 >= 0) {
      long long v24 = (const void *)a3;
    }
    else {
      long long v24 = *(const void **)a3;
    }
    if (v23 >= v21) {
      size_t v25 = v21;
    }
    else {
      size_t v25 = v23;
    }
    int v26 = memcmp(v22, v24, v25);
    BOOL v27 = v21 < v23;
    if (v26) {
      BOOL v27 = v26 < 0;
    }
    if (v27)
    {
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a3, (long long *)a4);
      int v28 = *(char *)(a2 + 23);
      int v29 = *(char *)(a3 + 23);
      if (v29 >= 0) {
        size_t v30 = *(unsigned __int8 *)(a3 + 23);
      }
      else {
        size_t v30 = *(void *)(a3 + 8);
      }
      if (v29 >= 0) {
        size_t v31 = (const void *)a3;
      }
      else {
        size_t v31 = *(const void **)a3;
      }
      if (v28 >= 0) {
        size_t v32 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v32 = *(void *)(a2 + 8);
      }
      if (v28 >= 0) {
        BOOL v33 = (const void *)a2;
      }
      else {
        BOOL v33 = *(const void **)a2;
      }
      if (v32 >= v30) {
        size_t v34 = v30;
      }
      else {
        size_t v34 = v32;
      }
      int v35 = memcmp(v31, v33, v34);
      BOOL v36 = v30 < v32;
      if (v35) {
        BOOL v36 = v35 < 0;
      }
      if (v36)
      {
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a2, (long long *)a3);
        int v37 = *(char *)(a1 + 23);
        int v38 = *(char *)(a2 + 23);
        if (v38 >= 0) {
          size_t v39 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          size_t v39 = *(void *)(a2 + 8);
        }
        if (v38 >= 0) {
          int v40 = (const void *)a2;
        }
        else {
          int v40 = *(const void **)a2;
        }
        if (v37 >= 0) {
          size_t v41 = *(unsigned __int8 *)(a1 + 23);
        }
        else {
          size_t v41 = *(void *)(a1 + 8);
        }
        if (v37 >= 0) {
          char v42 = (const void *)a1;
        }
        else {
          char v42 = *(const void **)a1;
        }
        if (v41 >= v39) {
          size_t v43 = v39;
        }
        else {
          size_t v43 = v41;
        }
        int v44 = memcmp(v40, v42, v43);
        BOOL v45 = v39 < v41;
        if (v44) {
          BOOL v45 = v44 < 0;
        }
        if (v45)
        {
          std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, (long long *)a2);
        }
      }
    }
  }
}

void std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(const void **a1, const void **a2, const void **a3)
{
  int v6 = *((char *)a1 + 23);
  int v7 = *((char *)a2 + 23);
  if (v7 >= 0) {
    size_t v8 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v8 = (size_t)a2[1];
  }
  if (v7 >= 0) {
    uint64_t v9 = a2;
  }
  else {
    uint64_t v9 = *a2;
  }
  if (v6 >= 0) {
    size_t v10 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v10 = (size_t)a1[1];
  }
  if (v6 >= 0) {
    int v11 = a1;
  }
  else {
    int v11 = *a1;
  }
  if (v10 >= v8) {
    size_t v12 = v8;
  }
  else {
    size_t v12 = v10;
  }
  int v13 = memcmp(v9, v11, v12);
  if (v13) {
    BOOL v14 = v13 < 0;
  }
  else {
    BOOL v14 = v8 < v10;
  }
  int v15 = *((char *)a3 + 23);
  if (v15 >= 0) {
    size_t v16 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v16 = (size_t)a3[1];
  }
  if (v15 >= 0) {
    int v17 = a3;
  }
  else {
    int v17 = *a3;
  }
  if (v8 >= v16) {
    size_t v18 = v16;
  }
  else {
    size_t v18 = v8;
  }
  int v19 = memcmp(v17, v9, v18);
  BOOL v20 = v16 < v8;
  if (v19) {
    BOOL v20 = v19 < 0;
  }
  if (v14)
  {
    size_t v21 = (long long *)a1;
    if (v20)
    {
LABEL_51:
      size_t v31 = (long long *)a3;
LABEL_72:
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>(v21, v31);
      return;
    }
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, (long long *)a2);
    int v22 = *((char *)a2 + 23);
    int v23 = *((char *)a3 + 23);
    if (v23 >= 0) {
      size_t v24 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v24 = (size_t)a3[1];
    }
    if (v23 >= 0) {
      size_t v25 = a3;
    }
    else {
      size_t v25 = *a3;
    }
    if (v22 >= 0) {
      size_t v26 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v26 = (size_t)a2[1];
    }
    if (v22 >= 0) {
      BOOL v27 = a2;
    }
    else {
      BOOL v27 = *a2;
    }
    if (v26 >= v24) {
      size_t v28 = v24;
    }
    else {
      size_t v28 = v26;
    }
    int v29 = memcmp(v25, v27, v28);
    BOOL v30 = v24 < v26;
    if (v29) {
      BOOL v30 = v29 < 0;
    }
    if (v30)
    {
      size_t v21 = (long long *)a2;
      goto LABEL_51;
    }
  }
  else if (v20)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a2, (long long *)a3);
    int v32 = *((char *)a1 + 23);
    int v33 = *((char *)a2 + 23);
    if (v33 >= 0) {
      size_t v34 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      size_t v34 = (size_t)a2[1];
    }
    if (v33 >= 0) {
      int v35 = a2;
    }
    else {
      int v35 = *a2;
    }
    if (v32 >= 0) {
      size_t v36 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v36 = (size_t)a1[1];
    }
    if (v32 >= 0) {
      int v37 = a1;
    }
    else {
      int v37 = *a1;
    }
    if (v36 >= v34) {
      size_t v38 = v34;
    }
    else {
      size_t v38 = v36;
    }
    int v39 = memcmp(v35, v37, v38);
    BOOL v40 = v34 < v36;
    if (v39) {
      BOOL v40 = v39 < 0;
    }
    if (v40)
    {
      size_t v21 = (long long *)a1;
      size_t v31 = (long long *)a2;
      goto LABEL_72;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(uint64_t a1, const void **a2)
{
  uint64_t v4 = ((uint64_t)a2 - a1) >> 6;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = (long long *)(a2 - 8);
      int v7 = *(char *)(a1 + 23);
      int v8 = *((char *)a2 - 41);
      if (v8 >= 0) {
        size_t v9 = *((unsigned __int8 *)a2 - 41);
      }
      else {
        size_t v9 = (size_t)*(a2 - 7);
      }
      if (v8 >= 0) {
        size_t v10 = a2 - 8;
      }
      else {
        size_t v10 = (const void **)*(a2 - 8);
      }
      if (v7 >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      if (v7 >= 0) {
        size_t v12 = (const void *)a1;
      }
      else {
        size_t v12 = *(const void **)a1;
      }
      if (v11 >= v9) {
        size_t v13 = v9;
      }
      else {
        size_t v13 = v11;
      }
      int v14 = memcmp(v10, v12, v13);
      BOOL v15 = v9 < v11;
      if (v14) {
        BOOL v15 = v14 < 0;
      }
      if (v15) {
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, v6);
      }
      return 1;
    case 3:
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + 64), a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(a1, a1 + 64, a1 + 128, a2 - 8);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *,0>(a1, a1 + 64, a1 + 128, a1 + 192, a2 - 8);
      return 1;
    default:
      size_t v16 = (const void **)(a1 + 128);
      std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)(a1 + 64), (const void **)(a1 + 128));
      int v17 = (const void **)(a1 + 192);
      if ((const void **)(a1 + 192) == a2) {
        return 1;
      }
      uint64_t v18 = 0;
      int v19 = 0;
      break;
  }
  while (1)
  {
    int v20 = *((char *)v16 + 23);
    int v21 = *((char *)v17 + 23);
    if (v21 >= 0) {
      size_t v22 = *((unsigned __int8 *)v17 + 23);
    }
    else {
      size_t v22 = (size_t)v17[1];
    }
    if (v21 >= 0) {
      int v23 = v17;
    }
    else {
      int v23 = *v17;
    }
    if (v20 >= 0) {
      size_t v24 = *((unsigned __int8 *)v16 + 23);
    }
    else {
      size_t v24 = (size_t)v16[1];
    }
    if (v20 >= 0) {
      size_t v25 = v16;
    }
    else {
      size_t v25 = *v16;
    }
    if (v24 >= v22) {
      size_t v26 = v22;
    }
    else {
      size_t v26 = v24;
    }
    int v27 = memcmp(v23, v25, v26);
    BOOL v28 = v22 < v24;
    if (v27) {
      BOOL v28 = v27 < 0;
    }
    if (v28)
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v17;
      int v48 = v17[2];
      v17[1] = 0;
      void v17[2] = 0;
      const void *v17 = 0;
      long long v49 = *(_OWORD *)(v17 + 3);
      long long v50 = *(_OWORD *)(v17 + 5);
      v17[4] = 0;
      v17[5] = 0;
      __int16 v51 = *((_WORD *)v17 + 28);
      uint64_t v29 = v18;
      v17[6] = 0;
      while (1)
      {
        uint64_t v30 = v29;
        uint64_t v31 = a1 + v29;
        uint64_t v32 = a1 + v29 + 192;
        if (*(char *)(a1 + v29 + 215) < 0) {
          operator delete(*(void **)v32);
        }
        *(_OWORD *)uint64_t v32 = *(_OWORD *)(v31 + 128);
        *(void *)(v32 + 16) = *(void *)(v31 + 144);
        *(unsigned char *)(v31 + 151) = 0;
        *(unsigned char *)(v31 + 128) = 0;
        *(void *)(v31 + 216) = *(void *)(v31 + 152);
        std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)(v31 + 224));
        *(_OWORD *)(v31 + 224) = *(_OWORD *)(v31 + 160);
        *(void *)(v31 + 240) = *(void *)(v31 + 176);
        *(void *)(v31 + 168) = 0;
        *(void *)(v31 + 176) = 0;
        *(void *)(v31 + 160) = 0;
        *(_WORD *)(v31 + 248) = *(_WORD *)(v31 + 184);
        if (v30 == -128) {
          break;
        }
        int v33 = *(char *)(a1 + v30 + 87);
        if (SHIBYTE(v48) >= 0) {
          size_t v34 = (void *)HIBYTE(v48);
        }
        else {
          size_t v34 = __p[1];
        }
        if (SHIBYTE(v48) >= 0) {
          int v35 = __p;
        }
        else {
          int v35 = (void **)__p[0];
        }
        if (v33 >= 0) {
          size_t v36 = *(unsigned __int8 *)(a1 + v30 + 87);
        }
        else {
          size_t v36 = *(void *)(a1 + v30 + 72);
        }
        if (v33 >= 0) {
          int v37 = (const void *)(a1 + v30 + 64);
        }
        else {
          int v37 = *(const void **)(a1 + v30 + 64);
        }
        if (v36 >= (unint64_t)v34) {
          size_t v38 = (size_t)v34;
        }
        else {
          size_t v38 = v36;
        }
        int v39 = memcmp(v35, v37, v38);
        BOOL v40 = v39 < 0;
        if (!v39) {
          BOOL v40 = (unint64_t)v34 < v36;
        }
        uint64_t v29 = v30 - 64;
        if (!v40)
        {
          uint64_t v41 = a1 + v29 + 192;
          goto LABEL_65;
        }
      }
      uint64_t v41 = a1;
LABEL_65:
      if (*(char *)(v41 + 23) < 0) {
        operator delete(*(void **)v41);
      }
      char v42 = (void **)(a1 + v30 + 160);
      *(_OWORD *)uint64_t v41 = *(_OWORD *)__p;
      size_t v43 = v48;
      uint64_t v44 = v49;
      HIBYTE(v48) = 0;
      LOBYTE(__p[0]) = 0;
      *(void *)(v41 + 16) = v43;
      *(void *)(v41 + 24) = v44;
      std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate(v42);
      uint64_t v45 = v50;
      *char v42 = (void *)*((void *)&v49 + 1);
      uint64_t v46 = *((void *)&v50 + 1);
      *(void *)(v41 + 40) = v45;
      *(void *)(v41 + 48) = v46;
      long long v50 = 0uLL;
      *((void *)&v49 + 1) = 0;
      *(_WORD *)(v41 + 56) = v51;
      int v52 = (void **)&v49 + 1;
      std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v52);
      if (SHIBYTE(v48) < 0) {
        operator delete(__p[0]);
      }
      if (++v19 == 8) {
        return v17 + 8 == a2;
      }
    }
    size_t v16 = v17;
    v18 += 64;
    v17 += 8;
    if (v17 == a2) {
      return 1;
    }
  }
}

void std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>(long long *a1, long long *a2)
{
  long long v4 = *a1;
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a1 + 3);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *(void *)a1 = 0;
  uint64_t v13 = v5;
  uint64_t v15 = 0;
  int v7 = a1 + 2;
  long long v11 = a1[2];
  *(_OWORD *)std::string __p = v4;
  v14[0] = *((void *)a1 + 4);
  uint64_t v8 = *((void *)a1 + 6);
  *((void *)a1 + 5) = 0;
  *((void *)a1 + 6) = 0;
  *((void *)a1 + 4) = 0;
  __int16 v9 = *((_WORD *)a1 + 28);
  __int16 v16 = v9;
  uint64_t v10 = *((void *)a2 + 2);
  *a1 = *a2;
  *((void *)a1 + 2) = v10;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  *((void *)a1 + 3) = *((void *)a2 + 3);
  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a1 + 4);
  _OWORD *v7 = a2[2];
  *((void *)a1 + 6) = *((void *)a2 + 6);
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  *((_WORD *)a1 + 28) = *((_WORD *)a2 + 28);
  if (*((char *)a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *a2 = *(_OWORD *)__p;
  *((void *)a2 + 2) = v13;
  *((void *)a2 + 3) = v6;
  std::vector<siri::intelligence::BehaviorArgument>::__vdeallocate((void **)a2 + 4);
  a2[2] = v11;
  *((void *)a2 + 6) = v8;
  v14[1] = 0;
  uint64_t v15 = 0;
  v14[0] = 0;
  *((_WORD *)a2 + 28) = v9;
  int v17 = (void **)v14;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v17);
}

void std::__sort4[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  std::__sort3[abi:ne180100]<std::_ClassicAlgPolicy,siri::intelligence::BehaviorHandler::GetAllDescriptions(void)::$_0 &,siri::intelligence::BehaviorDefinition *>((const void **)a1, (const void **)a2, (const void **)a3);
  int v8 = *(char *)(a3 + 23);
  int v9 = *((char *)a4 + 23);
  if (v9 >= 0) {
    size_t v10 = *((unsigned __int8 *)a4 + 23);
  }
  else {
    size_t v10 = (size_t)a4[1];
  }
  if (v9 >= 0) {
    long long v11 = a4;
  }
  else {
    long long v11 = *a4;
  }
  if (v8 >= 0) {
    size_t v12 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    size_t v12 = *(void *)(a3 + 8);
  }
  if (v8 >= 0) {
    uint64_t v13 = (const void *)a3;
  }
  else {
    uint64_t v13 = *(const void **)a3;
  }
  if (v12 >= v10) {
    size_t v14 = v10;
  }
  else {
    size_t v14 = v12;
  }
  int v15 = memcmp(v11, v13, v14);
  BOOL v16 = v10 < v12;
  if (v15) {
    BOOL v16 = v15 < 0;
  }
  if (v16)
  {
    std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a3, (long long *)a4);
    int v17 = *(char *)(a2 + 23);
    int v18 = *(char *)(a3 + 23);
    if (v18 >= 0) {
      size_t v19 = *(unsigned __int8 *)(a3 + 23);
    }
    else {
      size_t v19 = *(void *)(a3 + 8);
    }
    if (v18 >= 0) {
      int v20 = (const void *)a3;
    }
    else {
      int v20 = *(const void **)a3;
    }
    if (v17 >= 0) {
      size_t v21 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      size_t v21 = *(void *)(a2 + 8);
    }
    if (v17 >= 0) {
      size_t v22 = (const void *)a2;
    }
    else {
      size_t v22 = *(const void **)a2;
    }
    if (v21 >= v19) {
      size_t v23 = v19;
    }
    else {
      size_t v23 = v21;
    }
    int v24 = memcmp(v20, v22, v23);
    BOOL v25 = v19 < v21;
    if (v24) {
      BOOL v25 = v24 < 0;
    }
    if (v25)
    {
      std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a2, (long long *)a3);
      int v26 = *(char *)(a1 + 23);
      int v27 = *(char *)(a2 + 23);
      if (v27 >= 0) {
        size_t v28 = *(unsigned __int8 *)(a2 + 23);
      }
      else {
        size_t v28 = *(void *)(a2 + 8);
      }
      if (v27 >= 0) {
        uint64_t v29 = (const void *)a2;
      }
      else {
        uint64_t v29 = *(const void **)a2;
      }
      if (v26 >= 0) {
        size_t v30 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v30 = *(void *)(a1 + 8);
      }
      if (v26 >= 0) {
        uint64_t v31 = (const void *)a1;
      }
      else {
        uint64_t v31 = *(const void **)a1;
      }
      if (v30 >= v28) {
        size_t v32 = v28;
      }
      else {
        size_t v32 = v30;
      }
      int v33 = memcmp(v29, v31, v32);
      BOOL v34 = v28 < v30;
      if (v33) {
        BOOL v34 = v33 < 0;
      }
      if (v34)
      {
        std::swap[abi:ne180100]<siri::intelligence::BehaviorDefinition>((long long *)a1, (long long *)a2);
      }
    }
  }
}

void std::vector<siri::intelligence::BehaviorDescription>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

std::string *std::allocator<siri::intelligence::BehaviorDescription>::construct[abi:ne180100]<siri::intelligence::BehaviorDescription,siri::intelligence::BehaviorDescription const&>(std::string *this, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  this[1].__r_.__value_.__l.__size_ = 0;
  this[1].__r_.__value_.__r.__words[2] = 0;
  return std::vector<siri::intelligence::BehaviorArgument>::__init_with_size[abi:ne180100]<siri::intelligence::BehaviorArgument*,siri::intelligence::BehaviorArgument*>(this + 1, *((long long **)a2 + 3), *((long long **)a2 + 4), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
}

void sub_239A978F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<siri::intelligence::BehaviorDescription>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    std::allocator<siri::intelligence::BehaviorDescription>::destroy[abi:ne180100](i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void YAML::Emitter::Emitter(YAML::Emitter *this)
{
}

void sub_239A979CC(_Unwind_Exception *a1)
{
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void YAML::Emitter::Emitter()
{
}

void sub_239A97A70(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x1032C409558ADD0);
  _Unwind_Resume(a1);
}

void YAML::Emitter::~Emitter(YAML::Emitter *this)
{
  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this, 0);
}

{
  void *v2;

  uint64_t v2 = (void *)*((void *)this + 1);
  if (v2)
  {
    *((void *)this + 2) = v2;
    operator delete(v2);
  }
  std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100]((YAML::EmitterState **)this, 0);
}

uint64_t YAML::Emitter::c_str(YAML::Emitter *this)
{
  if (*((void *)this + 4)) {
    return 0;
  }
  *(unsigned char *)(*((void *)this + 1) + *((void *)this + 5)) = 0;
  return *((void *)this + 1);
}

uint64_t YAML::Emitter::size(YAML::Emitter *this)
{
  return *((void *)this + 5);
}

uint64_t YAML::Emitter::good(YAML::Emitter *this)
{
  return **(unsigned __int8 **)this;
}

void YAML::Emitter::GetLastError(YAML::Emitter *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *(void *)this;
  if (*(char *)(*(void *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(void *)(v2 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

BOOL YAML::Emitter::SetOutputCharset(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 3) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 32, a2, 1);
  }
  return (a2 - 3) < 2;
}

uint64_t YAML::Emitter::SetStringFormat(uint64_t *a1, uint64_t a2)
{
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 36, a2, 1);
  }
  return 0;
}

BOOL YAML::Emitter::SetBoolFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 8) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 40, a2, 1);
  }
  if ((a2 - 11) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 48, a2, 1);
  }
  if ((a2 & 0xFFFFFFFE) == 0xE) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 44, a2, 1);
  }
  return (a2 - 8) < 3;
}

BOOL YAML::Emitter::SetIntBase(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 16) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 52, a2, 1);
  }
  return (a2 - 16) < 3;
}

BOOL YAML::Emitter::SetSeqFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 23) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 80, a2, 1);
  }
  return (a2 - 23) < 2;
}

BOOL YAML::Emitter::SetMapFormat(uint64_t *a1, uint64_t a2)
{
  if ((a2 - 23) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 84, a2, 1);
  }
  if (a2 == 29 || !a2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*a1, *a1 + 88, a2, 1);
  }
  return (a2 - 23) < 2;
}

BOOL YAML::Emitter::SetIndent(YAML::Emitter *this, unint64_t a2)
{
  if (a2 >= 2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 56, a2, 1);
  }
  return a2 > 1;
}

uint64_t YAML::Emitter::SetPreCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 64, a2, 1);
  }
  return 0;
}

uint64_t YAML::Emitter::SetPostCommentIndent(YAML::Emitter *this, uint64_t a2)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 72, a2, 1);
  }
  return 0;
}

BOOL YAML::Emitter::SetFloatPrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 9) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 96, a2, 1);
  }
  return a2 < 0xA;
}

BOOL YAML::Emitter::SetDoublePrecision(YAML::Emitter *this, unint64_t a2)
{
  if (a2 <= 0x11) {
    YAML::EmitterState::_Set<unsigned long>(*(void *)this, *(void *)this + 104, a2, 1);
  }
  return a2 < 0x12;
}

YAML::Emitter *YAML::Emitter::SetLocalValue(YAML::Emitter *this, uint64_t a2)
{
  long long v3 = *(unsigned char **)this;
  if (*v3)
  {
    switch((int)a2)
    {
      case 19:
        YAML::Emitter::EmitBeginDoc(this);
        break;
      case 20:
        YAML::Emitter::EmitEndDoc(this);
        break;
      case 21:
        YAML::Emitter::EmitBeginSeq(this);
        break;
      case 22:
        YAML::Emitter::EmitEndSeq(this);
        break;
      case 23:
      case 24:
        goto LABEL_7;
      case 25:
        YAML::Emitter::EmitBeginMap(this);
        break;
      case 26:
        YAML::Emitter::EmitEndMap(this);
        break;
      case 27:
      case 28:
        return this;
      default:
        if (a2 == 1)
        {
          YAML::Emitter::EmitKindTag(this);
        }
        else if (a2 == 2)
        {
          YAML::Emitter::EmitNewline(this);
        }
        else
        {
LABEL_7:
          YAML::EmitterState::SetLocalValue((uint64_t)v3, a2);
        }
        break;
    }
  }
  return this;
}

void YAML::Emitter::EmitBeginDoc(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) != v3 && **(_DWORD **)(v3 - 8) || *(unsigned char *)(v1 + 192) || *(unsigned char *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(unsigned char *)uint64_t v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      if (*((void *)this + 7)) {
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "---\n", 4uLL);
      uint64_t v4 = *(void *)this;
      *(_WORD *)(v4 + 192) = 0;
      *(unsigned char *)(v4 + 194) = 0;
    }
  }
}

void sub_239A9810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::Emitter::EmitEndDoc(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) != v2 && **(_DWORD **)(v2 - 8) || *(unsigned char *)(v1 + 192) || *(unsigned char *)(v1 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "Unexpected begin document");
      *(unsigned char *)uint64_t v1 = 0;
      std::string::operator=((std::string *)(v1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      uint64_t v3 = (std::vector<char> *)((char *)this + 8);
      if (*((void *)this + 7)) {
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      }
      YAML::ostream_wrapper::write(v3, "...\n", 4uLL);
    }
  }
}

void sub_239A98228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::EmitBeginSeq(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) == v3 || *(_DWORD *)(*(void *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 80) == 24) {
        unsigned int v4 = 4;
      }
      else {
        unsigned int v4 = 3;
      }
    }
    else
    {
      unsigned int v4 = 3;
    }
    YAML::Emitter::PrepareNode(this, v4);
    uint64_t v5 = *(void **)v2;
    YAML::EmitterState::StartedGroup(v5);
  }
  return this;
}

void YAML::Emitter::EmitEndSeq(YAML::Emitter *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v3)
    {
      if (!*(void *)(v2 + 200)) {
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      }
      goto LABEL_20;
    }
    uint64_t v4 = *(void *)(v3 - 8);
    if (*(void *)(v4 + 16))
    {
      if (*(_DWORD *)(v4 + 4) != 1)
      {
LABEL_20:
        YAML::EmitterState::EndedGroup(v2, 1);
        return;
      }
    }
    else
    {
      *(_DWORD *)(v4 + 4) = 1;
    }
    if (*((unsigned char *)this + 64))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      uint64_t v2 = *(void *)this;
    }
    unint64_t v5 = *(void *)(v2 + 184);
    if (*((void *)this + 7) < v5)
    {
      do
      {
        char __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      while (*((void *)this + 7) < v5);
      uint64_t v2 = *(void *)this;
    }
    uint64_t v6 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v6) {
      int v7 = (void *)(v2 + 200);
    }
    else {
      int v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (!*v7) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "[", 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "]", 1uLL);
    uint64_t v2 = *(void *)this;
    goto LABEL_20;
  }
}

YAML::Emitter *YAML::Emitter::EmitBeginMap(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  if (**(unsigned char **)this)
  {
    uint64_t v2 = this;
    uint64_t v3 = *(void *)(v1 + 168);
    if (*(void *)(v1 + 160) == v3 || *(_DWORD *)(*(void *)(v3 - 8) + 4) != 1)
    {
      if (*(_DWORD *)(v1 + 84) == 24) {
        unsigned int v4 = 6;
      }
      else {
        unsigned int v4 = 5;
      }
    }
    else
    {
      unsigned int v4 = 5;
    }
    YAML::Emitter::PrepareNode(this, v4);
    unint64_t v5 = *(void **)v2;
    YAML::EmitterState::StartedGroup(v5);
  }
  return this;
}

void YAML::Emitter::EmitEndMap(YAML::Emitter *this)
{
  uint64_t v2 = *(void *)this;
  if (*(unsigned char *)v2)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v3)
    {
      if (!*(void *)(v2 + 200)) {
        __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
      }
      goto LABEL_20;
    }
    uint64_t v4 = *(void *)(v3 - 8);
    if (*(void *)(v4 + 16))
    {
      if (*(_DWORD *)(v4 + 4) != 1)
      {
LABEL_20:
        YAML::EmitterState::EndedGroup(v2, 2);
        return;
      }
    }
    else
    {
      *(_DWORD *)(v4 + 4) = 1;
    }
    if (*((unsigned char *)this + 64))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      uint64_t v2 = *(void *)this;
    }
    unint64_t v5 = *(void *)(v2 + 184);
    if (*((void *)this + 7) < v5)
    {
      do
      {
        char __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      while (*((void *)this + 7) < v5);
      uint64_t v2 = *(void *)this;
    }
    uint64_t v6 = *(void *)(v2 + 168);
    if (*(void *)(v2 + 160) == v6) {
      int v7 = (void *)(v2 + 200);
    }
    else {
      int v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (!*v7) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "{", 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "}", 1uLL);
    uint64_t v2 = *(void *)this;
    goto LABEL_20;
  }
}

void YAML::Emitter::EmitKindTag(YAML::Emitter *this)
{
  std::string::basic_string[abi:ne180100]<0>(v2, (char *)&str_41);
  std::string::basic_string[abi:ne180100]<0>(&v7, (char *)&str_41);
  YAML::_Tag::_Tag(&v4, &v7, (long long *)v2, 1);
  if (v8 < 0) {
    operator delete((void *)v7);
  }
  YAML::Emitter::Write(this, (uint64_t)&v4);
  if (v6 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (v3 < 0) {
    operator delete(v2[0]);
  }
}

void sub_239A98698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Emitter::EmitNewline(YAML::Emitter *this)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 0);
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    *(unsigned char *)(*(void *)this + 194) = 1;
  }
}

uint64_t *YAML::Emitter::SetLocalIndent(uint64_t *result, int *a2)
{
  uint64_t v2 = *a2;
  if (v2 >= 2) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 56, v2, 0);
  }
  return result;
}

uint64_t *YAML::Emitter::SetLocalPrecision(uint64_t *result, unsigned int *a2)
{
  uint64_t v2 = *a2;
  if (v2 <= 9) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 96, v2, 0);
  }
  uint64_t v3 = a2[1];
  if (v3 <= 0x11) {
    YAML::EmitterState::_Set<unsigned long>(*result, *result + 104, v3, 0);
  }
  return result;
}

void YAML::Emitter::PrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v2 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v2)
  {
    YAML::Emitter::PrepareTopNode(this, a2);
  }
  else
  {
    uint64_t v3 = *(int **)(v2 - 8);
    int v4 = *v3;
    BOOL v5 = v3[1] == 1;
    if (v3[1] == 1) {
      int v6 = 3;
    }
    else {
      int v6 = 4;
    }
    if (v5) {
      int v7 = 5;
    }
    else {
      int v7 = 6;
    }
    if (v4 != 1) {
      int v6 = v7;
    }
    switch(v6)
    {
      case 3:
        YAML::Emitter::FlowSeqPrepareNode(this, a2);
        break;
      case 4:
        YAML::Emitter::BlockSeqPrepareNode(this, a2);
        break;
      case 5:
        YAML::Emitter::FlowMapPrepareNode(this, a2);
        break;
      case 6:
        YAML::Emitter::BlockMapPrepareNode(this, a2);
        break;
      default:
        return;
    }
  }
}

uint64_t YAML::Emitter::CanEmitNewline(YAML::Emitter *this)
{
  return 1;
}

void YAML::Emitter::PrepareTopNode(YAML::Emitter *this, unsigned int a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v4) {
      BOOL v5 = (void *)(*(void *)this + 200);
    }
    else {
      BOOL v5 = (void *)(*(void *)(v4 - 8) + 16);
    }
    if (*v5 && *((void *)this + 7)) {
      YAML::Emitter::EmitBeginDoc(this);
    }
    if (a2 <= 6)
    {
      if (((1 << a2) & 0x2E) != 0)
      {
        if (*(unsigned char *)(*(void *)this + 192)) {
          BOOL v6 = 1;
        }
        else {
          BOOL v6 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
        }
        YAML::Emitter::SpaceOrIndentTo(this, v6, 0);
      }
      else if (((1 << a2) & 0x50) != 0)
      {
        uint64_t v7 = *(void *)this;
        if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v7 + 193) || *(unsigned char *)(v7 + 194))
        {
          YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
        }
      }
    }
  }
}

void YAML::Emitter::FlowSeqPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      uint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      uint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      char v8 = ",";
    }
    else {
      char v8 = "[";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          size_t v12 = (void *)(v9 + 200);
        }
        else {
          size_t v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowSeqPrepareNode", "emitter.cpp", 336, "false");
    }
  }
}

void YAML::Emitter::BlockSeqPrepareNode(YAML::Emitter *this, int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = *(void *)(*(void *)this + 160);
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (v6 == v5)
  {
    uint64_t v7 = 0;
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(v5 - 8) + 8);
    if (!a2) {
      return;
    }
  }
  unint64_t v8 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    if (v6 == v5) {
      uint64_t v9 = (void *)(v4 + 200);
    }
    else {
      uint64_t v9 = (void *)(*(void *)(v5 - 8) + 16);
    }
    if (*v9 || *((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v8)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "-", 1uLL);
  }
  switch(a2)
  {
    case 1:
    case 2:
    case 3:
    case 5:
      if (*(unsigned char *)(*(void *)this + 192)) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v7 + v8);
      break;
    case 4:
      goto LABEL_24;
    case 6:
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(*(void *)this + 193) || *((unsigned char *)this + 64)) {
LABEL_24:
      }
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      break;
    default:
      return;
  }
}

void YAML::Emitter::FlowMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v6 = *(void *)(v4 + 160);
  uint64_t v5 = *(void *)(v4 + 168);
  if (v6 == v5)
  {
    if (*(unsigned char *)(v4 + 200))
    {
LABEL_15:
      YAML::Emitter::FlowMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else
  {
    uint64_t v7 = *(void *)(v5 - 8);
    if (*(unsigned char *)(v7 + 16))
    {
      if (*(unsigned char *)(v7 + 24))
      {
        YAML::Emitter::FlowMapPrepareLongKeyValue(this, a2);
        return;
      }
      goto LABEL_15;
    }
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v6 = *(void *)(*(void *)this + 160);
    uint64_t v5 = *(void *)(*(void *)this + 168);
  }
  if (v6 == v5 || !*(unsigned char *)(*(void *)(v5 - 8) + 24))
  {
    YAML::Emitter::FlowMapPrepareSimpleKey(this, a2);
  }
  else
  {
    YAML::Emitter::FlowMapPrepareLongKey(this, a2);
  }
}

void YAML::Emitter::BlockMapPrepareNode(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(v4 + 168);
  if (*(void *)(v4 + 160) == v5)
  {
    if (*(unsigned char *)(v4 + 200))
    {
LABEL_17:
      YAML::Emitter::BlockMapPrepareSimpleKeyValue(this, a2);
      return;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(unsigned char *)(v6 + 16))
    {
      if (*(unsigned char *)(v6 + 24))
      {
        YAML::Emitter::BlockMapPrepareLongKeyValue(this, a2);
        return;
      }
      goto LABEL_17;
    }
  }
  if (*(_DWORD *)(v4 + 88) == 29)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v4 = *(void *)this;
  }
  if ((a2 & 0xFFFFFFFD) == 4)
  {
    YAML::EmitterState::SetLongKey(v4);
    uint64_t v4 = *(void *)this;
  }
  uint64_t v7 = *(void *)(v4 + 168);
  if (*(void *)(v4 + 160) == v7 || !*(unsigned char *)(*(void *)(v7 - 8) + 24))
  {
    YAML::Emitter::BlockMapPrepareSimpleKey(this, a2);
  }
  else
  {
    YAML::Emitter::BlockMapPrepareLongKey(this, a2);
  }
}

void YAML::Emitter::SpaceOrIndentTo(YAML::Emitter *this, int a2, unint64_t a3)
{
  uint64_t v6 = (std::vector<char> *)((char *)this + 8);
  if (*((unsigned char *)this + 64)) {
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
  }
  unint64_t v7 = *((void *)this + 7);
  if (v7) {
    BOOL v8 = a2 == 0;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    YAML::ostream_wrapper::write(v6, " ", 1uLL);
    unint64_t v7 = *((void *)this + 7);
  }
  if (v7 < a3)
  {
    do
    {
      char __src = 32;
      YAML::ostream_wrapper::write(v6, &__src, 1uLL);
    }
    while (*((void *)this + 7) < a3);
  }
}

void YAML::Emitter::FlowMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      unint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      unint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      BOOL v8 = ", ?";
    }
    else {
      BOOL v8 = "{ ?";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 3uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          size_t v12 = (void *)(v9 + 200);
        }
        else {
          size_t v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKey", "emitter.cpp", 418, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    uint64_t v6 = *(void *)(*(void *)this + 168);
    if (*(void *)(*(void *)this + 160) == v6) {
      unint64_t v7 = (void *)(*(void *)this + 200);
    }
    else {
      unint64_t v7 = (void *)(*(void *)(v6 - 8) + 16);
    }
    if (*v7) {
      BOOL v8 = ",";
    }
    else {
      BOOL v8 = "{";
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), v8, 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v9 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v9 + 193))
      {
        BOOL v10 = 1;
      }
      else
      {
        uint64_t v11 = *(void *)(v9 + 168);
        if (*(void *)(v9 + 160) == v11) {
          size_t v12 = (void *)(v9 + 200);
        }
        else {
          size_t v12 = (void *)(*(void *)(v11 - 8) + 16);
        }
        BOOL v10 = *v12 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v10, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKey", "emitter.cpp", 477, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v6 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v6 + 193))
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 168);
        if (*(void *)(v6 + 160) == v8) {
          uint64_t v9 = (void *)(v6 + 200);
        }
        else {
          uint64_t v9 = (void *)(*(void *)(v8 - 8) + 16);
        }
        BOOL v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareLongKeyValue", "emitter.cpp", 446, "false");
    }
  }
}

void YAML::Emitter::FlowMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  if (*(void *)(*(void *)this + 168) - *(void *)(*(void *)this + 160) >= 0x10uLL) {
    unint64_t v5 = *(void *)(v4 + 184) - *(void *)(*(void *)(*(void *)(*(void *)this + 168) - 16) + 8);
  }
  else {
    unint64_t v5 = 0;
  }
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194))
  {
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v5)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      uint64_t v6 = *(void *)this;
      if (*(unsigned char *)(*(void *)this + 192) || *(unsigned char *)(v6 + 193))
      {
        BOOL v7 = 1;
      }
      else
      {
        uint64_t v8 = *(void *)(v6 + 168);
        if (*(void *)(v6 + 160) == v8) {
          uint64_t v9 = (void *)(v6 + 200);
        }
        else {
          uint64_t v9 = (void *)(*(void *)(v8 - 8) + 16);
        }
        BOOL v7 = *v9 != 0;
      }
      YAML::Emitter::SpaceOrIndentTo(this, v7, v5);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      __assert_rtn("FlowMapPrepareSimpleKeyValue", "emitter.cpp", 505, "false");
    }
  }
}

void YAML::Emitter::BlockMapPrepareLongKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5)
  {
    uint64_t v6 = (void *)(v4 + 200);
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = (void *)(*(void *)(v5 - 8) + 16);
    if (!a2) {
      return;
    }
  }
  unint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    if (*v6) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    if (*((unsigned char *)this + 64)) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
    while (*((void *)this + 7) < v7)
    {
      char __src = 32;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
    }
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "?", 1uLL);
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0) {
    YAML::Emitter::SpaceOrIndentTo(this, 1, v7 + 1);
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKey(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5)
  {
    uint64_t v6 = (uint64_t *)(v4 + 200);
    if (!a2) {
      return;
    }
  }
  else
  {
    uint64_t v6 = (uint64_t *)(*(void *)(v5 - 8) + 16);
    if (!a2) {
      return;
    }
  }
  unint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193))
  {
    uint64_t v8 = *v6;
    if (!*(unsigned char *)(v4 + 194) && v8 != 0) {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
  if (a2 <= 5 && ((1 << a2) & 0x2E) != 0)
  {
    if (*(unsigned char *)(*(void *)this + 192)) {
      BOOL v10 = 1;
    }
    else {
      BOOL v10 = *(unsigned __int8 *)(*(void *)this + 193) != 0;
    }
    YAML::Emitter::SpaceOrIndentTo(this, v10, v7);
  }
}

void YAML::Emitter::BlockMapPrepareLongKeyValue(YAML::Emitter *this, unsigned int a2)
{
  if (a2)
  {
    unint64_t v4 = *(void *)(*(void *)this + 184);
    if (!*(unsigned char *)(*(void *)this + 192) && !*(unsigned char *)(*(void *)this + 193))
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
      while (*((void *)this + 7) < v4)
      {
        char __src = 32;
        YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), &__src, 1uLL);
      }
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
    }
    if (a2 <= 6) {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v4 + 1);
    }
  }
}

void YAML::Emitter::BlockMapPrepareSimpleKeyValue(YAML::Emitter *this, unsigned int a2)
{
  uint64_t v4 = *(void *)this;
  uint64_t v5 = *(void *)(*(void *)this + 168);
  if (*(void *)(*(void *)this + 160) == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v5 - 8) + 8);
  }
  uint64_t v7 = *(void *)(v4 + 184);
  if (!*(unsigned char *)(v4 + 192) && !*(unsigned char *)(v4 + 193) && !*(unsigned char *)(v4 + 194)) {
    YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), ":", 1uLL);
  }
  if (a2 <= 6)
  {
    if (((1 << a2) & 0x2E) != 0)
    {
      YAML::Emitter::SpaceOrIndentTo(this, 1, v6 + v7);
    }
    else if (((1 << a2) & 0x50) != 0)
    {
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), "\n", 1uLL);
    }
  }
}

void *YAML::Emitter::PrepareIntegralStream(void *result, uint64_t a2)
{
  int v3 = *(_DWORD *)(*result + 52);
  switch(v3)
  {
    case 18:
      BOOL result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"0", 1);
      int v4 = 64;
      break;
    case 17:
      BOOL result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((void *)(a2 + 16), (uint64_t)"0x", 2);
      int v4 = 8;
      break;
    case 16:
      int v4 = 2;
      break;
    default:
      __assert_rtn("PrepareIntegralStream", "emitter.cpp", 666, "false");
  }
  uint64_t v5 = a2 + 16 + *(void *)(*(void *)(a2 + 16) - 24);
  *(_DWORD *)(v5 + 8) = *(_DWORD *)(v5 + 8) & 0xFFFFFFB5 | v4;
  return result;
}

void *YAML::Emitter::StartedScalar(YAML::Emitter *this)
{
  uint64_t v1 = *(void *)this;
  YAML::EmitterState::StartedNode(*(void *)this);

  return YAML::SettingChanges::clear((uint64_t **)(v1 + 112));
}

uint64_t YAML::Emitter::Write(uint64_t a1, const void **a2)
{
  uint64_t v3 = *(void *)a1;
  if (**(unsigned char **)a1)
  {
    int v6 = *(_DWORD *)(v3 + 32);
    int v5 = *(_DWORD *)(v3 + 36);
    uint64_t v8 = *(void *)(v3 + 160);
    uint64_t v7 = *(void *)(v3 + 168);
    if (v8 == v7) {
      int v9 = 0;
    }
    else {
      int v9 = *(_DWORD *)(*(void *)(v7 - 8) + 4);
    }
    int v10 = YAML::Utils::ComputeStringFormat((uint64_t)a2, v5, v9, v6 == 4);
    if (v10 == 3) {
      YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(*(void *)a1, *(void *)a1 + 88, 29, 0);
    }
    int v11 = v10;
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    switch(v11)
    {
      case 2:
        YAML::Utils::WriteDoubleQuotedString((std::vector<char> *)(a1 + 8), (uint64_t)a2, v6 == 4);
        break;
      case 1:
        YAML::Utils::WriteSingleQuotedString((std::vector<char> *)(a1 + 8), (uint64_t)a2);
        break;
      case 0:
        YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 8), a2);
        break;
    }
    uint64_t v12 = *(void *)a1;
    YAML::EmitterState::StartedNode(*(void *)a1);
    YAML::SettingChanges::clear((uint64_t **)(v12 + 112));
  }
  return a1;
}

uint64_t YAML::Emitter::GetFloatPrecision(YAML::Emitter *this)
{
  return *(void *)(*(void *)this + 96);
}

uint64_t YAML::Emitter::GetDoublePrecision(YAML::Emitter *this)
{
  return *(void *)(*(void *)this + 104);
}

const char *YAML::Emitter::ComputeFullBoolName(YAML::Emitter *this, int a2)
{
  uint64_t v2 = *(void *)this;
  if (*(_DWORD *)(*(void *)this + 44) == 15)
  {
    int v3 = *(_DWORD *)(v2 + 48);
    goto LABEL_3;
  }
  int v6 = *(_DWORD *)(v2 + 40);
  int v3 = *(_DWORD *)(v2 + 48);
  switch(v6)
  {
    case 10:
      switch(v3)
      {
        case 13:
          int v4 = "Off";
          int v5 = "On";
          break;
        case 12:
          int v4 = "off";
          int v5 = "on";
          break;
        case 11:
          int v4 = "OFF";
          int v5 = "ON";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 9:
      switch(v3)
      {
        case 13:
          int v4 = "False";
          int v5 = "True";
          break;
        case 12:
          int v4 = "false";
          int v5 = "true";
          break;
        case 11:
          int v4 = "FALSE";
          int v5 = "TRUE";
          goto LABEL_22;
        default:
          goto LABEL_21;
      }
      break;
    case 8:
LABEL_3:
      switch(v3)
      {
        case 13:
          int v4 = "No";
          int v5 = "Yes";
          goto LABEL_22;
        case 12:
          int v4 = "no";
          int v5 = "yes";
          goto LABEL_22;
        case 11:
          int v4 = "NO";
          int v5 = "YES";
          goto LABEL_22;
      }
      goto LABEL_21;
    default:
LABEL_21:
      int v4 = "n";
      int v5 = "y";
      break;
  }
LABEL_22:
  if (a2) {
    return v5;
  }
  else {
    return v4;
  }
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, int a2)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    int v4 = (char *)YAML::Emitter::ComputeFullBoolName(this, a2);
    if (*(_DWORD *)(*(void *)this + 44) == 15)
    {
      LOBYTE(__p[0]) = *v4;
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const char *)__p, 1uLL);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, v4);
      YAML::ostream_wrapper::write((std::vector<char> *)((char *)this + 8), (const void **)__p);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v5 = *(void *)this;
    YAML::EmitterState::StartedNode(*(void *)this);
    YAML::SettingChanges::clear((uint64_t **)(v5 + 112));
  }
  return this;
}

void sub_239A99E30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *this, YAML::ostream_wrapper *a2)
{
  if (**(unsigned char **)this)
  {
    YAML::Emitter::PrepareNode(this, 2u);
    YAML::Utils::WriteChar((std::vector<char> *)((char *)this + 8), a2);
    uint64_t v4 = *(void *)this;
    YAML::EmitterState::StartedNode(*(void *)this);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return this;
}

uint64_t *YAML::Emitter::Write(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*(unsigned char *)*a1)
  {
    if (*(unsigned char *)(v3 + 192) || *(unsigned char *)(v3 + 193))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(unsigned char *)uint64_t v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "*", 1uLL);
      uint64_t v7 = *a1;
      if (v6)
      {
        YAML::EmitterState::StartedNode(*a1);
        YAML::SettingChanges::clear((uint64_t **)(v7 + 112));
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid alias");
      *(unsigned char *)uint64_t v7 = 0;
      std::string::operator=((std::string *)(v7 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

{
  uint64_t v3;
  char v5;
  uint64_t v6;
  std::string __str;

  uint64_t v3 = *a1;
  if (*(unsigned char *)*a1)
  {
    if (*(unsigned char *)(v3 + 192))
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(unsigned char *)uint64_t v3 = 0;
      std::string::operator=((std::string *)(v3 + 8), &__str);
    }
    else
    {
      YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 1u);
      YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "&", 1uLL);
      char v6 = *a1;
      if (v5)
      {
        *(unsigned char *)(v6 + 192) = 1;
        return a1;
      }
      std::string::basic_string[abi:ne180100]<0>(&__str, "invalid anchor");
      *(unsigned char *)char v6 = 0;
      std::string::operator=((std::string *)(v6 + 8), &__str);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  char __src;

  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 0);
    uint64_t v4 = *a1;
    if (a1[7])
    {
      uint64_t v5 = *(void *)(v4 + 64);
      if (v5)
      {
        do
        {
          char __src = 32;
          YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), &__src, 1uLL);
          --v5;
        }
        while (v5);
        uint64_t v4 = *a1;
      }
    }
    YAML::Utils::WriteComment((uint64_t)(a1 + 1), a2, *(void *)(v4 + 72));
    *(unsigned char *)(*a1 + 194) = 1;
  }
  return a1;
}

{
  uint64_t v4;
  void *v6[2];
  char v7;
  std::string v8;
  void *__p;
  char v10;
  long long v11;
  char v12;

  std::string::basic_string[abi:ne180100]<0>(v6, "binary");
  std::string::basic_string[abi:ne180100]<0>(&v11, (char *)&str_41);
  YAML::_Tag::_Tag(&v8, &v11, (long long *)v6, 2);
  if (v12 < 0) {
    operator delete((void *)v11);
  }
  YAML::Emitter::Write((YAML::Emitter *)a1, (uint64_t)&v8);
  if (v10 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::Utils::WriteBinary((std::vector<char> *)(a1 + 1), a2);
    uint64_t v4 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v4 + 112));
  }
  return a1;
}

void sub_239A99FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_239A9A0A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::Emitter::Write(YAML::Emitter *a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned char **)a1;
  if (!**(unsigned char **)a1) {
    return a1;
  }
  if (v3[193])
  {
    std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
    unsigned char *v3 = 0;
    std::string::operator=((std::string *)(v3 + 8), &__str);
    goto LABEL_12;
  }
  YAML::Emitter::PrepareNode(a1, 1u);
  int v5 = *(_DWORD *)(a2 + 48);
  char v6 = (std::vector<char> *)((char *)a1 + 8);
  if (v5 == 1)
  {
    uint64_t v7 = (uint64_t *)(a2 + 24);
    int v8 = 0;
  }
  else
  {
    if (v5)
    {
      if (YAML::Utils::WriteTagWithPrefix(v6, (uint64_t *)a2, (uint64_t *)(a2 + 24))) {
        goto LABEL_9;
      }
      goto LABEL_11;
    }
    uint64_t v7 = (uint64_t *)(a2 + 24);
    int v8 = 1;
  }
  if (YAML::Utils::WriteTag(v6, v7, v8))
  {
LABEL_9:
    *(unsigned char *)(*(void *)a1 + 193) = 1;
    return a1;
  }
LABEL_11:
  uint64_t v9 = *(void *)a1;
  std::string::basic_string[abi:ne180100]<0>(&__str, "invalid tag");
  *(unsigned char *)uint64_t v9 = 0;
  std::string::operator=((std::string *)(v9 + 8), &__str);
LABEL_12:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  return a1;
}

void sub_239A9A1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *YAML::Emitter::Write(uint64_t *a1)
{
  if (*(unsigned char *)*a1)
  {
    YAML::Emitter::PrepareNode((YAML::Emitter *)a1, 2u);
    YAML::ostream_wrapper::write((std::vector<char> *)(a1 + 1), "~", 1uLL);
    uint64_t v2 = *a1;
    YAML::EmitterState::StartedNode(*a1);
    YAML::SettingChanges::clear((uint64_t **)(v2 + 112));
  }
  return a1;
}

void sub_239A9A3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

std::string *YAML::_Tag::_Tag(std::string *this, long long *a2, long long *a3, int a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v7;
  }
  int v8 = this + 1;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  LODWORD(this[2].__r_.__value_.__l.__data_) = a4;
  return this;
}

void sub_239A9A4B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

YAML::EmitterState *std::unique_ptr<YAML::EmitterState>::reset[abi:ne180100](YAML::EmitterState **a1, YAML::EmitterState *a2)
{
  BOOL result = *a1;
  *a1 = a2;
  if (result)
  {
    YAML::EmitterState::~EmitterState(result);
    JUMPOUT(0x23ECAACC0);
  }
  return result;
}

uint64_t siri::intelligence::Saver::SaveFile(google::protobuf::MessageLite **a1, std::string *a2, int a3)
{
  if (a3 == 2) {
    siri::intelligence::YamlIO::ToFile();
  }
  if (a3 == 1)
  {
    if (siri::intelligence::ProtobufIO::ToFile(*a1, a2)) {
      return 1;
    }
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v5 = (uint64_t *)a2;
    }
    else {
      int v5 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to write to binary file: %s", v4, v5);
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported destination format specified during conversion", (const char *)a2);
  }
  return 0;
}

uint64_t siri::intelligence::Saver::SaveFile(uint64_t a1, std::string *a2)
{
  uint64_t v3 = *(atomic_ullong **)(a1 + 8);
  v7[0] = *(google::protobuf::MessageLite **)a1;
  v7[1] = (google::protobuf::MessageLite *)v3;
  if (v3) {
    atomic_fetch_add_explicit(v3 + 1, 1uLL, memory_order_relaxed);
  }
  int FormatForFilename = siri::intelligence::GetFormatForFilename((uint64_t)a2);
  uint64_t v5 = siri::intelligence::Saver::SaveFile(v7, a2, FormatForFilename);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v3);
  }
  return v5;
}

void sub_239A9A638(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

double siri::intelligence::ConditionEntry::ConditionEntry(siri::intelligence::ConditionEntry *this)
{
  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

{
  double result;

  *(_DWORD *)this = 0;
  double result = 0.0;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  return result;
}

siri::intelligence::ConditionEntry *siri::intelligence::ConditionEntry::ConditionEntry(siri::intelligence::ConditionEntry *this, const protobuf::Intelligence_Condition_ConditionEntry *a2)
{
  *(_DWORD *)this = 0;
  *(_OWORD *)((char *)this + 24) = 0u;
  int v39 = (std::string *)((char *)this + 24);
  uint64_t v4 = (void *)((char *)this + 64);
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  int v5 = *((_DWORD *)a2 + 8);
  if (v5)
  {
    *(_DWORD *)this = 2;
    if (v5 >= 1)
    {
      int v6 = 0;
      do
      {
        long long v7 = (const protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)a2 + 24, v6);
        siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v7);
        unint64_t v8 = *((void *)this + 9);
        if (v8 >= *((void *)this + 10))
        {
          uint64_t v11 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v4, (const siri::intelligence::ConditionEntry *)&__p);
        }
        else
        {
          *(_DWORD *)unint64_t v8 = __p.__r_.__value_.__l.__data_;
          *(void *)(v8 + 8) = __p.__r_.__value_.__l.__size_;
          std::string::size_type v9 = __p.__r_.__value_.__r.__words[2];
          *(void *)(v8 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          if (v9) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v43) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v8 + 24), (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
          }
          else
          {
            long long v10 = v42;
            *(void *)(v8 + 40) = v43;
            *(_OWORD *)(v8 + 24) = v10;
          }
          *(void *)(v8 + 48) = v44;
          uint64_t v12 = v45;
          *(void *)(v8 + 56) = v45;
          if (v12) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v8 + 64) = 0;
          *(void *)(v8 + 72) = 0;
          *(void *)(v8 + 80) = 0;
          std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((void *)(v8 + 64), v46, v47, 0x2E8BA2E8BA2E8BA3 * ((v47 - v46) >> 3));
          uint64_t v11 = v8 + 88;
          *((void *)this + 9) = v8 + 88;
        }
        *((void *)this + 9) = v11;
        siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)&__p);
        ++v6;
      }
      while (v6 < *((_DWORD *)a2 + 8));
    }
  }
  else
  {
    int v13 = *((_DWORD *)a2 + 14);
    if (v13)
    {
      *(_DWORD *)this = 3;
      if (v13 >= 1)
      {
        int v14 = 0;
        do
        {
          int v15 = (const protobuf::Intelligence_Condition_ConditionEntry *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>((uint64_t)a2 + 48, v14);
          siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v15);
          unint64_t v16 = *((void *)this + 9);
          if (v16 >= *((void *)this + 10))
          {
            uint64_t v19 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v4, (const siri::intelligence::ConditionEntry *)&__p);
          }
          else
          {
            *(_DWORD *)unint64_t v16 = __p.__r_.__value_.__l.__data_;
            *(void *)(v16 + 8) = __p.__r_.__value_.__l.__size_;
            std::string::size_type v17 = __p.__r_.__value_.__r.__words[2];
            *(void *)(v16 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
            if (v17) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v43) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)(v16 + 24), (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
            }
            else
            {
              long long v18 = v42;
              *(void *)(v16 + 40) = v43;
              *(_OWORD *)(v16 + 24) = v18;
            }
            *(void *)(v16 + 48) = v44;
            uint64_t v20 = v45;
            *(void *)(v16 + 56) = v45;
            if (v20) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
            }
            *(void *)(v16 + 64) = 0;
            *(void *)(v16 + 72) = 0;
            *(void *)(v16 + 80) = 0;
            std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((void *)(v16 + 64), v46, v47, 0x2E8BA2E8BA2E8BA3 * ((v47 - v46) >> 3));
            uint64_t v19 = v16 + 88;
            *((void *)this + 9) = v16 + 88;
          }
          *((void *)this + 9) = v19;
          siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)&__p);
          ++v14;
        }
        while (v14 < *((_DWORD *)a2 + 14));
      }
    }
    else
    {
      int v21 = *((_DWORD *)a2 + 4);
      if ((v21 & 8) != 0)
      {
        size_t v30 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((void *)a2 + 12);
        if (!v30)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21511);
          uint64_t v31 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || not_child_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v31->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          size_t v30 = (const protobuf::Intelligence_Condition_ConditionEntry *)*((void *)a2 + 12);
        }
        *(_DWORD *)this = 4;
        if (v30) {
          size_t v32 = v30;
        }
        else {
          size_t v32 = (const protobuf::Intelligence_Condition_ConditionEntry *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        }
        siri::intelligence::ConditionEntry::ConditionEntry((siri::intelligence::ConditionEntry *)&__p, v32);
        unint64_t v33 = *((void *)this + 9);
        if (v33 >= *((void *)this + 10))
        {
          uint64_t v36 = std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(v4, (const siri::intelligence::ConditionEntry *)&__p);
        }
        else
        {
          *(_DWORD *)unint64_t v33 = __p.__r_.__value_.__l.__data_;
          *(void *)(v33 + 8) = __p.__r_.__value_.__l.__size_;
          std::string::size_type v34 = __p.__r_.__value_.__r.__words[2];
          *(void *)(v33 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
          if (v34) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
          }
          if (SHIBYTE(v43) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)(v33 + 24), (const std::string::value_type *)v42, *((std::string::size_type *)&v42 + 1));
          }
          else
          {
            long long v35 = v42;
            *(void *)(v33 + 40) = v43;
            *(_OWORD *)(v33 + 24) = v35;
          }
          *(void *)(v33 + 48) = v44;
          uint64_t v37 = v45;
          *(void *)(v33 + 56) = v45;
          if (v37) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
          }
          *(void *)(v33 + 64) = 0;
          *(void *)(v33 + 72) = 0;
          *(void *)(v33 + 80) = 0;
          std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((void *)(v33 + 64), v46, v47, 0x2E8BA2E8BA2E8BA3 * ((v47 - v46) >> 3));
          uint64_t v36 = v33 + 88;
          *((void *)this + 9) = v33 + 88;
        }
        *((void *)this + 9) = v36;
        siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)&__p);
      }
      else
      {
        *(_DWORD *)this = 1;
        if ((v21 & 0x10) != 0)
        {
          if (!*((void *)a2 + 13))
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21242);
            size_t v22 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || left_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v22->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          if (*((void *)a2 + 13)) {
            size_t v23 = (void *)*((void *)a2 + 13);
          }
          else {
            size_t v23 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          }
          siri::intelligence::Variable::FromProtobuf(&__p, (uint64_t)v23, (uint64_t *)&v40);
          long long v24 = v40;
          long long v40 = 0uLL;
          BOOL v25 = (std::__shared_weak_count *)*((void *)this + 2);
          *(_OWORD *)((char *)this + 8) = v24;
          if (v25)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v25);
            if (*((void *)&v40 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        std::string::operator=(v39, *((const std::string **)a2 + 10));
        if ((*((_DWORD *)a2 + 4) & 0x20) != 0)
        {
          if (!*((void *)a2 + 14))
          {
            google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
            int v26 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || right_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v48, (const char **)&v26->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          }
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          if (*((void *)a2 + 14)) {
            int v27 = (void *)*((void *)a2 + 14);
          }
          else {
            int v27 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          }
          siri::intelligence::Variable::FromProtobuf(&__p, (uint64_t)v27, (uint64_t *)&v40);
          long long v28 = v40;
          long long v40 = 0uLL;
          uint64_t v29 = (std::__shared_weak_count *)*((void *)this + 7);
          *((_OWORD *)this + 3) = v28;
          if (v29)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
            if (*((void *)&v40 + 1)) {
              std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v40 + 1));
            }
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
    }
  }
  return this;
}

void sub_239A9AC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  int v21 = *(std::__shared_weak_count **)(v19 + 16);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  *(void *)(v18 + 72) = v19;
  siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)&__p);
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  size_t v22 = *(std::__shared_weak_count **)(v18 + 56);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  if (*(char *)(v18 + 47) < 0) {
    operator delete(*a10);
  }
  size_t v23 = *(std::__shared_weak_count **)(v18 + 16);
  if (v23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::ConditionEntry::GetType(siri::intelligence::ConditionEntry *this)
{
  return *(unsigned int *)this;
}

_DWORD *siri::intelligence::ConditionEntry::SetType(_DWORD *result, int a2)
{
  *double result = a2;
  return result;
}

uint64_t siri::intelligence::ConditionEntry::GetLeft@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::ConditionEntry::SetLeft(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void siri::intelligence::ConditionEntry::GetOperator(siri::intelligence::ConditionEntry *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

std::string *siri::intelligence::ConditionEntry::SetOperator(std::string *a1, const std::string *a2)
{
  return std::string::operator=(a1 + 1, a2);
}

uint64_t siri::intelligence::ConditionEntry::GetRight@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 56);
  *a2 = *(void *)(this + 48);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::ConditionEntry::SetRight(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 56);
  *(void *)(a1 + 48) = v3;
  *(void *)(a1 + 56) = v2;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void *siri::intelligence::ConditionEntry::GetChildren@<X0>(siri::intelligence::ConditionEntry *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, *((void *)this + 8), *((void *)this + 9), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)this + 9) - *((void *)this + 8)) >> 3));
}

void siri::intelligence::ConditionEntry::SetChildren(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (std::string::value_type **)(a1 + 64);
  if (v2 != (std::string::value_type **)a2) {
    std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(v2, *a2, a2[1], 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3));
  }
}

void siri::intelligence::ConditionEntry::Validate(const void **a1, uint64_t a2, siri::intelligence::ValidationResults *a3)
{
  v65[4] = *MEMORY[0x263EF8340];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_10, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_10))
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, "set");
    std::string::basic_string[abi:ne180100]<0>(v55, "true");
    std::string::basic_string[abi:ne180100]<0>(v56, "unset");
    std::string::basic_string[abi:ne180100]<0>(v57, "false");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_26AD86988, (const void **)&v54.__r_.__value_.__l.__data_, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v57[i + 2]) < 0) {
        operator delete((void *)v57[i]);
      }
    }
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_26AD86988, &dword_239A02000);
    __cxa_guard_release(&_MergedGlobals_10);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86980, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD86980))
  {
    std::string::basic_string[abi:ne180100]<0>(&v54, "==");
    std::string::basic_string[abi:ne180100]<0>(v55, "eq");
    std::string::basic_string[abi:ne180100]<0>(v56, "!=");
    std::string::basic_string[abi:ne180100]<0>(v57, "ne");
    std::string::basic_string[abi:ne180100]<0>(v58, "<");
    std::string::basic_string[abi:ne180100]<0>(v59, "lt");
    std::string::basic_string[abi:ne180100]<0>(v60, "<=");
    std::string::basic_string[abi:ne180100]<0>(v61, "le");
    std::string::basic_string[abi:ne180100]<0>(v62, ">");
    std::string::basic_string[abi:ne180100]<0>(v63, "gt");
    std::string::basic_string[abi:ne180100]<0>(v64, ">=");
    std::string::basic_string[abi:ne180100]<0>(v65, "ge");
    std::set<std::string>::set[abi:ne180100]((uint64_t)&unk_26AD869A0, (const void **)&v54.__r_.__value_.__l.__data_, 12);
    uint64_t v50 = 288;
    do
    {
      if (v54.__r_.__value_.__s.__data_[v50 - 1] < 0) {
        operator delete(*(void **)((char *)&__p.__r_.__value_.__l.__data_ + v50));
      }
      v50 -= 24;
    }
    while (v50);
    __cxa_atexit((void (*)(void *))std::set<std::string>::~set[abi:ne180100], &unk_26AD869A0, &dword_239A02000);
    __cxa_guard_release(&qword_26AD86980);
  }
  int v6 = *(_DWORD *)(a2 + 16);
  if ((v6 & 0x20) == 0) {
    goto LABEL_25;
  }
  if (*(void *)(a2 + 112))
  {
    if ((v6 & 2) == 0) {
      goto LABEL_6;
    }
LABEL_25:
    if ((v6 & 2) == 0) {
      goto LABEL_82;
    }
    goto LABEL_26;
  }
  google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
  int v14 = google::protobuf::internal::LogMessage::operator<<(&v54, "CHECK failed: !value || right_ != nullptr: ");
  google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v14->__r_.__value_.__l.__data_);
  google::protobuf::internal::LogMessage::~LogMessage((void **)&v54.__r_.__value_.__l.__data_);
  int v6 = *(_DWORD *)(a2 + 16);
  if ((v6 & 2) != 0) {
    goto LABEL_25;
  }
LABEL_6:
  if (*((char *)a1 + 23) >= 0) {
    size_t v7 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v7 = (size_t)a1[1];
  }
  unint64_t v8 = &v54;
  std::string::size_type v9 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v54, v7 + 46);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v8 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*((char *)a1 + 23) >= 0) {
      long long v10 = a1;
    }
    else {
      long long v10 = *a1;
    }
    std::string::size_type v9 = (google::protobuf::internal *)memmove(v8, v10, v7);
  }
  strcpy((char *)v8 + v7, "does not define an operator for the expression");
  uint64_t v11 = *(void *)(a2 + 8);
  if (v11)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    google::protobuf::internal::InitProtobufDefaults(v9);
    uint64_t v12 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  int LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v12, (uint64_t)&__p, -1);
  siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_OPERATOR, (long long *)&v54, LineNumFromUnknownField);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  int v6 = *(_DWORD *)(a2 + 16);
  if ((v6 & 2) != 0)
  {
LABEL_26:
    if ((v6 & 0x20) != 0)
    {
      if (!*(void *)(a2 + 112))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
        int v26 = google::protobuf::internal::LogMessage::operator<<(&v54, "CHECK failed: !value || right_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v26->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v54.__r_.__value_.__l.__data_);
      }
    }
    else if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_26AD86988, *(const void ***)(a2 + 80)) == &unk_26AD86990)
    {
      if (*((char *)a1 + 23) >= 0) {
        size_t v15 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        size_t v15 = (size_t)a1[1];
      }
      p_p = &__p;
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v15 + 39);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v15)
      {
        if (*((char *)a1 + 23) >= 0) {
          std::string::size_type v17 = a1;
        }
        else {
          std::string::size_type v17 = *a1;
        }
        memmove(p_p, v17, v15);
      }
      strcpy((char *)p_p + v15, "defines an unsupported unary operator: ");
      uint64_t v18 = *(void *)(a2 + 80);
      int v19 = *(char *)(v18 + 23);
      if (v19 >= 0) {
        uint64_t v20 = *(const std::string::value_type **)(a2 + 80);
      }
      else {
        uint64_t v20 = *(const std::string::value_type **)v18;
      }
      if (v19 >= 0) {
        std::string::size_type v21 = *(unsigned __int8 *)(v18 + 23);
      }
      else {
        std::string::size_type v21 = *(void *)(v18 + 8);
      }
      size_t v22 = std::string::append(&__p, v20, v21);
      std::string v54 = *v22;
      v22->__r_.__value_.__l.__size_ = 0;
      v22->__r_.__value_.__r.__words[2] = 0;
      v22->__r_.__value_.__r.__words[0] = 0;
      uint64_t v23 = *(void *)(a2 + 8);
      if (v23)
      {
        long long v24 = (unsigned __int8 *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v22);
        long long v24 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v51, "");
      int v25 = siri::intelligence::GetLineNumFromUnknownField(v24, (uint64_t)v51, -1);
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_OPERATOR, (long long *)&v54, v25);
      if (v52 < 0) {
        operator delete(v51[0]);
      }
      if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v54.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if ((*(_DWORD *)(a2 + 16) & 0x20) != 0)
    {
      if (!*(void *)(a2 + 112))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
        int v27 = google::protobuf::internal::LogMessage::operator<<(&v54, "CHECK failed: !value || right_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v27->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v54.__r_.__value_.__l.__data_);
      }
      if ((_UNKNOWN *)std::__tree<std::string>::find<std::string>((uint64_t)&unk_26AD869A0, *(const void ***)(a2 + 80)) == &unk_26AD869A8)
      {
        if (*((char *)a1 + 23) >= 0) {
          size_t v28 = *((unsigned __int8 *)a1 + 23);
        }
        else {
          size_t v28 = (size_t)a1[1];
        }
        uint64_t v29 = &__p;
        std::string::basic_string[abi:ne180100]((uint64_t)&__p, v28 + 40);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v28)
        {
          if (*((char *)a1 + 23) >= 0) {
            size_t v30 = a1;
          }
          else {
            size_t v30 = *a1;
          }
          memmove(v29, v30, v28);
        }
        strcpy((char *)v29 + v28, "defines an unsupported binary operator: ");
        uint64_t v31 = *(void *)(a2 + 80);
        int v32 = *(char *)(v31 + 23);
        if (v32 >= 0) {
          unint64_t v33 = *(const std::string::value_type **)(a2 + 80);
        }
        else {
          unint64_t v33 = *(const std::string::value_type **)v31;
        }
        if (v32 >= 0) {
          std::string::size_type v34 = *(unsigned __int8 *)(v31 + 23);
        }
        else {
          std::string::size_type v34 = *(void *)(v31 + 8);
        }
        long long v35 = std::string::append(&__p, v33, v34);
        std::string v54 = *v35;
        v35->__r_.__value_.__l.__size_ = 0;
        v35->__r_.__value_.__r.__words[2] = 0;
        v35->__r_.__value_.__r.__words[0] = 0;
        uint64_t v36 = *(void *)(a2 + 8);
        if (v36)
        {
          uint64_t v37 = (unsigned __int8 *)(v36 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v35);
          uint64_t v37 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v51, "");
        int v38 = siri::intelligence::GetLineNumFromUnknownField(v37, (uint64_t)v51, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_OPERATOR, (long long *)&v54, v38);
        if (v52 < 0) {
          operator delete(v51[0]);
        }
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v54.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
    }
  }
LABEL_82:
  int v39 = *(_DWORD *)(a2 + 16);
  if ((v39 & 0x10) != 0)
  {
    if (*(void *)(a2 + 104)) {
      return;
    }
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21242);
    uint64_t v47 = google::protobuf::internal::LogMessage::operator<<(&v54, "CHECK failed: !value || left_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v47->__r_.__value_.__l.__data_);
    goto LABEL_103;
  }
  if (*(_DWORD *)(a2 + 32) | *(_DWORD *)(a2 + 56)) {
    return;
  }
  if ((v39 & 8) != 0)
  {
    if (*(void *)(a2 + 96)) {
      return;
    }
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v54, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21511);
    char v48 = google::protobuf::internal::LogMessage::operator<<(&v54, "CHECK failed: !value || not_child_ != nullptr: ");
    google::protobuf::internal::LogFinisher::operator=((int)&__p, (const char **)&v48->__r_.__value_.__l.__data_);
LABEL_103:
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v54.__r_.__value_.__l.__data_);
    return;
  }
  if (*((char *)a1 + 23) >= 0) {
    size_t v40 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v40 = (size_t)a1[1];
  }
  uint64_t v41 = &v54;
  long long v42 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v54, v40 + 23);
  if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
  }
  if (v40)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v43 = a1;
    }
    else {
      uint64_t v43 = *a1;
    }
    long long v42 = (google::protobuf::internal *)memmove(v41, v43, v40);
  }
  strcpy((char *)v41 + v40, "has an empty expression");
  uint64_t v44 = *(void *)(a2 + 8);
  if (v44)
  {
    uint64_t v45 = (unsigned __int8 *)(v44 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    google::protobuf::internal::InitProtobufDefaults(v42);
    uint64_t v45 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  int v46 = siri::intelligence::GetLineNumFromUnknownField(v45, (uint64_t)&__p, -1);
  siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_EMPTY_EXPR, (long long *)&v54, v46);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
}

void sub_239A9B794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v28 = 288;
  while (1)
  {
    if (*(char *)(v26 + v28 - 1) < 0) {
      operator delete(*(void **)(v26 + v28 - 24));
    }
    v28 -= 24;
    if (!v28)
    {
      __cxa_guard_abort(&qword_26AD86980);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t siri::intelligence::ResolvedCondition::ResolvedCondition(uint64_t a1, const std::string *a2, uint64_t a3, std::string *a4)
{
  size_t v7 = (std::string *)(a1 + 24);
  *(void *)(a1 + 56) = 0;
  char v48 = (void *)(a1 + 56);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  std::string::operator=((std::string *)a1, a2);
  unint64_t v8 = "OR";
  switch(*(_DWORD *)a3)
  {
    case 1:
      MEMORY[0x23ECAA8E0](v7, "");
      uint64_t v9 = *(void *)(a3 + 8);
      long long v10 = *(std::__shared_weak_count **)(a3 + 16);
      if (v10) {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v9)
      {
        (*(void (**)(std::string *__return_ptr))(*(void *)v9 + 64))(&__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_p = &__p;
        }
        else {
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(v7, (const std::string::value_type *)p_p, size);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (*(char *)(a3 + 47) < 0) {
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a3 + 24), *(void *)(a3 + 32));
        }
        else {
          std::string __p = *(std::string *)(a3 + 24);
        }
        std::string::size_type v39 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v39 = __p.__r_.__value_.__l.__size_;
        }
        if (v39)
        {
          std::operator+<char>();
          if (v57 >= 0) {
            size_t v40 = (const std::string::value_type *)&v56;
          }
          else {
            size_t v40 = (const std::string::value_type *)v56;
          }
          if (v57 >= 0) {
            std::string::size_type v41 = HIBYTE(v57);
          }
          else {
            std::string::size_type v41 = *((void *)&v56 + 1);
          }
          std::string::append(v7, v40, v41);
          if (SHIBYTE(v57) < 0) {
            operator delete((void *)v56);
          }
          uint64_t v42 = *(void *)(a3 + 48);
          uint64_t v43 = *(std::__shared_weak_count **)(a3 + 56);
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v42)
          {
            (*(void (**)(std::string *__return_ptr))(*(void *)v42 + 64))(&v55);
            uint64_t v44 = std::string::insert(&v55, 0, " ");
            long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
            int64_t v57 = v44->__r_.__value_.__r.__words[2];
            long long v56 = v45;
            v44->__r_.__value_.__l.__size_ = 0;
            v44->__r_.__value_.__r.__words[2] = 0;
            v44->__r_.__value_.__r.__words[0] = 0;
            if (v57 >= 0) {
              int v46 = (const std::string::value_type *)&v56;
            }
            else {
              int v46 = (const std::string::value_type *)v56;
            }
            if (v57 >= 0) {
              std::string::size_type v47 = HIBYTE(v57);
            }
            else {
              std::string::size_type v47 = *((void *)&v56 + 1);
            }
            std::string::append(v7, v46, v47);
            if (SHIBYTE(v57) < 0) {
              operator delete((void *)v56);
            }
            if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v55.__r_.__value_.__l.__data_);
            }
          }
          if (v43) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v43);
          }
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if (v10) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v10);
      }
      goto LABEL_19;
    case 2:
      unint64_t v8 = "AND";
      goto LABEL_18;
    case 3:
      goto LABEL_18;
    case 4:
      unint64_t v8 = "NOT";
      goto LABEL_18;
    default:
      unint64_t v8 = "<unknown>";
LABEL_18:
      MEMORY[0x23ECAA8E0](v7, v8);
LABEL_19:
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      *(unsigned char *)(a1 + 48) = siri::intelligence::ConditionEntry::Evaluate(a3, a4, (uint64_t *)&__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      long long v56 = 0uLL;
      int64_t v57 = 0;
      std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(&v56, *(void *)(a3 + 64), *(void *)(a3 + 72), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a3 + 72) - *(void *)(a3 + 64)) >> 3));
      uint64_t v14 = *((void *)&v56 + 1);
      uint64_t v13 = v56;
      if ((void)v56 == *((void *)&v56 + 1)) {
        goto LABEL_48;
      }
      break;
  }
  do
  {
    std::string::basic_string[abi:ne180100]<0>(&v55, "");
    siri::intelligence::ResolvedCondition::ResolvedCondition(&__p, &v55, v13, a4);
    unint64_t v15 = *(void *)(a1 + 64);
    unint64_t v16 = *(void *)(a1 + 72);
    if (v15 < v16)
    {
      long long v17 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v15 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v15 = v17;
      memset(&__p, 0, sizeof(__p));
      uint64_t v18 = v51;
      *(_OWORD *)(v15 + 24) = v50;
      *(void *)(v15 + 40) = v18;
      uint64_t v51 = 0;
      long long v50 = 0uLL;
      *(unsigned char *)(v15 + 48) = v52;
      *(void *)(v15 + 56) = 0;
      *(void *)(v15 + 64) = 0;
      *(void *)(v15 + 72) = 0;
      *(_OWORD *)(v15 + 56) = v53;
      *(void *)(v15 + 72) = v54;
      long long v53 = 0uLL;
      uint64_t v54 = 0;
      int v19 = (char *)(v15 + 80);
      goto LABEL_38;
    }
    unint64_t v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - *v48) >> 4);
    unint64_t v21 = v20 + 1;
    if (v20 + 1 > 0x333333333333333) {
      std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - *v48) >> 4);
    if (2 * v22 > v21) {
      unint64_t v21 = 2 * v22;
    }
    if (v22 >= 0x199999999999999) {
      unint64_t v23 = 0x333333333333333;
    }
    else {
      unint64_t v23 = v21;
    }
    long long v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>(a1 + 72, v23);
    uint64_t v26 = &v24[80 * v20];
    long long v27 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v26 + 2) = *((void *)&__p.__r_.__value_.__l + 2);
    *(_OWORD *)uint64_t v26 = v27;
    memset(&__p, 0, sizeof(__p));
    long long v28 = v50;
    *((void *)v26 + 5) = v51;
    *(_OWORD *)(v26 + 24) = v28;
    uint64_t v51 = 0;
    long long v50 = 0uLL;
    v26[48] = v52;
    *((void *)v26 + 8) = 0;
    *((void *)v26 + 9) = 0;
    *((void *)v26 + 7) = 0;
    *(_OWORD *)(v26 + 56) = v53;
    *((void *)v26 + 9) = v54;
    long long v53 = 0uLL;
    uint64_t v54 = 0;
    uint64_t v29 = *(char **)(a1 + 56);
    size_t v30 = *(char **)(a1 + 64);
    if (v30 == v29)
    {
      int v19 = v26 + 80;
      *(void *)(a1 + 56) = v26;
      *(void *)(a1 + 64) = v26 + 80;
      *(void *)(a1 + 72) = &v24[80 * v25];
      if (v30) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v31 = a4;
      uint64_t v32 = 0;
      do
      {
        unint64_t v33 = &v26[v32];
        std::string::size_type v34 = &v30[v32];
        long long v35 = *(_OWORD *)&v30[v32 - 80];
        *((void *)v33 - 8) = *(void *)&v30[v32 - 64];
        *((_OWORD *)v33 - 5) = v35;
        *((void *)v34 - 9) = 0;
        *((void *)v34 - 8) = 0;
        *((void *)v34 - 10) = 0;
        long long v36 = *(_OWORD *)&v30[v32 - 56];
        *((void *)v33 - 5) = *(void *)&v30[v32 - 40];
        *(_OWORD *)(v33 - 56) = v36;
        *((void *)v34 - 6) = 0;
        *((void *)v34 - 5) = 0;
        *((void *)v34 - 7) = 0;
        *(v33 - 32) = v30[v32 - 32];
        *((void *)v33 - 2) = 0;
        *((void *)v33 - 1) = 0;
        *((void *)v33 - 3) = 0;
        *(_OWORD *)(v33 - 24) = *(_OWORD *)&v30[v32 - 24];
        *((void *)v33 - 1) = *(void *)&v30[v32 - 8];
        *((void *)v34 - 3) = 0;
        *((void *)v34 - 2) = 0;
        *((void *)v34 - 1) = 0;
        v32 -= 80;
      }
      while (&v30[v32] != v29);
      size_t v30 = *(char **)(a1 + 56);
      uint64_t v37 = *(void *)(a1 + 64);
      int v19 = v26 + 80;
      *(void *)(a1 + 56) = &v26[v32];
      *(void *)(a1 + 64) = v26 + 80;
      *(void *)(a1 + 72) = &v24[80 * v25];
      while ((char *)v37 != v30)
      {
        v37 -= 80;
        std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(v37);
      }
      a4 = v31;
      if (v30) {
LABEL_37:
      }
        operator delete(v30);
    }
LABEL_38:
    *(void *)(a1 + 64) = v19;
    std::string::size_type v58 = (void **)&v53;
    std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v58);
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)v50);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
    v13 += 88;
  }
  while (v13 != v14);
LABEL_48:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return a1;
}

void sub_239A9BF34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (v33) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  }
  a13 = a12;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (*(char *)(v32 + 47) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v32 + 23) < 0) {
    operator delete(*(void **)v32);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::ConditionEntry::Evaluate(uint64_t a1, std::string *a2, uint64_t *a3)
{
  uint64_t v4 = a2;
  int v6 = 0;
  while (*(_DWORD *)a1 == 4)
  {
    if (*(void *)(a1 + 64) == *(void *)(a1 + 72))
    {
LABEL_16:
      int v7 = 0;
      return (v6 ^ v7) & 1;
    }
    v6 ^= 1u;
    a1 = *(void *)(a1 + 64);
  }
  int v7 = 1;
  switch(*(_DWORD *)a1)
  {
    case 0:
      return (v6 ^ v7) & 1;
    case 1:
      uint64_t v8 = *(void *)(a1 + 8);
      if (v8)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v8 + 88))(&v66);
      }
      else
      {
        uint64_t v66 = 0;
        long long v67 = 0;
      }
      uint64_t v13 = *(void *)(a1 + 48);
      if (v13)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(void *)v13 + 88))(&v64);
      }
      else
      {
        uint64_t v64 = 0;
        BOOL v65 = 0;
      }
      uint64_t v15 = v66;
      uint64_t v14 = v67;
      if (v67) {
        atomic_fetch_add_explicit(&v67->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v17 = v64;
      unint64_t v16 = v65;
      if (v65) {
        atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v15)
      {
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v18 = a3;
        }
        else {
          uint64_t v18 = (uint64_t *)*a3;
        }
        if (!v17)
        {
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Condition '%s' has no left operand", (const char *)a2, v18);
          int v7 = 1;
          goto LABEL_113;
        }
        int v19 = "Condition expression '%s' has right operand but no left operand";
        goto LABEL_67;
      }
      if (!v17) {
        goto LABEL_70;
      }
      if (*(char *)(v15 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v15 + 32), *(void *)(v15 + 40));
      }
      else {
        std::string v72 = *(std::string *)(v15 + 32);
      }
      if (*(char *)(v17 + 55) < 0) {
        std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v17 + 32), *(void *)(v17 + 40));
      }
      else {
        std::string v71 = *(std::string *)(v17 + 32);
      }
      char v20 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      if ((v72.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v72.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v72.__r_.__value_.__l.__size_;
      }
      std::string::size_type v22 = HIBYTE(v71.__r_.__value_.__r.__words[2]);
      int v23 = SHIBYTE(v71.__r_.__value_.__r.__words[2]);
      if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v22 = v71.__r_.__value_.__l.__size_;
      }
      if (size == v22)
      {
        if ((v71.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          a2 = &v71;
        }
        else {
          a2 = (std::string *)v71.__r_.__value_.__r.__words[0];
        }
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        {
          BOOL v29 = memcmp(v72.__r_.__value_.__l.__data_, a2, v72.__r_.__value_.__l.__size_) != 0;
        }
        else if (*((unsigned char *)&v72.__r_.__value_.__s + 23))
        {
          uint64_t v24 = HIBYTE(v72.__r_.__value_.__r.__words[2]) - 1;
          uint64_t v25 = &v72;
          do
          {
            int v27 = v25->__r_.__value_.__s.__data_[0];
            uint64_t v25 = (std::string *)((char *)v25 + 1);
            int v26 = v27;
            int v28 = a2->__r_.__value_.__s.__data_[0];
            a2 = (std::string *)((char *)a2 + 1);
            BOOL v29 = v26 != v28;
          }
          while (v26 == v28 && v24-- != 0);
        }
        else
        {
          BOOL v29 = 0;
        }
      }
      else
      {
        BOOL v29 = 1;
      }
      if ((v23 & 0x80000000) == 0)
      {
        if ((v20 & 0x80) == 0) {
          goto LABEL_62;
        }
LABEL_69:
        operator delete(v72.__r_.__value_.__l.__data_);
        if (v29) {
          goto LABEL_63;
        }
        goto LABEL_70;
      }
      operator delete(v71.__r_.__value_.__l.__data_);
      if ((*((unsigned char *)&v72.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_69;
      }
LABEL_62:
      if (v29)
      {
LABEL_63:
        if (*((char *)a3 + 23) >= 0) {
          uint64_t v18 = a3;
        }
        else {
          uint64_t v18 = (uint64_t *)*a3;
        }
        int v19 = "Variable type mismatch in condition '%s'";
LABEL_67:
        siri::intelligence::Log::Error((siri::intelligence::Log *)v19, (const char *)a2, v18);
        int v7 = 0;
        goto LABEL_113;
      }
LABEL_70:
      uint64_t v31 = *(unsigned __int8 *)(a1 + 47);
      if ((v31 & 0x80u) != 0) {
        uint64_t v31 = *(void *)(a1 + 32);
      }
      if (v31)
      {
        if (*(char *)(v15 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v72, *(const std::string::value_type **)(v15 + 32), *(void *)(v15 + 40));
        }
        else {
          std::string v72 = *(std::string *)(v15 + 32);
        }
        uint64_t v32 = (unsigned __int16 **)(a1 + 24);
        size_t v33 = strlen(siri::intelligence::TYPE_NUMBER[0]);
        size_t v34 = v33;
        size_t v35 = HIBYTE(v72.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        {
          size_t v37 = v72.__r_.__value_.__l.__size_;
          if (v33 != v72.__r_.__value_.__l.__size_)
          {
            int v38 = siri::intelligence::TYPE_BOOLEAN[0];
            size_t v39 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
            goto LABEL_91;
          }
          if (v33 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          long long v36 = (std::string *)v72.__r_.__value_.__r.__words[0];
        }
        else
        {
          if (v33 != HIBYTE(v72.__r_.__value_.__r.__words[2]))
          {
            int v38 = siri::intelligence::TYPE_BOOLEAN[0];
            size_t v39 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
            goto LABEL_87;
          }
          long long v36 = &v72;
        }
        if (memcmp(v36, siri::intelligence::TYPE_NUMBER[0], v34))
        {
          int v38 = siri::intelligence::TYPE_BOOLEAN[0];
          size_t v39 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
          if ((v35 & 0x80) != 0)
          {
            size_t v37 = v72.__r_.__value_.__l.__size_;
LABEL_91:
            if (v39 != v37)
            {
              std::string::size_type v41 = siri::intelligence::TYPE_STRING[0];
              size_t v42 = strlen(siri::intelligence::TYPE_STRING[0]);
              goto LABEL_106;
            }
            if (v37 == -1) {
              std::string::__throw_out_of_range[abi:ne180100]();
            }
            size_t v40 = (std::string *)v72.__r_.__value_.__r.__words[0];
LABEL_94:
            if (memcmp(v40, v38, v37))
            {
              std::string::size_type v41 = siri::intelligence::TYPE_STRING[0];
              size_t v42 = strlen(siri::intelligence::TYPE_STRING[0]);
              if ((v35 & 0x80) == 0)
              {
LABEL_96:
                if (v42 == v35)
                {
                  uint64_t v43 = &v72;
                  goto LABEL_109;
                }
                goto LABEL_110;
              }
              size_t v37 = v72.__r_.__value_.__l.__size_;
LABEL_106:
              if (v42 == v37)
              {
                if (v37 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                uint64_t v43 = (std::string *)v72.__r_.__value_.__r.__words[0];
                size_t v35 = v37;
LABEL_109:
                if (memcmp(v43, v41, v35)) {
                  goto LABEL_110;
                }
                std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(&v70, (void *)v15, (uint64_t)v14);
                if (*(char *)(v70.__r_.__value_.__r.__words[0] + 95) < 0) {
                  std::string::__init_copy_ctor_external(&v71, *(const std::string::value_type **)(v70.__r_.__value_.__r.__words[0] + 72), *(void *)(v70.__r_.__value_.__r.__words[0] + 80));
                }
                else {
                  std::string v71 = *(std::string *)(v70.__r_.__value_.__r.__words[0] + 72);
                }
                if (v70.__r_.__value_.__l.__size_) {
                  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v70.__r_.__value_.__l.__size_);
                }
                if (v17)
                {
                  std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(&v68, (void *)v17, (uint64_t)v16);
                  if (*(char *)(v68 + 95) < 0) {
                    std::string::__init_copy_ctor_external(&v70, *(const std::string::value_type **)(v68 + 72), *(void *)(v68 + 80));
                  }
                  else {
                    std::string v70 = *(std::string *)(v68 + 72);
                  }
                  if (v69) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v69);
                  }
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v70, "");
                }
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "==")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "eq"))
                {
                  BOOL v57 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&v71, (unsigned __int8 *)&v70);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "!=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "ne"))
                {
                  BOOL v57 = std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((unsigned __int8 *)&v71, (unsigned __int8 *)&v70);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "<")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "lt"))
                {
                  BOOL v57 = std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v71, &v70);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "<=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "le"))
                {
                  BOOL v57 = std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v71.__r_.__value_.__l.__data_, (const void **)&v70.__r_.__value_.__l.__data_);
                }
                else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), ">")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "gt"))
                {
                  BOOL v57 = std::operator>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)&v71.__r_.__value_.__l.__data_, (const void **)&v70.__r_.__value_.__l.__data_);
                }
                else
                {
                  if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), ">=")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "ge"))
                  {
                    if (*(char *)(a1 + 47) >= 0) {
                      uint64_t v63 = a1 + 24;
                    }
                    else {
                      uint64_t v63 = *(void *)(a1 + 24);
                    }
                    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported numeric operator found in condition: %s", v62, v63);
                    int v7 = 0;
                    goto LABEL_177;
                  }
                  BOOL v57 = std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v71, &v70);
                }
                int v7 = v57;
LABEL_177:
                if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v70.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v71.__r_.__value_.__l.__data_);
                }
                goto LABEL_111;
              }
LABEL_110:
              int v7 = 0;
              goto LABEL_111;
            }
            if (v14 && v46)
            {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
              int v47 = v46[66];
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            else
            {
              int v47 = v46[66];
            }
            int v7 = v47 != 0;
            if (v17)
            {
              std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableBoolean,siri::intelligence::Variable>(&v71, (void *)v17, (uint64_t)v16);
              LODWORD(v17) = *(unsigned char *)(v71.__r_.__value_.__r.__words[0] + 66) != 0;
              if (v71.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v71.__r_.__value_.__l.__size_);
              }
            }
            int v51 = *(char *)(a1 + 47);
            if (v51 < 0)
            {
              if (*(void *)(a1 + 32) != 2) {
                goto LABEL_155;
              }
              char v52 = *v32;
            }
            else
            {
              char v52 = (_WORD *)(a1 + 24);
              if (v51 != 2) {
                goto LABEL_155;
              }
            }
            if (*v52 == 15677)
            {
LABEL_156:
              int v7 = (v47 != 0) ^ v17 ^ 1;
              goto LABEL_111;
            }
LABEL_155:
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "eq"))
            {
              goto LABEL_156;
            }
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "!=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "ne"))
            {
              int v7 = (v47 != 0) ^ v17;
              goto LABEL_111;
            }
            if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "set")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "true"))
            {
              if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "unset")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "false"))
              {
                if (*(char *)(a1 + 47) >= 0) {
                  uint64_t v59 = a1 + 24;
                }
                else {
                  uint64_t v59 = *(void *)(a1 + 24);
                }
                siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported BOOLean operator found in condition: %s", v58, v59);
                goto LABEL_110;
              }
              BOOL v56 = v47 == 0;
              goto LABEL_149;
            }
LABEL_111:
            if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v72.__r_.__value_.__l.__data_);
            }
            goto LABEL_113;
          }
LABEL_87:
          if (v39 != v35)
          {
            std::string::size_type v41 = siri::intelligence::TYPE_STRING[0];
            size_t v42 = strlen(siri::intelligence::TYPE_STRING[0]);
            goto LABEL_96;
          }
          size_t v40 = &v72;
          size_t v37 = v35;
          goto LABEL_94;
        }
        if (v14 && v44)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          double v45 = v44[9];
          std::__shared_weak_count::__release_shared[abi:ne180100](v14);
        }
        else
        {
          double v45 = v44[9];
        }
        if (v17)
        {
          if (v16 && v49)
          {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
            double v50 = v49[9];
            std::__shared_weak_count::__release_shared[abi:ne180100](v16);
          }
          else
          {
            double v50 = v49[9];
          }
        }
        else
        {
          double v50 = 0.0;
        }
        int v53 = *(char *)(a1 + 47);
        if (v53 < 0)
        {
          if (*(void *)(a1 + 32) == 2)
          {
            std::string v55 = *v32;
            int v54 = **v32;
            goto LABEL_143;
          }
        }
        else if (v53 == 2)
        {
          int v54 = *(unsigned __int16 *)v32;
          std::string v55 = (_WORD *)(a1 + 24);
LABEL_143:
          if (v54 == 15677 || *v55 == 29029)
          {
            BOOL v56 = v45 == v50;
LABEL_149:
            int v7 = v56;
            goto LABEL_111;
          }
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "!=")
          || std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "ne"))
        {
          int v7 = v45 != v50;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "<")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "lt"))
        {
          int v7 = v45 < v50;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "<=")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "le"))
        {
          int v7 = v45 <= v50;
        }
        else if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), ">")|| std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "gt"))
        {
          int v7 = v45 > v50;
        }
        else
        {
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), ">=")&& !std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((void *)(a1 + 24), "ge"))
          {
            if (*(char *)(a1 + 47) >= 0) {
              uint64_t v61 = a1 + 24;
            }
            else {
              uint64_t v61 = *(void *)(a1 + 24);
            }
            siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported numeric operator found in condition: %s", v60, v61);
            goto LABEL_110;
          }
          int v7 = v45 >= v50;
        }
        goto LABEL_111;
      }
      int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 40))(v15) ^ 1;
LABEL_113:
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      return (v6 ^ v7) & 1;
    case 2:
      uint64_t v9 = *(void *)(a1 + 64);
      uint64_t v10 = *(void *)(a1 + 72);
      while (v9 != v10)
      {
        int v7 = siri::intelligence::ConditionEntry::Evaluate(v9, v4, a3);
        if (!v7) {
          break;
        }
        v9 += 88;
      }
      return (v6 ^ v7) & 1;
    case 3:
      uint64_t v11 = *(void *)(a1 + 64);
      uint64_t v12 = *(void *)(a1 + 72);
      if (v11 == v12) {
        goto LABEL_16;
      }
      do
      {
        int v7 = siri::intelligence::ConditionEntry::Evaluate(v11, v4, a3);
        if (v7) {
          break;
        }
        v11 += 88;
      }
      while (v11 != v12);
      return (v6 ^ v7) & 1;
    default:
      goto LABEL_16;
  }
}

void sub_239A9CC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a36 < 0)
  {
    operator delete(a31);
    if (!v37)
    {
LABEL_7:
      if (!v36) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
  }
  else if (!v37)
  {
    goto LABEL_7;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  if (!v36)
  {
LABEL_9:
    if (a12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a12);
    }
    if (a14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](a14);
    }
    _Unwind_Resume(exception_object);
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v36);
  goto LABEL_9;
}

void siri::intelligence::ResolvedCondition::GetId(siri::intelligence::ResolvedCondition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

void siri::intelligence::ResolvedCondition::GetExpression(siri::intelligence::ResolvedCondition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 47) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 3), *((void *)this + 4));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 24);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 5);
  }
}

uint64_t siri::intelligence::ResolvedCondition::GetValue(siri::intelligence::ResolvedCondition *this)
{
  return *((unsigned __int8 *)this + 48);
}

void *siri::intelligence::ResolvedCondition::GetChildren@<X0>(siri::intelligence::ResolvedCondition *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(a2, *((void *)this + 7), *((void *)this + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)this + 8) - *((void *)this + 7)) >> 4));
}

double siri::intelligence::Condition::Condition(siri::intelligence::Condition *this)
{
  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

{
  double result;

  double result = 0.0;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *(void *)this = 0;
  *((_DWORD *)this + 6) = 0;
  return result;
}

void siri::intelligence::Condition::GetId(siri::intelligence::Condition *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)this, *((void *)this + 1));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)this;
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 2);
  }
}

std::string *siri::intelligence::Condition::GetRootCondition@<X0>(siri::intelligence::Condition *this@<X0>, std::string *a2@<X8>)
{
  return siri::intelligence::ConditionEntry::ConditionEntry(a2, (siri::intelligence::Condition *)((char *)this + 24));
}

std::string *siri::intelligence::ConditionEntry::ConditionEntry(std::string *this, const siri::intelligence::ConditionEntry *a2)
{
  LODWORD(this->__r_.__value_.__l.__data_) = *(_DWORD *)a2;
  std::string::size_type v4 = *((void *)a2 + 2);
  this->__r_.__value_.__l.__size_ = *((void *)a2 + 1);
  this->__r_.__value_.__r.__words[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(this + 1, *((const std::string::value_type **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(_OWORD *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = v5;
  }
  std::string::size_type v6 = *((void *)a2 + 7);
  this[2].__r_.__value_.__r.__words[0] = *((void *)a2 + 6);
  this[2].__r_.__value_.__l.__size_ = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  this[2].__r_.__value_.__r.__words[2] = 0;
  this[3].__r_.__value_.__r.__words[0] = 0;
  this[3].__r_.__value_.__l.__size_ = 0;
  std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(&this[2].__r_.__value_.__r.__words[2], *((void *)a2 + 8), *((void *)a2 + 9), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((void *)a2 + 9) - *((void *)a2 + 8)) >> 3));
  return this;
}

void sub_239A9CEFC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Condition::SetRootCondition(siri::intelligence::Condition *this, const std::string *a2)
{
  *((_DWORD *)this + 6) = a2->__r_.__value_.__l.__data_;
  std::string::size_type v4 = (siri::intelligence::Condition *)((char *)this + 24);
  std::string::size_type size = a2->__r_.__value_.__l.__size_;
  std::string::size_type v5 = a2->__r_.__value_.__r.__words[2];
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = (std::__shared_weak_count *)*((void *)this + 5);
  *((void *)this + 4) = size;
  *((void *)this + 5) = v5;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  std::string::operator=((std::string *)this + 2, a2 + 1);
  std::string::pointer data = a2[2].__r_.__value_.__l.__data_;
  std::string::size_type v8 = a2[2].__r_.__value_.__l.__size_;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = (std::__shared_weak_count *)*((void *)this + 10);
  *((void *)this + 9) = data;
  *((void *)this + 10) = v8;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  if (v4 != (const siri::intelligence::ConditionEntry *)a2)
  {
    uint64_t v11 = a2[2].__r_.__value_.__r.__words[2];
    uint64_t v12 = (uint64_t)a2[3].__r_.__value_.__l.__data_;
    std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>((std::string::value_type **)this + 11, v11, v12, 0x2E8BA2E8BA2E8BA3 * ((v12 - v11) >> 3));
  }
}

uint64_t siri::intelligence::Condition::Evaluate(siri::intelligence::Condition *this, std::string *a2)
{
  return siri::intelligence::ConditionEntry::Evaluate((uint64_t)this + 24, a2, (uint64_t *)this);
}

uint64_t siri::intelligence::Condition::GetResolvedCondition@<X0>(const std::string *this@<X0>, std::string *a2@<X1>, uint64_t a3@<X8>)
{
  return siri::intelligence::ResolvedCondition::ResolvedCondition(a3, this, (uint64_t)&this[1], a2);
}

void siri::intelligence::ConditionEntry::~ConditionEntry(siri::intelligence::ConditionEntry *this)
{
  std::string::size_type v4 = (void **)((char *)this + 64);
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](&v4);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

BOOL std::operator!=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 1;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) != 0;
  }
  if (a1[23])
  {
    uint64_t v6 = v2 - 1;
    do
    {
      int v8 = *a1++;
      int v7 = v8;
      int v9 = *a2++;
      BOOL v10 = v7 == v9;
      uint64_t v2 = v7 != v9;
      BOOL v10 = !v10 || v6-- == 0;
    }
    while (!v10);
  }
  return v2;
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableBoolean,siri::intelligence::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableString,siri::intelligence::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL std::operator==[abi:ne180100]<std::allocator<char>>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

BOOL std::operator<[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 < 0;
  }
  else {
    return v4 < v5;
  }
}

BOOL std::operator<=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2 = *((char *)a1 + 23);
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  if (v3 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v2 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v2 >= 0) {
    int v7 = a1;
  }
  else {
    int v7 = *a1;
  }
  if (v6 >= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v6;
  }
  int v9 = memcmp(v5, v7, v8);
  if (v9) {
    return v9 >= 0;
  }
  else {
    return v4 >= v6;
  }
}

BOOL std::operator>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, const void **a2)
{
  int v2 = *((char *)a1 + 23);
  int v3 = *((char *)a2 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v4 = (size_t)a2[1];
  }
  if (v3 >= 0) {
    size_t v5 = a2;
  }
  else {
    size_t v5 = *a2;
  }
  if (v2 >= 0) {
    size_t v6 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v6 = (size_t)a1[1];
  }
  if (v2 >= 0) {
    int v7 = a1;
  }
  else {
    int v7 = *a1;
  }
  if (v6 >= v4) {
    size_t v8 = v4;
  }
  else {
    size_t v8 = v6;
  }
  int v9 = memcmp(v5, v7, v8);
  if (v9) {
    return v9 < 0;
  }
  else {
    return v4 < v6;
  }
}

BOOL std::operator>=[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void *a2)
{
  int v2 = *((char *)a2 + 23);
  int v3 = *((char *)a1 + 23);
  if (v3 >= 0) {
    size_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v4 = a1[1];
  }
  if (v3 < 0) {
    a1 = (void *)*a1;
  }
  if (v2 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = a2[1];
  }
  if (v2 < 0) {
    a2 = (void *)*a2;
  }
  if (v5 >= v4) {
    size_t v6 = v4;
  }
  else {
    size_t v6 = v5;
  }
  int v7 = memcmp(a1, a2, v6);
  if (v7) {
    return v7 >= 0;
  }
  else {
    return v4 >= v5;
  }
}

void std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = (char *)**a1;
  if (v2)
  {
    size_t v4 = (char *)v1[1];
    size_t v5 = v2;
    if (v4 != v2)
    {
      do
        siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)(v4 - 88));
      while (v4 != v2);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<siri::intelligence::ConditionEntry>::__push_back_slow_path<siri::intelligence::ConditionEntry>(void *a1, const siri::intelligence::ConditionEntry *a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x2E8BA2E8BA2E8BALL) {
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  }
  size_t v6 = a1 + 2;
  if (0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - *a1) >> 3)) >= 0x1745D1745D1745DLL) {
    unint64_t v7 = 0x2E8BA2E8BA2E8BALL;
  }
  else {
    unint64_t v7 = v3;
  }
  int v19 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v17 = v7;
  *(void *)uint64_t v18 = v7 + 88 * v2;
  *(void *)&v18[16] = v7 + 88 * v8;
  siri::intelligence::ConditionEntry::ConditionEntry(*(std::string **)v18, a2);
  uint64_t v9 = 0;
  *(void *)&v18[8] = *(void *)v18 + 88;
  uint64_t v11 = *a1;
  for (uint64_t i = a1[1];
        i + v9 != v11;
        siri::intelligence::ConditionEntry::ConditionEntry((std::string *)(v9 + *(void *)v18), (const siri::intelligence::ConditionEntry *)(v9 + i)))
  {
    v9 -= 88;
  }
  uint64_t v12 = a1[2];
  long long v13 = *(_OWORD *)&v18[8];
  uint64_t v16 = *(void *)&v18[8];
  long long v14 = *(_OWORD *)a1;
  *a1 = *(void *)v18 + v9;
  *(_OWORD *)uint64_t v18 = v14;
  *(_OWORD *)(a1 + 1) = v13;
  *(void *)&v18[16] = v12;
  unint64_t v17 = v14;
  std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer((uint64_t)&v17);
  return v16;
}

void sub_239A9D680(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

uint64_t std::__split_buffer<siri::intelligence::ConditionEntry>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)(i - 88));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239A9D7D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ConditionEntry>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      uint64_t v7 = a3 + v6;
      uint64_t v8 = a1 + v6;
      *(_DWORD *)uint64_t v7 = *(_DWORD *)(a1 + v6);
      uint64_t v9 = *(void *)(a1 + v6 + 16);
      *(void *)(v7 + 8) = *(void *)(a1 + v6 + 8);
      *(void *)(v7 + 16) = v9;
      if (v9) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = (std::string *)(v7 + 24);
      uint64_t v11 = (const std::string::value_type **)(v8 + 24);
      if (*(char *)(v8 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(void *)(a1 + v6 + 32));
      }
      else
      {
        long long v12 = *(_OWORD *)v11;
        v10->__r_.__value_.__r.__words[2] = *(void *)(v8 + 40);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      long long v13 = (void *)(a3 + v6);
      uint64_t v14 = *(void *)(v8 + 56);
      v13[6] = *(void *)(v8 + 48);
      v13[7] = v14;
      if (v14) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
      }
      v13[8] = 0;
      v13[9] = 0;
      v13[10] = 0;
      std::vector<siri::intelligence::ConditionEntry>::__init_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>();
      v6 += 88;
    }
    while (v8 + 88 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_239A9D948(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + v2 + 16);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v2)
  {
    uint64_t v5 = v1 - 88;
    do
    {
      siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)(v5 + v2));
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(std::string::value_type **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)a1[2];
  uint64_t v9 = *a1;
  if (0x2E8BA2E8BA2E8BA3 * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      uint64_t v11 = v9;
      if (v10 != v9)
      {
        do
          siri::intelligence::ConditionEntry::~ConditionEntry((siri::intelligence::ConditionEntry *)(v10 - 88));
        while (v10 != v9);
        uint64_t v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x2E8BA2E8BA2E8BALL) {
      std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0x2E8BA2E8BA2E8BA3 * (v8 >> 3);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    if (v12 >= 0x1745D1745D1745DLL) {
      unint64_t v14 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v14 = v13;
    }
    std::vector<siri::intelligence::ConditionEntry>::__vallocate[abi:ne180100](a1, v14);
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(a2, a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  if (0x2E8BA2E8BA2E8BA3 * ((a1[1] - v9) >> 3) < a4)
  {
    uint64_t v16 = a2 + 8 * ((a1[1] - v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(a2, v16, v9);
    uint64_t v15 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ConditionEntry>,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(v16, a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::string::value_type *)v15;
    return;
  }
  unint64_t v17 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(a2, a3, v9);
  for (uint64_t i = a1[1];
        i != v17;
  a1[1] = v17;
}

void sub_239A9DB48(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_239A9DB50(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string::value_type *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *,siri::intelligence::ConditionEntry *>(uint64_t a1, uint64_t a2, std::string::value_type *a3)
{
  if (a1 != a2)
  {
    uint64_t v4 = a1 + 64;
    do
    {
      uint64_t v5 = (std::string *)a3;
      uint64_t v6 = v4 - 64;
      *(_DWORD *)a3 = *(_DWORD *)(v4 - 64);
      uint64_t v8 = *(void *)(v4 - 56);
      uint64_t v7 = *(void *)(v4 - 48);
      if (v7) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v9 = (std::__shared_weak_count *)*((void *)a3 + 2);
      *((void *)a3 + 1) = v8;
      *((void *)a3 + 2) = v7;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      }
      std::string::operator=(v5 + 1, (const std::string *)(v4 - 40));
      std::string::size_type v11 = *(void *)(v4 - 16);
      std::string::size_type v10 = *(void *)(v4 - 8);
      if (v10) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
      }
      std::string::size_type size = (std::__shared_weak_count *)v5[2].__r_.__value_.__l.__size_;
      v5[2].__r_.__value_.__r.__words[0] = v11;
      v5[2].__r_.__value_.__l.__size_ = v10;
      if (size) {
        std::__shared_weak_count::__release_shared[abi:ne180100](size);
      }
      if (&v5[1] != (std::string *)(v4 - 40)) {
        std::vector<siri::intelligence::ConditionEntry>::__assign_with_size[abi:ne180100]<siri::intelligence::ConditionEntry*,siri::intelligence::ConditionEntry*>(&v5[2].__r_.__value_.__r.__words[2]);
      }
      v4 += 88;
      a3 = &v5[3].__r_.__value_.__s.__data_[16];
    }
    while (v6 + 88 != a2);
    return &v5[3].__r_.__value_.__s.__data_[16];
  }
  return a3;
}

void std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 56);
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

void *std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<siri::intelligence::ResolvedCondition>::__vallocate[abi:ne180100](result, a4);
    double result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ResolvedCondition>,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239A9DD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ResolvedCondition>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::vector<siri::intelligence::ConditionEntry>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::FlowTest_Step>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ResolvedCondition>,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = (std::string *)(a4 + v7);
      uint64_t v9 = (long long *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        v8->__r_.__value_.__r.__words[2] = *((void *)v9 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      }
      std::string::size_type v11 = (std::string *)(a4 + v7 + 24);
      unint64_t v12 = (const std::string::value_type **)(a2 + v7 + 24);
      if (*(char *)(a2 + v7 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(v11, *v12, *(void *)(a2 + v7 + 32));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(a4 + v7 + 40) = *(void *)(a2 + v7 + 40);
        *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v13;
      }
      char v14 = *(unsigned char *)(a2 + v7 + 48);
      *(void *)(a4 + v7 + 56) = 0;
      uint64_t v15 = a4 + v7 + 56;
      *(unsigned char *)(v15 - 8) = v14;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>();
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_239A9DE88(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + v2 + 23) < 0) {
    operator delete(*(void **)(v1 + v2));
  }
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      std::allocator_traits<std::allocator<siri::intelligence::ResolvedCondition>>::destroy[abi:ne180100]<siri::intelligence::ResolvedCondition,void>(v4 + v2);
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::SingleDocParser(YAML::SingleDocParser *this, YAML::Scanner *a2, const YAML::Directives *a3)
{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  operator new();
}

{
  *(void *)this = a2;
  *((void *)this + 1) = a3;
  operator new();
}

void YAML::SingleDocParser::~SingleDocParser(char **this)
{
}

{
  std::__tree<std::string>::destroy((uint64_t)(this + 3), this[4]);
  std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0);
}

void YAML::SingleDocParser::HandleDocument(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (!*((void *)v4 + 17)) {
    __assert_rtn("HandleDocument", "singledocparser.cpp", 30, "!m_scanner.empty()");
  }
  if (*(void *)(a1 + 48)) {
    __assert_rtn("HandleDocument", "singledocparser.cpp", 31, "!m_curAnchor");
  }
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t))(*(void *)a2 + 16))(a2, v5 + 8);
  if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 1) {
    YAML::Scanner::pop(*(int64x2_t **)a1);
  }
  YAML::SingleDocParser::HandleNode(a1, a2);
  (*(void (**)(uint64_t))(*(void *)a2 + 24))(a2);
  while (1)
  {
    uint64_t v6 = *(YAML::Scanner **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!*((void *)v6 + 17) || *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) != 2) {
      break;
    }
    YAML::Scanner::pop(*(int64x2_t **)a1);
  }
}

void YAML::SingleDocParser::HandleNode(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((void *)v4 + 17))
  {
    unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v29 = *(void *)(v5 + 8);
    int v30 = *(_DWORD *)(v5 + 16);
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "?");
      (*(void (**)(uint64_t, uint64_t *, void **, void, void))(*(void *)a2 + 72))(a2, &v29, &__p, 0, 0);
      if (SHIBYTE(v28) < 0) {
        operator delete(__p);
      }
      YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
      (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
    }
    else if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 17)
    {
      unint64_t v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      uint64_t v8 = YAML::SingleDocParser::LookupAnchor(a1, &v29, (const void **)(v7 + 24));
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 40))(a2, &v29, v8);
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
    else
    {
      std::string __p = 0;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      int v23 = 0;
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      uint64_t v22 = 0;
      YAML::SingleDocParser::ParseProperties((YAML::Scanner **)a1, (uint64_t)&__p, &v22, (uint64_t)&v23);
      uint64_t v9 = HIBYTE(v25);
      if (v25 < 0) {
        uint64_t v9 = v24;
      }
      if (v9) {
        (*(void (**)(uint64_t, uint64_t *, void **))(*(void *)a2 + 88))(a2, &v29, &v23);
      }
      unint64_t v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      unint64_t v11 = v10;
      int v12 = *(_DWORD *)(v10 + 4);
      if (v12 == 19 && YAML::IsNullString((unsigned __int8 **)(v10 + 24)))
      {
        (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v29, v22);
LABEL_27:
        YAML::Scanner::pop(*(int64x2_t **)a1);
      }
      else
      {
        uint64_t v13 = HIBYTE(v28);
        if (v28 < 0) {
          uint64_t v13 = v27;
        }
        if (!v13)
        {
          if (v12 == 20) {
            char v14 = "!";
          }
          else {
            char v14 = "?";
          }
          MEMORY[0x23ECAA8E0](&__p, v14);
          int v12 = *(_DWORD *)(v11 + 4);
        }
        switch(v12)
        {
          case 3:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, &v29, &__p, v22, 1);
            YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
            goto LABEL_30;
          case 4:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, &v29, &__p, v22, 1);
            YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
            goto LABEL_34;
          case 5:
          case 6:
          case 7:
          case 10:
          case 11:
          case 12:
          case 13:
            goto LABEL_41;
          case 8:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(void *)a2 + 56))(a2, &v29, &__p, v22, 2);
            YAML::SingleDocParser::HandleSequence((YAML::Scanner **)a1, a2);
LABEL_30:
            uint64_t v15 = (void (**)(uint64_t))(*(void *)a2 + 64);
            goto LABEL_35;
          case 9:
            goto LABEL_33;
          case 14:
            uint64_t v16 = *(void **)(a1 + 16);
            uint64_t v17 = v16[5];
            if (!v17
              || *(_DWORD *)(*(void *)(v16[1] + (((unint64_t)(v17 + v16[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * ((v17 + v16[4] - 1) & 0x3FF)) != 4)
            {
              goto LABEL_41;
            }
LABEL_33:
            (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, &v29, &__p, v22, 2);
            YAML::SingleDocParser::HandleMap((YAML::Scanner **)a1, a2);
LABEL_34:
            uint64_t v15 = (void (**)(uint64_t))(*(void *)a2 + 80);
LABEL_35:
            (*v15)(a2);
            break;
          default:
            if ((v12 - 19) < 2)
            {
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, unint64_t))(*(void *)a2 + 48))(a2, &v29, &__p, v22, v11 + 24);
              goto LABEL_27;
            }
LABEL_41:
            BOOL v18 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__p, "?");
            uint64_t v19 = v22;
            if (v18)
            {
              (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)a2 + 32))(a2, &v29, v22);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v20, "");
              (*(void (**)(uint64_t, uint64_t *, void **, uint64_t, void **))(*(void *)a2 + 48))(a2, &v29, &__p, v19, v20);
              if (v21 < 0) {
                operator delete(v20[0]);
              }
            }
            break;
        }
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(v23);
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(__p);
      }
    }
  }
  else
  {
    int v6 = *(_DWORD *)(*(void *)a1 + 16);
    std::string __p = *(void **)(*(void *)a1 + 8);
    LODWORD(v27) = v6;
    (*(void (**)(uint64_t, void **, void))(*(void *)a2 + 32))(a2, &__p, 0);
  }
}

void sub_239A9E754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleMap(YAML::Scanner **a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 > 13)
  {
    if (v4 == 14)
    {
      YAML::SingleDocParser::HandleCompactMap((uint64_t)a1, a2);
    }
    else if (v4 == 15)
    {
      YAML::SingleDocParser::HandleCompactMapWithNoKey((uint64_t)a1, a2);
    }
  }
  else if (v4 == 4)
  {
    YAML::SingleDocParser::HandleBlockMap((uint64_t)a1, a2);
  }
  else if (v4 == 9)
  {
    YAML::SingleDocParser::HandleFlowMap((uint64_t)a1, a2);
  }
}

uint64_t YAML::SingleDocParser::LookupAnchor(uint64_t a1, _DWORD *a2, const void **a3)
{
  uint64_t v4 = a1 + 32;
  uint64_t v5 = *(void *)(a1 + 32);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v7 = a1 + 40;
  uint64_t v8 = a1 + 32;
  do
  {
    BOOL v9 = std::less<std::string>::operator()[abi:ne180100](v7, (const void **)(v5 + 32), a3);
    unint64_t v10 = (uint64_t *)(v5 + 8);
    if (!v9)
    {
      unint64_t v10 = (uint64_t *)v5;
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v10;
  }
  while (*v10);
  if (v8 == v4 || std::less<std::string>::operator()[abi:ne180100](v7, a3, (const void **)(v8 + 32)))
  {
LABEL_9:
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v13, "the referenced anchor is not defined");
    YAML::Exception::Exception((uint64_t)exception, a2, (uint64_t)v13);
    *exceptiouint64_t n = &unk_26ED2A588;
  }
  return *(void *)(v8 + 56);
}

void sub_239A9E9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseProperties(YAML::Scanner **a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  if (*(char *)(a4 + 23) < 0)
  {
    **(unsigned char **)a4 = 0;
    *(void *)(a4 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a4 = 0;
    *(unsigned char *)(a4 + 23) = 0;
  }
  *a3 = 0;
  while (1)
  {
    uint64_t v8 = *a1;
    YAML::Scanner::EnsureTokensInQueue(*a1);
    if (!*((void *)v8 + 17)) {
      break;
    }
    int v9 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
    if (v9 == 16)
    {
      YAML::SingleDocParser::ParseAnchor(a1, a3, (std::string *)a4);
    }
    else
    {
      if (v9 != 18) {
        return;
      }
      YAML::SingleDocParser::ParseTag(a1, a2);
    }
  }
}

void YAML::SingleDocParser::HandleSequence(YAML::Scanner **a1, uint64_t a2)
{
  int v4 = *(_DWORD *)(YAML::Scanner::peek(*a1) + 4);
  if (v4 == 8)
  {
    YAML::SingleDocParser::HandleFlowSequence((uint64_t)a1, a2);
  }
  else if (v4 == 3)
  {
    YAML::SingleDocParser::HandleBlockSequence((uint64_t)a1, a2);
  }
}

void YAML::SingleDocParser::HandleBlockSequence(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v18) = 2;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v18);
  do
  {
    uint64_t v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v15 = *(_DWORD *)(*(void *)a1 + 16);
      int v16 = *(std::string **)(*(void *)a1 + 8);
      int v17 = v15;
      std::string::basic_string[abi:ne180100]<0>(&v18, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)exception, &v16, (uint64_t)&v18);
      *exceptiouint64_t n = &unk_26ED2A588;
    }
    unint64_t v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    unint64_t v7 = v6;
    int v8 = *(_DWORD *)(v6 + 16);
    long long v18 = *(_OWORD *)v6;
    int v19 = v8;
    if (*(char *)(v6 + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
    }
    else
    {
      long long v9 = *(_OWORD *)(v6 + 24);
      __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    memset(&v21, 0, sizeof(v21));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v21, *(long long **)(v7 + 48), *(long long **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3));
    int v22 = *(_DWORD *)(v7 + 72);
    if ((DWORD1(v18) & 0xFFFFFFFD) != 5)
    {
      uint64_t v13 = __cxa_allocate_exception(0x38uLL);
      std::string::basic_string[abi:ne180100]<0>(&v16, "end of sequence not found");
      YAML::Exception::Exception((uint64_t)v13, (_DWORD *)&v18 + 2, (uint64_t)&v16);
      *uint64_t v13 = &unk_26ED2A588;
    }
    YAML::Scanner::pop(*(int64x2_t **)a1);
    int v10 = DWORD1(v18);
    if (DWORD1(v18) != 5)
    {
      unint64_t v11 = *(int64x2_t **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (v11[8].i64[1] && (unint64_t v12 = YAML::Scanner::peek(*(YAML::Scanner **)a1), (*(_DWORD *)(v12 + 4) | 2) == 7)) {
        (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32))(a2, v12 + 8, 0);
      }
      else {
        YAML::SingleDocParser::HandleNode(a1, a2);
      }
    }
    int v16 = &v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  while (v10 != 5);
  YAML::CollectionStack::PopCollectionType(*(void **)(a1 + 16), 2);
}

void sub_239A9EE18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowSequence(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v22[0]) = 4;
  std::deque<YAML::CollectionType::value>::push_back(v4, v22);
  while (1)
  {
    uint64_t v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      unint64_t v11 = (uint64_t *)a1;
      unint64_t v12 = exception;
      uint64_t v13 = *v11;
      uint64_t v14 = *(void *)(v13 + 8);
      LODWORD(v13) = *(_DWORD *)(v13 + 16);
      uint64_t v23 = v14;
      int v24 = v13;
      std::string::basic_string[abi:ne180100]<0>(v22, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v12, &v23, (uint64_t)v22);
      *unint64_t v12 = &unk_26ED2A588;
    }
    if (*(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 10) {
      break;
    }
    YAML::SingleDocParser::HandleNode(a1, a2);
    unint64_t v6 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v6[8].i64[1])
    {
      int v15 = __cxa_allocate_exception(0x38uLL);
      int v16 = (uint64_t *)a1;
      int v17 = v15;
      uint64_t v18 = *v16;
      uint64_t v19 = *(void *)(v18 + 8);
      LODWORD(v18) = *(_DWORD *)(v18 + 16);
      uint64_t v23 = v19;
      int v24 = v18;
      std::string::basic_string[abi:ne180100]<0>(v22, "end of sequence flow not found");
      YAML::Exception::Exception((uint64_t)v17, &v23, (uint64_t)v22);
      void *v17 = &unk_26ED2A588;
    }
    unint64_t v7 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8 != 10)
    {
      if (v8 != 13)
      {
        unint64_t v20 = v7;
        std::string v21 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(v22, "end of sequence flow not found");
        YAML::Exception::Exception((uint64_t)v21, (_DWORD *)(v20 + 8), (uint64_t)v22);
        *std::string v21 = &unk_26ED2A588;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  long long v9 = *(void **)(a1 + 16);

  YAML::CollectionStack::PopCollectionType(v9, 4);
}

void sub_239A9F120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v16) {
    __cxa_free_exception(v15);
  }
  _Unwind_Resume(exception_object);
}

void YAML::CollectionStack::PopCollectionType(void *a1, int a2)
{
  uint64_t v3 = a1[5];
  if (v3) {
    int v4 = *(_DWORD *)(*(void *)(a1[1] + (((unint64_t)(v3 + a1[4] - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
  }
                   + 4 * ((v3 + a1[4] - 1) & 0x3FF));
  else {
    int v4 = 0;
  }
  if (v4 != a2) {
    __assert_rtn("PopCollectionType", "collectionstack.h", 31, "type == GetCurCollectionType()");
  }
  uint64_t v6 = a1[1];
  uint64_t v5 = a1[2];
  if (v5 == v6) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v6) << 7) - 1;
  }
  a1[5] = v3 - 1;
  if ((unint64_t)(v7 - (v3 + a1[4]) - 2047) <= 0xFFFFFFFFFFFFF7FFLL)
  {
    operator delete(*(void **)(v5 - 8));
    a1[2] -= 8;
  }
}

void YAML::SingleDocParser::HandleBlockMap(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v17) = 1;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v17);
  do
  {
    while (1)
    {
      uint64_t v5 = *(int64x2_t **)a1;
      YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
      if (!v5[8].i64[1])
      {
        exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
        int v13 = *(_DWORD *)(*(void *)a1 + 16);
        int v15 = *(std::string **)(*(void *)a1 + 8);
        int v16 = v13;
        std::string::basic_string[abi:ne180100]<0>(&v17, "end of map not found");
        YAML::Exception::Exception((uint64_t)exception, &v15, (uint64_t)&v17);
        *exceptiouint64_t n = &unk_26ED2A588;
      }
      unint64_t v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
      unint64_t v7 = v6;
      int v8 = *(_DWORD *)(v6 + 16);
      long long v17 = *(_OWORD *)v6;
      int v18 = v8;
      if (*(char *)(v6 + 47) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 24), *(void *)(v6 + 32));
      }
      else
      {
        long long v9 = *(_OWORD *)(v6 + 24);
        __p.__r_.__value_.__r.__words[2] = *(void *)(v6 + 40);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
      }
      memset(&v20, 0, sizeof(v20));
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v20, *(long long **)(v7 + 48), *(long long **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3));
      int v21 = *(_DWORD *)(v7 + 72);
      if (DWORD1(v17) == 6)
      {
        YAML::Scanner::pop(*(int64x2_t **)a1);
        char v11 = 0;
      }
      else
      {
        if (DWORD1(v17) == 14)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          if (DWORD1(v17) != 15)
          {
            uint64_t v14 = __cxa_allocate_exception(0x38uLL);
            std::string::basic_string[abi:ne180100]<0>(&v15, "end of map not found");
            YAML::Exception::Exception((uint64_t)v14, (_DWORD *)&v17 + 2, (uint64_t)&v15);
            void *v14 = &unk_26ED2A588;
          }
          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32))(a2, (char *)&v17 + 8, 0);
        }
        int v10 = *(int64x2_t **)a1;
        YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
        if (v10[8].i64[1] && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
        {
          YAML::Scanner::pop(*(int64x2_t **)a1);
          YAML::SingleDocParser::HandleNode(a1, a2);
        }
        else
        {
          (*(void (**)(uint64_t, char *, void))(*(void *)a2 + 32))(a2, (char *)&v17 + 8, 0);
        }
        char v11 = 1;
      }
      int v15 = &v20;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        break;
      }
      if ((v11 & 1) == 0) {
        goto LABEL_21;
      }
    }
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  while ((v11 & 1) != 0);
LABEL_21:
  YAML::CollectionStack::PopCollectionType(*(void **)(a1 + 16), 1);
}

void sub_239A9F53C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v28 & 1) == 0)
    {
LABEL_6:
      YAML::Token::~Token(&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v28)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v27);
  goto LABEL_6;
}

void YAML::SingleDocParser::HandleFlowMap(uint64_t a1, uint64_t a2)
{
  YAML::Scanner::pop(*(int64x2_t **)a1);
  int v4 = *(void **)(a1 + 16);
  LODWORD(v20[0]) = 3;
  std::deque<YAML::CollectionType::value>::push_back(v4, v20);
  while (1)
  {
    uint64_t v5 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v5[8].i64[1])
    {
      exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
      int v13 = *(_DWORD *)(*(void *)a1 + 16);
      uint64_t v21 = *(void *)(*(void *)a1 + 8);
      int v22 = v13;
      std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)exception, &v21, (uint64_t)v20);
      *exceptiouint64_t n = &unk_26ED2A588;
    }
    unint64_t v6 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    uint64_t v21 = *(void *)(v6 + 8);
    int v22 = *(_DWORD *)(v6 + 16);
    int v7 = *(_DWORD *)(v6 + 4);
    if (v7 == 14)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
      goto LABEL_7;
    }
    if (v7 == 11) {
      break;
    }
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v21, 0);
LABEL_7:
    int v8 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (v8[8].i64[1] && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
    {
      YAML::Scanner::pop(*(int64x2_t **)a1);
      YAML::SingleDocParser::HandleNode(a1, a2);
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v21, 0);
    }
    long long v9 = *(int64x2_t **)a1;
    YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
    if (!v9[8].i64[1])
    {
      uint64_t v14 = __cxa_allocate_exception(0x38uLL);
      int v15 = *(_DWORD *)(*(void *)a1 + 16);
      uint64_t v18 = *(void *)(*(void *)a1 + 8);
      int v19 = v15;
      std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
      YAML::Exception::Exception((uint64_t)v14, &v18, (uint64_t)v20);
      void *v14 = &unk_26ED2A588;
    }
    unint64_t v10 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
    int v11 = *(_DWORD *)(v10 + 4);
    if (v11 != 11)
    {
      if (v11 != 13)
      {
        unint64_t v16 = v10;
        long long v17 = __cxa_allocate_exception(0x38uLL);
        std::string::basic_string[abi:ne180100]<0>(v20, "end of map flow not found");
        YAML::Exception::Exception((uint64_t)v17, (_DWORD *)(v16 + 8), (uint64_t)v20);
        void *v17 = &unk_26ED2A588;
      }
      YAML::Scanner::pop(*(int64x2_t **)a1);
    }
  }
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::CollectionStack::PopCollectionType(*(void **)(a1 + 16), 3);
}

void sub_239A9F8F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (v18) {
    __cxa_free_exception(v17);
  }
  _Unwind_Resume(exception_object);
}

void YAML::SingleDocParser::HandleCompactMap(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  LODWORD(v7) = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  uint64_t v7 = *(void *)(v5 + 8);
  int v8 = *(_DWORD *)(v5 + 16);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  unint64_t v6 = *(YAML::Scanner **)a1;
  YAML::Scanner::EnsureTokensInQueue(*(YAML::Scanner **)a1);
  if (*((void *)v6 + 17) && *(_DWORD *)(YAML::Scanner::peek(*(YAML::Scanner **)a1) + 4) == 15)
  {
    YAML::Scanner::pop(*(int64x2_t **)a1);
    YAML::SingleDocParser::HandleNode(a1, a2);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t *, void))(*(void *)a2 + 32))(a2, &v7, 0);
  }
  YAML::CollectionStack::PopCollectionType(*(void **)(a1 + 16), 5);
}

void YAML::SingleDocParser::HandleCompactMapWithNoKey(uint64_t a1, uint64_t a2)
{
  int v4 = *(void **)(a1 + 16);
  int v7 = 5;
  std::deque<YAML::CollectionType::value>::push_back(v4, &v7);
  unint64_t v5 = YAML::Scanner::peek(*(YAML::Scanner **)a1);
  (*(void (**)(uint64_t, unint64_t, void))(*(void *)a2 + 32))(a2, v5 + 8, 0);
  YAML::Scanner::pop(*(int64x2_t **)a1);
  YAML::SingleDocParser::HandleNode(a1, a2);
  unint64_t v6 = *(void **)(a1 + 16);

  YAML::CollectionStack::PopCollectionType(v6, 5);
}

void YAML::SingleDocParser::ParseTag(YAML::Scanner **a1, uint64_t a2)
{
  unint64_t v4 = YAML::Scanner::peek(*a1);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5)
  {
    unint64_t v6 = v4;
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v9, "cannot assign multiple tags to the same node");
    YAML::Exception::Exception((uint64_t)exception, (_DWORD *)(v6 + 8), (uint64_t)v9);
    *exceptiouint64_t n = &unk_26ED2A588;
  }
  YAML::Tag::Tag((uint64_t)v9, v4);
  YAML::Tag::Translate((YAML::Tag *)v9, a1[1], &__p);
  std::string::operator=((std::string *)a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  YAML::Scanner::pop((int64x2_t *)*a1);
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9[1]);
  }
}

void sub_239A9FC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
  {
    operator delete(__p);
    if ((v21 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v21)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v20);
  goto LABEL_6;
}

void YAML::SingleDocParser::ParseAnchor(YAML::Scanner **a1, uint64_t *a2, std::string *a3)
{
  unint64_t v6 = (const std::string *)YAML::Scanner::peek(*a1);
  int v7 = v6;
  if (*a2)
  {
    exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(v11, "cannot assign multiple anchors to the same node");
    YAML::Exception::Exception((uint64_t)exception, &v7->__r_.__value_.__r.__words[1], (uint64_t)v11);
    *exceptiouint64_t n = &unk_26ED2A588;
  }
  uint64_t v8 = (uint64_t)&v6[1];
  std::string::operator=(a3, v6 + 1);
  *a2 = YAML::SingleDocParser::RegisterAnchor((uint64_t)a1, v8);
  long long v9 = *a1;

  YAML::Scanner::pop((int64x2_t *)v9);
}

void sub_239A9FD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Tag::~Tag(void **this)
{
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

uint64_t YAML::SingleDocParser::RegisterAnchor(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    unint64_t v6 = (uint64_t **)(a1 + 32);
    uint64_t v5 = *(uint64_t **)(a1 + 32);
    uint64_t v7 = *(void *)(a1 + 48) + 1;
    *(void *)(a1 + 48) = v7;
    if (v5)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v8 = (uint64_t **)v5;
          long long v9 = (const void **)(v5 + 4);
          if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, (const void **)a2, (const void **)v5 + 4)) {
            break;
          }
          uint64_t v5 = *v8;
          unint64_t v6 = v8;
          if (!*v8) {
            goto LABEL_13;
          }
        }
        if (!std::less<std::string>::operator()[abi:ne180100](a1 + 40, v9, (const void **)a2)) {
          break;
        }
        unint64_t v6 = v8 + 1;
        uint64_t v5 = v8[1];
        if (!v5) {
          goto LABEL_13;
        }
      }
      char v10 = *v6;
      if (*v6) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v8 = (uint64_t **)(a1 + 32);
    }
LABEL_13:
    char v10 = (uint64_t *)operator new(0x40uLL);
    int v11 = (std::string *)(v10 + 4);
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
      v10[6] = *(void *)(a2 + 16);
    }
    v10[7] = 0;
    *char v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *unint64_t v6 = v10;
    uint64_t v12 = **(void **)(a1 + 24);
    int v13 = v10;
    if (v12)
    {
      *(void *)(a1 + 24) = v12;
      int v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 32), v13);
    ++*(void *)(a1 + 40);
LABEL_19:
    v10[7] = v7;
    return v7;
  }
  return 0;
}

void sub_239A9FF28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::deque<YAML::CollectionType::value>::push_back(void *a1, _DWORD *a2)
{
  unint64_t v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      uint64_t v24 = v6 >> 3;
      uint64_t v25 = (char *)a1[3];
      int v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        uint64_t v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v31);
        uint64_t v34 = v33;
        size_t v35 = operator new(0x1000uLL);
        long long v36 = &v32[8 * v24];
        size_t v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            uint64_t v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            std::string::size_type v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v75);
            long long v36 = &v76[8 * (v75 >> 2)];
            size_t v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v76;
            size_t v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)long long v36 = v35;
        char v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              long long v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v84);
              int v87 = v85;
              long long v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              char v78 = v36;
              if (!v88)
              {
                char v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                size_t v91 = v36;
                BOOL v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)size_t v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              size_t v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              long long v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              char v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        BOOL v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      int v28 = operator new(0x1000uLL);
      uint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v51);
          unint64_t v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          std::string v55 = (uint64_t *)a1[1];
          BOOL v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            BOOL v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            uint64_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)uint64_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            unint64_t v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        size_t v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            size_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v96);
            size_t v99 = &v97[8 * (v96 >> 2)];
            size_t v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              BOOL v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)BOOL v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            int v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            std::string v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              size_t v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)uint64_t v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v4;
      int v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          size_t v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          double v45 = (uint64_t *)a1[1];
          uint64_t v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            char v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)char v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          int v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            uint64_t v5 = (char *)a1[1];
          }
          uint64_t v23 = &v5[8 * v19];
          uint64_t v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    unint64_t v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(void *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_239AA0400(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100](void **a1, void *a2)
{
  double result = *a1;
  *a1 = a2;
  if (result)
  {
    std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](result);
    JUMPOUT(0x23ECAACC0);
  }
  return result;
}

uint64_t std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void __cxx_global_array_dtor_1()
{
  uint64_t v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0) {
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    }
    v0 -= 24;
  }
  while (v0);
}

siri::intelligence::Memory *siri::intelligence::Memory::Memory(siri::intelligence::Memory *this)
{
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  return this;
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  *((void *)this + 4) = 0;
  *((void *)this + 5) = 0;
  *((void *)this + 8) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 6) = (char *)this + 56;
  return this;
}

void siri::intelligence::Memory::Clear(siri::intelligence::Memory *this)
{
  uint64_t v1 = this;
  (*(void (**)(void))(**(void **)this + 24))(*(void *)this);
  uint64_t v2 = (char *)*((void *)v1 + 7);
  uint64_t v1 = (siri::intelligence::Memory *)((char *)v1 + 56);
  std::__tree<std::string>::destroy((uint64_t)v1 - 8, v2);
  *((void *)v1 - 1) = v1;
  *(void *)uint64_t v1 = 0;
  *((void *)v1 + 1) = 0;
}

void siri::intelligence::Memory::ClearChangedVariableNames(char **this)
{
  uint64_t v1 = this + 7;
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  *(v1 - 1) = v1;
  *uint64_t v1 = 0;
  v1[1] = 0;
}

uint64_t siri::intelligence::Memory::IsEmpty(siri::intelligence::Memory *this)
{
  return (*(uint64_t (**)(void))(**(void **)this + 40))();
}

uint64_t siri::intelligence::Memory::GetArrayIndex(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v3 = 0;
  if (!a3 || !*(unsigned char *)(a2 + 48)) {
    return v3;
  }
  siri::intelligence::GetLiteralType((std::string *)(a2 + 24), &__s1);
  size_t v7 = strlen(siri::intelligence::TYPE_NUMBER[0]);
  size_t v8 = v7;
  size_t v9 = v27;
  if ((char)v27 < 0)
  {
    if (v7 != v26)
    {
      int v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
      size_t v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
      size_t v9 = v26;
LABEL_16:
      if (v12 == v9)
      {
        if (v9 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        uint64_t v14 = __s1;
LABEL_19:
        if (memcmp(v14, v11, v9)) {
          goto LABEL_20;
        }
        siri::intelligence::Memory::GetVariable(a1, a2 + 24, &lpsrc);
        if (lpsrc)
        {
          if (v17)
          {
            uint64_t v19 = v24;
            if (v24)
            {
              uint64_t v3 = 1;
              atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
              *a3 = (int)v17[9];
              std::__shared_weak_count::__release_shared[abi:ne180100](v19);
            }
            else
            {
              *a3 = (int)v17[9];
              uint64_t v3 = 1;
            }
LABEL_38:
            if (v24) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v24);
            }
            goto LABEL_40;
          }
          if (*(char *)(a2 + 47) >= 0) {
            uint64_t v21 = a2 + 24;
          }
          else {
            uint64_t v21 = *(void *)(a2 + 24);
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index has non-numeric variable reference: %s", v18, v21);
        }
        else
        {
          if (*(char *)(a2 + 47) >= 0) {
            uint64_t v20 = a2 + 24;
          }
          else {
            uint64_t v20 = *(void *)(a2 + 24);
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index refers to undefined variable: %s", v16, v20);
        }
        uint64_t v3 = 0;
        goto LABEL_38;
      }
      goto LABEL_20;
    }
    if (v7 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    p_s1 = __s1;
  }
  else
  {
    if (v7 != v27)
    {
      int v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
      size_t v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
      goto LABEL_13;
    }
    p_s1 = &__s1;
  }
  if (memcmp(p_s1, siri::intelligence::TYPE_NUMBER[0], v8))
  {
    int v11 = (const void *)siri::intelligence::TYPE_UNKNOWN;
    size_t v12 = strlen(siri::intelligence::TYPE_UNKNOWN);
    if ((v9 & 0x80) != 0)
    {
      size_t v9 = v26;
      goto LABEL_16;
    }
LABEL_13:
    if (v12 == v9)
    {
      uint64_t v14 = &__s1;
      goto LABEL_19;
    }
LABEL_20:
    if (*(char *)(a2 + 47) >= 0) {
      uint64_t v15 = a2 + 24;
    }
    else {
      uint64_t v15 = *(void *)(a2 + 24);
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Array index has non-numeric value: %s", v13, v15);
    uint64_t v3 = 0;
    goto LABEL_40;
  }
  *a3 = siri::intelligence::StringToIntegralType<int>((const std::string *)(a2 + 24), 0);
  uint64_t v3 = 1;
LABEL_40:
  if ((char)v27 < 0) {
    operator delete(__s1);
  }
  return v3;
}

void sub_239AA09BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetVariable(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  siri::intelligence::Memory::GetLiteralVariable(a2, &v23);
  if (v23)
  {
    uint64_t v6 = v24;
    *a3 = v23;
    a3[1] = v6;
    return;
  }
  siri::intelligence::ParseVariableComponents(a2, &v21);
  if (v21 != v22)
  {
    siri::intelligence::Memory::GetRoot(&v19, a1, a2, 0);
    size_t v7 = v19;
    if (v19)
    {
      uint64_t v8 = v22;
      uint64_t v9 = v22 - 56;
      uint64_t v10 = std::__tree<std::string>::find<std::string>((uint64_t)(v19 + 9), (const void **)(v22 - 56));
      if (v7 + 10 == (void **)v10)
      {
        size_t v12 = 0;
        int v11 = 0;
      }
      else
      {
        size_t v12 = *(const void **)(v10 + 56);
        int v11 = *(std::__shared_weak_count **)(v10 + 64);
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      if (*(unsigned char *)(v8 - 8))
      {
        int v18 = 0;
        char ArrayIndex = siri::intelligence::Memory::GetArrayIndex(a1, v9, &v18);
        if (v12) {
          char v14 = ArrayIndex;
        }
        else {
          char v14 = 0;
        }
        if ((v14 & 1) == 0
        {
          *a3 = 0;
          a3[1] = 0;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
          goto LABEL_25;
        }
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        siri::intelligence::VariableArray::GetItem((uint64_t)v15, v18, v17);
        size_t v12 = (const void *)v17[0];
        BOOL v16 = (std::__shared_weak_count *)v17[1];
        if (v11)
        {
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          std::__shared_weak_count::__release_shared[abi:ne180100](v11);
        }
      }
      else
      {
        BOOL v16 = v11;
      }
      *a3 = v12;
      a3[1] = v16;
    }
    else
    {
      *a3 = 0;
      a3[1] = 0;
    }
LABEL_25:
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    goto LABEL_27;
  }
  *a3 = 0;
  a3[1] = 0;
LABEL_27:
  uint64_t v19 = (void **)&v21;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
}

void sub_239AA0BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, std::__shared_weak_count *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  a12 = (void **)&a14;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a12);
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetRoot(std::__shared_weak_count **a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, std::__shared_weak_count **a4@<X8>)
{
  siri::intelligence::ParseVariableComponents(a2, &v59);
  uint64_t v7 = v59;
  uint64_t v8 = v60 - v59;
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v60 - v59) >> 3)) <= 1)
  {
    uint64_t v9 = a1[1];
    *a4 = *a1;
    a4[1] = v9;
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    goto LABEL_107;
  }
  uint64_t v46 = a4;
  BOOL v56 = 0;
  uint64_t v57 = 0;
  unint64_t v58 = 0;
  uint64_t v10 = *a1;
  int v11 = a1[1];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v8 = v60 - v7;
  }
  if (v8 == 56 || v10 == 0)
  {
    uint64_t v13 = v10;
    char v14 = v11;
LABEL_12:
    unsigned __int8 *v46 = v13;
    v46[1] = v14;
    goto LABEL_106;
  }
  uint64_t v15 = 0;
  uint64_t v45 = a2;
  unint64_t v16 = 1;
  uint64_t v47 = a1;
  while (1)
  {
    uint64_t v17 = (void *)(v7 + v15);
    int v18 = v57;
    if ((unint64_t)v57 >= v58)
    {
      uint64_t v19 = (std::string *)std::vector<siri::intelligence::VariableComponent>::__push_back_slow_path<siri::intelligence::VariableComponent const&>((uint64_t *)&v56, (long long *)(v7 + v15));
    }
    else
    {
      std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>((int)&v58, v57, (long long *)(v7 + v15));
      uint64_t v19 = (std::string *)((char *)v18 + 56);
    }
    uint64_t v57 = v19;
    if (!*(unsigned char *)(v7 + v15 + 48)) {
      break;
    }
    int v53 = 0;
    if ((siri::intelligence::Memory::GetArrayIndex((uint64_t)a1, v7 + v15, &v53) & 1) == 0)
    {
      unsigned __int8 *v46 = 0;
      v46[1] = 0;
      goto LABEL_103;
    }
    uint64_t v20 = std::__tree<std::string>::find<std::string>((uint64_t)&v10[3], (const void **)(v7 + v15));
    uint64_t v21 = v20;
    if (&v10[3].__shared_owners_ == (uint64_t *)v20)
    {
      uint64_t v23 = 0;
LABEL_33:
      if (!a3) {
        goto LABEL_54;
      }
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>((const std::string *)(v7 + v15), lpsrc);
      size_t v26 = lpsrc[0];
      unsigned __int8 v27 = (std::__shared_weak_count *)lpsrc[1];
      double v50 = lpsrc[0];
      unint64_t v51 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::VariableDictionary::AddProperty((uint64_t)v10, (uint64_t *)&v50);
      if (v51) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v51);
      }
      goto LABEL_56;
    }
    uint64_t v22 = *(const void **)(v20 + 56);
    uint64_t v23 = *(std::__shared_weak_count **)(v21 + 64);
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (!v22) {
      goto LABEL_33;
    }
    if (!v24)
    {
      if (*(char *)(v7 + v15 + 23) < 0) {
        uint64_t v17 = (void *)*v17;
      }
      if (*(char *)(v45 + 23) >= 0) {
        uint64_t v35 = v45;
      }
      else {
        uint64_t v35 = *(void *)v45;
      }
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Reference to non-array component '%s' in variable reference: %s", v25, v17, v35);
LABEL_54:
      unsigned __int8 *v46 = 0;
      v46[1] = 0;
      int v36 = 1;
      char v14 = v11;
      goto LABEL_83;
    }
    size_t v26 = v24;
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      unsigned __int8 v27 = v23;
    }
    else
    {
      unsigned __int8 v27 = 0;
    }
LABEL_56:
    unint64_t v37 = (uint64_t)(v26[10] - v26[9]) >> 4;
    int v38 = v53;
    if (v37 <= v53)
    {
      if (v37 != v53 || a3 == 0)
      {
        unsigned __int8 *v46 = 0;
        v46[1] = 0;
        int v36 = 1;
        char v14 = v11;
        if (v27) {
          goto LABEL_82;
        }
        goto LABEL_83;
      }
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(lpsrc);
      unint64_t v40 = (std::__shared_weak_count *)lpsrc[1];
      long long v49 = *(_OWORD *)lpsrc;
      lpsrc[0] = 0;
      lpsrc[1] = 0;
      if ((void)v49)
      {
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](v26 + 9, &v49);
        *((unsigned char *)v26 + 64) = 1;
        unint64_t v40 = (std::__shared_weak_count *)*((void *)&v49 + 1);
      }
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      if (lpsrc[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
      }
      int v38 = v53;
    }
    siri::intelligence::VariableArray::GetItem((uint64_t)v26, v38, lpsrc);
    if (!lpsrc[0])
    {
      uint64_t v10 = 0;
LABEL_76:
      char v14 = 0;
      goto LABEL_77;
    }
    if (!v10) {
      goto LABEL_76;
    }
    char v14 = (std::__shared_weak_count *)lpsrc[1];
    if (lpsrc[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
    }
LABEL_77:
    if (v11) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    }
    if (lpsrc[1]) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
    }
    int v36 = 0;
    if (v27) {
LABEL_82:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v27);
LABEL_83:
    uint64_t v13 = v10;
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    a1 = v47;
    if (v36) {
      goto LABEL_104;
    }
LABEL_86:
    uint64_t v7 = v59;
    BOOL v41 = v16++ >= 0x6DB6DB6DB6DB6DB7 * ((v60 - v59) >> 3) - 1;
    v15 += 56;
    BOOL v42 = v41 || v13 == 0;
    int v11 = v14;
    uint64_t v10 = v13;
    if (v42) {
      goto LABEL_12;
    }
  }
  uint64_t v28 = std::__tree<std::string>::find<std::string>((uint64_t)&v10[3], (const void **)(v7 + v15));
  uint64_t v29 = v28;
  if (&v10[3].__shared_owners_ == (uint64_t *)v28)
  {
    unint64_t v31 = 0;
LABEL_39:
    if (!a3) {
      goto LABEL_101;
    }
    char v14 = (std::__shared_weak_count *)operator new(0x78uLL);
    v14->__shared_owners_ = 0;
    v14->__shared_weak_owners_ = 0;
    v14->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29300;
    uint64_t v13 = v14 + 1;
    siri::intelligence::VariableDictionary::VariableDictionary(&v14[1].__vftable, (const std::string *)(v7 + v15));
    uint64_t v54 = v14 + 1;
    std::string v55 = v14;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    siri::intelligence::VariableDictionary::AddProperty((uint64_t)v10, (uint64_t *)&v54);
    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
LABEL_42:
    char v34 = 0;
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    if (!v11) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  uint64_t v30 = *(const void **)(v28 + 56);
  unint64_t v31 = *(std::__shared_weak_count **)(v29 + 64);
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v30) {
    goto LABEL_39;
  }
  if (v32)
  {
    uint64_t v13 = v32;
    if (v31)
    {
      atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
      char v14 = v31;
      goto LABEL_42;
    }
    char v14 = 0;
    char v34 = 1;
    if (!v11)
    {
LABEL_44:
      if ((v34 & 1) == 0) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      if (v31) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v31);
      }
      goto LABEL_86;
    }
LABEL_43:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    goto LABEL_44;
  }
  uint64_t v43 = (void *)(v7 + v15);
  if (*(char *)(v7 + v15 + 23) < 0) {
    uint64_t v43 = (void *)*v43;
  }
  if (*(char *)(v45 + 23) >= 0) {
    uint64_t v44 = v45;
  }
  else {
    uint64_t v44 = *(void *)v45;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Reference to non-dictionary component '%s' in variable reference: %s", v33, v43, v44);
LABEL_101:
  unsigned __int8 *v46 = 0;
  v46[1] = 0;
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
LABEL_103:
  char v14 = v11;
LABEL_104:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
LABEL_106:
  lpsrc[0] = &v56;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)lpsrc);
LABEL_107:
  BOOL v56 = (void **)&v59;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v56);
}

void sub_239AA1214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void ***a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void **a25)
{
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  a20 = &a25;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a25 = (void **)(v27 - 120);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a25);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::CreateVariable(std::__shared_weak_count **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X3>, void **a5@<X8>)
{
  siri::intelligence::ParseVariableComponents(a2, &v33);
  if (v33 == v34)
  {
    *a5 = 0;
    a5[1] = 0;
    goto LABEL_31;
  }
  if (*(char *)(v34 - 33) < 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)(v34 - 56), *(void *)(v34 - 48));
  }
  else
  {
    long long v10 = *(_OWORD *)(v34 - 56);
    v32.__r_.__value_.__r.__words[2] = *(void *)(v34 - 40);
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v10;
  }
  *a5 = 0;
  a5[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  int IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
  int v12 = IsEquivalentType;
  if (v31 < 0)
  {
    operator delete(__p);
    if (v12) {
      goto LABEL_8;
    }
  }
  else if (IsEquivalentType)
  {
LABEL_8:
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x78uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED27560;
    char v14 = v13 + 1;
    siri::intelligence::VariableString::VariableString(&v13[1].__vftable, &v32);
LABEL_17:
    *a5 = v14;
    a5[1] = v13;
LABEL_18:
    std::string::operator=((std::string *)&v14[1].__shared_owners_, a3);
    uint64_t v19 = *(unsigned __int8 *)(a4 + 23);
    if ((v19 & 0x80u) != 0) {
      uint64_t v19 = *(void *)(a4 + 8);
    }
    if (v19) {
      ((void (*)(std::__shared_weak_count *, uint64_t))v14->__on_zero_shared)(v14, a4);
    }
    siri::intelligence::Memory::GetRoot(a1, a2, 1, (std::__shared_weak_count **)&__p);
    uint64_t v20 = __p;
    if (__p)
    {
      v28[0] = (uint64_t)v14;
      v28[1] = (uint64_t)v13;
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::VariableDictionary::AddProperty((uint64_t)v20, v28);
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    if (v30) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v30);
    }
    goto LABEL_29;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_NUMBER[0]);
  int v15 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
  int v16 = v15;
  if (v31 < 0)
  {
    operator delete(__p);
    if (v16) {
      goto LABEL_12;
    }
  }
  else if (v15)
  {
LABEL_12:
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x68uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED291C0;
    char v14 = v13 + 1;
    siri::intelligence::VariableNumber::VariableNumber(&v13[1].__vftable, &v32);
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_BOOLEAN[0]);
  int v17 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
  int v18 = v17;
  if (v31 < 0)
  {
    operator delete(__p);
    if (v18) {
      goto LABEL_16;
    }
  }
  else if (v17)
  {
LABEL_16:
    uint64_t v13 = (std::__shared_weak_count *)operator new(0x60uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29170;
    char v14 = v13 + 1;
    siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)&v13[1], &v32);
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_DICTIONARY[0]);
  int v21 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
  if (v31 < 0) {
    operator delete(__p);
  }
  if (v21)
  {
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string &,void>(&v32, &__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
    int v22 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
    if (v31 < 0) {
      operator delete(__p);
    }
    if (v22)
    {
      std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string &,void>(&v32, &__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_REFERENCE[0]);
      int v23 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
      if (v31 < 0) {
        operator delete(__p);
      }
      if (v23)
      {
        std::allocate_shared[abi:ne180100]<siri::intelligence::VariableReference,std::allocator<siri::intelligence::VariableReference>,std::string &,void>(&__p, &v32);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_FUNCTION);
        int v25 = siri::intelligence::IsEquivalentType((unsigned __int8 *)a3, (unsigned __int8 *)&__p);
        if (v31 < 0) {
          operator delete(__p);
        }
        if (!v25)
        {
          size_t v26 = &v32;
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            size_t v26 = (std::string *)v32.__r_.__value_.__r.__words[0];
          }
          if ((a3->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v27 = (uint64_t *)a3;
          }
          else {
            uint64_t v27 = (uint64_t *)a3->__r_.__value_.__r.__words[0];
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported type for variable '%s': '%s'", v24, v26, v27);
          goto LABEL_29;
        }
        std::allocate_shared[abi:ne180100]<siri::intelligence::VariableFunction,std::allocator<siri::intelligence::VariableFunction>,std::string &,void>((uint64_t *)&__p, &v32);
      }
    }
  }
  char v14 = (std::__shared_weak_count *)__p;
  uint64_t v13 = v30;
  *a5 = __p;
  a5[1] = v13;
  if (v14) {
    goto LABEL_18;
  }
LABEL_29:
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v32.__r_.__value_.__l.__data_);
  }
LABEL_31:
  v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v32);
}

void sub_239AA1744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  std::string __p = &a27;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::GetLiteralVariable(uint64_t a1@<X1>, void *a2@<X8>)
{
  siri::intelligence::GetLiteralType((std::string *)a1, &__s1);
  size_t v4 = strlen(siri::intelligence::TYPE_NUMBER[0]);
  size_t v5 = v4;
  size_t v6 = v22;
  if ((char)v22 < 0)
  {
    size_t v8 = v21;
    if (v4 != v21)
    {
      uint64_t v9 = siri::intelligence::TYPE_BOOLEAN[0];
      size_t v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      goto LABEL_15;
    }
    if (v4 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v7 = __s1;
  }
  else
  {
    if (v4 != v22)
    {
      uint64_t v9 = siri::intelligence::TYPE_BOOLEAN[0];
      size_t v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
LABEL_11:
      if (v10 != v6)
      {
        int v12 = siri::intelligence::TYPE_STRING[0];
        size_t v13 = strlen(siri::intelligence::TYPE_STRING[0]);
        goto LABEL_20;
      }
      p_s1 = &__s1;
      size_t v8 = v6;
      goto LABEL_18;
    }
    uint64_t v7 = &__s1;
  }
  if (!memcmp(v7, siri::intelligence::TYPE_NUMBER[0], v5))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], a1);
LABEL_25:
    long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    goto LABEL_37;
  }
  uint64_t v9 = siri::intelligence::TYPE_BOOLEAN[0];
  size_t v10 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
  if ((v6 & 0x80) == 0) {
    goto LABEL_11;
  }
  size_t v8 = v21;
LABEL_15:
  if (v10 != v8)
  {
    int v12 = siri::intelligence::TYPE_STRING[0];
    size_t v13 = strlen(siri::intelligence::TYPE_STRING[0]);
    goto LABEL_27;
  }
  if (v8 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  p_s1 = __s1;
LABEL_18:
  if (!memcmp(p_s1, v9, v8))
  {
    _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
    (*(void (**)(std::string::size_type, uint64_t))(*(void *)__p.__r_.__value_.__l.__data_ + 16))(__p.__r_.__value_.__r.__words[0], a1);
    goto LABEL_25;
  }
  int v12 = siri::intelligence::TYPE_STRING[0];
  size_t v13 = strlen(siri::intelligence::TYPE_STRING[0]);
  if ((v6 & 0x80) != 0)
  {
    size_t v8 = v21;
LABEL_27:
    if (v13 == v8)
    {
      if (v8 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      char v14 = __s1;
      size_t v6 = v8;
      goto LABEL_30;
    }
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_38;
  }
LABEL_20:
  if (v13 != v6) {
    goto LABEL_31;
  }
  char v14 = &__s1;
LABEL_30:
  if (memcmp(v14, v12, v6)) {
    goto LABEL_31;
  }
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableStringENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v19);
  uint64_t v16 = v19;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a1 + 8);
  }
  std::string::basic_string(&__p, (const std::string *)a1, 1uLL, v17 - 2, (std::allocator<char> *)&v23);
  (*(void (**)(uint64_t, std::string *))(*(void *)v16 + 16))(v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  long long v15 = v19;
LABEL_37:
  *(_OWORD *)a2 = v15;
LABEL_38:
  if ((char)v22 < 0) {
    operator delete(__s1);
  }
}

void sub_239AA1B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::Memory::GetVariables@<X0>(void *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = this[1];
  *a2 = *this;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::Memory::GetOrCreateVariable(std::__shared_weak_count **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  siri::intelligence::Memory::GetVariable((uint64_t)a1, a2, &v11);
  if (v11)
  {
    size_t v8 = v12;
    *(void *)a4 = v11;
    *(void *)(a4 + 8) = v8;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_6_1);
    siri::intelligence::Memory::CreateVariable(a1, a2, a3, (uint64_t)__p, (void **)a4);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
}

void sub_239AA1C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::SetVariable(uint64_t a1, uint64_t a2, const void **a3)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &v93);
  uint64_t v7 = (const std::string::value_type **)v93;
  if (!v93)
  {
    if (*(char *)(a2 + 23) >= 0) {
      char v10 = (const void *)a2;
    }
    else {
      char v10 = *(const void **)a2;
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to set variable that does not exist: %s", v6, v10);
    goto LABEL_9;
  }
  size_t v8 = (char *)*a3;
  if (!*a3)
  {
LABEL_61:
    (*((void (**)(const std::string::value_type **))*v7 + 3))(v7);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
    uint64_t v11 = 1;
    goto LABEL_62;
  }
  uint64_t v9 = (_OWORD *)(v93 + 32);
  if (*(char *)(v93 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v93 + 32), *(void *)(v93 + 40));
    size_t v8 = (char *)*a3;
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *v9;
    __str.__r_.__value_.__r.__words[2] = *(void *)(v93 + 48);
  }
  if (v8[55] < 0) {
    std::string::__init_copy_ctor_external(&v91, *((const std::string::value_type **)v8 + 4), *((void *)v8 + 5));
  }
  else {
    std::string v91 = *(std::string *)(v8 + 32);
  }
  char v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
  }
  std::string::size_type v14 = HIBYTE(v91.__r_.__value_.__r.__words[2]);
  int v15 = SHIBYTE(v91.__r_.__value_.__r.__words[2]);
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v14 = v91.__r_.__value_.__l.__size_;
  }
  if (size != v14)
  {
    BOOL v22 = 1;
    if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_54;
  }
  if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v16 = &v91;
  }
  else {
    uint64_t v16 = (std::string *)v91.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v22 = memcmp(__str.__r_.__value_.__l.__data_, v16, __str.__r_.__value_.__l.__size_) != 0;
    goto LABEL_35;
  }
  if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
  {
    uint64_t v17 = HIBYTE(__str.__r_.__value_.__r.__words[2]) - 1;
    p_str = &__str;
    do
    {
      int v20 = p_str->__r_.__value_.__s.__data_[0];
      p_str = (std::string *)((char *)p_str + 1);
      int v19 = v20;
      int v21 = v16->__r_.__value_.__s.__data_[0];
      uint64_t v16 = (std::string *)((char *)v16 + 1);
      BOOL v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_35:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_36;
    }
    goto LABEL_54;
  }
  BOOL v22 = 0;
  if ((SHIBYTE(v91.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_36:
    if ((v12 & 0x80) == 0) {
      goto LABEL_37;
    }
LABEL_55:
    operator delete(__str.__r_.__value_.__l.__data_);
    if (v22) {
      goto LABEL_38;
    }
    goto LABEL_56;
  }
LABEL_54:
  operator delete(v91.__r_.__value_.__l.__data_);
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
    goto LABEL_55;
  }
LABEL_37:
  if (v22)
  {
LABEL_38:
    uint64_t v24 = (char *)*a3;
    if (*((char *)*a3 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v24 + 4), *((void *)v24 + 5));
    }
    else {
      std::string __str = *(std::string *)(v24 + 32);
    }
    std::string::basic_string[abi:ne180100]<0>(&v91, siri::intelligence::TYPE_STRING[0]);
    int IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&__str, (unsigned __int8 *)&v91);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if (IsEquivalentType)
      {
LABEL_45:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
        (*(void (**)(std::string *__return_ptr))(*(void *)*a3 + 56))(&__str);
        uint64_t v11 = (*((uint64_t (**)(const std::string::value_type **, std::string *))*v7 + 2))(v7, &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        goto LABEL_62;
      }
    }
    else if (IsEquivalentType)
    {
      goto LABEL_45;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v27 = (const void *)a2;
    }
    else {
      uint64_t v27 = *(const void **)a2;
    }
    uint64_t v28 = (char *)*a3;
    if (*((char *)*a3 + 55) < 0) {
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v28 + 4), *((void *)v28 + 5));
    }
    else {
      std::string __str = *(std::string *)(v28 + 32);
    }
    int v37 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    std::string::size_type v38 = __str.__r_.__value_.__r.__words[0];
    if (*((char *)v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v91, v7[4], (std::string::size_type)v7[5]);
    }
    else
    {
      *(_OWORD *)&v91.__r_.__value_.__l.__data_ = *v9;
      v91.__r_.__value_.__r.__words[2] = (std::string::size_type)v7[6];
    }
    uint64_t v39 = &__str;
    if (v37 < 0) {
      uint64_t v39 = (std::string *)v38;
    }
    unint64_t v40 = &v91;
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v40 = (std::string *)v91.__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Attempt to set a value for variable '%s' with type '%s' instead of '%s'", v25, v27, v39, v40);
    if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v91.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_9:
    uint64_t v11 = 0;
    goto LABEL_62;
  }
LABEL_56:
  if (((*(uint64_t (**)(void))(*(void *)*a3 + 48))() & 1) == 0) {
    goto LABEL_61;
  }
  if (!*a3)
  {
    uint64_t v29 = 0;
    goto LABEL_66;
  }
  if (!v29)
  {
LABEL_66:
    uint64_t v30 = 0;
    goto LABEL_67;
  }
  uint64_t v30 = (std::__shared_weak_count *)a3[1];
  if (v30) {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_67:
  if (!v32)
  {
    uint64_t v34 = 0;
    goto LABEL_74;
  }
  uint64_t v33 = v32;
  uint64_t v34 = v94;
  if (v94) {
    atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v29)
  {
LABEL_74:
    if (*a3)
    {
      if (v35)
      {
        int v36 = (std::__shared_weak_count *)a3[1];
        if (v36) {
          atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
        }
LABEL_92:
        if (v41)
        {
          BOOL v42 = v94;
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v35)
          {
            v41[9] = v35[9];
            uint64_t v11 = 1;
            *((unsigned char *)v41 + 64) = 1;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
LABEL_207:
            if (v42) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v42);
            }
            if (v36) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v36);
            }
            goto LABEL_211;
          }
        }
        else
        {
          BOOL v42 = 0;
        }
        if (*a3)
        {
          if (v43)
          {
            uint64_t v44 = (char *)a3[1];
            if (v44)
            {
              uint64_t v86 = (std::__shared_weak_count *)a3[1];
              atomic_fetch_add_explicit((atomic_ullong *volatile)v44 + 1, 1uLL, memory_order_relaxed);
              goto LABEL_108;
            }
          }
        }
        else
        {
          uint64_t v43 = 0;
        }
        uint64_t v86 = 0;
LABEL_108:
        if (v45)
        {
          uint64_t v46 = v94;
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v43)
          {
            long long v85 = v46;
            v45[66] = v43[66];
            uint64_t v11 = 1;
            v45[64] = 1;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
LABEL_203:
            if (v85) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v85);
            }
            if (v86) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v86);
            }
            goto LABEL_207;
          }
        }
        else
        {
          uint64_t v46 = 0;
        }
        unint64_t v84 = v36;
        long long v85 = v46;
        if (*a3)
        {
          if (v47)
          {
            char v48 = (char *)a3[1];
            if (v48)
            {
              int v83 = (std::__shared_weak_count *)a3[1];
              atomic_fetch_add_explicit((atomic_ullong *volatile)v48 + 1, 1uLL, memory_order_relaxed);
              goto LABEL_120;
            }
          }
        }
        else
        {
          uint64_t v47 = 0;
        }
        int v83 = 0;
LABEL_120:
        if (v49)
        {
          double v50 = v49;
          unint64_t v51 = v94;
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v47)
          {
            uint64_t v82 = v51;
            memset(&__str, 0, sizeof(__str));
            std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(&__str, v47[9], v47[10], ((char *)v47[10] - (char *)v47[9]) >> 4);
            if (&v50[3] != &__str) {
              std::vector<std::shared_ptr<siri::intelligence::Variable>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((uint64_t)&v50[3], (uint64_t *)__str.__r_.__value_.__l.__data_, (uint64_t *)__str.__r_.__value_.__l.__size_, (uint64_t)(__str.__r_.__value_.__l.__size_ - __str.__r_.__value_.__r.__words[0]) >> 4);
            }
            uint64_t v11 = 1;
            v50[2].__r_.__value_.__s.__data_[16] = 1;
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
            int v36 = v84;
LABEL_199:
            if (v82) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v82);
            }
            if (v83) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v83);
            }
            goto LABEL_203;
          }
        }
        else
        {
          unint64_t v51 = 0;
        }
        uint64_t v82 = v51;
        int v36 = v84;
        if (*a3)
        {
          if (v52)
          {
            int v53 = (char *)a3[1];
            if (v53)
            {
              uint64_t v80 = (std::__shared_weak_count *)a3[1];
              atomic_fetch_add_explicit((atomic_ullong *volatile)v53 + 1, 1uLL, memory_order_relaxed);
              goto LABEL_134;
            }
          }
        }
        else
        {
          uint64_t v52 = 0;
        }
        uint64_t v80 = 0;
LABEL_134:
        if (v54)
        {
          uint64_t v55 = (uint64_t)v54;
          BOOL v56 = v94;
          if (v94) {
            atomic_fetch_add_explicit(&v94->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v81 = v56;
          if (v52)
          {
            siri::intelligence::VariableDictionary::GetValues(v52, (uint64_t *)&__str);
            siri::intelligence::VariableDictionary::SetValues(v55, (uint64_t **)&__str);
            v91.__r_.__value_.__r.__words[0] = (std::string::size_type)&__str;
            std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v91);
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
            uint64_t v11 = 1;
            uint64_t v57 = v81;
LABEL_195:
            if (v57) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v57);
            }
            if (v80) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v80);
            }
            goto LABEL_199;
          }
        }
        else
        {
          uint64_t v81 = 0;
        }
        if (*a3)
        {
          unint64_t v58 = (std::__shared_weak_count *)a3[1];
          if (v59 && v58)
          {
            size_t v79 = v58;
            atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            size_t v79 = 0;
          }
        }
        else
        {
          size_t v79 = 0;
          uint64_t v59 = 0;
        }
        uint64_t v60 = v94;
        if (v61)
        {
          size_t v62 = v61;
          if (v60) {
            atomic_fetch_add_explicit(&v60->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v63 = v60;
          if (v59)
          {
            if (v59[95] < 0) {
              std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v59 + 9), *((void *)v59 + 10));
            }
            else {
              std::string __str = *(std::string *)(v59 + 3);
            }
            int v36 = v84;
            std::string::operator=(v62 + 3, &__str);
            v62[2].__r_.__value_.__s.__data_[16] = 1;
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            uint64_t v68 = v79;
            std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
            uint64_t v11 = 1;
            uint64_t v69 = v60;
            uint64_t v57 = v81;
LABEL_191:
            if (v69) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v69);
            }
            if (v68) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v68);
            }
            goto LABEL_195;
          }
        }
        else
        {
          uint64_t v63 = 0;
        }
        char v78 = v63;
        std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(&v89, (void *)*a3, (uint64_t)a3[1]);
        std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(&v87, v7, (uint64_t)v60);
        uint64_t v65 = v87;
        if (v87 && (uint64_t v66 = v89) != 0)
        {
          int v36 = v84;
          if (*(char *)(v89 + 95) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v89 + 72), *(void *)(v89 + 80));
          }
          else {
            std::string __str = *(std::string *)(v89 + 72);
          }
          std::string::operator=(v65 + 3, &__str);
          v65[2].__r_.__value_.__s.__data_[16] = 1;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string::size_type v75 = *(void *)(v66 + 96);
          std::string::size_type v76 = *(std::__shared_weak_count **)(v66 + 104);
          if (v76)
          {
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v76->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v77 = (std::__shared_weak_count *)v65[4].__r_.__value_.__l.__size_;
          v65[4].__r_.__value_.__r.__words[0] = v75;
          v65[4].__r_.__value_.__l.__size_ = (std::string::size_type)v76;
          if (v77) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v77);
          }
          if (v76) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v76);
          }
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
          uint64_t v11 = 1;
          uint64_t v57 = v81;
          uint64_t v68 = v79;
        }
        else
        {
          uint64_t v67 = (char *)*a3;
          int v36 = v84;
          if (*((char *)*a3 + 55) < 0)
          {
            uint64_t v57 = v81;
            std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v67 + 4), *((void *)v67 + 5));
            uint64_t v67 = (char *)*a3;
          }
          else
          {
            std::string __str = *(std::string *)(v67 + 32);
            uint64_t v57 = v81;
          }
          int v70 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          std::string::size_type v71 = __str.__r_.__value_.__r.__words[0];
          if (v67[31] < 0)
          {
            std::string::__init_copy_ctor_external(&v91, *((const std::string::value_type **)v67 + 1), *((void *)v67 + 2));
          }
          else
          {
            long long v72 = *(_OWORD *)(v67 + 8);
            v91.__r_.__value_.__r.__words[2] = *((void *)v67 + 3);
            *(_OWORD *)&v91.__r_.__value_.__l.__data_ = v72;
          }
          uint64_t v73 = &__str;
          if (v70 < 0) {
            uint64_t v73 = (std::string *)v71;
          }
          uint64_t v74 = &v91;
          if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v74 = (std::string *)v91.__r_.__value_.__r.__words[0];
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Unknown type (%s) found when setting new variable value: %s", v64, v73, v74);
          uint64_t v68 = v79;
          if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v91.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          uint64_t v11 = 0;
        }
        if (v88) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v88);
        }
        if (v90) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v90);
        }
        uint64_t v69 = v78;
        goto LABEL_191;
      }
    }
    else
    {
      uint64_t v35 = 0;
    }
    int v36 = 0;
    goto LABEL_92;
  }
  if (v29[95] < 0) {
    std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v29 + 9), *((void *)v29 + 10));
  }
  else {
    std::string __str = *(std::string *)(v29 + 3);
  }
  std::string::operator=(v33 + 3, &__str);
  v33[2].__r_.__value_.__s.__data_[16] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
  uint64_t v11 = 1;
LABEL_211:
  if (v34) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v34);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
LABEL_62:
  if (v94) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v94);
  }
  return v11;
}

void sub_239AA29AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, std::__shared_weak_count *a15, std::__shared_weak_count *a16, std::__shared_weak_count *a17, std::__shared_weak_count *a18, std::__shared_weak_count *a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a22);
  }
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  if (a14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a14);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a19);
  }
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  if (a18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a18);
  }
  if (v31) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  }
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 96);
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
  _Unwind_Resume(exception_object);
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableFunction,siri::intelligence::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

BOOL siri::intelligence::Memory::HasVariable(uint64_t a1, uint64_t a2)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &v4);
  uint64_t v2 = v4;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return v2 != 0;
}

void siri::intelligence::Memory::SetGlobalVariables(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 24);
  size_t v5 = (uint64_t **)(a1 + 16);
  std::__tree<std::string>::destroy(a1 + 16, *(char **)(a1 + 24));
  *(v4 - 1) = v4;
  void *v4 = 0;
  v4[1] = 0;
  size_t v8 = (void *)*a2;
  size_t v6 = a2 + 1;
  uint64_t v7 = v8;
  if (v8 != v6)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_6_1);
      siri::intelligence::Memory::CreateVariable((std::__shared_weak_count **)a1, (uint64_t)(v7 + 4), (std::string *)(v7 + 7), (uint64_t)__p, &v14);
      if (v15) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, (const void **)v7 + 4, (uint64_t)(v7 + 4));
      uint64_t v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          char v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          char v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          uint64_t v7 = v10;
        }
        while (!v11);
      }
      uint64_t v7 = v10;
    }
    while (v10 != v6);
  }
}

void sub_239AA2D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::IsGlobalVariable(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 16);
  uint64_t v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    while (1)
    {
      if (*((char *)v2 + 55) < 0) {
        std::string::__init_copy_ctor_external(&__str, (const std::string::value_type *)v2[4], v2[5]);
      }
      else {
        std::string __str = *(std::string *)(v2 + 4);
      }
      uint64_t v5 = a2[23];
      if ((v5 & 0x80u) == 0) {
        size_t v6 = a2[23];
      }
      else {
        size_t v6 = *((void *)a2 + 1);
      }
      std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      char v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      if (v6 == size)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, p_str, *((void *)a2 + 1)))
          {
LABEL_41:
            BOOL v13 = 1;
            if (v8 < 0) {
              goto LABEL_32;
            }
            goto LABEL_33;
          }
        }
        else
        {
          if (!a2[23]) {
            goto LABEL_41;
          }
          char v10 = a2;
          while (*v10 == p_str->__r_.__value_.__s.__data_[0])
          {
            ++v10;
            p_str = (std::string *)((char *)p_str + 1);
            if (!--v5) {
              goto LABEL_41;
            }
          }
        }
      }
      std::string::basic_string[abi:ne180100]((uint64_t)__p, v6 + 1);
      if (v19 >= 0) {
        BOOL v11 = __p;
      }
      else {
        BOOL v11 = (void **)__p[0];
      }
      if (v6)
      {
        if ((a2[23] & 0x80u) == 0) {
          char v12 = a2;
        }
        else {
          char v12 = *(const void **)a2;
        }
        memmove(v11, v12, v6);
      }
      *(_WORD *)((char *)v11 + v6) = 46;
      BOOL v13 = siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)__p);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_32:
      }
        operator delete(__str.__r_.__value_.__l.__data_);
LABEL_33:
      if (v13) {
        return 1;
      }
      std::string::size_type v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          std::string::size_type v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
      if (v15 == v3) {
        return v13;
      }
    }
  }
  return 0;
}

void sub_239AA2F88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::IsUnsupportedGlobalVariable(uint64_t a1, unsigned __int8 *a2)
{
  if (siri::intelligence::Memory::IsGlobalVariable(a1, a2)) {
    return 0;
  }
  siri::intelligence::ParseVariableComponents((uint64_t)a2, v19);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v19[1] - v19[0]) >> 3)) < 2
    || (v5 = *(void **)(a1 + 16), size_t v6 = (void *)(a1 + 24), v5 == v6))
  {
LABEL_32:
    uint64_t v4 = 0;
    goto LABEL_36;
  }
  while (1)
  {
    if (*((char *)v5 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)v5[4], v5[5]);
    }
    else {
      std::string v18 = *(std::string *)(v5 + 4);
    }
    siri::intelligence::ParseVariableComponents((uint64_t)&v18, v17);
    uint64_t v7 = (unsigned __int8 *)v17[0];
    if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((v17[1] - v17[0]) >> 3)) < 2) {
      goto LABEL_24;
    }
    uint64_t v8 = *(unsigned __int8 *)(v17[0] + 23);
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = *(unsigned __int8 *)(v17[0] + 23);
    }
    else {
      uint64_t v9 = *(void *)(v17[0] + 8);
    }
    uint64_t v10 = *(unsigned __int8 *)(v19[0] + 23);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(v19[0] + 8);
    }
    if (v9 != v10) {
      goto LABEL_24;
    }
    char v12 = v11 >= 0 ? (unsigned __int8 *)v19[0] : *(unsigned __int8 **)v19[0];
    if ((v8 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v17[0] + 23)) {
      goto LABEL_33;
    }
    while (*v7 == *v12)
    {
      ++v7;
      ++v12;
      if (!--v8) {
        goto LABEL_33;
      }
    }
LABEL_24:
    int v20 = (void **)v17;
    std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v20);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    BOOL v13 = (void *)v5[1];
    if (v13)
    {
      do
      {
        std::string::size_type v14 = v13;
        BOOL v13 = (void *)*v13;
      }
      while (v13);
    }
    else
    {
      do
      {
        std::string::size_type v14 = (void *)v5[2];
        BOOL v15 = *v14 == (void)v5;
        uint64_t v5 = v14;
      }
      while (!v15);
    }
    uint64_t v5 = v14;
    if (v14 == v6) {
      goto LABEL_32;
    }
  }
  if (memcmp(*(const void **)v17[0], v12, *(void *)(v17[0] + 8))) {
    goto LABEL_24;
  }
LABEL_33:
  int v20 = (void **)v17;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v20);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = 1;
LABEL_36:
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)v19;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
  return v4;
}

void sub_239AA31BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::string __p = &a20;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Memory::SetVariableFromString(uint64_t a1, const void **a2, uint64_t a3)
{
  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &v9);
  uint64_t v6 = v9;
  if (v9)
  {
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, a3);
  }
  else
  {
    uint64_t v7 = 0;
  }
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  return v7;
}

void sub_239AA3290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetVariableAsStringVector(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  siri::intelligence::Memory::GetVariable(a1, a2, &v34);
  uint64_t v6 = (const void *)v34;
  if (!v34)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v7 = a2;
    }
    else {
      uint64_t v7 = *(void *)a2;
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Non-existing variable referenced: '%s'", v5, v7);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    goto LABEL_44;
  }
  if (*(char *)(v34 + 55) < 0) {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v34 + 32), *(void *)(v34 + 40));
  }
  else {
    std::string v33 = *(std::string *)(v34 + 32);
  }
  if (!siri::intelligence::IsPrimitiveType((unsigned __int8 *)&v33))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
    int IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v33, (unsigned __int8 *)&__p);
    int v11 = IsEquivalentType;
    if (SHIBYTE(__p.__end_) < 0)
    {
      operator delete(__p.__first_);
      if (!v11)
      {
LABEL_39:
        uint64_t v28 = &v33;
        if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v28 = (std::string *)v33.__r_.__value_.__r.__words[0];
        }
        siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported variable type '%s'", v10, v28);
        *(void *)a3 = 0;
        *(void *)(a3 + 8) = 0;
        *(void *)(a3 + 16) = 0;
        goto LABEL_42;
      }
    }
    else if (!IsEquivalentType)
    {
      goto LABEL_39;
    }
    if (v12)
    {
      uint64_t v13 = (uint64_t)v12;
      std::string::size_type v14 = v35;
      if (v35) {
        atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      if (v12[10] != v12[9])
      {
        unint64_t v15 = 0;
        do
        {
          siri::intelligence::VariableArray::GetItem(v13, v15, &v29);
          (*(void (**)(void **__return_ptr))(*(void *)v29 + 56))(v31);
          unint64_t v16 = *(void *)(a3 + 8);
          unint64_t v17 = *(void *)(a3 + 16);
          if (v16 >= v17)
          {
            unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *(void *)a3) >> 3);
            unint64_t v20 = v19 + 1;
            if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a3) >> 3);
            if (2 * v21 > v20) {
              unint64_t v20 = 2 * v21;
            }
            if (v21 >= 0x555555555555555) {
              unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v22 = v20;
            }
            __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
            if (v22) {
              char v23 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v22);
            }
            else {
              char v23 = 0;
            }
            uint64_t v24 = v23 + v19;
            __p.__first_ = v23;
            __p.__begin_ = v24;
            __p.__end_cap_.__value_ = &v23[v22];
            long long v25 = *(_OWORD *)v31;
            v24->__r_.__value_.__r.__words[2] = v32;
            *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
            v31[1] = 0;
            std::string::size_type v32 = 0;
            v31[0] = 0;
            __p.__end_ = v24 + 1;
            std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__p);
            uint64_t v26 = *(void *)(a3 + 8);
            std::__split_buffer<std::string>::~__split_buffer(&__p);
            int v27 = SHIBYTE(v32);
            *(void *)(a3 + 8) = v26;
            if (v27 < 0) {
              operator delete(v31[0]);
            }
          }
          else
          {
            long long v18 = *(_OWORD *)v31;
            *(void *)(v16 + 16) = v32;
            *(_OWORD *)unint64_t v16 = v18;
            v31[1] = 0;
            std::string::size_type v32 = 0;
            v31[0] = 0;
            *(void *)(a3 + 8) = v16 + 24;
          }
          if (v30) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v30);
          }
          ++v15;
        }
        while (v15 < (uint64_t)(*(void *)(v13 + 80) - *(void *)(v13 + 72)) >> 4);
      }
      if (v14) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  (*(void (**)(std::__split_buffer<std::string> *__return_ptr, const void *))(*(void *)v6 + 56))(&__p, v6);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  v31[0] = (void *)a3;
  LOBYTE(v31[1]) = 0;
  uint64_t v8 = (std::string *)operator new(0x18uLL);
  *(void *)a3 = v8;
  *(void *)(a3 + 8) = v8;
  *(void *)(a3 + 16) = v8 + 1;
  *(void *)(a3 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(a3 + 16, (long long *)&__p, (long long *)&__p.__end_cap_, v8);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
LABEL_42:
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
LABEL_44:
  if (v35) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  }
}

void sub_239AA3688(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  _Unwind_Resume(exception_object);
}

double siri::intelligence::Memory::GetNumberValue(uint64_t a1, uint64_t a2)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  double v2 = 0.0;
  if (lpsrc)
  {
    if (v3)
    {
      uint64_t v4 = v7;
      if (v7)
      {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        double v2 = v3[9];
        std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      }
      else
      {
        double v2 = v3[9];
      }
    }
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v2;
}

uint64_t siri::intelligence::Memory::SetNumberValue(uint64_t a1, uint64_t a2, double a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_NUMBER[0]);
  siri::intelligence::Memory::GetOrCreateVariable((std::__shared_weak_count **)a1, a2, &__p, (uint64_t)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v7[9] = a3;
      *((unsigned char *)v7 + 64) = 1;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
      if (!v8) {
        return 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v9 = 1;
      goto LABEL_13;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v10 = (const void *)a2;
  }
  else {
    uint64_t v10 = *(const void **)a2;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting number that is not explicitly defined: %s", v6, v10);
  uint64_t v9 = 0;
  uint64_t result = 0;
  uint64_t v8 = v14;
  if (v14)
  {
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    return v9;
  }
  return result;
}

void sub_239AA3958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::Memory::GetBooleanValue(uint64_t a1, uint64_t a2)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (lpsrc
  {
    uint64_t v3 = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v4 = v2[66] != 0;
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    else
    {
      BOOL v4 = v2[66] != 0;
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v4;
}

uint64_t siri::intelligence::Memory::SetBooleanValue(uint64_t a1, uint64_t a2, char a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_BOOLEAN[0]);
  siri::intelligence::Memory::GetOrCreateVariable((std::__shared_weak_count **)a1, a2, &__p, (uint64_t)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = v14;
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v7[66] = a3;
      v7[64] = 1;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
      if (!v8) {
        return 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      uint64_t v9 = 1;
      goto LABEL_13;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v10 = (const void *)a2;
  }
  else {
    uint64_t v10 = *(const void **)a2;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting BOOLean that is not explicitly defined: %s", v6, v10);
  uint64_t v9 = 0;
  uint64_t result = 0;
  uint64_t v8 = v14;
  if (v14)
  {
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    return v9;
  }
  return result;
}

void sub_239AA3BAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetStringValue(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (!lpsrc
  {
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_6_1);
    uint64_t v5 = v8;
    if (!v8) {
      return;
    }
    goto LABEL_12;
  }
  uint64_t v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4[95] < 0)
  {
    std::string::__init_copy_ctor_external(a3, *((const std::string::value_type **)v4 + 9), *((void *)v4 + 10));
  }
  else
  {
    long long v6 = *(_OWORD *)(v4 + 72);
    a3->__r_.__value_.__r.__words[2] = *((void *)v4 + 11);
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
  }
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
LABEL_12:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_239AA3CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::SetStringValue(uint64_t a1, uint64_t a2, const std::string *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_STRING[0]);
  siri::intelligence::Memory::GetOrCreateVariable((std::__shared_weak_count **)a1, a2, &__p, (uint64_t)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string::operator=(v7 + 3, a3);
      v8[2].__r_.__value_.__s.__data_[16] = 1;
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
      if (!v9) {
        return 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v10 = 1;
      goto LABEL_13;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    int v11 = (const void *)a2;
  }
  else {
    int v11 = *(const void **)a2;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting string that is not explicitly defined: %s", v6, v11);
  uint64_t v10 = 0;
  uint64_t result = 0;
  uint64_t v9 = v15;
  if (v15)
  {
LABEL_13:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    return v10;
  }
  return result;
}

void sub_239AA3E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetArrayValue(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (!lpsrc)
  {
    BOOL v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v4)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(a3, v4[9], v4[10], ((char *)v4[10] - (char *)v4[9]) >> 4);
    if (!v5) {
      return;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!v5) {
      return;
    }
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_239AA3FD8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::SetArrayValue(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
  siri::intelligence::Memory::GetOrCreateVariable((std::__shared_weak_count **)a1, a2, &__p, (uint64_t)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t *))(*v7 + 32))(v7);
      uint64_t v10 = *a3;
      int v11 = a3[1];
      if (*a3 != v11)
      {
        do
        {
          uint64_t v12 = *v10;
          uint64_t v13 = (std::__shared_weak_count *)v10[1];
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            *((void *)&v17 + 1) = v13;
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            *((void *)&v17 + 1) = 0;
          }
          *(void *)&long long v17 = v12;
          if (v12)
          {
            std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](v8 + 9, &v17);
            *((unsigned char *)v8 + 64) = 1;
          }
          if (*((void *)&v17 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v17 + 1));
          }
          if (v13) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          v10 += 2;
        }
        while (v10 != v11);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
      if (!v9) {
        return 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v14 = 1;
      goto LABEL_24;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v15 = (const void *)a2;
  }
  else {
    unint64_t v15 = *(const void **)a2;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting array that is not explicitly defined: %s", v6, v15);
  uint64_t v14 = 0;
  uint64_t result = 0;
  uint64_t v9 = v20;
  if (v20)
  {
LABEL_24:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    return v14;
  }
  return result;
}

void sub_239AA41E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::GetDictionaryValue(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  siri::intelligence::Memory::GetVariable(a1, a2, &lpsrc);
  if (!lpsrc)
  {
    BOOL v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    uint64_t v5 = 0;
    goto LABEL_7;
  }
  uint64_t v5 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v4)
  {
    siri::intelligence::VariableDictionary::GetValues(v4, a3);
    if (!v5) {
      return;
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    if (!v5) {
      return;
    }
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_239AA4348(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::SetDictionaryValue(uint64_t a1, uint64_t a2, uint64_t **a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_DICTIONARY[0]);
  siri::intelligence::Memory::GetOrCreateVariable((std::__shared_weak_count **)a1, a2, &__p, (uint64_t)&lpsrc);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (lpsrc)
  {
    if (v7)
    {
      uint64_t v8 = (uint64_t)v7;
      uint64_t v9 = v20;
      if (v20) {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void *))(*(void *)v7 + 32))(v7);
      uint64_t v10 = *a3;
      int v11 = a3[1];
      if (*a3 != v11)
      {
        do
        {
          uint64_t v12 = *v10;
          uint64_t v13 = (std::__shared_weak_count *)v10[1];
          if (v13)
          {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          v17[0] = v12;
          v17[1] = (uint64_t)v13;
          siri::intelligence::VariableDictionary::AddProperty(v8, v17);
          if (v13)
          {
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
            std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          }
          v10 += 2;
        }
        while (v10 != v11);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), (const void **)a2, a2);
      if (!v9) {
        return 1;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      uint64_t v14 = 1;
      goto LABEL_19;
    }
  }
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v15 = (const void *)a2;
  }
  else {
    unint64_t v15 = *(const void **)a2;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Setting array that is not explicitly defined: %s", v6, v15);
  uint64_t v14 = 0;
  uint64_t result = 0;
  uint64_t v9 = v20;
  if (v20)
  {
LABEL_19:
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    return v14;
  }
  return result;
}

void sub_239AA452C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::Memory::PushBackArrayValue(uint64_t a1, const void **a2, uint64_t a3)
{
  if (!*(void *)a3) {
    return 0;
  }
  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &lpsrc);
  if ((void)lpsrc)
  {
    if (v6)
    {
      uint64_t v7 = (std::__shared_weak_count *)*((void *)&lpsrc + 1);
      if (*((void *)&lpsrc + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
      }
      goto LABEL_9;
    }
  }
  else
  {
    long long v6 = 0;
  }
  uint64_t v7 = 0;
LABEL_9:
  if (*((void *)&lpsrc + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if (!v6)
  {
    BOOL v8 = 0;
    if (!v7) {
      return v8;
    }
    goto LABEL_21;
  }
  (*(void (**)(long long *__return_ptr))(**(void **)a3 + 88))(&lpsrc);
  BOOL v8 = lpsrc != 0;
  if ((void)lpsrc)
  {
    long long v10 = lpsrc;
    if (*((void *)&lpsrc + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&lpsrc + 1) + 8), 1uLL, memory_order_relaxed);
    }
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](v6 + 9, &v10);
    *((unsigned char *)v6 + 64) = 1;
    if (*((void *)&v10 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
    }
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
  }
  if (*((void *)&lpsrc + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&lpsrc + 1));
  }
  if (v7) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return v8;
}

void sub_239AA470C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Memory::PopBackArrayValue(uint64_t a1, const void **a2, uint64_t a3)
{
  siri::intelligence::Memory::GetVariable(a1, (uint64_t)a2, &lpsrc);
  if (!lpsrc)
  {
    long long v6 = 0;
    goto LABEL_6;
  }
  if (!v6)
  {
LABEL_6:
    uint64_t v7 = 0;
    goto LABEL_7;
  }
  uint64_t v7 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  if (!v6 || *((void *)v6 + 10) == *((void *)v6 + 9))
  {
    uint64_t v10 = 0;
    if (!v7) {
      return v10;
    }
LABEL_23:
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    return v10;
  }
  siri::intelligence::VariableArray::PopBack(v6, &lpsrc);
  uint64_t v8 = *(unsigned __int8 *)(a3 + 23);
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a3 + 8);
  }
  if (v8)
  {
    uint64_t v9 = v14;
    v12[0] = lpsrc;
    v12[1] = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    siri::intelligence::Memory::SetVariable(a1, a3, v12);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 48), a2, (uint64_t)a2);
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  uint64_t v10 = 1;
  if (v7) {
    goto LABEL_23;
  }
  return v10;
}

void sub_239AA48B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::ExpandVariables(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a4, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)a4 = *(_OWORD *)a2;
    *(void *)(a4 + 16) = *(void *)(a2 + 16);
  }
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v23, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string v23 = *(std::string *)a4;
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v23))
  {
    siri::intelligence::Entity::GetName(&v23, &__p);
    memset(&v21, 0, sizeof(v21));
    siri::intelligence::Memory::GetVariable(a1, (uint64_t)&__p, &v19);
    uint64_t v7 = v19;
    int v8 = a3;
    if (!v19) {
      goto LABEL_37;
    }
    siri::intelligence::Memory::GetVariableAsStringVector(a1, (uint64_t)&__p, (uint64_t)&v18);
    std::vector<std::string>::__vdeallocate(&v21);
    std::vector<std::string> v21 = (std::vector<std::string>)v18;
    memset(&v18, 0, sizeof(v18));
    __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&v18;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
    uint64_t v9 = (_OWORD *)(v7 + 32);
    if (*(char *)(v7 + 55) < 0)
    {
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
    }
    else
    {
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *v9;
      v18.__r_.__value_.__r.__words[2] = *(void *)(v7 + 48);
    }
    size_t v10 = strlen(siri::intelligence::TYPE_NUMBER[0]);
    size_t v11 = v10;
    char v12 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v10 != v18.__r_.__value_.__l.__size_) {
        goto LABEL_20;
      }
      if (v10 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      uint64_t v13 = (std::string *)v18.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v10 != HIBYTE(v18.__r_.__value_.__r.__words[2])) {
        goto LABEL_20;
      }
      uint64_t v13 = &v18;
    }
    if (memcmp(v13, siri::intelligence::TYPE_NUMBER[0], v11))
    {
LABEL_20:
      if (*(char *)(v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(&__s1, *(const std::string::value_type **)(v7 + 32), *(void *)(v7 + 40));
      }
      else
      {
        *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = *v9;
        __s1.__r_.__value_.__r.__words[2] = *(void *)(v7 + 48);
      }
      size_t v14 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v14 == __s1.__r_.__value_.__l.__size_)
        {
          if (v14 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          unint64_t v16 = (void *)__s1.__r_.__value_.__r.__words[0];
          int v15 = memcmp(__s1.__r_.__value_.__l.__data_, siri::intelligence::TYPE_BOOLEAN[0], v14) == 0;
        }
        else
        {
          int v15 = 0;
          unint64_t v16 = (void *)__s1.__r_.__value_.__r.__words[0];
        }
        operator delete(v16);
      }
      else
      {
        int v15 = v14 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
           && memcmp(&__s1, siri::intelligence::TYPE_BOOLEAN[0], v14) == 0;
      }
      if ((*((unsigned char *)&v18.__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_36;
      }
LABEL_35:
      operator delete(v18.__r_.__value_.__l.__data_);
      goto LABEL_36;
    }
    int v15 = 1;
    if (v12 < 0) {
      goto LABEL_35;
    }
LABEL_36:
    int v8 = a3 & ~v15;
LABEL_37:
    siri::intelligence::Entity::Expand(&v23, (long long **)&v21, v8, &v18);
    if (*(char *)(a4 + 23) < 0) {
      operator delete(*(void **)a4);
    }
    *(std::string *)a4 = v18;
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v21;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v18);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_239AA4BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (*(char *)(v36 + 23) < 0) {
    operator delete(*(void **)v36);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Memory::ValidateVariableReference(uint64_t *a1, uint64_t a2, const void **a3, siri::intelligence::ValidationResults *a4, int a5)
{
  if ((siri::intelligence::IsValidCompoundVariableName(a2) & 1) == 0)
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v17 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v17 = (size_t)a3[1];
    }
    std::string v18 = &v140;
    std::string::basic_string[abi:ne180100]((uint64_t)&v140, v17 + 43);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string v18 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v17)
    {
      if (*((char *)a3 + 23) >= 0) {
        uint64_t v19 = a3;
      }
      else {
        uint64_t v19 = *a3;
      }
      memmove(v18, v19, v17);
    }
    strcpy((char *)v18 + v17, "variable reference has invalid characters: ");
    int v20 = *(char *)(a2 + 23);
    if (v20 >= 0) {
      std::vector<std::string> v21 = (const std::string::value_type *)a2;
    }
    else {
      std::vector<std::string> v21 = *(const std::string::value_type **)a2;
    }
    if (v20 >= 0) {
      std::string::size_type v22 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v22 = *(void *)(a2 + 8);
    }
    std::string v23 = std::string::append(&v140, v21, v22);
    std::string v141 = *v23;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_INVALID_NAME, (long long *)&v141, a5);
    goto LABEL_37;
  }
  if (siri::intelligence::Memory::IsUnsupportedGlobalVariable((uint64_t)a1, (unsigned __int8 *)a2))
  {
    if (*((char *)a3 + 23) >= 0) {
      size_t v10 = *((unsigned __int8 *)a3 + 23);
    }
    else {
      size_t v10 = (size_t)a3[1];
    }
    size_t v11 = &v140;
    std::string::basic_string[abi:ne180100]((uint64_t)&v140, v10 + 40);
    if ((v140.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      size_t v11 = (std::string *)v140.__r_.__value_.__r.__words[0];
    }
    if (v10)
    {
      if (*((char *)a3 + 23) >= 0) {
        char v12 = a3;
      }
      else {
        char v12 = *a3;
      }
      memmove(v11, v12, v10);
    }
    strcpy((char *)v11 + v10, "reference to undefined global variable: ");
    int v13 = *(char *)(a2 + 23);
    if (v13 >= 0) {
      size_t v14 = (const std::string::value_type *)a2;
    }
    else {
      size_t v14 = *(const std::string::value_type **)a2;
    }
    if (v13 >= 0) {
      std::string::size_type v15 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v15 = *(void *)(a2 + 8);
    }
    unint64_t v16 = std::string::append(&v140, v14, v15);
    std::string v141 = *v16;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::ValidationResults::AddWarning(a4, (long long *)siri::intelligence::CODE_READ_ONLY, (long long *)&v141, a5);
LABEL_37:
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v25 = *a1;
  uint64_t v24 = (std::__shared_weak_count *)a1[1];
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  std::string::size_type v134 = v24;
  std::string::basic_string[abi:ne180100]<0>(&v141, siri::intelligence::TYPE_DICTIONARY[0]);
  siri::intelligence::ParseVariableComponents(a2, (uint64_t *)&v140);
  std::string::size_type v26 = v140.__r_.__value_.__r.__words[0];
  if (v140.__r_.__value_.__l.__size_ == v140.__r_.__value_.__r.__words[0]) {
    goto LABEL_298;
  }
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v140.__r_.__value_.__l.__size_ - v140.__r_.__value_.__r.__words[0]) >> 3);
  uint64_t v132 = v25 + 80;
  uint64_t v133 = v25 + 72;
  int v131 = a5;
  while (1)
  {
    unint64_t v30 = v29 - 1;
    size_t v31 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
    size_t v32 = v31;
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v31 != v141.__r_.__value_.__l.__size_) {
        goto LABEL_52;
      }
      if (v31 == -1) {
        std::string::__throw_out_of_range[abi:ne180100]();
      }
      std::string v33 = (std::string *)v141.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (v31 != HIBYTE(v141.__r_.__value_.__r.__words[2])) {
        goto LABEL_52;
      }
      std::string v33 = &v141;
    }
    if (!memcmp(v33, siri::intelligence::TYPE_DICTIONARY[0], v32))
    {
      uint64_t v35 = std::__tree<std::string>::find<std::string>(v133, (const void **)(v26 + v27));
      if (v132 == v35)
      {
        uint64_t v37 = 0;
      }
      else
      {
        uint64_t v36 = *(void *)(v35 + 56);
        uint64_t v37 = *(std::__shared_weak_count **)(v35 + 64);
        if (v37) {
          atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v36)
        {
          if (*(char *)(v36 + 55) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v36 + 32), *(void *)(v36 + 40));
          }
          else {
            std::string __str = *(std::string *)(v36 + 32);
          }
          if (siri::intelligence::IsPrimitiveType((unsigned __int8 *)&__str))
          {
            if (v28 == v30) {
              goto LABEL_152;
            }
            if (*((char *)a3 + 23) >= 0) {
              size_t v46 = *((unsigned __int8 *)a3 + 23);
            }
            else {
              size_t v46 = (size_t)a3[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v137, v46 + 58);
            if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v47 = &v137;
            }
            else {
              uint64_t v47 = (std::string *)v137.__r_.__value_.__r.__words[0];
            }
            if (v46)
            {
              if (*((char *)a3 + 23) >= 0) {
                char v48 = a3;
              }
              else {
                char v48 = *a3;
              }
              memmove(v47, v48, v46);
            }
            strcpy((char *)v47 + v46, "variable reference has components after a primitive type: ");
            int v49 = *(char *)(v26 + v27 + 23);
            if (v49 >= 0) {
              double v50 = (const std::string::value_type *)(v26 + v27);
            }
            else {
              double v50 = *(const std::string::value_type **)(v26 + v27);
            }
            if (v49 >= 0) {
              std::string::size_type v51 = *(unsigned __int8 *)(v26 + v27 + 23);
            }
            else {
              std::string::size_type v51 = *(void *)(v26 + v27 + 8);
            }
            uint64_t v52 = std::string::append(&v137, v50, v51);
            std::string v138 = *v52;
            v52->__r_.__value_.__l.__size_ = 0;
            v52->__r_.__value_.__r.__words[2] = 0;
            v52->__r_.__value_.__r.__words[0] = 0;
            a5 = v131;
            siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_UNDEF_VAR, (long long *)&v138, v131);
            if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v138.__r_.__value_.__l.__data_);
            }
            if ((SHIBYTE(v137.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
              goto LABEL_152;
            }
            int v53 = (void *)v137.__r_.__value_.__r.__words[0];
LABEL_151:
            operator delete(v53);
LABEL_152:
            int v45 = 1;
            goto LABEL_153;
          }
          int v130 = v37;
          int v54 = *(unsigned __int8 *)(v26 + v27 + 48);
          size_t v55 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if (!*(unsigned char *)(v26 + v27 + 48)) {
            goto LABEL_160;
          }
          size_t v56 = strlen(siri::intelligence::TYPE_ARRAY[0]);
          size_t v57 = v56;
          if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            if (v56 == __str.__r_.__value_.__l.__size_)
            {
              if (v56 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              unint64_t v58 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_119:
              if (memcmp(v58, siri::intelligence::TYPE_ARRAY[0], v57)) {
                goto LABEL_120;
              }
LABEL_160:
              if (v28 == v30) {
                goto LABEL_170;
              }
              size_t v72 = strlen(siri::intelligence::TYPE_ARRAY[0]);
              size_t v73 = v72;
              if ((v55 & 0x80) != 0)
              {
                if (v72 == __str.__r_.__value_.__l.__size_)
                {
                  if (v72 == -1) {
                    std::string::__throw_out_of_range[abi:ne180100]();
                  }
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  goto LABEL_167;
                }
              }
              else if (v72 == v55)
              {
                p_str = &__str;
LABEL_167:
                int v75 = memcmp(p_str, siri::intelligence::TYPE_ARRAY[0], v73) == 0;
                goto LABEL_169;
              }
              int v75 = 0;
LABEL_169:
              if (v54 != v75)
              {
                if (*((char *)a3 + 23) >= 0) {
                  size_t v82 = *((unsigned __int8 *)a3 + 23);
                }
                else {
                  size_t v82 = (size_t)a3[1];
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v135, v82 + 57);
                if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v83 = &v135;
                }
                else {
                  int v83 = (std::string *)v135.__r_.__value_.__r.__words[0];
                }
                if (v82)
                {
                  if (*((char *)a3 + 23) >= 0) {
                    unint64_t v84 = a3;
                  }
                  else {
                    unint64_t v84 = *a3;
                  }
                  memmove(v83, v84, v82);
                }
                strcpy((char *)v83 + v82, "does not have an array element lookup for an array type '");
                int v85 = *(char *)(v26 + v27 + 23);
                if (v85 >= 0) {
                  uint64_t v86 = (const std::string::value_type *)(v26 + v27);
                }
                else {
                  uint64_t v86 = *(const std::string::value_type **)(v26 + v27);
                }
                if (v85 >= 0) {
                  std::string::size_type v87 = *(unsigned __int8 *)(v26 + v27 + 23);
                }
                else {
                  std::string::size_type v87 = *(void *)(v26 + v27 + 8);
                }
                BOOL v88 = std::string::append(&v135, v86, v87);
                long long v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
                v136.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v89;
                v88->__r_.__value_.__l.__size_ = 0;
                v88->__r_.__value_.__r.__words[2] = 0;
                v88->__r_.__value_.__r.__words[0] = 0;
                uint64_t v37 = v130;
                uint64_t v90 = std::string::append(&v136, "' on type ");
                a5 = v131;
                long long v91 = *(_OWORD *)&v90->__r_.__value_.__l.__data_;
                v137.__r_.__value_.__r.__words[2] = v90->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v91;
                v90->__r_.__value_.__l.__size_ = 0;
                v90->__r_.__value_.__r.__words[2] = 0;
                v90->__r_.__value_.__r.__words[0] = 0;
                if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v69 = &v141;
                }
                else {
                  uint64_t v69 = (std::string *)v141.__r_.__value_.__r.__words[0];
                }
                if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type size = v141.__r_.__value_.__l.__size_;
                }
                goto LABEL_143;
              }
LABEL_170:
              size_t v76 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
              size_t v77 = v76;
              if ((v55 & 0x80) != 0)
              {
                size_t v79 = __str.__r_.__value_.__l.__size_;
                uint64_t v37 = v130;
                if (v76 != __str.__r_.__value_.__l.__size_)
                {
                  uint64_t v80 = siri::intelligence::TYPE_ARRAY[0];
                  size_t v81 = strlen(siri::intelligence::TYPE_ARRAY[0]);
LABEL_206:
                  if (v81 == v79)
                  {
                    if (v79 == -1) {
                      std::string::__throw_out_of_range[abi:ne180100]();
                    }
                    BOOL v92 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    goto LABEL_209;
                  }
                  goto LABEL_210;
                }
                if (v76 == -1) {
                  std::string::__throw_out_of_range[abi:ne180100]();
                }
                char v78 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              else
              {
                uint64_t v37 = v130;
                if (v76 != v55)
                {
                  uint64_t v80 = siri::intelligence::TYPE_ARRAY[0];
                  size_t v81 = strlen(siri::intelligence::TYPE_ARRAY[0]);
                  goto LABEL_203;
                }
                char v78 = &__str;
              }
              a5 = v131;
              if (!memcmp(v78, siri::intelligence::TYPE_DICTIONARY[0], v77))
              {
                int v45 = 1;
                goto LABEL_153;
              }
              uint64_t v80 = siri::intelligence::TYPE_ARRAY[0];
              size_t v81 = strlen(siri::intelligence::TYPE_ARRAY[0]);
              if ((v55 & 0x80) != 0)
              {
                size_t v79 = __str.__r_.__value_.__l.__size_;
                goto LABEL_206;
              }
LABEL_203:
              size_t v79 = v55;
              if (v81 == v55)
              {
                BOOL v92 = &__str;
LABEL_209:
                if (memcmp(v92, v80, v79)) {
                  goto LABEL_210;
                }
                int v45 = 1;
                a5 = v131;
LABEL_153:
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
                goto LABEL_155;
              }
LABEL_210:
              std::string::operator=(&v141, &__str);
              a5 = v131;
              int v45 = 0;
              goto LABEL_153;
            }
          }
          else if (v56 == HIBYTE(__str.__r_.__value_.__r.__words[2]))
          {
            unint64_t v58 = &__str;
            goto LABEL_119;
          }
LABEL_120:
          if (*((char *)a3 + 23) >= 0) {
            size_t v59 = *((unsigned __int8 *)a3 + 23);
          }
          else {
            size_t v59 = (size_t)a3[1];
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v135, v59 + 58);
          if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v60 = &v135;
          }
          else {
            uint64_t v60 = (std::string *)v135.__r_.__value_.__r.__words[0];
          }
          uint64_t v37 = v130;
          if (v59)
          {
            if (*((char *)a3 + 23) >= 0) {
              uint64_t v61 = a3;
            }
            else {
              uint64_t v61 = *a3;
            }
            memmove(v60, v61, v59);
          }
          strcpy((char *)v60 + v59, "attempts to lookup an array element for a non-array type '");
          int v62 = *(char *)(v26 + v27 + 23);
          if (v62 >= 0) {
            uint64_t v63 = (const std::string::value_type *)(v26 + v27);
          }
          else {
            uint64_t v63 = *(const std::string::value_type **)(v26 + v27);
          }
          if (v62 >= 0) {
            std::string::size_type v64 = *(unsigned __int8 *)(v26 + v27 + 23);
          }
          else {
            std::string::size_type v64 = *(void *)(v26 + v27 + 8);
          }
          uint64_t v65 = std::string::append(&v135, v63, v64);
          long long v66 = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
          v136.__r_.__value_.__r.__words[2] = v65->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v66;
          v65->__r_.__value_.__l.__size_ = 0;
          v65->__r_.__value_.__r.__words[2] = 0;
          v65->__r_.__value_.__r.__words[0] = 0;
          uint64_t v67 = std::string::append(&v136, "' on type ");
          a5 = v131;
          long long v68 = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
          v137.__r_.__value_.__r.__words[2] = v67->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v68;
          v67->__r_.__value_.__l.__size_ = 0;
          v67->__r_.__value_.__r.__words[2] = 0;
          v67->__r_.__value_.__r.__words[0] = 0;
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v69 = &v141;
          }
          else {
            uint64_t v69 = (std::string *)v141.__r_.__value_.__r.__words[0];
          }
          if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(v141.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = v141.__r_.__value_.__l.__size_;
          }
LABEL_143:
          std::string::size_type v71 = std::string::append(&v137, (const std::string::value_type *)v69, size);
          std::string v138 = *v71;
          v71->__r_.__value_.__l.__size_ = 0;
          v71->__r_.__value_.__r.__words[2] = 0;
          v71->__r_.__value_.__r.__words[0] = 0;
          siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&v138, a5);
          if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v138.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v137.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v136.__r_.__value_.__l.__data_);
          }
          if ((SHIBYTE(v135.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_152;
          }
          int v53 = (void *)v135.__r_.__value_.__r.__words[0];
          goto LABEL_151;
        }
      }
      if (*((char *)a3 + 23) >= 0) {
        size_t v38 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v38 = (size_t)a3[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v138, v38 + 33);
      if ((v138.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v39 = &v138;
      }
      else {
        uint64_t v39 = (std::string *)v138.__r_.__value_.__r.__words[0];
      }
      if (v38)
      {
        if (*((char *)a3 + 23) >= 0) {
          unint64_t v40 = a3;
        }
        else {
          unint64_t v40 = *a3;
        }
        memmove(v39, v40, v38);
      }
      strcpy((char *)v39 + v38, "reference to undefined variable: ");
      int v41 = *(char *)(v26 + v27 + 23);
      if (v41 >= 0) {
        BOOL v42 = (const std::string::value_type *)(v26 + v27);
      }
      else {
        BOOL v42 = *(const std::string::value_type **)(v26 + v27);
      }
      if (v41 >= 0) {
        std::string::size_type v43 = *(unsigned __int8 *)(v26 + v27 + 23);
      }
      else {
        std::string::size_type v43 = *(void *)(v26 + v27 + 8);
      }
      uint64_t v44 = std::string::append(&v138, v42, v43);
      std::string __str = *v44;
      v44->__r_.__value_.__l.__size_ = 0;
      v44->__r_.__value_.__r.__words[2] = 0;
      v44->__r_.__value_.__r.__words[0] = 0;
      a5 = v131;
      siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_UNDEF_VAR, (long long *)&__str, v131);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      int v45 = 1;
LABEL_155:
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      if (v45) {
        goto LABEL_298;
      }
      goto LABEL_158;
    }
LABEL_52:
    if (!siri::intelligence::DialogTypes::IsDialogTypeInput((siri::intelligence *)&v141, (const void **)(v26 + v27))) {
      break;
    }
    siri::intelligence::DialogTypes::GetDialogTypeInputType((siri::intelligence *)&v141, (const void **)(v26 + v27), &__str);
    if (*(unsigned char *)(v26 + v27 + 48)
      && !siri::intelligence::StringEndsWith(&__str, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX))
    {
      if (*((char *)a3 + 23) >= 0) {
        size_t v107 = *((unsigned __int8 *)a3 + 23);
      }
      else {
        size_t v107 = (size_t)a3[1];
      }
      size_t v108 = &v135;
      std::string::basic_string[abi:ne180100]((uint64_t)&v135, v107 + 58);
      if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        size_t v108 = (std::string *)v135.__r_.__value_.__r.__words[0];
      }
      if (v107)
      {
        if (*((char *)a3 + 23) >= 0) {
          int v109 = a3;
        }
        else {
          int v109 = *a3;
        }
        memmove(v108, v109, v107);
      }
      strcpy((char *)v108 + v107, "attempts to lookup an array element for a non-array type '");
      int v110 = *(char *)(v26 + v27 + 23);
      if (v110 >= 0) {
        int v111 = (const std::string::value_type *)(v26 + v27);
      }
      else {
        int v111 = *(const std::string::value_type **)(v26 + v27);
      }
      if (v110 >= 0) {
        std::string::size_type v112 = *(unsigned __int8 *)(v26 + v27 + 23);
      }
      else {
        std::string::size_type v112 = *(void *)(v26 + v27 + 8);
      }
      long long v113 = std::string::append(&v135, v111, v112);
      long long v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
      v136.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v114;
      v113->__r_.__value_.__l.__size_ = 0;
      v113->__r_.__value_.__r.__words[2] = 0;
      v113->__r_.__value_.__r.__words[0] = 0;
      int v115 = std::string::append(&v136, "' on type ");
      long long v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
      v137.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v116;
      v115->__r_.__value_.__l.__size_ = 0;
      v115->__r_.__value_.__r.__words[2] = 0;
      v115->__r_.__value_.__r.__words[0] = 0;
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v117 = &v141;
      }
      else {
        std::string::size_type v117 = (std::string *)v141.__r_.__value_.__r.__words[0];
      }
      if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v118 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v118 = v141.__r_.__value_.__l.__size_;
      }
LABEL_287:
      size_t v129 = std::string::append(&v137, (const std::string::value_type *)v117, v118);
      std::string v138 = *v129;
      v129->__r_.__value_.__l.__size_ = 0;
      v129->__r_.__value_.__r.__words[2] = 0;
      v129->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&v138, a5);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v136.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v135.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        size_t v106 = (void *)__str.__r_.__value_.__r.__words[0];
        goto LABEL_297;
      }
      goto LABEL_298;
    }
    if (v28 != v30)
    {
      int v34 = *(unsigned __int8 *)(v26 + v27 + 48);
      if (v34 != siri::intelligence::StringEndsWith(&__str, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX))
      {
        if (*((char *)a3 + 23) >= 0) {
          size_t v119 = *((unsigned __int8 *)a3 + 23);
        }
        else {
          size_t v119 = (size_t)a3[1];
        }
        char v120 = &v135;
        std::string::basic_string[abi:ne180100]((uint64_t)&v135, v119 + 57);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          char v120 = (std::string *)v135.__r_.__value_.__r.__words[0];
        }
        if (v119)
        {
          if (*((char *)a3 + 23) >= 0) {
            long long v121 = a3;
          }
          else {
            long long v121 = *a3;
          }
          memmove(v120, v121, v119);
        }
        strcpy((char *)v120 + v119, "does not have an array element lookup for an array type '");
        int v122 = *(char *)(v26 + v27 + 23);
        if (v122 >= 0) {
          int v123 = (const std::string::value_type *)(v26 + v27);
        }
        else {
          int v123 = *(const std::string::value_type **)(v26 + v27);
        }
        if (v122 >= 0) {
          std::string::size_type v124 = *(unsigned __int8 *)(v26 + v27 + 23);
        }
        else {
          std::string::size_type v124 = *(void *)(v26 + v27 + 8);
        }
        size_t v125 = std::string::append(&v135, v123, v124);
        long long v126 = *(_OWORD *)&v125->__r_.__value_.__l.__data_;
        v136.__r_.__value_.__r.__words[2] = v125->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v136.__r_.__value_.__l.__data_ = v126;
        v125->__r_.__value_.__l.__size_ = 0;
        v125->__r_.__value_.__r.__words[2] = 0;
        v125->__r_.__value_.__r.__words[0] = 0;
        size_t v127 = std::string::append(&v136, "' on type ");
        long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
        v137.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v128;
        v127->__r_.__value_.__l.__size_ = 0;
        v127->__r_.__value_.__r.__words[2] = 0;
        v127->__r_.__value_.__r.__words[0] = 0;
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v117 = &v141;
        }
        else {
          std::string::size_type v117 = (std::string *)v141.__r_.__value_.__r.__words[0];
        }
        if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v118 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v118 = v141.__r_.__value_.__l.__size_;
        }
        goto LABEL_287;
      }
    }
    std::string::operator=(&v141, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_158:
    ++v28;
    std::string::size_type v26 = v140.__r_.__value_.__r.__words[0];
    unint64_t v29 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v140.__r_.__value_.__l.__size_ - v140.__r_.__value_.__r.__words[0]) >> 3);
    v27 += 56;
    if (v28 >= v29) {
      goto LABEL_298;
    }
  }
  if (*((char *)a3 + 23) >= 0) {
    size_t v93 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v93 = (size_t)a3[1];
  }
  uint64_t v94 = &v136;
  std::string::basic_string[abi:ne180100]((uint64_t)&v136, v93 + 32);
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v94 = (std::string *)v136.__r_.__value_.__r.__words[0];
  }
  if (v93)
  {
    if (*((char *)a3 + 23) >= 0) {
      BOOL v95 = a3;
    }
    else {
      BOOL v95 = *a3;
    }
    memmove(v94, v95, v93);
  }
  strcpy((char *)v94 + v93, "refers to a non-existing input '");
  int v96 = *(char *)(v26 + v27 + 23);
  if (v96 >= 0) {
    size_t v97 = (const std::string::value_type *)(v26 + v27);
  }
  else {
    size_t v97 = *(const std::string::value_type **)(v26 + v27);
  }
  if (v96 >= 0) {
    std::string::size_type v98 = *(unsigned __int8 *)(v26 + v27 + 23);
  }
  else {
    std::string::size_type v98 = *(void *)(v26 + v27 + 8);
  }
  size_t v99 = std::string::append(&v136, v97, v98);
  long long v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
  v137.__r_.__value_.__r.__words[2] = v99->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v137.__r_.__value_.__l.__data_ = v100;
  v99->__r_.__value_.__l.__size_ = 0;
  v99->__r_.__value_.__r.__words[2] = 0;
  v99->__r_.__value_.__r.__words[0] = 0;
  uint64_t v101 = std::string::append(&v137, "' on type ");
  long long v102 = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
  v138.__r_.__value_.__r.__words[2] = v101->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v138.__r_.__value_.__l.__data_ = v102;
  v101->__r_.__value_.__l.__size_ = 0;
  v101->__r_.__value_.__r.__words[2] = 0;
  v101->__r_.__value_.__r.__words[0] = 0;
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v103 = &v141;
  }
  else {
    BOOL v103 = (std::string *)v141.__r_.__value_.__r.__words[0];
  }
  if ((v141.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v104 = HIBYTE(v141.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v104 = v141.__r_.__value_.__l.__size_;
  }
  int v105 = std::string::append(&v138, (const std::string::value_type *)v103, v104);
  std::string __str = *v105;
  v105->__r_.__value_.__l.__size_ = 0;
  v105->__r_.__value_.__r.__words[2] = 0;
  v105->__r_.__value_.__r.__words[0] = 0;
  siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_UNDEF_VAR, (long long *)&__str, a5);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v137.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0)
  {
    size_t v106 = (void *)v136.__r_.__value_.__r.__words[0];
LABEL_297:
    operator delete(v106);
  }
LABEL_298:
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v140;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
  if (v134) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v134);
  }
}

void sub_239AA5C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  if (a46 < 0) {
    operator delete(a41);
  }
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  a41 = (void *)(v46 - 152);
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  if (*(char *)(v46 - 105) < 0) {
    operator delete(*(void **)(v46 - 128));
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::ValidateVariableReference(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4, siri::intelligence::ValidationResults *a5, uint64_t a6)
{
  if (*(void *)a2)
  {
    if (v12)
    {
      int v13 = *(std::__shared_weak_count **)(a2 + 8);
      if (v13) {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      std::string v33 = v13;
      std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v39, v12 + 9);
      size_t v14 = v39;
      if (v39 != v40)
      {
        do
        {
          if (!siri::intelligence::DialogTypes::IsDialogTypeInput((siri::intelligence *)a3, (const void **)v14 + 4))
          {
            if (*((char *)a4 + 23) >= 0) {
              size_t v15 = *((unsigned __int8 *)a4 + 23);
            }
            else {
              size_t v15 = (size_t)a4[1];
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v35, v15 + 32);
            if ((v35.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v16 = &v35;
            }
            else {
              unint64_t v16 = (std::string *)v35.__r_.__value_.__r.__words[0];
            }
            if (v15)
            {
              if (*((char *)a4 + 23) >= 0) {
                size_t v17 = a4;
              }
              else {
                size_t v17 = *a4;
              }
              memmove(v16, v17, v15);
            }
            strcpy((char *)v16 + v15, "refers to a non-existing input '");
            int v18 = *((char *)v14 + 55);
            if (v18 >= 0) {
              uint64_t v19 = (const std::string::value_type *)(v14 + 4);
            }
            else {
              uint64_t v19 = (const std::string::value_type *)v14[4];
            }
            if (v18 >= 0) {
              std::string::size_type v20 = *((unsigned __int8 *)v14 + 55);
            }
            else {
              std::string::size_type v20 = (std::string::size_type)v14[5];
            }
            std::vector<std::string> v21 = std::string::append(&v35, v19, v20);
            long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
            v36.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v36.__r_.__value_.__l.__data_ = v22;
            v21->__r_.__value_.__l.__size_ = 0;
            v21->__r_.__value_.__r.__words[2] = 0;
            v21->__r_.__value_.__r.__words[0] = 0;
            std::string v23 = std::string::append(&v36, "' on type ");
            long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
            v37.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v24;
            v23->__r_.__value_.__l.__size_ = 0;
            v23->__r_.__value_.__r.__words[2] = 0;
            v23->__r_.__value_.__r.__words[0] = 0;
            int v25 = *(char *)(a3 + 23);
            if (v25 >= 0) {
              std::string::size_type v26 = (const std::string::value_type *)a3;
            }
            else {
              std::string::size_type v26 = *(const std::string::value_type **)a3;
            }
            if (v25 >= 0) {
              std::string::size_type v27 = *(unsigned __int8 *)(a3 + 23);
            }
            else {
              std::string::size_type v27 = *(void *)(a3 + 8);
            }
            unint64_t v28 = std::string::append(&v37, v26, v27);
            std::string __p = *v28;
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            siri::intelligence::ValidationResults::AddError(a5, (long long *)siri::intelligence::CODE_UNDEF_VAR, (long long *)&__p, a6);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v37.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v36.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v35.__r_.__value_.__l.__data_);
            }
          }
          siri::intelligence::DialogTypes::GetDialogTypeInputType((siri::intelligence *)a3, (const void **)v14 + 4, &__p);
          unint64_t v29 = (std::__shared_weak_count *)v14[8];
          v34[0] = v14[7];
          v34[1] = v29;
          if (v29) {
            atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::intelligence::Memory::ValidateVariableReference(a1, v34, &__p, a4, a5, a6);
          if (v29) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          unint64_t v30 = v14[1];
          if (v30)
          {
            do
            {
              size_t v31 = (void **)v30;
              unint64_t v30 = (void *)*v30;
            }
            while (v30);
          }
          else
          {
            do
            {
              size_t v31 = (void **)v14[2];
              BOOL v32 = *v31 == v14;
              size_t v14 = v31;
            }
            while (!v32);
          }
          size_t v14 = v31;
        }
        while (v31 != v40);
      }
      std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v39, v40[0]);
      if (v33) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v33);
      }
    }
  }
}

void sub_239AA61E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *siri::intelligence::Memory::GetChangedVariableNames@<X0>(const void ***this@<X0>, uint64_t *a2@<X8>)
{
  return std::set<std::string>::set[abi:ne180100](a2, this + 6);
}

uint64_t siri::intelligence::Memory::SetIntelligence(uint64_t result, uint64_t a2)
{
  *(void *)(result + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return result;
}

uint64_t siri::intelligence::Memory::GetIntelligence(siri::intelligence::Memory *this)
{
  return *((void *)this + 5);
}

void siri::intelligence::Memory::Load(char **this, const protobuf::Intelligence_State *a2)
{
  (*(void (**)(char *))(*(void *)*this + 24))(*this);
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  this[6] = (char *)(this + 7);
  this[7] = 0;
  this[8] = 0;
  if (*((int *)a2 + 8) >= 1)
  {
    for (int i = 0; i < *((_DWORD *)a2 + 8); ++i)
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_State_Memory>::TypeHandler>((uint64_t)a2 + 24, i);
      uint64_t v7 = v5;
      memset(&v19, 0, sizeof(v19));
      int v8 = *(_DWORD *)(v5 + 16);
      if ((v8 & 4) != 0)
      {
        size_t v10 = *(_DWORD **)(v5 + 40);
        if (!v10)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 19433);
          size_t v11 = google::protobuf::internal::LogMessage::operator<<(__p, "CHECK failed: !value || values_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p[0].__r_.__value_.__l.__data_);
          size_t v10 = *(_DWORD **)(v7 + 40);
        }
        if (v10) {
          char v12 = v10;
        }
        else {
          char v12 = &protobuf::_Intelligence_State_Memory_Value_default_instance_;
        }
        MEMORY[0x23ECAA8E0](&v19, "[");
        if ((int)v12[8] >= 1)
        {
          int v13 = 0;
          do
          {
            google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(v12 + 6), v13);
            std::operator+<char>();
            size_t v14 = std::string::append(&v18, "'");
            long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
            __p[0].__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v15;
            v14->__r_.__value_.__l.__size_ = 0;
            v14->__r_.__value_.__r.__words[2] = 0;
            v14->__r_.__value_.__r.__words[0] = 0;
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              unint64_t v16 = __p;
            }
            else {
              unint64_t v16 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
            }
            if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type size = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type size = __p[0].__r_.__value_.__l.__size_;
            }
            std::string::append(&v19, (const std::string::value_type *)v16, size);
            if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p[0].__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v18.__r_.__value_.__l.__data_);
            }
            ++v13;
          }
          while (v13 < v12[8]);
        }
        std::string::append(&v19, "]");
      }
      else
      {
        if ((v8 & 2) == 0)
        {
          uint64_t v9 = *(uint64_t **)(v5 + 24);
          if (*((char *)v9 + 23) < 0) {
            uint64_t v9 = (uint64_t *)*v9;
          }
          siri::intelligence::Log::Warning((siri::intelligence::Log *)"Key %s has no value", v6, v9);
          goto LABEL_29;
        }
        std::string::operator=(&v19, *(const std::string **)(v5 + 32));
      }
      siri::intelligence::Memory::SetVariableFromString((uint64_t)this, *(const void ***)(v7 + 24), (uint64_t)&v19);
LABEL_29:
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_239AA6508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::Save(siri::intelligence::Memory *this, protobuf::Intelligence_State *a2)
{
  if (a2)
  {
    std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v29, (const void ***)(*(void *)this + 72));
    uint64_t v3 = v29;
    if (v29 != v30)
    {
      while (1)
      {
        BOOL v4 = (int *)*((void *)a2 + 5);
        if (!v4) {
          break;
        }
        uint64_t v5 = *((int *)a2 + 8);
        int v6 = *v4;
        if ((int)v5 < *v4)
        {
          *((_DWORD *)a2 + 8) = v5 + 1;
          uint64_t v7 = *(protobuf::Intelligence_State_Memory **)&v4[2 * v5 + 2];
          goto LABEL_10;
        }
        if (v6 == *((_DWORD *)a2 + 9)) {
          goto LABEL_8;
        }
LABEL_9:
        int *v4 = v6 + 1;
        uint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory>(*((google::protobuf::internal::ArenaImpl **)a2
                                                                                              + 3));
        uint64_t v8 = *((void *)a2 + 5);
        uint64_t v9 = *((int *)a2 + 8);
        *((_DWORD *)a2 + 8) = v9 + 1;
        *(void *)(v8 + 8 * v9 + 8) = v7;
LABEL_10:
        size_t v10 = (const std::string *)(v3 + 4);
        size_t v11 = (std::string *)*((void *)v7 + 3);
        *((_DWORD *)v7 + 4) |= 1u;
        if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7 + 24, (uint64_t)v10);
        }
        std::string::operator=(v11, v10);
        char v12 = v3[7];
        if (*((char *)v12 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v12[4], v12[5]);
        }
        else {
          std::string v28 = *(std::string *)(v12 + 4);
        }
        if (siri::intelligence::IsPrimitiveType((unsigned __int8 *)&v28))
        {
          (*(void (**)(__n128 *__return_ptr))(*v3[7] + 56))(&__p);
          *((_DWORD *)v7 + 4) |= 2u;
          google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)v7 + 4, (uint64_t)&google::protobuf::internal::fixed_address_empty_string, &__p);
          if (v27 < 0) {
            operator delete((void *)__p.n128_u64[0]);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
          int IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v28, (unsigned __int8 *)&__p);
          int v14 = IsEquivalentType;
          if (v27 < 0)
          {
            operator delete((void *)__p.n128_u64[0]);
            if (v14)
            {
LABEL_23:
              long long v15 = v3[7];
              if (v15)
              {
                if (v16)
                {
                  size_t v17 = (std::__shared_weak_count *)v3[8];
                  if (v17) {
                    atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
LABEL_29:
                  *((_DWORD *)v7 + 4) |= 4u;
                  std::string v18 = (protobuf::Intelligence_State_Memory_Value *)*((void *)v7 + 5);
                  if (v18)
                  {
                    if (!v16)
                    {
LABEL_40:
                      if (v17) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
                      }
                      goto LABEL_42;
                    }
                  }
                  else
                  {
                    std::string v18 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_State_Memory_Value>(0);
                    *((void *)v7 + 5) = v18;
                    if (!v16) {
                      goto LABEL_40;
                    }
                  }
                  if (v16[10] != v16[9])
                  {
                    unint64_t v19 = 0;
                    uint64_t v20 = (uint64_t)v18 + 24;
                    do
                    {
                      siri::intelligence::VariableArray::GetItem((uint64_t)v16, v19, &v24);
                      (*(void (**)(__n128 *__return_ptr))(*(void *)v24 + 56))(&__p);
                      google::protobuf::internal::RepeatedPtrFieldBase::Add<google::protobuf::RepeatedPtrField<std::string>::TypeHandler,(void *)0>(v20, &__p);
                      if (v27 < 0) {
                        operator delete((void *)__p.n128_u64[0]);
                      }
                      if (v25) {
                        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
                      }
                      ++v19;
                    }
                    while (v19 < (uint64_t)(v16[10] - v16[9]) >> 4);
                  }
                  goto LABEL_40;
                }
              }
              else
              {
                unint64_t v16 = 0;
              }
              size_t v17 = 0;
              goto LABEL_29;
            }
          }
          else if (IsEquivalentType)
          {
            goto LABEL_23;
          }
        }
LABEL_42:
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        std::vector<std::string> v21 = v3[1];
        if (v21)
        {
          do
          {
            long long v22 = (void **)v21;
            std::vector<std::string> v21 = (void *)*v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            long long v22 = (void **)v3[2];
            BOOL v23 = *v22 == v3;
            uint64_t v3 = v22;
          }
          while (!v23);
        }
        uint64_t v3 = v22;
        if (v22 == v30) {
          goto LABEL_50;
        }
      }
      int v6 = *((_DWORD *)a2 + 9);
LABEL_8:
      google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)a2 + 6, v6 + 1);
      BOOL v4 = (int *)*((void *)a2 + 5);
      int v6 = *v4;
      goto LABEL_9;
    }
LABEL_50:
    std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v29, v30[0]);
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"NULL state in Memory::Save", 0);
  }
}

void sub_239AA692C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25)
{
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&a24, a25);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  double v2 = operator new(0x78uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_239AA69FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29300;
  siri::intelligence::VariableDictionary::VariableDictionary((siri::intelligence::VariableDictionary *)(a1 + 3));
  return a1;
}

void sub_239AA6A58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29300;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29300;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::vector<siri::intelligence::VariableComponent>::__push_back_slow_path<siri::intelligence::VariableComponent const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x492492492492492) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v4) {
    unint64_t v4 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v6 = 0x492492492492492;
  }
  else {
    unint64_t v6 = v4;
  }
  int v14 = a1 + 2;
  if (v6) {
    uint64_t v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>>((uint64_t)(a1 + 2), v6);
  }
  else {
    uint64_t v7 = 0;
  }
  size_t v10 = v7;
  size_t v11 = (std::string *)&v7[56 * v3];
  int v13 = &v7[56 * v6];
  std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>(a1 + 16, v11, a2);
  char v12 = &v11[2].__r_.__value_.__s.__data_[8];
  std::vector<siri::intelligence::VariableComponent>::__swap_out_circular_buffer(a1, &v10);
  uint64_t v8 = a1[1];
  std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer(&v10);
  return v8;
}

void sub_239AA6C1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>(int a1, std::string *this, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    this->__r_.__value_.__r.__words[2] = *((void *)a3 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  unint64_t v6 = this + 1;
  if (*((char *)a3 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *((const std::string::value_type **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v7 = *(long long *)((char *)a3 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((void *)a3 + 5);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  this[2].__r_.__value_.__s.__data_[0] = *((unsigned char *)a3 + 48);
}

void sub_239AA6CB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<siri::intelligence::VariableComponent>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>,std::reverse_iterator<siri::intelligence::VariableComponent*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 == a5)
  {
    uint64_t v11 = a6;
  }
  else
  {
    uint64_t v8 = a7;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 56);
      *(void *)(v8 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(a3 - 40);
      *(_OWORD *)(v8 - 56) = v9;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
      *(void *)(a3 - 56) = 0;
      long long v10 = *(_OWORD *)(a3 - 32);
      *(void *)(v8 - 16) = *(void *)(a3 - 16);
      *(_OWORD *)(v8 - 32) = v10;
      *(void *)(a3 - 24) = 0;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 32) = 0;
      *(unsigned char *)(v8 - 8) = *(unsigned char *)(a3 - 8);
      v8 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v8;
    uint64_t v11 = v16;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return v11;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::VariableComponent>,std::reverse_iterator<siri::intelligence::VariableComponent*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

void **std::__split_buffer<siri::intelligence::VariableComponent>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<siri::intelligence::VariableComponent>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v4, i - 56);
  }
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>@<X0>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<siri::intelligence::VariableArray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_239AA6FA8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string const&,std::allocator<siri::intelligence::VariableArray>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED292B0;
  siri::intelligence::VariableArray::VariableArray(a1 + 3, a2);
  return a1;
}

void sub_239AA7004(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED292B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableArray>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED292B0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string &,void>@<X0>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableDictionary>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_239AA70FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableDictionary>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29300;
  siri::intelligence::VariableDictionary::VariableDictionary(a1 + 3, a2);
  return a1;
}

void sub_239AA7158(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string &,void>@<X0>(const std::string *a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableArray>,0>(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_239AA71B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableArray>::__shared_ptr_emplace[abi:ne180100]<std::string &,std::allocator<siri::intelligence::VariableArray>,0>(void *a1, const std::string *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED292B0;
  siri::intelligence::VariableArray::VariableArray(a1 + 3, a2);
  return a1;
}

void sub_239AA7210(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableReference,std::allocator<siri::intelligence::VariableReference>,std::string &,void>(void *a1, const std::string *a2)
{
  uint64_t v4 = operator new(0x78uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26ED29210;
  uint64_t result = siri::intelligence::VariableReference::VariableReference(v4 + 3, a2);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_239AA7288(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableReference>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29210;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableReference>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29210;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableReference>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t std::allocate_shared[abi:ne180100]<siri::intelligence::VariableFunction,std::allocator<siri::intelligence::VariableFunction>,std::string &,void>(uint64_t *a1, const std::string *a2)
{
  uint64_t v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  void *v4 = &unk_26ED29260;
  uint64_t result = siri::intelligence::VariableFunction::VariableFunction((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_239AA73A0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29260;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::VariableFunction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v8, a2);
  uint64_t result = *v5;
  if (!*v5)
  {
    std::__tree<std::string>::__construct_node<std::string const&>((uint64_t)a1, a3, (uint64_t)&v7);
    std::__tree<std::string>::__insert_node_at(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x68uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_239AA750C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence14VariableNumberENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED291C0;
  siri::intelligence::VariableNumber::VariableNumber((siri::intelligence::VariableNumber *)(a1 + 3));
  return a1;
}

void sub_239AA7568(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_239AA75B4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15VariableBooleanENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29170;
  siri::intelligence::VariableBoolean::VariableBoolean((siri::intelligence::VariableBoolean *)(a1 + 3));
  return a1;
}

void sub_239AA7610(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  char v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      char v12 = ++v4;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_239AA76D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t *std::set<std::string>::set[abi:ne180100](uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(a1, *a2, a2 + 1);
  return a1;
}

void sub_239AA7724(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::set<std::string>::insert[abi:ne180100]<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      uint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

double YAML::EmitFromEvents::EmitFromEvents(YAML::EmitFromEvents *this, YAML::Emitter *a2)
{
  *(void *)this = &unk_26ED29350;
  *((void *)this + 1) = a2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

{
  double result;

  *(void *)this = &unk_26ED29350;
  *((void *)this + 1) = a2;
  double result = 0.0;
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  return result;
}

uint64_t *YAML::EmitFromEvents::OnNull(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, (unsigned __int8 *)__p, a3);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return YAML::Emitter::Write(a1[1]);
}

void sub_239AA7898(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

YAML::Emitter *YAML::EmitFromEvents::BeginNode(YAML::Emitter *this)
{
  uint64_t v1 = *((void *)this + 7);
  if (v1)
  {
    uint64_t v2 = this;
    int v3 = *(_DWORD *)(*(void *)(*((void *)this + 3)
                               + (((unint64_t)(v1 + *((void *)this + 6) - 1) >> 7) & 0x1FFFFFFFFFFFFF8))
                   + 4 * ((v1 + *((void *)this + 6) - 1) & 0x3FF));
    if (v3 == 1)
    {
      int v4 = 2;
      uint64_t v5 = 27;
    }
    else
    {
      if (v3 != 2) {
        return this;
      }
      int v4 = 1;
      uint64_t v5 = 28;
    }
    this = YAML::Emitter::SetLocalValue(*((YAML::Emitter **)this + 1), v5);
    unint64_t v6 = *((void *)v2 + 7) + *((void *)v2 + 6) - 1;
    *(_DWORD *)(*(void *)(*((void *)v2 + 3) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF)) = v4;
  }
  return this;
}

void YAML::EmitFromEvents::EmitProps(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if ((char)a2[23] < 0)
  {
    std::string::size_type v7 = *((void *)a2 + 1);
    if (!v7) {
      goto LABEL_21;
    }
    if (v7 == 1)
    {
      uint64_t v8 = *(const std::string::value_type **)a2;
      int v9 = *(unsigned __int8 *)v8;
      if (v9 == 33 || v9 == 63) {
        goto LABEL_21;
      }
      unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
    }
    else
    {
      unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
      uint64_t v8 = *(const std::string::value_type **)a2;
    }
    std::string::__init_copy_ctor_external(&v12, v8, v7);
  }
  else
  {
    if (!a2[23]) {
      goto LABEL_21;
    }
    if (a2[23] == 1)
    {
      int v5 = *a2;
      if (v5 == 33 || v5 == 63) {
        goto LABEL_21;
      }
    }
    unint64_t v6 = *(YAML::Emitter **)(a1 + 8);
    std::string v12 = *(std::string *)a2;
  }
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  YAML::_Tag::_Tag(&v13, &v16, (long long *)&v12, 0);
  if (v17 < 0) {
    operator delete((void *)v16);
  }
  YAML::Emitter::Write(v6, (uint64_t)&v13);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v12.__r_.__value_.__l.__data_);
    if (!a3) {
      return;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (!a3) {
    return;
  }
LABEL_22:
  char v10 = *(uint64_t **)(a1 + 8);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v13, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  }
  else {
    std::string v13 = v11;
  }
  YAML::Emitter::Write(v10, (uint64_t)&v13);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_239AA7AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void YAML::EmitFromEvents::OnAlias(YAML::Emitter *a1)
{
  YAML::EmitFromEvents::BeginNode(a1);
  uint64_t v2 = (uint64_t *)*((void *)a1 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v4 = __p;
  }
  YAML::Emitter::Write(v2, (uint64_t)&v4);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239AA7BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t anonymous namespace'::ToString(_anonymous_namespace_ *this)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  v3[0] = *MEMORY[0x263F8C2B8];
  uint64_t v1 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(void *)((char *)v3 + *(void *)(v3[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v3[2] = v1;
  v3[3] = MEMORY[0x263F8C318] + 16;
  if (v4 < 0) {
    operator delete((void *)v3[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECAAC10](&v5);
}

void sub_239AA7D90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::EmitFromEvents::OnScalar(YAML::Emitter *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, const void **a5)
{
  YAML::EmitFromEvents::BeginNode(a1);
  YAML::EmitFromEvents::EmitProps((uint64_t)a1, a3, a4);
  uint64_t v9 = *((void *)a1 + 1);

  return YAML::Emitter::Write(v9, a5);
}

void YAML::EmitFromEvents::OnSequenceStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    uint64_t v9 = 24;
  }
  else
  {
    if (a5 != 2) {
      goto LABEL_6;
    }
    uint64_t v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  char v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(unsigned char **)v10) {
    YAML::Emitter::EmitBeginSeq(v10);
  }
  int v11 = 0;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((void *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnSequenceEnd(YAML::EmitFromEvents *this)
{
  uint64_t v2 = (YAML::Emitter *)*((void *)this + 1);
  if (**(unsigned char **)v2) {
    YAML::Emitter::EmitEndSeq(v2);
  }
  uint64_t v3 = *((void *)this + 7) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 3)
                             + (((unint64_t)(v3 + *((void *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((void *)this + 6)) & 0x3FF)))
    __assert_rtn("OnSequenceEnd", "emitfromevents.cpp", 68, "m_stateStack.top() == State::WaitingForSequenceEntry");
  *((void *)this + 7) = v3;

  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
}

void YAML::EmitFromEvents::OnMapStart(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, int a5)
{
  YAML::EmitFromEvents::BeginNode((YAML::Emitter *)a1);
  YAML::EmitFromEvents::EmitProps(a1, a3, a4);
  if (a5 == 1)
  {
    uint64_t v9 = 24;
  }
  else
  {
    if (a5 != 2) {
      goto LABEL_6;
    }
    uint64_t v9 = 23;
  }
  YAML::Emitter::SetLocalValue(*(YAML::Emitter **)(a1 + 8), v9);
LABEL_6:
  char v10 = *(YAML::Emitter **)(a1 + 8);
  if (**(unsigned char **)v10) {
    YAML::Emitter::EmitBeginMap(v10);
  }
  int v11 = 1;
  std::deque<YAML::EmitFromEvents::State::value>::push_back((void *)(a1 + 16), &v11);
}

void YAML::EmitFromEvents::OnMapEnd(YAML::EmitFromEvents *this)
{
  uint64_t v2 = (YAML::Emitter *)*((void *)this + 1);
  if (**(unsigned char **)v2) {
    YAML::Emitter::EmitEndMap(v2);
  }
  uint64_t v3 = *((void *)this + 7) - 1;
  if (*(_DWORD *)(*(void *)(*((void *)this + 3)
                             + (((unint64_t)(v3 + *((void *)this + 6)) >> 7) & 0x1FFFFFFFFFFFFF8))
                 + 4 * ((v3 + *((void *)this + 6)) & 0x3FF)) != 1)
    __assert_rtn("OnMapEnd", "emitfromevents.cpp", 92, "m_stateStack.top() == State::WaitingForKey");
  *((void *)this + 7) = v3;

  std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 2);
}

void YAML::EmitFromEvents::~EmitFromEvents(YAML::EmitFromEvents *this)
{
  *(void *)this = &unk_26ED29350;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((void *)this + 2);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26ED29350;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((void *)this + 2);

  JUMPOUT(0x23ECAACC0);
}

void std::deque<YAML::EmitFromEvents::State::value>::push_back(void *a1, _DWORD *a2)
{
  char v4 = (char *)a1[1];
  uint64_t v5 = (char *)a1[2];
  uint64_t v6 = v5 - v4;
  if (v5 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = ((v5 - v4) << 7) - 1;
  }
  unint64_t v9 = a1[4];
  uint64_t v8 = a1[5];
  unint64_t v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x400)
    {
      uint64_t v24 = v6 >> 3;
      int v25 = (char *)a1[3];
      std::string::size_type v26 = (char *)*a1;
      uint64_t v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        uint64_t v30 = v27 >> 2;
        if (v25 == v26) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = v30;
        }
        BOOL v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v31);
        uint64_t v34 = v33;
        std::string v35 = operator new(0x1000uLL);
        std::string v36 = &v32[8 * v24];
        std::string v37 = &v32[8 * v34];
        if (v24 == v34)
        {
          uint64_t v38 = 8 * v24;
          if (v6 < 1)
          {
            size_t v73 = v35;
            uint64_t v74 = v38 >> 2;
            if (v5 == v4) {
              unint64_t v75 = 1;
            }
            else {
              unint64_t v75 = v74;
            }
            size_t v76 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v75);
            std::string v36 = &v76[8 * (v75 >> 2)];
            std::string v37 = &v76[8 * v77];
            if (v32) {
              operator delete(v32);
            }
            BOOL v32 = v76;
            std::string v35 = v73;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)std::string v36 = v35;
        char v78 = v36 + 8;
        for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v78 >= v37)
            {
              if (v37 == v32) {
                unint64_t v84 = 1;
              }
              else {
                unint64_t v84 = (v37 - v32) >> 2;
              }
              int v85 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v84);
              std::string::size_type v87 = v85;
              std::string v36 = &v85[(2 * v84 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v89 = v78 - v32;
              BOOL v88 = v78 == v32;
              char v78 = v36;
              if (!v88)
              {
                char v78 = &v36[v89 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v90 = 8 * (v89 >> 3);
                long long v91 = v36;
                BOOL v92 = (uint64_t *)v32;
                do
                {
                  uint64_t v93 = *v92++;
                  *(void *)long long v91 = v93;
                  v91 += 8;
                  v90 -= 8;
                }
                while (v90);
              }
              std::string v37 = &v85[8 * v86];
              if (v32) {
                operator delete(v32);
              }
              BOOL v32 = v87;
            }
            else
            {
              uint64_t v80 = (v37 - v78) >> 3;
              if (v80 >= -1) {
                uint64_t v81 = v80 + 1;
              }
              else {
                uint64_t v81 = v80 + 2;
              }
              uint64_t v82 = v81 >> 1;
              std::string v36 = &v32[8 * (v81 >> 1)];
              int v83 = v32;
              if (v78 != v32)
              {
                memmove(v36, v32, v78 - v32);
                int v83 = v78;
              }
              char v78 = &v83[8 * v82];
            }
          }
          uint64_t v94 = *(void *)(i - 8);
          *((void *)v36 - 1) = v94;
          v36 -= 8;
        }
        BOOL v95 = (char *)*a1;
        *a1 = v32;
        a1[1] = v36;
        a1[2] = v78;
        a1[3] = v37;
        if (v95) {
          operator delete(v95);
        }
        goto LABEL_36;
      }
      std::string v28 = operator new(0x1000uLL);
      unint64_t v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4) {
            unint64_t v51 = 1;
          }
          else {
            unint64_t v51 = (v25 - v4) >> 2;
          }
          uint64_t v52 = 2 * v51;
          int v53 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v51);
          char v4 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
          size_t v55 = (uint64_t *)a1[1];
          size_t v56 = v4;
          uint64_t v57 = a1[2] - (void)v55;
          if (v57)
          {
            size_t v56 = &v4[v57 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v58 = 8 * (v57 >> 3);
            size_t v59 = &v53[(v52 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v60 = *v55++;
              *(void *)size_t v59 = v60;
              v59 += 8;
              v58 -= 8;
            }
            while (v58);
          }
          uint64_t v61 = (char *)*a1;
          *a1 = v53;
          a1[1] = v4;
          a1[2] = v56;
          a1[3] = &v53[8 * v54];
          if (v61)
          {
            operator delete(v61);
            char v4 = (char *)a1[1];
          }
        }
        *((void *)v4 - 1) = v29;
        int v62 = (char *)a1[1];
        uint64_t v63 = (char *)a1[2];
        a1[1] = v62 - 8;
        uint64_t v64 = *((void *)v62 - 1);
        a1[1] = v62;
        if (v63 == (char *)a1[3])
        {
          uint64_t v65 = (uint64_t)&v62[-*a1];
          if ((unint64_t)v62 <= *a1)
          {
            if (v63 == (char *)*a1) {
              unint64_t v96 = 1;
            }
            else {
              unint64_t v96 = (uint64_t)&v63[-*a1] >> 2;
            }
            size_t v97 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v96);
            size_t v99 = &v97[8 * (v96 >> 2)];
            long long v100 = (uint64_t *)a1[1];
            uint64_t v63 = v99;
            uint64_t v101 = a1[2] - (void)v100;
            if (v101)
            {
              uint64_t v63 = &v99[v101 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v102 = 8 * (v101 >> 3);
              BOOL v103 = &v97[8 * (v96 >> 2)];
              do
              {
                uint64_t v104 = *v100++;
                *(void *)BOOL v103 = v104;
                v103 += 8;
                v102 -= 8;
              }
              while (v102);
            }
            int v105 = (char *)*a1;
            *a1 = v97;
            a1[1] = v99;
            a1[2] = v63;
            a1[3] = &v97[8 * v98];
            if (v105)
            {
              operator delete(v105);
              uint64_t v63 = (char *)a1[2];
            }
          }
          else
          {
            uint64_t v66 = v65 >> 3;
            BOOL v16 = v65 >> 3 < -1;
            uint64_t v67 = (v65 >> 3) + 2;
            if (v16) {
              uint64_t v68 = v67;
            }
            else {
              uint64_t v68 = v66 + 1;
            }
            uint64_t v69 = -(v68 >> 1);
            uint64_t v70 = v68 >> 1;
            std::string::size_type v71 = &v62[-8 * v70];
            int64_t v72 = v63 - v62;
            if (v63 != v62)
            {
              memmove(&v62[-8 * v70], v62, v63 - v62);
              int v62 = (char *)a1[1];
            }
            uint64_t v63 = &v71[v72];
            a1[1] = &v62[8 * v69];
            a1[2] = &v71[v72];
          }
        }
        *(void *)uint64_t v63 = v64;
      }
      else
      {
        *(void *)uint64_t v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 1024;
      uint64_t v13 = *(void *)v4;
      int v11 = v4 + 8;
      uint64_t v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        uint64_t v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1) {
            unint64_t v41 = 1;
          }
          else {
            unint64_t v41 = (uint64_t)&v5[-*a1] >> 2;
          }
          BOOL v42 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v41);
          uint64_t v44 = &v42[8 * (v41 >> 2)];
          int v45 = (uint64_t *)a1[1];
          uint64_t v5 = v44;
          uint64_t v46 = a1[2] - (void)v45;
          if (v46)
          {
            uint64_t v5 = &v44[v46 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v47 = 8 * (v46 >> 3);
            char v48 = &v42[8 * (v41 >> 2)];
            do
            {
              uint64_t v49 = *v45++;
              *(void *)char v48 = v49;
              v48 += 8;
              v47 -= 8;
            }
            while (v47);
          }
          double v50 = (char *)*a1;
          *a1 = v42;
          a1[1] = v44;
          a1[2] = v5;
          a1[3] = &v42[8 * v43];
          if (v50)
          {
            operator delete(v50);
            uint64_t v5 = (char *)a1[2];
          }
        }
        else
        {
          uint64_t v15 = v14 >> 3;
          BOOL v16 = v14 >> 3 < -1;
          uint64_t v17 = (v14 >> 3) + 2;
          if (v16) {
            uint64_t v18 = v17;
          }
          else {
            uint64_t v18 = v15 + 1;
          }
          uint64_t v19 = -(v18 >> 1);
          uint64_t v20 = v18 >> 1;
          std::vector<std::string> v21 = &v11[-8 * v20];
          int64_t v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            uint64_t v5 = (char *)a1[1];
          }
          BOOL v23 = &v5[8 * v19];
          uint64_t v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(void *)uint64_t v5 = v12;
    }
    a1[2] += 8;
LABEL_36:
    char v4 = (char *)a1[1];
    uint64_t v8 = a1[5];
    unint64_t v10 = a1[4] + v8;
  }
  *(_DWORD *)(*(void *)&v4[(v10 >> 7) & 0x1FFFFFFFFFFFFF8] + 4 * (v10 & 0x3FF)) = *a2;
  a1[5] = v8 + 1;
}

void sub_239AA85D4(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void std::deque<YAML::EmitFromEvents::State::value>::__maybe_remove_back_spare[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v1 = a1[2];
  if (v1 == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = ((v1 - v2) << 7) - 1;
  }
  if ((unint64_t)(v3 - (a1[5] + a1[4])) >= 0x800)
  {
    operator delete(*(void **)(v1 - 8));
    a1[2] -= 8;
  }
}

void IE_GetClassName(NSObject *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = a1;
  if (v5)
  {
    uint64_t v3 = (objc_class *)objc_opt_class();
    NSStringFromClass(v3);
    id v4 = objc_claimAutoreleasedReturnValue();
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)[v4 UTF8String]);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "nil");
  }
}

void sub_239AA86E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL IE_NSObjectIsBoolean(NSObject *a1)
{
  IE_GetClassName(a1, &v5);
  if (v6 < 0)
  {
    BOOL v2 = *((void *)&v5 + 1) == 13
      && *(void *)v5 == 0x6F424643534E5F5FLL
      && *(void *)(v5 + 5) == 0x6E61656C6F6F4246;
    operator delete((void *)v5);
  }
  else
  {
    return v6 == 13 && (void)v5 == 0x6F424643534E5F5FLL && *(void *)((char *)&v5 + 5) == 0x6E61656C6F6F4246;
  }
  return v2;
}

void IE_NSObjectToVariable(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v27 = a1;
  if (!v27) {
    goto LABEL_54;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    *(void *)&long long v37 = [v27 UTF8String];
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],char const*,void>((char *)&str_2_3, (char **)&v37, &__str);
LABEL_8:
    *(_OWORD *)a2 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
    goto LABEL_55;
  }
  if (IE_NSObjectIsBoolean(v27))
  {
    LOBYTE(v29) = [v27 BOOLValue];
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableBoolean,std::allocator<siri::intelligence::VariableBoolean>,char const(&)[1],BOOL,void>((char *)&str_2_3, (char *)&v29, &__str);
    goto LABEL_8;
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    [v27 doubleValue];
    *(void *)&long long v37 = v3;
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableNumber,std::allocator<siri::intelligence::VariableNumber>,char const(&)[1],double,void>((char *)&str_2_3, (double *)&v37, &__str);
    goto LABEL_8;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      std::string::size_type v26 = (long long *)a2;
      int v25 = v27;
      _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v37);
      long long v32 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v35 = 0u;
      int v11 = v25;
      uint64_t v12 = [v11 countByEnumeratingWithState:&v32 objects:v42 count:16];
      if (!v12) {
        goto LABEL_48;
      }
      uint64_t v13 = *(void *)v33;
      while (1)
      {
        for (uint64_t i = 0; i != v12; ++i)
        {
          if (*(void *)v33 != v13) {
            objc_enumerationMutation(v11);
          }
          uint64_t v15 = *(NSObject **)(*((void *)&v32 + 1) + 8 * i);
          objc_opt_class();
          if (objc_opt_isKindOfClass())
          {
            BOOL v16 = v15;
            std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v16 UTF8String]);
            uint64_t v17 = [v11 objectForKey:v16];
            IE_NSObjectToVariable(&v29, v17);
            uint64_t v18 = v29;
            if (v29)
            {
              std::string::operator=((std::string *)(v29 + 8), &__str);
              uint64_t v19 = v37;
              uint64_t v20 = (std::__shared_weak_count *)v30;
              v28[0] = v18;
              v28[1] = v30;
              if (v30) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
              }
              siri::intelligence::VariableDictionary::AddProperty(v19, v28);
              if (v20)
              {
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
                goto LABEL_42;
              }
            }
            else
            {
              uint64_t v20 = (std::__shared_weak_count *)v30;
              if (v30) {
LABEL_42:
              }
                std::__shared_weak_count::__release_shared[abi:ne180100](v20);
            }

            goto LABEL_44;
          }
          IE_GetClassName(v15, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_str = &__str;
          }
          else {
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          siri::intelligence::Log::Error((siri::intelligence::Log *)"Dictionary contains a non-string key of type: %s", v21, p_str, v25);
LABEL_44:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v12 = [v11 countByEnumeratingWithState:&v32 objects:v42 count:16];
        if (!v12)
        {
LABEL_48:

          long long *v26 = v37;
          goto LABEL_55;
        }
      }
    }
    IE_GetClassName(v27, &__str);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v24 = &__str;
    }
    else {
      uint64_t v24 = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported NSObject type: %s", v23, v24);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
LABEL_54:
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    goto LABEL_55;
  }
  id v4 = v27;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__str);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v5 = v4;
  uint64_t v6 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v39;
    do
    {
      for (uint64_t j = 0; j != v6; ++j)
      {
        if (*(void *)v39 != v7) {
          objc_enumerationMutation(v5);
        }
        IE_NSObjectToVariable((uint64_t *)&v37, *(const NSObject **)(*((void *)&v38 + 1) + 8 * j));
        unint64_t v9 = (std::__shared_weak_count *)*((void *)&v37 + 1);
        if ((void)v37)
        {
          std::string::size_type v10 = __str.__r_.__value_.__r.__words[0];
          long long v36 = v37;
          if (*((void *)&v37 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v37 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((uint64_t *)(v10 + 72), &v36);
          *(unsigned char *)(v10 + 64) = 1;
          if (*((void *)&v36 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v36 + 1));
          }
        }
        if (v9) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v9);
        }
      }
      uint64_t v6 = [v5 countByEnumeratingWithState:&v38 objects:v43 count:16];
    }
    while (v6);
  }

  *(_OWORD *)a2 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
LABEL_55:
}

void sub_239AA8C48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

std::__shared_weak_count *IE_VariableToNSObject(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  if (!*(void *)a1) {
    goto LABEL_7;
  }
  {
    if (v6)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = NSString;
      if (v6[95] < 0) {
        std::string::__init_copy_ctor_external(&v30, *((const std::string::value_type **)v6 + 9), *((void *)v6 + 10));
      }
      else {
        std::string v30 = *(std::string *)(v6 + 3);
      }
      if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v30;
      }
      else {
        int v11 = (std::string *)v30.__r_.__value_.__r.__words[0];
      }
      id v4 = [v8 stringWithUTF8String:v11];
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      goto LABEL_31;
    }
    if (v9)
    {
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = [NSNumber numberWithDouble:v9[9]];
    }
    else
    {
      if (!v12)
      {
        if (!v14)
        {
          std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableDictionary,siri::intelligence::Variable>(&v35, v1, *(void *)(a1 + 8));
          uint64_t v20 = v35;
          if (v35)
          {
            id v4 = (std::__shared_weak_count *)objc_opt_new();
            std::map<std::string,std::shared_ptr<siri::intelligence::Variable>>::map[abi:ne180100]((uint64_t *)&v33, (const void ***)(v20 + 72));
            std::vector<std::string> v21 = v33;
            if (v33 != (long long *)v34)
            {
              do
              {
                std::pair<std::string const,std::shared_ptr<siri::intelligence::Variable>>::pair[abi:ne180100](&v30, v21 + 2);
                uint64_t v28 = v31;
                uint64_t v29 = v32;
                if (v32) {
                  atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                int64_t v22 = IE_VariableToNSObject(&v28);
                if (v29) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v29);
                }
                if (v22)
                {
                  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    BOOL v23 = &v30;
                  }
                  else {
                    BOOL v23 = (std::string *)v30.__r_.__value_.__r.__words[0];
                  }
                  uint64_t v24 = objc_msgSend(NSString, "stringWithUTF8String:", v23, v28);
                  [(std::__shared_weak_count *)v4 setObject:v22 forKey:v24];
                }
                if (v32) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
                }
                if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v30.__r_.__value_.__l.__data_);
                }
                int v25 = (long long *)*((void *)v21 + 1);
                if (v25)
                {
                  do
                  {
                    std::string::size_type v26 = v25;
                    int v25 = *(long long **)v25;
                  }
                  while (v25);
                }
                else
                {
                  do
                  {
                    std::string::size_type v26 = (long long *)*((void *)v21 + 2);
                    BOOL v27 = *(void *)v26 == (void)v21;
                    std::vector<std::string> v21 = v26;
                  }
                  while (!v27);
                }
                std::vector<std::string> v21 = v26;
              }
              while (v26 != (long long *)v34);
            }
            std::__tree<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<siri::intelligence::Variable>>>>::destroy((uint64_t)&v33, v34[0]);
          }
          else
          {
            id v4 = 0;
          }
          uint64_t v13 = v36;
          if (!v36) {
            goto LABEL_8;
          }
LABEL_33:
          std::__shared_weak_count::__release_shared[abi:ne180100](v13);
          goto LABEL_8;
        }
        uint64_t v15 = (uint64_t)v14;
        uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
        if (v7) {
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        id v4 = (std::__shared_weak_count *)objc_opt_new();
        uint64_t v16 = *(void *)(v15 + 80) - *(void *)(v15 + 72);
        if (v16)
        {
          uint64_t v17 = 0;
          uint64_t v18 = v16 >> 4;
          do
          {
            siri::intelligence::VariableArray::GetItem(v15, v17, &v37);
            uint64_t v19 = IE_VariableToNSObject(&v37);
            if (v38) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v38);
            }
            if (v19) {
              [(std::__shared_weak_count *)v4 addObject:v19];
            }

            ++v17;
          }
          while (v18 != v17);
        }
LABEL_31:
        if (!v7) {
          goto LABEL_8;
        }
        uint64_t v13 = v7;
        goto LABEL_33;
      }
      uint64_t v7 = *(std::__shared_weak_count **)(a1 + 8);
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v10 = [NSNumber numberWithBool:v12[66]];
    }
    id v4 = (std::__shared_weak_count *)v10;
    goto LABEL_31;
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)"Found a variable reference that should already have been pinned.", v3);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
LABEL_7:
    id v4 = 0;
  }
LABEL_8:

  return v4;
}

void sub_239AA9184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  _Unwind_Resume(a1);
}

void *std::dynamic_pointer_cast[abi:ne180100]<siri::intelligence::VariableDictionary,siri::intelligence::Variable>(void *result, void *lpsrc, uint64_t a3)
{
  uint64_t v3 = result;
  if (lpsrc
  {
    void *v3 = result;
    v3[1] = a3;
    if (a3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    void *v3 = 0;
    v3[1] = 0;
  }
  return result;
}

id IE_VariableToIEVariable(uint64_t *a1)
{
  if (*a1)
  {
    BOOL v2 = objc_opt_new();
    uint64_t v3 = NSString;
    uint64_t v4 = *a1;
    if (*(char *)(*a1 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 8);
      v17.__r_.__value_.__r.__words[2] = *(void *)(v4 + 24);
      *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v5;
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v17;
    }
    else {
      uint64_t v6 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    uint64_t v7 = [v3 stringWithUTF8String:v6];
    [v2 setName:v7];

    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    uint64_t v8 = NSString;
    uint64_t v9 = *a1;
    if (*(char *)(*a1 + 55) < 0) {
      std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)(v9 + 32), *(void *)(v9 + 40));
    }
    else {
      std::string v17 = *(std::string *)(v9 + 32);
    }
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v17;
    }
    else {
      uint64_t v10 = (std::string *)v17.__r_.__value_.__r.__words[0];
    }
    int v11 = [v8 stringWithUTF8String:v10];
    [v2 setType:v11];

    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
    [v2 setPersistent:*(unsigned __int8 *)(*a1 + 65)];
    uint64_t v12 = (std::__shared_weak_count *)a1[1];
    uint64_t v15 = *a1;
    uint64_t v16 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = IE_VariableToNSObject((uint64_t)&v15);
    objc_msgSend(v2, "setValue:", v13, v15);

    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
  else
  {
    BOOL v2 = 0;
  }

  return v2;
}

void sub_239AA948C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

id IE_ExpandedConditionToIECondition(const siri::intelligence::ResolvedCondition *a1)
{
  BOOL v2 = objc_opt_new();
  uint64_t v3 = NSString;
  if (*((char *)a1 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *((void *)a1 + 1));
  }
  else {
    std::string __p = *(std::string *)a1;
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  long long v5 = objc_msgSend(v3, "stringWithUTF8String:", p_p, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  [v2 setConditionId:v5];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v6 = NSString;
  if (*((char *)a1 + 47) < 0) {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a1 + 3), *((void *)a1 + 4));
  }
  else {
    std::string __p = *(std::string *)((unsigned char *)a1 + 1);
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v7 = &__p;
  }
  else {
    uint64_t v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  uint64_t v8 = objc_msgSend(v6, "stringWithUTF8String:", v7, *(_OWORD *)&__p.__r_.__value_.__l.__data_, __p.__r_.__value_.__r.__words[2]);
  [v2 setExpression:v8];

  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  [v2 setValue:*((unsigned __int8 *)a1 + 48)];
  uint64_t v9 = objc_opt_new();
  memset(&__p, 0, sizeof(__p));
  std::vector<siri::intelligence::ResolvedCondition>::__init_with_size[abi:ne180100]<siri::intelligence::ResolvedCondition*,siri::intelligence::ResolvedCondition*>(&__p, *((void *)a1 + 7), *((void *)a1 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a1 + 8) - *((void *)a1 + 7)) >> 4));
  std::string::size_type size = __p.__r_.__value_.__l.__size_;
  for (uint64_t i = (const siri::intelligence::ResolvedCondition *)__p.__r_.__value_.__r.__words[0];
        i != (const siri::intelligence::ResolvedCondition *)size;
        uint64_t i = (const siri::intelligence::ResolvedCondition *)((char *)i + 80))
  {
    uint64_t v12 = IE_ExpandedConditionToIECondition(i);
    [v9 addObject:v12];
  }
  uint64_t v15 = &__p;
  std::vector<siri::intelligence::ResolvedCondition>::__destroy_vector::operator()[abi:ne180100]((void ***)&v15);
  [v2 setChildren:v9];

  return v2;
}

void sub_239AA96CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  _Unwind_Resume(a1);
}

id IE_ResponseToIEResponse(const siri::intelligence::ExecStateResponse **a1)
{
  id v48 = (id)objc_opt_new();
  BOOL v2 = *a1;
  uint64_t v49 = a1[1];
  if (*a1 != v49)
  {
    while (1)
    {
      siri::intelligence::ExecStateResponse::ExecStateResponse((siri::intelligence::ExecStateResponse *)v64, v2);
      if (siri::intelligence::ExecStateResponse::IsDialog((siri::intelligence::ExecStateResponse *)v64)) {
        break;
      }
      if (siri::intelligence::ExecStateResponse::IsBehavior((siri::intelligence::ExecStateResponse *)v64))
      {
        siri::intelligence::ExecStateResponse::GetBehaviorResponse((siri::intelligence::ExecStateResponse *)v64, (siri::intelligence::ResponseBase *)&v59);
        long long v5 = objc_opt_new();
        uint64_t v6 = NSString;
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v60;
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v35 = &v58;
        }
        else {
          uint64_t v35 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        long long v36 = [v6 stringWithUTF8String:v35];
        objc_msgSend(v5, "setResponse_id:", v36);

        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        uint64_t v37 = NSString;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v58, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
        }
        else {
          std::string v58 = v61;
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v38 = &v58;
        }
        else {
          long long v38 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        long long v39 = [v37 stringWithUTF8String:v38];
        [v5 setInputGroupId:v39];

        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        long long v40 = NSString;
        if (*((char *)v62 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v62, *((void *)v62 + 1));
        }
        else
        {
          long long v41 = *v62;
          v58.__r_.__value_.__r.__words[2] = *((void *)v62 + 2);
          *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v41;
        }
        if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          BOOL v42 = &v58;
        }
        else {
          BOOL v42 = (std::string *)v58.__r_.__value_.__r.__words[0];
        }
        uint64_t v43 = [v40 stringWithUTF8String:v42];
        [v5 setName:v43];

        if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v58.__r_.__value_.__l.__data_);
        }
        uint64_t v44 = *((void *)v62 + 3);
        int v45 = (std::__shared_weak_count *)*((void *)v62 + 4);
        if (v45)
        {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
          if (v44)
          {
            uint64_t v50 = v44;
            unint64_t v51 = v45;
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_109:
            uint64_t v46 = IE_VariableToNSObject((uint64_t)&v50);
            [v5 setParameters:v46];

            if (v51) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v51);
            }
          }
        }
        else if (v44)
        {
          uint64_t v50 = *((void *)v62 + 3);
          unint64_t v51 = 0;
          goto LABEL_109;
        }
        [v48 addObject:v5];
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }

        long long v34 = (uint64_t *)&unk_26ED272B0;
LABEL_114:
        size_t v59 = v34;
        if (v63) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v63);
        }
        siri::intelligence::ResponseBase::~ResponseBase((void **)&v59);
      }
      size_t v59 = &v70;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v59);
      uint64_t v68 = &unk_26ED272B0;
      if (v69) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v69);
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v68);
      uint64_t v66 = &unk_26ED27318;
      if (v67) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v67);
      }
      siri::intelligence::ResponseBase::~ResponseBase(&v66);
      if (v65) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v65);
      }
      BOOL v2 = (const siri::intelligence::ExecStateResponse *)((char *)v2 + 312);
      if (v2 == v49) {
        goto LABEL_124;
      }
    }
    siri::intelligence::ExecStateResponse::GetDialogResponse((siri::intelligence::ExecStateResponse *)v64, (siri::intelligence::ResponseBase *)&v59);
    uint64_t v3 = objc_opt_new();
    uint64_t v4 = NSString;
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v58, v60.__r_.__value_.__l.__data_, v60.__r_.__value_.__l.__size_);
    }
    else {
      std::string v58 = v60;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = &v58;
    }
    else {
      uint64_t v7 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    uint64_t v8 = [v4 stringWithUTF8String:v7];
    objc_msgSend(v3, "setResponse_id:", v8);

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v9 = NSString;
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v58, v61.__r_.__value_.__l.__data_, v61.__r_.__value_.__l.__size_);
    }
    else {
      std::string v58 = v61;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v58;
    }
    else {
      uint64_t v10 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    int v11 = [v9 stringWithUTF8String:v10];
    [v3 setInputGroupId:v11];

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v12 = NSString;
    if (*((char *)v62 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v58, *(const std::string::value_type **)v62, *((void *)v62 + 1));
    }
    else
    {
      long long v13 = *v62;
      v58.__r_.__value_.__r.__words[2] = *((void *)v62 + 2);
      *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v13;
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v14 = &v58;
    }
    else {
      uint64_t v14 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    uint64_t v15 = [v12 stringWithUTF8String:v14];
    [v3 setText:v15];

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v16 = NSString;
    if (*((char *)v62 + 111) < 0) {
      std::string::__init_copy_ctor_external(&v58, *((const std::string::value_type **)v62 + 11), *((void *)v62 + 12));
    }
    else {
      std::string v58 = *(std::string *)((char *)v62 + 88);
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v17 = &v58;
    }
    else {
      std::string v17 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    uint64_t v18 = [v16 stringWithUTF8String:v17];
    [v3 setCatId:v18];

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = *((void *)v62 + 14);
    uint64_t v20 = (std::__shared_weak_count *)*((void *)v62 + 15);
    if (v20)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v19) {
        goto LABEL_45;
      }
      uint64_t v56 = v19;
      uint64_t v57 = v20;
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      if (!v19) {
        goto LABEL_45;
      }
      uint64_t v56 = *((void *)v62 + 14);
      uint64_t v57 = 0;
    }
    std::vector<std::string> v21 = IE_VariableToNSObject((uint64_t)&v56);
    [v3 setCatParameters:v21];

    if (v57) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v57);
    }
LABEL_45:
    uint64_t v22 = *((void *)v62 + 16);
    BOOL v23 = (std::__shared_weak_count *)*((void *)v62 + 17);
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      if (!v22) {
        goto LABEL_52;
      }
      uint64_t v54 = v22;
      size_t v55 = v23;
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      if (!v22) {
        goto LABEL_52;
      }
      uint64_t v54 = *((void *)v62 + 16);
      size_t v55 = 0;
    }
    uint64_t v24 = IE_VariableToNSObject((uint64_t)&v54);
    [v3 setVisualParameters:v24];

    if (v55) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v55);
    }
LABEL_52:
    int v25 = NSString;
    if (*((char *)v62 + 167) < 0) {
      std::string::__init_copy_ctor_external(&v58, *((const std::string::value_type **)v62 + 18), *((void *)v62 + 19));
    }
    else {
      std::string v58 = *(std::string *)((unsigned char *)v62 + 6);
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v26 = &v58;
    }
    else {
      std::string::size_type v26 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    BOOL v27 = [v25 stringWithUTF8String:v26];
    [v3 setPatternId:v27];

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    uint64_t v28 = *((void *)v62 + 21);
    uint64_t v29 = (std::__shared_weak_count *)*((void *)v62 + 22);
    if (v29)
    {
      atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
      if (v28)
      {
        uint64_t v52 = v28;
        int v53 = v29;
        atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_65;
      }
    }
    else if (v28)
    {
      uint64_t v52 = *((void *)v62 + 21);
      int v53 = 0;
LABEL_65:
      std::string v30 = IE_VariableToNSObject((uint64_t)&v52);
      [v3 setPatternParameters:v30];

      if (v53) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v53);
      }
    }
    [v3 setSensitiveData:*((unsigned __int8 *)v62 + 184)];
    uint64_t v31 = NSString;
    if (*((char *)v62 + 215) < 0) {
      std::string::__init_copy_ctor_external(&v58, *((const std::string::value_type **)v62 + 24), *((void *)v62 + 25));
    }
    else {
      std::string v58 = *(std::string *)((unsigned char *)v62 + 8);
    }
    if ((v58.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v32 = &v58;
    }
    else {
      long long v32 = (std::string *)v58.__r_.__value_.__r.__words[0];
    }
    long long v33 = [v31 stringWithUTF8String:v32];
    [v3 setDialogPhase:v33];

    if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v58.__r_.__value_.__l.__data_);
    }
    [v48 addObject:v3];
    if (v29) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
    if (v23) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v23);
    }
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }

    long long v34 = (uint64_t *)&unk_26ED27318;
    goto LABEL_114;
  }
LABEL_124:

  return v48;
}

void sub_239AA9EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  siri::intelligence::BehaviorResponse::~BehaviorResponse((siri::intelligence::BehaviorResponse *)&a29);
  siri::intelligence::ExecStateResponse::~ExecStateResponse((siri::intelligence::ExecStateResponse *)&a46);

  _Unwind_Resume(a1);
}

void sub_239AAA0E0()
{
}

void IE_GetTemplateDirFromBundle(NSBundle *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  uint64_t v6 = v4;
  if (v4)
  {
    uint64_t v7 = [(NSBundle *)v4 resourcePath];
    if (v7)
    {
      id v2 = [(NSBundle *)v6 resourcePath];
      uint64_t v8 = (char *)[v2 UTF8String];
    }
    else
    {
      uint64_t v8 = (char *)&str_2_3;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, v8);
    if (v7) {

    }
    siri::intelligence::JoinPath((uint64_t)v13, (uint64_t)siri::intelligence::Configuration::TEMPLATES_DIR, (uint64_t)__p);
    if (siri::intelligence::DirExists((uint64_t *)__p))
    {
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = v12;
    }
    else
    {
      uint64_t v10 = __p;
      if (v12 < 0) {
        uint64_t v10 = (void **)__p[0];
      }
      siri::intelligence::Log::Warning((siri::intelligence::Log *)"Bundle Templates directory not found: %s", v9, v10);
      std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_2_3);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Invalid flow request: nil bundle provided", v5);
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_2_3);
  }
}

void sub_239AAA220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void *IEDefer::IEDefer(void *a1, uint64_t a2)
{
  *a1 = MEMORY[0x23ECAB170](a2);
  return a1;
}

{
  *a1 = MEMORY[0x23ECAB170](a2);
  return a1;
}

void IEDefer::~IEDefer(void (***this)(void))
{
  id v2 = *this;
  if (v2)
  {
    v2[2]();
    uint64_t v3 = *this;
  }
  else
  {
    uint64_t v3 = 0;
  }
}

IEEvent *IE_IntentToIEEvent(siri::intelligence::Intent **a1)
{
  id v2 = *a1;
  if (!*a1)
  {
    long long v5 = 0;
    goto LABEL_128;
  }
  uint64_t v4 = NSString;
  if (*((char *)v2 + 47) < 0) {
    std::string::__init_copy_ctor_external(&v104, *((const std::string::value_type **)v2 + 3), *((void *)v2 + 4));
  }
  else {
    std::string v104 = *(std::string *)((unsigned char *)v2 + 1);
  }
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v6 = &v104;
  }
  else {
    uint64_t v6 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  unint64_t v96 = [v4 stringWithUTF8String:v6];
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = NSString;
  uint64_t v8 = *a1;
  if (*((char *)*a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *(_OWORD *)v8;
    v104.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = v9;
  }
  if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v10 = &v104;
  }
  else {
    uint64_t v10 = (std::string *)v104.__r_.__value_.__r.__words[0];
  }
  BOOL v95 = [v7 stringWithUTF8String:v10];
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }
  uint64_t v94 = [[IEEvent alloc] initWithName:v96 withId:v95];
  uint64_t v98 = objc_opt_new();
  size_t v97 = a1;
  int v11 = *a1;
  memset(&v104, 0, sizeof(v104));
  std::vector<siri::intelligence::NLParameters>::__init_with_size[abi:ne180100]<siri::intelligence::NLParameters*,siri::intelligence::NLParameters*>(&v104, *((long long **)v11 + 24), *((long long **)v11 + 25), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)v11 + 25) - *((void *)v11 + 24)) >> 3));
  std::string::size_type size = v104.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v104.__r_.__value_.__r.__words[0]; i != size; i += 40)
  {
    char v14 = objc_opt_new();
    uint64_t v16 = *(void *)(i + 24);
    uint64_t v15 = *(std::__shared_weak_count **)(i + 32);
    if (v15) {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v108 = v16;
    int v109 = v15;
    std::string v17 = IE_VariableToNSObject((uint64_t)&v108);
    if (v109) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v109);
    }
    uint64_t v18 = NSString;
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v107, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else
    {
      long long v19 = *(_OWORD *)i;
      v107.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
      *(_OWORD *)&v107.__r_.__value_.__l.__data_ = v19;
    }
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = &v107;
    }
    else {
      uint64_t v20 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    std::vector<std::string> v21 = [v18 stringWithUTF8String:v20];
    [v14 setName:v21];

    if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v107.__r_.__value_.__l.__data_);
    }
    uint64_t v22 = v17;
    if (!v17)
    {
      uint64_t v1 = objc_opt_new();
      uint64_t v22 = v1;
    }
    [v14 setParameters:v22];
    if (!v17) {

    }
    [v98 addObject:v14];
  }
  v107.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
  std::vector<siri::intelligence::NLParameters>::__destroy_vector::operator()[abi:ne180100]((void ***)&v107);
  BOOL v23 = v94;
  [(IEEvent *)v94 setParsers:v98];
  uint64_t v24 = a1;
  siri::intelligence::Intent::GetNlProducer(*a1, &v104);
  int v25 = objc_opt_new();
  uint64_t v27 = v105;
  std::string::size_type v26 = v106;
  if (v106) {
    atomic_fetch_add_explicit(&v106->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v102 = v27;
  BOOL v103 = v26;
  uint64_t v28 = IE_VariableToNSObject((uint64_t)&v102);
  if (v103) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v103);
  }
  uint64_t v29 = NSString;
  uint64_t v93 = (void *)v28;
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v107, v104.__r_.__value_.__l.__data_, v104.__r_.__value_.__l.__size_);
  }
  else {
    std::string v107 = v104;
  }
  if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string v30 = &v107;
  }
  else {
    std::string v30 = (std::string *)v107.__r_.__value_.__r.__words[0];
  }
  uint64_t v31 = [v29 stringWithUTF8String:v30];
  [v25 setName:v31];

  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }
  long long v32 = (void *)v28;
  if (!v28) {
    long long v32 = objc_opt_new();
  }
  [v25 setParameters:v32];
  if (!v28) {

  }
  [(IEEvent *)v94 setProducer:v25];
  std::string::basic_string[abi:ne180100]<0>(&v107, "socialCATI");
  long long v33 = *a1;
  if (*((char *)*a1 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(&v101, *((const std::string::value_type **)v33 + 9), *((void *)v33 + 10));
    long long v33 = *a1;
  }
  else
  {
    std::string v101 = *(std::string *)((unsigned char *)v33 + 3);
  }
  if (*((char *)v33 + 119) < 0) {
    std::string::__init_copy_ctor_external(&v100, *((const std::string::value_type **)v33 + 12), *((void *)v33 + 13));
  }
  else {
    std::string v100 = *(std::string *)((unsigned char *)v33 + 4);
  }
  std::string::size_type v34 = HIBYTE(v101.__r_.__value_.__r.__words[2]);
  if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v34 = v101.__r_.__value_.__l.__size_;
  }
  if (v34)
  {
    uint64_t v35 = objc_opt_new();
    long long v36 = objc_opt_new();
    uint64_t v37 = objc_opt_new();
    std::string::size_type v38 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v38 = v100.__r_.__value_.__l.__size_;
    }
    if (v38)
    {
      long long v39 = objc_opt_new();
      if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v40 = &v100;
      }
      else {
        long long v40 = (std::string *)v100.__r_.__value_.__r.__words[0];
      }
      long long v41 = [NSString stringWithUTF8String:v40];
      [v39 setObject:v41 forKey:@"identifierValue"];

      [v37 addObject:v39];
    }
    BOOL v42 = objc_opt_new();
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v43 = &v101;
    }
    else {
      uint64_t v43 = (std::string *)v101.__r_.__value_.__r.__words[0];
    }
    uint64_t v44 = [NSString stringWithUTF8String:v43];
    [v42 setObject:v44 forKey:@"identifierValue"];

    [v42 setObject:@"intentName" forKey:@"namespace"];
    [v37 addObject:v42];
    [v36 setObject:v37 forKey:@"matchers"];
    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v45 = &v107;
    }
    else {
      int v45 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    uint64_t v46 = [NSString stringWithUTF8String:v45];
    [v35 setName:v46];

    [v35 setParameters:v36];
    [v98 addObject:v35];
    [(IEEvent *)v94 setParsers:v98];

    uint64_t v24 = v97;
  }
  std::string::size_type v47 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
  if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v47 = v100.__r_.__value_.__l.__size_;
  }
  if (v47)
  {
    id v48 = objc_opt_new();
    uint64_t v49 = objc_opt_new();
    if ((v100.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v50 = &v100;
    }
    else {
      uint64_t v50 = (std::string *)v100.__r_.__value_.__r.__words[0];
    }
    unint64_t v51 = [NSString stringWithUTF8String:v50];
    [v49 setObject:v51 forKey:@"identifierValue"];

    if ((v107.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v52 = &v107;
    }
    else {
      uint64_t v52 = (std::string *)v107.__r_.__value_.__r.__words[0];
    }
    int v53 = [NSString stringWithUTF8String:v52];
    [v48 setName:v53];

    [v48 setParameters:v49];
    [(IEEvent *)v94 setProducer:v48];
  }
  uint64_t v54 = *v24;
  memset(&v99, 0, sizeof(v99));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *((long long **)v54 + 15), *((long long **)v54 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v54 + 16) - *((void *)v54 + 15)) >> 3));
  long long v55 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
  v110[0] = (void **)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v110);
  if ((void)v55 != *((void *)&v55 + 1))
  {
    uint64_t v56 = objc_opt_new();
    uint64_t v57 = objc_opt_new();
    std::string v58 = objc_opt_new();
    size_t v59 = *v97;
    memset(&v99, 0, sizeof(v99));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *((long long **)v59 + 15), *((long long **)v59 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v59 + 16) - *((void *)v59 + 15)) >> 3));
    std::string::size_type v61 = v99.__r_.__value_.__l.__size_;
    for (std::string::size_type j = v99.__r_.__value_.__r.__words[0]; j != v61; j += 24)
    {
      int v62 = objc_opt_new();
      std::string::size_type v63 = j;
      if (*(char *)(j + 23) < 0) {
        std::string::size_type v63 = *(void *)j;
      }
      uint64_t v64 = [NSString stringWithUTF8String:v63];
      [v62 setObject:v64 forKey:@"identifier"];

      [v58 addObject:v62];
    }
    v110[0] = (void **)&v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v110);
    BOOL v23 = v94;
    [v57 setObject:v58 forKey:@"invocations"];
    uint64_t v65 = [NSString stringWithUTF8String:"directInvocation"];
    [v56 setName:v65];

    [v56 setParameters:v57];
    [v98 addObject:v56];
    [(IEEvent *)v94 setParsers:v98];

    uint64_t v24 = v97;
  }
  uint64_t v66 = *v24;
  memset(&v99, 0, sizeof(v99));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *((long long **)v66 + 18), *((long long **)v66 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v66 + 19) - *((void *)v66 + 18)) >> 3));
  long long v67 = *(_OWORD *)&v99.__r_.__value_.__l.__data_;
  v110[0] = (void **)&v99;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v110);
  if ((void)v67 != *((void *)&v67 + 1))
  {
    uint64_t v68 = objc_opt_new();
    uint64_t v69 = objc_opt_new();
    uint64_t v70 = objc_opt_new();
    std::string::size_type v71 = *v97;
    memset(&v99, 0, sizeof(v99));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v99, *((long long **)v71 + 18), *((long long **)v71 + 19), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v71 + 19) - *((void *)v71 + 18)) >> 3));
    std::string::size_type v73 = v99.__r_.__value_.__l.__size_;
    for (std::string::size_type k = v99.__r_.__value_.__r.__words[0]; k != v73; k += 24)
    {
      std::string::size_type v74 = k;
      if (*(char *)(k + 23) < 0) {
        std::string::size_type v74 = *(void *)k;
      }
      unint64_t v75 = [NSString stringWithUTF8String:v74];
      [v70 addObject:v75];
    }
    v110[0] = (void **)&v99;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v110);
    [v69 setObject:v70 forKey:@"userDialogActs"];
    size_t v76 = [NSString stringWithUTF8String:"usoLiteral"];
    [v68 setName:v76];

    [v68 setParameters:v69];
    [v98 addObject:v68];
    [(IEEvent *)v23 setParsers:v98];

    uint64_t v24 = v97;
  }
  uint64_t v78 = *((void *)*v24 + 32);
  uint64_t v77 = (std::__shared_weak_count *)*((void *)*v24 + 33);
  if (v77)
  {
    atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v79 = *(void *)(v78 + 16);
    std::__shared_weak_count::__release_shared[abi:ne180100](v77);
    if (!v79) {
      goto LABEL_117;
    }
LABEL_103:
    uint64_t v80 = objc_opt_new();
    uint64_t v81 = objc_opt_new();
    uint64_t v82 = objc_opt_new();
    int v83 = (const void ***)*((void *)*v97 + 32);
    unint64_t v84 = (std::__shared_weak_count *)*((void *)*v97 + 33);
    if (v84) {
      atomic_fetch_add_explicit(&v84->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    std::set<std::string>::set[abi:ne180100]((uint64_t *)&v99, v83);
    if (v84) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v84);
    }
    std::string::size_type v85 = v99.__r_.__value_.__r.__words[0];
    if ((std::string::size_type *)v99.__r_.__value_.__l.__data_ != &v99.__r_.__value_.__r.__words[1])
    {
      do
      {
        uint64_t v86 = (void *)(v85 + 32);
        if (*(char *)(v85 + 55) < 0) {
          uint64_t v86 = (void *)*v86;
        }
        std::string::size_type v87 = [NSString stringWithUTF8String:v86];
        [v82 addObject:v87];

        BOOL v88 = *(std::string **)(v85 + 8);
        if (v88)
        {
          do
          {
            uint64_t v89 = v88;
            BOOL v88 = (std::string *)v88->__r_.__value_.__r.__words[0];
          }
          while (v88);
        }
        else
        {
          do
          {
            uint64_t v89 = *(std::string **)(v85 + 16);
            BOOL v90 = v89->__r_.__value_.__r.__words[0] == v85;
            std::string::size_type v85 = (std::string::size_type)v89;
          }
          while (!v90);
        }
        std::string::size_type v85 = (std::string::size_type)v89;
      }
      while (v89 != (std::string *)&v99.__r_.__value_.__r.__words[1]);
    }
    std::__tree<std::string>::destroy((uint64_t)&v99, (char *)v99.__r_.__value_.__l.__size_);
    [v81 setObject:v82 forKey:@"utterances"];
    long long v91 = [NSString stringWithUTF8String:"exactMatch"];
    [v80 setName:v91];

    [v80 setParameters:v81];
    [v98 addObject:v80];
    [(IEEvent *)v23 setParsers:v98];

    goto LABEL_117;
  }
  if (*(void *)(v78 + 16)) {
    goto LABEL_103;
  }
LABEL_117:
  long long v5 = v23;
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v100.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v101.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v107.__r_.__value_.__l.__data_);
  }

  if (v106) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v106);
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v104.__r_.__value_.__l.__data_);
  }

LABEL_128:

  return v5;
}

void sub_239AAAEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, void *a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v41 - 121) < 0) {
    operator delete(*(void **)(v41 - 144));
  }

  siri::intelligence::DirectInvocation::~DirectInvocation((siri::intelligence::DirectInvocation *)&a35);
  _Unwind_Resume(a1);
}

void IE_IEEventToIntent(IEEvent *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = a1;
  siri::intelligence::Intent::Intent((siri::intelligence::Intent *)a2);
  if (v3)
  {
    uint64_t v4 = [(IEEvent *)v3 eventId];

    if (v4)
    {
      id v5 = [(IEEvent *)v3 eventId];
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v5 UTF8String]);
      std::string::operator=(a2, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v6 = [(IEEvent *)v3 name];

    if (v6)
    {
      id v7 = [(IEEvent *)v3 name];
      std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v7 UTF8String]);
      std::string::operator=(a2 + 1, &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_239AAB2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  siri::intelligence::Intent::~Intent(v16);
  _Unwind_Resume(a1);
}

IEInputGroup *IE_InputGroupToIEInputGroup(uint64_t **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    uint64_t v3 = [NSString stringWithUTF8String:v1];
    uint64_t v4 = [[IEInputGroup alloc] initWithId:v3];
    [(IEInputGroup *)v4 setListenAfterSpeaking:*((unsigned __int8 *)*a1 + 52)];
    [(IEInputGroup *)v4 setImmersiveExperience:*((unsigned __int8 *)*a1 + 53)];
    [(IEInputGroup *)v4 setShouldCoordinateWithSpeech:*((unsigned __int8 *)*a1 + 54)];
    id v5 = (std::__shared_weak_count *)(*a1)[8];
    uint64_t v9 = (*a1)[7];
    uint64_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = IE_VariableToNSObject((uint64_t)&v9);
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    id v7 = v6;
    if (!v6) {
      id v7 = objc_opt_new();
    }
    -[IEInputGroup setNlParameters:](v4, "setNlParameters:", v7, v9);
    if (!v6) {
  }
    }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_239AAB44C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void IE_IEDirectInvocationToDirectInvocation(IEDirectInvocation *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(void *)(a2 + 32) = 0;
  uint64_t v4 = [(IEDirectInvocation *)v3 identifier];

  if (v4)
  {
    id v5 = [(IEDirectInvocation *)v3 identifier];
    std::string::basic_string[abi:ne180100]<0>(&__str, (char *)[v5 UTF8String]);
    std::string::operator=((std::string *)a2, &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v6 = [(IEDirectInvocation *)v3 userData];

  if (v6)
  {
    id v7 = [(IEDirectInvocation *)v3 userData];
    IE_NSObjectToVariable(v7, (uint64_t)&__str);
    if (__str.__r_.__value_.__r.__words[0])
    {
      if (v8)
      {
        std::string::size_type size = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
        if (__str.__r_.__value_.__l.__size_) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(__str.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    std::string::size_type size = 0;
LABEL_12:
    if (__str.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
    }

    if (size)
    {
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
      atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a2 + 32);
    *(void *)(a2 + 24) = v8;
    *(void *)(a2 + 32) = size;
    if (v10) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    }
    if (size)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
      std::__shared_weak_count::__release_shared[abi:ne180100](size);
    }
  }
}

void sub_239AAB628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  siri::intelligence::DirectInvocation::~DirectInvocation(v16);
  _Unwind_Resume(a1);
}

siri::intelligence::ExecStateResponse *siri::intelligence::ExecStateResponse::ExecStateResponse(siri::intelligence::ExecStateResponse *this, const siri::intelligence::ExecStateResponse *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  *(void *)this = *(void *)a2;
  *((void *)this + 1) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ExecStateResponse *)((char *)this + 16), (const siri::intelligence::ExecStateResponse *)((char *)a2 + 16));
  *((void *)this + 2) = &unk_26ED27318;
  uint64_t v5 = *((void *)a2 + 18);
  *((void *)this + 17) = *((void *)a2 + 17);
  *((void *)this + 18) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  siri::intelligence::ResponseBase::ResponseBase((siri::intelligence::ExecStateResponse *)((char *)this + 152), (const siri::intelligence::ExecStateResponse *)((char *)a2 + 152));
  *((void *)this + 19) = &unk_26ED272B0;
  uint64_t v6 = *((void *)a2 + 35);
  *((void *)this + 34) = *((void *)a2 + 34);
  *((void *)this + 35) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *((void *)this + 36) = 0;
  *((void *)this + 37) = 0;
  *((void *)this + 38) = 0;
  std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>((void *)this + 36, *((void **)a2 + 36), *((void **)a2 + 37), (uint64_t)(*((void *)a2 + 37) - *((void *)a2 + 36)) >> 4);
  return this;
}

void sub_239AAB75C(_Unwind_Exception *a1)
{
  siri::intelligence::BehaviorResponse::~BehaviorResponse(v3);
  siri::intelligence::DialogResponse::~DialogResponse(v2);
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  _Unwind_Resume(a1);
}

siri::intelligence::ResponseBase *siri::intelligence::ResponseBase::ResponseBase(siri::intelligence::ResponseBase *this, const siri::intelligence::ResponseBase *a2)
{
  *(void *)this = &unk_26ED272F8;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v4 = *(_OWORD *)((char *)a2 + 8);
    *((void *)this + 3) = *((void *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v5 = *((_OWORD *)a2 + 2);
    *((void *)this + 6) = *((void *)a2 + 6);
    *((_OWORD *)this + 2) = v5;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((void *)a2 + 8));
  }
  else
  {
    long long v6 = *(_OWORD *)((char *)a2 + 56);
    *((void *)this + 9) = *((void *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v6;
  }
  uint64_t v7 = *((void *)a2 + 10);
  int v8 = *((_DWORD *)a2 + 22);
  *((void *)this + 12) = 0;
  *((_DWORD *)this + 22) = v8;
  *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v7;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)this + 4, *((long long **)a2 + 12), *((long long **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  return this;
}

void sub_239AAB8B0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vallocate[abi:ne180100](result, a4);
    double result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239AAB964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*,std::shared_ptr<siri::intelligence::ResponseBase>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  std::string v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 - 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 -= 16;
  }
}

std::string *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableString,std::allocator<siri::intelligence::VariableString>,char const(&)[1],char const*,void>@<X0>(char *a1@<X1>, char **a2@<X2>, void *a3@<X8>)
{
  long long v6 = (std::string *)operator new(0x78uLL);
  double result = std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],char const*,std::allocator<siri::intelligence::VariableString>,0>(v6, a1, a2);
  *a3 = v6 + 1;
  a3[1] = v6;
  return result;
}

void sub_239AABB24(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__shared_ptr_emplace<siri::intelligence::VariableString>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],char const*,std::allocator<siri::intelligence::VariableString>,0>(std::string *a1, char *__s, char **a3)
{
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED27560;
  std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],char const*>((int)&v5, a1 + 1, __s, a3);
  return a1;
}

void sub_239AABB98(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableString>::construct[abi:ne180100]<siri::intelligence::VariableString,char const(&)[1],char const*>(int a1, std::string *a2, char *__s, char **a4)
{
  std::string::basic_string[abi:ne180100]<0>(&v7, __s);
  std::string::basic_string[abi:ne180100]<0>(&__p, *a4);
  siri::intelligence::VariableString::VariableString(a2, &v7, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
}

void sub_239AABC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x78uLL);
  double result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_239AABC8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEEC2B8ne180100IJES5_Li0EEES5_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED292B0;
  siri::intelligence::VariableArray::VariableArray((siri::intelligence::VariableArray *)(a1 + 3));
  return a1;
}

void sub_239AABCE8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

siri::intelligence::DialogResponse *siri::intelligence::DialogResponse::DialogResponse(siri::intelligence::DialogResponse *this)
{
  *(_OWORD *)((char *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_26ED27318;
  uint64_t v2 = (char *)operator new(0xF0uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26ED293E8;
  *(_OWORD *)(v2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v2 + 56) = 0u;
  *(_OWORD *)(v2 + 72) = 0u;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *(_OWORD *)(v2 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 20std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *((void *)v2 + 29) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)this + 15) = v2 + 24;
  *((void *)this + 16) = v2;
  MEMORY[0x23ECAA8E0](v2 + 24, "");
  uint64_t v3 = *((void *)this + 15);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 32);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x23ECAA8E0](*((void *)this + 15) + 40, "");
  MEMORY[0x23ECAA8E0](*((void *)this + 15) + 64, "");
  MEMORY[0x23ECAA8E0](*((void *)this + 15) + 88, "");
  uint64_t v5 = *((void *)this + 15);
  long long v6 = *(std::__shared_weak_count **)(v5 + 120);
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = *((void *)this + 15);
  char v8 = *(std::__shared_weak_count **)(v7 + 136);
  *(void *)(v7 + 128) = 0;
  *(void *)(v7 + 136) = 0;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  MEMORY[0x23ECAA8E0](*((void *)this + 15) + 144, "");
  uint64_t v9 = *((void *)this + 15);
  uint64_t v10 = *(std::__shared_weak_count **)(v9 + 176);
  *(void *)(v9 + 168) = 0;
  *(void *)(v9 + 176) = 0;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  MEMORY[0x23ECAA8E0](*((void *)this + 15) + 192, "");
  *(unsigned char *)(*((void *)this + 15) + 184) = 0;
  return this;
}

void sub_239AABE9C(_Unwind_Exception *a1)
{
  siri::intelligence::ResponseBase::~ResponseBase(v1);
  _Unwind_Resume(a1);
}

void siri::intelligence::DialogResponse::GetExpanded(siri::intelligence::DialogResponse *this@<X0>, siri::intelligence::Memory *a2@<X1>, siri::intelligence::ResponseBase *a3@<X8>)
{
  siri::intelligence::ResponseBase::ResponseBase(a3, this);
  *(void *)a3 = &unk_26ED27318;
  uint64_t v6 = *((void *)this + 16);
  *((void *)a3 + 15) = *((void *)this + 15);
  *((void *)a3 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0xF0uLL);
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 1) = 0;
  *(void *)uint64_t v7 = &unk_26ED293E8;
  *(_OWORD *)(v7 + 24) = 0u;
  char v8 = (std::string *)(v7 + 24);
  *(_OWORD *)(v7 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v7 + 56) = 0u;
  *(_OWORD *)(v7 + 72) = 0u;
  *(_OWORD *)(v7 + 88) = 0u;
  *(_OWORD *)(v7 + 104) = 0u;
  *(_OWORD *)(v7 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v7 + 136) = 0u;
  *(_OWORD *)(v7 + 152) = 0u;
  *(_OWORD *)(v7 + 168) = 0u;
  *(_OWORD *)(v7 + 184) = 0u;
  *(_OWORD *)(v7 + 20std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(v7 + 216) = 0u;
  *((void *)v7 + 29) = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  uint64_t v9 = (std::__shared_weak_count *)*((void *)a3 + 16);
  *((void *)a3 + 15) = v7 + 24;
  *((void *)a3 + 16) = v7;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  uint64_t v10 = *((void *)this + 15);
  std::string::operator=(v8, (const std::string *)v10);
  uint64_t v12 = *(void *)(v10 + 24);
  uint64_t v11 = *(void *)(v10 + 32);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  long long v13 = (std::__shared_weak_count *)*((void *)v7 + 7);
  *((void *)v7 + 6) = v12;
  *((void *)v7 + 7) = v11;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::string::operator=((std::string *)(v7 + 64), (const std::string *)(v10 + 40));
  std::string::operator=((std::string *)(v7 + 88), (const std::string *)(v10 + 64));
  std::string::operator=((std::string *)(v7 + 112), (const std::string *)(v10 + 88));
  uint64_t v15 = *(void *)(v10 + 112);
  uint64_t v14 = *(void *)(v10 + 120);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (std::__shared_weak_count *)*((void *)v7 + 18);
  *((void *)v7 + 17) = v15;
  *((void *)v7 + 18) = v14;
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  uint64_t v18 = *(void *)(v10 + 128);
  uint64_t v17 = *(void *)(v10 + 136);
  if (v17) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
  }
  long long v19 = (std::__shared_weak_count *)*((void *)v7 + 20);
  *((void *)v7 + 19) = v18;
  *((void *)v7 + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v17;
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  std::string::operator=((std::string *)v7 + 7, (const std::string *)(v10 + 144));
  uint64_t v21 = *(void *)(v10 + 168);
  uint64_t v20 = *(void *)(v10 + 176);
  if (v20) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v20 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v7 + 25);
  *((void *)v7 + 24) = v21;
  *((void *)v7 + 25) = v20;
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  v7[208] = *(unsigned char *)(v10 + 184);
  std::string::operator=((std::string *)v7 + 9, (const std::string *)(v10 + 192));
  if (a2)
  {
    siri::intelligence::Memory::ExpandVariables((uint64_t)a2, (uint64_t)v8, 0, (uint64_t)lpsrc);
    if (v7[47] < 0) {
      operator delete(v8->__r_.__value_.__l.__data_);
    }
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)lpsrc;
    *((void *)v7 + 5) = v36;
    uint64_t v23 = *((void *)v7 + 17);
    if (v23)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v23 + 88))(lpsrc);
      uint64_t v24 = lpsrc[0];
      if (lpsrc[0]
      {
        int v25 = lpsrc[1];
        if (lpsrc[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        int v25 = 0;
      }
      std::string::size_type v26 = (std::__shared_weak_count *)*((void *)v7 + 18);
      *((void *)v7 + 17) = v24;
      *((void *)v7 + 18) = v25;
      if (v26) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v26);
      }
      if (lpsrc[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
      }
    }
    uint64_t v27 = *((void *)v7 + 19);
    if (v27)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v27 + 88))(lpsrc);
      uint64_t v28 = lpsrc[0];
      if (lpsrc[0]
      {
        uint64_t v29 = lpsrc[1];
        if (lpsrc[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v29 = 0;
      }
      std::string v30 = (std::__shared_weak_count *)*((void *)v7 + 20);
      *((void *)v7 + 19) = v28;
      *((void *)v7 + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v29;
      if (v30) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v30);
      }
      if (lpsrc[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
      }
    }
    uint64_t v31 = *((void *)v7 + 24);
    if (v31)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v31 + 88))(lpsrc);
      long long v32 = lpsrc[0];
      if (lpsrc[0]
      {
        long long v33 = lpsrc[1];
        if (lpsrc[1]) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        long long v33 = 0;
      }
      std::string::size_type v34 = (std::__shared_weak_count *)*((void *)v7 + 25);
      *((void *)v7 + 24) = v32;
      *((void *)v7 + 25) = v33;
      if (v34) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v34);
      }
      if (lpsrc[1]) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
      }
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
}

void sub_239AAC32C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  siri::intelligence::DialogResponse::~DialogResponse(v2);
  _Unwind_Resume(a1);
}

void siri::intelligence::DialogResponse::SetCharacter(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 32);
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t siri::intelligence::DialogResponse::GetCharacter@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = *(void *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::DialogResponse::GetText(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (long long *)*((void *)this + 15);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetText(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 120), a2);
}

void siri::intelligence::DialogResponse::GetUserData(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 15);
  if (*(char *)(v2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 40), *(void *)(v2 + 48));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 40);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 56);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetUserData(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 120) + 40), a2);
}

void siri::intelligence::DialogResponse::GetCategory(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 15);
  if (*(char *)(v2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 64), *(void *)(v2 + 72));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 64);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 80);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetCategory(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 120) + 64), a2);
}

void siri::intelligence::DialogResponse::GetCatId(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 15);
  if (*(char *)(v2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 88), *(void *)(v2 + 96));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 88);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 104);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetCatId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 120) + 88), a2);
}

void siri::intelligence::DialogResponse::SetCatParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 120);
  *(void *)(v2 + 112) = v4;
  *(void *)(v2 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t siri::intelligence::DialogResponse::GetCatParameters@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  uint64_t v4 = *(void *)(v2 + 112);
  uint64_t v3 = *(void *)(v2 + 120);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::DialogResponse::SetVisualParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 136);
  *(void *)(v2 + 128) = v4;
  *(void *)(v2 + 136) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t siri::intelligence::DialogResponse::GetVisualParameters@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  uint64_t v4 = *(void *)(v2 + 128);
  uint64_t v3 = *(void *)(v2 + 136);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::DialogResponse::GetPatternId(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 15);
  if (*(char *)(v2 + 167) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 144), *(void *)(v2 + 152));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 144);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 160);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetPatternId(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 120) + 144), a2);
}

void siri::intelligence::DialogResponse::SetPatternParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 176);
  *(void *)(v2 + 168) = v4;
  *(void *)(v2 + 176) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t siri::intelligence::DialogResponse::GetPatternParameters@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  uint64_t v4 = *(void *)(v2 + 168);
  uint64_t v3 = *(void *)(v2 + 176);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::DialogResponse::GetDialogPhase(siri::intelligence::DialogResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 15);
  if (*(char *)(v2 + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 192), *(void *)(v2 + 200));
  }
  else
  {
    long long v3 = *(_OWORD *)(v2 + 192);
    a2->__r_.__value_.__r.__words[2] = *(void *)(v2 + 208);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

std::string *siri::intelligence::DialogResponse::SetDialogPhase(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(a1 + 120) + 192), a2);
}

uint64_t siri::intelligence::DialogResponse::HasSensitiveData(siri::intelligence::DialogResponse *this)
{
  return *(unsigned __int8 *)(*((void *)this + 15) + 184);
}

uint64_t siri::intelligence::DialogResponse::SetSensitiveData(uint64_t this, char a2)
{
  *(unsigned char *)(*(void *)(this + 120) + 184) = a2;
  return this;
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED293E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED293E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__shared_ptr_emplace<siri::intelligence::DialogResponse::Impl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 160);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 144);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v6 = *(void **)(a1 + 24);
    operator delete(v6);
  }
}

void sub_239AAC7BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_239AAC864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t YAML::operator<<(uint64_t a1, const YAML::Node *a2)
{
  v7[0] = &unk_26ED29350;
  v7[1] = a1;
  memset(v8, 0, sizeof(v8));
  YAML::NodeEvents::NodeEvents((YAML::NodeEvents *)&v4, a2);
  YAML::NodeEvents::Emit((YAML::NodeEvents *)&v4, (uint64_t)v7);
  std::__tree<std::__value_type<YAML::detail::node_ref const*,int>,std::__map_value_compare<YAML::detail::node_ref const*,std::__value_type<YAML::detail::node_ref const*,int>,std::less<YAML::detail::node_ref const*>,true>,std::allocator<std::__value_type<YAML::detail::node_ref const*,int>>>::destroy((uint64_t)v6, v6[1]);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  v7[0] = &unk_26ED29350;
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](v8);
  return a1;
}

void sub_239AAC988(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  YAML::NodeEvents::~NodeEvents((YAML::NodeEvents *)&a9);
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100](v15);
  _Unwind_Resume(a1);
}

void YAML::operator<<()
{
}

void sub_239AACA00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void YAML::Dump(YAML *this, const YAML::Node *a2)
{
  YAML::Emitter::Emitter((YAML::Emitter *)v2);
}

void sub_239AACA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Emitter::~Emitter((YAML::Emitter *)va);
  _Unwind_Resume(a1);
}

void sub_239AACDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);

  IEDefer::~IEDefer((void (***)(void))va1);
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)va, v17);
  }
  uint64_t v18 = *(void *)(v15 - 56);
  *(void *)(v15 - 64) = &unk_26ED2A490;
  *(void *)(v15 - 56) = 0;
  if (v18) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v15 - 56, v18);
  }

  _Unwind_Resume(a1);
}

void NSDictionaryToStringMap(NSDictionary *a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  id v3 = a2;
  a1[2].super.isa = 0;
  a1[1].super.isa = 0;
  a1->super.isa = (Class)&a1[1];
  if (v3)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v13 = v3;
    id v4 = v3;
    uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v5; ++i)
        {
          if (*(void *)v18 != v6) {
            objc_enumerationMutation(v4);
          }
          char v8 = *(void **)(*((void *)&v17 + 1) + 8 * i);
          uint64_t v9 = [v4 objectForKey:v8];
          if (v8) {
            uint64_t v10 = (char *)[v8 UTF8String];
          }
          else {
            uint64_t v10 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(__p, v10);
          if (v9) {
            uint64_t v11 = (char *)[v9 UTF8String];
          }
          else {
            uint64_t v11 = "";
          }
          std::string::basic_string[abi:ne180100]<0>(&__str, v11);
          uint64_t v21 = __p;
          uint64_t v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a1, (const void **)__p, (uint64_t)&std::piecewise_construct, (long long **)&v21);
          std::string::operator=((std::string *)(v12 + 7), &__str);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v5 = [v4 countByEnumeratingWithState:&v17 objects:v22 count:16];
      }
      while (v5);
    }

    id v3 = v13;
  }
}

void sub_239AAD150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v22, *(void **)(v22 + 8));
  _Unwind_Resume(a1);
}

void sub_239AAD4F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);

  IEDefer::~IEDefer((void (***)(void))va1);
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)va, v17);
  }
  uint64_t v18 = *(void *)(v15 - 56);
  *(void *)(v15 - 64) = &unk_26ED2A490;
  *(void *)(v15 - 56) = 0;
  if (v18) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v15 - 56, v18);
  }

  _Unwind_Resume(a1);
}

void sub_239AAD98C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va1, a12);
  va_start(va, a12);
  uint64_t v19 = va_arg(va1, void);
  uint64_t v21 = va_arg(va1, void);

  IEDefer::~IEDefer((void (***)(void))va1);
  uint64_t v17 = v19;
  uint64_t v19 = 0;
  if (v17) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100]((uint64_t)va, v17);
  }
  uint64_t v18 = *(void *)(v15 - 56);
  *(void *)(v15 - 64) = &unk_26ED2A490;
  *(void *)(v15 - 56) = 0;
  if (v18) {
    std::default_delete<siri::intelligence::Timer::Impl>::operator()[abi:ne180100](v15 - 56, v18);
  }

  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v6 = (uint64_t **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, (uint64_t)v10);
    std::__tree<std::string>::__insert_node_at(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, long long **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v6 = operator new(0x50uLL);
  *(void *)a3 = v6;
  *(void *)(a3 + 8) = v5;
  *(unsigned char *)(a3 + 16) = 0;
  uint64_t v7 = (std::string *)(v6 + 4);
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  unsigned char v6[8] = 0;
  v6[9] = 0;
  *(unsigned char *)(a3 + 16) = 1;
}

void sub_239AADC60(_Unwind_Exception *a1)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::string>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

siri::intelligence::TestCaseBuilder *siri::intelligence::TestCaseBuilder::TestCaseBuilder(siri::intelligence::TestCaseBuilder *this)
{
  return this;
}

{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(this);
  return this;
}

void siri::intelligence::TestCaseBuilder::Clear(protobuf::FlowTest_Test **this)
{
  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)v2);
  if (*this != (protobuf::FlowTest_Test *)v2) {
    protobuf::FlowTest_Test::InternalSwap(*this, (protobuf::FlowTest_Test *)v2);
  }
  protobuf::FlowTest_Test::~FlowTest_Test((protobuf::FlowTest_Test *)v2);
}

void siri::intelligence::TestCaseBuilder::SendIntent(uint64_t *a1, uint64_t a2, std::string *__str, uint64_t *a4)
{
  uint64_t v7 = *a1;
  char v8 = *(int **)(*a1 + 40);
  if (!v8)
  {
    int v10 = *(_DWORD *)(v7 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v7 + 24), v10 + 1);
    char v8 = *(int **)(v7 + 40);
    int v10 = *v8;
    goto LABEL_7;
  }
  uint64_t v9 = *(int *)(v7 + 32);
  int v10 = *v8;
  if ((int)v9 < *v8)
  {
    *(_DWORD *)(v7 + 32) = v9 + 1;
    uint64_t v11 = *(protobuf::FlowTest_Step **)&v8[2 * v9 + 2];
    goto LABEL_8;
  }
  if (v10 == *(_DWORD *)(v7 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v8 = v10 + 1;
  uint64_t v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v7 + 24));
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v13 = *(int *)(v7 + 32);
  *(_DWORD *)(v7 + 32) = v13 + 1;
  *(void *)(v12 + 8 * v13 + 8) = v11;
LABEL_8:
  *((_DWORD *)v11 + 4) |= 2u;
  uint64_t v14 = (protobuf::FlowTest_SendIntent *)*((void *)v11 + 7);
  if (!v14)
  {
    uint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
    *((void *)v11 + 7) = v14;
  }
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  if (!v15)
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) != 0) {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    if (size)
    {
      uint64_t v16 = (uint64_t)v14 + 56;
      uint64_t v21 = (uint64_t *)*((void *)v14 + 7);
      *((_DWORD *)v14 + 4) |= 2u;
      if (v21 != &google::protobuf::internal::fixed_address_empty_string)
      {
        uint64_t v18 = (std::string *)v21;
        uint64_t v19 = __str;
        goto LABEL_20;
      }
      uint64_t v22 = __str;
LABEL_23:
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v16, (uint64_t)v22);
    }
  }
  uint64_t v16 = (uint64_t)v14 + 48;
  uint64_t v17 = (uint64_t *)*((void *)v14 + 6);
  *((_DWORD *)v14 + 4) |= 1u;
  if (v17 == &google::protobuf::internal::fixed_address_empty_string)
  {
    uint64_t v22 = (std::string *)a2;
    goto LABEL_23;
  }
  uint64_t v18 = (std::string *)v17;
  uint64_t v19 = (const std::string *)a2;
LABEL_20:
  std::string::operator=(v18, v19);
  uint64_t v23 = *a4;
  uint64_t v24 = (std::__shared_weak_count *)a4[1];
  v34[0] = v23;
  v34[1] = v24;
  if (v24) {
    atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::intelligence::VariableToTestKeyValue((uint64_t)v35, v34);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v37) {
    int v25 = (const protobuf::FlowTest_KeyValueParameter **)(v37 + 8);
  }
  else {
    int v25 = 0;
  }
  if (v36)
  {
    uint64_t v26 = 8 * v36;
    while (1)
    {
      uint64_t v27 = *v25;
      uint64_t v28 = (int *)*((void *)v14 + 5);
      if (!v28) {
        break;
      }
      uint64_t v29 = *((int *)v14 + 8);
      int v30 = *v28;
      if ((int)v29 >= *v28)
      {
        if (v30 == *((_DWORD *)v14 + 9))
        {
LABEL_38:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v14 + 6, v30 + 1);
          uint64_t v28 = (int *)*((void *)v14 + 5);
          int v30 = *v28;
        }
        *uint64_t v28 = v30 + 1;
        uint64_t v31 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v14
                                                                                                + 3));
        uint64_t v32 = *((void *)v14 + 5);
        uint64_t v33 = *((int *)v14 + 8);
        *((_DWORD *)v14 + 8) = v33 + 1;
        *(void *)(v32 + 8 * v33 + 8) = v31;
        goto LABEL_40;
      }
      *((_DWORD *)v14 + 8) = v29 + 1;
      uint64_t v31 = *(protobuf::FlowTest_KeyValueParameter **)&v28[2 * v29 + 2];
LABEL_40:
      if (v27 != v31)
      {
        protobuf::FlowTest_KeyValueParameter::Clear(v31);
        protobuf::FlowTest_KeyValueParameter::MergeFrom(v31, v27);
      }
      ++v25;
      v26 -= 8;
      if (!v26) {
        goto LABEL_43;
      }
    }
    int v30 = *((_DWORD *)v14 + 9);
    goto LABEL_38;
  }
LABEL_43:
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)v35);
}

void sub_239AADFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::VariableToTestKeyValue(uint64_t a1, void *a2)
{
  protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)a1);
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v4 + 8), *(void *)(v4 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(v4 + 8);
    v40.__r_.__value_.__r.__words[2] = *(void *)(v4 + 24);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v5;
  }
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v40.__r_.__value_.__l.__size_;
    operator delete(v40.__r_.__value_.__l.__data_);
    if (!size) {
      goto LABEL_13;
    }
  }
  else if (!*((unsigned char *)&v40.__r_.__value_.__s + 23))
  {
    goto LABEL_13;
  }
  uint64_t v7 = *a2;
  if (*(char *)(*a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v40, *(const std::string::value_type **)(v7 + 8), *(void *)(v7 + 16));
  }
  else
  {
    long long v8 = *(_OWORD *)(v7 + 8);
    v40.__r_.__value_.__r.__words[2] = *(void *)(v7 + 24);
    *(_OWORD *)&v40.__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a1 + 16) |= 1u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 72), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
LABEL_13:
  uint64_t v9 = (const void *)*a2;
  if (!*a2) {
    return;
  }
  if (!v10)
  {
    if (v12)
    {
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      if (!v11)
      {
        uint64_t v16 = v12[9];
        *(_DWORD *)(a1 + 16) |= 4u;
        *(void *)(a1 + 88) = v16;
        return;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v13 = v12[9];
      *(_DWORD *)(a1 + 16) |= 4u;
      *(void *)(a1 + 88) = v13;
      goto LABEL_26;
    }
    if (v14)
    {
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      if (!v11)
      {
        char v27 = v14[66];
        *(_DWORD *)(a1 + 16) |= 8u;
        *(unsigned char *)(a1 + 96) = v27;
        return;
      }
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      char v15 = v14[66];
      *(_DWORD *)(a1 + 16) |= 8u;
      *(unsigned char *)(a1 + 96) = v15;
      goto LABEL_26;
    }
    if (v17)
    {
      uint64_t v11 = (std::__shared_weak_count *)a2[1];
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::VariableDictionary::GetValues(v17, (uint64_t *)&v41);
      uint64_t v18 = v41;
      uint64_t v19 = v42;
      if (v41 != v42)
      {
        while (1)
        {
          long long v20 = *(int **)(a1 + 64);
          if (!v20) {
            break;
          }
          uint64_t v21 = *(int *)(a1 + 56);
          int v22 = *v20;
          if ((int)v21 >= *v20)
          {
            if (v22 == *(_DWORD *)(a1 + 60))
            {
LABEL_41:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v22 + 1);
              long long v20 = *(int **)(a1 + 64);
              int v22 = *v20;
            }
            *long long v20 = v22 + 1;
            uint64_t v23 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
            uint64_t v24 = *(void *)(a1 + 64);
            uint64_t v25 = *(int *)(a1 + 56);
            *(_DWORD *)(a1 + 56) = v25 + 1;
            *(void *)(v24 + 8 * v25 + 8) = v23;
            goto LABEL_43;
          }
          *(_DWORD *)(a1 + 56) = v21 + 1;
          uint64_t v23 = *(protobuf::FlowTest_KeyValueParameter **)&v20[2 * v21 + 2];
LABEL_43:
          uint64_t v26 = (std::__shared_weak_count *)v18[1];
          v39[0] = *v18;
          v39[1] = v26;
          if (v26) {
            atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          siri::intelligence::VariableToTestKeyValue(&v40, v39);
          if (&v40 != (std::string *)v23)
          {
            protobuf::FlowTest_KeyValueParameter::Clear(v23);
            protobuf::FlowTest_KeyValueParameter::MergeFrom(v23, (const protobuf::FlowTest_KeyValueParameter *)&v40);
          }
          protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&v40);
          if (v26) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v26);
          }
          v18 += 2;
          if (v18 == v19) {
            goto LABEL_70;
          }
        }
        int v22 = *(_DWORD *)(a1 + 60);
        goto LABEL_41;
      }
LABEL_70:
      v40.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
      if (!v11) {
        return;
      }
      goto LABEL_26;
    }
    if (!v28) {
      return;
    }
    uint64_t v11 = (std::__shared_weak_count *)a2[1];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v41 = 0;
    BOOL v42 = 0;
    uint64_t v43 = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(&v41, v28[9], v28[10], ((char *)v28[10] - (char *)v28[9]) >> 4);
    uint64_t v29 = v41;
    int v30 = v42;
    if (v41 == v42) {
      goto LABEL_70;
    }
    while (1)
    {
      uint64_t v31 = *(int **)(a1 + 40);
      if (!v31) {
        break;
      }
      uint64_t v32 = *(int *)(a1 + 32);
      int v33 = *v31;
      if ((int)v32 >= *v31)
      {
        if (v33 == *(_DWORD *)(a1 + 36))
        {
LABEL_61:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v33 + 1);
          uint64_t v31 = *(int **)(a1 + 40);
          int v33 = *v31;
        }
        *uint64_t v31 = v33 + 1;
        std::string::size_type v34 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
        uint64_t v35 = *(void *)(a1 + 40);
        uint64_t v36 = *(int *)(a1 + 32);
        *(_DWORD *)(a1 + 32) = v36 + 1;
        *(void *)(v35 + 8 * v36 + 8) = v34;
        goto LABEL_63;
      }
      *(_DWORD *)(a1 + 32) = v32 + 1;
      std::string::size_type v34 = *(protobuf::FlowTest_KeyValueParameter **)&v31[2 * v32 + 2];
LABEL_63:
      uint64_t v37 = (std::__shared_weak_count *)v29[1];
      v38[0] = *v29;
      v38[1] = v37;
      if (v37) {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      siri::intelligence::VariableToTestKeyValue(&v40, v38);
      if (&v40 != (std::string *)v34)
      {
        protobuf::FlowTest_KeyValueParameter::Clear(v34);
        protobuf::FlowTest_KeyValueParameter::MergeFrom(v34, (const protobuf::FlowTest_KeyValueParameter *)&v40);
      }
      protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&v40);
      if (v37) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v37);
      }
      v29 += 2;
      if (v29 == v30) {
        goto LABEL_70;
      }
    }
    int v33 = *(_DWORD *)(a1 + 36);
    goto LABEL_61;
  }
  uint64_t v11 = (std::__shared_weak_count *)a2[1];
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v10[95] < 0) {
    std::string::__init_copy_ctor_external(&v40, *((const std::string::value_type **)v10 + 9), *((void *)v10 + 10));
  }
  else {
    std::string v40 = *(std::string *)(v10 + 3);
  }
  *(_DWORD *)(a1 + 16) |= 2u;
  google::protobuf::internal::ArenaStringPtr::SetNoArena((uint64_t *)(a1 + 80), (uint64_t)&google::protobuf::internal::fixed_address_empty_string, (__n128 *)&v40);
  if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v40.__r_.__value_.__l.__data_);
  }
  if (v11) {
LABEL_26:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
}

void sub_239AAE520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(v18);
  _Unwind_Resume(a1);
}

void sub_239AAE5B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x239AAE5A4);
}

void siri::intelligence::TestCaseBuilder::AssertResponseAllIds(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    int v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    uint64_t v4 = *(int **)(v3 + 40);
    int v6 = *v4;
    goto LABEL_7;
  }
  uint64_t v5 = *(int *)(v3 + 32);
  int v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    uint64_t v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v4 = v6 + 1;
  uint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(void *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 4u;
  int v10 = (protobuf::FlowTest_AssertResponse *)*((void *)v7 + 8);
  if (!v10)
  {
    int v10 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((void *)v7 + 8) = v10;
  }
  uint64_t v13 = a2;
  uint64_t v11 = *a2;
  uint64_t v12 = v13[1];
  if (v12 - v11 != 24)
  {
    if (v11 == v12) {
      return;
    }
    uint64_t v17 = (uint64_t *)((char *)v10 + 48);
    while (1)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v18 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v19 = (int *)*((void *)v10 + 8);
      if (!v19) {
        break;
      }
      uint64_t v20 = *((int *)v10 + 14);
      int v21 = *v19;
      if ((int)v20 >= *v19)
      {
        if (v21 == *((_DWORD *)v10 + 15))
        {
LABEL_25:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v10 + 12, v21 + 1);
          uint64_t v19 = (int *)*((void *)v10 + 8);
          int v21 = *v19;
        }
        *uint64_t v19 = v21 + 1;
        uint64_t v23 = (atomic_ullong *)*v17;
        if (!*v17) {
          operator new();
        }
        if (v23[14]) {
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v23, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        uint64_t v24 = *((void *)v10 + 8);
        uint64_t v25 = *((int *)v10 + 14);
        *((_DWORD *)v10 + 14) = v25 + 1;
        *(void *)(v24 + 8 * v25 + 8) = AlignedAndAddCleanup;
        goto LABEL_31;
      }
      *((_DWORD *)v10 + 14) = v20 + 1;
      AlignedAndAddCleanup = *(std::string **)&v19[2 * v20 + 2];
LABEL_31:
      std::string::operator=(AlignedAndAddCleanup, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 24;
      if (v11 == v12) {
        return;
      }
    }
    int v21 = *((_DWORD *)v10 + 15);
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t *)*((void *)v10 + 9);
  uint64_t v15 = (uint64_t)v10 + 72;
  uint64_t v14 = (std::string *)v16;
  *(_DWORD *)(v15 - 56) |= 1u;
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, v11);
  }

  std::string::operator=(v14, (const std::string *)v11);
}

void sub_239AAE874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCaseBuilder::AssertResponseAnyId(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    int v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    uint64_t v4 = *(int **)(v3 + 40);
    int v6 = *v4;
    goto LABEL_7;
  }
  uint64_t v5 = *(int *)(v3 + 32);
  int v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    uint64_t v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v4 = v6 + 1;
  uint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(void *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 4u;
  int v10 = (protobuf::FlowTest_AssertResponse *)*((void *)v7 + 8);
  if (!v10)
  {
    int v10 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((void *)v7 + 8) = v10;
  }
  uint64_t v13 = a2;
  uint64_t v11 = *a2;
  uint64_t v12 = v13[1];
  if (v12 - v11 != 24)
  {
    if (v11 == v12) {
      return;
    }
    uint64_t v17 = (uint64_t *)((char *)v10 + 24);
    while (1)
    {
      if (*(char *)(v11 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v11, *(void *)(v11 + 8));
      }
      else
      {
        long long v18 = *(_OWORD *)v11;
        __p.__r_.__value_.__r.__words[2] = *(void *)(v11 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
      }
      uint64_t v19 = (int *)*((void *)v10 + 5);
      if (!v19) {
        break;
      }
      uint64_t v20 = *((int *)v10 + 8);
      int v21 = *v19;
      if ((int)v20 >= *v19)
      {
        if (v21 == *((_DWORD *)v10 + 9))
        {
LABEL_25:
          google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v10 + 6, v21 + 1);
          uint64_t v19 = (int *)*((void *)v10 + 5);
          int v21 = *v19;
        }
        *uint64_t v19 = v21 + 1;
        uint64_t v23 = (atomic_ullong *)*v17;
        if (!*v17) {
          operator new();
        }
        if (v23[14]) {
        AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v23, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
        }
        AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
        AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
        AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
        uint64_t v24 = *((void *)v10 + 5);
        uint64_t v25 = *((int *)v10 + 8);
        *((_DWORD *)v10 + 8) = v25 + 1;
        *(void *)(v24 + 8 * v25 + 8) = AlignedAndAddCleanup;
        goto LABEL_31;
      }
      *((_DWORD *)v10 + 8) = v20 + 1;
      AlignedAndAddCleanup = *(std::string **)&v19[2 * v20 + 2];
LABEL_31:
      std::string::operator=(AlignedAndAddCleanup, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      v11 += 24;
      if (v11 == v12) {
        return;
      }
    }
    int v21 = *((_DWORD *)v10 + 9);
    goto LABEL_25;
  }
  uint64_t v16 = (uint64_t *)*((void *)v10 + 9);
  uint64_t v15 = (uint64_t)v10 + 72;
  uint64_t v14 = (std::string *)v16;
  *(_DWORD *)(v15 - 56) |= 1u;
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, v11);
  }

  std::string::operator=(v14, (const std::string *)v11);
}

void sub_239AAEB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::TestCaseBuilder::SetVariable(uint64_t *a1, const std::string *a2, uint64_t *a3)
{
  uint64_t v5 = *a1;
  int v6 = *(int **)(*a1 + 40);
  if (!v6)
  {
    int v8 = *(_DWORD *)(v5 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v5 + 24), v8 + 1);
    int v6 = *(int **)(v5 + 40);
    int v8 = *v6;
    goto LABEL_7;
  }
  uint64_t v7 = *(int *)(v5 + 32);
  int v8 = *v6;
  if ((int)v7 < *v6)
  {
    *(_DWORD *)(v5 + 32) = v7 + 1;
    uint64_t v9 = *(protobuf::FlowTest_Step **)&v6[2 * v7 + 2];
    goto LABEL_8;
  }
  if (v8 == *(_DWORD *)(v5 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  *int v6 = v8 + 1;
  uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v5 + 24));
  uint64_t v10 = *(void *)(v5 + 40);
  uint64_t v11 = *(int *)(v5 + 32);
  *(_DWORD *)(v5 + 32) = v11 + 1;
  *(void *)(v10 + 8 * v11 + 8) = v9;
LABEL_8:
  uint64_t v12 = (int *)*((void *)v9 + 5);
  if (!v12)
  {
    int v14 = *((_DWORD *)v9 + 9);
LABEL_13:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)v9 + 6, v14 + 1);
    uint64_t v12 = (int *)*((void *)v9 + 5);
    int v14 = *v12;
    goto LABEL_14;
  }
  uint64_t v13 = *((int *)v9 + 8);
  int v14 = *v12;
  if ((int)v13 < *v12)
  {
    *((_DWORD *)v9 + 8) = v13 + 1;
    uint64_t v15 = *(protobuf::FlowTest_KeyValueParameter **)&v12[2 * v13 + 2];
    goto LABEL_15;
  }
  if (v14 == *((_DWORD *)v9 + 9)) {
    goto LABEL_13;
  }
LABEL_14:
  *uint64_t v12 = v14 + 1;
  uint64_t v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*((google::protobuf::internal::ArenaImpl **)v9
                                                                                          + 3));
  uint64_t v16 = *((void *)v9 + 5);
  uint64_t v17 = *((int *)v9 + 8);
  *((_DWORD *)v9 + 8) = v17 + 1;
  *(void *)(v16 + 8 * v17 + 8) = v15;
LABEL_15:
  uint64_t v18 = *a3;
  uint64_t v19 = (std::__shared_weak_count *)a3[1];
  v23[0] = v18;
  v23[1] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  siri::intelligence::VariableToTestKeyValue((uint64_t)v24, v23);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v24 != (unsigned char *)v15)
  {
    protobuf::FlowTest_KeyValueParameter::Clear(v15);
    protobuf::FlowTest_KeyValueParameter::MergeFrom(v15, (const protobuf::FlowTest_KeyValueParameter *)v24);
  }
  int v22 = (uint64_t *)*((void *)v15 + 9);
  uint64_t v21 = (uint64_t)v15 + 72;
  uint64_t v20 = (std::string *)v22;
  *(_DWORD *)(v21 - 56) |= 1u;
  if (v22 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v21, (uint64_t)a2);
  }
  std::string::operator=(v20, a2);
  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)v24);
}

void sub_239AAED1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::TestCaseBuilder::GotoResponse(uint64_t *a1, std::string *__str)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    int v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    uint64_t v4 = *(int **)(v3 + 40);
    int v6 = *v4;
    goto LABEL_7;
  }
  uint64_t v5 = *(int *)(v3 + 32);
  int v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    uint64_t v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v4 = v6 + 1;
  uint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(void *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((void *)v7 + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((void *)v7 + 6) = started;
  }
  uint64_t v13 = (uint64_t *)*((void *)started + 3);
  uint64_t v11 = (uint64_t)started + 24;
  uint64_t v12 = (std::string *)v13;
  *(_DWORD *)(v11 - 8) |= 1u;
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  }

  return std::string::operator=(v12, __str);
}

std::string *siri::intelligence::TestCaseBuilder::SwitchActivity(uint64_t *a1, std::string *__str)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *(int **)(*a1 + 40);
  if (!v4)
  {
    int v6 = *(_DWORD *)(v3 + 36);
LABEL_6:
    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v3 + 24), v6 + 1);
    uint64_t v4 = *(int **)(v3 + 40);
    int v6 = *v4;
    goto LABEL_7;
  }
  uint64_t v5 = *(int *)(v3 + 32);
  int v6 = *v4;
  if ((int)v5 < *v4)
  {
    *(_DWORD *)(v3 + 32) = v5 + 1;
    uint64_t v7 = *(protobuf::FlowTest_Step **)&v4[2 * v5 + 2];
    goto LABEL_8;
  }
  if (v6 == *(_DWORD *)(v3 + 36)) {
    goto LABEL_6;
  }
LABEL_7:
  int *v4 = v6 + 1;
  uint64_t v7 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(v3 + 24));
  uint64_t v8 = *(void *)(v3 + 40);
  uint64_t v9 = *(int *)(v3 + 32);
  *(_DWORD *)(v3 + 32) = v9 + 1;
  *(void *)(v8 + 8 * v9 + 8) = v7;
LABEL_8:
  *((_DWORD *)v7 + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((void *)v7 + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((void *)v7 + 6) = started;
  }
  uint64_t v13 = (uint64_t *)*((void *)started + 4);
  uint64_t v11 = (uint64_t)started + 32;
  uint64_t v12 = (std::string *)v13;
  *(_DWORD *)(v11 - 16) |= 2u;
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v11, (uint64_t)__str);
  }

  return std::string::operator=(v12, __str);
}

uint64_t siri::intelligence::TestCaseBuilder::GetNumberOfSteps(siri::intelligence::TestCaseBuilder *this)
{
  return *(unsigned int *)(*(void *)this + 32);
}

uint64_t siri::intelligence::TestCaseBuilder::AddToTestFile(uint64_t *a1, long long *a2, long long *a3, std::string *__str, uint64_t a5)
{
  uint64_t v9 = *a1;
  uint64_t v12 = *(uint64_t **)(v9 + 48);
  uint64_t v10 = v9 + 48;
  uint64_t v11 = (std::string *)v12;
  *(_DWORD *)(v10 - 32) |= 1u;
  if (v12 == &google::protobuf::internal::fixed_address_empty_string) {
    google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v10, (uint64_t)__str);
  }
  std::string::operator=(v11, __str);
  uint64_t v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a5 + 8);
  }
  uint64_t v14 = *a1;
  if (v13)
  {
    uint64_t v17 = *(uint64_t **)(v14 + 56);
    uint64_t v15 = v14 + 56;
    uint64_t v16 = (std::string *)v17;
    *(_DWORD *)(v15 - 40) |= 2u;
    if (v17 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v15, a5);
    }
    std::string::operator=(v16, (const std::string *)a5);
  }
  else
  {
    uint64_t v18 = *(void *)(v14 + 56);
    if ((uint64_t *)v18 != &google::protobuf::internal::fixed_address_empty_string)
    {
      if (*(char *)(v18 + 23) < 0)
      {
        **(unsigned char **)uint64_t v18 = 0;
        *(void *)(v18 + 8) = 0;
      }
      else
      {
        *(unsigned char *)uint64_t v18 = 0;
        *(unsigned char *)(v18 + 23) = 0;
      }
    }
    *(_DWORD *)(v14 + 16) &= ~2u;
  }
  siri::intelligence::TestCase::TestCase(&v22, *a1, a2, a3);
  memset(v21, 0, sizeof(v21));
  siri::intelligence::TestSuite::LoadTests((uint64_t *)v21, (uint64_t)a2, (uint64_t)a3);
  siri::intelligence::TestSuite::AddTestCase((siri::intelligence::TestSuite *)v21, (const siri::intelligence::TestCase *)&v22);
  uint64_t v19 = siri::intelligence::TestSuite::SaveTests((siri::intelligence::TestCase **)v21);
  uint64_t v31 = (void **)&v21[1] + 1;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](&v31);
  uint64_t v31 = (void **)v21;
  std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](&v31);
  *(void *)&v21[0] = &v30;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  *(void *)&v21[0] = &v29;
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)v21);
  if (v28 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  return v19;
}

void sub_239AAF170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
}

void siri::intelligence::TestSuite::~TestSuite(void **this)
{
  uint64_t v2 = this + 3;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100](&v2);
  uint64_t v2 = this;
  std::vector<siri::intelligence::TestCase>::__destroy_vector::operator()[abi:ne180100](&v2);
}

uint64_t siri::intelligence::TestCaseBuilder::AddToTestFile(uint64_t *a1, const std::string *a2, std::string *a3, uint64_t a4)
{
  siri::intelligence::FindTemplateDir((uint64_t)a2, (uint64_t)v12);
  siri::intelligence::Configuration::GetFlowIdFromPath(a2, (uint64_t)__p);
  uint64_t v8 = siri::intelligence::TestCaseBuilder::AddToTestFile(a1, (long long *)v12, (long long *)__p, a3, a4);
  if (v11 < 0) {
    operator delete(__p[0]);
  }
  if (v13 < 0) {
    operator delete(v12[0]);
  }
  return v8;
}

void sub_239AAF268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x60uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_239AAF2D4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__120__shared_ptr_emplaceIN4siri12intelligence15TestCaseBuilder4ImplENS_9allocatorIS4_EEEC2B8ne180100IJES6_Li0EEES6_DpOT_(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = &unk_26ED29438;
  *(_OWORD *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)(a1 + 24));
  return a1;
}

void sub_239AAF348(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29438;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29438;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__shared_ptr_emplace<siri::intelligence::TestCaseBuilder::Impl>::__on_zero_shared(uint64_t a1)
{
}

BOOL siri::intelligence::DirExists(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x4000;
}

BOOL siri::intelligence::FileExists(uint64_t *a1)
{
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1]) {
      return 0;
    }
    a1 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    return 0;
  }
  return stat((const char *)a1, &v3) != -1 && (v3.st_mode & 0xF000) == 0x8000;
}

void *siri::intelligence::FindFileInPaths@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2[1] - *a2;
  if (v4)
  {
    uint64_t v7 = 0;
    unint64_t v8 = v4 / 24;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    while (1)
    {
      siri::intelligence::JoinPath(*a2 + v7, a1, a3);
      uint64_t result = (void *)siri::intelligence::FileExists((uint64_t *)a3);
      if (result) {
        break;
      }
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      v7 += 24;
      if (!--v9) {
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    return std::string::basic_string[abi:ne180100]<0>((void *)a3, (char *)&str_5);
  }
  return result;
}

void sub_239AAF570(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::JoinPath(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v5 = *(char *)(a1 + 23);
  std::string::size_type v6 = *(void *)(a1 + 8);
  if (v5 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
  if (!v7)
  {
    if ((v8 & 0x80) != 0) {
      goto LABEL_10;
    }
LABEL_12:
    *(_OWORD *)a3 = *(_OWORD *)a2;
    uint64_t v11 = *(void *)(a2 + 16);
    goto LABEL_15;
  }
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a2 + 8);
  }
  if (!v8)
  {
    if (v5 < 0)
    {
      uint64_t v10 = *(const std::string::value_type **)a1;
      goto LABEL_19;
    }
    *(_OWORD *)a3 = *(_OWORD *)a1;
    uint64_t v11 = *(void *)(a1 + 16);
LABEL_15:
    *(void *)(a3 + 16) = v11;
    return;
  }
  if (siri::intelligence::IsAbsPath((std::string *)a2))
  {
    if (*(char *)(a2 + 23) < 0)
    {
LABEL_10:
      uint64_t v10 = *(const std::string::value_type **)a2;
      std::string::size_type v6 = *(void *)(a2 + 8);
LABEL_19:
      std::string::__init_copy_ctor_external((std::string *)a3, v10, v6);
      return;
    }
    goto LABEL_12;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a3, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)a3 = *(_OWORD *)a1;
    *(void *)(a3 + 16) = *(void *)(a1 + 16);
  }
  while (1)
  {
    uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
    {
      uint64_t v13 = *(void *)(a3 + 8);
      if (!v13) {
        goto LABEL_33;
      }
    }
    else
    {
      if (!*(unsigned char *)(a3 + 23)) {
        goto LABEL_33;
      }
      uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    }
    uint64_t v14 = v13 - 1;
    if ((v12 & 0x80) != 0) {
      break;
    }
    if (*(unsigned char *)(a3 + v14) != 47) {
      goto LABEL_33;
    }
LABEL_32:
    std::string::erase((std::string *)a3, v12 - 1, 0xFFFFFFFFFFFFFFFFLL);
  }
  if (*(unsigned char *)(*(void *)a3 + v14) == 47)
  {
    uint64_t v12 = *(void *)(a3 + 8);
    goto LABEL_32;
  }
LABEL_33:
  std::string::push_back((std::string *)a3, 47);
  int v15 = *(char *)(a2 + 23);
  if (v15 >= 0) {
    uint64_t v16 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v16 = *(const std::string::value_type **)a2;
  }
  if (v15 >= 0) {
    std::string::size_type v17 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v17 = *(void *)(a2 + 8);
  }
  std::string::append((std::string *)a3, v16, v17);
}

void sub_239AAF710(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

FILE *siri::intelligence::OpenDataFile(std::string *a1, const char *a2)
{
  std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  int v3 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  int v4 = (int)a2;
  int v5 = (const char *)a1;
  if ((a2 - 1) >= 2)
  {
    if (a2)
    {
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported mode for OpenDataFile()", a2);
      return 0;
    }
    if (v3 < 0) {
      a1 = (std::string *)a1->__r_.__value_.__r.__words[0];
    }
    uint64_t result = fopen((const char *)a1, "r");
    if (!result)
    {
      if (v5[23] >= 0) {
        uint64_t v12 = (uint64_t *)v5;
      }
      else {
        uint64_t v12 = *(uint64_t **)v5;
      }
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to read data file: %s", v11, v12);
      return 0;
    }
  }
  else
  {
    siri::intelligence::MakeDirsForFile(a1);
    if (v5[23] >= 0) {
      std::string::size_type v6 = v5;
    }
    else {
      std::string::size_type v6 = *(const char **)v5;
    }
    if (v4 == 1) {
      uint64_t v7 = "w";
    }
    else {
      uint64_t v7 = "a";
    }
    uint64_t result = fopen(v6, v7);
    if (!result)
    {
      if (v5[23] >= 0) {
        uint64_t v10 = (uint64_t *)v5;
      }
      else {
        uint64_t v10 = *(uint64_t **)v5;
      }
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to write data file: %s", v9, v10);
      return 0;
    }
  }
  return result;
}

uint64_t siri::intelligence::MakeDirsForFile(std::string *a1)
{
  siri::intelligence::DirName(a1, 1, &__p);
  uint64_t Dir = siri::intelligence::MakeDir((uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return Dir;
}

void sub_239AAF878(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::ReadFileToVector(unint64_t *a1, std::string *a2)
{
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (!a1)
  {
    if ((size & 0x80u) == 0) {
      uint64_t v11 = (uint64_t *)a2;
    }
    else {
      uint64_t v11 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Cannot open file: %s. Data is NULL", (const char *)a2, v11);
    return 0;
  }
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (!size) {
    return 0;
  }
  if (!siri::intelligence::FileExists((uint64_t *)a2))
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = (uint64_t *)a2;
    }
    else {
      uint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Cannot open file: %s. File does not exist.", v5, v12);
    return 0;
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = (const char *)a2;
  }
  else {
    std::string::size_type v6 = (const char *)a2->__r_.__value_.__r.__words[0];
  }
  if (stat(v6, &v21) == -1) {
    st_std::string::size_type size = 0;
  }
  else {
    st_std::string::size_type size = v21.st_size;
  }
  unint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  unint64_t v10 = v9 - *a1;
  if (st_size <= v10)
  {
    if (st_size < v10)
    {
      unint64_t v9 = v8 + st_size;
      a1[1] = v8 + st_size;
    }
  }
  else
  {
    std::vector<unsigned char>::__append(a1, st_size - v10);
    unint64_t v8 = *a1;
    unint64_t v9 = a1[1];
  }
  if (v8 == v9) {
    return 1;
  }
  int v15 = siri::intelligence::OpenDataFile(a2, 0);
  if (!v15)
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v20 = (uint64_t *)a2;
    }
    else {
      uint64_t v20 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"Cannot open file: %s", v16, v20);
    return 0;
  }
  std::string::size_type v17 = v15;
  uint64_t v13 = 1;
  size_t v18 = fread((void *)*a1, 1uLL, st_size, v15);
  fclose(v17);
  if (v18 != st_size)
  {
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"ReadFileToVector: file size discrepancy!", v19);
    return 1;
  }
  return v13;
}

off_t siri::intelligence::GetFileSize(const char *a1)
{
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  if (stat(a1, &v2) == -1) {
    return 0;
  }
  else {
    return v2.st_size;
  }
}

uint64_t siri::intelligence::ReadFileToLines@<X0>(uint64_t *a1@<X8>)
{
  v14[19] = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::ifstream::basic_ifstream(v12);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v10 = 0;
  stat v2 = (std::locale::id *)MEMORY[0x263F8C108];
  while (1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v12[0] - 24)));
    int v3 = std::locale::use_facet(&v11, v2);
    unsigned __int8 v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v11);
    std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12, (uint64_t)__p, v4);
    if ((v13[*(void *)(v12[0] - 24) + 16] & 5) != 0) {
      break;
    }
    unint64_t v5 = a1[1];
    if (v5 >= a1[2])
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a1, (long long *)__p);
    }
    else
    {
      if (SHIBYTE(v10) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a1[1], (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      }
      else
      {
        long long v6 = *(_OWORD *)__p;
        *(void *)(v5 + 16) = v10;
        *(_OWORD *)unint64_t v5 = v6;
      }
      uint64_t v7 = v5 + 24;
      a1[1] = v5 + 24;
    }
    a1[1] = v7;
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  v12[0] = *MEMORY[0x263F8C2A8];
  *(uint64_t *)((char *)v12 + *(void *)(v12[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
  MEMORY[0x23ECAA9D0](v13);
  std::istream::~istream();
  return MEMORY[0x23ECAAC10](v14);
}

void sub_239AAFC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, std::locale a16, uint64_t a17)
{
}

uint64_t *std::ifstream::basic_ifstream(uint64_t *a1)
{
  uint64_t v2 = MEMORY[0x263F8C308] + 64;
  a1[53] = MEMORY[0x263F8C308] + 64;
  int v3 = a1 + 2;
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2A8] + 16);
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 8);
  *a1 = v5;
  *(uint64_t *)((char *)a1 + *(void *)(v5 - 24)) = v4;
  a1[1] = 0;
  long long v6 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v6, a1 + 2);
  uint64_t v7 = MEMORY[0x263F8C308] + 24;
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *a1 = v7;
  a1[53] = v2;
  MEMORY[0x23ECAA9C0](v3);
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | 4);
  }
  return a1;
}

void sub_239AAFE74(_Unwind_Exception *a1)
{
  std::istream::~istream();
  MEMORY[0x23ECAAC10](v1);
  _Unwind_Resume(a1);
}

void *std::ifstream::~ifstream(void *a1)
{
  uint64_t v2 = MEMORY[0x263F8C2A8];
  uint64_t v3 = *MEMORY[0x263F8C2A8];
  *a1 = *MEMORY[0x263F8C2A8];
  *(void *)((char *)a1 + *(void *)(v3 - 24)) = *(void *)(v2 + 24);
  MEMORY[0x23ECAA9D0](a1 + 2);
  std::istream::~istream();
  MEMORY[0x23ECAAC10](a1 + 53);
  return a1;
}

void siri::intelligence::ReadFileToString(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  v23[19] = *MEMORY[0x263EF8340];
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
  if (v3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
    uint64_t v4 = MEMORY[0x263F8C308] + 64;
    v23[0] = MEMORY[0x263F8C308] + 64;
    uint64_t v5 = *(void *)(MEMORY[0x263F8C2A8] + 16);
    v21[0] = *(void *)(MEMORY[0x263F8C2A8] + 8);
    *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = v5;
    v21[1] = 0;
    long long v6 = (std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24));
    std::ios_base::init(v6, v22);
    uint64_t v7 = MEMORY[0x263F8C308] + 24;
    v6[1].__vftable = 0;
    v6[1].__fmtflags_ = -1;
    v21[0] = v7;
    v23[0] = v4;
    MEMORY[0x23ECAA9C0](v22);
    if (!std::filebuf::open()) {
      std::ios_base::clear((std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)), *(_DWORD *)&v22[*(void *)(v21[0] - 24) + 16] | 4);
    }
    unint64_t v8 = (std::locale::id *)MEMORY[0x263F8C108];
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)));
      unint64_t v9 = std::locale::use_facet(&v16, v8);
      unsigned __int8 v10 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v9->__vftable[2].~facet_0)(v9, 10);
      std::locale::~locale(&v16);
      std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v21, (uint64_t)__p, v10);
      if ((v22[*(void *)(v21[0] - 24) + 16] & 5) != 0) {
        break;
      }
      if ((v20 & 0x80u) == 0) {
        size_t v11 = v20;
      }
      else {
        size_t v11 = (size_t)__p[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v16, v11 + 1);
      if ((v18 & 0x80u) == 0) {
        locale = (char *)&v16;
      }
      else {
        locale = (char *)v16.__locale_;
      }
      if (v11)
      {
        if ((v20 & 0x80u) == 0) {
          uint64_t v13 = __p;
        }
        else {
          uint64_t v13 = (void **)__p[0];
        }
        memmove(locale, v13, v11);
      }
      *(_WORD *)&locale[v11] = 10;
      if ((v18 & 0x80u) == 0) {
        uint64_t v14 = (const std::string::value_type *)&v16;
      }
      else {
        uint64_t v14 = (const std::string::value_type *)v16.__locale_;
      }
      if ((v18 & 0x80u) == 0) {
        std::string::size_type v15 = v18;
      }
      else {
        std::string::size_type v15 = v17;
      }
      std::string::append(a2, v14, v15);
      if ((char)v18 < 0) {
        operator delete(v16.__locale_);
      }
    }
    if (!std::filebuf::close()) {
      std::ios_base::clear((std::ios_base *)((char *)v21 + *(void *)(v21[0] - 24)), *(_DWORD *)&v22[*(void *)(v21[0] - 24) + 16] | 4);
    }
    v21[0] = *MEMORY[0x263F8C2A8];
    *(void *)((char *)v21 + *(void *)(v21[0] - 24)) = *(void *)(MEMORY[0x263F8C2A8] + 24);
    MEMORY[0x23ECAA9D0](v22);
    std::istream::~istream();
    MEMORY[0x23ECAAC10](v23);
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_239AB03BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::locale a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  std::istream::~istream();
  MEMORY[0x23ECAAC10](a11);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(a1);
}

BOOL siri::intelligence::WriteFileFromVector(uint64_t a1, std::string *a2)
{
  uint64_t v5 = siri::intelligence::OpenDataFile(a2, (const char *)1);
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 8);
    if (v6 != *(void *)a1) {
      fwrite(*(const void **)a1, v6 - *(void *)a1, 1uLL, v5);
    }
    fclose(v5);
  }
  else
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v7 = (uint64_t *)a2;
    }
    else {
      uint64_t v7 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Error saving to file %s", v4, v7);
  }
  return v5 != 0;
}

BOOL siri::intelligence::WriteFileFromLines(long long **a1, std::string *a2)
{
  uint64_t v5 = siri::intelligence::OpenDataFile(a2, (const char *)1);
  if (v5)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\n");
    siri::intelligence::StringJoin(a1, (uint64_t)__p, (uint64_t)&v16);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    size_t v6 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    char v7 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    std::string::size_type size = v16.__r_.__value_.__l.__size_;
    if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v9 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v9 = v16.__r_.__value_.__l.__size_;
    }
    if (v9)
    {
      std::string::append(&v16, "\n");
      size_t v6 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v16.__r_.__value_.__l.__size_;
      char v7 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
    }
    if (v7 >= 0) {
      unsigned __int8 v10 = &v16;
    }
    else {
      unsigned __int8 v10 = (std::string *)v16.__r_.__value_.__r.__words[0];
    }
    if (v7 >= 0) {
      size_t v11 = v6;
    }
    else {
      size_t v11 = size;
    }
    fwrite(v10, v11, 1uLL, v5);
    fclose(v5);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v16.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = (uint64_t *)a2;
    }
    else {
      uint64_t v12 = (uint64_t *)a2->__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Error saving to file %s", v4, v12);
  }
  return v5 != 0;
}

void sub_239AB060C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::WriteFileFromString(uint64_t a1, std::string *a2)
{
  int v3 = *(char *)(a1 + 23);
  if (v3 >= 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  if (v3 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v5 = *(void *)(a1 + 8);
  }
  size_t v11 = 0;
  uint64_t v12 = 0;
  std::string __p = 0;
  if (v5)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](&__p, v5);
    size_t v6 = v11;
    do
    {
      char v7 = *v4++;
      *v6++ = v7;
      --v5;
    }
    while (v5);
    size_t v11 = v6;
  }
  BOOL v8 = siri::intelligence::WriteFileFromVector((uint64_t)&__p, a2);
  if (__p)
  {
    size_t v11 = __p;
    operator delete(__p);
  }
  return v8;
}

void sub_239AB06D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::WriteTempFileFromString(const void **a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  strcpy(__s, "/tmp/flowtmpfile_XXXXXX");
  int v6 = mkstemp(__s);
  std::string::basic_string[abi:ne180100]<0>(__p, __s);
  siri::intelligence::AddExtension((uint64_t)__p, a2, (uint64_t)&v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  close(v6);
  BOOL v8 = siri::intelligence::OpenDataFile(&v15, (const char *)1);
  if (v8)
  {
    int v9 = *((char *)a1 + 23);
    if (v9 >= 0) {
      unsigned __int8 v10 = a1;
    }
    else {
      unsigned __int8 v10 = *a1;
    }
    if (v9 >= 0) {
      size_t v11 = *((unsigned __int8 *)a1 + 23);
    }
    else {
      size_t v11 = (size_t)a1[1];
    }
    fwrite(v10, 1uLL, v11, v8);
    fclose(v8);
    *a3 = v15;
  }
  else
  {
    uint64_t v12 = &v15;
    if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v12 = (std::string *)v15.__r_.__value_.__r.__words[0];
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to create a temporary file: %s", v7, v12);
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_5);
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
}

void sub_239AB084C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::AddExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(void *)(a2 + 8))
    {
LABEL_7:
      std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((const void **)a1, (const void **)a2, a3);
      return;
    }
    int v6 = *(unsigned char **)a2;
  }
  else
  {
    int v6 = (unsigned char *)a2;
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_7;
    }
  }
  if (*v6 == 46) {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 23) >= 0) {
    size_t v7 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v7 = *(void *)(a1 + 8);
  }
  p_p = &__p;
  std::string::basic_string[abi:ne180100]((uint64_t)&__p, v7 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if (v7)
  {
    if (*(char *)(a1 + 23) >= 0) {
      int v9 = (const void *)a1;
    }
    else {
      int v9 = *(const void **)a1;
    }
    memmove(p_p, v9, v7);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v7) = 46;
  int v10 = *(char *)(a2 + 23);
  if (v10 >= 0) {
    size_t v11 = (const std::string::value_type *)a2;
  }
  else {
    size_t v11 = *(const std::string::value_type **)a2;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(a2 + 8);
  }
  uint64_t v13 = std::string::append(&__p, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  *(void *)(a3 + 16) = *((void *)&v13->__r_.__value_.__l + 2);
  *(_OWORD *)a3 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239AB09D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::CopyFile(std::string *a1, std::string *a2)
{
  std::string __p = 0;
  int v6 = 0;
  uint64_t v7 = 0;
  BOOL v3 = (siri::intelligence::ReadFileToVector((unint64_t *)&__p, a1) & 1) != 0
    && siri::intelligence::WriteFileFromVector((uint64_t)&__p, a2);
  if (__p)
  {
    int v6 = __p;
    operator delete(__p);
  }
  return v3;
}

void sub_239AB0A58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL siri::intelligence::DeleteFile(const char *a1)
{
  uint64_t v1 = (uint64_t *)a1;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  int v2 = unlink(a1);
  if (v2 == -1)
  {
    if (*((char *)v1 + 23) < 0) {
      uint64_t v1 = (uint64_t *)*v1;
    }
    BOOL v3 = __error();
    uint64_t v4 = strerror(*v3);
    siri::intelligence::Log::Warning((siri::intelligence::Log *)"unlink(2) failed on %s:  %s\n", v5, v1, v4);
  }
  return v2 != -1;
}

void siri::intelligence::ChangeExtension(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (v4)
  {
    if (*(char *)(a1 + 23) < 0) {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else {
      std::string __p = *(std::string *)a1;
    }
    std::string::size_type v6 = std::string::rfind(&__p, 46, 0xFFFFFFFFFFFFFFFFLL);
    if (v6 != -1) {
      std::string::erase(&__p, v6, 0xFFFFFFFFFFFFFFFFLL);
    }
    int v7 = *(char *)(a2 + 23);
    BOOL v8 = *(const std::string::value_type **)a2;
    if (v7 >= 0) {
      int v9 = (const std::string::value_type *)a2;
    }
    else {
      int v9 = *(const std::string::value_type **)a2;
    }
    if (*v9 != 46)
    {
      std::string::append(&__p, ".");
      LOBYTE(v7) = *(unsigned char *)(a2 + 23);
      BOOL v8 = *(const std::string::value_type **)a2;
    }
    if ((v7 & 0x80u) == 0) {
      int v10 = (const std::string::value_type *)a2;
    }
    else {
      int v10 = v8;
    }
    if ((v7 & 0x80u) == 0) {
      std::string::size_type v11 = v7;
    }
    else {
      std::string::size_type v11 = *(void *)(a2 + 8);
    }
    std::string::size_type v12 = std::string::append(&__p, v10, v11);
    if (SHIBYTE(v12->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(a3, v12->__r_.__value_.__l.__data_, v12->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      a3->__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v13;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else if (*(char *)(a1 + 23) < 0)
  {
    long long v14 = *(const std::string::value_type **)a1;
    std::string::size_type v15 = *(void *)(a1 + 8);
    std::string::__init_copy_ctor_external(a3, v14, v15);
  }
  else
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
}

void sub_239AB0C54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<X0>(const void **a1@<X0>, const void **a2@<X1>, uint64_t a3@<X8>)
{
  if (*((char *)a1 + 23) >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (*((char *)a2 + 23) >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  uint64_t result = std::string::basic_string[abi:ne180100](a3, v6 + v5);
  if (*(char *)(result + 23) >= 0) {
    BOOL v8 = (char *)result;
  }
  else {
    BOOL v8 = *(char **)result;
  }
  if (v5)
  {
    if (*((char *)a1 + 23) >= 0) {
      int v9 = a1;
    }
    else {
      int v9 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v8, v9, v5);
  }
  int v10 = &v8[v5];
  if (v6)
  {
    if (*((char *)a2 + 23) >= 0) {
      std::string::size_type v11 = a2;
    }
    else {
      std::string::size_type v11 = *a2;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v6);
  }
  v10[v6] = 0;
  return result;
}

std::string *siri::intelligence::GetExtension@<X0>(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = std::string::rfind(a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 != -1) {
    return std::string::basic_string(a2, a1, v4 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v6);
  }

  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
}

BOOL siri::intelligence::HasExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    if ((v3 & 0x80u) != 0) {
      uint64_t v3 = *(void *)(a1 + 8);
    }
    if (v3)
    {
      siri::intelligence::GetExtension((const std::string *)a1, &__p);
      siri::intelligence::StringToLower((uint64_t)&__p, &__s1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      siri::intelligence::StringTrim(".", (const std::string *)a2, &v20);
      siri::intelligence::StringToLower((uint64_t)&v20, &__p);
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      char v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __s1.__r_.__value_.__l.__size_;
      }
      std::string::size_type v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      int v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v7 = __p.__r_.__value_.__l.__size_;
      }
      if (size != v7)
      {
        BOOL v18 = 0;
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_34;
        }
        goto LABEL_37;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
      {
        BOOL v18 = memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_) == 0;
      }
      else
      {
        if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23))
        {
          BOOL v18 = 1;
          if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_34:
            if ((v5 & 0x80) == 0) {
              return v18;
            }
LABEL_38:
            operator delete(__s1.__r_.__value_.__l.__data_);
            return v18;
          }
LABEL_37:
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
            return v18;
          }
          goto LABEL_38;
        }
        uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
        p_s1 = &__s1;
        do
        {
          int v13 = p_s1->__r_.__value_.__s.__data_[0];
          p_s1 = (std::string *)((char *)p_s1 + 1);
          int v12 = v13;
          int v15 = p_p->__r_.__value_.__s.__data_[0];
          p_p = (std::string *)((char *)p_p + 1);
          int v14 = v15;
          BOOL v17 = v10-- != 0;
          BOOL v18 = v12 == v14;
        }
        while (v12 == v14 && v17);
      }
      if ((v8 & 0x80000000) == 0) {
        goto LABEL_34;
      }
      goto LABEL_37;
    }
  }
  return 0;
}

void sub_239AB0F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::RemoveExtension(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::size_type v4 = std::string::rfind((const std::string *)a1, 46, 0xFFFFFFFFFFFFFFFFLL);
  if (v4 == -1)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      char v5 = *(const std::string::value_type **)a1;
      std::string::size_type v6 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v5, v6);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    std::string::basic_string(a2, (const std::string *)a1, 0, v4, (std::allocator<char> *)&v7);
  }
}

BOOL siri::intelligence::IsUrl(std::string *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v6, "http:");
  if (siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)v6))
  {
    BOOL v2 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "https:");
    BOOL v2 = siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)__p);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  return v2;
}

void sub_239AB10B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::AreFilesEqual(std::string *a1, std::string *a2)
{
  if (!siri::intelligence::FileExists((uint64_t *)a1) || !siri::intelligence::FileExists((uint64_t *)a2)) {
    return 0;
  }
  uint64_t v4 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) == 0) {
    std::string::size_type size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = a2->__r_.__value_.__l.__size_;
  }
  if (size == v6)
  {
    if (v7 >= 0) {
      int v8 = a2;
    }
    else {
      int v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((v4 & 0x80) != 0)
    {
      if (memcmp(a1->__r_.__value_.__l.__data_, v8, a1->__r_.__value_.__l.__size_)) {
        goto LABEL_21;
      }
    }
    else if (*((unsigned char *)&a1->__r_.__value_.__s + 23))
    {
      int v9 = a1;
      BOOL v10 = 1;
      while (v9->__r_.__value_.__s.__data_[0] == v8->__r_.__value_.__s.__data_[0])
      {
        int v9 = (std::string *)((char *)v9 + 1);
        int v8 = (std::string *)((char *)v8 + 1);
        if (!--v4) {
          return v10;
        }
      }
      goto LABEL_21;
    }
    return 1;
  }
LABEL_21:
  BOOL v17 = 0;
  BOOL v18 = 0;
  uint64_t v19 = 0;
  int v14 = 0;
  int v15 = 0;
  uint64_t v16 = 0;
  siri::intelligence::ReadFileToVector((unint64_t *)&v17, a1);
  siri::intelligence::ReadFileToVector((unint64_t *)&v14, a2);
  int v12 = v17;
  int v13 = v14;
  if (v18 - v17 != v15 - v14)
  {
    BOOL v10 = 0;
    if (!v14) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  BOOL v10 = memcmp(v17, v14, v18 - v17) == 0;
  if (v13)
  {
LABEL_25:
    int v15 = v13;
    operator delete(v13);
    int v12 = v17;
  }
LABEL_26:
  if (v12)
  {
    BOOL v18 = v12;
    operator delete(v12);
  }
  return v10;
}

void sub_239AB1248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  if (a12) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::AreFilesEqualIgnoringFirstNLines(unsigned __int8 *a1, uint64_t *a2, int a3)
{
  if (!siri::intelligence::FileExists((uint64_t *)a1) || !siri::intelligence::FileExists(a2)) {
    return 0;
  }
  uint64_t v6 = a1[23];
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = a1[23];
  }
  else {
    uint64_t v7 = *((void *)a1 + 1);
  }
  uint64_t v8 = *((unsigned __int8 *)a2 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = a2[1];
  }
  if (v7 == v8)
  {
    if (v9 >= 0) {
      BOOL v10 = (unsigned __int8 *)a2;
    }
    else {
      BOOL v10 = (unsigned __int8 *)*a2;
    }
    if ((v6 & 0x80) == 0)
    {
      if (a1[23])
      {
        std::string::size_type v11 = a1;
        uint64_t v12 = 1;
        while (*v11 == *v10)
        {
          ++v11;
          ++v10;
          if (!--v6) {
            return v12;
          }
        }
        goto LABEL_21;
      }
      return 1;
    }
    if (!memcmp(*(const void **)a1, v10, *((void *)a1 + 1))) {
      return 1;
    }
  }
LABEL_21:
  siri::intelligence::ReadFileToLines((uint64_t *)&v22);
  siri::intelligence::ReadFileToLines((uint64_t *)&v21);
  if (a3 >= 1)
  {
    v14.__i_ = v22.__begin_;
    v15.__i_ = &v22.__begin_[a3];
    std::vector<std::string>::erase(&v22, v14, v15);
    v16.__i_ = v21.__begin_;
    v17.__i_ = &v21.__begin_[a3];
    std::vector<std::string>::erase(&v21, v16, v17);
  }
  begiuint64_t n = v22.__begin_;
  std::vector<std::string>::pointer end = v22.__end_;
  std::vector<std::string>::pointer v20 = v21.__begin_;
  if ((char *)v22.__end_ - (char *)v22.__begin_ == (char *)v21.__end_ - (char *)v21.__begin_)
  {
    if (v22.__begin_ == v22.__end_)
    {
      uint64_t v12 = 1;
    }
    else
    {
      do
      {
        uint64_t v12 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v23, (unsigned __int8 *)begin, (unsigned __int8 *)v20);
        if (!v12) {
          break;
        }
        ++begin;
        ++v20;
      }
      while (begin != end);
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  uint64_t v23 = &v21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  v21.__begin_ = (std::vector<std::string>::pointer)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v21);
  return v12;
}

void sub_239AB1414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  *(void *)(v13 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v13 - 40));
  a10 = (void **)&a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

std::vector<std::string>::iterator std::vector<std::string>::erase(std::vector<std::string> *this, std::vector<std::string>::const_iterator __first, std::vector<std::string>::const_iterator __last)
{
  if (__first.__i_ != __last.__i_)
  {
    std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v9, (long long *)__last.__i_, (long long *)this->__end_, (uint64_t)__first.__i_);
    uint64_t v6 = v5;
    std::vector<std::string>::pointer end = this->__end_;
    if (end != v5)
    {
      do
      {
        if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(end[-1].__r_.__value_.__l.__data_);
        }
        --end;
      }
      while (end != v6);
    }
    this->__end_ = v6;
  }
  return (std::vector<std::string>::iterator)__first.__i_;
}

uint64_t siri::intelligence::IsAbsPath(std::string *a1)
{
  if (siri::intelligence::IsUrl(a1)) {
    return 1;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  BOOL v2 = siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2;
}

void sub_239AB1540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::GetAbsPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (siri::intelligence::IsAbsPath((std::string *)a1))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      uint64_t v4 = *(const std::string::value_type **)a1;
      std::string::size_type v5 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a2, v4, v5);
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
  }
  else
  {
    getcwd(__s, 0x400uLL);
    std::string::basic_string[abi:ne180100]<0>(__p, __s);
    siri::intelligence::JoinPath((uint64_t)__p, a1, (uint64_t)a2);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_239AB165C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::GetCurrentDir@<X0>(void *a1@<X8>)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  getcwd(__s, 0x400uLL);
  return std::string::basic_string[abi:ne180100]<0>(a1, __s);
}

double siri::intelligence::JoinPath@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  siri::intelligence::JoinPath(a1, a2, a6);
  uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  if (v11)
  {
    siri::intelligence::JoinPath(a6, a3, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    double result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(void *)(a6 + 16) = v15;
  }
  uint64_t v12 = *(unsigned __int8 *)(a4 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a4 + 8);
  }
  if (v12)
  {
    siri::intelligence::JoinPath(a6, a4, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    double result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(void *)(a6 + 16) = v15;
  }
  uint64_t v13 = *(unsigned __int8 *)(a5 + 23);
  if ((v13 & 0x80u) != 0) {
    uint64_t v13 = *(void *)(a5 + 8);
  }
  if (v13)
  {
    siri::intelligence::JoinPath(a6, a5, (uint64_t)&v14);
    if (*(char *)(a6 + 23) < 0) {
      operator delete(*(void **)a6);
    }
    double result = *(double *)&v14;
    *(_OWORD *)a6 = v14;
    *(void *)(a6 + 16) = v15;
  }
  return result;
}

void sub_239AB1804(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::AddQueryStringParam(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  uint64_t v6 = *(unsigned __int8 *)(a2 + 23);
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 8);
  }
  if (!v6)
  {
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::size_type v34 = *(const std::string::value_type **)a1;
      std::string::size_type v35 = *(void *)(a1 + 8);
      std::string::__init_copy_ctor_external(a4, v34, v35);
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a4->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    }
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v50, "?");
  int v9 = siri::intelligence::StringContains((char **)a1, (char *)&v50);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a3 + 8);
  }
  if (v9)
  {
    if (v10)
    {
      if (*(char *)(a1 + 23) >= 0) {
        size_t v11 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v11 = *(void *)(a1 + 8);
      }
      uint64_t v12 = &v48;
      std::string::basic_string[abi:ne180100]((uint64_t)&v48, v11 + 1);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v12 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if (v11)
      {
        if (*(char *)(a1 + 23) >= 0) {
          uint64_t v13 = (char *)a1;
        }
        else {
          uint64_t v13 = *(char **)a1;
        }
        memmove(v12, v13, v11);
      }
      *(_WORD *)((char *)&v12->__r_.__value_.__l.__data_ + v11) = 38;
      siri::intelligence::StringUriEscape((uint64_t *)a2, &v47);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v14 = &v47;
      }
      else {
        long long v14 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v47.__r_.__value_.__l.__size_;
      }
      std::vector<std::string>::const_iterator v16 = std::string::append(&v48, (const std::string::value_type *)v14, size);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      BOOL v18 = std::string::append(&v49, "=");
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::StringUriEscape((uint64_t *)a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
      goto LABEL_57;
    }
    if (*(char *)(a1 + 23) >= 0) {
      size_t v36 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v36 = *(void *)(a1 + 8);
    }
    uint64_t v37 = &v50;
    std::string::basic_string[abi:ne180100]((uint64_t)&v50, v36 + 1);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      uint64_t v37 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v36)
    {
      if (*(char *)(a1 + 23) >= 0) {
        std::string::size_type v38 = (char *)a1;
      }
      else {
        std::string::size_type v38 = *(char **)a1;
      }
      memmove(v37, v38, v36);
    }
    *(_WORD *)((char *)&v37->__r_.__value_.__l.__data_ + v36) = 38;
    siri::intelligence::StringUriEscape((uint64_t *)a2, &v49);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v39 = &v49;
    }
    else {
      long long v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v49.__r_.__value_.__l.__size_;
    }
  }
  else
  {
    if (v10)
    {
      if (*(char *)(a1 + 23) >= 0) {
        size_t v22 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        size_t v22 = *(void *)(a1 + 8);
      }
      uint64_t v23 = &v48;
      std::string::basic_string[abi:ne180100]((uint64_t)&v48, v22 + 1);
      if ((v48.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v23 = (std::string *)v48.__r_.__value_.__r.__words[0];
      }
      if (v22)
      {
        if (*(char *)(a1 + 23) >= 0) {
          char v24 = (char *)a1;
        }
        else {
          char v24 = *(char **)a1;
        }
        memmove(v23, v24, v22);
      }
      *(_WORD *)((char *)&v23->__r_.__value_.__l.__data_ + v22) = 63;
      siri::intelligence::StringUriEscape((uint64_t *)a2, &v47);
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v25 = &v47;
      }
      else {
        uint64_t v25 = (std::string *)v47.__r_.__value_.__r.__words[0];
      }
      if ((v47.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v26 = HIBYTE(v47.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v26 = v47.__r_.__value_.__l.__size_;
      }
      char v27 = std::string::append(&v48, (const std::string::value_type *)v25, v26);
      long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
      v49.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v28;
      v27->__r_.__value_.__l.__size_ = 0;
      v27->__r_.__value_.__r.__words[2] = 0;
      v27->__r_.__value_.__r.__words[0] = 0;
      uint64_t v29 = std::string::append(&v49, "=");
      long long v30 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
      v50.__r_.__value_.__r.__words[2] = v29->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v30;
      v29->__r_.__value_.__l.__size_ = 0;
      v29->__r_.__value_.__r.__words[2] = 0;
      v29->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::StringUriEscape((uint64_t *)a3, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v21 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v21 = __p.__r_.__value_.__l.__size_;
      }
LABEL_57:
      uint64_t v31 = std::string::append(&v50, (const std::string::value_type *)p_p, v21);
      long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v50.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v49.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v47.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      {
        int v33 = (void *)v48.__r_.__value_.__r.__words[0];
LABEL_106:
        operator delete(v33);
        return;
      }
      return;
    }
    if (*(char *)(a1 + 23) >= 0) {
      size_t v41 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v41 = *(void *)(a1 + 8);
    }
    BOOL v42 = &v50;
    std::string::basic_string[abi:ne180100]((uint64_t)&v50, v41 + 1);
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      BOOL v42 = (std::string *)v50.__r_.__value_.__r.__words[0];
    }
    if (v41)
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v43 = (char *)a1;
      }
      else {
        uint64_t v43 = *(char **)a1;
      }
      memmove(v42, v43, v41);
    }
    *(_WORD *)((char *)&v42->__r_.__value_.__l.__data_ + v41) = 63;
    siri::intelligence::StringUriEscape((uint64_t *)a2, &v49);
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v39 = &v49;
    }
    else {
      long long v39 = (std::string *)v49.__r_.__value_.__r.__words[0];
    }
    if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v40 = HIBYTE(v49.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v40 = v49.__r_.__value_.__l.__size_;
    }
  }
  uint64_t v44 = std::string::append(&v50, (const std::string::value_type *)v39, v40);
  long long v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
  a4->__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
  *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v45;
  v44->__r_.__value_.__l.__size_ = 0;
  v44->__r_.__value_.__r.__words[2] = 0;
  v44->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
  {
    int v33 = (void *)v50.__r_.__value_.__r.__words[0];
    goto LABEL_106;
  }
}

void sub_239AB1CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  _Unwind_Resume(exception_object);
}

double siri::intelligence::DirName@<D0>(std::string *__str@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (size)
    {
      char v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      goto LABEL_6;
    }
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(a3, (char *)&str_5);
    return result;
  }
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if (!*((unsigned char *)&__str->__r_.__value_.__s + 23)) {
    goto LABEL_24;
  }
  char v7 = __str;
LABEL_6:
  uint64_t v8 = (unsigned __int8 *)v7 + size;
  int v9 = v7;
  uint64_t v10 = (std::string *)v8;
  do
  {
    size_t v11 = v9;
    uint64_t v12 = (unsigned __int8 *)v9;
    while (1)
    {
      int v13 = *v12++;
      if (v13 == 47) {
        break;
      }
      size_t v11 = (std::string *)v12;
      if (v12 == v8)
      {
        size_t v11 = v10;
        goto LABEL_12;
      }
    }
    int v9 = (std::string *)((char *)&v11->__r_.__value_.__l.__data_ + 1);
    uint64_t v10 = v11;
  }
  while (v12 != v8);
LABEL_12:
  if (v11 == (std::string *)v8) {
    goto LABEL_24;
  }
  int64_t v14 = (char *)v11 - (char *)v7;
  if (v14 == -1) {
    goto LABEL_24;
  }
  std::string::basic_string(a3, __str, 0, v14 + 1, (std::allocator<char> *)&v21);
  if (a2)
  {
    std::string::size_type v16 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
    if ((v16 & 0x80u) == 0) {
      long long v17 = a3;
    }
    else {
      long long v17 = (std::string *)a3->__r_.__value_.__r.__words[0];
    }
    if ((v16 & 0x80u) != 0) {
      std::string::size_type v16 = a3->__r_.__value_.__l.__size_;
    }
    uint64_t v18 = (uint64_t)&v17[-1].__r_.__value_.__r.__words[2] + 7;
    while (v16)
    {
      int v19 = *(unsigned __int8 *)(v18 + v16--);
      if (v19 != 47)
      {
        std::string::size_type v20 = v16 + 1;
        goto LABEL_28;
      }
    }
    std::string::size_type v20 = 0;
LABEL_28:
    std::string::basic_string(&v21, a3, 0, v20, (std::allocator<char> *)&v22);
    if (SHIBYTE(a3->__r_.__value_.__r.__words[2]) < 0) {
      operator delete(a3->__r_.__value_.__l.__data_);
    }
    double result = *(double *)&v21.__r_.__value_.__l.__data_;
    *a3 = v21;
  }
  return result;
}

void sub_239AB1F10(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::BaseName(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    if (!v5)
    {
      uint64_t v8 = *(const std::string::value_type **)a1;
      int v9 = a2;
      std::string::size_type v10 = 0;
LABEL_30:
      std::string::__init_copy_ctor_external(v9, v8, v10);
      return;
    }
  }
  else
  {
    if (!*(unsigned char *)(a1 + 23))
    {
LABEL_25:
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      return;
    }
    uint64_t v5 = *(unsigned __int8 *)(a1 + 23);
  }
  uint64_t v6 = v5 - 1;
  if ((v4 & 0x80) != 0)
  {
    uint64_t v8 = *(const std::string::value_type **)a1;
    if (*(unsigned char *)(*(void *)a1 + v6) != 47)
    {
      uint64_t v11 = *(void *)(a1 + 8);
      if (!v11)
      {
        std::string::size_type v10 = 0;
LABEL_29:
        int v9 = a2;
        goto LABEL_30;
      }
      char v7 = (unsigned __int8 *)&v8[v11];
LABEL_15:
      uint64_t v12 = v8;
      int v13 = v7;
      do
      {
        int64_t v14 = (unsigned __int8 *)v12;
        uint64_t v15 = (unsigned __int8 *)v12;
        while (1)
        {
          int v16 = *v15++;
          if (v16 == 47) {
            break;
          }
          int64_t v14 = v15;
          if (v15 == v7)
          {
            int64_t v14 = v13;
            goto LABEL_21;
          }
        }
        uint64_t v12 = (const std::string::value_type *)(v14 + 1);
        int v13 = v14;
      }
      while (v15 != v7);
LABEL_21:
      if (v14 != v7 && v14 - (unsigned __int8 *)v8 != -1)
      {
        std::string::basic_string(a2, (const std::string *)a1, v14 - (unsigned __int8 *)v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
        return;
      }
      if ((v4 & 0x80) == 0) {
        goto LABEL_25;
      }
      uint64_t v8 = *(const std::string::value_type **)a1;
      std::string::size_type v10 = *(void *)(a1 + 8);
      goto LABEL_29;
    }
    uint64_t v4 = *(void *)(a1 + 8);
  }
  else if (*(unsigned char *)(a1 + v6) != 47)
  {
    char v7 = (unsigned __int8 *)(a1 + v4);
    uint64_t v8 = (const std::string::value_type *)a1;
    goto LABEL_15;
  }
  std::string::basic_string(&__p, (const std::string *)a1, 0, v4 - 1, (std::allocator<char> *)&v18);
  siri::intelligence::BaseName(&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239AB20B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::PopPath(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  char v4 = *(unsigned char *)(a1 + 23);
  std::string::size_type v5 = *(void *)(a1 + 8);
  if (v4 >= 0) {
    uint64_t v6 = (void *)*(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void **)(a1 + 8);
  }
  if (!v6) {
    goto LABEL_22;
  }
  unint64_t v7 = v19;
  if ((v19 & 0x80u) != 0) {
    unint64_t v7 = (unint64_t)__p[1];
  }
  if (v6 == (void *)v7)
  {
    if ((v19 & 0x80u) == 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    if ((*(unsigned char *)(a1 + 23) & 0x80) != 0)
    {
      uint64_t v11 = *(const std::string::value_type **)a1;
      if (memcmp(*(const void **)a1, v8, *(void *)(a1 + 8))
        && siri::intelligence::SubStringCount(a1, (uint64_t)__p))
      {
        goto LABEL_24;
      }
    }
    else if (*(unsigned char *)(a1 + 23))
    {
      int v9 = (unsigned __int8 *)a1;
      uint64_t v10 = *(unsigned __int8 *)(a1 + 23);
      while (*v9 == *(unsigned __int8 *)v8)
      {
        ++v9;
        uint64_t v8 = (void **)((char *)v8 + 1);
        if (!--v10) {
          goto LABEL_22;
        }
      }
      goto LABEL_17;
    }
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
    goto LABEL_48;
  }
LABEL_17:
  if (!siri::intelligence::SubStringCount(a1, (uint64_t)__p)) {
    goto LABEL_22;
  }
  if ((v4 & 0x80) == 0)
  {
    std::string __str = *(std::string *)a1;
    goto LABEL_25;
  }
  uint64_t v11 = *(const std::string::value_type **)a1;
LABEL_24:
  std::string::__init_copy_ctor_external(&__str, v11, v5);
LABEL_25:
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str.__r_.__value_.__l.__size_;
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  else
  {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    p_str = &__str;
  }
  if (p_str->__r_.__value_.__s.__data_[size - 1] == 47)
  {
    std::string::basic_string(&v16, &__str, 0, size - 1, (std::allocator<char> *)&v20);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v16;
  }
  if (!siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)__p)
    || siri::intelligence::SubStringCount((uint64_t)&__str, (uint64_t)__p) != 1)
  {
    siri::intelligence::DirName(&__str, 0, &v16);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v16;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v14 = __str.__r_.__value_.__l.__size_;
      if (__str.__r_.__value_.__l.__size_)
      {
        uint64_t v15 = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_43:
        if (v15->__r_.__value_.__s.__data_[v14 - 1] == 47)
        {
          std::string::basic_string(&v16, &__str, 0, v14 - 1, (std::allocator<char> *)&v20);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v16;
        }
      }
    }
    else
    {
      std::string::size_type v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&v16.__r_.__value_.__s + 23))
      {
        uint64_t v15 = &__str;
        goto LABEL_43;
      }
    }
    *a2 = __str;
    goto LABEL_48;
  }
  std::string::basic_string[abi:ne180100]<0>(a2, "/");
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_48:
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
}

void sub_239AB2368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::MakeDir(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1 || siri::intelligence::DirExists((uint64_t *)a1)) {
    return 1;
  }
  memset(&v16, 0, sizeof(v16));
  siri::intelligence::StringSplit((unsigned __int8 *)a1, "/", (uint64_t *)&v16, &v17);
  __p[0] = &v16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  memset(&v16, 0, sizeof(v16));
  std::string::basic_string[abi:ne180100]<0>(__p, "/");
  BOOL v4 = siri::intelligence::StringStartsWith((std::string *)a1, (unsigned __int8 *)__p);
  BOOL v5 = v4;
  if ((v15 & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v5) {
LABEL_10:
  }
    MEMORY[0x23ECAA8E0](&v16, "/");
LABEL_11:
  begiuint64_t n = v17.__begin_;
  std::vector<std::string>::pointer end = v17.__end_;
  if (v17.__begin_ == v17.__end_)
  {
LABEL_28:
    uint64_t v3 = 1;
  }
  else
  {
    while (1)
    {
      std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v16.__r_.__value_.__l.__size_;
      }
      if (size >= 2) {
        std::string::append(&v16, "/");
      }
      int v9 = SHIBYTE(begin->__r_.__value_.__r.__words[2]);
      uint64_t v10 = v9 >= 0
          ? (const std::string::value_type *)begin
          : (const std::string::value_type *)begin->__r_.__value_.__r.__words[0];
      std::string::size_type v11 = v9 >= 0 ? HIBYTE(begin->__r_.__value_.__r.__words[2]) : begin->__r_.__value_.__l.__size_;
      std::string::append(&v16, v10, v11);
      if (!siri::intelligence::DirExists((uint64_t *)&v16))
      {
        uint64_t v12 = (v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? &v16
            : (std::string *)v16.__r_.__value_.__r.__words[0];
        if (mkdir((const char *)v12, 0x1FFu) == -1) {
          break;
        }
      }
      if (++begin == end) {
        goto LABEL_28;
      }
    }
    uint64_t v3 = 0;
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  return v3;
}

void sub_239AB2550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void *siri::intelligence::ExecuteShellCommand@<X0>(const char *a1@<X0>, std::string *a2@<X8>)
{
  BOOL v2 = (uint64_t *)a1;
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  BOOL v4 = popen(a1, "r");
  if (v4)
  {
    uint64_t v6 = v4;
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    while (fgets(__s, 256, v6))
      std::string::append(a2, __s);
    return (void *)pclose(v6);
  }
  else
  {
    if (*((char *)v2 + 23) >= 0) {
      uint64_t v8 = v2;
    }
    else {
      uint64_t v8 = (uint64_t *)*v2;
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Failed to execute shell command: %s", v5, v8);
    return std::string::basic_string[abi:ne180100]<0>(a2, (char *)&str_5);
  }
}

void sub_239AB26CC(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  pclose(v2);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::DeleteDir(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
  uint64_t v2 = siri::intelligence::InnerDeleteDir(a1, (uint64_t)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v3 = (const char *)a1;
  }
  else {
    uint64_t v3 = *(const char **)a1;
  }
  rmdir(v3);
  return v2;
}

void sub_239AB2760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::InnerDeleteDir(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 1;
  siri::intelligence::ListDir(a1, 1, 0, (uint64_t)&v14);
  uint64_t v5 = v14;
  if (v15 != v14)
  {
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    do
    {
      siri::intelligence::JoinPath(a1, v5 + v6, (uint64_t)v12);
      siri::intelligence::JoinPath(a2, v14 + v6, (uint64_t)__p);
      if (siri::intelligence::DirExists((uint64_t *)v12))
      {
        uint64_t v4 = siri::intelligence::InnerDeleteDir(v12, __p) & v4;
        if (v13 >= 0) {
          uint64_t v8 = v12;
        }
        else {
          uint64_t v8 = (void **)v12[0];
        }
        rmdir((const char *)v8);
      }
      else
      {
        uint64_t v4 = siri::intelligence::DeleteFile((const char *)v12) & v4;
      }
      if (v11 < 0) {
        operator delete(__p[0]);
      }
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      ++v7;
      uint64_t v5 = v14;
      v6 += 24;
    }
    while (v7 < 0xAAAAAAAAAAAAAAABLL * ((v15 - v14) >> 3));
  }
  v12[0] = &v14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v12);
  return v4;
}

void sub_239AB28AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  std::string __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::ListDir(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  v68[0] = 0;
  v68[1] = 0;
  long long v67 = v68;
  std::string::basic_string[abi:ne180100]<0>(&__p, ".");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v67, (const void **)&__p.__first_, (uint64_t)&__p);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "..");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)&v67, (const void **)&__p.__first_, (uint64_t)&__p);
  if (SHIBYTE(__p.__end_) < 0) {
    operator delete(__p.__first_);
  }
  if (*(char *)(a1 + 23) >= 0) {
    unint64_t v7 = (const char *)a1;
  }
  else {
    unint64_t v7 = *(const char **)a1;
  }
  uint64_t v8 = opendir(v7);
  uint64_t v10 = v8;
  if (v8)
  {
    char v11 = readdir(v8);
    uint64_t v59 = a1;
    while (1)
    {
      if (!v11)
      {
        closedir(v10);
        goto LABEL_85;
      }
      d_name = v11->d_name;
      std::string::basic_string[abi:ne180100]<0>(&__p, v11->d_name);
      char v13 = (char **)std::__tree<std::string>::find<std::string>((uint64_t)&v67, (const void **)&__p.__first_);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (v68 != v13) {
        goto LABEL_79;
      }
      if (a3) {
        break;
      }
      std::string::basic_string[abi:ne180100]<0>(v65, d_name);
      unint64_t v18 = *(void *)(a4 + 8);
      unint64_t v17 = *(void *)(a4 + 16);
      if (v18 >= v17)
      {
        unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - *(void *)a4) >> 3);
        unint64_t v26 = v25 + 1;
        if (v25 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - *(void *)a4) >> 3);
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x555555555555555) {
          unint64_t v28 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v28 = v26;
        }
        __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
        if (v28) {
          uint64_t v29 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v28);
        }
        else {
          uint64_t v29 = 0;
        }
        std::string::size_type v35 = v29 + v25;
        __p.__first_ = v29;
        __p.__begin_ = v35;
        __p.__end_cap_.__value_ = &v29[v28];
        long long v36 = *(_OWORD *)v65;
        v35->__r_.__value_.__r.__words[2] = v66;
        *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
        v65[1] = 0;
        std::string::size_type v66 = 0;
        v65[0] = 0;
        __p.__end_ = v35 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
        uint64_t v37 = *(void *)(a4 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__p);
        int v38 = SHIBYTE(v66);
        *(void *)(a4 + 8) = v37;
        if ((v38 & 0x80000000) == 0) {
          goto LABEL_44;
        }
        std::string::size_type v34 = v65[0];
LABEL_43:
        operator delete(v34);
        goto LABEL_44;
      }
      long long v19 = *(_OWORD *)v65;
      *(void *)(v18 + 16) = v66;
      *(_OWORD *)unint64_t v18 = v19;
      *(void *)(a4 + 8) = v18 + 24;
LABEL_44:
      if (a2) {
        goto LABEL_79;
      }
      std::string::basic_string[abi:ne180100]<0>(v65, d_name);
      siri::intelligence::JoinPath(a1, (uint64_t)v65, (uint64_t)&__p);
      BOOL v39 = siri::intelligence::DirExists((uint64_t *)&__p);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (SHIBYTE(v66) < 0)
      {
        operator delete(v65[0]);
        if (!v39) {
          goto LABEL_79;
        }
      }
      else if (!v39)
      {
        goto LABEL_79;
      }
      std::string::basic_string[abi:ne180100]<0>(v63, d_name);
      siri::intelligence::JoinPath(a1, (uint64_t)v63, (uint64_t)&__p);
      siri::intelligence::ListDir(v65, &__p, 0, a3);
      if (SHIBYTE(__p.__end_) < 0) {
        operator delete(__p.__first_);
      }
      if (SHIBYTE(v64) < 0) {
        operator delete(v63[0]);
      }
      std::string::size_type v40 = (char *)v65[0];
      if (v65[1] != v65[0])
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0;
        do
        {
          if (a3)
          {
            uint64_t v43 = (long long *)&v40[v41];
            unint64_t v44 = *(void *)(a4 + 8);
            if (v44 >= *(void *)(a4 + 16))
            {
              uint64_t v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)a4, v43);
            }
            else
            {
              std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(a4, v43);
              uint64_t v45 = v44 + 24;
            }
            *(void *)(a4 + 8) = v45;
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v61, d_name);
            siri::intelligence::JoinPath((uint64_t)v61, (uint64_t)v65[0] + v41, (uint64_t)v63);
            unint64_t v46 = *(void *)(a4 + 8);
            unint64_t v47 = *(void *)(a4 + 16);
            if (v46 >= v47)
            {
              unint64_t v49 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v46 - *(void *)a4) >> 3);
              unint64_t v50 = v49 + 1;
              if (v49 + 1 > 0xAAAAAAAAAAAAAAALL) {
                std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - *(void *)a4) >> 3);
              if (2 * v51 > v50) {
                unint64_t v50 = 2 * v51;
              }
              if (v51 >= 0x555555555555555) {
                unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v52 = v50;
              }
              __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
              if (v52) {
                int v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v52);
              }
              else {
                int v53 = 0;
              }
              uint64_t v54 = v53 + v49;
              __p.__first_ = v53;
              __p.__begin_ = v54;
              __p.__end_cap_.__value_ = &v53[v52];
              long long v55 = *(_OWORD *)v63;
              v54->__r_.__value_.__r.__words[2] = v64;
              *(_OWORD *)&v54->__r_.__value_.__l.__data_ = v55;
              v63[1] = 0;
              std::string::size_type v64 = 0;
              v63[0] = 0;
              __p.__end_ = v54 + 1;
              std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
              uint64_t v56 = *(void *)(a4 + 8);
              std::__split_buffer<std::string>::~__split_buffer(&__p);
              int v57 = SHIBYTE(v64);
              *(void *)(a4 + 8) = v56;
              if (v57 < 0) {
                operator delete(v63[0]);
              }
            }
            else
            {
              long long v48 = *(_OWORD *)v63;
              *(void *)(v46 + 16) = v64;
              *(_OWORD *)unint64_t v46 = v48;
              v63[1] = 0;
              std::string::size_type v64 = 0;
              v63[0] = 0;
              *(void *)(a4 + 8) = v46 + 24;
            }
            if (v62 < 0) {
              operator delete(v61[0]);
            }
          }
          ++v42;
          std::string::size_type v40 = (char *)v65[0];
          v41 += 24;
        }
        while (v42 < 0xAAAAAAAAAAAAAAABLL * (((char *)v65[1] - (char *)v65[0]) >> 3));
      }
      __p.__first_ = (std::__split_buffer<std::string>::pointer)v65;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
      a1 = v59;
LABEL_79:
      char v11 = readdir(v10);
    }
    std::string::basic_string[abi:ne180100]<0>(v63, d_name);
    siri::intelligence::JoinPath(a1, (uint64_t)v63, (uint64_t)v65);
    unint64_t v14 = *(void *)(a4 + 8);
    unint64_t v15 = *(void *)(a4 + 16);
    if (v14 >= v15)
    {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v14 - *(void *)a4) >> 3);
      unint64_t v21 = v20 + 1;
      if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v15 - *(void *)a4) >> 3);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v21;
      }
      __p.__end_cap_.__value_ = (std::allocator<std::string> *)(a4 + 16);
      if (v23) {
        char v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a4 + 16, v23);
      }
      else {
        char v24 = 0;
      }
      long long v30 = v24 + v20;
      __p.__first_ = v24;
      __p.__begin_ = v30;
      __p.__end_cap_.__value_ = &v24[v23];
      long long v31 = *(_OWORD *)v65;
      v30->__r_.__value_.__r.__words[2] = v66;
      *(_OWORD *)&v30->__r_.__value_.__l.__data_ = v31;
      v65[1] = 0;
      std::string::size_type v66 = 0;
      v65[0] = 0;
      __p.__end_ = v30 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a4, &__p);
      uint64_t v32 = *(void *)(a4 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__p);
      int v33 = SHIBYTE(v66);
      *(void *)(a4 + 8) = v32;
      if (v33 < 0) {
        operator delete(v65[0]);
      }
    }
    else
    {
      long long v16 = *(_OWORD *)v65;
      *(void *)(v14 + 16) = v66;
      *(_OWORD *)unint64_t v14 = v16;
      v65[1] = 0;
      std::string::size_type v66 = 0;
      v65[0] = 0;
      *(void *)(a4 + 8) = v14 + 24;
    }
    if ((SHIBYTE(v64) & 0x80000000) == 0) {
      goto LABEL_44;
    }
    std::string::size_type v34 = v63[0];
    goto LABEL_43;
  }
  if (*(char *)(a1 + 23) >= 0) {
    std::string v58 = (const char *)a1;
  }
  else {
    std::string v58 = *(const char **)a1;
  }
  siri::intelligence::Log::Warning((siri::intelligence::Log *)"Failed to opendir for %s", v9, v58);
LABEL_85:
  std::__tree<std::string>::destroy((uint64_t)&v67, v68[0]);
}

void sub_239AB2F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, int a7, __int16 a8, char a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,uint64_t a25,std::__split_buffer<std::string> *__pa,uint64_t a27,uint64_t a28,void **a29,char *a30)
{
}

uint64_t siri::intelligence::CopyTree(uint64_t *a1, uint64_t a2)
{
  if (siri::intelligence::DirExists(a1))
  {
    siri::intelligence::BaseName((uint64_t)a1, &v19);
    siri::intelligence::ListDir((uint64_t)a1, 0, 0, (uint64_t)&v17);
    uint64_t v4 = v17;
    uint64_t v5 = v18;
    char v6 = 1;
    if (v17 != v18)
    {
      while (1)
      {
        if (*((char *)v4 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)v4, *((void *)v4 + 1));
        }
        else
        {
          long long v7 = *v4;
          v16.__r_.__value_.__r.__words[2] = *((void *)v4 + 2);
          *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v7;
        }
        siri::intelligence::JoinPath((uint64_t)a1, (uint64_t)&v16, (uint64_t)&v15);
        std::string::basic_string[abi:ne180100]<0>(v12, (char *)&str_5);
        std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_5);
        siri::intelligence::JoinPath(a2, (uint64_t)&v19, (uint64_t)&v16, (uint64_t)v12, (uint64_t)__p, (uint64_t)&v14);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        if (v13 < 0) {
          operator delete(v12[0]);
        }
        if (siri::intelligence::DirExists((uint64_t *)&v15)) {
          break;
        }
        if (siri::intelligence::FileExists((uint64_t *)&v15))
        {
          char Dir = siri::intelligence::CopyFile(&v15, &v14);
          goto LABEL_14;
        }
LABEL_15:
        if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v14.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v15.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        uint64_t v4 = (long long *)((char *)v4 + 24);
        if (v4 == v5) {
          goto LABEL_22;
        }
      }
      char Dir = siri::intelligence::MakeDir((uint64_t)&v14);
LABEL_14:
      v6 &= Dir;
      goto LABEL_15;
    }
LABEL_22:
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    char v6 = 0;
  }
  return v6 & 1;
}

void sub_239AB3218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (*(char *)(v38 - 49) < 0) {
    operator delete(*(void **)(v38 - 72));
  }
  _Unwind_Resume(exception_object);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    long long v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    char v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      std::string v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void *std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, uint64_t a2, unsigned __int8 a3)
{
  MEMORY[0x23ECAAA00](&v11, a1, 1);
  if (!v11) {
    return a1;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    **(unsigned char **)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 23) = 0;
  }
  uint64_t v6 = 0;
  while (1)
  {
    long long v7 = *(void **)((char *)a1 + *(void *)(*a1 - 24) + 40);
    unint64_t v8 = (unsigned char *)v7[3];
    if (v8 != (unsigned char *)v7[4])
    {
      void v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(void *))(*v7 + 80))(v7);
    if (v7 == -1) {
      break;
    }
LABEL_9:
    if (v7 == a3)
    {
      int v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(void *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      int v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6) {
    int v9 = 2;
  }
  else {
    int v9 = 6;
  }
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(void *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_239AB355C(void *a1)
{
  __cxa_begin_catch(a1);
  uint64_t v2 = *v1;
  *(_DWORD *)((char *)v1 + *(void *)(*v1 - 24) + 32) |= 1u;
  if ((*((unsigned char *)v1 + *(void *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x239AB351CLL);
  }
  __cxa_rethrow();
}

void sub_239AB35D8(_Unwind_Exception *a1)
{
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

uint64_t std::__equal_to::operator()[abi:ne180100]<std::string,std::string>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  uint64_t v6 = a3[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a3 + 1);
  }
  if (v5 != v6) {
    return 0;
  }
  if (v7 < 0) {
    uint64_t v3 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0) {
    return memcmp(*(const void **)a2, v3, *((void *)a2 + 1)) == 0;
  }
  if (!a2[23]) {
    return 1;
  }
  uint64_t v8 = v4 - 1;
  do
  {
    int v10 = *a2++;
    int v9 = v10;
    int v12 = *v3++;
    int v11 = v12;
    BOOL v14 = v8-- != 0;
    uint64_t result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void YAML::Load(const std::string *a1)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v1, a1, 24);
  YAML::Load();
}

void sub_239AB3838(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](uint64_t *a1, const std::string *a2, int a3)
{
  uint64_t v6 = MEMORY[0x263F8C328] + 104;
  a1[16] = MEMORY[0x263F8C328] + 104;
  int v7 = a1 + 2;
  uint64_t v8 = MEMORY[0x263F8C328] + 64;
  a1[2] = MEMORY[0x263F8C328] + 64;
  uint64_t v9 = (uint64_t)(a1 + 3);
  int v10 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v11 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  uint64_t v12 = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *a1 = v12;
  *(uint64_t *)((char *)a1 + *(void *)(v12 - 24)) = v11;
  a1[1] = 0;
  char v13 = (std::ios_base *)((char *)a1 + *(void *)(*a1 - 24));
  std::ios_base::init(v13, a1 + 3);
  uint64_t v14 = MEMORY[0x263F8C328] + 24;
  v13[1].__vftable = 0;
  v13[1].__fmtflags_ = -1;
  uint64_t v15 = v10[5];
  uint64_t v16 = v10[4];
  a1[2] = v16;
  *(void *)((char *)v7 + *(void *)(v16 - 24)) = v15;
  uint64_t v17 = v10[1];
  *a1 = v17;
  *(uint64_t *)((char *)a1 + *(void *)(v17 - 24)) = v10[6];
  *a1 = v14;
  a1[16] = v6;
  a1[2] = v8;
  std::stringbuf::basic_stringbuf[abi:ne180100](v9, a2, a3);
  return a1;
}

void sub_239AB3AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void YAML::Load()
{
  YAML::Parser::Parser(&v0);
}

void sub_239AB3BC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  YAML::NodeBuilder::~NodeBuilder((YAML::NodeBuilder *)&a9);
  YAML::Parser::~Parser((YAML::Parser *)(v9 - 32));
  _Unwind_Resume(a1);
}

void YAML::Load(YAML *this, const char *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v3, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  YAML::Load();
}

void sub_239AB3D60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void YAML::LoadFile()
{
  v1[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v1);
  if ((*((unsigned char *)&v1[4] + *(void *)(v1[0] - 24)) & 5) == 0) {
    YAML::Load();
  }
  exceptiouint64_t n = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
  YAML::BadFile::BadFile(exception);
}

void sub_239AB3F1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

void YAML::LoadAll(const std::string *a1@<X0>, void *a2@<X8>)
{
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v3, a1, 24);
  YAML::LoadAll(a2);
}

void sub_239AB40A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void YAML::LoadAll(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  YAML::Parser::Parser(&v1);
}

void sub_239AB43E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::LoadAll(YAML *this@<X0>, void *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)this);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](&v5, &__p, 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  YAML::LoadAll(a2);
}

void sub_239AB45E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
}

void YAML::LoadAllFromFile(void *a1@<X8>)
{
  v3[72] = *MEMORY[0x263EF8340];
  std::ifstream::basic_ifstream(v3);
  if ((*((unsigned char *)&v3[4] + *(void *)(v3[0] - 24)) & 5) == 0) {
    YAML::LoadAll(a1);
  }
  exceptiouint64_t n = (YAML::BadFile *)__cxa_allocate_exception(0x38uLL);
  YAML::BadFile::BadFile(exception);
}

void sub_239AB479C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  __cxa_free_exception(v10);
  std::ifstream::~ifstream(&a10);
  _Unwind_Resume(a1);
}

YAML::BadFile *YAML::BadFile::BadFile(YAML::BadFile *this)
{
  uint64_t v5 = -1;
  int v6 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "bad file");
  YAML::Exception::Exception((uint64_t)this, &v5, (uint64_t)__p);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  *(void *)this = &unk_26ED2A7C8;
  return this;
}

void sub_239AB4850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::stringbuf::basic_stringbuf[abi:ne180100](uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(void *)uint64_t v6 = MEMORY[0x263F8C318] + 16;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
  return a1;
}

void sub_239AB48E8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    char v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    char v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        char v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

void std::vector<YAML::Node>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::allocator<YAML::Node>::destroy[abi:ne180100](v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<YAML::Node>::destroy[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 31) < 0)
  {
    char v3 = *(void **)(a1 + 8);
    operator delete(v3);
  }
}

void std::allocator<YAML::Node>::construct[abi:ne180100]<YAML::Node,YAML::Node>(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
}

uint64_t std::__split_buffer<YAML::Node>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    std::allocator<YAML::Node>::destroy[abi:ne180100](i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

BOOL siri::intelligence::StringStartsWith(std::string *__str, unsigned __int8 *a2)
{
  if ((a2[23] & 0x80u) == 0) {
    std::string::size_type v3 = a2[23];
  }
  else {
    std::string::size_type v3 = *((void *)a2 + 1);
  }
  std::string::basic_string(&__s1, __str, 0, v3, (std::allocator<char> *)&v20);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __s1.__r_.__value_.__l.__size_;
  }
  uint64_t v5 = a2[23];
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *((void *)a2 + 1);
  }
  if (size == v5)
  {
    if (v6 >= 0) {
      std::string::size_type v7 = a2;
    }
    else {
      std::string::size_type v7 = *(unsigned __int8 **)a2;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      uint64_t v17 = (void *)__s1.__r_.__value_.__r.__words[0];
      BOOL v16 = memcmp(__s1.__r_.__value_.__l.__data_, v7, __s1.__r_.__value_.__l.__size_) == 0;
      goto LABEL_26;
    }
    if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
      return 1;
    }
    uint64_t v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
    p_s1 = &__s1;
    do
    {
      int v11 = p_s1->__r_.__value_.__s.__data_[0];
      p_s1 = (std::string *)((char *)p_s1 + 1);
      int v10 = v11;
      int v13 = *v7++;
      int v12 = v13;
      BOOL v15 = v8-- != 0;
      BOOL v16 = v10 == v12;
    }
    while (v10 == v12 && v15);
  }
  else
  {
    BOOL v16 = 0;
  }
  if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    uint64_t v17 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_26:
    operator delete(v17);
  }
  return v16;
}

BOOL siri::intelligence::StringEndsWith(std::string *__str, unsigned __int8 *a2)
{
  std::string::size_type v3 = a2[23];
  if ((v3 & 0x80u) != 0) {
    std::string::size_type v3 = *((void *)a2 + 1);
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  if (v3 <= size)
  {
    std::string::basic_string(&__s1, __str, size - v3, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v6 = __s1.__r_.__value_.__l.__size_;
    }
    uint64_t v7 = a2[23];
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *((void *)a2 + 1);
    }
    if (v6 == v7)
    {
      if (v8 >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(unsigned __int8 **)a2;
      }
      if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        unint64_t v18 = (void *)__s1.__r_.__value_.__r.__words[0];
        BOOL v5 = memcmp(__s1.__r_.__value_.__l.__data_, v9, __s1.__r_.__value_.__l.__size_) == 0;
        goto LABEL_30;
      }
      if (!*((unsigned char *)&__s1.__r_.__value_.__s + 23)) {
        return 1;
      }
      uint64_t v10 = HIBYTE(__s1.__r_.__value_.__r.__words[2]) - 1;
      p_s1 = &__s1;
      do
      {
        int v13 = p_s1->__r_.__value_.__s.__data_[0];
        p_s1 = (std::string *)((char *)p_s1 + 1);
        int v12 = v13;
        int v15 = *v9++;
        int v14 = v15;
        BOOL v17 = v10-- != 0;
        BOOL v5 = v12 == v14;
      }
      while (v12 == v14 && v17);
    }
    else
    {
      BOOL v5 = 0;
    }
    if ((*((unsigned char *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v5;
    }
    unint64_t v18 = (void *)__s1.__r_.__value_.__r.__words[0];
LABEL_30:
    operator delete(v18);
    return v5;
  }
  return 0;
}

uint64_t siri::intelligence::StringContains(char **a1, char *a2)
{
  uint64_t v2 = (char *)*((unsigned __int8 *)a1 + 23);
  if ((char)v2 >= 0) {
    std::string::size_type v3 = (char *)a1;
  }
  else {
    std::string::size_type v3 = *a1;
  }
  int v4 = a2[23];
  if (v4 >= 0) {
    BOOL v5 = a2;
  }
  else {
    BOOL v5 = *(char **)a2;
  }
  if (v4 >= 0) {
    int64_t v6 = a2[23];
  }
  else {
    int64_t v6 = *((void *)a2 + 1);
  }
  if (!v6) {
    return 1;
  }
  if ((char)v2 < 0) {
    uint64_t v2 = a1[1];
  }
  uint64_t v7 = &v2[(void)v3];
  if ((uint64_t)v2 >= v6)
  {
    int v11 = *v5;
    int v12 = v3;
    do
    {
      int v13 = &v2[-v6];
      if (v13 == (char *)-1) {
        break;
      }
      int v14 = (char *)memchr(v12, v11, (size_t)(v13 + 1));
      if (!v14) {
        break;
      }
      int v8 = v14;
      if (!memcmp(v14, v5, v6)) {
        return v8 != v7 && v8 - v3 != -1;
      }
      int v12 = v8 + 1;
      uint64_t v2 = (char *)(v7 - (v8 + 1));
    }
    while ((uint64_t)v2 >= v6);
  }
  int v8 = v7;
  return v8 != v7 && v8 - v3 != -1;
}

uint64_t siri::intelligence::VectorContains(const std::string **a1, const std::string *a2)
{
  siri::intelligence::StringTrim(" \t\n\r", a2, &v17);
  std::string::size_type v3 = *a1;
  int v4 = a1[1];
  if (*a1 == v4)
  {
LABEL_25:
    uint64_t v14 = 0;
    goto LABEL_27;
  }
  while (1)
  {
    siri::intelligence::StringTrim(" \t\n\r", v3, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v6 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    if ((v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v6 = v17.__r_.__value_.__l.__size_;
    }
    if (size != v6)
    {
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_24;
    }
    uint64_t v7 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &v17
       : (std::string *)v17.__r_.__value_.__r.__words[0];
    if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0) {
      break;
    }
    int v12 = (void *)__p.__r_.__value_.__r.__words[0];
    int v13 = memcmp(__p.__r_.__value_.__l.__data_, v7, __p.__r_.__value_.__l.__size_);
    operator delete(v12);
    if (!v13) {
      goto LABEL_26;
    }
LABEL_24:
    if (++v3 == v4) {
      goto LABEL_25;
    }
  }
  if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    uint64_t v8 = 0;
    do
    {
      int v9 = __p.__r_.__value_.__s.__data_[v8];
      int v10 = v7->__r_.__value_.__s.__data_[v8];
    }
    while (v9 == v10 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v8++);
    if (v9 != v10) {
      goto LABEL_24;
    }
  }
LABEL_26:
  uint64_t v14 = 1;
LABEL_27:
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  return v14;
}

void sub_239AB4FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringTrim(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v9 = strlen(__s);
  if (!size) {
    goto LABEL_14;
  }
  int v10 = v7;
  size_t v11 = v9;
  if (v9)
  {
    while (memchr(__s, v10->__r_.__value_.__s.__data_[0], v11))
    {
      int v10 = (const std::string *)((char *)v10 + 1);
      if (!--size) {
        goto LABEL_14;
      }
    }
  }
  if ((char *)v10 - (char *)v7 == -1)
  {
LABEL_14:
    std::string::size_type v14 = 0;
    std::string::size_type v13 = 0;
    unsigned int v12 = 0;
    memset(&__p, 0, sizeof(__p));
  }
  else
  {
    std::string::basic_string(&__p, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v22);
    unsigned int v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    std::string::size_type v14 = __p.__r_.__value_.__l.__size_;
    std::string::size_type v13 = __p.__r_.__value_.__r.__words[0];
  }
  if ((v12 & 0x80u) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)v13;
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v16 = v12;
  }
  else {
    std::string::size_type v16 = v14;
  }
  size_t v17 = strlen(__s);
  unint64_t v18 = (char *)&p_p[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    std::string::size_type v19 = v16;
    if (!v16) {
      break;
    }
    if (!v17) {
      break;
    }
  }
  while (memchr(__s, v18[v16--], v17));
  std::string::basic_string(a3, &__p, 0, v19, (std::allocator<char> *)&v22);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239AB5168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::SubStringCount(uint64_t a1, uint64_t a2)
{
  int v2 = *(char *)(a2 + 23);
  if (v2 >= 0) {
    int64_t v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    int64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    int v4 = *(char *)(a1 + 23);
    BOOL v5 = v2 >= 0 ? (char *)a2 : *(char **)a2;
    int v6 = v4 >= 0 ? (char *)a1 : *(char **)a1;
    int64_t v7 = v4 >= 0 ? *(unsigned __int8 *)(a1 + 23) : *(void *)(a1 + 8);
    if (v7 >= v3)
    {
      int v10 = &v6[v7];
      int v11 = *v5;
      int64_t v12 = v7;
      std::string::size_type v13 = v6;
      do
      {
        int64_t v14 = v12 - v3;
        if (v14 == -1) {
          break;
        }
        int v15 = (char *)memchr(v13, v11, v14 + 1);
        if (!v15) {
          break;
        }
        std::string::size_type v16 = v15;
        if (!memcmp(v15, v5, v3))
        {
          uint64_t v8 = 0;
          if (v16 != v10)
          {
            int64_t v17 = v16 - v6;
            if (v16 - v6 != -1)
            {
              LODWORD(v8) = 0;
LABEL_26:
              uint64_t v8 = (v8 + 1);
              unint64_t v18 = v17 + v3;
              if (v7 >= v18)
              {
                for (uint64_t i = &v6[v18]; v10 - i >= v3; uint64_t i = v22 + 1)
                {
                  int64_t v20 = v10 - i - v3;
                  if (v20 == -1) {
                    break;
                  }
                  char v21 = (char *)memchr(i, v11, v20 + 1);
                  if (!v21) {
                    break;
                  }
                  char v22 = v21;
                  if (!memcmp(v21, v5, v3))
                  {
                    if (v22 != v10)
                    {
                      int64_t v17 = v22 - v6;
                      if (v22 - v6 != -1) {
                        goto LABEL_26;
                      }
                    }
                    return v8;
                  }
                }
              }
            }
          }
          return v8;
        }
        std::string::size_type v13 = v16 + 1;
        int64_t v12 = v10 - (v16 + 1);
      }
      while (v12 >= v3);
    }
  }
  return 0;
}

uint64_t siri::intelligence::StringToIntegralType<int>(const std::string *a1, BOOL *a2)
{
  unsigned int v11 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, &v10, 24);
  MEMORY[0x23ECAAA30](v7, &v11);
  int v3 = *(_DWORD *)((unsigned char *)&v7[4] + *(void *)(v7[0] - 24)) & 5;
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  void v7[2] = v4;
  void v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECAAC10](&v9);
  if (a2) {
    *a2 = v3 == 0;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    unsigned int v11 = 0;
  }
  else
  {
    uint64_t v5 = v11;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_239AB54B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToIntegralType<long long>(const std::string *a1, BOOL *a2)
{
  uint64_t v11 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v10);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v7, &v10, 24);
  MEMORY[0x23ECAAA50](v7, &v11);
  int v3 = *(_DWORD *)((unsigned char *)&v7[4] + *(void *)(v7[0] - 24)) & 5;
  v7[0] = *MEMORY[0x263F8C2B8];
  uint64_t v4 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v7 + *(void *)(v7[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  void v7[2] = v4;
  void v7[3] = MEMORY[0x263F8C318] + 16;
  if (v8 < 0) {
    operator delete((void *)v7[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECAAC10](&v9);
  if (a2) {
    *a2 = v3 == 0;
  }
  if (v3)
  {
    uint64_t v5 = 0;
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v5 = v11;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
  return v5;
}

void sub_239AB56C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToUInt32(const std::string *a1, unsigned char *a2)
{
  unsigned int v12 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v11.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    int v3 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v11.__r_.__value_.__s + 23)) {
      goto LABEL_9;
    }
    int v3 = &v11;
  }
  if (v3->__r_.__value_.__s.__data_[0] == 45)
  {
    BOOL v4 = 0;
    if (!a2) {
      goto LABEL_13;
    }
LABEL_12:
    *a2 = v4;
    goto LABEL_13;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, &v11, 24);
  MEMORY[0x23ECAAA40](v8, &v12);
  BOOL v4 = (*(_DWORD *)((unsigned char *)&v8[4] + *(void *)(v8[0] - 24)) & 5) == 0;
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v8[2] = v5;
  _OWORD v8[3] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECAAC10](&v10);
  if (a2) {
    goto LABEL_12;
  }
LABEL_13:
  if (v4)
  {
    uint64_t v6 = v12;
  }
  else
  {
    uint64_t v6 = 0;
    unsigned int v12 = 0;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_239AB58FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  *(void *)(v29 + *(void *)(*MEMORY[0x263F8C2B8] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  if (a26 < 0) {
    operator delete(__p);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECAAC10](&a29);
  if (*(char *)(v30 - 57) < 0) {
    operator delete(*(void **)(v30 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringToIntegralType<unsigned long long>(const std::string *a1, unsigned char *a2)
{
  uint64_t v12 = 0;
  siri::intelligence::StringTrim(" \t\n\r", a1, &v11);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v11.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    int v3 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&v11.__r_.__value_.__s + 23)) {
      goto LABEL_9;
    }
    int v3 = &v11;
  }
  if (v3->__r_.__value_.__s.__data_[0] == 45)
  {
    BOOL v4 = 0;
    if (!a2) {
      goto LABEL_13;
    }
LABEL_12:
    *a2 = v4;
    goto LABEL_13;
  }
LABEL_9:
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100](v8, &v11, 24);
  MEMORY[0x23ECAAA60](v8, &v12);
  BOOL v4 = (*(_DWORD *)((unsigned char *)&v8[4] + *(void *)(v8[0] - 24)) & 5) == 0;
  v8[0] = *MEMORY[0x263F8C2B8];
  uint64_t v5 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  *(uint64_t *)((char *)v8 + *(void *)(v8[0] - 24)) = *(void *)(MEMORY[0x263F8C2B8] + 64);
  v8[2] = v5;
  _OWORD v8[3] = MEMORY[0x263F8C318] + 16;
  if (v9 < 0) {
    operator delete((void *)v8[11]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x23ECAAC10](&v10);
  if (a2) {
    goto LABEL_12;
  }
LABEL_13:
  if (v4)
  {
    uint64_t v6 = v12;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v12 = 0;
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  return v6;
}

void sub_239AB5C40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  if (*(char *)(v2 - 57) < 0) {
    operator delete(*(void **)(v2 - 80));
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::StringIsANumber(const std::string *a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_12, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_12))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_26AD86A18, "[0-9]", 0);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD869F0, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD869F0))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_26AD86A58, "[+-]?[0-9]*(\\.[0-9]+)?([Ee][+-]?[0-9]+)?", 0);
  }
  siri::intelligence::StringTrim(" \t\n\r", a1, &v9);
  std::string::size_type size = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v9.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    uint64_t v4 = 0;
    if ((*((unsigned char *)&v9.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v4;
    }
LABEL_24:
    operator delete(v9.__r_.__value_.__l.__data_);
    return v4;
  }
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v3 = &v9;
  }
  else {
    int v3 = (std::string *)v9.__r_.__value_.__r.__words[0];
  }
  uint64_t v4 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>((uint64_t)&unk_26AD86A18, (char *)v3, (char *)v3 + size, &__p, 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  char v5 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  if (v4)
  {
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v6 = &v9;
    }
    else {
      uint64_t v6 = (std::string *)v9.__r_.__value_.__r.__words[0];
    }
    if ((v9.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v7 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v7 = v9.__r_.__value_.__l.__size_;
    }
    memset(&__p.__prefix_, 0, 17);
    memset(&__p.__suffix_, 0, 17);
    __p.__ready_ = 0;
    __p.__position_start_ = 0;
    memset(&__p, 0, 41);
    uint64_t v4 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>((char *)v6, (char *)v6 + v7, (uint64_t)&__p, (uint64_t)&unk_26AD86A58, 0);
    if (__p.__matches_.__begin_)
    {
      __p.__matches_.__end_ = __p.__matches_.__begin_;
      operator delete(__p.__matches_.__begin_);
    }
    char v5 = HIBYTE(v9.__r_.__value_.__r.__words[2]);
  }
  if (v5 < 0) {
    goto LABEL_24;
  }
  return v4;
}

void sub_239AB5E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17)
{
}

void std::basic_regex<char,std::regex_traits<char>>::~basic_regex(std::locale *this)
{
  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }

  std::locale::~locale(this);
}

BOOL siri::intelligence::StringIsGUID(uint64_t a1)
{
  unint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    unint64_t v1 = *(void *)(a1 + 8);
  }
  if (v1 < 7) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD869F8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD869F8))
  {
    std::string::basic_string[abi:ne180100]<0>(&stru_26AD86A00, "0123456789abcdefABCDEF-");
    __cxa_atexit(MEMORY[0x263F8C0B8], &stru_26AD86A00, &dword_239A02000);
    __cxa_guard_release(&qword_26AD869F8);
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) == 0) {
    char v5 = (std::string::value_type *)a1;
  }
  else {
    char v5 = *(std::string::value_type **)a1;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  if (!v4) {
    return 1;
  }
  uint64_t v6 = v4 - 1;
  do
  {
    std::string::value_type v7 = *v5++;
    std::string::size_type v8 = std::string::find(&stru_26AD86A00, v7, 0);
    BOOL v9 = v8 == -1;
    BOOL result = v8 != -1;
    BOOL v9 = v9 || v6-- == 0;
  }
  while (!v9);
  return result;
}

void sub_239AB602C(_Unwind_Exception *a1)
{
}

uint64_t siri::intelligence::StringToBool(const std::string *a1, int a2)
{
  siri::intelligence::StringTrim(" \t\n\r", a1, &__p);
  siri::intelligence::StringToLower((uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
    switch(v15.__r_.__value_.__l.__size_)
    {
      case 1uLL:
        char v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*v15.__r_.__value_.__l.__data_ == 49) {
          goto LABEL_57;
        }
        goto LABEL_50;
      case 2uLL:
        char v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 28271) {
          goto LABEL_57;
        }
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 28526) {
          goto LABEL_54;
        }
        uint64_t v9 = 0;
        goto LABEL_64;
      case 3uLL:
        char v5 = (void *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 25977 || *(unsigned char *)(v15.__r_.__value_.__r.__words[0] + 2) != 115) {
          goto LABEL_44;
        }
LABEL_57:
        uint64_t v9 = 1;
        goto LABEL_64;
      case 4uLL:
        char v5 = (void *)v15.__r_.__value_.__r.__words[0];
        uint64_t v9 = 1;
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1702195828) {
          goto LABEL_64;
        }
        break;
      case 5uLL:
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1936482662
          && *(unsigned char *)(v15.__r_.__value_.__r.__words[0] + 4) == 101)
        {
LABEL_60:
          uint64_t v9 = 0;
          if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) == 0) {
            return v9;
          }
          goto LABEL_56;
        }
        if (v15.__r_.__value_.__l.__size_ == 3)
        {
LABEL_44:
          if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 26223
            && *(unsigned char *)(v15.__r_.__value_.__r.__words[0] + 2) == 102)
          {
            uint64_t v9 = 0;
            goto LABEL_56;
          }
LABEL_48:
          std::string::size_type size = v15.__r_.__value_.__l.__size_;
        }
        if (size != 1) {
          goto LABEL_54;
        }
LABEL_50:
        int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_51:
        LODWORD(v9) = v3->__r_.__value_.__s.__data_[0] != 48;
        break;
      default:
        goto LABEL_54;
    }
  }
  else
  {
    switch(*((unsigned char *)&v15.__r_.__value_.__s + 23))
    {
      case 1:
        if (v15.__r_.__value_.__s.__data_[0] != 49) {
          goto LABEL_6;
        }
        return 1;
      case 2:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28271) {
          return 1;
        }
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28526) {
          return 0;
        }
        break;
      case 3:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 25977 && v15.__r_.__value_.__s.__data_[2] == 115) {
          return 1;
        }
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 26223 && v15.__r_.__value_.__s.__data_[2] == 102) {
          goto LABEL_60;
        }
        if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_48;
        }
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) == 1)
        {
LABEL_6:
          int v3 = &v15;
          goto LABEL_51;
        }
        break;
      case 4:
        uint64_t v9 = 1;
        if (LODWORD(v15.__r_.__value_.__l.__data_) != 1702195828) {
          goto LABEL_55;
        }
        return v9;
      case 5:
        if (LODWORD(v15.__r_.__value_.__l.__data_) != 1936482662 || v15.__r_.__value_.__s.__data_[4] != 101) {
          break;
        }
        return 0;
      default:
        break;
    }
LABEL_54:
    LODWORD(v9) = 1;
  }
LABEL_55:
  uint64_t v9 = v9 & a2;
  if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_56:
    char v5 = (void *)v15.__r_.__value_.__r.__words[0];
LABEL_64:
    operator delete(v5);
  }
  return v9;
}

void sub_239AB62EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToLower(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    for (uint64_t i = 0; i != size; ++i)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        char v5 = a2;
      }
      else {
        char v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      std::string::value_type v6 = __tolower(v5->__r_.__value_.__s.__data_[i]);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::value_type v7 = a2;
      }
      else {
        std::string::value_type v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      v7->__r_.__value_.__s.__data_[i] = v6;
    }
  }
}

void sub_239AB63D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::StringFromBool@<X0>(siri::intelligence *this@<X0>, void *a2@<X8>)
{
  if (this) {
    uint64_t v2 = "true";
  }
  else {
    uint64_t v2 = "false";
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

void siri::intelligence::StringToFloat(const char *a1, BOOL *a2)
{
  int v3 = a1;
  std::string::value_type v6 = 0;
  if (a1[23] < 0) {
    a1 = *(const char **)a1;
  }
  strtof(a1, &v6);
  if (a2)
  {
    if (*v6)
    {
      BOOL v4 = 0;
    }
    else
    {
      uint64_t v5 = *((unsigned __int8 *)v3 + 23);
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *((void *)v3 + 1);
      }
      BOOL v4 = v5 != 0;
    }
    *a2 = v4;
  }
}

uint64_t siri::intelligence::StringFromFloat@<X0>(siri::intelligence *this@<X0>, uint64_t a2@<X8>)
{
  return siri::intelligence::StringFromDouble(this, a2);
}

uint64_t siri::intelligence::StringFromDouble@<X0>(siri::intelligence *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3 = this;
  uint64_t v5 = MEMORY[0x263F8C328] + 104;
  v34[0] = MEMORY[0x263F8C328] + 104;
  uint64_t v6 = MEMORY[0x263F8C328] + 64;
  uint64_t v29 = MEMORY[0x263F8C328] + 64;
  std::string::value_type v7 = (void *)MEMORY[0x263F8C2B8];
  uint64_t v8 = *(void *)(MEMORY[0x263F8C2B8] + 24);
  v28[0] = *(void *)(MEMORY[0x263F8C2B8] + 16);
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v8;
  v28[1] = 0;
  uint64_t v9 = (std::ios_base *)((char *)v28 + *(void *)(v28[0] - 24));
  std::ios_base::init(v9, v30);
  uint64_t v10 = MEMORY[0x263F8C328] + 24;
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  uint64_t v11 = v7[5];
  uint64_t v29 = v7[4];
  *(void *)((char *)&v30[-1] + *(void *)(v29 - 24)) = v11;
  v28[0] = v7[1];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v7[6];
  v34[0] = v5;
  v28[0] = v10;
  uint64_t v29 = v6;
  std::streambuf::basic_streambuf();
  uint64_t v12 = MEMORY[0x263F8C318] + 16;
  v30[0] = MEMORY[0x263F8C318] + 16;
  long long v31 = 0u;
  long long v32 = 0u;
  int v33 = 16;
  uint64_t v13 = v29;
  *(_DWORD *)((char *)v30 + *(void *)(v29 - 24)) = *(_DWORD *)((unsigned char *)v30 + *(void *)(v29 - 24)) & 0xFFFFFEFB | 4;
  if ((v3 & 0x80000000) == 0) {
    *(void *)((char *)&v30[1] + *(void *)(v13 - 24)) = v3;
  }
  std::ostream::operator<<();
  std::stringbuf::str();
  std::string::basic_string[abi:ne180100]<0>(v26, ".");
  if (siri::intelligence::StringContains((char **)a2, (char *)v26))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "e");
    int v14 = siri::intelligence::StringContains((char **)a2, (char *)__p) ^ 1;
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    int v14 = 0;
  }
  if ((v27 & 0x80000000) == 0)
  {
    if (v14) {
      goto LABEL_11;
    }
    goto LABEL_24;
  }
  operator delete(v26[0]);
  if (!v14) {
    goto LABEL_24;
  }
LABEL_11:
  while ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_24;
    }
    int v16 = *(unsigned __int8 *)(a2 - 1 + v15);
    if (v16 != 48)
    {
      if (v16 != 46) {
        goto LABEL_24;
      }
      uint64_t v21 = v15 - 1;
      *(unsigned char *)(a2 + 23) = v15 - 1;
      unint64_t v18 = (char *)a2;
      goto LABEL_23;
    }
    uint64_t v17 = v15 - 1;
    *(unsigned char *)(a2 + 23) = v15 - 1;
    unint64_t v18 = (char *)a2;
LABEL_18:
    v18[v17] = 0;
  }
  uint64_t v19 = *(void *)(a2 + 8);
  if (!v19) {
    goto LABEL_24;
  }
  unint64_t v18 = *(char **)a2;
  int v20 = *(unsigned __int8 *)(*(void *)a2 + v19 - 1);
  if (v20 == 48)
  {
    uint64_t v17 = v19 - 1;
    *(void *)(a2 + 8) = v17;
    goto LABEL_18;
  }
  if (v20 != 46) {
    goto LABEL_24;
  }
  uint64_t v21 = v19 - 1;
  *(void *)(a2 + 8) = v19 - 1;
LABEL_23:
  v18[v21] = 0;
LABEL_24:
  v28[0] = *v7;
  uint64_t v22 = v7[9];
  *(void *)((char *)v28 + *(void *)(v28[0] - 24)) = v7[8];
  uint64_t v29 = v22;
  v30[0] = v12;
  if (SBYTE7(v32) < 0) {
    operator delete((void *)v31);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x23ECAAC10](v34);
}

void sub_239AB69C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v20 + 23) < 0) {
    operator delete(*(void **)v20);
  }
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void siri::intelligence::StringToDouble(uint64_t a1, BOOL *a2)
{
  if (siri::intelligence::StringIsANumber((const std::string *)a1))
  {
    std::string::value_type v7 = 0;
    if (*(char *)(a1 + 23) >= 0) {
      BOOL v4 = (const char *)a1;
    }
    else {
      BOOL v4 = *(const char **)a1;
    }
    strtod(v4, &v7);
    if (a2)
    {
      if (*v7)
      {
        BOOL v5 = 0;
      }
      else
      {
        uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
        if ((v6 & 0x80u) != 0) {
          uint64_t v6 = *(void *)(a1 + 8);
        }
        BOOL v5 = v6 != 0;
      }
      *a2 = v5;
    }
  }
  else if (a2)
  {
    *a2 = 0;
  }
}

BOOL siri::intelligence::StringIsBool(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  siri::intelligence::StringTrim(" \t\n\r", (const std::string *)a1, &__p);
  siri::intelligence::StringToLower((uint64_t)&__p, &v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    std::string::size_type size = v15.__r_.__value_.__l.__size_;
    switch(v15.__r_.__value_.__l.__size_)
    {
      case 1uLL:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*v15.__r_.__value_.__l.__data_ == 49) {
          goto LABEL_52;
        }
        goto LABEL_54;
      case 2uLL:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ == 28271) {
          goto LABEL_52;
        }
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 28526) {
          goto LABEL_39;
        }
LABEL_45:
        BOOL v9 = 1;
        if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0) {
          goto LABEL_66;
        }
        return v9;
      case 3uLL:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_WORD *)v15.__r_.__value_.__l.__data_ != 25977 || *(unsigned char *)(v15.__r_.__value_.__r.__words[0] + 2) != 115) {
          goto LABEL_54;
        }
        goto LABEL_52;
      case 4uLL:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ != 1702195828) {
          goto LABEL_54;
        }
LABEL_52:
        BOOL v9 = 1;
        goto LABEL_67;
      default:
LABEL_39:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
        if (v15.__r_.__value_.__l.__size_ != 5) {
          goto LABEL_55;
        }
        if (*(_DWORD *)v15.__r_.__value_.__l.__data_ == 1936482662
          && *(unsigned char *)(v15.__r_.__value_.__r.__words[0] + 4) == 101)
        {
          goto LABEL_65;
        }
        std::string::size_type size = v15.__r_.__value_.__l.__size_;
LABEL_54:
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_55:
        if (size != 3) {
          goto LABEL_61;
        }
        if (LOWORD(v3->__r_.__value_.__l.__data_) == 26223 && v3->__r_.__value_.__s.__data_[2] == 102)
        {
LABEL_65:
          BOOL v9 = 1;
          goto LABEL_66;
        }
        std::string::size_type size = v15.__r_.__value_.__l.__size_;
        unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_61:
        if (size != 1)
        {
          BOOL v9 = 0;
          goto LABEL_67;
        }
        break;
    }
  }
  else
  {
    switch(*((unsigned char *)&v15.__r_.__value_.__s + 23))
    {
      case 1:
        if (v15.__r_.__value_.__s.__data_[0] == 49) {
          return 1;
        }
        goto LABEL_30;
      case 2:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 28271) {
          return 1;
        }
        int data_low = LOWORD(v15.__r_.__value_.__l.__data_);
        int v8 = 28526;
        return data_low == v8;
      case 3:
        if (LOWORD(v15.__r_.__value_.__l.__data_) != 25977 || v15.__r_.__value_.__s.__data_[2] != 115) {
          goto LABEL_25;
        }
        return 1;
      case 4:
        int data_low = (int)v15.__r_.__value_.__l.__data_;
        int v8 = 1702195828;
        return data_low == v8;
      case 5:
        if (LODWORD(v15.__r_.__value_.__l.__data_) == 1936482662 && v15.__r_.__value_.__s.__data_[4] == 101) {
          goto LABEL_45;
        }
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) == 1) {
          goto LABEL_30;
        }
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 3) {
          return 0;
        }
LABEL_25:
        if (LOWORD(v15.__r_.__value_.__l.__data_) == 26223 && v15.__r_.__value_.__s.__data_[2] == 102) {
          goto LABEL_45;
        }
        if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 1) {
          return 0;
        }
LABEL_30:
        unsigned int v3 = &v15;
        break;
      default:
        return 0;
    }
  }
  BOOL v9 = v3->__r_.__value_.__s.__data_[0] == 48;
  if ((*((unsigned char *)&v15.__r_.__value_.__s + 23) & 0x80) != 0)
  {
LABEL_66:
    unsigned int v3 = (std::string *)v15.__r_.__value_.__r.__words[0];
LABEL_67:
    operator delete(v3);
  }
  return v9;
}

void sub_239AB6D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::StringTrimLeft@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    std::string::value_type v7 = a2;
  }
  else {
    std::string::value_type v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  BOOL result = (std::string *)strlen(__s);
  if (size)
  {
    uint64_t v10 = v7;
    size_t v11 = (size_t)result;
    if (result)
    {
      while (1)
      {
        BOOL result = (std::string *)memchr(__s, v10->__r_.__value_.__s.__data_[0], v11);
        if (!result) {
          break;
        }
        uint64_t v10 = (const std::string *)((char *)v10 + 1);
        if (!--size) {
          goto LABEL_14;
        }
      }
    }
    if ((char *)v10 - (char *)v7 != -1) {
      return std::string::basic_string(a3, a2, (char *)v10 - (char *)v7, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
    }
  }
LABEL_14:
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *siri::intelligence::StringTrimRight@<X0>(char *__s@<X1>, const std::string *a2@<X0>, std::string *a3@<X8>)
{
  int v6 = SHIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v6 >= 0) {
    std::string::value_type v7 = a2;
  }
  else {
    std::string::value_type v7 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if (v6 >= 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  size_t v9 = strlen(__s);
  uint64_t v10 = (uint64_t)&v7[-1].__r_.__value_.__r.__words[2] + 7;
  do
  {
    std::string::size_type v11 = size;
    if (!size) {
      break;
    }
    if (!v9) {
      break;
    }
  }
  while (memchr(__s, *(char *)(v10 + size--), v9));
  return std::string::basic_string(a3, a2, 0, v11, (std::allocator<char> *)&v14);
}

std::string *siri::intelligence::StringAfter@<X0>(std::string *__str@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    int v6 = __str;
  }
  else {
    int v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  uint64_t v7 = a2[23];
  uint64_t v8 = *((void *)a2 + 1);
  if ((v7 & 0x80u) == 0) {
    size_t v9 = a2;
  }
  else {
    size_t v9 = *(char **)a2;
  }
  if ((v7 & 0x80u) == 0) {
    int64_t v10 = a2[23];
  }
  else {
    int64_t v10 = *((void *)a2 + 1);
  }
  if (v10)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v10)
    {
      std::string::size_type v11 = (char *)v6 + size;
      int v12 = *v9;
      uint64_t v13 = v6;
      while (1)
      {
        int64_t v14 = size - v10;
        if (v14 == -1) {
          break;
        }
        std::string v15 = (char *)memchr(v13, v12, v14 + 1);
        if (!v15) {
          break;
        }
        int v16 = v15;
        if (!memcmp(v15, v9, v10))
        {
          if (v16 != v11)
          {
            int64_t v17 = v16 - (char *)v6;
            if (v16 - (char *)v6 != -1) {
              goto LABEL_21;
            }
          }
          goto LABEL_28;
        }
        uint64_t v13 = (std::string *)(v16 + 1);
        int64_t size = v11 - (v16 + 1);
        if (size < v10) {
          goto LABEL_28;
        }
      }
    }
    goto LABEL_28;
  }
  int64_t v17 = 0;
LABEL_21:
  if ((v7 & 0x80) == 0)
  {
    if (!v7) {
      goto LABEL_28;
    }
    return std::string::basic_string(a3, __str, v7 + v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  }
  uint64_t v7 = v8;
  if (v8) {
    return std::string::basic_string(a3, __str, v7 + v17, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v19);
  }
LABEL_28:

  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, "");
}

std::string *siri::intelligence::StringBefore@<X0>(const std::string *a1@<X0>, char *a2@<X1>, std::string *a3@<X8>)
{
  int64_t size = (char *)HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((char)size >= 0) {
    std::string::size_type v5 = (std::string::size_type)a1;
  }
  else {
    std::string::size_type v5 = a1->__r_.__value_.__r.__words[0];
  }
  int v6 = a2[23];
  if (v6 >= 0) {
    uint64_t v7 = a2;
  }
  else {
    uint64_t v7 = *(char **)a2;
  }
  if (v6 >= 0) {
    int64_t v8 = a2[23];
  }
  else {
    int64_t v8 = *((void *)a2 + 1);
  }
  if (v8)
  {
    if ((char)size < 0) {
      int64_t size = (char *)a1->__r_.__value_.__l.__size_;
    }
    if ((uint64_t)size >= v8)
    {
      std::string::size_type v11 = &size[v5];
      int v12 = *v7;
      uint64_t v13 = (void *)v5;
      do
      {
        int64_t v14 = &size[-v8];
        if (v14 == (char *)-1) {
          break;
        }
        std::string v15 = (char *)memchr(v13, v12, (size_t)(v14 + 1));
        if (!v15) {
          break;
        }
        int v16 = v15;
        if (!memcmp(v15, v7, v8))
        {
          if (v16 != v11 && &v16[-v5] != (char *)-1) {
            return std::string::basic_string(a3, a1, 0, (std::string::size_type)&v16[-v5], (std::allocator<char> *)&v17);
          }
          break;
        }
        uint64_t v13 = v16 + 1;
        int64_t size = (char *)(v11 - (v16 + 1));
      }
      while ((uint64_t)size >= v8);
    }
  }

  return (std::string *)std::string::basic_string[abi:ne180100]<0>(a3, "");
}

void siri::intelligence::StringReplace(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, std::string *a5@<X8>)
{
  if (a2[23] >= 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  int v7 = *(unsigned __int8 *)(a1 + 23);
  if (!v6)
  {
    if ((v7 & 0x80) == 0) {
      goto LABEL_9;
    }
    std::string::size_type v11 = *(void *)(a1 + 8);
    goto LABEL_61;
  }
  LODWORD(v8) = a4;
  if ((v7 & 0x80) == 0)
  {
    if (v7 > a4)
    {
      *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      a5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
      goto LABEL_12;
    }
LABEL_9:
    *(_OWORD *)&a5->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a5->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
    return;
  }
  std::string::size_type v11 = *(void *)(a1 + 8);
  if ((int)v11 <= a4)
  {
LABEL_61:
    long long v31 = *(const std::string::value_type **)a1;
    std::string::__init_copy_ctor_external(a5, v31, v11);
    return;
  }
  std::string::__init_copy_ctor_external(a5, *(const std::string::value_type **)a1, v11);
LABEL_12:
  unint64_t size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
  int v13 = (char)size;
  if ((size & 0x80u) != 0) {
    unint64_t size = a5->__r_.__value_.__l.__size_;
  }
  if (size >= (int)v8)
  {
    std::string::size_type v8 = (int)v8;
    BOOL v33 = a2[23] < 0;
    std::string::size_type v14 = a2[23];
    std::string::size_type v32 = *((void *)a2 + 1);
    if (a2[23] >= 0) {
      int64_t v15 = a2[23];
    }
    else {
      int64_t v15 = *((void *)a2 + 1);
    }
    if (a2[23] >= 0) {
      int v16 = a2;
    }
    else {
      int v16 = *(char **)a2;
    }
    if (v13 >= 0) {
      std::string::size_type v17 = (std::string::size_type)a5;
    }
    else {
      std::string::size_type v17 = a5->__r_.__value_.__r.__words[0];
    }
    while (!v15)
    {
LABEL_35:
      if (v8 != -1)
      {
        if (v33) {
          std::string::size_type v25 = v32;
        }
        else {
          std::string::size_type v25 = v14;
        }
        int v26 = *(char *)(a3 + 23);
        if (v26 >= 0) {
          char v27 = (const std::string::value_type *)a3;
        }
        else {
          char v27 = *(const std::string::value_type **)a3;
        }
        if (v26 >= 0) {
          std::string::size_type v28 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          std::string::size_type v28 = *(void *)(a3 + 8);
        }
        std::string::replace(a5, v8, v25, v27, v28);
        uint64_t v29 = *(unsigned __int8 *)(a3 + 23);
        if ((v29 & 0x80u) != 0) {
          uint64_t v29 = *(void *)(a3 + 8);
        }
        v8 += v29;
        unint64_t size = HIBYTE(a5->__r_.__value_.__r.__words[2]);
        if ((size & 0x80u) == 0) {
          std::string::size_type v17 = (std::string::size_type)a5;
        }
        else {
          std::string::size_type v17 = a5->__r_.__value_.__r.__words[0];
        }
        if ((size & 0x80u) != 0) {
          unint64_t size = a5->__r_.__value_.__l.__size_;
        }
        int v30 = a2[23];
        BOOL v33 = v30 < 0;
        std::string::size_type v14 = a2[23];
        int v16 = v30 >= 0 ? a2 : *(char **)a2;
        std::string::size_type v32 = *((void *)a2 + 1);
        int64_t v15 = v30 >= 0 ? a2[23] : *((void *)a2 + 1);
        if (size >= v8) {
          continue;
        }
      }
      return;
    }
    unint64_t v18 = (void *)(v17 + v8);
    char v19 = (char *)(v17 + size);
    int64_t v20 = size - v8;
    if (v20 >= v15)
    {
      int v21 = *v16;
      do
      {
        int64_t v22 = v20 - v15;
        if (v22 == -1) {
          break;
        }
        unint64_t v23 = (char *)memchr(v18, v21, v22 + 1);
        if (!v23) {
          break;
        }
        char v24 = v23;
        if (!memcmp(v23, v16, v15))
        {
          if (v24 == v19) {
            return;
          }
          std::string::size_type v8 = (std::string::size_type)&v24[-v17];
          goto LABEL_35;
        }
        unint64_t v18 = v24 + 1;
        int64_t v20 = v19 - (v24 + 1);
      }
      while (v20 >= v15);
    }
  }
}

void sub_239AB7410(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringSplit(unsigned __int8 *a1@<X0>, unsigned char *a2@<X1>, uint64_t *a3@<X2>, std::vector<std::string> *a4@<X8>)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  memset(v49, 0, sizeof(v49));
  unsigned int v6 = *a2;
  if (*a2)
  {
    int v7 = a2 + 1;
    do
    {
      *((unsigned char *)v49 + v6) = 1;
      unsigned int v8 = *v7++;
      unsigned int v6 = v8;
    }
    while (v8);
  }
  size_t v9 = (int64x2_t *)operator new(0x80uLL);
  int64_t v10 = v9;
  uint64_t v11 = a1[23];
  int v12 = (char)v11;
  int v13 = &a1[v11];
  if (v12 >= 0) {
    std::string::size_type v14 = v13;
  }
  else {
    std::string::size_type v14 = (unsigned __int8 *)(*(void *)a1 + *((void *)a1 + 1));
  }
  if (v12 >= 0) {
    int64_t v15 = a1;
  }
  else {
    int64_t v15 = *(unsigned __int8 **)a1;
  }
  if (v15 < v14)
  {
    int v16 = v9 + 8;
    std::string::size_type v17 = v9;
    while (*((unsigned char *)v49 + *v15))
    {
      unint64_t v18 = v17;
LABEL_69:
      if (++v15 >= v14) {
        goto LABEL_72;
      }
    }
    if (v17 >= v16)
    {
      uint64_t v19 = v17 - v10;
      unint64_t v20 = v19 + 1;
      if ((unint64_t)(v19 + 1) >> 60) {
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      }
      if (((char *)v16 - (char *)v10) >> 3 > v20) {
        unint64_t v20 = ((char *)v16 - (char *)v10) >> 3;
      }
      if ((unint64_t)((char *)v16 - (char *)v10) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v20;
      }
      if (v21)
      {
        if (v21 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        int64_t v22 = (char *)operator new(16 * v21);
      }
      else
      {
        int64_t v22 = 0;
      }
      unint64_t v23 = (int64x2_t *)&v22[16 * v19];
      int64x2_t *v23 = vdupq_n_s64((unint64_t)v15);
      unint64_t v18 = v23 + 1;
      if (v17 == v10)
      {
        char v24 = v23;
      }
      else
      {
        do
        {
          char v24 = v23 - 1;
          v23[-1] = v17[-1];
          --v17;
          --v23;
        }
        while (v17 != v10);
      }
      int v16 = (int64x2_t *)&v22[16 * v21];
      if (v10) {
        operator delete(v10);
      }
      int64_t v10 = v24;
    }
    else
    {
      v17->i64[0] = (uint64_t)v15;
      v17->i64[1] = (uint64_t)v15;
      unint64_t v18 = v17 + 1;
    }
    std::string::size_type v25 = v15 + 1;
    int64_t v15 = v14;
    if (v25 != v14)
    {
      uint64_t v45 = v16;
      unint64_t v46 = v10;
      int64_t v26 = (char *)v18 - (char *)v10;
      int64_t v15 = v25;
      while (!*((unsigned char *)v49 + *v15))
      {
LABEL_64:
        if (++v15 == v14)
        {
          int64_t v15 = v14;
          int64_t v10 = v46;
          goto LABEL_67;
        }
      }
      uint64_t v27 = *a3;
      uint64_t v28 = a3[1];
      if (*a3 != v28)
      {
        uint64_t v29 = 0;
        unint64_t v30 = 0;
        int64_t v31 = v14 - v15;
        do
        {
          uint64_t v32 = v27 + v29;
          uint64_t v33 = *(unsigned __int8 *)(v27 + v29 + 23);
          if (*(char *)(v27 + v29 + 23) < 0)
          {
            if (!*(void *)(v32 + 8)) {
              goto LABEL_57;
            }
          }
          else if (!*(unsigned char *)(v27 + v29 + 23))
          {
            goto LABEL_57;
          }
          std::string::size_type v34 = (unsigned __int8 *)v18[-1].i64[0];
          if ((a1[23] & 0x80u) == 0) {
            std::string::size_type v35 = a1;
          }
          else {
            std::string::size_type v35 = *(unsigned __int8 **)a1;
          }
          if (v26 == 16) {
            std::string::size_type v34 = v35;
          }
          long long v36 = (unsigned __int8 *)(v15 - v34);
          if ((v33 & 0x80) != 0)
          {
            uint64_t v33 = *(void *)(v27 + v29 + 8);
            if ((uint64_t)v36 <= (int)v33 - 1) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = &v15[-(int)v33 + 1];
            }
            uint64_t v38 = v14;
            if (v31 <= (int)v33) {
              goto LABEL_53;
            }
          }
          else
          {
            if ((uint64_t)v36 <= (int)v33 - 1) {
              uint64_t v37 = v34;
            }
            else {
              uint64_t v37 = &v15[-(int)v33 + 1];
            }
            uint64_t v38 = v14;
            if (v31 <= v33) {
              goto LABEL_53;
            }
          }
          uint64_t v38 = &v15[v33];
LABEL_53:
          std::string::basic_string[abi:ne180100](__p, v37, v38 - v37);
          char v39 = siri::intelligence::StringContains((char **)__p, (char *)v32);
          if (v48 < 0) {
            operator delete(__p[0]);
          }
          if (v39) {
            goto LABEL_64;
          }
          uint64_t v27 = *a3;
          uint64_t v28 = a3[1];
LABEL_57:
          ++v30;
          v29 += 24;
        }
        while (v30 < 0xAAAAAAAAAAAAAAABLL * ((v28 - v27) >> 3));
      }
      int64_t v10 = v46;
LABEL_67:
      int v16 = v45;
    }
    v18[-1].i64[1] = (uint64_t)v15;
    std::string::size_type v17 = v18;
    goto LABEL_69;
  }
  unint64_t v18 = v9;
LABEL_72:
  std::vector<std::string>::size_type v40 = v18 - v10;
  std::vector<std::string>::vector(a4, v40);
  if (v18 == v10)
  {
    if (!v10) {
      return;
    }
  }
  else
  {
    uint64_t v41 = 0;
    if (v40 <= 1) {
      uint64_t v42 = 1;
    }
    else {
      uint64_t v42 = v40;
    }
    uint64_t v43 = (char **)&v10->i64[1];
    do
    {
      std::string::append[abi:ne180100]<char const*,0>(&a4->__begin_[v41], *(v43 - 1), *v43);
      v43 += 2;
      ++v41;
      --v42;
    }
    while (v42);
  }
  operator delete(v10);
}

void sub_239AB77E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (v12) {
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringSplit(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    int v7 = 0;
    do
    {
      if (*(char *)(v5 + 23) < 0)
      {
        if (*(void *)(v5 + 8))
        {
LABEL_7:
          if ((unint64_t)v7 >= v42)
          {
            int v7 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>(&v40, (long long *)v5);
          }
          else
          {
            if ((*(unsigned char *)(v5 + 23) & 0x80) != 0)
            {
              std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v5, *(void *)(v5 + 8));
            }
            else
            {
              long long v8 = *(_OWORD *)v5;
              v7->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
              *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
            }
            ++v7;
          }
          uint64_t v41 = v7;
        }
      }
      else if (*(unsigned char *)(v5 + 23))
      {
        goto LABEL_7;
      }
      v5 += 24;
    }
    while (v5 != v6);
  }
  uint64_t v39 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t FirstOf = siri::intelligence::StringFindFirstOf((uint64_t *)a1, &v40, &v39, 0);
  if (FirstOf == -1)
  {
    std::string::size_type v11 = 0;
  }
  else
  {
    uint64_t v10 = FirstOf;
    std::string::size_type v11 = 0;
    do
    {
      std::string::basic_string(&__p, (const std::string *)a1, v11, v10 - v11, (std::allocator<char> *)&__v);
      unint64_t v13 = *(void *)(a3 + 8);
      unint64_t v12 = *(void *)(a3 + 16);
      if (v13 >= v12)
      {
        unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - *(void *)a3) >> 3);
        unint64_t v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - *(void *)a3) >> 3);
        if (2 * v17 > v16) {
          unint64_t v16 = 2 * v17;
        }
        if (v17 >= 0x555555555555555) {
          unint64_t v18 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v18 = v16;
        }
        __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
        if (v18) {
          uint64_t v19 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v18);
        }
        else {
          uint64_t v19 = 0;
        }
        unint64_t v20 = v19 + v15;
        __v.__first_ = v19;
        __v.__begin_ = v20;
        __v.__end_cap_.__value_ = &v19[v18];
        long long v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        v20->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v20->__r_.__value_.__l.__data_ = v21;
        memset(&__p, 0, sizeof(__p));
        __v.__end_ = v20 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
        uint64_t v22 = *(void *)(a3 + 8);
        std::__split_buffer<std::string>::~__split_buffer(&__v);
        int v23 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        *(void *)(a3 + 8) = v22;
        if (v23 < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v14 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(void *)(v13 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v13 = v14;
        *(void *)(a3 + 8) = v13 + 24;
      }
      if (*(char *)(v39 + 23) < 0) {
        uint64_t v24 = *(void *)(v39 + 8);
      }
      else {
        uint64_t v24 = *(unsigned __int8 *)(v39 + 23);
      }
      std::string::size_type v11 = v24 + v10;
      uint64_t v10 = siri::intelligence::StringFindFirstOf((uint64_t *)a1, &v40, &v39, v24 + v10);
    }
    while (v10 != -1);
  }
  uint64_t v25 = *(unsigned __int8 *)(a1 + 23);
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(a1 + 8);
  }
  if (v11 != v25)
  {
    std::string::basic_string(&__p, (const std::string *)a1, v11, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__v);
    unint64_t v26 = *(void *)(a3 + 16);
    unint64_t v27 = *(void *)(a3 + 8);
    if (v27 >= v26)
    {
      unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)a3) >> 3);
      unint64_t v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a3) >> 3);
      if (2 * v31 > v30) {
        unint64_t v30 = 2 * v31;
      }
      if (v31 >= 0x555555555555555) {
        unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v32 = v30;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a3 + 16);
      if (v32) {
        uint64_t v33 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a3 + 16, v32);
      }
      else {
        uint64_t v33 = 0;
      }
      std::string::size_type v34 = v33 + v29;
      __v.__first_ = v33;
      __v.__begin_ = v34;
      __v.__end_cap_.__value_ = &v33[v32];
      long long v35 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v34->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v34->__r_.__value_.__l.__data_ = v35;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v34 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a3, &__v);
      uint64_t v36 = *(void *)(a3 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      int v37 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      *(void *)(a3 + 8) = v36;
      if (v37 < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v28 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v27 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v27 = v28;
      *(void *)(a3 + 8) = v27 + 24;
    }
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v40;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_239AB7BD8(_Unwind_Exception *__p, uint64_t a2, int a3, __int16 a4, char a5, char a6, uint64_t a7, char a8, char *__pa, uint64_t a10, std::__split_buffer<std::string> *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (SHIBYTE(a11) < 0) {
    operator delete(__pa);
  }
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  __pa = &a13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(__p);
}

uint64_t siri::intelligence::StringFindFirstOf(uint64_t *a1, uint64_t *a2, void *a3, unint64_t a4)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4 != *a2)
  {
    uint64_t v7 = 0;
    unint64_t v8 = -1;
    unint64_t v27 = a4;
    while (1)
    {
      size_t v9 = (char **)(v5 + 24 * v7);
      int v10 = *((char *)a1 + 23);
      if (v10 >= 0) {
        uint64_t v11 = (uint64_t)a1;
      }
      else {
        uint64_t v11 = *a1;
      }
      if (v10 >= 0) {
        unint64_t v12 = *((unsigned __int8 *)a1 + 23);
      }
      else {
        unint64_t v12 = a1[1];
      }
      int v13 = *((char *)v9 + 23);
      if (v13 >= 0) {
        long long v14 = (char *)(v5 + 24 * v7);
      }
      else {
        long long v14 = *v9;
      }
      if (v13 >= 0) {
        int64_t v15 = *((unsigned __int8 *)v9 + 23);
      }
      else {
        int64_t v15 = (int64_t)v9[1];
      }
      if (v12 >= a4)
      {
        unint64_t v16 = a4;
        if (!v15) {
          goto LABEL_26;
        }
        unint64_t v17 = (void *)(v11 + a4);
        unint64_t v18 = (char *)(v11 + v12);
        int64_t v19 = v12 - a4;
        if ((uint64_t)(v12 - a4) >= v15)
        {
          unint64_t v29 = v8;
          uint64_t v30 = v4;
          int v20 = *v14;
          while (1)
          {
            uint64_t v21 = v19 - v15;
            if (v21 == -1 || (uint64_t v22 = (char *)memchr(v17, v20, v21 + 1)) == 0)
            {
LABEL_23:
              a4 = v27;
              unint64_t v8 = v29;
              uint64_t v4 = v30;
              goto LABEL_32;
            }
            int v23 = v22;
            if (!memcmp(v22, v14, v15)) {
              break;
            }
            unint64_t v17 = v23 + 1;
            int64_t v19 = v18 - (v23 + 1);
            if (v19 < v15) {
              goto LABEL_23;
            }
          }
          unint64_t v8 = v29;
          uint64_t v4 = v30;
          if (v23 != v18)
          {
            unint64_t v16 = (unint64_t)&v23[-v11];
            a4 = v27;
LABEL_26:
            if (v16 != -1)
            {
              BOOL v24 = v8 != -1 && v16 >= v8;
              if (!v24) {
                unint64_t v8 = v16;
              }
              if (a3 && !v24)
              {
                *a3 = v9;
                uint64_t v5 = *a2;
                uint64_t v4 = a2[1];
                unint64_t v8 = v16;
              }
            }
            goto LABEL_32;
          }
          a4 = v27;
        }
      }
LABEL_32:
      if (++v7 >= 0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3)) {
        return v8;
      }
    }
  }
  return -1;
}

void siri::intelligence::StringJoin(long long **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if (*a1 == v5)
  {
    std::string::basic_string[abi:ne180100]<0>((void *)a3, "");
  }
  else if ((char *)v5 - (char *)v4 == 24)
  {
    if (*((char *)v4 + 23) < 0)
    {
      int64_t v19 = *(const std::string::value_type **)v4;
      std::string::size_type v20 = *((void *)v4 + 1);
      std::string::__init_copy_ctor_external((std::string *)a3, v19, v20);
    }
    else
    {
      long long v6 = *v4;
      *(void *)(a3 + 16) = *((void *)v4 + 2);
      *(_OWORD *)a3 = v6;
    }
  }
  else
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a3 + 8);
      }
      if (v11)
      {
        int v12 = *(char *)(a2 + 23);
        if (v12 >= 0) {
          int v13 = (const std::string::value_type *)a2;
        }
        else {
          int v13 = *(const std::string::value_type **)a2;
        }
        if (v12 >= 0) {
          std::string::size_type v14 = *(unsigned __int8 *)(a2 + 23);
        }
        else {
          std::string::size_type v14 = *(void *)(a2 + 8);
        }
        std::string::append((std::string *)a3, v13, v14);
        uint64_t v4 = *a1;
      }
      uint64_t v15 = (uint64_t)v4 + v9;
      int v16 = *(char *)(v15 + 23);
      if (v16 >= 0) {
        unint64_t v17 = (const std::string::value_type *)v15;
      }
      else {
        unint64_t v17 = *(const std::string::value_type **)v15;
      }
      if (v16 >= 0) {
        std::string::size_type v18 = *(unsigned __int8 *)(v15 + 23);
      }
      else {
        std::string::size_type v18 = *(void *)(v15 + 8);
      }
      std::string::append((std::string *)a3, v17, v18);
      ++v10;
      uint64_t v4 = *a1;
      v9 += 24;
    }
    while (v10 < 0xAAAAAAAAAAAAAAABLL * (((char *)a1[1] - (char *)*a1) >> 3));
  }
}

void sub_239AB7F60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToUpper(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    uint64_t size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    for (uint64_t i = 0; i != size; ++i)
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v5 = a2;
      }
      else {
        uint64_t v5 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      std::string::value_type v6 = __toupper(v5->__r_.__value_.__s.__data_[i]);
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      v7->__r_.__value_.__s.__data_[i] = v6;
    }
  }
}

void sub_239AB8020(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToCapitalized(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(char *)(a1 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 16);
  }
  if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (size)
  {
    unint64_t v4 = 0;
    BOOL v5 = 1;
    uint64_t v6 = MEMORY[0x263EF8318];
    do
    {
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v7 = a2;
      }
      else {
        uint64_t v7 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      __darwin_ct_rune_t v8 = v7->__r_.__value_.__s.__data_[v4];
      if (v5) {
        std::string::value_type v9 = __toupper(v8);
      }
      else {
        std::string::value_type v9 = __tolower(v8);
      }
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v10 = a2;
      }
      else {
        unint64_t v10 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      v10->__r_.__value_.__s.__data_[v4] = v9;
      if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = (std::string *)a2->__r_.__value_.__r.__words[0];
      }
      unsigned int v12 = v11->__r_.__value_.__s.__data_[v4];
      if ((v12 & 0x80000000) != 0) {
        int v13 = __maskrune(v12, 0x4000uLL);
      }
      else {
        int v13 = *(_DWORD *)(v6 + 4 * v12 + 60) & 0x4000;
      }
      BOOL v5 = v13 != 0;
      if (v4 >= 2)
      {
        uint64_t v14 = (a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
            ? (uint64_t)a2
            : a2->__r_.__value_.__r.__words[0];
        if (*(unsigned char *)(v14 + v4 - 2) == 77 && *(unsigned char *)(v14 + v4 - 1) == 99)
        {
          std::string::value_type v15 = __toupper(*(char *)(v14 + v4));
          if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v16 = a2;
          }
          else {
            int v16 = (std::string *)a2->__r_.__value_.__r.__words[0];
          }
          v16->__r_.__value_.__s.__data_[v4] = v15;
        }
      }
      ++v4;
    }
    while (size != v4);
  }
}

void sub_239AB8188(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToPlural(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  siri::intelligence::StringTrim(" \t\n\r", (const std::string *)a1, &v23);
  if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((unsigned char *)&v23.__r_.__value_.__s + 23)) {
      goto LABEL_3;
    }
LABEL_11:
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)a2, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)a1;
      *(void *)(a2 + 16) = *(void *)(a1 + 16);
    }
    return;
  }
  std::string::size_type size = v23.__r_.__value_.__l.__size_;
  operator delete(v23.__r_.__value_.__l.__data_);
  if (!size) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v4 = *(unsigned __int8 *)(a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a1 + 8);
  }
  std::string::basic_string(&v22, (const std::string *)a1, v4 - 1, 1uLL, (std::allocator<char> *)&v21);
  siri::intelligence::StringToLower((uint64_t)&v22, &v23);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::string::basic_string[abi:ne180100]<0>(&v22, "");
  std::string::basic_string[abi:ne180100]<0>(&v21, "");
  if (*(char *)(a1 + 23) < 0)
  {
    unint64_t v5 = *(void *)(a1 + 8);
    if (v5 <= 1) {
      goto LABEL_24;
    }
  }
  else
  {
    unint64_t v5 = *(unsigned __int8 *)(a1 + 23);
    if (v5 <= 1) {
      goto LABEL_24;
    }
  }
  std::string::basic_string(&__p, (const std::string *)a1, v5 - 2, 1uLL, (std::allocator<char> *)&v24);
  siri::intelligence::StringToLower((uint64_t)&__p, &v20);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  std::string v22 = v20;
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a1 + 8);
  }
  std::string::basic_string(&__p, (const std::string *)a1, v7 - 2, 2uLL, (std::allocator<char> *)&v24);
  siri::intelligence::StringToLower((uint64_t)&__p, &v20);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  std::string v21 = v20;
  *((unsigned char *)&v20.__r_.__value_.__s + 23) = 0;
  v20.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_24:
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v23.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_32;
    }
    int v8 = *v23.__r_.__value_.__l.__data_;
  }
  else
  {
    if (HIBYTE(v23.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_32;
    }
    int v8 = v23.__r_.__value_.__s.__data_[0];
  }
  if (v8 == 115 || v8 == 120 || v8 == 122) {
    goto LABEL_43;
  }
LABEL_32:
  if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) != 2) {
      goto LABEL_40;
    }
    if (LOWORD(v21.__r_.__value_.__l.__data_) != 26723)
    {
      std::string::value_type v9 = &v21;
      goto LABEL_39;
    }
LABEL_43:
    if (*(char *)(a1 + 23) >= 0) {
      size_t v11 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v11 = *(void *)(a1 + 8);
    }
    std::string::basic_string[abi:ne180100](a2, v11 + 2);
    if (*(char *)(a2 + 23) < 0) {
      a2 = *(void *)a2;
    }
    if (v11)
    {
      if (*(char *)(a1 + 23) >= 0) {
        unsigned int v12 = (const void *)a1;
      }
      else {
        unsigned int v12 = *(const void **)a1;
      }
      memmove((void *)a2, v12, v11);
    }
    strcpy((char *)(a2 + v11), "es");
    goto LABEL_71;
  }
  if (v21.__r_.__value_.__l.__size_ != 2) {
    goto LABEL_40;
  }
  std::string::value_type v9 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if (*(_WORD *)v21.__r_.__value_.__l.__data_ == 26723) {
    goto LABEL_43;
  }
LABEL_39:
  if (LOWORD(v9->__r_.__value_.__l.__data_) == 26739) {
    goto LABEL_43;
  }
LABEL_40:
  if ((*((unsigned char *)&v23.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (v23.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_60;
    }
    unint64_t v10 = (std::string *)v23.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (HIBYTE(v23.__r_.__value_.__r.__words[2]) != 1) {
      goto LABEL_60;
    }
    unint64_t v10 = &v23;
  }
  if (v10->__r_.__value_.__s.__data_[0] == 121)
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "aeiou");
    char v13 = siri::intelligence::StringContains(&v20.__r_.__value_.__l.__data_, (char *)&v22);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if ((v13 & 1) == 0)
    {
      uint64_t v16 = *(unsigned __int8 *)(a1 + 23);
      if ((v16 & 0x80u) != 0) {
        uint64_t v16 = *(void *)(a1 + 8);
      }
      std::string::basic_string(&v20, (const std::string *)a1, 0, v16 - 1, (std::allocator<char> *)&__p);
      unint64_t v17 = std::string::append(&v20, "ies");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      *(void *)(a2 + 16) = *((void *)&v17->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
      goto LABEL_71;
    }
  }
LABEL_60:
  if (*(char *)(a1 + 23) >= 0) {
    size_t v14 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    size_t v14 = *(void *)(a1 + 8);
  }
  std::string::basic_string[abi:ne180100](a2, v14 + 1);
  if (*(char *)(a2 + 23) < 0) {
    a2 = *(void *)a2;
  }
  if (v14)
  {
    if (*(char *)(a1 + 23) >= 0) {
      std::string::value_type v15 = (const void *)a1;
    }
    else {
      std::string::value_type v15 = *(const void **)a1;
    }
    memmove((void *)a2, v15, v14);
  }
  *(_WORD *)(a2 + v14) = 115;
LABEL_71:
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_239AB85E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v33 - 41) < 0) {
    operator delete(*(void **)(v33 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_239AB8670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    JUMPOUT(0x239AB8664);
  }
  JUMPOUT(0x239AB8668);
}

void siri::intelligence::StringAbbreviate(std::string *__str@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  if ((SHIBYTE(__str->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(__str->__r_.__value_.__r.__words[2]) <= (unint64_t)a2)
    {
      *a3 = *__str;
      return;
    }
    goto LABEL_5;
  }
  unint64_t size = __str->__r_.__value_.__l.__size_;
  if (size > a2)
  {
LABEL_5:
    std::string::basic_string(&__p, __str, 0, a2 - 3, (std::allocator<char> *)&v9);
    unint64_t v5 = std::string::append(&__p, "...");
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    a3->__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v7 = (const std::string::value_type *)__str->__r_.__value_.__r.__words[0];

  std::string::__init_copy_ctor_external(a3, v7, size);
}

void sub_239AB8760(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringToId(const std::string *a1@<X0>, std::string *a2@<X8>)
{
  siri::intelligence::StringTrim(" \t\n\r", a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  std::string::reserve(a2, size);
  if (size)
  {
    uint64_t v4 = 0;
    char v5 = 0;
    uint64_t v6 = MEMORY[0x263EF8318];
    do
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      char v8 = __tolower(p_p->__r_.__value_.__s.__data_[v4]);
      if (v8 == 95) {
        char v9 = 32;
      }
      else {
        char v9 = v8;
      }
      __darwin_ct_rune_t v10 = v9;
      if (v9 < 0)
      {
        int v12 = __maskrune(v9, 0x4000uLL);
        if (v5 != 95 || !v12)
        {
          int v11 = __maskrune(v10, 0x4000uLL);
LABEL_20:
          if (v11) {
            unsigned int v13 = 95;
          }
          else {
            unsigned int v13 = v10;
          }
          if ((v13 & 0x80000000) != 0)
          {
            if (!__maskrune(v13, 0x100uLL))
            {
              int v15 = 0;
              goto LABEL_28;
            }
          }
          else
          {
            unsigned int v14 = *(_DWORD *)(v6 + 4 * v13 + 60);
            if ((v14 & 0x100) == 0)
            {
              int v15 = (v14 >> 10) & 1;
LABEL_28:
              BOOL v16 = v13 != 95 && v15 == 0;
              char v5 = v10;
              if (v16) {
                goto LABEL_33;
              }
            }
          }
          std::string::push_back(a2, v13);
          char v5 = v13;
          goto LABEL_33;
        }
      }
      else
      {
        int v11 = *(_DWORD *)(v6 + 4 * v9 + 60) & 0x4000;
        if (v5 != 95 || !v11) {
          goto LABEL_20;
        }
      }
      char v5 = 95;
LABEL_33:
      ++v4;
    }
    while (size != v4);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239AB890C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::__split_buffer<std::string>::pointer siri::intelligence::StringVectorAppend(uint64_t a1, long long **a2)
{
  return std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>((long long *)a1, *(void *)(a1 + 8), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
}

uint64_t siri::intelligence::StringDistance(const std::string *a1, std::string *__str)
{
  uint64_t v2 = __str;
  std::string::size_type size = a1->__r_.__value_.__l.__size_;
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v5 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v5 = a1->__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    std::string::size_type v6 = __str->__r_.__value_.__l.__size_;
  }
  if (v5 != v6) {
    goto LABEL_15;
  }
  if (v7 < 0) {
    std::string __str = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    __darwin_ct_rune_t v10 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
    if (memcmp(a1->__r_.__value_.__l.__data_, __str, size))
    {
LABEL_20:
      std::string::__init_copy_ctor_external(&v39, v10, size);
      if ((*((unsigned char *)&v2->__r_.__value_.__s + 23) & 0x80) == 0) {
        goto LABEL_17;
      }
      goto LABEL_21;
    }
    return 0;
  }
  if (!*((unsigned char *)&a1->__r_.__value_.__s + 23)) {
    return 0;
  }
  char v8 = a1;
  uint64_t v9 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  while (v8->__r_.__value_.__s.__data_[0] == __str->__r_.__value_.__s.__data_[0])
  {
    char v8 = (const std::string *)((char *)v8 + 1);
    std::string __str = (std::string *)((char *)__str + 1);
    if (!--v9) {
      return 0;
    }
  }
LABEL_15:
  if ((*((unsigned char *)&a1->__r_.__value_.__s + 23) & 0x80) != 0)
  {
    __darwin_ct_rune_t v10 = (const std::string::value_type *)a1->__r_.__value_.__r.__words[0];
    goto LABEL_20;
  }
  std::string v39 = *a1;
  if ((v7 & 0x80) == 0)
  {
LABEL_17:
    std::string __p = *v2;
    goto LABEL_22;
  }
LABEL_21:
  std::string::__init_copy_ctor_external(&__p, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
LABEL_22:
  int v11 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  char v12 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  int v13 = v39.__r_.__value_.__r.__words[1];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v14 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v14 = v39.__r_.__value_.__l.__size_;
  }
  int v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  int v17 = __p.__r_.__value_.__r.__words[1];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v18 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v18 = __p.__r_.__value_.__l.__size_;
  }
  if (v14 > v18)
  {
    std::string::operator=(&v39, v2);
    std::string::operator=(&__p, a1);
    int v11 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
    int v13 = v39.__r_.__value_.__r.__words[1];
    int v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v17 = __p.__r_.__value_.__r.__words[1];
    char v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    char v12 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  }
  if (v12 >= 0) {
    int v13 = v11;
  }
  if (v16 >= 0) {
    int v19 = v15;
  }
  else {
    int v19 = v17;
  }
  BOOL v20 = v13 < 1 || v19 < 1;
  if (v20)
  {
    int v21 = 0;
    int v22 = v19;
  }
  else
  {
    uint64_t v23 = 0;
    int v24 = 0;
    int v25 = 0;
    uint64_t v26 = v13;
    unint64_t v27 = &v39;
    if (v12 < 0) {
      unint64_t v27 = (std::string *)v39.__r_.__value_.__r.__words[0];
    }
    p_p = &__p;
    if (v16 < 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    do
    {
      if (v25 + 1 > v19) {
        uint64_t v29 = v25 + 1;
      }
      else {
        uint64_t v29 = v19;
      }
      uint64_t v30 = v29 - v25;
      unint64_t v31 = (std::string *)((char *)p_p + v25++);
      while (1)
      {
        int v32 = v31->__r_.__value_.__s.__data_[0];
        unint64_t v31 = (std::string *)((char *)v31 + 1);
        if (v27->__r_.__value_.__s.__data_[v23] == v32) {
          break;
        }
        ++v24;
        ++v25;
        if (!--v30)
        {
          int v25 = v29;
          break;
        }
      }
      ++v23;
    }
    while (v23 < v26 && v19 > v25);
    int v21 = 0;
    int v22 = v19 - v25 + v24;
    do
    {
      int v33 = v19 + v21;
      while (1)
      {
        int v34 = v19 - 1;
        if (v27->__r_.__value_.__s.__data_[v26 - 1] == p_p->__r_.__value_.__s.__data_[v19 - 1]) {
          break;
        }
        ++v21;
        --v19;
        if (!v34)
        {
          int v21 = v33;
          goto LABEL_63;
        }
      }
      if (v26 < 2) {
        break;
      }
      --v26;
      BOOL v20 = v19-- <= 1;
    }
    while (!v20);
    int v19 = v34;
  }
LABEL_63:
  int v35 = v21 + v19;
  if (v22 >= v35) {
    uint64_t v36 = v35;
  }
  else {
    uint64_t v36 = v22;
  }
  if (v16 < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&v39.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_71:
    }
      operator delete(v39.__r_.__value_.__l.__data_);
  }
  else if (v12 < 0)
  {
    goto LABEL_71;
  }
  return v36;
}

void sub_239AB8C20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringEscapeQuotes(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "\\"");
  std::string::basic_string[abi:ne180100]<0>(v8, "\\\\"");
  siri::intelligence::StringReplace(a1, (char *)v10, (uint64_t)v8, 0, &v12);
  std::string::basic_string[abi:ne180100]<0>(v6, "\"");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\\"");
  siri::intelligence::StringReplace((uint64_t)&v12, (char *)v6, (uint64_t)__p, 0, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_239AB8D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringUnescapeQuotes(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string::basic_string[abi:ne180100]<0>(v10, "\\\"");
  std::string::basic_string[abi:ne180100]<0>(v8, "\"");
  siri::intelligence::StringReplace(a1, (char *)v10, (uint64_t)v8, 0, &v12);
  std::string::basic_string[abi:ne180100]<0>(v6, "\\\\"");
  std::string::basic_string[abi:ne180100]<0>(__p, "\\"");
  siri::intelligence::StringReplace((uint64_t)&v12, (char *)v6, (uint64_t)__p, 0, a2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(v10[0]);
  }
}

void sub_239AB8EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v27 - 17) < 0) {
    operator delete(*(void **)(v27 - 40));
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::StringUriEscape(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  BOOL v3 = *((char *)a1 + 23) < 0;
  uint64_t v4 = *((unsigned __int8 *)a1 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = a1[1];
  }
  if (v4)
  {
    unint64_t v6 = 0;
    do
    {
      if (v3) {
        char v7 = (uint64_t *)*a1;
      }
      else {
        char v7 = a1;
      }
      if (*((unsigned __int8 *)v7 + v6) - 65 < 0x1A
        || *((unsigned __int8 *)v7 + v6) - 97 < 0x1A
        || *((unsigned __int8 *)v7 + v6) - 48 < 0xA
        || ((int v8 = *((unsigned __int8 *)v7 + v6), (v8 - 36) <= 0x3B)
          ? (BOOL v9 = ((1 << (v8 - 36)) & 0x800000012C00785) == 0)
          : (BOOL v9 = 1),
            !v9 || v8 == 126))
      {
        std::string::push_back(a2, *((unsigned char *)v7 + v6));
      }
      else
      {
        *(_DWORD *)std::string __str = 0;
        snprintf(__str, 4uLL, "%%%hhx", *((char *)v7 + v6));
        std::string::append(a2, __str);
      }
      ++v6;
      BOOL v3 = *((char *)a1 + 23) < 0;
      unint64_t v10 = *((unsigned __int8 *)a1 + 23);
      if ((v10 & 0x80u) != 0) {
        unint64_t v10 = a1[1];
      }
    }
    while (v6 < v10);
  }
}

void sub_239AB9060(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ParseStringList(uint64_t *a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (*((char *)a1 + 23) >= 0) {
    unint64_t v4 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    unint64_t v4 = a1[1];
  }
  if (v4)
  {
    unint64_t v7 = 0;
    uint64_t v8 = MEMORY[0x263EF8318];
    while (1)
    {
      while (1)
      {
        uint64_t v9 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
        unsigned int v10 = *(char *)(v9 + v7);
        int v11 = (v10 & 0x80000000) != 0 ? __maskrune(v10, 0x4000uLL) : *(_DWORD *)(v8 + 4 * v10 + 60) & 0x4000;
        if (v7 >= v4 || !v11) {
          break;
        }
        ++v7;
      }
      if (v7 >= v4) {
        return;
      }
      memset(&__str, 0, sizeof(__str));
      uint64_t v12 = *((char *)a1 + 23) >= 0 ? (uint64_t)a1 : *a1;
      int v13 = *(unsigned __int8 *)(v12 + v7);
      if (v13 == 39 || v13 == 34) {
        int v14 = *(unsigned __int8 *)(v12 + v7);
      }
      else {
        int v14 = 0;
      }
      int v15 = *(unsigned __int8 *)(v12 + v7);
      if (v15 != 44) {
        break;
      }
      ++v7;
LABEL_72:
      if (v7 >= v4) {
        return;
      }
    }
    std::string::push_back(&__str, v15);
    ++v7;
    while (v7 < v4)
    {
      if (*((char *)a1 + 23) >= 0) {
        char v16 = a1;
      }
      else {
        char v16 = (uint64_t *)*a1;
      }
      int v17 = *((unsigned __int8 *)v16 + v7);
      if (v17 == 39 || v17 == 34)
      {
        if (v14) {
          int v18 = v14;
        }
        else {
          int v18 = *((unsigned __int8 *)v16 + v7);
        }
        if (v14 == *((unsigned __int8 *)v16 + v7)) {
          int v14 = 0;
        }
        else {
          int v14 = v18;
        }
      }
      int v19 = *((unsigned __int8 *)v16 + v7++);
      if (v19 == 44 && v14 == 0) {
        break;
      }
      std::string::push_back(&__str, v19);
    }
    siri::intelligence::StringTrim(" \t\n\r", &__str, &v29);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v29;
    if (a2 == 1)
    {
      LOBYTE(size) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__str.__r_.__value_.__l.__size_)
        {
          int v22 = *__str.__r_.__value_.__l.__data_;
LABEL_51:
          if (v22 == 34 || v22 == 39)
          {
            std::string::basic_string(&v29, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v31);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string __str = v29;
            LOBYTE(size) = *((unsigned char *)&v29.__r_.__value_.__s + 23);
          }
          std::string::size_type size = size;
          if ((size & 0x80u) == 0)
          {
            p_str = &__str;
          }
          else
          {
            std::string::size_type size = __str.__r_.__value_.__l.__size_;
            p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          std::string::size_type v24 = size - 1;
          int v25 = p_str->__r_.__value_.__s.__data_[size - 1];
          if (v25 == 39 || v25 == 34)
          {
            std::string::basic_string(&v29, &__str, 0, v24, (std::allocator<char> *)&v31);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string __str = v29;
          }
        }
      }
      else if (*((unsigned char *)&__str.__r_.__value_.__s + 23))
      {
        int v22 = __str.__r_.__value_.__s.__data_[0];
        goto LABEL_51;
      }
    }
    unint64_t v26 = a3[1];
    if (v26 >= a3[2])
    {
      uint64_t v28 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a3, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)a3[1], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v27 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        *(void *)(v26 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v26 = v27;
      }
      uint64_t v28 = v26 + 24;
      a3[1] = v26 + 24;
    }
    a3[1] = v28;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    goto LABEL_72;
  }
}

void sub_239AB9388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  v18[1] = v19;
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100](std::regex_traits<char> *a1, const char *a2, int a3)
{
  char v5 = std::regex_traits<char>::regex_traits(a1);
  LODWORD(v5[1].__loc_.__locale_) = a3;
  *(_OWORD *)((char *)&v5[1].__loc_.__locale_ + 4) = 0u;
  *(_OWORD *)((char *)&v5[1].__col_ + 4) = 0u;
  HIDWORD(v5[2].__ct_) = 0;
  strlen(a2);
  std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>();
}

void sub_239AB944C(_Unwind_Exception *a1)
{
  locale = (std::__shared_weak_count *)v1[6].__locale_;
  if (locale) {
    std::__shared_weak_count::__release_shared[abi:ne180100](locale);
  }
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  uint64_t v2 = (const std::locale *)MEMORY[0x23ECAABC0]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x263F8C108]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x263F8C130]);
  return this;
}

void sub_239AB94B8(_Unwind_Exception *a1)
{
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>()
{
}

void sub_239AB968C(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 17);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AB9704(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::shared_ptr<std::__empty_state<char>>::reset[abi:ne180100]<std::__empty_state<char>,void>(uint64_t a1, uint64_t a2)
{
  std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(&v2, a2);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unint64_t v7 = a2;
  do
  {
    uint64_t v8 = v7;
    unint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2) {
    operator new();
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124) {
      return (char *)v8;
    }
    uint64_t v9 = a1->__end_;
    unsigned int v10 = v8 + 1;
    int v11 = v8 + 1;
    do
    {
      uint64_t v8 = v11;
      int v11 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, (char *)v11, a3);
    }
    while (v11 != v8);
    if (v8 == v10) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return (char *)a2;
  }
  unint64_t v4 = (char *)a3;
  if (*a2 == 94)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)v4)
  {
    do
    {
      unint64_t v6 = v3;
      BOOL v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(this, (char *)v3, v4);
    }
    while (v3 != v6);
    if (v6 != (unsigned __int8 *)v4)
    {
      if (v6 + 1 != (unsigned __int8 *)v4 || *v6 != 36) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    }
  }
  return v4;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  BOOL v3 = a3;
  std::vector<std::string>::pointer end = a1->__end_;
  unint64_t v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2) {
LABEL_9:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  uint64_t v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124) {
      return (std::basic_regex<char> *)v8;
    }
    uint64_t v9 = a1->__end_;
    unsigned int v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (std::basic_regex<char> *)(v8 + 1), v3);
    if (v10 == v8 + 1) {
      goto LABEL_9;
    }
    uint64_t v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_grep<char const*>(std::basic_regex<char> *a1, unsigned __int8 *__s, unsigned __int8 *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unint64_t v7 = (unsigned __int8 *)memchr(__s, 10, a3 - __s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    int v11 = v8 == a3 ? v8 : v8 + 1;
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (unsigned __int8 *)memchr(v11, 10, a3 - v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    unsigned int v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_egrep<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *__s, std::basic_regex<char> *a3)
{
  std::vector<std::string>::pointer end = a1->__end_;
  unint64_t v7 = (std::basic_regex<char> *)memchr(__s, 10, (char *)a3 - (char *)__s);
  if (v7) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = a3;
  }
  if (v8 == __s) {
    operator new();
  }
  std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, __s, v8);
  while (1)
  {
    int v11 = v8 == a3 ? v8 : (std::basic_regex<char> *)((char *)&v8->__traits_.__loc_.__locale_ + 1);
    if (v11 == a3) {
      break;
    }
    uint64_t v9 = (std::basic_regex<char> *)memchr(v11, 10, (char *)a3 - (char *)v11);
    if (v9) {
      uint64_t v8 = v9;
    }
    else {
      uint64_t v8 = a3;
    }
    unsigned int v10 = a1->__end_;
    if (v8 == v11) {
      operator new();
    }
    std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, v11, v8);
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v10);
  }
  return a3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 14);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AB9D28(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::shared_ptr<std::__empty_state<char>>::shared_ptr[abi:ne180100]<std::__empty_state<char>,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_239AB9DD0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__split_buffer<std::string>::pointer first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }
}

{
  std::__node<char> *first;
  uint64_t vars8;

  std::__split_buffer<std::string>::pointer first = this->__first_;
  if (first) {
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  }

  JUMPOUT(0x23ECAACC0);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(a1, a2, a3);
  if (result == (unsigned __int8 *)a2)
  {
    std::vector<std::string>::pointer end = a1->__end_;
    unsigned int marked_count = a1->__marked_count_;
    uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(a1, a2, a3);
    uint64_t result = (unsigned __int8 *)a2;
    if (v9 != (unsigned __int8 *)a2)
    {
      size_t v10 = a1->__marked_count_ + 1;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v10);
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_assertion<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v6 = *a2;
  if (v6 <= 91)
  {
    if (v6 != 36)
    {
      BOOL v8 = v6 == 40;
      unint64_t v7 = a2 + 1;
      BOOL v8 = !v8 || v7 == a3;
      if (!v8)
      {
        BOOL v8 = *v7 == 63;
        uint64_t v9 = a2 + 2;
        if (v8 && v9 != a3)
        {
          int v11 = *v9;
          if (v11 == 33)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int marked_count = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 1, this->__marked_count_);
            this->__marked_count_ += marked_count;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
            goto LABEL_31;
          }
          if (v11 == 61)
          {
            std::regex_traits<char>::regex_traits(&v18.__traits_);
            memset(&v18.__flags_, 0, 40);
            v18.__flags_ = this->__flags_;
            uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v18, v3 + 3, a3);
            unsigned int v13 = v18.__marked_count_;
            std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v18, 0, this->__marked_count_);
            this->__marked_count_ += v13;
            if (v12 == a3 || *v12 != 41) {
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
            }
LABEL_31:
            BOOL v3 = v12 + 1;
            std::basic_regex<char,std::regex_traits<char>>::~basic_regex(&v18.__traits_.__loc_);
            return v3;
          }
        }
      }
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(this);
    return ++v3;
  }
  if (v6 != 92)
  {
    if (v6 != 94) {
      return v3;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(this);
    return ++v3;
  }
  if (a2 + 1 != a3)
  {
    int v15 = a2[1];
    if (v15 == 66)
    {
      BOOL v16 = 1;
    }
    else
    {
      if (v15 != 98) {
        return v3;
      }
      BOOL v16 = 0;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v16);
    v3 += 2;
  }
  return v3;
}

void sub_239ABA45C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  BOOL v3 = a2;
  if (a2 == a3) {
    return (unsigned __int8 *)v3;
  }
  int v6 = *a2;
  if (v6 <= 62)
  {
    if (v6 != 40)
    {
      if (v6 == 46) {
        operator new();
      }
      if ((v6 - 42) >= 2) {
        goto LABEL_28;
      }
LABEL_34:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    }
    if (a2 + 1 != a3)
    {
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        p_open_count = &this->__open_count_;
        ++this->__open_count_;
        uint64_t v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
        if (v9 == a3) {
          goto LABEL_35;
        }
        size_t v10 = v9;
        if (*v9 != 41) {
          goto LABEL_35;
        }
        goto LABEL_25;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      unsigned int marked_count = this->__marked_count_;
      p_open_count = &this->__open_count_;
      ++this->__open_count_;
      uint64_t v12 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, v3 + 1, a3);
      if (v12 != a3)
      {
        size_t v10 = v12;
        if (*v12 == 41)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, marked_count);
LABEL_25:
          --*p_open_count;
          return (unsigned __int8 *)(v10 + 1);
        }
      }
    }
LABEL_35:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
  }
  if (v6 <= 91)
  {
    if (v6 == 91)
    {
      return (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    }
    if (v6 == 63) {
      goto LABEL_34;
    }
LABEL_28:
    return std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(this, a2, a3);
  }
  if (v6 != 92)
  {
    if (v6 == 123) {
      goto LABEL_34;
    }
    goto LABEL_28;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(this, (unsigned __int8 *)a2, (unsigned __int8 *)a3);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  if (a2 == a3) {
    return a2;
  }
  unsigned int v6 = a6;
  unsigned int v7 = a5;
  uint64_t v10 = a1;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  int v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      unsigned int v13 = a2 + 1;
      if (v11) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = v13 == a3;
      }
      if (!v20 && *v13 == 63)
      {
        unsigned int v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        size_t v14 = 0;
        size_t v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      size_t v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123) {
      return a2;
    }
    int v15 = a2 + 1;
    BOOL v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a1, a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        int v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            unsigned int v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              unsigned int v13 = v16 + 2;
              size_t v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              size_t v18 = (int)__max;
LABEL_33:
              int v21 = __s;
              BOOL v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            size_t v18 = (int)__max;
LABEL_45:
            int v21 = __s;
            BOOL v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        uint64_t v23 = v16 + 1;
        if (v16 + 1 == a3) {
          goto LABEL_58;
        }
        if (*v23 == 125)
        {
          unsigned int v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            unsigned int v13 = v16 + 3;
            size_t v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          size_t v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          size_t v18 = -1;
          goto LABEL_45;
        }
        int v27 = -1;
        int v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v10, v23, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          size_t v18 = v27;
          size_t v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            unsigned int v13 = v25 + 1;
            BOOL v22 = 1;
            if (!v11 && v13 != a3)
            {
              int v26 = v25[1];
              BOOL v22 = v26 != 63;
              if (v26 == 63) {
                unsigned int v13 = v25 + 2;
              }
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            int v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    unsigned int v13 = a2 + 1;
    if (v11) {
      BOOL v19 = 1;
    }
    else {
      BOOL v19 = v13 == a3;
    }
    if (!v19 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    unsigned int v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      unsigned int v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      size_t v14 = 1;
LABEL_26:
      size_t v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    size_t v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(std::basic_regex<char> *this)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
}

void sub_239ABABE8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10E1C4030FC3181);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 6);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABAC50(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  long long v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 92))
  {
    if (*(void *)(a2 + 16) != *(void *)(a2 + 8) || (*(unsigned char *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      uint64_t v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(unsigned char *)(result + 16)) {
      goto LABEL_12;
    }
    int v2 = *(unsigned __int8 *)(*(void *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10) {
      goto LABEL_12;
    }
  }
  *(_DWORD *)a2 = -994;
  uint64_t v4 = *(void *)(result + 8);
LABEL_13:
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(unsigned char *)(a2 + 88) & 2) == 0
    || *(unsigned char *)(result + 16) && ((v3 = *v2, v3 != 13) ? (BOOL v4 = v3 == 10) : (BOOL v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    uint64_t v5 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29690;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29690;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  int v2 = *(unsigned __int8 **)(a2 + 8);
  int v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3) {
    goto LABEL_17;
  }
  BOOL v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(unsigned char *)(a2 + 88) & 8) == 0)
    {
      uint64_t v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    int v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    int v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        uint64_t v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          int v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  uint64_t v7 = *(v4 - 1);
  uint64_t v8 = *v4;
  int v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  int v11 = v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(void *)(*(void *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  int v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    uint64_t v12 = 0;
    int v13 = -993;
  }
  else
  {
    uint64_t v12 = *(void *)(result + 8);
    int v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v12;
  return result;
}

uint64_t std::__lookahead<char,std::regex_traits<char>>::__lookahead[abi:ne180100](uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5)
{
  *(void *)a1 = &unk_26ED296D8;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(_OWORD *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 40);
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 72) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a5;
  *(unsigned char *)(a1 + 84) = a3;
  return a1;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26ED296D8;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26ED296D8;
  int v2 = (std::locale *)(a1 + 2);
  int v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::locale::~locale(v2);
  BOOL v4 = a1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }

  JUMPOUT(0x23ECAACC0);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  char v21 = 0;
  memset(&v22, 0, 17);
  char v23 = 0;
  uint64_t v24 = 0;
  memset(&__p, 0, sizeof(__p));
  std::vector<std::csub_match>::size_type v4 = (*(_DWORD *)(a1 + 44) + 1);
  uint64_t v5 = *(void *)(a2 + 16);
  v18.std::__split_buffer<std::string>::pointer first = *(const char **)(a2 + 24);
  v18.second = v18.first;
  v18.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&__p, v4, &v18);
  uint64_t v19 = v5;
  uint64_t v20 = v5;
  char v21 = 0;
  std::vector<std::csub_match>::value_type v22 = v18;
  uint64_t v24 = v5;
  char v23 = 1;
  uint64_t v6 = *(const char **)(a2 + 16);
  if (*(unsigned char *)(a2 + 92)) {
    BOOL v7 = v6 == *(const char **)(a2 + 8);
  }
  else {
    BOOL v7 = 0;
  }
  char v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
    begiuint64_t n = __p.__begin_;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(a1 + 8);
  begiuint64_t n = __p.__begin_;
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!begin) {
      return;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a2 + 32);
  unint64_t v14 = 1;
  do
  {
    int v15 = &begin[v14];
    uint64_t v16 = v13 + 24 * (v12 + v11);
    *(std::pair<const char *, const char *> *)uint64_t v16 = v15->std::pair<const char *, const char *>;
    *(unsigned char *)(v16 + 16) = v15->matched;
    unint64_t v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  __p.__end_ = begin;
  operator delete(begin);
}

void sub_239ABB4AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<char const*>::__init(std::match_results<const char *> *this, unsigned int __s, const char *__f, const char *__l, BOOL __no_update_pos)
{
  this->__unmatched_.std::__split_buffer<std::string>::pointer first = __l;
  p_unmatched = &this->__unmatched_;
  this->__unmatched_.second = __l;
  this->__unmatched_.matched = 0;
  std::vector<std::sub_match<char const*>>::assign(&this->__matches_, __s, &this->__unmatched_);
  this->__prefix_.std::__split_buffer<std::string>::pointer first = __f;
  this->__prefix_.second = __f;
  this->__prefix_.matched = 0;
  this->__suffix_ = *p_unmatched;
  if (!__no_update_pos) {
    this->__position_start_ = __f;
  }
  this->__ready_ = 1;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v41 = 0;
  unint64_t v42 = 0;
  unint64_t v43 = 0;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.std::__split_buffer<std::string>::pointer first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)int v37 = 0;
    memset(&v37[8], 0, 48);
    *(_OWORD *)std::vector<std::csub_match> __p = 0u;
    memset(v39, 0, 21);
    unint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v37[32])
    {
      *(void *)&v37[40] = *(void *)&v37[32];
      operator delete(*(void **)&v37[32]);
    }
    int v35 = a4;
    int v12 = v42;
    *((_DWORD *)v42 - 24) = 0;
    *((void *)v12 - 11) = a2;
    *((void *)v12 - 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
    *((void *)v12 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v42 - 40), *(unsigned int *)(a1 + 32));
    uint64_t v13 = v42;
    *((void *)v42 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *((unsigned char *)v13 - 4) = a6;
    unsigned int v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) == 0 && (int)(v14 >> 12) >= (int)a3 - (int)a2) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      uint64_t v16 = v13 - 1;
      uint64_t v15 = *((void *)v13 - 2);
      int v17 = v13 - 6;
      if (v15) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v15 + 16))(v15, v13 - 6);
      }
      switch(*(_DWORD *)v17)
      {
        case 0xFFFFFC18:
          std::vector<std::csub_match>::value_type v18 = (const char *)*((void *)v13 - 10);
          if ((a5 & 0x20) != 0 && v18 == a2 || (a5 & 0x1000) != 0 && v18 != a3) {
            goto LABEL_16;
          }
          uint64_t v26 = *v35;
          *(void *)uint64_t v26 = a2;
          *(void *)(v26 + 8) = v18;
          *(unsigned char *)(v26 + 16) = 1;
          uint64_t v27 = *((void *)v13 - 8);
          uint64_t v28 = *((void *)v13 - 7) - v27;
          if (v28)
          {
            unint64_t v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
            uint64_t v30 = (unsigned char *)(v27 + 16);
            unsigned int v31 = 1;
            do
            {
              uint64_t v32 = v26 + 24 * v31;
              *(_OWORD *)uint64_t v32 = *((_OWORD *)v30 - 1);
              char v33 = *v30;
              v30 += 24;
              *(unsigned char *)(v32 + 16) = v33;
            }
            while (v29 > v31++);
          }
          uint64_t v6 = 1;
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_23;
        case 0xFFFFFC1F:
LABEL_16:
          uint64_t v19 = v42 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v43, (void *)v42 - 12);
          unint64_t v42 = v19;
          goto LABEL_23;
        case 0xFFFFFC20:
          long long v20 = *(v13 - 5);
          *(_OWORD *)int v37 = *v17;
          *(_OWORD *)&v37[16] = v20;
          memset(&v37[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v37[32], *((long long **)v13 - 8), *((long long **)v13 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v13 - 7) - *((void *)v13 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v39[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v13 - 5), *((long long **)v13 - 4), (uint64_t)(*((void *)v13 - 4) - *((void *)v13 - 5)) >> 4);
          uint64_t v21 = *v16;
          *(void *)((char *)&v39[1] + 5) = *(void *)((char *)v13 - 11);
          v39[1] = v21;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v16 + 24))(*v16, 1, v13 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v39[1] + 24))(v39[1], 0, v37);
          std::vector<std::csub_match>::value_type v22 = v42;
          if ((unint64_t)v42 >= v43)
          {
            unint64_t v42 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v41, (uint64_t)v37);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v23 = *(_OWORD *)&v37[16];
            *unint64_t v42 = *(_OWORD *)v37;
            v22[1] = v23;
            *((void *)v22 + 4) = 0;
            *((void *)v22 + 5) = 0;
            *((void *)v22 + 6) = 0;
            *((void *)v22 + 7) = 0;
            v22[2] = *(_OWORD *)&v37[32];
            *((void *)v22 + 6) = *(void *)&v37[48];
            memset(&v37[32], 0, 24);
            *((void *)v22 + 8) = 0;
            *((void *)v22 + 9) = 0;
            *(_OWORD *)((char *)v22 + 56) = *(_OWORD *)__p;
            *((void *)v22 + 9) = v39[0];
            __p[0] = 0;
            __p[1] = 0;
            v39[0] = 0;
            uint64_t v24 = v39[1];
            *(void *)((char *)v22 + 85) = *(void *)((char *)&v39[1] + 5);
            *((void *)v22 + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v24;
            unint64_t v42 = v22 + 6;
          }
          if (*(void *)&v37[32])
          {
            *(void *)&v37[40] = *(void *)&v37[32];
            operator delete(*(void **)&v37[32]);
          }
LABEL_23:
          uint64_t v13 = v42;
          ++v14;
          if (v41 != v42) {
            continue;
          }
          uint64_t v6 = 0;
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  *(void *)int v37 = &v41;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v37);
  return v6;
}

void sub_239ABB930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  std::__state<char>::~__state(&a13);
  a13 = v18 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  value = this->__end_cap_.__value_;
  begiuint64_t n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    std::vector<std::csub_match>::pointer end = this->__end_;
    std::vector<std::csub_match>::size_type v16 = end - begin;
    if (v16 >= __n) {
      std::vector<std::csub_match>::size_type v17 = __n;
    }
    else {
      std::vector<std::csub_match>::size_type v17 = end - begin;
    }
    if (v17)
    {
      uint64_t v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      uint64_t v19 = &end[__n - v16];
      std::vector<std::csub_match>::size_type v20 = 24 * __n - 24 * v16;
      do
      {
        std::pair<const char *, const char *> v21 = __u->std::pair<const char *, const char *>;
        *(void *)&end->matched = *(void *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    std::vector<std::csub_match>::size_type v9 = 2 * v8;
    if (2 * v8 <= __n) {
      std::vector<std::csub_match>::size_type v9 = __n;
    }
    if (v8 >= 0x555555555555555) {
      unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v10 = v9;
    }
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    std::vector<std::csub_match>::pointer v11 = this->__end_;
    int v12 = &v11[__n];
    std::vector<std::csub_match>::size_type v13 = 24 * __n;
    do
    {
      std::pair<const char *, const char *> v14 = __u->std::pair<const char *, const char *>;
      *(void *)&v11->matched = *(void *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]()
{
}

void *std::__state<char>::~__state(void *a1)
{
  int v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  int v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::size_type v3 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v4 = __sz >= v3;
  std::vector<std::csub_match>::size_type v5 = __sz - v3;
  if (v5 != 0 && v4)
  {
    std::vector<std::sub_match<char const*>>::__append(this, v5, __x);
  }
  else if (!v4)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<std::pair<unsigned long,char const*>>::__append(this, __sz - v2);
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 12);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABBC88(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 16);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABBCE0(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x2AAAAAAAAAAAAAALL) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x155555555555555) {
    unint64_t v9 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  v16[4] = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  std::vector<std::csub_match>::pointer v11 = &v10[96 * v4];
  v16[0] = v10;
  v16[1] = v11;
  v16[3] = &v10[96 * v9];
  long long v12 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)std::vector<std::csub_match>::pointer v11 = *(_OWORD *)a2;
  *((_OWORD *)v11 + 1) = v12;
  *((void *)v11 + 5) = 0;
  *((void *)v11 + 6) = 0;
  *((void *)v11 + 4) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((void *)v11 + 6) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *((void *)v11 + 7) = 0;
  *((void *)v11 + 8) = 0;
  *((void *)v11 + 9) = 0;
  *(_OWORD *)(v11 + 56) = *(_OWORD *)(a2 + 56);
  *((void *)v11 + 9) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v13 = *(void *)(a2 + 80);
  *(void *)(v11 + 85) = *(void *)(a2 + 85);
  *((void *)v11 + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v13;
  uint64_t v16[2] = v11 + 96;
  std::vector<std::__state<char>>::__swap_out_circular_buffer(a1, v16);
  uint64_t v14 = a1[1];
  std::__split_buffer<std::__state<char>>::~__split_buffer(v16);
  return v14;
}

void sub_239ABBE30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::__state<char>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::__state<char>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::__state<char>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>,std::reverse_iterator<std::__state<char>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  uint64_t v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    do
    {
      long long v8 = *(_OWORD *)(a3 - 80);
      *(_OWORD *)(v7 - 96) = *(_OWORD *)(a3 - 96);
      *(_OWORD *)(v7 - 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8;
      *(void *)(v7 - 56) = 0;
      *(void *)(v7 - 48) = 0;
      *(void *)(v7 - 64) = 0;
      *(_OWORD *)(v7 - 64) = *(_OWORD *)(a3 - 64);
      *(void *)(v7 - 48) = *(void *)(a3 - 48);
      *(void *)(a3 - 64) = 0;
      *(void *)(a3 - 56) = 0;
      *(void *)(a3 - 48) = 0;
      *(void *)(v7 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
      *(void *)(v7 - 32) = 0;
      *(void *)(v7 - 24) = 0;
      *(_OWORD *)(v7 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(_OWORD *)(a3 - 40);
      *(void *)(v7 - 24) = *(void *)(a3 - 24);
      *(void *)(a3 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 24) = 0;
      uint64_t v9 = *(void *)(a3 - 16);
      *(void *)(v7 - 11) = *(void *)(a3 - 11);
      *(void *)(v7 - 16) = v9;
      uint64_t v7 = *((void *)&v15 + 1) - 96;
      *((void *)&v15 + 1) -= 96;
      a3 -= 96;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::__state<char>>,std::reverse_iterator<std::__state<char>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void **)(a1[2] + 8);
  std::vector<std::pair<unsigned long, const char *>>::size_type v2 = *(void **)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<std::__state<char>>::destroy[abi:ne180100](v3, v1);
      v1 += 12;
    }
    while (v1 != v2);
  }
}

void std::allocator<std::__state<char>>::destroy[abi:ne180100](uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[7];
  if (v3)
  {
    a2[8] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[4];
  if (v4)
  {
    a2[5] = v4;
    operator delete(v4);
  }
}

void **std::__split_buffer<std::__state<char>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::__state<char>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    std::allocator<std::__state<char>>::destroy[abi:ne180100](v4, (void *)(i - 96));
  }
}

void std::vector<std::sub_match<char const*>>::__append(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v7 = value;
  uint64_t v9 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v9) >> 3) >= __n)
  {
    if (__n)
    {
      long long v15 = &v9[__n];
      std::vector<std::csub_match>::size_type v16 = 24 * __n;
      do
      {
        std::pair<const char *, const char *> v17 = __x->std::pair<const char *, const char *>;
        *(void *)&v9->matched = *(void *)&__x->matched;
        v9->std::pair<const char *, const char *> = v17;
        ++v9;
        v16 -= 24;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    this->__end_ = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)this->__begin_) >> 3);
    unint64_t v11 = v10 + __n;
    if (v10 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v13);
    }
    else {
      long long v14 = 0;
    }
    uint64_t v18 = (std::sub_match<const char *> *)&v14[24 * v10];
    uint64_t v19 = &v18[__n];
    std::vector<std::csub_match>::size_type v20 = 24 * __n;
    std::pair<const char *, const char *> v21 = v18;
    do
    {
      std::pair<const char *, const char *> v22 = __x->std::pair<const char *, const char *>;
      v21[1].std::__split_buffer<std::string>::pointer first = *(const char **)&__x->matched;
      *std::pair<const char *, const char *> v21 = v22;
      std::pair<const char *, const char *> v21 = (std::pair<const char *, const char *> *)((char *)v21 + 24);
      v20 -= 24;
    }
    while (v20);
    long long v23 = (std::sub_match<const char *> *)&v14[24 * v13];
    begiuint64_t n = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<const char *, const char *> v26 = end[-1].std::pair<const char *, const char *>;
        *(void *)&v18[-1].matched = *(void *)&end[-1].matched;
        v18[-1].std::pair<const char *, const char *> = v26;
        --v18;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v23;
    if (end)
    {
      operator delete(end);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::__append(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (__n <= value - v7)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 16 * __n);
      v7 += __n;
    }
    this->__end_ = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (char *)this->__begin_;
    unint64_t v9 = __n + (v8 >> 4);
    if (v9 >> 60) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = (char *)v5 - (char *)this->__begin_;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)p_end_cap, v12);
    }
    else {
      unint64_t v13 = 0;
    }
    long long v14 = (std::pair<unsigned long, const char *> *)&v13[16 * v10];
    long long v15 = (std::pair<unsigned long, const char *> *)&v13[16 * v12];
    bzero(v14, 16 * __n);
    std::vector<std::csub_match>::size_type v16 = &v14[__n];
    begiuint64_t n = this->__begin_;
    std::vector<std::csub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        v14[-1] = end[-1];
        --v14;
        --end;
      }
      while (end != begin);
      std::vector<std::csub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v15;
    if (end)
    {
      operator delete(end);
    }
  }
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(void *)(v7 + 16) = *((void *)a2 + 2);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 24;
      a2 = (long long *)((char *)a2 + 24);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_239ABC454(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_239ABC4C8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_atom_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3 || *a2 != 92) {
    return a2;
  }
  uint64_t v5 = a2 + 1;
  if (a2 + 1 == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(a1, a2 + 1, a3);
  if (result == v5)
  {
    uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(a1, (char *)a2 + 1, (char *)a3);
    if (result == v5)
    {
      uint64_t result = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, (std::basic_regex<char> *)(a2 + 1), (std::basic_regex<char> *)a3, 0);
      if (result == v5) {
        return a2;
      }
    }
  }
  return result;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3) {
      goto LABEL_20;
    }
    uint64_t v5 = a2[1] == 94 ? a2 + 2 : a2 + 1;
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if (v5 == a3) {
      goto LABEL_20;
    }
    uint64_t v7 = (uint64_t *)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if (v5 == a3) {
      goto LABEL_20;
    }
    do
    {
      long long v8 = v5;
      uint64_t v5 = std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(a1, v5, a3, v7);
    }
    while (v5 != v8);
    if (v8 == a3) {
      goto LABEL_20;
    }
    if (*v8 == 45)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v7, 45);
      ++v8;
    }
    if (v8 == a3 || *v8 != 93) {
LABEL_20:
    }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
    return v8 + 1;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  if ((this->__flags_ & 2) == 0) {
    operator new();
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 11);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABC8BC(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_pattern_character<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3)
  {
    int v4 = (char)*a2;
    BOOL v5 = (v4 - 36) > 0x3A || ((1 << (*a2 - 36)) & 0x7800000080004F1) == 0;
    if (v5 && (v4 - 123) >= 3)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      ++v3;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 3);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABCA80(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_decimal_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 == a3) {
    return a2;
  }
  int v4 = *a2;
  unsigned int v5 = v4 - 48;
  if (v4 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
    return a2 + 1;
  }
  if ((v4 - 49) > 8) {
    return a2;
  }
  uint64_t v6 = a3;
  uint64_t v7 = a2 + 1;
  if (a2 + 1 != a3)
  {
    while (1)
    {
      int v8 = *v7;
      if ((v8 - 48) > 9) {
        break;
      }
      if (v5 >= 0x19999999) {
        goto LABEL_16;
      }
      ++v7;
      unsigned int v5 = v8 + 10 * v5 - 48;
      if (v7 == a3) {
        goto LABEL_12;
      }
    }
    uint64_t v6 = v7;
LABEL_12:
    if (!v5) {
      goto LABEL_16;
    }
  }
  if (v5 > a1->__marked_count_) {
LABEL_16:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(a1, v5);
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_character_class_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = *a2;
  if (v4 > 99)
  {
    if (v4 == 119)
    {
      BOOL v5 = 0;
      goto LABEL_15;
    }
    if (v4 == 115)
    {
      BOOL v9 = 0;
      goto LABEL_17;
    }
    if (v4 != 100) {
      return v3;
    }
    BOOL v6 = 0;
LABEL_12:
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v6);
    int v8 = started->__mask_ | 0x400;
LABEL_18:
    started->__mask_ = v8;
    goto LABEL_19;
  }
  switch(v4)
  {
    case 'D':
      BOOL v6 = 1;
      goto LABEL_12;
    case 'S':
      BOOL v9 = 1;
LABEL_17:
      started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v9);
      int v8 = started->__mask_ | 0x4000;
      goto LABEL_18;
    case 'W':
      BOOL v5 = 1;
LABEL_15:
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(a1, v5);
      v10->__mask_ |= 0x500u;
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v10, 95);
LABEL_19:
      ++v3;
      break;
  }
  return v3;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4)
{
  int v4 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    if (locale_low > 109)
    {
      switch(LOBYTE(this->__traits_.__loc_.__locale_))
      {
        case 'n':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 10;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 10;
          goto LABEL_57;
        case 'r':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 13;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 13;
          goto LABEL_57;
        case 't':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 9;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 9;
          goto LABEL_57;
        case 'u':
          if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) != a3)
          {
            int v8 = BYTE1(this->__traits_.__loc_.__locale_);
            if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
            {
              int v4 = (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2);
              if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 2) != a3)
              {
                int v9 = LOBYTE(v4->__traits_.__loc_.__locale_);
                if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38 || (v9 | 0x20u) - 97 < 6) {
                  goto LABEL_23;
                }
              }
            }
          }
          goto LABEL_62;
        case 'v':
          if (a4)
          {
            BOOL v6 = a4;
            std::basic_regex<char>::value_type locale = 11;
            goto LABEL_48;
          }
          std::basic_regex<char>::value_type locale = 11;
          break;
        case 'x':
LABEL_23:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 1) == a3) {
            goto LABEL_62;
          }
          char v10 = BYTE1(v4->__traits_.__loc_.__locale_);
          char v11 = -48;
          if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38) {
            goto LABEL_28;
          }
          v10 |= 0x20u;
          if ((v10 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v11 = -87;
LABEL_28:
          if ((std::basic_regex<char> *)((char *)&v4->__traits_.__loc_.__locale_ + 2) == a3) {
            goto LABEL_62;
          }
          char v12 = BYTE2(v4->__traits_.__loc_.__locale_);
          char v13 = -48;
          if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38) {
            goto LABEL_33;
          }
          v12 |= 0x20u;
          if ((v12 - 97) >= 6u) {
            goto LABEL_62;
          }
          char v13 = -87;
LABEL_33:
          std::string::value_type v14 = v12 + 16 * (v10 + v11) + v13;
          if (a4) {
            std::string::operator=(a4, v14);
          }
          else {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v14);
          }
          return (std::basic_regex<char> *)((char *)v4 + 3);
        default:
          goto LABEL_43;
      }
      goto LABEL_57;
    }
    if (locale_low == 48)
    {
      if (a4)
      {
        BOOL v6 = a4;
        std::basic_regex<char>::value_type locale = 0;
        goto LABEL_48;
      }
      std::basic_regex<char>::value_type locale = 0;
LABEL_57:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, locale);
      return (std::basic_regex<char> *)((char *)v4 + 1);
    }
    if (locale_low != 99)
    {
      if (locale_low == 102)
      {
        if (a4)
        {
          BOOL v6 = a4;
          std::basic_regex<char>::value_type locale = 12;
LABEL_48:
          std::string::operator=(v6, locale);
          return (std::basic_regex<char> *)((char *)v4 + 1);
        }
        std::basic_regex<char>::value_type locale = 12;
        goto LABEL_57;
      }
LABEL_43:
      uint64_t v17 = LOBYTE(this->__traits_.__loc_.__locale_);
      if (v17 != 95 && ((v17 & 0x80) != 0 || (a1->__traits_.__ct_->__tab_[v17] & 0x500) == 0))
      {
        std::basic_regex<char>::value_type locale = (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_;
        if (a4)
        {
          BOOL v6 = a4;
          goto LABEL_48;
        }
        goto LABEL_57;
      }
LABEL_62:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if ((std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1) == a3) {
      goto LABEL_62;
    }
    char v15 = BYTE1(this->__traits_.__loc_.__locale_);
    if (((v15 & 0xDF) - 65) > 0x19u) {
      goto LABEL_62;
    }
    std::string::value_type v16 = v15 & 0x1F;
    if (a4) {
      std::string::operator=(a4, v16);
    }
    else {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v16);
    }
    return (std::basic_regex<char> *)((char *)v4 + 2);
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

void sub_239ABD024(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 4);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABD08C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags = this->__flags_;
  if ((flags & 1) == 0)
  {
    if ((flags & 8) == 0) {
      operator new();
    }
    operator new();
  }
  operator new();
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__match_char_icase[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)a1 = &unk_26ED29768;
  *(void *)(a1 + 8) = a4;
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(unsigned char *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = (*(uint64_t (**)(void, uint64_t))(**(void **)(a2 + 8) + 40))(*(void *)(a2 + 8), a3);
  return a1;
}

void sub_239ABD264(_Unwind_Exception *a1)
{
  std::locale::~locale(v2);
  int v4 = v1[1];
  if (v4) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  }
  _Unwind_Resume(a1);
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29768;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29768;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (uint64_t v4 = result,
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(result + 24) + 40))(*(void *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    uint64_t v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(void *)(a2 + 16);
    uint64_t v5 = *(void *)(v4 + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED297B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED297B0;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29840;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29840;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(unsigned char *)(v3 + 16))
  {
    uint64_t v4 = *(void *)(v3 + 8) - *(void *)v3;
    uint64_t v5 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v5 >= v4)
    {
      uint64_t v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v5 + v4;
        uint64_t v6 = *(void *)(v7 + 8);
        goto LABEL_10;
      }
      uint64_t v8 = 0;
      while (1)
      {
        int v9 = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)v3 + v8));
        uint64_t result = (*(uint64_t (**)(void, void))(**(void **)(v7 + 24) + 40))(*(void *)(v7 + 24), *(char *)(*(void *)(a2 + 16) + v8));
        if (v9 != result) {
          break;
        }
        if (v4 == ++v8)
        {
          uint64_t v5 = *(void *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  uint64_t v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29888;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  a1->__locale_ = (std::locale::__imp *)&unk_26ED29888;
  std::locale::~locale(a1 + 2);
  std::basic_regex<char>::value_type locale = a1[1].__locale_;
  if (locale) {
    (*(void (**)(std::locale::__imp *))(*(void *)locale + 8))(locale);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(result + 40) - 1;
  uint64_t v3 = *(void *)(a2 + 32);
  if (*(unsigned char *)(v3 + 24 * v2 + 16))
  {
    uint64_t v4 = (unsigned __int8 **)(v3 + 24 * v2);
    uint64_t v5 = *v4;
    uint64_t v6 = v4[1] - *v4;
    uint64_t v7 = *(void *)(a2 + 16);
    if (*(void *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(void *)(a2 + 16) = v7 + v6;
        uint64_t v8 = *(void *)(result + 8);
        goto LABEL_9;
      }
      uint64_t v9 = v6;
      char v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        int v12 = *v5++;
        int v11 = v12;
        int v13 = *v10++;
        if (v11 != v13) {
          break;
        }
        if (!--v9) {
          goto LABEL_8;
        }
      }
    }
  }
  uint64_t v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2 = result[4];
  uint64_t v3 = *(void *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 40) - v3) >> 3) < v2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  unsigned int v5 = v2 - 1;
  if (*(unsigned char *)(v3 + 24 * v5 + 16)
    && (uint64_t v6 = result,
        uint64_t v7 = v3 + 24 * v5,
        uint64_t result = *(unsigned int **)v7,
        int64_t v8 = *(void *)(v7 + 8) - *(void *)v7,
        uint64_t v9 = *(void *)(a2 + 16),
        *(void *)(a2 + 24) - v9 >= v8)
    && (uint64_t result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !result))
  {
    *(_DWORD *)a2 = -994;
    *(void *)(a2 + 16) = v9 + v8;
    uint64_t v10 = *((void *)v6 + 1);
  }
  else
  {
    uint64_t v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
}

void sub_239ABDD98(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned int v5 = *(unsigned char **)(a1 + 48);
    unint64_t v4 = *(void *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      uint64_t v6 = (unint64_t *)(a1 + 40);
      unint64_t v7 = *(void *)(a1 + 40);
      int64_t v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          int v12 = operator new(v11);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v8[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          std::pair<const char *, const char *> v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned int v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  uint64_t v6 = (unint64_t *)(a1 + 40);
  unsigned int v5 = *(unsigned char **)(a1 + 48);
  unint64_t v13 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      int v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          int v12 = operator new(v28);
        }
        else {
          int v12 = 0;
        }
        std::vector<std::csub_match>::size_type v20 = &v25[(void)v12];
        std::pair<const char *, const char *> v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          unsigned int v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  char v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    int v12 = operator new(v18);
  }
  else {
    int v12 = 0;
  }
  std::vector<std::csub_match>::size_type v20 = &v15[(void)v12];
  std::pair<const char *, const char *> v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    unint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  int v12 = v20;
LABEL_47:
  *(void *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v12;
  *(void *)(a1 + 48) = v19;
  *(void *)(a1 + 56) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 48) = v19;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__bracket_expression[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(void *)(a1 + 8) = a3;
  size_t v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(unsigned char *)(a1 + 168) = a4;
  *(unsigned char *)(a1 + 169) = a5;
  *(unsigned char *)(a1 + 17std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a6;
  std::locale::locale(&v14, v11);
  std::locale::name(&v15, &v14);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v12 = v15.__r_.__value_.__l.__size_ != 1 || *v15.__r_.__value_.__l.__data_ != 67;
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  else
  {
    BOOL v12 = SHIBYTE(v15.__r_.__value_.__r.__words[2]) != 1 || v15.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v14);
  *(unsigned char *)(a1 + 171) = v12;
  return a1;
}

void sub_239ABE14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  std::string v15 = (void *)v10[14];
  if (v15)
  {
    v10[15] = v15;
    operator delete(v15);
  }
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  unint64_t v16 = (void *)v10[8];
  if (v16)
  {
    v10[9] = v16;
    operator delete(v16);
  }
  unint64_t v17 = *v13;
  if (*v13)
  {
    v10[6] = v17;
    operator delete(v17);
  }
  std::locale::~locale(v12);
  *unint64_t v10 = v11;
  uint64_t v18 = v10[1];
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
  }
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    uint64_t v38 = 0;
    BOOL negate = this->__negate_;
    goto LABEL_229;
  }
  if (!this->__might_have_digraph_ || current + 1 == last) {
    goto LABEL_58;
  }
  signed __int8 v6 = *current;
  unsigned __int8 v130 = *current;
  signed __int8 v7 = current[1];
  unsigned __int8 v131 = v7;
  if (this->__icase_)
  {
    unsigned __int8 v130 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    unsigned __int8 v131 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  p_traits = &this->__traits_;
  std::regex_traits<char>::__lookup_collatename<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132, (uint64_t)&__p);
  if (((char)v129 & 0x80000000) == 0)
  {
    if (v129) {
      goto LABEL_8;
    }
LABEL_58:
    BOOL negate = 0;
    uint64_t v38 = 1;
    goto LABEL_59;
  }
  size_t v39 = v128;
  operator delete(__p);
  if (!v39) {
    goto LABEL_58;
  }
LABEL_8:
  begiuint64_t n = this->__digraphs_.__begin_;
  uint64_t v10 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v10)
  {
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    p_second = &begin->second;
    while (v130 != *(p_second - 1) || v131 != *p_second)
    {
      p_second += 2;
      if (!--v11) {
        goto LABEL_17;
      }
    }
    goto LABEL_226;
  }
LABEL_17:
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    BOOL negate = 0;
    goto LABEL_165;
  }
  std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v132);
  std::vector<std::pair<std::string, std::string>>::pointer v14 = this->__ranges_.__begin_;
  unsigned __int8 v15 = v129;
  int64_t v16 = (char *)this->__ranges_.__end_ - (char *)v14;
  if (v16)
  {
    uint64_t v17 = 0;
    unint64_t v18 = v16 / 48;
    unsigned __int8 v118 = v129;
    if ((v129 & 0x80u) == 0) {
      size_t v19 = v129;
    }
    else {
      size_t v19 = v128;
    }
    if ((v129 & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    if (v18 <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = v16 / 48;
    }
    std::pair<const char *, const char *> v22 = (unsigned __int8 *)&v14->second.__r_.__value_.__r.__words[2] + 7;
    BOOL v23 = 1;
    while (1)
    {
      int v24 = (char)*(v22 - 24);
      if (v24 >= 0) {
        size_t v25 = *(v22 - 24);
      }
      else {
        size_t v25 = *(void *)(v22 - 39);
      }
      if (v24 >= 0) {
        unint64_t v26 = (char *)(v22 - 47);
      }
      else {
        unint64_t v26 = *(char **)(v22 - 47);
      }
      if (v25 >= v19) {
        size_t v27 = v19;
      }
      else {
        size_t v27 = v25;
      }
      int v28 = memcmp(p_p, v26, v27);
      BOOL v29 = v19 >= v25;
      if (v28) {
        BOOL v29 = v28 >= 0;
      }
      if (v29)
      {
        int v30 = (char)*v22;
        if (v30 >= 0) {
          size_t v31 = *v22;
        }
        else {
          size_t v31 = *(void *)(v22 - 15);
        }
        if (v30 >= 0) {
          char v32 = (char *)(v22 - 23);
        }
        else {
          char v32 = *(char **)(v22 - 23);
        }
        if (v19 >= v31) {
          size_t v33 = v31;
        }
        else {
          size_t v33 = v19;
        }
        int v34 = memcmp(v32, p_p, v33);
        BOOL v35 = v31 >= v19;
        if (v34) {
          BOOL v35 = v34 >= 0;
        }
        if (v35) {
          break;
        }
      }
      BOOL v23 = ++v17 < v18;
      v22 += 48;
      if (v21 == v17)
      {
        BOOL negate = 0;
        char v37 = 1;
        goto LABEL_159;
      }
    }
    char v37 = 0;
    BOOL negate = 1;
LABEL_159:
    p_traits = &this->__traits_;
    unsigned __int8 v15 = v118;
  }
  else
  {
    BOOL v23 = 0;
    BOOL negate = 0;
    char v37 = 1;
  }
  if ((v15 & 0x80) != 0) {
    operator delete(__p);
  }
  if (!v23)
  {
LABEL_165:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
      goto LABEL_208;
    }
    std::regex_traits<char>::__transform_primary<char *>((uint64_t)p_traits, (char *)&v130, (char *)&v132, (uint64_t)&__p);
    std::vector<std::string>::pointer v91 = this->__equivalences_.__begin_;
    uint64_t v92 = v129;
    int64_t v93 = (char *)this->__equivalences_.__end_ - (char *)v91;
    if (v93)
    {
      unint64_t v94 = 0;
      unint64_t v95 = v93 / 24;
      unint64_t v96 = __p;
      size_t v97 = v128;
      if ((v129 & 0x80u) == 0) {
        size_t v98 = v129;
      }
      else {
        size_t v98 = v128;
      }
      if (v95 <= 1) {
        uint64_t v99 = 1;
      }
      else {
        uint64_t v99 = v93 / 24;
      }
      for (BOOL i = 1; ; BOOL i = v94 < v95)
      {
        std::string v101 = &v91[v94];
        std::string::size_type size = HIBYTE(v101->__r_.__value_.__r.__words[2]);
        int v103 = (char)size;
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v101->__r_.__value_.__l.__size_;
        }
        if (v98 != size) {
          goto LABEL_186;
        }
        std::string v104 = v103 >= 0 ? &v91[v94] : (std::string *)v101->__r_.__value_.__r.__words[0];
        if ((v92 & 0x80) == 0) {
          break;
        }
        BOOL v123 = i;
        long long v126 = v91;
        unint64_t v106 = v95;
        std::string v107 = v96;
        size_t v108 = v97;
        if (!memcmp(v96, v104, v97))
        {
          operator delete(__p);
          if (!v123)
          {
LABEL_207:
            BOOL negate = 1;
            goto LABEL_208;
          }
LABEL_192:
          BOOL negate = 1;
LABEL_228:
          uint64_t v38 = 2;
          goto LABEL_229;
        }
        ++v94;
        size_t v97 = v108;
        unint64_t v96 = v107;
        unint64_t v95 = v106;
        std::vector<std::string>::pointer v91 = v126;
        if (v94 == v99) {
          goto LABEL_194;
        }
LABEL_190:
        ;
      }
      if (!v92)
      {
LABEL_191:
        if (!i) {
          goto LABEL_207;
        }
        goto LABEL_192;
      }
      uint64_t v105 = 0;
      while (*((unsigned __int8 *)&__p + v105) == v104->__r_.__value_.__s.__data_[v105])
      {
        if (v92 == ++v105) {
          goto LABEL_191;
        }
      }
LABEL_186:
      if (++v94 == v99) {
        goto LABEL_193;
      }
      goto LABEL_190;
    }
LABEL_193:
    if ((v92 & 0x80) != 0) {
LABEL_194:
    }
      operator delete(__p);
LABEL_208:
    if ((char)v130 < 0)
    {
      neg_masstd::string::size_type k = this->__neg_mask_;
    }
    else
    {
      masstd::string::size_type k = this->__mask_;
      tab = this->__traits_.__ct_->__tab_;
      std::ctype_base::mask v113 = tab[v130];
      if (((v113 & mask) != 0 || v130 == 95 && (mask & 0x80) != 0)
        && ((char)v131 & 0x80000000) == 0
        && ((tab[v131] & mask) != 0 || (mask & 0x80) != 0 && v131 == 95))
      {
        goto LABEL_226;
      }
      neg_masstd::string::size_type k = this->__neg_mask_;
      if ((neg_mask & v113) != 0 || v130 == 95 && (neg_mask & 0x80) != 0)
      {
LABEL_225:
        int v115 = negate;
LABEL_227:
        BOOL negate = v115;
        goto LABEL_228;
      }
    }
    if (((char)v131 & 0x80000000) == 0)
    {
      if ((this->__traits_.__ct_->__tab_[v131] & neg_mask) == 0)
      {
        int v115 = 1;
        if (v131 != 95 || (neg_mask & 0x80) == 0) {
          goto LABEL_227;
        }
      }
      goto LABEL_225;
    }
LABEL_226:
    int v115 = 1;
    goto LABEL_227;
  }
  if ((v37 & 1) == 0) {
    goto LABEL_228;
  }
  uint64_t v38 = 2;
LABEL_59:
  unsigned __int8 v40 = *a2->__current_;
  unsigned __int8 v130 = v40;
  if (this->__icase_)
  {
    unsigned __int8 v40 = ((uint64_t (*)(const std::ctype<char> *, void))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v40);
    unsigned __int8 v130 = v40;
  }
  std::vector<char>::pointer v41 = this->__chars_.__begin_;
  unint64_t v42 = this->__chars_.__end_ - v41;
  if (v42)
  {
    if (v42 <= 1) {
      unint64_t v42 = 1;
    }
    while (1)
    {
      int v43 = *v41++;
      if (v43 == v40) {
        break;
      }
      if (!--v42) {
        goto LABEL_66;
      }
    }
LABEL_203:
    BOOL negate = 1;
    goto LABEL_229;
  }
LABEL_66:
  std::regex_traits<char>::char_class_type v44 = this->__neg_mask_;
  if (v44 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v40 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v40] & v44) == 0)
    {
      int v46 = (v44 >> 7) & 1;
      char v45 = v40 == 95 ? v46 : 0;
    }
    else
    {
      char v45 = 1;
    }
    std::vector<char>::pointer end = this->__neg_chars_.__end_;
    std::vector<char>::pointer v48 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v40, end - this->__neg_chars_.__begin_);
    unint64_t v49 = v48 ? v48 : end;
    if ((v45 & 1) == 0 && v49 == end) {
      goto LABEL_203;
    }
  }
  std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
  std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__end_;
  if (v50 != v51)
  {
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131);
      std::vector<std::pair<std::string, std::string>>::pointer v50 = this->__ranges_.__begin_;
      std::vector<std::pair<std::string, std::string>>::pointer v51 = this->__ranges_.__end_;
      unsigned int v52 = v129;
    }
    else
    {
      unsigned int v52 = 1;
      unsigned __int8 v129 = 1;
      LOWORD(__p) = v40;
    }
    int64_t v53 = (char *)v51 - (char *)v50;
    if (v53)
    {
      uint64_t v124 = v38;
      BOOL v121 = negate;
      uint64_t v54 = 0;
      unint64_t v55 = v53 / 48;
      char v119 = v52;
      if ((v52 & 0x80u) == 0) {
        size_t v56 = v52;
      }
      else {
        size_t v56 = v128;
      }
      if ((v52 & 0x80u) == 0) {
        int v57 = &__p;
      }
      else {
        int v57 = __p;
      }
      if (v55 <= 1) {
        uint64_t v58 = 1;
      }
      else {
        uint64_t v58 = v53 / 48;
      }
      uint64_t v59 = (unsigned __int8 *)&v50->second.__r_.__value_.__r.__words[2] + 7;
      BOOL v60 = 1;
      while (1)
      {
        int v61 = (char)*(v59 - 24);
        if (v61 >= 0) {
          size_t v62 = *(v59 - 24);
        }
        else {
          size_t v62 = *(void *)(v59 - 39);
        }
        if (v61 >= 0) {
          std::string::size_type v63 = (char *)(v59 - 47);
        }
        else {
          std::string::size_type v63 = *(char **)(v59 - 47);
        }
        if (v62 >= v56) {
          size_t v64 = v56;
        }
        else {
          size_t v64 = v62;
        }
        int v65 = memcmp(v57, v63, v64);
        BOOL v66 = v56 >= v62;
        if (v65) {
          BOOL v66 = v65 >= 0;
        }
        if (v66)
        {
          int v67 = (char)*v59;
          if (v67 >= 0) {
            size_t v68 = *v59;
          }
          else {
            size_t v68 = *(void *)(v59 - 15);
          }
          if (v67 >= 0) {
            uint64_t v69 = (char *)(v59 - 23);
          }
          else {
            uint64_t v69 = *(char **)(v59 - 23);
          }
          if (v56 >= v68) {
            size_t v70 = v68;
          }
          else {
            size_t v70 = v56;
          }
          int v71 = memcmp(v69, v57, v70);
          BOOL v72 = v68 >= v56;
          if (v71) {
            BOOL v72 = v71 >= 0;
          }
          if (v72) {
            break;
          }
        }
        BOOL v60 = ++v54 < v55;
        v59 += 48;
        if (v58 == v54)
        {
          BOOL negate = v121;
          goto LABEL_124;
        }
      }
      BOOL negate = 1;
LABEL_124:
      uint64_t v38 = v124;
      if ((v119 & 0x80) == 0) {
        goto LABEL_126;
      }
    }
    else
    {
      BOOL v60 = 0;
      if ((v52 & 0x80) == 0) {
        goto LABEL_126;
      }
    }
    operator delete(__p);
LABEL_126:
    if (v60) {
      goto LABEL_229;
    }
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_) {
    goto LABEL_198;
  }
  std::regex_traits<char>::__transform_primary<char *>((uint64_t)&this->__traits_, (char *)&v130, (char *)&v131, (uint64_t)&__p);
  std::vector<std::string>::pointer v73 = this->__equivalences_.__begin_;
  uint64_t v74 = v129;
  int64_t v75 = (char *)this->__equivalences_.__end_ - (char *)v73;
  if (!v75)
  {
    if ((v129 & 0x80) != 0) {
      operator delete(__p);
    }
LABEL_198:
    if ((char)v130 < 0) {
      goto LABEL_229;
    }
    std::regex_traits<char>::char_class_type v109 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v130] & v109) == 0)
    {
      int v110 = (v109 >> 7) & 1;
      if (v130 != 95) {
        int v110 = 0;
      }
      if (v110 != 1) {
        goto LABEL_229;
      }
    }
    goto LABEL_203;
  }
  uint64_t v125 = v38;
  unint64_t v76 = 0;
  unint64_t v77 = v75 / 24;
  uint64_t v78 = __p;
  size_t v79 = v128;
  if ((v129 & 0x80u) == 0) {
    size_t v80 = v129;
  }
  else {
    size_t v80 = v128;
  }
  if (v77 <= 1) {
    uint64_t v81 = 1;
  }
  else {
    uint64_t v81 = v75 / 24;
  }
  for (BOOL j = 1; ; BOOL j = v76 < v77)
  {
    int v83 = &v73[v76];
    std::string::size_type v84 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
    int v85 = (char)v84;
    if ((v84 & 0x80u) != 0) {
      std::string::size_type v84 = v83->__r_.__value_.__l.__size_;
    }
    if (v80 == v84) {
      break;
    }
LABEL_148:
    if (++v76 == v81)
    {
      if ((v74 & 0x80) != 0) {
LABEL_196:
      }
        operator delete(__p);
      uint64_t v38 = v125;
      goto LABEL_198;
    }
LABEL_152:
    ;
  }
  if (v85 >= 0) {
    uint64_t v86 = &v73[v76];
  }
  else {
    uint64_t v86 = (std::string *)v83->__r_.__value_.__r.__words[0];
  }
  if ((v74 & 0x80) == 0)
  {
    if (!v74)
    {
LABEL_153:
      BOOL negate = 1;
      uint64_t v38 = v125;
      if (!j) {
        goto LABEL_198;
      }
      goto LABEL_229;
    }
    uint64_t v87 = 0;
    while (*((unsigned __int8 *)&__p + v87) == v86->__r_.__value_.__s.__data_[v87])
    {
      if (v74 == ++v87) {
        goto LABEL_153;
      }
    }
    goto LABEL_148;
  }
  BOOL v120 = j;
  BOOL v122 = negate;
  BOOL v88 = v73;
  uint64_t v89 = v78;
  size_t v90 = v79;
  if (memcmp(v78, v86, v79))
  {
    ++v76;
    size_t v79 = v90;
    uint64_t v78 = v89;
    std::vector<std::string>::pointer v73 = v88;
    BOOL negate = v122;
    if (v76 == v81) {
      goto LABEL_196;
    }
    goto LABEL_152;
  }
  operator delete(__p);
  BOOL negate = 1;
  uint64_t v38 = v125;
  if (!v120) {
    goto LABEL_198;
  }
LABEL_229:
  if (negate == this->__negate_)
  {
    std::__split_buffer<std::string>::pointer first = 0;
    int v117 = -993;
  }
  else
  {
    a2->__current_ += v38;
    std::__split_buffer<std::string>::pointer first = this->__first_;
    int v117 = -995;
  }
  a2->__do_ = v117;
  a2->__node_ = first;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  signed __int8 v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  std::basic_regex<char>::value_type locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  signed __int8 v7 = a1 + 11;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  uint64_t v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  unint64_t v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  unsigned int v5 = a1[1].__locale_;
  if (v5) {
    (*(void (**)(std::locale::__imp *))(*(void *)v5 + 8))(v5);
  }
  return a1;
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, char *a2, char *a3)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v4 = v7;
  if ((v7 & 0x80u) == 0) {
    unsigned int v5 = __p;
  }
  else {
    unsigned int v5 = (void **)__p[0];
  }
  if ((v7 & 0x80u) != 0) {
    unint64_t v4 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v5, (char *)v5 + v4);
  if ((char)v7 < 0) {
    operator delete(__p[0]);
  }
}

void sub_239ABECFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__lookup_collatename<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(&__s, a2, a3, a3 - a2);
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_) {
      goto LABEL_9;
    }
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((unsigned char *)&__s.__r_.__value_.__s + 23)) {
      return;
    }
    p_s = &__s;
  }
  std::__get_collation_name(&v11, (const char *)p_s);
  *(_OWORD *)a4 = *(_OWORD *)&v11.__r_.__value_.__l.__data_;
  unint64_t v7 = v11.__r_.__value_.__r.__words[2];
  *(void *)(a4 + 16) = *((void *)&v11.__r_.__value_.__l + 2);
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8) {
    goto LABEL_9;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (__s.__r_.__value_.__l.__size_ >= 3) {
      goto LABEL_9;
    }
  }
  else if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
  {
    return;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 16) + 32))(&v11);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(std::string *)a4 = v11;
  if ((*(char *)(a4 + 23) & 0x80000000) == 0)
  {
    int v9 = *(unsigned __int8 *)(a4 + 23);
    if (v9 != 12 && v9 != 1)
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_23;
  }
  uint64_t v10 = *(void *)(a4 + 8);
  if (v10 == 1 || v10 == 12)
  {
LABEL_23:
    std::string::operator=((std::string *)a4, &__s);
    goto LABEL_9;
  }
  **(unsigned char **)a4 = 0;
  *(void *)(a4 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__s.__r_.__value_.__l.__data_);
  }
}

void sub_239ABEE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), v7, (char *)v7 + v6);
  uint64_t v8 = *(unsigned __int8 *)(a4 + 23);
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0) {
        uint64_t v10 = (unsigned char *)a4;
      }
      else {
        uint64_t v10 = *(unsigned char **)a4;
      }
      v10[11] = v10[3];
    }
    else if (v9 < 0)
    {
      **(unsigned char **)a4 = 0;
      *(void *)(a4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a4 = 0;
      *(unsigned char *)(a4 + 23) = 0;
    }
  }
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
}

void sub_239ABEFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 5);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239ABF01C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_expression_term<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  unint64_t v4 = a2;
  if (a2 == a3) {
    return v4;
  }
  int v5 = *a2;
  if (v5 == 93) {
    return v4;
  }
  uint64_t v6 = (uint64_t)a4;
  memset(&v26, 0, sizeof(v26));
  if (a2 + 1 == a3 || v5 != 91)
  {
LABEL_9:
    int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
    goto LABEL_10;
  }
  int v9 = a2[1];
  if (v9 != 46)
  {
    if (v9 == 58)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(a1, a2 + 2, a3, (uint64_t)a4);
      goto LABEL_34;
    }
    if (v9 == 61)
    {
      uint64_t v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(a1, a2 + 2, a3, a4);
LABEL_34:
      uint64_t v6 = v10;
      char v20 = 0;
      goto LABEL_38;
    }
    goto LABEL_9;
  }
  uint64_t v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, a2 + 2, a3, (uint64_t)&v26);
  unint64_t v4 = (unsigned char *)v18;
  int v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  std::string::size_type size = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v26.__r_.__value_.__l.__size_;
  }
  std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)v18;
  if (!size)
  {
LABEL_10:
    if ((v11 | 0x40) == 0x40)
    {
      int v12 = *v4;
      if (v12 == 92)
      {
        unint64_t v13 = v4 + 1;
        if (v11)
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v13, a3, &v26);
        }
        else
        {
          std::vector<std::pair<std::string, std::string>>::pointer v14 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)v13, (std::basic_regex<char> *)a3, &v26, v6);
          int v11 = 0;
        }
        goto LABEL_16;
      }
    }
    else
    {
      LOBYTE(v12) = *v4;
    }
    std::string::operator=(&v26, v12);
    std::vector<std::pair<std::string, std::string>>::pointer v14 = v4 + 1;
  }
LABEL_16:
  if (v14 == a3
    || (int v15 = *v14, v15 == 93)
    || (int64_t v16 = v14 + 1, v14 + 1 == a3)
    || v15 != 45
    || *v16 == 93)
  {
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      if (v26.__r_.__value_.__l.__size_)
      {
        if (v26.__r_.__value_.__l.__size_ != 1)
        {
          uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
LABEL_36:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0], v17->__r_.__value_.__s.__data_[1]);
          goto LABEL_37;
        }
        uint64_t v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
        goto LABEL_28;
      }
    }
    else if (*((unsigned char *)&v26.__r_.__value_.__s + 23))
    {
      uint64_t v17 = &v26;
      if (HIBYTE(v26.__r_.__value_.__r.__words[2]) != 1) {
        goto LABEL_36;
      }
LABEL_28:
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v6, v17->__r_.__value_.__s.__data_[0]);
    }
LABEL_37:
    char v20 = 1;
    unint64_t v4 = v14;
    goto LABEL_38;
  }
  memset(&v25, 0, sizeof(v25));
  unint64_t v4 = v14 + 2;
  if (v14 + 2 != a3 && *v16 == 91 && *v4 == 46)
  {
    uint64_t v22 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v14 + 3, a3, (uint64_t)&v25);
LABEL_55:
    unint64_t v4 = (unsigned char *)v22;
    goto LABEL_56;
  }
  if ((v11 | 0x40) == 0x40)
  {
    LODWORD(v16) = *v16;
    if (v16 == 92)
    {
      if (v11) {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v14 + 2, a3, &v25);
      }
      else {
        uint64_t v22 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (std::basic_regex<char> *)(v14 + 2), (std::basic_regex<char> *)a3, &v25, v6);
      }
      goto LABEL_55;
    }
  }
  else
  {
    LOBYTE(v16) = *v16;
  }
  std::string::operator=(&v25, (std::string::value_type)v16);
LABEL_56:
  std::string v24 = v26;
  memset(&v26, 0, sizeof(v26));
  std::string __p = v25;
  memset(&v25, 0, sizeof(v25));
  std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](v6, (char *)&v24, (char *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v24.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  char v20 = 1;
LABEL_38:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (v20) {
    return v4;
  }
  return (unsigned char *)v6;
}

void sub_239ABF380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 49) < 0) {
    operator delete(*(void **)(v28 - 72));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_equivalence_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t *a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_33;
  }
  for (uint64_t i = 0; a2[i] != 61 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_33;
    }
  }
  if (&a2[i] == a3) {
LABEL_33:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v17);
  if (((char)v19 & 0x80000000) == 0)
  {
    uint64_t v8 = v19;
    if (v19)
    {
      int v9 = (char *)&v17;
      goto LABEL_14;
    }
LABEL_34:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  uint64_t v8 = v18;
  if (!v18) {
    goto LABEL_34;
  }
  int v9 = (char *)v17;
LABEL_14:
  std::regex_traits<char>::__transform_primary<char *>(a1, v9, &v9[v8], (uint64_t)__p);
  unint64_t v10 = v16;
  if ((v16 & 0x80u) != 0) {
    unint64_t v10 = (unint64_t)__p[1];
  }
  if (v10)
  {
    std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](a4, (long long *)__p);
  }
  else
  {
    uint64_t v11 = v19;
    if ((v19 & 0x80u) != 0) {
      uint64_t v11 = v18;
    }
    if (v11 == 2)
    {
      unint64_t v13 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        unint64_t v13 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100]((uint64_t)a4, *v13, v13[1]);
    }
    else
    {
      if (v11 != 1) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
      }
      int v12 = (char *)&v17;
      if ((v19 & 0x80u) != 0) {
        int v12 = (char *)v17;
      }
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)a4, *v12);
    }
  }
  if ((char)v16 < 0) {
    operator delete(__p[0]);
  }
  if ((char)v19 < 0) {
    operator delete(v17);
  }
  return (uint64_t)&a2[i + 2];
}

void sub_239ABF588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_character_class<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_11;
  }
  for (uint64_t i = 0; a2[i] != 58 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_11;
    }
  }
  if (&a2[i] == a3) {
LABEL_11:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  int v7 = std::regex_traits<char>::__lookup_classname<char const*>(a1, a2, &a2[i], *(unsigned char *)(a1 + 24) & 1);
  if (!v7) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
  }
  *(_DWORD *)(a4 + 160) |= v7;
  return (uint64_t)&a2[i + 2];
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  if (a3 - a2 < 2 || a3 - 1 == a2) {
    goto LABEL_15;
  }
  for (uint64_t i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i) {
      goto LABEL_15;
    }
  }
  if (&a2[i] == a3) {
LABEL_15:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char *>(a1, a2, &a2[i], (uint64_t)&v10);
  if (*(char *)(a4 + 23) < 0) {
    operator delete(*(void **)a4);
  }
  *(_OWORD *)a4 = v10;
  unint64_t v7 = v11;
  *(void *)(a4 + 16) = v11;
  unint64_t v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0) {
    unint64_t v8 = *(void *)(a4 + 8);
  }
  if (v8 - 1 >= 2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  }
  return (uint64_t)&a2[i + 2];
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3, std::string *a4, uint64_t a5)
{
  if (this == a3) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  }
  int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
  if (locale_low > 97)
  {
    if (locale_low > 114)
    {
      if (locale_low != 115)
      {
        if (locale_low != 119) {
          goto LABEL_25;
        }
        *(_DWORD *)(a5 + 160) |= 0x500u;
        std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x4000;
    }
    else
    {
      if (locale_low == 98)
      {
        long long v10 = a4;
        std::string::value_type v9 = 8;
LABEL_19:
        std::string::operator=(v10, v9);
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      if (locale_low != 100) {
        goto LABEL_25;
      }
      int v8 = *(_DWORD *)(a5 + 160) | 0x400;
    }
    *(_DWORD *)(a5 + 16std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8;
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
  if (locale_low <= 82)
  {
    if (LOBYTE(this->__traits_.__loc_.__locale_))
    {
      if (locale_low == 68)
      {
        int v7 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_21:
        *(_DWORD *)(a5 + 164) = v7;
        return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
      }
      goto LABEL_25;
    }
    std::string::value_type v9 = 0;
    long long v10 = a4;
    goto LABEL_19;
  }
  if (locale_low == 83)
  {
    int v7 = *(_DWORD *)(a5 + 164) | 0x4000;
    goto LABEL_21;
  }
  if (locale_low == 87)
  {
    *(_DWORD *)(a5 + 164) |= 0x500u;
    std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](a5, 95);
    return (std::basic_regex<char> *)((char *)&this->__traits_.__loc_.__locale_ + 1);
  }
LABEL_25:

  return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, this, a3, a4);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, std::string *this)
{
  if (a2 == a3) {
LABEL_52:
  }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  int v5 = *a2;
  if (v5 > 97)
  {
    switch(v5)
    {
      case 'n':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 10;
          goto LABEL_16;
        }
        LOBYTE(v5) = 10;
        goto LABEL_49;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_21;
      case 'r':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 13;
          goto LABEL_16;
        }
        LOBYTE(v5) = 13;
        goto LABEL_49;
      case 't':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 9;
          goto LABEL_16;
        }
        LOBYTE(v5) = 9;
        goto LABEL_49;
      case 'v':
        if (this)
        {
          uint64_t v6 = this;
          LOBYTE(v5) = 11;
          goto LABEL_16;
        }
        LOBYTE(v5) = 11;
        goto LABEL_49;
      default:
        if (v5 == 98)
        {
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 8;
            goto LABEL_16;
          }
          LOBYTE(v5) = 8;
        }
        else
        {
          if (v5 != 102) {
            goto LABEL_21;
          }
          if (this)
          {
            uint64_t v6 = this;
            LOBYTE(v5) = 12;
            goto LABEL_16;
          }
          LOBYTE(v5) = 12;
        }
        break;
    }
    goto LABEL_49;
  }
  if (v5 > 91)
  {
    if (v5 != 92)
    {
      if (v5 != 97) {
        goto LABEL_21;
      }
      if (this)
      {
        uint64_t v6 = this;
        LOBYTE(v5) = 7;
LABEL_16:
        std::string::operator=(v6, v5);
        return a2 + 1;
      }
      LOBYTE(v5) = 7;
LABEL_49:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v5);
      return a2 + 1;
    }
LABEL_14:
    if (this)
    {
      uint64_t v6 = this;
      goto LABEL_16;
    }
    goto LABEL_49;
  }
  if (v5 == 34 || v5 == 47) {
    goto LABEL_14;
  }
LABEL_21:
  if ((v5 & 0xFFFFFFF8) != 0x30) {
    goto LABEL_52;
  }
  std::string::value_type v7 = v5 - 48;
  int v8 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v8 & 0xF8) != 0x30) {
      goto LABEL_39;
    }
    std::string::value_type v7 = *v8 + 8 * v7 - 48;
    if (a2 + 2 != a3)
    {
      char v9 = a2[2];
      int v10 = v9 & 0xF8;
      std::string::value_type v11 = v9 + 8 * v7 - 48;
      if (v10 == 48) {
        int v8 = a2 + 3;
      }
      else {
        int v8 = a2 + 2;
      }
      if (v10 == 48) {
        std::string::value_type v7 = v11;
      }
      goto LABEL_39;
    }
  }
  int v8 = a3;
LABEL_39:
  if (this) {
    std::string::operator=(this, v7);
  }
  else {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
  }
  return v8;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_range[abi:ne180100](uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a3;
  unint64_t v4 = a2;
  if (*(unsigned char *)(a1 + 170))
  {
    if (*(unsigned char *)(a1 + 169))
    {
      for (unint64_t i = 0; ; ++i)
      {
        unint64_t v7 = v4[23] < 0 ? *((void *)v4 + 1) : v4[23];
        if (i >= v7) {
          break;
        }
        int v8 = v4;
        if (v4[23] < 0) {
          int v8 = *(char **)v4;
        }
        char v9 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v8[i]);
        int v10 = v4;
        if (v4[23] < 0) {
          int v10 = *(char **)v4;
        }
        v10[i] = v9;
      }
      for (unint64_t j = 0; ; ++j)
      {
        unint64_t v12 = v3[23] < 0 ? *((void *)v3 + 1) : v3[23];
        if (j >= v12) {
          break;
        }
        unint64_t v13 = v3;
        if (v3[23] < 0) {
          unint64_t v13 = *(char **)v3;
        }
        char v14 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), v13[j]);
        int v15 = v3;
        if (v3[23] < 0) {
          int v15 = *(char **)v3;
        }
        v15[j] = v14;
      }
    }
    else
    {
      for (unint64_t k = 0; ; ++k)
      {
        unint64_t v18 = a2[23] < 0 ? *((void *)a2 + 1) : a2[23];
        if (k >= v18) {
          break;
        }
        unsigned __int8 v19 = a2;
        if (a2[23] < 0) {
          unsigned __int8 v19 = *(char **)a2;
        }
        char v20 = a2;
        if (a2[23] < 0) {
          char v20 = *(char **)a2;
        }
        v20[k] = v19[k];
      }
      for (unint64_t m = 0; ; ++m)
      {
        unint64_t v22 = a3[23] < 0 ? *((void *)a3 + 1) : a3[23];
        if (m >= v22) {
          break;
        }
        BOOL v23 = a3;
        if (a3[23] < 0) {
          BOOL v23 = *(char **)a3;
        }
        std::string v24 = a3;
        if (a3[23] < 0) {
          std::string v24 = *(char **)a3;
        }
        v24[m] = v23[m];
      }
    }
    if (v4[23] < 0)
    {
      std::string v26 = v4;
      unint64_t v4 = *(char **)v4;
      uint64_t v25 = *((void *)v26 + 1);
    }
    else
    {
      uint64_t v25 = v4[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v4, &v4[v25]);
    if (v3[23] < 0)
    {
      uint64_t v28 = v3;
      uint64_t v3 = *(char **)v3;
      uint64_t v27 = *((void *)v28 + 1);
    }
    else
    {
      uint64_t v27 = v3[23];
    }
    std::regex_traits<char>::transform<char *>(a1 + 16, v3, &v3[v27]);
    *(_OWORD *)unsigned __int8 v40 = v38;
    uint64_t v41 = v39;
    *(_OWORD *)std::string __p = *(_OWORD *)v36;
    uint64_t v43 = v37;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
  else
  {
    if (a2[23] < 0) {
      uint64_t v16 = *((void *)a2 + 1);
    }
    else {
      uint64_t v16 = a2[23];
    }
    if (v16 != 1 || (a3[23] < 0 ? (uint64_t v29 = *((void *)a3 + 1)) : (uint64_t v29 = a3[23]), v29 != 1)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
    }
    if (*(unsigned char *)(a1 + 169))
    {
      int v30 = a2;
      if (a2[23] < 0) {
        int v30 = *(char **)a2;
      }
      char v31 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v30);
      char v32 = v4;
      if (v4[23] < 0) {
        char v32 = *(unsigned char **)v4;
      }
      *char v32 = v31;
      size_t v33 = v3;
      if (v3[23] < 0) {
        size_t v33 = *(char **)v3;
      }
      char v34 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), *v33);
      BOOL v35 = v3;
      if (v3[23] < 0) {
        BOOL v35 = *(unsigned char **)v3;
      }
      unsigned char *v35 = v34;
    }
    *(_OWORD *)unsigned __int8 v40 = *(_OWORD *)v4;
    uint64_t v41 = *((void *)v4 + 2);
    *((void *)v4 + 1) = 0;
    *((void *)v4 + 2) = 0;
    *(void *)unint64_t v4 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)v3;
    uint64_t v43 = *((void *)v3 + 2);
    *(void *)uint64_t v3 = 0;
    *((void *)v3 + 1) = 0;
    *((void *)v3 + 2) = 0;
    std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100]((std::vector<std::pair<std::string, std::string>> *)(a1 + 88), (long long *)v40);
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v41) < 0) {
      operator delete(v40[0]);
    }
  }
}

void sub_239ABFE8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21)
{
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 169))
  {
    uint64_t v18 = a1 + 128;
    unint64_t v19 = *(void *)(a1 + 128);
    int v10 = (char **)(a1 + 112);
    __int16 v8 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    char v9 = *(_WORD **)(a1 + 120);
    if (*(unsigned char *)(a1 + 170))
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v20 = (char *)v9 - *v10;
      if (v20 > -3)
      {
        uint64_t v21 = v20 >> 1;
        unint64_t v22 = v19 - (void)*v10;
        if (v22 <= (v20 >> 1) + 1) {
          unint64_t v23 = v21 + 1;
        }
        else {
          unint64_t v23 = v22;
        }
        if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v24 = v23;
        }
        if (v24) {
          uint64_t v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v24);
        }
        else {
          uint64_t v25 = 0;
        }
        uint64_t v27 = &v25[2 * v21];
        uint64_t v28 = &v25[2 * v24];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        long long v38 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v38) {
          goto LABEL_46;
        }
        do
        {
          __int16 v39 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v39;
          v27 -= 2;
        }
        while (v29 != v38);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v9 < v19) {
        goto LABEL_24;
      }
      uint64_t v32 = (char *)v9 - *v10;
      if (v32 > -3)
      {
        uint64_t v33 = v32 >> 1;
        unint64_t v34 = v19 - (void)*v10;
        if (v34 <= (v32 >> 1) + 1) {
          unint64_t v35 = v33 + 1;
        }
        else {
          unint64_t v35 = v34;
        }
        if (v34 >= 0x7FFFFFFFFFFFFFFELL) {
          uint64_t v36 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          uint64_t v36 = v35;
        }
        if (v36) {
          uint64_t v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v18, v36);
        }
        else {
          uint64_t v37 = 0;
        }
        uint64_t v27 = &v37[2 * v33];
        uint64_t v28 = &v37[2 * v36];
        *(_WORD *)uint64_t v27 = v8;
        std::string v26 = v27 + 2;
        unsigned __int8 v40 = *(char **)(a1 + 112);
        uint64_t v29 = *(char **)(a1 + 120);
        if (v29 == v40) {
          goto LABEL_46;
        }
        do
        {
          __int16 v41 = *((_WORD *)v29 - 1);
          v29 -= 2;
          *((_WORD *)v27 - 1) = v41;
          v27 -= 2;
        }
        while (v29 != v40);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  unsigned __int8 v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
  __int16 v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a3);
  unint64_t v7 = *(void *)(a1 + 128);
  __int16 v8 = v5 | (unsigned __int16)(v6 << 8);
  char v9 = *(_WORD **)(a1 + 120);
  if ((unint64_t)v9 < v7)
  {
LABEL_24:
    *char v9 = v8;
    std::string v26 = v9 + 1;
    goto LABEL_48;
  }
  int v10 = (char **)(a1 + 112);
  uint64_t v11 = *(void *)(a1 + 112);
  uint64_t v12 = (uint64_t)v9 - v11;
  if ((uint64_t)v9 - v11 <= -3) {
    goto LABEL_49;
  }
  uint64_t v13 = v12 >> 1;
  unint64_t v14 = v7 - v11;
  if (v14 <= (v12 >> 1) + 1) {
    unint64_t v15 = v13 + 1;
  }
  else {
    unint64_t v15 = v14;
  }
  if (v14 >= 0x7FFFFFFFFFFFFFFELL) {
    uint64_t v16 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    uint64_t v16 = v15;
  }
  if (v16) {
    uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(a1 + 128, v16);
  }
  else {
    uint64_t v17 = 0;
  }
  uint64_t v27 = &v17[2 * v13];
  uint64_t v28 = &v17[2 * v16];
  *(_WORD *)uint64_t v27 = v8;
  std::string v26 = v27 + 2;
  int v30 = *(char **)(a1 + 112);
  uint64_t v29 = *(char **)(a1 + 120);
  if (v29 == v30) {
    goto LABEL_46;
  }
  do
  {
    __int16 v31 = *((_WORD *)v29 - 1);
    v29 -= 2;
    *((_WORD *)v27 - 1) = v31;
    v27 -= 2;
  }
  while (v29 != v30);
LABEL_45:
  uint64_t v29 = *v10;
LABEL_46:
  *(void *)(a1 + 112) = v27;
  *(void *)(a1 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v26;
  *(void *)(a1 + 128) = v28;
  if (v29) {
    operator delete(v29);
  }
LABEL_48:
  *(void *)(a1 + 12std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v26;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 1);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC0178(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::__add_equivalence[abi:ne180100](uint64_t *a1, long long *a2)
{
  uint64_t v3 = a1 + 17;
  unint64_t v4 = a1[18];
  if (v4 >= a1[19])
  {
    uint64_t result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v3, a2);
  }
  else
  {
    std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v3, a2);
    uint64_t result = v4 + 24;
  }
  a1[18] = result;
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 2);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC0214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::regex_traits<char>::__lookup_classname<char const*>(uint64_t a1, char *a2, char *a3, BOOL a4)
{
  std::string::__init_with_size[abi:ne180100]<char *,char *>(__p, a2, a3, a3 - a2);
  unint64_t v6 = v12;
  if ((v12 & 0x80u) == 0) {
    unint64_t v7 = __p;
  }
  else {
    unint64_t v7 = (void **)__p[0];
  }
  if ((v12 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  (*(void (**)(void, void **, char *))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), v7, (char *)v7 + v6);
  if ((v12 & 0x80u) == 0) {
    __int16 v8 = __p;
  }
  else {
    __int16 v8 = (void **)__p[0];
  }
  uint64_t classname = std::__get_classname((const char *)v8, a4);
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  return classname;
}

void sub_239AC02E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_neg_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2 = a2;
  if (*(unsigned char *)(a1 + 169))
  {
    char v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 24) + 40))(*(void *)(a1 + 24), a2);
    unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 80);
    if ((unint64_t)v5 >= v4)
    {
      unint64_t v6 = (unint64_t *)(a1 + 64);
      unint64_t v7 = *(void *)(a1 + 64);
      __int16 v8 = &v5[-v7];
      uint64_t v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        unint64_t v10 = v4 - v7;
        if (2 * v10 > v9) {
          uint64_t v9 = 2 * v10;
        }
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v11 = v9;
        }
        if (v11) {
          unsigned __int8 v12 = operator new(v11);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v8[(void)v12];
        uint64_t v21 = (char *)v12 + v11;
        v8[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v8[(void)v12 + 1];
        if (v5 != (unsigned char *)v7)
        {
          unint64_t v22 = &v5[~v7];
          do
          {
            char v23 = *--v5;
            (v22--)[(void)v12] = v23;
          }
          while (v5 != (unsigned char *)v7);
LABEL_45:
          unsigned __int8 v5 = (unsigned char *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  unint64_t v6 = (unint64_t *)(a1 + 64);
  unsigned __int8 v5 = *(unsigned char **)(a1 + 72);
  unint64_t v13 = *(void *)(a1 + 80);
  if (!*(unsigned char *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      unint64_t v24 = *v6;
      uint64_t v25 = &v5[-*v6];
      unint64_t v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        unint64_t v27 = v13 - v24;
        if (2 * v27 > v26) {
          unint64_t v26 = 2 * v27;
        }
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v28 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v28 = v26;
        }
        if (v28) {
          unsigned __int8 v12 = operator new(v28);
        }
        else {
          unsigned __int8 v12 = 0;
        }
        uint64_t v20 = &v25[(void)v12];
        uint64_t v21 = (char *)v12 + v28;
        v25[(void)v12] = v2;
        uint64_t v19 = (uint64_t)&v25[(void)v12 + 1];
        if (v5 != (unsigned char *)v24)
        {
          __int16 v31 = &v5[~v24];
          do
          {
            char v32 = *--v5;
            (v31--)[(void)v12] = v32;
          }
          while (v5 != (unsigned char *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    unsigned char *v5 = v2;
    uint64_t v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13) {
    goto LABEL_22;
  }
  unint64_t v14 = *v6;
  unint64_t v15 = &v5[-*v6];
  unint64_t v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0) {
    goto LABEL_50;
  }
  unint64_t v17 = v13 - v14;
  if (2 * v17 > v16) {
    unint64_t v16 = 2 * v17;
  }
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v18 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v18 = v16;
  }
  if (v18) {
    unsigned __int8 v12 = operator new(v18);
  }
  else {
    unsigned __int8 v12 = 0;
  }
  uint64_t v20 = &v15[(void)v12];
  uint64_t v21 = (char *)v12 + v18;
  v15[(void)v12] = v2;
  uint64_t v19 = (uint64_t)&v15[(void)v12 + 1];
  if (v5 != (unsigned char *)v14)
  {
    uint64_t v29 = &v5[~v14];
    do
    {
      char v30 = *--v5;
      (v29--)[(void)v12] = v30;
    }
    while (v5 != (unsigned char *)v14);
    goto LABEL_45;
  }
LABEL_46:
  unsigned __int8 v12 = v20;
LABEL_47:
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v19;
  *(void *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v21;
  if (v5) {
    operator delete(v5);
  }
LABEL_49:
  *(void *)(a1 + 72) = v19;
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](std::vector<std::pair<std::string, std::string>> *a1, long long *a2)
{
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<std::pair<std::string, std::string>> *)&a1->__end_cap_;
  unsigned __int8 v5 = value;
  unint64_t v7 = *((void *)p_end_cap - 1);
  if (v7 >= (unint64_t)value)
  {
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (unint64_t)a1->__begin_) >> 4);
    unint64_t v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)a1->__begin_) >> 4);
    if (2 * v13 > v12) {
      unint64_t v12 = 2 * v13;
    }
    if (v13 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v14 = 0x555555555555555;
    }
    else {
      unint64_t v14 = v12;
    }
    __v.__end_cap_.__value_ = p_end_cap;
    if (v14) {
      unint64_t v15 = (std::pair<std::string, std::string> *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::TestParseError>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    unint64_t v16 = v15 + v11;
    __v.__first_ = v15;
    __v.__begin_ = v16;
    __v.__end_cap_.__value_ = &v15[v14];
    long long v17 = *a2;
    v16->first.__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v16->first.__r_.__value_.__l.__data_ = v17;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v18 = *(long long *)((char *)a2 + 24);
    v16->second.__r_.__value_.__r.__words[2] = *((void *)a2 + 5);
    *(_OWORD *)&v16->second.__r_.__value_.__l.__data_ = v18;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    __v.__end_ = v16 + 1;
    std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(a1, &__v);
    std::vector<char>::pointer end = a1->__end_;
    std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(&__v);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    std::vector<char>::pointer end = (std::pair<std::string, std::string> *)(v7 + 48);
    a1->__end_ = (std::vector<std::pair<std::string, std::string>>::pointer)(v7 + 48);
  }
  a1->__end_ = end;
}

void sub_239AC069C(_Unwind_Exception *a1, std::__split_buffer<std::pair<std::string, std::string>> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 9);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC06F4(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::__swap_out_circular_buffer(std::vector<std::pair<std::string, std::string>> *this, std::__split_buffer<std::pair<std::string, std::string>> *__v)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>((uint64_t)&this->__end_cap_, (uint64_t)this->__end_, (uint64_t)this->__end_, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)__v->__begin_, (uint64_t)__v->__begin_);
  __v->__begin_ = v4;
  begiuint64_t n = this->__begin_;
  this->__begin_ = v4;
  __v->__begin_ = begin;
  std::vector<char>::pointer end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>,std::reverse_iterator<std::pair<std::string,std::string>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v16 = a6;
  *((void *)&v16 + 1) = a7;
  long long v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 48);
      *(void *)(v9 - 32) = *(void *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      *(void *)(a3 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
      *(void *)(a3 - 32) = 0;
      *(void *)(a3 - 48) = 0;
      long long v11 = *(_OWORD *)(a3 - 24);
      *(void *)(v9 - 8) = *(void *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(void *)(a3 - 16) = 0;
      *(void *)(a3 - 8) = 0;
      *(void *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((void *)&v16 + 1) = v9;
  }
  char v14 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v13);
  return a6;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::pair<std::string,std::string>>,std::reverse_iterator<std::pair<std::string,std::string>*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1 = *(void *)(a1[2] + 8);
  uint64_t v2 = *(void *)(a1[1] + 8);
  if (v1 != v2)
  {
    uint64_t v3 = *a1;
    do
    {
      std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v3, v1);
      v1 += 48;
    }
    while (v1 != v2);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::~__split_buffer(std::__split_buffer<std::pair<std::string, std::string>> *this)
{
  if (this->__first_) {
    operator delete(this->__first_);
  }
}

void std::__split_buffer<std::pair<std::string,std::string>>::clear[abi:ne180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<siri::intelligence::TestParseError>::destroy[abi:ne180100](v4, i - 48);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(2 * a2);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(*(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(void *)(a2 + 16);
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  uint64_t v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  uint64_t v2 = *(void *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(void *)(v2 + 8) = *(void *)(a2 + 16);
  *(unsigned char *)(v2 + 16) = 1;
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
}

void sub_239AC0D24(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, int *a4)
{
  if (a2 != a3)
  {
    int v4 = *a2;
    if ((v4 & 0xF8) == 0x30 || (v4 & 0xFE) == 0x38)
    {
      int v5 = v4 - 48;
      *a4 = v5;
      if (++a2 == a3)
      {
        return a3;
      }
      else
      {
        while (1)
        {
          int v6 = *a2;
          if ((v6 & 0xF8) != 0x30 && (v6 & 0xFE) != 0x38) {
            break;
          }
          if (v5 >= 214748364) {
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          }
          int v5 = v6 + 10 * v5 - 48;
          *a4 = v5;
          if (++a2 == a3) {
            return a3;
          }
        }
      }
    }
  }
  return a2;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 8);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC0E40(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 7);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC0E98(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x23ECAACC0);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, void *a2)
{
  uint64_t v2 = result[10];
  uint64_t v3 = a2[7];
  int v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    unint64_t v5 = *v4 + 1;
    unint64_t *v4 = v5;
    unint64_t v6 = *((void *)result + 3);
    unint64_t v7 = *((void *)result + 4);
    BOOL v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      uint64_t v10 = *(void *)(v3 + 16 * v2 + 8);
      BOOL v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8) {
        goto LABEL_25;
      }
LABEL_22:
      a2[10] = *((void *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  unint64_t *v4 = 0;
  if (*((void *)result + 4))
  {
    if (*((void *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((void *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, void *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((void *)result + 2);
  }
  else
  {
    a3[10] = *((void *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x23ECAACC0);
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&unk_26ED29A50;
  uint64_t v2 = a1[2];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  uint64_t v3 = a1[1];
  if (v3) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  }
  return a1;
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, void *a2)
{
  unsigned int v2 = result[11];
  *(void *)(a2[7] + 16 * result[10] + 8) = a2[2];
  unsigned int v3 = result[12];
  if (v2 != v3)
  {
    uint64_t v4 = v2 - 1;
    uint64_t v5 = a2[3];
    uint64_t v6 = v3 - 1 - v4;
    unint64_t v7 = (unsigned char *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((void *)v7 - 2) = v5;
      *((void *)v7 - 1) = v5;
      unsigned char *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(result + 8);
  return result;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::__owns_two_states<char>::~__owns_two_states(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)a3 = -994;
  uint64_t v3 = 8;
  if (a2) {
    uint64_t v3 = 16;
  }
  *(void *)(a3 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(void *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  exceptiouint64_t n = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x23ECAA890](exception, 15);
  __cxa_throw(exception, MEMORY[0x263F8C190], MEMORY[0x263F8C098]);
}

void sub_239AC1214(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  if (a2 == a3) {
    return (unsigned __int8 *)a2;
  }
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  BOOL v8 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(a1, a2, a3);
  if (v8 == (unsigned __int8 *)a2) {
    return (unsigned __int8 *)a2;
  }
  size_t v9 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(a1, v8, (unsigned __int8 *)a3, end, marked_count + 1, v9);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_nondupl_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  uint64_t v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(a1, a2, a3);
  unint64_t v7 = v6;
  if (v6 == a2 && v6 != a3)
  {
    if (a2 + 1 == a3 || *a2 != 92)
    {
      return a2;
    }
    else
    {
      int v8 = a2[1];
      if (v8 == 40)
      {
        uint64_t v9 = (uint64_t)(a2 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        unsigned int marked_count = a1->__marked_count_;
        do
        {
          long long v11 = (char *)v9;
          uint64_t v9 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v9, a3);
        }
        while ((char *)v9 != v11);
        if (v11 == a3 || v11 + 1 == a3 || *v11 != 92 || v11[1] != 41) {
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        }
        unint64_t v7 = v11 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, marked_count);
      }
      else
      {
        BOOL v13 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v8);
        uint64_t v14 = 2;
        if (!v13) {
          uint64_t v14 = 0;
        }
        return &a2[v14];
      }
    }
  }
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_RE_dupl_symbol<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end)
{
  uint64_t v6 = a2;
  if (a2 != a3)
  {
    unsigned int v7 = __mexp_end;
    unsigned int v8 = __mexp_begin;
    int v11 = *a2;
    if (v11 == 42)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_loop(this, 0, 0xFFFFFFFFFFFFFFFFLL, __s, __mexp_begin, __mexp_end, 1);
      return ++v6;
    }
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      BOOL v13 = a2 + 2;
      int v25 = 0;
      uint64_t v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, a2 + 2, a3, &v25);
      if (v14 == v13) {
        goto LABEL_16;
      }
      if (v14 != a3)
      {
        long long v15 = v14 + 1;
        int v16 = *v14;
        if (v16 == 44)
        {
          int v24 = -1;
          long long v17 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>((uint64_t)this, v15, a3, &v24);
          if (v17 != a3 && v17 + 1 != a3 && *v17 == 92 && v17[1] == 125)
          {
            size_t v19 = v24;
            size_t v18 = v25;
            if (v24 == -1)
            {
              size_t v19 = -1;
            }
            else if (v24 < v25)
            {
LABEL_16:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
            }
            uint64_t v6 = &v17[2 * (v17[1] == 125)];
            size_t v20 = v8;
            size_t v21 = v7;
            unint64_t v22 = this;
LABEL_23:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v22, v18, v19, __s, v20, v21, 1);
            return v6;
          }
        }
        else if (v15 != a3 && v16 == 92 && *v15 == 125)
        {
          uint64_t v6 = v14 + 2;
          size_t v18 = v25;
          size_t v20 = v8;
          size_t v21 = v7;
          unint64_t v22 = this;
          size_t v19 = v25;
          goto LABEL_23;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v6;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_RE<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  if (a2 == a3)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a2);
    if (result != a2) {
      return result;
    }
  }
  else
  {
    int v6 = *a2;
    if ((a2 + 1 != a3 || v6 != 36)
      && ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0))
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v6);
      return a2 + 1;
    }
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(this, a2, a3);
    if (result != a2) {
      return result;
    }
    if (*a2 == 46) {
      operator new();
    }
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
}

unsigned char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR<char const*>(std::basic_regex<char> *a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a2;
  if (a2 != a3 && a2 + 1 != a3 && *a2 == 92)
  {
    int v4 = (char)a2[1];
    if ((v4 - 36) <= 0x3A && ((1 << (a2[1] - 36)) & 0x580000000000441) != 0)
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v4);
      v3 += 2;
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  unsigned int v2 = a1[1];
  if (v2) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  }
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  uint64_t v1 = a1[1];
  if (v1) {
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  }

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(unsigned char **)(a2 + 16);
  if (v2 == *(unsigned char **)(a2 + 24) || !*v2)
  {
    uint64_t v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(void *)(a2 + 16) = v2 + 1;
    uint64_t v3 = *(void *)(result + 8);
  }
  *(void *)(a2 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8) {
    return 0;
  }
  if (a2 - 48 > this->__marked_count_) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2) {
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  }
  do
  {
    unsigned int v7 = v6;
    int v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (std::basic_regex<char> *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  std::vector<char>::pointer end = a1->__end_;
  unsigned int marked_count = a1->__marked_count_;
  unsigned int v8 = std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(a1, a2, a3);
  uint64_t v9 = (unsigned __int8 *)v8;
  if (v8 != (char *)a2 || v8 == (char *)a3) {
    goto LABEL_12;
  }
  int locale_low = SLOBYTE(a2->__traits_.__loc_.__locale_);
  if (locale_low == 36)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_r_anchor(a1);
    goto LABEL_8;
  }
  if (locale_low == 40)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
    unsigned int v11 = a1->__marked_count_;
    ++a1->__open_count_;
    unint64_t v12 = (std::basic_regex<char> *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(a1, (char *)&a2->__traits_.__loc_.__locale_ + 1, a3);
    if (v12 == a3 || (BOOL v13 = v12, LOBYTE(v12->__traits_.__loc_.__locale_) != 41)) {
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v11);
    --a1->__open_count_;
    uint64_t v9 = (unsigned __int8 *)&v13->__traits_.__loc_.__locale_ + 1;
LABEL_12:
    if (v9 != (unsigned __int8 *)a2) {
      goto LABEL_13;
    }
    return (unsigned __int8 *)a2;
  }
  if (locale_low != 94) {
    return (unsigned __int8 *)a2;
  }
  std::basic_regex<char,std::regex_traits<char>>::__push_l_anchor(a1);
LABEL_8:
  uint64_t v9 = (unsigned __int8 *)&a2->__traits_.__loc_.__locale_ + 1;
LABEL_13:
  size_t v14 = a1->__marked_count_ + 1;

  return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)a1, v9, (unsigned __int8 *)a3, end, marked_count + 1, v14);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_one_char_or_coll_elem_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *a2, std::basic_regex<char> *a3)
{
  uint64_t result = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(a1, a2, a3);
  if (result == (char *)a2)
  {
    uint64_t result = std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    if (result == (char *)a2)
    {
      if (a2 != a3 && LOBYTE(a2->__traits_.__loc_.__locale_) == 46) {
        operator new();
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, (char *)a2, (char *)a3);
    }
  }
  return result;
}

std::basic_regex<char> *std::basic_regex<char,std::regex_traits<char>>::__parse_ORD_CHAR_ERE<char const*>(std::basic_regex<char> *a1, std::basic_regex<char> *this, std::basic_regex<char> *a3)
{
  uint64_t v3 = this;
  if (this != a3)
  {
    int locale_low = SLOBYTE(this->__traits_.__loc_.__locale_);
    uint64_t v5 = (locale_low - 36);
    if (v5 > 0x3A) {
      goto LABEL_8;
    }
    if (((1 << (locale_low - 36)) & 0x5800000080004D1) != 0) {
      return v3;
    }
    if (v5 == 5)
    {
      if (a1->__open_count_) {
        return v3;
      }
    }
    else
    {
LABEL_8:
      if ((locale_low - 123) < 2) {
        return v3;
      }
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, (std::basic_regex<char>::value_type)this->__traits_.__loc_.__locale_);
    return (std::basic_regex<char> *)((char *)v3 + 1);
  }
  return v3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_QUOTED_CHAR_ERE<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v3 = a2;
  if (a2 == a3) {
    return v3;
  }
  int v4 = a2 + 1;
  if (v3 + 1 == a3 || *v3 != 92) {
    return v3;
  }
  int v5 = *v4;
  std::basic_regex<char>::value_type v6 = *v4;
  BOOL v7 = (v5 - 36) > 0x3A || ((1 << (*v4 - 36)) & 0x5800000080004F1) == 0;
  if (!v7 || (v5 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char((std::basic_regex<char> *)a1, v6);
    v3 += 2;
    return v3;
  }
  if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0x40)
  {
    BOOL v9 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref((std::basic_regex<char> *)a1, v6);
    uint64_t v10 = 2;
    if (!v9) {
      uint64_t v10 = 0;
    }
    v3 += v10;
    return v3;
  }

  return std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v4, a3, 0);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(uint64_t a1, char *__f, char *__l, std::match_results<const char *> *this, int a5)
{
  if ((a5 & 0x80) != 0) {
    int v9 = a5 & 0xFFA;
  }
  else {
    int v9 = a5;
  }
  std::match_results<char const*>::__init(this, *(_DWORD *)(a1 + 28) + 1, __f, __l, (unsigned __int16)(v9 & 0x800) >> 11);
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __f, __l, (uint64_t *)this, v9, (v9 & 0x800) == 0))
  {
    if (this->__matches_.__end_ == this->__matches_.__begin_) {
      p_unmatched = &this->__unmatched_;
    }
    else {
      p_unmatched = this->__matches_.__begin_;
    }
LABEL_8:
    std::__split_buffer<std::string>::pointer first = p_unmatched->first;
    this->__prefix_.second = p_unmatched->first;
    this->__prefix_.matched = this->__prefix_.first != first;
    second = p_unmatched->second;
    this->__suffix_.std::__split_buffer<std::string>::pointer first = second;
    this->__suffix_.matched = second != this->__suffix_.second;
    return 1;
  }
  if (__f != __l && (v9 & 0x40) == 0)
  {
    int v14 = v9 | 0x80;
    long long v15 = __f + 1;
    if (v15 != __l)
    {
      while (1)
      {
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
        int v16 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, v15, __l, (uint64_t *)this, v14, 0);
        begiuint64_t n = this->__matches_.__begin_;
        std::vector<std::csub_match>::pointer end = this->__matches_.__end_;
        if (v16) {
          break;
        }
        std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3), &this->__unmatched_);
        if (++v15 == __l) {
          goto LABEL_14;
        }
      }
      if (end == begin) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
LABEL_14:
    std::vector<std::sub_match<char const*>>::assign(&this->__matches_, 0xAAAAAAAAAAAAAAABLL * (((char *)this->__matches_.__end_ - (char *)this->__matches_.__begin_) >> 3), &this->__unmatched_);
    if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(a1, __l, __l, (uint64_t *)this, v14, 0))
    {
      if (this->__matches_.__end_ == this->__matches_.__begin_) {
        p_unmatched = &this->__unmatched_;
      }
      else {
        p_unmatched = this->__matches_.__begin_;
      }
      goto LABEL_8;
    }
  }
  uint64_t result = 0;
  this->__matches_.__end_ = this->__matches_.__begin_;
  return result;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  if (*(_DWORD *)(a1 + 28)) {
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  }
  return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_nosubs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  long long v62 = 0u;
  long long v63 = 0u;
  long long v61 = 0u;
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    *(_DWORD *)int v57 = 0;
    memset(&v57[8], 0, 32);
    long long v58 = 0uLL;
    *(_OWORD *)std::string __p = 0uLL;
    memset(v60, 0, 21);
    std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v57[32])
    {
      *(void *)&long long v58 = *(void *)&v57[32];
      operator delete(*(void **)&v57[32]);
    }
    unsigned int v52 = a4;
    uint64_t v12 = *((void *)&v61 + 1);
    unint64_t v13 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v14 = v13 / 0x2A;
    uint64_t v15 = *(void *)(*((void *)&v61 + 1) + 8 * (v13 / 0x2A));
    unint64_t v16 = 3 * (v13 % 0x2A);
    uint64_t v17 = v15 + 32 * v16;
    *(_DWORD *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 16) = a2;
    *(void *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 24) = a3;
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(*(void *)(v12 + 8 * v14) + 32 * v16 + 56), *(unsigned int *)(a1 + 32));
    char v55 = 0;
    unsigned int v18 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = a2;
    uint64_t v19 = a3 - a2;
    uint64_t v20 = *((void *)&v63 + 1);
    uint64_t v21 = *((void *)&v61 + 1);
    unint64_t v22 = *((void *)&v63 + 1) + v63 - 1;
    unint64_t v23 = v22 / 0x2A;
    unint64_t v24 = 3 * (v22 % 0x2A);
    *(void *)(*(void *)(*((void *)&v61 + 1) + 8 * v23) + 32 * v24 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v6;
    uint64_t v25 = *(void *)(v21 + 8 * v23) + 32 * v24;
    *(_DWORD *)(v25 + 88) = a5;
    *(unsigned char *)(v25 + 92) = a6;
    while (2)
    {
      if ((++v18 & 0xFFF) == 0 && (int)(v18 >> 12) >= (int)v19) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unint64_t v27 = v20 + v63 - 1;
      uint64_t v28 = *(void *)(*((void *)&v61 + 1) + 8 * (v27 / 0x2A));
      unint64_t v29 = v27 % 0x2A;
      uint64_t v30 = v28 + 96 * (v27 % 0x2A);
      char v32 = (void *)(v30 + 80);
      uint64_t v31 = *(void *)(v30 + 80);
      if (v31) {
        (*(void (**)(uint64_t, unint64_t))(*(void *)v31 + 16))(v31, v28 + 96 * v29);
      }
      switch(*(_DWORD *)v30)
      {
        case 0xFFFFFC18:
          uint64_t v33 = *(void *)(v28 + 96 * v29 + 16);
          BOOL v35 = (a5 & 0x1000) == 0 || v33 == a3;
          BOOL v36 = v33 != v54 || (a5 & 0x20) == 0;
          if (!v36 || !v35) {
            goto LABEL_37;
          }
          uint64_t v37 = v33 - *(void *)(v28 + 96 * v29 + 8);
          uint64_t v38 = v53;
          if ((v55 & (v53 >= v37)) == 0) {
            uint64_t v38 = v37;
          }
          if (v38 != v19)
          {
            uint64_t v53 = v38;
            std::deque<std::__state<char>>::pop_back(&v61);
            char v55 = 1;
            goto LABEL_38;
          }
          __int16 v39 = (void **)*((void *)&v61 + 1);
          uint64_t v40 = v62;
          if ((void)v62 == *((void *)&v61 + 1))
          {
            uint64_t v40 = *((void *)&v61 + 1);
          }
          else
          {
            __int16 v41 = (void *)(*((void *)&v61 + 1) + 8 * ((unint64_t)v63 / 0x2A));
            unint64_t v42 = (void *)(*v41 + 96 * ((unint64_t)v63 % 0x2A));
            unint64_t v43 = *(void *)(*((void *)&v61 + 1) + 8 * ((*((void *)&v63 + 1) + (void)v63) / 0x2AuLL))
                + 96 * ((*((void *)&v63 + 1) + (void)v63) % 0x2AuLL);
            if (v42 != (void *)v43)
            {
              do
              {
                std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)&v63 + 8, v42);
                v42 += 12;
                if ((void *)((char *)v42 - *v41) == (void *)4032)
                {
                  std::regex_traits<char>::char_class_type v44 = (void *)v41[1];
                  ++v41;
                  unint64_t v42 = v44;
                }
              }
              while (v42 != (void *)v43);
              __int16 v39 = (void **)*((void *)&v61 + 1);
              uint64_t v40 = v62;
            }
          }
          *((void *)&v63 + 1) = 0;
          unint64_t v47 = v40 - (void)v39;
          if (v47 >= 0x11)
          {
            do
            {
              operator delete(*v39);
              __int16 v39 = (void **)(*((void *)&v61 + 1) + 8);
              *((void *)&v61 + 1) = v39;
              unint64_t v47 = v62 - (void)v39;
            }
            while ((void)v62 - (void)v39 > 0x10uLL);
          }
          if (v47 >> 3 == 1)
          {
            uint64_t v48 = 21;
          }
          else
          {
            if (v47 >> 3 != 2) {
              goto LABEL_53;
            }
            uint64_t v48 = 42;
          }
          *(void *)&long long v63 = v48;
LABEL_53:
          char v55 = 1;
          uint64_t v53 = v19;
LABEL_38:
          uint64_t v20 = *((void *)&v63 + 1);
          if (*((void *)&v63 + 1)) {
            continue;
          }
          if ((v55 & 1) == 0) {
            goto LABEL_56;
          }
          uint64_t v49 = *v52;
          *(void *)uint64_t v49 = v54;
          *(void *)(v49 + 8) = v54 + v53;
          uint64_t v50 = 1;
          *(unsigned char *)(v49 + 16) = 1;
          break;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_38;
        case 0xFFFFFC1D:
          std::deque<std::__state<char>>::push_front((uint64_t)&v61, v28 + 96 * v29);
          goto LABEL_37;
        case 0xFFFFFC1F:
LABEL_37:
          std::deque<std::__state<char>>::pop_back(&v61);
          goto LABEL_38;
        case 0xFFFFFC20:
          long long v45 = *(_OWORD *)(v30 + 16);
          *(_OWORD *)int v57 = *(_OWORD *)v30;
          *(_OWORD *)&v57[16] = v45;
          long long v58 = 0uLL;
          *(void *)&v57[32] = 0;
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v57[32], *(long long **)(v28 + 96 * v29 + 32), *(long long **)(v28 + 96 * v29 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v28 + 96 * v29 + 40) - *(void *)(v28 + 96 * v29 + 32)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v60[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *(long long **)(v28 + 96 * v29 + 56), *(long long **)(v28 + 96 * v29 + 64), (uint64_t)(*(void *)(v28 + 96 * v29 + 64) - *(void *)(v28 + 96 * v29 + 56)) >> 4);
          uint64_t v46 = *v32;
          *(void *)((char *)&v60[1] + 5) = *(void *)(v30 + 85);
          v60[1] = v46;
          (*(void (**)(void, uint64_t, unint64_t))(*(void *)*v32 + 24))(*v32, 1, v28 + 96 * v29);
          (*(void (**)(void, void, unsigned char *))(*(void *)v60[1] + 24))(v60[1], 0, v57);
          std::deque<std::__state<char>>::push_back(&v61, (uint64_t)v57);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(void *)&v57[32])
          {
            *(void *)&long long v58 = *(void *)&v57[32];
            operator delete(*(void **)&v57[32]);
          }
          goto LABEL_38;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      break;
    }
  }
  else
  {
LABEL_56:
    uint64_t v50 = 0;
  }
  std::deque<std::__state<char>>::~deque[abi:ne180100](&v61);
  return v50;
}

void sub_239AC23E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  std::deque<std::__state<char>>::~deque[abi:ne180100]((void *)(v22 - 144));
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_posix_subs<std::allocator<std::sub_match<char const*>>>(uint64_t a1, const char *a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v54 = 0;
  char v55 = 0;
  v56[0] = 0;
  *(_DWORD *)std::vector<std::pair<std::string, std::string>>::pointer v51 = 0;
  memset(&v51[8], 0, 32);
  long long v52 = 0u;
  memset(v53, 0, 37);
  uint64_t v6 = *(void *)(a1 + 40);
  if (v6)
  {
    __x.std::__split_buffer<std::string>::pointer first = a3;
    __x.second = a3;
    __x.matched = 0;
    *(_DWORD *)unint64_t v47 = 0;
    memset(&v47[8], 0, 48);
    *(_OWORD *)std::string __p = 0uLL;
    memset(v49, 0, 21);
    char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(void *)&v47[32])
    {
      *(void *)&v47[40] = *(void *)&v47[32];
      operator delete(*(void **)&v47[32]);
    }
    unint64_t v42 = a4;
    unsigned int v11 = v55;
    *((_DWORD *)v55 - 24) = 0;
    *((void *)v11 - 11) = a2;
    *((void *)v11 - 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
    *((void *)v11 - 9) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v11 - 4), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v55 - 40), *(unsigned int *)(a1 + 32));
    unint64_t v43 = a3;
    std::regex_traits<char>::char_class_type v44 = 0;
    char v12 = 0;
    unsigned int v13 = 0;
    unint64_t v14 = (const char *)(a3 - a2);
    uint64_t v15 = v55;
    *((void *)v55 - 2) = v6;
    *((_DWORD *)v15 - 2) = a5;
    *((unsigned char *)v15 - 4) = a6;
    do
    {
      BOOL v16 = (++v13 & 0xFFF) != 0 || (int)(v13 >> 12) < (int)v14;
      if (!v16) {
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
      }
      unsigned int v18 = v15 - 1;
      uint64_t v17 = *((void *)v15 - 2);
      uint64_t v19 = v15 - 6;
      if (v17) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v17 + 16))(v17, v15 - 6);
      }
      switch(*(_DWORD *)v19)
      {
        case 0xFFFFFC18:
          uint64_t v20 = (const char *)*((void *)v15 - 10);
          if ((a5 & 0x20) != 0 && v20 == a2 || (a5 & 0x1000) != 0 && v20 != v43) {
            goto LABEL_19;
          }
          char v27 = v12;
          uint64_t v28 = &v20[-*((void *)v15 - 11)];
          unint64_t v29 = v44;
          if ((v27 & ((uint64_t)v44 >= (uint64_t)v28)) == 0)
          {
            long long v30 = *(v15 - 5);
            *(_OWORD *)std::vector<std::pair<std::string, std::string>>::pointer v51 = *(_OWORD *)v19;
            *(_OWORD *)&v51[16] = v30;
            if (v51 != v19)
            {
              std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v51[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
              std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(v53, *((uint64_t **)v15 - 5), *((uint64_t **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
            }
            uint64_t v31 = (void *)*v18;
            *(void **)((char *)&v53[3] + 5) = *(void **)((char *)v15 - 11);
            void v53[3] = v31;
            unint64_t v29 = v28;
          }
          char v32 = v55;
          if (v29 == v14)
          {
            uint64_t v33 = (uint64_t)v54;
            while (v32 != (void *)v33)
            {
              v32 -= 12;
              std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, v32);
            }
            char v55 = (_OWORD *)v33;
            char v12 = 1;
            std::regex_traits<char>::char_class_type v44 = v14;
          }
          else
          {
            std::regex_traits<char>::char_class_type v44 = v29;
            unint64_t v34 = v55 - 6;
            std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
            char v55 = v34;
            char v12 = 1;
          }
          break;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          break;
        case 0xFFFFFC1F:
LABEL_19:
          uint64_t v21 = v55 - 6;
          std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v56, (void *)v55 - 12);
          char v55 = v21;
          break;
        case 0xFFFFFC20:
          long long v22 = *(v15 - 5);
          *(_OWORD *)unint64_t v47 = *(_OWORD *)v19;
          *(_OWORD *)&v47[16] = v22;
          memset(&v47[32], 0, 24);
          std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(&v47[32], *((long long **)v15 - 8), *((long long **)v15 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v15 - 7) - *((void *)v15 - 8)) >> 3));
          __p[0] = 0;
          __p[1] = 0;
          v49[0] = 0;
          std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)__p, *((long long **)v15 - 5), *((long long **)v15 - 4), (uint64_t)(*((void *)v15 - 4) - *((void *)v15 - 5)) >> 4);
          unint64_t v23 = (void *)*v18;
          *(void *)((char *)&v49[1] + 5) = *(void *)((char *)v15 - 11);
          v49[1] = v23;
          (*(void (**)(void, uint64_t, _OWORD *))(*(void *)*v18 + 24))(*v18, 1, v15 - 6);
          (*(void (**)(void, void, unsigned char *))(*(void *)v49[1] + 24))(v49[1], 0, v47);
          unint64_t v24 = v55;
          if ((unint64_t)v55 >= v56[0])
          {
            char v55 = (_OWORD *)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((uint64_t *)&v54, (uint64_t)v47);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            long long v25 = *(_OWORD *)&v47[16];
            *char v55 = *(_OWORD *)v47;
            v24[1] = v25;
            *((void *)v24 + 4) = 0;
            *((void *)v24 + 5) = 0;
            *((void *)v24 + 6) = 0;
            *((void *)v24 + 7) = 0;
            v24[2] = *(_OWORD *)&v47[32];
            *((void *)v24 + 6) = *(void *)&v47[48];
            memset(&v47[32], 0, 24);
            *((void *)v24 + 8) = 0;
            *((void *)v24 + 9) = 0;
            *(_OWORD *)((char *)v24 + 56) = *(_OWORD *)__p;
            *((void *)v24 + 9) = v49[0];
            __p[0] = 0;
            __p[1] = 0;
            v49[0] = 0;
            uint64_t v26 = v49[1];
            *(void *)((char *)v24 + 85) = *(void *)((char *)&v49[1] + 5);
            *((void *)v24 + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v26;
            char v55 = v24 + 6;
          }
          if (*(void *)&v47[32])
          {
            *(void *)&v47[40] = *(void *)&v47[32];
            operator delete(*(void **)&v47[32]);
          }
          break;
        default:
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
      }
      uint64_t v15 = v55;
    }
    while (v54 != v55);
    if (v12)
    {
      uint64_t v35 = *v42;
      *(void *)uint64_t v35 = a2;
      *(void *)(v35 + 8) = &v44[(void)a2];
      *(unsigned char *)(v35 + 16) = 1;
      if ((void)v52 != *(void *)&v51[32])
      {
        unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v52 - *(void *)&v51[32]) >> 3);
        uint64_t v37 = (unsigned char *)(*(void *)&v51[32] + 16);
        unsigned int v38 = 1;
        do
        {
          uint64_t v39 = v35 + 24 * v38;
          *(_OWORD *)uint64_t v39 = *((_OWORD *)v37 - 1);
          char v40 = *v37;
          v37 += 24;
          *(unsigned char *)(v39 + 16) = v40;
          BOOL v16 = v36 > v38++;
        }
        while (v16);
      }
      uint64_t v6 = 1;
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  if (v53[0])
  {
    v53[1] = v53[0];
    operator delete(v53[0]);
  }
  if (*(void *)&v51[32])
  {
    *(void *)&long long v52 = *(void *)&v51[32];
    operator delete(*(void **)&v51[32]);
  }
  *(void *)std::vector<std::pair<std::string, std::string>>::pointer v51 = &v54;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v51);
  return v6;
}

void sub_239AC29A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  std::__state<char>::~__state(&a17);
  std::__state<char>::~__state(&a33);
  a33 = v33 - 120;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 42 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::__state<char>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x2A)) + 96 * (v7 % 0x2A);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  *(void *)(v8 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(v8 + 48) = 0;
  *(void *)(v8 + 32) = 0;
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(v8 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v8 + 56) = 0;
  *(void *)(v8 + 64) = 0;
  *(void *)(v8 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v8 + 56) = result;
  *(void *)(v8 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v11 = *(void *)(a2 + 80);
  *(void *)(v8 + 85) = *(void *)(a2 + 85);
  *(void *)(v8 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v11;
  ++a1[5];
  return result;
}

uint64_t std::deque<std::__state<char>>::pop_back(void *a1)
{
  unsigned int v2 = a1 + 5;
  unint64_t v3 = a1[5] + a1[4] - 1;
  std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)(a1 + 5), (void *)(*(void *)(a1[1] + 8 * (v3 / 0x2A)) + 96 * (v3 % 0x2A)));
  --*v2;

  return std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](a1, 1);
}

int64x2_t std::deque<std::__state<char>>::push_front(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    std::deque<std::__state<char>>::__add_front_capacity((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0x2A));
  uint64_t v7 = *v6 + 96 * (v4 % 0x2A);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4032;
  }
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v7 - 96) = *(_OWORD *)a2;
  *(_OWORD *)(v7 - 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8;
  *(void *)(v7 - 56) = 0;
  *(void *)(v7 - 48) = 0;
  *(void *)(v7 - 64) = 0;
  *(_OWORD *)(v7 - 64) = *(_OWORD *)(a2 + 32);
  *(void *)(v7 - 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(v7 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(v7 - 32) = 0;
  *(void *)(v7 - 24) = 0;
  *(_OWORD *)(v7 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(_OWORD *)(a2 + 56);
  *(void *)(v7 - 24) = *(void *)(a2 + 72);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  uint64_t v9 = *(void *)(a2 + 80);
  *(void *)(v7 - 11) = *(void *)(a2 + 85);
  *(void *)(v7 - 16) = v9;
  int64x2_t result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_239BEB2B0);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

void std::deque<std::__state<char>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x2A;
  unint64_t v4 = v2 - 42;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)long long v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      unsigned int v38 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        long long v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)__int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    long long v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFC0uLL);
      std::__split_buffer<YAML::Token *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFC0uLL);
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &v54);
    std::regex_traits<char>::char_class_type v44 = (void *)a1[1];
    long long v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      unint64_t v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      long long v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        long long v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        std::vector<std::pair<std::string, std::string>>::pointer v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)std::vector<std::pair<std::string, std::string>>::pointer v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      unint64_t v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        long long v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  size_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0xFC0uLL);
  std::__split_buffer<YAML::Token *>::push_back(&v54, &v53);
  char v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)&v54, v27);
  }
  unint64_t v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_239AC2F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::__maybe_remove_back_spare[abi:ne180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 42 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x2A) {
    a2 = 1;
  }
  if (v5 < 0x54) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::__state<char>>::__add_front_capacity(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 42 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x2A)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    long long v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      unint64_t v46 = a1 + 3;
      std::string __p = std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(v7, v11);
      unint64_t v43 = (char *)__p;
      std::regex_traits<char>::char_class_type v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      __int16 v41 = operator new(0xFC0uLL);
      std::__split_buffer<YAML::Token *>::push_back(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      BOOL v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v46, v23);
              uint64_t v26 = v43;
              BOOL v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                BOOL v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unint64_t v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unint64_t v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              long long v31 = __p;
              std::string __p = v24;
              unint64_t v43 = &v24[8 * (v23 >> 2)];
              std::regex_traits<char>::char_class_type v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                BOOL v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              int64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                BOOL v14 = v43;
              }
              unint64_t v22 = &v14[-8 * (v19 >> 1)];
              BOOL v14 = &v20[v21];
              unint64_t v43 = v22;
              std::regex_traits<char>::char_class_type v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)BOOL v14 = v32;
          BOOL v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      unint64_t v43 = v33;
      unsigned int v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      std::regex_traits<char>::char_class_type v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 21;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        std::regex_traits<char>::char_class_type v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFC0uLL);
        std::__split_buffer<YAML::Token *>::push_back(a1, &__p);
        unint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFC0uLL);
      }
      std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 21;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 42;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 42;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    std::__split_buffer<YAML::Token *>::push_front((uint64_t)a1, &__p);
  }
}

void sub_239AC3314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = a1 + 5;
  uint64_t v3 = (void **)a1[1];
  unint64_t v4 = (void **)a1[2];
  if (v4 == v3)
  {
    unint64_t v4 = (void **)a1[1];
  }
  else
  {
    unint64_t v5 = a1[4];
    uint64_t v6 = &v3[v5 / 0x2A];
    uint64_t v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    unint64_t v8 = (unint64_t)v3[(a1[5] + v5) / 0x2A] + 96 * ((a1[5] + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::allocator<std::__state<char>>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 96;
        if (v7 - (unsigned char *)*v6 == 4032)
        {
          uint64_t v9 = (char *)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      uint64_t v3 = (void **)a1[1];
      unint64_t v4 = (void **)a1[2];
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = (void **)a1[2];
      uint64_t v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 21;
  }
  else
  {
    if (v11 != 2) {
      goto LABEL_16;
    }
    uint64_t v12 = 42;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    uint64_t v13 = *v3++;
    operator delete(v13);
  }

  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

char *std::vector<std::sub_match<char const*>>::__assign_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= a4)
  {
    uint64_t v19 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v19;
    unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v19 - result) >> 3);
    if (v20 >= a4)
    {
      uint64_t v25 = result;
      if (a2 != a3)
      {
        uint64_t v26 = result;
        do
        {
          *(_OWORD *)uint64_t v26 = *v6;
          v26[16] = *((unsigned char *)v6 + 16);
          v25 += 24;
          uint64_t v6 = (long long *)((char *)v6 + 24);
          v26 += 24;
        }
        while (v6 != a3);
      }
      int64_t v18 = v25 - result;
      uint64_t v13 = result;
    }
    else
    {
      int64_t v21 = (long long *)((char *)a2 + 24 * v20);
      if (v13 != result)
      {
        do
        {
          *(_OWORD *)int64x2_t result = *v6;
          result[16] = *((unsigned char *)v6 + 16);
          uint64_t v6 = (long long *)((char *)v6 + 24);
          result += 24;
        }
        while (v6 != v21);
      }
      unint64_t v22 = v13;
      if (v21 != a3)
      {
        unint64_t v23 = v13;
        do
        {
          long long v24 = *v21;
          *((void *)v23 + 2) = *((void *)v21 + 2);
          *(_OWORD *)unint64_t v23 = v24;
          v23 += 24;
          int64_t v21 = (long long *)((char *)v21 + 24);
          v22 += 24;
        }
        while (v21 != a3);
      }
      int64_t v18 = v22 - v13;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    int64x2_t result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](a1, v12);
    int64_t v15 = (char *)a1[1];
    BOOL v14 = a1 + 1;
    uint64_t v13 = v15;
    uint64_t v16 = v15;
    if (v6 != a3)
    {
      uint64_t v16 = v13;
      do
      {
        long long v17 = *v6;
        *((void *)v16 + 2) = *((void *)v6 + 2);
        *(_OWORD *)uint64_t v16 = v17;
        v16 += 24;
        uint64_t v6 = (long long *)((char *)v6 + 24);
      }
      while (v6 != a3);
    }
    int64_t v18 = v16 - v13;
  }
  void *v14 = &v13[v18];
  return result;
}

char *std::vector<std::pair<unsigned long,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(void *a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  int64x2_t result = (char *)*a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int64_t v18 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v18;
    unint64_t v19 = (v18 - result) >> 4;
    if (v19 >= a4)
    {
      uint64_t v26 = result;
      if (a2 != a3)
      {
        uint64_t v27 = result;
        do
        {
          uint64_t v28 = *v6;
          uint64_t v29 = v6[1];
          v6 += 2;
          *(void *)uint64_t v27 = v28;
          *((void *)v27 + 1) = v29;
          v27 += 16;
          v26 += 16;
        }
        while (v6 != a3);
      }
      long long v17 = (char *)(v26 - result);
      unint64_t v12 = result;
    }
    else
    {
      unint64_t v20 = (long long *)&a2[2 * v19];
      if (v12 != result)
      {
        do
        {
          uint64_t v21 = *v6;
          uint64_t v22 = v6[1];
          v6 += 2;
          *(void *)int64x2_t result = v21;
          *((void *)result + 1) = v22;
          result += 16;
        }
        while (v6 != (uint64_t *)v20);
      }
      unint64_t v23 = v12;
      if (v20 != (long long *)a3)
      {
        long long v24 = v12;
        do
        {
          long long v25 = *v20++;
          *(_OWORD *)long long v24 = v25;
          v24 += 16;
          v23 += 16;
        }
        while (v20 != (long long *)a3);
      }
      long long v17 = (char *)(v23 - v12);
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 60) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int64x2_t result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](a1, v11);
    BOOL v14 = (char *)a1[1];
    uint64_t v13 = a1 + 1;
    unint64_t v12 = v14;
    int64_t v15 = v14;
    if (v6 != a3)
    {
      int64_t v15 = v12;
      do
      {
        long long v16 = *(_OWORD *)v6;
        v6 += 2;
        *(_OWORD *)int64_t v15 = v16;
        v15 += 16;
      }
      while (v6 != a3);
    }
    long long v17 = (char *)(v15 - v12);
  }
  *uint64_t v13 = &v17[(void)v12];
  return result;
}

uint64_t std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(char *__f, char *__l, uint64_t a3, uint64_t a4, int a5)
{
  __int16 v5 = a5;
  memset(&__p.__prefix_, 0, 17);
  memset(&__p.__suffix_, 0, 17);
  __p.__ready_ = 0;
  __p.__position_start_ = 0;
  memset(&__p, 0, 41);
  int v9 = std::basic_regex<char,std::regex_traits<char>>::__search<std::allocator<std::sub_match<char const*>>>(a4, __f, __l, &__p, a5 | 0x1040u);
  std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>((std::vector<std::ssub_match> *)a3, (uint64_t)__f, (std::sub_match<std::__wrap_iter<const char *>> *)__l, (uint64_t *)&__p, (v5 & 0x800) != 0);
  if (__p.__matches_.__begin_)
  {
    __p.__matches_.__end_ = __p.__matches_.__begin_;
    operator delete(__p.__matches_.__begin_);
  }
  if (!v9) {
    return 0;
  }
  if (!*(unsigned char *)(a3 + 88)) {
    return 1;
  }
  uint64_t result = 0;
  *(void *)(a3 + 8) = *(void *)a3;
  return result;
}

void sub_239AC389C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::match_results<std::__wrap_iter<char const*>>::__assign[abi:ne180100]<char const*,std::allocator<std::sub_match<char const*>>>(std::vector<std::ssub_match> *a1, uint64_t a2, std::sub_match<std::__wrap_iter<const char *>> *a3, uint64_t *a4, char a5)
{
  uint64_t v10 = a4[6];
  std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(a1, 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3));
  begiuint64_t n = a1->__begin_;
  if (a1->__end_ != a1->__begin_)
  {
    unint64_t v12 = 0;
    unint64_t v13 = 0;
    uint64_t v15 = *a4;
    uint64_t v14 = a4[1];
    do
    {
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v15) >> 3);
      long long v17 = (void *)(v15 + v12 * 24);
      if (v16 <= v13) {
        int64_t v18 = a4 + 3;
      }
      else {
        int64_t v18 = v17;
      }
      begin[v12].first.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + *v18 - v10);
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v13) {
        unint64_t v19 = a4 + 3;
      }
      else {
        unint64_t v19 = (uint64_t *)(*a4 + v12 * 24);
      }
      a1->__begin_[v12].second.__i_ = (std::__wrap_iter<const char *>::iterator_type)(a2 + v19[1] - v10);
      uint64_t v15 = *a4;
      uint64_t v14 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - *a4) >> 3) <= v13) {
        unint64_t v20 = a4 + 3;
      }
      else {
        unint64_t v20 = (uint64_t *)(*a4 + v12 * 24);
      }
      char v21 = *((unsigned char *)v20 + 16);
      begiuint64_t n = a1->__begin_;
      std::vector<std::ssub_match>::pointer end = a1->__end_;
      a1->__begin_[v12].matched = v21;
      ++v13;
      ++v12;
    }
    while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)begin) >> 3));
  }
  a1[1].__begin_ = a3;
  a1[1].__end_ = a3;
  LOBYTE(a1[1].__end_cap_.__value_) = 0;
  unint64_t v23 = (std::sub_match<std::__wrap_iter<const char *>> *)(a2 + a4[6] - v10);
  a1[2].__begin_ = v23;
  a1[2].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[7] - v10);
  LOBYTE(a1[2].__end_cap_.__value_) = *((unsigned char *)a4 + 64);
  a1[3].__begin_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[9] - v10);
  a1[3].__end_ = (std::vector<std::ssub_match>::pointer)(a2 + a4[10] - v10);
  LOBYTE(a1[3].__end_cap_.__value_) = *((unsigned char *)a4 + 88);
  if ((a5 & 1) == 0) {
    a1[4].__end_ = v23;
  }
  LOBYTE(a1[4].__begin_) = *((unsigned char *)a4 + 96);
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::resize(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __sz)
{
  std::vector<std::ssub_match>::size_type v2 = 0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)this->__begin_) >> 3);
  BOOL v3 = __sz >= v2;
  std::vector<std::ssub_match>::size_type v4 = __sz - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(this, v4);
  }
  else if (!v3)
  {
    this->__end_ = &this->__begin_[__sz];
  }
}

void std::vector<std::sub_match<std::__wrap_iter<char const*>>>::__append(std::vector<std::ssub_match> *this, std::vector<std::ssub_match>::size_type __n)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  __int16 v5 = value;
  uint64_t v7 = p_end_cap[-1].__value_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)v7) >> 3) >= __n)
  {
    if (__n)
    {
      unint64_t v13 = &v7[__n];
      std::vector<std::ssub_match>::size_type v14 = 24 * __n;
      do
      {
        v7->first.__i_ = 0;
        v7->second.__i_ = 0;
        v7->matched = 0;
        ++v7;
        v14 -= 24;
      }
      while (v14);
      uint64_t v7 = v13;
    }
    this->__end_ = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)this->__begin_) >> 3);
    unint64_t v9 = v8 + __n;
    if (v8 + __n > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)this->__begin_) >> 3);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)p_end_cap, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    uint64_t v15 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v8];
    unint64_t v16 = &v15[__n];
    std::vector<std::ssub_match>::size_type v17 = 24 * __n;
    int64_t v18 = v15;
    do
    {
      v18->first.__i_ = 0;
      v18->second.__i_ = 0;
      v18->matched = 0;
      ++v18;
      v17 -= 24;
    }
    while (v17);
    unint64_t v19 = (std::sub_match<std::__wrap_iter<const char *>> *)&v12[24 * v11];
    begiuint64_t n = this->__begin_;
    std::vector<std::ssub_match>::pointer end = this->__end_;
    if (end != this->__begin_)
    {
      do
      {
        std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = end[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>>;
        *(void *)&v15[-1].matched = *(void *)&end[-1].matched;
        v15[-1].std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> = v22;
        --v15;
        --end;
      }
      while (end != begin);
      std::vector<std::ssub_match>::pointer end = this->__begin_;
    }
    this->__begin_ = v15;
    this->__end_ = v16;
    this->__end_cap_.__value_ = v19;
    if (end)
    {
      operator delete(end);
    }
  }
}

std::__split_buffer<std::string>::pointer std::vector<std::string>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::string const*>,std::__wrap_iter<std::string const*>>(long long *a1, uint64_t a2, long long *a3, long long *a4, uint64_t a5)
{
  uint64_t v5 = a2;
  if (a5 <= 0) {
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  uint64_t v7 = a3;
  uint64_t v10 = (uint64_t)(a1 + 1);
  uint64_t v9 = *((void *)a1 + 2);
  unint64_t v11 = (std::string *)*((void *)a1 + 1);
  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v9 - (uint64_t)v11) >> 3)) >= a5)
  {
    uint64_t v19 = (uint64_t)v11 - a2;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v11 - a2) >> 3)) >= a5)
    {
      unint64_t v20 = (long long *)((char *)a3 + 24 * a5);
      char v21 = (std::string *)*((void *)a1 + 1);
    }
    else
    {
      unint64_t v20 = (long long *)((char *)a3 + 8 * (((uint64_t)v11 - a2) >> 3));
      char v21 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)(a1 + 1), v20, a4, v11);
      *((void *)a1 + 1) = v21;
      if (v19 < 1) {
        return (std::__split_buffer<std::string>::pointer)v5;
      }
    }
    std::pair<std::__wrap_iter<const char *>, std::__wrap_iter<const char *>> v22 = (std::string *)(v5 + 24 * a5);
    unint64_t v23 = &v21[-a5];
    long long v24 = v21;
    if (v23 < v11)
    {
      long long v24 = v21;
      do
      {
        long long v25 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v24->__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v24->__r_.__value_.__l.__data_ = v25;
        ++v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        ++v23;
      }
      while (v23 < v11);
    }
    *((void *)a1 + 1) = v24;
    if (v21 != v22)
    {
      uint64_t v26 = v21 - 1;
      uint64_t v27 = 8 * (((char *)v21 - (char *)v22) >> 3);
      do
      {
        if (SHIBYTE(v26->__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26->__r_.__value_.__l.__data_);
        }
        uint64_t v28 = (long long *)(v5 + v27 - 24);
        long long v29 = *v28;
        v26->__r_.__value_.__r.__words[2] = *(void *)(v5 + v27 - 8);
        *(_OWORD *)&v26->__r_.__value_.__l.__data_ = v29;
        --v26;
        *(unsigned char *)(v5 + v27 - 1) = 0;
        *(unsigned char *)uint64_t v28 = 0;
        v27 -= 24;
      }
      while (v27);
    }
    if (v20 != v7)
    {
      uint64_t v30 = (std::string *)v5;
      do
      {
        std::string::operator=(v30, (const std::string *)v7);
        uint64_t v7 = (long long *)((char *)v7 + 24);
        ++v30;
      }
      while (v7 != v20);
    }
    return (std::__split_buffer<std::string>::pointer)v5;
  }
  uint64_t v12 = *(void *)a1;
  unint64_t v13 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(void *)a1) >> 3);
  if (v13 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - v12) >> 3);
  unint64_t v15 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v12) >> 3);
  uint64_t v16 = 2 * v15;
  if (2 * v15 <= v13) {
    uint64_t v16 = a5 - 0x5555555555555555 * (((uint64_t)v11 - *(void *)a1) >> 3);
  }
  if (v15 >= 0x555555555555555) {
    unint64_t v17 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v17 = v16;
  }
  v45.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 1);
  if (v17) {
    int64_t v18 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 1), v17);
  }
  else {
    int64_t v18 = 0;
  }
  uint64_t v32 = v18 + v14;
  v45.__first_ = v18;
  v45.__begin_ = v32;
  v45.__end_ = v32;
  v45.__end_cap_.__value_ = &v18[v17];
  uint64_t v33 = 3 * a5;
  unint64_t v34 = &v32[a5];
  uint64_t v35 = 8 * v33;
  do
  {
    if (*((char *)v7 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)v7, *((void *)v7 + 1));
    }
    else
    {
      long long v36 = *v7;
      v32->__r_.__value_.__r.__words[2] = *((void *)v7 + 2);
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v36;
    }
    ++v32;
    uint64_t v7 = (long long *)((char *)v7 + 24);
    v35 -= 24;
  }
  while (v35);
  v45.__end_ = v34;
  begiuint64_t n = v45.__begin_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>(v10, v5, v5, *(void *)a1, *(void *)a1, (uint64_t)v45.__begin_, (uint64_t)v45.__begin_);
  v45.__begin_ = v37;
  uint64_t v38 = *((void *)a1 + 1);
  uint64_t v39 = v34;
  uint64_t v48 = v34;
  uint64_t v49 = v34;
  v46[0] = v10;
  v46[1] = &v48;
  v46[2] = &v49;
  if (v38 != v5)
  {
    do
    {
      long long v40 = *(_OWORD *)v5;
      v39->__r_.__value_.__r.__words[2] = *(void *)(v5 + 16);
      *(_OWORD *)&v39->__r_.__value_.__l.__data_ = v40;
      ++v39;
      *(void *)(v5 + 8) = 0;
      *(void *)(v5 + 16) = 0;
      *(void *)uint64_t v5 = 0;
      v5 += 24;
    }
    while (v5 != v38);
    uint64_t v49 = v39;
  }
  char v47 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
  long long v41 = *a1;
  value = v45.__end_cap_.__value_;
  *(void *)a1 = v45.__begin_;
  *((void *)a1 + 1) = v39;
  *(_OWORD *)&v45.__begin_ = v41;
  unint64_t v43 = (std::string *)*((void *)a1 + 2);
  *((void *)a1 + 2) = value;
  v45.__end_cap_.__value_ = v43;
  v45.__first_ = (std::__split_buffer<std::string>::pointer)v41;
  std::__split_buffer<std::string>::~__split_buffer(&v45);
  return begin;
}

void sub_239AC3F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void YAML::Scanner::Scanner(uint64_t a1, uint64_t a2)
{
}

{
  YAML::Stream::Stream(a1, a2);
}

void YAML::Scanner::~Scanner(YAML::Scanner *this)
{
  std::deque<YAML::CollectionType::value>::~deque[abi:ne180100]((void *)this + 34);
  std::vector<std::ssub_match>::size_type v2 = (void **)((char *)this + 248);
  std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destroy_vector::operator()[abi:ne180100](&v2);
  std::deque<YAML::Scanner::IndentMarker *>::~deque[abi:ne180100]((void *)this + 25);
  std::deque<YAML::Scanner::SimpleKey>::~deque[abi:ne180100]((void *)this + 19);
  std::deque<YAML::Token>::~deque[abi:ne180100]((uint64_t)this + 96);
  YAML::Stream::~Stream(this);
}

BOOL YAML::Scanner::empty(YAML::Scanner *this)
{
  return *((void *)this + 17) == 0;
}

void YAML::Scanner::EnsureTokensInQueue(YAML::Scanner *this)
{
  std::vector<std::ssub_match>::size_type v2 = (int64x2_t *)((char *)this + 96);
  while (1)
  {
    while (1)
    {
      if (!*((void *)this + 17)) {
        goto LABEL_5;
      }
      int v3 = *(_DWORD *)(*(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
                     + 80 * (*((void *)this + 16) % 0x33uLL));
      if (v3 != 1) {
        break;
      }
      std::deque<YAML::Token>::pop_front(v2);
    }
    if (!v3) {
      return;
    }
LABEL_5:
    if (*((unsigned char *)this + 145)) {
      break;
    }
    YAML::Scanner::ScanNextToken(this);
  }
}

void YAML::Scanner::pop(int64x2_t *this)
{
  YAML::Scanner::EnsureTokensInQueue((YAML::Scanner *)this);
  if (this[8].i64[1])
  {
    std::deque<YAML::Token>::pop_front(this + 6);
  }
}

unint64_t YAML::Scanner::peek(YAML::Scanner *this)
{
  if (!*((void *)this + 17)) {
    __assert_rtn("peek", "scanner.cpp", 37, "!m_tokens.empty()");
  }
  return *(void *)(*((void *)this + 13) + 8 * (*((void *)this + 16) / 0x33uLL))
       + 80 * (*((void *)this + 16) % 0x33uLL);
}

uint64_t YAML::Scanner::mark(YAML::Scanner *this)
{
  return *((void *)this + 1);
}

void YAML::Scanner::ScanNextToken(YAML::Scanner *this)
{
  if (*((unsigned char *)this + 145)) {
    return;
  }
  if (!*((unsigned char *)this + 144))
  {
    YAML::Scanner::StartStream(this);
  }
  YAML::Scanner::ScanToNextToken(this);
  YAML::Scanner::PopIndentToHere(this);
  uint64_t v2 = YAML::Stream::operator BOOL(this);
  if (v2)
  {
    if (*((_DWORD *)this + 4)) {
      goto LABEL_5;
    }
    if (!*((void *)this + 8)
      || *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                  + (*((void *)this + 7) & 0xFFFLL)) != 37)
    {
      std::vector<std::ssub_match>::size_type v4 = YAML::Exp::DocStart((YAML::Exp *)v2);
      unint64_t v15 = 0;
      uint64_t v16 = this;
      uint64_t v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v4, &v15);
      if ((v2 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanDocStart(this);
        return;
      }
      if (!*((_DWORD *)this + 4))
      {
        uint64_t v7 = YAML::Exp::DocEnd((YAML::Exp *)v2);
        unint64_t v15 = 0;
        uint64_t v16 = this;
        uint64_t v2 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v7, &v15);
        if ((v2 & 0x80000000) == 0)
        {
          YAML::Scanner::ScanDocEnd(this);
          return;
        }
      }
LABEL_5:
      if (*((void *)this + 8))
      {
        unsigned int v3 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                                + (*((void *)this + 7) & 0xFFFLL));
        if (v3 <= 0x5C)
        {
          if (v3 == 44)
          {
            YAML::Scanner::ScanFlowEntry(this);
            return;
          }
          if (v3 == 91) {
            goto LABEL_10;
          }
        }
        else
        {
          if (v3 == 93 || v3 == 125)
          {
            YAML::Scanner::ScanFlowEnd(this);
            return;
          }
          if (v3 == 123)
          {
LABEL_10:
            YAML::Scanner::ScanFlowStart(this);
            return;
          }
        }
      }
      YAML::Exp::BlockEntry((YAML::Exp *)v2);
      unint64_t v15 = 0;
      uint64_t v16 = this;
      uint64_t v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_26AD86AC8, &v15);
      if ((v5 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanBlockEntry(this);
        return;
      }
      if (*((void *)this + 39))
      {
        YAML::Exp::KeyInFlow((YAML::Exp *)v5);
        uint64_t v6 = &unk_26AD86B08;
      }
      else
      {
        YAML::Exp::Key((YAML::Exp *)v5);
        uint64_t v6 = &unk_26AD86AE8;
      }
      unint64_t v15 = 0;
      uint64_t v16 = this;
      if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v6, &v15) & 0x80000000) == 0)
      {
        YAML::Scanner::ScanKey(this);
        return;
      }
      ValueRegex = YAML::Scanner::GetValueRegex(this);
      unint64_t v15 = 0;
      uint64_t v16 = this;
      uint64_t v9 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)ValueRegex, &v15);
      if ((v9 & 0x80000000) == 0)
      {
        YAML::Scanner::ScanValue(this);
        return;
      }
      if (!*((void *)this + 8))
      {
        if (!*((void *)this + 39))
        {
LABEL_52:
          uint64_t v11 = YAML::Exp::PlainScalar((YAML::Exp *)v9);
          goto LABEL_53;
        }
LABEL_46:
        uint64_t v11 = YAML::Exp::PlainScalarInFlow((YAML::Exp *)v9);
LABEL_53:
        unint64_t v15 = 0;
        uint64_t v16 = this;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v11, &v15) & 0x80000000) != 0)
        {
          exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
          int v14 = *((_DWORD *)this + 4);
          uint64_t v17 = *((void *)this + 1);
          int v18 = v14;
          std::string::basic_string[abi:ne180100]<0>(&v15, "unknown token");
          YAML::Exception::Exception((uint64_t)exception, &v17, (uint64_t)&v15);
          *exceptiouint64_t n = &unk_26ED2A588;
        }
        YAML::Scanner::ScanPlainScalar(this);
        return;
      }
      int v10 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                               + (*((void *)this + 7) & 0xFFFLL));
      if (v10 == 33)
      {
        YAML::Scanner::ScanTag(this);
        return;
      }
      if (v10 == 42 || v10 == 38)
      {
        YAML::Scanner::ScanAnchorOrAlias((void **)this);
        return;
      }
      uint64_t v12 = *((void *)this + 39);
      if (v12)
      {
        if (v10 != 39 && v10 != 34) {
          goto LABEL_51;
        }
LABEL_58:
        YAML::Scanner::ScanQuotedScalar(this);
        return;
      }
      if (*(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((void *)this + 7) & 0xFFFLL)) > 0x3Du)
      {
        if (v10 == 124 || v10 == 62)
        {
          YAML::Scanner::ScanBlockScalar(this);
          return;
        }
      }
      else if (v10 == 34 || v10 == 39)
      {
        goto LABEL_58;
      }
LABEL_51:
      if (!v12) {
        goto LABEL_52;
      }
      goto LABEL_46;
    }
    YAML::Scanner::ScanDirective(this);
  }
  else
  {
    YAML::Scanner::EndStream(this);
  }
}

void sub_239AC45C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

void YAML::Scanner::StartStream(YAML::Scanner *this)
{
  *((unsigned char *)this + 144) = 1;
  *((unsigned char *)this + 146) = 1;
  operator new();
}

void sub_239AC46A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    MEMORY[0x23ECAACC0](a10, 0x1020C406E52F545);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::Scanner::ScanToNextToken(YAML::Scanner *this)
{
  while (1)
  {
    while (YAML::Stream::operator BOOL(this))
    {
      if (!*((void *)this + 8)) {
        break;
      }
      int v2 = *(unsigned __int8 *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                              + (*((void *)this + 7) & 0xFFFLL));
      if (v2 != 32 && v2 != 9) {
        break;
      }
      if (!*((void *)this + 39))
      {
        {
          YAML::Exp::Tab(void)::e = 1;
          word_268A0A85C = 9;
          qword_268A0A868 = 0;
          unk_268A0A870 = 0;
          qword_268A0A860 = 0;
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tab(void)::e, &dword_239A02000);
        }
        unint64_t v12 = 0;
        v13[0] = this;
        if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&YAML::Exp::Tab(void)::e, &v12) & 0x80000000) == 0) {
          *((unsigned char *)this + 146) = 0;
        }
      }
      YAML::Stream::get(this);
    }
    {
      YAML::Exp::Comment(void)::e = 1;
      word_268A0A884 = 35;
      qword_268A0A890 = 0;
      unk_268A0A898 = 0;
      qword_268A0A888 = 0;
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Comment(void)::e, &dword_239A02000);
    }
    LODWORD(v12) = YAML::Exp::Comment(void)::e;
    WORD2(v12) = word_268A0A884;
    memset(v13, 0, sizeof(v13));
    std::vector<YAML::RegEx>::__init_with_size[abi:ne180100]<YAML::RegEx*,YAML::RegEx*>(v13, (int *)qword_268A0A888, (int *)qword_268A0A890, (qword_268A0A890 - qword_268A0A888) >> 5);
    v14[0] = 0;
    v14[1] = (void **)this;
    int v4 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&v12, (unint64_t *)v14);
    v14[0] = (void **)v13;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](v14);
    if ((v4 & 0x80000000) == 0)
    {
      uint64_t v5 = YAML::Stream::operator BOOL(this);
      if (v5)
      {
        do
        {
          uint64_t v6 = YAML::Exp::Break((YAML::Exp *)v5);
          unint64_t v12 = 0;
          v13[0] = this;
          uint64_t v5 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v6, &v12);
          if ((v5 & 0x80000000) == 0) {
            break;
          }
          YAML::Stream::get(this);
          uint64_t v5 = YAML::Stream::operator BOOL(this);
        }
        while ((v5 & 1) != 0);
      }
    }
    uint64_t v7 = YAML::Exp::Break((YAML::Exp *)v5);
    unint64_t v12 = 0;
    v13[0] = this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v7, &v12);
    if ((result & 0x80000000) != 0) {
      break;
    }
    uint64_t v9 = YAML::Exp::Break((YAML::Exp *)result);
    unint64_t v12 = 0;
    v13[0] = this;
    int v10 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v9, &v12);
    if (v10 >= 1)
    {
      int v11 = v10;
      do
      {
        YAML::Stream::get(this);
        --v11;
      }
      while (v11);
    }
    YAML::Scanner::InvalidateSimpleKey(this);
    if (!*((void *)this + 39)) {
      *((unsigned char *)this + 146) = 1;
    }
  }
  return result;
}

void sub_239AC4940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndentToHere(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    uint64_t v2 = *((void *)this + 30);
    if (v2)
    {
      while (1)
      {
        unsigned int v3 = *(_DWORD **)(*(void *)(*((void *)this + 26)
                                    + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF));
        int v4 = *((_DWORD *)this + 4);
        if (*v3 < v4) {
          goto LABEL_11;
        }
        if (*v3 == v4)
        {
          if (v3[1] != 1) {
            goto LABEL_11;
          }
          YAML::Exp::BlockEntry(this);
          v5[0] = 0;
          v5[1] = (unint64_t)this;
          if ((YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)&unk_26AD86AC8, v5) & 0x80000000) == 0) {
            break;
          }
        }
        YAML::Scanner::PopIndent(this);
        uint64_t v2 = *((void *)this + 30);
        if (!v2) {
          return;
        }
      }
      while (1)
      {
        uint64_t v2 = *((void *)this + 30);
        if (!v2) {
          break;
        }
LABEL_11:
        if (*(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                               + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                   + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                       + 8) != 1)
          return;
        YAML::Scanner::PopIndent(this);
      }
    }
  }
}

void YAML::Scanner::EndStream(YAML::Scanner *this)
{
  if (*((int *)this + 4) >= 1) {
    *((_DWORD *)this + 4) = 0;
  }
  YAML::Scanner::PopAllIndents(this);
  for (uint64_t i = *((void *)this + 24); i; uint64_t i = *((void *)this + 24))
  {
    *((void *)this + 24) = i - 1;
    std::deque<YAML::Scanner::SimpleKey>::__maybe_remove_back_spare[abi:ne180100]((void *)this + 19, 1);
  }
  *(_WORD *)((char *)this + 145) = 1;
}

void *YAML::Exp::DocStart(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "---");
    uint64_t v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v11, (char *)__p, 6);
    unsigned int v3 = (int *)YAML::Exp::BlankOrBreak(v2);
    int v4 = 0;
    __int16 v5 = 0;
    memset(v6, 0, sizeof(v6));
    YAML::operator|(v3, &v4, (uint64_t)&v7);
    YAML::operator+(&v11, (int *)&v7, (uint64_t)&YAML::Exp::DocStart(void)::e);
    unint64_t v13 = (void **)&v8;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    unint64_t v13 = (void **)v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    uint64_t v7 = (void **)&v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocStart(void)::e, &dword_239A02000);
  }
  return &YAML::Exp::DocStart(void)::e;
}

void sub_239AC4BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v24 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *YAML::Exp::DocEnd(YAML::Exp *this)
{
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "...");
    uint64_t v2 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v11, (char *)__p, 6);
    unsigned int v3 = (int *)YAML::Exp::BlankOrBreak(v2);
    int v4 = 0;
    __int16 v5 = 0;
    memset(v6, 0, sizeof(v6));
    YAML::operator|(v3, &v4, (uint64_t)&v7);
    YAML::operator+(&v11, (int *)&v7, (uint64_t)&YAML::Exp::DocEnd(void)::e);
    unint64_t v13 = (void **)&v8;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    unint64_t v13 = (void **)v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
    uint64_t v7 = (void **)&v12;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::DocEnd(void)::e, &dword_239A02000);
  }
  return &YAML::Exp::DocEnd(void)::e;
}

void sub_239AC4D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  *(void *)(v24 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v23 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  *(void *)(v24 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v22;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  a13 = v24 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void YAML::Exp::BlockEntry(YAML::Exp *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_13, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (YAML::Exp *)__cxa_guard_acquire(&_MergedGlobals_13);
    if (v1)
    {
      int v8 = 1;
      __int16 v9 = 45;
      memset(v10, 0, sizeof(v10));
      uint64_t v2 = (int *)YAML::Exp::BlankOrBreak(v1);
      int v3 = 0;
      __int16 v4 = 0;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(v2, &v3, (uint64_t)&v6);
      YAML::operator+(&v8, (int *)&v6, (uint64_t)&unk_26AD86AC8);
      int v11 = (void **)&v7;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      int v11 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      uint64_t v6 = (void **)v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_26AD86AC8, &dword_239A02000);
      __cxa_guard_release(&_MergedGlobals_13);
    }
  }
}

void sub_239AC4EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  *(void *)(v8 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v7 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  *(void *)(v8 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v6;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v8 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  __cxa_guard_abort(&_MergedGlobals_13);
  _Unwind_Resume(a1);
}

void YAML::Exp::Key(YAML::Exp *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86AA0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (YAML::Exp *)__cxa_guard_acquire(&qword_26AD86AA0);
    if (v1)
    {
      int v3 = 1;
      __int16 v4 = 63;
      memset(v5, 0, sizeof(v5));
      uint64_t v2 = (int *)YAML::Exp::BlankOrBreak(v1);
      YAML::operator+(&v3, v2, (uint64_t)&unk_26AD86AE8);
      uint64_t v6 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_26AD86AE8, &dword_239A02000);
      __cxa_guard_release(&qword_26AD86AA0);
    }
  }
}

void sub_239AC5000(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_26AD86AA0);
  _Unwind_Resume(a1);
}

void YAML::Exp::KeyInFlow(YAML::Exp *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86AA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (YAML::Exp *)__cxa_guard_acquire(&qword_26AD86AA8);
    if (v1)
    {
      int v3 = 1;
      __int16 v4 = 63;
      memset(v5, 0, sizeof(v5));
      uint64_t v2 = (int *)YAML::Exp::BlankOrBreak(v1);
      YAML::operator+(&v3, v2, (uint64_t)&unk_26AD86B08);
      uint64_t v6 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v6);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &unk_26AD86B08, &dword_239A02000);
      __cxa_guard_release(&qword_26AD86AA8);
    }
  }
}

void sub_239AC50DC(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  __cxa_guard_abort(&qword_26AD86AA8);
  _Unwind_Resume(a1);
}

int *YAML::Scanner::GetValueRegex(YAML::Scanner *this)
{
  if (*((void *)this + 39))
  {
    if (*((unsigned char *)this + 147))
    {
      uint64_t v1 = &dword_26AD86B48;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86AB8, memory_order_acquire) & 1) == 0)
      {
        uint64_t v2 = &qword_26AD86AB8;
        if (__cxa_guard_acquire(&qword_26AD86AB8))
        {
          dword_26AD86B48 = 1;
          uint64_t v1 = &dword_26AD86B48;
          word_26AD86B4C = 58;
          qword_26AD86B58 = 0;
          unk_26AD86B60 = 0;
          qword_26AD86B50 = 0;
LABEL_15:
          __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, v1, &dword_239A02000);
          __cxa_guard_release(v2);
        }
      }
    }
    else
    {
      uint64_t v1 = (int *)&unk_26AD86B68;
      if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86AC0, memory_order_acquire) & 1) == 0)
      {
        uint64_t v6 = (YAML::Exp *)__cxa_guard_acquire(&qword_26AD86AC0);
        if (v6)
        {
          int v15 = 1;
          __int16 v16 = 58;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          uint64_t v17 = 0;
          uint64_t v7 = (int *)YAML::Exp::BlankOrBreak(v6);
          std::string::basic_string[abi:ne180100]<0>(__p, ",}");
          YAML::RegEx::RegEx((uint64_t)&v10, (char *)__p, 3);
          YAML::operator|(v7, &v10, (uint64_t)&v13);
          YAML::operator+(&v15, (int *)&v13, (uint64_t)&unk_26AD86B68);
          unint64_t v20 = (void **)v14;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v20);
          unint64_t v20 = (void **)v12;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v20);
          if (v9 < 0) {
            operator delete(__p[0]);
          }
          unint64_t v13 = (void **)&v17;
          std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
          uint64_t v2 = &qword_26AD86AC0;
          uint64_t v1 = (int *)&unk_26AD86B68;
          goto LABEL_15;
        }
      }
    }
  }
  else
  {
    uint64_t v1 = (int *)&unk_26AD86B28;
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86AB0, memory_order_acquire) & 1) == 0)
    {
      int v3 = (YAML::Exp *)__cxa_guard_acquire(&qword_26AD86AB0);
      if (v3)
      {
        int v15 = 1;
        __int16 v16 = 58;
        uint64_t v18 = 0;
        uint64_t v19 = 0;
        uint64_t v17 = 0;
        __int16 v4 = (int *)YAML::Exp::BlankOrBreak(v3);
        int v10 = 0;
        __int16 v11 = 0;
        memset(v12, 0, sizeof(v12));
        YAML::operator|(v4, &v10, (uint64_t)&v13);
        YAML::operator+(&v15, (int *)&v13, (uint64_t)&unk_26AD86B28);
        __p[0] = v14;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        __p[0] = v12;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
        unint64_t v13 = (void **)&v17;
        std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
        uint64_t v2 = &qword_26AD86AB0;
        uint64_t v1 = (int *)&unk_26AD86B28;
        goto LABEL_15;
      }
    }
  }
  return v1;
}

void sub_239AC5348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  *(void *)(v20 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v19 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  *(void *)(v20 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a16;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v20 - 40));
  if (a14 < 0) {
    operator delete(__p);
  }
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a19);
  __cxa_guard_abort(&qword_26AD86AC0);
  _Unwind_Resume(a1);
}

void *YAML::Exp::PlainScalar(YAML::Exp *this)
{
  {
    if (v2)
    {
      int v3 = (int *)YAML::Exp::BlankOrBreak(v2);
      YAML::RegEx::RegEx((uint64_t)&v19, (char *)v17, 3);
      YAML::operator|(v3, &v19, (uint64_t)&v21);
      std::string::basic_string[abi:ne180100]<0>(__p, "-?:");
      __int16 v4 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v13, (char *)__p, 3);
      __int16 v5 = (int *)YAML::Exp::BlankOrBreak(v4);
      int v6 = 0;
      __int16 v7 = 0;
      memset(v8, 0, sizeof(v8));
      YAML::operator|(v5, &v6, (uint64_t)&v9);
      YAML::operator+(&v13, (int *)&v9, (uint64_t)&v15);
      YAML::operator|(&v21, (int *)&v15, (uint64_t)&v23);
      YAML::operator!(&v23, (uint64_t)&YAML::Exp::PlainScalar(void)::e);
      long long v25 = (void **)&v24;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v25);
      long long v25 = (void **)&v16;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v25);
      long long v25 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v25);
      long long v25 = (void **)v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v25);
      char v9 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v9);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
      int v15 = (void **)&v22;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v15);
      int v15 = (void **)&v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v15);
      if (v18 < 0) {
        operator delete(v17[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalar(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::PlainScalar(void)::e;
}

void sub_239AC55E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  *(void *)(v39 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v38 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a29;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a15;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  *(void *)(v39 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v37;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v39 - 40));
  a14 = &a25;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a14);
  if (a23 < 0) {
    operator delete(__p);
  }
  a28 = v39 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  a28 = v39 - 128;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a28);
  if (a37 < 0) {
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

void *YAML::Exp::PlainScalarInFlow(YAML::Exp *this)
{
  {
    if (v2)
    {
      int v3 = (int *)YAML::Exp::BlankOrBreak(v2);
      YAML::RegEx::RegEx((uint64_t)&v14, (char *)v12, 3);
      YAML::operator|(v3, &v14, (uint64_t)&v16);
      std::string::basic_string[abi:ne180100]<0>(__p, "-:");
      __int16 v4 = (YAML::Exp *)YAML::RegEx::RegEx((uint64_t)&v8, (char *)__p, 3);
      __int16 v5 = (int *)YAML::Exp::Blank(v4);
      YAML::operator+(&v8, v5, (uint64_t)&v10);
      YAML::operator|(&v16, (int *)&v10, (uint64_t)&v18);
      YAML::operator!(&v18, (uint64_t)&YAML::Exp::PlainScalarInFlow(void)::e);
      uint64_t v20 = (void **)&v19;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v20);
      uint64_t v20 = (void **)&v11;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v20);
      uint64_t v20 = (void **)&v9;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v20);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v10 = (void **)&v17;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      uint64_t v10 = (void **)&v15;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v10);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::PlainScalarInFlow(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::PlainScalarInFlow(void)::e;
}

void sub_239AC587C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,uint64_t a31)
{
  *(void *)(v32 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v31 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(void *)(v32 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a21;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  *(void *)(v32 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a17;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v32 - 40));
  if (a15 < 0) {
    operator delete(__p);
  }
  a20 = (uint64_t *)(v32 - 96);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  a20 = &a31;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  if (a29 < 0) {
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

void *YAML::ParserException::ParserException(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t result = (void *)YAML::Exception::Exception(a1, a2, a3);
  *uint64_t result = &unk_26ED2A588;
  return result;
}

BOOL YAML::Scanner::IsWhitespaceToBeEaten(YAML::Scanner *this, int a2)
{
  return a2 == 32 || a2 == 9;
}

uint64_t YAML::ptr_vector<YAML::Scanner::IndentMarker>::push_back(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  char v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61) {
      std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v5 - (void)*a1;
    uint64_t v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v26 = result;
    if (v13) {
      int v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>(result, v13);
    }
    else {
      int v14 = 0;
    }
    uint64_t v15 = &v14[8 * v10];
    int v16 = &v14[8 * v13];
    long long v25 = v16;
    uint64_t v17 = *a2;
    *a2 = 0;
    *(void *)uint64_t v15 = v17;
    uint64_t v9 = v15 + 8;
    v24.i64[1] = (uint64_t)(v15 + 8);
    uint64_t v19 = *a1;
    int v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v18);
    }
    else
    {
      do
      {
        uint64_t v20 = *((void *)v18 - 1);
        v18 -= 8;
        *(void *)int v18 = 0;
        *((void *)v15 - 1) = v20;
        v15 -= 8;
      }
      while (v18 != v19);
      int64x2_t v21 = *(int64x2_t *)a1;
      uint64_t v9 = (char *)v24.i64[1];
      int v16 = v25;
    }
    *a1 = v15;
    a1[1] = v9;
    int64x2_t v24 = v21;
    uint64_t v22 = a1[2];
    a1[2] = v16;
    long long v25 = v22;
    uint64_t v23 = v21.i64[0];
    uint64_t result = std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)char v7 = v8;
    uint64_t v9 = v7 + 8;
  }
  a1[1] = v9;
  return result;
}

void YAML::Scanner::PopAllIndents(YAML::Scanner *this)
{
  if (!*((void *)this + 39))
  {
    while (1)
    {
      uint64_t v2 = *((void *)this + 30);
      if (!v2
        || *(_DWORD *)(*(void *)(*(void *)(*((void *)this + 26)
                                             + (((unint64_t)(v2 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                 + 8 * ((v2 + *((void *)this + 29) - 1) & 0x1FF))
                     + 4) == 2)
      {
        break;
      }
      YAML::Scanner::PopIndent(this);
    }
  }
}

unint64_t YAML::Scanner::PushToken(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(a1 + 16);
  LODWORD(v7) = 0;
  DWORD1(v7) = a2;
  *((void *)&v7 + 1) = v3;
  int v8 = v4;
  *(_OWORD *)std::match_results<const char *> __p = 0u;
  memset(v10, 0, sizeof(v10));
  int v11 = 0;
  std::deque<YAML::Token>::push_back((void *)(a1 + 96), &v7);
  uint64_t v12 = (void **)v10 + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
  if (SBYTE7(v10[0]) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v5 = *(void *)(a1 + 136) + *(void *)(a1 + 128) - 1;
  return *(void *)(*(void *)(a1 + 104) + 8 * (v5 / 0x33)) + 80 * (v5 % 0x33);
}

void sub_239AC5BD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetStartTokenFor(uint64_t a1, int a2)
{
  if (!a2) {
    return 4;
  }
  if (a2 != 1)
  {
    if (a2 == 2) {
      __assert_rtn("GetStartTokenFor", "scanner.cpp", 279, "false");
    }
    __assert_rtn("GetStartTokenFor", "scanner.cpp", 282, "false");
  }
  return 3;
}

uint64_t YAML::Scanner::PushIndentTo(uint64_t a1)
{
  if (!*(void *)(a1 + 312)) {
    operator new();
  }
  return 0;
}

void sub_239AC5D80(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x1020C406E52F545);
  _Unwind_Resume(a1);
}

void YAML::Scanner::PopIndent(YAML::Scanner *this)
{
  uint64_t v3 = *((void *)this + 26);
  uint64_t v2 = *((void *)this + 27);
  uint64_t v4 = ((v2 - v3) << 6) - 1;
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = *((void *)this + 30) - 1;
  unint64_t v6 = v5 + *((void *)this + 29);
  uint64_t v7 = *(void *)(*(void *)(v3 + ((v6 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v6 & 0x1FF));
  *((void *)this + 3std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v5;
  if (v4 - v6 >= 0x400)
  {
    operator delete(*(void **)(v2 - 8));
    *((void *)this + 27) -= 8;
  }
  if (*(_DWORD *)(v7 + 8))
  {
    YAML::Scanner::InvalidateSimpleKey(this);
  }
  else
  {
    int v8 = *(_DWORD *)(v7 + 4);
    if (v8)
    {
      if (v8 != 1) {
        return;
      }
      uint64_t v9 = *((void *)this + 1);
      int v10 = *((_DWORD *)this + 4);
      *(void *)&long long v13 = 0x500000000;
      *((void *)&v13 + 1) = v9;
      int v14 = v10;
      *(_OWORD *)std::match_results<const char *> __p = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v18 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v13);
    }
    else
    {
      uint64_t v11 = *((void *)this + 1);
      int v12 = *((_DWORD *)this + 4);
      *(void *)&long long v13 = 0x600000000;
      *((void *)&v13 + 1) = v11;
      int v14 = v12;
      *(_OWORD *)std::match_results<const char *> __p = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      int v18 = 0;
      std::deque<YAML::Token>::push_back((void *)this + 12, &v13);
    }
    uint64_t v19 = (void **)&v16 + 1;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v19);
    if (SBYTE7(v16) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_239AC5F18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  YAML::Token::~Token((void **)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::Scanner::GetTopIndent(YAML::Scanner *this)
{
  uint64_t v1 = *((void *)this + 30);
  if (v1) {
    return **(unsigned int **)(*(void *)(*((void *)this + 26)
  }
                                         + (((unint64_t)(v1 + *((void *)this + 29) - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                             + 8 * ((v1 + *((void *)this + 29) - 1) & 0x1FF));
  else {
    return 0;
  }
}

void YAML::Scanner::ThrowParserException(void *a1, uint64_t a2)
{
  uint64_t v6 = -1;
  int v7 = -1;
  if (a1[17])
  {
    unint64_t v3 = *(void *)(a1[13] + 8 * (a1[16] / 0x33uLL)) + 80 * (a1[16] % 0x33uLL);
    int v4 = *(_DWORD *)(v3 + 16);
    uint64_t v6 = *(void *)(v3 + 8);
    int v7 = v4;
  }
  exceptiouint64_t n = __cxa_allocate_exception(0x38uLL);
  YAML::ParserException::ParserException((uint64_t)exception, &v6, a2);
}

void sub_239AC6018(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::deque<YAML::Scanner::IndentMarker *>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<YAML::Scanner::SimpleKey>::~deque[abi:ne180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  unint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      unint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 42;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 85;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    int v7 = *v2++;
    operator delete(v7);
  }

  return std::__split_buffer<YAML::CollectionType::value *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<YAML::Token>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + 40);
  unint64_t v3 = *(void ***)(a1 + 8);
  unint64_t v4 = *(void ***)(a1 + 16);
  if (v4 == v3)
  {
    unint64_t v4 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v3[v5 / 0x33];
    uint64_t v7 = (uint64_t)*v6 + 80 * (v5 % 0x33);
    unint64_t v8 = (unint64_t)v3[(*(void *)(a1 + 40) + v5) / 0x33] + 80 * ((*(void *)(a1 + 40) + v5) % 0x33);
    if (v7 != v8)
    {
      do
      {
        std::allocator<YAML::Token>::destroy[abi:ne180100]((uint64_t)v2, v7);
        v7 += 80;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      unint64_t v3 = *(void ***)(a1 + 8);
      unint64_t v4 = *(void ***)(a1 + 16);
    }
  }
  void *v2 = 0;
  unint64_t v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      unint64_t v4 = *(void ***)(a1 + 16);
      unint64_t v3 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v3;
      unint64_t v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 25;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 51;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v3 != v4)
  {
    do
    {
      long long v13 = *v3++;
      operator delete(v13);
    }
    while (v3 != v4);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::allocator<YAML::Token>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void **)(a2 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
}

void std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__base_destruct_at_end[abi:ne180100]((uint64_t)v2, *v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__base_destruct_at_end[abi:ne180100](uint64_t result, void *a2)
{
  uint64_t v3 = result;
  unint64_t v4 = *(void **)(result + 8);
  while (v4 != a2)
  {
    uint64_t v5 = *--v4;
    uint64_t result = v5;
    void *v4 = 0;
    if (v5) {
      uint64_t result = MEMORY[0x23ECAACC0](result, 0x1020C406E52F545);
    }
  }
  *(void *)(v3 + 8) = a2;
  return result;
}

uint64_t std::deque<YAML::Token>::pop_front(int64x2_t *a1)
{
  std::allocator<YAML::Token>::destroy[abi:ne180100]((uint64_t)&a1[2].i64[1], *(void *)(a1->i64[1] + 8 * (a1[2].i64[0] / 0x33uLL)) + 80 * (a1[2].i64[0] % 0x33uLL));
  a1[2] = vaddq_s64(a1[2], (int64x2_t)xmmword_239BEB760);

  return std::deque<YAML::Token>::__maybe_remove_front_spare[abi:ne180100]((uint64_t)a1, 1);
}

uint64_t std::deque<YAML::Token>::__maybe_remove_front_spare[abi:ne180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x33) {
    a2 = 1;
  }
  if (v2 < 0x66) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 51;
  }
  return v4 ^ 1u;
}

void std::vector<std::unique_ptr<YAML::Scanner::IndentMarker>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::~__split_buffer(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<YAML::Scanner::IndentMarker>>::__destruct_at_end[abi:ne180100](uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 16);
  if (v2 != a2)
  {
    uint64_t v4 = result;
    do
    {
      *(void *)(v4 + 16) = v2 - 8;
      uint64_t result = *(void *)(v2 - 8);
      *(void *)(v2 - 8) = 0;
      if (result) {
        uint64_t result = MEMORY[0x23ECAACC0](result, 0x1020C406E52F545);
      }
      uint64_t v2 = *(void *)(v4 + 16);
    }
    while (v2 != a2);
  }
  return result;
}

void std::deque<YAML::Scanner::IndentMarker *>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<YAML::Scanner::IndentMarker *>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(void *)(*(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v8 & 0x1FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<YAML::Scanner::IndentMarker *>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v38);
      long long v40 = &v39[8 * (v38 >> 2)];
      uint64_t v42 = &v39[8 * v41];
      unint64_t v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    long long v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  uint64_t v20 = (char *)a1[2];
  uint64_t v19 = (char *)a1[3];
  int64x2_t v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    long long v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)uint64_t v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      std::vector<std::pair<std::string, std::string>>::pointer v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v53 = (uint64_t *)a1[1];
      long long v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        long long v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        int v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)int v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      uint64_t v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v82);
      long long v40 = &v39[8 * (v82 >> 2)];
      uint64_t v42 = &v39[8 * v83];
      std::string::size_type v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        uint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)uint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  long long v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v28);
  uint64_t v31 = v30;
  uint64_t v32 = operator new(0x1000uLL);
  uint64_t v33 = &v29[8 * v23];
  unint64_t v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v61);
      uint64_t v33 = &v62[8 * (v61 >> 2)];
      unint64_t v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      long long v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)uint64_t v33 = v32;
  size_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v70);
        std::vector<std::string>::pointer v73 = v71;
        uint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        size_t v64 = v33;
        if (!v74)
        {
          size_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          unint64_t v77 = v33;
          uint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)unint64_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        unint64_t v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        long long v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        uint64_t v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        size_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_239AC6A44(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void __cxx_global_array_dtor_2()
{
  uint64_t v0 = 0x1E0u;
  do
  {
    if (YAML::TokenNames[v0 - 1] < 0) {
      operator delete(*(void **)&YAML::TokenNames[v0 - 24]);
    }
    v0 -= 24;
  }
  while (v0);
}

void sub_239AC6C28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_239AC6EE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14)
{
  if (v20 != v21)
  {
  }
  if (a14 != v17)
  {
  }
  _Unwind_Resume(a1);
}

void sub_239AC707C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_239AC7268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  if (*(char *)(v20 - 41) < 0) {
    operator delete(*(void **)(v20 - 64));
  }
  _Unwind_Resume(exception_object);
}

id ConvertTestResults(long long **a1, const siri::intelligence::TestResults *a2)
{
  uint64_t v33 = objc_opt_new();
  uint64_t v35 = objc_opt_new();
  memset(&v46, 0, sizeof(v46));
  std::vector<siri::intelligence::TestParseError>::__init_with_size[abi:ne180100]<siri::intelligence::TestParseError*,siri::intelligence::TestParseError*>(&v46, a1[3], a1[4], 0xAAAAAAAAAAAAAAABLL * (a1[4] - a1[3]));
  std::string::size_type size = v46.__r_.__value_.__l.__size_;
  for (std::string::size_type i = v46.__r_.__value_.__r.__words[0]; i != size; i += 48)
  {
    if (*(char *)(i + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)i, *(void *)(i + 8));
    }
    else
    {
      long long v6 = *(_OWORD *)i;
      v38.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v6;
    }
    if (*(char *)(i + 47) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(i + 24), *(void *)(i + 32));
    }
    else
    {
      long long v7 = *(_OWORD *)(i + 24);
      __p.__r_.__value_.__r.__words[2] = *(void *)(i + 40);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v7;
    }
    uint64_t v8 = objc_opt_new();
    uint64_t v9 = NSString;
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v45, v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
    }
    else {
      std::string v45 = v38;
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v45;
    }
    else {
      uint64_t v10 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    uint64_t v11 = [v9 stringWithUTF8String:v10];
    [v8 setFlowId:v11];

    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    BOOL v12 = NSString;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v45, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string v45 = __p;
    }
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v13 = &v45;
    }
    else {
      uint64_t v13 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    uint64_t v14 = [v12 stringWithUTF8String:v13];
    [v8 setError:v14];

    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    [v35 addObject:v8];

    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<siri::intelligence::TestParseError>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  uint64_t v15 = objc_opt_new();
  memset(&v46, 0, sizeof(v46));
  std::vector<siri::intelligence::TestResult>::__init_with_size[abi:ne180100]<siri::intelligence::TestResult*,siri::intelligence::TestResult*>(&v46, *((long long ***)a2 + 1), *((siri::intelligence::TestResult **)a2 + 2), 0xD37A6F4DE9BD37A7 * ((uint64_t)(*((void *)a2 + 2) - *((void *)a2 + 1)) >> 3));
  std::string::size_type v34 = v46.__r_.__value_.__l.__size_;
  for (unint64_t j = (const siri::intelligence::TestCase *)v46.__r_.__value_.__r.__words[0];
        j != (const siri::intelligence::TestCase *)v34;
        unint64_t j = (const siri::intelligence::TestCase *)((char *)j + 184))
  {
    siri::intelligence::TestCase::TestCase(&v38, j);
    siri::intelligence::TestResult::GetDescriptions((long long **)j, (uint64_t)&v45);
    std::string::size_type v18 = v45.__r_.__value_.__l.__size_;
    for (std::string::size_type k = v45.__r_.__value_.__r.__words[0]; k != v18; k += 24)
    {
      if (*(char *)(k + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)k, *(void *)(k + 8));
      }
      else
      {
        long long v19 = *(_OWORD *)k;
        v37.__r_.__value_.__r.__words[2] = *(void *)(k + 16);
        *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v19;
      }
      uint64_t v20 = objc_opt_new();
      int64x2_t v21 = v20;
      uint64_t v22 = (*((_DWORD *)j + 38) - 1);
      if (v22 < 3) {
        uint64_t v23 = v22 + 1;
      }
      else {
        uint64_t v23 = 0;
      }
      [v20 setStatus:v23];
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v24 = &v37;
      }
      else {
        uint64_t v24 = (std::string *)v37.__r_.__value_.__r.__words[0];
      }
      long long v25 = [NSString stringWithUTF8String:v24];
      [v21 setSummary:v25];

      uint64_t v26 = NSString;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v36, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = __p;
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v27 = &v36;
      }
      else {
        uint64_t v27 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      unint64_t v28 = [v26 stringWithUTF8String:v27];
      [v21 setFlowId:v28];

      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      long long v29 = NSString;
      if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v36, v40.__r_.__value_.__l.__data_, v40.__r_.__value_.__l.__size_);
      }
      else {
        std::string v36 = v40;
      }
      if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v30 = &v36;
      }
      else {
        uint64_t v30 = (std::string *)v36.__r_.__value_.__r.__words[0];
      }
      uint64_t v31 = [v29 stringWithUTF8String:v30];
      [v21 setTestName:v31];

      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v36.__r_.__value_.__l.__data_);
      }
      [v15 addObject:v21];

      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
    }
    v37.__r_.__value_.__r.__words[0] = (std::string::size_type)&v45;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v37);
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
    std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)&v45);
    if (v42 < 0) {
      operator delete(v41);
    }
    if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  v38.__r_.__value_.__r.__words[0] = (std::string::size_type)&v46;
  std::vector<siri::intelligence::TestResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
  [v33 setParseErrors:v35];
  [v33 setResults:v15];

  return v33;
}

void sub_239AC77E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  _Unwind_Resume(a1);
}

void sub_239AC7AF0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 41) < 0) {
    operator delete(*(void **)(v2 - 64));
  }

  _Unwind_Resume(a1);
}

id MakeEmptyTestResults(void)
{
  uint64_t v0 = objc_opt_new();
  uint64_t v1 = objc_opt_new();
  [v0 setParseErrors:v1];

  uint64_t v2 = objc_opt_new();
  [v0 setResults:v2];

  return v0;
}

void sub_239AC7C18(_Unwind_Exception *a1)
{
  BOOL v3 = v2;

  _Unwind_Resume(a1);
}

void sub_239AC7F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }

  _Unwind_Resume(a1);
}

void sub_239AC83F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  if (*(char *)(v40 - 89) < 0) {
    operator delete(*(void **)(v40 - 112));
  }

  _Unwind_Resume(a1);
}

void sub_239AC8728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }

  _Unwind_Resume(a1);
}

void sub_239AC8A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  __pa = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_239AC8D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *__p, uint64_t a5, int a6, __int16 a7, char a8, char a9, uint64_t a10, void *a11, char *__pa, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,std::__split_buffer<std::string> *a21,uint64_t a22,char a23)
{
  __pa = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);

  _Unwind_Resume(a1);
}

void sub_239AC8E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  }
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_239AC8F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_239AC8FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_239AC915C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }

  _Unwind_Resume(a1);
}

void sub_239AC92F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void std::vector<siri::intelligence::TestResult>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 184;
        std::allocator<siri::intelligence::TestResult>::destroy[abi:ne180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::allocator<siri::intelligence::TestResult>::destroy[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void **)(a2 + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)(a2 + 128);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  BOOL v3 = (void **)(a2 + 104);
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100](&v3);
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
}

void YAML::NodeBuilder::NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = &unk_26ED29BA0;
  operator new();
}

void sub_239AC95F4(_Unwind_Exception *exception_object)
{
  BOOL v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::~NodeBuilder(YAML::NodeBuilder *this)
{
  *(void *)this = &unk_26ED29BA0;
  uint64_t v2 = (void *)*((void *)this + 10);
  if (v2)
  {
    *((void *)this + 11) = v2;
    operator delete(v2);
  }
  BOOL v3 = (void *)*((void *)this + 7);
  if (v3)
  {
    *((void *)this + 8) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 4);
  if (v4)
  {
    *((void *)this + 5) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

{
  uint64_t vars8;

  YAML::NodeBuilder::~NodeBuilder(this);

  JUMPOUT(0x23ECAACC0);
}

void YAML::NodeBuilder::Root(YAML::NodeBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *((void *)this + 3);
  if (v2)
  {
    uint64_t v4 = *((void *)this + 1);
    BOOL v3 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v3;
      *(void *)(a2 + 48) = v2;
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    else
    {
      *(unsigned char *)a2 = 1;
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 32) = v4;
      *(void *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
      *(void *)(a2 + 48) = v2;
    }
  }
  else
  {
    *(unsigned char *)a2 = 1;
    *(_OWORD *)(a2 + 8) = 0u;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  }
}

void YAML::NodeBuilder::OnNull(uint64_t a1)
{
}

void YAML::NodeBuilder::Push(uint64_t a1)
{
}

void YAML::NodeBuilder::Pop(YAML::NodeBuilder *this)
{
  uint64_t v2 = (char *)*((void *)this + 4);
  uint64_t v1 = (char *)*((void *)this + 5);
  if (v2 == v1) {
    __assert_rtn("Pop", "nodebuilder.cpp", 100, "!m_stack.empty()");
  }
  if (v1 - v2 == 8)
  {
    *((void *)this + 3) = *(void *)v2;
    *((void *)this + 5) = v1 - 8;
    return;
  }
  long long v6 = (YAML::detail::node *)*((void *)v1 - 1);
  uint64_t v4 = v1 - 8;
  uint64_t v5 = v6;
  *((void *)this + 5) = v4;
  long long v7 = (YAML::detail::node *)*((void *)v4 - 1);
  uint64_t v8 = **(YAML::detail::node_data ***)v7;
  if (!*(unsigned char *)v8) {
    goto LABEL_32;
  }
  int v9 = *((_DWORD *)v8 + 4);
  if (v9 != 4)
  {
    if (v9 == 3)
    {
      uint64_t v10 = *((void *)this + 1);
      uint64_t v11 = (std::__shared_weak_count *)*((void *)this + 2);
      if (v11)
      {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v12 = *(YAML::detail::node_data ***)v7;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v8 = *v12;
        long long v19 = v11;
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        long long v19 = 0;
      }
      uint64_t v18 = v10;
      YAML::detail::node_data::push_back((uint64_t)v8, (uint64_t)v5);
      if (v19) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v19);
      }
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      YAML::detail::node::add_dependency(v5, v7);
      if (v11) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      return;
    }
LABEL_32:
    __assert_rtn("Pop", "nodebuilder.cpp", 124, "false");
  }
  uint64_t v13 = *((void *)this + 11);
  if (*((void *)this + 10) == v13) {
    __assert_rtn("Pop", "nodebuilder.cpp", 115, "!m_keys.empty()");
  }
  if (*(unsigned char *)(v13 - 8))
  {
    uint64_t v14 = *(YAML::detail::node **)(v13 - 16);
    uint64_t v15 = *((void *)this + 1);
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 2);
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      long long v17 = *(YAML::detail::node_data ***)v7;
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = *v17;
      long long v19 = v16;
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    else
    {
      long long v19 = 0;
    }
    uint64_t v18 = v15;
    YAML::detail::node_data::insert(v8, v14, v5, &v18);
    if (v19) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v19);
    }
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    YAML::detail::node::add_dependency(v14, v7);
    YAML::detail::node::add_dependency(v5, v7);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
    *((void *)this + 11) -= 16;
  }
  else
  {
    *(unsigned char *)(v13 - 8) = 1;
  }
}

void sub_239AC9A3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  if (v10)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  _Unwind_Resume(exception_object);
}

void YAML::NodeBuilder::OnAlias(YAML::NodeBuilder *a1, uint64_t a2, uint64_t a3)
{
  YAML::NodeBuilder::Push(a1, *(YAML::detail::node **)(*((void *)a1 + 7) + 8 * a3));

  YAML::NodeBuilder::Pop(a1);
}

void YAML::NodeBuilder::Push(YAML::NodeBuilder *this, YAML::detail::node *a2)
{
  uint64_t v4 = (void *)*((void *)this + 4);
  long long v6 = (void *)*((void *)this + 5);
  uint64_t v5 = (void **)((char *)this + 32);
  if (v4 == v6 || (uint64_t v7 = **(void **)*(v6 - 1), !*(unsigned char *)v7) || *(_DWORD *)(v7 + 16) != 4)
  {
    uint64_t v14 = (char *)this + 48;
    unint64_t v15 = *((void *)this + 6);
    if ((unint64_t)v6 >= v15)
    {
      uint64_t v17 = v6 - v4;
      if ((unint64_t)(v17 + 1) >> 61) {
        goto LABEL_57;
      }
      uint64_t v18 = v15 - (void)v4;
      uint64_t v19 = v18 >> 2;
      if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        int64x2_t v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v14, v20);
      }
      else {
        int64x2_t v21 = 0;
      }
      uint64_t v22 = &v21[8 * v17];
      uint64_t v23 = &v21[8 * v20];
      *(void *)uint64_t v22 = a2;
      uint64_t v16 = v22 + 8;
      long long v25 = (char *)*((void *)this + 4);
      uint64_t v24 = (char *)*((void *)this + 5);
      if (v24 != v25)
      {
        do
        {
          uint64_t v26 = *((void *)v24 - 1);
          v24 -= 8;
          *((void *)v22 - 1) = v26;
          v22 -= 8;
        }
        while (v24 != v25);
        uint64_t v24 = (char *)*v5;
      }
      *((void *)this + 4) = v22;
      *((void *)this + 5) = v16;
      *((void *)this + 6) = v23;
      if (v24) {
        operator delete(v24);
      }
    }
    else
    {
      *long long v6 = a2;
      uint64_t v16 = v6 + 1;
    }
    *((void *)this + 5) = v16;
    return;
  }
  uint64_t v8 = (char *)this + 48;
  unint64_t v9 = *((void *)this + 6);
  uint64_t v11 = *((void *)this + 10);
  uint64_t v10 = *((void *)this + 11);
  unint64_t v12 = *((void *)this + 13);
  if ((unint64_t)v6 >= v9)
  {
    uint64_t v27 = v6 - v4;
    if (!((unint64_t)(v27 + 1) >> 61))
    {
      uint64_t v28 = v9 - (void)v4;
      uint64_t v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1)) {
        uint64_t v29 = v27 + 1;
      }
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v30 = v29;
      }
      if (v30) {
        uint64_t v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v8, v30);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v32 = &v31[8 * v27];
      uint64_t v33 = &v31[8 * v30];
      *(void *)uint64_t v32 = a2;
      uint64_t v13 = v32 + 8;
      uint64_t v35 = (char *)*((void *)this + 4);
      std::string::size_type v34 = (char *)*((void *)this + 5);
      if (v34 != v35)
      {
        do
        {
          uint64_t v36 = *((void *)v34 - 1);
          v34 -= 8;
          *((void *)v32 - 1) = v36;
          v32 -= 8;
        }
        while (v34 != v35);
        std::string::size_type v34 = (char *)*v5;
      }
      *((void *)this + 4) = v32;
      *((void *)this + 5) = v13;
      *((void *)this + 6) = v33;
      if (v34) {
        operator delete(v34);
      }
      goto LABEL_38;
    }
LABEL_57:
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  *long long v6 = a2;
  uint64_t v13 = v6 + 1;
LABEL_38:
  *((void *)this + 5) = v13;
  if ((v10 - v11) >> 4 < v12)
  {
    std::string v38 = (unsigned char *)*((void *)this + 11);
    unint64_t v37 = *((void *)this + 12);
    if ((unint64_t)v38 >= v37)
    {
      uint64_t v40 = (unsigned char *)*((void *)this + 10);
      uint64_t v41 = (v38 - v40) >> 4;
      unint64_t v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 60) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v43 = v37 - (void)v40;
      if (v43 >> 3 > v42) {
        unint64_t v42 = v43 >> 3;
      }
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v44 = v42;
      }
      if (v44)
      {
        if (v44 >> 60) {
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        std::string v45 = (char *)operator new(16 * v44);
      }
      else
      {
        std::string v45 = 0;
      }
      std::string v46 = &v45[16 * v41];
      *(void *)std::string v46 = a2;
      v46[8] = 0;
      uint64_t v39 = v46 + 16;
      if (v38 != v40)
      {
        do
        {
          *((_OWORD *)v46 - 1) = *((_OWORD *)v38 - 1);
          v46 -= 16;
          v38 -= 16;
        }
        while (v38 != v40);
        std::string v38 = (unsigned char *)*((void *)this + 10);
      }
      *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v46;
      *((void *)this + 11) = v39;
      *((void *)this + 12) = &v45[16 * v44];
      if (v38) {
        operator delete(v38);
      }
    }
    else
    {
      *(void *)std::string v38 = a2;
      v38[8] = 0;
      uint64_t v39 = v38 + 16;
    }
    *((void *)this + 11) = v39;
  }
}

void YAML::NodeBuilder::OnScalar(uint64_t a1)
{
}

void YAML::NodeBuilder::OnSequenceStart(uint64_t a1)
{
}

void YAML::NodeBuilder::OnMapStart(uint64_t a1)
{
}

void YAML::NodeBuilder::OnMapEnd(YAML::NodeBuilder *this)
{
  uint64_t v1 = *((void *)this + 13);
  if (!v1) {
    __assert_rtn("OnMapEnd", "nodebuilder.cpp", 76, "m_mapDepth > 0");
  }
  *((void *)this + 13) = v1 - 1;

  YAML::NodeBuilder::Pop(this);
}

void YAML::NodeBuilder::RegisterAnchor(YAML::NodeBuilder *this, uint64_t a2, YAML::detail::node *a3)
{
  if (a2)
  {
    uint64_t v5 = *((void *)this + 7);
    uint64_t v7 = (void *)*((void *)this + 8);
    long long v6 = (void **)((char *)this + 56);
    if (a2 != ((uint64_t)v7 - v5) >> 3) {
      __assert_rtn("RegisterAnchor", "nodebuilder.cpp", 131, "anchor == m_anchors.size()");
    }
    unint64_t v9 = (char *)this + 72;
    unint64_t v10 = *((void *)this + 9);
    if ((unint64_t)v7 >= v10)
    {
      if ((unint64_t)(a2 + 1) >> 61) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v12 = v10 - v5;
      uint64_t v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(a2 + 1)) {
        uint64_t v13 = a2 + 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v14 = v13;
      }
      if (v14) {
        unint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Token *>>((uint64_t)v9, v14);
      }
      else {
        unint64_t v15 = 0;
      }
      uint64_t v16 = &v15[8 * a2];
      uint64_t v17 = &v15[8 * v14];
      *(void *)uint64_t v16 = a3;
      uint64_t v11 = v16 + 8;
      uint64_t v19 = (char *)*((void *)this + 7);
      uint64_t v18 = (char *)*((void *)this + 8);
      if (v18 != v19)
      {
        do
        {
          uint64_t v20 = *((void *)v18 - 1);
          v18 -= 8;
          *((void *)v16 - 1) = v20;
          v16 -= 8;
        }
        while (v18 != v19);
        uint64_t v18 = (char *)*v6;
      }
      *((void *)this + 7) = v16;
      *((void *)this + 8) = v11;
      *((void *)this + 9) = v17;
      if (v18) {
        operator delete(v18);
      }
    }
    else
    {
      void *v7 = a3;
      uint64_t v11 = v7 + 1;
    }
    *((void *)this + 8) = v11;
  }
}

void YAML::detail::node::add_dependency(YAML::detail::node *this, YAML::detail::node *a2)
{
  if (***(unsigned char ***)this)
  {
    YAML::detail::node::mark_defined(a2);
  }
  else
  {
    uint64_t v5 = (uint64_t **)((char *)this + 24);
    uint64_t v4 = (uint64_t *)*((void *)this + 3);
    if (v4)
    {
      while (1)
      {
        while (1)
        {
          long long v6 = (uint64_t **)v4;
          unint64_t v7 = v4[4];
          if (v7 <= (unint64_t)a2) {
            break;
          }
          uint64_t v4 = *v6;
          uint64_t v5 = v6;
          if (!*v6) {
            goto LABEL_13;
          }
        }
        if (v7 >= (unint64_t)a2) {
          break;
        }
        uint64_t v4 = v6[1];
        if (!v4)
        {
          uint64_t v5 = v6 + 1;
          goto LABEL_13;
        }
      }
    }
    else
    {
      long long v6 = (uint64_t **)((char *)this + 24);
LABEL_13:
      uint64_t v8 = (uint64_t *)operator new(0x28uLL);
      v8[4] = (uint64_t)a2;
      uint64_t *v8 = 0;
      v8[1] = 0;
      v8[2] = (uint64_t)v6;
      YAML::detail::node *v5 = v8;
      uint64_t v9 = **((void **)this + 2);
      if (v9)
      {
        *((void *)this + 2) = v9;
        unint64_t v10 = *v5;
      }
      else
      {
        unint64_t v10 = v8;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*((uint64_t **)this + 3), v10);
      ++*((void *)this + 4);
    }
  }
}

siri::intelligence::Variable *siri::intelligence::Variable::Variable(siri::intelligence::Variable *this)
{
  *(void *)this = &unk_26ED29C28;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  std::string::basic_string[abi:ne180100]<0>((void *)this + 4, siri::intelligence::TYPE_UNKNOWN);
  *((void *)this + 7) = 0;
  *((_WORD *)this + 32) = 0;
  return this;
}

void sub_239ACA1FC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Variable::Variable(uint64_t a1, const std::string *a2, const std::string *a3)
{
  *(void *)a1 = &unk_26ED29C28;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_WORD *)(a1 + 64) = 0;
  uint64_t v5 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v5, a3);
  *(void *)(a1 + 56) = 0;
  return a1;
}

void sub_239ACA29C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

std::string *siri::intelligence::Variable::SetKey(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 8), a2);
}

std::string *siri::intelligence::Variable::SetType(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 32), a2);
}

uint64_t siri::intelligence::Variable::SetParent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = a2;
  return result;
}

void siri::intelligence::Variable::~Variable(void **this)
{
  *this = &unk_26ED29C28;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

{
  uint64_t vars8;

  siri::intelligence::Variable::~Variable(this);

  JUMPOUT(0x23ECAACC0);
}

void siri::intelligence::Variable::GetKey(siri::intelligence::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 8);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
}

void siri::intelligence::Variable::GetType(siri::intelligence::Variable *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((void *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 6);
  }
}

uint64_t siri::intelligence::Variable::IsPersistent(siri::intelligence::Variable *this)
{
  return *((unsigned __int8 *)this + 65);
}

uint64_t siri::intelligence::Variable::SetPersistent(uint64_t this, char a2)
{
  *(unsigned char *)(this + 65) = a2;
  return this;
}

uint64_t siri::intelligence::Variable::IsDefined(siri::intelligence::Variable *this)
{
  return *((unsigned __int8 *)this + 64);
}

uint64_t siri::intelligence::Variable::GetParent(siri::intelligence::Variable *this)
{
  return *((void *)this + 7);
}

void siri::intelligence::Variable::GetFullKey(siri::intelligence::Variable *this@<X0>, uint64_t a2@<X8>)
{
  v15[2] = *MEMORY[0x263EF8340];
  if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)a2, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
    *(void *)(a2 + 16) = *((void *)this + 3);
  }
  for (uint64_t i = *((void *)this + 7); i; uint64_t i = *(void *)(i + 56))
  {
    if (*(char *)(i + 31) < 0)
    {
      if (!*(void *)(i + 16)) {
        return;
      }
    }
    else if (!*(unsigned char *)(i + 31))
    {
      return;
    }
    if (*(char *)(i + 31) >= 0) {
      size_t v5 = *(unsigned __int8 *)(i + 31);
    }
    else {
      size_t v5 = *(void *)(i + 16);
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v14, v5 + 1);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v6 = &v14;
    }
    else {
      long long v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
    }
    if (v5)
    {
      if (*(char *)(i + 31) >= 0) {
        unint64_t v7 = (const void *)(i + 8);
      }
      else {
        unint64_t v7 = *(const void **)(i + 8);
      }
      memmove(v6, v7, v5);
    }
    *(_WORD *)((char *)&v6->__r_.__value_.__l.__data_ + v5) = 46;
    int v8 = *(char *)(a2 + 23);
    if (v8 >= 0) {
      uint64_t v9 = (const std::string::value_type *)a2;
    }
    else {
      uint64_t v9 = *(const std::string::value_type **)a2;
    }
    if (v8 >= 0) {
      std::string::size_type v10 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      std::string::size_type v10 = *(void *)(a2 + 8);
    }
    uint64_t v11 = std::string::append(&v14, v9, v10);
    std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
    v15[0] = v11->__r_.__value_.__l.__size_;
    *(void *)((char *)v15 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
    char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0) {
      operator delete(*(void **)a2);
    }
    *(void *)a2 = v12;
    *(void *)(a2 + 8) = v15[0];
    *(void *)(a2 + 15) = *(void *)((char *)v15 + 7);
    *(unsigned char *)(a2 + 23) = v13;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v14.__r_.__value_.__l.__data_);
    }
  }
}

void sub_239ACA59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Variable::SetValueFromString()
{
  return 0;
}

uint64_t siri::intelligence::Variable::SetUndefined(uint64_t this)
{
  *(unsigned char *)(this + 64) = 0;
  return this;
}

uint64_t siri::intelligence::Variable::IsEmpty(siri::intelligence::Variable *this)
{
  return 1;
}

void *siri::intelligence::Variable::AsString@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

uint64_t siri::intelligence::Variable::AsQuotedString(siri::intelligence::Variable *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 56))();
}

double siri::intelligence::Variable::AsNumber(siri::intelligence::Variable *this)
{
  return 0.0;
}

uint64_t siri::intelligence::Variable::AsBoolean(siri::intelligence::Variable *this)
{
  return 0;
}

std::string *siri::intelligence::Variable::GetExpanded@<X0>(siri::intelligence::Variable *this@<X0>, siri::intelligence::Variable **a2@<X8>)
{
  size_t v5 = (char *)operator new(0x60uLL);
  *((void *)v5 + 1) = 0;
  *((void *)v5 + 2) = 0;
  *(void *)size_t v5 = &unk_26ED29CA0;
  *a2 = siri::intelligence::Variable::Variable((siri::intelligence::Variable *)(v5 + 24));
  a2[1] = (siri::intelligence::Variable *)v5;
  std::string::operator=((std::string *)(v5 + 32), (const std::string *)((char *)this + 8));
  uint64_t result = std::string::operator=((std::string *)(v5 + 56), (const std::string *)((char *)this + 32));
  *((void *)v5 + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *((void *)this + 7);
  v5[88] = *((unsigned char *)this + 64);
  return result;
}

void sub_239ACA6B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void *siri::intelligence::Variable::GetExpandedType@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, siri::intelligence::TYPE_UNKNOWN);
}

void siri::intelligence::Variable::FromProtobuf(const std::string *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  int v6 = *(_DWORD *)(a2 + 16);
  if ((v6 & 8) != 0)
  {
    uint64_t v11 = *(const std::string **)(a2 + 144);
    std::string::size_type v12 = (std::string *)operator new(0x78uLL);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED29210;
    uint64_t v13 = (uint64_t)siri::intelligence::VariableReference::VariableReference(v12 + 1, a1, v11);
LABEL_21:
    *a3 = v13;
    a3[1] = (uint64_t)v12;
    return;
  }
  if ((v6 & 0x10) != 0)
  {
    v31[0] = 0;
    v31[1] = 0;
    unint64_t v32 = 0;
    long long v29 = 0uLL;
    uint64_t v30 = 0;
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&v29, a2 + 96);
    if (DWORD2(v29))
    {
      if (v30) {
        std::string v14 = (const protobuf::Intelligence_KeyValueParameter **)(v30 + 8);
      }
      else {
        std::string v14 = 0;
      }
      uint64_t v15 = v31[1];
      do
      {
        uint64_t v16 = *v14;
        if ((unint64_t)v15 >= v32)
        {
          uint64_t v15 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)v31, v16);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v15, v16);
          uint64_t v15 = (protobuf::Intelligence_KeyValueParameter *)((char *)v15 + 192);
        }
        v31[1] = v15;
        ++v14;
        if (v30) {
          uint64_t v17 = v30 + 8;
        }
        else {
          uint64_t v17 = 0;
        }
      }
      while (v14 != (const protobuf::Intelligence_KeyValueParameter **)(v17 + 8 * SDWORD2(v29)));
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v29);
    uint64_t v18 = *(const std::string **)(a2 + 152);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)v31, &v28);
    uint64_t v19 = operator new(0x88uLL);
    v19[1] = 0;
    v19[2] = 0;
    *uint64_t v19 = &unk_26ED29260;
    uint64_t v20 = (std::__shared_weak_count *)*((void *)&v28 + 1);
    long long v29 = v28;
    long long v28 = 0uLL;
    siri::intelligence::VariableFunction::VariableFunction((uint64_t)(v19 + 3), a1, v18, (uint64_t *)&v29);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    *a3 = (uint64_t)(v19 + 3);
    a3[1] = (uint64_t)v19;
    if (*((void *)&v28 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v28 + 1));
    }
    *(void *)&long long v29 = v31;
    goto LABEL_39;
  }
  if ((v6 & 2) != 0)
  {
    int64x2_t v21 = *(const std::string **)(a2 + 128);
    std::string::size_type v12 = (std::string *)operator new(0x78uLL);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED27560;
    uint64_t v13 = (uint64_t)siri::intelligence::VariableString::VariableString(v12 + 1, a1, v21);
    goto LABEL_21;
  }
  if ((v6 & 0x100) != 0)
  {
    char v22 = *(unsigned char *)(a2 + 184);
    std::string::size_type v12 = (std::string *)operator new(0x60uLL);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED29170;
    uint64_t v13 = siri::intelligence::VariableBoolean::VariableBoolean((uint64_t)&v12[1], a1, v22);
    goto LABEL_21;
  }
  if ((v6 & 0x80) != 0)
  {
    double v23 = *(double *)(a2 + 176);
    std::string::size_type v12 = (std::string *)operator new(0x68uLL);
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_26ED291C0;
    uint64_t v13 = siri::intelligence::VariableNumber::VariableNumber((uint64_t)&v12[1], a1, v23);
    goto LABEL_21;
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    v31[0] = 0;
    v31[1] = 0;
    unint64_t v32 = 0;
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::RepeatedPtrField((uint64_t)&v29, a2 + 72);
    if (DWORD2(v29))
    {
      if (v30) {
        unint64_t v7 = (const protobuf::Intelligence_KeyValueParameter **)(v30 + 8);
      }
      else {
        unint64_t v7 = 0;
      }
      int v8 = v31[1];
      do
      {
        uint64_t v9 = *v7;
        if ((unint64_t)v8 >= v32)
        {
          int v8 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)v31, v9);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v8, v9);
          int v8 = (protobuf::Intelligence_KeyValueParameter *)((char *)v8 + 192);
        }
        v31[1] = v8;
        ++v7;
        if (v30) {
          uint64_t v10 = v30 + 8;
        }
        else {
          uint64_t v10 = 0;
        }
      }
      while (v7 != (const protobuf::Intelligence_KeyValueParameter **)(v10 + 8 * SDWORD2(v29)));
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v29);
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string const&,std::vector<protobuf::Intelligence_KeyValueParameter> &,void>(&v29, a1, (uint64_t *)v31);
    *(_OWORD *)a3 = v29;
    *(void *)&long long v29 = v31;
LABEL_39:
    std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v29);
    return;
  }
  if (*(int *)(a2 + 56) < 1)
  {
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    std::allocate_shared[abi:ne180100]<siri::intelligence::VariableArray,std::allocator<siri::intelligence::VariableArray>,std::string const&,void>(a1, v31);
    if (*(int *)(a2 + 56) >= 1)
    {
      int v24 = 0;
      do
      {
        long long v25 = v31[0];
        uint64_t v26 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 48, v24);
        siri::intelligence::Variable::FromProtobuf(&v27, a1, v26);
        if ((void)v27)
        {
          std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((uint64_t *)v25 + 9, &v27);
          *((unsigned char *)v25 + 64) = 1;
        }
        if (*((void *)&v27 + 1)) {
          std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
        }
        ++v24;
      }
      while (v24 < *(_DWORD *)(a2 + 56));
    }
    *(_OWORD *)a3 = *(_OWORD *)v31;
  }
}

void sub_239ACAAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  a13 = (void **)&a17;
  std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

uint64_t google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::RepeatedPtrField(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)a1, a2);
  return a1;
}

void sub_239ACAC0C(_Unwind_Exception *a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<siri::intelligence::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29CA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::Variable>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29CA0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<siri::intelligence::Variable>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    size_t v5 = **a1;
    if (v4 != v2)
    {
      int v6 = v4 - 192;
      unint64_t v7 = v4 - 192;
      int v8 = v4 - 192;
      do
      {
        uint64_t v9 = *(void (***)(char *))v8;
        v8 -= 192;
        (*v9)(v7);
        v6 -= 192;
        BOOL v10 = v7 == v2;
        unint64_t v7 = v8;
      }
      while (!v10);
      size_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>(uint64_t a1, const protobuf::Intelligence_KeyValueParameter *a2)
{
  BOOL v3 = *(protobuf::Intelligence_KeyValueParameter **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0x155555555555555) {
    std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 6);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0xAAAAAAAAAAAAAALL) {
    unint64_t v9 = 0x155555555555555;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    BOOL v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::Intelligence_KeyValueParameter>>(v7, v9);
  }
  else {
    BOOL v10 = 0;
  }
  uint64_t v13 = v10;
  std::string v14 = (protobuf::Intelligence_KeyValueParameter *)&v10[192 * v4];
  uint64_t v16 = &v10[192 * v9];
  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v14, a2);
  uint64_t v15 = (char *)v14 + 192;
  std::vector<protobuf::Intelligence_KeyValueParameter>::__swap_out_circular_buffer((protobuf::Intelligence_KeyValueParameter **)a1, &v13);
  uint64_t v11 = *(void *)(a1 + 8);
  std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_239ACAE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

protobuf::Intelligence_KeyValueParameter *std::vector<protobuf::Intelligence_KeyValueParameter>::__swap_out_circular_buffer(protobuf::Intelligence_KeyValueParameter **a1, void *a2)
{
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  uint64_t result = (protobuf::Intelligence_KeyValueParameter *)a2[1];
  while (v4 != v5)
  {
    unint64_t v4 = (protobuf::Intelligence_KeyValueParameter *)((char *)v4 - 192);
    uint64_t result = protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter((protobuf::Intelligence_KeyValueParameter *)((char *)result - 192), v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  unint64_t v8 = a1[1];
  a1[1] = (protobuf::Intelligence_KeyValueParameter *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (protobuf::Intelligence_KeyValueParameter *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<protobuf::Intelligence_KeyValueParameter>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a2);
}

protobuf::Intelligence_KeyValueParameter *protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(protobuf::Intelligence_KeyValueParameter *a1, protobuf::Intelligence_KeyValueParameter *a2)
{
  if (a1 != a2) {
    protobuf::Intelligence_KeyValueParameter::InternalSwap(a1, a2);
  }
  return a1;
}

uint64_t std::__split_buffer<protobuf::Intelligence_KeyValueParameter>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    unint64_t v4 = *(void (***)(void))(i - 192);
    *(void *)(a1 + 16) = i - 192;
    (*v4)();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>@<X0>(char *a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x78uLL);
  uint64_t result = std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,std::allocator<siri::intelligence::VariableDictionary>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_239ACB058(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__shared_ptr_emplace<siri::intelligence::VariableDictionary>::__shared_ptr_emplace[abi:ne180100]<char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,std::allocator<siri::intelligence::VariableDictionary>,0>(void *a1, char *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29300;
  std::allocator<siri::intelligence::VariableDictionary>::construct[abi:ne180100]<siri::intelligence::VariableDictionary,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &>((int)&v5, a1 + 3, a2, a3);
  return a1;
}

void sub_239ACB0CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::allocator<siri::intelligence::VariableDictionary>::construct[abi:ne180100]<siri::intelligence::VariableDictionary,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &>(int a1, void *a2, char *__s, uint64_t *a4)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, __s);
  siri::intelligence::VariableDictionary::VariableDictionary(a2, &__p, a4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_239ACB138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,std::string const&,std::vector<protobuf::Intelligence_KeyValueParameter> &,void>(void *a1, const std::string *a2, uint64_t *a3)
{
  int v6 = operator new(0x78uLL);
  v6[1] = 0;
  void v6[2] = 0;
  *int v6 = &unk_26ED29300;
  uint64_t result = siri::intelligence::VariableDictionary::VariableDictionary(v6 + 3, a2, a3);
  *a1 = result;
  a1[1] = v6;
  return result;
}

void sub_239ACB1C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void siri::intelligence::Loader::LoadFile(uint64_t a1@<X0>, int a2@<W1>, long long *a3@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN8protobuf12IntelligenceENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v9);
  if (a2 == 1)
  {
    if (!siri::intelligence::ProtobufIO::FromFile(v9, (std::string *)a1))
    {
      uint64_t v7 = "Failed to load binary file: %s";
      goto LABEL_9;
    }
    goto LABEL_6;
  }
  if (a2 != 2)
  {
    uint64_t v7 = "Unsupported source format for loader: %s";
    goto LABEL_9;
  }
  if (siri::intelligence::YamlIO::FromFile(v9, a1))
  {
LABEL_6:
    *a3 = v9;
    a3 = &v9;
    goto LABEL_13;
  }
  uint64_t v7 = "Failed to load YAML file: %s";
LABEL_9:
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)a1;
  }
  siri::intelligence::Log::Error((siri::intelligence::Log *)v7, v6, v8);
LABEL_13:
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  if (*((void *)&v9 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v9 + 1));
  }
}

void sub_239ACB2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Loader::LoadFile(uint64_t a1@<X0>, long long *a2@<X8>)
{
  int FormatForFilename = siri::intelligence::GetFormatForFilename(a1);

  siri::intelligence::Loader::LoadFile(a1, FormatForFilename, a2);
}

void *_ZNSt3__115allocate_sharedB8ne180100IN8protobuf12IntelligenceENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x248uLL);
  uint64_t result = _ZNSt3__120__shared_ptr_emplaceIN8protobuf12IntelligenceENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_239ACB350(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *_ZNSt3__120__shared_ptr_emplaceIN8protobuf12IntelligenceENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &unk_26ED29D00;
  protobuf::Intelligence::Intelligence((protobuf::Intelligence *)(a1 + 3));
  return a1;
}

void sub_239ACB3AC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<protobuf::Intelligence>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29D00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<protobuf::Intelligence>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED29D00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

uint64_t std::__shared_ptr_emplace<protobuf::Intelligence>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void siri::intelligence::Validator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  std::vector<siri::intelligence::ValidationResult>::__init_with_size[abi:ne180100]<siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(a4, *(void *)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 6);
  int v284 = (siri::intelligence::ValidationResults *)a4;
  std::set<std::string>::set[abi:ne180100](a4 + 3, (const void ***)(a3 + 24));
  v293[0] = 0;
  v293[1] = 0;
  memset(v291, 0, sizeof(v291));
  long long v292 = v293;
  long long v294 = v295;
  v295[0] = 0;
  v297[0] = 0;
  v297[1] = 0;
  v295[1] = 0;
  uint64_t v296 = v297;
  uint64_t v298 = v299;
  v299[0] = 0;
  v301[0] = 0;
  v301[1] = 0;
  v299[1] = 0;
  uint64_t v300 = v301;
  v302 = v303;
  v303[0] = 0;
  v305[0] = 0;
  v305[1] = 0;
  v303[1] = 0;
  uint64_t v304 = v305;
  int v306 = v307;
  v307[0] = 0;
  v309[0] = 0;
  v309[1] = 0;
  v307[1] = 0;
  __int16 v308 = v309;
  v310 = v311;
  v311[0] = 0;
  v311[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v312);
  memset(v313, 0, 24);
  v312[2] = (std::__shared_weak_count *)v313;
  v314[1] = 0;
  v314[0] = 0;
  v313[3] = v314;
  std::string::operator=(v291, *(const std::string **)(a2 + 528));
  std::string::operator=(&v291[1], (const std::string *)a1);
  std::string::basic_string[abi:ne180100]<0>(&v321, "dialog");
  siri::intelligence::JoinPath(a1, (uint64_t)&v321, (uint64_t)&v320);
  BOOL v7 = siri::intelligence::DirExists((uint64_t *)&v320);
  BOOL v8 = v7;
  if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v320.__r_.__value_.__l.__data_);
    if (v8)
    {
LABEL_3:
      if (*(char *)(a1 + 23) < 0) {
        std::string::__init_copy_ctor_external(&v290, *(const std::string::value_type **)a1, *(void *)(a1 + 8));
      }
      else {
        std::string v290 = *(std::string *)a1;
      }
      goto LABEL_25;
    }
  }
  else if (v7)
  {
    goto LABEL_3;
  }
  siri::intelligence::ListDir(a1, 1, 1, (uint64_t)&v320);
  std::string::size_type size = v320.__r_.__value_.__l.__size_;
  std::string::size_type v10 = v320.__r_.__value_.__r.__words[0];
  if (v320.__r_.__value_.__r.__words[0] == v320.__r_.__value_.__l.__size_)
  {
LABEL_20:
    v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
    std::string::basic_string[abi:ne180100]<0>(&v290, "");
  }
  else
  {
    while (1)
    {
      if (*(char *)(v10 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&v319, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        v319.__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
        *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v11;
      }
      std::string::basic_string[abi:ne180100]<0>(&v317, "");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      siri::intelligence::JoinPath(a1, (uint64_t)&v319, (uint64_t)&v321, (uint64_t)&v317, (uint64_t)__p, (uint64_t)&v318);
      BOOL v12 = siri::intelligence::DirExists((uint64_t *)&v318);
      if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v318.__r_.__value_.__l.__data_);
      }
      if (v316 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v317.__r_.__value_.__l.__data_);
      }
      if (v12) {
        break;
      }
      if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v319.__r_.__value_.__l.__data_);
      }
      v10 += 24;
      if (v10 == size) {
        goto LABEL_20;
      }
    }
    siri::intelligence::JoinPath(a1, (uint64_t)&v319, (uint64_t)&v290);
    if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v319.__r_.__value_.__l.__data_);
    }
    v319.__r_.__value_.__r.__words[0] = (std::string::size_type)&v320;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v319);
  }
LABEL_25:
  if (SHIBYTE(v321.__end_) < 0) {
    operator delete(v321.__first_);
  }
  if (SHIBYTE(v291[2].__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v291[2].__r_.__value_.__l.__data_);
  }
  v291[2] = v290;
  int v13 = *(_DWORD *)(a2 + 16);
  if (v13)
  {
    std::string v14 = (unsigned __int8 *)std::string::basic_string[abi:ne180100]<0>(&v321, "2.0.8");
    BOOL v15 = siri::intelligence::Utils::VersionLessThan(v14, *(unsigned __int8 **)(a2 + 528));
    BOOL v16 = v15;
    if (SHIBYTE(v321.__end_) < 0)
    {
      operator delete(v321.__first_);
      if (v16) {
        goto LABEL_32;
      }
    }
    else if (v15)
    {
LABEL_32:
      siri::intelligence::ValidationResults::Clear(v284);
      std::operator+<char>();
      uint64_t v17 = std::string::append(&v318, " is newer than validation code ");
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v319.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v319.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      uint64_t v19 = std::string::append(&v319, "2.0.8");
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v320.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v320.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      int64x2_t v21 = std::string::append(&v320, ". Skipping file.");
      *(_OWORD *)&v321.__first_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v321.__end_ = (std::__split_buffer<std::string>::pointer)v21->__r_.__value_.__r.__words[2];
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      uint64_t v22 = *(void *)(a2 + 8);
      if (v22)
      {
        double v23 = (unsigned __int8 *)(v22 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v21);
        double v23 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v317, "formatVersion");
      int LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v23, (uint64_t)&v317, -1);
      siri::intelligence::ValidationResults::AddNote(v284, (long long *)siri::intelligence::CODE_FUTURE_VERSION, (long long *)&v321, LineNumFromUnknownField);
      if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v317.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v321.__end_) < 0) {
        operator delete(v321.__first_);
      }
      if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v320.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v319.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v319.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v318.__r_.__value_.__l.__data_);
      }
      goto LABEL_526;
    }
    int v13 = *(_DWORD *)(a2 + 16);
  }
  if ((v13 & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v321, "File does not define a formatVersion value");
    siri::intelligence::ValidationResults::AddWarning(v284, (long long *)siri::intelligence::CODE_NO_VERSION, (long long *)&v321, 1);
    if (SHIBYTE(v321.__end_) < 0) {
      operator delete(v321.__first_);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v321, "2.0.8");
  siri::intelligence::Updater::UpdateToVersion(a2, (uint64_t)&v321);
  if (SHIBYTE(v321.__end_) < 0) {
    operator delete(v321.__first_);
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    int v27 = 0;
    do
    {
      uint64_t v28 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(a2 + 48, v27);
      uint64_t v29 = v28;
      if (*(unsigned char *)(v28 + 16))
      {
        uint64_t v30 = *(void *)(v28 + 8);
        if (v30)
        {
          uint64_t v31 = (unsigned __int8 *)(v30 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v28);
          uint64_t v31 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v32 = siri::intelligence::GetLineNumFromUnknownField(v31, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v33 = std::__tree<std::string>::find<std::string>((uint64_t)&v292, *(const void ***)(v29 + 120));
        if (v293 == (void *)v33)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v29 + 120);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v292, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v32;
        }
        else
        {
          int v34 = *(_DWORD *)(v33 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v32);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v34);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v27;
    }
    while (v27 < *(_DWORD *)(a2 + 56));
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    int v35 = 0;
    do
    {
      uint64_t v36 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>(a2 + 72, v35);
      uint64_t v37 = v36;
      if (*(unsigned char *)(v36 + 16))
      {
        uint64_t v38 = *(void *)(v36 + 8);
        if (v38)
        {
          uint64_t v39 = (unsigned __int8 *)(v38 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v36);
          uint64_t v39 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v40 = siri::intelligence::GetLineNumFromUnknownField(v39, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v41 = std::__tree<std::string>::find<std::string>((uint64_t)&v292, *(const void ***)(v37 + 72));
        if (v293 == (void *)v41)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v37 + 72);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v292, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v40;
        }
        else
        {
          int v42 = *(_DWORD *)(v41 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v40);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v42);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v35;
    }
    while (v35 < *(_DWORD *)(a2 + 80));
  }
  if (*(int *)(a2 + 104) >= 1)
  {
    int v43 = 0;
    do
    {
      uint64_t v44 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>(a2 + 96, v43);
      uint64_t v45 = v44;
      if (*(unsigned char *)(v44 + 16))
      {
        uint64_t v46 = *(void *)(v44 + 8);
        if (v46)
        {
          uint64_t v47 = (unsigned __int8 *)(v46 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v44);
          uint64_t v47 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v48 = siri::intelligence::GetLineNumFromUnknownField(v47, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v49 = std::__tree<std::string>::find<std::string>((uint64_t)&v292, *(const void ***)(v45 + 48));
        if (v293 == (void *)v49)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v45 + 48);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v292, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v48;
        }
        else
        {
          int v50 = *(_DWORD *)(v49 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v48);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v50);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v43;
    }
    while (v43 < *(_DWORD *)(a2 + 104));
  }
  if (*(int *)(a2 + 416) >= 1)
  {
    int v51 = 0;
    do
    {
      uint64_t v52 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>(a2 + 408, v51);
      uint64_t v53 = v52;
      if (*(unsigned char *)(v52 + 16))
      {
        uint64_t v54 = *(void *)(v52 + 8);
        if (v54)
        {
          uint64_t v55 = (unsigned __int8 *)(v54 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v52);
          uint64_t v55 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v56 = siri::intelligence::GetLineNumFromUnknownField(v55, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v57 = std::__tree<std::string>::find<std::string>((uint64_t)&v292, *(const void ***)(v53 + 48));
        if (v293 == (void *)v57)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v53 + 48);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v292, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v56;
        }
        else
        {
          int v58 = *(_DWORD *)(v57 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v56);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v58);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v51;
    }
    while (v51 < *(_DWORD *)(a2 + 416));
  }
  if (*(int *)(a2 + 440) >= 1)
  {
    int v59 = 0;
    do
    {
      uint64_t v60 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>(a2 + 432, v59);
      uint64_t v61 = v60;
      if (*(unsigned char *)(v60 + 16))
      {
        uint64_t v62 = *(void *)(v60 + 8);
        if (v62)
        {
          uint64_t v63 = (unsigned __int8 *)(v62 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v60);
          uint64_t v63 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v64 = siri::intelligence::GetLineNumFromUnknownField(v63, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v65 = std::__tree<std::string>::find<std::string>((uint64_t)&v294, *(const void ***)(v61 + 144));
        if (v295 == (void *)v65)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v61 + 144);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v294, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v64;
        }
        else
        {
          int v66 = *(_DWORD *)(v65 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v64);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v66);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v59;
    }
    while (v59 < *(_DWORD *)(a2 + 440));
  }
  if (*(int *)(a2 + 512) >= 1)
  {
    int v67 = 0;
    do
    {
      uint64_t v68 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>(a2 + 504, v67);
      uint64_t v69 = v68;
      if (*(unsigned char *)(v68 + 16))
      {
        uint64_t v70 = *(void *)(v68 + 8);
        if (v70)
        {
          int v71 = (unsigned __int8 *)(v70 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v68);
          int v71 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v72 = siri::intelligence::GetLineNumFromUnknownField(v71, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v73 = std::__tree<std::string>::find<std::string>((uint64_t)&v298, *(const void ***)(v69 + 120));
        if (v299 == (void *)v73)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v69 + 120);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v298, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v72;
        }
        else
        {
          int v74 = *(_DWORD *)(v73 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v72);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v74);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v67;
    }
    while (v67 < *(_DWORD *)(a2 + 512));
  }
  if (*(int *)(a2 + 272) >= 1)
  {
    int v75 = 0;
    do
    {
      uint64_t v76 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>(a2 + 264, v75);
      uint64_t v77 = v76;
      if (*(unsigned char *)(v76 + 16))
      {
        uint64_t v78 = *(void *)(v76 + 8);
        if (v78)
        {
          uint64_t v79 = (unsigned __int8 *)(v78 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v76);
          uint64_t v79 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v80 = siri::intelligence::GetLineNumFromUnknownField(v79, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v81 = std::__tree<std::string>::find<std::string>((uint64_t)&v300, *(const void ***)(v77 + 24));
        if (v301 == (void *)v81)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v77 + 24);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v300, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v80;
        }
        else
        {
          int v82 = *(_DWORD *)(v81 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v80);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v82);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v75;
    }
    while (v75 < *(_DWORD *)(a2 + 272));
  }
  if (*(int *)(a2 + 176) >= 1)
  {
    int v83 = 0;
    do
    {
      uint64_t v84 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>(a2 + 168, v83);
      uint64_t v85 = v84;
      if ((*(unsigned char *)(v84 + 16) & 2) != 0)
      {
        uint64_t v86 = *(void *)(v84 + 8);
        if (v86)
        {
          uint64_t v87 = (unsigned __int8 *)(v86 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v84);
          uint64_t v87 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "id");
        int v88 = siri::intelligence::GetLineNumFromUnknownField(v87, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v89 = std::__tree<std::string>::find<std::string>((uint64_t)&v302, *(const void ***)(v85 + 56));
        if (v303 == (void *)v89)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v85 + 56);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v302, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v88;
        }
        else
        {
          int v90 = *(_DWORD *)(v89 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v88);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v90);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v83;
    }
    while (v83 < *(_DWORD *)(a2 + 176));
  }
  if (*(int *)(a2 + 392) >= 1)
  {
    int v91 = 0;
    do
    {
      uint64_t v92 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(a2 + 384, v91);
      uint64_t v93 = v92;
      if (*(unsigned char *)(v92 + 16))
      {
        uint64_t v94 = *(void *)(v92 + 8);
        if (v94)
        {
          unint64_t v95 = (unsigned __int8 *)(v94 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v92);
          unint64_t v95 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v321, "name");
        int v96 = siri::intelligence::GetLineNumFromUnknownField(v95, (uint64_t)&v321, -1);
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        uint64_t v97 = std::__tree<std::string>::find<std::string>((uint64_t)&v296, *(const void ***)(v93 + 72));
        if (v297 == (void *)v97)
        {
          v321.__first_ = *(std::__split_buffer<std::string>::pointer *)(v93 + 72);
          *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v296, (const void **)&v321.__first_->__r_.__value_.__l.__data_, (long long **)&v321)+ 14) = v96;
        }
        else
        {
          int v98 = *(_DWORD *)(v97 + 56);
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v96);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
          std::operator+<char>();
          siri::intelligence::ValidationResults::AddError(v284, (long long *)siri::intelligence::CODE_DUPE_ID, (long long *)&v321, v98);
          if (SHIBYTE(v321.__end_) < 0) {
            operator delete(v321.__first_);
          }
        }
      }
      ++v91;
    }
    while (v91 < *(_DWORD *)(a2 + 392));
  }
  uint64_t v99 = *(void *)(a2 + 64);
  if (v99) {
    std::string v100 = (uint64_t *)(v99 + 8);
  }
  else {
    std::string v100 = 0;
  }
  uint64_t v101 = *(int *)(a2 + 56);
  if (v101)
  {
    uint64_t v102 = &v100[v101];
    while (1)
    {
      uint64_t v103 = *v100;
      uint64_t v104 = *(void *)(*v100 + 88);
      if (v104) {
        uint64_t v105 = (const void ***)(v104 + 8);
      }
      else {
        uint64_t v105 = 0;
      }
      uint64_t v106 = *(int *)(v103 + 80);
      if (v106)
      {
        uint64_t v107 = 8 * v106;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v105, (uint64_t)*v105);
          ++v105;
          v107 -= 8;
        }
        while (v107);
      }
      uint64_t v108 = *(void *)(v103 + 216);
      if (*(char *)(v108 + 23) < 0) {
        break;
      }
      if (*(unsigned char *)(v108 + 23)) {
        goto LABEL_210;
      }
LABEL_211:
      uint64_t v109 = *(void *)(v103 + 208);
      if ((*(char *)(v109 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v109 + 23)) {
          goto LABEL_216;
        }
LABEL_215:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v308, (const void **)v109, *(void *)(v103 + 208));
        goto LABEL_216;
      }
      if (*(void *)(v109 + 8)) {
        goto LABEL_215;
      }
LABEL_216:
      uint64_t v110 = *(void *)(v103 + 40);
      if (v110) {
        int v111 = (siri::intelligence **)(v110 + 8);
      }
      else {
        int v111 = 0;
      }
      uint64_t v112 = *(int *)(v103 + 32);
      if (v112)
      {
        uint64_t v113 = 8 * v112;
        do
        {
          siri::intelligence::CollectVariableReferences(*v111++, 0, (BOOL)v291, v26);
          v113 -= 8;
        }
        while (v113);
      }
      uint64_t v114 = *(void *)(v103 + 64);
      if (v114) {
        int v115 = (siri::intelligence **)(v114 + 8);
      }
      else {
        int v115 = 0;
      }
      uint64_t v116 = *(int *)(v103 + 56);
      if (v116)
      {
        uint64_t v117 = 8 * v116;
        do
        {
          siri::intelligence::CollectVariableReferences(*v115++, 0, (BOOL)v291, v26);
          v117 -= 8;
        }
        while (v117);
      }
      uint64_t v118 = *(void *)(v103 + 112);
      if (v118) {
        char v119 = (siri::intelligence **)(v118 + 8);
      }
      else {
        char v119 = 0;
      }
      uint64_t v120 = *(int *)(v103 + 104);
      if (v120)
      {
        uint64_t v121 = 8 * v120;
        do
        {
          siri::intelligence::CollectVariableReferences(*v119++, 0, (BOOL)v291, v26);
          v121 -= 8;
        }
        while (v121);
      }
      if ((*(unsigned char *)(v103 + 16) & 0x80) != 0)
      {
        BOOL v122 = *(long long **)(v103 + 176);
        if (*((char *)v122 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v321, *(const std::string::value_type **)v122, *((void *)v122 + 1));
        }
        else
        {
          long long v123 = *v122;
          v321.__end_ = (std::__split_buffer<std::string>::pointer)*((void *)v122 + 2);
          *(_OWORD *)&v321.__first_ = v123;
        }
        v321.__end_cap_.__value_ = 0;
        v321.__end_cap_.__value_ = 0;
        char v322 = 0;
        while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v321))
        {
          siri::intelligence::Entity::GetName((std::string *)&v321, &v320);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(&v310, (const void **)&v320.__r_.__value_.__l.__data_, (uint64_t)&v320);
          if (SHIBYTE(v320.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v320.__r_.__value_.__l.__data_);
          }
        }
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
      }
      if (++v100 == v102) {
        goto LABEL_245;
      }
    }
    if (!*(void *)(v108 + 8)) {
      goto LABEL_211;
    }
LABEL_210:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v304, (const void **)v108, *(void *)(v103 + 216));
    goto LABEL_211;
  }
LABEL_245:
  uint64_t v124 = *(void *)(a2 + 88);
  if (v124) {
    uint64_t v125 = (uint64_t *)(v124 + 8);
  }
  else {
    uint64_t v125 = 0;
  }
  uint64_t v126 = *(int *)(a2 + 80);
  if (v126)
  {
    size_t v127 = &v125[v126];
    while (1)
    {
      uint64_t v128 = *v125;
      uint64_t v129 = *(void *)(*v125 + 64);
      if (v129) {
        unsigned __int8 v130 = (const void ***)(v129 + 8);
      }
      else {
        unsigned __int8 v130 = 0;
      }
      uint64_t v131 = *(int *)(v128 + 56);
      if (v131)
      {
        uint64_t v132 = 8 * v131;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v130, (uint64_t)*v130);
          ++v130;
          v132 -= 8;
        }
        while (v132);
      }
      uint64_t v133 = *(void *)(v128 + 144);
      if (*(char *)(v133 + 23) < 0) {
        break;
      }
      if (*(unsigned char *)(v133 + 23)) {
        goto LABEL_260;
      }
LABEL_261:
      uint64_t v134 = *(void *)(v128 + 136);
      if ((*(char *)(v134 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v134 + 23)) {
          goto LABEL_266;
        }
LABEL_265:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v308, (const void **)v134, *(void *)(v128 + 136));
        goto LABEL_266;
      }
      if (*(void *)(v134 + 8)) {
        goto LABEL_265;
      }
LABEL_266:
      uint64_t v135 = *(void *)(v128 + 40);
      if (v135) {
        std::string v136 = (siri::intelligence **)(v135 + 8);
      }
      else {
        std::string v136 = 0;
      }
      uint64_t v137 = *(int *)(v128 + 32);
      if (v137)
      {
        uint64_t v138 = 8 * v137;
        do
        {
          int v139 = *v136;
          BOOL v140 = siri::intelligence::BehaviorHandler::AreKeysVariableNames((uint64_t)&v321, *(const void ***)(v128 + 128));
          siri::intelligence::CollectVariableReferences(v139, (const protobuf::Intelligence_KeyValueParameter *)v140, (BOOL)v291, v141);
          ++v136;
          v138 -= 8;
        }
        while (v138);
      }
      if (++v125 == v127) {
        goto LABEL_273;
      }
    }
    if (!*(void *)(v133 + 8)) {
      goto LABEL_261;
    }
LABEL_260:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v304, (const void **)v133, *(void *)(v128 + 144));
    goto LABEL_261;
  }
LABEL_273:
  uint64_t v142 = *(void *)(a2 + 112);
  if (v142) {
    int v143 = (uint64_t *)(v142 + 8);
  }
  else {
    int v143 = 0;
  }
  uint64_t v144 = *(int *)(a2 + 104);
  if (v144)
  {
    long long v145 = &v143[v144];
    while (1)
    {
      uint64_t v146 = *v143;
      uint64_t v147 = *(void *)(*v143 + 40);
      if (v147) {
        uint64_t v148 = (const void ***)(v147 + 8);
      }
      else {
        uint64_t v148 = 0;
      }
      uint64_t v149 = *(int *)(v146 + 32);
      if (v149)
      {
        uint64_t v150 = 8 * v149;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v148, (uint64_t)*v148);
          ++v148;
          v150 -= 8;
        }
        while (v150);
      }
      uint64_t v151 = *(void *)(v146 + 104);
      if (*(char *)(v151 + 23) < 0) {
        break;
      }
      if (*(unsigned char *)(v151 + 23)) {
        goto LABEL_288;
      }
LABEL_289:
      uint64_t v152 = *(void *)(v146 + 128);
      if (*(char *)(v152 + 23) < 0)
      {
        if (!*(void *)(v152 + 8)) {
          goto LABEL_294;
        }
LABEL_293:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v304, (const void **)v152, *(void *)(v146 + 128));
        goto LABEL_294;
      }
      if (*(unsigned char *)(v152 + 23)) {
        goto LABEL_293;
      }
LABEL_294:
      uint64_t v153 = *(void *)(v146 + 120);
      if ((*(char *)(v153 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v153 + 23)) {
          goto LABEL_299;
        }
LABEL_298:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v308, (const void **)v153, *(void *)(v146 + 120));
        goto LABEL_299;
      }
      if (*(void *)(v153 + 8)) {
        goto LABEL_298;
      }
LABEL_299:
      if (++v143 == v145) {
        goto LABEL_300;
      }
    }
    if (!*(void *)(v151 + 8)) {
      goto LABEL_289;
    }
LABEL_288:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, (const void **)v151, *(void *)(v146 + 104));
    goto LABEL_289;
  }
LABEL_300:
  uint64_t v154 = *(void *)(a2 + 424);
  if (v154) {
    size_t v155 = (uint64_t *)(v154 + 8);
  }
  else {
    size_t v155 = 0;
  }
  uint64_t v156 = *(int *)(a2 + 416);
  if (v156)
  {
    size_t v157 = &v155[v156];
    while (1)
    {
      uint64_t v158 = *v155;
      uint64_t v159 = *(void *)(*v155 + 40);
      if (v159) {
        uint64_t v160 = (const void ***)(v159 + 8);
      }
      else {
        uint64_t v160 = 0;
      }
      uint64_t v161 = *(int *)(v158 + 32);
      if (v161)
      {
        uint64_t v162 = 8 * v161;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v160, (uint64_t)*v160);
          ++v160;
          v162 -= 8;
        }
        while (v162);
      }
      uint64_t v163 = *(void *)(v158 + 112);
      if (*(char *)(v163 + 23) < 0) {
        break;
      }
      if (*(unsigned char *)(v163 + 23)) {
        goto LABEL_315;
      }
LABEL_316:
      uint64_t v164 = *(void *)(v158 + 104);
      if ((*(char *)(v164 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v164 + 23)) {
          goto LABEL_321;
        }
LABEL_320:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v308, (const void **)v164, *(void *)(v158 + 104));
        goto LABEL_321;
      }
      if (*(void *)(v164 + 8)) {
        goto LABEL_320;
      }
LABEL_321:
      if (++v155 == v157) {
        goto LABEL_322;
      }
    }
    if (!*(void *)(v163 + 8)) {
      goto LABEL_316;
    }
LABEL_315:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v304, (const void **)v163, *(void *)(v158 + 112));
    goto LABEL_316;
  }
LABEL_322:
  uint64_t v165 = *(void *)(a2 + 184);
  if (v165) {
    unint64_t v166 = (uint64_t *)(v165 + 8);
  }
  else {
    unint64_t v166 = 0;
  }
  uint64_t v167 = *(int *)(a2 + 176);
  if (v167)
  {
    char v168 = &v166[v167];
    while (1)
    {
      uint64_t v169 = *v166;
      uint64_t v170 = *(void *)(*v166 + 40);
      if (v170) {
        size_t v171 = (const void ***)(v170 + 8);
      }
      else {
        size_t v171 = 0;
      }
      uint64_t v172 = *(int *)(v169 + 32);
      if (v172)
      {
        uint64_t v173 = 8 * v172;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v171, (uint64_t)*v171);
          ++v171;
          v173 -= 8;
        }
        while (v173);
      }
      uint64_t v174 = *(void *)(v169 + 80);
      if ((*(char *)(v174 + 23) & 0x80000000) == 0) {
        break;
      }
      if (*(void *)(v174 + 8)) {
        goto LABEL_337;
      }
LABEL_338:
      if (++v166 == v168) {
        goto LABEL_339;
      }
    }
    if (!*(unsigned char *)(v174 + 23)) {
      goto LABEL_338;
    }
LABEL_337:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v304, (const void **)v174, *(void *)(v169 + 80));
    goto LABEL_338;
  }
LABEL_339:
  uint64_t v175 = *(void *)(a2 + 400);
  if (v175) {
    uint64_t v176 = (uint64_t *)(v175 + 8);
  }
  else {
    uint64_t v176 = 0;
  }
  uint64_t v177 = *(int *)(a2 + 392);
  if (v177)
  {
    uint64_t v178 = 8 * v177;
    do
    {
      uint64_t v179 = *v176;
      if ((*(_DWORD *)(*v176 + 16) & 0x10) != 0)
      {
        size_t v180 = *(siri::intelligence **)(v179 + 104);
        if (!v180)
        {
          int v181 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17756);
          size_t v182 = google::protobuf::internal::LogMessage::operator<<(v181, "CHECK failed: !value || default_value_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v182->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
          size_t v180 = *(siri::intelligence **)(v179 + 104);
        }
        if (v180) {
          size_t v183 = v180;
        }
        else {
          size_t v183 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
        }
        siri::intelligence::CollectVariableReferences(v183, 0, (BOOL)v291, v26);
      }
      ++v176;
      v178 -= 8;
    }
    while (v178);
  }
  uint64_t v184 = *(void *)(a2 + 280);
  if (v184) {
    int v185 = (uint64_t *)(v184 + 8);
  }
  else {
    int v185 = 0;
  }
  uint64_t v186 = *(int *)(a2 + 272);
  if (v186)
  {
    uint64_t v187 = 8 * v186;
    do
    {
      uint64_t v188 = *v185;
      if ((*(_DWORD *)(*v185 + 16) & 2) != 0)
      {
        unint64_t v189 = *(siri::intelligence **)(v188 + 32);
        if (!v189)
        {
          long long v190 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21788);
          uint64_t v191 = google::protobuf::internal::LogMessage::operator<<(v190, "CHECK failed: !value || condition_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v191->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
          unint64_t v189 = *(siri::intelligence **)(v188 + 32);
        }
        if (v189) {
          int v192 = v189;
        }
        else {
          int v192 = (siri::intelligence *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        }
        siri::intelligence::CollectVariableReferencesInCondition(v192, (const protobuf::Intelligence_Condition_ConditionEntry *)v291, v25, v26);
      }
      ++v185;
      v187 -= 8;
    }
    while (v187);
  }
  if ((*(_DWORD *)(a2 + 16) & 2) != 0)
  {
    int v193 = *(int **)(a2 + 536);
    if (!v193)
    {
      int v194 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22110);
      std::string::size_type v195 = google::protobuf::internal::LogMessage::operator<<(v194, "CHECK failed: !value || start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v195->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
      int v193 = *(int **)(a2 + 536);
    }
    if (!v193) {
      int v193 = (int *)&protobuf::_Intelligence_Start_default_instance_;
    }
    uint64_t v196 = *((void *)v193 + 5);
    if (v196) {
      long long v197 = (const void ***)(v196 + 8);
    }
    else {
      long long v197 = 0;
    }
    uint64_t v198 = v193[8];
    if (v198)
    {
      uint64_t v199 = 8 * v198;
      do
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v197, (uint64_t)*v197);
        ++v197;
        v199 -= 8;
      }
      while (v199);
    }
  }
  uint64_t v200 = *(void *)(a2 + 448);
  if (v200) {
    int v201 = (uint64_t *)(v200 + 8);
  }
  else {
    int v201 = 0;
  }
  uint64_t v202 = *(int *)(a2 + 440);
  if (v202)
  {
    long long v283 = &v201[v202];
    while (1)
    {
      uint64_t v203 = *v201;
      uint64_t v204 = *(void *)(*v201 + 112);
      if (v204) {
        int v205 = (siri::intelligence **)(v204 + 8);
      }
      else {
        int v205 = 0;
      }
      uint64_t v206 = *(int *)(v203 + 104);
      if (v206)
      {
        uint64_t v207 = 8 * v206;
        do
        {
          siri::intelligence::CollectVariableReferences(*v205++, 0, (BOOL)v291, v26);
          v207 -= 8;
        }
        while (v207);
      }
      uint64_t v208 = *(void *)(v203 + 136);
      uint64_t v209 = v208 ? v208 + 8 : 0;
      uint64_t v210 = *(int *)(v203 + 128);
      if (v210) {
        break;
      }
LABEL_417:
      uint64_t v223 = *(void *)(v203 + 64);
      if (v223) {
        uint64_t v224 = v223 + 8;
      }
      else {
        uint64_t v224 = 0;
      }
      uint64_t v225 = *(int *)(v203 + 56);
      if (v225)
      {
        uint64_t v226 = v224 + 8 * v225;
        do
        {
          uint64_t v227 = *(void *)(*(void *)v224 + 64);
          if (v227) {
            size_t v228 = (const void ***)(v227 + 8);
          }
          else {
            size_t v228 = 0;
          }
          uint64_t v229 = *(int *)(*(void *)v224 + 56);
          if (v229)
          {
            uint64_t v230 = 8 * v229;
            do
            {
              std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v228, (uint64_t)*v228);
              ++v228;
              v230 -= 8;
            }
            while (v230);
          }
          v224 += 8;
        }
        while (v224 != v226);
      }
      if (++v201 == v283) {
        goto LABEL_430;
      }
    }
    uint64_t v211 = v209 + 8 * v210;
    while (1)
    {
      uint64_t v212 = *(void *)v209;
      uint64_t v213 = *(void *)(*(void *)v209 + 40);
      if (v213) {
        uint64_t v214 = (const void ***)(v213 + 8);
      }
      else {
        uint64_t v214 = 0;
      }
      uint64_t v215 = *(int *)(v212 + 32);
      if (v215)
      {
        uint64_t v216 = 8 * v215;
        do
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, *v214, (uint64_t)*v214);
          ++v214;
          v216 -= 8;
        }
        while (v216);
      }
      if ((*(_DWORD *)(v212 + 16) & 8) == 0) {
        goto LABEL_416;
      }
      std::string v217 = *(void **)(v212 + 72);
      if (!v217)
      {
        unint64_t v218 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 15060);
        uint64_t v219 = google::protobuf::internal::LogMessage::operator<<(v218, "CHECK failed: !value || interjection_settings_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v219->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
        std::string v217 = *(void **)(v212 + 72);
      }
      uint64_t v220 = v217 ? v217 : &protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
      uint64_t v221 = v220[4];
      if (*(char *)(v221 + 23) < 0) {
        break;
      }
      if (*(unsigned char *)(v221 + 23)) {
        goto LABEL_408;
      }
LABEL_409:
      if (!v217) {
        std::string v217 = &protobuf::_Intelligence_InputGroup_Interjection_default_instance_;
      }
      uint64_t v222 = v217[3];
      if ((*(char *)(v222 + 23) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v222 + 23)) {
          goto LABEL_416;
        }
LABEL_415:
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, (const void **)v222, v222);
        goto LABEL_416;
      }
      if (*(void *)(v222 + 8)) {
        goto LABEL_415;
      }
LABEL_416:
      v209 += 8;
      if (v209 == v211) {
        goto LABEL_417;
      }
    }
    if (!*(void *)(v221 + 8)) {
      goto LABEL_409;
    }
LABEL_408:
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(&v306, (const void **)v221, v221);
    std::string v217 = *(void **)(v212 + 72);
    goto LABEL_409;
  }
LABEL_430:
  uint64_t v231 = *(void *)(a2 + 520);
  if (v231) {
    int v232 = (uint64_t *)(v231 + 8);
  }
  else {
    int v232 = 0;
  }
  uint64_t v233 = *(int *)(a2 + 512);
  if (v233)
  {
    int64_t v234 = &v232[v233];
    do
    {
      uint64_t v235 = *v232;
      uint64_t v236 = *(void *)(*v232 + 40);
      if (v236) {
        uint64_t v237 = v236 + 8;
      }
      else {
        uint64_t v237 = 0;
      }
      uint64_t v238 = *(int *)(v235 + 32);
      if (v238)
      {
        uint64_t v239 = v237 + 8 * v238;
        do
        {
          uint64_t v240 = *(void *)(*(void *)v237 + 40);
          if (v240) {
            size_t v241 = (siri::intelligence **)(v240 + 8);
          }
          else {
            size_t v241 = 0;
          }
          uint64_t v242 = *(int *)(*(void *)v237 + 32);
          if (v242)
          {
            uint64_t v243 = 8 * v242;
            do
            {
              siri::intelligence::CollectVariableReferences(*v241++, 0, (BOOL)v291, v26);
              v243 -= 8;
            }
            while (v243);
          }
          v237 += 8;
        }
        while (v237 != v239);
      }
      if ((*(_DWORD *)(v235 + 16) & 0x20) != 0)
      {
        int v244 = *(int **)(v235 + 160);
        if (!v244)
        {
          size_t v245 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18904);
          int v246 = google::protobuf::internal::LogMessage::operator<<(v245, "CHECK failed: !value || nl_producer_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v246->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
          int v244 = *(int **)(v235 + 160);
        }
        if (!v244) {
          int v244 = (int *)&protobuf::_Intelligence_NLParameters_default_instance_;
        }
        uint64_t v247 = *((void *)v244 + 5);
        if (v247) {
          size_t v248 = (siri::intelligence **)(v247 + 8);
        }
        else {
          size_t v248 = 0;
        }
        uint64_t v249 = v244[8];
        if (v249)
        {
          uint64_t v250 = 8 * v249;
          do
          {
            siri::intelligence::CollectVariableReferences(*v248++, 0, (BOOL)v291, v26);
            v250 -= 8;
          }
          while (v250);
        }
      }
      ++v232;
    }
    while (v232 != v234);
  }
  siri::intelligence::Intelligence::Intelligence((siri::intelligence::Intelligence *)&v320);
  siri::intelligence::Intelligence::GetGlobalVariables((uint64_t *)&v321);
  siri::intelligence::Memory::SetGlobalVariables((uint64_t)v312, &v321);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v321, v321.__begin_->__r_.__value_.__r.__words);
  if (v320.__r_.__value_.__l.__size_) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v320.__r_.__value_.__l.__size_);
  }
  if (*(int *)(a2 + 392) >= 1)
  {
    int v251 = 0;
    do
    {
      uint64_t v252 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(a2 + 384, v251);
      uint64_t v253 = v252;
      if ((~*(_DWORD *)(v252 + 16) & 3) == 0)
      {
        uint64_t v254 = *(void *)(v252 + 72);
        size_t v255 = *(std::string **)(v252 + 80);
        std::string::basic_string[abi:ne180100]<0>(&v321, "");
        siri::intelligence::Memory::CreateVariable(v312, v254, v255, (uint64_t)&v321, &v288);
        if (v289) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v289);
        }
        if (SHIBYTE(v321.__end_) < 0) {
          operator delete(v321.__first_);
        }
        if ((*(_DWORD *)(v253 + 16) & 0x10) != 0)
        {
          v256 = *(void **)(v253 + 104);
          if (!v256)
          {
            size_t v257 = (std::string *)google::protobuf::internal::LogMessage::LogMessage((uint64_t)&v321, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17756);
            int v258 = google::protobuf::internal::LogMessage::operator<<(v257, "CHECK failed: !value || default_value_ != nullptr: ");
            google::protobuf::internal::LogFinisher::operator=((int)&v320, (const char **)&v258->__r_.__value_.__l.__data_);
            google::protobuf::internal::LogMessage::~LogMessage((void **)&v321.__first_);
            v256 = *(void **)(v253 + 104);
          }
          if (v256) {
            BOOL v259 = v256;
          }
          else {
            BOOL v259 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          }
          siri::intelligence::Variable::FromProtobuf(*(const std::string **)(v253 + 72), (uint64_t)v259, (uint64_t *)&v321);
          uint64_t v260 = *(void *)(v253 + 72);
          long long v287 = *(_OWORD *)&v321.__first_;
          if (v321.__begin_) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)&v321.__begin_->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
          }
          siri::intelligence::Memory::SetVariable((uint64_t)v312, v260, (const void **)&v287);
          if (*((void *)&v287 + 1)) {
            std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v287 + 1));
          }
          if (v321.__begin_) {
            std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v321.__begin_);
          }
        }
      }
      ++v251;
    }
    while (v251 < *(_DWORD *)(a2 + 392));
  }
  v321.__first_ = (std::__split_buffer<std::string>::pointer)&siri::intelligence::IE_RECOVER_FROM_DEAD_END;
  *((_DWORD *)std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v298, (const void **)&siri::intelligence::IE_RECOVER_FROM_DEAD_END, (long long **)&v321)+ 14) = 0;
  siri::intelligence::ValidateAll((siri::intelligence *)a2, (const protobuf::Intelligence *)v291, v284, v261);
  uint64_t v262 = *(void *)(a2 + 40);
  if (v262) {
    long long v263 = (uint64_t *)(v262 + 8);
  }
  else {
    long long v263 = 0;
  }
  uint64_t v264 = *(int *)(a2 + 32);
  if (v264)
  {
    unint64_t v265 = &v263[v264];
    v286 = v265;
    do
    {
      uint64_t v266 = *v263;
      siri::intelligence::StringToLower(*(void *)(*v263 + 24), (std::string *)&v321);
      if (SHIBYTE(v321.__end_) < 0)
      {
        if (v321.__begin_ == (std::__split_buffer<std::string>::pointer)12)
        {
          BOOL v269 = v321.__first_->__r_.__value_.__r.__words[0] != 0x726565726F6E6769
              || LODWORD(v321.__first_->__r_.__value_.__r.__words[1]) != 1936879474;
          operator delete(v321.__first_);
          if (!v269)
          {
LABEL_502:
            memset(&v320, 0, sizeof(v320));
            size_t v270 = *(unsigned __int8 **)(v266 + 32);
            memset(&v321, 0, 24);
            siri::intelligence::StringSplit(v270, ",", (uint64_t *)&v321, (std::vector<std::string> *)&v319);
            v318.__r_.__value_.__r.__words[0] = (std::string::size_type)&v321;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v318);
            std::string::size_type v272 = v319.__r_.__value_.__l.__size_;
            for (std::string::size_type i = v319.__r_.__value_.__r.__words[0]; i != v272; i += 24)
            {
              if (*(char *)(i + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v318, *(const std::string::value_type **)i, *(void *)(i + 8));
              }
              else
              {
                long long v273 = *(_OWORD *)i;
                v318.__r_.__value_.__r.__words[2] = *(void *)(i + 16);
                *(_OWORD *)&v318.__r_.__value_.__l.__data_ = v273;
              }
              siri::intelligence::StringTrim(" \t\n\r", &v318, &v317);
              BOOL v274 = (_OWORD *)v320.__r_.__value_.__l.__size_;
              if (v320.__r_.__value_.__l.__size_ >= v320.__r_.__value_.__r.__words[2])
              {
                unint64_t v276 = 0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v320.__r_.__value_.__l.__size_ - v320.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v277 = v276 + 1;
                if (v276 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556
                   * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) > v277)
                  unint64_t v277 = 0x5555555555555556
                       * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v320.__r_.__value_.__r.__words[2] - v320.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  unint64_t v278 = 0xAAAAAAAAAAAAAAALL;
                else {
                  unint64_t v278 = v277;
                }
                v321.__end_cap_.__value_ = (std::allocator<std::string> *)&v320.__r_.__value_.__r.__words[2];
                if (v278) {
                  size_t v279 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v320.__r_.__value_.__r.__words[2], v278);
                }
                else {
                  size_t v279 = 0;
                }
                uint64_t v280 = v279 + v276;
                v321.__first_ = v279;
                v321.__begin_ = v280;
                v321.__end_cap_.__value_ = &v279[v278];
                long long v281 = *(_OWORD *)&v317.__r_.__value_.__l.__data_;
                v280->__r_.__value_.__r.__words[2] = v317.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v280->__r_.__value_.__l.__data_ = v281;
                memset(&v317, 0, sizeof(v317));
                v321.__end_ = v280 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v320, &v321);
                std::string::size_type v282 = v320.__r_.__value_.__l.__size_;
                std::__split_buffer<std::string>::~__split_buffer(&v321);
                v320.__r_.__value_.__l.__size_ = v282;
                if (SHIBYTE(v317.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v317.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v275 = *(_OWORD *)&v317.__r_.__value_.__l.__data_;
                *(void *)(v320.__r_.__value_.__l.__size_ + 16) = *((void *)&v317.__r_.__value_.__l + 2);
                *BOOL v274 = v275;
                v320.__r_.__value_.__l.__size_ = (std::string::size_type)v274 + 24;
              }
              if (SHIBYTE(v318.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v318.__r_.__value_.__l.__data_);
              }
            }
            v321.__first_ = &v319;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
            siri::intelligence::ValidationResults::FilterOutCodes((int64x2_t *)v284, (uint64_t *)&v320);
            unint64_t v265 = v286;
            v321.__first_ = &v320;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v321);
          }
        }
        else
        {
          operator delete(v321.__first_);
        }
      }
      else if (SHIBYTE(v321.__end_) == 12 {
             && v321.__first_ == (std::__split_buffer<std::string>::pointer)0x726565726F6E6769
      }
             && LODWORD(v321.__begin_) == 1936879474)
      {
        goto LABEL_502;
      }
      ++v263;
    }
    while (v263 != v265);
  }
LABEL_526:
  siri::intelligence::ValidationData::~ValidationData((siri::intelligence::ValidationData *)v291);
}

void sub_239ACD410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  google::protobuf::internal::LogMessage::~LogMessage((void **)(v33 - 144));
  siri::intelligence::ValidationData::~ValidationData((siri::intelligence::ValidationData *)&a33);
  std::__tree<std::string>::destroy(a9, a23[4]);
  a33 = a23;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)&a33);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidateAll(siri::intelligence *this, const protobuf::Intelligence *a2, siri::intelligence::ValidationData *a3, siri::intelligence::ValidationResults *a4)
{
  unint64_t v4 = this;
  if ((*((_DWORD *)this + 4) & 2) != 0)
  {
    char v5 = (unsigned char *)*((void *)this + 67);
    if (!v5)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 22110);
      int v6 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || start_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v875, (const char **)&v6->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
      char v5 = (unsigned char *)*((void *)v4 + 67);
    }
    if (v5) {
      BOOL v7 = v5;
    }
    else {
      BOOL v7 = &protobuf::_Intelligence_Start_default_instance_;
    }
    if (*((int *)v7 + 8) >= 1)
    {
      if ((v7[16] & 1) == 0) {
        goto LABEL_16;
      }
      BOOL v8 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&__p, "start definition contains both responseIds and an activityId");
      uint64_t v9 = *((void *)v7 + 1);
      if (v9)
      {
        std::string::size_type v10 = (unsigned __int8 *)(v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v8);
        std::string::size_type v10 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v875, "");
      int LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v10, (uint64_t)&v875, -1);
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&__p, LineNumFromUnknownField);
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (*((int *)v7 + 8) >= 1)
      {
LABEL_16:
        int v12 = 0;
        do
        {
          int v13 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)(v7 + 24), v12);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v13))
          {
            std::string v14 = (google::protobuf::internal *)std::operator+<char>();
            uint64_t v15 = *((void *)v7 + 1);
            if (v15)
            {
              BOOL v16 = (unsigned __int8 *)(v15 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v14);
              BOOL v16 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v875, "responseIds");
            int v17 = siri::intelligence::GetLineNumFromUnknownField(v16, (uint64_t)&v875, v12);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&__p, v17);
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
          }
          ++v12;
        }
        while (v12 < *((_DWORD *)v7 + 8));
      }
    }
    unint64_t v4 = this;
    if (v7[16])
    {
      long long v18 = (long long *)*((void *)v7 + 6);
      if (*((char *)v18 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v18, *((void *)v18 + 1));
      }
      else
      {
        long long v19 = *v18;
        __p.__r_.__value_.__r.__words[2] = *((void *)v18 + 2);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v19;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 200) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 192, (const void **)&__p.__r_.__value_.__l.__data_))
      {
        long long v20 = (google::protobuf::internal *)std::operator+<char>();
        uint64_t v21 = *((void *)v7 + 1);
        if (v21)
        {
          uint64_t v22 = (unsigned __int8 *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v20);
          uint64_t v22 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "activityId");
        int v23 = siri::intelligence::GetLineNumFromUnknownField(v22, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v23);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)v4 + 62) >= 1
    && !siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)a2, (unsigned __int8 *)siri::intelligence::sIntentRenameChange))
  {
    int v24 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&v875, "Deprecated 'intents' field found in flow file: use 'events' instead.");
    if (*((int *)v4 + 62) <= 0)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
      long long v25 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: (index) < (current_size_): ");
      google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v25->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
    }
    uint64_t v26 = *(void *)(*(void *)(*((void *)v4 + 32) + 8) + 8);
    if (v26)
    {
      int v27 = (unsigned __int8 *)(v26 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v24);
      int v27 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    int v28 = siri::intelligence::GetLineNumFromUnknownField(v27, (uint64_t)&__p, -1);
    siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_DEPRECATED, (long long *)&v875, v28);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v875.__r_.__value_.__l.__data_);
    }
  }
  if (*((int *)v4 + 8) >= 1)
  {
    int v29 = 0;
    do
    {
      uint64_t v30 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Meta>::TypeHandler>((uint64_t)this + 24, v29);
      if ((*(unsigned char *)(v30 + 16) & 1) == 0)
      {
        uint64_t v31 = v30;
        int v32 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&__p, "Meta element has no name");
        uint64_t v33 = *(void *)(v31 + 8);
        if (v33)
        {
          int v34 = (unsigned __int8 *)(v33 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v32);
          int v34 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v875, "");
        int v35 = siri::intelligence::GetLineNumFromUnknownField(v34, (uint64_t)&v875, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_NO_META_NAME, (long long *)&__p, v35);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      ++v29;
    }
    while (v29 < *((_DWORD *)this + 8));
  }
  if (*((int *)this + 14) >= 1)
  {
    int v36 = 0;
    v853 = (uint64_t *)((char *)a2 + 48);
    do
    {
      uint64_t v37 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>((uint64_t)this + 48, v36);
      std::string::basic_string[abi:ne180100]<0>(&__p, "dialog response ");
      int v38 = *(_DWORD *)(v37 + 16);
      if (v38)
      {
        std::operator+<char>();
        uint64_t v39 = std::string::append(&v874, "' ");
        long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v875.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v41 = &v875;
        }
        else {
          uint64_t v41 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v875.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v41, size);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v38 = *(_DWORD *)(v37 + 16);
      }
      if ((v38 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v43 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v44 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v43 + 21);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v45 = &v875;
        }
        else {
          uint64_t v45 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v43)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_p = &__p;
          }
          else {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v44 = (google::protobuf::internal *)memmove(v45, p_p, v43);
        }
        strcpy((char *)v45 + v43, "does not define an id");
        uint64_t v47 = *(void *)(v37 + 8);
        if (v47)
        {
          int v48 = (unsigned __int8 *)(v47 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v44);
          int v48 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v49 = siri::intelligence::GetLineNumFromUnknownField(v48, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v49);
        goto LABEL_158;
      }
      if ((siri::intelligence::IsValidId(*(void *)(v37 + 120)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v51 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v52 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v51 + 32);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v53 = &v875;
        }
        else {
          uint64_t v53 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v51)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v54 = &__p;
          }
          else {
            uint64_t v54 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v52 = (google::protobuf::internal *)memmove(v53, v54, v51);
        }
        strcpy((char *)v53 + v51, "has invalid characters in the ID");
        uint64_t v55 = *(void *)(v37 + 8);
        if (v55)
        {
          int v56 = (unsigned __int8 *)(v55 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v52);
          int v56 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "id");
        int v57 = siri::intelligence::GetLineNumFromUnknownField(v56, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v875, v57);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      int v58 = *(const void ***)(v37 + 120);
      if (*(_DWORD *)(v37 + 80) == 1)
      {
        int v59 = *(unsigned __int8 **)(*(void *)(v37 + 88) + 8);
        uint64_t v60 = v59[23];
        uint64_t v61 = (unsigned __int8 *)v58[1];
        int v62 = *((char *)v58 + 23);
        if ((v60 & 0x80u) == 0) {
          uint64_t v63 = (unsigned __int8 *)v59[23];
        }
        else {
          uint64_t v63 = (unsigned __int8 *)*((void *)v59 + 1);
        }
        if (v62 >= 0) {
          uint64_t v61 = (unsigned __int8 *)*((unsigned __int8 *)v58 + 23);
        }
        if (v63 == v61)
        {
          if (v62 >= 0) {
            int v64 = *(unsigned __int8 **)(v37 + 120);
          }
          else {
            int v64 = (unsigned __int8 *)*v58;
          }
          if ((v60 & 0x80) == 0)
          {
            if (v59[23])
            {
              while (*v59 == *v64)
              {
                ++v59;
                ++v64;
                if (!--v60) {
                  goto LABEL_125;
                }
              }
              goto LABEL_143;
            }
LABEL_125:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v65 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v65 = __p.__r_.__value_.__l.__size_;
            }
            int v66 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v65 + 42);
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v67 = &v875;
            }
            else {
              int v67 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            if (v65)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v68 = &__p;
              }
              else {
                uint64_t v68 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              int v66 = (google::protobuf::internal *)memmove(v67, v68, v65);
            }
            strcpy((char *)v67 + v65, "has a single next id that refers to itself");
            uint64_t v69 = *(void *)(v37 + 8);
            if (v69)
            {
              uint64_t v70 = (unsigned __int8 *)(v69 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v66);
              uint64_t v70 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v874, "nextIds");
            int v71 = siri::intelligence::GetLineNumFromUnknownField(v70, (uint64_t)&v874, 0);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INFINITE_LOOP, (long long *)&v875, v71);
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            int v58 = *(const void ***)(v37 + 120);
            goto LABEL_143;
          }
          if (!memcmp(*(const void **)v59, v64, *((void *)v59 + 1))) {
            goto LABEL_125;
          }
        }
      }
LABEL_143:
      int v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v58);
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != v50) {
        goto LABEL_162;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v72 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v72 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v73 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v72 + 12);
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v74 = &v875;
      }
      else {
        int v74 = (std::string *)v875.__r_.__value_.__r.__words[0];
      }
      if (v72)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v75 = &__p;
        }
        else {
          int v75 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v73 = (google::protobuf::internal *)memmove(v74, v75, v72);
      }
      strcpy((char *)v74 + v72, "is not used.");
      uint64_t v76 = *(void *)(v37 + 8);
      if (v76)
      {
        uint64_t v77 = (unsigned __int8 *)(v76 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v73);
        uint64_t v77 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v78 = siri::intelligence::GetLineNumFromUnknownField(v77, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&v875, v78);
LABEL_158:
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
LABEL_162:
      if (*(int *)(v37 + 80) >= 1)
      {
        int v79 = 0;
        do
        {
          int v80 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v37 + 72, v79);
          int v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v80);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == v50)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v81 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v81 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v81 + 29);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v82 = &v874;
            }
            else {
              int v82 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v81)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v83 = &__p;
              }
              else {
                int v83 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v82, v83, v81);
            }
            strcpy((char *)v82 + v81, "refers to undefined next id: ");
            uint64_t v84 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v37 + 72, v79);
            int v85 = *(char *)(v84 + 23);
            if (v85 >= 0) {
              uint64_t v86 = (const std::string::value_type *)v84;
            }
            else {
              uint64_t v86 = *(const std::string::value_type **)v84;
            }
            if (v85 >= 0) {
              std::string::size_type v87 = *(unsigned __int8 *)(v84 + 23);
            }
            else {
              std::string::size_type v87 = *(void *)(v84 + 8);
            }
            int v88 = std::string::append(&v874, v86, v87);
            std::string v875 = *v88;
            v88->__r_.__value_.__l.__size_ = 0;
            v88->__r_.__value_.__r.__words[2] = 0;
            v88->__r_.__value_.__r.__words[0] = 0;
            uint64_t v89 = *(void *)(v37 + 8);
            if (v89)
            {
              int v90 = (unsigned __int8 *)(v89 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v88);
              int v90 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            int v91 = siri::intelligence::GetLineNumFromUnknownField(v90, (uint64_t)&__s1, v79);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v91);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
          ++v79;
        }
        while (v79 < *(_DWORD *)(v37 + 80));
      }
      uint64_t v92 = *(void *)(v37 + 216);
      if (*(char *)(v92 + 23) < 0)
      {
        if (!*(void *)(v92 + 8)) {
          goto LABEL_223;
        }
      }
      else if (!*(unsigned char *)(v92 + 23))
      {
        goto LABEL_223;
      }
      int v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v92);
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == v50)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v93 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v93 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v93 + 33);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v94 = &v874;
        }
        else {
          uint64_t v94 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v93)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v95 = &__p;
          }
          else {
            unint64_t v95 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v94, v95, v93);
        }
        strcpy((char *)v94 + v93, "refers to undefined input group: ");
        uint64_t v96 = *(void *)(v37 + 216);
        int v97 = *(char *)(v96 + 23);
        if (v97 >= 0) {
          int v98 = *(const std::string::value_type **)(v37 + 216);
        }
        else {
          int v98 = *(const std::string::value_type **)v96;
        }
        if (v97 >= 0) {
          std::string::size_type v99 = *(unsigned __int8 *)(v96 + 23);
        }
        else {
          std::string::size_type v99 = *(void *)(v96 + 8);
        }
        std::string v100 = std::string::append(&v874, v98, v99);
        std::string v875 = *v100;
        v100->__r_.__value_.__l.__size_ = 0;
        v100->__r_.__value_.__r.__words[2] = 0;
        v100->__r_.__value_.__r.__words[0] = 0;
        uint64_t v101 = *(void *)(v37 + 8);
        if (v101)
        {
          uint64_t v102 = (unsigned __int8 *)(v101 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v100);
          uint64_t v102 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        int v103 = siri::intelligence::GetLineNumFromUnknownField(v102, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INPUT, (long long *)&v875, v103);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_223:
      uint64_t v104 = *(void *)(v37 + 208);
      if (*(char *)(v104 + 23) < 0)
      {
        if (!*(void *)(v104 + 8)) {
          goto LABEL_253;
        }
      }
      else if (!*(unsigned char *)(v104 + 23))
      {
        goto LABEL_253;
      }
      int v50 = (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v104);
      if ((const protobuf::Intelligence *)((char *)a2 + 176) == v50)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v105 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v105 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v105 + 31);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v106 = &v874;
        }
        else {
          uint64_t v106 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v105)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v107 = &__p;
          }
          else {
            uint64_t v107 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v106, v107, v105);
        }
        strcpy((char *)v106 + v105, "refers to undefined condition: ");
        uint64_t v108 = *(void *)(v37 + 208);
        int v109 = *(char *)(v108 + 23);
        if (v109 >= 0) {
          uint64_t v110 = *(const std::string::value_type **)(v37 + 208);
        }
        else {
          uint64_t v110 = *(const std::string::value_type **)v108;
        }
        if (v109 >= 0) {
          std::string::size_type v111 = *(unsigned __int8 *)(v108 + 23);
        }
        else {
          std::string::size_type v111 = *(void *)(v108 + 8);
        }
        uint64_t v112 = std::string::append(&v874, v110, v111);
        std::string v875 = *v112;
        v112->__r_.__value_.__l.__size_ = 0;
        v112->__r_.__value_.__r.__words[2] = 0;
        v112->__r_.__value_.__r.__words[0] = 0;
        uint64_t v113 = *(void *)(v37 + 8);
        if (v113)
        {
          uint64_t v114 = (unsigned __int8 *)(v113 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v112);
          uint64_t v114 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
        int v115 = siri::intelligence::GetLineNumFromUnknownField(v114, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_CONDITION, (long long *)&v875, v115);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_253:
      int v116 = *(_DWORD *)(v37 + 16);
      if (*(int *)(v37 + 80) >= 1 && (v116 & 0x1000) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v117 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v117 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v118 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v117 + 38);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          char v119 = &v875;
        }
        else {
          char v119 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v117)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v120 = &__p;
          }
          else {
            uint64_t v120 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v118 = (google::protobuf::internal *)memmove(v119, v120, v117);
        }
        strcpy((char *)v119 + v117, "contains both nextIds and inputGroupId");
        uint64_t v121 = *(void *)(v37 + 8);
        if (v121)
        {
          BOOL v122 = (unsigned __int8 *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v118);
          BOOL v122 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v123 = siri::intelligence::GetLineNumFromUnknownField(v122, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&v875, v123);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v116 = *(_DWORD *)(v37 + 16);
      }
      if ((v116 & 0x80) != 0)
      {
        uint64_t v124 = *(void *)(v37 + 176);
        uint64_t v125 = *(void *)(v37 + 8);
        if (v125)
        {
          uint64_t v126 = (unsigned __int8 *)(v125 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v50);
          uint64_t v126 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v875, "text");
        int v127 = siri::intelligence::GetLineNumFromUnknownField(v126, (uint64_t)&v875, -1);
        siri::intelligence::ValidateVariableReferencesInText((const void **)&__p.__r_.__value_.__l.__data_, v124, (uint64_t)a2, a3, v127);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v116 = *(_DWORD *)(v37 + 16);
      }
      if (*(int *)(v37 + 32) >= 1 && (v116 & 0x200) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v128 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v128 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v129 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v128 + 36);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          unsigned __int8 v130 = &v875;
        }
        else {
          unsigned __int8 v130 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v128)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v131 = &__p;
          }
          else {
            uint64_t v131 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v129 = (google::protobuf::internal *)memmove(v130, v131, v128);
        }
        strcpy((char *)v130 + v128, "defines CAT parameters but no CAT ID");
        uint64_t v132 = *(void *)(v37 + 8);
        if (v132)
        {
          uint64_t v133 = (unsigned __int8 *)(v132 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v129);
          uint64_t v133 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "catParameters");
        int v134 = siri::intelligence::GetLineNumFromUnknownField(v133, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_CAT_ID, (long long *)&v875, v134);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v116 = *(_DWORD *)(v37 + 16);
      }
      if (*(int *)(v37 + 56) >= 1 && (v116 & 0x400) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v135 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v135 = __p.__r_.__value_.__l.__size_;
        }
        std::string v136 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v135 + 44);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v137 = &v875;
        }
        else {
          uint64_t v137 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v135)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v138 = &__p;
          }
          else {
            uint64_t v138 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          std::string v136 = (google::protobuf::internal *)memmove(v137, v138, v135);
        }
        strcpy((char *)v137 + v135, "defines Pattern parameters but no Pattern ID");
        uint64_t v139 = *(void *)(v37 + 8);
        if (v139)
        {
          BOOL v140 = (unsigned __int8 *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v136);
          BOOL v140 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "patternParameters");
        int v141 = siri::intelligence::GetLineNumFromUnknownField(v140, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_PATTERN_ID, (long long *)&v875, v141);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v116 = *(_DWORD *)(v37 + 16);
      }
      if ((v116 & 0x200) != 0)
      {
        uint64_t v142 = *(char ***)(v37 + 192);
        std::string::basic_string[abi:ne180100]<0>(&v875, "#");
        if (siri::intelligence::StringContains(v142, (char *)&v875))
        {
          if (*((char *)a2 + 47) < 0) {
            uint64_t v143 = *((void *)a2 + 4);
          }
          else {
            uint64_t v143 = *((unsigned __int8 *)a2 + 47);
          }
          BOOL v144 = v143 != 0;
        }
        else
        {
          BOOL v144 = 0;
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v875.__r_.__value_.__l.__data_);
          if (!v144) {
            goto LABEL_363;
          }
        }
        else if (!v144)
        {
          goto LABEL_363;
        }
        if (!siri::intelligence::DirExists(v853)) {
          goto LABEL_363;
        }
        siri::intelligence::FindPathForCatId((uint64_t)v853, *(unsigned __int8 **)(v37 + 192), &v875);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v145 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v145 = v875.__r_.__value_.__l.__size_;
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v875.__r_.__value_.__l.__data_);
          if (v145) {
            goto LABEL_363;
          }
        }
        else if (v145)
        {
          goto LABEL_363;
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v146 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v146 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v146 + 38);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v147 = &v874;
        }
        else {
          uint64_t v147 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v146)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v148 = &__p;
          }
          else {
            uint64_t v148 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v147, v148, v146);
        }
        strcpy((char *)v147 + v146, "defines a CAT ID that does not exist: ");
        uint64_t v149 = *(void *)(v37 + 192);
        int v150 = *(char *)(v149 + 23);
        if (v150 >= 0) {
          uint64_t v151 = *(const std::string::value_type **)(v37 + 192);
        }
        else {
          uint64_t v151 = *(const std::string::value_type **)v149;
        }
        if (v150 >= 0) {
          std::string::size_type v152 = *(unsigned __int8 *)(v149 + 23);
        }
        else {
          std::string::size_type v152 = *(void *)(v149 + 8);
        }
        uint64_t v153 = std::string::append(&v874, v151, v152);
        std::string v875 = *v153;
        v153->__r_.__value_.__l.__size_ = 0;
        v153->__r_.__value_.__r.__words[2] = 0;
        v153->__r_.__value_.__r.__words[0] = 0;
        uint64_t v154 = *(void *)(v37 + 8);
        if (v154)
        {
          size_t v155 = (unsigned __int8 *)(v154 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v153);
          size_t v155 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "catId");
        int v156 = siri::intelligence::GetLineNumFromUnknownField(v155, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_CAT_ID, (long long *)&v875, v156);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_363:
      if ((*(unsigned char *)(v37 + 17) & 4) != 0)
      {
        size_t v157 = *(char ***)(v37 + 200);
        std::string::basic_string[abi:ne180100]<0>(&v875, "#");
        if (siri::intelligence::StringContains(v157, (char *)&v875))
        {
          if (*((char *)a2 + 47) < 0) {
            uint64_t v158 = *((void *)a2 + 4);
          }
          else {
            uint64_t v158 = *((unsigned __int8 *)a2 + 47);
          }
          BOOL v159 = v158 != 0;
        }
        else
        {
          BOOL v159 = 0;
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v875.__r_.__value_.__l.__data_);
          if (!v159) {
            goto LABEL_407;
          }
        }
        else if (!v159)
        {
          goto LABEL_407;
        }
        if (siri::intelligence::DirExists(v853))
        {
          siri::intelligence::FindFileForPatternId((uint64_t)v853, *(unsigned __int8 **)(v37 + 200), (uint64_t)&v875);
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v160 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v160 = v875.__r_.__value_.__l.__size_;
          }
          if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v875.__r_.__value_.__l.__data_);
            if (!v160)
            {
LABEL_382:
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v161 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v161 = __p.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&v874, v161 + 42);
              if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v162 = &v874;
              }
              else {
                uint64_t v162 = (std::string *)v874.__r_.__value_.__r.__words[0];
              }
              if (v161)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v163 = &__p;
                }
                else {
                  uint64_t v163 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                memmove(v162, v163, v161);
              }
              strcpy((char *)v162 + v161, "defines a Pattern ID that does not exist: ");
              uint64_t v164 = *(void *)(v37 + 200);
              int v165 = *(char *)(v164 + 23);
              if (v165 >= 0) {
                unint64_t v166 = *(const std::string::value_type **)(v37 + 200);
              }
              else {
                unint64_t v166 = *(const std::string::value_type **)v164;
              }
              if (v165 >= 0) {
                std::string::size_type v167 = *(unsigned __int8 *)(v164 + 23);
              }
              else {
                std::string::size_type v167 = *(void *)(v164 + 8);
              }
              char v168 = std::string::append(&v874, v166, v167);
              std::string v875 = *v168;
              v168->__r_.__value_.__l.__size_ = 0;
              v168->__r_.__value_.__r.__words[2] = 0;
              v168->__r_.__value_.__r.__words[0] = 0;
              uint64_t v169 = *(void *)(v37 + 8);
              if (v169)
              {
                uint64_t v170 = (unsigned __int8 *)(v169 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v168);
                uint64_t v170 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
              }
              std::string::basic_string[abi:ne180100]<0>(&__s1, "patternId");
              int v171 = siri::intelligence::GetLineNumFromUnknownField(v170, (uint64_t)&__s1, -1);
              siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_PATTERN_ID, (long long *)&v875, v171);
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s1.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v875.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v874.__r_.__value_.__l.__data_);
              }
            }
          }
          else if (!v160)
          {
            goto LABEL_382;
          }
        }
      }
LABEL_407:
      if (*(int *)(v37 + 32) >= 1)
      {
        int v172 = 0;
        do
        {
          uint64_t v173 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 24, v172);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v173, (uint64_t)a2, a3);
          ++v172;
        }
        while (v172 < *(_DWORD *)(v37 + 32));
      }
      if (*(int *)(v37 + 104) >= 1)
      {
        int v174 = 0;
        do
        {
          uint64_t v175 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 96, v174);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v175, (uint64_t)a2, a3);
          ++v174;
        }
        while (v174 < *(_DWORD *)(v37 + 104));
      }
      if (*(int *)(v37 + 56) >= 1)
      {
        int v176 = 0;
        do
        {
          uint64_t v177 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v37 + 48, v176);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v177, (uint64_t)a2, a3);
          ++v176;
        }
        while (v176 < *(_DWORD *)(v37 + 56));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v36;
    }
    while (v36 < *((_DWORD *)this + 14));
  }
  if (*((int *)this + 20) >= 1)
  {
    for (int i = 0; i < *((_DWORD *)this + 20); ++i)
    {
      uint64_t v179 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_BehaviorResponse>::TypeHandler>((uint64_t)this + 72, i);
      std::string::basic_string[abi:ne180100]<0>(&__p, "behavior response ");
      int v180 = *(_DWORD *)(v179 + 16);
      if (v180)
      {
        std::operator+<char>();
        int v181 = std::string::append(&v874, "' ");
        long long v182 = *(_OWORD *)&v181->__r_.__value_.__l.__data_;
        v875.__r_.__value_.__r.__words[2] = v181->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v182;
        v181->__r_.__value_.__l.__size_ = 0;
        v181->__r_.__value_.__r.__words[2] = 0;
        v181->__r_.__value_.__r.__words[0] = 0;
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v183 = &v875;
        }
        else {
          size_t v183 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v184 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v184 = v875.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v183, v184);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v180 = *(_DWORD *)(v179 + 16);
      }
      if ((v180 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v185 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v185 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v186 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v185 + 21);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v187 = &v875;
        }
        else {
          uint64_t v187 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v185)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v188 = &__p;
          }
          else {
            uint64_t v188 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v186 = (google::protobuf::internal *)memmove(v187, v188, v185);
        }
        strcpy((char *)v187 + v185, "does not define an id");
        uint64_t v189 = *(void *)(v179 + 8);
        if (v189)
        {
          long long v190 = (unsigned __int8 *)(v189 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v186);
          long long v190 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v191 = siri::intelligence::GetLineNumFromUnknownField(v190, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v191);
        goto LABEL_528;
      }
      if ((siri::intelligence::IsValidId(*(void *)(v179 + 72)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v192 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v192 = __p.__r_.__value_.__l.__size_;
        }
        int v193 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v192 + 32);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v194 = &v875;
        }
        else {
          int v194 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v192)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v195 = &__p;
          }
          else {
            std::string::size_type v195 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          int v193 = (google::protobuf::internal *)memmove(v194, v195, v192);
        }
        strcpy((char *)v194 + v192, "has invalid characters in the ID");
        uint64_t v196 = *(void *)(v179 + 8);
        if (v196)
        {
          long long v197 = (unsigned __int8 *)(v196 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v193);
          long long v197 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "id");
        int v198 = siri::intelligence::GetLineNumFromUnknownField(v197, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v875, v198);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v199 = *(const void ***)(v179 + 72);
      if (*(_DWORD *)(v179 + 56) == 1)
      {
        uint64_t v200 = *(unsigned __int8 **)(*(void *)(v179 + 64) + 8);
        uint64_t v201 = v200[23];
        uint64_t v202 = (unsigned __int8 *)v199[1];
        int v203 = *((char *)v199 + 23);
        if ((v201 & 0x80u) == 0) {
          uint64_t v204 = (unsigned __int8 *)v200[23];
        }
        else {
          uint64_t v204 = (unsigned __int8 *)*((void *)v200 + 1);
        }
        if (v203 >= 0) {
          uint64_t v202 = (unsigned __int8 *)*((unsigned __int8 *)v199 + 23);
        }
        if (v204 == v202)
        {
          if (v203 >= 0) {
            int v205 = *(unsigned __int8 **)(v179 + 72);
          }
          else {
            int v205 = (unsigned __int8 *)*v199;
          }
          if ((v201 & 0x80) == 0)
          {
            if (v200[23])
            {
              while (*v200 == *v205)
              {
                ++v200;
                ++v205;
                if (!--v201) {
                  goto LABEL_495;
                }
              }
              goto LABEL_513;
            }
LABEL_495:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v206 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v206 = __p.__r_.__value_.__l.__size_;
            }
            uint64_t v207 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v206 + 42);
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v208 = &v875;
            }
            else {
              uint64_t v208 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            if (v206)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v209 = &__p;
              }
              else {
                uint64_t v209 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              uint64_t v207 = (google::protobuf::internal *)memmove(v208, v209, v206);
            }
            strcpy((char *)v208 + v206, "has a single next id that refers to itself");
            uint64_t v210 = *(void *)(v179 + 8);
            if (v210)
            {
              uint64_t v211 = (unsigned __int8 *)(v210 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v207);
              uint64_t v211 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v874, "nextIds");
            int v212 = siri::intelligence::GetLineNumFromUnknownField(v211, (uint64_t)&v874, 0);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INFINITE_LOOP, (long long *)&v875, v212);
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            uint64_t v199 = *(const void ***)(v179 + 72);
            goto LABEL_513;
          }
          if (!memcmp(*(const void **)v200, v205, *((void *)v200 + 1))) {
            goto LABEL_495;
          }
        }
      }
LABEL_513:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v199))goto LABEL_532; {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      }
        size_t v213 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else {
        size_t v213 = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v214 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v213 + 12);
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v215 = &v875;
      }
      else {
        uint64_t v215 = (std::string *)v875.__r_.__value_.__r.__words[0];
      }
      if (v213)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v216 = &__p;
        }
        else {
          uint64_t v216 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v214 = (google::protobuf::internal *)memmove(v215, v216, v213);
      }
      strcpy((char *)v215 + v213, "is not used.");
      uint64_t v217 = *(void *)(v179 + 8);
      if (v217)
      {
        unint64_t v218 = (unsigned __int8 *)(v217 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v214);
        unint64_t v218 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v219 = siri::intelligence::GetLineNumFromUnknownField(v218, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&v875, v219);
LABEL_528:
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
LABEL_532:
      if (*(int *)(v179 + 56) >= 1)
      {
        int v220 = 0;
        do
        {
          uint64_t v221 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v179 + 48, v220);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v221))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v222 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v222 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v222 + 29);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v223 = &v874;
            }
            else {
              uint64_t v223 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v222)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t v224 = &__p;
              }
              else {
                uint64_t v224 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v223, v224, v222);
            }
            strcpy((char *)v223 + v222, "refers to undefined next id: ");
            uint64_t v225 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v179 + 48, v220);
            int v226 = *(char *)(v225 + 23);
            if (v226 >= 0) {
              uint64_t v227 = (const std::string::value_type *)v225;
            }
            else {
              uint64_t v227 = *(const std::string::value_type **)v225;
            }
            if (v226 >= 0) {
              std::string::size_type v228 = *(unsigned __int8 *)(v225 + 23);
            }
            else {
              std::string::size_type v228 = *(void *)(v225 + 8);
            }
            uint64_t v229 = std::string::append(&v874, v227, v228);
            std::string v875 = *v229;
            v229->__r_.__value_.__l.__size_ = 0;
            v229->__r_.__value_.__r.__words[2] = 0;
            v229->__r_.__value_.__r.__words[0] = 0;
            uint64_t v230 = *(void *)(v179 + 8);
            if (v230)
            {
              uint64_t v231 = (unsigned __int8 *)(v230 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v229);
              uint64_t v231 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            int v232 = siri::intelligence::GetLineNumFromUnknownField(v231, (uint64_t)&__s1, v220);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v232);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
          ++v220;
        }
        while (v220 < *(_DWORD *)(v179 + 56));
      }
      uint64_t v233 = *(void *)(v179 + 144);
      if (*(char *)(v233 + 23) < 0)
      {
        if (!*(void *)(v233 + 8)) {
          goto LABEL_593;
        }
      }
      else if (!*(unsigned char *)(v233 + 23))
      {
        goto LABEL_593;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v233))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v234 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v234 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v234 + 33);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v235 = &v874;
        }
        else {
          uint64_t v235 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v234)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v236 = &__p;
          }
          else {
            uint64_t v236 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v235, v236, v234);
        }
        strcpy((char *)v235 + v234, "refers to undefined input group: ");
        uint64_t v237 = *(void *)(v179 + 144);
        int v238 = *(char *)(v237 + 23);
        if (v238 >= 0) {
          uint64_t v239 = *(const std::string::value_type **)(v179 + 144);
        }
        else {
          uint64_t v239 = *(const std::string::value_type **)v237;
        }
        if (v238 >= 0) {
          std::string::size_type v240 = *(unsigned __int8 *)(v237 + 23);
        }
        else {
          std::string::size_type v240 = *(void *)(v237 + 8);
        }
        size_t v241 = std::string::append(&v874, v239, v240);
        std::string v875 = *v241;
        v241->__r_.__value_.__l.__size_ = 0;
        v241->__r_.__value_.__r.__words[2] = 0;
        v241->__r_.__value_.__r.__words[0] = 0;
        uint64_t v242 = *(void *)(v179 + 8);
        if (v242)
        {
          uint64_t v243 = (unsigned __int8 *)(v242 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v241);
          uint64_t v243 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        int v244 = siri::intelligence::GetLineNumFromUnknownField(v243, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INPUT, (long long *)&v875, v244);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_593:
      uint64_t v245 = *(void *)(v179 + 136);
      if (*(char *)(v245 + 23) < 0)
      {
        if (*(void *)(v245 + 8))
        {
LABEL_597:
          if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v245))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v246 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v246 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v246 + 31);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v247 = &v874;
            }
            else {
              uint64_t v247 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v246)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v248 = &__p;
              }
              else {
                size_t v248 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v247, v248, v246);
            }
            strcpy((char *)v247 + v246, "refers to undefined condition: ");
            uint64_t v249 = *(void *)(v179 + 136);
            int v250 = *(char *)(v249 + 23);
            if (v250 >= 0) {
              int v251 = *(const std::string::value_type **)(v179 + 136);
            }
            else {
              int v251 = *(const std::string::value_type **)v249;
            }
            if (v250 >= 0) {
              std::string::size_type v252 = *(unsigned __int8 *)(v249 + 23);
            }
            else {
              std::string::size_type v252 = *(void *)(v249 + 8);
            }
            uint64_t v253 = std::string::append(&v874, v251, v252);
            std::string v875 = *v253;
            v253->__r_.__value_.__l.__size_ = 0;
            v253->__r_.__value_.__r.__words[2] = 0;
            v253->__r_.__value_.__r.__words[0] = 0;
            uint64_t v254 = *(void *)(v179 + 8);
            if (v254)
            {
              size_t v255 = (unsigned __int8 *)(v254 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v253);
              size_t v255 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
            int v256 = siri::intelligence::GetLineNumFromUnknownField(v255, (uint64_t)&__s1, -1);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_CONDITION, (long long *)&v875, v256);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else if (*(unsigned char *)(v245 + 23))
      {
        goto LABEL_597;
      }
      int v257 = *(_DWORD *)(v179 + 16);
      if (*(int *)(v179 + 56) >= 1 && (v257 & 0x200) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v258 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v258 = __p.__r_.__value_.__l.__size_;
        }
        BOOL v259 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v258 + 38);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v260 = &v875;
        }
        else {
          uint64_t v260 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v258)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            long long v261 = &__p;
          }
          else {
            long long v261 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          BOOL v259 = (google::protobuf::internal *)memmove(v260, v261, v258);
        }
        strcpy((char *)v260 + v258, "contains both nextIds and inputGroupId");
        uint64_t v262 = *(void *)(v179 + 8);
        if (v262)
        {
          long long v263 = (unsigned __int8 *)(v262 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v259);
          long long v263 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v264 = siri::intelligence::GetLineNumFromUnknownField(v263, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&v875, v264);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v257 = *(_DWORD *)(v179 + 16);
      }
      if ((v257 & 0x80) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v265 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v265 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v266 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v265 + 22);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v267 = &v875;
        }
        else {
          int v267 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v265)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v268 = &__p;
          }
          else {
            size_t v268 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v266 = (google::protobuf::internal *)memmove(v267, v268, v265);
        }
        strcpy((char *)v267 + v265, "does not define a name");
        uint64_t v269 = *(void *)(v179 + 8);
        if (v269)
        {
          size_t v270 = (unsigned __int8 *)(v269 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v266);
          size_t v270 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v271 = siri::intelligence::GetLineNumFromUnknownField(v270, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v271);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      if (*(int *)(v179 + 32) >= 1)
      {
        int v272 = 0;
        do
        {
          uint64_t v273 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v179 + 24, v272);
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&__p, v273, (uint64_t)a2, a3);
          ++v272;
        }
        while (v272 < *(_DWORD *)(v179 + 32));
      }
      memset(&v875, 0, sizeof(v875));
      memset(&v874, 0, sizeof(v874));
      google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&v874, v179 + 24);
      if (LODWORD(v874.__r_.__value_.__r.__words[1]))
      {
        if (v874.__r_.__value_.__r.__words[2]) {
          BOOL v274 = (const protobuf::Intelligence_KeyValueParameter **)(v874.__r_.__value_.__r.__words[2] + 8);
        }
        else {
          BOOL v274 = 0;
        }
        long long v275 = (protobuf::Intelligence_KeyValueParameter *)v875.__r_.__value_.__l.__size_;
        do
        {
          unint64_t v276 = *v274;
          if ((unint64_t)v275 >= v875.__r_.__value_.__r.__words[2])
          {
            long long v275 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&v875, v276);
          }
          else
          {
            protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v275, v276);
            long long v275 = (protobuf::Intelligence_KeyValueParameter *)((char *)v275 + 192);
          }
          v875.__r_.__value_.__l.__size_ = (std::string::size_type)v275;
          ++v274;
          if (v874.__r_.__value_.__r.__words[2]) {
            std::string::size_type v277 = v874.__r_.__value_.__r.__words[2] + 8;
          }
          else {
            std::string::size_type v277 = 0;
          }
        }
        while (v274 != (const protobuf::Intelligence_KeyValueParameter **)(v277
                                                                          + 8
                                                                          * SLODWORD(v874.__r_.__value_.__r.__words[1])));
      }
      google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&v874);
      uint64_t v278 = *(void *)(v179 + 128);
      size_t v279 = (google::protobuf::internal *)std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&v875, &__s1);
      uint64_t v280 = *(void *)(v179 + 8);
      if (v280)
      {
        long long v281 = (unsigned __int8 *)(v280 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v279);
        long long v281 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v282 = siri::intelligence::GetLineNumFromUnknownField(v281, (uint64_t)&v874, -1);
      siri::intelligence::BehaviorHandler::Validate((uint64_t)&v871, (const void **)&__p.__r_.__value_.__l.__data_, a3, v278, (void ***)&__s1, (uint64_t)a2, v282);
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (__s1.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_);
      }
      v874.__r_.__value_.__r.__words[0] = (std::string::size_type)&v875;
      std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&v874);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)this + 26) >= 1)
  {
    for (int j = 0; j < *((_DWORD *)this + 26); ++j)
    {
      uint64_t v284 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ReferenceResponse>::TypeHandler>((uint64_t)this + 96, j);
      std::string::basic_string[abi:ne180100]<0>(&__p, "reference response ");
      int v285 = *(_DWORD *)(v284 + 16);
      if (v285)
      {
        std::operator+<char>();
        v286 = std::string::append(&v874, "' ");
        long long v287 = *(_OWORD *)&v286->__r_.__value_.__l.__data_;
        v875.__r_.__value_.__r.__words[2] = v286->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v287;
        v286->__r_.__value_.__l.__size_ = 0;
        v286->__r_.__value_.__r.__words[2] = 0;
        v286->__r_.__value_.__r.__words[0] = 0;
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v288 = &v875;
        }
        else {
          int v288 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v289 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v289 = v875.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v288, v289);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v285 = *(_DWORD *)(v284 + 16);
      }
      if ((v285 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v290 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v290 = __p.__r_.__value_.__l.__size_;
        }
        long long v291 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v290 + 21);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v292 = &v875;
        }
        else {
          long long v292 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v290)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v293 = &__p;
          }
          else {
            unint64_t v293 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          long long v291 = (google::protobuf::internal *)memmove(v292, v293, v290);
        }
        strcpy((char *)v292 + v290, "does not define an id");
        uint64_t v294 = *(void *)(v284 + 8);
        if (v294)
        {
          v295 = (unsigned __int8 *)(v294 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v291);
          v295 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v296 = siri::intelligence::GetLineNumFromUnknownField(v295, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v296);
        goto LABEL_791;
      }
      if ((siri::intelligence::IsValidId(*(void *)(v284 + 48)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v297 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v297 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v298 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v297 + 32);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int64_t v299 = &v875;
        }
        else {
          int64_t v299 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v297)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v300 = &__p;
          }
          else {
            uint64_t v300 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          uint64_t v298 = (google::protobuf::internal *)memmove(v299, v300, v297);
        }
        strcpy((char *)v299 + v297, "has invalid characters in the ID");
        uint64_t v301 = *(void *)(v284 + 8);
        if (v301)
        {
          v302 = (unsigned __int8 *)(v301 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v298);
          v302 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "id");
        int v303 = siri::intelligence::GetLineNumFromUnknownField(v302, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v875, v303);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v304 = *(const void ***)(v284 + 48);
      if (*(_DWORD *)(v284 + 32) == 1)
      {
        size_t v305 = *(unsigned __int8 **)(*(void *)(v284 + 40) + 8);
        uint64_t v306 = v305[23];
        BOOL v307 = (unsigned __int8 *)v304[1];
        int v308 = *((char *)v304 + 23);
        if ((v306 & 0x80u) == 0) {
          v309 = (unsigned __int8 *)v305[23];
        }
        else {
          v309 = (unsigned __int8 *)*((void *)v305 + 1);
        }
        if (v308 >= 0) {
          BOOL v307 = (unsigned __int8 *)*((unsigned __int8 *)v304 + 23);
        }
        if (v309 == v307)
        {
          if (v308 >= 0) {
            v310 = *(unsigned __int8 **)(v284 + 48);
          }
          else {
            v310 = (unsigned __int8 *)*v304;
          }
          if ((v306 & 0x80) == 0)
          {
            if (v305[23])
            {
              while (*v305 == *v310)
              {
                ++v305;
                ++v310;
                if (!--v306) {
                  goto LABEL_758;
                }
              }
              goto LABEL_776;
            }
LABEL_758:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v311 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v311 = __p.__r_.__value_.__l.__size_;
            }
            v312 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v311 + 42);
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              __int16 v313 = &v875;
            }
            else {
              __int16 v313 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            if (v311)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v314 = &__p;
              }
              else {
                v314 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              v312 = (google::protobuf::internal *)memmove(v313, v314, v311);
            }
            strcpy((char *)v313 + v311, "has a single next id that refers to itself");
            uint64_t v315 = *(void *)(v284 + 8);
            if (v315)
            {
              char v316 = (unsigned __int8 *)(v315 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v312);
              char v316 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v874, "nextIds");
            int v317 = siri::intelligence::GetLineNumFromUnknownField(v316, (uint64_t)&v874, 0);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INFINITE_LOOP, (long long *)&v875, v317);
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            uint64_t v304 = *(const void ***)(v284 + 48);
            goto LABEL_776;
          }
          if (!memcmp(*(const void **)v305, v310, *((void *)v305 + 1))) {
            goto LABEL_758;
          }
        }
      }
LABEL_776:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v304))goto LABEL_795; {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      }
        size_t v318 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else {
        size_t v318 = __p.__r_.__value_.__l.__size_;
      }
      std::string v319 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v318 + 12);
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string v320 = &v875;
      }
      else {
        std::string v320 = (std::string *)v875.__r_.__value_.__r.__words[0];
      }
      if (v318)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::__split_buffer<std::string> v321 = &__p;
        }
        else {
          std::__split_buffer<std::string> v321 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        std::string v319 = (google::protobuf::internal *)memmove(v320, v321, v318);
      }
      strcpy((char *)v320 + v318, "is not used.");
      uint64_t v322 = *(void *)(v284 + 8);
      if (v322)
      {
        size_t v323 = (unsigned __int8 *)(v322 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v319);
        size_t v323 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v324 = siri::intelligence::GetLineNumFromUnknownField(v323, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&v875, v324);
LABEL_791:
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
LABEL_795:
      if (*(int *)(v284 + 32) >= 1)
      {
        int v325 = 0;
        do
        {
          v326 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v284 + 24, v325);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v326))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v327 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v327 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v327 + 29);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              long long v328 = &v874;
            }
            else {
              long long v328 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v327)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v329 = &__p;
              }
              else {
                long long v329 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v328, v329, v327);
            }
            strcpy((char *)v328 + v327, "refers to undefined next id: ");
            uint64_t v330 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v284 + 24, v325);
            int v331 = *(char *)(v330 + 23);
            if (v331 >= 0) {
              v332 = (const std::string::value_type *)v330;
            }
            else {
              v332 = *(const std::string::value_type **)v330;
            }
            if (v331 >= 0) {
              std::string::size_type v333 = *(unsigned __int8 *)(v330 + 23);
            }
            else {
              std::string::size_type v333 = *(void *)(v330 + 8);
            }
            uint64_t v334 = std::string::append(&v874, v332, v333);
            std::string v875 = *v334;
            v334->__r_.__value_.__l.__size_ = 0;
            v334->__r_.__value_.__r.__words[2] = 0;
            v334->__r_.__value_.__r.__words[0] = 0;
            uint64_t v335 = *(void *)(v284 + 8);
            if (v335)
            {
              v336 = (unsigned __int8 *)(v335 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v334);
              v336 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            int v337 = siri::intelligence::GetLineNumFromUnknownField(v336, (uint64_t)&__s1, v325);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v337);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
          ++v325;
        }
        while (v325 < *(_DWORD *)(v284 + 32));
      }
      uint64_t v338 = *(void *)(v284 + 128);
      if (*(char *)(v338 + 23) < 0)
      {
        if (!*(void *)(v338 + 8)) {
          goto LABEL_856;
        }
      }
      else if (!*(unsigned char *)(v338 + 23))
      {
        goto LABEL_856;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v338))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v339 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v339 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v339 + 33);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v340 = &v874;
        }
        else {
          v340 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v339)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t v341 = &__p;
          }
          else {
            uint64_t v341 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v340, v341, v339);
        }
        strcpy((char *)v340 + v339, "refers to undefined input group: ");
        uint64_t v342 = *(void *)(v284 + 128);
        int v343 = *(char *)(v342 + 23);
        if (v343 >= 0) {
          uint64_t v344 = *(const std::string::value_type **)(v284 + 128);
        }
        else {
          uint64_t v344 = *(const std::string::value_type **)v342;
        }
        if (v343 >= 0) {
          std::string::size_type v345 = *(unsigned __int8 *)(v342 + 23);
        }
        else {
          std::string::size_type v345 = *(void *)(v342 + 8);
        }
        uint64_t v346 = std::string::append(&v874, v344, v345);
        std::string v875 = *v346;
        v346->__r_.__value_.__l.__size_ = 0;
        v346->__r_.__value_.__r.__words[2] = 0;
        v346->__r_.__value_.__r.__words[0] = 0;
        uint64_t v347 = *(void *)(v284 + 8);
        if (v347)
        {
          v348 = (unsigned __int8 *)(v347 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v346);
          v348 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        int v349 = siri::intelligence::GetLineNumFromUnknownField(v348, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INPUT, (long long *)&v875, v349);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_856:
      uint64_t v350 = *(void *)(v284 + 120);
      if (*(char *)(v350 + 23) < 0)
      {
        if (*(void *)(v350 + 8))
        {
LABEL_860:
          if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v350))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v351 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v351 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v351 + 31);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v352 = &v874;
            }
            else {
              v352 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v351)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                long long v353 = &__p;
              }
              else {
                long long v353 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v352, v353, v351);
            }
            strcpy((char *)v352 + v351, "refers to undefined condition: ");
            uint64_t v354 = *(void *)(v284 + 120);
            int v355 = *(char *)(v354 + 23);
            if (v355 >= 0) {
              v356 = *(const std::string::value_type **)(v284 + 120);
            }
            else {
              v356 = *(const std::string::value_type **)v354;
            }
            if (v355 >= 0) {
              std::string::size_type v357 = *(unsigned __int8 *)(v354 + 23);
            }
            else {
              std::string::size_type v357 = *(void *)(v354 + 8);
            }
            v358 = std::string::append(&v874, v356, v357);
            std::string v875 = *v358;
            v358->__r_.__value_.__l.__size_ = 0;
            v358->__r_.__value_.__r.__words[2] = 0;
            v358->__r_.__value_.__r.__words[0] = 0;
            uint64_t v359 = *(void *)(v284 + 8);
            if (v359)
            {
              v360 = (unsigned __int8 *)(v359 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v358);
              v360 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
            int v361 = siri::intelligence::GetLineNumFromUnknownField(v360, (uint64_t)&__s1, -1);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_CONDITION, (long long *)&v875, v361);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
        }
      }
      else if (*(unsigned char *)(v350 + 23))
      {
        goto LABEL_860;
      }
      int v362 = *(_DWORD *)(v284 + 16);
      if (*(int *)(v284 + 32) >= 1 && (v362 & 0x400) != 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v363 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v363 = __p.__r_.__value_.__l.__size_;
        }
        v364 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v363 + 38);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v365 = &v875;
        }
        else {
          v365 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v363)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v366 = &__p;
          }
          else {
            v366 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v364 = (google::protobuf::internal *)memmove(v365, v366, v363);
        }
        strcpy((char *)v365 + v363, "contains both nextIds and inputGroupId");
        uint64_t v367 = *(void *)(v284 + 8);
        if (v367)
        {
          v368 = (unsigned __int8 *)(v367 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v364);
          v368 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v369 = siri::intelligence::GetLineNumFromUnknownField(v368, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&v875, v369);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v362 = *(_DWORD *)(v284 + 16);
      }
      if ((v362 & 0x80) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v370 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v370 = __p.__r_.__value_.__l.__size_;
        }
        v371 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v370 + 23);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v372 = &v875;
        }
        else {
          v372 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v370)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v373 = &__p;
          }
          else {
            v373 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v371 = (google::protobuf::internal *)memmove(v372, v373, v370);
        }
        strcpy((char *)v372 + v370, "does not define a refId");
        uint64_t v374 = *(void *)(v284 + 8);
        if (v374)
        {
          v375 = (unsigned __int8 *)(v374 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v371);
          v375 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v376 = siri::intelligence::GetLineNumFromUnknownField(v375, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v376);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)this + 104) >= 1)
  {
    for (int k = 0; k < *((_DWORD *)this + 104); ++k)
    {
      uint64_t v378 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_ResponseGroup>::TypeHandler>((uint64_t)this + 408, k);
      std::string::basic_string[abi:ne180100]<0>(&__p, "response group ");
      int v379 = *(_DWORD *)(v378 + 16);
      if (v379)
      {
        std::operator+<char>();
        v380 = std::string::append(&v874, "' ");
        long long v381 = *(_OWORD *)&v380->__r_.__value_.__l.__data_;
        v875.__r_.__value_.__r.__words[2] = v380->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v381;
        v380->__r_.__value_.__l.__size_ = 0;
        v380->__r_.__value_.__r.__words[2] = 0;
        v380->__r_.__value_.__r.__words[0] = 0;
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v382 = &v875;
        }
        else {
          v382 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v383 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v383 = v875.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v382, v383);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v379 = *(_DWORD *)(v378 + 16);
      }
      if ((v379 & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v384 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v384 = __p.__r_.__value_.__l.__size_;
        }
        v385 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v384 + 21);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v386 = &v875;
        }
        else {
          v386 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v384)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v387 = &__p;
          }
          else {
            v387 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v385 = (google::protobuf::internal *)memmove(v386, v387, v384);
        }
        strcpy((char *)v386 + v384, "does not define an id");
        uint64_t v388 = *(void *)(v378 + 8);
        if (v388)
        {
          v389 = (unsigned __int8 *)(v388 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v385);
          v389 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v390 = siri::intelligence::GetLineNumFromUnknownField(v389, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&v875, v390);
        goto LABEL_1032;
      }
      if ((siri::intelligence::IsValidId(*(void *)(v378 + 48)) & 1) == 0)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v391 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v391 = __p.__r_.__value_.__l.__size_;
        }
        v392 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v391 + 32);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v393 = &v875;
        }
        else {
          v393 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v391)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v394 = &__p;
          }
          else {
            v394 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v392 = (google::protobuf::internal *)memmove(v393, v394, v391);
        }
        strcpy((char *)v393 + v391, "has invalid characters in the ID");
        uint64_t v395 = *(void *)(v378 + 8);
        if (v395)
        {
          v396 = (unsigned __int8 *)(v395 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v392);
          v396 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "id");
        int v397 = siri::intelligence::GetLineNumFromUnknownField(v396, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v875, v397);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      v398 = *(const void ***)(v378 + 48);
      if (*(_DWORD *)(v378 + 32) == 1)
      {
        v399 = *(unsigned __int8 **)(*(void *)(v378 + 40) + 8);
        uint64_t v400 = v399[23];
        v401 = (unsigned __int8 *)v398[1];
        int v402 = *((char *)v398 + 23);
        if ((v400 & 0x80u) == 0) {
          v403 = (unsigned __int8 *)v399[23];
        }
        else {
          v403 = (unsigned __int8 *)*((void *)v399 + 1);
        }
        if (v402 >= 0) {
          v401 = (unsigned __int8 *)*((unsigned __int8 *)v398 + 23);
        }
        if (v403 == v401)
        {
          if (v402 >= 0) {
            v404 = *(unsigned __int8 **)(v378 + 48);
          }
          else {
            v404 = (unsigned __int8 *)*v398;
          }
          if ((v400 & 0x80) == 0)
          {
            if (v399[23])
            {
              while (*v399 == *v404)
              {
                ++v399;
                ++v404;
                if (!--v400) {
                  goto LABEL_999;
                }
              }
              goto LABEL_1017;
            }
LABEL_999:
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v405 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v405 = __p.__r_.__value_.__l.__size_;
            }
            v406 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v405 + 42);
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v407 = &v875;
            }
            else {
              v407 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            if (v405)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v408 = &__p;
              }
              else {
                v408 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              v406 = (google::protobuf::internal *)memmove(v407, v408, v405);
            }
            strcpy((char *)v407 + v405, "has a single next id that refers to itself");
            uint64_t v409 = *(void *)(v378 + 8);
            if (v409)
            {
              v410 = (unsigned __int8 *)(v409 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v406);
              v410 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v874, "nextIds");
            int v411 = siri::intelligence::GetLineNumFromUnknownField(v410, (uint64_t)&v874, 0);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INFINITE_LOOP, (long long *)&v875, v411);
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            v398 = *(const void ***)(v378 + 48);
            goto LABEL_1017;
          }
          if (!memcmp(*(const void **)v399, v404, *((void *)v399 + 1))) {
            goto LABEL_999;
          }
        }
      }
LABEL_1017:
      if ((const protobuf::Intelligence *)((char *)a2 + 248) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 240, v398))goto LABEL_1036; {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      }
        size_t v412 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else {
        size_t v412 = __p.__r_.__value_.__l.__size_;
      }
      v413 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v412 + 12);
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v414 = &v875;
      }
      else {
        v414 = (std::string *)v875.__r_.__value_.__r.__words[0];
      }
      if (v412)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v415 = &__p;
        }
        else {
          v415 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        v413 = (google::protobuf::internal *)memmove(v414, v415, v412);
      }
      strcpy((char *)v414 + v412, "is not used.");
      uint64_t v416 = *(void *)(v378 + 8);
      if (v416)
      {
        v417 = (unsigned __int8 *)(v416 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v413);
        v417 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v418 = siri::intelligence::GetLineNumFromUnknownField(v417, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&v875, v418);
LABEL_1032:
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
LABEL_1036:
      if (*(int *)(v378 + 32) >= 1)
      {
        int v419 = 0;
        do
        {
          v420 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v378 + 24, v419);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v420))
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              size_t v421 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              size_t v421 = __p.__r_.__value_.__l.__size_;
            }
            std::string::basic_string[abi:ne180100]((uint64_t)&v874, v421 + 29);
            if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v422 = &v874;
            }
            else {
              v422 = (std::string *)v874.__r_.__value_.__r.__words[0];
            }
            if (v421)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v423 = &__p;
              }
              else {
                v423 = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              memmove(v422, v423, v421);
            }
            strcpy((char *)v422 + v421, "refers to undefined next id: ");
            uint64_t v424 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v378 + 24, v419);
            int v425 = *(char *)(v424 + 23);
            if (v425 >= 0) {
              v426 = (const std::string::value_type *)v424;
            }
            else {
              v426 = *(const std::string::value_type **)v424;
            }
            if (v425 >= 0) {
              std::string::size_type v427 = *(unsigned __int8 *)(v424 + 23);
            }
            else {
              std::string::size_type v427 = *(void *)(v424 + 8);
            }
            v428 = std::string::append(&v874, v426, v427);
            std::string v875 = *v428;
            v428->__r_.__value_.__l.__size_ = 0;
            v428->__r_.__value_.__r.__words[2] = 0;
            v428->__r_.__value_.__r.__words[0] = 0;
            uint64_t v429 = *(void *)(v378 + 8);
            if (v429)
            {
              v430 = (unsigned __int8 *)(v429 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v428);
              v430 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&__s1, "nextIds");
            int v431 = siri::intelligence::GetLineNumFromUnknownField(v430, (uint64_t)&__s1, v419);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v431);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__s1.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
          }
          ++v419;
        }
        while (v419 < *(_DWORD *)(v378 + 32));
      }
      uint64_t v432 = *(void *)(v378 + 112);
      if (*(char *)(v432 + 23) < 0)
      {
        if (!*(void *)(v432 + 8)) {
          goto LABEL_1097;
        }
      }
      else if (!*(unsigned char *)(v432 + 23))
      {
        goto LABEL_1097;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, (const void **)v432))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v433 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v433 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v433 + 33);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v434 = &v874;
        }
        else {
          v434 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v433)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v435 = &__p;
          }
          else {
            v435 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v434, v435, v433);
        }
        strcpy((char *)v434 + v433, "refers to undefined input group: ");
        uint64_t v436 = *(void *)(v378 + 112);
        int v437 = *(char *)(v436 + 23);
        if (v437 >= 0) {
          v438 = *(const std::string::value_type **)(v378 + 112);
        }
        else {
          v438 = *(const std::string::value_type **)v436;
        }
        if (v437 >= 0) {
          std::string::size_type v439 = *(unsigned __int8 *)(v436 + 23);
        }
        else {
          std::string::size_type v439 = *(void *)(v436 + 8);
        }
        v440 = std::string::append(&v874, v438, v439);
        std::string v875 = *v440;
        v440->__r_.__value_.__l.__size_ = 0;
        v440->__r_.__value_.__r.__words[2] = 0;
        v440->__r_.__value_.__r.__words[0] = 0;
        uint64_t v441 = *(void *)(v378 + 8);
        if (v441)
        {
          v442 = (unsigned __int8 *)(v441 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v440);
          v442 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "inputGroupId");
        int v443 = siri::intelligence::GetLineNumFromUnknownField(v442, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INPUT, (long long *)&v875, v443);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_1097:
      uint64_t v444 = *(void *)(v378 + 104);
      if (*(char *)(v444 + 23) < 0)
      {
        if (!*(void *)(v444 + 8)) {
          goto LABEL_1127;
        }
      }
      else if (!*(unsigned char *)(v444 + 23))
      {
        goto LABEL_1127;
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 176) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 168, (const void **)v444))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v445 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v445 = __p.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v874, v445 + 31);
        if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v446 = &v874;
        }
        else {
          v446 = (std::string *)v874.__r_.__value_.__r.__words[0];
        }
        if (v445)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v447 = &__p;
          }
          else {
            v447 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          memmove(v446, v447, v445);
        }
        strcpy((char *)v446 + v445, "refers to undefined condition: ");
        uint64_t v448 = *(void *)(v378 + 104);
        int v449 = *(char *)(v448 + 23);
        if (v449 >= 0) {
          v450 = *(const std::string::value_type **)(v378 + 104);
        }
        else {
          v450 = *(const std::string::value_type **)v448;
        }
        if (v449 >= 0) {
          std::string::size_type v451 = *(unsigned __int8 *)(v448 + 23);
        }
        else {
          std::string::size_type v451 = *(void *)(v448 + 8);
        }
        v452 = std::string::append(&v874, v450, v451);
        std::string v875 = *v452;
        v452->__r_.__value_.__l.__size_ = 0;
        v452->__r_.__value_.__r.__words[2] = 0;
        v452->__r_.__value_.__r.__words[0] = 0;
        uint64_t v453 = *(void *)(v378 + 8);
        if (v453)
        {
          v454 = (unsigned __int8 *)(v453 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v452);
          v454 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__s1, "conditionId");
        int v455 = siri::intelligence::GetLineNumFromUnknownField(v454, (uint64_t)&__s1, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_CONDITION, (long long *)&v875, v455);
        if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__s1.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
      }
LABEL_1127:
      int v456 = *(_DWORD *)(v378 + 32);
      if (v456 < 1) {
        goto LABEL_1147;
      }
      if (*(unsigned char *)(v378 + 17))
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v457 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v457 = __p.__r_.__value_.__l.__size_;
        }
        v458 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v457 + 38);
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v459 = &v875;
        }
        else {
          v459 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if (v457)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v460 = &__p;
          }
          else {
            v460 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          v458 = (google::protobuf::internal *)memmove(v459, v460, v457);
        }
        strcpy((char *)v459 + v457, "contains both nextIds and inputGroupId");
        uint64_t v461 = *(void *)(v378 + 8);
        if (v461)
        {
          v462 = (unsigned __int8 *)(v461 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v458);
          v462 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v463 = siri::intelligence::GetLineNumFromUnknownField(v462, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&v875, v463);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v456 = *(_DWORD *)(v378 + 32);
LABEL_1147:
        if (!v456 && (*(unsigned char *)(v378 + 17) & 1) == 0)
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v464 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v464 = __p.__r_.__value_.__l.__size_;
          }
          v465 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v464 + 51);
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v466 = &v875;
          }
          else {
            v466 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          if (v464)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v467 = &__p;
            }
            else {
              v467 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            v465 = (google::protobuf::internal *)memmove(v466, v467, v464);
          }
          strcpy((char *)v466 + v464, "has not effect: no nextIds and inputGroupId defined");
          uint64_t v468 = *(void *)(v378 + 8);
          if (v468)
          {
            v469 = (unsigned __int8 *)(v468 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults(v465);
            v469 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&v874, "");
          int v470 = siri::intelligence::GetLineNumFromUnknownField(v469, (uint64_t)&v874, -1);
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_EFFECT, (long long *)&v875, v470);
          if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v874.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v875.__r_.__value_.__l.__data_);
          }
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)this + 110) >= 1)
  {
    int v471 = 0;
    v472 = (char *)a2 + 72;
    v473 = (char *)a2 + 80;
    while (1)
    {
      int v851 = v471;
      uint64_t v474 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup>::TypeHandler>((uint64_t)this + 432, v471);
      std::string::basic_string[abi:ne180100]<0>(&v871, "input group ");
      uint64_t v854 = v474;
      int v475 = *(_DWORD *)(v474 + 16);
      if (v475)
      {
        std::operator+<char>();
        v476 = std::string::append(&v875, "' ");
        long long v477 = *(_OWORD *)&v476->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v476->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v477;
        v476->__r_.__value_.__l.__size_ = 0;
        v476->__r_.__value_.__r.__words[2] = 0;
        v476->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v478 = &__p;
        }
        else {
          v478 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v479 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v479 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v871, (const std::string::value_type *)v478, v479);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        int v475 = *(_DWORD *)(v474 + 16);
      }
      if ((v475 & 1) == 0) {
        break;
      }
      if ((siri::intelligence::IsValidId(*(void *)(v474 + 144)) & 1) == 0)
      {
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v487 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v487 = v871.__r_.__value_.__l.__size_;
        }
        v488 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v487 + 32);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v489 = &__p;
        }
        else {
          v489 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v487)
        {
          if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v490 = &v871;
          }
          else {
            v490 = (std::string *)v871.__r_.__value_.__r.__words[0];
          }
          v488 = (google::protobuf::internal *)memmove(v489, v490, v487);
        }
        strcpy((char *)v489 + v487, "has invalid characters in the ID");
        uint64_t v491 = *(void *)(v854 + 8);
        if (v491)
        {
          v492 = (unsigned __int8 *)(v491 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v488);
          v492 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v875, "id");
        int v493 = siri::intelligence::GetLineNumFromUnknownField(v492, (uint64_t)&v875, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&__p, v493);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      if ((const protobuf::Intelligence *)((char *)a2 + 224) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 216, *(const void ***)(v854 + 144))&& !*(unsigned char *)(v854 + 169))
      {
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v494 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v494 = v871.__r_.__value_.__l.__size_;
        }
        v495 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v494 + 74);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v496 = &__p;
        }
        else {
          v496 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v494)
        {
          if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v497 = &v871;
          }
          else {
            v497 = (std::string *)v871.__r_.__value_.__r.__words[0];
          }
          v495 = (google::protobuf::internal *)memmove(v496, v497, v494);
        }
        strcpy((char *)v496 + v494, "is not referenced. Did you mean to set 'toplevel: true' to make it global?");
        uint64_t v498 = *(void *)(v854 + 8);
        if (v498)
        {
          v499 = (unsigned __int8 *)(v498 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v495);
          v499 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v875, "");
        int v500 = siri::intelligence::GetLineNumFromUnknownField(v499, (uint64_t)&v875, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&__p, v500);
        goto LABEL_1241;
      }
LABEL_1245:
      if (*(int *)(v854 + 32) >= 1
        && !siri::intelligence::Utils::VersionLessThan((unsigned __int8 *)a2, (unsigned __int8 *)siri::intelligence::sIntentRenameChange))
      {
        v501 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]<0>(&v875, "Deprecated 'intents' field found in flow file: use 'events' instead.");
        if (*(int *)(v854 + 32) <= 0)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1539);
          v502 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: (index) < (current_size_): ");
          google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v502->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        }
        uint64_t v503 = *(void *)(*(void *)(*(void *)(v854 + 40) + 8) + 8);
        if (v503)
        {
          v504 = (unsigned __int8 *)(v503 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v501);
          v504 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        int v505 = siri::intelligence::GetLineNumFromUnknownField(v504, (uint64_t)&__p, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_DEPRECATED, (long long *)&v875, v505);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v506 = *(void *)(v854 + 112);
      if (v506) {
        v507 = (uint64_t *)(v506 + 8);
      }
      else {
        v507 = 0;
      }
      uint64_t v508 = *(int *)(v854 + 104);
      if (v508)
      {
        uint64_t v509 = 8 * v508;
        do
        {
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&v871, *v507++, (uint64_t)a2, a3);
          v509 -= 8;
        }
        while (v509);
      }
      if (*(int *)(v854 + 128) >= 1)
      {
        for (int m = 0; m < *(_DWORD *)(v854 + 128); ++m)
        {
          uint64_t v511 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Event>::TypeHandler>(v854 + 120, m);
          std::string::basic_string[abi:ne180100]<0>(&__p, "input group event ");
          if (*(unsigned char *)(v511 + 16))
          {
            std::operator+<char>();
            v512 = std::string::append(&v874, "' ");
            long long v513 = *(_OWORD *)&v512->__r_.__value_.__l.__data_;
            v875.__r_.__value_.__r.__words[2] = v512->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v513;
            v512->__r_.__value_.__l.__size_ = 0;
            v512->__r_.__value_.__r.__words[2] = 0;
            v512->__r_.__value_.__r.__words[0] = 0;
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v514 = &v875;
            }
            else {
              v514 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v515 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v515 = v875.__r_.__value_.__l.__size_;
            }
            std::string::append(&__p, (const std::string::value_type *)v514, v515);
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if ((*(unsigned char *)(v511 + 16) & 1) != 0 && (siri::intelligence::IsValidId(*(void *)(v511 + 48)) & 1) == 0)
            {
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v516 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v516 = __p.__r_.__value_.__l.__size_;
              }
              v517 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&v875, v516 + 32);
              if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v518 = &v875;
              }
              else {
                v518 = (std::string *)v875.__r_.__value_.__r.__words[0];
              }
              if (v516)
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v519 = &__p;
                }
                else {
                  v519 = (std::string *)__p.__r_.__value_.__r.__words[0];
                }
                v517 = (google::protobuf::internal *)memmove(v518, v519, v516);
              }
              strcpy((char *)v518 + v516, "has invalid characters in the ID");
              uint64_t v520 = *(void *)(v511 + 8);
              if (v520)
              {
                v521 = (unsigned __int8 *)(v520 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                google::protobuf::internal::InitProtobufDefaults(v517);
                v521 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
              }
              std::string::basic_string[abi:ne180100]<0>(&v874, "id");
              int v522 = siri::intelligence::GetLineNumFromUnknownField(v521, (uint64_t)&v874, -1);
              siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&v875, v522);
              if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v874.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v875.__r_.__value_.__l.__data_);
              }
            }
          }
          uint64_t v523 = *(void *)(v511 + 64);
          if (*(char *)(v523 + 23) < 0)
          {
            if (*(void *)(v523 + 8))
            {
LABEL_1297:
              if ((const protobuf::Intelligence *)((char *)a2 + 152) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 144, (const void **)v523))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v524 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v524 = __p.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v874, v524 + 27);
                if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v525 = &v874;
                }
                else {
                  v525 = (std::string *)v874.__r_.__value_.__r.__words[0];
                }
                if (v524)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v526 = &__p;
                  }
                  else {
                    v526 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  memmove(v525, v526, v524);
                }
                strcpy((char *)v525 + v524, "refers to undefined event: ");
                uint64_t v527 = *(void *)(v511 + 64);
                int v528 = *(char *)(v527 + 23);
                if (v528 >= 0) {
                  v529 = *(const std::string::value_type **)(v511 + 64);
                }
                else {
                  v529 = *(const std::string::value_type **)v527;
                }
                if (v528 >= 0) {
                  std::string::size_type v530 = *(unsigned __int8 *)(v527 + 23);
                }
                else {
                  std::string::size_type v530 = *(void *)(v527 + 8);
                }
                v531 = std::string::append(&v874, v529, v530);
                std::string v875 = *v531;
                v531->__r_.__value_.__l.__size_ = 0;
                v531->__r_.__value_.__r.__words[2] = 0;
                v531->__r_.__value_.__r.__words[0] = 0;
                uint64_t v532 = *(void *)(v511 + 8);
                if (v532)
                {
                  v533 = (unsigned __int8 *)(v532 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v531);
                  v533 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&__s1, "eventId");
                int v534 = siri::intelligence::GetLineNumFromUnknownField(v533, (uint64_t)&__s1, -1);
                siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INTENT, (long long *)&v875, v534);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v875.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v874.__r_.__value_.__l.__data_);
                }
              }
              if (!*(_DWORD *)(v511 + 32))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v535 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v535 = __p.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v874, v535 + 48);
                if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v536 = &v874;
                }
                else {
                  v536 = (std::string *)v874.__r_.__value_.__r.__words[0];
                }
                if (v535)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v537 = &__p;
                  }
                  else {
                    v537 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  memmove(v536, v537, v535);
                }
                strcpy((char *)v536 + v535, "defines no responses to be triggered for event: ");
                uint64_t v538 = *(void *)(v511 + 64);
                int v539 = *(char *)(v538 + 23);
                if (v539 >= 0) {
                  v540 = *(const std::string::value_type **)(v511 + 64);
                }
                else {
                  v540 = *(const std::string::value_type **)v538;
                }
                if (v539 >= 0) {
                  std::string::size_type v541 = *(unsigned __int8 *)(v538 + 23);
                }
                else {
                  std::string::size_type v541 = *(void *)(v538 + 8);
                }
                v542 = std::string::append(&v874, v540, v541);
                std::string v875 = *v542;
                v542->__r_.__value_.__l.__size_ = 0;
                v542->__r_.__value_.__r.__words[2] = 0;
                v542->__r_.__value_.__r.__words[0] = 0;
                uint64_t v543 = *(void *)(v511 + 8);
                if (v543)
                {
                  v544 = (unsigned __int8 *)(v543 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v542);
                  v544 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&__s1, "eventId");
                int v545 = siri::intelligence::GetLineNumFromUnknownField(v544, (uint64_t)&__s1, -1);
                siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_NO_RESPONSE_ID, (long long *)&v875, v545);
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v875.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v874.__r_.__value_.__l.__data_);
                }
              }
            }
          }
          else if (*(unsigned char *)(v523 + 23))
          {
            goto LABEL_1297;
          }
          if (*(int *)(v511 + 32) >= 1)
          {
            int v546 = 0;
            do
            {
              uint64_t v547 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v511 + 24, v546);
              if (*(char *)(v547 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v875, *(const std::string::value_type **)v547, *(void *)(v547 + 8));
              }
              else
              {
                long long v548 = *(_OWORD *)v547;
                v875.__r_.__value_.__r.__words[2] = *(void *)(v547 + 16);
                *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v548;
              }
              if (v473 == (char *)std::__tree<std::string>::find<std::string>((uint64_t)v472, (const void **)&v875.__r_.__value_.__l.__data_))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v549 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v549 = __p.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v549 + 33);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_s1 = &__s1;
                }
                else {
                  p_s1 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                }
                if (v549)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v551 = &__p;
                  }
                  else {
                    v551 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  memmove(p_s1, v551, v549);
                }
                strcpy((char *)p_s1 + v549, "refers to undefined response id: ");
                if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v552 = &v875;
                }
                else {
                  v552 = (std::string *)v875.__r_.__value_.__r.__words[0];
                }
                if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v553 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v553 = v875.__r_.__value_.__l.__size_;
                }
                v554 = std::string::append(&__s1, (const std::string::value_type *)v552, v553);
                std::string v874 = *v554;
                v554->__r_.__value_.__l.__size_ = 0;
                v554->__r_.__value_.__r.__words[2] = 0;
                v554->__r_.__value_.__r.__words[0] = 0;
                uint64_t v555 = *(void *)(v511 + 8);
                if (v555)
                {
                  v556 = (unsigned __int8 *)(v555 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v554);
                  v556 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&v872, "responseIds");
                int v557 = siri::intelligence::GetLineNumFromUnknownField(v556, (uint64_t)&v872, v546);
                siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v874, v557);
                if (SHIBYTE(v872.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v872.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v874.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v875.__r_.__value_.__l.__data_);
              }
              ++v546;
            }
            while (v546 < *(_DWORD *)(v511 + 32));
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
      }
      if (*(int *)(v854 + 56) >= 1)
      {
        int v558 = 0;
        do
        {
          uint64_t v559 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_InputGroup_Fallback>::TypeHandler>(v854 + 48, v558);
          std::string::basic_string[abi:ne180100]<0>(&__p, "input group fallback ");
          if (*(int *)(v559 + 56) >= 1)
          {
            int v560 = 0;
            do
            {
              uint64_t v561 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v559 + 48, v560);
              if (*(char *)(v561 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v875, *(const std::string::value_type **)v561, *(void *)(v561 + 8));
              }
              else
              {
                long long v562 = *(_OWORD *)v561;
                v875.__r_.__value_.__r.__words[2] = *(void *)(v561 + 16);
                *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v562;
              }
              if (v473 == (char *)std::__tree<std::string>::find<std::string>((uint64_t)v472, (const void **)&v875.__r_.__value_.__l.__data_))
              {
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v563 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v563 = __p.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v563 + 33);
                if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v564 = &__s1;
                }
                else {
                  v564 = (std::string *)__s1.__r_.__value_.__r.__words[0];
                }
                if (v563)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    v565 = &__p;
                  }
                  else {
                    v565 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  memmove(v564, v565, v563);
                }
                strcpy((char *)v564 + v563, "refers to undefined response id: ");
                if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v566 = &v875;
                }
                else {
                  v566 = (std::string *)v875.__r_.__value_.__r.__words[0];
                }
                if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v567 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v567 = v875.__r_.__value_.__l.__size_;
                }
                v568 = std::string::append(&__s1, (const std::string::value_type *)v566, v567);
                std::string v874 = *v568;
                v568->__r_.__value_.__l.__size_ = 0;
                v568->__r_.__value_.__r.__words[2] = 0;
                v568->__r_.__value_.__r.__words[0] = 0;
                uint64_t v569 = *(void *)(v559 + 8);
                if (v569)
                {
                  v570 = (unsigned __int8 *)(v569 & 0xFFFFFFFFFFFFFFFELL);
                }
                else
                {
                  google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v568);
                  v570 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                }
                std::string::basic_string[abi:ne180100]<0>(&v872, "responseIds");
                int v571 = siri::intelligence::GetLineNumFromUnknownField(v570, (uint64_t)&v872, v560);
                siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v874, v571);
                if (SHIBYTE(v872.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v872.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v874.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v875.__r_.__value_.__l.__data_);
              }
              ++v560;
            }
            while (v560 < *(_DWORD *)(v559 + 56));
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          ++v558;
        }
        while (v558 < *(_DWORD *)(v854 + 56));
      }
      if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v871.__r_.__value_.__l.__data_);
      }
      int v471 = v851 + 1;
      if (v851 + 1 >= *((_DWORD *)this + 110)) {
        goto LABEL_1441;
      }
    }
    if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v480 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v480 = v871.__r_.__value_.__l.__size_;
    }
    v481 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v480 + 21);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v482 = &__p;
    }
    else {
      v482 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if (v480)
    {
      if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v483 = &v871;
      }
      else {
        v483 = (std::string *)v871.__r_.__value_.__r.__words[0];
      }
      v481 = (google::protobuf::internal *)memmove(v482, v483, v480);
    }
    strcpy((char *)v482 + v480, "does not define an id");
    uint64_t v484 = *(void *)(v854 + 8);
    if (v484)
    {
      v485 = (unsigned __int8 *)(v484 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v481);
      v485 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&v875, "");
    int v486 = siri::intelligence::GetLineNumFromUnknownField(v485, (uint64_t)&v875, -1);
    siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&__p, v486);
LABEL_1241:
    if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v875.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    goto LABEL_1245;
  }
LABEL_1441:
  if (*((int *)this + 128) < 1) {
    goto LABEL_1730;
  }
  int v572 = 0;
  do
  {
    uint64_t v573 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Event>::TypeHandler>((uint64_t)this + 504, v572);
    std::string::basic_string[abi:ne180100]<0>(&v875, "event ");
    int v574 = *(_DWORD *)(v573 + 16);
    if (v574)
    {
      std::operator+<char>();
      v579 = std::string::append(&v874, "' ");
      long long v580 = *(_OWORD *)&v579->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v579->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v580;
      v579->__r_.__value_.__l.__size_ = 0;
      v579->__r_.__value_.__r.__words[2] = 0;
      v579->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v577 = &__p;
      }
      else {
        v577 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v578 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v578 = __p.__r_.__value_.__l.__size_;
      }
    }
    else
    {
      if ((v574 & 2) == 0) {
        goto LABEL_1461;
      }
      std::operator+<char>();
      v575 = std::string::append(&v874, "' ");
      long long v576 = *(_OWORD *)&v575->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v575->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v576;
      v575->__r_.__value_.__l.__size_ = 0;
      v575->__r_.__value_.__r.__words[2] = 0;
      v575->__r_.__value_.__r.__words[0] = 0;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v577 = &__p;
      }
      else {
        v577 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v578 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v578 = __p.__r_.__value_.__l.__size_;
      }
    }
    std::string::append(&v875, (const std::string::value_type *)v577, v578);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v874.__r_.__value_.__l.__data_);
    }
LABEL_1461:
    if ((*(unsigned char *)(v573 + 16) & 1) == 0)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v581 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v581 = v875.__r_.__value_.__l.__size_;
      }
      v582 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v581 + 21);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v583 = &__p;
      }
      else {
        v583 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v581)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v584 = &v875;
        }
        else {
          v584 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v582 = (google::protobuf::internal *)memmove(v583, v584, v581);
      }
      strcpy((char *)v583 + v581, "does not define an id");
      uint64_t v585 = *(void *)(v573 + 8);
      if (v585)
      {
        v586 = (unsigned __int8 *)(v585 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v582);
        v586 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v587 = siri::intelligence::GetLineNumFromUnknownField(v586, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&__p, v587);
LABEL_1491:
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_1495;
    }
    if ((siri::intelligence::IsValidId(*(void *)(v573 + 120)) & 1) == 0)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v588 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v588 = v875.__r_.__value_.__l.__size_;
      }
      v589 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v588 + 32);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v590 = &__p;
      }
      else {
        v590 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v588)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v591 = &v875;
        }
        else {
          v591 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v589 = (google::protobuf::internal *)memmove(v590, v591, v588);
      }
      strcpy((char *)v590 + v588, "has invalid characters in the ID");
      uint64_t v592 = *(void *)(v573 + 8);
      if (v592)
      {
        v593 = (unsigned __int8 *)(v592 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v589);
        v593 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "id");
      int v594 = siri::intelligence::GetLineNumFromUnknownField(v593, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&__p, v594);
      goto LABEL_1491;
    }
LABEL_1495:
    int v595 = *(_DWORD *)(v573 + 16);
    if ((v595 & 0xC) == 8)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v596 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v596 = v875.__r_.__value_.__l.__size_;
      }
      v597 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v596 + 54);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v598 = &__p;
      }
      else {
        v598 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v596)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v599 = &v875;
        }
        else {
          v599 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v597 = (google::protobuf::internal *)memmove(v598, v599, v596);
      }
      strcpy((char *)v598 + v596, "defines a CATI intent GUID but not a CATI intent name.");
      uint64_t v600 = *(void *)(v573 + 8);
      if (v600)
      {
        v601 = (unsigned __int8 *)(v600 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v597);
        v601 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v602 = siri::intelligence::GetLineNumFromUnknownField(v601, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_NO_CATI_NAME, (long long *)&__p, v602);
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v595 = *(_DWORD *)(v573 + 16);
    }
    if ((v595 & 0x14) == 0x10)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v603 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v603 = v875.__r_.__value_.__l.__size_;
      }
      v604 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v603 + 51);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v605 = &__p;
      }
      else {
        v605 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v603)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v606 = &v875;
        }
        else {
          v606 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v604 = (google::protobuf::internal *)memmove(v605, v606, v603);
      }
      strcpy((char *)v605 + v603, "defines a CATI ensemble but not a CATI intent name.");
      uint64_t v607 = *(void *)(v573 + 8);
      if (v607)
      {
        v608 = (unsigned __int8 *)(v607 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v604);
        v608 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v609 = siri::intelligence::GetLineNumFromUnknownField(v608, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_NO_CATI_NAME, (long long *)&__p, v609);
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v595 = *(_DWORD *)(v573 + 16);
    }
    if ((v595 & 0x1C) == 4)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v610 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v610 = v875.__r_.__value_.__l.__size_;
      }
      v611 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v610 + 59);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v612 = &__p;
      }
      else {
        v612 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v610)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v613 = &v875;
        }
        else {
          v613 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v611 = (google::protobuf::internal *)memmove(v612, v613, v610);
      }
      strcpy((char *)v612 + v610, "defines a CATI intent name but not a CATI ensemble or GUID.");
      uint64_t v614 = *(void *)(v573 + 8);
      if (v614)
      {
        v615 = (unsigned __int8 *)(v614 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v611);
        v615 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v616 = siri::intelligence::GetLineNumFromUnknownField(v615, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_NO_CATI_GUID, (long long *)&__p, v616);
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      int v595 = *(_DWORD *)(v573 + 16);
    }
    if ((v595 & 8) != 0 && (v595 & 0x20) != 0)
    {
      if (!*(void *)(v573 + 160))
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18904);
        v617 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || nl_producer_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v617->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
      }
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v618 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v618 = v875.__r_.__value_.__l.__size_;
      }
      v619 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v618 + 88);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v620 = &__p;
      }
      else {
        v620 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if (v618)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v621 = &v875;
        }
        else {
          v621 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        v619 = (google::protobuf::internal *)memmove(v620, v621, v618);
      }
      strcpy((char *)v620 + v618, "defines a CATI intent GUID and a custom producer. The CATI GUID definition will be used.");
      uint64_t v622 = *(void *)(v573 + 8);
      if (v622)
      {
        v623 = (unsigned __int8 *)(v622 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults(v619);
        v623 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(&v874, "");
      int v624 = siri::intelligence::GetLineNumFromUnknownField(v623, (uint64_t)&v874, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_DUPE_PRODUCER, (long long *)&__p, v624);
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v625 = *(void *)(v573 + 40);
    if (v625) {
      uint64_t v626 = v625 + 8;
    }
    else {
      uint64_t v626 = 0;
    }
    uint64_t v627 = *(int *)(v573 + 32);
    if (v627)
    {
      uint64_t v628 = v626 + 8 * v627;
      do
      {
        uint64_t v629 = *(void *)(*(void *)v626 + 40);
        if (v629) {
          v630 = (uint64_t *)(v629 + 8);
        }
        else {
          v630 = 0;
        }
        uint64_t v631 = *(int *)(*(void *)v626 + 32);
        if (v631)
        {
          uint64_t v632 = 8 * v631;
          do
          {
            siri::intelligence::ValidateKeyValueParameter((uint64_t)&v875, *v630++, (uint64_t)a2, a3);
            v632 -= 8;
          }
          while (v632);
        }
        v626 += 8;
      }
      while (v626 != v628);
    }
    if ((*(_DWORD *)(v573 + 16) & 0x20) != 0)
    {
      v633 = *(int **)(v573 + 160);
      if (!v633)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 18904);
        v634 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || nl_producer_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v634->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        v633 = *(int **)(v573 + 160);
      }
      if (!v633) {
        v633 = (int *)&protobuf::_Intelligence_NLParameters_default_instance_;
      }
      uint64_t v635 = *((void *)v633 + 5);
      if (v635) {
        v636 = (uint64_t *)(v635 + 8);
      }
      else {
        v636 = 0;
      }
      uint64_t v637 = v633[8];
      if (v637)
      {
        uint64_t v638 = 8 * v637;
        do
        {
          siri::intelligence::ValidateKeyValueParameter((uint64_t)&v875, *v636++, (uint64_t)a2, a3);
          v638 -= 8;
        }
        while (v638);
      }
    }
    uint64_t v639 = *(unsigned int *)(v573 + 104);
    if ((int)v639 < 1) {
      goto LABEL_1718;
    }
    int v855 = v572;
    memset(&__p, 0, sizeof(__p));
    uint64_t v640 = *(void *)(v573 + 112);
    if (v640) {
      v641 = (const std::string **)(v640 + 8);
    }
    else {
      v641 = 0;
    }
    uint64_t v642 = 8 * v639;
    do
    {
      v643 = *v641;
      siri::intelligence::Utterances::GetNormalizedText(*v641, (uint64_t)&v874);
      std::string::size_type v644 = HIBYTE(v874.__r_.__value_.__r.__words[2]);
      if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v644 = v874.__r_.__value_.__l.__size_;
      }
      if (v644)
      {
        if (!siri::intelligence::VectorContains((const std::string **)&__p, &v874)) {
          goto LABEL_1653;
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v645 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v645 = v875.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v871, v645 + 39);
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v646 = &v871;
        }
        else {
          v646 = (std::string *)v871.__r_.__value_.__r.__words[0];
        }
        if (v645)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v647 = &v875;
          }
          else {
            v647 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          memmove(v646, v647, v645);
        }
        strcpy((char *)v646 + v645, "has a duplicate normalized utterance: '");
        int v648 = SHIBYTE(v643->__r_.__value_.__r.__words[2]);
        if (v648 >= 0) {
          v649 = (const std::string::value_type *)v643;
        }
        else {
          v649 = (const std::string::value_type *)v643->__r_.__value_.__r.__words[0];
        }
        if (v648 >= 0) {
          std::string::size_type v650 = HIBYTE(v643->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v650 = v643->__r_.__value_.__l.__size_;
        }
        v651 = std::string::append(&v871, v649, v650);
        long long v652 = *(_OWORD *)&v651->__r_.__value_.__l.__data_;
        v872.__r_.__value_.__r.__words[2] = v651->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v872.__r_.__value_.__l.__data_ = v652;
        v651->__r_.__value_.__l.__size_ = 0;
        v651->__r_.__value_.__r.__words[2] = 0;
        v651->__r_.__value_.__r.__words[0] = 0;
        v653 = std::string::append(&v872, "'");
        std::string __s1 = *v653;
        v653->__r_.__value_.__l.__size_ = 0;
        v653->__r_.__value_.__r.__words[2] = 0;
        v653->__r_.__value_.__r.__words[0] = 0;
        uint64_t v654 = *(void *)(v573 + 8);
        if (v654)
        {
          v655 = (unsigned __int8 *)(v654 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v653);
          v655 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v869, "");
        int v656 = siri::intelligence::GetLineNumFromUnknownField(v655, (uint64_t)v869, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UTTER_DUPE, (long long *)&__s1, v656);
      }
      else
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v657 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v657 = v875.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v871, v657 + 50);
        if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v658 = &v871;
        }
        else {
          v658 = (std::string *)v871.__r_.__value_.__r.__words[0];
        }
        if (v657)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v659 = &v875;
          }
          else {
            v659 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          memmove(v658, v659, v657);
        }
        strcpy((char *)v658 + v657, "has an empty / ineffectual normalized utterance: '");
        int v660 = SHIBYTE(v643->__r_.__value_.__r.__words[2]);
        if (v660 >= 0) {
          v661 = (const std::string::value_type *)v643;
        }
        else {
          v661 = (const std::string::value_type *)v643->__r_.__value_.__r.__words[0];
        }
        if (v660 >= 0) {
          std::string::size_type v662 = HIBYTE(v643->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v662 = v643->__r_.__value_.__l.__size_;
        }
        v663 = std::string::append(&v871, v661, v662);
        long long v664 = *(_OWORD *)&v663->__r_.__value_.__l.__data_;
        v872.__r_.__value_.__r.__words[2] = v663->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v872.__r_.__value_.__l.__data_ = v664;
        v663->__r_.__value_.__l.__size_ = 0;
        v663->__r_.__value_.__r.__words[2] = 0;
        v663->__r_.__value_.__r.__words[0] = 0;
        v665 = std::string::append(&v872, "'");
        std::string __s1 = *v665;
        v665->__r_.__value_.__l.__size_ = 0;
        v665->__r_.__value_.__r.__words[2] = 0;
        v665->__r_.__value_.__r.__words[0] = 0;
        uint64_t v666 = *(void *)(v573 + 8);
        if (v666)
        {
          v667 = (unsigned __int8 *)(v666 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v665);
          v667 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(v869, "");
        int v668 = siri::intelligence::GetLineNumFromUnknownField(v667, (uint64_t)v869, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UTTER_EMPTY, (long long *)&__s1, v668);
      }
      if (v870 < 0) {
        operator delete(v869[0]);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v872.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v872.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v871.__r_.__value_.__l.__data_);
      }
LABEL_1653:
      v669 = (_OWORD *)__p.__r_.__value_.__l.__size_;
      if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
      {
        std::string::size_type v671 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&__p, (long long *)&v874);
      }
      else
      {
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)__p.__r_.__value_.__l.__size_, v874.__r_.__value_.__l.__data_, v874.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v670 = *(_OWORD *)&v874.__r_.__value_.__l.__data_;
          *(void *)(__p.__r_.__value_.__l.__size_ + 16) = *((void *)&v874.__r_.__value_.__l + 2);
          _OWORD *v669 = v670;
        }
        std::string::size_type v671 = (std::string::size_type)v669 + 24;
      }
      __p.__r_.__value_.__l.__size_ = v671;
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      ++v641;
      v642 -= 8;
    }
    while (v642);
    int v672 = *(_DWORD *)(v573 + 104);
    if (v672 >= 25)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v673 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v673 = v875.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v872, v673 + 14);
      int v572 = v855;
      if ((v872.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v674 = &v872;
      }
      else {
        v674 = (std::string *)v872.__r_.__value_.__r.__words[0];
      }
      if (v673)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v675 = &v875;
        }
        else {
          v675 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        memmove(v674, v675, v673);
      }
      strcpy((char *)v674 + v673, "has more than ");
      std::to_string(&v871, 24);
      if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v676 = &v871;
      }
      else {
        v676 = (std::string *)v871.__r_.__value_.__r.__words[0];
      }
      if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v677 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v677 = v871.__r_.__value_.__l.__size_;
      }
      v678 = std::string::append(&v872, (const std::string::value_type *)v676, v677);
      long long v679 = *(_OWORD *)&v678->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v678->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v679;
      v678->__r_.__value_.__l.__size_ = 0;
      v678->__r_.__value_.__r.__words[2] = 0;
      v678->__r_.__value_.__r.__words[0] = 0;
      v680 = std::string::append(&__s1, " utterances. This feature is meant for prototyping only. It is not a production NL system.");
      std::string v874 = *v680;
      v680->__r_.__value_.__l.__size_ = 0;
      v680->__r_.__value_.__r.__words[2] = 0;
      v680->__r_.__value_.__r.__words[0] = 0;
      uint64_t v681 = *(void *)(v573 + 8);
      if (v681)
      {
        v682 = (unsigned __int8 *)(v681 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v680);
        v682 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v869, "");
      int v683 = siri::intelligence::GetLineNumFromUnknownField(v682, (uint64_t)v869, -1);
      siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UTTER_NUM, (long long *)&v874, v683);
      goto LABEL_1707;
    }
    int v572 = v855;
    if (v672 >= 13)
    {
      if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v684 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v684 = v875.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v872, v684 + 14);
      if ((v872.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v685 = &v872;
      }
      else {
        v685 = (std::string *)v872.__r_.__value_.__r.__words[0];
      }
      if (v684)
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v686 = &v875;
        }
        else {
          v686 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        memmove(v685, v686, v684);
      }
      strcpy((char *)v685 + v684, "has more than ");
      std::to_string(&v871, 12);
      if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v687 = &v871;
      }
      else {
        v687 = (std::string *)v871.__r_.__value_.__r.__words[0];
      }
      if ((v871.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v688 = HIBYTE(v871.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v688 = v871.__r_.__value_.__l.__size_;
      }
      v689 = std::string::append(&v872, (const std::string::value_type *)v687, v688);
      long long v690 = *(_OWORD *)&v689->__r_.__value_.__l.__data_;
      __s1.__r_.__value_.__r.__words[2] = v689->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__s1.__r_.__value_.__l.__data_ = v690;
      v689->__r_.__value_.__l.__size_ = 0;
      v689->__r_.__value_.__r.__words[2] = 0;
      v689->__r_.__value_.__r.__words[0] = 0;
      v691 = std::string::append(&__s1, " utterances. This feature is meant for prototyping only. It is not a production NL system.");
      std::string v874 = *v691;
      v691->__r_.__value_.__l.__size_ = 0;
      v691->__r_.__value_.__r.__words[2] = 0;
      v691->__r_.__value_.__r.__words[0] = 0;
      uint64_t v692 = *(void *)(v573 + 8);
      if (v692)
      {
        v693 = (unsigned __int8 *)(v692 & 0xFFFFFFFFFFFFFFFELL);
      }
      else
      {
        google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v691);
        v693 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
      }
      std::string::basic_string[abi:ne180100]<0>(v869, "");
      int v694 = siri::intelligence::GetLineNumFromUnknownField(v693, (uint64_t)v869, -1);
      siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UTTER_NUM, (long long *)&v874, v694);
LABEL_1707:
      if (v870 < 0) {
        operator delete(v869[0]);
      }
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__s1.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v871.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v872.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v872.__r_.__value_.__l.__data_);
      }
    }
    v874.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v874);
LABEL_1718:
    if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v875.__r_.__value_.__l.__data_);
    }
    ++v572;
  }
  while (v572 < *((_DWORD *)this + 128));
LABEL_1730:
  if (*((int *)this + 98) >= 1)
  {
    int v695 = 0;
    v696 = (char *)this + 384;
    v697 = (char *)a2 + 288;
    v698 = (char *)a2 + 296;
    do
    {
      uint64_t v699 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>((uint64_t)v696, v695);
      std::string::basic_string[abi:ne180100]<0>(&v875, "variable ");
      int v700 = *(_DWORD *)(v699 + 16);
      if (v700)
      {
        std::operator+<char>();
        v701 = std::string::append(&v874, "' ");
        long long v702 = *(_OWORD *)&v701->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v701->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v702;
        v701->__r_.__value_.__l.__size_ = 0;
        v701->__r_.__value_.__r.__words[2] = 0;
        v701->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v703 = &__p;
        }
        else {
          v703 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v704 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v704 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v875, (const std::string::value_type *)v703, v704);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v700 = *(_DWORD *)(v699 + 16);
      }
      if (v700)
      {
        if (v698 != (char *)std::__tree<std::string>::find<std::string>((uint64_t)v697, *(const void ***)(v699 + 72))) {
          goto LABEL_1778;
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v712 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v712 = v875.__r_.__value_.__l.__size_;
        }
        v713 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v712 + 12);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v714 = &__p;
        }
        else {
          v714 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v712)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v715 = &v875;
          }
          else {
            v715 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v713 = (google::protobuf::internal *)memmove(v714, v715, v712);
        }
        strcpy((char *)v714 + v712, "is not used.");
        uint64_t v716 = *(void *)(v699 + 8);
        if (v716)
        {
          v717 = (unsigned __int8 *)(v716 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v713);
          v717 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v718 = siri::intelligence::GetLineNumFromUnknownField(v717, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&__p, v718);
      }
      else
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v705 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v705 = v875.__r_.__value_.__l.__size_;
        }
        v706 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v705 + 22);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v707 = &__p;
        }
        else {
          v707 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v705)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v708 = &v875;
          }
          else {
            v708 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v706 = (google::protobuf::internal *)memmove(v707, v708, v705);
        }
        strcpy((char *)v707 + v705, "does not define a name");
        uint64_t v709 = *(void *)(v699 + 8);
        if (v709)
        {
          v710 = (unsigned __int8 *)(v709 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v706);
          v710 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v711 = siri::intelligence::GetLineNumFromUnknownField(v710, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_VAR_NAME, (long long *)&__p, v711);
      }
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_1778:
      if ((*(unsigned char *)(v699 + 16) & 2) != 0)
      {
        if (!siri::intelligence::IsValidTypeName(*(void *)(v699 + 80)))
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v727 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v727 = v875.__r_.__value_.__l.__size_;
          }
          std::string::basic_string[abi:ne180100]((uint64_t)&v874, v727 + 26);
          if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v728 = &v874;
          }
          else {
            v728 = (std::string *)v874.__r_.__value_.__r.__words[0];
          }
          if (v727)
          {
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v729 = &v875;
            }
            else {
              v729 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            memmove(v728, v729, v727);
          }
          strcpy((char *)v728 + v727, "has an invalid type name: ");
          uint64_t v730 = *(void *)(v699 + 80);
          int v731 = *(char *)(v730 + 23);
          if (v731 >= 0) {
            v732 = *(const std::string::value_type **)(v699 + 80);
          }
          else {
            v732 = *(const std::string::value_type **)v730;
          }
          if (v731 >= 0) {
            std::string::size_type v733 = *(unsigned __int8 *)(v730 + 23);
          }
          else {
            std::string::size_type v733 = *(void *)(v730 + 8);
          }
          v734 = std::string::append(&v874, v732, v733);
          std::string __p = *v734;
          v734->__r_.__value_.__l.__size_ = 0;
          v734->__r_.__value_.__r.__words[2] = 0;
          v734->__r_.__value_.__r.__words[0] = 0;
          uint64_t v735 = *(void *)(v699 + 8);
          if (v735)
          {
            v736 = (unsigned __int8 *)(v735 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v734);
            v736 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&__s1, "type");
          int v737 = siri::intelligence::GetLineNumFromUnknownField(v736, (uint64_t)&__s1, -1);
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_TYPE, (long long *)&__p, v737);
          if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s1.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0)
          {
            v726 = (void *)v874.__r_.__value_.__r.__words[0];
            goto LABEL_1822;
          }
        }
      }
      else
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v719 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v719 = v875.__r_.__value_.__l.__size_;
        }
        v720 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v719 + 22);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v721 = &__p;
        }
        else {
          v721 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v719)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v722 = &v875;
          }
          else {
            v722 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v720 = (google::protobuf::internal *)memmove(v721, v722, v719);
        }
        strcpy((char *)v721 + v719, "does not define a type");
        uint64_t v723 = *(void *)(v699 + 8);
        if (v723)
        {
          v724 = (unsigned __int8 *)(v723 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v720);
          v724 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v725 = siri::intelligence::GetLineNumFromUnknownField(v724, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_VAR_TYPE, (long long *)&__p, v725);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          v726 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_1822:
          operator delete(v726);
        }
      }
      if ((*(unsigned char *)(v699 + 16) & 1) != 0 && !siri::intelligence::IsValidVariableName(*(void *)(v699 + 72)))
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v738 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v738 = v875.__r_.__value_.__l.__size_;
        }
        v739 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v738 + 34);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v740 = &__p;
        }
        else {
          v740 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v738)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v741 = &v875;
          }
          else {
            v741 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v739 = (google::protobuf::internal *)memmove(v740, v741, v738);
        }
        strcpy((char *)v740 + v738, "has invalid characters in the name");
        uint64_t v742 = *(void *)(v699 + 8);
        if (v742)
        {
          v743 = (unsigned __int8 *)(v742 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v739);
          v743 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "name");
        int v744 = siri::intelligence::GetLineNumFromUnknownField(v743, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_NAME, (long long *)&__p, v744);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      int v745 = *(_DWORD *)(v699 + 16);
      if ((v745 & 0x10) == 0) {
        goto LABEL_2002;
      }
      v746 = *(_DWORD **)(v699 + 104);
      if (v746)
      {
        if ((v745 & 2) != 0) {
          goto LABEL_1847;
        }
      }
      else
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 17756);
        v747 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || default_value_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v747->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
        v746 = *(_DWORD **)(v699 + 104);
        if ((*(_DWORD *)(v699 + 16) & 2) != 0)
        {
LABEL_1847:
          if (v746) {
            v748 = v746;
          }
          else {
            v748 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
          }
          v749 = *(long long **)(v699 + 80);
          if (*((char *)v749 + 23) < 0)
          {
            std::string::__init_copy_ctor_external(&v874, *(const std::string::value_type **)v749, *((void *)v749 + 1));
          }
          else
          {
            long long v750 = *v749;
            v874.__r_.__value_.__r.__words[2] = *((void *)v749 + 2);
            *(_OWORD *)&v874.__r_.__value_.__l.__data_ = v750;
          }
          uint64_t v856 = (uint64_t)v748;
          int v751 = v748[4];
          LOWORD(v752) = v751;
          if ((v751 & 2) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v872, siri::intelligence::TYPE_STRING[0]);
            if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v874, (unsigned __int8 *)&v872))
            {
              int v752 = v748[4];
              goto LABEL_1856;
            }
            char v758 = 1;
LABEL_1884:
            if (SHIBYTE(v872.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v872.__r_.__value_.__l.__data_);
            }
LABEL_1887:
            if (v758)
            {
LABEL_1888:
              if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t v760 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t v760 = v875.__r_.__value_.__l.__size_;
              }
              std::string::basic_string[abi:ne180100]((uint64_t)&__s1, v760 + 51);
              if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v761 = &__s1;
              }
              else {
                v761 = (std::string *)__s1.__r_.__value_.__r.__words[0];
              }
              if (v760)
              {
                if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v762 = &v875;
                }
                else {
                  v762 = (std::string *)v875.__r_.__value_.__r.__words[0];
                }
                memmove(v761, v762, v760);
              }
              strcpy((char *)v761 + v760, "has a default value that doesn't match the type of ");
              uint64_t v763 = *(void *)(v699 + 80);
              int v764 = *(char *)(v763 + 23);
              if (v764 >= 0) {
                v765 = *(const std::string::value_type **)(v699 + 80);
              }
              else {
                v765 = *(const std::string::value_type **)v763;
              }
              if (v764 >= 0) {
                std::string::size_type v766 = *(unsigned __int8 *)(v763 + 23);
              }
              else {
                std::string::size_type v766 = *(void *)(v763 + 8);
              }
              v767 = std::string::append(&__s1, v765, v766);
              std::string __p = *v767;
              v767->__r_.__value_.__l.__size_ = 0;
              v767->__r_.__value_.__r.__words[2] = 0;
              v767->__r_.__value_.__r.__words[0] = 0;
              uint64_t v768 = *(void *)(v699 + 8);
              if (v768)
              {
                v769 = (unsigned __int8 *)(v768 & 0xFFFFFFFFFFFFFFFELL);
              }
              else
              {
                google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v767);
                v769 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
              }
              std::string::basic_string[abi:ne180100]<0>(&v859, "defaultValue");
              int v770 = siri::intelligence::GetLineNumFromUnknownField(v769, (uint64_t)&v859, -1);
              siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_TYPE_MISMATCH, (long long *)&__p, v770);
              if (v861 < 0) {
                operator delete(v859);
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__s1.__r_.__value_.__l.__data_);
              }
              goto LABEL_2000;
            }
            int v771 = *(_DWORD *)(v856 + 16);
            if ((v771 & 0x10) == 0)
            {
              if ((v771 & 8) == 0)
              {
                if (siri::intelligence::DialogTypes::IsDialogType((siri::intelligence *)&v874))
                {
                  if (*(void *)(v699 + 104)) {
                    v772 = *(void **)(v699 + 104);
                  }
                  else {
                    v772 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
                  }
                  siri::intelligence::Variable::FromProtobuf(*(const std::string **)(v699 + 72), (uint64_t)v772, (uint64_t *)&v859);
                  v773 = (google::protobuf::internal *)_ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence18VariableDictionaryENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&__p);
                  memset(v863, 0, 24);
                  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v863;
                  v864[0] = 0;
                  v864[1] = 0;
                  v863[3] = v864;
                  v865 = v859;
                  v866 = v860;
                  if (v860) {
                    atomic_fetch_add_explicit(&v860->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  uint64_t v774 = *(void *)(v699 + 80);
                  uint64_t v775 = *(void *)(v699 + 8);
                  if (v775)
                  {
                    v776 = (unsigned __int8 *)(v775 & 0xFFFFFFFFFFFFFFFELL);
                  }
                  else
                  {
                    google::protobuf::internal::InitProtobufDefaults(v773);
                    v776 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
                  }
                  std::string::basic_string[abi:ne180100]<0>(&__s1, "defaultValue");
                  v777 = siri::intelligence::GetLineNumFromUnknownField(v776, (uint64_t)&__s1, -1);
                  siri::intelligence::Memory::ValidateVariableReference((uint64_t)&__p, (uint64_t)&v865, v774, (const void **)&v875.__r_.__value_.__l.__data_, a3, (uint64_t)v777);
                  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__s1.__r_.__value_.__l.__data_);
                  }
                  if (v866) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v866);
                  }
                  siri::intelligence::Memory::~Memory(&__p.__r_.__value_.__l.__data_);
                  if (v860) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v860);
                  }
                }
                goto LABEL_2000;
              }
              siri::intelligence::Memory::GetVariable((uint64_t)a2 + 312, *(void *)(v856 + 144), &__s1);
              if (!__s1.__r_.__value_.__r.__words[0]) {
                goto LABEL_1988;
              }
              (*(void (**)(std::string *__return_ptr))(*(void *)__s1.__r_.__value_.__l.__data_ + 96))(&__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                std::string::size_type v785 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              }
              else {
                std::string::size_type v785 = __p.__r_.__value_.__l.__size_;
              }
              std::string::size_type v786 = HIBYTE(v874.__r_.__value_.__r.__words[2]);
              if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v786 = v874.__r_.__value_.__l.__size_;
              }
              if (v785 != v786)
              {
                BOOL v793 = 1;
                if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
                  goto LABEL_1990;
                }
                goto LABEL_1997;
              }
              if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v787 = &v874;
              }
              else {
                v787 = (std::string *)v874.__r_.__value_.__r.__words[0];
              }
              if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
              {
                if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
                {
                  uint64_t v788 = HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1;
                  v789 = &__p;
                  do
                  {
                    int v791 = v789->__r_.__value_.__s.__data_[0];
                    v789 = (std::string *)((char *)v789 + 1);
                    int v790 = v791;
                    int v792 = v787->__r_.__value_.__s.__data_[0];
                    v787 = (std::string *)((char *)v787 + 1);
                    BOOL v793 = v790 != v792;
                  }
                  while (v790 == v792 && v788-- != 0);
                  if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
                  {
LABEL_1990:
                    v800 = (void *)__p.__r_.__value_.__r.__words[0];
                    goto LABEL_1996;
                  }
                  goto LABEL_1997;
                }
LABEL_1988:
                BOOL v793 = 0;
                goto LABEL_1997;
              }
              v800 = (void *)__p.__r_.__value_.__r.__words[0];
              BOOL v793 = memcmp(__p.__r_.__value_.__l.__data_, v787, __p.__r_.__value_.__l.__size_) != 0;
LABEL_1996:
              operator delete(v800);
LABEL_1997:
              if (__s1.__r_.__value_.__l.__size_) {
                std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__s1.__r_.__value_.__l.__size_);
              }
              if (v793) {
                goto LABEL_1888;
              }
LABEL_2000:
              siri::intelligence::ValidateKeyValueParameter((uint64_t)&v875, v856, (uint64_t)a2, a3);
              if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v874.__r_.__value_.__l.__data_);
              }
              goto LABEL_2002;
            }
            memset(&__p, 0, sizeof(__p));
            memset(&__s1, 0, sizeof(__s1));
            google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&__s1, v856 + 96);
            if (LODWORD(__s1.__r_.__value_.__r.__words[1]))
            {
              if (__s1.__r_.__value_.__r.__words[2]) {
                v778 = (const protobuf::Intelligence_KeyValueParameter **)(__s1.__r_.__value_.__r.__words[2] + 8);
              }
              else {
                v778 = 0;
              }
              v779 = (protobuf::Intelligence_KeyValueParameter *)__p.__r_.__value_.__l.__size_;
              do
              {
                v780 = *v778;
                if ((unint64_t)v779 >= __p.__r_.__value_.__r.__words[2])
                {
                  v779 = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&__p, v780);
                }
                else
                {
                  protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(v779, v780);
                  v779 = (protobuf::Intelligence_KeyValueParameter *)((char *)v779 + 192);
                }
                __p.__r_.__value_.__l.__size_ = (std::string::size_type)v779;
                ++v778;
                if (__s1.__r_.__value_.__r.__words[2]) {
                  std::string::size_type v781 = __s1.__r_.__value_.__r.__words[2] + 8;
                }
                else {
                  std::string::size_type v781 = 0;
                }
              }
              while (v778 != (const protobuf::Intelligence_KeyValueParameter **)(v781
                                                                                + 8
                                                                                * SLODWORD(__s1.__r_.__value_.__r.__words[1])));
            }
            google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&__s1);
            v782 = *(const void ***)(v856 + 152);
            std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&__p, &v865);
            siri::intelligence::FunctionHandler::GetReturnType(v782, (uint64_t *)&v865, &__s1);
            if (v866) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v866);
            }
            size_t v783 = strlen(siri::intelligence::TYPE_UNKNOWN);
            std::string::size_type v784 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
            if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
            {
              if (v783 != __s1.__r_.__value_.__l.__size_) {
                goto LABEL_1970;
              }
              if (v783 == -1) {
                std::string::__throw_out_of_range[abi:ne180100]();
              }
              v795 = (void *)__s1.__r_.__value_.__r.__words[0];
              if (memcmp(__s1.__r_.__value_.__l.__data_, siri::intelligence::TYPE_UNKNOWN, v783)) {
                goto LABEL_1970;
              }
              operator delete(v795);
            }
            else
            {
              if (v783 == HIBYTE(__s1.__r_.__value_.__r.__words[2])
                && !memcmp(&__s1, siri::intelligence::TYPE_UNKNOWN, v783))
              {
                goto LABEL_1994;
              }
LABEL_1970:
              if ((v784 & 0x80u) == 0) {
                std::string::size_type v796 = v784;
              }
              else {
                std::string::size_type v796 = __s1.__r_.__value_.__l.__size_;
              }
              std::string::size_type v797 = HIBYTE(v874.__r_.__value_.__r.__words[2]);
              if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                std::string::size_type v797 = v874.__r_.__value_.__l.__size_;
              }
              if (v796 != v797)
              {
LABEL_1985:
                if ((v784 & 0x80) != 0) {
                  operator delete(__s1.__r_.__value_.__l.__data_);
                }
                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                goto LABEL_1888;
              }
              if ((v874.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                v798 = &v874;
              }
              else {
                v798 = (std::string *)v874.__r_.__value_.__r.__words[0];
              }
              if ((v784 & 0x80) != 0)
              {
                v801 = (void *)__s1.__r_.__value_.__r.__words[0];
                int v802 = memcmp(__s1.__r_.__value_.__l.__data_, v798, __s1.__r_.__value_.__l.__size_);
                operator delete(v801);
                __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
                std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
                if (v802) {
                  goto LABEL_1888;
                }
                goto LABEL_2000;
              }
              if (v784)
              {
                uint64_t v799 = 0;
                while (__s1.__r_.__value_.__s.__data_[v799] == v798->__r_.__value_.__s.__data_[v799])
                {
                  if (v784 == ++v799) {
                    goto LABEL_1994;
                  }
                }
                goto LABEL_1985;
              }
            }
LABEL_1994:
            __s1.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__s1);
            goto LABEL_2000;
          }
LABEL_1856:
          LOBYTE(v753) = v752;
          if ((v752 & 0x100) != 0)
          {
            std::string::basic_string[abi:ne180100]<0>(&v871, siri::intelligence::TYPE_BOOLEAN[0]);
            if (siri::intelligence::IsEquivalentType((unsigned __int8 *)&v874, (unsigned __int8 *)&v871))
            {
              int v753 = v748[4];
              goto LABEL_1859;
            }
            char v758 = 1;
LABEL_1882:
            if (SHIBYTE(v871.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v871.__r_.__value_.__l.__data_);
              if ((v751 & 2) != 0) {
                goto LABEL_1884;
              }
              goto LABEL_1887;
            }
LABEL_1883:
            if ((v751 & 2) != 0) {
              goto LABEL_1884;
            }
            goto LABEL_1887;
          }
LABEL_1859:
          if ((v753 & 0x80) == 0
            || (std::string::basic_string[abi:ne180100]<0>(v869, siri::intelligence::TYPE_NUMBER[0]),
                siri::intelligence::IsEquivalentType((unsigned __int8 *)&v874, (unsigned __int8 *)v869)))
          {
            v754 = v698;
            v755 = v696;
            v756 = v697;
            int v757 = v748[14];
            if (v757 < 1)
            {
              if ((int)v748[20] >= 1) {
                goto LABEL_1868;
              }
              char v758 = 0;
LABEL_1877:
              v697 = v756;
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(v867, siri::intelligence::TYPE_ARRAY[0]);
              if (!siri::intelligence::IsEquivalentType((unsigned __int8 *)&v874, (unsigned __int8 *)v867))
              {
                char v758 = 1;
                goto LABEL_1874;
              }
              if ((int)v748[20] <= 0)
              {
                char v758 = 0;
                goto LABEL_1874;
              }
LABEL_1868:
              std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_DICTIONARY[0]);
              char IsEquivalentType = siri::intelligence::IsEquivalentType((unsigned __int8 *)&v874, (unsigned __int8 *)&__p);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              char v758 = IsEquivalentType ^ 1;
              if (v757 < 1) {
                goto LABEL_1877;
              }
LABEL_1874:
              v697 = v756;
              if (v868 < 0) {
                operator delete(v867[0]);
              }
            }
            v696 = v755;
            v698 = v754;
            if ((v753 & 0x80) != 0)
            {
LABEL_1879:
              if (v870 < 0) {
                operator delete(v869[0]);
              }
            }
            if ((v752 & 0x100) != 0) {
              goto LABEL_1882;
            }
            goto LABEL_1883;
          }
          char v758 = 1;
          goto LABEL_1879;
        }
      }
LABEL_2002:
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
      ++v695;
    }
    while (v695 < *((_DWORD *)this + 98));
  }
  if (*((int *)this + 68) >= 1)
  {
    for (int n = 0; n < *((_DWORD *)this + 68); ++n)
    {
      uint64_t v804 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition>::TypeHandler>((uint64_t)this + 264, n);
      std::string::basic_string[abi:ne180100]<0>(&v875, "condition ");
      int v805 = *(_DWORD *)(v804 + 16);
      if (v805)
      {
        std::operator+<char>();
        v806 = std::string::append(&v874, "' ");
        long long v807 = *(_OWORD *)&v806->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v806->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v807;
        v806->__r_.__value_.__l.__size_ = 0;
        v806->__r_.__value_.__r.__words[2] = 0;
        v806->__r_.__value_.__r.__words[0] = 0;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v808 = &__p;
        }
        else {
          v808 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v809 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v809 = __p.__r_.__value_.__l.__size_;
        }
        std::string::append(&v875, (const std::string::value_type *)v808, v809);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v805 = *(_DWORD *)(v804 + 16);
      }
      if (v805)
      {
        if ((siri::intelligence::IsValidId(*(void *)(v804 + 24)) & 1) == 0)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            size_t v817 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
          }
          else {
            size_t v817 = v875.__r_.__value_.__l.__size_;
          }
          v818 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v817 + 32);
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v819 = &__p;
          }
          else {
            v819 = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          if (v817)
          {
            if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              v820 = &v875;
            }
            else {
              v820 = (std::string *)v875.__r_.__value_.__r.__words[0];
            }
            v818 = (google::protobuf::internal *)memmove(v819, v820, v817);
          }
          strcpy((char *)v819 + v817, "has invalid characters in the ID");
          uint64_t v821 = *(void *)(v804 + 8);
          if (v821)
          {
            v822 = (unsigned __int8 *)(v821 & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            google::protobuf::internal::InitProtobufDefaults(v818);
            v822 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
          }
          std::string::basic_string[abi:ne180100]<0>(&v874, "id");
          int v823 = siri::intelligence::GetLineNumFromUnknownField(v822, (uint64_t)&v874, -1);
          siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_INVALID_ID, (long long *)&__p, v823);
          if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v874.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        if ((const protobuf::Intelligence *)((char *)a2 + 272) != (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 264, *(const void ***)(v804 + 24)))goto LABEL_2079; {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        }
          size_t v824 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        else {
          size_t v824 = v875.__r_.__value_.__l.__size_;
        }
        v825 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v824 + 12);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v826 = &__p;
        }
        else {
          v826 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v824)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v827 = &v875;
          }
          else {
            v827 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v825 = (google::protobuf::internal *)memmove(v826, v827, v824);
        }
        strcpy((char *)v826 + v824, "is not used.");
        uint64_t v828 = *(void *)(v804 + 8);
        if (v828)
        {
          v829 = (unsigned __int8 *)(v828 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v825);
          v829 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v830 = siri::intelligence::GetLineNumFromUnknownField(v829, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddWarning(a3, (long long *)siri::intelligence::CODE_UNUSED, (long long *)&__p, v830);
      }
      else
      {
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v810 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v810 = v875.__r_.__value_.__l.__size_;
        }
        v811 = (google::protobuf::internal *)std::string::basic_string[abi:ne180100]((uint64_t)&__p, v810 + 21);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v812 = &__p;
        }
        else {
          v812 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if (v810)
        {
          if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v813 = &v875;
          }
          else {
            v813 = (std::string *)v875.__r_.__value_.__r.__words[0];
          }
          v811 = (google::protobuf::internal *)memmove(v812, v813, v810);
        }
        strcpy((char *)v812 + v810, "does not define an id");
        uint64_t v814 = *(void *)(v804 + 8);
        if (v814)
        {
          v815 = (unsigned __int8 *)(v814 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v811);
          v815 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "");
        int v816 = siri::intelligence::GetLineNumFromUnknownField(v815, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_NO_ID, (long long *)&__p, v816);
      }
      if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v874.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
LABEL_2079:
      if ((*(_DWORD *)(v804 + 16) & 2) != 0)
      {
        v831 = *(void **)(v804 + 32);
        if (!v831)
        {
          google::protobuf::internal::LogMessage::LogMessage((uint64_t)&__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21788);
          v832 = google::protobuf::internal::LogMessage::operator<<(&__p, "CHECK failed: !value || condition_ != nullptr: ");
          google::protobuf::internal::LogFinisher::operator=((int)&v874, (const char **)&v832->__r_.__value_.__l.__data_);
          google::protobuf::internal::LogMessage::~LogMessage((void **)&__p.__r_.__value_.__l.__data_);
          v831 = *(void **)(v804 + 32);
        }
        if (v831) {
          v833 = v831;
        }
        else {
          v833 = &protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
        }
        siri::intelligence::ValidateConditionEntry((const void **)&v875.__r_.__value_.__l.__data_, (uint64_t)v833, (uint64_t)a2, a3);
      }
      if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v875.__r_.__value_.__l.__data_);
      }
    }
  }
  if (*((int *)this + 44) >= 1)
  {
    int v834 = 0;
    do
    {
      uint64_t v835 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Activity>::TypeHandler>((uint64_t)this + 168, v834);
      std::string::basic_string[abi:ne180100]<0>(&__p, "activity ");
      int v836 = *(_DWORD *)(v835 + 16);
      if ((v836 & 2) != 0)
      {
        std::operator+<char>();
        v837 = std::string::append(&v874, "' ");
        long long v838 = *(_OWORD *)&v837->__r_.__value_.__l.__data_;
        v875.__r_.__value_.__r.__words[2] = v837->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v875.__r_.__value_.__l.__data_ = v838;
        v837->__r_.__value_.__l.__size_ = 0;
        v837->__r_.__value_.__r.__words[2] = 0;
        v837->__r_.__value_.__r.__words[0] = 0;
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v839 = &v875;
        }
        else {
          v839 = (std::string *)v875.__r_.__value_.__r.__words[0];
        }
        if ((v875.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v840 = HIBYTE(v875.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v840 = v875.__r_.__value_.__l.__size_;
        }
        std::string::append(&__p, (const std::string::value_type *)v839, v840);
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        int v836 = *(_DWORD *)(v835 + 16);
      }
      if ((v836 & 0x10) != 0
        && (const protobuf::Intelligence *)((char *)a2 + 104) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 96, *(const void ***)(v835 + 80)))
      {
        v841 = (google::protobuf::internal *)std::operator+<char>();
        uint64_t v842 = *(void *)(v835 + 8);
        if (v842)
        {
          v843 = (unsigned __int8 *)(v842 & 0xFFFFFFFFFFFFFFFELL);
        }
        else
        {
          google::protobuf::internal::InitProtobufDefaults(v841);
          v843 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
        }
        std::string::basic_string[abi:ne180100]<0>(&v874, "inputGroupId");
        int v844 = siri::intelligence::GetLineNumFromUnknownField(v843, (uint64_t)&v874, -1);
        siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_INPUT, (long long *)&v875, v844);
        if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v874.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v875.__r_.__value_.__l.__data_);
        }
      }
      if (*(int *)(v835 + 32) >= 1)
      {
        int v845 = 0;
        do
        {
          v846 = (const void **)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>(v835 + 24, v845);
          if ((const protobuf::Intelligence *)((char *)a2 + 80) == (const protobuf::Intelligence *)std::__tree<std::string>::find<std::string>((uint64_t)a2 + 72, v846))
          {
            v847 = (google::protobuf::internal *)std::operator+<char>();
            uint64_t v848 = *(void *)(v835 + 8);
            if (v848)
            {
              v849 = (unsigned __int8 *)(v848 & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              google::protobuf::internal::InitProtobufDefaults(v847);
              v849 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
            }
            std::string::basic_string[abi:ne180100]<0>(&v874, "responseIds");
            int v850 = siri::intelligence::GetLineNumFromUnknownField(v849, (uint64_t)&v874, v845);
            siri::intelligence::ValidationResults::AddError(a3, (long long *)siri::intelligence::CODE_UNDEF_RESPONSE, (long long *)&v875, v850);
            if (SHIBYTE(v874.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v874.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v875.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v875.__r_.__value_.__l.__data_);
            }
          }
          ++v845;
        }
        while (v845 < *(_DWORD *)(v835 + 32));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v834;
    }
    while (v834 < *((_DWORD *)this + 44));
  }
}

void sub_239AD4660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (*(char *)(v53 - 105) < 0) {
    operator delete(*(void **)(v53 - 128));
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Validator::Validate(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  long long v25 = 0uLL;
  int v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  int v27 = &v28;
  if (siri::intelligence::HasFormatExtension(a1, 2)) {
    siri::intelligence::YamlIO::Validate((siri::intelligence::ValidationResults *)&v25, (uint64_t *)a1);
  }
  int FormatForFilename = siri::intelligence::GetFormatForFilename(a1);
  siri::intelligence::Loader::LoadFile(a1, FormatForFilename, &v24);
  uint64_t v8 = v24;
  if ((void)v24)
  {
    siri::intelligence::Configuration::GetTemplateDirFromPath(a2, (uint64_t)__p);
    std::string::size_type v10 = (void *)HIBYTE(v23);
    LOBYTE(v11) = HIBYTE(v23);
    if (v23 < 0) {
      std::string::size_type v10 = __p[1];
    }
    if (!v10)
    {
      siri::intelligence::Configuration::GetTemplateDirFromPath(a1, (uint64_t)&v20);
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v23 = v21;
      *(_OWORD *)std::string __p = v20;
      unint64_t v11 = HIBYTE(v21);
    }
    BOOL v12 = (v11 & 0x80u) != 0;
    int v13 = __p;
    if (v12) {
      int v13 = (void **)__p[0];
    }
    siri::intelligence::Log::Debug((siri::intelligence::Log *)"Template dir for validation is: %s", v9, v13);
    siri::intelligence::Validator::Validate((uint64_t)__p, v8, (uint64_t)&v25, a3);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    if (*(char *)(a1 + 23) >= 0) {
      uint64_t v14 = a1;
    }
    else {
      uint64_t v14 = *(void *)a1;
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Unable to load file for validation: %s", v7, v14);
    *(_OWORD *)a3 = v25;
    uint64_t v15 = v26;
    BOOL v16 = v27;
    uint64_t v26 = 0;
    long long v25 = 0uLL;
    a3[2] = v15;
    a3[3] = (uint64_t)v16;
    int v17 = v28;
    uint64_t v18 = v29;
    a3[4] = (uint64_t)v28;
    long long v19 = a3 + 4;
    a3[5] = v18;
    if (v18)
    {
      *((void *)v17 + 2) = v19;
      int v27 = &v28;
      int v28 = 0;
      uint64_t v29 = 0;
    }
    else
    {
      a3[3] = (uint64_t)v19;
    }
  }
  if (*((void *)&v24 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
  }
  std::__tree<std::string>::destroy((uint64_t)&v27, v28);
  __p[0] = &v25;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_239AD5388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,char *a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  siri::intelligence::ValidationResults::~ValidationResults(&a22);
  _Unwind_Resume(a1);
}

void *std::vector<siri::intelligence::ValidationResult>::__init_with_size[abi:ne180100]<siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    std::vector<siri::intelligence::ValidationResult>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = (void *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239AD543C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<siri::intelligence::ValidationResult>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<siri::intelligence::ValidationResult>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::vector<siri::intelligence::ValidationResult>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

void std::vector<siri::intelligence::ValidationResult>::__throw_length_error[abi:ne180100]()
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(a2 << 6);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*,siri::intelligence::ValidationResult*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  char v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::allocator<siri::intelligence::ValidationResult>::construct[abi:ne180100]<siri::intelligence::ValidationResult,siri::intelligence::ValidationResult&>(a1, v4, v6);
      v6 += 64;
      uint64_t v4 = v12 + 64;
      v12 += 64;
    }
    while (v6 != a3);
  }
  char v10 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_239AD5588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void std::allocator<siri::intelligence::ValidationResult>::construct[abi:ne180100]<siri::intelligence::ValidationResult,siri::intelligence::ValidationResult&>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_DWORD *)a2 = *(_DWORD *)a3;
  char v5 = (std::string *)(a2 + 8);
  if (*(char *)(a3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
  }
  else
  {
    long long v6 = *(_OWORD *)(a3 + 8);
    *(void *)(a2 + 24) = *(void *)(a3 + 24);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  BOOL v7 = (std::string *)(a2 + 32);
  if (*(char *)(a3 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a3 + 32), *(void *)(a3 + 40));
  }
  else
  {
    long long v8 = *(_OWORD *)(a3 + 32);
    *(void *)(a2 + 48) = *(void *)(a3 + 48);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a3 + 56);
}

void sub_239AD5634(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>::operator()[abi:ne180100]((uint64_t *)a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<siri::intelligence::ValidationResult>,siri::intelligence::ValidationResult*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = (uint64_t *)a1[1];
  uint64_t v1 = (uint64_t *)a1[2];
  uint64_t v3 = *v1;
  uint64_t v4 = *v2;
  if (*v1 != *v2)
  {
    uint64_t v5 = *a1;
    do
    {
      v3 -= 64;
      std::allocator<siri::intelligence::ValidationResult>::destroy[abi:ne180100](v5, v3);
    }
    while (v3 != v4);
  }
}

void siri::intelligence::CollectVariableReferences(siri::intelligence *this, const protobuf::Intelligence_KeyValueParameter *a2, BOOL a3, siri::intelligence::ValidationData *a4)
{
  if ((*((unsigned char *)this + 16) & 8) != 0)
  {
    siri::intelligence::GetVariableNames(*((void *)this + 18), (uint64_t *)&v26);
    BOOL v7 = v26;
    for (int i = v27; v7 != i; v7 += 3)
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a3 + 288), v7, (uint64_t)v7);
    int v28 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  if a2 && (*((unsigned char *)this + 16))
  {
    siri::intelligence::GetVariableNames(*((void *)this + 15), (uint64_t *)&v26);
    uint64_t v9 = v26;
    for (int j = v27; v9 != j; v9 += 3)
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a3 + 288), v9, (uint64_t)v9);
    int v28 = &v26;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v28);
  }
  uint64_t v11 = *((void *)this + 8);
  if (v11) {
    uint64_t v12 = (siri::intelligence **)(v11 + 8);
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v13 = *((int *)this + 14);
  if (v13)
  {
    uint64_t v14 = 8 * v13;
    do
    {
      uint64_t v15 = *v12++;
      siri::intelligence::CollectVariableReferences(v15, a2, a3, a4);
      v14 -= 8;
    }
    while (v14);
  }
  uint64_t v16 = *((void *)this + 11);
  if (v16) {
    int v17 = (siri::intelligence **)(v16 + 8);
  }
  else {
    int v17 = 0;
  }
  uint64_t v18 = *((int *)this + 20);
  if (v18)
  {
    uint64_t v19 = 8 * v18;
    do
    {
      long long v20 = *v17++;
      siri::intelligence::CollectVariableReferences(v20, a2, a3, a4);
      v19 -= 8;
    }
    while (v19);
  }
  uint64_t v21 = *((void *)this + 14);
  if (v21) {
    uint64_t v22 = (siri::intelligence **)(v21 + 8);
  }
  else {
    uint64_t v22 = 0;
  }
  uint64_t v23 = *((int *)this + 26);
  if (v23)
  {
    uint64_t v24 = 8 * v23;
    do
    {
      long long v25 = *v22++;
      siri::intelligence::CollectVariableReferences(v25, a2, a3, a4);
      v24 -= 8;
    }
    while (v24);
  }
}

void sub_239AD5864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::intelligence::CollectVariableReferencesInCondition(siri::intelligence *this, const protobuf::Intelligence_Condition_ConditionEntry *a2, siri::intelligence::ValidationData *a3, siri::intelligence::ValidationData *a4)
{
  int v6 = *((_DWORD *)this + 4);
  if ((v6 & 0x10) != 0)
  {
    BOOL v7 = (siri::intelligence *)*((void *)this + 13);
    if (!v7)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21242);
      long long v8 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      BOOL v7 = (siri::intelligence *)*((void *)this + 13);
    }
    if (v7) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
    }
    siri::intelligence::CollectVariableReferences(v9, 0, (BOOL)a2, a4);
    int v6 = *((_DWORD *)this + 4);
  }
  if ((v6 & 0x20) != 0)
  {
    char v10 = (siri::intelligence *)*((void *)this + 14);
    if (!v10)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
      uint64_t v11 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      char v10 = (siri::intelligence *)*((void *)this + 14);
    }
    if (v10) {
      uint64_t v12 = v10;
    }
    else {
      uint64_t v12 = (siri::intelligence *)&protobuf::_Intelligence_KeyValueParameter_default_instance_;
    }
    siri::intelligence::CollectVariableReferences(v12, 0, (BOOL)a2, a4);
  }
  uint64_t v13 = *((void *)this + 5);
  if (v13) {
    uint64_t v14 = (siri::intelligence **)(v13 + 8);
  }
  else {
    uint64_t v14 = 0;
  }
  uint64_t v15 = *((int *)this + 8);
  if (v15)
  {
    uint64_t v16 = 8 * v15;
    do
    {
      int v17 = *v14++;
      siri::intelligence::CollectVariableReferencesInCondition(v17, a2, a3);
      v16 -= 8;
    }
    while (v16);
  }
  uint64_t v18 = *((void *)this + 8);
  if (v18) {
    uint64_t v19 = (siri::intelligence **)(v18 + 8);
  }
  else {
    uint64_t v19 = 0;
  }
  uint64_t v20 = *((int *)this + 14);
  if (v20)
  {
    uint64_t v21 = 8 * v20;
    do
    {
      uint64_t v22 = *v19++;
      siri::intelligence::CollectVariableReferencesInCondition(v22, a2, a3);
      v21 -= 8;
    }
    while (v21);
  }
  if ((*((_DWORD *)this + 4) & 8) != 0)
  {
    uint64_t v23 = (siri::intelligence *)*((void *)this + 12);
    if (!v23)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21511);
      uint64_t v24 = google::protobuf::internal::LogMessage::operator<<(v27, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v26, (const char **)&v24->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v27[0].__r_.__value_.__l.__data_);
      uint64_t v23 = (siri::intelligence *)*((void *)this + 12);
    }
    if (v23) {
      long long v25 = v23;
    }
    else {
      long long v25 = (siri::intelligence *)&protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
    }
    siri::intelligence::CollectVariableReferencesInCondition(v25, a2, a3);
  }
}

void sub_239AD5A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidateVariableReferencesInText(const void **a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4, int a5)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v11 = *(std::string *)a2;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = (uint64_t *)(a3 + 312);
  char v14 = 0;
  while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v11))
  {
    siri::intelligence::Entity::GetName(&v11, &__p);
    siri::intelligence::Memory::ValidateVariableReference(v9, (uint64_t)&__p, a1, a4, a5);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
}

void sub_239AD5B48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::ValidateKeyValueParameter(uint64_t a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4)
{
  int v8 = *(_DWORD *)(a2 + 16);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 120);
    uint64_t v10 = *(void *)(a2 + 8);
    if (v10)
    {
      std::string v11 = (unsigned __int8 *)(v10 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)a1);
      std::string v11 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "key");
    int LineNumFromUnknownField = siri::intelligence::GetLineNumFromUnknownField(v11, (uint64_t)&__v, -1);
    siri::intelligence::ValidateVariableReferencesInText((const void **)a1, v9, a3, a4, LineNumFromUnknownField);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    int v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 8) != 0)
  {
    uint64_t v13 = *(void *)(a2 + 144);
    uint64_t v14 = *(void *)(a2 + 8);
    if (v14)
    {
      uint64_t v15 = (unsigned __int8 *)(v14 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)a1);
      uint64_t v15 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__v, "var");
    int v16 = siri::intelligence::GetLineNumFromUnknownField(v15, (uint64_t)&__v, -1);
    siri::intelligence::Memory::ValidateVariableReference((uint64_t *)(a3 + 312), v13, (const void **)a1, a4, v16);
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    int v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x10) != 0)
  {
    memset(&__v, 0, 24);
    memset(&__p, 0, sizeof(__p));
    google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>((signed int **)&__p, a2 + 96);
    if (LODWORD(__p.__end_))
    {
      if (__p.__end_cap_.__value_) {
        p_std::string::size_type size = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
      }
      else {
        p_std::string::size_type size = 0;
      }
      begiint n = (protobuf::Intelligence_KeyValueParameter *)__v.__begin_;
      do
      {
        uint64_t v19 = (const protobuf::Intelligence_KeyValueParameter *)*p_size;
        if ((std::__split_buffer<std::string>::pointer)begin >= __v.__end_)
        {
          begiint n = (protobuf::Intelligence_KeyValueParameter *)std::vector<protobuf::Intelligence_KeyValueParameter>::__push_back_slow_path<protobuf::Intelligence_KeyValueParameter const&>((uint64_t)&__v, v19);
        }
        else
        {
          protobuf::Intelligence_KeyValueParameter::Intelligence_KeyValueParameter(begin, v19);
          begiint n = (protobuf::Intelligence_KeyValueParameter *)((char *)begin + 192);
        }
        __v.__begin_ = (std::__split_buffer<std::string>::pointer)begin;
        ++p_size;
        if (__p.__end_cap_.__value_) {
          uint64_t v20 = &__p.__end_cap_.__value_->__r_.__value_.__l.__size_;
        }
        else {
          uint64_t v20 = 0;
        }
      }
      while (p_size != &v20[SLODWORD(__p.__end_)]);
    }
    google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)&__p);
    uint64_t v21 = (google::protobuf::internal *)std::allocate_shared[abi:ne180100]<siri::intelligence::VariableDictionary,std::allocator<siri::intelligence::VariableDictionary>,char const(&)[1],std::vector<protobuf::Intelligence_KeyValueParameter> &,void>("", (uint64_t *)&__v, &v111);
    uint64_t v22 = *(void *)(a2 + 152);
    long long v112 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
    if (v111.__r_.__value_.__l.__size_) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v111.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v23 = *(void *)(a2 + 8);
    if (v23)
    {
      uint64_t v24 = (unsigned __int8 *)(v23 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults(v21);
      uint64_t v24 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    int v25 = siri::intelligence::GetLineNumFromUnknownField(v24, (uint64_t)&__p, -1);
    siri::intelligence::FunctionHandler::Validate((uint64_t)v109, (const void **)a1, a4, v22, (uint64_t *)&v112, a3, v25);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    if (*((void *)&v112 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v112 + 1));
    }
    if (v111.__r_.__value_.__l.__size_) {
      std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v111.__r_.__value_.__l.__size_);
    }
    __p.__begin_ = (std::vector<std::string>::pointer)&__v;
    std::vector<protobuf::Intelligence_KeyValueParameter>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    int v8 = *(_DWORD *)(a2 + 16);
  }
  memset(&__p, 0, sizeof(__p));
  if ((v8 & 2) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "valueString");
    std::vector<std::string>::pointer end = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v28 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v29 = v28 + 1;
      if (v28 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v29) {
        unint64_t v29 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v30 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v30 = v29;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v30) {
        uint64_t v31 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v30);
      }
      else {
        uint64_t v31 = 0;
      }
      int v32 = v31 + v28;
      __v.__first_ = v31;
      __v.__begin_ = v32;
      __v.__end_cap_.__value_ = &v31[v30];
      long long v33 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v32->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32->__r_.__value_.__l.__data_ = v33;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v32 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      int v34 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v34;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v27 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v27;
      __p.__end_ = end + 1;
    }
    int v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x80) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "valueNumber");
    std::vector<std::string>::pointer v35 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v38 = v37 + 1;
      if (v37 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v38) {
        unint64_t v38 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v39 = v38;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v39) {
        long long v40 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v39);
      }
      else {
        long long v40 = 0;
      }
      uint64_t v41 = v40 + v37;
      __v.__first_ = v40;
      __v.__begin_ = v41;
      __v.__end_cap_.__value_ = &v40[v39];
      long long v42 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v41->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41->__r_.__value_.__l.__data_ = v42;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v41 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      size_t v43 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v43;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v36 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35->__r_.__value_.__l.__data_ = v36;
      __p.__end_ = v35 + 1;
    }
    int v8 = *(_DWORD *)(a2 + 16);
  }
  if ((v8 & 0x100) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "valueBoolean");
    std::vector<std::string>::pointer v44 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v46 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v47 = v46 + 1;
      if (v46 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v47) {
        unint64_t v47 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v48 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v48 = v47;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v48) {
        int v49 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v48);
      }
      else {
        int v49 = 0;
      }
      int v50 = v49 + v46;
      __v.__first_ = v49;
      __v.__begin_ = v50;
      __v.__end_cap_.__value_ = &v49[v48];
      long long v51 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v50->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v50->__r_.__value_.__l.__data_ = v51;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v50 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      uint64_t v52 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v52;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v45 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44->__r_.__value_.__l.__data_ = v45;
      __p.__end_ = v44 + 1;
    }
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "valueArray");
    std::vector<std::string>::pointer v53 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v56 = v55 + 1;
      if (v55 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v56) {
        unint64_t v56 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v57 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v57 = v56;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v57) {
        int v58 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v57);
      }
      else {
        int v58 = 0;
      }
      int v59 = v58 + v55;
      __v.__first_ = v58;
      __v.__begin_ = v59;
      __v.__end_cap_.__value_ = &v58[v57];
      long long v60 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v59->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v59->__r_.__value_.__l.__data_ = v60;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v59 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      uint64_t v61 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v61;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v54 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      __p.__end_ = v53 + 1;
    }
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "valueDictionary");
    std::vector<std::string>::pointer v62 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v64 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v65 = v64 + 1;
      if (v64 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v65) {
        unint64_t v65 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v66 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v66 = v65;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v66) {
        int v67 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v66);
      }
      else {
        int v67 = 0;
      }
      uint64_t v68 = v67 + v64;
      __v.__first_ = v67;
      __v.__begin_ = v68;
      __v.__end_cap_.__value_ = &v67[v66];
      long long v69 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v68->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v68->__r_.__value_.__l.__data_ = v69;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v68 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      uint64_t v70 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v70;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v63 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v62->__r_.__value_.__l.__data_ = v63;
      __p.__end_ = v62 + 1;
    }
  }
  int v71 = *(_DWORD *)(a2 + 16);
  if ((v71 & 0x10) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "function");
    std::vector<std::string>::pointer v72 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v74 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v75 = v74 + 1;
      if (v74 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v75) {
        unint64_t v75 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v76 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v76 = v75;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v76) {
        uint64_t v77 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v76);
      }
      else {
        uint64_t v77 = 0;
      }
      int v78 = v77 + v74;
      __v.__first_ = v77;
      __v.__begin_ = v78;
      __v.__end_cap_.__value_ = &v77[v76];
      long long v79 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v78->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v78->__r_.__value_.__l.__data_ = v79;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v78 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      int v80 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v80;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v73 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v72->__r_.__value_.__l.__data_ = v73;
      __p.__end_ = v72 + 1;
    }
    int v71 = *(_DWORD *)(a2 + 16);
  }
  if ((v71 & 8) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v111, "var");
    std::vector<std::string>::pointer v81 = __p.__end_;
    if (__p.__end_ >= __p.__end_cap_.__value_)
    {
      unint64_t v83 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
      unint64_t v84 = v83 + 1;
      if (v83 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v84) {
        unint64_t v84 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v85 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v85 = v84;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
      if (v85) {
        uint64_t v86 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v85);
      }
      else {
        uint64_t v86 = 0;
      }
      std::string::size_type v87 = v86 + v83;
      __v.__first_ = v86;
      __v.__begin_ = v87;
      __v.__end_cap_.__value_ = &v86[v85];
      long long v88 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      v87->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v87->__r_.__value_.__l.__data_ = v88;
      memset(&v111, 0, sizeof(v111));
      __v.__end_ = v87 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&__p, &__v);
      uint64_t v89 = __p.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      __p.__end_ = v89;
      if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v111.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v82 = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
      __p.__end_->__r_.__value_.__r.__words[2] = v111.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v81->__r_.__value_.__l.__data_ = v82;
      __p.__end_ = v81 + 1;
    }
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3) >= 2)
  {
    if (*(char *)(a1 + 23) >= 0) {
      size_t v90 = *(unsigned __int8 *)(a1 + 23);
    }
    else {
      size_t v90 = *(void *)(a1 + 8);
    }
    int v91 = &v111;
    std::string::basic_string[abi:ne180100]((uint64_t)&v111, v90 + 42);
    if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      int v91 = (std::string *)v111.__r_.__value_.__r.__words[0];
    }
    if (v90)
    {
      if (*(char *)(a1 + 23) >= 0) {
        uint64_t v92 = (const void *)a1;
      }
      else {
        uint64_t v92 = *(const void **)a1;
      }
      memmove(v91, v92, v90);
    }
    strcpy((char *)v91 + v90, "defines a parameter with multiple values: ");
    std::string::basic_string[abi:ne180100]<0>(v107, ", ");
    siri::intelligence::StringJoin((long long **)&__p, (uint64_t)v107, (uint64_t)v109);
    if ((v110 & 0x80u) == 0) {
      size_t v93 = v109;
    }
    else {
      size_t v93 = (void **)v109[0];
    }
    if ((v110 & 0x80u) == 0) {
      std::string::size_type v94 = v110;
    }
    else {
      std::string::size_type v94 = (std::string::size_type)v109[1];
    }
    unint64_t v95 = std::string::append(&v111, (const std::string::value_type *)v93, v94);
    *(_OWORD *)&__v.__first_ = *(_OWORD *)&v95->__r_.__value_.__l.__data_;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)v95->__r_.__value_.__r.__words[2];
    v95->__r_.__value_.__l.__size_ = 0;
    v95->__r_.__value_.__r.__words[2] = 0;
    v95->__r_.__value_.__r.__words[0] = 0;
    uint64_t v96 = *(void *)(a2 + 8);
    if (v96)
    {
      int v97 = (unsigned __int8 *)(v96 & 0xFFFFFFFFFFFFFFFELL);
    }
    else
    {
      google::protobuf::internal::InitProtobufDefaults((google::protobuf::internal *)v95);
      int v97 = (unsigned __int8 *)&google::protobuf::internal::fixed_address_empty_string;
    }
    std::string::basic_string[abi:ne180100]<0>(v105, "");
    int v98 = siri::intelligence::GetLineNumFromUnknownField(v97, (uint64_t)v105, -1);
    siri::intelligence::ValidationResults::AddError(a4, (long long *)siri::intelligence::CODE_MULTI_DEFS, (long long *)&__v, v98);
    if (v106 < 0) {
      operator delete(v105[0]);
    }
    if (SHIBYTE(__v.__end_) < 0) {
      operator delete(__v.__first_);
    }
    if ((char)v110 < 0) {
      operator delete(v109[0]);
    }
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v111.__r_.__value_.__l.__data_);
    }
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    int v99 = 0;
    do
    {
      uint64_t v100 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 48, v99);
      siri::intelligence::ValidateKeyValueParameter(a1, v100, a3, a4);
      ++v99;
    }
    while (v99 < *(_DWORD *)(a2 + 56));
  }
  if (*(int *)(a2 + 80) >= 1)
  {
    int v101 = 0;
    do
    {
      uint64_t v102 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 72, v101);
      siri::intelligence::ValidateKeyValueParameter(a1, v102, a3, a4);
      ++v101;
    }
    while (v101 < *(_DWORD *)(a2 + 80));
  }
  if (*(int *)(a2 + 104) >= 1)
  {
    int v103 = 0;
    do
    {
      uint64_t v104 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a2 + 96, v103);
      siri::intelligence::ValidateKeyValueParameter(a1, v104, a3, a4);
      ++v103;
    }
    while (v103 < *(_DWORD *)(a2 + 104));
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_239AD67F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void **__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)(v41 - 112));
  if (a33 < 0) {
    operator delete(__p);
  }
  std::vector<std::string> __p = &a36;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&__p);
  _Unwind_Resume(a1);
}

void siri::intelligence::Memory::~Memory(char **this)
{
  std::__tree<std::string>::destroy((uint64_t)(this + 6), this[7]);
  std::__tree<std::string>::destroy((uint64_t)(this + 2), this[3]);
  uint64_t v2 = (std::__shared_weak_count *)this[1];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void siri::intelligence::ValidateConditionEntry(const void **a1, uint64_t a2, uint64_t a3, siri::intelligence::ValidationResults *a4)
{
  siri::intelligence::ConditionEntry::Validate(a1, a2, a4);
  if (*(int *)(a2 + 32) >= 1)
  {
    int v8 = 0;
    do
    {
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(a2 + 24, v8);
      siri::intelligence::ValidateConditionEntry(a1, v9, a3, a4);
      ++v8;
    }
    while (v8 < *(_DWORD *)(a2 + 32));
  }
  if (*(int *)(a2 + 56) >= 1)
  {
    int v10 = 0;
    do
    {
      uint64_t v11 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Condition_ConditionEntry>::TypeHandler>(a2 + 48, v10);
      siri::intelligence::ValidateConditionEntry(a1, v11, a3, a4);
      ++v10;
    }
    while (v10 < *(_DWORD *)(a2 + 56));
  }
  int v12 = *(_DWORD *)(a2 + 16);
  if ((v12 & 8) != 0)
  {
    uint64_t v13 = *(void **)(a2 + 96);
    if (!v13)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21511);
      uint64_t v14 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || not_child_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v14->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      uint64_t v13 = *(void **)(a2 + 96);
    }
    if (v13) {
      uint64_t v15 = v13;
    }
    else {
      uint64_t v15 = &protobuf::_Intelligence_Condition_ConditionEntry_default_instance_;
    }
    siri::intelligence::ValidateConditionEntry(a1, v15, a3, a4);
    int v12 = *(_DWORD *)(a2 + 16);
  }
  if ((v12 & 0x10) != 0)
  {
    int v16 = *(void **)(a2 + 104);
    if (!v16)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21242);
      int v17 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || left_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v17->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      int v16 = *(void **)(a2 + 104);
    }
    if (v16) {
      uint64_t v18 = v16;
    }
    else {
      uint64_t v18 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
    }
    siri::intelligence::ValidateKeyValueParameter((uint64_t)a1, (uint64_t)v18, a3, a4);
    int v12 = *(_DWORD *)(a2 + 16);
  }
  if ((v12 & 0x20) != 0)
  {
    uint64_t v19 = *(void **)(a2 + 112);
    if (!v19)
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/fileformat/intelligence.pb.h", 21373);
      uint64_t v20 = google::protobuf::internal::LogMessage::operator<<(v23, "CHECK failed: !value || right_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v22, (const char **)&v20->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v23[0].__r_.__value_.__l.__data_);
      uint64_t v19 = *(void **)(a2 + 112);
    }
    if (v19) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = &protobuf::_Intelligence_KeyValueParameter_default_instance_;
    }
    siri::intelligence::ValidateKeyValueParameter((uint64_t)a1, (uint64_t)v21, a3, a4);
  }
}

void sub_239AD6C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void siri::intelligence::ValidationData::~ValidationData(siri::intelligence::ValidationData *this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(*((void **)this + 6));
  }
  if (*((char *)this + 47) < 0) {
    operator delete(*((void **)this + 3));
  }
  if (*((char *)this + 23) < 0) {
    operator delete(*(void **)this);
  }
}

char *std::__tree<std::__value_type<std::string,int>,std::__map_value_compare<std::string,std::__value_type<std::string,int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, const void **a2, long long **a3)
{
  uint64_t v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  int v6 = (char *)*v5;
  if (!*v5)
  {
    BOOL v7 = (uint64_t **)v5;
    int v8 = *a3;
    int v6 = (char *)operator new(0x40uLL);
    uint64_t v9 = (std::string *)(v6 + 32);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((void *)v8 + 1));
    }
    else
    {
      long long v10 = *v8;
      *((void *)v6 + 6) = *((void *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    *((_DWORD *)v6 + 14) = 0;
    std::__tree<std::string>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_239AD6DA0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void InitDefaultsscc_info_FlowTest_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest::FlowTest((protobuf::FlowTest *)&protobuf::_FlowTest_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_AssertCondition_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_AssertCondition::FlowTest_AssertCondition((protobuf::FlowTest_AssertCondition *)&protobuf::_FlowTest_AssertCondition_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_AssertCondition_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_AssertResponse_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse((protobuf::FlowTest_AssertResponse *)&protobuf::_FlowTest_AssertResponse_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_AssertResponse_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_KeyValueParameter_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter((protobuf::FlowTest_KeyValueParameter *)&protobuf::_FlowTest_KeyValueParameter_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_KeyValueParameter_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_SendIntent_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_SendIntent::FlowTest_SendIntent((protobuf::FlowTest_SendIntent *)&protobuf::_FlowTest_SendIntent_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_SendIntent_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_StartFrom_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_StartFrom::FlowTest_StartFrom((protobuf::FlowTest_StartFrom *)&protobuf::_FlowTest_StartFrom_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_StartFrom_default_instance_, v4);
}

void InitDefaultsscc_info_FlowTest_Step_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_Step::FlowTest_Step((protobuf::FlowTest_Step *)&protobuf::_FlowTest_Step_default_instance_);
  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_Step_default_instance_, v4);
  qword_268A0BB68 = (uint64_t)&protobuf::_FlowTest_StartFrom_default_instance_;
  unk_268A0BB70 = &protobuf::_FlowTest_SendIntent_default_instance_;
  qword_268A0BB78 = (uint64_t)&protobuf::_FlowTest_AssertResponse_default_instance_;
  unk_268A0BB80 = &protobuf::_FlowTest_AssertCondition_default_instance_;
}

void InitDefaultsscc_info_FlowTest_Test_flowtest_2eproto(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4)
{
  google::protobuf::internal::VerifyVersion((google::protobuf::internal *)0x2DEDD0, (google::protobuf::internal *)0x2DEDD0, "/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", a4);
  protobuf::FlowTest_Test::FlowTest_Test((protobuf::FlowTest_Test *)&protobuf::_FlowTest_Test_default_instance_);

  google::protobuf::internal::OnShutdownRun((google::protobuf::internal *)google::protobuf::internal::DestroyMessage, (void (*)(const void *))&protobuf::_FlowTest_Test_default_instance_, v4);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this)
{
  *(void *)this = &unk_26ED29D50;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load_explicit(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto);
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 11) = 0;
  *((unsigned char *)this + 96) = 0;
  return this;
}

void sub_239AD71C8(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 48));
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this, const protobuf::FlowTest_KeyValueParameter *a2)
{
  *(void *)this = &unk_26ED29D50;
  *((void *)this + 1) = 0;
  uint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 6, (uint64_t)a2 + 48);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    BOOL v7 = (uint64_t *)*((void *)a2 + 9);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v7);
    }
  }
  *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    int v8 = (uint64_t *)*((void *)a2 + 10);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 80, (uint64_t)v8);
    }
  }
  uint64_t v9 = *((void *)a2 + 11);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((void *)this + 11) = v9;
  return this;
}

void sub_239AD72FC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(protobuf::FlowTest_KeyValueParameter *this)
{
  *(void *)this = &unk_26ED29D50;
  uint64_t v2 = *((void *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 10);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x23ECAACC0](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 6);
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_KeyValueParameter::~FlowTest_KeyValueParameter(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_KeyValueParameter::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_KeyValueParameter::default_instance(protobuf::FlowTest_KeyValueParameter *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_KeyValueParameter_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_KeyValueParameter_default_instance_;
}

void protobuf::FlowTest_KeyValueParameter::Clear(protobuf::FlowTest_KeyValueParameter *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 48);
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *((void *)this + 9);
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((v2 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v4 = *((void *)this + 10);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  if ((v2 & 0xC) != 0)
  {
    *((unsigned char *)this + 96) = 0;
    *((void *)this + 11) = 0;
  }
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (protobuf::FlowTest_KeyValueParameter *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
  }
}

char *protobuf::FlowTest_KeyValueParameter::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  std::vector<std::string>::pointer v35 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v35, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (2)
    {
      TagFallbacint k = (char *)v35 + 1;
      LODWORD(v8) = *(unsigned __int8 *)v35;
      if (*(char *)v35 < 0)
      {
        int v8 = (const char *)(v8 + (*TagFallback << 7) - 128);
        if (*TagFallback < 0)
        {
          TagFallbacint k = (char *)google::protobuf::internal::ReadTagFallback(v35, v8);
          std::vector<std::string>::pointer v35 = (google::protobuf::internal *)TagFallback;
          if (!TagFallback) {
            goto LABEL_3;
          }
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 16) |= 1u;
              uint64_t v9 = *(std::string **)(a1 + 72);
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 72, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              goto LABEL_22;
            case 2u:
              if (v8 != 17) {
                goto LABEL_49;
              }
              v5 |= 4u;
              *(void *)(a1 + 88) = *(void *)TagFallback;
              std::vector<std::string>::pointer v35 = (google::protobuf::internal *)(TagFallback + 8);
              goto LABEL_55;
            case 3u:
              if (v8 != 24) {
                goto LABEL_49;
              }
              v5 |= 8u;
              long long v10 = (google::protobuf::internal *)(TagFallback + 1);
              unint64_t v11 = *TagFallback;
              if ((*TagFallback & 0x80000000) == 0) {
                goto LABEL_18;
              }
              int v12 = *(char *)v10;
              unint64_t v11 = v11 + (v12 << 7) - 128;
              if (v12 < 0)
              {
                long long v33 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64((google::protobuf::internal *)TagFallback, v11);
                std::vector<std::string>::pointer v35 = v33;
                *(unsigned char *)(a1 + 96) = v34 != 0;
                if (!v33) {
                  goto LABEL_60;
                }
              }
              else
              {
                long long v10 = (google::protobuf::internal *)(TagFallback + 2);
LABEL_18:
                std::vector<std::string>::pointer v35 = v10;
                *(unsigned char *)(a1 + 96) = v11 != 0;
              }
              goto LABEL_55;
            case 4u:
              if (v8 != 34) {
                goto LABEL_49;
              }
              *(_DWORD *)(a1 + 16) |= 2u;
              uint64_t v9 = *(std::string **)(a1 + 80);
              if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 80, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
LABEL_22:
              uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v9, TagFallback, (uint64_t)this);
              goto LABEL_54;
            case 5u:
              if (v8 != 42) {
                goto LABEL_49;
              }
              unint64_t v14 = (unint64_t)(TagFallback - 1);
              while (1)
              {
                uint64_t v15 = (google::protobuf::internal *)(v14 + 1);
                std::vector<std::string>::pointer v35 = (google::protobuf::internal *)(v14 + 1);
                int v16 = *(int **)(a1 + 40);
                if (!v16) {
                  break;
                }
                uint64_t v17 = *(int *)(a1 + 32);
                int v18 = *v16;
                if ((int)v17 >= *v16)
                {
                  if (v18 == *(_DWORD *)(a1 + 36))
                  {
LABEL_30:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v18 + 1);
                    int v16 = *(int **)(a1 + 40);
                    int v18 = *v16;
                  }
                  int *v16 = v18 + 1;
                  uint64_t v20 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
                  LODWORD(v19) = v20;
                  uint64_t v21 = *(void *)(a1 + 40);
                  uint64_t v22 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v22 + 1;
                  *(void *)(v21 + 8 * v22 + 8) = v20;
                  uint64_t v15 = v35;
                  goto LABEL_32;
                }
                *(_DWORD *)(a1 + 32) = v17 + 1;
                uint64_t v19 = *(void *)&v16[2 * v17 + 2];
LABEL_32:
                unint64_t v14 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, v19, v15);
                std::vector<std::string>::pointer v35 = (google::protobuf::internal *)v14;
                if (!v14) {
                  goto LABEL_60;
                }
                if (*(void *)this <= v14 || *(unsigned char *)v14 != 42) {
                  goto LABEL_55;
                }
              }
              int v18 = *(_DWORD *)(a1 + 36);
              goto LABEL_30;
            case 6u:
              if (v8 != 50) {
                goto LABEL_49;
              }
              unint64_t v23 = (unint64_t)(TagFallback - 1);
              break;
            default:
LABEL_49:
              if (v8) {
                BOOL v32 = (v8 & 7) == 4;
              }
              else {
                BOOL v32 = 1;
              }
              if (v32)
              {
                *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
                goto LABEL_3;
              }
              uint64_t v13 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), (google::protobuf::internal *)TagFallback, this);
LABEL_54:
              std::vector<std::string>::pointer v35 = v13;
              if (!v13)
              {
LABEL_60:
                TagFallbacint k = 0;
                goto LABEL_3;
              }
LABEL_55:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v35, *((_DWORD *)this + 23)))goto LABEL_2; {
              continue;
              }
          }
          while (1)
          {
            uint64_t v24 = (google::protobuf::internal *)(v23 + 1);
            std::vector<std::string>::pointer v35 = (google::protobuf::internal *)(v23 + 1);
            int v25 = *(int **)(a1 + 64);
            if (!v25) {
              break;
            }
            uint64_t v26 = *(int *)(a1 + 56);
            int v27 = *v25;
            if ((int)v26 >= *v25)
            {
              if (v27 == *(_DWORD *)(a1 + 60))
              {
LABEL_43:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v27 + 1);
                int v25 = *(int **)(a1 + 64);
                int v27 = *v25;
              }
              *int v25 = v27 + 1;
              unint64_t v29 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 48));
              LODWORD(v28) = v29;
              uint64_t v30 = *(void *)(a1 + 64);
              uint64_t v31 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v31 + 1;
              *(void *)(v30 + 8 * v31 + 8) = v29;
              uint64_t v24 = v35;
              goto LABEL_45;
            }
            *(_DWORD *)(a1 + 56) = v26 + 1;
            uint64_t v28 = *(void *)&v25[2 * v26 + 2];
LABEL_45:
            unint64_t v23 = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, v28, v24);
            std::vector<std::string>::pointer v35 = (google::protobuf::internal *)v23;
            if (!v23) {
              goto LABEL_60;
            }
            if (*(void *)this <= v23 || *(unsigned char *)v23 != 50) {
              goto LABEL_55;
            }
          }
          int v27 = *(_DWORD *)(a1 + 60);
          goto LABEL_43;
        }
        TagFallbacint k = (char *)v35 + 2;
      }
      break;
    }
    std::vector<std::string>::pointer v35 = (google::protobuf::internal *)TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallbacint k = (char *)v35;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

char *google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(google::protobuf::internal::EpsCopyInputStream *this, uint64_t a2, google::protobuf::internal *a3)
{
  int v6 = *(char *)a3;
  BOOL v7 = (const char *)*(unsigned __int8 *)a3;
  if (v6 < 0)
  {
    uint64_t result = google::protobuf::internal::ReadSizeFallback(a3, v7);
    if (!result) {
      return result;
    }
    int v8 = result;
    LODWORD(v7) = v10;
  }
  else
  {
    int v8 = (char *)a3 + 1;
  }
  int v11 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v8, v7);
  int v12 = *((_DWORD *)this + 22);
  BOOL v13 = __OFSUB__(v12--, 1);
  *((_DWORD *)this + 22) = v12;
  if (v12 < 0 != v13) {
    return 0;
  }
  int v14 = v11;
  uint64_t result = protobuf::FlowTest_KeyValueParameter::_InternalParse(a2, (google::protobuf::internal *)v8, this);
  if (!result) {
    return result;
  }
  ++*((_DWORD *)this + 22);
  if (*((_DWORD *)this + 20)) {
    return 0;
  }
  int v15 = *((_DWORD *)this + 7) + v14;
  *((_DWORD *)this + 7) = v15;
  *(void *)this = *((void *)this + 1) + (v15 & (v15 >> 31));
  return result;
}

unsigned __int8 *protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_KeyValueParameter *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 9), a2);
    if ((v6 & 4) == 0)
    {
LABEL_3:
      if ((v6 & 8) == 0) {
        goto LABEL_4;
      }
      goto LABEL_36;
    }
  }
  else if ((v6 & 4) == 0)
  {
    goto LABEL_3;
  }
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  uint64_t v25 = *((void *)this + 11);
  char *v4 = 17;
  *(void *)(v4 + 1) = v25;
  v4 += 9;
  if ((v6 & 8) == 0)
  {
LABEL_4:
    if ((v6 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_36:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v26 = *((unsigned char *)this + 96);
  char *v4 = 24;
  v4[1] = v26;
  v4 += 2;
  if ((v6 & 2) != 0) {
LABEL_5:
  }
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 4, *((const void ***)this + 10), v4);
LABEL_6:
  int v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      uint64_t v9 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      char *v4 = 42;
      unsigned int v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          int v11 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          int v11 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v10;
        int v11 = (unsigned __int8 *)(v4 + 2);
      }
      uint64_t v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  int v15 = *((_DWORD *)this + 14);
  if (v15)
  {
    for (int j = 0; j != v15; ++j)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      uint64_t v17 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 48, j);
      char *v4 = 50;
      unsigned int v18 = *((_DWORD *)v17 + 5);
      if (v18 > 0x7F)
      {
        v4[1] = v18 | 0x80;
        unsigned int v20 = v18 >> 7;
        if (v18 >> 14)
        {
          uint64_t v19 = (unsigned __int8 *)(v4 + 3);
          do
          {
            *(v19 - 1) = v20 | 0x80;
            unsigned int v21 = v20 >> 7;
            ++v19;
            unsigned int v22 = v20 >> 14;
            v20 >>= 7;
          }
          while (v22);
          *(v19 - 1) = v21;
        }
        else
        {
          v4[2] = v20;
          uint64_t v19 = (unsigned __int8 *)(v4 + 3);
        }
      }
      else
      {
        v4[1] = v18;
        uint64_t v19 = (unsigned __int8 *)(v4 + 2);
      }
      uint64_t v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v17, v19, a3);
    }
  }
  uint64_t v23 = *((void *)this + 1);
  if ((v23 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v27 = v23 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v27 + 23) < 0)
  {
    unint64_t v29 = *(void **)v27;
    uint64_t v28 = *(void *)(v27 + 8);
  }
  else
  {
    LODWORD(v28) = *(unsigned __int8 *)(v27 + 23);
    unint64_t v29 = (void *)v27;
  }
  if (*(void *)a3 - (void)v4 >= (int)v28)
  {
    uint64_t v30 = (int)v28;
    memcpy(v4, v29, (int)v28);
    v4 += v30;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v29, v28, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_KeyValueParameter::ByteSizeLong(protobuf::FlowTest_KeyValueParameter *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (protobuf::FlowTest_KeyValueParameter **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  uint64_t v8 = *((int *)this + 14);
  uint64_t v9 = v2 + v8;
  uint64_t v10 = *((void *)this + 8);
  if (v10) {
    int v11 = (protobuf::FlowTest_KeyValueParameter **)(v10 + 8);
  }
  else {
    int v11 = 0;
  }
  if (v8)
  {
    uint64_t v12 = 8 * v8;
    do
    {
      unsigned int v13 = *v11++;
      uint64_t v14 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v13);
      v9 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6);
      v12 -= 8;
    }
    while (v12);
  }
  int v15 = *((_DWORD *)this + 4);
  if ((v15 & 0xF) != 0)
  {
    if (v15)
    {
      uint64_t v16 = *((void *)this + 9);
      uint64_t v17 = *(unsigned __int8 *)(v16 + 23);
      uint64_t v18 = *(void *)(v16 + 8);
      if ((v17 & 0x80u) == 0) {
        uint64_t v18 = v17;
      }
      v9 += v18 + ((9 * (__clz(v18 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v15 & 2) != 0)
    {
      uint64_t v19 = *((void *)this + 10);
      uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
      uint64_t v21 = *(void *)(v19 + 8);
      if ((v20 & 0x80u) == 0) {
        uint64_t v21 = v20;
      }
      v9 += v21 + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    uint64_t v22 = v9 + 9;
    if ((v15 & 4) == 0) {
      uint64_t v22 = v9;
    }
    if ((v15 & 8) != 0) {
      uint64_t v9 = v22 + 2;
    }
    else {
      uint64_t v9 = v22;
    }
  }
  uint64_t v23 = *((void *)this + 1);
  if (v23)
  {
    unint64_t v25 = v23 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v25 + 23) < 0) {
      uint64_t v26 = *(void *)(v25 + 8);
    }
    else {
      uint64_t v26 = *(unsigned __int8 *)(v25 + 23);
    }
    v9 += v26;
  }
  *((_DWORD *)this + 5) = v9;
  return v9;
}

std::string *protobuf::FlowTest_KeyValueParameter::CheckTypeAndMergeFrom(protobuf::FlowTest_KeyValueParameter *this, const google::protobuf::MessageLite *lpsrc)
{
  return protobuf::FlowTest_KeyValueParameter::MergeFrom(this, lpsrc);
}

std::string *protobuf::FlowTest_KeyValueParameter::MergeFrom(protobuf::FlowTest_KeyValueParameter *this, const protobuf::FlowTest_KeyValueParameter *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 481);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((protobuf::FlowTest_KeyValueParameter *)((char *)this + 24));
  uint64_t result = (std::string *)google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((protobuf::FlowTest_KeyValueParameter *)((char *)this + 48));
  int v7 = *((_DWORD *)a2 + 4);
  if ((v7 & 0xF) != 0)
  {
    if (v7)
    {
      uint64_t result = (std::string *)((char *)this + 72);
      uint64_t v8 = (std::string *)*((void *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v9 = (const std::string *)*((void *)a2 + 9);
      if (v8 != v9)
      {
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)result, (uint64_t)v9);
        }
        uint64_t result = std::string::operator=(v8, v9);
      }
    }
    if ((v7 & 2) != 0)
    {
      uint64_t result = (std::string *)((char *)this + 80);
      uint64_t v10 = (std::string *)*((void *)this + 10);
      *((_DWORD *)this + 4) |= 2u;
      int v11 = (const std::string *)*((void *)a2 + 10);
      if (v10 != v11)
      {
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)result, (uint64_t)v11);
        }
        uint64_t result = std::string::operator=(v10, v11);
      }
    }
    if ((v7 & 4) != 0) {
      *((void *)this + 11) = *((void *)a2 + 11);
    }
    if ((v7 & 8) != 0) {
      *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
    }
    *((_DWORD *)this + 4) |= v7;
  }
  return result;
}

void sub_239AD80D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *protobuf::FlowTest_KeyValueParameter::CopyFrom(std::string *this, std::string *a2)
{
  if (a2 != this)
  {
    uint64_t v4 = (protobuf::FlowTest_KeyValueParameter *)this;
    protobuf::FlowTest_KeyValueParameter::Clear((protobuf::FlowTest_KeyValueParameter *)this);
    return protobuf::FlowTest_KeyValueParameter::MergeFrom(v4, (const protobuf::FlowTest_KeyValueParameter *)a2);
  }
  return this;
}

uint64_t protobuf::FlowTest_KeyValueParameter::IsInitialized(protobuf::FlowTest_KeyValueParameter *this)
{
  return 1;
}

double protobuf::FlowTest_KeyValueParameter::InternalSwap(protobuf::FlowTest_KeyValueParameter *this, protobuf::FlowTest_KeyValueParameter *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v27;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_22;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_KeyValueParameter *)((char *)this + 24), (protobuf::FlowTest_KeyValueParameter *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_KeyValueParameter *)((char *)this + 48), (protobuf::FlowTest_KeyValueParameter *)((char *)a2 + 48));
  unsigned int v13 = (uint64_t *)*((void *)this + 9);
  uint64_t v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v13 = (uint64_t *)*((void *)this + 9);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)unsigned int v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_14:
  uint64_t v19 = (uint64_t *)*((void *)this + 10);
  uint64_t v20 = (uint64_t **)((char *)a2 + 80);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 10, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v19 = (uint64_t *)*((void *)this + 10);
  }
  uint64_t v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 10, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)uint64_t v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)uint64_t v21 = v23;
  void v21[2] = v22;
LABEL_20:
  double result = *((double *)this + 11);
  *((void *)this + 11) = *((void *)a2 + 11);
  *((double *)a2 + 11) = result;
  char v26 = *((unsigned char *)this + 96);
  *((unsigned char *)this + 96) = *((unsigned char *)a2 + 96);
  *((unsigned char *)a2 + 96) = v26;
  return result;
}

void *protobuf::FlowTest_KeyValueParameter::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.KeyValueParameter");
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this)
{
  *(void *)this = &unk_26ED29DE0;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_StartFrom_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_StartFrom_flowtest_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_239AD83BC(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  *(void *)this = &unk_26ED29DE0;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  int v5 = *((_DWORD *)a2 + 4);
  if (v5)
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 3);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v6);
    }
  }
  *((void *)this + 4) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v5 & 2) != 0)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 4);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 32, (uint64_t)v7);
    }
  }
  return this;
}

void sub_239AD848C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_StartFrom::~FlowTest_StartFrom(protobuf::FlowTest_StartFrom *this)
{
  *(void *)this = &unk_26ED29DE0;
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 4);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x23ECAACC0](v4, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_StartFrom::~FlowTest_StartFrom(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_StartFrom::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_StartFrom::default_instance(protobuf::FlowTest_StartFrom *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_StartFrom_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_StartFrom_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_StartFrom_default_instance_;
}

void protobuf::FlowTest_StartFrom::Clear(protobuf::FlowTest_StartFrom *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0) {
    goto LABEL_11;
  }
  if ((v1 & 1) == 0)
  {
LABEL_5:
    if ((v1 & 2) != 0) {
      goto LABEL_6;
    }
    goto LABEL_11;
  }
  uint64_t v2 = *((void *)this + 3);
  if ((*(char *)(v2 + 23) & 0x80000000) == 0)
  {
    *(unsigned char *)uint64_t v2 = 0;
    *(unsigned char *)(v2 + 23) = 0;
    goto LABEL_5;
  }
  **(unsigned char **)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  if ((v1 & 2) != 0)
  {
LABEL_6:
    uint64_t v3 = *((void *)this + 4);
    if (*(char *)(v3 + 23) < 0)
    {
      **(unsigned char **)uint64_t v3 = 0;
      *(void *)(v3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  char v5 = *((unsigned char *)this + 8);
  uint64_t v4 = (protobuf::FlowTest_StartFrom *)((char *)this + 8);
  *((_DWORD *)v4 + 2) = 0;
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v4);
  }
}

google::protobuf::internal *protobuf::FlowTest_StartFrom::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v12 = a2;
  char v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
  double result = v12;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      unint64_t v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0) {
        goto LABEL_5;
      }
      unint64_t v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      double result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      int v12 = result;
      if (!result) {
        return result;
      }
      unint64_t v7 = (std::string::value_type *)result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          long long v10 = *(std::string **)(a1 + 32);
          if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 32, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          }
          goto LABEL_19;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        long long v10 = *(std::string **)(a1 + 24);
        if (v10 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 24, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_19:
        double result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v10, v7, (uint64_t)this);
        goto LABEL_20;
      }
      if (!v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      double result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_20:
      int v12 = result;
      if (result)
      {
        int v11 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v12, *((_DWORD *)this + 23));
        double result = v12;
        if (!v11) {
          continue;
        }
      }
      return result;
    }
    unint64_t v7 = (char *)result + 2;
LABEL_5:
    int v12 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest_StartFrom::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_StartFrom *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = (unsigned __int8 *)a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 4), (char *)v4);
  }
  uint64_t v7 = *((void *)this + 1);
  if ((v7 & 1) == 0) {
    return v4;
  }
  unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 23) < 0)
  {
    int v11 = *(void **)v9;
    uint64_t v10 = *(void *)(v9 + 8);
  }
  else
  {
    LODWORD(v1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(unsigned __int8 *)(v9 + 23);
    int v11 = (void *)v9;
  }
  if (*(void *)a3 - (void)v4 >= (int)v10)
  {
    uint64_t v12 = (int)v10;
    memcpy(v4, v11, (int)v10);
    v4 += v12;
    return v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v11, v10, v4);
}

uint64_t protobuf::FlowTest_StartFrom::ByteSizeLong(protobuf::FlowTest_StartFrom *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) == 0)
  {
    uint64_t v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = 0;
    if ((v1 & 2) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v3 = *((void *)this + 3);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 23);
  uint64_t v5 = *(void *)(v3 + 8);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = v4;
  }
  uint64_t v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    uint64_t v6 = *((void *)this + 4);
    uint64_t v7 = *(unsigned __int8 *)(v6 + 23);
    uint64_t v8 = *(void *)(v6 + 8);
    if ((v7 & 0x80u) == 0) {
      uint64_t v8 = v7;
    }
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  uint64_t v9 = *((void *)this + 1);
  if (v9)
  {
    unint64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 23) < 0) {
      uint64_t v12 = *(void *)(v11 + 8);
    }
    else {
      uint64_t v12 = *(unsigned __int8 *)(v11 + 23);
    }
    v2 += v12;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_StartFrom::CheckTypeAndMergeFrom(protobuf::FlowTest_StartFrom *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_StartFrom::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_StartFrom::MergeFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 729);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      unint64_t v11 = (std::string *)*((void *)this + 4);
      uint64_t v10 = (char *)this + 32;
      uint64_t v9 = v11;
      *((_DWORD *)v10 - 4) |= 2u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 4);
      if (v11 != v12)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v10, (uint64_t)v12);
        }
        std::string::operator=(v9, v12);
      }
    }
  }
}

void sub_239AD8B6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_StartFrom::CopyFrom(protobuf::FlowTest_StartFrom *this, const protobuf::FlowTest_StartFrom *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_StartFrom::Clear(this);
    protobuf::FlowTest_StartFrom::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_StartFrom::IsInitialized(protobuf::FlowTest_StartFrom *this)
{
  return 1;
}

__n128 protobuf::FlowTest_StartFrom::InternalSwap(protobuf::FlowTest_StartFrom *this, protobuf::FlowTest_StartFrom *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v25;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_22;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      uint64_t v8 = (__n128 *)(v4 & 0xFFFFFFFFFFFFFFFELL);
LABEL_7:
      unint64_t v9 = v8[1].n128_u64[0];
      __n128 result = *v8;
      unint64_t v11 = *(void *)(v7 + 16);
      __n128 *v8 = *(__n128 *)v7;
      v8[1].n128_u64[0] = v11;
      *(__n128 *)unint64_t v7 = result;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  uint64_t v12 = (uint64_t *)*((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  uint64_t v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v12 = (uint64_t *)*((void *)this + 3);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v12[2];
  __n128 result = *(__n128 *)v12;
  uint64_t v17 = v15[2];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v15;
  uint64_t v12[2] = v17;
  *(__n128 *)int v15 = result;
  v15[2] = v16;
LABEL_14:
  uint64_t v20 = (uint64_t *)*((void *)this + 4);
  uint64_t v18 = (std::string **)((char *)this + 32);
  uint64_t v19 = (std::string *)v20;
  uint64_t v21 = (std::string **)((char *)a2 + 32);
  if (v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v18, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v19 = *v18;
  }
  uint64_t v22 = *v21;
  if (*v21 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v21, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v22 = *v21;
  }
  std::string::size_type v23 = v19->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v19->__r_.__value_.__l.__data_;
  std::string::size_type v24 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19->__r_.__value_.__l.__data_ = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v19->__r_.__value_.__r.__words[2] = v24;
  *(__n128 *)&v22->__r_.__value_.__l.__data_ = result;
  v22->__r_.__value_.__r.__words[2] = v23;
  return result;
}

void *protobuf::FlowTest_StartFrom::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.StartFrom");
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26ED29E70;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_SendIntent_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_SendIntent_flowtest_2eproto);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_239AD8E24(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  *(void *)this = &unk_26ED29E70;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v7);
    }
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    uint64_t v8 = (uint64_t *)*((void *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v8);
    }
  }
  return this;
}

void sub_239AD8F24(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_SendIntent::~FlowTest_SendIntent(protobuf::FlowTest_SendIntent *this)
{
  *(void *)this = &unk_26ED29E70;
  uint64_t v2 = *((void *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x23ECAACC0](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_SendIntent::~FlowTest_SendIntent(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_SendIntent::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_SendIntent::default_instance(protobuf::FlowTest_SendIntent *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_SendIntent_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_SendIntent_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_SendIntent_default_instance_;
}

void protobuf::FlowTest_SendIntent::Clear(protobuf::FlowTest_SendIntent *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 3) != 0)
  {
    if (v2)
    {
      uint64_t v3 = *((void *)this + 6);
      if (*(char *)(v3 + 23) < 0)
      {
        **(unsigned char **)uint64_t v3 = 0;
        *(void *)(v3 + 8) = 0;
        if ((v2 & 2) == 0) {
          goto LABEL_11;
        }
        goto LABEL_6;
      }
      *(unsigned char *)uint64_t v3 = 0;
      *(unsigned char *)(v3 + 23) = 0;
    }
    if ((v2 & 2) == 0) {
      goto LABEL_11;
    }
LABEL_6:
    uint64_t v4 = *((void *)this + 7);
    if (*(char *)(v4 + 23) < 0)
    {
      **(unsigned char **)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v4 = 0;
      *(unsigned char *)(v4 + 23) = 0;
    }
  }
LABEL_11:
  char v6 = *((unsigned char *)this + 8);
  uint64_t v5 = (protobuf::FlowTest_SendIntent *)((char *)this + 8);
  *((_DWORD *)v5 + 2) = 0;
  if (v6)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v5);
  }
}

std::string::value_type *protobuf::FlowTest_SendIntent::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  uint64_t v20 = a2;
  char v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
  __n128 result = (std::string::value_type *)v20;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      unint64_t v7 = result + 1;
      LODWORD(v8) = *result;
      if ((*result & 0x80000000) == 0) {
        goto LABEL_6;
      }
      uint64_t v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      __n128 result = (std::string::value_type *)google::protobuf::internal::ReadTagFallback((google::protobuf::internal *)result, v8);
      uint64_t v20 = (google::protobuf::internal *)result;
      if (!result) {
        return result;
      }
      unint64_t v7 = result;
LABEL_7:
      unsigned int v9 = v8 >> 3;
      if (v8 >> 3 == 3)
      {
        if (v8 != 26) {
          goto LABEL_13;
        }
        __n128 result = v7 - 1;
        while (2)
        {
          unint64_t v11 = (google::protobuf::internal *)(result + 1);
          uint64_t v20 = (google::protobuf::internal *)(result + 1);
          uint64_t v12 = *(int **)(a1 + 40);
          if (v12)
          {
            uint64_t v13 = *(int *)(a1 + 32);
            int v14 = *v12;
            if ((int)v13 < *v12)
            {
              *(_DWORD *)(a1 + 32) = v13 + 1;
              int v15 = *(protobuf::FlowTest_KeyValueParameter **)&v12[2 * v13 + 2];
              goto LABEL_25;
            }
            if (v14 == *(_DWORD *)(a1 + 36))
            {
LABEL_23:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v14 + 1);
              uint64_t v12 = *(int **)(a1 + 40);
              int v14 = *v12;
            }
            *uint64_t v12 = v14 + 1;
            int v15 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            uint64_t v16 = *(void *)(a1 + 40);
            uint64_t v17 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v17 + 1;
            *(void *)(v16 + 8 * v17 + 8) = v15;
            unint64_t v11 = v20;
LABEL_25:
            __n128 result = google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, (uint64_t)v15, v11);
            uint64_t v20 = (google::protobuf::internal *)result;
            if (!result) {
              return result;
            }
            if (*(void *)this <= (unint64_t)result || *result != 26) {
              goto LABEL_36;
            }
            continue;
          }
          break;
        }
        int v14 = *(_DWORD *)(a1 + 36);
        goto LABEL_23;
      }
      if (v9 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          uint64_t v18 = *(std::string **)(a1 + 56);
          if (v18 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 56, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          }
          goto LABEL_34;
        }
      }
      else if (v9 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v18 = *(std::string **)(a1 + 48);
        if (v18 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 48, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_34:
        __n128 result = google::protobuf::internal::InlineGreedyStringParser(v18, v7, (uint64_t)this);
        goto LABEL_35;
      }
LABEL_13:
      if (!v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
        return v7;
      }
      __n128 result = (std::string::value_type *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_35:
      uint64_t v20 = (google::protobuf::internal *)result;
      if (!result) {
        return result;
      }
LABEL_36:
      int v19 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v20, *((_DWORD *)this + 23));
      __n128 result = (std::string::value_type *)v20;
      if (v19) {
        return result;
      }
    }
    unint64_t v7 = result + 2;
LABEL_6:
    uint64_t v20 = (google::protobuf::internal *)v7;
    goto LABEL_7;
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest_SendIntent::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_SendIntent *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6) {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 6), a2);
  }
  if ((v6 & 2) != 0) {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 7), v4);
  }
  int v7 = *((_DWORD *)this + 8);
  if (v7)
  {
    for (int i = 0; i != v7; ++i)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      unsigned int v9 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      char *v4 = 26;
      unsigned int v10 = *((_DWORD *)v9 + 5);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        unsigned int v12 = v10 >> 7;
        if (v10 >> 14)
        {
          unint64_t v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            unsigned int v13 = v12 >> 7;
            ++v11;
            unsigned int v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          unint64_t v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        unint64_t v11 = v4 + 2;
      }
      uint64_t v4 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v9, v11, a3);
    }
  }
  uint64_t v15 = *((void *)this + 1);
  if ((v15 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v17 + 23) < 0)
  {
    int v19 = *(void **)v17;
    uint64_t v18 = *(void *)(v17 + 8);
  }
  else
  {
    LODWORD(v18) = *(unsigned __int8 *)(v17 + 23);
    int v19 = (void *)v17;
  }
  if (*(void *)a3 - (void)v4 >= (int)v18)
  {
    uint64_t v20 = (int)v18;
    memcpy(v4, v19, (int)v18);
    v4 += v20;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v19, v18, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_SendIntent::ByteSizeLong(protobuf::FlowTest_SendIntent *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (protobuf::FlowTest_KeyValueParameter **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 4);
  if ((v8 & 3) != 0)
  {
    if (v8)
    {
      uint64_t v9 = *((void *)this + 6);
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      uint64_t v12 = *((void *)this + 7);
      uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v14 = *(void *)(v12 + 8);
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = v13;
      }
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
  }
  uint64_t v15 = *((void *)this + 1);
  if (v15)
  {
    unint64_t v17 = v15 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 23) < 0) {
      uint64_t v18 = *(void *)(v17 + 8);
    }
    else {
      uint64_t v18 = *(unsigned __int8 *)(v17 + 23);
    }
    v2 += v18;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_SendIntent::CheckTypeAndMergeFrom(protobuf::FlowTest_SendIntent *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_SendIntent::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_SendIntent::MergeFrom(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 993);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      int v8 = (const std::string *)*((void *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v11 = (std::string *)*((void *)this + 7);
      uint64_t v10 = (char *)this + 56;
      uint64_t v9 = v11;
      *((_DWORD *)v10 - 10) |= 2u;
      uint64_t v12 = (const std::string *)*((void *)a2 + 7);
      if (v11 != v12)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v10, (uint64_t)v12);
        }
        std::string::operator=(v9, v12);
      }
    }
  }
}

void sub_239AD988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_SendIntent::CopyFrom(protobuf::FlowTest_SendIntent *this, const protobuf::FlowTest_SendIntent *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_SendIntent::Clear(this);
    protobuf::FlowTest_SendIntent::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_SendIntent::IsInitialized(protobuf::FlowTest_SendIntent *this)
{
  return 1;
}

__n128 protobuf::FlowTest_SendIntent::InternalSwap(protobuf::FlowTest_SendIntent *this, protobuf::FlowTest_SendIntent *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v26;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_22;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_SendIntent *)((char *)this + 24), (protobuf::FlowTest_SendIntent *)((char *)a2 + 24));
  uint64_t v14 = (uint64_t *)*((void *)this + 6);
  uint64_t v15 = (uint64_t **)((char *)a2 + 48);
  if (v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v15 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v14 = (uint64_t *)*((void *)this + 6);
  }
  uint64_t v16 = *v15;
  if (*v15 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v16 = *v15;
  }
  uint64_t v17 = v14[2];
  __n128 result = *(__n128 *)v14;
  uint64_t v18 = v16[2];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v16;
  std::string v14[2] = v18;
  *(__n128 *)uint64_t v16 = result;
  uint64_t v16[2] = v17;
LABEL_14:
  uint64_t v21 = (uint64_t *)*((void *)this + 7);
  int v19 = (std::string **)((char *)this + 56);
  uint64_t v20 = (std::string *)v21;
  uint64_t v22 = (std::string **)((char *)a2 + 56);
  if (v21 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v19, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v20 = *v19;
  }
  std::string::size_type v23 = *v22;
  if (*v22 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v22, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    std::string::size_type v23 = *v22;
  }
  std::string::size_type v24 = v20->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v20->__r_.__value_.__l.__data_;
  std::string::size_type v25 = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v20->__r_.__value_.__r.__words[2] = v25;
  *(__n128 *)&v23->__r_.__value_.__l.__data_ = result;
  v23->__r_.__value_.__r.__words[2] = v24;
  return result;
}

void *protobuf::FlowTest_SendIntent::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.SendIntent");
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this)
{
  *(void *)this = &unk_26ED29F00;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  if (atomic_load_explicit(scc_info_FlowTest_AssertResponse_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertResponse_flowtest_2eproto);
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  return this;
}

void sub_239AD9B58(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v1 + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this, const protobuf::FlowTest_AssertResponse *a2)
{
  *(void *)this = &unk_26ED29F00;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  *((void *)this + 6) = 0;
  *((void *)this + 7) = 0;
  *((void *)this + 8) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 9) = &google::protobuf::internal::fixed_address_empty_string;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 9);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v6);
    }
  }
  *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *((_DWORD *)a2 + 20);
  return this;
}

void sub_239AD9C64(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v3);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_AssertResponse::~FlowTest_AssertResponse(protobuf::FlowTest_AssertResponse *this)
{
  *(void *)this = &unk_26ED29F00;
  uint64_t v2 = *((void *)this + 9);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 48);
  google::protobuf::RepeatedPtrField<std::string>::~RepeatedPtrField((char *)this + 24);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_AssertResponse::~FlowTest_AssertResponse(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_AssertResponse::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_AssertResponse::default_instance(protobuf::FlowTest_AssertResponse *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_AssertResponse_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertResponse_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_AssertResponse_default_instance_;
}

void protobuf::FlowTest_AssertResponse::Clear(protobuf::FlowTest_AssertResponse *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48);
  if (*((unsigned char *)this + 16))
  {
    uint64_t v2 = *((void *)this + 9);
    if (*(char *)(v2 + 23) < 0)
    {
      **(unsigned char **)uint64_t v2 = 0;
      *(void *)(v2 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v2 = 0;
      *(unsigned char *)(v2 + 23) = 0;
    }
  }
  char v4 = *((unsigned char *)this + 8);
  uint64_t v3 = (protobuf::FlowTest_AssertResponse *)((char *)this + 8);
  *((_DWORD *)v3 + 18) = 0;
  *((_DWORD *)v3 + 2) = 0;
  if (v4)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v3);
  }
}

google::protobuf::internal *protobuf::FlowTest_AssertResponse::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  unint64_t v37 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)) & 1) == 0)
  {
    unint64_t v8 = (uint64_t *)(a1 + 48);
    uint64_t v9 = (uint64_t *)(a1 + 24);
    while (2)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v37 + 1);
      LODWORD(v1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *(unsigned __int8 *)v37;
      if (*(char *)v37 < 0)
      {
        long long v10 = (const char *)(v10 + (*(unsigned __int8 *)TagFallback << 7) - 128);
        if (*(char *)TagFallback < 0)
        {
          TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v37, v10);
          unint64_t v37 = TagFallback;
          if (!TagFallback) {
            goto LABEL_3;
          }
LABEL_9:
          switch(v10 >> 3)
          {
            case 1u:
              if (v10 != 10) {
                goto LABEL_53;
              }
              *(_DWORD *)(a1 + 16) |= 1u;
              uint64_t v11 = *(std::string **)(a1 + 72);
              if (v11 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
                google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 72, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
              }
              int v12 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v11, (std::string::value_type *)TagFallback, (uint64_t)this);
              goto LABEL_58;
            case 2u:
              if (v10 != 18) {
                goto LABEL_53;
              }
              char v13 = (char *)TagFallback - 1;
              while (1)
              {
                uint64_t v14 = v13 + 1;
                unint64_t v37 = (google::protobuf::internal *)(v13 + 1);
                uint64_t v15 = *(int **)(a1 + 40);
                if (!v15) {
                  break;
                }
                uint64_t v16 = *(int *)(a1 + 32);
                int v17 = *v15;
                if ((int)v16 >= *v15)
                {
                  if (v17 == *(_DWORD *)(a1 + 36))
                  {
LABEL_21:
                    google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v17 + 1);
                    uint64_t v15 = *(int **)(a1 + 40);
                    int v17 = *v15;
                  }
                  int *v15 = v17 + 1;
                  int v19 = (atomic_ullong *)*v9;
                  if (!*v9) {
                    operator new();
                  }
                  if (v19[14]) {
                  AlignedAndAddCleanup = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v19, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
                  }
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[0] = 0;
                  AlignedAndAddCleanup->__r_.__value_.__l.__size_ = 0;
                  AlignedAndAddCleanup->__r_.__value_.__r.__words[2] = 0;
                  uint64_t v20 = *(void *)(a1 + 40);
                  uint64_t v21 = *(int *)(a1 + 32);
                  *(_DWORD *)(a1 + 32) = v21 + 1;
                  *(void *)(v20 + 8 * v21 + 8) = AlignedAndAddCleanup;
                  uint64_t v14 = (std::string::value_type *)v37;
                  goto LABEL_27;
                }
                *(_DWORD *)(a1 + 32) = v16 + 1;
                AlignedAndAddCleanup = *(std::string **)&v15[2 * v16 + 2];
LABEL_27:
                char v13 = google::protobuf::internal::InlineGreedyStringParser(AlignedAndAddCleanup, v14, (uint64_t)this);
                unint64_t v37 = (google::protobuf::internal *)v13;
                if (!v13) {
                  goto LABEL_64;
                }
                if (*(void *)this <= (unint64_t)v13 || *v13 != 18) {
                  goto LABEL_59;
                }
              }
              int v17 = *(_DWORD *)(a1 + 36);
              goto LABEL_21;
            case 3u:
              if (v10 != 26) {
                goto LABEL_53;
              }
              uint64_t v22 = (char *)TagFallback - 1;
              break;
            case 4u:
              if (v10 != 32) {
                goto LABEL_53;
              }
              v5 |= 2u;
              BOOL v32 = (google::protobuf::internal *)((char *)TagFallback + 1);
              LODWORD(v31) = *(unsigned __int8 *)TagFallback;
              if ((v31 & 0x80) == 0) {
                goto LABEL_52;
              }
              int v33 = *(char *)v32;
              unint64_t v31 = v31 + (v33 << 7) - 128;
              if (v33 < 0)
              {
                std::vector<std::string>::pointer v35 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v31);
                unint64_t v37 = v35;
                *(_DWORD *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v36;
                if (!v35) {
                  goto LABEL_64;
                }
              }
              else
              {
                BOOL v32 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_52:
                unint64_t v37 = v32;
                *(_DWORD *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v31;
              }
              goto LABEL_59;
            default:
LABEL_53:
              if (v10) {
                BOOL v34 = (v10 & 7) == 4;
              }
              else {
                BOOL v34 = 1;
              }
              if (v34)
              {
                *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v10 - 1;
                goto LABEL_3;
              }
              int v12 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v10, (unint64_t *)(a1 + 8), TagFallback, this);
LABEL_58:
              unint64_t v37 = v12;
              if (!v12)
              {
LABEL_64:
                TagFallbacint k = 0;
                goto LABEL_3;
              }
LABEL_59:
              if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v37, *((_DWORD *)this + 23)))goto LABEL_2; {
              continue;
              }
          }
          while (1)
          {
            std::string::size_type v23 = v22 + 1;
            unint64_t v37 = (google::protobuf::internal *)(v22 + 1);
            std::string::size_type v24 = *(int **)(a1 + 64);
            if (!v24) {
              break;
            }
            uint64_t v25 = *(int *)(a1 + 56);
            int v26 = *v24;
            if ((int)v25 >= *v24)
            {
              if (v26 == *(_DWORD *)(a1 + 60))
              {
LABEL_38:
                google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 48), v26 + 1);
                std::string::size_type v24 = *(int **)(a1 + 64);
                int v26 = *v24;
              }
              int *v24 = v26 + 1;
              uint64_t v28 = (atomic_ullong *)*v8;
              if (!*v8) {
                operator new();
              }
              if (v28[14]) {
              unint64_t v27 = (std::string *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup(v28, 0x18uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<std::string>);
              }
              v27->__r_.__value_.__r.__words[0] = 0;
              v27->__r_.__value_.__l.__size_ = 0;
              v27->__r_.__value_.__r.__words[2] = 0;
              uint64_t v29 = *(void *)(a1 + 64);
              uint64_t v30 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v30 + 1;
              *(void *)(v29 + 8 * v30 + 8) = v27;
              std::string::size_type v23 = (std::string::value_type *)v37;
              goto LABEL_44;
            }
            *(_DWORD *)(a1 + 56) = v25 + 1;
            unint64_t v27 = *(std::string **)&v24[2 * v25 + 2];
LABEL_44:
            uint64_t v22 = google::protobuf::internal::InlineGreedyStringParser(v27, v23, (uint64_t)this);
            unint64_t v37 = (google::protobuf::internal *)v22;
            if (!v22) {
              goto LABEL_64;
            }
            if (*(void *)this <= (unint64_t)v22 || *v22 != 26) {
              goto LABEL_59;
            }
          }
          int v26 = *(_DWORD *)(a1 + 60);
          goto LABEL_38;
        }
        TagFallbacint k = (google::protobuf::internal *)((char *)v37 + 2);
      }
      break;
    }
    unint64_t v37 = TagFallback;
    goto LABEL_9;
  }
LABEL_2:
  TagFallbacint k = v37;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::FlowTest_AssertResponse::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_AssertResponse *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  char v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6) {
    char v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 9), a2);
  }
  int v7 = *((_DWORD *)this + 8);
  if (v7 >= 1)
  {
    for (int i = 0; v7 != i; ++i)
    {
      uint64_t v9 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, i);
      if (*(char *)(v9 + 23) < 0)
      {
        int64_t v10 = *(void *)(v9 + 8);
        if (v10 > 127) {
          goto LABEL_15;
        }
      }
      else
      {
        int64_t v10 = *(unsigned __int8 *)(v9 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v10)
      {
        char *v4 = 18;
        v4[1] = v10;
        if (*(char *)(v9 + 23) >= 0) {
          uint64_t v11 = (const void *)v9;
        }
        else {
          uint64_t v11 = *(const void **)v9;
        }
        memcpy(v4 + 2, v11, v10);
        v4 += v10 + 2;
        continue;
      }
LABEL_15:
      char v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 2, v9, v4);
    }
  }
  int v12 = *((_DWORD *)this + 14);
  if (v12 >= 1)
  {
    for (int j = 0; v12 != j; ++j)
    {
      uint64_t v14 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, j);
      if (*(char *)(v14 + 23) < 0)
      {
        int64_t v15 = *(void *)(v14 + 8);
        if (v15 > 127) {
          goto LABEL_28;
        }
      }
      else
      {
        int64_t v15 = *(unsigned __int8 *)(v14 + 23);
      }
      if (*(void *)a3 - (void)v4 + 14 >= v15)
      {
        char *v4 = 26;
        v4[1] = v15;
        if (*(char *)(v14 + 23) >= 0) {
          uint64_t v16 = (const void *)v14;
        }
        else {
          uint64_t v16 = *(const void **)v14;
        }
        memcpy(v4 + 2, v16, v15);
        v4 += v15 + 2;
        continue;
      }
LABEL_28:
      char v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringOutline(a3, 3, v14, v4);
    }
  }
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(void *)a3) {
      char v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    unint64_t v17 = *((int *)this + 20);
    char *v4 = 32;
    if (v17 > 0x7F)
    {
      v4[1] = v17 | 0x80;
      unint64_t v18 = v17 >> 7;
      if (v17 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v18 | 0x80;
          unint64_t v19 = v18 >> 7;
          ++v4;
          unint64_t v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v4 - 1) = v19;
      }
      else
      {
        v4[2] = v18;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v17;
      v4 += 2;
    }
  }
  uint64_t v21 = *((void *)this + 1);
  if ((v21 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 23) < 0)
  {
    uint64_t v25 = *(void **)v23;
    uint64_t v24 = *(void *)(v23 + 8);
  }
  else
  {
    LODWORD(v24) = *(unsigned __int8 *)(v23 + 23);
    uint64_t v25 = (void *)v23;
  }
  if (*(void *)a3 - (void)v4 >= (int)v24)
  {
    uint64_t v26 = (int)v24;
    memcpy(v4, v25, (int)v24);
    v4 += v26;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v25, v24, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_AssertResponse::ByteSizeLong(protobuf::FlowTest_AssertResponse *this)
{
  int v2 = *((_DWORD *)this + 8);
  if (v2 < 1)
  {
    uint64_t v4 = *((unsigned int *)this + 8);
  }
  else
  {
    int v3 = 0;
    uint64_t v4 = *((unsigned int *)this + 8);
    do
    {
      uint64_t v5 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, v3);
      uint64_t v6 = *(unsigned __int8 *)(v5 + 23);
      if ((v6 & 0x80u) != 0) {
        uint64_t v6 = *(void *)(v5 + 8);
      }
      v4 += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6);
      ++v3;
    }
    while (v2 != v3);
  }
  uint64_t v7 = *((unsigned int *)this + 14);
  uint64_t v8 = v4 + v7;
  if ((int)v7 >= 1)
  {
    int v9 = 0;
    do
    {
      uint64_t v10 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, v9);
      uint64_t v11 = *(unsigned __int8 *)(v10 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v10 + 8);
      }
      v8 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6);
      ++v9;
    }
    while (v7 != v9);
  }
  int v12 = *((_DWORD *)this + 4);
  if ((v12 & 3) != 0)
  {
    if (v12)
    {
      uint64_t v13 = *((void *)this + 9);
      uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
      uint64_t v15 = *(void *)(v13 + 8);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = v14;
      }
      v8 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v12 & 2) != 0)
    {
      int v16 = *((_DWORD *)this + 20);
      uint64_t v17 = ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
      if (v16 >= 0) {
        uint64_t v18 = v17;
      }
      else {
        uint64_t v18 = 11;
      }
      v8 += v18;
    }
  }
  uint64_t v19 = *((void *)this + 1);
  if (v19)
  {
    unint64_t v21 = v19 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v21 + 23) < 0) {
      uint64_t v22 = *(void *)(v21 + 8);
    }
    else {
      uint64_t v22 = *(unsigned __int8 *)(v21 + 23);
    }
    v8 += v22;
  }
  *((_DWORD *)this + 5) = v8;
  return v8;
}

void protobuf::FlowTest_AssertResponse::CheckTypeAndMergeFrom(protobuf::FlowTest_AssertResponse *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_AssertResponse::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_AssertResponse::MergeFrom(protobuf::FlowTest_AssertResponse *this, const protobuf::FlowTest_AssertResponse *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1279);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 24, (uint64_t)a2 + 24);
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<std::string>::TypeHandler>((uint64_t)this + 48, (uint64_t)a2 + 48);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 9);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 9);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 72, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0) {
      *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *((_DWORD *)a2 + 20);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_239ADA8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_AssertResponse::CopyFrom(protobuf::FlowTest_AssertResponse *this, const protobuf::FlowTest_AssertResponse *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_AssertResponse::Clear(this);
    protobuf::FlowTest_AssertResponse::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_AssertResponse::IsInitialized(protobuf::FlowTest_AssertResponse *this)
{
  return 1;
}

void protobuf::FlowTest_AssertResponse::InternalSwap(protobuf::FlowTest_AssertResponse *this, protobuf::FlowTest_AssertResponse *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v20;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_AssertResponse *)((char *)this + 24), (protobuf::FlowTest_AssertResponse *)((char *)a2 + 24));
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_AssertResponse *)((char *)this + 48), (protobuf::FlowTest_AssertResponse *)((char *)a2 + 48));
  uint64_t v13 = (uint64_t *)*((void *)this + 9);
  uint64_t v14 = (uint64_t **)((char *)a2 + 72);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 9);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 9, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_14:
  int v19 = *((_DWORD *)this + 20);
  *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = *((_DWORD *)a2 + 20);
  *((_DWORD *)a2 + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v19;
}

void *protobuf::FlowTest_AssertResponse::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.AssertResponse");
}

protobuf::FlowTest_AssertCondition *protobuf::FlowTest_AssertCondition::FlowTest_AssertCondition(protobuf::FlowTest_AssertCondition *this)
{
  *(void *)this = &unk_26ED29F90;
  *((void *)this + 1) = 0;
  *((void *)this + 2) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_AssertCondition_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertCondition_flowtest_2eproto);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  *((unsigned char *)this + 32) = 0;
  return this;
}

void sub_239ADAB2C(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_AssertCondition *protobuf::FlowTest_AssertCondition::FlowTest_AssertCondition(protobuf::FlowTest_AssertCondition *this, const protobuf::FlowTest_AssertCondition *a2)
{
  *(void *)this = &unk_26ED29F90;
  *((void *)this + 1) = 0;
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 5) = 0;
  uint64_t v4 = *((void *)a2 + 1);
  if (v4) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v4 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 3) = &google::protobuf::internal::fixed_address_empty_string;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v5 = (uint64_t *)*((void *)a2 + 3);
    if (v5 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v5);
    }
  }
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  return this;
}

void sub_239ADABE4(_Unwind_Exception *a1)
{
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_AssertCondition::~FlowTest_AssertCondition(protobuf::FlowTest_AssertCondition *this)
{
  *(void *)this = &unk_26ED29F90;
  uint64_t v2 = *((void *)this + 3);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_AssertCondition::~FlowTest_AssertCondition(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_AssertCondition::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_AssertCondition::default_instance(protobuf::FlowTest_AssertCondition *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_AssertCondition_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_AssertCondition_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_AssertCondition_default_instance_;
}

void protobuf::FlowTest_AssertCondition::Clear(protobuf::FlowTest_AssertCondition *this)
{
  if (*((unsigned char *)this + 16))
  {
    uint64_t v1 = *((void *)this + 3);
    if (*(char *)(v1 + 23) < 0)
    {
      **(unsigned char **)uint64_t v1 = 0;
      *(void *)(v1 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v1 = 0;
      *(unsigned char *)(v1 + 23) = 0;
    }
  }
  char v3 = *((unsigned char *)this + 8);
  uint64_t v2 = (char *)this + 8;
  v2[24] = 0;
  *((_DWORD *)v2 + 2) = 0;
  if (v3) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear((google::protobuf::internal::InternalMetadataWithArenaLite *)v2);
  }
}

google::protobuf::internal *protobuf::FlowTest_AssertCondition::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  uint64_t v18 = a2;
  int v5 = 0;
  if ((google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v18, *((_DWORD *)this + 23)) & 1) == 0)
  {
    while (1)
    {
      TagFallbacint k = (google::protobuf::internal *)((char *)v18 + 1);
      LODWORD(v8) = *(unsigned __int8 *)v18;
      if ((*(char *)v18 & 0x80000000) == 0) {
        goto LABEL_7;
      }
      unint64_t v8 = (const char *)(v8 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        break;
      }
      TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v18, v8);
      uint64_t v18 = TagFallback;
      if (!TagFallback) {
        goto LABEL_3;
      }
LABEL_8:
      if (v8 >> 3 != 2)
      {
        if (v8 >> 3 == 1 && v8 == 10)
        {
          *(_DWORD *)(a1 + 16) |= 1u;
          uint64_t v15 = *(std::string **)(a1 + 24);
          if (v15 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 24, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
          }
          uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v15, (std::string::value_type *)TagFallback, (uint64_t)this);
        }
        else
        {
LABEL_13:
          if (v8) {
            BOOL v10 = (v8 & 7) == 4;
          }
          else {
            BOOL v10 = 1;
          }
          if (v10)
          {
            *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
            goto LABEL_3;
          }
          uint64_t v11 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), TagFallback, this);
        }
        uint64_t v18 = v11;
        if (!v11) {
          goto LABEL_32;
        }
        goto LABEL_27;
      }
      if (v8 != 16) {
        goto LABEL_13;
      }
      v5 |= 2u;
      int v12 = (google::protobuf::internal *)((char *)TagFallback + 1);
      unint64_t v13 = *(unsigned __int8 *)TagFallback;
      if ((*(char *)TagFallback & 0x80000000) == 0) {
        goto LABEL_22;
      }
      int v14 = *(char *)v12;
      unint64_t v13 = v13 + (v14 << 7) - 128;
      if ((v14 & 0x80000000) == 0)
      {
        int v12 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_22:
        uint64_t v18 = v12;
        *(unsigned char *)(a1 + 32) = v13 != 0;
        goto LABEL_27;
      }
      uint64_t v16 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v13);
      uint64_t v18 = v16;
      *(unsigned char *)(a1 + 32) = v17 != 0;
      if (!v16)
      {
LABEL_32:
        TagFallbacint k = 0;
        goto LABEL_3;
      }
LABEL_27:
      if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v18, *((_DWORD *)this + 23)))goto LABEL_2; {
    }
      }
    TagFallbacint k = (google::protobuf::internal *)((char *)v18 + 2);
LABEL_7:
    uint64_t v18 = TagFallback;
    goto LABEL_8;
  }
LABEL_2:
  TagFallbacint k = v18;
LABEL_3:
  *(_DWORD *)(a1 + 16) |= v5;
  return TagFallback;
}

unsigned __int8 *protobuf::FlowTest_AssertCondition::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_AssertCondition *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6) {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 3), a2);
  }
  if ((v6 & 2) != 0)
  {
    if ((unint64_t)v4 >= *(void *)a3) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    char v7 = *((unsigned char *)this + 32);
    char *v4 = 16;
    v4[1] = v7;
    v4 += 2;
  }
  uint64_t v8 = *((void *)this + 1);
  if ((v8 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v10 + 23) < 0)
  {
    int v12 = *(void **)v10;
    uint64_t v11 = *(void *)(v10 + 8);
  }
  else
  {
    LODWORD(v11) = *(unsigned __int8 *)(v10 + 23);
    int v12 = (void *)v10;
  }
  if (*(void *)a3 - (void)v4 >= (int)v11)
  {
    uint64_t v13 = (int)v11;
    memcpy(v4, v12, (int)v11);
    v4 += v13;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v12, v11, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_AssertCondition::ByteSizeLong(protobuf::FlowTest_AssertCondition *this)
{
  int v1 = *((_DWORD *)this + 4);
  if ((v1 & 3) != 0)
  {
    if (v1)
    {
      uint64_t v4 = *((void *)this + 3);
      uint64_t v5 = *(unsigned __int8 *)(v4 + 23);
      uint64_t v6 = *(void *)(v4 + 8);
      if ((v5 & 0x80u) == 0) {
        uint64_t v6 = v5;
      }
      uint64_t v2 = v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    else
    {
      uint64_t v2 = 0;
    }
    if ((v1 & 2) != 0) {
      uint64_t v3 = v2 + 2;
    }
    else {
      uint64_t v3 = v2;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v7 = *((void *)this + 1);
  if (v7)
  {
    unint64_t v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 23) < 0) {
      uint64_t v10 = *(void *)(v9 + 8);
    }
    else {
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
    }
    v3 += v10;
  }
  *((_DWORD *)this + 5) = v3;
  return v3;
}

void protobuf::FlowTest_AssertCondition::CheckTypeAndMergeFrom(protobuf::FlowTest_AssertCondition *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_AssertCondition::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_AssertCondition::MergeFrom(protobuf::FlowTest_AssertCondition *this, const protobuf::FlowTest_AssertCondition *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1508);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 3);
      *((_DWORD *)this + 4) |= 1u;
      uint64_t v8 = (const std::string *)*((void *)a2 + 3);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 24, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0) {
      *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_239ADB250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_AssertCondition::CopyFrom(protobuf::FlowTest_AssertCondition *this, const protobuf::FlowTest_AssertCondition *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_AssertCondition::Clear(this);
    protobuf::FlowTest_AssertCondition::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_AssertCondition::IsInitialized(protobuf::FlowTest_AssertCondition *this)
{
  return 1;
}

void protobuf::FlowTest_AssertCondition::InternalSwap(protobuf::FlowTest_AssertCondition *this, protobuf::FlowTest_AssertCondition *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v20;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = (uint64_t *)*((void *)this + 3);
  int v13 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v13;
  int v14 = (uint64_t **)((char *)a2 + 24);
  if (v12 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v12 = (uint64_t *)*((void *)this + 3);
  }
  uint64_t v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 3, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v16 = v12[2];
  long long v17 = *(_OWORD *)v12;
  uint64_t v18 = v15[2];
  *(_OWORD *)int v12 = *(_OWORD *)v15;
  uint64_t v12[2] = v18;
  *(_OWORD *)uint64_t v15 = v17;
  v15[2] = v16;
LABEL_14:
  char v19 = *((unsigned char *)this + 32);
  *((unsigned char *)this + 32) = *((unsigned char *)a2 + 32);
  *((unsigned char *)a2 + 32) = v19;
}

void *protobuf::FlowTest_AssertCondition::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.AssertCondition");
}

void protobuf::FlowTest_Step::InitAsDefaultInstance(protobuf::FlowTest_Step *this)
{
  qword_268A0BB68 = (uint64_t)&protobuf::_FlowTest_StartFrom_default_instance_;
  unk_268A0BB70 = &protobuf::_FlowTest_SendIntent_default_instance_;
  qword_268A0BB78 = (uint64_t)&protobuf::_FlowTest_AssertResponse_default_instance_;
  unk_268A0BB80 = &protobuf::_FlowTest_AssertCondition_default_instance_;
}

uint64_t protobuf::FlowTest_Step::_Internal::start_from(protobuf::FlowTest_Step::_Internal *this, const protobuf::FlowTest_Step *a2)
{
  return *((void *)this + 6);
}

uint64_t protobuf::FlowTest_Step::_Internal::send_intent(protobuf::FlowTest_Step::_Internal *this, const protobuf::FlowTest_Step *a2)
{
  return *((void *)this + 7);
}

uint64_t protobuf::FlowTest_Step::_Internal::assert_response(protobuf::FlowTest_Step::_Internal *this, const protobuf::FlowTest_Step *a2)
{
  return *((void *)this + 8);
}

uint64_t protobuf::FlowTest_Step::_Internal::assert_condition(protobuf::FlowTest_Step::_Internal *this, const protobuf::FlowTest_Step *a2)
{
  return *((void *)this + 9);
}

protobuf::FlowTest_Step *protobuf::FlowTest_Step::FlowTest_Step(protobuf::FlowTest_Step *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26ED2A020;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_Step_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_Step_flowtest_2eproto);
  }
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  return this;
}

void sub_239ADB4EC(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_Step *protobuf::FlowTest_Step::FlowTest_Step(protobuf::FlowTest_Step *this, const protobuf::FlowTest_Step *a2)
{
  *(void *)this = &unk_26ED2A020;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    if (!*((void *)a2 + 6))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2570);
      unint64_t v7 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || start_from_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 6) = 0;
  if ((v6 & 2) != 0)
  {
    if (!*((void *)a2 + 7))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2630);
      unint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || send_intent_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 7) = 0;
  if ((v6 & 4) != 0)
  {
    if (!*((void *)a2 + 8))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2690);
      uint64_t v9 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || assert_response_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 8) = 0;
  if ((v6 & 8) != 0)
  {
    if (!*((void *)a2 + 9))
    {
      google::protobuf::internal::LogMessage::LogMessage((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.h", 2750);
      long long v10 = google::protobuf::internal::LogMessage::operator<<(v13, "CHECK failed: !value || assert_condition_ != nullptr: ");
      google::protobuf::internal::LogFinisher::operator=((int)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
      google::protobuf::internal::LogMessage::~LogMessage((void **)&v13[0].__r_.__value_.__l.__data_);
    }
    operator new();
  }
  *((void *)this + 9) = 0;
  return this;
}

void sub_239ADB79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(v4);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v3);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_Step::~FlowTest_Step(protobuf::FlowTest_Step *this)
{
  *(void *)this = &unk_26ED2A020;
  if (this != (protobuf::FlowTest_Step *)&protobuf::_FlowTest_Step_default_instance_)
  {
    uint64_t v2 = *((void *)this + 6);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    uint64_t v3 = *((void *)this + 7);
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
    uint64_t v4 = *((void *)this + 8);
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    uint64_t v5 = *((void *)this + 9);
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_Step::~FlowTest_Step(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_Step::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_Step::default_instance(protobuf::FlowTest_Step *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_Step_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_Step_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_Step_default_instance_;
}

void protobuf::FlowTest_Step::Clear(protobuf::FlowTest_Step *this)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24);
  int v2 = *((_DWORD *)this + 4);
  if ((v2 & 0xF) != 0)
  {
    if (v2)
    {
      uint64_t v3 = (protobuf::FlowTest_StartFrom *)*((void *)this + 6);
      if (!v3)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1672);
        uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: start_from_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        uint64_t v3 = (protobuf::FlowTest_StartFrom *)*((void *)this + 6);
      }
      protobuf::FlowTest_StartFrom::Clear(v3);
    }
    if ((v2 & 2) != 0)
    {
      uint64_t v5 = (protobuf::FlowTest_SendIntent *)*((void *)this + 7);
      if (!v5)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1676);
        int v6 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: send_intent_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v6->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        uint64_t v5 = (protobuf::FlowTest_SendIntent *)*((void *)this + 7);
      }
      protobuf::FlowTest_SendIntent::Clear(v5);
    }
    if ((v2 & 4) != 0)
    {
      unint64_t v7 = (protobuf::FlowTest_AssertResponse *)*((void *)this + 8);
      if (!v7)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1680);
        unint64_t v8 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: assert_response_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        unint64_t v7 = (protobuf::FlowTest_AssertResponse *)*((void *)this + 8);
      }
      protobuf::FlowTest_AssertResponse::Clear(v7);
    }
    if ((v2 & 8) != 0)
    {
      uint64_t v9 = (protobuf::FlowTest_AssertCondition *)*((void *)this + 9);
      if (!v9)
      {
        google::protobuf::internal::LogMessage::LogMessage((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1684);
        long long v10 = google::protobuf::internal::LogMessage::operator<<(v14, "CHECK failed: assert_condition_ != nullptr: ");
        google::protobuf::internal::LogFinisher::operator=((int)&v13, (const char **)&v10->__r_.__value_.__l.__data_);
        google::protobuf::internal::LogMessage::~LogMessage((void **)&v14[0].__r_.__value_.__l.__data_);
        uint64_t v9 = (protobuf::FlowTest_AssertCondition *)*((void *)this + 9);
      }
      protobuf::FlowTest_AssertCondition::Clear(v9);
    }
  }
  char v12 = *((unsigned char *)this + 8);
  uint64_t v11 = (protobuf::FlowTest_Step *)((char *)this + 8);
  *((_DWORD *)v11 + 2) = 0;
  if (v12) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v11);
  }
}

void sub_239ADBB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::FlowTest_Step::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  long long v45 = a2;
  char v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v45, *((_DWORD *)this + 23));
  __n128 result = v45;
  if ((v5 & 1) == 0)
  {
    while (2)
    {
      unint64_t v7 = (google::protobuf::internal *)((char *)result + 1);
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0)
      {
LABEL_5:
        long long v45 = v7;
        goto LABEL_6;
      }
      unint64_t v8 = (const char *)(v8 + (*(unsigned __int8 *)v7 << 7) - 128);
      if ((*(char *)v7 & 0x80000000) == 0)
      {
        unint64_t v7 = (google::protobuf::internal *)((char *)result + 2);
        goto LABEL_5;
      }
      __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      long long v45 = result;
      if (result)
      {
        unint64_t v7 = result;
LABEL_6:
        switch(v8 >> 3)
        {
          case 1u:
            if (v8 != 10) {
              goto LABEL_40;
            }
            __n128 result = (google::protobuf::internal *)((char *)v7 - 1);
            break;
          case 2u:
            if (v8 != 18) {
              goto LABEL_40;
            }
            *(_DWORD *)(a1 + 16) |= 1u;
            started = *(protobuf::FlowTest_StartFrom **)(a1 + 48);
            if (!started)
            {
              started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
              *(void *)(a1 + 48) = started;
              unint64_t v7 = v45;
            }
            unsigned int v17 = *(unsigned __int8 *)v7;
            if (*(char *)v7 < 0)
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v7, (const char *)*(unsigned __int8 *)v7);
              if (!result) {
                return result;
              }
              uint64_t v18 = (char *)result;
              unsigned int v17 = v29;
            }
            else
            {
              uint64_t v18 = (char *)v7 + 1;
            }
            int v30 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v18, v17);
            int v31 = *((_DWORD *)this + 22);
            BOOL v32 = __OFSUB__(v31--, 1);
            *((_DWORD *)this + 22) = v31;
            if (v31 < 0 != v32) {
              return 0;
            }
            int v33 = v30;
            __n128 result = protobuf::FlowTest_StartFrom::_InternalParse((uint64_t)started, (google::protobuf::internal *)v18, this);
            if (result) {
              goto LABEL_67;
            }
            return result;
          case 3u:
            if (v8 != 26) {
              goto LABEL_40;
            }
            *(_DWORD *)(a1 + 16) |= 2u;
            char v19 = *(protobuf::FlowTest_SendIntent **)(a1 + 56);
            if (!v19)
            {
              char v19 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
              *(void *)(a1 + 56) = v19;
              unint64_t v7 = v45;
            }
            unsigned int v20 = *(unsigned __int8 *)v7;
            if (*(char *)v7 < 0)
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v7, (const char *)*(unsigned __int8 *)v7);
              if (!result) {
                return result;
              }
              unint64_t v21 = (char *)result;
              unsigned int v20 = v34;
            }
            else
            {
              unint64_t v21 = (char *)v7 + 1;
            }
            int v35 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v21, v20);
            int v36 = *((_DWORD *)this + 22);
            BOOL v32 = __OFSUB__(v36--, 1);
            *((_DWORD *)this + 22) = v36;
            if (v36 < 0 != v32) {
              return 0;
            }
            int v33 = v35;
            __n128 result = (google::protobuf::internal *)protobuf::FlowTest_SendIntent::_InternalParse((uint64_t)v19, (google::protobuf::internal *)v21, this);
            if (result) {
              goto LABEL_67;
            }
            return result;
          case 4u:
            if (v8 != 34) {
              goto LABEL_40;
            }
            *(_DWORD *)(a1 + 16) |= 4u;
            uint64_t v22 = *(protobuf::FlowTest_AssertResponse **)(a1 + 64);
            if (!v22)
            {
              uint64_t v22 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
              *(void *)(a1 + 64) = v22;
              unint64_t v7 = v45;
            }
            unsigned int v23 = *(unsigned __int8 *)v7;
            if (*(char *)v7 < 0)
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v7, (const char *)*(unsigned __int8 *)v7);
              if (!result) {
                return result;
              }
              uint64_t v24 = (char *)result;
              unsigned int v23 = v37;
            }
            else
            {
              uint64_t v24 = (char *)v7 + 1;
            }
            int v38 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v24, v23);
            int v39 = *((_DWORD *)this + 22);
            BOOL v32 = __OFSUB__(v39--, 1);
            *((_DWORD *)this + 22) = v39;
            if (v39 < 0 != v32) {
              return 0;
            }
            int v33 = v38;
            __n128 result = protobuf::FlowTest_AssertResponse::_InternalParse((uint64_t)v22, (google::protobuf::internal *)v24, this);
            if (result) {
              goto LABEL_67;
            }
            return result;
          case 5u:
            if (v8 != 42) {
              goto LABEL_40;
            }
            *(_DWORD *)(a1 + 16) |= 8u;
            uint64_t v25 = *(protobuf::FlowTest_AssertCondition **)(a1 + 72);
            if (!v25)
            {
              uint64_t v25 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(0);
              *(void *)(a1 + 72) = v25;
              unint64_t v7 = v45;
            }
            unsigned int v26 = *(unsigned __int8 *)v7;
            if (*(char *)v7 < 0)
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v7, (const char *)*(unsigned __int8 *)v7);
              if (!result) {
                return result;
              }
              unint64_t v27 = (char *)result;
              unsigned int v26 = v40;
            }
            else
            {
              unint64_t v27 = (char *)v7 + 1;
            }
            int v41 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v27, v26);
            int v42 = *((_DWORD *)this + 22);
            BOOL v32 = __OFSUB__(v42--, 1);
            *((_DWORD *)this + 22) = v42;
            if (v42 < 0 != v32) {
              return 0;
            }
            int v33 = v41;
            __n128 result = protobuf::FlowTest_AssertCondition::_InternalParse((uint64_t)v25, (google::protobuf::internal *)v27, this);
            if (result)
            {
LABEL_67:
              ++*((_DWORD *)this + 22);
              if (!*((_DWORD *)this + 20))
              {
                int v43 = *((_DWORD *)this + 7) + v33;
                *((_DWORD *)this + 7) = v43;
                *(void *)this = *((void *)this + 1) + (v43 & (v43 >> 31));
                long long v45 = result;
                goto LABEL_69;
              }
              return 0;
            }
            return result;
          default:
LABEL_40:
            if (v8) {
              BOOL v28 = (v8 & 7) == 4;
            }
            else {
              BOOL v28 = 1;
            }
            if (v28)
            {
              *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
              return v7;
            }
            else
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), v7, this);
              long long v45 = result;
              if (result)
              {
LABEL_69:
                int v44 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v45, *((_DWORD *)this + 23));
                __n128 result = v45;
                if (!v44) {
                  continue;
                }
              }
            }
            return result;
        }
        while (1)
        {
          uint64_t v9 = (google::protobuf::internal *)((char *)result + 1);
          long long v45 = (google::protobuf::internal *)((char *)result + 1);
          long long v10 = *(int **)(a1 + 40);
          if (!v10) {
            break;
          }
          uint64_t v11 = *(int *)(a1 + 32);
          int v12 = *v10;
          if ((int)v11 < *v10)
          {
            *(_DWORD *)(a1 + 32) = v11 + 1;
            char v13 = *(protobuf::FlowTest_KeyValueParameter **)&v10[2 * v11 + 2];
            goto LABEL_16;
          }
          if (v12 == *(_DWORD *)(a1 + 36)) {
            goto LABEL_14;
          }
LABEL_15:
          *long long v10 = v12 + 1;
          char v13 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
          uint64_t v14 = *(void *)(a1 + 40);
          uint64_t v15 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v15 + 1;
          *(void *)(v14 + 8 * v15 + 8) = v13;
          uint64_t v9 = v45;
LABEL_16:
          __n128 result = (google::protobuf::internal *)google::protobuf::internal::ParseContext::ParseMessage<protobuf::FlowTest_KeyValueParameter>(this, (uint64_t)v13, v9);
          long long v45 = result;
          if (!result) {
            return result;
          }
          if (*(void *)this <= (unint64_t)result || *(unsigned char *)result != 10) {
            goto LABEL_69;
          }
        }
        int v12 = *(_DWORD *)(a1 + 36);
LABEL_14:
        google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v12 + 1);
        long long v10 = *(int **)(a1 + 40);
        int v12 = *v10;
        goto LABEL_15;
      }
      break;
    }
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest_Step::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_Step *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  int v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if ((unint64_t)a2 >= *(void *)a3) {
        a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
      }
      unint64_t v8 = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((uint64_t)this + 24, i);
      *a2 = 10;
      unsigned int v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          long long v10 = (unsigned __int8 *)(a2 + 3);
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          long long v10 = (unsigned __int8 *)(a2 + 3);
        }
      }
      else
      {
        a2[1] = v9;
        long long v10 = (unsigned __int8 *)(a2 + 2);
      }
      a2 = (char *)protobuf::FlowTest_KeyValueParameter::InternalSerializeWithCachedSizesToArray(v8, (char *)v10, a3);
    }
  }
  int v14 = *((_DWORD *)this + 4);
  if (v14)
  {
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    uint64_t v15 = (protobuf::FlowTest_StartFrom *)*((void *)this + 6);
    *a2 = 18;
    unsigned int v16 = *((_DWORD *)v15 + 5);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      unsigned int v18 = v16 >> 7;
      if (v16 >> 14)
      {
        unsigned int v17 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v17 - 1) = v18 | 0x80;
          unsigned int v19 = v18 >> 7;
          ++v17;
          unsigned int v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        unsigned int v17 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v16;
      unsigned int v17 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)protobuf::FlowTest_StartFrom::InternalSerializeWithCachedSizesToArray(v15, (char *)v17, a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0) {
        goto LABEL_16;
      }
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if ((unint64_t)a2 >= *(void *)a3) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unint64_t v21 = (protobuf::FlowTest_SendIntent *)*((void *)this + 7);
  *a2 = 26;
  unsigned int v22 = *((_DWORD *)v21 + 5);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    unsigned int v24 = v22 >> 7;
    if (v22 >> 14)
    {
      unsigned int v23 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v23 - 1) = v24 | 0x80;
        unsigned int v25 = v24 >> 7;
        ++v23;
        unsigned int v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      unsigned int v23 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v22;
    unsigned int v23 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)protobuf::FlowTest_SendIntent::InternalSerializeWithCachedSizesToArray(v21, (char *)v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0) {
      goto LABEL_58;
    }
    goto LABEL_48;
  }
LABEL_38:
  if ((unint64_t)a2 >= *(void *)a3) {
    a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
  }
  unint64_t v27 = (protobuf::FlowTest_AssertResponse *)*((void *)this + 8);
  *a2 = 34;
  unsigned int v28 = *((_DWORD *)v27 + 5);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    unsigned int v30 = v28 >> 7;
    if (v28 >> 14)
    {
      unsigned int v29 = (unsigned __int8 *)(a2 + 3);
      do
      {
        *(v29 - 1) = v30 | 0x80;
        unsigned int v31 = v30 >> 7;
        ++v29;
        unsigned int v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      unsigned int v29 = (unsigned __int8 *)(a2 + 3);
    }
  }
  else
  {
    a2[1] = v28;
    unsigned int v29 = (unsigned __int8 *)(a2 + 2);
  }
  a2 = (char *)protobuf::FlowTest_AssertResponse::InternalSerializeWithCachedSizesToArray(v27, (char *)v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if ((unint64_t)a2 >= *(void *)a3) {
      a2 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, a2);
    }
    int v33 = (protobuf::FlowTest_AssertCondition *)*((void *)this + 9);
    *a2 = 42;
    unsigned int v34 = *((_DWORD *)v33 + 5);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      unsigned int v36 = v34 >> 7;
      if (v34 >> 14)
      {
        int v35 = (unsigned __int8 *)(a2 + 3);
        do
        {
          *(v35 - 1) = v36 | 0x80;
          unsigned int v37 = v36 >> 7;
          ++v35;
          unsigned int v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        int v35 = (unsigned __int8 *)(a2 + 3);
      }
    }
    else
    {
      a2[1] = v34;
      int v35 = (unsigned __int8 *)(a2 + 2);
    }
    a2 = (char *)protobuf::FlowTest_AssertCondition::InternalSerializeWithCachedSizesToArray(v33, (char *)v35, a3);
  }
LABEL_58:
  uint64_t v39 = *((void *)this + 1);
  if ((v39 & 1) == 0) {
    return (unsigned __int8 *)a2;
  }
  unint64_t v41 = v39 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v41 + 23) < 0)
  {
    int v43 = *(void **)v41;
    uint64_t v42 = *(void *)(v41 + 8);
  }
  else
  {
    LODWORD(v42) = *(unsigned __int8 *)(v41 + 23);
    int v43 = (void *)v41;
  }
  if (*(void *)a3 - (void)a2 >= (int)v42)
  {
    uint64_t v44 = (int)v42;
    memcpy(a2, v43, (int)v42);
    a2 += v44;
    return (unsigned __int8 *)a2;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v43, v42, (unsigned __int8 *)a2);
}

uint64_t protobuf::FlowTest_Step::ByteSizeLong(protobuf::FlowTest_Step *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (protobuf::FlowTest_KeyValueParameter **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = protobuf::FlowTest_KeyValueParameter::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 4);
  if ((v8 & 0xF) == 0) {
    goto LABEL_15;
  }
  if ((v8 & 1) == 0)
  {
    if ((v8 & 2) == 0) {
      goto LABEL_12;
    }
LABEL_18:
    uint64_t v13 = protobuf::FlowTest_SendIntent::ByteSizeLong(*((protobuf::FlowTest_SendIntent **)this + 7));
    v2 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v8 & 4) == 0)
    {
LABEL_13:
      if ((v8 & 8) == 0) {
        goto LABEL_15;
      }
      goto LABEL_14;
    }
    goto LABEL_19;
  }
  uint64_t v12 = protobuf::FlowTest_StartFrom::ByteSizeLong(*((protobuf::FlowTest_StartFrom **)this + 6));
  v2 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 2) != 0) {
    goto LABEL_18;
  }
LABEL_12:
  if ((v8 & 4) == 0) {
    goto LABEL_13;
  }
LABEL_19:
  uint64_t v14 = protobuf::FlowTest_AssertResponse::ByteSizeLong(*((protobuf::FlowTest_AssertResponse **)this + 8));
  v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v8 & 8) != 0)
  {
LABEL_14:
    uint64_t v9 = protobuf::FlowTest_AssertCondition::ByteSizeLong(*((protobuf::FlowTest_AssertCondition **)this + 9));
    v2 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_15:
  uint64_t v10 = *((void *)this + 1);
  if (v10)
  {
    unint64_t v15 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 23) < 0) {
      uint64_t v16 = *(void *)(v15 + 8);
    }
    else {
      uint64_t v16 = *(unsigned __int8 *)(v15 + 23);
    }
    v2 += v16;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_Step::CheckTypeAndMergeFrom(protobuf::FlowTest_Step *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_Step::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_Step::MergeFrom(protobuf::FlowTest_Step *this, const protobuf::FlowTest_Step *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 1878);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v16, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v15, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v16[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) == 0) {
    return;
  }
  if ((v6 & 1) == 0)
  {
    if ((v6 & 2) == 0) {
      goto LABEL_8;
    }
LABEL_17:
    *((_DWORD *)this + 4) |= 2u;
    uint64_t v9 = (protobuf::FlowTest_SendIntent *)*((void *)this + 7);
    if (!v9)
    {
      uint64_t v9 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
      *((void *)this + 7) = v9;
    }
    if (*((void *)a2 + 7)) {
      uint64_t v10 = (const protobuf::FlowTest_SendIntent *)*((void *)a2 + 7);
    }
    else {
      uint64_t v10 = (const protobuf::FlowTest_SendIntent *)&protobuf::_FlowTest_SendIntent_default_instance_;
    }
    protobuf::FlowTest_SendIntent::MergeFrom(v9, v10);
    if ((v6 & 4) == 0)
    {
LABEL_9:
      if ((v6 & 8) == 0) {
        return;
      }
      goto LABEL_29;
    }
    goto LABEL_23;
  }
  *((_DWORD *)this + 4) |= 1u;
  started = (protobuf::FlowTest_StartFrom *)*((void *)this + 6);
  if (!started)
  {
    started = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
    *((void *)this + 6) = started;
  }
  if (*((void *)a2 + 6)) {
    int v8 = (const protobuf::FlowTest_StartFrom *)*((void *)a2 + 6);
  }
  else {
    int v8 = (const protobuf::FlowTest_StartFrom *)&protobuf::_FlowTest_StartFrom_default_instance_;
  }
  protobuf::FlowTest_StartFrom::MergeFrom(started, v8);
  if ((v6 & 2) != 0) {
    goto LABEL_17;
  }
LABEL_8:
  if ((v6 & 4) == 0) {
    goto LABEL_9;
  }
LABEL_23:
  *((_DWORD *)this + 4) |= 4u;
  unsigned int v11 = (protobuf::FlowTest_AssertResponse *)*((void *)this + 8);
  if (!v11)
  {
    unsigned int v11 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
    *((void *)this + 8) = v11;
  }
  if (*((void *)a2 + 8)) {
    uint64_t v12 = (const protobuf::FlowTest_AssertResponse *)*((void *)a2 + 8);
  }
  else {
    uint64_t v12 = (const protobuf::FlowTest_AssertResponse *)&protobuf::_FlowTest_AssertResponse_default_instance_;
  }
  protobuf::FlowTest_AssertResponse::MergeFrom(v11, v12);
  if ((v6 & 8) != 0)
  {
LABEL_29:
    *((_DWORD *)this + 4) |= 8u;
    uint64_t v13 = (protobuf::FlowTest_AssertCondition *)*((void *)this + 9);
    if (!v13)
    {
      uint64_t v13 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(0);
      *((void *)this + 9) = v13;
    }
    if (*((void *)a2 + 9)) {
      uint64_t v14 = (const protobuf::FlowTest_AssertCondition *)*((void *)a2 + 9);
    }
    else {
      uint64_t v14 = (const protobuf::FlowTest_AssertCondition *)&protobuf::_FlowTest_AssertCondition_default_instance_;
    }
    protobuf::FlowTest_AssertCondition::MergeFrom(v13, v14);
  }
}

void sub_239ADC80C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_Step::CopyFrom(protobuf::FlowTest_Step *this, const protobuf::FlowTest_Step *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_Step::Clear(this);
    protobuf::FlowTest_Step::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_Step::IsInitialized(protobuf::FlowTest_Step *this)
{
  return 1;
}

void protobuf::FlowTest_Step::InternalSwap(protobuf::FlowTest_Step *this, protobuf::FlowTest_Step *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v17;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
LABEL_10:
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    goto LABEL_8;
  }
  unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
  if ((v4 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_6:
  unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
  uint64_t v9 = *(void *)(v8 + 16);
  long long v10 = *(_OWORD *)v8;
  uint64_t v11 = *(void *)(v7 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
  *(void *)(v8 + 16) = v11;
  *(_OWORD *)unint64_t v7 = v10;
  *(void *)(v7 + 16) = v9;
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_Step *)((char *)this + 24), (protobuf::FlowTest_Step *)((char *)a2 + 24));
  uint64_t v13 = *((void *)this + 6);
  *((void *)this + 6) = *((void *)a2 + 6);
  *((void *)a2 + 6) = v13;
  uint64_t v14 = *((void *)this + 7);
  *((void *)this + 7) = *((void *)a2 + 7);
  *((void *)a2 + 7) = v14;
  uint64_t v15 = *((void *)this + 8);
  *((void *)this + 8) = *((void *)a2 + 8);
  *((void *)a2 + 8) = v15;
  uint64_t v16 = *((void *)this + 9);
  *((void *)this + 9) = *((void *)a2 + 9);
  *((void *)a2 + 9) = v16;
}

void *protobuf::FlowTest_Step::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.Step");
}

protobuf::FlowTest_Test *protobuf::FlowTest_Test::FlowTest_Test(protobuf::FlowTest_Test *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26ED2A0B0;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_Test_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_Test_flowtest_2eproto);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  *((void *)this + 8) = 0;
  return this;
}

void sub_239ADCA10(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_Test *protobuf::FlowTest_Test::FlowTest_Test(protobuf::FlowTest_Test *this, const protobuf::FlowTest_Test *a2)
{
  *(void *)this = &unk_26ED2A0B0;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  int v6 = *((_DWORD *)a2 + 4);
  if (v6)
  {
    unint64_t v7 = (uint64_t *)*((void *)a2 + 6);
    if (v7 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v7);
    }
  }
  *((void *)this + 7) = &google::protobuf::internal::fixed_address_empty_string;
  if ((v6 & 2) != 0)
  {
    unint64_t v8 = (uint64_t *)*((void *)a2 + 7);
    if (v8 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v8);
    }
  }
  *((void *)this + 8) = *((void *)a2 + 8);
  return this;
}

void sub_239ADCB18(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_Test::~FlowTest_Test(protobuf::FlowTest_Test *this)
{
  *(void *)this = &unk_26ED2A0B0;
  uint64_t v2 = *((void *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  uint64_t v4 = *((void *)this + 7);
  if ((uint64_t *)v4 != &google::protobuf::internal::fixed_address_empty_string && v4 != 0)
  {
    if (*(char *)(v4 + 23) < 0) {
      operator delete(*(void **)v4);
    }
    MEMORY[0x23ECAACC0](v4, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest_Test::~FlowTest_Test(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest_Test::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest_Test::default_instance(protobuf::FlowTest_Test *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_Test_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_Test_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_Test_default_instance_;
}

void protobuf::FlowTest_Test::Clear(protobuf::FlowTest_Test *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (protobuf::FlowTest_Step **)(*((void *)this + 5) + 8);
    do
    {
      uint64_t v4 = *v3++;
      protobuf::FlowTest_Step::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  int v6 = *((_DWORD *)this + 4);
  if ((v6 & 3) != 0)
  {
    if (v6)
    {
      uint64_t v7 = *((void *)this + 6);
      if (*(char *)(v7 + 23) < 0)
      {
        **(unsigned char **)uint64_t v7 = 0;
        *(void *)(v7 + 8) = 0;
        if ((v6 & 2) == 0) {
          goto LABEL_17;
        }
        goto LABEL_12;
      }
      *(unsigned char *)uint64_t v7 = 0;
      *(unsigned char *)(v7 + 23) = 0;
    }
    if ((v6 & 2) == 0) {
      goto LABEL_17;
    }
LABEL_12:
    uint64_t v8 = *((void *)this + 7);
    if (*(char *)(v8 + 23) < 0)
    {
      **(unsigned char **)uint64_t v8 = 0;
      *(void *)(v8 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v8 = 0;
      *(unsigned char *)(v8 + 23) = 0;
    }
  }
LABEL_17:
  if ((v6 & 0xC) != 0) {
    *((void *)this + 8) = 0;
  }
  char v10 = *((unsigned char *)this + 8);
  uint64_t v9 = (protobuf::FlowTest_Test *)((char *)this + 8);
  *((_DWORD *)v9 + 2) = 0;
  if (v10)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v9);
  }
}

void sub_239ADCDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::FlowTest_Test::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  unsigned int v40 = a2;
  int v5 = 0;
  if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v40, *((_DWORD *)this + 23)))
  {
LABEL_2:
    TagFallbacint k = v40;
    goto LABEL_58;
  }
  while (2)
  {
    TagFallbacint k = (google::protobuf::internal *)((char *)v40 + 1);
    LODWORD(v7) = *(unsigned __int8 *)v40;
    if (*(char *)v40 < 0)
    {
      uint64_t v7 = (const char *)(v7 + (*(unsigned __int8 *)TagFallback << 7) - 128);
      if (*(char *)TagFallback < 0)
      {
        TagFallbacint k = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(v40, v7);
        unsigned int v40 = TagFallback;
        if (!TagFallback) {
          goto LABEL_58;
        }
        goto LABEL_7;
      }
      TagFallbacint k = (google::protobuf::internal *)((char *)v40 + 2);
    }
    unsigned int v40 = TagFallback;
LABEL_7:
    switch(v7 >> 3)
    {
      case 1u:
        if (v7 != 10) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 1u;
        uint64_t v8 = *(std::string **)(a1 + 48);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 48, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        goto LABEL_14;
      case 2u:
        if (v7 != 18) {
          goto LABEL_44;
        }
        *(_DWORD *)(a1 + 16) |= 2u;
        uint64_t v8 = *(std::string **)(a1 + 56);
        if (v8 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 56, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
LABEL_14:
        uint64_t v9 = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v8, (std::string::value_type *)TagFallback, (uint64_t)this);
        goto LABEL_49;
      case 3u:
        if (v7 != 24) {
          goto LABEL_44;
        }
        v5 |= 4u;
        char v10 = (google::protobuf::internal *)((char *)TagFallback + 1);
        unint64_t v11 = *(unsigned __int8 *)TagFallback;
        if ((*(char *)TagFallback & 0x80000000) == 0) {
          goto LABEL_19;
        }
        int v12 = *(char *)v10;
        unint64_t v11 = v11 + (v12 << 7) - 128;
        if (v12 < 0)
        {
          int v35 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v11);
          unsigned int v40 = v35;
          *(unsigned char *)(a1 + 64) = v36 != 0;
          if (!v35) {
            goto LABEL_57;
          }
        }
        else
        {
          char v10 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_19:
          unsigned int v40 = v10;
          *(unsigned char *)(a1 + 64) = v11 != 0;
        }
        goto LABEL_50;
      case 4u:
        if (v7 != 34) {
          goto LABEL_44;
        }
        uint64_t v13 = (google::protobuf::internal *)((char *)TagFallback - 1);
        while (2)
        {
          uint64_t v14 = (google::protobuf::internal *)((char *)v13 + 1);
          unsigned int v40 = v14;
          uint64_t v15 = *(int **)(a1 + 40);
          if (!v15)
          {
            int v17 = *(_DWORD *)(a1 + 36);
LABEL_27:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v17 + 1);
            uint64_t v15 = *(int **)(a1 + 40);
            int v17 = *v15;
            goto LABEL_28;
          }
          uint64_t v16 = *(int *)(a1 + 32);
          int v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 32) = v16 + 1;
            unsigned int v18 = *(protobuf::FlowTest_Step **)&v15[2 * v16 + 2];
            goto LABEL_29;
          }
          if (v17 == *(_DWORD *)(a1 + 36)) {
            goto LABEL_27;
          }
LABEL_28:
          int *v15 = v17 + 1;
          unsigned int v18 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
          uint64_t v19 = *(void *)(a1 + 40);
          uint64_t v20 = *(int *)(a1 + 32);
          *(_DWORD *)(a1 + 32) = v20 + 1;
          *(void *)(v19 + 8 * v20 + 8) = v18;
          uint64_t v14 = v40;
LABEL_29:
          unsigned int v21 = *(unsigned __int8 *)v14;
          if (*(char *)v14 < 0)
          {
            SizeFallbacint k = google::protobuf::internal::ReadSizeFallback(v14, (const char *)*(unsigned __int8 *)v14);
            if (!SizeFallback) {
              break;
            }
            unsigned int v22 = SizeFallback;
            unsigned int v21 = v24;
          }
          else
          {
            unsigned int v22 = (char *)v14 + 1;
          }
          int v25 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v22, v21);
          int v26 = *((_DWORD *)this + 22);
          BOOL v27 = __OFSUB__(v26--, 1);
          *((_DWORD *)this + 22) = v26;
          if (v26 < 0 == v27)
          {
            int v28 = v25;
            uint64_t v13 = protobuf::FlowTest_Step::_InternalParse((uint64_t)v18, (google::protobuf::internal *)v22, this);
            if (v13)
            {
              ++*((_DWORD *)this + 22);
              if (!*((_DWORD *)this + 20))
              {
                int v29 = *((_DWORD *)this + 7) + v28;
                *((_DWORD *)this + 7) = v29;
                unint64_t v30 = *((void *)this + 1) + (v29 & (v29 >> 31));
                *(void *)this = v30;
                unsigned int v40 = v13;
                if (v30 <= (unint64_t)v13 || *(unsigned char *)v13 != 34) {
                  goto LABEL_50;
                }
                continue;
              }
            }
          }
          break;
        }
LABEL_57:
        TagFallbacint k = 0;
LABEL_58:
        *(_DWORD *)(a1 + 16) |= v5;
        return TagFallback;
      case 5u:
        if (v7 != 40) {
          goto LABEL_44;
        }
        v5 |= 8u;
        unsigned int v32 = (google::protobuf::internal *)((char *)TagFallback + 1);
        LODWORD(v31) = *(unsigned __int8 *)TagFallback;
        if ((v31 & 0x80) == 0) {
          goto LABEL_43;
        }
        int v33 = *(char *)v32;
        unint64_t v31 = v31 + (v33 << 7) - 128;
        if (v33 < 0)
        {
          unsigned int v37 = (google::protobuf::internal *)google::protobuf::internal::VarintParseSlow64(TagFallback, v31);
          unsigned int v40 = v37;
          *(_DWORD *)(a1 + 68) = v38;
          if (!v37) {
            goto LABEL_57;
          }
        }
        else
        {
          unsigned int v32 = (google::protobuf::internal *)((char *)TagFallback + 2);
LABEL_43:
          unsigned int v40 = v32;
          *(_DWORD *)(a1 + 68) = v31;
        }
        goto LABEL_50;
      default:
LABEL_44:
        if (v7) {
          BOOL v34 = (v7 & 7) == 4;
        }
        else {
          BOOL v34 = 1;
        }
        if (v34)
        {
          *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v7 - 1;
          goto LABEL_58;
        }
        uint64_t v9 = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v7, (unint64_t *)(a1 + 8), TagFallback, this);
LABEL_49:
        unsigned int v40 = v9;
        if (!v9) {
          goto LABEL_57;
        }
LABEL_50:
        if (google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v40, *((_DWORD *)this + 23)))goto LABEL_2; {
        continue;
        }
    }
  }
}

unsigned __int8 *protobuf::FlowTest_Test::InternalSerializeWithCachedSizesToArray(protobuf::FlowTest_Test *this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  uint64_t v4 = a2;
  int v6 = *((_DWORD *)this + 4);
  if (v6)
  {
    uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, *((const void ***)this + 6), a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0) {
        goto LABEL_10;
      }
      goto LABEL_7;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  uint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 2, *((const void ***)this + 7), v4);
  if ((v6 & 4) == 0) {
    goto LABEL_10;
  }
LABEL_7:
  if ((unint64_t)v4 >= *(void *)a3) {
    uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
  }
  char v7 = *((unsigned char *)this + 64);
  char *v4 = 24;
  v4[1] = v7;
  v4 += 2;
LABEL_10:
  int v8 = *((_DWORD *)this + 8);
  if (v8)
  {
    for (int i = 0; i != v8; ++i)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      char v10 = (protobuf::FlowTest_Step *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>((uint64_t)this + 24, i);
      char *v4 = 34;
      unsigned int v11 = *((_DWORD *)v10 + 5);
      if (v11 > 0x7F)
      {
        v4[1] = v11 | 0x80;
        unsigned int v13 = v11 >> 7;
        if (v11 >> 14)
        {
          int v12 = v4 + 3;
          do
          {
            *(v12 - 1) = v13 | 0x80;
            unsigned int v14 = v13 >> 7;
            ++v12;
            unsigned int v15 = v13 >> 14;
            v13 >>= 7;
          }
          while (v15);
          *(v12 - 1) = v14;
        }
        else
        {
          v4[2] = v13;
          int v12 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v11;
        int v12 = v4 + 2;
      }
      uint64_t v4 = (char *)protobuf::FlowTest_Step::InternalSerializeWithCachedSizesToArray(v10, v12, a3);
    }
  }
  if ((v6 & 8) != 0)
  {
    if ((unint64_t)v4 >= *(void *)a3) {
      uint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
    }
    unint64_t v16 = *((int *)this + 17);
    char *v4 = 40;
    if (v16 > 0x7F)
    {
      v4[1] = v16 | 0x80;
      unint64_t v17 = v16 >> 7;
      if (v16 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v17 | 0x80;
          unint64_t v18 = v17 >> 7;
          ++v4;
          unint64_t v19 = v17 >> 14;
          v17 >>= 7;
        }
        while (v19);
        *(v4 - 1) = v18;
      }
      else
      {
        v4[2] = v17;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v16;
      v4 += 2;
    }
  }
  uint64_t v20 = *((void *)this + 1);
  if ((v20 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v22 = v20 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v22 + 23) < 0)
  {
    unsigned int v24 = *(void **)v22;
    uint64_t v23 = *(void *)(v22 + 8);
  }
  else
  {
    LODWORD(v23) = *(unsigned __int8 *)(v22 + 23);
    unsigned int v24 = (void *)v22;
  }
  if (*(void *)a3 - (void)v4 >= (int)v23)
  {
    uint64_t v25 = (int)v23;
    memcpy(v4, v24, (int)v23);
    v4 += v25;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v24, v23, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest_Test::ByteSizeLong(protobuf::FlowTest_Test *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    uint64_t v4 = (protobuf::FlowTest_Step **)(v3 + 8);
  }
  else {
    uint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = protobuf::FlowTest_Step::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  int v8 = *((_DWORD *)this + 4);
  if ((v8 & 0xF) != 0)
  {
    if (v8)
    {
      uint64_t v9 = *((void *)this + 6);
      uint64_t v10 = *(unsigned __int8 *)(v9 + 23);
      uint64_t v11 = *(void *)(v9 + 8);
      if ((v10 & 0x80u) == 0) {
        uint64_t v11 = v10;
      }
      v2 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 2) != 0)
    {
      uint64_t v12 = *((void *)this + 7);
      uint64_t v13 = *(unsigned __int8 *)(v12 + 23);
      uint64_t v14 = *(void *)(v12 + 8);
      if ((v13 & 0x80u) == 0) {
        uint64_t v14 = v13;
      }
      v2 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v8 & 4) != 0) {
      v2 += 2;
    }
    if ((v8 & 8) != 0)
    {
      int v15 = *((_DWORD *)this + 17);
      if (v15 < 0) {
        uint64_t v16 = 11;
      }
      else {
        uint64_t v16 = ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
      }
      v2 += v16;
    }
  }
  uint64_t v17 = *((void *)this + 1);
  if (v17)
  {
    unint64_t v19 = v17 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v19 + 23) < 0) {
      uint64_t v20 = *(void *)(v19 + 8);
    }
    else {
      uint64_t v20 = *(unsigned __int8 *)(v19 + 23);
    }
    v2 += v20;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest_Test::CheckTypeAndMergeFrom(protobuf::FlowTest_Test *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest_Test::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest_Test::MergeFrom(protobuf::FlowTest_Test *this, const protobuf::FlowTest_Test *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v12, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 2205);
    uint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v12, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v11, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v12[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  int v6 = *((_DWORD *)a2 + 4);
  if ((v6 & 0xF) != 0)
  {
    if (v6)
    {
      uint64_t v7 = (std::string *)*((void *)this + 6);
      *((_DWORD *)this + 4) |= 1u;
      int v8 = (const std::string *)*((void *)a2 + 6);
      if (v7 != v8)
      {
        if (v7 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v8);
        }
        std::string::operator=(v7, v8);
      }
    }
    if ((v6 & 2) != 0)
    {
      uint64_t v9 = (std::string *)*((void *)this + 7);
      *((_DWORD *)this + 4) |= 2u;
      uint64_t v10 = (const std::string *)*((void *)a2 + 7);
      if (v9 != v10)
      {
        if (v9 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 56, (uint64_t)v10);
        }
        std::string::operator=(v9, v10);
      }
    }
    if ((v6 & 4) != 0) {
      *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
    }
    if ((v6 & 8) != 0) {
      *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
    }
    *((_DWORD *)this + 4) |= v6;
  }
}

void sub_239ADD7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest_Test::CopyFrom(protobuf::FlowTest_Test *this, const protobuf::FlowTest_Test *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest_Test::Clear(this);
    protobuf::FlowTest_Test::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest_Test::IsInitialized(protobuf::FlowTest_Test *this)
{
  return 1;
}

void protobuf::FlowTest_Test::InternalSwap(protobuf::FlowTest_Test *this, protobuf::FlowTest_Test *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v27;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_22;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_22:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest_Test *)((char *)this + 24), (protobuf::FlowTest_Test *)((char *)a2 + 24));
  uint64_t v13 = (uint64_t *)*((void *)this + 6);
  uint64_t v14 = (uint64_t **)((char *)a2 + 48);
  if (v13 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v14 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_14;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v13 = (uint64_t *)*((void *)this + 6);
  }
  int v15 = *v14;
  if (*v14 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 6, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    int v15 = *v14;
  }
  uint64_t v16 = v13[2];
  long long v17 = *(_OWORD *)v13;
  uint64_t v18 = v15[2];
  *(_OWORD *)uint64_t v13 = *(_OWORD *)v15;
  std::string v13[2] = v18;
  *(_OWORD *)int v15 = v17;
  v15[2] = v16;
LABEL_14:
  unint64_t v19 = (uint64_t *)*((void *)this + 7);
  uint64_t v20 = (uint64_t **)((char *)a2 + 56);
  if (v19 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v20 == &google::protobuf::internal::fixed_address_empty_string) {
      goto LABEL_20;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)this + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unint64_t v19 = (uint64_t *)*((void *)this + 7);
  }
  unsigned int v21 = *v20;
  if (*v20 == &google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance((std::string **)a2 + 7, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    unsigned int v21 = *v20;
  }
  uint64_t v22 = v19[2];
  long long v23 = *(_OWORD *)v19;
  uint64_t v24 = v21[2];
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v21;
  v19[2] = v24;
  *(_OWORD *)unsigned int v21 = v23;
  void v21[2] = v22;
LABEL_20:
  char v25 = *((unsigned char *)this + 64);
  *((unsigned char *)this + 64) = *((unsigned char *)a2 + 64);
  *((unsigned char *)a2 + 64) = v25;
  int v26 = *((_DWORD *)this + 17);
  *((_DWORD *)this + 17) = *((_DWORD *)a2 + 17);
  *((_DWORD *)a2 + 17) = v26;
}

void *protobuf::FlowTest_Test::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest.Test");
}

protobuf::FlowTest *protobuf::FlowTest::FlowTest(protobuf::FlowTest *this)
{
  *(_OWORD *)((char *)this + 8) = 0u;
  *(void *)this = &unk_26ED2A140;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((void *)this + 5) = 0;
  if (atomic_load_explicit(scc_info_FlowTest_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_flowtest_2eproto);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  return this;
}

void sub_239ADDAC0(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)(v1 + 24));
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest *protobuf::FlowTest::FlowTest(protobuf::FlowTest *this, const protobuf::FlowTest *a2)
{
  *(void *)this = &unk_26ED2A140;
  *((void *)this + 1) = 0;
  unint64_t v4 = (unint64_t *)((char *)this + 8);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)this + 11) = 0;
  *(void *)((char *)this + 28) = 0;
  *(void *)((char *)this + 36) = 0;
  *(void *)((char *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom(v4, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  *((void *)this + 6) = &google::protobuf::internal::fixed_address_empty_string;
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v6 = (uint64_t *)*((void *)a2 + 6);
    if (v6 != &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)this + 48, (uint64_t)v6);
    }
  }
  return this;
}

void sub_239ADDB98(_Unwind_Exception *a1)
{
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::~RepeatedPtrField(v2);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase(v1);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest::~FlowTest(protobuf::FlowTest *this)
{
  *(void *)this = &unk_26ED2A140;
  uint64_t v2 = *((void *)this + 6);
  if ((uint64_t *)v2 != &google::protobuf::internal::fixed_address_empty_string && v2 != 0)
  {
    if (*(char *)(v2 + 23) < 0) {
      operator delete(*(void **)v2);
    }
    MEMORY[0x23ECAACC0](v2, 0x1012C40EC159624);
  }
  google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::~RepeatedPtrField((google::protobuf::internal::ArenaImpl **)this + 3);
  google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::~InternalMetadataWithArenaBase((uint64_t *)this + 1);
}

{
  uint64_t vars8;

  protobuf::FlowTest::~FlowTest(this);

  JUMPOUT(0x23ECAACC0);
}

uint64_t protobuf::FlowTest::SetCachedSize(uint64_t this, int a2)
{
  *(_DWORD *)(this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

void *protobuf::FlowTest::default_instance(protobuf::FlowTest *this)
{
  if (atomic_load_explicit(scc_info_FlowTest_flowtest_2eproto, memory_order_acquire)) {
    google::protobuf::internal::InitSCCImpl(scc_info_FlowTest_flowtest_2eproto);
  }
  return &protobuf::_FlowTest_default_instance_;
}

void protobuf::FlowTest::Clear(protobuf::FlowTest *this)
{
  uint64_t v2 = *((unsigned int *)this + 8);
  if ((v2 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v10, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v9, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v10[0].__r_.__value_.__l.__data_);
  }
  else if (v2)
  {
    uint64_t v3 = (protobuf::FlowTest_Test **)(*((void *)this + 5) + 8);
    do
    {
      unint64_t v4 = *v3++;
      protobuf::FlowTest_Test::Clear(v4);
      --v2;
    }
    while (v2);
    *((_DWORD *)this + 8) = 0;
  }
  if (*((unsigned char *)this + 16))
  {
    uint64_t v6 = *((void *)this + 6);
    if (*(char *)(v6 + 23) < 0)
    {
      **(unsigned char **)uint64_t v6 = 0;
      *(void *)(v6 + 8) = 0;
    }
    else
    {
      *(unsigned char *)uint64_t v6 = 0;
      *(unsigned char *)(v6 + 23) = 0;
    }
  }
  char v8 = *((unsigned char *)this + 8);
  unint64_t v7 = (protobuf::FlowTest *)((char *)this + 8);
  *((_DWORD *)v7 + 2) = 0;
  if (v8)
  {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoClear(v7);
  }
}

void sub_239ADDDD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

google::protobuf::internal *protobuf::FlowTest::_InternalParse(uint64_t a1, google::protobuf::internal *a2, google::protobuf::internal::EpsCopyInputStream *this)
{
  int v28 = a2;
  char v5 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23));
  __n128 result = v28;
  if ((v5 & 1) == 0)
  {
    while (1)
    {
      unint64_t v7 = (char *)result + 1;
      LODWORD(v8) = *(unsigned __int8 *)result;
      if ((*(char *)result & 0x80000000) == 0) {
        goto LABEL_5;
      }
      char v8 = (const char *)(v8 + (*v7 << 7) - 128);
      if ((*v7 & 0x80000000) == 0) {
        break;
      }
      __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadTagFallback(result, v8);
      int v28 = result;
      if (!result) {
        return result;
      }
      unint64_t v7 = (std::string::value_type *)result;
LABEL_6:
      if (v8 >> 3 == 2)
      {
        if (v8 != 18) {
          goto LABEL_11;
        }
        __n128 result = (google::protobuf::internal *)(v7 - 1);
        while (2)
        {
          long long v10 = (google::protobuf::internal *)((char *)result + 1);
          int v28 = v10;
          uint64_t v11 = *(int **)(a1 + 40);
          if (v11)
          {
            uint64_t v12 = *(int *)(a1 + 32);
            int v13 = *v11;
            if ((int)v12 < *v11)
            {
              *(_DWORD *)(a1 + 32) = v12 + 1;
              uint64_t v14 = *(protobuf::FlowTest_Test **)&v11[2 * v12 + 2];
              goto LABEL_23;
            }
            if (v13 == *(_DWORD *)(a1 + 36))
            {
LABEL_21:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(a1 + 24), v13 + 1);
              uint64_t v11 = *(int **)(a1 + 40);
              int v13 = *v11;
            }
            *uint64_t v11 = v13 + 1;
            uint64_t v14 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(*(google::protobuf::internal::ArenaImpl **)(a1 + 24));
            uint64_t v15 = *(void *)(a1 + 40);
            uint64_t v16 = *(int *)(a1 + 32);
            *(_DWORD *)(a1 + 32) = v16 + 1;
            *(void *)(v15 + 8 * v16 + 8) = v14;
            long long v10 = v28;
LABEL_23:
            unsigned int v17 = *(unsigned __int8 *)v10;
            if (*(char *)v10 < 0)
            {
              __n128 result = (google::protobuf::internal *)google::protobuf::internal::ReadSizeFallback(v10, (const char *)*(unsigned __int8 *)v10);
              if (!result) {
                return result;
              }
              uint64_t v18 = (char *)result;
              unsigned int v17 = v19;
            }
            else
            {
              uint64_t v18 = (char *)v10 + 1;
            }
            int v20 = google::protobuf::internal::EpsCopyInputStream::PushLimit(this, v18, v17);
            int v21 = *((_DWORD *)this + 22);
            BOOL v22 = __OFSUB__(v21--, 1);
            *((_DWORD *)this + 22) = v21;
            if (v21 < 0 != v22) {
              return 0;
            }
            int v23 = v20;
            __n128 result = protobuf::FlowTest_Test::_InternalParse((uint64_t)v14, (google::protobuf::internal *)v18, this);
            if (!result) {
              return result;
            }
            ++*((_DWORD *)this + 22);
            if (*((_DWORD *)this + 20)) {
              return 0;
            }
            int v24 = *((_DWORD *)this + 7) + v23;
            *((_DWORD *)this + 7) = v24;
            unint64_t v25 = *((void *)this + 1) + (v24 & (v24 >> 31));
            *(void *)this = v25;
            int v28 = result;
            if (v25 <= (unint64_t)result || *(unsigned char *)result != 18) {
              goto LABEL_37;
            }
            continue;
          }
          break;
        }
        int v13 = *(_DWORD *)(a1 + 36);
        goto LABEL_21;
      }
      if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        int v26 = *(std::string **)(a1 + 48);
        if (v26 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(a1 + 48, (uint64_t)&google::protobuf::internal::fixed_address_empty_string);
        }
        __n128 result = (google::protobuf::internal *)google::protobuf::internal::InlineGreedyStringParser(v26, v7, (uint64_t)this);
        goto LABEL_36;
      }
LABEL_11:
      if (!v8 || (v8 & 7) == 4)
      {
        *((_DWORD *)this + 2std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v8 - 1;
        return (google::protobuf::internal *)v7;
      }
      __n128 result = (google::protobuf::internal *)google::protobuf::internal::UnknownFieldParse(v8, (unint64_t *)(a1 + 8), (google::protobuf::internal *)v7, this);
LABEL_36:
      int v28 = result;
      if (!result) {
        return result;
      }
LABEL_37:
      int v27 = google::protobuf::internal::EpsCopyInputStream::DoneWithCheck(this, (const char **)&v28, *((_DWORD *)this + 23));
      __n128 result = v28;
      if (v27) {
        return result;
      }
    }
    unint64_t v7 = (char *)result + 2;
LABEL_5:
    int v28 = (google::protobuf::internal *)v7;
    goto LABEL_6;
  }
  return result;
}

unsigned __int8 *protobuf::FlowTest::InternalSerializeWithCachedSizesToArray(const void ***this, char *a2, google::protobuf::io::EpsCopyOutputStream *a3)
{
  unint64_t v4 = a2;
  if ((_BYTE)this[2]) {
    unint64_t v4 = (char *)google::protobuf::io::EpsCopyOutputStream::WriteStringMaybeAliased(a3, 1, this[6], a2);
  }
  int v6 = *((_DWORD *)this + 8);
  if (v6)
  {
    for (int i = 0; i != v6; ++i)
    {
      if ((unint64_t)v4 >= *(void *)a3) {
        unint64_t v4 = google::protobuf::io::EpsCopyOutputStream::EnsureSpaceFallback(a3, v4);
      }
      char v8 = (protobuf::FlowTest_Test *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>((uint64_t)(this + 3), i);
      char *v4 = 18;
      unsigned int v9 = *((_DWORD *)v8 + 5);
      if (v9 > 0x7F)
      {
        v4[1] = v9 | 0x80;
        unsigned int v11 = v9 >> 7;
        if (v9 >> 14)
        {
          long long v10 = v4 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            unsigned int v12 = v11 >> 7;
            ++v10;
            unsigned int v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          v4[2] = v11;
          long long v10 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v9;
        long long v10 = v4 + 2;
      }
      unint64_t v4 = (char *)protobuf::FlowTest_Test::InternalSerializeWithCachedSizesToArray(v8, v10, a3);
    }
  }
  unint64_t v14 = (unint64_t)this[1];
  if ((v14 & 1) == 0) {
    return (unsigned __int8 *)v4;
  }
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 23) < 0)
  {
    uint64_t v18 = *(void **)v16;
    uint64_t v17 = *(void *)(v16 + 8);
  }
  else
  {
    LODWORD(v17) = *(unsigned __int8 *)(v16 + 23);
    uint64_t v18 = (void *)v16;
  }
  if (*(void *)a3 - (void)v4 >= (int)v17)
  {
    uint64_t v19 = (int)v17;
    memcpy(v4, v18, (int)v17);
    v4 += v19;
    return (unsigned __int8 *)v4;
  }

  return google::protobuf::io::EpsCopyOutputStream::WriteRawFallback(a3, (char *)v18, v17, (unsigned __int8 *)v4);
}

uint64_t protobuf::FlowTest::ByteSizeLong(protobuf::FlowTest *this)
{
  uint64_t v2 = *((int *)this + 8);
  uint64_t v3 = *((void *)this + 5);
  if (v3) {
    unint64_t v4 = (protobuf::FlowTest_Test **)(v3 + 8);
  }
  else {
    unint64_t v4 = 0;
  }
  if (v2)
  {
    uint64_t v5 = 8 * v2;
    do
    {
      int v6 = *v4++;
      uint64_t v7 = protobuf::FlowTest_Test::ByteSizeLong(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    uint64_t v2 = 0;
  }
  if (*((unsigned char *)this + 16))
  {
    uint64_t v8 = *((void *)this + 6);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 23);
    uint64_t v10 = *(void *)(v8 + 8);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = v9;
    }
    v2 += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
  uint64_t v11 = *((void *)this + 1);
  if (v11)
  {
    unint64_t v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 23) < 0) {
      uint64_t v14 = *(void *)(v13 + 8);
    }
    else {
      uint64_t v14 = *(unsigned __int8 *)(v13 + 23);
    }
    v2 += v14;
  }
  *((_DWORD *)this + 5) = v2;
  return v2;
}

void protobuf::FlowTest::CheckTypeAndMergeFrom(protobuf::FlowTest *this, const google::protobuf::MessageLite *lpsrc)
{
  protobuf::FlowTest::MergeFrom(this, lpsrc);
}

void protobuf::FlowTest::MergeFrom(protobuf::FlowTest *this, const protobuf::FlowTest *a2)
{
  if (a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/flowtest/flowtest.pb.cc", 2444);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v11, "CHECK failed: (&from) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v11[0].__r_.__value_.__l.__data_);
  }
  uint64_t v5 = *((void *)a2 + 1);
  if (v5) {
    google::protobuf::internal::InternalMetadataWithArenaLite::DoMergeFrom((unint64_t *)this + 1, v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>((int **)this + 3, (uint64_t)a2 + 24);
  if (*((unsigned char *)a2 + 16))
  {
    uint64_t v8 = (std::string *)*((void *)this + 6);
    uint64_t v7 = (char *)this + 48;
    int v6 = v8;
    *((_DWORD *)v7 - 8) |= 1u;
    uint64_t v9 = (const std::string *)*((void *)a2 + 6);
    if (v8 != v9)
    {
      if (v6 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena((uint64_t)v7, (uint64_t)v9);
      }
      std::string::operator=(v6, v9);
    }
  }
}

void sub_239ADE4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void protobuf::FlowTest::CopyFrom(protobuf::FlowTest *this, const protobuf::FlowTest *a2)
{
  if (a2 != this)
  {
    protobuf::FlowTest::Clear(this);
    protobuf::FlowTest::MergeFrom(this, a2);
  }
}

uint64_t protobuf::FlowTest::IsInitialized(protobuf::FlowTest *this)
{
  return 1;
}

__n128 protobuf::FlowTest::InternalSwap(protobuf::FlowTest *this, protobuf::FlowTest *a2)
{
  uint64_t v5 = (unint64_t *)((char *)this + 8);
  unint64_t v4 = *((void *)this + 1);
  uint64_t v6 = *((void *)a2 + 1);
  if (v4)
  {
    if ((v6 & 1) == 0)
    {
      google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow((unint64_t *)a2 + 1);
      unint64_t v7 = v21;
      unint64_t v4 = *v5;
      if (*v5) {
        goto LABEL_6;
      }
      goto LABEL_16;
    }
LABEL_5:
    unint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v4)
    {
LABEL_6:
      unint64_t v8 = v4 & 0xFFFFFFFFFFFFFFFELL;
LABEL_7:
      uint64_t v9 = *(void *)(v8 + 16);
      long long v10 = *(_OWORD *)v8;
      uint64_t v11 = *(void *)(v7 + 16);
      *(_OWORD *)unint64_t v8 = *(_OWORD *)v7;
      *(void *)(v8 + 16) = v11;
      *(_OWORD *)unint64_t v7 = v10;
      *(void *)(v7 + 16) = v9;
      goto LABEL_8;
    }
LABEL_16:
    google::protobuf::internal::InternalMetadataWithArenaBase<std::string,google::protobuf::internal::InternalMetadataWithArenaLite>::mutable_unknown_fields_slow(v5);
    goto LABEL_7;
  }
  if (v6) {
    goto LABEL_5;
  }
LABEL_8:
  int v12 = *((_DWORD *)this + 4);
  *((_DWORD *)this + 4) = *((_DWORD *)a2 + 4);
  *((_DWORD *)a2 + 4) = v12;
  google::protobuf::internal::RepeatedPtrFieldBase::InternalSwap((protobuf::FlowTest *)((char *)this + 24), (protobuf::FlowTest *)((char *)a2 + 24));
  unint64_t v16 = (uint64_t *)*((void *)this + 6);
  uint64_t v14 = (std::string **)((char *)this + 48);
  uint64_t v15 = (std::string *)v16;
  uint64_t v17 = (std::string **)((char *)a2 + 48);
  if (v16 == &google::protobuf::internal::fixed_address_empty_string)
  {
    if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string) {
      return result;
    }
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v14, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v15 = *v14;
  }
  uint64_t v18 = *v17;
  if (*v17 == (std::string *)&google::protobuf::internal::fixed_address_empty_string)
  {
    google::protobuf::internal::ArenaStringPtr::CreateInstance(v17, 0, (long long *)&google::protobuf::internal::fixed_address_empty_string);
    uint64_t v18 = *v17;
  }
  std::string::size_type v19 = v15->__r_.__value_.__r.__words[2];
  __n128 result = *(__n128 *)&v15->__r_.__value_.__l.__data_;
  std::string::size_type v20 = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15->__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v15->__r_.__value_.__r.__words[2] = v20;
  *(__n128 *)&v18->__r_.__value_.__l.__data_ = result;
  v18->__r_.__value_.__r.__words[2] = v19;
  return result;
}

void *protobuf::FlowTest::GetTypeName@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "protobuf.FlowTest");
}

protobuf::FlowTest_KeyValueParameter *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_KeyValueParameter *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x68uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_KeyValueParameter>);
  }
  protobuf::FlowTest_KeyValueParameter::FlowTest_KeyValueParameter(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADE6E8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C403C1C2265);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_StartFrom *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_StartFrom *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_StartFrom>);
  }
  protobuf::FlowTest_StartFrom::FlowTest_StartFrom(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADE79C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C40DFBAE579);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_SendIntent *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_SendIntent *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x40uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_SendIntent>);
  }
  protobuf::FlowTest_SendIntent::FlowTest_SendIntent(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADE850(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C4071667EE6);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_AssertResponse *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_AssertResponse *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x58uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_AssertResponse>);
  }
  protobuf::FlowTest_AssertResponse::FlowTest_AssertResponse(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADE904(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C404273DE13);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_AssertCondition *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_AssertCondition *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x28uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_AssertCondition>);
  }
  protobuf::FlowTest_AssertCondition::FlowTest_AssertCondition(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADE9B8(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C404E984866);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_Step *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_Step *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x50uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_Step>);
  }
  protobuf::FlowTest_Step::FlowTest_Step(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADEA6C(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C40B600A8A2);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_Test *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest_Test *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x48uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_Test>);
  }
  protobuf::FlowTest_Test::FlowTest_Test(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADEB20(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C400671B64ALL);
  _Unwind_Resume(a1);
}

protobuf::FlowTest *google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest>(google::protobuf::internal::ArenaImpl *this)
{
  if (!this) {
    operator new();
  }
  if (*((void *)this + 14)) {
  AlignedAndAddCleanup = (protobuf::FlowTest *)google::protobuf::internal::ArenaImpl::AllocateAlignedAndAddCleanup((atomic_ullong *)this, 0x38uLL, (void (*)(void *))google::protobuf::internal::arena_destruct_object<protobuf::FlowTest>);
  }
  protobuf::FlowTest::FlowTest(AlignedAndAddCleanup);
  return AlignedAndAddCleanup;
}

void sub_239ADEBD4(_Unwind_Exception *a1)
{
  MEMORY[0x23ECAACC0](v1, 0x10A1C40D196C376);
  _Unwind_Resume(a1);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::New(protobuf::FlowTest_KeyValueParameter *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(0);
}

protobuf::FlowTest_KeyValueParameter *protobuf::FlowTest_KeyValueParameter::New(protobuf::FlowTest_KeyValueParameter *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(a2);
}

uint64_t protobuf::FlowTest_KeyValueParameter::GetCachedSize(protobuf::FlowTest_KeyValueParameter *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::New(protobuf::FlowTest_StartFrom *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(0);
}

protobuf::FlowTest_StartFrom *protobuf::FlowTest_StartFrom::New(protobuf::FlowTest_StartFrom *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_StartFrom>(a2);
}

uint64_t protobuf::FlowTest_StartFrom::GetCachedSize(protobuf::FlowTest_StartFrom *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::New(protobuf::FlowTest_SendIntent *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(0);
}

protobuf::FlowTest_SendIntent *protobuf::FlowTest_SendIntent::New(protobuf::FlowTest_SendIntent *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_SendIntent>(a2);
}

uint64_t protobuf::FlowTest_SendIntent::GetCachedSize(protobuf::FlowTest_SendIntent *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::New(protobuf::FlowTest_AssertResponse *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(0);
}

protobuf::FlowTest_AssertResponse *protobuf::FlowTest_AssertResponse::New(protobuf::FlowTest_AssertResponse *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertResponse>(a2);
}

uint64_t protobuf::FlowTest_AssertResponse::GetCachedSize(protobuf::FlowTest_AssertResponse *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_AssertCondition *protobuf::FlowTest_AssertCondition::New(protobuf::FlowTest_AssertCondition *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(0);
}

protobuf::FlowTest_AssertCondition *protobuf::FlowTest_AssertCondition::New(protobuf::FlowTest_AssertCondition *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_AssertCondition>(a2);
}

uint64_t protobuf::FlowTest_AssertCondition::GetCachedSize(protobuf::FlowTest_AssertCondition *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_Step *protobuf::FlowTest_Step::New(protobuf::FlowTest_Step *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(0);
}

protobuf::FlowTest_Step *protobuf::FlowTest_Step::New(protobuf::FlowTest_Step *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(a2);
}

uint64_t protobuf::FlowTest_Step::GetCachedSize(protobuf::FlowTest_Step *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest_Test *protobuf::FlowTest_Test::New(protobuf::FlowTest_Test *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(0);
}

protobuf::FlowTest_Test *protobuf::FlowTest_Test::New(protobuf::FlowTest_Test *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(a2);
}

uint64_t protobuf::FlowTest_Test::GetCachedSize(protobuf::FlowTest_Test *this)
{
  return *((unsigned int *)this + 5);
}

protobuf::FlowTest *protobuf::FlowTest::New(protobuf::FlowTest *this)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest>(0);
}

protobuf::FlowTest *protobuf::FlowTest::New(protobuf::FlowTest *this, google::protobuf::Arena *a2)
{
  return google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest>(a2);
}

uint64_t protobuf::FlowTest::GetCachedSize(protobuf::FlowTest *this)
{
  return *((unsigned int *)this + 5);
}

void google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>(uint64_t a1)
{
  uint64_t v1 = *(unsigned int *)(a1 + 8);
  if ((v1 & 0x80000000) != 0)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1613);
    uint64_t v5 = google::protobuf::internal::LogMessage::operator<<(v7, "CHECK failed: (n) >= (0): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v7[0].__r_.__value_.__l.__data_);
  }
  else if (v1)
  {
    uint64_t v3 = (protobuf::FlowTest_KeyValueParameter **)(*(void *)(a1 + 16) + 8);
    do
    {
      unint64_t v4 = *v3++;
      protobuf::FlowTest_KeyValueParameter::Clear(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(a1 + 8) = 0;
  }
}

void sub_239ADED50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_KeyValueParameter>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = (protobuf::FlowTest_KeyValueParameter **)(v6 + 8);
      uint64_t v14 = (protobuf::FlowTest_KeyValueParameter **)v7;
      do
      {
        unint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_KeyValueParameter>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unint64_t v21 = (protobuf::FlowTest_KeyValueParameter **)((char *)v8 + v20);
      BOOL v22 = (protobuf::FlowTest_KeyValueParameter **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_KeyValueParameter>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_KeyValueParameter>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239ADEEFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

std::string *google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_KeyValueParameter>::Merge(protobuf::FlowTest_KeyValueParameter *a1, protobuf::FlowTest_KeyValueParameter *this)
{
  return protobuf::FlowTest_KeyValueParameter::MergeFrom(this, a1);
}

void google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Step>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = (protobuf::FlowTest_Step **)(v6 + 8);
      uint64_t v14 = (protobuf::FlowTest_Step **)v7;
      do
      {
        unint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Step>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unint64_t v21 = (protobuf::FlowTest_Step **)((char *)v8 + v20);
      BOOL v22 = (protobuf::FlowTest_Step **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Step>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Step>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239ADF0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Step>::Merge(protobuf::FlowTest_Step *a1, protobuf::FlowTest_Step *this)
{
}

void google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::~RepeatedPtrField(google::protobuf::internal::ArenaImpl **a1)
{
  google::protobuf::internal::RepeatedPtrFieldBase::Destroy<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(a1);

  google::protobuf::internal::RepeatedPtrFieldBase::~RepeatedPtrFieldBase(a1);
}

void google::protobuf::internal::RepeatedPtrFieldBase::MergeFrom<google::protobuf::RepeatedPtrField<protobuf::FlowTest_Test>::TypeHandler>(int **this, uint64_t a2)
{
  if ((int **)a2 == this)
  {
    google::protobuf::internal::LogMessage::LogMessage((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SiriIntelligenceEngine/3rdparty/protobuf/src/google/protobuf/repeated_field.h", 1632);
    unint64_t v4 = google::protobuf::internal::LogMessage::operator<<(v28, "CHECK failed: (&other) != (this): ");
    google::protobuf::internal::LogFinisher::operator=((int)&v27, (const char **)&v4->__r_.__value_.__l.__data_);
    google::protobuf::internal::LogMessage::~LogMessage((void **)&v28[0].__r_.__value_.__l.__data_);
  }
  int v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 16);
    unint64_t v7 = google::protobuf::internal::RepeatedPtrFieldBase::InternalExtend((google::protobuf::internal::RepeatedPtrFieldBase *)this, *(_DWORD *)(a2 + 8));
    unint64_t v8 = v7;
    uint64_t v9 = *this[2];
    uint64_t v10 = *((int *)this + 2);
    int v11 = v9 - v10;
    if ((int)v9 - (int)v10 >= v5) {
      uint64_t v12 = v5;
    }
    else {
      uint64_t v12 = v11;
    }
    if ((int)v12 >= 1)
    {
      unint64_t v13 = (protobuf::FlowTest_Test **)(v6 + 8);
      uint64_t v14 = (protobuf::FlowTest_Test **)v7;
      do
      {
        unint64_t v16 = *v13++;
        uint64_t v15 = v16;
        uint64_t v17 = *v14++;
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Test>::Merge(v15, v17);
        --v12;
      }
      while (v12);
    }
    if (v11 < v5)
    {
      uint64_t v18 = (google::protobuf::internal::ArenaImpl *)*this;
      int v19 = v10 + v5 - v9;
      uint64_t v20 = 8 * v9 - 8 * v10;
      unint64_t v21 = (protobuf::FlowTest_Test **)((char *)v8 + v20);
      BOOL v22 = (protobuf::FlowTest_Test **)(v20 + v6 + 8);
      do
      {
        int v23 = *v22++;
        int v24 = google::protobuf::Arena::CreateMaybeMessage<protobuf::FlowTest_Test>(v18);
        google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Test>::Merge(v23, v24);
        *v21++ = v24;
        --v19;
      }
      while (v19);
    }
    int v25 = *((_DWORD *)this + 2) + v5;
    *((_DWORD *)this + 2) = v25;
    int v26 = this[2];
    if (*v26 < v25) {
      int *v26 = v25;
    }
  }
}

void sub_239ADF274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  google::protobuf::internal::LogMessage::~LogMessage((void **)va);
  _Unwind_Resume(a1);
}

void google::protobuf::internal::GenericTypeHandler<protobuf::FlowTest_Test>::Merge(protobuf::FlowTest_Test *a1, protobuf::FlowTest_Test *this)
{
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_KeyValueParameter>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_StartFrom>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_SendIntent>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_AssertResponse>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_AssertCondition>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_Step>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest_Test>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

uint64_t google::protobuf::internal::arena_destruct_object<protobuf::FlowTest>(uint64_t (***a1)(void))
{
  return (**a1)(a1);
}

void YAML::EmitterState::EmitterState(YAML::EmitterState *this)
{
  *((void *)this + 1) = 0;
  *(unsigned char *)this = 1;
  *((void *)this + 2) = 0;
  *((void *)this + 3) = 0;
  YAML::Setting<YAML::EMITTER_MANIP>::Setting((_DWORD *)this + 8);
}

void sub_239ADF528(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void YAML::EmitterState::~EmitterState(YAML::EmitterState *this)
{
  uint64_t v2 = (void **)((char *)this + 160);
  std::vector<std::unique_ptr<YAML::EmitterState::Group>>::__destroy_vector::operator()[abi:ne180100](&v2);
  YAML::SettingChanges::~SettingChanges((uint64_t **)this + 17);
  YAML::SettingChanges::~SettingChanges((uint64_t **)this + 14);
  if (*((char *)this + 31) < 0) {
    operator delete(*((void **)this + 1));
  }
}

uint64_t YAML::EmitterState::SetLocalValue(uint64_t result, uint64_t a2)
{
  if ((a2 - 3) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, result + 32, a2, 0);
  }
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0)
  {
    uint64_t v3 = result + 36;
    goto LABEL_6;
  }
  if ((a2 - 8) <= 2)
  {
    uint64_t v3 = result + 40;
    goto LABEL_6;
  }
  if ((a2 - 11) <= 2)
  {
    uint64_t v3 = result + 48;
LABEL_6:
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, v3, a2, 0);
  }
  if ((a2 & 0xFFFFFFFE) == 0xE)
  {
    uint64_t v4 = result + 44;
    goto LABEL_13;
  }
  if ((a2 - 16) <= 2)
  {
    uint64_t v4 = result + 52;
LABEL_13:
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, v4, a2, 0);
  }
  if ((a2 - 23) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, result + 80, a2, 0);
  }
  if (a2 == 29 || !a2)
  {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(result, result + 88, a2, 0);
  }
  return result;
}

BOOL YAML::EmitterState::SetOutputCharset(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 - 3) <= 1) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 32, a2, a3);
  }
  return (a2 - 3) < 2;
}

uint64_t YAML::EmitterState::SetStringFormat(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = 0;
  if (a2 <= 7 && ((1 << a2) & 0xE1) != 0) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 36, a2, a3);
  }
  return result;
}

BOOL YAML::EmitterState::SetBoolFormat(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 - 8) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 40, a2, a3);
  }
  return (a2 - 8) < 3;
}

BOOL YAML::EmitterState::SetBoolCaseFormat(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 - 11) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 48, a2, a3);
  }
  return (a2 - 11) < 3;
}

uint64_t YAML::EmitterState::SetBoolLengthFormat(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 & 0xFFFFFFFE) == 0xE) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 44, a2, a3);
  }
  return 0;
}

BOOL YAML::EmitterState::SetIntFormat(uint64_t a1, uint64_t a2, int a3)
{
  if ((a2 - 16) <= 2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 52, a2, a3);
  }
  return (a2 - 16) < 3;
}

BOOL YAML::EmitterState::SetFlowType(uint64_t a1, int a2, uint64_t a3, int a4)
{
  if ((a3 - 23) <= 1)
  {
    if (a2 == 1) {
      uint64_t v4 = a1 + 80;
    }
    else {
      uint64_t v4 = a1 + 84;
    }
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, v4, a3, a4);
  }
  return (a3 - 23) < 2;
}

uint64_t YAML::EmitterState::SetMapKeyFormat(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 == 29 || !a2) {
    YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(a1, a1 + 88, a2, a3);
  }
  return 0;
}

uint64_t YAML::EmitterState::SetAnchor(uint64_t this)
{
  *(unsigned char *)(this + 192) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetTag(uint64_t this)
{
  *(unsigned char *)(this + 193) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetNonContent(uint64_t this)
{
  *(unsigned char *)(this + 194) = 1;
  return this;
}

uint64_t YAML::EmitterState::SetLongKey(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 168);
  if (*(void *)(this + 160) == v1) {
    __assert_rtn("SetLongKey", "emitterstate.cpp", 59, "!m_groups.empty()");
  }
  uint64_t v2 = *(void *)(v1 - 8);
  if (*(_DWORD *)v2 != 2) {
    __assert_rtn("SetLongKey", "emitterstate.cpp", 64, "m_groups.back()->type == GroupType::Map");
  }
  *(unsigned char *)(v2 + 24) = 1;
  return this;
}

uint64_t YAML::EmitterState::ForceFlow(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 168);
  if (*(void *)(this + 160) == v1) {
    __assert_rtn("ForceFlow", "emitterstate.cpp", 69, "!m_groups.empty()");
  }
  *(_DWORD *)(*(void *)(v1 - 8) + 4) = 1;
  return this;
}

uint64_t YAML::EmitterState::StartedNode(uint64_t this)
{
  uint64_t v1 = *(void *)(this + 168);
  if (*(void *)(this + 160) == v1)
  {
    ++*(void *)(this + 200);
  }
  else
  {
    uint64_t v2 = *(void *)(v1 - 8);
    uint64_t v3 = *(void *)(v2 + 16) + 1;
    *(void *)(v2 + 16) = v3;
    if ((v3 & 1) == 0) {
      *(unsigned char *)(v2 + 24) = 0;
    }
  }
  *(_WORD *)(this + 192) = 0;
  *(unsigned char *)(this + 194) = 0;
  return this;
}

uint64_t YAML::EmitterState::NextGroupType(uint64_t a1, int a2)
{
  uint64_t v3 = *(void *)(a1 + 160);
  uint64_t v2 = *(void *)(a1 + 168);
  if (a2 == 1)
  {
    if (v3 != v2 && *(_DWORD *)(*(void *)(v2 - 8) + 4) == 1) {
      return 3;
    }
    BOOL v5 = *(_DWORD *)(a1 + 80) == 24;
    unsigned int v6 = 3;
  }
  else
  {
    if (v3 != v2 && *(_DWORD *)(*(void *)(v2 - 8) + 4) == 1) {
      return 5;
    }
    BOOL v5 = *(_DWORD *)(a1 + 84) == 24;
    unsigned int v6 = 5;
  }
  if (v5) {
    return v6 + 1;
  }
  else {
    return v6;
  }
}

uint64_t YAML::EmitterState::GetFlowType(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 160) != v2 && *(_DWORD *)(*(void *)(v2 - 8) + 4) == 1) {
    return 23;
  }
  uint64_t v4 = 84;
  if (a2 == 1) {
    uint64_t v4 = 80;
  }
  return *(unsigned int *)(a1 + v4);
}

uint64_t YAML::EmitterState::StartedDoc(uint64_t this)
{
  *(_WORD *)(this + 192) = 0;
  *(unsigned char *)(this + 194) = 0;
  return this;
}

uint64_t YAML::EmitterState::EndedDoc(uint64_t this)
{
  *(_WORD *)(this + 192) = 0;
  *(unsigned char *)(this + 194) = 0;
  return this;
}

void *YAML::EmitterState::StartedScalar(uint64_t **this)
{
  YAML::EmitterState::StartedNode((uint64_t)this);

  return YAML::SettingChanges::clear(this + 14);
}

void *YAML::EmitterState::ClearModifiedSettings(uint64_t **this)
{
  return YAML::SettingChanges::clear(this + 14);
}

void YAML::EmitterState::StartedGroup(void *a1)
{
  YAML::EmitterState::StartedNode((uint64_t)a1);
  uint64_t v2 = a1[21];
  if (a1[20] == v2) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *(void *)(*(void *)(v2 - 8) + 8);
  }
  a1[23] += v3;
  operator new();
}

void sub_239ADFDA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100]((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

void YAML::EmitterState::EndedGroup(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 168);
  if (*(void *)(a1 + 160) == v4)
  {
    if (a2 == 1) {
      std::string::basic_string[abi:ne180100]<0>(&__str, "unexpected end sequence token");
    }
    else {
      std::string::basic_string[abi:ne180100]<0>(&__str, "unexpected end map token");
    }
    *(unsigned char *)a1 = 0;
    std::string::operator=((std::string *)(a1 + 8), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(v4 - 8);
    *(void *)(v4 - 8) = 0;
    unsigned int v6 = (uint64_t *)(*(void *)(a1 + 168) - 8);
    std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](v6, 0);
    *(void *)(a1 + 168) = v6;
    if (*(_DWORD *)v5 == a2)
    {
      YAML::SettingChanges::~SettingChanges((uint64_t **)(v5 + 32));
      MEMORY[0x23ECAACC0](v5, 0x1020C409BBB1E6ELL);
      uint64_t v7 = *(void *)(a1 + 168);
      if (*(void *)(a1 + 160) == v7)
      {
        unint64_t v8 = 0;
        unint64_t v9 = *(void *)(a1 + 184);
      }
      else
      {
        unint64_t v8 = *(void *)(*(void *)(v7 - 8) + 8);
        unint64_t v9 = *(void *)(a1 + 184);
        if (v9 < v8) {
          __assert_rtn("EndedGroup", "emitterstate.cpp", 175, "m_curIndent >= lastIndent");
        }
      }
      *(void *)(a1 + 184) = v9 - v8;
      for (int i = *(uint64_t **)(a1 + 136); i != *(uint64_t **)(a1 + 144); ++i)
      {
        uint64_t v11 = *i;
        (*(void (**)(uint64_t))(*(void *)v11 + 16))(v11);
      }
      YAML::SettingChanges::clear((uint64_t **)(a1 + 112));
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__str, "unmatched group tag");
      *(unsigned char *)a1 = 0;
      std::string::operator=((std::string *)(a1 + 8), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      YAML::SettingChanges::~SettingChanges((uint64_t **)(v5 + 32));
      MEMORY[0x23ECAACC0](v5, 0x1020C409BBB1E6ELL);
    }
  }
}

void sub_239ADFFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t YAML::EmitterState::CurGroupNodeType(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (*((void *)this + 20) == v1) {
    return 0;
  }
  uint64_t v2 = *(int **)(v1 - 8);
  int v3 = *v2;
  BOOL v4 = v2[1] == 1;
  if (v2[1] == 1) {
    unsigned int v5 = 3;
  }
  else {
    unsigned int v5 = 4;
  }
  if (v4) {
    unsigned int v6 = 5;
  }
  else {
    unsigned int v6 = 6;
  }
  if (v3 == 1) {
    return v5;
  }
  else {
    return v6;
  }
}

uint64_t YAML::EmitterState::CurGroupType(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (*((void *)this + 20) == v1) {
    return 0;
  }
  else {
    return **(unsigned int **)(v1 - 8);
  }
}

uint64_t YAML::EmitterState::CurGroupFlowType(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (*((void *)this + 20) == v1) {
    return 0;
  }
  else {
    return *(unsigned int *)(*(void *)(v1 - 8) + 4);
  }
}

uint64_t YAML::EmitterState::CurGroupIndent(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (*((void *)this + 20) == v1) {
    return 0;
  }
  else {
    return *(void *)(*(void *)(v1 - 8) + 8);
  }
}

uint64_t YAML::EmitterState::CurGroupChildCount(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  if (*((void *)this + 20) == v1) {
    uint64_t v2 = (char *)this + 200;
  }
  else {
    uint64_t v2 = (char *)(*(void *)(v1 - 8) + 16);
  }
  return *(void *)v2;
}

BOOL YAML::EmitterState::CurGroupLongKey(YAML::EmitterState *this)
{
  uint64_t v1 = *((void *)this + 21);
  return *((void *)this + 20) != v1 && *(unsigned char *)(*(void *)(v1 - 8) + 24) != 0;
}

uint64_t YAML::EmitterState::LastIndent(YAML::EmitterState *this)
{
  if (*((void *)this + 21) - *((void *)this + 20) >= 0x10uLL) {
    return *((void *)this + 23) - *(void *)(*(void *)(*((void *)this + 21) - 16) + 8);
  }
  else {
    return 0;
  }
}

void *YAML::SettingChanges::clear(uint64_t **this)
{
  int v3 = *this;
  for (int i = this[1]; v3 != i; int i = this[1])
  {
    uint64_t v4 = *v3++;
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }

  return std::vector<std::unique_ptr<YAML::SettingChangeBase>>::__clear[abi:ne180100](this);
}

void YAML::EmitterState::_Set<YAML::EMITTER_MANIP>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 != 1)
  {
    if (!a4) {
      operator new();
    }
    __assert_rtn("_Set", "emitterstate.h", 206, "false");
  }
  operator new();
}

void sub_239AE0340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_239AE0378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x239AE0370);
  }
  JUMPOUT(0x239AE034CLL);
}

BOOL YAML::EmitterState::SetIndent(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 >= 2) {
    YAML::EmitterState::_Set<unsigned long>(a1, a1 + 56, a2, a3);
  }
  return a2 > 1;
}

void YAML::EmitterState::_Set<unsigned long>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 != 1)
  {
    if (!a4) {
      operator new();
    }
    __assert_rtn("_Set", "emitterstate.h", 206, "false");
  }
  operator new();
}

void sub_239AE057C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  if (a9) {
    (*(void (**)(uint64_t))(*(void *)a9 + 8))(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_239AE05B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a10) {
    JUMPOUT(0x239AE05ACLL);
  }
  JUMPOUT(0x239AE0588);
}

uint64_t YAML::EmitterState::SetPreCommentIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(a1, a1 + 64, a2, a3);
  }
  return 0;
}

uint64_t YAML::EmitterState::SetPostCommentIndent(uint64_t a1, uint64_t a2, int a3)
{
  if (a2) {
    YAML::EmitterState::_Set<unsigned long>(a1, a1 + 72, a2, a3);
  }
  return 0;
}

BOOL YAML::EmitterState::SetFloatPrecision(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 <= 9) {
    YAML::EmitterState::_Set<unsigned long>(a1, a1 + 96, a2, a3);
  }
  return a2 < 0xA;
}

BOOL YAML::EmitterState::SetDoublePrecision(uint64_t a1, unint64_t a2, int a3)
{
  if (a2 <= 0x11) {
    YAML::EmitterState::_Set<unsigned long>(a1, a1 + 104, a2, a3);
  }
  return a2 < 0x12;
}

void YAML::SettingChanges::~SettingChanges(uint64_t **this)
{
  YAML::SettingChanges::clear(this);
  uint64_t v2 = (void **)this;
  std::vector<std::unique_ptr<YAML::SettingChangeBase>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

void std::vector<std::unique_ptr<YAML::SettingChangeBase>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::unique_ptr<YAML::SettingChangeBase>>::__clear[abi:ne180100](v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void *std::vector<std::unique_ptr<YAML::SettingChangeBase>>::__clear[abi:ne180100](void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = (void *)*result;
  int v3 = (void *)result[1];
  while (v3 != v2)
  {
    uint64_t v4 = (void *)*--v3;
    uint64_t result = v4;
    void *v3 = 0;
    if (v4) {
      uint64_t result = (void *)(*(uint64_t (**)(void *))(*result + 8))(result);
    }
  }
  v1[1] = v2;
  return result;
}

void YAML::Setting<YAML::EMITTER_MANIP>::Setting(_DWORD *a1)
{
  *a1 = 0;
  operator new();
}

void YAML::SettingChange<YAML::EMITTER_MANIP>::~SettingChange()
{
}

uint64_t YAML::SettingChange<YAML::EMITTER_MANIP>::pop(uint64_t result)
{
  **(_DWORD **)(result + 8) = *(_DWORD *)(result + 16);
  return result;
}

void YAML::Setting<unsigned long>::Setting(void *a1)
{
  *a1 = 0;
  operator new();
}

void YAML::SettingChange<unsigned long>::~SettingChange()
{
}

uint64_t YAML::SettingChange<unsigned long>::pop(uint64_t result)
{
  **(void **)(result + 8) = *(void *)(result + 16);
  return result;
}

void std::vector<std::unique_ptr<YAML::EmitterState::Group>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (uint64_t *)**a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)v1[1];
    unsigned int v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      unsigned int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *std::unique_ptr<YAML::EmitterState::Group>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2 = *result;
  *uint64_t result = a2;
  if (v2)
  {
    YAML::SettingChanges::~SettingChanges((uint64_t **)(v2 + 32));
    JUMPOUT(0x23ECAACC0);
  }
  return result;
}

void *YAML::SettingChanges::push(void *result, void *a2)
{
  int v3 = (char **)result;
  unint64_t v4 = result[2];
  unsigned int v5 = (void *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v8 = ((uint64_t)v5 - *result) >> 3;
    if ((unint64_t)(v8 + 1) >> 61) {
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v4 - *result;
    uint64_t v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    int v23 = result + 2;
    if (v11)
    {
      if (v11 >> 61) {
        std::__throw_bad_array_new_length[abi:ne180100]();
      }
      uint64_t v12 = (char *)operator new(8 * v11);
    }
    else
    {
      uint64_t v12 = 0;
    }
    unint64_t v13 = &v12[8 * v8];
    uint64_t v14 = &v12[8 * v11];
    *(void *)unint64_t v13 = *a2;
    uint64_t v7 = v13 + 8;
    *a2 = 0;
    v21.i64[1] = (uint64_t)(v13 + 8);
    BOOL v22 = v14;
    unint64_t v16 = *v3;
    uint64_t v15 = v3[1];
    if (v15 == *v3)
    {
      int64x2_t v18 = vdupq_n_s64((unint64_t)v15);
    }
    else
    {
      do
      {
        uint64_t v17 = *((void *)v15 - 1);
        v15 -= 8;
        *(void *)uint64_t v15 = 0;
        *((void *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      int64x2_t v18 = *(int64x2_t *)v3;
      uint64_t v7 = (char *)v21.i64[1];
      uint64_t v14 = v22;
    }
    void *v3 = v13;
    v3[1] = v7;
    int64x2_t v21 = v18;
    int v19 = v3[2];
    v3[2] = v14;
    BOOL v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (void *)std::__split_buffer<std::unique_ptr<YAML::SettingChangeBase>>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    uint64_t v6 = *a2;
    *a2 = 0;
    void *v5 = v6;
    uint64_t v7 = (char *)(v5 + 1);
  }
  v3[1] = v7;
  return result;
}

uint64_t std::__split_buffer<std::unique_ptr<YAML::SettingChangeBase>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 8;
    uint64_t v4 = *(void *)(i - 8);
    *(void *)(i - 8) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

siri::intelligence::BehaviorResponse *siri::intelligence::BehaviorResponse::BehaviorResponse(siri::intelligence::BehaviorResponse *this)
{
  *(_OWORD *)((char *)this + 69) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 8) = 0u;
  *((_DWORD *)this + 22) = 1;
  *((void *)this + 13) = 0;
  *((void *)this + 14) = 0;
  *((void *)this + 12) = 0;
  *(void *)this = &unk_26ED272B0;
  uint64_t v2 = (char *)operator new(0x40uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26ED2A320;
  *(_OWORD *)(v2 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *((void *)v2 + 7) = 0;
  *(_OWORD *)(v2 + 24) = 0u;
  *((void *)this + 15) = v2 + 24;
  *((void *)this + 16) = v2;
  MEMORY[0x23ECAA8E0](v2 + 24, &str_9);
  uint64_t v3 = *((void *)this + 15);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 32);
  *(void *)(v3 + 24) = 0;
  *(void *)(v3 + 32) = 0;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return this;
}

void sub_239AE0C68(_Unwind_Exception *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  siri::intelligence::ResponseBase::~ResponseBase((void **)v1);
  _Unwind_Resume(a1);
}

void siri::intelligence::BehaviorResponse::GetExpanded(const std::string **this@<X0>, siri::intelligence::Memory *a2@<X1>, siri::intelligence::ResponseBase *a3@<X8>)
{
  siri::intelligence::ResponseBase::ResponseBase(a3, (const siri::intelligence::ResponseBase *)this);
  *(void *)a3 = &unk_26ED272B0;
  uint64_t v6 = this[16];
  *((void *)a3 + 15) = this[15];
  *((void *)a3 + 16) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)&v6->__r_.__value_.__l.__size_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (char *)operator new(0x40uLL);
  *((void *)v7 + 2) = 0;
  *((void *)v7 + 1) = 0;
  *(void *)uint64_t v7 = &unk_26ED2A320;
  *(_OWORD *)(v7 + 24) = 0u;
  *(_OWORD *)(v7 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  *((void *)v7 + 7) = 0;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  uint64_t v8 = (std::__shared_weak_count *)*((void *)a3 + 16);
  *((void *)a3 + 15) = v7 + 24;
  *((void *)a3 + 16) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  uint64_t v9 = this[15];
  std::string::operator=((std::string *)v7 + 1, v9);
  std::string::pointer data = v9[1].__r_.__value_.__l.__data_;
  std::string::size_type size = v9[1].__r_.__value_.__l.__size_;
  if (size) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(size + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v12 = (std::__shared_weak_count *)*((void *)v7 + 7);
  *((void *)v7 + 6) = data;
  *((void *)v7 + 7) = size;
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (a2)
  {
    uint64_t v13 = *((void *)v7 + 6);
    if (v13)
    {
      (*(void (**)(void **__return_ptr))(*(void *)v13 + 88))(&lpsrc);
      uint64_t v14 = lpsrc;
      if (lpsrc
      {
        uint64_t v15 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
      }
      else
      {
        uint64_t v15 = 0;
      }
      unint64_t v16 = (std::__shared_weak_count *)*((void *)v7 + 7);
      *((void *)v7 + 6) = v14;
      *((void *)v7 + 7) = v15;
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
    }
  }
  std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)v7);
}

void sub_239AE0E70(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  siri::intelligence::BehaviorResponse::~BehaviorResponse(v2);
  _Unwind_Resume(a1);
}

std::string *siri::intelligence::BehaviorResponse::SetName(uint64_t a1, const std::string *a2)
{
  return std::string::operator=(*(std::string **)(a1 + 120), a2);
}

void siri::intelligence::BehaviorResponse::GetName(siri::intelligence::BehaviorResponse *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = (long long *)*((void *)this + 15);
  if (*((char *)v2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((void *)v2 + 1));
  }
  else
  {
    long long v3 = *v2;
    a2->__r_.__value_.__r.__words[2] = *((void *)v2 + 2);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

void siri::intelligence::BehaviorResponse::SetParameters(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(v2 + 32);
  *(void *)(v2 + 24) = v4;
  *(void *)(v2 + 32) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

uint64_t siri::intelligence::BehaviorResponse::GetParameters@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 120);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v3 = *(void *)(v2 + 32);
  *a2 = v4;
  a2[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::BehaviorResponse::GetParameter(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v6 = *(void *)(v4 + 24);
  unsigned int v5 = *(std::__shared_weak_count **)(v4 + 32);
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6 || (uint64_t v7 = std::__tree<std::string>::find<std::string>(v6 + 72, a2), v6 + 80 == v7))
  {
    *a3 = 0;
    a3[1] = 0;
    if (!v5) {
      return;
    }
    goto LABEL_8;
  }
  uint64_t v8 = *(void *)(v7 + 64);
  *a3 = *(void *)(v7 + 56);
  a3[1] = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
LABEL_8:
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_239AE0FB8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::BehaviorResponse::GetStringParameter(uint64_t a1@<X0>, const void **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  siri::intelligence::BehaviorResponse::GetParameter(a1, a2, &v7);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
  }
  else if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(void *)(a3 + 16);
  }
  uint64_t v6 = v8;
  if (v8)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
}

void sub_239AE1088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

double siri::intelligence::BehaviorResponse::GetNumberParameter(uint64_t a1, const void **a2, double a3)
{
  siri::intelligence::BehaviorResponse::GetParameter(a1, a2, &lpsrc);
  if (!lpsrc)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    unsigned int v5 = 0;
    goto LABEL_7;
  }
  unsigned int v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v4) {
    a3 = v4[9];
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a3;
}

BOOL siri::intelligence::BehaviorResponse::GetBooleanParameter(uint64_t a1, const void **a2, BOOL a3)
{
  siri::intelligence::BehaviorResponse::GetParameter(a1, a2, &lpsrc);
  if (!lpsrc)
  {
    uint64_t v4 = 0;
    goto LABEL_6;
  }
  if (!v4)
  {
LABEL_6:
    unsigned int v5 = 0;
    goto LABEL_7;
  }
  unsigned int v5 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
LABEL_7:
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v4) {
    a3 = v4[66] != 0;
  }
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return a3;
}

void std::__shared_ptr_emplace<siri::intelligence::BehaviorResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED2A320;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::BehaviorResponse::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED2A320;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__shared_ptr_emplace<siri::intelligence::BehaviorResponse::Impl>::__on_zero_shared(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 24);
    operator delete(v3);
  }
}

double siri::intelligence::Expression::Impl::Impl(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  return result;
}

{
  double result;

  *(void *)a1 = a2;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0u;
  return result;
}

siri::intelligence::Expression *siri::intelligence::Expression::Expression(siri::intelligence::Expression *this)
{
  uint64_t v2 = (char *)operator new(0x78uLL);
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = &unk_26ED2A370;
  *(_OWORD *)(v2 + 88) = 0u;
  *(_OWORD *)(v2 + 104) = 0u;
  *((void *)this + 1) = v2;
  *((void *)v2 + 4) = 0;
  *((void *)v2 + 5) = 0;
  *((void *)v2 + 3) = this;
  *(_OWORD *)(v2 + 72) = 0u;
  *(void *)this = v2 + 24;
  MEMORY[0x23ECAA8E0](v2 + 72, &str_10);
  MEMORY[0x23ECAA8E0](*(void *)this + 72, &str_10);
  time_t v7 = time(0);
  uint64_t v3 = localtime_r(&v7, &v6);
  uint64_t v4 = *(void *)this;
  *(double *)(v4 + 24) = (double)v3->tm_gmtoff;
  *(void *)(v4 + 32) = 0;
  *(void *)(v4 + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  return this;
}

void sub_239AE13FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void siri::intelligence::Expression::Impl::EvaluateFunction(uint64_t a1@<X0>, void *a2@<X1>, long long **a3@<X2>, std::string *a4@<X8>)
{
  v190[4] = *MEMORY[0x263EF8340];
  memset(&v179, 0, sizeof(v179));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v179, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179.__r_.__value_.__l.__size_ - v179.__r_.__value_.__r.__words[0]) >> 3);
  int v8 = *((unsigned __int8 *)a2 + 23);
  if (*((char *)a2 + 23) < 0)
  {
    if (a2[1] != 8)
    {
LABEL_43:
      BOOL v10 = v7 > 1;
      goto LABEL_44;
    }
    uint64_t v9 = (void *)*a2;
  }
  else
  {
    uint64_t v9 = a2;
    if (v8 != 8) {
      goto LABEL_43;
    }
  }
  BOOL v10 = v7 > 1;
  if (*v9 == 0x736E6961746E6F63 && v7 >= 2)
  {
    uint64_t v11 = *(void *)(a1 + 16);
    if (!v11) {
      goto LABEL_358;
    }
    siri::intelligence::Memory::GetVariableAsStringVector(v11, (uint64_t)v179.__r_.__value_.__l.__data_, (uint64_t)&v177);
    if (*(void *)&v177.tm_sec == *(void *)&v177.tm_hour)
    {
      if (byte_26AD8585F < 0)
      {
        std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
      }
      else
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = siri::intelligence::Memory::BOOLEAN_UNSET;
        a4->__r_.__value_.__r.__words[2] = unk_26AD85858;
      }
    }
    else
    {
      memset(&v178, 0, sizeof(v178));
      uint64_t v12 = *(void *)&v177.tm_hour - *(void *)&v177.tm_sec;
      unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v177.tm_hour - *(void *)&v177.tm_sec) >> 3);
      if (v13 >= 0xAAAAAAAAAAAAAABLL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      *(void *)&__v.tm_isdst = &v178.__end_cap_;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v178.__end_cap_, v13);
      *(void *)&__v.tm_sec = v14;
      *(void *)&__v.tm_hour = v14;
      *(void *)&__v.tm_wday = &v14[24 * v15];
      size_t v16 = 24 * ((v12 - 24) / 0x18uLL) + 24;
      bzero(v14, v16);
      *(void *)&__v.tm_moint n = &v14[v16];
      std::vector<std::string>::__swap_out_circular_buffer(&v178, (std::__split_buffer<std::string> *)&__v);
      std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&__v);
      uint64_t v17 = *(void *)&v177.tm_sec;
      uint64_t v18 = *(void *)&v177.tm_hour;
      begiint n = v178.__begin_;
      if (*(void *)&v177.tm_sec != *(void *)&v177.tm_hour)
      {
        do
        {
          siri::intelligence::StringToLower(v17, (std::string *)&__v);
          if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(begin->__r_.__value_.__l.__data_);
          }
          long long v20 = *(_OWORD *)&__v.tm_sec;
          begin->__r_.__value_.__r.__words[2] = *(void *)&__v.tm_mon;
          *(_OWORD *)&begin->__r_.__value_.__l.__data_ = v20;
          ++begin;
          v17 += 24;
        }
        while (v17 != v18);
        begiint n = v178.__begin_;
      }
      std::vector<std::string>::pointer end = v178.__end_;
      siri::intelligence::StringToLower(v179.__r_.__value_.__r.__words[0] + 24, (std::string *)&__v);
      if (begin != end)
      {
        if (__v.tm_year >= 0) {
          uint64_t tm_year_high = HIBYTE(__v.tm_year);
        }
        else {
          uint64_t tm_year_high = *(void *)&__v.tm_hour;
        }
        if (__v.tm_year >= 0) {
          p_v = &__v;
        }
        else {
          p_v = *(tm **)&__v.tm_sec;
        }
        do
        {
          uint64_t v24 = HIBYTE(begin->__r_.__value_.__r.__words[2]);
          if ((v24 & 0x80u) == 0) {
            std::string::size_type size = HIBYTE(begin->__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = begin->__r_.__value_.__l.__size_;
          }
          if (size == tm_year_high)
          {
            if ((v24 & 0x80) != 0)
            {
              if (!memcmp(begin->__r_.__value_.__l.__data_, p_v, begin->__r_.__value_.__l.__size_)) {
                goto LABEL_36;
              }
            }
            else
            {
              if (!*((unsigned char *)&begin->__r_.__value_.__s + 23)) {
                goto LABEL_36;
              }
              uint64_t v26 = 0;
              while (begin->__r_.__value_.__s.__data_[v26] == *((unsigned __int8 *)&p_v->tm_sec + v26))
              {
                if (v24 == ++v26) {
                  goto LABEL_36;
                }
              }
            }
          }
          ++begin;
        }
        while (begin != end);
        begiint n = end;
      }
LABEL_36:
      if (begin == v178.__end_) {
        char v27 = &siri::intelligence::Memory::BOOLEAN_UNSET;
      }
      else {
        char v27 = &siri::intelligence::Memory::BOOLEAN_SET;
      }
      int v28 = &byte_26AD8585F;
      if (begin != v178.__end_) {
        int v28 = &byte_26AD8582F;
      }
      if (*v28 < 0)
      {
        if (begin == v178.__end_) {
          unint64_t v56 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1;
        }
        else {
          unint64_t v56 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1;
        }
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v27, *v56);
      }
      else
      {
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v27;
        a4->__r_.__value_.__r.__words[2] = *((void *)v27 + 2);
      }
      if (SHIBYTE(__v.tm_year) < 0) {
        operator delete(*(void **)&__v.tm_sec);
      }
      *(void *)&__v.tm_sec = &v178;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
    }
    *(void *)&__v.tm_sec = &v177;
    uint64_t v36 = &__v;
LABEL_144:
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
    goto LABEL_363;
  }
LABEL_44:
  if ((v8 & 0x80) != 0)
  {
    if (a2[1] != 6)
    {
LABEL_59:
      BOOL v34 = v179.__r_.__value_.__l.__size_ != v179.__r_.__value_.__r.__words[0];
      goto LABEL_60;
    }
    int v29 = (void *)*a2;
  }
  else
  {
    int v29 = a2;
    if (v8 != 6) {
      goto LABEL_59;
    }
  }
  int v30 = *(_DWORD *)v29;
  int v31 = *((unsigned __int16 *)v29 + 2);
  BOOL v33 = v30 != 1735288172 || v31 != 26740;
  BOOL v34 = v179.__r_.__value_.__l.__size_ != v179.__r_.__value_.__r.__words[0];
  if (!v33 && v179.__r_.__value_.__l.__size_ != v179.__r_.__value_.__r.__words[0])
  {
    uint64_t v35 = *(void *)(a1 + 16);
    if (!v35)
    {
      std::to_string(a4, 0);
      goto LABEL_363;
    }
    siri::intelligence::Memory::GetVariableAsStringVector(v35, (uint64_t)v179.__r_.__value_.__l.__data_, (uint64_t)&__v);
    std::to_string(a4, -1431655765 * ((*(void *)&__v.tm_hour - *(void *)&__v.tm_sec) >> 3));
    *(void *)&v177.tm_sec = &__v;
    uint64_t v36 = &v177;
    goto LABEL_144;
  }
LABEL_60:
  if ((v8 & 0x80) == 0)
  {
    switch(*((unsigned char *)a2 + 23))
    {
      case 3:
        if (*(_WORD *)a2 != 24932 || *((unsigned char *)a2 + 2) != 121) {
          goto LABEL_245;
        }
        goto LABEL_74;
      case 4:
        if (*(_DWORD *)a2 != 1953657203 || !v34) {
          goto LABEL_245;
        }
        goto LABEL_164;
      case 5:
        if (*(_DWORD *)a2 != 1920298856 || *((unsigned char *)a2 + 4) != 115) {
          goto LABEL_245;
        }
        goto LABEL_159;
      case 6:
        if (*(_DWORD *)a2 == 1684955506 && *((_WORD *)a2 + 2) == 28015 && v34) {
          goto LABEL_152;
        }
        if (*(_DWORD *)a2 != 1683977065 || *((_WORD *)a2 + 2) != 31073 || !v34) {
          goto LABEL_245;
        }
        goto LABEL_191;
      case 7:
        if (*(_DWORD *)a2 == 1970170221 && *(_DWORD *)((char *)a2 + 3) == 1936028789) {
          goto LABEL_181;
        }
        if (*(_DWORD *)a2 == 1868785011 && *(_DWORD *)((char *)a2 + 3) == 1935961711) {
          goto LABEL_183;
        }
        if (*(_DWORD *)a2 == 1853448548 && *(_DWORD *)((char *)a2 + 3) == 1701667182) {
          goto LABEL_178;
        }
LABEL_128:
        if (*(_DWORD *)a2 != 2036298601 || *(_DWORD *)((char *)a2 + 3) != 1918985593 || !v34) {
          goto LABEL_245;
        }
        goto LABEL_226;
      case 8:
        if (*a2 == 0x68746E6F6D5F7369 && v34) {
          goto LABEL_206;
        }
        if (v8 != 7) {
          goto LABEL_245;
        }
        goto LABEL_128;
      case 0xA:
        if (*a2 == 0x656B6565775F7369 && *((_WORD *)a2 + 4) == 25710) {
          goto LABEL_266;
        }
        long long v45 = a2;
        if (v8 != 10) {
          goto LABEL_245;
        }
        goto LABEL_241;
      default:
        goto LABEL_245;
    }
  }
  uint64_t v38 = a2[1];
  switch(v38)
  {
    case 3:
      if (*(_WORD *)*a2 != 24932 || *(unsigned char *)(*a2 + 2) != 121) {
        goto LABEL_245;
      }
LABEL_74:
      memset(&__v, 0, sizeof(__v));
      double v40 = *(double *)(a1 + 24);
      double v41 = *(double *)(a1 + 32);
      *(void *)&v177.tm_sec = time(0) + (uint64_t)(v40 + v41);
      gmtime_r((const time_t *)&v177.tm_sec, &__v);
      std::to_string(a4, __v.tm_mday);
      goto LABEL_363;
    case 4:
      if (*(_DWORD *)*a2 != 1953657203 || !v34) {
        goto LABEL_245;
      }
LABEL_164:
      siri::intelligence::StringToDouble((uint64_t)v179.__r_.__value_.__l.__data_, 0);
      siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)a4);
      goto LABEL_363;
    case 5:
      if (*(_DWORD *)*a2 != 1920298856 || *(unsigned char *)(*a2 + 4) != 115) {
        goto LABEL_245;
      }
LABEL_159:
      memset(&__v, 0, sizeof(__v));
      double v61 = *(double *)(a1 + 24);
      double v62 = *(double *)(a1 + 32);
      *(void *)&v177.tm_sec = time(0) + (uint64_t)(v61 + v62);
      gmtime_r((const time_t *)&v177.tm_sec, &__v);
      std::to_string(a4, __v.tm_hour);
      goto LABEL_363;
    case 6:
      unint64_t v57 = (int *)*a2;
      if (*(_DWORD *)*a2 == 1684955506 && *(_WORD *)(*a2 + 4) == 28015 && v34)
      {
LABEL_152:
        if ((int)siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0) >= 1)erand48((unsigned __int16 *)&siri::intelligence::Utils::sRandomNumberGeneratorState); {
        goto LABEL_462;
        }
      }
      int v76 = *v57;
      int v77 = *((unsigned __int16 *)v57 + 2);
      if (v76 != 1683977065 || v77 != 31073 || !v34)
      {
        if (v38 != 8) {
          goto LABEL_218;
        }
        goto LABEL_202;
      }
LABEL_191:
      memset(&__v, 0, sizeof(__v));
      double v80 = *(double *)(a1 + 24);
      double v81 = *(double *)(a1 + 32);
      *(void *)&v177.tm_sec = time(0) + (uint64_t)(v80 + v81);
      gmtime_r((const time_t *)&v177.tm_sec, &__v);
      int v82 = siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0);
      if (__v.tm_mday == v82) {
        unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_SET;
      }
      else {
        unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_UNSET;
      }
      unint64_t v84 = &byte_26AD8582F;
      if (__v.tm_mday != v82) {
        unint64_t v84 = &byte_26AD8585F;
      }
      if (*v84 < 0)
      {
        unint64_t v85 = *(const std::string::value_type **)v83;
        if (__v.tm_mday == v82) {
          uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1;
        }
        else {
          uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1;
        }
        goto LABEL_320;
      }
      goto LABEL_316;
    case 7:
      unint64_t v64 = (int *)*a2;
      if (*(_DWORD *)*a2 == 1970170221 && *(_DWORD *)(*a2 + 3) == 1936028789)
      {
LABEL_181:
        memset(&__v, 0, sizeof(__v));
        double v72 = *(double *)(a1 + 24);
        double v73 = *(double *)(a1 + 32);
        *(void *)&v177.tm_sec = time(0) + (uint64_t)(v72 + v73);
        gmtime_r((const time_t *)&v177.tm_sec, &__v);
        std::to_string(a4, __v.tm_min);
        goto LABEL_363;
      }
      if (*v64 == 1868785011 && *(int *)((char *)v64 + 3) == 1935961711)
      {
LABEL_183:
        memset(&__v, 0, sizeof(__v));
        double v74 = *(double *)(a1 + 24);
        double v75 = *(double *)(a1 + 32);
        *(void *)&v177.tm_sec = time(0) + (uint64_t)(v74 + v75);
        gmtime_r((const time_t *)&v177.tm_sec, &__v);
        std::to_string(a4, __v.tm_sec);
        goto LABEL_363;
      }
      int v67 = *v64;
      int v68 = *(int *)((char *)v64 + 3);
      if (v67 != 1853448548 || v68 != 1701667182) {
        goto LABEL_219;
      }
LABEL_178:
      if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_14, memory_order_acquire) & 1) == 0
        && __cxa_guard_acquire(&_MergedGlobals_14))
      {
        std::string::basic_string[abi:ne180100]<0>(&__v, "Sunday");
        std::string::basic_string[abi:ne180100]<0>(&__v.tm_wday, "Monday");
        std::string::basic_string[abi:ne180100]<0>(&__v.tm_zone, "Tuesday");
        std::string::basic_string[abi:ne180100]<0>(v182, "Wednesday");
        std::string::basic_string[abi:ne180100]<0>(v183, "Thursday");
        std::string::basic_string[abi:ne180100]<0>(v184, "Friday");
        std::string::basic_string[abi:ne180100]<0>(v185, "Saturday");
        std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_26AD86BA0, (long long *)&__v.tm_sec, 7uLL);
        for (uint64_t i = 0; i != -21; i -= 3)
        {
          if (SHIBYTE(v185[i + 2]) < 0) {
            operator delete((void *)v185[i]);
          }
        }
        __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_26AD86BA0, &dword_239A02000);
        __cxa_guard_release(&_MergedGlobals_14);
      }
      memset(&__v, 0, sizeof(__v));
      siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &__v);
      uint64_t v70 = qword_26AD86BA0 + 24 * __v.tm_wday;
      if (*(char *)(v70 + 23) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v178, *(const std::string::value_type **)v70, *(void *)(v70 + 8));
      }
      else
      {
        long long v71 = *(_OWORD *)v70;
        v178.__end_cap_.__value_ = *(std::string **)(v70 + 16);
        *(_OWORD *)&v178.__begin_ = v71;
      }
      uint64_t v132 = std::string::insert((std::string *)&v178, 0, "\"");
      long long v133 = *(_OWORD *)&v132->__r_.__value_.__l.__data_;
      *(void *)&v177.tm_moint n = *((void *)&v132->__r_.__value_.__l + 2);
      *(_OWORD *)&v177.tm_sec = v133;
      v132->__r_.__value_.__l.__size_ = 0;
      v132->__r_.__value_.__r.__words[2] = 0;
      v132->__r_.__value_.__r.__words[0] = 0;
      int v134 = std::string::append((std::string *)&v177, "\"");
      long long v135 = *(_OWORD *)&v134->__r_.__value_.__l.__data_;
      a4->__r_.__value_.__r.__words[2] = v134->__r_.__value_.__r.__words[2];
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v135;
      v134->__r_.__value_.__l.__size_ = 0;
      v134->__r_.__value_.__r.__words[2] = 0;
      v134->__r_.__value_.__r.__words[0] = 0;
      if ((SHIBYTE(v177.tm_year) & 0x80000000) == 0) {
        goto LABEL_257;
      }
      std::string v111 = *(void **)&v177.tm_sec;
      goto LABEL_256;
    case 8:
LABEL_202:
      if (*(void *)*a2 == 0x68746E6F6D5F7369 && v34)
      {
LABEL_206:
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86B90, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AD86B90))
        {
          std::string::basic_string[abi:ne180100]<0>(&__v, "jan");
          std::string::basic_string[abi:ne180100]<0>(&__v.tm_wday, "feb");
          std::string::basic_string[abi:ne180100]<0>(&__v.tm_zone, "mar");
          std::string::basic_string[abi:ne180100]<0>(v182, "apr");
          std::string::basic_string[abi:ne180100]<0>(v183, "may");
          std::string::basic_string[abi:ne180100]<0>(v184, "jun");
          std::string::basic_string[abi:ne180100]<0>(v185, "jul");
          std::string::basic_string[abi:ne180100]<0>(v186, "aug");
          std::string::basic_string[abi:ne180100]<0>(v187, "sep");
          std::string::basic_string[abi:ne180100]<0>(v188, "oct");
          std::string::basic_string[abi:ne180100]<0>(v189, "nov");
          std::string::basic_string[abi:ne180100]<0>(v190, "dec");
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_26AD86BB8, (long long *)&__v.tm_sec, 0xCuLL);
          uint64_t v168 = 36;
          do
          {
            if (*((char *)&__v + v168 * 8 - 1) < 0) {
              operator delete((void *)v179.__r_.__value_.__r.__words[v168 + 1]);
            }
            v168 -= 3;
          }
          while (v168 * 8);
          __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_26AD86BB8, &dword_239A02000);
          __cxa_guard_release(&qword_26AD86B90);
        }
        memset(&__v, 0, sizeof(__v));
        double v88 = *(double *)(a1 + 24);
        double v89 = *(double *)(a1 + 32);
        *(void *)&v177.tm_sec = time(0) + (uint64_t)(v88 + v89);
        gmtime_r((const time_t *)&v177.tm_sec, &__v);
        if (*(char *)(v179.__r_.__value_.__r.__words[0] + 23) < 0)
        {
          if (*(void *)(v179.__r_.__value_.__r.__words[0] + 8))
          {
LABEL_209:
            siri::intelligence::StringToLower((uint64_t)v179.__r_.__value_.__l.__data_, (std::string *)&v178);
            siri::intelligence::StringTrim(" \t\n\r", (const std::string *)&v178, (std::string *)&v177);
            if (SHIBYTE(v178.__end_cap_.__value_) < 0) {
              operator delete(v178.__begin_);
            }
            uint64_t v90 = 0;
            uint64_t v91 = 0;
            while (!siri::intelligence::StringStartsWith((std::string *)&v177, (unsigned __int8 *)(qword_26AD86BB8 + v90)))
            {
              ++v91;
              v90 += 24;
              if (v91 == 12)
              {
                if (SHIBYTE(v177.tm_year) < 0)
                {
                  int v92 = **(char **)&v177.tm_sec;
                  if (v92 <= 47)
                  {
LABEL_307:
                    LODWORD(v91) = -1;
                    break;
                  }
                }
                else
                {
                  LOBYTE(v92) = v177.tm_sec;
                  if (SLOBYTE(v177.tm_sec) < 48) {
                    goto LABEL_307;
                  }
                }
                if (v92 <= 0x31u)
                {
                  LODWORD(v91) = siri::intelligence::StringToIntegralType<int>((const std::string *)&v177, 0);
                  break;
                }
                goto LABEL_307;
              }
            }
            if (SHIBYTE(v177.tm_year) < 0) {
              operator delete(*(void **)&v177.tm_sec);
            }
            goto LABEL_310;
          }
        }
        else if (*(unsigned char *)(v179.__r_.__value_.__r.__words[0] + 23))
        {
          goto LABEL_209;
        }
        LODWORD(v91) = -1;
LABEL_310:
        if (__v.tm_mon == v91) {
          unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_SET;
        }
        else {
          unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_UNSET;
        }
        uint64_t v131 = &byte_26AD8582F;
        if (__v.tm_mon != v91) {
          uint64_t v131 = &byte_26AD8585F;
        }
        if ((*v131 & 0x80000000) == 0) {
          goto LABEL_316;
        }
        unint64_t v85 = *(const std::string::value_type **)v83;
        if (__v.tm_mon == v91) {
          uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1;
        }
        else {
          uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1;
        }
        goto LABEL_320;
      }
      uint64_t v38 = a2[1];
LABEL_218:
      if (v38 == 7)
      {
LABEL_219:
        if (*(_DWORD *)*a2 == 2036298601 && *(_DWORD *)(*a2 + 3) == 1918985593 && v34)
        {
LABEL_226:
          memset(&__v, 0, sizeof(__v));
          double v95 = *(double *)(a1 + 24);
          double v96 = *(double *)(a1 + 32);
          *(void *)&v177.tm_sec = time(0) + (uint64_t)(v95 + v96);
          gmtime_r((const time_t *)&v177.tm_sec, &__v);
          int v97 = siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0)
              - 1900;
          if (__v.tm_year == v97) {
            int v98 = &siri::intelligence::Memory::BOOLEAN_SET;
          }
          else {
            int v98 = &siri::intelligence::Memory::BOOLEAN_UNSET;
          }
          int v99 = &byte_26AD8582F;
          if (__v.tm_year != v97) {
            int v99 = &byte_26AD8585F;
          }
          if ((*v99 & 0x80000000) == 0)
          {
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v98;
            std::string::size_type v100 = *((void *)v98 + 2);
            goto LABEL_361;
          }
          unint64_t v85 = *(const std::string::value_type **)v98;
          if (__v.tm_year == v97) {
            uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1;
          }
          else {
            uint64_t v86 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1;
          }
LABEL_320:
          std::string::__init_copy_ctor_external(a4, v85, *v86);
          goto LABEL_363;
        }
        uint64_t v38 = a2[1];
      }
      if (v38 != 10) {
        goto LABEL_245;
      }
      if (*(void *)*a2 == 0x656B6565775F7369 && *(_WORD *)(*a2 + 8) == 25710)
      {
LABEL_266:
        memset(&__v, 0, sizeof(__v));
        double v114 = *(double *)(a1 + 24);
        double v115 = *(double *)(a1 + 32);
        *(void *)&v177.tm_sec = time(0) + (uint64_t)(v114 + v115);
        gmtime_r((const time_t *)&v177.tm_sec, &__v);
        if (__v.tm_wday == 6 || __v.tm_wday == 0) {
          size_t v117 = "true";
        }
        else {
          size_t v117 = "false";
        }
        std::string::basic_string[abi:ne180100]<0>(a4, v117);
        goto LABEL_363;
      }
      if (a2[1] == 10)
      {
        long long v45 = (uint64_t *)*a2;
LABEL_241:
        uint64_t v102 = *v45;
        int v103 = *((unsigned __int16 *)v45 + 4);
        if (v102 == 0x646B6565775F7369 && v103 == 31073)
        {
          memset(&__v, 0, sizeof(__v));
          siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &__v);
          if ((__v.tm_wday - 1) >= 5) {
            unsigned __int8 v130 = "false";
          }
          else {
            unsigned __int8 v130 = "true";
          }
          std::string::basic_string[abi:ne180100]<0>(a4, v130);
          goto LABEL_363;
        }
      }
LABEL_245:
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "month_name"))
      {
        memset(&v177, 0, sizeof(v177));
        siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &v177);
        if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86B98, memory_order_acquire) & 1) == 0
          && __cxa_guard_acquire(&qword_26AD86B98))
        {
          std::string::basic_string[abi:ne180100]<0>(&__v, "January");
          std::string::basic_string[abi:ne180100]<0>(&__v.tm_wday, "February");
          std::string::basic_string[abi:ne180100]<0>(&__v.tm_zone, "March");
          std::string::basic_string[abi:ne180100]<0>(v182, "April");
          std::string::basic_string[abi:ne180100]<0>(v183, "May");
          std::string::basic_string[abi:ne180100]<0>(v184, "June");
          std::string::basic_string[abi:ne180100]<0>(v185, "July");
          std::string::basic_string[abi:ne180100]<0>(v186, "August");
          std::string::basic_string[abi:ne180100]<0>(v187, "September");
          std::string::basic_string[abi:ne180100]<0>(v188, "October");
          std::string::basic_string[abi:ne180100]<0>(v189, "November");
          std::string::basic_string[abi:ne180100]<0>(v190, "December");
          std::vector<std::string>::vector[abi:ne180100]((uint64_t)&qword_26AD86BD0, (long long *)&__v.tm_sec, 0xCuLL);
          uint64_t v167 = 36;
          do
          {
            if (*((char *)&__v + v167 * 8 - 1) < 0) {
              operator delete((void *)v179.__r_.__value_.__r.__words[v167 + 1]);
            }
            v167 -= 3;
          }
          while (v167 * 8);
          __cxa_atexit((void (*)(void *))std::vector<std::string>::~vector[abi:ne180100], &qword_26AD86BD0, &dword_239A02000);
          __cxa_guard_release(&qword_26AD86B98);
        }
        uint64_t v105 = qword_26AD86BD0 + 24 * v177.tm_mon;
        if (*(char *)(v105 + 23) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)&v178, *(const std::string::value_type **)v105, *(void *)(v105 + 8));
        }
        else
        {
          long long v106 = *(_OWORD *)v105;
          v178.__end_cap_.__value_ = *(std::string **)(v105 + 16);
          *(_OWORD *)&v178.__begin_ = v106;
        }
        uint64_t v107 = std::string::insert((std::string *)&v178, 0, "\"");
        long long v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        *(void *)&__v.tm_moint n = *((void *)&v107->__r_.__value_.__l + 2);
        *(_OWORD *)&__v.tm_sec = v108;
        v107->__r_.__value_.__l.__size_ = 0;
        v107->__r_.__value_.__r.__words[2] = 0;
        v107->__r_.__value_.__r.__words[0] = 0;
        int v109 = std::string::append((std::string *)&__v, "\"");
        long long v110 = *(_OWORD *)&v109->__r_.__value_.__l.__data_;
        a4->__r_.__value_.__r.__words[2] = v109->__r_.__value_.__r.__words[2];
        *(_OWORD *)&a4->__r_.__value_.__l.__data_ = v110;
        v109->__r_.__value_.__l.__size_ = 0;
        v109->__r_.__value_.__r.__words[2] = 0;
        v109->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(__v.tm_year) < 0)
        {
          std::string v111 = *(void **)&__v.tm_sec;
LABEL_256:
          operator delete(v111);
        }
LABEL_257:
        if (SHIBYTE(v178.__end_cap_.__value_) < 0)
        {
          std::vector<std::string>::pointer v112 = v178.__begin_;
LABEL_259:
          operator delete(v112);
          goto LABEL_363;
        }
        goto LABEL_363;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "month"))
      {
        memset(&__v, 0, sizeof(__v));
        siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &__v);
        std::to_string(a4, __v.tm_mon);
        goto LABEL_363;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "year"))
      {
        memset(&__v, 0, sizeof(__v));
        siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &__v);
        std::to_string(a4, __v.tm_year + 1900);
        goto LABEL_363;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "date_reached")
        && v7 >= 3)
      {
        if ((int)siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0) <= 30&& (int)siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0) < 2)
        {
          int v113 = 1;
        }
        else if ((int)siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0) > 30)
        {
          int v113 = 31;
        }
        else
        {
          int v113 = siri::intelligence::StringToIntegralType<int>((const std::string *)v179.__r_.__value_.__l.__data_, 0);
        }
        if ((int)siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 24), 0) <= 10&& (int)siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 24), 0) < 1)
        {
          int v138 = 0;
        }
        else if ((int)siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 24), 0) > 10)
        {
          int v138 = 11;
        }
        else
        {
          int v138 = siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 24), 0);
        }
        int v139 = siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 48), 0);
        memset(&__v, 0, sizeof(__v));
        siri::intelligence::Utils::GetLocalTimeAtUtcOffset((siri::intelligence::Utils *)(uint64_t)(*(double *)(a1 + 24) + *(double *)(a1 + 32)), &__v);
        if (v139 > __v.tm_year + 1900) {
          goto LABEL_344;
        }
        if (v139 < __v.tm_year + 1900)
        {
LABEL_346:
          BOOL v140 = &siri::intelligence::Memory::BOOLEAN_SET;
LABEL_347:
          if (*((char *)v140 + 23) < 0) {
            goto LABEL_362;
          }
          goto LABEL_360;
        }
        if (v138 <= __v.tm_mon)
        {
          if (v138 < __v.tm_mon) {
            goto LABEL_346;
          }
          if (v113 <= __v.tm_mday)
          {
            if (v113 >= __v.tm_mday && v7 >= 4)
            {
              int v141 = siri::intelligence::StringToIntegralType<int>((const std::string *)(v179.__r_.__value_.__r.__words[0] + 72), 0);
              if (v141 > __v.tm_hour)
              {
                BOOL v140 = &siri::intelligence::Memory::BOOLEAN_UNSET;
                if (byte_26AD8585F < 0)
                {
                  std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
                  goto LABEL_363;
                }
                goto LABEL_360;
              }
            }
            goto LABEL_346;
          }
        }
LABEL_344:
        BOOL v140 = &siri::intelligence::Memory::BOOLEAN_UNSET;
        goto LABEL_347;
      }
      BOOL v118 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "time_reached");
      if (v118 && v34)
      {
        double SecsSinceEpoch = siri::intelligence::Utils::GetSecsSinceEpoch((siri::intelligence::Utils *)v118);
        double v120 = *(double *)(a1 + 32);
        unint64_t v121 = siri::intelligence::StringToIntegralType<unsigned long long>((const std::string *)v179.__r_.__value_.__l.__data_, 0);
        unint64_t v122 = (unint64_t)(SecsSinceEpoch + v120);
        if (v121 <= v122) {
          unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_SET;
        }
        else {
          unint64_t v83 = &siri::intelligence::Memory::BOOLEAN_UNSET;
        }
        int v123 = &byte_26AD8585F;
        if (v121 <= v122) {
          int v123 = &byte_26AD8582F;
        }
        if ((*v123 & 0x80000000) == 0)
        {
LABEL_316:
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v83;
          std::string::size_type v100 = *((void *)v83 + 2);
LABEL_361:
          a4->__r_.__value_.__r.__words[2] = v100;
          goto LABEL_363;
        }
        if (v121 <= v122) {
          uint64_t v124 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1;
        }
        else {
          uint64_t v124 = (std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1;
        }
        std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v83, *v124);
        goto LABEL_363;
      }
      if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "is_platform") && v34)
      {
        siri::intelligence::StringToLower((uint64_t)v179.__r_.__value_.__l.__data_, (std::string *)&__v);
        siri::intelligence::StringToLower(a1 + 48, (std::string *)&v177);
        BOOL v125 = std::operator==[abi:ne180100]<std::allocator<char>>((unsigned __int8 *)&__v, (unsigned __int8 *)&v177);
        uint64_t v126 = &siri::intelligence::Memory::BOOLEAN_UNSET;
        if (v125) {
          int v127 = &siri::intelligence::Memory::BOOLEAN_SET;
        }
        else {
          int v127 = &siri::intelligence::Memory::BOOLEAN_UNSET;
        }
        size_t v128 = &byte_26AD8582F;
        if (!v125) {
          size_t v128 = &byte_26AD8585F;
        }
        if (*v128 < 0)
        {
          uint64_t v129 = *(const std::string::value_type **)v127;
          if (v125) {
            uint64_t v126 = &siri::intelligence::Memory::BOOLEAN_SET;
          }
LABEL_298:
          std::string::__init_copy_ctor_external(a4, v129, *((void *)v126 + 1));
          goto LABEL_332;
        }
        goto LABEL_331;
      }
      if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "is_device") || !v34)
      {
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "is_purchased") && v34) {
          goto LABEL_358;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "is_set") && v34)
        {
          uint64_t v142 = *(void *)(a1 + 16);
          if (v142 && siri::intelligence::Memory::HasVariable(v142, (uint64_t)v179.__r_.__value_.__l.__data_))
          {
            BOOL v140 = &siri::intelligence::Memory::BOOLEAN_SET;
LABEL_359:
            if (*((char *)v140 + 23) < 0)
            {
LABEL_362:
              std::string::__init_copy_ctor_external(a4, *(const std::string::value_type **)v140, *((void *)v140 + 1));
              goto LABEL_363;
            }
LABEL_360:
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v140;
            std::string::size_type v100 = *((void *)v140 + 2);
            goto LABEL_361;
          }
LABEL_358:
          BOOL v140 = &siri::intelligence::Memory::BOOLEAN_UNSET;
          goto LABEL_359;
        }
        if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "input_chosen") && v10)
        {
          uint64_t v143 = *(void **)(a1 + 8);
          if (!v143) {
            goto LABEL_358;
          }
          siri::intelligence::FlowGraph::GetInputGroup(v143, (uint64_t)v179.__r_.__value_.__l.__data_, &v175);
          siri::intelligence::FlowGraph::GetInputGroupLastIntent(*(void **)(a1 + 8), (uint64_t)v179.__r_.__value_.__l.__data_, &v173);
          if (!v173)
          {
            if (byte_26AD8585F < 0)
            {
              std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
            }
            else
            {
              *(_OWORD *)&a4->__r_.__value_.__l.__data_ = siri::intelligence::Memory::BOOLEAN_UNSET;
              a4->__r_.__value_.__r.__words[2] = unk_26AD85858;
            }
            goto LABEL_445;
          }
          memset(&__v, 0, 24);
          std::vector<std::shared_ptr<siri::intelligence::IntentReference>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*>(&__v, *(void **)(v175 + 72), *(void **)(v175 + 80), (uint64_t)(*(void *)(v175 + 80) - *(void *)(v175 + 72)) >> 4);
          uint64_t v144 = *(void *)&__v.tm_sec;
          if (*(void *)&__v.tm_sec == *(void *)&__v.tm_hour)
          {
            size_t v146 = 0;
          }
          else
          {
            std::string::size_type v145 = 0;
            size_t v146 = 0;
            do
            {
              if (std::operator==[abi:ne180100]<std::allocator<char>>(*(unsigned __int8 **)v144, (unsigned __int8 *)(v179.__r_.__value_.__r.__words[0] + 24)))
              {
                std::string::size_type v145 = *(unsigned __int8 **)v144;
                uint64_t v147 = *(std::__shared_weak_count **)(v144 + 8);
                if (v147) {
                  atomic_fetch_add_explicit(&v147->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                if (v146) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v146);
                }
                size_t v146 = v147;
              }
              v144 += 16;
            }
            while (v144 != *(void *)&__v.tm_hour);
            if (v145)
            {
              memset(&v177, 0, 24);
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v177, *(long long **)(v173 + 48), *(long long **)(v173 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v173 + 56) - *(void *)(v173 + 48)) >> 3));
              std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v178, *(const void ***)&v177.tm_sec, *(const void ***)&v177.tm_hour);
              memset(&v172, 0, sizeof(v172));
              std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v172, *((long long **)v145 + 6), *((long long **)v145 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v145 + 7) - *((void *)v145 + 6)) >> 3));
              uint64_t v148 = (const void **)v172.__r_.__value_.__r.__words[0];
              if (v172.__r_.__value_.__r.__words[0] == v172.__r_.__value_.__l.__size_)
              {
LABEL_387:
                uint64_t v149 = &siri::intelligence::Memory::BOOLEAN_SET;
                if (byte_26AD8582F < 0)
                {
                  std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_SET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_SET + 1));
LABEL_441:
                  int v180 = &v172;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v180);
                  std::__tree<std::string>::destroy((uint64_t)&v178, (char *)v178.__end_);
                  v178.__begin_ = (std::vector<std::string>::pointer)&v177;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
LABEL_442:
                  if (v146) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v146);
                  }
                  *(void *)&v177.tm_sec = &__v;
                  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
LABEL_445:
                  if (v174) {
                    std::__shared_weak_count::__release_shared[abi:ne180100](v174);
                  }
                  int v165 = v176;
                  if (!v176) {
                    goto LABEL_363;
                  }
                  goto LABEL_459;
                }
              }
              else
              {
                while (&v178.__end_ != (std::vector<std::string>::pointer *)std::__tree<std::string>::find<std::string>((uint64_t)&v178, v148))
                {
                  v148 += 3;
                  if (v148 == (const void **)v172.__r_.__value_.__l.__size_) {
                    goto LABEL_387;
                  }
                }
                uint64_t v149 = &siri::intelligence::Memory::BOOLEAN_UNSET;
                if (byte_26AD8585F < 0)
                {
                  std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
                  goto LABEL_441;
                }
              }
              *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v149;
              a4->__r_.__value_.__r.__words[2] = *((void *)v149 + 2);
              goto LABEL_441;
            }
          }
          if (byte_26AD8585F < 0)
          {
            std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
          }
          else
          {
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = siri::intelligence::Memory::BOOLEAN_UNSET;
            a4->__r_.__value_.__r.__words[2] = unk_26AD85858;
          }
          goto LABEL_442;
        }
        if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "input_timestamp")
          || !v10)
        {
          BOOL v162 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, "time_since");
          if (!v162 || !v34 || !*(void *)(a1 + 8)) {
            goto LABEL_358;
          }
          siri::intelligence::Utils::GetSecsSinceEpoch((siri::intelligence::Utils *)v162);
          if (!std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v179.__r_.__value_.__l.__data_, "session"))
          {
            if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v179.__r_.__value_.__l.__data_, "response")&& v10)
            {
              siri::intelligence::FlowGraph::GetResponse(*(void **)(a1 + 8), v179.__r_.__value_.__r.__words[0] + 24, &__v);
              uint64_t v163 = *(void **)(a1 + 8);
              uint64_t v164 = *(std::__shared_weak_count **)&__v.tm_hour;
              v170[0] = *(void *)&__v.tm_sec;
              v170[1] = *(void *)&__v.tm_hour;
              if (*(void *)&__v.tm_hour) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__v.tm_hour + 8), 1uLL, memory_order_relaxed);
              }
              siri::intelligence::FlowGraph::GetResponseLastTimestamp(v163, v170);
              if (v164) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v164);
              }
              siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)a4);
              if (!v164) {
                goto LABEL_363;
              }
              int v165 = v164;
LABEL_459:
              std::__shared_weak_count::__release_shared[abi:ne180100](v165);
              goto LABEL_363;
            }
            BOOL v166 = std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v179.__r_.__value_.__l.__data_, "interaction");
            if (v166)
            {
              if (*(double *)(a1 + 40) != 0.0)
              {
                siri::intelligence::Utils::GetSecsSinceEpoch((siri::intelligence::Utils *)v166);
                siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)a4);
                goto LABEL_363;
              }
            }
            else
            {
              if (!siri::intelligence::StringIsANumber((const std::string *)v179.__r_.__value_.__l.__data_)) {
                goto LABEL_358;
              }
              siri::intelligence::StringToDouble((uint64_t)v179.__r_.__value_.__l.__data_, 0);
            }
          }
LABEL_462:
          siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)a4);
          goto LABEL_363;
        }
        int v150 = *(void **)(a1 + 8);
        if (!v150) {
          goto LABEL_358;
        }
        siri::intelligence::FlowGraph::GetInputGroup(v150, (uint64_t)v179.__r_.__value_.__l.__data_, &v172);
        if (!v172.__r_.__value_.__r.__words[0])
        {
          if (byte_26AD8585F < 0)
          {
            std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
          }
          else
          {
            *(_OWORD *)&a4->__r_.__value_.__l.__data_ = siri::intelligence::Memory::BOOLEAN_UNSET;
            a4->__r_.__value_.__r.__words[2] = unk_26AD85858;
          }
          goto LABEL_458;
        }
        memset(&__v, 0, 24);
        std::vector<std::shared_ptr<siri::intelligence::IntentReference>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*>(&__v, *(void **)(v172.__r_.__value_.__r.__words[0] + 72), *(void **)(v172.__r_.__value_.__r.__words[0] + 80), (uint64_t)(*(void *)(v172.__r_.__value_.__r.__words[0] + 80)- *(void *)(v172.__r_.__value_.__r.__words[0] + 72)) >> 4);
        uint64_t v151 = *(void *)&__v.tm_sec;
        if (*(void *)&__v.tm_sec == *(void *)&__v.tm_hour)
        {
          uint64_t v153 = 0;
        }
        else
        {
          std::string::size_type v152 = 0;
          uint64_t v153 = 0;
          do
          {
            if (std::operator==[abi:ne180100]<std::allocator<char>>(*(unsigned __int8 **)v151, (unsigned __int8 *)(v179.__r_.__value_.__r.__words[0] + 24)))
            {
              std::string::size_type v152 = *(unsigned __int8 **)v151;
              uint64_t v154 = *(std::__shared_weak_count **)(v151 + 8);
              if (v154) {
                atomic_fetch_add_explicit(&v154->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v153) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v153);
              }
              uint64_t v153 = v154;
            }
            v151 += 16;
          }
          while (v151 != *(void *)&__v.tm_hour);
          if (v152)
          {
            memset(&v177, 0, 24);
            std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v177, *((long long **)v152 + 6), *((long long **)v152 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v152 + 7) - *((void *)v152 + 6)) >> 3));
            std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>((uint64_t)&v178, *(const void ***)&v177.tm_sec, *(const void ***)&v177.tm_hour);
            size_t v155 = *(uint64_t **)&__v.tm_sec;
            if (*(void *)&__v.tm_sec != *(void *)&__v.tm_hour)
            {
              double v156 = 0.0;
              do
              {
                uint64_t v157 = *v155;
                for (int j = *(const void ***)(*v155 + 48); j != *(const void ***)(v157 + 56); j += 3)
                {
                  if (&v178.__end_ == (std::vector<std::string>::pointer *)std::__tree<std::string>::find<std::string>((uint64_t)&v178, j))goto LABEL_414; {
                  uint64_t v157 = *v155;
                  }
                }
                BOOL v159 = *(void **)(a1 + 8);
                std::string::size_type v160 = (std::__shared_weak_count *)v155[1];
                v171[0] = v157;
                v171[1] = (uint64_t)v160;
                if (v160) {
                  atomic_fetch_add_explicit(&v160->__shared_owners_, 1uLL, memory_order_relaxed);
                }
                double IntentReferenceLastTimestamp = siri::intelligence::FlowGraph::GetIntentReferenceLastTimestamp(v159, v171);
                if (v160) {
                  std::__shared_weak_count::__release_shared[abi:ne180100](v160);
                }
                if (IntentReferenceLastTimestamp > v156) {
                  double v156 = IntentReferenceLastTimestamp;
                }
LABEL_414:
                v155 += 2;
              }
              while (v155 != *(uint64_t **)&__v.tm_hour);
            }
            siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)a4);
            std::__tree<std::string>::destroy((uint64_t)&v178, (char *)v178.__end_);
            v178.__begin_ = (std::vector<std::string>::pointer)&v177;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v178);
            goto LABEL_455;
          }
        }
        if (byte_26AD8585F < 0)
        {
          std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)siri::intelligence::Memory::BOOLEAN_UNSET, *((std::string::size_type *)&siri::intelligence::Memory::BOOLEAN_UNSET + 1));
        }
        else
        {
          *(_OWORD *)&a4->__r_.__value_.__l.__data_ = siri::intelligence::Memory::BOOLEAN_UNSET;
          a4->__r_.__value_.__r.__words[2] = unk_26AD85858;
        }
LABEL_455:
        if (v153) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v153);
        }
        *(void *)&v177.tm_sec = &__v;
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v177);
LABEL_458:
        int v165 = (std::__shared_weak_count *)v172.__r_.__value_.__l.__size_;
        if (!v172.__r_.__value_.__l.__size_) {
          goto LABEL_363;
        }
        goto LABEL_459;
      }
      siri::intelligence::StringToLower(a1 + 72, (std::string *)&__v);
      siri::intelligence::StringToLower((uint64_t)v179.__r_.__value_.__l.__data_, (std::string *)&v177);
      int v136 = siri::intelligence::StringContains((char **)&__v, (char *)&v177);
      uint64_t v126 = &siri::intelligence::Memory::BOOLEAN_UNSET;
      if (v136) {
        int v127 = &siri::intelligence::Memory::BOOLEAN_SET;
      }
      else {
        int v127 = &siri::intelligence::Memory::BOOLEAN_UNSET;
      }
      uint64_t v137 = &byte_26AD8582F;
      if (!v136) {
        uint64_t v137 = &byte_26AD8585F;
      }
      if (*v137 < 0)
      {
        uint64_t v129 = *(const std::string::value_type **)v127;
        if (v136) {
          uint64_t v126 = &siri::intelligence::Memory::BOOLEAN_SET;
        }
        goto LABEL_298;
      }
LABEL_331:
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *v127;
      a4->__r_.__value_.__r.__words[2] = *((void *)v127 + 2);
LABEL_332:
      if (SHIBYTE(v177.tm_year) < 0) {
        operator delete(*(void **)&v177.tm_sec);
      }
      if (SHIBYTE(__v.tm_year) < 0)
      {
        std::vector<std::string>::pointer v112 = *(std::vector<std::string>::pointer *)&__v.tm_sec;
        goto LABEL_259;
      }
LABEL_363:
      *(void *)&__v.tm_sec = &v179;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
      return;
    default:
      goto LABEL_218;
  }
}

void sub_239AE321C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__pa,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__split_buffer<std::string> *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v41 = 0;
  while (1)
  {
    if (*(char *)(v39 + v41 + 167) < 0) {
      operator delete(*(void **)(v39 + v41 + 144));
    }
    v41 -= 24;
    if (v41 == -168)
    {
      __cxa_guard_abort(&_MergedGlobals_14);
      a35 = (std::__split_buffer<std::string> *)&a39;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a35);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t std::vector<std::string>::vector[abi:ne180100](uint64_t a1, long long *a2, unint64_t a3)
{
  *(void *)(a1 + 16) = 0;
  uint64_t v4 = a1 + 16;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  if (a3)
  {
    std::vector<std::string>::__vallocate[abi:ne180100]((void *)a1, a3);
    *(void *)(a1 + 8) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(v4, a2, (long long *)((char *)a2 + 24 * a3), *(std::string **)(a1 + 8));
  }
  return a1;
}

void sub_239AE3714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Expression::Impl::ExpandFunctions(void *a1, std::string *__str)
{
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  else {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  }
  uint64_t v5 = MEMORY[0x263EF8318];
  uint64_t v6 = size;
  do
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      unint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
      std::string::size_type v8 = __str->__r_.__value_.__l.__size_;
    }
    else
    {
      unint64_t v7 = __str;
      std::string::size_type v8 = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    std::string::size_type v9 = v6 - 1;
    if (v8 < v6 - 1) {
      std::string::size_type v9 = v8;
    }
    if (v8 - v9 > 1) {
      std::string::size_type v8 = v9 + 1;
    }
    if (!v8) {
      return 0;
    }
    uint64_t v10 = (unsigned __int8 *)v7 + v8;
    uint64_t v11 = v7;
    uint64_t v12 = (std::string *)v10;
    do
    {
      unint64_t v13 = v11;
      uint64_t v14 = (unsigned __int8 *)v11;
      while (1)
      {
        int v15 = *v14++;
        if (v15 == 40) {
          break;
        }
        unint64_t v13 = (std::string *)v14;
        if (v14 == v10)
        {
          unint64_t v13 = v12;
          goto LABEL_19;
        }
      }
      uint64_t v11 = (std::string *)((char *)&v13->__r_.__value_.__l.__data_ + 1);
      uint64_t v12 = v13;
    }
    while (v14 != v10);
LABEL_19:
    uint64_t v6 = (char *)v13 - (char *)v7;
    uint64_t v16 = v13 == (std::string *)v10 ? -1 : (char *)v13 - (char *)v7;
    if ((unint64_t)(v16 - 1) > 0xFFFFFFFFFFFFFFFDLL) {
      return 0;
    }
    uint64_t v17 = __str;
    if ((*((unsigned char *)&__str->__r_.__value_.__s + 23) & 0x80) != 0) {
      uint64_t v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    unsigned int v18 = v17->__r_.__value_.__s.__data_[v16 - 1];
    if ((v18 & 0x80000000) != 0) {
      int v19 = __maskrune(v17->__r_.__value_.__s.__data_[v16 - 1], 0x500uLL);
    }
    else {
      int v19 = *(_DWORD *)(v5 + 4 * v18 + 60) & 0x500;
    }
  }
  while (v18 != 95 && v19 == 0);
  do
  {
    int64_t v21 = v6;
    if (v6-- < 1) {
      break;
    }
    int v23 = __str;
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
      int v23 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    uint64_t v24 = (char *)v23 + v21;
    unsigned int v25 = *(v24 - 1);
    int v26 = (v25 & 0x80000000) != 0 ? __maskrune(*(v24 - 1), 0x500uLL) : *(_DWORD *)(v5 + 4 * v25 + 60) & 0x500;
  }
  while (v25 == 95 || v26 != 0);
  std::string::basic_string(&v90, __str, v21, v16 - v21, (std::allocator<char> *)&__p);
  siri::intelligence::StringTrim(" \t\n\r", &v90, (std::string *)&__v);
  siri::intelligence::StringToLower((uint64_t)&__v, &v91);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v90.__r_.__value_.__l.__data_);
  }
  memset(&v90, 0, sizeof(v90));
  uint64_t v28 = v16 + 1;
  if (v16 + 1 >= (int)size)
  {
    std::string::size_type v33 = v16 + 1;
  }
  else
  {
    int v29 = 0;
    int v30 = 0;
    unsigned int v31 = 0;
    unsigned int v32 = (std::allocator<std::string> *)&v90.__r_.__value_.__r.__words[2];
    std::string::size_type v33 = v28;
    while (1)
    {
      BOOL v34 = __str;
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
        BOOL v34 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      int v35 = v34->__r_.__value_.__s.__data_[v28];
      switch(v35)
      {
        case '""':
        case '\'':
          v30 ^= (v29 & 1) == 0;
          break;
        case '#':
        case '$':
        case '%':
        case '&':
        case '*':
        case '+':
          break;
        case '(':
          v31 += (v30 & 1) == 0;
          break;
        case ')':
          unsigned int v31 = (__PAIR64__(v31, v30 & 1) - 1) >> 32;
          break;
        case ',':
          if (!v31)
          {
            if (v30)
            {
              unsigned int v31 = 0;
              int v30 = 1;
            }
            else
            {
              std::string::basic_string(&v88, __str, v33, v28 - v33, (std::allocator<char> *)&__v);
              siri::intelligence::StringTrim(" \t\n\r", &v88, &__p);
              uint64_t v39 = (_OWORD *)v90.__r_.__value_.__l.__size_;
              if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
              {
                uint64_t v41 = v32;
                unint64_t v42 = 0xAAAAAAAAAAAAAAABLL
                    * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3);
                unint64_t v43 = v42 + 1;
                if (v42 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556
                   * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3) > v43)
                  unint64_t v43 = 0x5555555555555556
                      * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                  unint64_t v44 = 0xAAAAAAAAAAAAAAALL;
                else {
                  unint64_t v44 = v43;
                }
                __v.__end_cap_.__value_ = v41;
                if (v44) {
                  long long v45 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)v41, v44);
                }
                else {
                  long long v45 = 0;
                }
                unint64_t v46 = v45 + v42;
                __v.__first_ = v45;
                __v.__begin_ = v46;
                __v.__end_cap_.__value_ = &v45[v44];
                long long v47 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                v46->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v46->__r_.__value_.__l.__data_ = v47;
                memset(&__p, 0, sizeof(__p));
                __v.__end_ = v46 + 1;
                std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v90, &__v);
                std::string::size_type v48 = v90.__r_.__value_.__l.__size_;
                std::__split_buffer<std::string>::~__split_buffer(&__v);
                v90.__r_.__value_.__l.__size_ = v48;
                unsigned int v32 = v41;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v40 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
                *(void *)(v90.__r_.__value_.__l.__size_ + 16) = *((void *)&__p.__r_.__value_.__l + 2);
                *uint64_t v39 = v40;
                memset(&__p, 0, sizeof(__p));
                v90.__r_.__value_.__l.__size_ = (std::string::size_type)v39 + 24;
              }
              if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v88.__r_.__value_.__l.__data_);
              }
              unsigned int v31 = 0;
              int v30 = 0;
              std::string::size_type v33 = v28 + 1;
            }
          }
          break;
        default:
          if (v29) {
            int v36 = 0;
          }
          else {
            int v36 = v29;
          }
          if ((v30 & 1) == 0) {
            int v36 = v29;
          }
          if ((v30 & ((v29 & 1) == 0)) != 0) {
            int v37 = 1;
          }
          else {
            int v37 = v30;
          }
          if ((v30 & ((v29 & 1) == 0)) != 0) {
            int v36 = 1;
          }
          if (v35 == 92)
          {
            int v30 = v37;
            int v29 = v36;
          }
          break;
      }
      uint64_t v38 = __str;
      if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
        uint64_t v38 = (std::string *)__str->__r_.__value_.__r.__words[0];
      }
      if ((v31 & 0x80000000) != 0) {
        break;
      }
      if (v38->__r_.__value_.__s.__data_[v28] != 92) {
        int v29 = 0;
      }
      if ((int)size == ++v28)
      {
        uint64_t v28 = (int)size;
        break;
      }
    }
  }
  int v50 = std::string::basic_string((std::string *)&__v, __str, v33, v28 - v33, (std::allocator<char> *)&v88);
  siri::intelligence::StringTrim(" \t\n\r", v50, &__p);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  std::string::size_type v51 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v51 = __p.__r_.__value_.__l.__size_;
  }
  if (v51)
  {
    siri::intelligence::StringTrim(" \t\n\r", &__p, &v88);
    uint64_t v52 = (_OWORD *)v90.__r_.__value_.__l.__size_;
    if (v90.__r_.__value_.__l.__size_ >= v90.__r_.__value_.__r.__words[2])
    {
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v55 = v54 + 1;
      if (v54 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3) > v55) {
        unint64_t v55 = 0x5555555555555556
      }
            * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90.__r_.__value_.__r.__words[2] - v90.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555) {
        unint64_t v56 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v56 = v55;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v90.__r_.__value_.__r.__words[2];
      if (v56) {
        unint64_t v57 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v90.__r_.__value_.__r.__words[2], v56);
      }
      else {
        unint64_t v57 = 0;
      }
      int v58 = v57 + v54;
      __v.__first_ = v57;
      __v.__begin_ = v58;
      __v.__end_cap_.__value_ = &v57[v56];
      long long v59 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      v58->__r_.__value_.__r.__words[2] = v88.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v58->__r_.__value_.__l.__data_ = v59;
      memset(&v88, 0, sizeof(v88));
      __v.__end_ = v58 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v90, &__v);
      std::string::size_type v60 = v90.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v90.__r_.__value_.__l.__size_ = v60;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v88.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      long long v53 = *(_OWORD *)&v88.__r_.__value_.__l.__data_;
      *(void *)(v90.__r_.__value_.__l.__size_ + 16) = *((void *)&v88.__r_.__value_.__l + 2);
      _OWORD *v52 = v53;
      v90.__r_.__value_.__l.__size_ = (std::string::size_type)v52 + 24;
    }
  }
  memset(&v88, 0, sizeof(v88));
  std::string::size_type v62 = v90.__r_.__value_.__l.__size_;
  std::string::size_type v61 = v90.__r_.__value_.__r.__words[0];
  std::string::size_type v85 = size;
  if (v90.__r_.__value_.__l.__size_ != v90.__r_.__value_.__r.__words[0])
  {
    unint64_t v63 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3);
    if (v63 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v88.__r_.__value_.__r.__words[2];
    __v.__first_ = (std::__split_buffer<std::string>::pointer)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v88.__r_.__value_.__r.__words[2], v63);
    __v.__begin_ = __v.__first_;
    __v.__end_ = __v.__first_;
    __v.__end_cap_.__value_ = &__v.__first_[v64];
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v88, &__v);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    std::string::size_type v62 = v90.__r_.__value_.__l.__size_;
    std::string::size_type v61 = v90.__r_.__value_.__r.__words[0];
  }
  if (v62 != v61)
  {
    uint64_t v65 = 0;
    unint64_t v66 = 0;
    do
    {
      memset(&__stra, 0, sizeof(__stra));
      if (siri::intelligence::Expression::Evaluate(*a1, v61 + v65, &__stra))
      {
        int v67 = (_OWORD *)v88.__r_.__value_.__l.__size_;
        if (v88.__r_.__value_.__l.__size_ >= v88.__r_.__value_.__r.__words[2])
        {
          std::string::size_type v71 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v88, (long long *)&__stra);
        }
        else
        {
          if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)v88.__r_.__value_.__l.__size_, __stra.__r_.__value_.__l.__data_, __stra.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v68 = *(_OWORD *)&__stra.__r_.__value_.__l.__data_;
            *(void *)(v88.__r_.__value_.__l.__size_ + 16) = *((void *)&__stra.__r_.__value_.__l + 2);
            *int v67 = v68;
          }
          std::string::size_type v71 = (std::string::size_type)v67 + 24;
        }
        v88.__r_.__value_.__l.__size_ = v71;
      }
      else
      {
        siri::intelligence::StringUnescapeQuotes(v90.__r_.__value_.__r.__words[0] + v65, &v86);
        long long v69 = (_OWORD *)v88.__r_.__value_.__l.__size_;
        if (v88.__r_.__value_.__l.__size_ >= v88.__r_.__value_.__r.__words[2])
        {
          unint64_t v72 = 0xAAAAAAAAAAAAAAABLL
              * ((uint64_t)(v88.__r_.__value_.__l.__size_ - v88.__r_.__value_.__r.__words[0]) >> 3);
          unint64_t v73 = v72 + 1;
          if (v72 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556
             * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) > v73)
            unint64_t v73 = 0x5555555555555556
                * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v88.__r_.__value_.__r.__words[2] - v88.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            unint64_t v74 = 0xAAAAAAAAAAAAAAALL;
          else {
            unint64_t v74 = v73;
          }
          __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v88.__r_.__value_.__r.__words[2];
          if (v74) {
            double v75 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v88.__r_.__value_.__r.__words[2], v74);
          }
          else {
            double v75 = 0;
          }
          int v76 = v75 + v72;
          __v.__first_ = v75;
          __v.__begin_ = v76;
          __v.__end_cap_.__value_ = &v75[v74];
          long long v77 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
          v76->__r_.__value_.__r.__words[2] = v86.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v76->__r_.__value_.__l.__data_ = v77;
          memset(&v86, 0, sizeof(v86));
          __v.__end_ = v76 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v88, &__v);
          std::string::size_type v78 = v88.__r_.__value_.__l.__size_;
          std::__split_buffer<std::string>::~__split_buffer(&__v);
          v88.__r_.__value_.__l.__size_ = v78;
          if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v86.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v70 = *(_OWORD *)&v86.__r_.__value_.__l.__data_;
          *(void *)(v88.__r_.__value_.__l.__size_ + 16) = *((void *)&v86.__r_.__value_.__l + 2);
          *long long v69 = v70;
          v88.__r_.__value_.__l.__size_ = (std::string::size_type)v69 + 24;
        }
      }
      siri::intelligence::RemoveStringQuotes((std::string *)&__v, (long long *)(v88.__r_.__value_.__r.__words[0] + v65));
      std::string::size_type v79 = v88.__r_.__value_.__r.__words[0] + v65;
      if (*(char *)(v88.__r_.__value_.__r.__words[0] + v65 + 23) < 0) {
        operator delete(*(void **)v79);
      }
      long long v80 = *(_OWORD *)&__v.__first_;
      *(void *)(v79 + 16) = __v.__end_;
      *(_OWORD *)std::string::size_type v79 = v80;
      if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__stra.__r_.__value_.__l.__data_);
      }
      ++v66;
      std::string::size_type v61 = v90.__r_.__value_.__r.__words[0];
      v65 += 24;
    }
    while (v66 < 0xAAAAAAAAAAAAAAABLL
                * ((uint64_t)(v90.__r_.__value_.__l.__size_ - v90.__r_.__value_.__r.__words[0]) >> 3));
  }
  siri::intelligence::Expression::Impl::EvaluateFunction((uint64_t)a1, &v91, (long long **)&v88, (std::string *)&__v);
  memset(&__stra, 0, sizeof(__stra));
  if (v21 >= 1)
  {
    std::string::basic_string(&v86, __str, 0, v21, (std::allocator<char> *)&v92);
    if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__stra.__r_.__value_.__l.__data_);
    }
    std::string __stra = v86;
  }
  if (SHIBYTE(__v.__end_) >= 0) {
    p_v = (const std::string::value_type *)&__v;
  }
  else {
    p_v = (const std::string::value_type *)__v.__first_;
  }
  if (SHIBYTE(__v.__end_) >= 0) {
    std::string::size_type end_high = HIBYTE(__v.__end_);
  }
  else {
    std::string::size_type end_high = (std::string::size_type)__v.__begin_;
  }
  std::string::append(&__stra, p_v, end_high);
  if (v28 < (uint64_t)((v85 << 32) - 0x100000000) >> 32)
  {
    std::string::basic_string(&v86, __str, v28 + 1, v85 + ~v28, (std::allocator<char> *)&v92);
    unint64_t v83 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v86
        : (std::string *)v86.__r_.__value_.__r.__words[0];
    std::string::size_type v84 = (v86.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v86.__r_.__value_.__r.__words[2])
        : v86.__r_.__value_.__l.__size_;
    std::string::append(&__stra, (const std::string::value_type *)v83, v84);
    if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v86.__r_.__value_.__l.__data_);
    }
  }
  std::string::operator=(__str, &__stra);
  if (SHIBYTE(__stra.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__stra.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  __v.__first_ = &v88;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  __v.__first_ = &v90;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v91.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_239AE40C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  std::string __p = &a34;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a45 < 0) {
    operator delete(a40);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Expression::Evaluate(void **a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v136, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v136 = *(std::string *)a2;
  }
  while ((siri::intelligence::Expression::Impl::ExpandFunctions(*a1, &v136) & 1) != 0)
    ;
  long long v133 = 0;
  int v134 = 0;
  unint64_t v135 = 0;
  long long v144 = 0u;
  long long v145 = 0u;
  long long v143 = 0u;
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string[abi:ne180100]<0>(&v138, (char *)&str_10);
  unint64_t v4 = 0;
  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v136.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v136.__r_.__value_.__l.__size_;
  }
  uint64_t v6 = MEMORY[0x263EF8318];
  while (1)
  {
    if (v4 >= size)
    {
LABEL_214:
      uint64_t v67 = *((void *)&v145 + 1);
      if (!*((void *)&v145 + 1))
      {
LABEL_231:
        int v44 = 1;
        goto LABEL_233;
      }
      while (1)
      {
        unint64_t v68 = *(void *)(*((void *)&v143 + 1) + 8 * ((v67 + (uint64_t)v145 - 1) / 0xAAuLL))
            + 24 * ((v67 + (uint64_t)v145 - 1) % 0xAAuLL);
        int v69 = *(char *)(v68 + 23);
        if (v69 < 0)
        {
          std::string::size_type v72 = *(void *)(v68 + 8);
          if (v72 != 1)
          {
            std::string::size_type v71 = v134;
            if ((unint64_t)v134 < v135) {
              goto LABEL_228;
            }
            goto LABEL_226;
          }
          long long v70 = *(const std::string::value_type **)v68;
        }
        else
        {
          long long v70 = (const std::string::value_type *)v68;
          if (v69 != 1)
          {
            std::string::size_type v71 = v134;
            if ((unint64_t)v134 < v135) {
              goto LABEL_224;
            }
            goto LABEL_226;
          }
        }
        if (*v70 == 40) {
          goto LABEL_232;
        }
        std::string::size_type v71 = v134;
        if ((unint64_t)v134 < v135)
        {
          if (v69 < 0)
          {
            std::string::size_type v72 = *(void *)(v68 + 8);
LABEL_228:
            std::string::__init_copy_ctor_external(v71, *(const std::string::value_type **)v68, v72);
          }
          else
          {
LABEL_224:
            long long v73 = *(_OWORD *)v68;
            v71->__r_.__value_.__r.__words[2] = *(void *)(v68 + 16);
            *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v73;
          }
          unint64_t v74 = v71 + 1;
          goto LABEL_230;
        }
LABEL_226:
        unint64_t v74 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (long long *)v68);
LABEL_230:
        int v134 = v74;
        std::deque<std::string>::pop_back(&v143);
        uint64_t v67 = *((void *)&v145 + 1);
        if (!*((void *)&v145 + 1)) {
          goto LABEL_231;
        }
      }
    }
    while (1)
    {
      unint64_t v7 = (v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &v136
         : (std::string *)v136.__r_.__value_.__r.__words[0];
      unsigned int v8 = v7->__r_.__value_.__s.__data_[v4];
      if (!((v8 & 0x80000000) != 0 ? __maskrune(v8, 0x4000uLL) : *(_DWORD *)(v6 + 4 * v8 + 60) & 0x4000)) {
        break;
      }
      if (size == ++v4) {
        goto LABEL_20;
      }
    }
    if (size == v4)
    {
LABEL_20:
      std::string::basic_string[abi:ne180100]<0>(&v137, (char *)&str_10);
      unint64_t v4 = size;
      goto LABEL_110;
    }
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v10 = &v136;
    }
    else {
      uint64_t v10 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v10 + v4);
    siri::intelligence::GetOperator((uint64_t)&v142, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v11 = v142.__r_.__value_.__l.__size_;
      if (v142.__r_.__value_.__l.__size_)
      {
LABEL_28:
        v4 += v11;
        std::string v137 = v142;
        memset(&v142, 0, sizeof(v142));
        goto LABEL_108;
      }
    }
    else
    {
      std::string::size_type v11 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&v142.__r_.__value_.__s + 23)) {
        goto LABEL_28;
      }
    }
    std::string::basic_string[abi:ne180100]<0>(&v137, (char *)&str_10);
    if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v12 = &v136;
    }
    else {
      uint64_t v12 = (std::string *)v136.__r_.__value_.__r.__words[0];
    }
    std::string::push_back(&v137, v12->__r_.__value_.__s.__data_[v4++]);
    unint64_t v13 = &v137;
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v13 = (std::string *)v137.__r_.__value_.__r.__words[0];
    }
    if ((v13->__r_.__value_.__s.__data_[0] & 0xFE) != 0x28)
    {
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0)
      {
        if (v137.__r_.__value_.__l.__size_ != 1) {
          goto LABEL_57;
        }
        int v14 = *v137.__r_.__value_.__l.__data_;
      }
      else
      {
        if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) != 1) {
          goto LABEL_57;
        }
        int v14 = v137.__r_.__value_.__s.__data_[0];
      }
      if (v14 != 39 && v14 != 34)
      {
LABEL_57:
        if (v4 < size)
        {
          int v20 = 0;
          unsigned int v21 = 0;
          while (1)
          {
            BOOL v22 = (v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v136
                : (std::string *)v136.__r_.__value_.__r.__words[0];
            unsigned int v23 = v22->__r_.__value_.__s.__data_[v4];
            if (!v20 && !(_BYTE)v21)
            {
              if ((v23 & 0x80000000) != 0
                 ? __maskrune(v22->__r_.__value_.__s.__data_[v4], 0x4000uLL)
                 : *(_DWORD *)(v6 + 4 * v23 + 60) & 0x4000)
              {
                break;
              }
              unsigned int v25 = (v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &v136
                  : (std::string *)v136.__r_.__value_.__r.__words[0];
              std::string::basic_string[abi:ne180100]<0>(&__p, (char *)v25 + v4);
              if (siri::intelligence::IsOperator(&__p))
              {
                if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int v26 = &v136;
                }
                else {
                  int v26 = (std::string *)v136.__r_.__value_.__r.__words[0];
                }
                std::string::basic_string[abi:ne180100]<0>(&v140, (char *)v26 + v4);
                if (siri::intelligence::IsOperator(&v140))
                {
                  if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    char v27 = &v136;
                  }
                  else {
                    char v27 = (std::string *)v136.__r_.__value_.__r.__words[0];
                  }
                  BOOL v29 = v27->__r_.__value_.__s.__data_[v4 - 1] != 101 || v23 == 41;
                }
                else
                {
                  BOOL v29 = 1;
                }
                if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v140.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                BOOL v29 = v23 == 41;
              }
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v29) {
                break;
              }
            }
            std::string::push_back(&v137, v23);
            if (v23 == 40) {
              int v30 = v20 + 1;
            }
            else {
              int v30 = v20;
            }
            if (v23 == 39 || v23 == 34)
            {
              if ((_BYTE)v21) {
                unsigned int v31 = v21;
              }
              else {
                unsigned int v31 = v23;
              }
              if (v23 != v21 || v21 == 0) {
                unsigned int v21 = v31;
              }
              else {
                unsigned int v21 = 0;
              }
            }
            int v20 = v30 - (v23 == 41);
            if (size == ++v4)
            {
              unint64_t v4 = size;
              goto LABEL_108;
            }
          }
        }
        goto LABEL_108;
      }
      do
      {
        if ((v136.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v15 = &v136;
        }
        else {
          int v15 = (std::string *)v136.__r_.__value_.__r.__words[0];
        }
        int v16 = v15->__r_.__value_.__s.__data_[v4];
        if (v4 < size - 1 && v16 == 92)
        {
          BOOL v17 = 0;
          ++v4;
        }
        else
        {
          unsigned int v18 = &v137;
          if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v18 = (std::string *)v137.__r_.__value_.__r.__words[0];
          }
          BOOL v17 = v16 == v18->__r_.__value_.__s.__data_[0];
        }
        std::string::push_back(&v137, v15->__r_.__value_.__s.__data_[v4++]);
        char v19 = v4 >= size || v17;
      }
      while ((v19 & 1) == 0);
    }
LABEL_108:
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
LABEL_110:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string __str = v137;
    std::string::size_type v33 = HIBYTE(v137.__r_.__value_.__r.__words[2]);
    if ((v137.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v33 = v137.__r_.__value_.__l.__size_;
    }
    if (!v33) {
      goto LABEL_214;
    }
    if ((siri::intelligence::StringIsANumber(&__str) & 1) == 0) {
      break;
    }
LABEL_130:
    int v36 = v134;
    if ((unint64_t)v134 >= v135)
    {
      uint64_t v38 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (long long *)&__str);
    }
    else
    {
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(v134, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v37 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
        v134->__r_.__value_.__r.__words[2] = __str.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v36->__r_.__value_.__l.__data_ = v37;
      }
      uint64_t v38 = v36 + 1;
    }
    int v134 = v38;
LABEL_137:
    std::string::operator=(&v138, &__str);
  }
  std::string::basic_string[abi:ne180100]<0>(&v142, "'");
  if (siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)&v142))
  {
    BOOL v34 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "\"");
    BOOL v34 = siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v142.__r_.__value_.__l.__data_);
    if (v34) {
      goto LABEL_130;
    }
  }
  else if (v34)
  {
    goto LABEL_130;
  }
  std::string::basic_string[abi:ne180100]<0>(&v142, "true");
  if (siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)&v142))
  {
    BOOL v35 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "false");
    BOOL v35 = siri::intelligence::StringStartsWith(&__str, (unsigned __int8 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (!v35) {
      goto LABEL_139;
    }
    goto LABEL_130;
  }
  operator delete(v142.__r_.__value_.__l.__data_);
  if (v35) {
    goto LABEL_130;
  }
LABEL_139:
  BOOL IsOperator = siri::intelligence::IsOperator(&__str);
  int v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  if (IsOperator)
  {
    if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 1)
      {
        p_str = &__str;
        goto LABEL_148;
      }
LABEL_191:
      if (v40 == 1)
      {
        unint64_t v56 = &__str;
LABEL_195:
        if (v56->__r_.__value_.__s.__data_[0] == 33)
        {
          unint64_t v57 = v134;
          if ((unint64_t)v134 >= v135)
          {
            long long v59 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, &siri::intelligence::Memory::NUMBER_ZERO);
          }
          else
          {
            if (byte_26AD85847 < 0)
            {
              std::string::__init_copy_ctor_external(v134, (const std::string::value_type *)siri::intelligence::Memory::NUMBER_ZERO, *((std::string::size_type *)&siri::intelligence::Memory::NUMBER_ZERO + 1));
            }
            else
            {
              long long v58 = siri::intelligence::Memory::NUMBER_ZERO;
              v134->__r_.__value_.__r.__words[2] = unk_26AD85840;
              *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
            }
            long long v59 = v57 + 1;
          }
          int v134 = v59;
        }
      }
      goto LABEL_203;
    }
    if (__str.__r_.__value_.__l.__size_ != 1) {
      goto LABEL_203;
    }
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
LABEL_148:
    if (p_str->__r_.__value_.__s.__data_[0] != 45) {
      goto LABEL_189;
    }
    if (siri::intelligence::IsOperator(&v138)) {
      goto LABEL_182;
    }
    if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v43 = v138.__r_.__value_.__l.__size_;
      if (v138.__r_.__value_.__l.__size_ != 1) {
        goto LABEL_181;
      }
      if (*v138.__r_.__value_.__l.__data_ != 40) {
        goto LABEL_189;
      }
    }
    else
    {
      std::string::size_type v43 = HIBYTE(v138.__r_.__value_.__r.__words[2]);
      if (HIBYTE(v138.__r_.__value_.__r.__words[2]) != 1 || v138.__r_.__value_.__s.__data_[0] != 40)
      {
LABEL_181:
        if (!v43) {
          goto LABEL_182;
        }
LABEL_189:
        if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
          int v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          goto LABEL_191;
        }
        if (__str.__r_.__value_.__l.__size_ == 1)
        {
          unint64_t v56 = (std::string *)__str.__r_.__value_.__r.__words[0];
          goto LABEL_195;
        }
LABEL_203:
        unsigned int Precedence = siri::intelligence::GetPrecedence((char *)&__str);
        uint64_t v61 = *((void *)&v145 + 1);
        if (*((void *)&v145 + 1))
        {
          unsigned int v62 = Precedence;
          do
          {
            unint64_t v63 = *(void *)(*((void *)&v143 + 1) + 8 * ((v61 + (uint64_t)v145 - 1) / 0xAAuLL))
                + 24 * ((v61 + (uint64_t)v145 - 1) % 0xAAuLL);
            if (v62 > siri::intelligence::GetPrecedence((char *)v63)) {
              break;
            }
            uint64_t v64 = v134;
            if ((unint64_t)v134 >= v135)
            {
              unint64_t v66 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (long long *)v63);
            }
            else
            {
              if (*(char *)(v63 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(v134, *(const std::string::value_type **)v63, *(void *)(v63 + 8));
              }
              else
              {
                long long v65 = *(_OWORD *)v63;
                v134->__r_.__value_.__r.__words[2] = *(void *)(v63 + 16);
                *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
              }
              unint64_t v66 = v64 + 1;
            }
            int v134 = v66;
            std::deque<std::string>::pop_back(&v143);
            uint64_t v61 = *((void *)&v145 + 1);
          }
          while (*((void *)&v145 + 1));
        }
LABEL_157:
        std::deque<std::string>::push_back(&v143, (long long *)&__str);
        goto LABEL_137;
      }
    }
LABEL_182:
    long long v53 = v134;
    if ((unint64_t)v134 >= v135)
    {
      unint64_t v55 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, &siri::intelligence::Memory::NUMBER_ZERO);
    }
    else
    {
      if (byte_26AD85847 < 0)
      {
        std::string::__init_copy_ctor_external(v134, (const std::string::value_type *)siri::intelligence::Memory::NUMBER_ZERO, *((std::string::size_type *)&siri::intelligence::Memory::NUMBER_ZERO + 1));
      }
      else
      {
        long long v54 = siri::intelligence::Memory::NUMBER_ZERO;
        v134->__r_.__value_.__r.__words[2] = unk_26AD85840;
        *(_OWORD *)&v53->__r_.__value_.__l.__data_ = v54;
      }
      unint64_t v55 = v53 + 1;
    }
    int v134 = v55;
    MEMORY[0x23ECAA8E0](&__str, "~");
    goto LABEL_189;
  }
  if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0)
  {
    if (HIBYTE(__str.__r_.__value_.__r.__words[2]) == 1)
    {
      int v42 = __str.__r_.__value_.__s.__data_[0];
      goto LABEL_156;
    }
LABEL_232:
    int v44 = 0;
    goto LABEL_233;
  }
  if (__str.__r_.__value_.__l.__size_ != 1) {
    goto LABEL_232;
  }
  int v42 = *__str.__r_.__value_.__l.__data_;
LABEL_156:
  if (v42 == 40) {
    goto LABEL_157;
  }
  int v44 = 0;
  if (v42 == 41)
  {
    uint64_t v45 = *((void *)&v145 + 1);
    if (*((void *)&v145 + 1))
    {
      while (2)
      {
        unint64_t v46 = *(void *)(*((void *)&v143 + 1) + 8 * ((v45 + (uint64_t)v145 - 1) / 0xAAuLL))
            + 24 * ((v45 + (uint64_t)v145 - 1) % 0xAAuLL);
        int v47 = *(char *)(v46 + 23);
        if (v47 < 0)
        {
          std::string::size_type v50 = *(void *)(v46 + 8);
          if (v50 == 1)
          {
            std::string::size_type v48 = *(const std::string::value_type **)v46;
            goto LABEL_166;
          }
          int v49 = v134;
          if ((unint64_t)v134 >= v135) {
            goto LABEL_171;
          }
        }
        else
        {
          std::string::size_type v48 = (const std::string::value_type *)v46;
          if (v47 != 1)
          {
            int v49 = v134;
            if ((unint64_t)v134 >= v135) {
              goto LABEL_171;
            }
LABEL_169:
            long long v51 = *(_OWORD *)v46;
            v49->__r_.__value_.__r.__words[2] = *(void *)(v46 + 16);
            *(_OWORD *)&v49->__r_.__value_.__l.__data_ = v51;
LABEL_174:
            uint64_t v52 = v49 + 1;
LABEL_175:
            int v134 = v52;
            std::deque<std::string>::pop_back(&v143);
            uint64_t v45 = *((void *)&v145 + 1);
            if (!*((void *)&v145 + 1)) {
              goto LABEL_232;
            }
            continue;
          }
LABEL_166:
          if (*v48 == 40)
          {
            std::deque<std::string>::pop_back(&v143);
            goto LABEL_137;
          }
          int v49 = v134;
          if ((unint64_t)v134 >= v135)
          {
LABEL_171:
            uint64_t v52 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v133, (long long *)v46);
            goto LABEL_175;
          }
          if ((v47 & 0x80000000) == 0) {
            goto LABEL_169;
          }
          std::string::size_type v50 = *(void *)(v46 + 8);
        }
        break;
      }
      std::string::__init_copy_ctor_external(v49, *(const std::string::value_type **)v46, v50);
      goto LABEL_174;
    }
  }
LABEL_233:
  if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v138.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  double v75 = (void ***)std::deque<std::string>::~deque[abi:ne180100]((uint64_t)&v143);
  if (!v44)
  {
    uint64_t v130 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      **(unsigned char **)a3 = 0;
      *(void *)(a3 + 8) = 0;
    }
    else
    {
      *(unsigned char *)a3 = 0;
      *(unsigned char *)(a3 + 23) = 0;
    }
    goto LABEL_469;
  }
  long long v144 = 0u;
  long long v145 = 0u;
  long long v143 = 0u;
  int v76 = v133;
  long long v77 = v134;
  if (v133 == v134)
  {
LABEL_467:
    uint64_t v130 = 0;
    goto LABEL_468;
  }
  while (2)
  {
    if (!siri::intelligence::IsOperator(v76))
    {
      std::deque<std::string>::push_back(&v143, (long long *)v76);
      goto LABEL_455;
    }
    if (*((void *)&v145 + 1) < 2uLL) {
      goto LABEL_467;
    }
    siri::intelligence::StringToLower(*(void *)(*((void *)&v143 + 1) + 8 * ((*((void *)&v145 + 1) + (void)v145 - 1) / 0xAAuLL))+ 24 * ((*((void *)&v145 + 1) + (void)v145 - 1) % 0xAAuLL), &__p);
    siri::intelligence::RemoveStringQuotes(&v142, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::deque<std::string>::pop_back(&v143);
    siri::intelligence::StringToLower(*(void *)(*((void *)&v143 + 1) + 8 * ((*((void *)&v145 + 1) + (void)v145 - 1) / 0xAAuLL))+ 24 * ((*((void *)&v145 + 1) + (void)v145 - 1) % 0xAAuLL), &v140);
    siri::intelligence::RemoveStringQuotes(&__p, (long long *)&v140);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
    std::deque<std::string>::pop_back(&v143);
    siri::intelligence::StringOrBoolToDouble(&__p);
    long double v79 = v78;
    siri::intelligence::StringOrBoolToDouble(&v142);
    double v82 = v81;
    if (SHIBYTE(v76->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type v84 = (unsigned __int8 *)v76->__r_.__value_.__l.__size_;
      if (v84 == (unsigned __int8 *)1)
      {
        unsigned int v88 = *(unsigned __int8 *)v76->__r_.__value_.__l.__data_;
        if (v88 <= 0x3B)
        {
          switch(*v76->__r_.__value_.__l.__data_)
          {
            case '!':
LABEL_273:
              if ((int)v81) {
                std::string v86 = "false";
              }
              else {
                std::string v86 = "true";
              }
              goto LABEL_448;
            case '%':
LABEL_346:
              if (v81 != 0.0) {
                goto LABEL_357;
              }
              goto LABEL_463;
            case '*':
            case '+':
            case '-':
              goto LABEL_357;
            case '/':
LABEL_348:
              if (v81 != 0.0) {
                goto LABEL_357;
              }
              goto LABEL_463;
            default:
              goto LABEL_440;
          }
        }
        if (*(unsigned __int8 *)v76->__r_.__value_.__l.__data_ > 0x3Du)
        {
          if (v88 == 62)
          {
LABEL_358:
            if (siri::intelligence::StringIsANumber(&__p)
              && siri::intelligence::StringIsANumber(&v142))
            {
              if (v79 <= v82) {
                std::string v86 = "false";
              }
              else {
                std::string v86 = "true";
              }
              goto LABEL_448;
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v122 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v122 = v142.__r_.__value_.__l.__size_;
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v123 = &v142;
            }
            else {
              int v123 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v124 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v124 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_p = &__p;
            }
            else {
              p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v124 >= v122) {
              size_t v126 = v122;
            }
            else {
              size_t v126 = v124;
            }
            int v127 = memcmp(v123, p_p, v126);
            BOOL v128 = v122 < v124;
            if (v127) {
              BOOL v128 = v127 < 0;
            }
            if (v128) {
              uint64_t v102 = "true";
            }
            else {
              uint64_t v102 = "false";
            }
            goto LABEL_438;
          }
          if (v88 == 126)
          {
LABEL_357:
            siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)&v140);
            std::deque<std::string>::push_back(&v143, (__n128 *)&v140);
            goto LABEL_449;
          }
        }
        else
        {
          if (v88 == 60) {
            goto LABEL_350;
          }
          if (v88 == 61) {
            goto LABEL_301;
          }
        }
LABEL_440:
        if (v88 == 94) {
          goto LABEL_441;
        }
        int v76 = (std::string *)v76->__r_.__value_.__r.__words[0];
      }
      else
      {
        if (v84 != (unsigned __int8 *)2) {
          goto LABEL_461;
        }
        std::string::size_type v85 = (_WORD *)v76->__r_.__value_.__r.__words[0];
        if (*(_WORD *)v76->__r_.__value_.__l.__data_ == 9766) {
          goto LABEL_276;
        }
        switch(*v85)
        {
          case 0x7C7C:
LABEL_287:
            if ((int)v79 | (int)v81) {
              std::string v86 = "true";
            }
            else {
              std::string v86 = "false";
            }
            goto LABEL_448;
          case 0x3D3C:
LABEL_294:
            if (siri::intelligence::StringIsANumber(&__p)
              && siri::intelligence::StringIsANumber(&v142))
            {
              if (v79 > v82) {
                std::string v86 = "false";
              }
              else {
                std::string v86 = "true";
              }
              goto LABEL_448;
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v95 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v95 = v142.__r_.__value_.__l.__size_;
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              double v96 = &v142;
            }
            else {
              double v96 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v97 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v97 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v98 = &__p;
            }
            else {
              int v98 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if (v97 >= v95) {
              size_t v99 = v95;
            }
            else {
              size_t v99 = v97;
            }
            int v100 = memcmp(v96, v98, v99);
            BOOL v101 = v95 >= v97;
            if (v100) {
              BOOL v101 = v100 >= 0;
            }
            if (v101) {
              uint64_t v102 = "true";
            }
            else {
              uint64_t v102 = "false";
            }
            goto LABEL_438;
          case 0x3D3E:
LABEL_341:
            if (siri::intelligence::StringIsANumber(&__p)
              && siri::intelligence::StringIsANumber(&v142))
            {
              if (v79 < v82) {
                std::string v86 = "false";
              }
              else {
                std::string v86 = "true";
              }
              goto LABEL_448;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v108 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v108 = __p.__r_.__value_.__l.__size_;
            }
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v109 = &__p;
            }
            else {
              int v109 = (std::string *)__p.__r_.__value_.__r.__words[0];
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v110 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v110 = v142.__r_.__value_.__l.__size_;
            }
            if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string v111 = &v142;
            }
            else {
              std::string v111 = (std::string *)v142.__r_.__value_.__r.__words[0];
            }
            if (v110 >= v108) {
              size_t v112 = v108;
            }
            else {
              size_t v112 = v110;
            }
            int v113 = memcmp(v109, v111, v112);
            BOOL v114 = v108 >= v110;
            if (v113) {
              BOOL v114 = v113 >= 0;
            }
            if (v114) {
              uint64_t v102 = "true";
            }
            else {
              uint64_t v102 = "false";
            }
            goto LABEL_438;
          case 0x3D3D:
            goto LABEL_301;
          case 0x3D21:
            goto LABEL_264;
        }
LABEL_461:
        int v76 = (std::string *)v76->__r_.__value_.__r.__words[0];
      }
LABEL_462:
      siri::intelligence::Log::Error((siri::intelligence::Log *)"Unsupported operator: %s", v80, v76);
LABEL_463:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v142.__r_.__value_.__l.__data_);
      }
      goto LABEL_467;
    }
    int v83 = HIBYTE(v76->__r_.__value_.__r.__words[2]);
    if (v83 == 1)
    {
      unsigned int v87 = v76->__r_.__value_.__s.__data_[0];
      if (v87 <= 0x3B)
      {
        switch(v76->__r_.__value_.__s.__data_[0])
        {
          case '!':
            goto LABEL_273;
          case '%':
            goto LABEL_346;
          case '*':
          case '+':
          case '-':
            goto LABEL_357;
          case '/':
            goto LABEL_348;
          default:
            goto LABEL_462;
        }
      }
      if (v76->__r_.__value_.__s.__data_[0] > 0x3Du)
      {
        if (v87 != 62)
        {
          if (v87 != 94)
          {
            if (v87 != 126) {
              goto LABEL_462;
            }
            goto LABEL_357;
          }
LABEL_441:
          pow(v79, v81);
          siri::intelligence::StringFromDouble((siri::intelligence *)0xFFFFFFFFLL, (uint64_t)&v140);
          std::deque<std::string>::push_back(&v143, (__n128 *)&v140);
          goto LABEL_449;
        }
        goto LABEL_358;
      }
      if (v87 != 60)
      {
        if (v87 != 61) {
          goto LABEL_462;
        }
        goto LABEL_301;
      }
LABEL_350:
      if (siri::intelligence::StringIsANumber(&__p)
        && siri::intelligence::StringIsANumber(&v142))
      {
        if (v79 >= v82) {
          std::string v86 = "false";
        }
        else {
          std::string v86 = "true";
        }
        goto LABEL_448;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v115 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v115 = __p.__r_.__value_.__l.__size_;
      }
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v116 = &__p;
      }
      else {
        int v116 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v117 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v117 = v142.__r_.__value_.__l.__size_;
      }
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v118 = &v142;
      }
      else {
        BOOL v118 = (std::string *)v142.__r_.__value_.__r.__words[0];
      }
      if (v117 >= v115) {
        size_t v119 = v115;
      }
      else {
        size_t v119 = v117;
      }
      int v120 = memcmp(v116, v118, v119);
      BOOL v121 = v115 < v117;
      if (v120) {
        BOOL v121 = v120 < 0;
      }
      if (v121) {
        uint64_t v102 = "true";
      }
      else {
        uint64_t v102 = "false";
      }
LABEL_438:
      std::string::basic_string[abi:ne180100]<0>(&v140, v102);
      std::deque<std::string>::push_back(&v143, (__n128 *)&v140);
      if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
        goto LABEL_450;
      }
      goto LABEL_451;
    }
    if (v83 != 2) {
      goto LABEL_462;
    }
    switch(LOWORD(v76->__r_.__value_.__l.__data_))
    {
      case 0x2626:
LABEL_276:
        if ((int)v81) {
          BOOL v89 = (int)v79 == 0;
        }
        else {
          BOOL v89 = 1;
        }
        if (v89) {
          std::string v86 = "false";
        }
        else {
          std::string v86 = "true";
        }
        goto LABEL_448;
      case 0x7C7C:
        goto LABEL_287;
      case 0x3D3C:
        goto LABEL_294;
      case 0x3D3E:
        goto LABEL_341;
    }
    if (LOWORD(v76->__r_.__value_.__l.__data_) != 15677)
    {
      if (LOWORD(v76->__r_.__value_.__l.__data_) != 15649) {
        goto LABEL_462;
      }
LABEL_264:
      if (siri::intelligence::StringIsANumber(&__p)
        && siri::intelligence::StringIsANumber(&v142))
      {
        if (v79 == v82) {
          std::string v86 = "false";
        }
        else {
          std::string v86 = "true";
        }
        goto LABEL_448;
      }
      uint64_t v103 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v104 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v104 = __p.__r_.__value_.__l.__size_;
      }
      std::string::size_type v105 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v105 = v142.__r_.__value_.__l.__size_;
      }
      if (v104 == v105)
      {
        if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          long long v106 = &v142;
        }
        else {
          long long v106 = (std::string *)v142.__r_.__value_.__r.__words[0];
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
        {
          if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
          {
            uint64_t v107 = &__p;
            while (v107->__r_.__value_.__s.__data_[0] == v106->__r_.__value_.__s.__data_[0])
            {
              uint64_t v107 = (std::string *)((char *)v107 + 1);
              long long v106 = (std::string *)((char *)v106 + 1);
              if (!--v103) {
                goto LABEL_446;
              }
            }
            goto LABEL_445;
          }
LABEL_446:
          std::string v86 = "false";
          goto LABEL_448;
        }
        if (!memcmp(__p.__r_.__value_.__l.__data_, v106, __p.__r_.__value_.__l.__size_)) {
          goto LABEL_446;
        }
      }
LABEL_445:
      std::string v86 = "true";
      goto LABEL_448;
    }
LABEL_301:
    if (siri::intelligence::StringIsANumber(&__p)
      && siri::intelligence::StringIsANumber(&v142))
    {
      if (v79 == v82) {
        std::string v86 = "true";
      }
      else {
        std::string v86 = "false";
      }
      goto LABEL_448;
    }
    uint64_t v90 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v91 = __p.__r_.__value_.__l.__size_;
    }
    std::string::size_type v92 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v92 = v142.__r_.__value_.__l.__size_;
    }
    std::string v86 = "false";
    if (v91 == v92)
    {
      if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v93 = &v142;
      }
      else {
        size_t v93 = (std::string *)v142.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        int v129 = memcmp(__p.__r_.__value_.__l.__data_, v93, __p.__r_.__value_.__l.__size_);
        std::string v86 = "false";
        if (v129) {
          goto LABEL_448;
        }
      }
      else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
      {
        std::string::size_type v94 = &__p;
        while (v94->__r_.__value_.__s.__data_[0] == v93->__r_.__value_.__s.__data_[0])
        {
          std::string::size_type v94 = (std::string *)((char *)v94 + 1);
          size_t v93 = (std::string *)((char *)v93 + 1);
          if (!--v90) {
            goto LABEL_443;
          }
        }
        std::string v86 = "false";
        goto LABEL_448;
      }
LABEL_443:
      std::string v86 = "true";
    }
LABEL_448:
    std::string::basic_string[abi:ne180100]<0>(&v140, v86);
    std::deque<std::string>::push_back(&v143, (__n128 *)&v140);
LABEL_449:
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
LABEL_450:
    }
      operator delete(v140.__r_.__value_.__l.__data_);
LABEL_451:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v142.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v142.__r_.__value_.__l.__data_);
    }
LABEL_455:
    if (++v76 != v77) {
      continue;
    }
    break;
  }
  if (*((void *)&v145 + 1) != 1) {
    goto LABEL_467;
  }
  std::string::operator=((std::string *)a3, (const std::string *)(*(void *)(*((void *)&v143 + 1) + 8 * ((unint64_t)v145 / 0xAA))+ 24 * ((unint64_t)v145 % 0xAA)));
  uint64_t v130 = 1;
LABEL_468:
  double v75 = (void ***)std::deque<std::string>::~deque[abi:ne180100]((uint64_t)&v143);
LABEL_469:
  *(void *)&long long v143 = &v133;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v75);
  if (SHIBYTE(v136.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v136.__r_.__value_.__l.__data_);
  }
  return v130;
}

void sub_239AE5710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a45 < 0) {
    operator delete(__p);
  }
  if (a51 < 0) {
    operator delete(a46);
  }
  if (*(char *)(v51 - 161) < 0) {
    operator delete(*(void **)(v51 - 184));
  }
  long long v53 = (void ***)std::deque<std::string>::~deque[abi:ne180100](v51 - 160);
  *(void *)(v51 - 16std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v53);
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

double siri::intelligence::RemoveStringQuotes(std::string *__str, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(__str, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *std::string __str = *(std::string *)a2;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
    if (size <= 1) {
      return *(double *)&v3;
    }
    uint64_t v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
    char v5 = *__str->__r_.__value_.__l.__data_;
  }
  else
  {
    std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (size < 2) {
      return *(double *)&v3;
    }
    char v5 = __str->__r_.__value_.__s.__data_[0];
    uint64_t v6 = __str;
  }
  if (v5 == 34)
  {
    if (v6->__r_.__value_.__s.__data_[size - 1] != 34) {
      return *(double *)&v3;
    }
  }
  else if (v5 != 39 || v6->__r_.__value_.__s.__data_[size - 1] != 39)
  {
    return *(double *)&v3;
  }
  std::string::basic_string(&v8, __str, 1uLL, size - 2, (std::allocator<char> *)&v9);
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str->__r_.__value_.__l.__data_);
  }
  *(void *)&long long v3 = v8.__r_.__value_.__r.__words[0];
  *std::string __str = v8;
  return *(double *)&v3;
}

void sub_239AE5B04(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::Expression::SetFlowGraph(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)result + 8) = a2;
  return result;
}

uint64_t siri::intelligence::Expression::SetMemory(uint64_t this, siri::intelligence::Memory *a2)
{
  *(void *)(*(void *)this + 16) = a2;
  return this;
}

std::string *siri::intelligence::Expression::SetPlatform(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 2, a2);
}

std::string *siri::intelligence::Expression::SetDeviceName(std::string **a1, const std::string *a2)
{
  return std::string::operator=(*a1 + 3, a2);
}

uint64_t siri::intelligence::Expression::SetUtcOffset(uint64_t this, double a2)
{
  *(double *)(*(void *)this + 24) = a2;
  return this;
}

uint64_t siri::intelligence::Expression::SetTimeOffset(uint64_t this, double a2)
{
  *(double *)(*(void *)this + 32) = a2;
  return this;
}

uint64_t siri::intelligence::Expression::SetLastInteractionTime(uint64_t this, double a2)
{
  *(double *)(*(void *)this + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = a2;
  return this;
}

BOOL siri::intelligence::IsOperator(std::string *__str)
{
  siri::intelligence::GetOperator((uint64_t)v3, __str);
  if ((v4 & 0x80000000) == 0) {
    return v4 != 0;
  }
  BOOL v1 = v3[1] != 0;
  operator delete(v3[0]);
  return v1;
}

uint64_t siri::intelligence::GetPrecedence(char *a1)
{
  if (a1[23] >= 0) {
    BOOL v1 = a1;
  }
  else {
    BOOL v1 = *(char **)a1;
  }
  int v2 = *v1;
  if (v2 > 59)
  {
    if (v2 > 93)
    {
      switch(v2)
      {
        case '^':
          return 5;
        case '|':
          return 1;
        case '~':
          return 6;
      }
    }
    else if ((v2 - 60) < 3)
    {
      return 2;
    }
    return 9;
  }
  else
  {
    uint64_t result = 7;
    switch(v2)
    {
      case '!':
        return result;
      case '%':
      case '*':
      case '/':
        uint64_t result = 4;
        break;
      case '&':
        return 1;
      case '(':
        uint64_t result = 0;
        break;
      case '+':
      case '-':
        uint64_t result = 3;
        break;
      default:
        return 9;
    }
  }
  return result;
}

std::string *siri::intelligence::GetOperator(uint64_t a1, std::string *__str)
{
  std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0) {
    std::string::size_type size = __str->__r_.__value_.__l.__size_;
  }
  if (size < 2)
  {
    if (!size) {
      return (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)a1, (char *)&str_10);
    }
  }
  else
  {
    uint64_t result = std::string::basic_string((std::string *)a1, __str, 0, 2uLL, (std::allocator<char> *)&v12);
    int v6 = *(char *)(a1 + 23);
    if (v6 < 0)
    {
      uint64_t result = *(std::string **)a1;
      if (*(void *)(a1 + 8) == 2
        && (LOWORD(result->__r_.__value_.__l.__data_) == 15676
         || LOWORD(result->__r_.__value_.__l.__data_) == 15678
         || LOWORD(result->__r_.__value_.__l.__data_) == 9766
         || LOWORD(result->__r_.__value_.__l.__data_) == 31868
         || LOWORD(result->__r_.__value_.__l.__data_) == 15677
         || LOWORD(result->__r_.__value_.__l.__data_) == 15649))
      {
        return result;
      }
      operator delete(result);
    }
    else if (v6 == 2 {
           && (*(_WORD *)a1 == 15676
    }
            || *(_WORD *)a1 == 15678
            || *(_WORD *)a1 == 9766
            || *(_WORD *)a1 == 31868
            || *(_WORD *)a1 == 15677
            || *(_WORD *)a1 == 15649))
    {
      return result;
    }
  }
  if ((__str->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    unint64_t v7 = __str;
  }
  else {
    unint64_t v7 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v8 = v7->__r_.__value_.__s.__data_[0];
  unsigned int v9 = v8 - 33;
  BOOL v10 = (v8 - 33) > 0x3D || ((1 << (v8 - 33)) & 0x2000000038005611) == 0;
  if (v10 && v8 != 126) {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)a1, (char *)&str_10);
  }
  uint64_t result = std::string::basic_string((std::string *)a1, __str, 0, 1uLL, (std::allocator<char> *)&v13);
  BOOL v11 = v9 > 0x3D || ((1 << v9) & 0x2000000038005611) == 0;
  if (v11 && v8 != 126) {
    return (std::string *)std::string::basic_string[abi:ne180100]<0>((void *)a1, (char *)&str_10);
  }
  return result;
}

void std::deque<std::string>::pop_back(void *a1)
{
  uint64_t v2 = a1[5] - 1;
  unint64_t v3 = v2 + a1[4];
  uint64_t v4 = a1[1];
  unint64_t v5 = *(void *)(v4 + 8 * (v3 / 0xAA)) + 24 * (v3 % 0xAA);
  if (*(char *)(v5 + 23) < 0)
  {
    operator delete(*(void **)v5);
    uint64_t v2 = a1[5] - 1;
    uint64_t v4 = a1[1];
    unint64_t v3 = a1[4] + v2;
  }
  uint64_t v6 = a1[2];
  a1[5] = v2;
  if (v6 == v4) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = 170 * ((v6 - v4) >> 3) - 1;
  }
  if (v7 - v3 >= 0x154)
  {
    operator delete(*(void **)(v6 - 8));
    a1[2] -= 8;
  }
}

void std::deque<std::string>::push_back(void *a1, long long *a2)
{
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = 170 * ((v5 - v4) >> 3) - 1;
  if (v5 == v4) {
    uint64_t v6 = 0;
  }
  if (v6 == a1[5] + a1[4])
  {
    std::deque<std::string>::__add_back_capacity(a1);
    uint64_t v4 = a1[1];
    uint64_t v5 = a1[2];
  }
  if (v5 == v4)
  {
    int v8 = 0;
  }
  else
  {
    unint64_t v7 = a1[5] + a1[4];
    int v8 = (std::string *)(*(void *)(v4 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  }
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v9 = *a2;
    v8->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  ++a1[5];
}

void std::deque<std::string>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    a1[4] = v4;
    uint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    unint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v38);
      int v40 = &v39[8 * (v38 >> 2)];
      int v42 = &v39[8 * v41];
      std::string::size_type v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        unint64_t v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)unint64_t v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    BOOL v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      unint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  int v20 = (char *)a1[2];
  char v19 = (char *)a1[3];
  unsigned int v21 = (char *)*a1;
  BOOL v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    unsigned int v25 = operator new(0xFF0uLL);
    int v26 = v25;
    if (v19 != v20)
    {
      *(void *)int v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      uint64_t v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v49);
      BOOL v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      long long v53 = (uint64_t *)a1[1];
      long long v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        long long v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        unint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)unint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      long long v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        BOOL v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    unint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      uint64_t v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v82);
      int v40 = &v39[8 * (v82 >> 2)];
      int v42 = &v39[8 * v83];
      std::string::size_type v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        unsigned int v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)unsigned int v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      std::string::size_type v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  BOOL v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v28);
  uint64_t v31 = v30;
  unsigned int v32 = operator new(0xFF0uLL);
  std::string::size_type v33 = &v29[8 * v23];
  BOOL v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      unsigned int v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v61);
      std::string::size_type v33 = &v62[8 * (v61 >> 2)];
      BOOL v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      BOOL v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)std::string::size_type v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        std::string::size_type v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<YAML::Scanner::SimpleKey *>>(v70);
        long long v73 = v71;
        std::string::size_type v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          long long v77 = v33;
          double v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)long long v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        BOOL v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        BOOL v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        std::string::size_type v33 = &v29[8 * (v67 >> 1)];
        int v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          int v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  long double v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_239AE6464(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t std::deque<std::string>::~deque[abi:ne180100](uint64_t a1)
{
  unint64_t v2 = *(void ***)(a1 + 8);
  BOOL v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    unint64_t v4 = (void *)(a1 + 40);
    BOOL v3 = *(void ***)(a1 + 8);
  }
  else
  {
    unint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0xAA];
    unint64_t v7 = (unint64_t)*v6;
    unint64_t v8 = (unint64_t)*v6 + 24 * (v5 % 0xAA);
    unint64_t v9 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0xAA] + 24 * ((*(void *)(a1 + 40) + v5) % 0xAA);
    if (v8 != v9)
    {
      do
      {
        if (*(char *)(v8 + 23) < 0)
        {
          operator delete(*(void **)v8);
          unint64_t v7 = (unint64_t)*v6;
        }
        v8 += 24;
        if (v8 - v7 == 4080)
        {
          unint64_t v10 = (unint64_t)v6[1];
          ++v6;
          unint64_t v7 = v10;
          unint64_t v8 = v10;
        }
      }
      while (v8 != v9);
      unint64_t v2 = *(void ***)(a1 + 8);
      BOOL v3 = *(void ***)(a1 + 16);
    }
  }
  void *v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      BOOL v3 = *(void ***)(a1 + 16);
      unint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 85;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 170;
LABEL_16:
    *(void *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    uint64_t v16 = *(void *)(a1 + 8);
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15 != v16) {
      *(void *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void siri::intelligence::StringOrBoolToDouble(const std::string *a1)
{
  if (siri::intelligence::StringIsBool((uint64_t)a1))
  {
    siri::intelligence::StringToBool(a1, 0);
  }
  else
  {
    siri::intelligence::StringToDouble((uint64_t)a1, 0);
  }
}

__n128 std::deque<std::string>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::string>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  ++a1[5];
  return result;
}

void std::__shared_ptr_emplace<siri::intelligence::Expression::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED2A370;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<siri::intelligence::Expression::Impl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26ED2A370;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x23ECAACC0);
}

void std::__shared_ptr_emplace<siri::intelligence::Expression::Impl>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0)
  {
    unint64_t v2 = *(void **)(a1 + 72);
    operator delete(v2);
  }
}

void *std::vector<std::shared_ptr<siri::intelligence::IntentReference>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::IntentReference>>,std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239AE6854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::IntentReference>>,std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*,std::shared_ptr<siri::intelligence::IntentReference>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  std::string v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::IntentReference>>,std::shared_ptr<siri::intelligence::IntentReference>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::IntentReference>>,std::shared_ptr<siri::intelligence::IntentReference>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

uint64_t std::set<std::string>::set[abi:ne180100]<std::__wrap_iter<std::string*>>(uint64_t a1, const void **a2, const void **a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)a1, v4, v6, (uint64_t)v6);
      v6 += 3;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_239AE69A8(_Unwind_Exception *a1)
{
  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

double YAML::Directives::Directives(YAML::Directives *this)
{
  *(unsigned char *)this = 1;
  *(void *)&double result = 0x200000001;
  *(void *)((char *)this + 4) = 0x200000001;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

{
  double result;

  *(unsigned char *)this = 1;
  *(void *)&double result = 0x200000001;
  *(void *)((char *)this + 4) = 0x200000001;
  *((void *)this + 4) = 0;
  *((void *)this + 3) = 0;
  *((void *)this + 2) = (char *)this + 24;
  return result;
}

void YAML::Directives::TranslateTagHandle(uint64_t a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  uint64_t v6 = std::__tree<std::string>::find<std::string>(a1 + 16, (const void **)a2);
  if (a1 + 24 != v6)
  {
    if ((*(char *)(v6 + 79) & 0x80000000) == 0)
    {
      long long v7 = *(_OWORD *)(v6 + 56);
      a3->__r_.__value_.__r.__words[2] = *(void *)(v6 + 72);
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = v7;
      return;
    }
    uint64_t v9 = *(const std::string::value_type **)(v6 + 56);
    std::string::size_type v10 = *(void *)(v6 + 64);
    goto LABEL_11;
  }
  int v8 = *(char *)(a2 + 23);
  if (v8 < 0)
  {
    uint64_t v9 = *(const std::string::value_type **)a2;
    std::string::size_type v10 = *(void *)(a2 + 8);
    if (v10 != 2 || *(_WORD *)v9 != 8481)
    {
LABEL_11:
      std::string::__init_copy_ctor_external(a3, v9, v10);
      return;
    }
  }
  else if (v8 != 2 || *(_WORD *)a2 != 8481)
  {
    *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__r_.__value_.__r.__words[2] = *(void *)(a2 + 16);
    return;
  }

  std::string::basic_string[abi:ne180100]<0>(a3, "tag:yaml.org,2002:");
}

siri::intelligence::VariableArray *siri::intelligence::VariableArray::VariableArray(siri::intelligence::VariableArray *this)
{
  std::string::basic_string[abi:ne180100]<0>(&v4, (char *)&str_11);
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
  siri::intelligence::Variable::Variable((uint64_t)this, &v4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  *(void *)this = &unk_26ED2A3C0;
  *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *((void *)this + 11) = 0;
  *((void *)this + 9) = 0;
  return this;
}

void sub_239AE6BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::VariableArray::VariableArray(void *a1, const std::string *a2)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
  siri::intelligence::Variable::Variable((uint64_t)a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *a1 = &unk_26ED2A3C0;
  a1[10] = 0;
  a1[11] = 0;
  a1[9] = 0;
  return a1;
}

void sub_239AE6C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::VariableArray::VariableArray(uint64_t a1, const std::string *a2, uint64_t *a3)
{
  std::string::basic_string[abi:ne180100]<0>(&__p, siri::intelligence::TYPE_ARRAY[0]);
  siri::intelligence::Variable::Variable(a1, a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)a1 = &unk_26ED2A3C0;
  *(void *)(a1 + 8std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(a1 + 88) = 0;
  uint64_t v6 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_11);
      siri::intelligence::Variable::FromProtobuf(&__p, v6 + v7, (uint64_t *)&v10);
      if ((void)v10)
      {
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((uint64_t *)(a1 + 72), &v10);
        *(unsigned char *)(a1 + 64) = 1;
      }
      if (*((void *)&v10 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v10 + 1));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v8;
      uint64_t v6 = *a3;
      v7 += 192;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 6) > v8);
  }
  return a1;
}

void sub_239AE6DE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void **siri::intelligence::VariableArray::AddItem(void **result, long long *a2)
{
  if (*(void *)a2)
  {
    unint64_t v2 = result;
    double result = std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((uint64_t *)result + 9, a2);
    *((unsigned char *)v2 + 64) = 1;
  }
  return result;
}

uint64_t siri::intelligence::VariableArray::SetValueFromString(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (!v3)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    return 1;
  }
  siri::intelligence::ParseJsonToVariable(a2, lpsrc);
  if (lpsrc[0])
  {
    if (v5)
    {
      uint64_t v6 = (std::__shared_weak_count *)lpsrc[1];
      if (lpsrc[1]) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)lpsrc[1] + 1, 1uLL, memory_order_relaxed);
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  uint64_t v6 = 0;
LABEL_11:
  if (lpsrc[1]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)lpsrc[1]);
  }
  BOOL v7 = v5 != 0;
  if (v5)
  {
    lpsrc[0] = 0;
    lpsrc[1] = 0;
    uint64_t v12 = 0;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(lpsrc, v5[9], v5[10], ((char *)v5[10] - (char *)v5[9]) >> 4);
    std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate((uint64_t *)(a1 + 72));
    *(_OWORD *)(a1 + 72) = *(_OWORD *)lpsrc;
    *(void *)(a1 + 88) = v12;
    lpsrc[1] = 0;
    uint64_t v12 = 0;
    lpsrc[0] = 0;
    uint64_t v13 = lpsrc;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v13);
    *(unsigned char *)(a1 + 64) = 1;
  }
  else
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v9 = a2;
    }
    else {
      uint64_t v9 = *(void *)a2;
    }
    siri::intelligence::Log::Error((siri::intelligence::Log *)"Illegal array variable string: %s", v8, v9);
  }
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v7;
}

void sub_239AE704C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::VariableArray::GetItems@<X0>(siri::intelligence::VariableArray *this@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(a2, *((void **)this + 9), *((void **)this + 10), (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4);
}

void **std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100](uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  double result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  BOOL v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v18[4] = result;
    uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)result, v13);
    uint64_t v15 = &v14[16 * v10];
    v18[0] = v14;
    v18[1] = v15;
    v18[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v18[2] = v15 + 16;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__swap_out_circular_buffer(a1, v18);
    uint64_t v9 = (void *)a1[1];
    double result = std::__split_buffer<std::shared_ptr<siri::intelligence::Variable>>::~__split_buffer(v18);
  }
  else
  {
    void *v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return result;
}

void sub_239AE718C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<std::shared_ptr<siri::intelligence::Variable>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::VariableArray::GetItem@<X0>(uint64_t this@<X0>, int a2@<W1>, void *a3@<X8>)
{
  if (a2 < 0)
  {
    uint64_t v3 = *(void *)(this + 72);
    unint64_t v4 = (unint64_t)(*(void *)(this + 80) - v3) >> 4;
    a2 += v4;
    if (a2 < 0)
    {
LABEL_8:
      *a3 = 0;
      a3[1] = 0;
      return this;
    }
  }
  else
  {
    uint64_t v3 = *(void *)(this + 72);
    unint64_t v4 = (unint64_t)(*(void *)(this + 80) - v3) >> 4;
  }
  if (a2 >= (int)v4) {
    goto LABEL_8;
  }
  long long v5 = *(_OWORD *)(v3 + 16 * a2);
  *(_OWORD *)a3 = v5;
  if (*((void *)&v5 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v5 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  return this;
}

void siri::intelligence::VariableArray::SetItems(uint64_t a1, uint64_t **a2)
{
  uint64_t v3 = a1 + 72;
  if ((uint64_t **)v3 != a2) {
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(v3, *a2, a2[1], ((char *)a2[1] - (char *)*a2) >> 4);
  }
  *(unsigned char *)(a1 + 64) = 1;
}

void siri::intelligence::VariableArray::PopBack(siri::intelligence::VariableArray *this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *((void *)this + 10);
  if (*((void *)this + 9) == v2)
  {
    *a2 = 0;
    a2[1] = 0;
  }
  else
  {
    uint64_t v4 = *(void *)(v2 - 8);
    *a2 = *(void *)(v2 - 16);
    a2[1] = v4;
    if (v4)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
      uint64_t v2 = *((void *)this + 10);
      long long v5 = *(std::__shared_weak_count **)(v2 - 8);
      if (v5) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
    *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v2 - 16;
  }
}

uint64_t siri::intelligence::VariableArray::RemoveItem(siri::intelligence::VariableArray *this, unsigned int a2)
{
  if ((a2 & 0x80000000) != 0) {
    return 0;
  }
  uint64_t v4 = *((void *)this + 9);
  uint64_t v3 = (long long *)*((void *)this + 10);
  if (a2 >= (unint64_t)(((uint64_t)v3 - v4) >> 4)) {
    return 0;
  }
  std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *>((uint64_t)&v10, (long long *)(v4 + 16 * a2 + 16), v3, v4 + 16 * a2);
  uint64_t v6 = v5;
  uint64_t v7 = *((void *)this + 10);
  if (v7 != v5)
  {
    do
    {
      uint64_t v8 = *(std::__shared_weak_count **)(v7 - 8);
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      v7 -= 16;
    }
    while (v7 != v6);
  }
  *((void *)this + 1std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v6;
  return 1;
}

uint64_t siri::intelligence::VariableArray::GetLength(siri::intelligence::VariableArray *this)
{
  return (uint64_t)(*((void *)this + 10) - *((void *)this + 9)) >> 4;
}

void siri::intelligence::VariableArray::SetUndefined(siri::intelligence::VariableArray *this)
{
  *((unsigned char *)this + 64) = 0;
}

void siri::intelligence::VariableArray::SetEmpty(siri::intelligence::VariableArray *this)
{
  *((unsigned char *)this + 64) = 1;
}

BOOL siri::intelligence::VariableArray::IsEmpty(siri::intelligence::VariableArray *this)
{
  return *((void *)this + 9) == *((void *)this + 10) || *((unsigned char *)this + 64) == 0;
}

void siri::intelligence::VariableArray::AsString(siri::intelligence::VariableArray *this@<X0>, uint64_t a2@<X8>)
{
  memset(&v18, 0, sizeof(v18));
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  uint64_t v3 = (uint64_t *)*((void *)this + 10);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(void **__return_ptr))(*(void *)v4 + 56))(__p);
      std::vector<std::string>::pointer end = v18.__end_;
      if (v18.__end_ < v18.__end_cap_.__value_) {
        break;
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v18.__end_ - (char *)v18.__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v18.__end_cap_.__value_ - (char *)v18.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v18.__end_cap_;
      if (v10) {
        unint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v18.__end_cap_, v10);
      }
      else {
        unint64_t v11 = 0;
      }
      uint64_t v12 = v11 + v8;
      __v.__first_ = v11;
      __v.__begin_ = v12;
      __v.__end_cap_.__value_ = &v11[v10];
      long long v13 = *(_OWORD *)__p;
      v12->__r_.__value_.__r.__words[2] = v17;
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      __p[1] = 0;
      std::string::size_type v17 = 0;
      __p[0] = 0;
      __v.__end_ = v12 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v18, &__v);
      uint64_t v14 = v18.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v18.__end_ = v14;
      if (SHIBYTE(v17) < 0)
      {
        operator delete(__p[0]);
        if (!v5) {
          goto LABEL_19;
        }
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_19;
      }
      if (v5) {
        goto LABEL_18;
      }
LABEL_19:
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_23;
      }
    }
    long long v7 = *(_OWORD *)__p;
    v18.__end_->__r_.__value_.__r.__words[2] = v17;
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v18.__end_ = end + 1;
    if (!v5) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(&__v, ", ");
  siri::intelligence::StringJoin((long long **)&v18, (uint64_t)&__v, a2);
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_239AE75D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  a10 = &a16;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableArray::AsQuotedString(siri::intelligence::VariableArray *this@<X0>, std::string *a2@<X8>)
{
  memset(&v22, 0, sizeof(v22));
  uint64_t v2 = (uint64_t *)*((void *)this + 9);
  uint64_t v3 = (uint64_t *)*((void *)this + 10);
  if (v2 != v3)
  {
    while (1)
    {
      uint64_t v4 = *v2;
      uint64_t v5 = (std::__shared_weak_count *)v2[1];
      if (v5) {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(std::string *__return_ptr))(*(void *)v4 + 64))(&__p);
      std::vector<std::string>::pointer end = v22.__end_;
      if (v22.__end_ < v22.__end_cap_.__value_) {
        break;
      }
      unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_ - (char *)v22.__begin_) >> 3);
      unint64_t v9 = v8 + 1;
      if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) > v9) {
        unint64_t v9 = 0x5555555555555556 * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v22.__end_cap_.__value_ - (char *)v22.__begin_) >> 3) >= 0x555555555555555) {
        unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v10 = v9;
      }
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v22.__end_cap_;
      if (v10) {
        unint64_t v11 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v22.__end_cap_, v10);
      }
      else {
        unint64_t v11 = 0;
      }
      uint64_t v12 = v11 + v8;
      __v.__first_ = v11;
      __v.__begin_ = v12;
      __v.__end_cap_.__value_ = &v11[v10];
      long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      v12->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
      memset(&__p, 0, sizeof(__p));
      __v.__end_ = v12 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v22, &__v);
      uint64_t v14 = v22.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v22.__end_ = v14;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v5) {
          goto LABEL_19;
        }
LABEL_18:
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
        goto LABEL_19;
      }
      if (v5) {
        goto LABEL_18;
      }
LABEL_19:
      v2 += 2;
      if (v2 == v3) {
        goto LABEL_23;
      }
    }
    long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v22.__end_->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v7;
    v22.__end_ = end + 1;
    if (!v5) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_23:
  std::string::basic_string[abi:ne180100]<0>(v19, ", ");
  siri::intelligence::StringJoin((long long **)&v22, (uint64_t)v19, (uint64_t)&__p);
  uint64_t v15 = std::string::insert(&__p, 0, "[");
  long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  __v.__end_ = (std::__split_buffer<std::string>::pointer)v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__v.__first_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v17 = std::string::append((std::string *)&__v, "]");
  *a2 = *v17;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__v.__end_) < 0) {
    operator delete(__v.__first_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v20 < 0) {
    operator delete(v19[0]);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_239AE78C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  a16 = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a16);
  _Unwind_Resume(a1);
}

void siri::intelligence::VariableArray::GetExpanded(siri::intelligence::VariableArray *this@<X0>, siri::intelligence::Memory *a2@<X1>, void *a3@<X8>)
{
  _ZNSt3__115allocate_sharedB8ne180100IN4siri12intelligence13VariableArrayENS_9allocatorIS3_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(v13);
  uint64_t v6 = (_OWORD *)((char *)this + 8);
  if (a2)
  {
    siri::intelligence::Memory::ExpandVariables((uint64_t)a2, (uint64_t)v6, 0, (uint64_t)&__p);
  }
  else if (*((char *)this + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)this + 1), *((void *)this + 2));
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *v6;
    __p.__r_.__value_.__r.__words[2] = *((void *)this + 3);
  }
  std::string::operator=((std::string *)(v13[0] + 8), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::operator=((std::string *)(v13[0] + 32), (const std::string *)((char *)this + 32));
  uint64_t v7 = v13[0];
  *(void *)(v13[0] + 56) = *((void *)this + 7);
  *(unsigned char *)(v7 + 64) = *((unsigned char *)this + 64);
  uint64_t v8 = *((void *)this + 9);
  if (*((void *)this + 10) != v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    do
    {
      (*(void (**)(std::string *__return_ptr))(**(void **)(v8 + v9) + 88))(&__p);
      if (__p.__r_.__value_.__r.__words[0]) {
        std::vector<std::shared_ptr<siri::intelligence::Variable>>::push_back[abi:ne180100]((uint64_t *)(v13[0] + 72), (long long *)&__p);
      }
      if (__p.__r_.__value_.__l.__size_) {
        std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
      }
      ++v10;
      uint64_t v8 = *((void *)this + 9);
      v9 += 16;
    }
    while (v10 < (*((void *)this + 10) - v8) >> 4);
    uint64_t v7 = v13[0];
  }
  uint64_t v11 = v13[1];
  *a3 = v7;
  a3[1] = v11;
}

void sub_239AE7AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  _Unwind_Resume(exception_object);
}

void *siri::intelligence::VariableArray::GetExpandedType@<X0>(void *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, siri::intelligence::TYPE_ARRAY[0]);
}

void siri::intelligence::VariableArray::~VariableArray(void **this)
{
  *this = &unk_26ED2A3C0;
  uint64_t v2 = this + 9;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v2);
  siri::intelligence::Variable::~Variable(this);
}

{
  void **v2;

  *this = &unk_26ED2A3C0;
  uint64_t v2 = this + 9;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&v2);
  siri::intelligence::Variable::~Variable(this);
  MEMORY[0x23ECAACC0]();
}

uint64_t std::vector<std::shared_ptr<siri::intelligence::Variable>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::shared_ptr<siri::intelligence::Variable>>::__throw_length_error[abi:ne180100]()
{
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  std::string v12[2] = &v15;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v15 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v15;
  }
  char v13 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v12);
  return v10;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::reverse_iterator<std::shared_ptr<siri::intelligence::Variable>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    v1 += 16;
  }
}

void **std::__split_buffer<std::shared_ptr<siri::intelligence::Variable>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<siri::intelligence::Variable>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *std::vector<std::shared_ptr<siri::intelligence::Variable>>::__init_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(void *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__vallocate[abi:ne180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_239AE7E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::shared_ptr<siri::intelligence::Variable>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<siri::intelligence::Variable>>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<void (*)(void const*),void const*>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  uint64_t v9 = a4;
  v7[0] = a1;
  v7[1] = &v9;
  std::string v7[2] = &v10;
  if (a2 != a3)
  {
    do
    {
      void *v4 = *a2;
      uint64_t v5 = a2[1];
      v4[1] = v5;
      if (v5) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
      }
      v4 += 2;
      a2 += 2;
    }
    while (a2 != a3);
    uint64_t v10 = v4;
  }
  char v8 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::shared_ptr<siri::intelligence::ResponseBase>>,std::shared_ptr<siri::intelligence::ResponseBase>*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<siri::intelligence::Variable>>::__assign_with_size[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v8 = a1 + 16;
  uint64_t v9 = *(void **)a1;
  if (a4 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    std::vector<std::shared_ptr<siri::intelligence::ResponseBase>>::__vdeallocate((uint64_t *)a1);
    if (a4 >> 60) {
      std::vector<std::shared_ptr<siri::intelligence::Variable>>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
    uint64_t v11 = v10 >> 3;
    if (v10 >> 3 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    std::vector<std::shared_ptr<siri::intelligence::Variable>>::__vallocate[abi:ne180100]((void *)a1, v12);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(v8, a2, a3, *(void **)(a1 + 8));
    goto LABEL_11;
  }
  unint64_t v14 = (uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 4;
  if (v14 < a4)
  {
    long long v15 = &a2[2 * v14];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *>(a2, v15, v9);
    char v13 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::shared_ptr<siri::intelligence::Variable>>,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*,std::shared_ptr<siri::intelligence::Variable>*>(v8, v15, a3, *(void **)(a1 + 8));
LABEL_11:
    *(void *)(a1 + 8) = v13;
    return;
  }
  long long v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *>(a2, a3, v9);
  for (uint64_t i = *(void **)(a1 + 8); i != v16; i -= 2)
  {
    std::vector<std::string> v18 = (std::__shared_weak_count *)*(i - 1);
    if (v18) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    }
  }
  *(void *)(a1 + 8) = v16;
}

void sub_239AE80E4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_239AE80EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void *std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *>(uint64_t *a1, uint64_t *a2, void *a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      uint64_t v7 = *v5;
      uint64_t v6 = v5[1];
      if (v6) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
      }
      uint64_t v8 = (std::__shared_weak_count *)a3[1];
      *a3 = v7;
      a3[1] = v6;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      a3 += 2;
      v5 += 2;
    }
    while (v5 != a2);
  }
  return a3;
}

long long *std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *,std::shared_ptr<siri::intelligence::Variable> *>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)uint64_t v5 = 0;
      *((void *)v5 + 1) = 0;
      uint64_t v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

BOOL YAML::convert<BOOL>::decode(YAML::Node *a1, char *a2)
{
  if (YAML::Node::Type(a1) != 2) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_15, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire((__guard *)&_MergedGlobals_15))
  {
    std::string::basic_string[abi:ne180100]<0>(&qword_26AD86BF0, "y");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C08, "n");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C20, "yes");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C38, "no");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C50, "true");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C68, "false");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C80, "on");
    std::string::basic_string[abi:ne180100]<0>(qword_26AD86C98, "off");
    __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_3, 0, &dword_239A02000);
    __cxa_guard_release((__guard *)&_MergedGlobals_15);
  }
  uint64_t v4 = YAML::Node::Scalar(a1);
  uint64_t v5 = *((unsigned __int8 *)v4 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = v4[1];
  }
  if (v5)
  {
    uint64_t v6 = v4;
    {
      if (*((char *)v6 + 23) >= 0) {
        long long v7 = (unsigned __int8 *)v6;
      }
      else {
        long long v7 = (unsigned __int8 *)*v6;
      }
      unsigned int v8 = *v7 - 65;
      std::string::basic_string(&__p, (const std::string *)v6, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v46);
      if (v8 > 0x19)
      {
        char v9 = 0;
      }
      {
        char v9 = 1;
      }
      else
      {
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if ((v9 & 1) == 0) {
          return 0;
        }
      }
      else if ((v9 & 1) == 0)
      {
        return 0;
      }
    }
  }
  unint64_t v10 = 0;
  BOOL v11 = 1;
  while (1)
  {
    unint64_t v12 = (char *)&_MergedGlobals_15 + 48 * v10;
    char v13 = YAML::Node::Scalar(a1);
    uint64_t v14 = v12[31];
    if ((v14 & 0x80u) == 0) {
      uint64_t v15 = v12[31];
    }
    else {
      uint64_t v15 = *((void *)v12 + 2);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v17 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (v15 != size)
    {
      BOOL v27 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_43;
      }
LABEL_42:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_43;
    }
    std::vector<std::string> v18 = (const void **)(v12 + 8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v14 & 0x80) != 0)
    {
      BOOL v27 = memcmp(*v18, p_p, *((void *)v12 + 2)) == 0;
      goto LABEL_41;
    }
    if (v12[31])
    {
      uint64_t v20 = v14 - 1;
      do
      {
        int v22 = *(unsigned __int8 *)v18;
        std::vector<std::string> v18 = (const void **)((char *)v18 + 1);
        int v21 = v22;
        int v24 = p_p->__r_.__value_.__s.__data_[0];
        p_p = (std::string *)((char *)p_p + 1);
        int v23 = v24;
        BOOL v25 = v20-- != 0;
        char v26 = v25;
        BOOL v27 = v21 == v23;
      }
      while (v21 == v23 && (v26 & 1) != 0);
LABEL_41:
      if ((v17 & 0x80000000) == 0) {
        goto LABEL_43;
      }
      goto LABEL_42;
    }
    BOOL v27 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_42;
    }
LABEL_43:
    if (v27)
    {
      char v43 = 1;
      goto LABEL_77;
    }
    unint64_t v28 = (char *)&_MergedGlobals_15 + 48 * v10;
    BOOL v29 = YAML::Node::Scalar(a1);
    uint64_t v30 = v28[55];
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = v28[55];
    }
    else {
      uint64_t v31 = *((void *)v28 + 5);
    }
    std::string::size_type v32 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    int v33 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v32 = __p.__r_.__value_.__l.__size_;
    }
    if (v31 != v32)
    {
      BOOL v42 = 0;
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_67;
      }
LABEL_66:
      operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_67;
    }
    BOOL v34 = (const void **)(v28 + 32);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v35 = &__p;
    }
    else {
      uint64_t v35 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v30 & 0x80) != 0)
    {
      BOOL v42 = memcmp(*v34, v35, *((void *)v28 + 5)) == 0;
      goto LABEL_65;
    }
    if (v28[55])
    {
      uint64_t v36 = v30 - 1;
      do
      {
        int v38 = *(unsigned __int8 *)v34;
        BOOL v34 = (const void **)((char *)v34 + 1);
        int v37 = v38;
        int v40 = v35->__r_.__value_.__s.__data_[0];
        uint64_t v35 = (std::string *)((char *)v35 + 1);
        int v39 = v40;
        BOOL v25 = v36-- != 0;
        char v41 = v25;
        BOOL v42 = v37 == v39;
      }
      while (v37 == v39 && (v41 & 1) != 0);
LABEL_65:
      if ((v33 & 0x80000000) == 0) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    BOOL v42 = 1;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_66;
    }
LABEL_67:
    if (v42) {
      break;
    }
    BOOL v11 = v10++ < 3;
    if (v10 == 4) {
      return 0;
    }
  }
  char v43 = 0;
LABEL_77:
  *a2 = v43;
  return v11;
}

void sub_239AE85D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  do
  {
    v15 -= 48;
    siri::intelligence::TestParseError::~TestParseError((void **)v15);
  }
  while (v15 != v14);
  __cxa_guard_abort(&_MergedGlobals_15);
  _Unwind_Resume(a1);
}

void anonymous namespace'::tolower(std::string *this, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    *this = *(std::string *)a2;
  }
  uint64_t v3 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  int v4 = (char)v3;
  uint64_t v5 = (std::string *)((char *)this + v3);
  if (v4 >= 0)
  {
    uint64_t v6 = this;
  }
  else
  {
    uint64_t v5 = (std::string *)(this->__r_.__value_.__r.__words[0] + this->__r_.__value_.__l.__size_);
    uint64_t v6 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  while (v6 != v5)
  {
    int v7 = v6->__r_.__value_.__s.__data_[0];
    if ((v7 - 65) < 0x1A) {
      LOBYTE(v7) = v7 + 32;
    }
    v6->__r_.__value_.__s.__data_[0] = v7;
    uint64_t v6 = (std::string *)((char *)v6 + 1);
  }
}

uint64_t anonymous namespace'::IsEntirely<BOOL (*)(char)>(uint64_t *a1, uint64_t (*a2)(void))
{
  BOOL v2 = *((char *)a1 + 23) < 0;
  uint64_t v3 = *((unsigned __int8 *)a1 + 23);
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = a1[1];
  }
  if (!v3) {
    return 1;
  }
  unint64_t v6 = 0;
  do
  {
    if (v2) {
      int v7 = (uint64_t *)*a1;
    }
    else {
      int v7 = a1;
    }
    uint64_t result = a2(*((char *)v7 + v6));
    if ((result & 1) == 0) {
      break;
    }
    ++v6;
    BOOL v2 = *((char *)a1 + 23) < 0;
    unint64_t v9 = *((unsigned __int8 *)a1 + 23);
    if ((v9 & 0x80u) != 0) {
      unint64_t v9 = a1[1];
    }
  }
  while (v6 < v9);
  return result;
}

BOOL anonymous namespace'::IsLower(_anonymous_namespace_ *this)
{
  return this - 97 < 0x1A;
}

BOOL anonymous namespace'::IsUpper(_anonymous_namespace_ *this)
{
  return this - 65 < 0x1A;
}

void __cxx_global_array_dtor_3()
{
  for (uint64_t i = 0; i != -192; i -= 48)
  {
    uint64_t v1 = (void **)((char *)&_MergedGlobals_15 + i);
    if (*((char *)&_MergedGlobals_15 + i + 199) < 0) {
      operator delete(v1[22]);
    }
    if (*((char *)v1 + 175) < 0) {
      operator delete(v1[19]);
    }
  }
}

siri::intelligence::Callbacks *siri::intelligence::Callbacks::Callbacks(siri::intelligence::Callbacks *this)
{
  *((void *)this + 3) = 0;
  std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::operator=[abi:ne180100](this);
  return this;
}

{
  *((void *)this + 3) = 0;
  std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::operator=[abi:ne180100](this);
  return this;
}

void *siri::intelligence::Callbacks::Clear(void *this)
{
  return std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::operator=[abi:ne180100](this);
}

void *std::function<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void siri::intelligence::Callbacks::InvokeDirectInvocationBuilder(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 24);
  if (v6)
  {
    int v7 = (std::__shared_weak_count *)a3[1];
    uint64_t v8 = *a3;
    unint64_t v9 = v7;
    if (v7)
    {
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v6 = *(void *)(a1 + 24);
      if (!v6) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
    }
    (*(void (**)(uint64_t, const char *, uint64_t *))(*(void *)v6 + 48))(v6, a2, &v8);
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    siri::intelligence::Log::Error((siri::intelligence::Log *)"No callback registered for directInvocationBuilder function. Returning empty string.", a2);
    std::string::basic_string[abi:ne180100]<0>(a4, "");
  }
}

void sub_239AE89B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_239AE8CC0(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  exceptioint n = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);

  JUMPOUT(0x23ECAACC0);
}

void *std::__function::__value_func<std::string ()(std::string const&,std::shared_ptr<siri::intelligence::VariableDictionary>)>::operator=[abi:ne180100](void *a1)
{
  BOOL v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t siri::intelligence::Patternizer::GeneratePatterns(const std::string *a1, int a2, int a3, uint64_t a4)
{
  return GenerateFiles(a1, 0, a2, a3, a4);
}

uint64_t GenerateFiles(const std::string *a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v568 = *MEMORY[0x263EF8340];
  int FormatForFilename = siri::intelligence::GetFormatForFilename((uint64_t)a1);
  siri::intelligence::Loader::LoadFile((uint64_t)a1, FormatForFilename, &v558);
  uint64_t v8 = v558;
  if (!(void)v558)
  {
    char v11 = 0;
    goto LABEL_1073;
  }
  siri::intelligence::Configuration::GetFlowIdFromPath(a1, (uint64_t)v556);
  memset(&v547, 0, 24);
  siri::intelligence::StringSplit((unsigned __int8 *)v556, "#", (uint64_t *)&v547, &v555);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v547;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
  begiint n = v555.__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v555.__end_ - (char *)v555.__begin_) >> 3) > 1)
  {
    if (SHIBYTE(v555.__begin_->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v554, v555.__begin_->__r_.__value_.__l.__data_, v555.__begin_->__r_.__value_.__l.__size_);
      begiint n = v555.__begin_;
    }
    else
    {
      long long v12 = *(_OWORD *)&v555.__begin_->__r_.__value_.__l.__data_;
      v554.__r_.__value_.__r.__words[2] = v555.__begin_->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v554.__r_.__value_.__l.__data_ = v12;
    }
    std::string::size_type v530 = (std::string *)a1;
    if (SHIBYTE(begin[1].__r_.__value_.__r.__words[2]) < 0) {
      std::string::__init_copy_ctor_external(&v553, begin[1].__r_.__value_.__l.__data_, begin[1].__r_.__value_.__l.__size_);
    }
    else {
      std::string v553 = begin[1];
    }
    v552[0] = 0;
    v552[1] = 0;
    v551 = (uint64_t *)v552;
    if (*(int *)(v8 + 392) >= 1)
    {
      for (int i = 0; i < *(_DWORD *)(v558 + 392); ++i)
      {
        uint64_t v14 = (const protobuf::Intelligence_Variable *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_Variable>::TypeHandler>(v8 + 384, i);
        protobuf::Intelligence_Variable::Intelligence_Variable((protobuf::Intelligence_Variable *)&v547, v14);
        p_std::string::pointer data = (const void **)&v549->__r_.__value_.__l.__data_;
        long long v16 = (size_t *)v550;
        size_t v17 = strlen(siri::intelligence::TYPE_STRING[0]);
        size_t v18 = v17;
        size_t v19 = *((unsigned __int8 *)v550 + 23);
        if (*((char *)v550 + 23) < 0)
        {
          size_t v23 = (size_t)v550[1];
          if (v17 != v23)
          {
            int v21 = siri::intelligence::TYPE_NUMBER[0];
            size_t v22 = strlen(siri::intelligence::TYPE_NUMBER[0]);
            goto LABEL_28;
          }
          if (v17 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          uint64_t v20 = *v550;
        }
        else
        {
          uint64_t v20 = v550;
          if (v18 != v19)
          {
            int v21 = siri::intelligence::TYPE_NUMBER[0];
            size_t v22 = strlen(siri::intelligence::TYPE_NUMBER[0]);
LABEL_23:
            size_t v23 = v19;
            int v24 = v16;
            if (v22 != v19)
            {
              BOOL v25 = siri::intelligence::TYPE_BOOLEAN[0];
              size_t v26 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
LABEL_33:
              if (v26 == v19) {
                goto LABEL_41;
              }
              goto LABEL_42;
            }
            goto LABEL_31;
          }
        }
        if (!memcmp(v20, siri::intelligence::TYPE_STRING[0], v18))
        {
          BOOL v27 = "dialog.String";
          goto LABEL_48;
        }
        int v21 = siri::intelligence::TYPE_NUMBER[0];
        size_t v22 = strlen(siri::intelligence::TYPE_NUMBER[0]);
        if ((v19 & 0x80) == 0) {
          goto LABEL_23;
        }
        size_t v23 = v16[1];
LABEL_28:
        if (v22 != v23)
        {
          BOOL v25 = siri::intelligence::TYPE_BOOLEAN[0];
          size_t v26 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
          goto LABEL_38;
        }
        if (v23 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        int v24 = (const void *)*v16;
LABEL_31:
        if (!memcmp(v24, v21, v23))
        {
          BOOL v27 = "dialog.Number";
          goto LABEL_48;
        }
        BOOL v25 = siri::intelligence::TYPE_BOOLEAN[0];
        size_t v26 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
        if ((v19 & 0x80) == 0) {
          goto LABEL_33;
        }
        size_t v23 = v16[1];
LABEL_38:
        if (v26 == v23)
        {
          if (v23 == -1) {
            std::string::__throw_out_of_range[abi:ne180100]();
          }
          long long v16 = (size_t *)*v16;
          size_t v19 = v23;
LABEL_41:
          if (!memcmp(v16, v25, v19))
          {
            BOOL v27 = "dialog.Boolean";
            goto LABEL_48;
          }
        }
LABEL_42:
        uint64_t v28 = std::__tree<std::string>::find<std::string>(a5, p_data);
        if (a5 + 8 != v28)
        {
          if (*(char *)(v28 + 79) < 0) {
            std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)(v28 + 56), *(void *)(v28 + 64));
          }
          else {
            std::string __str = *(std::string *)(v28 + 56);
          }
          goto LABEL_49;
        }
        BOOL v27 = "";
LABEL_48:
        std::string::basic_string[abi:ne180100]<0>(&__str, v27);
LABEL_49:
        __p.__begin_ = v549;
        BOOL v29 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v551, (const void **)&v549->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
        std::string::operator=((std::string *)(v29 + 7), &__str);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        protobuf::Intelligence_Variable::~Intelligence_Variable((protobuf::Intelligence_Variable *)&v547);
        uint64_t v8 = v558;
      }
    }
    siri::intelligence::Configuration::GetTemplateDirFromPath((uint64_t)a1, (uint64_t)v545);
    if (*(int *)(v8 + 56) < 1)
    {
      char v527 = 0;
      char v528 = 0;
LABEL_1065:
      if (v546 < 0) {
        operator delete(v545[0]);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v551, v552[0]);
      if (SHIBYTE(v553.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v553.__r_.__value_.__l.__data_);
      }
      char v11 = v527 | v528;
      if (SHIBYTE(v554.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v554.__r_.__value_.__l.__data_);
      }
      goto LABEL_1071;
    }
    char v532 = 0;
    char v533 = 0;
    int v30 = 0;
    while (1)
    {
      uint64_t v31 = google::protobuf::internal::RepeatedPtrFieldBase::Mutable<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(v8 + 48, v30);
      if ((*(unsigned char *)(v31 + 16) & 0x80) != 0) {
        break;
      }
LABEL_1056:
      ++v30;
      uint64_t v8 = v558;
      if (v30 >= *(_DWORD *)(v558 + 56))
      {
        if (v533)
        {
          v526 = (std::__shared_weak_count *)*((void *)&v558 + 1);
          long long v538 = v558;
          char v527 = v532;
          if (*((void *)&v558 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v558 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          siri::intelligence::Saver::SaveFile((uint64_t)&v538, v530);
          if (v526) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v526);
          }
          char v528 = 1;
        }
        else
        {
          char v528 = 0;
          char v527 = v532;
        }
        goto LABEL_1065;
      }
    }
    int v534 = v30;
    if ((v553.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t size = HIBYTE(v553.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t size = v553.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v547, size + 1);
    if (SHIBYTE(v547.__end_) >= 0) {
      std::__split_buffer<std::string>::pointer first = (char *)&v547;
    }
    else {
      std::__split_buffer<std::string>::pointer first = (char *)v547.__first_;
    }
    if (size)
    {
      if ((v553.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v34 = &v553;
      }
      else {
        BOOL v34 = (std::string *)v553.__r_.__value_.__r.__words[0];
      }
      memmove(first, v34, size);
    }
    *(_WORD *)&first[size] = 95;
    uint64_t v35 = *(void *)(v31 + 120);
    int v36 = *(char *)(v35 + 23);
    if (v36 >= 0) {
      int v37 = *(const std::string::value_type **)(v31 + 120);
    }
    else {
      int v37 = *(const std::string::value_type **)v35;
    }
    if (v36 >= 0) {
      std::string::size_type v38 = *(unsigned __int8 *)(v35 + 23);
    }
    else {
      std::string::size_type v38 = *(void *)(v35 + 8);
    }
    int v39 = std::string::append((std::string *)&v547, v37, v38);
    long long v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    int64_t v544 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v543 = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    char v41 = *(long long **)(v31 + 176);
    if (*((char *)v41 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v542, *(const std::string::value_type **)v41, *((void *)v41 + 1));
    }
    else
    {
      long long v42 = *v41;
      v542.__r_.__value_.__r.__words[2] = *((void *)v41 + 2);
      *(_OWORD *)&v542.__r_.__value_.__l.__data_ = v42;
    }
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(&v541, v542.__r_.__value_.__l.__data_, v542.__r_.__value_.__l.__size_);
      if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v547, v542.__r_.__value_.__l.__data_, v542.__r_.__value_.__l.__size_);
        goto LABEL_81;
      }
    }
    else
    {
      std::string v541 = v542;
    }
    *(_OWORD *)&v547.__first_ = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
    v547.__end_ = (std::__split_buffer<std::string>::pointer)v542.__r_.__value_.__r.__words[2];
LABEL_81:
    v547.__end_cap_.__value_ = 0;
    v547.__end_cap_.__value_ = 0;
    char v548 = 0;
    while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v547))
    {
      siri::intelligence::Entity::GetName((std::string *)&v547, &__str);
      std::operator+<char>();
      char v43 = std::string::append(&v560, "\"/>");
      long long v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      __p.__end_cap_.__value_ = (std::string *)v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__begin_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      siri::intelligence::Entity::Expand((std::string *)&v547, (long long *)&__p, 0, &v562);
      if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v541.__r_.__value_.__l.__data_);
      }
      std::string v541 = v562;
      *((unsigned char *)&v562.__r_.__value_.__s + 23) = 0;
      v562.__r_.__value_.__s.__data_[0] = 0;
      if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
        operator delete(__p.__begin_);
      }
      if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v560.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    v540[0] = 0;
    v540[1] = 0;
    int v539 = (uint64_t *)v540;
    if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&v547, v542.__r_.__value_.__l.__data_, v542.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v547.__first_ = *(_OWORD *)&v542.__r_.__value_.__l.__data_;
      v547.__end_ = (std::__split_buffer<std::string>::pointer)v542.__r_.__value_.__r.__words[2];
    }
    v547.__end_cap_.__value_ = 0;
    v547.__end_cap_.__value_ = 0;
    char v548 = 0;
    while (siri::intelligence::Entity::FindNext((siri::intelligence::Entity *)&v547))
    {
      siri::intelligence::Entity::GetName((std::string *)&v547, &__str);
      uint64_t v45 = std::__tree<std::string>::find<std::string>((uint64_t)&v551, (const void **)&__str.__r_.__value_.__l.__data_);
      if (v552 == (void **)v45)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_str = &__str;
        }
        else {
          p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        printf("ERROR: No type found for parameter: %s", (const char *)p_str);
      }
      else
      {
        if (*(char *)(v45 + 79) < 0) {
          std::string::__init_copy_ctor_external(&v562, *(const std::string::value_type **)(v45 + 56), *(void *)(v45 + 64));
        }
        else {
          std::string v562 = *(std::string *)(v45 + 56);
        }
        std::string::size_type v47 = HIBYTE(v562.__r_.__value_.__r.__words[2]);
        if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v47 = v562.__r_.__value_.__l.__size_;
        }
        if (v47)
        {
          __p.__begin_ = &__str;
          std::string::size_type v48 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v539, (const void **)&__str.__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (long long **)&__p);
          std::string::operator=((std::string *)(v48 + 7), &v562);
        }
        else
        {
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            unint64_t v49 = &__str;
          }
          else {
            unint64_t v49 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          printf("ERROR: Cannot map flow variable '%s' to a dialog type. Add --paramTypes argument to fix this.\n", (const char *)v49);
        }
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v547, "dialog");
    if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v50 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v50 = v554.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v562, v50 + 10);
    if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v51 = &v562;
    }
    else {
      uint64_t v51 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if (v50)
    {
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v52 = &v554;
      }
      else {
        uint64_t v52 = (std::string *)v554.__r_.__value_.__r.__words[0];
      }
      memmove(v51, v52, v50);
    }
    strcpy((char *)v51 + v50, ".catfamily");
    if (v544 >= 0) {
      size_t v53 = HIBYTE(v544);
    }
    else {
      size_t v53 = (size_t)v543[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v53 + 4);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
      std::vector<std::string>::pointer p_p = (std::vector<std::string>::pointer)&__p;
    }
    else {
      std::vector<std::string>::pointer p_p = __p.__begin_;
    }
    if (v53)
    {
      if (v544 >= 0) {
        uint64_t v55 = v543;
      }
      else {
        uint64_t v55 = (void **)v543[0];
      }
      memmove(p_p, v55, v53);
    }
    strcpy((char *)p_p + v53, ".cat");
    std::string::basic_string[abi:ne180100]<0>(&v560, "");
    siri::intelligence::JoinPath((uint64_t)v545, (uint64_t)&v547, (uint64_t)&v562, (uint64_t)&__p, (uint64_t)&v560, (uint64_t)&__str);
    if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v560.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v562.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v547, "_params.cat.xml");
    siri::intelligence::JoinPath((uint64_t)&__str, (uint64_t)&v547, (uint64_t)&v562);
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    if (siri::intelligence::FileExists((uint64_t *)&v562) & a3)
    {
      BOOL v56 = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v547, "Social");
      if (siri::intelligence::StringContains(&v554.__r_.__value_.__l.__data_, (char *)&v547)) {
        unint64_t v57 = "Social";
      }
      else {
        unint64_t v57 = "Prompt";
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, v57);
      if (SHIBYTE(v547.__end_) < 0) {
        operator delete(v547.__first_);
      }
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v58 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v58 = v554.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v547, v58 + 1);
      if (SHIBYTE(v547.__end_) >= 0) {
        long long v59 = (char *)&v547;
      }
      else {
        long long v59 = (char *)v547.__first_;
      }
      if (v58)
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v60 = &v554;
        }
        else {
          uint64_t v60 = (std::string *)v554.__r_.__value_.__r.__words[0];
        }
        memmove(v59, v60, v58);
      }
      *(_WORD *)&v59[v58] = 35;
      if (v544 >= 0) {
        unint64_t v61 = v543;
      }
      else {
        unint64_t v61 = (void **)v543[0];
      }
      if (v544 >= 0) {
        std::string::size_type v62 = HIBYTE(v544);
      }
      else {
        std::string::size_type v62 = (std::string::size_type)v543[1];
      }
      uint64_t v63 = std::string::append((std::string *)&v547, (const std::string::value_type *)v61, v62);
      long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
      v560.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v560.__r_.__value_.__l.__data_ = v64;
      v63->__r_.__value_.__l.__size_ = 0;
      v63->__r_.__value_.__r.__words[2] = 0;
      v63->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v547.__end_) < 0) {
        operator delete(v547.__first_);
      }
      memset(&v567, 0, sizeof(v567));
      std::string::basic_string[abi:ne180100]<0>(&v566, "");
      std::vector<std::string>::pointer end = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v67 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v68 = v67 + 1;
        if (v67 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v68) {
          unint64_t v68 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v69 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v69 = v68;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v69) {
          unint64_t v70 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v69);
        }
        else {
          unint64_t v70 = 0;
        }
        std::string::size_type v71 = v70 + v67;
        v547.__first_ = v70;
        v547.__begin_ = v71;
        v547.__end_cap_.__value_ = &v70[v69];
        long long v72 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v71->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v71->__r_.__value_.__l.__data_ = v72;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v71 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        long long v73 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v73;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v66 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&end->__r_.__value_.__l.__data_ = v66;
        v567.__end_ = end + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&v566, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
      std::vector<std::string>::pointer v74 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v76 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v77 = v76 + 1;
        if (v76 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v77) {
          unint64_t v77 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v78 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v78 = v77;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v78) {
          uint64_t v79 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v78);
        }
        else {
          uint64_t v79 = 0;
        }
        uint64_t v80 = v79 + v76;
        v547.__first_ = v79;
        v547.__begin_ = v80;
        v547.__end_cap_.__value_ = &v79[v78];
        long long v81 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v80->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v80->__r_.__value_.__l.__data_ = v81;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v80 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        unint64_t v82 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v82;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v75 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v74->__r_.__value_.__l.__data_ = v75;
        v567.__end_ = v74 + 1;
      }
      std::operator+<char>();
      uint64_t v83 = std::string::append(&v566, "\">");
      std::string::size_type v84 = (char *)v83->__r_.__value_.__r.__words[0];
      v564.__r_.__value_.__r.__words[0] = v83->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
      char v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
      v83->__r_.__value_.__l.__size_ = 0;
      v83->__r_.__value_.__r.__words[2] = 0;
      v83->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer v86 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v88 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v89 = v88 + 1;
        if (v88 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v89) {
          unint64_t v89 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v90 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v90 = v89;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v90) {
          std::string::size_type v91 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v90);
        }
        else {
          std::string::size_type v91 = 0;
        }
        std::string::size_type v92 = v91 + v88;
        v547.__first_ = v91;
        v547.__begin_ = v92;
        v547.__end_cap_.__value_ = &v91[v90];
        v92->__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
        v92->__r_.__value_.__l.__size_ = v564.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v92->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v92->__r_.__value_.__s + 23) = v85;
        v547.__end_ = v92 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        unsigned int v87 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
      }
      else
      {
        v567.__end_->__r_.__value_.__l.__data_ = v84;
        v86->__r_.__value_.__l.__size_ = v564.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v86->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v86->__r_.__value_.__s + 23) = v85;
        unsigned int v87 = v86 + 1;
      }
      v567.__end_ = v87;
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
      std::operator+<char>();
      size_t v93 = std::string::append(&v566, "\"/>");
      std::string::size_type v94 = (char *)v93->__r_.__value_.__r.__words[0];
      v564.__r_.__value_.__r.__words[0] = v93->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v93->__r_.__value_.__r.__words[1] + 7);
      char v95 = HIBYTE(v93->__r_.__value_.__r.__words[2]);
      v93->__r_.__value_.__l.__size_ = 0;
      v93->__r_.__value_.__r.__words[2] = 0;
      v93->__r_.__value_.__r.__words[0] = 0;
      std::vector<std::string>::pointer v96 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v98 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v99 = v98 + 1;
        if (v98 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v99) {
          unint64_t v99 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v100 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v100 = v99;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v100) {
          BOOL v101 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v100);
        }
        else {
          BOOL v101 = 0;
        }
        uint64_t v102 = v101 + v98;
        v547.__first_ = v101;
        v547.__begin_ = v102;
        v547.__end_cap_.__value_ = &v101[v100];
        v102->__r_.__value_.__r.__words[0] = (std::string::size_type)v94;
        v102->__r_.__value_.__l.__size_ = v564.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v102->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v102->__r_.__value_.__s + 23) = v95;
        v547.__end_ = v102 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        std::string::size_type v97 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
      }
      else
      {
        v567.__end_->__r_.__value_.__l.__data_ = v94;
        v96->__r_.__value_.__l.__size_ = v564.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v96->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v564.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v96->__r_.__value_.__s + 23) = v95;
        std::string::size_type v97 = v96 + 1;
      }
      v567.__end_ = v97;
      if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v566.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v566, "  <meta name=\"readyForLoc\" value=\"false\"/>");
      std::vector<std::string>::pointer v103 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v105 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v106 = v105 + 1;
        if (v105 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v106) {
          unint64_t v106 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v107 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v107 = v106;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v107) {
          std::string::size_type v108 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v107);
        }
        else {
          std::string::size_type v108 = 0;
        }
        int v109 = v108 + v105;
        v547.__first_ = v108;
        v547.__begin_ = v109;
        v547.__end_cap_.__value_ = &v108[v107];
        long long v110 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v109->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v109->__r_.__value_.__l.__data_ = v110;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v109 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        std::string v111 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v111;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v104 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103->__r_.__value_.__l.__data_ = v104;
        v567.__end_ = v103 + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&v566, "  <parameters>");
      std::vector<std::string>::pointer v112 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v114 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v115 = v114 + 1;
        if (v114 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v115) {
          unint64_t v115 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v116 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v116 = v115;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v116) {
          std::string::size_type v117 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v116);
        }
        else {
          std::string::size_type v117 = 0;
        }
        BOOL v118 = v117 + v114;
        v547.__first_ = v117;
        v547.__begin_ = v118;
        v547.__end_cap_.__value_ = &v117[v116];
        long long v119 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v118->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v118->__r_.__value_.__l.__data_ = v119;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v118 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        int v120 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v120;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v113 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v112->__r_.__value_.__l.__data_ = v113;
        v567.__end_ = v112 + 1;
      }
      BOOL v121 = v539;
      if (v539 != (uint64_t *)v540)
      {
        do
        {
          std::operator+<char>();
          std::string::size_type v122 = std::string::append(&v559, "\" type=\"");
          long long v123 = *(_OWORD *)&v122->__r_.__value_.__l.__data_;
          v564.__r_.__value_.__r.__words[2] = v122->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v564.__r_.__value_.__l.__data_ = v123;
          v122->__r_.__value_.__l.__size_ = 0;
          v122->__r_.__value_.__r.__words[2] = 0;
          v122->__r_.__value_.__r.__words[0] = 0;
          int v124 = *((char *)v121 + 79);
          if (v124 >= 0) {
            BOOL v125 = (const std::string::value_type *)(v121 + 7);
          }
          else {
            BOOL v125 = (const std::string::value_type *)v121[7];
          }
          if (v124 >= 0) {
            std::string::size_type v126 = *((unsigned __int8 *)v121 + 79);
          }
          else {
            std::string::size_type v126 = v121[8];
          }
          int v127 = std::string::append(&v564, v125, v126);
          long long v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
          v566.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v566.__r_.__value_.__l.__data_ = v128;
          v127->__r_.__value_.__l.__size_ = 0;
          v127->__r_.__value_.__r.__words[2] = 0;
          v127->__r_.__value_.__r.__words[0] = 0;
          int v129 = std::string::append(&v566, "\"/>");
          uint64_t v130 = (char *)v129->__r_.__value_.__r.__words[0];
          v565[0] = v129->__r_.__value_.__l.__size_;
          *(void *)((char *)v565 + 7) = *(std::string::size_type *)((char *)&v129->__r_.__value_.__r.__words[1] + 7);
          char v131 = HIBYTE(v129->__r_.__value_.__r.__words[2]);
          v129->__r_.__value_.__l.__size_ = 0;
          v129->__r_.__value_.__r.__words[2] = 0;
          v129->__r_.__value_.__r.__words[0] = 0;
          std::vector<std::string>::pointer v132 = v567.__end_;
          if (v567.__end_ >= v567.__end_cap_.__value_)
          {
            unint64_t v135 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
            unint64_t v136 = v135 + 1;
            if (v135 + 1 > 0xAAAAAAAAAAAAAAALL) {
              std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
            }
            if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v136) {
              unint64_t v136 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
              unint64_t v137 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v137 = v136;
            }
            v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
            if (v137) {
              std::string v138 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v137);
            }
            else {
              std::string v138 = 0;
            }
            int v139 = v138 + v135;
            v547.__first_ = v138;
            v547.__begin_ = v139;
            v547.__end_cap_.__value_ = &v138[v137];
            std::string::size_type v140 = v565[0];
            v139->__r_.__value_.__r.__words[0] = (std::string::size_type)v130;
            v139->__r_.__value_.__l.__size_ = v140;
            *(std::string::size_type *)((char *)&v139->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v565 + 7);
            *((unsigned char *)&v139->__r_.__value_.__s + 23) = v131;
            v565[0] = 0;
            *(void *)((char *)v565 + 7) = 0;
            v547.__end_ = v139 + 1;
            std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
            int v134 = v567.__end_;
            std::__split_buffer<std::string>::~__split_buffer(&v547);
          }
          else
          {
            std::string::size_type v133 = v565[0];
            v567.__end_->__r_.__value_.__l.__data_ = v130;
            v132->__r_.__value_.__l.__size_ = v133;
            *(std::string::size_type *)((char *)&v132->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v565 + 7);
            *((unsigned char *)&v132->__r_.__value_.__s + 23) = v131;
            int v134 = v132 + 1;
          }
          v567.__end_ = v134;
          if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v566.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v564.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v564.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v559.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v559.__r_.__value_.__l.__data_);
          }
          int v141 = (uint64_t *)v121[1];
          if (v141)
          {
            do
            {
              std::string v142 = v141;
              int v141 = (uint64_t *)*v141;
            }
            while (v141);
          }
          else
          {
            do
            {
              std::string v142 = (uint64_t *)v121[2];
              BOOL v143 = *v142 == (void)v121;
              BOOL v121 = v142;
            }
            while (!v143);
          }
          BOOL v121 = v142;
        }
        while (v142 != (uint64_t *)v540);
      }
      std::string::basic_string[abi:ne180100]<0>(&v566, "  </parameters>");
      std::vector<std::string>::pointer v144 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v146 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v147 = v146 + 1;
        if (v146 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v147) {
          unint64_t v147 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v148 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v148 = v147;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v148) {
          uint64_t v149 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v148);
        }
        else {
          uint64_t v149 = 0;
        }
        int v150 = v149 + v146;
        v547.__first_ = v149;
        v547.__begin_ = v150;
        v547.__end_cap_.__value_ = &v149[v148];
        long long v151 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v150->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v150->__r_.__value_.__l.__data_ = v151;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v150 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        std::string::size_type v152 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v152;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v145 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v144->__r_.__value_.__l.__data_ = v145;
        v567.__end_ = v144 + 1;
      }
      std::string::basic_string[abi:ne180100]<0>(&v566, "</cat>");
      std::vector<std::string>::pointer v153 = v567.__end_;
      if (v567.__end_ >= v567.__end_cap_.__value_)
      {
        unint64_t v155 = 0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_ - (char *)v567.__begin_) >> 3);
        unint64_t v156 = v155 + 1;
        if (v155 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) > v156) {
          unint64_t v156 = 0x5555555555555556 * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * (((char *)v567.__end_cap_.__value_ - (char *)v567.__begin_) >> 3) >= 0x555555555555555) {
          unint64_t v157 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v157 = v156;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v567.__end_cap_;
        if (v157) {
          uint64_t v158 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v567.__end_cap_, v157);
        }
        else {
          uint64_t v158 = 0;
        }
        BOOL v159 = v158 + v155;
        v547.__first_ = v158;
        v547.__begin_ = v159;
        v547.__end_cap_.__value_ = &v158[v157];
        long long v160 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v159->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v159->__r_.__value_.__l.__data_ = v160;
        memset(&v566, 0, sizeof(v566));
        v547.__end_ = v159 + 1;
        std::vector<std::string>::__swap_out_circular_buffer(&v567, &v547);
        size_t v161 = v567.__end_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v567.__end_ = v161;
        if (SHIBYTE(v566.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v566.__r_.__value_.__l.__data_);
        }
      }
      else
      {
        long long v154 = *(_OWORD *)&v566.__r_.__value_.__l.__data_;
        v567.__end_->__r_.__value_.__r.__words[2] = v566.__r_.__value_.__r.__words[2];
        *(_OWORD *)&v153->__r_.__value_.__l.__data_ = v154;
        v567.__end_ = v153 + 1;
      }
      BOOL v56 = siri::intelligence::WriteFileFromLines((long long **)&v567, &v562);
      v547.__first_ = (std::__split_buffer<std::string>::pointer)&v567;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v547);
      if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v560.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
        operator delete(__p.__begin_);
      }
    }
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v562.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v547, "dialog");
    if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v162 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v162 = v554.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v562, v162 + 10);
    if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v163 = &v562;
    }
    else {
      uint64_t v163 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if (v162)
    {
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v164 = &v554;
      }
      else {
        uint64_t v164 = (std::string *)v554.__r_.__value_.__r.__words[0];
      }
      memmove(v163, v164, v162);
    }
    strcpy((char *)v163 + v162, ".catfamily");
    if (v544 >= 0) {
      size_t v165 = HIBYTE(v544);
    }
    else {
      size_t v165 = (size_t)v543[1];
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&__p, v165 + 4);
    if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
      std::vector<std::string>::pointer v166 = (std::vector<std::string>::pointer)&__p;
    }
    else {
      std::vector<std::string>::pointer v166 = __p.__begin_;
    }
    if (v165)
    {
      if (v544 >= 0) {
        uint64_t v167 = v543;
      }
      else {
        uint64_t v167 = (void **)v543[0];
      }
      memmove(v166, v167, v165);
    }
    strcpy((char *)v166 + v165, ".cat");
    std::string::basic_string[abi:ne180100]<0>(&v560, "");
    siri::intelligence::JoinPath((uint64_t)v545, (uint64_t)&v547, (uint64_t)&v562, (uint64_t)&__p, (uint64_t)&v560, (uint64_t)&__str);
    if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v560.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v562.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    std::string::basic_string[abi:ne180100]<0>(&v547, "en.cat.xml");
    siri::intelligence::JoinPath((uint64_t)&__str, (uint64_t)&v547, (uint64_t)&v562);
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    if (siri::intelligence::FileExists((uint64_t *)&v562) & a3)
    {
      BOOL v168 = 0;
      goto LABEL_510;
    }
    if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v169 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v169 = v554.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v547, v169 + 1);
    if (SHIBYTE(v547.__end_) >= 0) {
      uint64_t v170 = (char *)&v547;
    }
    else {
      uint64_t v170 = (char *)v547.__first_;
    }
    if (v169)
    {
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v171 = &v554;
      }
      else {
        int v171 = (std::string *)v554.__r_.__value_.__r.__words[0];
      }
      memmove(v170, v171, v169);
    }
    *(_WORD *)&v170[v169] = 35;
    if (v544 >= 0) {
      std::string v172 = v543;
    }
    else {
      std::string v172 = (void **)v543[0];
    }
    if (v544 >= 0) {
      std::string::size_type v173 = HIBYTE(v544);
    }
    else {
      std::string::size_type v173 = (std::string::size_type)v543[1];
    }
    int v174 = std::string::append((std::string *)&v547, (const std::string::value_type *)v172, v173);
    long long v175 = *(_OWORD *)&v174->__r_.__value_.__l.__data_;
    __p.__end_cap_.__value_ = (std::string *)v174->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__begin_ = v175;
    v174->__r_.__value_.__l.__size_ = 0;
    v174->__r_.__value_.__r.__words[2] = 0;
    v174->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v547.__end_) < 0) {
      operator delete(v547.__first_);
    }
    memset(&v560, 0, sizeof(v560));
    std::string::basic_string[abi:ne180100]<0>(&v567, "");
    int v176 = (_OWORD *)v560.__r_.__value_.__l.__size_;
    if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
    {
      unint64_t v178 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v179 = v178 + 1;
      if (v178 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v179)
        unint64_t v179 = 0x5555555555555556
             * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v180 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v180 = v179;
      }
      v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
      if (v180) {
        int v181 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v180);
      }
      else {
        int v181 = 0;
      }
      long long v182 = v181 + v178;
      v547.__first_ = v181;
      v547.__begin_ = v182;
      v547.__end_cap_.__value_ = &v181[v180];
      long long v183 = *(_OWORD *)&v567.__begin_;
      v182->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
      *(_OWORD *)&v182->__r_.__value_.__l.__data_ = v183;
      memset(&v567, 0, sizeof(v567));
      v547.__end_ = v182 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
      std::string::size_type v184 = v560.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&v547);
      v560.__r_.__value_.__l.__size_ = v184;
      if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
        operator delete(v567.__begin_);
      }
    }
    else
    {
      long long v177 = *(_OWORD *)&v567.__begin_;
      *(void *)(v560.__r_.__value_.__l.__size_ + 16) = v567.__end_cap_.__value_;
      *int v176 = v177;
      v560.__r_.__value_.__l.__size_ = (std::string::size_type)v176 + 24;
    }
    std::string::basic_string[abi:ne180100]<0>(&v567, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
    size_t v185 = (_OWORD *)v560.__r_.__value_.__l.__size_;
    if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
    {
      unint64_t v187 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v188 = v187 + 1;
      if (v187 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v188)
        unint64_t v188 = 0x5555555555555556
             * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v189 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v189 = v188;
      }
      v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
      if (v189) {
        long long v190 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v189);
      }
      else {
        long long v190 = 0;
      }
      int v191 = v190 + v187;
      v547.__first_ = v190;
      v547.__begin_ = v191;
      v547.__end_cap_.__value_ = &v190[v189];
      long long v192 = *(_OWORD *)&v567.__begin_;
      v191->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
      *(_OWORD *)&v191->__r_.__value_.__l.__data_ = v192;
      memset(&v567, 0, sizeof(v567));
      v547.__end_ = v191 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
      std::string::size_type v193 = v560.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&v547);
      v560.__r_.__value_.__l.__size_ = v193;
      if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
        operator delete(v567.__begin_);
      }
    }
    else
    {
      long long v186 = *(_OWORD *)&v567.__begin_;
      *(void *)(v560.__r_.__value_.__l.__size_ + 16) = v567.__end_cap_.__value_;
      *size_t v185 = v186;
      v560.__r_.__value_.__l.__size_ = (std::string::size_type)v185 + 24;
    }
    std::operator+<char>();
    int v194 = std::string::append((std::string *)&v567, "\" locale=\"en\">");
    std::string::size_type v195 = v194->__r_.__value_.__r.__words[0];
    v566.__r_.__value_.__r.__words[0] = v194->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v194->__r_.__value_.__r.__words[1] + 7);
    char v196 = HIBYTE(v194->__r_.__value_.__r.__words[2]);
    v194->__r_.__value_.__l.__size_ = 0;
    v194->__r_.__value_.__r.__words[2] = 0;
    v194->__r_.__value_.__r.__words[0] = 0;
    std::string::size_type v197 = v560.__r_.__value_.__l.__size_;
    if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
    {
      unint64_t v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v200 = v199 + 1;
      if (v199 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v200)
        unint64_t v200 = 0x5555555555555556
             * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v201 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v201 = v200;
      }
      v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
      if (v201) {
        uint64_t v202 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v201);
      }
      else {
        uint64_t v202 = 0;
      }
      int v203 = v202 + v199;
      v547.__first_ = v202;
      v547.__begin_ = v203;
      v547.__end_cap_.__value_ = &v202[v201];
      v203->__r_.__value_.__r.__words[0] = v195;
      v203->__r_.__value_.__l.__size_ = v566.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v203->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v203->__r_.__value_.__s + 23) = v196;
      v547.__end_ = v203 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
      std::string::size_type v198 = v560.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&v547);
    }
    else
    {
      *(void *)v560.__r_.__value_.__l.__size_ = v195;
      *(void *)(v197 + 8) = v566.__r_.__value_.__r.__words[0];
      *(void *)(v197 + 15) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(v197 + 23) = v196;
      std::string::size_type v198 = v197 + 24;
    }
    v560.__r_.__value_.__l.__size_ = v198;
    if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
      operator delete(v567.__begin_);
    }
    if (a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v567, "  <random>");
      uint64_t v204 = (_OWORD *)v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v208 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v209 = v208 + 1;
        if (v208 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v209)
          unint64_t v209 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v210 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v210 = v209;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v210) {
          uint64_t v211 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v210);
        }
        else {
          uint64_t v211 = 0;
        }
        uint64_t v216 = v211 + v208;
        v547.__first_ = v211;
        v547.__begin_ = v216;
        v547.__end_cap_.__value_ = &v211[v210];
        long long v217 = *(_OWORD *)&v567.__begin_;
        v216->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
        *(_OWORD *)&v216->__r_.__value_.__l.__data_ = v217;
        memset(&v567, 0, sizeof(v567));
        v547.__end_ = v216 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
        std::string::size_type v218 = v560.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v560.__r_.__value_.__l.__size_ = v218;
        if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
          operator delete(v567.__begin_);
        }
      }
      else
      {
        long long v205 = *(_OWORD *)&v567.__begin_;
        *(void *)(v560.__r_.__value_.__l.__size_ + 16) = v567.__end_cap_.__value_;
        *uint64_t v204 = v205;
        v560.__r_.__value_.__l.__size_ = (std::string::size_type)v204 + 24;
      }
      std::operator+<char>();
      int v219 = std::string::append((std::string *)&v567, "</dialog>");
      std::string::size_type v220 = v219->__r_.__value_.__r.__words[0];
      v566.__r_.__value_.__r.__words[0] = v219->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v219->__r_.__value_.__r.__words[1] + 7);
      char v221 = HIBYTE(v219->__r_.__value_.__r.__words[2]);
      v219->__r_.__value_.__l.__size_ = 0;
      v219->__r_.__value_.__r.__words[2] = 0;
      v219->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v222 = v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v224 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v225 = v224 + 1;
        if (v224 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v225)
          unint64_t v225 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v226 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v226 = v225;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v226) {
          uint64_t v227 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v226);
        }
        else {
          uint64_t v227 = 0;
        }
        std::string::size_type v240 = v227 + v224;
        v547.__first_ = v227;
        v547.__begin_ = v240;
        v547.__end_cap_.__value_ = &v227[v226];
        v240->__r_.__value_.__r.__words[0] = v220;
        v240->__r_.__value_.__l.__size_ = v566.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v240->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v240->__r_.__value_.__s + 23) = v221;
        v547.__end_ = v240 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
        std::string::size_type v223 = v560.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
      }
      else
      {
        *(void *)v560.__r_.__value_.__l.__size_ = v220;
        *(void *)(v222 + 8) = v566.__r_.__value_.__r.__words[0];
        *(void *)(v222 + 15) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
        *(unsigned char *)(v222 + 23) = v221;
        std::string::size_type v223 = v222 + 24;
      }
      v560.__r_.__value_.__l.__size_ = v223;
      if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
        operator delete(v567.__begin_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v567, "  </random>");
      std::string::size_type v241 = v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v242 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v243 = v242 + 1;
        if (v242 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v243)
          unint64_t v243 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v244 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v244 = v243;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v244)
        {
LABEL_490:
          size_t v248 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v244);
          goto LABEL_493;
        }
        size_t v248 = 0;
LABEL_493:
        uint64_t v249 = v248 + v242;
        v547.__first_ = v248;
        v547.__begin_ = v249;
        v547.__end_cap_.__value_ = &v248[v244];
        long long v250 = *(_OWORD *)&v567.__begin_;
        v249->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
        *(_OWORD *)&v249->__r_.__value_.__l.__data_ = v250;
        memset(&v567, 0, sizeof(v567));
        v547.__end_ = v249 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
        std::string::size_type v251 = v560.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v560.__r_.__value_.__l.__size_ = v251;
        if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
          operator delete(v567.__begin_);
        }
        goto LABEL_495;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v567, "  <all>");
      size_t v206 = (_OWORD *)v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v212 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v213 = v212 + 1;
        if (v212 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v213)
          unint64_t v213 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v214 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v214 = v213;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v214) {
          uint64_t v215 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v214);
        }
        else {
          uint64_t v215 = 0;
        }
        std::string::size_type v228 = v215 + v212;
        v547.__first_ = v215;
        v547.__begin_ = v228;
        v547.__end_cap_.__value_ = &v215[v214];
        long long v229 = *(_OWORD *)&v567.__begin_;
        v228->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
        *(_OWORD *)&v228->__r_.__value_.__l.__data_ = v229;
        memset(&v567, 0, sizeof(v567));
        v547.__end_ = v228 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
        std::string::size_type v230 = v560.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
        v560.__r_.__value_.__l.__size_ = v230;
        if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
          operator delete(v567.__begin_);
        }
      }
      else
      {
        long long v207 = *(_OWORD *)&v567.__begin_;
        *(void *)(v560.__r_.__value_.__l.__size_ + 16) = v567.__end_cap_.__value_;
        *size_t v206 = v207;
        v560.__r_.__value_.__l.__size_ = (std::string::size_type)v206 + 24;
      }
      std::operator+<char>();
      uint64_t v231 = std::string::append((std::string *)&v567, "</dialog>");
      std::string::size_type v232 = v231->__r_.__value_.__r.__words[0];
      v566.__r_.__value_.__r.__words[0] = v231->__r_.__value_.__l.__size_;
      *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v231->__r_.__value_.__r.__words[1] + 7);
      char v233 = HIBYTE(v231->__r_.__value_.__r.__words[2]);
      v231->__r_.__value_.__l.__size_ = 0;
      v231->__r_.__value_.__r.__words[2] = 0;
      v231->__r_.__value_.__r.__words[0] = 0;
      std::string::size_type v234 = v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v236 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v237 = v236 + 1;
        if (v236 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v237)
          unint64_t v237 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v238 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v238 = v237;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v238) {
          uint64_t v239 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v238);
        }
        else {
          uint64_t v239 = 0;
        }
        uint64_t v245 = v239 + v236;
        v547.__first_ = v239;
        v547.__begin_ = v245;
        v547.__end_cap_.__value_ = &v239[v238];
        v245->__r_.__value_.__r.__words[0] = v232;
        v245->__r_.__value_.__l.__size_ = v566.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v245->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v245->__r_.__value_.__s + 23) = v233;
        v547.__end_ = v245 + 1;
        std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
        std::string::size_type v235 = v560.__r_.__value_.__l.__size_;
        std::__split_buffer<std::string>::~__split_buffer(&v547);
      }
      else
      {
        *(void *)v560.__r_.__value_.__l.__size_ = v232;
        *(void *)(v234 + 8) = v566.__r_.__value_.__r.__words[0];
        *(void *)(v234 + 15) = *(std::string::size_type *)((char *)v566.__r_.__value_.__r.__words + 7);
        *(unsigned char *)(v234 + 23) = v233;
        std::string::size_type v235 = v234 + 24;
      }
      v560.__r_.__value_.__l.__size_ = v235;
      if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
        operator delete(v567.__begin_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v567, "  </all>");
      std::string::size_type v241 = v560.__r_.__value_.__l.__size_;
      if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
      {
        unint64_t v242 = 0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
        unint64_t v247 = v242 + 1;
        if (v242 + 1 > 0xAAAAAAAAAAAAAAALL) {
          std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
        }
        if (0x5555555555555556
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v247)
          unint64_t v247 = 0x5555555555555556
               * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL
           * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
          unint64_t v244 = 0xAAAAAAAAAAAAAAALL;
        else {
          unint64_t v244 = v247;
        }
        v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
        if (v244) {
          goto LABEL_490;
        }
        size_t v248 = 0;
        goto LABEL_493;
      }
    }
    long long v246 = *(_OWORD *)&v567.__begin_;
    *(void *)(v241 + 16) = v567.__end_cap_.__value_;
    *(_OWORD *)std::string::size_type v241 = v246;
    v560.__r_.__value_.__l.__size_ = v241 + 24;
LABEL_495:
    std::string::basic_string[abi:ne180100]<0>(&v567, "</cat>");
    std::string::size_type v252 = (_OWORD *)v560.__r_.__value_.__l.__size_;
    if (v560.__r_.__value_.__l.__size_ >= v560.__r_.__value_.__r.__words[2])
    {
      unint64_t v254 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v560.__r_.__value_.__l.__size_ - v560.__r_.__value_.__r.__words[0]) >> 3);
      unint64_t v255 = v254 + 1;
      if (v254 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      if (0x5555555555555556
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) > v255)
        unint64_t v255 = 0x5555555555555556
             * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3);
      if (0xAAAAAAAAAAAAAAABLL
         * ((uint64_t)(v560.__r_.__value_.__r.__words[2] - v560.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
        unint64_t v256 = 0xAAAAAAAAAAAAAAALL;
      else {
        unint64_t v256 = v255;
      }
      v547.__end_cap_.__value_ = (std::allocator<std::string> *)&v560.__r_.__value_.__r.__words[2];
      if (v256) {
        int v257 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v560.__r_.__value_.__r.__words[2], v256);
      }
      else {
        int v257 = 0;
      }
      size_t v258 = v257 + v254;
      v547.__first_ = v257;
      v547.__begin_ = v258;
      v547.__end_cap_.__value_ = &v257[v256];
      long long v259 = *(_OWORD *)&v567.__begin_;
      v258->__r_.__value_.__r.__words[2] = (std::string::size_type)v567.__end_cap_.__value_;
      *(_OWORD *)&v258->__r_.__value_.__l.__data_ = v259;
      memset(&v567, 0, sizeof(v567));
      v547.__end_ = v258 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v560, &v547);
      std::string::size_type v260 = v560.__r_.__value_.__l.__size_;
      std::__split_buffer<std::string>::~__split_buffer(&v547);
      v560.__r_.__value_.__l.__size_ = v260;
      if (SHIBYTE(v567.__end_cap_.__value_) < 0) {
        operator delete(v567.__begin_);
      }
    }
    else
    {
      long long v253 = *(_OWORD *)&v567.__begin_;
      *(void *)(v560.__r_.__value_.__l.__size_ + 16) = v567.__end_cap_.__value_;
      *std::string::size_type v252 = v253;
      v560.__r_.__value_.__l.__size_ = (std::string::size_type)v252 + 24;
    }
    BOOL v168 = siri::intelligence::WriteFileFromLines((long long **)&v560, &v562);
    v547.__first_ = &v560;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v547);
    if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
      operator delete(__p.__begin_);
    }
LABEL_510:
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v562.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    int v537 = v56 || v168;
    if (a2)
    {
      long long v261 = "CAT";
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v547, "visual");
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v262 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v262 = v554.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v562, v262 + 10);
      if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v263 = &v562;
      }
      else {
        long long v263 = (std::string *)v562.__r_.__value_.__r.__words[0];
      }
      if (v262)
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v264 = &v554;
        }
        else {
          int v264 = (std::string *)v554.__r_.__value_.__r.__words[0];
        }
        memmove(v263, v264, v262);
      }
      strcpy((char *)v263 + v262, ".catfamily");
      if (v544 >= 0) {
        size_t v265 = HIBYTE(v544);
      }
      else {
        size_t v265 = (size_t)v543[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v265 + 8);
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
        std::vector<std::string>::pointer v266 = (std::vector<std::string>::pointer)&__p;
      }
      else {
        std::vector<std::string>::pointer v266 = __p.__begin_;
      }
      if (v265)
      {
        if (v544 >= 0) {
          int v267 = v543;
        }
        else {
          int v267 = (void **)v543[0];
        }
        memmove(v266, v267, v265);
      }
      strcpy((char *)v266 + v265, ".vcatxml");
      std::string::basic_string[abi:ne180100]<0>(&v560, "");
      siri::intelligence::JoinPath((uint64_t)v545, (uint64_t)&v547, (uint64_t)&v562, (uint64_t)&__p, (uint64_t)&v560, (uint64_t)&__str);
      if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v560.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
        operator delete(__p.__begin_);
      }
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v547.__end_) < 0) {
        operator delete(v547.__first_);
      }
      if (siri::intelligence::FileExists((uint64_t *)&__str) & a3)
      {
        BOOL v268 = 0;
      }
      else
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v269 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v269 = v554.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v547, v269 + 1);
        if (SHIBYTE(v547.__end_) >= 0) {
          size_t v270 = (char *)&v547;
        }
        else {
          size_t v270 = (char *)v547.__first_;
        }
        if (v269)
        {
          if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v271 = &v554;
          }
          else {
            int v271 = (std::string *)v554.__r_.__value_.__r.__words[0];
          }
          memmove(v270, v271, v269);
        }
        *(_WORD *)&v270[v269] = 35;
        if (v544 >= 0) {
          int v272 = v543;
        }
        else {
          int v272 = (void **)v543[0];
        }
        if (v544 >= 0) {
          std::string::size_type v273 = HIBYTE(v544);
        }
        else {
          std::string::size_type v273 = (std::string::size_type)v543[1];
        }
        BOOL v274 = std::string::append((std::string *)&v547, (const std::string::value_type *)v272, v273);
        long long v275 = *(_OWORD *)&v274->__r_.__value_.__l.__data_;
        v562.__r_.__value_.__r.__words[2] = v274->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v275;
        v274->__r_.__value_.__l.__size_ = 0;
        v274->__r_.__value_.__r.__words[2] = 0;
        v274->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v547.__end_) < 0) {
          operator delete(v547.__first_);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(&v560, "");
        std::vector<std::string>::pointer v276 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v278 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v279 = v278 + 1;
          if (v278 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v279) {
            unint64_t v279 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v280 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v280 = v279;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v280) {
            long long v281 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v280);
          }
          else {
            long long v281 = 0;
          }
          int v282 = v281 + v278;
          v547.__first_ = v281;
          v547.__begin_ = v282;
          v547.__end_cap_.__value_ = &v281[v280];
          long long v283 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v282->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v282->__r_.__value_.__l.__data_ = v283;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v282 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          uint64_t v284 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v284;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v277 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v276->__r_.__value_.__l.__data_ = v277;
          __p.__end_ = v276 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
        std::vector<std::string>::pointer v285 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v287 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v288 = v287 + 1;
          if (v287 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v288) {
            unint64_t v288 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v289 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v289 = v288;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v289) {
            size_t v290 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v289);
          }
          else {
            size_t v290 = 0;
          }
          long long v291 = v290 + v287;
          v547.__first_ = v290;
          v547.__begin_ = v291;
          v547.__end_cap_.__value_ = &v290[v289];
          long long v292 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v291->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v291->__r_.__value_.__l.__data_ = v292;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v291 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          unint64_t v293 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v293;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v286 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v285->__r_.__value_.__l.__data_ = v286;
          __p.__end_ = v285 + 1;
        }
        std::operator+<char>();
        uint64_t v294 = std::string::append(&v560, "\">");
        v295 = (char *)v294->__r_.__value_.__r.__words[0];
        v567.__begin_ = (std::vector<std::string>::pointer)v294->__r_.__value_.__l.__size_;
        *(std::vector<std::string>::pointer *)((char *)&v567.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v294->__r_.__value_.__r.__words[1] + 7);
        char v296 = HIBYTE(v294->__r_.__value_.__r.__words[2]);
        v294->__r_.__value_.__l.__size_ = 0;
        v294->__r_.__value_.__r.__words[2] = 0;
        v294->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v297 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v299 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v300 = v299 + 1;
          if (v299 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v300) {
            unint64_t v300 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v301 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v301 = v300;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v301) {
            v302 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v301);
          }
          else {
            v302 = 0;
          }
          int v303 = v302 + v299;
          v547.__first_ = v302;
          v547.__begin_ = v303;
          v547.__end_cap_.__value_ = &v302[v301];
          v303->__r_.__value_.__r.__words[0] = (std::string::size_type)v295;
          v303->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v303->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v303->__r_.__value_.__s + 23) = v296;
          v547.__end_ = v303 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          uint64_t v298 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
        }
        else
        {
          __p.__end_->__r_.__value_.__l.__data_ = v295;
          v297->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v297->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v297->__r_.__value_.__s + 23) = v296;
          uint64_t v298 = v297 + 1;
        }
        __p.__end_ = v298;
        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v560.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "  <response>");
        std::vector<std::string>::pointer v304 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v306 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v307 = v306 + 1;
          if (v306 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v307) {
            unint64_t v307 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v308 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v308 = v307;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v308) {
            v309 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v308);
          }
          else {
            v309 = 0;
          }
          v310 = v309 + v306;
          v547.__first_ = v309;
          v547.__begin_ = v310;
          v547.__end_cap_.__value_ = &v309[v308];
          long long v311 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v310->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v310->__r_.__value_.__l.__data_ = v311;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v310 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v312 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v312;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v305 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v304->__r_.__value_.__l.__data_ = v305;
          __p.__end_ = v304 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "    <sections>");
        std::vector<std::string>::pointer v313 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v315 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v316 = v315 + 1;
          if (v315 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v316) {
            unint64_t v316 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v317 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v317 = v316;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v317) {
            size_t v318 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v317);
          }
          else {
            size_t v318 = 0;
          }
          std::string v319 = v318 + v315;
          v547.__first_ = v318;
          v547.__begin_ = v319;
          v547.__end_cap_.__value_ = &v318[v317];
          long long v320 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v319->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v319->__r_.__value_.__l.__data_ = v320;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v319 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          std::__split_buffer<std::string> v321 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v321;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v314 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v313->__r_.__value_.__l.__data_ = v314;
          __p.__end_ = v313 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "      <component-list>");
        std::vector<std::string>::pointer v322 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v324 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v325 = v324 + 1;
          if (v324 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v325) {
            unint64_t v325 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v326 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v326 = v325;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v326) {
            size_t v327 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v326);
          }
          else {
            size_t v327 = 0;
          }
          long long v328 = v327 + v324;
          v547.__first_ = v327;
          v547.__begin_ = v328;
          v547.__end_cap_.__value_ = &v327[v326];
          long long v329 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v328->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v328->__r_.__value_.__l.__data_ = v329;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v328 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          uint64_t v330 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v330;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v323 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v322->__r_.__value_.__l.__data_ = v323;
          __p.__end_ = v322 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "      </component-list>");
        std::vector<std::string>::pointer v331 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v333 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v334 = v333 + 1;
          if (v333 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v334) {
            unint64_t v334 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v335 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v335 = v334;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v335) {
            v336 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v335);
          }
          else {
            v336 = 0;
          }
          int v337 = v336 + v333;
          v547.__first_ = v336;
          v547.__begin_ = v337;
          v547.__end_cap_.__value_ = &v336[v335];
          long long v338 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v337->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v337->__r_.__value_.__l.__data_ = v338;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v337 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          size_t v339 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v339;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v332 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v331->__r_.__value_.__l.__data_ = v332;
          __p.__end_ = v331 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "    </sections>");
        std::vector<std::string>::pointer v340 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v342 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v343 = v342 + 1;
          if (v342 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v343) {
            unint64_t v343 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v344 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v344 = v343;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v344) {
            std::string::size_type v345 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v344);
          }
          else {
            std::string::size_type v345 = 0;
          }
          uint64_t v346 = v345 + v342;
          v547.__first_ = v345;
          v547.__begin_ = v346;
          v547.__end_cap_.__value_ = &v345[v344];
          long long v347 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v346->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v346->__r_.__value_.__l.__data_ = v347;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v346 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v348 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v348;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v341 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v340->__r_.__value_.__l.__data_ = v341;
          __p.__end_ = v340 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "  </response>");
        std::vector<std::string>::pointer v349 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v351 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v352 = v351 + 1;
          if (v351 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v352) {
            unint64_t v352 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v353 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v353 = v352;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v353) {
            uint64_t v354 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v353);
          }
          else {
            uint64_t v354 = 0;
          }
          int v355 = v354 + v351;
          v547.__first_ = v354;
          v547.__begin_ = v355;
          v547.__end_cap_.__value_ = &v354[v353];
          long long v356 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v355->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v355->__r_.__value_.__l.__data_ = v356;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v355 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          std::string::size_type v357 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v357;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v350 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v349->__r_.__value_.__l.__data_ = v350;
          __p.__end_ = v349 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "</cat>");
        std::vector<std::string>::pointer v358 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v360 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v361 = v360 + 1;
          if (v360 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v361) {
            unint64_t v361 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v362 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v362 = v361;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v362) {
            size_t v363 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v362);
          }
          else {
            size_t v363 = 0;
          }
          v364 = v363 + v360;
          v547.__first_ = v363;
          v547.__begin_ = v364;
          v547.__end_cap_.__value_ = &v363[v362];
          long long v365 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v364->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v364->__r_.__value_.__l.__data_ = v365;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v364 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v366 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v366;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v359 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v358->__r_.__value_.__l.__data_ = v359;
          __p.__end_ = v358 + 1;
        }
        BOOL v268 = siri::intelligence::WriteFileFromLines((long long **)&__p, &__str);
        v547.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v547);
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      std::string::basic_string[abi:ne180100]<0>(&v547, "pattern");
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v367 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v367 = v554.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v562, v367 + 14);
      if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        v368 = &v562;
      }
      else {
        v368 = (std::string *)v562.__r_.__value_.__r.__words[0];
      }
      if (v367)
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          int v369 = &v554;
        }
        else {
          int v369 = (std::string *)v554.__r_.__value_.__r.__words[0];
        }
        memmove(v368, v369, v367);
      }
      strcpy((char *)v368 + v367, ".patternfamily");
      if (v544 >= 0) {
        size_t v370 = HIBYTE(v544);
      }
      else {
        size_t v370 = (size_t)v543[1];
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&__p, v370 + 11);
      if (SHIBYTE(__p.__end_cap_.__value_) >= 0) {
        std::vector<std::string>::pointer v371 = (std::vector<std::string>::pointer)&__p;
      }
      else {
        std::vector<std::string>::pointer v371 = __p.__begin_;
      }
      if (v370)
      {
        if (v544 >= 0) {
          v372 = v543;
        }
        else {
          v372 = (void **)v543[0];
        }
        memmove(v371, v372, v370);
      }
      strcpy((char *)v371 + v370, ".patternxml");
      std::string::basic_string[abi:ne180100]<0>(&v560, "");
      siri::intelligence::JoinPath((uint64_t)v545, (uint64_t)&v547, (uint64_t)&v562, (uint64_t)&__p, (uint64_t)&v560, (uint64_t)&__str);
      if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v560.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__end_cap_.__value_) < 0) {
        operator delete(__p.__begin_);
      }
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v547.__end_) < 0) {
        operator delete(v547.__first_);
      }
      if (siri::intelligence::FileExists((uint64_t *)&__str) & a3)
      {
        BOOL v373 = 0;
      }
      else
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          size_t v374 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
        }
        else {
          size_t v374 = v554.__r_.__value_.__l.__size_;
        }
        std::string::basic_string[abi:ne180100]((uint64_t)&v547, v374 + 1);
        if (SHIBYTE(v547.__end_) >= 0) {
          v375 = (char *)&v547;
        }
        else {
          v375 = (char *)v547.__first_;
        }
        if (v374)
        {
          if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v376 = &v554;
          }
          else {
            int v376 = (std::string *)v554.__r_.__value_.__r.__words[0];
          }
          memmove(v375, v376, v374);
        }
        *(_WORD *)&v375[v374] = 35;
        if (v544 >= 0) {
          v377 = v543;
        }
        else {
          v377 = (void **)v543[0];
        }
        if (v544 >= 0) {
          std::string::size_type v378 = HIBYTE(v544);
        }
        else {
          std::string::size_type v378 = (std::string::size_type)v543[1];
        }
        int v379 = std::string::append((std::string *)&v547, (const std::string::value_type *)v377, v378);
        long long v380 = *(_OWORD *)&v379->__r_.__value_.__l.__data_;
        v562.__r_.__value_.__r.__words[2] = v379->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v562.__r_.__value_.__l.__data_ = v380;
        v379->__r_.__value_.__l.__size_ = 0;
        v379->__r_.__value_.__r.__words[2] = 0;
        v379->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v547.__end_) < 0) {
          operator delete(v547.__first_);
        }
        memset(&__p, 0, sizeof(__p));
        std::string::basic_string[abi:ne180100]<0>(&v560, "");
        std::vector<std::string>::pointer v381 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v383 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v384 = v383 + 1;
          if (v383 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v384) {
            unint64_t v384 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v385 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v385 = v384;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v385) {
            v386 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v385);
          }
          else {
            v386 = 0;
          }
          v387 = v386 + v383;
          v547.__first_ = v386;
          v547.__begin_ = v387;
          v547.__end_cap_.__value_ = &v386[v385];
          long long v388 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v387->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v387->__r_.__value_.__l.__data_ = v388;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v387 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v389 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v389;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v382 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v381->__r_.__value_.__l.__data_ = v382;
          __p.__end_ = v381 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
        std::vector<std::string>::pointer v390 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v392 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v393 = v392 + 1;
          if (v392 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v393) {
            unint64_t v393 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v394 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v394 = v393;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v394) {
            uint64_t v395 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v394);
          }
          else {
            uint64_t v395 = 0;
          }
          v396 = v395 + v392;
          v547.__first_ = v395;
          v547.__begin_ = v396;
          v547.__end_cap_.__value_ = &v395[v394];
          long long v397 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v396->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v396->__r_.__value_.__l.__data_ = v397;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v396 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v398 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v398;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v391 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v390->__r_.__value_.__l.__data_ = v391;
          __p.__end_ = v390 + 1;
        }
        std::operator+<char>();
        v399 = std::string::append(&v560, "\">");
        uint64_t v400 = (char *)v399->__r_.__value_.__r.__words[0];
        v567.__begin_ = (std::vector<std::string>::pointer)v399->__r_.__value_.__l.__size_;
        *(std::vector<std::string>::pointer *)((char *)&v567.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v399->__r_.__value_.__r.__words[1] + 7);
        char v401 = HIBYTE(v399->__r_.__value_.__r.__words[2]);
        v399->__r_.__value_.__l.__size_ = 0;
        v399->__r_.__value_.__r.__words[2] = 0;
        v399->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v402 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v404 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v405 = v404 + 1;
          if (v404 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v405) {
            unint64_t v405 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v406 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v406 = v405;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v406) {
            v407 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v406);
          }
          else {
            v407 = 0;
          }
          v408 = v407 + v404;
          v547.__first_ = v407;
          v547.__begin_ = v408;
          v547.__end_cap_.__value_ = &v407[v406];
          v408->__r_.__value_.__r.__words[0] = (std::string::size_type)v400;
          v408->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v408->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v408->__r_.__value_.__s + 23) = v401;
          v547.__end_ = v408 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v403 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
        }
        else
        {
          __p.__end_->__r_.__value_.__l.__data_ = v400;
          v402->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v402->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v402->__r_.__value_.__s + 23) = v401;
          v403 = v402 + 1;
        }
        __p.__end_ = v403;
        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v560.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "  <group name=\"Item\">");
        std::vector<std::string>::pointer v409 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v411 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v412 = v411 + 1;
          if (v411 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v412) {
            unint64_t v412 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v413 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v413 = v412;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v413) {
            v414 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v413);
          }
          else {
            v414 = 0;
          }
          v415 = v414 + v411;
          v547.__first_ = v414;
          v547.__begin_ = v415;
          v547.__end_cap_.__value_ = &v414[v413];
          long long v416 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v415->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v415->__r_.__value_.__l.__data_ = v416;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v415 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v417 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v417;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v410 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v409->__r_.__value_.__l.__data_ = v410;
          __p.__end_ = v409 + 1;
        }
        std::operator+<char>();
        int v418 = std::string::append(&v560, "#Item*\"/>");
        int v419 = (char *)v418->__r_.__value_.__r.__words[0];
        v567.__begin_ = (std::vector<std::string>::pointer)v418->__r_.__value_.__l.__size_;
        *(std::vector<std::string>::pointer *)((char *)&v567.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v418->__r_.__value_.__r.__words[1] + 7);
        char v420 = HIBYTE(v418->__r_.__value_.__r.__words[2]);
        v418->__r_.__value_.__l.__size_ = 0;
        v418->__r_.__value_.__r.__words[2] = 0;
        v418->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v421 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v423 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v424 = v423 + 1;
          if (v423 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v424) {
            unint64_t v424 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v425 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v425 = v424;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v425) {
            v426 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v425);
          }
          else {
            v426 = 0;
          }
          std::string::size_type v427 = v426 + v423;
          v547.__first_ = v426;
          v547.__begin_ = v427;
          v547.__end_cap_.__value_ = &v426[v425];
          v427->__r_.__value_.__r.__words[0] = (std::string::size_type)v419;
          v427->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v427->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v427->__r_.__value_.__s + 23) = v420;
          v547.__end_ = v427 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v422 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
        }
        else
        {
          __p.__end_->__r_.__value_.__l.__data_ = v419;
          v421->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v421->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v421->__r_.__value_.__s + 23) = v420;
          v422 = v421 + 1;
        }
        __p.__end_ = v422;
        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v560.__r_.__value_.__l.__data_);
        }
        std::operator+<char>();
        v428 = std::string::append(&v560, "#Item*\"/>");
        uint64_t v429 = (char *)v428->__r_.__value_.__r.__words[0];
        v567.__begin_ = (std::vector<std::string>::pointer)v428->__r_.__value_.__l.__size_;
        *(std::vector<std::string>::pointer *)((char *)&v567.__begin_ + 7) = *(std::vector<std::string>::pointer *)((char *)&v428->__r_.__value_.__r.__words[1] + 7);
        char v430 = HIBYTE(v428->__r_.__value_.__r.__words[2]);
        v428->__r_.__value_.__l.__size_ = 0;
        v428->__r_.__value_.__r.__words[2] = 0;
        v428->__r_.__value_.__r.__words[0] = 0;
        std::vector<std::string>::pointer v431 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v433 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v434 = v433 + 1;
          if (v433 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v434) {
            unint64_t v434 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v435 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v435 = v434;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v435) {
            uint64_t v436 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v435);
          }
          else {
            uint64_t v436 = 0;
          }
          int v437 = v436 + v433;
          v547.__first_ = v436;
          v547.__begin_ = v437;
          v547.__end_cap_.__value_ = &v436[v435];
          v437->__r_.__value_.__r.__words[0] = (std::string::size_type)v429;
          v437->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v437->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v437->__r_.__value_.__s + 23) = v430;
          v547.__end_ = v437 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          uint64_t v432 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
        }
        else
        {
          __p.__end_->__r_.__value_.__l.__data_ = v429;
          v431->__r_.__value_.__l.__size_ = (std::string::size_type)v567.__begin_;
          *(std::string::size_type *)((char *)&v431->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&v567.__begin_ + 7);
          *((unsigned char *)&v431->__r_.__value_.__s + 23) = v430;
          uint64_t v432 = v431 + 1;
        }
        __p.__end_ = v432;
        if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v560.__r_.__value_.__l.__data_);
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "  </group>");
        std::vector<std::string>::pointer v438 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v440 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v441 = v440 + 1;
          if (v440 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v441) {
            unint64_t v441 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v442 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v442 = v441;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v442) {
            int v443 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v442);
          }
          else {
            int v443 = 0;
          }
          uint64_t v444 = v443 + v440;
          v547.__first_ = v443;
          v547.__begin_ = v444;
          v547.__end_cap_.__value_ = &v443[v442];
          long long v445 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v444->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v444->__r_.__value_.__l.__data_ = v445;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v444 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          v446 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v446;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v439 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v438->__r_.__value_.__l.__data_ = v439;
          __p.__end_ = v438 + 1;
        }
        std::string::basic_string[abi:ne180100]<0>(&v560, "</pattern>");
        std::vector<std::string>::pointer v447 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          unint64_t v449 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_ - (char *)__p.__begin_) >> 3);
          unint64_t v450 = v449 + 1;
          if (v449 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          if (0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) > v450) {
            unint64_t v450 = 0x5555555555555556 * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 3) >= 0x555555555555555) {
            unint64_t v451 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v451 = v450;
          }
          v547.__end_cap_.__value_ = (std::allocator<std::string> *)&__p.__end_cap_;
          if (v451) {
            v452 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&__p.__end_cap_, v451);
          }
          else {
            v452 = 0;
          }
          uint64_t v453 = v452 + v449;
          v547.__first_ = v452;
          v547.__begin_ = v453;
          v547.__end_cap_.__value_ = &v452[v451];
          long long v454 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          v453->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v453->__r_.__value_.__l.__data_ = v454;
          memset(&v560, 0, sizeof(v560));
          v547.__end_ = v453 + 1;
          std::vector<std::string>::__swap_out_circular_buffer(&__p, &v547);
          int v455 = __p.__end_;
          std::__split_buffer<std::string>::~__split_buffer(&v547);
          __p.__end_ = v455;
          if (SHIBYTE(v560.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v560.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          long long v448 = *(_OWORD *)&v560.__r_.__value_.__l.__data_;
          __p.__end_->__r_.__value_.__r.__words[2] = v560.__r_.__value_.__r.__words[2];
          *(_OWORD *)&v447->__r_.__value_.__l.__data_ = v448;
          __p.__end_ = v447 + 1;
        }
        BOOL v373 = siri::intelligence::WriteFileFromLines((long long **)&__p, &__str);
        v547.__first_ = (std::__split_buffer<std::string>::pointer)&__p;
        std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v547);
        if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v562.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      v537 |= v268 || v373;
      long long v261 = "Pattern";
    }
    std::string::basic_string[abi:ne180100]<0>(&v547, v261);
    if (v537) {
      printf("%s files written for %s: %s\n");
    }
    else {
      printf("Existing %s files not modified for %s: %s\n");
    }
    if (a2)
    {
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v456 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v456 = v554.__r_.__value_.__l.__size_;
      }
      std::string::basic_string[abi:ne180100]((uint64_t)&v562, v456 + 1);
      if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v457 = &v562;
      }
      else {
        size_t v457 = (std::string *)v562.__r_.__value_.__r.__words[0];
      }
      if (v456)
      {
        if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v458 = &v554;
        }
        else {
          v458 = (std::string *)v554.__r_.__value_.__r.__words[0];
        }
        memmove(v457, v458, v456);
      }
      *(_WORD *)((char *)&v457->__r_.__value_.__l.__data_ + v456) = 35;
      if (v544 >= 0) {
        v459 = v543;
      }
      else {
        v459 = (void **)v543[0];
      }
      if (v544 >= 0) {
        std::string::size_type v460 = HIBYTE(v544);
      }
      else {
        std::string::size_type v460 = (std::string::size_type)v543[1];
      }
      uint64_t v461 = std::string::append(&v562, (const std::string::value_type *)v459, v460);
      long long v462 = *(_OWORD *)&v461->__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[2] = v461->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v462;
      v461->__r_.__value_.__l.__size_ = 0;
      v461->__r_.__value_.__r.__words[2] = 0;
      v461->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v562.__r_.__value_.__l.__data_);
      }
      uint64_t v463 = *(void *)(v31 + 192);
      uint64_t v464 = *(unsigned __int8 *)(v463 + 23);
      if ((v464 & 0x80u) == 0) {
        uint64_t v465 = *(unsigned __int8 *)(v463 + 23);
      }
      else {
        uint64_t v465 = *(void *)(v463 + 8);
      }
      std::string::size_type v466 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v466 = __str.__r_.__value_.__l.__size_;
      }
      if (v465 == v466)
      {
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          v467 = &__str;
        }
        else {
          v467 = (std::string *)__str.__r_.__value_.__r.__words[0];
        }
        if ((v464 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v463, v467, *(void *)(v463 + 8))) {
            goto LABEL_941;
          }
        }
        else
        {
          if (!*(unsigned char *)(v463 + 23)) {
            goto LABEL_941;
          }
          uint64_t v468 = *(unsigned __int8 **)(v31 + 192);
          while (*v468 == v467->__r_.__value_.__s.__data_[0])
          {
            ++v468;
            v467 = (std::string *)((char *)v467 + 1);
            if (!--v464) {
              goto LABEL_941;
            }
          }
        }
      }
      *(_DWORD *)(v31 + 16) |= 0x200u;
      if ((uint64_t *)v463 == &google::protobuf::internal::fixed_address_empty_string) {
        google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v31 + 192, (uint64_t)&__str);
      }
      std::string::operator=((std::string *)v463, &__str);
      char v533 = 1;
LABEL_941:
      *(_OWORD *)&v562.__r_.__value_.__r.__words[1] = 0uLL;
      v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562.__r_.__value_.__l.__size_;
      if (*(int *)(v31 + 32) >= 1)
      {
        int v482 = 0;
        do
        {
          uint64_t v483 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 24, v482);
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v562, *(const void ***)(v483 + 144), *(void *)(v483 + 144));
          ++v482;
        }
        while (v482 < *(_DWORD *)(v31 + 32));
      }
      __p.__end_ = 0;
      __p.__end_cap_.__value_ = 0;
      __p.__begin_ = (std::vector<std::string>::pointer)&__p.__end_;
      google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 24);
      uint64_t v484 = v539;
      if (v539 != (uint64_t *)v540)
      {
        while (1)
        {
          std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&__p, (const void **)v484 + 4, (uint64_t)(v484 + 4));
          v485 = *(int **)(v31 + 40);
          if (!v485) {
            break;
          }
          uint64_t v486 = *(int *)(v31 + 32);
          int v487 = *v485;
          if ((int)v486 >= *v485)
          {
            if (v487 == *(_DWORD *)(v31 + 36))
            {
LABEL_950:
              google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v31 + 24), v487 + 1);
              v485 = *(int **)(v31 + 40);
              int v487 = *v485;
            }
            int *v485 = v487 + 1;
            v488 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(v31 + 24));
            uint64_t v489 = *(void *)(v31 + 40);
            uint64_t v490 = *(int *)(v31 + 32);
            *(_DWORD *)(v31 + 32) = v490 + 1;
            *(void *)(v489 + 8 * v490 + 8) = v488;
            goto LABEL_952;
          }
          *(_DWORD *)(v31 + 32) = v486 + 1;
          v488 = *(protobuf::Intelligence_KeyValueParameter **)&v485[2 * v486 + 2];
LABEL_952:
          int v493 = (uint64_t *)*((void *)v488 + 18);
          uint64_t v491 = (uint64_t)v488 + 144;
          v492 = (std::string *)v493;
          *(_DWORD *)(v491 - 128) |= 8u;
          if (v493 == &google::protobuf::internal::fixed_address_empty_string) {
            google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v491, (uint64_t)(v484 + 4));
          }
          std::string::operator=(v492, (const std::string *)(v484 + 4));
          size_t v494 = (uint64_t *)v484[1];
          if (v494)
          {
            do
            {
              v495 = v494;
              size_t v494 = (uint64_t *)*v494;
            }
            while (v494);
          }
          else
          {
            do
            {
              v495 = (uint64_t *)v484[2];
              BOOL v143 = *v495 == (void)v484;
              uint64_t v484 = v495;
            }
            while (!v143);
          }
          uint64_t v484 = v495;
          if (v495 == (uint64_t *)v540) {
            goto LABEL_961;
          }
        }
        int v487 = *(_DWORD *)(v31 + 36);
        goto LABEL_950;
      }
LABEL_961:
      if ((std::string *)v562.__r_.__value_.__r.__words[2] == __p.__end_cap_.__value_)
      {
        v496 = (std::string *)v562.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)v562.__r_.__value_.__l.__data_ != &v562.__r_.__value_.__r.__words[1])
        {
          std::vector<std::string>::pointer v497 = __p.__begin_;
          int v30 = v534;
          do
          {
            int v498 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v560, (unsigned __int8 *)&v496[1].__r_.__value_.__s.__data_[8], (unsigned __int8 *)&v497[1].__r_.__value_.__s.__data_[8]);
            if (!v498) {
              break;
            }
            v499 = (std::string *)v496->__r_.__value_.__l.__size_;
            int v500 = v496;
            if (v499)
            {
              do
              {
                v496 = v499;
                v499 = (std::string *)v499->__r_.__value_.__r.__words[0];
              }
              while (v499);
            }
            else
            {
              do
              {
                v496 = (std::string *)v500->__r_.__value_.__r.__words[2];
                BOOL v143 = v496->__r_.__value_.__r.__words[0] == (void)v500;
                int v500 = v496;
              }
              while (!v143);
            }
            v501 = (std::string *)v497->__r_.__value_.__l.__size_;
            if (v501)
            {
              do
              {
                v502 = v501;
                v501 = (std::string *)v501->__r_.__value_.__r.__words[0];
              }
              while (v501);
            }
            else
            {
              do
              {
                v502 = (std::string *)v497->__r_.__value_.__r.__words[2];
                BOOL v143 = v502->__r_.__value_.__r.__words[0] == (void)v497;
                std::vector<std::string>::pointer v497 = v502;
              }
              while (!v143);
            }
            std::vector<std::string>::pointer v497 = v502;
          }
          while (v496 != (std::string *)&v562.__r_.__value_.__r.__words[1]);
LABEL_1021:
          if ((*(unsigned char *)(v31 + 17) & 4) != 0 || *(int *)(v31 + 56) >= 1)
          {
            uint64_t v523 = *(void *)(v31 + 200);
            if ((uint64_t *)v523 != &google::protobuf::internal::fixed_address_empty_string)
            {
              if (*(char *)(v523 + 23) < 0)
              {
                **(unsigned char **)uint64_t v523 = 0;
                *(void *)(v523 + 8) = 0;
              }
              else
              {
                *(unsigned char *)uint64_t v523 = 0;
                *(unsigned char *)(v523 + 23) = 0;
              }
            }
            *(_DWORD *)(v31 + 16) &= ~0x400u;
            google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 48);
LABEL_1038:
            char v533 = 1;
            int v30 = v534;
            goto LABEL_1039;
          }
          goto LABEL_1035;
        }
        LOBYTE(v498) = 1;
      }
      else
      {
        LOBYTE(v498) = 0;
      }
      int v30 = v534;
      goto LABEL_1021;
    }
    if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      size_t v469 = HIBYTE(v554.__r_.__value_.__r.__words[2]);
    }
    else {
      size_t v469 = v554.__r_.__value_.__l.__size_;
    }
    std::string::basic_string[abi:ne180100]((uint64_t)&v562, v469 + 1);
    if ((v562.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      int v470 = &v562;
    }
    else {
      int v470 = (std::string *)v562.__r_.__value_.__r.__words[0];
    }
    if (v469)
    {
      if ((v554.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v471 = &v554;
      }
      else {
        int v471 = (std::string *)v554.__r_.__value_.__r.__words[0];
      }
      memmove(v470, v471, v469);
    }
    *(_WORD *)((char *)&v470->__r_.__value_.__l.__data_ + v46std::vector<std::shared_ptr<siri::intelligence::Variable>>::__clear[abi:ne180100]((uint64_t *)this + 9) = 35;
    if (v544 >= 0) {
      v472 = v543;
    }
    else {
      v472 = (void **)v543[0];
    }
    if (v544 >= 0) {
      std::string::size_type v473 = HIBYTE(v544);
    }
    else {
      std::string::size_type v473 = (std::string::size_type)v543[1];
    }
    uint64_t v474 = std::string::append(&v562, (const std::string::value_type *)v472, v473);
    long long v475 = *(_OWORD *)&v474->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = v474->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v475;
    v474->__r_.__value_.__l.__size_ = 0;
    v474->__r_.__value_.__r.__words[2] = 0;
    v474->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v562.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v562.__r_.__value_.__l.__data_);
    }
    uint64_t v476 = *(void *)(v31 + 200);
    uint64_t v477 = *(unsigned __int8 *)(v476 + 23);
    if ((v477 & 0x80u) == 0) {
      uint64_t v478 = *(unsigned __int8 *)(v476 + 23);
    }
    else {
      uint64_t v478 = *(void *)(v476 + 8);
    }
    std::string::size_type v479 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v479 = __str.__r_.__value_.__l.__size_;
    }
    if (v478 == v479)
    {
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v480 = &__str;
      }
      else {
        size_t v480 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((v477 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v476, v480, *(void *)(v476 + 8))) {
          goto LABEL_982;
        }
      }
      else
      {
        if (!*(unsigned char *)(v476 + 23)) {
          goto LABEL_982;
        }
        v481 = *(unsigned __int8 **)(v31 + 200);
        while (*v481 == v480->__r_.__value_.__s.__data_[0])
        {
          ++v481;
          size_t v480 = (std::string *)((char *)v480 + 1);
          if (!--v477) {
            goto LABEL_982;
          }
        }
      }
    }
    *(_DWORD *)(v31 + 16) |= 0x400u;
    if ((uint64_t *)v476 == &google::protobuf::internal::fixed_address_empty_string) {
      google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v31 + 200, (uint64_t)&__str);
    }
    std::string::operator=((std::string *)v476, &__str);
    char v533 = 1;
LABEL_982:
    *(_OWORD *)&v562.__r_.__value_.__r.__words[1] = 0uLL;
    v562.__r_.__value_.__r.__words[0] = (std::string::size_type)&v562.__r_.__value_.__l.__size_;
    if (*(int *)(v31 + 56) >= 1)
    {
      int v503 = 0;
      do
      {
        uint64_t v504 = google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 48, v503);
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v562, *(const void ***)(v504 + 144), *(void *)(v504 + 144));
        ++v503;
      }
      while (v503 < *(_DWORD *)(v31 + 56));
    }
    __p.__end_ = 0;
    __p.__end_cap_.__value_ = 0;
    __p.__begin_ = (std::vector<std::string>::pointer)&__p.__end_;
    google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 48);
    int v505 = v539;
    if (v539 != (uint64_t *)v540)
    {
      while (1)
      {
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&__p, (const void **)v505 + 4, (uint64_t)(v505 + 4));
        uint64_t v506 = *(int **)(v31 + 64);
        if (!v506) {
          break;
        }
        uint64_t v507 = *(int *)(v31 + 56);
        int v508 = *v506;
        if ((int)v507 >= *v506)
        {
          if (v508 == *(_DWORD *)(v31 + 60))
          {
LABEL_991:
            google::protobuf::internal::RepeatedPtrFieldBase::Reserve((unsigned int *)(v31 + 48), v508 + 1);
            uint64_t v506 = *(int **)(v31 + 64);
            int v508 = *v506;
          }
          *uint64_t v506 = v508 + 1;
          uint64_t v509 = google::protobuf::Arena::CreateMaybeMessage<protobuf::Intelligence_KeyValueParameter>(*(google::protobuf::internal::ArenaImpl **)(v31 + 48));
          uint64_t v510 = *(void *)(v31 + 64);
          uint64_t v511 = *(int *)(v31 + 56);
          *(_DWORD *)(v31 + 56) = v511 + 1;
          *(void *)(v510 + 8 * v511 + 8) = v509;
          goto LABEL_993;
        }
        *(_DWORD *)(v31 + 56) = v507 + 1;
        uint64_t v509 = *(protobuf::Intelligence_KeyValueParameter **)&v506[2 * v507 + 2];
LABEL_993:
        v514 = (uint64_t *)*((void *)v509 + 18);
        uint64_t v512 = (uint64_t)v509 + 144;
        long long v513 = (std::string *)v514;
        *(_DWORD *)(v512 - 128) |= 8u;
        if (v514 == &google::protobuf::internal::fixed_address_empty_string) {
          google::protobuf::internal::ArenaStringPtr::CreateInstanceNoArena(v512, (uint64_t)(v505 + 4));
        }
        std::string::operator=(v513, (const std::string *)(v505 + 4));
        std::string::size_type v515 = (uint64_t *)v505[1];
        if (v515)
        {
          do
          {
            size_t v516 = v515;
            std::string::size_type v515 = (uint64_t *)*v515;
          }
          while (v515);
        }
        else
        {
          do
          {
            size_t v516 = (uint64_t *)v505[2];
            BOOL v143 = *v516 == (void)v505;
            int v505 = v516;
          }
          while (!v143);
        }
        int v505 = v516;
        if (v516 == (uint64_t *)v540) {
          goto LABEL_1002;
        }
      }
      int v508 = *(_DWORD *)(v31 + 60);
      goto LABEL_991;
    }
LABEL_1002:
    if ((std::string *)v562.__r_.__value_.__r.__words[2] == __p.__end_cap_.__value_)
    {
      v517 = (std::string *)v562.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)v562.__r_.__value_.__l.__data_ != &v562.__r_.__value_.__r.__words[1])
      {
        std::vector<std::string>::pointer v518 = __p.__begin_;
        int v30 = v534;
        do
        {
          int v498 = std::__equal_to::operator()[abi:ne180100]<std::string,std::string>((uint64_t)&v560, (unsigned __int8 *)&v517[1].__r_.__value_.__s.__data_[8], (unsigned __int8 *)&v518[1].__r_.__value_.__s.__data_[8]);
          if (!v498) {
            break;
          }
          v519 = (std::string *)v517->__r_.__value_.__l.__size_;
          uint64_t v520 = v517;
          if (v519)
          {
            do
            {
              v517 = v519;
              v519 = (std::string *)v519->__r_.__value_.__r.__words[0];
            }
            while (v519);
          }
          else
          {
            do
            {
              v517 = (std::string *)v520->__r_.__value_.__r.__words[2];
              BOOL v143 = v517->__r_.__value_.__r.__words[0] == (void)v520;
              uint64_t v520 = v517;
            }
            while (!v143);
          }
          v521 = (std::string *)v518->__r_.__value_.__l.__size_;
          if (v521)
          {
            do
            {
              int v522 = v521;
              v521 = (std::string *)v521->__r_.__value_.__r.__words[0];
            }
            while (v521);
          }
          else
          {
            do
            {
              int v522 = (std::string *)v518->__r_.__value_.__r.__words[2];
              BOOL v143 = v522->__r_.__value_.__r.__words[0] == (void)v518;
              std::vector<std::string>::pointer v518 = v522;
            }
            while (!v143);
          }
          std::vector<std::string>::pointer v518 = v522;
        }
        while (v517 != (std::string *)&v562.__r_.__value_.__r.__words[1]);
LABEL_1030:
        if ((*(unsigned char *)(v31 + 17) & 2) != 0 || *(int *)(v31 + 32) >= 1)
        {
          uint64_t v524 = *(void *)(v31 + 192);
          if ((uint64_t *)v524 != &google::protobuf::internal::fixed_address_empty_string)
          {
            if (*(char *)(v524 + 23) < 0)
            {
              **(unsigned char **)uint64_t v524 = 0;
              *(void *)(v524 + 8) = 0;
            }
            else
            {
              *(unsigned char *)uint64_t v524 = 0;
              *(unsigned char *)(v524 + 23) = 0;
            }
          }
          *(_DWORD *)(v31 + 16) &= ~0x200u;
          google::protobuf::internal::RepeatedPtrFieldBase::Clear<google::protobuf::RepeatedPtrField<protobuf::Intelligence_KeyValueParameter>::TypeHandler>(v31 + 24);
          goto LABEL_1038;
        }
LABEL_1035:
        v533 |= v498 ^ 1;
LABEL_1039:
        std::__tree<std::string>::destroy((uint64_t)&__p, (char *)__p.__end_);
        std::__tree<std::string>::destroy((uint64_t)&v562, (char *)v562.__r_.__value_.__l.__size_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        if (a4)
        {
          uint64_t v525 = *(void *)(v31 + 176);
          if ((uint64_t *)v525 != &google::protobuf::internal::fixed_address_empty_string)
          {
            if (*(char *)(v525 + 23) < 0)
            {
              **(unsigned char **)uint64_t v525 = 0;
              *(void *)(v525 + 8) = 0;
            }
            else
            {
              *(unsigned char *)uint64_t v525 = 0;
              *(unsigned char *)(v525 + 23) = 0;
            }
          }
          *(_DWORD *)(v31 + 16) &= ~0x80u;
          char v533 = 1;
        }
        if (SHIBYTE(v547.__end_) < 0) {
          operator delete(v547.__first_);
        }
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v539, v540[0]);
        if (SHIBYTE(v541.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v541.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v542.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v542.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v544) < 0) {
          operator delete(v543[0]);
        }
        v532 |= v537;
        goto LABEL_1056;
      }
      LOBYTE(v498) = 1;
    }
    else
    {
      LOBYTE(v498) = 0;
    }
    int v30 = v534;
    goto LABEL_1030;
  }
  unint64_t v10 = v556;
  if (v557 < 0) {
    unint64_t v10 = (void **)v556[0];
  }
  printf("ERROR: flowId does not contain 2 parts: %s\n", (const char *)v10);
  char v11 = 0;
LABEL_1071:
  v547.__first_ = (std::__split_buffer<std::string>::pointer)&v555;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v547);
  if (v557 < 0) {
    operator delete(v556[0]);
  }
LABEL_1073:
  if (*((void *)&v558 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v558 + 1));
  }
  return v11 & 1;
}

void sub_239AED574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (v75) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
  }
  if (a47 < 0) {
    operator delete(__p);
  }
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a65, a66);
  if (a72 < 0) {
    operator delete(a68);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  STACK[0x290] = (unint64_t)&a75;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  if (STACK[0x230]) {
    std::__shared_weak_count::__release_shared[abi:ne180100]((std::__shared_weak_count *)STACK[0x230]);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::Patternizer::GenerateCATs(const std::string *a1, int a2, int a3, uint64_t a4)
{
  return GenerateFiles(a1, 1, a2, a3, a4);
}

uint64_t siri::intelligence::Patternizer::UpdateCATMetadata(uint64_t a1, const void ***a2)
{
  v125[2] = *MEMORY[0x263EF8340];
  int FormatForFilename = siri::intelligence::GetFormatForFilename(a1);
  siri::intelligence::Loader::LoadFile(a1, FormatForFilename, &v109);
  uint64_t v4 = v109;
  if ((void)v109)
  {
    siri::intelligence::Configuration::GetTemplateDirFromPath(a1, (uint64_t)v107);
    if (*(int *)(v4 + 56) >= 1)
    {
      int v5 = 0;
      char v98 = 1;
      while (1)
      {
        int v100 = v5;
        uint64_t v6 = (const protobuf::Intelligence_DialogResponse *)google::protobuf::internal::RepeatedPtrFieldBase::Get<google::protobuf::RepeatedPtrField<protobuf::Intelligence_DialogResponse>::TypeHandler>(v4 + 48, v5);
        protobuf::Intelligence_DialogResponse::Intelligence_DialogResponse((protobuf::Intelligence_DialogResponse *)v104, v6);
        int v7 = &v105;
        if ((v104[17] & 2) == 0) {
          int v7 = &v106;
        }
        uint64_t v8 = (long long *)*v7;
        if (*((char *)v8 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)v8, *((void *)v8 + 1));
        }
        else
        {
          long long v9 = *v8;
          v103.__r_.__value_.__r.__words[2] = *((void *)v8 + 2);
          *(_OWORD *)&v103.__r_.__value_.__l.__data_ = v9;
        }
        std::string::size_type size = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        char v11 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        if ((v103.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v103.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          siri::intelligence::Configuration::GetPathFromCatId((unsigned __int8 *)&v103, &__str);
          std::string::basic_string[abi:ne180100]<0>(&v120, "_params.cat.xml");
          std::string::basic_string[abi:ne180100]<0>(&v119, "");
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          siri::intelligence::JoinPath((uint64_t)v107, (uint64_t)&__str, (uint64_t)&v120, (uint64_t)&v119, (uint64_t)&__p, (uint64_t)&v102);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v119.__end_cap_.__value_) < 0) {
            operator delete(v119.__begin_);
          }
          if (SHIBYTE(v122) < 0) {
            operator delete(v120);
          }
          if (SHIBYTE(__str.__end_) < 0) {
            operator delete(__str.__first_);
          }
          if (siri::intelligence::FileExists((uint64_t *)&v102))
          {
            std::map<std::string,std::string>::map[abi:ne180100]((uint64_t *)&v120, a2);
            memset(&v119, 0, sizeof(v119));
            std::string::basic_string[abi:ne180100]<0>(&__p, "    ");
            siri::intelligence::ReadFileToLines(&v116);
            uint64_t v12 = v116;
            uint64_t v13 = v117;
            for (uint64_t i = v117; ; v13 = i)
            {
              if (v12 == v13)
              {
                __str.__first_ = (std::__split_buffer<std::string>::pointer)&v116;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                BOOL v94 = siri::intelligence::WriteFileFromLines((long long **)&v119, &v102);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                __str.__first_ = (std::__split_buffer<std::string>::pointer)&v119;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__str);
                std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v120, v121);
                if (v94)
                {
                  char v95 = &v102;
                  if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v95 = (std::string *)v102.__r_.__value_.__r.__words[0];
                  }
                  printf("Updated CAT metadata: %s\n", (const char *)v95);
                }
                else
                {
                  char v98 = 0;
                }
                break;
              }
              if (*(char *)(v12 + 23) < 0)
              {
                std::string::__init_copy_ctor_external(&v115, *(const std::string::value_type **)v12, *(void *)(v12 + 8));
              }
              else
              {
                long long v14 = *(_OWORD *)v12;
                v115.__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
                *(_OWORD *)&v115.__r_.__value_.__l.__data_ = v14;
              }
              siri::intelligence::StringTrim(" \t\n\r", &v115, (std::string *)&__str);
              siri::intelligence::StringToLower((uint64_t)&__str, &v114);
              if (SHIBYTE(__str.__end_) < 0) {
                operator delete(__str.__first_);
              }
              std::string::basic_string[abi:ne180100]<0>(&__str, "<meta");
              if (siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&__str))
              {
                BOOL v15 = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v113, "<parameters");
                BOOL v15 = siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&v113);
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(__str.__end_) < 0)
              {
                operator delete(__str.__first_);
                if (!v15) {
                  goto LABEL_46;
                }
              }
              else if (!v15)
              {
                goto LABEL_46;
              }
              siri::intelligence::StringTrimLeft(" \t\n\r", &v115, &v113);
              std::string::basic_string[abi:ne180100]<0>(&v112, "");
              siri::intelligence::StringReplace((uint64_t)&v115, (char *)&v113, (uint64_t)&v112, 0, (std::string *)&__str);
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v113.__r_.__value_.__l.__data_);
              }
              std::__split_buffer<std::string>::pointer end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__str.__end_);
              char v17 = HIBYTE(__str.__end_);
              if (SHIBYTE(__str.__end_) < 0) {
                std::__split_buffer<std::string>::pointer end_high = __str.__begin_;
              }
              if (end_high)
              {
                std::string::operator=(&__p, (const std::string *)&__str);
                char v17 = HIBYTE(__str.__end_);
              }
              if (v17 < 0) {
                operator delete(__str.__first_);
              }
LABEL_46:
              std::string::basic_string[abi:ne180100]<0>(&__str, "<cat");
              if (siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&__str))
              {
                std::string::basic_string[abi:ne180100]<0>(&v113, "/>");
                BOOL v18 = siri::intelligence::StringEndsWith(&v114, (unsigned __int8 *)&v113);
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                BOOL v18 = 0;
              }
              if (SHIBYTE(__str.__end_) < 0)
              {
                operator delete(__str.__first_);
                if (!v18) {
                  goto LABEL_72;
                }
              }
              else if (!v18)
              {
                goto LABEL_72;
              }
              std::string::basic_string[abi:ne180100]<0>(&v112, "/>");
              std::string::basic_string[abi:ne180100]<0>(&v111, ">");
              siri::intelligence::StringReplace((uint64_t)&v115, (char *)&v112, (uint64_t)&v111, 0, &v113);
              std::vector<std::string>::pointer end = v119.__end_;
              if (v119.__end_ >= v119.__end_cap_.__value_)
              {
                unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v119.__end_ - (char *)v119.__begin_) >> 3);
                unint64_t v22 = v21 + 1;
                if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
                  std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
                }
                if (0x5555555555555556 * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3) > v22) {
                  unint64_t v22 = 0x5555555555555556 * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3);
                }
                if (0xAAAAAAAAAAAAAAABLL * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3) >= 0x555555555555555) {
                  unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
                }
                else {
                  unint64_t v23 = v22;
                }
                __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v119.__end_cap_;
                if (v23) {
                  int v24 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v119.__end_cap_, v23);
                }
                else {
                  int v24 = 0;
                }
                BOOL v25 = v24 + v21;
                __str.__first_ = v24;
                __str.__begin_ = v25;
                __str.__end_cap_.__value_ = &v24[v23];
                long long v26 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
                v25->__r_.__value_.__r.__words[2] = v113.__r_.__value_.__r.__words[2];
                *(_OWORD *)&v25->__r_.__value_.__l.__data_ = v26;
                memset(&v113, 0, sizeof(v113));
                __str.__end_ = v25 + 1;
                std::vector<std::string>::__swap_out_circular_buffer(&v119, &__str);
                BOOL v27 = v119.__end_;
                std::__split_buffer<std::string>::~__split_buffer(&__str);
                v119.__end_ = v27;
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                long long v20 = *(_OWORD *)&v113.__r_.__value_.__l.__data_;
                v119.__end_->__r_.__value_.__r.__words[2] = v113.__r_.__value_.__r.__words[2];
                *(_OWORD *)&end->__r_.__value_.__l.__data_ = v20;
                memset(&v113, 0, sizeof(v113));
                v119.__end_ = end + 1;
              }
              if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v111.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v112.__r_.__value_.__l.__data_);
              }
              MEMORY[0x23ECAA8E0](&v115, "</cat>");
              std::string::operator=(&v114, &v115);
LABEL_72:
              std::string::basic_string[abi:ne180100]<0>(&__str, "<parameters");
              if (siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&__str))
              {
                BOOL v28 = 1;
              }
              else
              {
                std::string::basic_string[abi:ne180100]<0>(&v113, "</cat");
                BOOL v28 = siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&v113);
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
              }
              if (SHIBYTE(__str.__end_) < 0)
              {
                operator delete(__str.__first_);
                if (!v28) {
                  goto LABEL_133;
                }
              }
              else if (!v28)
              {
                goto LABEL_133;
              }
              BOOL v29 = (uint64_t *)v120;
              if (v120 != &v121)
              {
                do
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    size_t v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    size_t v30 = __p.__r_.__value_.__l.__size_;
                  }
                  std::string::basic_string[abi:ne180100]((uint64_t)&v110, v30 + 12);
                  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v31 = &v110;
                  }
                  else {
                    uint64_t v31 = (std::string *)v110.__r_.__value_.__r.__words[0];
                  }
                  if (v30)
                  {
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      std::vector<std::string>::pointer p_p = &__p;
                    }
                    else {
                      std::vector<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    memmove(v31, p_p, v30);
                  }
                  strcpy((char *)v31 + v30, "<meta name=\"");
                  int v33 = *((char *)v29 + 55);
                  if (v33 >= 0) {
                    BOOL v34 = (const std::string::value_type *)(v29 + 4);
                  }
                  else {
                    BOOL v34 = (const std::string::value_type *)v29[4];
                  }
                  if (v33 >= 0) {
                    std::string::size_type v35 = *((unsigned __int8 *)v29 + 55);
                  }
                  else {
                    std::string::size_type v35 = v29[5];
                  }
                  int v36 = std::string::append(&v110, v34, v35);
                  long long v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
                  v111.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v111.__r_.__value_.__l.__data_ = v37;
                  v36->__r_.__value_.__l.__size_ = 0;
                  v36->__r_.__value_.__r.__words[2] = 0;
                  v36->__r_.__value_.__r.__words[0] = 0;
                  std::string::size_type v38 = std::string::append(&v111, "\" value=\"");
                  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
                  v112.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v39;
                  v38->__r_.__value_.__l.__size_ = 0;
                  v38->__r_.__value_.__r.__words[2] = 0;
                  v38->__r_.__value_.__r.__words[0] = 0;
                  siri::intelligence::StringEscapeQuotes((uint64_t)(v29 + 7), &v124);
                  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    long long v40 = &v124;
                  }
                  else {
                    long long v40 = (std::string *)v124.__r_.__value_.__r.__words[0];
                  }
                  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v41 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
                  }
                  else {
                    std::string::size_type v41 = v124.__r_.__value_.__l.__size_;
                  }
                  long long v42 = std::string::append(&v112, (const std::string::value_type *)v40, v41);
                  long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
                  v113.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v43;
                  v42->__r_.__value_.__l.__size_ = 0;
                  v42->__r_.__value_.__r.__words[2] = 0;
                  v42->__r_.__value_.__r.__words[0] = 0;
                  long long v44 = std::string::append(&v113, "\"/>");
                  uint64_t v45 = (char *)v44->__r_.__value_.__r.__words[0];
                  v125[0] = v44->__r_.__value_.__l.__size_;
                  *(void *)((char *)v125 + 7) = *(std::string::size_type *)((char *)&v44->__r_.__value_.__r.__words[1]
                                                                            + 7);
                  char v46 = HIBYTE(v44->__r_.__value_.__r.__words[2]);
                  v44->__r_.__value_.__l.__size_ = 0;
                  v44->__r_.__value_.__r.__words[2] = 0;
                  v44->__r_.__value_.__r.__words[0] = 0;
                  std::vector<std::string>::pointer v47 = v119.__end_;
                  if (v119.__end_ >= v119.__end_cap_.__value_)
                  {
                    unint64_t v50 = 0xAAAAAAAAAAAAAAABLL * (((char *)v119.__end_ - (char *)v119.__begin_) >> 3);
                    unint64_t v51 = v50 + 1;
                    if (v50 + 1 > 0xAAAAAAAAAAAAAAALL) {
                      std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
                    }
                    if (0x5555555555555556 * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3) > v51) {
                      unint64_t v51 = 0x5555555555555556 * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3);
                    }
                    if (0xAAAAAAAAAAAAAAABLL * (((char *)v119.__end_cap_.__value_ - (char *)v119.__begin_) >> 3) >= 0x555555555555555) {
                      unint64_t v52 = 0xAAAAAAAAAAAAAAALL;
                    }
                    else {
                      unint64_t v52 = v51;
                    }
                    __str.__end_cap_.__value_ = (std::allocator<std::string> *)&v119.__end_cap_;
                    if (v52) {
                      size_t v53 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v119.__end_cap_, v52);
                    }
                    else {
                      size_t v53 = 0;
                    }
                    long long v54 = v53 + v50;
                    __str.__first_ = v53;
                    __str.__begin_ = v54;
                    __str.__end_cap_.__value_ = &v53[v52];
                    std::string::size_type v55 = v125[0];
                    v54->__r_.__value_.__r.__words[0] = (std::string::size_type)v45;
                    v54->__r_.__value_.__l.__size_ = v55;
                    *(std::string::size_type *)((char *)&v54->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v125 + 7);
                    *((unsigned char *)&v54->__r_.__value_.__s + 23) = v46;
                    v125[0] = 0;
                    *(void *)((char *)v125 + 7) = 0;
                    __str.__end_ = v54 + 1;
                    std::vector<std::string>::__swap_out_circular_buffer(&v119, &__str);
                    unint64_t v49 = v119.__end_;
                    std::__split_buffer<std::string>::~__split_buffer(&__str);
                  }
                  else
                  {
                    std::string::size_type v48 = v125[0];
                    v119.__end_->__r_.__value_.__l.__data_ = v45;
                    v47->__r_.__value_.__l.__size_ = v48;
                    *(std::string::size_type *)((char *)&v47->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v125 + 7);
                    *((unsigned char *)&v47->__r_.__value_.__s + 23) = v46;
                    v125[0] = 0;
                    *(void *)((char *)v125 + 7) = 0;
                    unint64_t v49 = v47 + 1;
                  }
                  v119.__end_ = v49;
                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v113.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v124.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v112.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v111.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v110.__r_.__value_.__l.__data_);
                  }
                  BOOL v56 = (uint64_t *)v29[1];
                  if (v56)
                  {
                    do
                    {
                      unint64_t v57 = (uint64_t **)v56;
                      BOOL v56 = (uint64_t *)*v56;
                    }
                    while (v56);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v57 = (uint64_t **)v29[2];
                      BOOL v58 = *v57 == v29;
                      BOOL v29 = (uint64_t *)v57;
                    }
                    while (!v58);
                  }
                  BOOL v29 = (uint64_t *)v57;
                }
                while (v57 != &v121);
              }
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v120, v121);
              BOOL v121 = 0;
              uint64_t v122 = 0;
              int v120 = &v121;
LABEL_133:
              std::string::basic_string[abi:ne180100]<0>(&__str, "<meta");
              if (siri::intelligence::StringStartsWith(&v114, (unsigned __int8 *)&__str))
              {
                std::string::basic_string[abi:ne180100]<0>(&v113, "/>");
                BOOL v59 = siri::intelligence::StringEndsWith(&v114, (unsigned __int8 *)&v113);
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
              }
              else
              {
                BOOL v59 = 0;
              }
              if (SHIBYTE(__str.__end_) < 0) {
                operator delete(__str.__first_);
              }
              uint64_t v60 = (uint64_t *)v120;
              if (v120 != &v121 && v59)
              {
                while (1)
                {
                  std::string::size_type v62 = (const void **)(v60 + 4);
                  siri::intelligence::StringToLower((uint64_t)(v60 + 4), &v112);
                  uint64_t v63 = std::string::insert(&v112, 0, "name=\"");
                  long long v64 = *(_OWORD *)&v63->__r_.__value_.__l.__data_;
                  v113.__r_.__value_.__r.__words[2] = v63->__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v64;
                  v63->__r_.__value_.__l.__size_ = 0;
                  v63->__r_.__value_.__r.__words[2] = 0;
                  v63->__r_.__value_.__r.__words[0] = 0;
                  long long v65 = std::string::append(&v113, "\"");
                  *(_OWORD *)&__str.__first_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
                  __str.__end_ = (std::__split_buffer<std::string>::pointer)v65->__r_.__value_.__r.__words[2];
                  v65->__r_.__value_.__l.__size_ = 0;
                  v65->__r_.__value_.__r.__words[2] = 0;
                  v65->__r_.__value_.__r.__words[0] = 0;
                  int v66 = siri::intelligence::StringContains(&v114.__r_.__value_.__l.__data_, (char *)&__str);
                  if (SHIBYTE(__str.__end_) < 0) {
                    operator delete(__str.__first_);
                  }
                  if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v113.__r_.__value_.__l.__data_);
                  }
                  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v112.__r_.__value_.__l.__data_);
                  }
                  if (v66) {
                    break;
                  }
                  unint64_t v67 = (uint64_t *)v60[1];
                  if (v67)
                  {
                    do
                    {
                      unint64_t v68 = (uint64_t **)v67;
                      unint64_t v67 = (uint64_t *)*v67;
                    }
                    while (v67);
                  }
                  else
                  {
                    do
                    {
                      unint64_t v68 = (uint64_t **)v60[2];
                      BOOL v58 = *v68 == v60;
                      uint64_t v60 = (uint64_t *)v68;
                    }
                    while (!v58);
                  }
                  uint64_t v60 = (uint64_t *)v68;
                  if (v68 == &v121) {
                    goto LABEL_202;
                  }
                }
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  size_t v69 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                }
                else {
                  size_t v69 = __p.__r_.__value_.__l.__size_;
                }
                std::string::basic_string[abi:ne180100]((uint64_t)&v111, v69 + 12);
                if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  unint64_t v70 = &v111;
                }
                else {
                  unint64_t v70 = (std::string *)v111.__r_.__value_.__r.__words[0];
                }
                if (v69)
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    std::string::size_type v71 = &__p;
                  }
                  else {
                    std::string::size_type v71 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  memmove(v70, v71, v69);
                }
                strcpy((char *)v70 + v69, "<meta name=\"");
                int v72 = *((char *)v60 + 55);
                if (v72 >= 0) {
                  long long v73 = (const std::string::value_type *)(v60 + 4);
                }
                else {
                  long long v73 = (const std::string::value_type *)v60[4];
                }
                if (v72 >= 0) {
                  std::string::size_type v74 = *((unsigned __int8 *)v60 + 55);
                }
                else {
                  std::string::size_type v74 = v60[5];
                }
                long long v75 = std::string::append(&v111, v73, v74);
                long long v76 = *(_OWORD *)&v75->__r_.__value_.__l.__data_;
                v112.__r_.__value_.__r.__words[2] = v75->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v112.__r_.__value_.__l.__data_ = v76;
                v75->__r_.__value_.__l.__size_ = 0;
                v75->__r_.__value_.__r.__words[2] = 0;
                v75->__r_.__value_.__r.__words[0] = 0;
                unint64_t v77 = std::string::append(&v112, "\" value=\"");
                long long v78 = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
                v113.__r_.__value_.__r.__words[2] = v77->__r_.__value_.__r.__words[2];
                *(_OWORD *)&v113.__r_.__value_.__l.__data_ = v78;
                v77->__r_.__value_.__l.__size_ = 0;
                v77->__r_.__value_.__r.__words[2] = 0;
                v77->__r_.__value_.__r.__words[0] = 0;
                siri::intelligence::StringEscapeQuotes((uint64_t)(v60 + 7), &v110);
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  uint64_t v79 = &v110;
                }
                else {
                  uint64_t v79 = (std::string *)v110.__r_.__value_.__r.__words[0];
                }
                if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  std::string::size_type v80 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
                }
                else {
                  std::string::size_type v80 = v110.__r_.__value_.__l.__size_;
                }
                long long v81 = std::string::append(&v113, (const std::string::value_type *)v79, v80);
                long long v82 = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
                __str.__end_ = (std::__split_buffer<std::string>::pointer)v81->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str.__first_ = v82;
                v81->__r_.__value_.__l.__size_ = 0;
                v81->__r_.__value_.__r.__words[2] = 0;
                v81->__r_.__value_.__r.__words[0] = 0;
                uint64_t v83 = std::string::append((std::string *)&__str, "\"/>");
                std::string::size_type v84 = v83->__r_.__value_.__r.__words[0];
                v124.__r_.__value_.__r.__words[0] = v83->__r_.__value_.__l.__size_;
                *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v83->__r_.__value_.__r.__words[1] + 7);
                char v85 = HIBYTE(v83->__r_.__value_.__r.__words[2]);
                v83->__r_.__value_.__l.__size_ = 0;
                v83->__r_.__value_.__r.__words[2] = 0;
                v83->__r_.__value_.__r.__words[0] = 0;
                if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v115.__r_.__value_.__l.__data_);
                }
                v115.__r_.__value_.__r.__words[0] = v84;
                v115.__r_.__value_.__l.__size_ = v124.__r_.__value_.__r.__words[0];
                *(std::string::size_type *)((char *)&v115.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v124.__r_.__value_.__r.__words + 7);
                *((unsigned char *)&v115.__r_.__value_.__s + 23) = v85;
                if (SHIBYTE(__str.__end_) < 0) {
                  operator delete(__str.__first_);
                }
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v110.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v113.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v113.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v112.__r_.__value_.__l.__data_);
                }
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v111.__r_.__value_.__l.__data_);
                }
                std::vector<std::string>::pointer v86 = (uint64_t **)std::__tree<std::string>::find<std::string>((uint64_t)&v120, v62);
                unsigned int v87 = v86;
                if (&v121 != v86)
                {
                  unint64_t v88 = v86[1];
                  if (v88)
                  {
                    do
                    {
                      unint64_t v89 = (uint64_t **)v88;
                      unint64_t v88 = (uint64_t *)*v88;
                    }
                    while (v88);
                  }
                  else
                  {
                    unint64_t v90 = v86;
                    do
                    {
                      unint64_t v89 = (uint64_t **)v90[2];
                      BOOL v58 = *v89 == (uint64_t *)v90;
                      unint64_t v90 = v89;
                    }
                    while (!v58);
                  }
                  if (v120 == v86) {
                    int v120 = v89;
                  }
                  --v122;
                  std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v121, (uint64_t *)v86);
                  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v87 + 4));
                  operator delete(v87);
                }
              }
LABEL_202:
              std::vector<std::string>::pointer v91 = v119.__end_;
              if (v119.__end_ >= v119.__end_cap_.__value_)
              {
                size_t v93 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v119, (long long *)&v115);
              }
              else
              {
                if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
                {
                  std::string::__init_copy_ctor_external(v119.__end_, v115.__r_.__value_.__l.__data_, v115.__r_.__value_.__l.__size_);
                }
                else
                {
                  long long v92 = *(_OWORD *)&v115.__r_.__value_.__l.__data_;
                  v119.__end_->__r_.__value_.__r.__words[2] = v115.__r_.__value_.__r.__words[2];
                  *(_OWORD *)&v91->__r_.__value_.__l.__data_ = v92;
                }
                size_t v93 = v91 + 1;
              }
              v119.__end_ = v93;
              if (SHIBYTE(v114.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v114.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v115.__r_.__value_.__l.__data_);
              }
              v12 += 24;
            }
          }
          if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v102.__r_.__value_.__l.__data_);
          }
          char v11 = HIBYTE(v103.__r_.__value_.__r.__words[2]);
        }
        if (v11 < 0) {
          operator delete(v103.__r_.__value_.__l.__data_);
        }
        protobuf::Intelligence_DialogResponse::~Intelligence_DialogResponse((protobuf::Intelligence_DialogResponse *)v104);
        int v5 = v100 + 1;
        uint64_t v4 = v109;
        if (v100 + 1 >= *(_DWORD *)(v109 + 56)) {
          goto LABEL_229;
        }
      }
    }
    char v98 = 1;
LABEL_229:
    if (v108 < 0) {
      operator delete(v107[0]);
    }
    char v96 = v98;
  }
  else
  {
    char v96 = 0;
  }
  if (*((void *)&v109 + 1)) {
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v109 + 1));
  }
  return v96 & 1;
}

void sub_239AEEB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,std::__shared_weak_count *a57)
{
  if (a57) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a57);
  }
  _Unwind_Resume(a1);
}

uint64_t siri::intelligence::IsValidId(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals_16, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals_16))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_26AD86CC0, "[a-zA-Z0-9_\\.-]*", 0);
  }
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  char v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 0;
  char v15 = 0;
  uint64_t v16 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v8, 0, sizeof(v8));
  uint64_t v5 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v4, &v4[v3], (uint64_t)__p, (uint64_t)&unk_26AD86CC0, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v5;
}

void sub_239AEEFE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

BOOL siri::intelligence::IsValidVariableName(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_26AD86CB8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_26AD86CB8))
  {
    std::basic_regex<char,std::regex_traits<char>>::basic_regex[abi:ne180100]((std::regex_traits<char> *)&unk_26AD86D00, "[a-zA-Z_][a-zA-Z0-9_-]*", 0);
  }
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) == 0) {
    uint64_t v4 = (char *)a1;
  }
  else {
    uint64_t v4 = *(char **)a1;
  }
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a1 + 8);
  }
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  char v14 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v17 = 0;
  char v18 = 0;
  uint64_t v19 = 0;
  *(_OWORD *)std::string __p = 0u;
  memset(v11, 0, 25);
  char v5 = std::regex_match[abi:ne180100]<std::__wrap_iter<char const*>,std::allocator<std::sub_match<std::__wrap_iter<char const*>>>,char,std::regex_traits<char>>(v4, &v4[v3], (uint64_t)__p, (uint64_t)&unk_26AD86D00, 0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((v5 & 1) == 0) {
    return 0;
  }
  siri::intelligence::GetLiteralType((std::string *)a1, __p);
  uint64_t v6 = (void *)strlen(siri::intelligence::TYPE_UNKNOWN);
  if ((v11[7] & 0x80000000) == 0)
  {
    if (v6 == (void *)v11[7]) {
      return memcmp(__p, siri::intelligence::TYPE_UNKNOWN, (size_t)v6) == 0;
    }
    return 0;
  }
  if (v6 == __p[1])
  {
    if (v6 == (void *)-1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v9 = __p[0];
    BOOL v7 = memcmp(__p[0], siri::intelligence::TYPE_UNKNOWN, (size_t)v6) == 0;
  }
  else
  {
    BOOL v7 = 0;
    uint64_t v9 = __p[0];
  }
  operator delete(v9);
  return v7;
}

void sub_239AEF1CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void siri::intelligence::GetLiteralType(std::string *a1@<X0>, void *a2@<X8>)
{
  siri::intelligence::StringTrim(" \t\n\r", a1, &v16);
  std::string::basic_string[abi:ne180100]<0>(&v15, "'");
  if (siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)&v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "'");
    BOOL v4 = siri::intelligence::StringEndsWith(a1, (unsigned __int8 *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v4 = 0;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if (v4)
    {
LABEL_15:
      uint64_t v6 = siri::intelligence::TYPE_STRING;
      goto LABEL_16;
    }
  }
  else if (v4)
  {
    goto LABEL_15;
  }
  std::string::basic_string[abi:ne180100]<0>(&v15, "\"");
  if (siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)&v15))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "\"");
    BOOL v5 = siri::intelligence::StringEndsWith(a1, (unsigned __int8 *)__p);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v5 = 0;
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v15.__r_.__value_.__l.__data_);
    if (v5) {
      goto LABEL_15;
    }
  }
  else if (v5)
  {
    goto LABEL_15;
  }
  siri::intelligence::StringToLower((uint64_t)&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  std::string v16 = v15;
  if ((SHIBYTE(v15.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 4)
    {
      if (HIBYTE(v15.__r_.__value_.__r.__words[2]) != 5) {
        goto LABEL_33;
      }
      BOOL v7 = &v16;
      goto LABEL_29;
    }
    int data = (int)v16.__r_.__value_.__l.__data_;
LABEL_44:
    if (data != 1702195828) {
      goto LABEL_33;
    }
LABEL_45:
    uint64_t v6 = siri::intelligence::TYPE_BOOLEAN;
    goto LABEL_16;
  }
  if (v16.__r_.__value_.__l.__size_ == 4)
  {
    int data = *(_DWORD *)v16.__r_.__value_.__l.__data_;
    goto LABEL_44;
  }
  if (v16.__r_.__value_.__l.__size_ != 5) {
    goto LABEL_33;
  }
  BOOL v7 = (std::string *)v16.__r_.__value_.__r.__words[0];
LABEL_29:
  int v8 = (int)v7->__r_.__value_.__l.__data_;
  int v9 = v7->__r_.__value_.__s.__data_[4];
  if (v8 == 1936482662 && v9 == 101) {
    goto LABEL_45;
  }
LABEL_33:
  if (siri::intelligence::StringIsANumber(&v16))
  {
    uint64_t v6 = siri::intelligence::TYPE_NUMBER;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v15, "[");
    uint64_t v6 = (char **)&siri::intelligence::TYPE_UNKNOWN;
    if (siri::intelligence::StringStartsWith(a1, (unsigned __int8 *)&v15))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "]");
      BOOL v11 = siri::intelligence::StringEndsWith(a1, (unsigned __int8 *)__p);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
      if (v11) {
        uint64_t v6 = siri::intelligence::TYPE_ARRAY;
      }
    }
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
LABEL_16:
  std::string::basic_string[abi:ne180100]<0>(a2, *v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_239AEF494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::IsValidCompoundVariableName(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  if ((v1 & 0x80u) != 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  if (!v1) {
    return 0;
  }
  siri::intelligence::ParseVariableComponents(a1, &v8);
  uint64_t v2 = v8;
  uint64_t v3 = v9;
  if (v8 == v9)
  {
    uint64_t v5 = 1;
  }
  else
  {
    do
    {
      BOOL IsValidVariableName = siri::intelligence::IsValidVariableName(v2);
      uint64_t v5 = IsValidVariableName;
      v2 += 56;
    }
    while (v2 != v3 && IsValidVariableName);
  }
  uint64_t v10 = (void **)&v8;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&v10);
  return v5;
}

void sub_239AEF5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void siri::intelligence::ParseVariableComponents(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  memset(&__str, 0, sizeof(__str));
  uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
  BOOL v4 = *(char *)(a1 + 23) < 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (*(char *)(a1 + 23) >= 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 23);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 8);
  }
  if (v6)
  {
    unint64_t v8 = 0;
    int v9 = 0;
    while (1)
    {
      if (v4)
      {
        int v10 = *(unsigned __int8 *)(*(void *)a1 + v8);
        BOOL v11 = v10 == 46;
        if (v10 == 46 && v9 == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        int v10 = *(unsigned __int8 *)(a1 + v8);
        BOOL v11 = v10 == 46;
        if (v10 == 46 && v9 == 0) {
          goto LABEL_21;
        }
        uint64_t v5 = v3;
      }
      if (v8 == v5 - 1)
      {
        if (!v11) {
          std::string::push_back(&__str, v10);
        }
LABEL_21:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v22, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
        }
        else {
          std::string v22 = __str;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        char v24 = 0;
        std::string::size_type v14 = std::string::find(&__str, 91, 0);
        if (v14 != -1)
        {
          std::string::size_type v15 = v14;
          std::string::basic_string(&v21, &__str, 0, v14, (std::allocator<char> *)&v20);
          if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v22.__r_.__value_.__l.__data_);
          }
          std::string v22 = v21;
          std::string::basic_string(&v20, &__str, v15 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v26);
          siri::intelligence::StringTrim("[] ", &v20, &v21);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v21;
          *((unsigned char *)&v21.__r_.__value_.__s + 23) = 0;
          v21.__r_.__value_.__s.__data_[0] = 0;
          if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v20.__r_.__value_.__l.__data_);
          }
          char v24 = 1;
        }
        unint64_t v16 = a2[1];
        if (v16 >= a2[2])
        {
          uint64_t v17 = std::vector<siri::intelligence::VariableComponent>::__push_back_slow_path<siri::intelligence::VariableComponent const&>(a2, (long long *)&v22);
        }
        else
        {
          std::allocator<siri::intelligence::VariableComponent>::construct[abi:ne180100]<siri::intelligence::VariableComponent,siri::intelligence::VariableComponent const&>(a2 + 16, (std::string *)a2[1], (long long *)&v22);
          uint64_t v17 = v16 + 56;
          a2[1] = v16 + 56;
        }
        a2[1] = v17;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          *__str.__r_.__value_.__l.__data_ = 0;
          __str.__r_.__value_.__l.__size_ = 0;
        }
        else
        {
          __str.__r_.__value_.__s.__data_[0] = 0;
          *((unsigned char *)&__str.__r_.__value_.__s + 23) = 0;
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v22.__r_.__value_.__l.__data_);
        }
        goto LABEL_49;
      }
      if (v10 == 91) {
        int v18 = v9 + 1;
      }
      else {
        int v18 = v9;
      }
      if (v10 == 93) {
        --v9;
      }
      else {
        int v9 = v18;
      }
      std::string::push_back(&__str, v10);
LABEL_49:
      ++v8;
      uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
      BOOL v4 = *(char *)(a1 + 23) < 0;
      uint64_t v5 = *(void *)(a1 + 8);
      if (*(char *)(a1 + 23) >= 0) {
        unint64_t v19 = *(unsigned __int8 *)(a1 + 23);
      }
      else {
        unint64_t v19 = *(void *)(a1 + 8);
      }
      if (v8 >= v19)
      {
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__str.__r_.__value_.__l.__data_);
        }
        return;
      }
    }
  }
}

void sub_239AEF874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)&a18);
  _Unwind_Resume(a1);
}

void sub_239AEF8DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x239AEF8B8);
}

BOOL siri::intelligence::IsValidTypeName(uint64_t a1)
{
  if (siri::intelligence::IsPrimitiveType((unsigned __int8 *)a1)) {
    return 1;
  }
  size_t v3 = strlen(siri::intelligence::TYPE_ARRAY[0]);
  size_t v4 = v3;
  size_t v5 = *(unsigned __int8 *)(a1 + 23);
  if (*(char *)(a1 + 23) < 0)
  {
    if (v3 != *(void *)(a1 + 8))
    {
      BOOL v7 = siri::intelligence::TYPE_DICTIONARY[0];
      size_t v8 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
      size_t v5 = *(void *)(a1 + 8);
      goto LABEL_15;
    }
    if (v3 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    uint64_t v6 = *(const void **)a1;
  }
  else
  {
    uint64_t v6 = (const void *)a1;
    if (v4 != v5)
    {
      BOOL v7 = siri::intelligence::TYPE_DICTIONARY[0];
      size_t v8 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
LABEL_11:
      int v9 = (const void *)a1;
      if (v8 != v5) {
        goto LABEL_19;
      }
LABEL_18:
      if (memcmp(v9, v7, v5)) {
        goto LABEL_19;
      }
      return 1;
    }
  }
  if (!memcmp(v6, siri::intelligence::TYPE_ARRAY[0], v4)) {
    return 1;
  }
  BOOL v7 = siri::intelligence::TYPE_DICTIONARY[0];
  size_t v8 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
  if ((v5 & 0x80) == 0) {
    goto LABEL_11;
  }
  size_t v5 = *(void *)(a1 + 8);
LABEL_15:
  if (v8 == v5)
  {
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    int v9 = *(const void **)a1;
    goto LABEL_18;
  }
LABEL_19:

  return siri::intelligence::DialogTypes::IsDialogType((siri::intelligence *)a1);
}

uint64_t siri::intelligence::IsPrimitiveType(unsigned __int8 *a1)
{
  std::string::basic_string[abi:ne180100]<0>(v8, siri::intelligence::TYPE_STRING[0]);
  if (siri::intelligence::IsEquivalentType(a1, (unsigned __int8 *)v8))
  {
    uint64_t IsEquivalentType = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v6, siri::intelligence::TYPE_NUMBER[0]);
    if (siri::intelligence::IsEquivalentType(a1, (unsigned __int8 *)v6))
    {
      uint64_t IsEquivalentType = 1;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, siri::intelligence::TYPE_BOOLEAN[0]);
      uint64_t IsEquivalentType = siri::intelligence::IsEquivalentType(a1, (unsigned __int8 *)__p);
      if (v5 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  return IsEquivalentType;
}

void sub_239AEFB04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t siri::intelligence::IsEquivalentType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  size_t v4 = siri::intelligence::TYPE_STRING[0];
  size_t v5 = strlen(siri::intelligence::TYPE_STRING[0]);
  size_t v6 = v5;
  size_t v7 = a2[23];
  if ((char)a2[23] < 0)
  {
    size_t v11 = *((void *)a2 + 1);
    if (v5 != v11)
    {
      char v9 = siri::intelligence::TYPE_NUMBER[0];
      size_t v10 = strlen(siri::intelligence::TYPE_NUMBER[0]);
      goto LABEL_18;
    }
    if (v5 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    size_t v8 = *(const void **)a2;
  }
  else
  {
    size_t v8 = a2;
    if (v6 != v7)
    {
      char v9 = siri::intelligence::TYPE_NUMBER[0];
      size_t v10 = strlen(siri::intelligence::TYPE_NUMBER[0]);
      goto LABEL_9;
    }
  }
  if (!memcmp(v8, siri::intelligence::TYPE_STRING[0], v6))
  {
    if ((char)a1[23] < 0)
    {
      uint64_t v26 = *((void *)a1 + 1);
      if (v6 == v26 && !memcmp(*(const void **)a1, v4, v6)) {
        return 1;
      }
      if (v26 != 13) {
        return 0;
      }
      a1 = *(unsigned __int8 **)a1;
    }
    else
    {
      int v15 = a1[23];
      if (v6 == a1[23] && !memcmp(a1, v4, v6)) {
        return 1;
      }
      if (v15 != 13) {
        return 0;
      }
    }
    uint64_t v27 = *(void *)(a1 + 5);
    BOOL v28 = *(void *)a1 == 0x532E676F6C616964;
    uint64_t v29 = 0x676E697274532E67;
    return v28 && v27 == v29;
  }
  char v9 = siri::intelligence::TYPE_NUMBER[0];
  size_t v10 = strlen(siri::intelligence::TYPE_NUMBER[0]);
  if ((v7 & 0x80) == 0)
  {
LABEL_9:
    size_t v11 = v7;
    uint64_t v12 = a2;
    if (v10 != v7)
    {
      uint64_t v13 = siri::intelligence::TYPE_BOOLEAN[0];
      size_t v14 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
LABEL_23:
      size_t v11 = v7;
      unint64_t v16 = a2;
      if (v14 != v7)
      {
        uint64_t v17 = siri::intelligence::TYPE_ARRAY[0];
        size_t v18 = strlen(siri::intelligence::TYPE_ARRAY[0]);
        goto LABEL_37;
      }
      goto LABEL_35;
    }
    goto LABEL_21;
  }
  size_t v11 = *((void *)a2 + 1);
LABEL_18:
  if (v10 != v11)
  {
    uint64_t v13 = siri::intelligence::TYPE_BOOLEAN[0];
    size_t v14 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
    goto LABEL_32;
  }
  if (v11 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  uint64_t v12 = *(const void **)a2;
LABEL_21:
  if (!memcmp(v12, v9, v11))
  {
    if ((char)a1[23] < 0)
    {
      uint64_t v43 = *((void *)a1 + 1);
      if (v11 == v43 && !memcmp(*(const void **)a1, v9, v11)) {
        return 1;
      }
      if (v43 != 13) {
        return 0;
      }
      a1 = *(unsigned __int8 **)a1;
    }
    else
    {
      int v19 = a1[23];
      if (v11 == a1[23] && !memcmp(a1, v9, v11)) {
        return 1;
      }
      if (v19 != 13) {
        return 0;
      }
    }
    uint64_t v27 = *(void *)(a1 + 5);
    BOOL v28 = *(void *)a1 == 0x4E2E676F6C616964;
    uint64_t v29 = 0x7265626D754E2E67;
    return v28 && v27 == v29;
  }
  uint64_t v13 = siri::intelligence::TYPE_BOOLEAN[0];
  size_t v14 = strlen(siri::intelligence::TYPE_BOOLEAN[0]);
  if ((v7 & 0x80) == 0) {
    goto LABEL_23;
  }
  size_t v11 = *((void *)a2 + 1);
LABEL_32:
  if (v14 != v11)
  {
    uint64_t v17 = siri::intelligence::TYPE_ARRAY[0];
    size_t v18 = strlen(siri::intelligence::TYPE_ARRAY[0]);
    goto LABEL_46;
  }
  if (v11 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  unint64_t v16 = *(const void **)a2;
LABEL_35:
  if (!memcmp(v16, v13, v11))
  {
    if ((char)a1[23] < 0)
    {
      uint64_t v44 = *((void *)a1 + 1);
      if (v11 == v44 && !memcmp(*(const void **)a1, v13, v11)) {
        return 1;
      }
      if (v44 != 14) {
        return 0;
      }
      a1 = *(unsigned __int8 **)a1;
    }
    else
    {
      int v23 = a1[23];
      if (v11 == a1[23] && !memcmp(a1, v13, v11)) {
        return 1;
      }
      if (v23 != 14) {
        return 0;
      }
    }
    uint64_t v27 = *(void *)(a1 + 6);
    BOOL v28 = *(void *)a1 == 0x422E676F6C616964;
    uint64_t v29 = 0x6E61656C6F6F422ELL;
    return v28 && v27 == v29;
  }
  uint64_t v17 = siri::intelligence::TYPE_ARRAY[0];
  size_t v18 = strlen(siri::intelligence::TYPE_ARRAY[0]);
  if ((v7 & 0x80) == 0)
  {
LABEL_37:
    size_t v11 = v7;
    std::string v20 = a2;
    if (v18 != v7)
    {
      uint64_t v21 = siri::intelligence::TYPE_DICTIONARY[0];
      size_t v22 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
      goto LABEL_51;
    }
    goto LABEL_49;
  }
  size_t v11 = *((void *)a2 + 1);
LABEL_46:
  if (v18 != v11)
  {
    uint64_t v21 = siri::intelligence::TYPE_DICTIONARY[0];
    size_t v22 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
    goto LABEL_63;
  }
  if (v11 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  std::string v20 = *(const void **)a2;
LABEL_49:
  if (memcmp(v20, v17, v11))
  {
    uint64_t v21 = siri::intelligence::TYPE_DICTIONARY[0];
    size_t v22 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
    if ((v7 & 0x80) == 0)
    {
LABEL_51:
      size_t v11 = v7;
      char v24 = a2;
      if (v22 != v7) {
        goto LABEL_67;
      }
      goto LABEL_66;
    }
    size_t v11 = *((void *)a2 + 1);
LABEL_63:
    if (v22 != v11) {
      goto LABEL_67;
    }
    if (v11 == -1) {
      std::string::__throw_out_of_range[abi:ne180100]();
    }
    char v24 = *(const void **)a2;
LABEL_66:
    if (!memcmp(v24, v21, v11))
    {
      BOOL v41 = siri::intelligence::DialogTypes::IsDialogType((siri::intelligence *)a1)
         && !siri::intelligence::DialogTypes::IsPrimitiveDialogType((uint64_t *)a1);
      size_t v45 = strlen(siri::intelligence::TYPE_DICTIONARY[0]);
      if ((char)a1[23] < 0)
      {
        if (v45 != *((void *)a1 + 1)) {
          return v41;
        }
        if (v45 == -1) {
          std::string::__throw_out_of_range[abi:ne180100]();
        }
        a1 = *(unsigned __int8 **)a1;
      }
      else if (v45 != a1[23])
      {
        return v41;
      }
      return !memcmp(a1, siri::intelligence::TYPE_DICTIONARY[0], v45) || v41;
    }
LABEL_67:
    uint64_t v30 = a1[23];
    if ((v30 & 0x80u) == 0) {
      uint64_t v31 = a1[23];
    }
    else {
      uint64_t v31 = *((void *)a1 + 1);
    }
    if ((v7 & 0x80u) == 0) {
      size_t v32 = v7;
    }
    else {
      size_t v32 = *((void *)a2 + 1);
    }
    if (v31 == v32)
    {
      if ((v7 & 0x80u) == 0) {
        int v33 = a2;
      }
      else {
        int v33 = *(unsigned __int8 **)a2;
      }
      if ((v30 & 0x80) == 0)
      {
        if (a1[23])
        {
          uint64_t v34 = v30 - 1;
          do
          {
            int v36 = *a1++;
            int v35 = v36;
            int v38 = *v33++;
            int v37 = v38;
            BOOL v40 = v34-- != 0;
            BOOL v41 = v35 == v37;
          }
          while (v35 == v37 && v40);
          return v41;
        }
        return 1;
      }
      return memcmp(*(const void **)a1, v33, *((void *)a1 + 1)) == 0;
    }
    return 0;
  }
  if (((char)a1[23] & 0x80000000) == 0)
  {
    BOOL v25 = a1;
    if (v11 != a1[23]) {
      goto LABEL_113;
    }
LABEL_112:
    if (memcmp(v25, v17, v11)) {
      goto LABEL_113;
    }
    return 1;
  }
  if (v11 == *((void *)a1 + 1))
  {
    BOOL v25 = *(const void **)a1;
    goto LABEL_112;
  }
LABEL_113:

  return siri::intelligence::StringEndsWith((std::string *)a1, (unsigned __int8 *)siri::intelligence::ARRAY_SUFFIX);
}

void siri::intelligence::GetVariableNames(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  siri::intelligence::ParseVariableComponents(a1, (uint64_t *)v14);
  if (v14[0] == v14[1]) {
    goto LABEL_21;
  }
  siri::intelligence::GetLiteralType((std::string *)v14[0], &__s1);
  size_t v3 = strlen(siri::intelligence::TYPE_UNKNOWN);
  if (((char)v13 & 0x80000000) == 0)
  {
    if (v3 != v13 || memcmp(&__s1, siri::intelligence::TYPE_UNKNOWN, v3)) {
      goto LABEL_21;
    }
    goto LABEL_9;
  }
  if ((void **)v3 != v12)
  {
    operator delete(__s1);
    goto LABEL_21;
  }
  if (v3 == -1) {
    std::string::__throw_out_of_range[abi:ne180100]();
  }
  size_t v4 = __s1;
  int v5 = memcmp(__s1, siri::intelligence::TYPE_UNKNOWN, v3);
  operator delete(v4);
  if (!v5)
  {
LABEL_9:
    unint64_t v6 = a2[1];
    if (v6 >= a2[2])
    {
      uint64_t v7 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v14[0]);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v14[0]);
      uint64_t v7 = v6 + 24;
    }
    a2[1] = v7;
    if (*((unsigned char *)v14[0] + 48))
    {
      siri::intelligence::GetVariableNames(&__s1, (char *)v14[0] + 24);
      size_t v8 = (long long *)__s1;
      char v9 = (long long *)v12;
      if (__s1 != v12)
      {
        unint64_t v10 = a2[1];
        do
        {
          if (v10 >= a2[2])
          {
            unint64_t v10 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a2, v8);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a2, v8);
            v10 += 24;
          }
          a2[1] = v10;
          size_t v8 = (long long *)((char *)v8 + 24);
        }
        while (v8 != v9);
      }
      p_s1 = &__s1;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&p_s1);
    }
  }
LABEL_21:
  std::string __s1 = (void **)v14;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100](&__s1);
}

void sub_239AF02E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  *(void *)(v5 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = va;
  std::vector<siri::intelligence::BehaviorArgument>::__destroy_vector::operator()[abi:ne180100]((void ***)(v5 - 40));
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanVerbatimTag@<X0>(YAML *this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  YAML::Stream::get(this);
  BOOL v5 = YAML::Stream::operator BOOL(this);
  if (!v5)
  {
LABEL_14:
    exceptioint n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    uint64_t v13 = *((void *)this + 1);
    int v14 = v11;
    std::string::basic_string[abi:ne180100]<0>(&__p, "end of verbatim tag not found");
    YAML::Exception::Exception((uint64_t)exception, &v13, (uint64_t)&__p);
    *exceptioint n = &unk_26ED2A588;
  }
  while (!*((void *)this + 8)
       || *(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                   + (*((void *)this + 7) & 0xFFFLL)) != 62)
  {
    unint64_t v6 = YAML::Exp::URI((YAML::Exp *)v5);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    int v7 = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v6, (unint64_t *)&__p);
    if (v7 >= 1)
    {
      YAML::Stream::get(this, v7, &__p);
      size_t v8 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? &__p
         : (std::string *)__p.__r_.__value_.__r.__words[0];
      std::string::size_type v9 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
         ? HIBYTE(__p.__r_.__value_.__r.__words[2])
         : __p.__r_.__value_.__l.__size_;
      std::string::append(a2, (const std::string::value_type *)v8, v9);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      BOOL v5 = YAML::Stream::operator BOOL(this);
      if (v5) {
        continue;
      }
    }
    goto LABEL_14;
  }
  return YAML::Stream::get(this);
}

void sub_239AF04A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (*(char *)(v17 + 23) < 0) {
    operator delete(*(void **)v17);
  }
  _Unwind_Resume(exception_object);
}

void *YAML::Exp::URI(YAML::Exp *this)
{
  {
    if (v2)
    {
      size_t v3 = (int *)YAML::Exp::Word(v2);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$,_.!~*'()[]");
      YAML::RegEx::RegEx((uint64_t)&v17, (char *)__p, 3);
      size_t v4 = (YAML::Exp *)YAML::operator|(v3, &v17, (uint64_t)&v19);
      int v8 = 1;
      __int16 v9 = 37;
      memset(v10, 0, sizeof(v10));
      BOOL v5 = (int *)YAML::Exp::Hex(v4);
      unint64_t v6 = (YAML::Exp *)YAML::operator+(&v8, v5, (uint64_t)&v11);
      int v7 = (int *)YAML::Exp::Hex(v6);
      YAML::operator+(&v11, v7, (uint64_t)&v13);
      YAML::operator|(&v19, (int *)&v13, (uint64_t)&YAML::Exp::URI(void)::e);
      uint64_t v21 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v21 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v21 = (void **)v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v13 = (void **)&v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      uint64_t v13 = (void **)&v18;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::URI(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::URI(void)::e;
}

void sub_239AF0698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagHandle@<X0>(YAML *this@<X0>, YAML::Stream *a2@<X1>, std::string *a3@<X8>)
{
  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  *(unsigned char *)a2 = 1;
  uint64_t v16 = 0;
  int v17 = 0;
  uint64_t result = YAML::Stream::operator BOOL(this);
  if (!result) {
    return result;
  }
  while (!*((void *)this + 8))
  {
    if (!*(unsigned char *)a2) {
      goto LABEL_11;
    }
LABEL_7:
    int v8 = YAML::Exp::Word((YAML::Exp *)result);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v8, (unint64_t *)&__p);
    int v9 = result;
    if ((int)result <= 0)
    {
      *(unsigned char *)a2 = 0;
      int v10 = *((_DWORD *)this + 4);
      uint64_t v16 = *((void *)this + 1);
      int v17 = v10;
LABEL_11:
      int v11 = YAML::Exp::Tag((YAML::Exp *)result);
      __p.__r_.__value_.__r.__words[0] = 0;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
      uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v11, (unint64_t *)&__p);
      int v9 = result;
      if ((int)result < 1) {
        return result;
      }
      goto LABEL_12;
    }
    if (!*(unsigned char *)a2) {
      goto LABEL_11;
    }
LABEL_12:
    YAML::Stream::get(this, v9, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<std::string>::pointer p_p = &__p;
    }
    else {
      std::vector<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append(a3, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t result = YAML::Stream::operator BOOL(this);
    if ((result & 1) == 0) {
      return result;
    }
  }
  if (*(unsigned char *)(*(void *)(*((void *)this + 4) + ((*((void *)this + 7) >> 9) & 0x7FFFFFFFFFFFF8))
                + (*((void *)this + 7) & 0xFFFLL)) != 33)
  {
    if (!*(unsigned char *)a2) {
      goto LABEL_11;
    }
    goto LABEL_7;
  }
  if (!*(unsigned char *)a2)
  {
    exceptioint n = __cxa_allocate_exception(0x38uLL);
    std::string::basic_string[abi:ne180100]<0>(&__p, "illegal character found while scanning tag handle");
    YAML::Exception::Exception((uint64_t)exception, &v16, (uint64_t)&__p);
    *exceptioint n = &unk_26ED2A588;
  }
  return result;
}

void sub_239AF08FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v15 + 23) < 0) {
        operator delete(*(void **)v15);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void *YAML::Exp::Word(YAML::Exp *this)
{
  {
    if (v2)
    {
      size_t v3 = (int *)YAML::Exp::AlphaNumeric(v2);
      int v4 = 1;
      __int16 v5 = 45;
      memset(v6, 0, sizeof(v6));
      YAML::operator|(v3, &v4, (uint64_t)&YAML::Exp::Word(void)::e);
      int v7 = (void **)v6;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Word(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::Word(void)::e;
}

void sub_239AF0A28(_Unwind_Exception *a1)
{
  *(void *)(v2 - 24) = v1;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v2 - 24));
  _Unwind_Resume(a1);
}

void *YAML::Exp::Tag(YAML::Exp *this)
{
  {
    if (v2)
    {
      size_t v3 = (int *)YAML::Exp::Word(v2);
      std::string::basic_string[abi:ne180100]<0>(__p, "#;/?:@&=+$_.~*'()");
      YAML::RegEx::RegEx((uint64_t)&v17, (char *)__p, 3);
      int v4 = (YAML::Exp *)YAML::operator|(v3, &v17, (uint64_t)&v19);
      int v8 = 1;
      __int16 v9 = 37;
      memset(v10, 0, sizeof(v10));
      __int16 v5 = (int *)YAML::Exp::Hex(v4);
      unint64_t v6 = (YAML::Exp *)YAML::operator+(&v8, v5, (uint64_t)&v11);
      int v7 = (int *)YAML::Exp::Hex(v6);
      YAML::operator+(&v11, v7, (uint64_t)&v13);
      YAML::operator|(&v19, (int *)&v13, (uint64_t)&YAML::Exp::Tag(void)::e);
      uint64_t v21 = (void **)&v14;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v21 = (void **)&v12;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v21 = (void **)v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v21);
      uint64_t v13 = (void **)&v20;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      uint64_t v13 = (void **)&v18;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v13);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Tag(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::Tag(void)::e;
}

void sub_239AF0BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v27 + 8;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = &a14;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  *(void *)(v28 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v26;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v28 - 40));
  a17 = v28 - 64;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  a17 = v28 - 96;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)&a17);
  if (a26 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t YAML::ScanTagSuffix@<X0>(YAML *this@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = YAML::Stream::operator BOOL(this);
  if (!result) {
    goto LABEL_15;
  }
  do
  {
    unint64_t v6 = YAML::Exp::Tag((YAML::Exp *)result);
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)this;
    uint64_t result = YAML::RegEx::Match<YAML::StreamCharSource>((uint64_t)v6, (unint64_t *)&__p);
    if ((int)result < 1) {
      break;
    }
    YAML::Stream::get(this, result, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::vector<std::string>::pointer p_p = &__p;
    }
    else {
      std::vector<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    std::string::append((std::string *)a2, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t result = YAML::Stream::operator BOOL(this);
  }
  while ((result & 1) != 0);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
  if (*(char *)(a2 + 23) < 0) {
    uint64_t v9 = *(void *)(a2 + 8);
  }
  if (!v9)
  {
LABEL_15:
    exceptioint n = __cxa_allocate_exception(0x38uLL);
    int v11 = *((_DWORD *)this + 4);
    uint64_t v12 = *((void *)this + 1);
    int v13 = v11;
    std::string::basic_string[abi:ne180100]<0>(&__p, "tag handle with no suffix");
    YAML::Exception::Exception((uint64_t)exception, &v12, (uint64_t)&__p);
    *exceptioint n = &unk_26ED2A588;
  }
  return result;
}

void sub_239AF0DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
  {
    operator delete(__p);
    if ((v19 & 1) == 0)
    {
LABEL_6:
      if (*(char *)(v17 + 23) < 0) {
        operator delete(*(void **)v17);
      }
      _Unwind_Resume(a1);
    }
  }
  else if (!v19)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v18);
  goto LABEL_6;
}

void *YAML::Exp::Hex(YAML::Exp *this)
{
  {
    if (v2)
    {
      size_t v3 = YAML::Exp::Digit(v2);
      int v6 = 2;
      __int16 v7 = 17985;
      memset(v8, 0, sizeof(v8));
      YAML::operator|(v3, &v6, (uint64_t)&v9);
      LODWORD(v4) = 2;
      WORD2(v4) = 26209;
      memset(v5, 0, sizeof(v5));
      YAML::operator|(&v9, (int *)&v4, (uint64_t)&YAML::Exp::Hex(void)::e);
      int v11 = (void **)v5;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v11);
      int v4 = (void **)&v10;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      int v4 = (void **)v8;
      std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v4);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Hex(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::Hex(void)::e;
}

void sub_239AF0F54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v12 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v11;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v12 - 40));
  a10 = (void **)(v10 + 8);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *YAML::Exp::AlphaNumeric(YAML::Exp *this)
{
  {
    if (v2)
    {
      size_t v3 = (YAML::Exp *)YAML::Exp::Alpha(v2);
      int v4 = YAML::Exp::Digit(v3);
      YAML::operator|((int *)v3, v4, (uint64_t)&YAML::Exp::AlphaNumeric(void)::e);
      __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::AlphaNumeric(void)::e, &dword_239A02000);
    }
  }
  return &YAML::Exp::AlphaNumeric(void)::e;
}

void sub_239AF103C(_Unwind_Exception *a1)
{
}

void *YAML::Exp::Alpha(YAML::Exp *this)
{
  {
    int v4 = 2;
    __int16 v5 = 31329;
    memset(v6, 0, sizeof(v6));
    LODWORD(v2) = 2;
    WORD2(v2) = 23105;
    memset(v3, 0, sizeof(v3));
    YAML::operator|(&v4, (int *)&v2, (uint64_t)&YAML::Exp::Alpha(void)::e);
    __int16 v7 = (void **)v3;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v7);
    uint64_t v2 = (void **)v6;
    std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100](&v2);
    __cxa_atexit((void (*)(void *))YAML::RegEx::~RegEx, &YAML::Exp::Alpha(void)::e, &dword_239A02000);
  }
  return &YAML::Exp::Alpha(void)::e;
}

void sub_239AF1144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  *(void *)(v3 - 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = v2;
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)(v3 - 40));
  std::vector<YAML::RegEx>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

double YAML::ostream_wrapper::ostream_wrapper(std::vector<char> *this)
{
  std::vector<char>::value_type __x = 0;
  uint64_t v1 = std::vector<char>::vector(this, 1uLL, &__x);
  LOBYTE(v1[2].__end_) = 0;
  double result = 0.0;
  *(_OWORD *)&v1[1].__end_cap_.__value_ = 0u;
  *(_OWORD *)&v1[1].__begin_ = 0u;
  return result;
}

{
  std::vector<char> *v1;
  double result;
  std::vector<char>::value_type __x;

  std::vector<char>::value_type __x = 0;
  uint64_t v1 = std::vector<char>::vector(this, 1uLL, &__x);
  LOBYTE(v1[2].__end_) = 0;
  double result = 0.0;
  *(_OWORD *)&v1[1].__end_cap_.__value_ = 0u;
  *(_OWORD *)&v1[1].__begin_ = 0u;
  return result;
}

uint64_t YAML::ostream_wrapper::ostream_wrapper(uint64_t result, uint64_t a2)
{
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  return result;
}

{
  *(void *)double result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = a2;
  *(void *)(result + 4std::unique_ptr<YAML::CollectionStack>::reset[abi:ne180100]((void **)this + 2, 0) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 32) = 0;
  *(unsigned char *)(result + 56) = 0;
  return result;
}

void YAML::ostream_wrapper::~ostream_wrapper(YAML::ostream_wrapper *this)
{
  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

{
  void *v2;

  uint64_t v2 = *(void **)this;
  if (v2)
  {
    *((void *)this + 1) = v2;
    operator delete(v2);
  }
}

void YAML::ostream_wrapper::write(std::vector<char> *this, const void **a2)
{
  if (this[1].__begin_)
  {
    std::ostream::write();
  }
  else
  {
    unint64_t v4 = this->__end_ - this->__begin_;
    size_t v5 = *((unsigned __int8 *)a2 + 23);
    char v6 = v5;
    size_t v7 = (size_t)a2[1];
    if ((v5 & 0x80u) == 0) {
      unint64_t v8 = *((unsigned __int8 *)a2 + 23);
    }
    else {
      unint64_t v8 = (unint64_t)a2[1];
    }
    int v9 = &this[1].__end_[v8 + 1];
    if ((unint64_t)v9 > v4)
    {
      std::vector<char>::__append(this, (std::vector<char>::size_type)&v9[-v4]);
      size_t v5 = *((unsigned __int8 *)a2 + 23);
      size_t v7 = (size_t)a2[1];
      char v6 = *((unsigned char *)a2 + 23);
    }
    if (v6 >= 0) {
      size_t v10 = v5;
    }
    else {
      size_t v10 = v7;
    }
    if (v10)
    {
      if (v6 >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = *a2;
      }
      memmove(&this->__begin_[(unint64_t)this[1].__end_], v11, v10);
    }
  }
  BOOL v12 = *((char *)a2 + 23) < 0;
  int v13 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v13 < 0) {
    int v13 = a2[1];
  }
  if (v13)
  {
    unint64_t v14 = 0;
    begiint n = this[2].__begin_;
    std::vector<char>::pointer v16 = this[1].__end_ + 1;
    do
    {
      if (v12) {
        uint64_t v17 = (unsigned __int8 *)*a2;
      }
      else {
        uint64_t v17 = (unsigned __int8 *)a2;
      }
      int v18 = v17[v14];
      this[1].__end_ = &v16[v14];
      this[2].__begin_ = ++begin;
      if (v18 == 10)
      {
        begiint n = 0;
        ++this[1].__end_cap_.__value_;
        this[2].__begin_ = 0;
        LOBYTE(this[2].__end_) = 0;
      }
      ++v14;
      BOOL v12 = *((char *)a2 + 23) < 0;
      int v19 = (const void *)*((unsigned __int8 *)a2 + 23);
      if ((char)v19 < 0) {
        int v19 = a2[1];
      }
    }
    while (v14 < (unint64_t)v19);
  }
}

uint64_t YAML::ostream_wrapper::update_pos(uint64_t this, int a2)
{
  if (a2 == 10)
  {
    ++*(void *)(this + 40);
    *(void *)(this + ++*(void *)(this + 48) = 0;
    *(unsigned char *)(this + 56) = 0;
  }
  return this;
}

void YAML::ostream_wrapper::write(std::vector<char> *this, const char *__src, size_t __len)
{
  size_t v3 = __len;
  if (this[1].__begin_)
  {
    std::ostream::write();
    if (!v3) {
      return;
    }
    goto LABEL_8;
  }
  unint64_t v6 = this->__end_ - this->__begin_;
  size_t v7 = &this[1].__end_[__len + 1];
  if ((unint64_t)v7 > v6) {
    std::vector<char>::__append(this, (std::vector<char>::size_type)&v7[-v6]);
  }
  if (v3)
  {
    memmove(&this->__begin_[(unint64_t)this[1].__end_], __src, v3);
LABEL_8:
    begiint n = this[2].__begin_;
    int v9 = this[1].__end_ + 1;
    do
    {
      int v10 = *(unsigned __int8 *)__src++;
      this[1].__end_ = v9;
      this[2].__begin_ = ++begin;
      if (v10 == 10)
      {
        begiint n = 0;
        ++this[1].__end_cap_.__value_;
        this[2].__begin_ = 0;
        LOBYTE(this[2].__end_) = 0;
      }
      ++v9;
      --v3;
    }
    while (v3);
  }
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<char>::size_type v5 = __n;
    std::vector<char>::__vallocate[abi:ne180100](this, __n);
    std::vector<char>::pointer end = this->__end_;
    size_t v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_239AF1534(_Unwind_Exception *exception_object)
{
  size_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<char>::__vallocate[abi:ne180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      bzero(this->__end_, __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begiint n = this->__begin_;
    int64_t v7 = end - this->__begin_;
    unint64_t v8 = v7 + __n;
    if ((uint64_t)(v7 + __n) < 0) {
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = value - begin;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = (char *)operator new(v10);
    }
    else {
      uint64_t v11 = 0;
    }
    BOOL v12 = &v11[v7];
    int v13 = &v11[v10];
    bzero(v12, __n);
    if (end == begin)
    {
      uint64_t v11 = v12;
    }
    else
    {
      unint64_t v14 = &end[~(unint64_t)begin];
      do
      {
        char v15 = *--end;
        (v14--)[(void)v11] = v15;
      }
      while (end != begin);
      std::vector<char>::pointer end = this->__begin_;
    }
    this->__begin_ = v11;
    this->__end_ = &v12[__n];
    this->__end_cap_.__value_ = v13;
    if (end)
    {
      operator delete(end);
    }
  }
}

std::string *siri::intelligence::TestResult::TestResult(std::string *this, const siri::intelligence::TestCase *a2)
{
  double result = siri::intelligence::TestCase::TestCase(this, a2);
  LODWORD(result[6].__r_.__value_.__r.__words[1]) = 0;
  result[7].__r_.__value_.__r.__words[0] = 0;
  result[7].__r_.__value_.__l.__size_ = 0;
  result[6].__r_.__value_.__r.__words[2] = 0;
  return result;
}

{
  std::string *result;

  double result = siri::intelligence::TestCase::TestCase(this, a2);
  LODWORD(result[6].__r_.__value_.__r.__words[1]) = 0;
  result[7].__r_.__value_.__r.__words[0] = 0;
  result[7].__r_.__value_.__l.__size_ = 0;
  result[6].__r_.__value_.__r.__words[2] = 0;
  return result;
}

std::string *siri::intelligence::TestResult::GetTestCase@<X0>(siri::intelligence::TestResult *this@<X0>, std::string *a2@<X8>)
{
  return siri::intelligence::TestCase::TestCase(a2, this);
}

uint64_t siri::intelligence::TestResult::SetStatus(uint64_t result, int a2)
{
  *(_DWORD *)(result + 152) = a2;
  return result;
}

uint64_t siri::intelligence::TestResult::GetStatus(siri::intelligence::TestResult *this)
{
  return *((unsigned int *)this + 38);
}

void *siri::intelligence::TestResult::GetStatusAsString@<X0>(siri::intelligence::TestResult *this@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *((int *)this + 38);
  if (v4 > 3) {
    std::vector<char>::size_type v5 = "???";
  }
  else {
    std::vector<char>::size_type v5 = off_264DB75C0[v4];
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t siri::intelligence::TestResult::AddNote(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a2 + 23);
  if ((v2 & 0x80u) != 0) {
    uint64_t v2 = *(void *)(a2 + 8);
  }
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = (uint64_t *)(result + 160);
    unint64_t v5 = *(void *)(v3 + 168);
    if (v5 >= *(void *)(v3 + 176))
    {
      double result = std::vector<std::string>::__push_back_slow_path<std::string const&>(v4, (long long *)a2);
    }
    else
    {
      std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v4, (long long *)a2);
      double result = v5 + 24;
    }
    *(void *)(v3 + 168) = result;
  }
  return result;
}

std::string *siri::intelligence::TestResult::GetNotes@<X0>(long long **this@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(a2, this[20], this[21], 0xAAAAAAAAAAAAAAABLL * (((char *)this[21] - (char *)this[20]) >> 3));
}

void siri::intelligence::TestResult::GetDescriptions(long long **this@<X0>, uint64_t a2@<X8>)
{
  v80[2] = *MEMORY[0x263EF8340];
  siri::intelligence::TestCase::TestCase(&v68, (const siri::intelligence::TestCase *)this);
  siri::intelligence::TestResult::GetStatusAsString((siri::intelligence::TestResult *)this, &v66);
  if (__val == 1)
  {
    std::string::basic_string[abi:ne180100]<0>(v64, "");
  }
  else
  {
    std::to_string(&v63, __val);
    uint64_t v4 = std::string::insert(&v63, 0, " (");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v78.__end_ = (std::__split_buffer<std::string>::pointer)v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__first_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    unint64_t v6 = std::string::append((std::string *)&v78, "x)");
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    int64_t v65 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)long long v64 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v78.__end_) < 0) {
      operator delete(v78.__first_);
    }
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  memset(&v78, 0, 24);
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)&v78, this[20], this[21], 0xAAAAAAAAAAAAAAABLL * (((char *)this[21] - (char *)this[20]) >> 3));
  long long v8 = *(_OWORD *)&v78.__first_;
  v63.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v63);
  if ((void)v8 == *((void *)&v8 + 1))
  {
    std::operator+<char>();
    int v38 = std::string::append(&v61, ": ");
    long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    siri::intelligence::TestCase::ToString((siri::intelligence::TestCase *)&v68, &v60);
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v40 = &v60;
    }
    else {
      BOOL v40 = (std::string *)v60.__r_.__value_.__r.__words[0];
    }
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(v60.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = v60.__r_.__value_.__l.__size_;
    }
    long long v42 = std::string::append(&v62, (const std::string::value_type *)v40, size);
    long long v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v63.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v65 >= 0) {
      uint64_t v44 = v64;
    }
    else {
      uint64_t v44 = (void **)v64[0];
    }
    if (v65 >= 0) {
      std::string::size_type v45 = HIBYTE(v65);
    }
    else {
      std::string::size_type v45 = (std::string::size_type)v64[1];
    }
    char v46 = std::string::append(&v63, (const std::string::value_type *)v44, v45);
    std::string::size_type v47 = v46->__r_.__value_.__r.__words[0];
    v79.__r_.__value_.__r.__words[0] = v46->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v46->__r_.__value_.__r.__words[1] + 7);
    char v48 = HIBYTE(v46->__r_.__value_.__r.__words[2]);
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    unint64_t v49 = *(void *)(a2 + 16);
    unint64_t v50 = *(void *)(a2 + 8);
    if (v50 >= v49)
    {
      unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - *(void *)a2) >> 3);
      unint64_t v53 = v52 + 1;
      if (v52 + 1 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v49 - *(void *)a2) >> 3);
      if (2 * v54 > v53) {
        unint64_t v53 = 2 * v54;
      }
      if (v54 >= 0x555555555555555) {
        unint64_t v55 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v55 = v53;
      }
      v78.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
      if (v55) {
        BOOL v56 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v55);
      }
      else {
        BOOL v56 = 0;
      }
      unint64_t v57 = v56 + v52;
      v78.__first_ = v56;
      v78.__begin_ = v57;
      v78.__end_cap_.__value_ = &v56[v55];
      v57->__r_.__value_.__r.__words[0] = v47;
      v57->__r_.__value_.__l.__size_ = v79.__r_.__value_.__r.__words[0];
      *(std::string::size_type *)((char *)&v57->__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 7);
      *((unsigned char *)&v57->__r_.__value_.__s + 23) = v48;
      v78.__end_ = v57 + 1;
      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v78);
      unint64_t v51 = *(void *)(a2 + 8);
      std::__split_buffer<std::string>::~__split_buffer(&v78);
    }
    else
    {
      *(void *)unint64_t v50 = v47;
      *(void *)(v50 + 8) = v79.__r_.__value_.__r.__words[0];
      *(void *)(v50 + 15) = *(std::string::size_type *)((char *)v79.__r_.__value_.__r.__words + 7);
      *(unsigned char *)(v50 + 23) = v48;
      unint64_t v51 = v50 + 24;
      *(void *)(a2 + 8) = v50 + 24;
    }
    *(void *)(a2 + 8) = v51;
    if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v63.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v60.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v62.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v61.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    memset(&v63, 0, sizeof(v63));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v63, this[20], this[21], 0xAAAAAAAAAAAAAAABLL * (((char *)this[21] - (char *)this[20]) >> 3));
    std::string::size_type v10 = v63.__r_.__value_.__l.__size_;
    std::string::size_type v9 = v63.__r_.__value_.__r.__words[0];
    if (v63.__r_.__value_.__r.__words[0] != v63.__r_.__value_.__l.__size_)
    {
      uint64_t v11 = "Flow Test ";
      do
      {
        if (*(char *)(v9 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&v62, *(const std::string::value_type **)v9, *(void *)(v9 + 8));
        }
        else
        {
          long long v12 = *(_OWORD *)v9;
          v62.__r_.__value_.__r.__words[2] = *(void *)(v9 + 16);
          *(_OWORD *)&v62.__r_.__value_.__l.__data_ = v12;
        }
        std::operator+<char>();
        int v13 = std::string::append(&v59, ": ");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v79.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        siri::intelligence::TestCase::ToString((siri::intelligence::TestCase *)&v68, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::vector<std::string>::pointer p_p = &__p;
        }
        else {
          std::vector<std::string>::pointer p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v16 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v16 = __p.__r_.__value_.__l.__size_;
        }
        uint64_t v17 = std::string::append(&v79, (const std::string::value_type *)p_p, v16);
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v60.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v60.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        int v19 = std::string::append(&v60, ": ");
        long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
        v61.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v61.__r_.__value_.__l.__data_ = v20;
        v19->__r_.__value_.__l.__size_ = 0;
        v19->__r_.__value_.__r.__words[2] = 0;
        v19->__r_.__value_.__r.__words[0] = 0;
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v21 = &v62;
        }
        else {
          uint64_t v21 = (std::string *)v62.__r_.__value_.__r.__words[0];
        }
        if ((v62.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v22 = HIBYTE(v62.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v22 = v62.__r_.__value_.__l.__size_;
        }
        int v23 = std::string::append(&v61, (const std::string::value_type *)v21, v22);
        std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
        v80[0] = v23->__r_.__value_.__l.__size_;
        *(void *)((char *)v80 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
        char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        unint64_t v26 = *(void *)(a2 + 8);
        unint64_t v27 = *(void *)(a2 + 16);
        if (v26 >= v27)
        {
          uint64_t v30 = v11;
          unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v26 - *(void *)a2) >> 3);
          unint64_t v32 = v31 + 1;
          if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
            std::vector<std::pair<void (*)(void const*),void const*>>::__throw_length_error[abi:ne180100]();
          }
          unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - *(void *)a2) >> 3);
          if (2 * v33 > v32) {
            unint64_t v32 = 2 * v33;
          }
          if (v33 >= 0x555555555555555) {
            unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v34 = v32;
          }
          v78.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
          if (v34) {
            int v35 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v34);
          }
          else {
            int v35 = 0;
          }
          int v36 = v35 + v31;
          v78.__first_ = v35;
          v78.__begin_ = v36;
          v78.__end_cap_.__value_ = &v35[v34];
          std::string::size_type v37 = v80[0];
          v36->__r_.__value_.__r.__words[0] = v24;
          v36->__r_.__value_.__l.__size_ = v37;
          *(std::string::size_type *)((char *)&v36->__r_.__value_.__r.__words[1] + 7) = *(void *)((char *)v80 + 7);
          *((unsigned char *)&v36->__r_.__value_.__s + 23) = v25;
          v80[0] = 0;
          *(void *)((char *)v80 + 7) = 0;
          v78.__end_ = v36 + 1;
          std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &v78);
          unint64_t v29 = *(void *)(a2 + 8);
          std::__split_buffer<std::string>::~__split_buffer(&v78);
          uint64_t v11 = v30;
        }
        else
        {
          uint64_t v28 = v80[0];
          *(void *)unint64_t v26 = v24;
          *(void *)(v26 + 8) = v28;
          *(void *)(v26 + 15) = *(void *)((char *)v80 + 7);
          *(unsigned char *)(v26 + 23) = v25;
          v80[0] = 0;
          *(void *)((char *)v80 + 7) = 0;
          unint64_t v29 = v26 + 24;
          *(void *)(a2 + 8) = v26 + 24;
        }
        *(void *)(a2 + 8) = v29;
        if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v61.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v60.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v79.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v59.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        v9 += 24;
      }
      while (v9 != v10);
    }
    v78.__first_ = &v63;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  if (v67 < 0) {
    operator delete(v66);
  }
  v78.__first_ = (std::__split_buffer<std::string>::pointer)&v77;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  v78.__first_ = (std::__split_buffer<std::string>::pointer)&v76;
  std::vector<protobuf::FlowTest_Step>::__destroy_vector::operator()[abi:ne180100]((void ***)&v78);
  if (v74 < 0) {
    operator delete(v73);
  }
  if (v72 < 0) {
    operator delete(v71);
  }
  if (v70 < 0) {
    operator delete(v69);
  }
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
}