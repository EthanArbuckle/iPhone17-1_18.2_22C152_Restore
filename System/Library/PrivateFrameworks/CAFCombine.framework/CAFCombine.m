id CAFTestControlAsyncObservable.observed.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed);
}

uint64_t CAFTestControlAsyncObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlAsyncObservable._description.getter()
{
  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x8000000249485900;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlAsyncObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTestControlAsyncObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlAsyncObservable.cachedDescription.setter(v3, v6);
    v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlAsyncObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTestControlAsyncObservable.init(_:)(a1);
}

id CAFTestControlAsyncObservable.init(_:)(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescription];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)&v1[v4] = v5;
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlAsyncObservable();
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for CAFTestControlAsyncObservable()
{
  return self;
}

uint64_t CAFTestControlAsyncObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlAsyncObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFTestControlAsyncObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlAsyncObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlAsyncObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTestControlAsyncObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlAsyncObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTestControlAsyncObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlAsyncObservable(void **a1)
{
  return CAFTestControlAsyncObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlAsyncObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTestControlAsyncObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTestControlAsyncObservable.resetCachedDescription()();
  if ((a3 & 1) == 0) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t specialized CAFObservable.notifyChange()()
{
  uint64_t result = specialized CAFObservable._objectDidChange.getter();
  if (result)
  {
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t CAFTestControlAsyncObservable.serviceDidFinishGroupUpdate(_:)()
{
  return specialized CAFObservable.notifyChange()();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlAsync(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlAsyncObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlAsyncObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(&lazy protocol witness table cache variable for type CAFTestControlAsync and conformance CAFTestControlAsync, 255, (void (*)(uint64_t))type metadata accessor for CAFTestControlAsync);
}

unint64_t type metadata accessor for CAFTestControlAsync()
{
  unint64_t result = lazy cache variable for type metadata for CAFTestControlAsync;
  if (!lazy cache variable for type metadata for CAFTestControlAsync)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlAsync);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlAsyncObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlAsyncObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTestControlAsyncObservable and conformance CAFTestControlAsyncObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t associated type witness table accessor for ObservableObject.ObjectWillChangePublisher : Publisher in CAFTestControlAsyncObservable()
{
  return MEMORY[0x263EFDDD8];
}

uint64_t method lookup function for CAFTestControlAsyncObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTestControlAsyncObservable);
}

uint64_t dispatch thunk of CAFTestControlAsyncObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

void type metadata accessor for CAFPairedDeviceState(uint64_t a1)
{
}

void type metadata accessor for CAFSettingProminenceLevel(uint64_t a1)
{
}

void type metadata accessor for CAFImageColor(uint64_t a1)
{
}

void type metadata accessor for CAFMediaCategory(uint64_t a1)
{
}

void type metadata accessor for CAFFillLevelLabel(uint64_t a1)
{
}

void type metadata accessor for CAFFuelLevelState(uint64_t a1)
{
}

void type metadata accessor for CAFUISceneState(uint64_t a1)
{
}

void type metadata accessor for CAFPortSideIndicator(uint64_t a1)
{
}

void type metadata accessor for CAFCableState(uint64_t a1)
{
}

void type metadata accessor for CAFChargingState(uint64_t a1)
{
}

void type metadata accessor for CAFTransmissionMode(uint64_t a1)
{
}

void type metadata accessor for CAFBatteryLevelState(uint64_t a1)
{
}

void type metadata accessor for CAFSeatBeltIndicator(uint64_t a1)
{
}

void type metadata accessor for CAFSeatOccupancy(uint64_t a1)
{
}

void type metadata accessor for CAFMeasurementSystem(uint64_t a1)
{
}

void type metadata accessor for CAFPlaybackState(uint64_t a1)
{
}

void type metadata accessor for CAFRotationalSpeedState(uint64_t a1)
{
}

void type metadata accessor for CAFPressureState(uint64_t a1)
{
}

void type metadata accessor for CAFSensorState(uint64_t a1)
{
}

void type metadata accessor for CAFTargetSpeedState(uint64_t a1)
{
}

void type metadata accessor for CAFDefrostTypes(uint64_t a1)
{
}

void type metadata accessor for CAFMediaSourceSemanticType(uint64_t a1)
{
}

void type metadata accessor for CAFEqualizerType(uint64_t a1)
{
}

void type metadata accessor for CAFVolumeType(uint64_t a1)
{
}

void type metadata accessor for CAFNotificationSeverity(uint64_t a1)
{
}

void type metadata accessor for CAFCharacteristicState(uint64_t a1)
{
}

void type metadata accessor for CAFAutoModeIntensity(uint64_t a1)
{
}

void type metadata accessor for CAFUIInputDeviceButtonEvent(uint64_t a1)
{
}

void type metadata accessor for CAFUIInputDevicePurpose(uint64_t a1)
{
}

void type metadata accessor for CAFTemperatureState(uint64_t a1)
{
}

void type metadata accessor for CAFUnitType(uint64_t a1)
{
}

void type metadata accessor for CAFButtonAction(uint64_t a1)
{
}

void type metadata accessor for CAFVentTypes(uint64_t a1)
{
}

void type metadata accessor for CAFSettingsCategory(uint64_t a1)
{
}

void type metadata accessor for CAFLockState(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

void type metadata accessor for CAFPairedDeviceState(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t specialized CAFObservable._objectDidChange.getter()
{
  swift_beginAccess();
  id v1 = objc_getAssociatedObject(v0, &static AssociatedKeys.objectDidChange);
  swift_endAccess();
  if (v1)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v5);
  if (v6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    if (swift_dynamicCast()) {
      return v3;
    }
    else {
      return 0;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v5);
    return 0;
  }
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFTestControlAsyncObservable.resetCachedDescription()()
{
  return CAFTestControlAsyncObservable.cachedDescription.setter(0, 0);
}

uint64_t partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(uint64_t a1)
{
  return specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(a1, *(uint64_t (**)(void))(v1 + 16));
}

void CAFClimate.on.getter()
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_3();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_11();
  id v6 = objc_msgSend(v1, sel_cabin);
  if (v6)
  {
    id v7 = v6;
    if (objc_msgSend(v6, sel_hasHvacOn))
    {
      static os_log_type_t.debug.getter();
      OUTLINED_FUNCTION_6();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_0();
      static CAFCombineLogger.log(_:message:function:file:line:)(v8, v9, v10, v11, v12);
      objc_msgSend(v7, sel_hvacOn);

      goto LABEL_10;
    }
  }
  id v13 = objc_msgSend(v1, sel_car);
  if (v13)
  {
    v14 = v13;
    id v15 = objc_msgSend(v13, sel_positionManager);

    if (v15)
    {
      CAFPositionManager.driverSeat.getter(v3);
      if (__swift_getEnumTagSinglePayload(v3, 1, v0) != 1)
      {
        uint64_t v21 = OUTLINED_FUNCTION_10();
        v22(v21);
        v23 = (void *)CAFPositionManager.fan(for:)(v2);
        if (v23)
        {
          v24 = v23;
          if (objc_msgSend(v23, sel_hasOn))
          {
            static os_log_type_t.debug.getter();
            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_0();
            static CAFCombineLogger.log(_:message:function:file:line:)(v25, v26, v27, v28, v29);
            objc_msgSend(v24, sel_on);

            uint64_t v30 = OUTLINED_FUNCTION_5();
            v31(v30);
            goto LABEL_10;
          }
          id v32 = objc_msgSend(v24, sel_fanLevelRange);
          unsigned int v33 = objc_msgSend(v32, sel_minimumValue);

          if (!v33)
          {
            static os_log_type_t.debug.getter();
            OUTLINED_FUNCTION_6();
            OUTLINED_FUNCTION_2();
            OUTLINED_FUNCTION_0();
            static CAFCombineLogger.log(_:message:function:file:line:)(v41, v42, v43, v44, v45);
            objc_msgSend(v24, sel_fanLevel);
            id v46 = objc_msgSend(v24, sel_fanLevelRange);
            objc_msgSend(v46, sel_minimumValue);

            uint64_t v47 = OUTLINED_FUNCTION_5();
            v48(v47);
            goto LABEL_10;
          }
        }
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v34, v35, v36, v37, v38);

        uint64_t v39 = OUTLINED_FUNCTION_5();
        v40(v39);
        goto LABEL_10;
      }

      outlined destroy of CAUVehicleLayoutKey?(v3, &demangling cache variable for type metadata for CAUVehicleLayoutKey?);
    }
  }
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  static CAFCombineLogger.log(_:message:function:file:line:)(v16, v17, v18, v19, v20);
LABEL_10:
  OUTLINED_FUNCTION_8();
}

void CAFClimate.on.setter(unsigned __int8 a1)
{
  int v5 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388](v6 - 8);
  OUTLINED_FUNCTION_9();
  OUTLINED_FUNCTION_3();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_11();
  if (v5 == 2)
  {
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_0();
    OUTLINED_FUNCTION_8();
    static CAFCombineLogger.log(_:message:function:file:line:)(v8, v9, v10, v11, v12);
    return;
  }
  CAFClimate.on.getter();
  if (v14 != 2 && (((v14 == 0) ^ v5) & 1) != 0)
  {
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    if (v5) {
      uint64_t v15 = 1702195828;
    }
    else {
      uint64_t v15 = 0x65736C6166;
    }
    if (v5) {
      unint64_t v16 = 0xE400000000000000;
    }
    else {
      unint64_t v16 = 0xE500000000000000;
    }
    unint64_t v17 = v16;
    String.append(_:)(*(Swift::String *)&v15);
    swift_bridgeObjectRelease();
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_14();
    static CAFCombineLogger.log(_:message:function:file:line:)(v18, 0xD00000000000001BLL, 0x8000000249485B30, 28271, 0xE200000000000000);
    OUTLINED_FUNCTION_8();
    swift_bridgeObjectRelease();
    return;
  }
  id v20 = objc_msgSend(v2, sel_cabin);
  if (!v20)
  {
LABEL_22:
    id v28 = objc_msgSend(v2, sel_car);
    if (!v28) {
      goto LABEL_26;
    }
    unint64_t v29 = v28;
    id v30 = objc_msgSend(v28, sel_positionManager);

    if (!v30) {
      goto LABEL_26;
    }
    CAFPositionManager.driverSeat.getter(v4);
    if (__swift_getEnumTagSinglePayload(v4, 1, v1) == 1)
    {

      outlined destroy of CAUVehicleLayoutKey?(v4, &demangling cache variable for type metadata for CAUVehicleLayoutKey?);
LABEL_26:
      static os_log_type_t.debug.getter();
      OUTLINED_FUNCTION_2();
      OUTLINED_FUNCTION_0();
      static CAFCombineLogger.log(_:message:function:file:line:)(v31, v32, v33, v34, v35);
LABEL_27:
      OUTLINED_FUNCTION_8();
      return;
    }
    uint64_t v36 = OUTLINED_FUNCTION_10();
    v37(v36);
    unint64_t v38 = (void *)CAFPositionManager.fan(for:)(v3);
    if (v38)
    {
      uint64_t v39 = v38;
      if (objc_msgSend(v38, sel_hasOn))
      {
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v40, v41, v42, v43, v44);
        objc_msgSend(v39, sel_setOn_, v5 & 1);
LABEL_38:

        uint64_t v60 = OUTLINED_FUNCTION_4();
        v61(v60);
        goto LABEL_27;
      }
      id v47 = objc_msgSend(v39, sel_fanLevelRange);
      unsigned int v48 = objc_msgSend(v47, sel_minimumValue);

      if (!v48)
      {
        static os_log_type_t.debug.getter();
        OUTLINED_FUNCTION_6();
        OUTLINED_FUNCTION_2();
        OUTLINED_FUNCTION_0();
        static CAFCombineLogger.log(_:message:function:file:line:)(v51, v52, v53, v54, v55);
        id v56 = objc_msgSend(v39, sel_fanLevelRange);
        v57 = v56;
        v58 = &selRef_stepValue;
        if ((v5 & 1) == 0) {
          v58 = &selRef_minimumValue;
        }
        id v59 = [v56 *v58];

        objc_msgSend(v39, sel_setFanLevel_, v59);
        goto LABEL_38;
      }
      uint64_t v49 = OUTLINED_FUNCTION_4();
      v50(v49);
    }
    else
    {
      uint64_t v45 = OUTLINED_FUNCTION_4();
      v46(v45);
    }

    goto LABEL_27;
  }
  v62 = v20;
  if (!objc_msgSend(v20, sel_hasHvacOn))
  {

    goto LABEL_22;
  }
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_6();
  OUTLINED_FUNCTION_2();
  OUTLINED_FUNCTION_0();
  static CAFCombineLogger.log(_:message:function:file:line:)(v21, v22, v23, v24, v25);
  objc_msgSend(v62, sel_setHvacOn_, v5 & 1);
  OUTLINED_FUNCTION_8();
}

uint64_t CAFPositionManager.fan(for:)(uint64_t a1)
{
  int64_t v2 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(a1, 1, 0, 0, 0);
  int64_t v3 = v2;
  unint64_t v12 = MEMORY[0x263F8EE78];
  if ((unint64_t)v2 >> 62)
  {
    if (v2 < 0) {
      unint64_t v1 = v2;
    }
    else {
      unint64_t v1 = v2 & 0xFFFFFFFFFFFFFF8;
    }
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    unint64_t v1 = MEMORY[0x263F8EE78];
    goto LABEL_20;
  }
  uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4) {
    goto LABEL_19;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    goto LABEL_32;
  }
  for (uint64_t i = 0; i != v4; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0) {
      id v6 = (id)MEMORY[0x24C59DCE0](i, v3);
    }
    else {
      id v6 = *(id *)(v3 + 8 * i + 32);
    }
    uint64_t v7 = v6;
    self;
    if (swift_dynamicCastObjCClass())
    {
      MEMORY[0x24C59DB10]();
      if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
    }
    else
    {
    }
  }
  swift_bridgeObjectRelease();
  unint64_t v1 = v12;
LABEL_20:
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1) {
      goto LABEL_22;
    }
LABEL_29:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v10 != 1) {
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9) {
    goto LABEL_25;
  }
LABEL_22:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v1 & 0xC000000000000001) == 0, v1);
  if ((v1 & 0xC000000000000001) != 0)
  {
LABEL_32:
    id v8 = (id)MEMORY[0x24C59DCE0](0, v1);
    goto LABEL_24;
  }
  id v8 = *(id *)(v1 + 32);
LABEL_24:
  uint64_t v9 = (uint64_t)v8;
LABEL_25:
  swift_bridgeObjectRelease();
  return v9;
}

void (*CAFClimate.on.modify(uint64_t a1))(uint64_t a1)
{
  *(void *)a1 = v1;
  CAFClimate.on.getter();
  *(unsigned char *)(a1 + 8) = v3;
  return CAFClimate.on.modify;
}

void CAFClimate.on.modify(uint64_t a1)
{
}

uint64_t CAFClimate.fan(for:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_car);
  if (v3
    && (v4 = v3, id v5 = objc_msgSend(v3, sel_positionManager), v4, v5))
  {
    uint64_t v6 = CAFPositionManager.fan(for:)(a1);

    return v6;
  }
  else
  {
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_14();
    static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0xD000000000000037, v9, 0x3A726F66286E6166, 0xE900000000000029);
    return 0;
  }
}

uint64_t CAFClimate.vents(for:)(uint64_t a1)
{
  id v3 = objc_msgSend(v1, sel_car);
  if (v3
    && (v4 = v3, id v5 = objc_msgSend(v3, sel_positionManager), v4, v5))
  {
    uint64_t v6 = CAFPositionManager.vents(for:)(a1);

    return v6;
  }
  else
  {
    static os_log_type_t.debug.getter();
    OUTLINED_FUNCTION_2();
    OUTLINED_FUNCTION_14();
    static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0xD000000000000039, v9, 0x6F662873746E6576, 0xEB00000000293A72);
    return MEMORY[0x263F8EE78];
  }
}

uint64_t CAFPositionManager.vents(for:)(uint64_t a1)
{
  unint64_t v1 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(a1, 1, 0, 0, 0);
  unint64_t v2 = v1;
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v3) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v8 = MEMORY[0x263F8EE78];
LABEL_17:
    swift_bridgeObjectRelease();
    return v8;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v3 >= 1)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v6 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v6 = *(id *)(v2 + 8 * i + 32);
      }
      uint64_t v7 = v6;
      self;
      if (swift_dynamicCastObjCClass())
      {
        MEMORY[0x24C59DB10]();
        if (*(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v8 = v9;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.autoMode.getter(unint64_t a1)
{
  uint64_t v9 = MEMORY[0x263F8EE78];
  if (!(a1 >> 62))
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_3;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v7 = MEMORY[0x263F8EE78];
    if ((MEMORY[0x263F8EE78] & 0x8000000000000000) != 0) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_16;
  }
LABEL_3:
  if (v2 >= 1)
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, a1);
      }
      else {
        id v5 = *(id *)(a1 + 8 * i + 32);
      }
      id v6 = v5;
      if objc_msgSend(v5, sel_hasAutoMode) && (objc_msgSend(v6, sel_autoMode))
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
      }
      else
      {
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v7 = v9;
    if (v9 < 0) {
      goto LABEL_20;
    }
LABEL_17:
    if ((v7 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = *(void *)(v7 + 16);
LABEL_19:
      swift_release();
      return v8 != 0;
    }
LABEL_20:
    swift_bridgeObjectRetain();
    uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t Array<A>.exitAutoMode()()
{
  OUTLINED_FUNCTION_12();
  v0[9] = v1;
  uint64_t v2 = type metadata accessor for CancellationError();
  v0[10] = v2;
  v0[11] = *(void *)(v2 - 8);
  v0[12] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v0[13] = swift_task_alloc();
  OUTLINED_FUNCTION_15();
  return MEMORY[0x270FA2498]();
}

{
  void *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  uint64_t v1 = v0[13];
  uint64_t v2 = v0[9];
  v0[6] = MEMORY[0x263F8EE88];
  uint64_t v3 = type metadata accessor for TaskPriority();
  __swift_storeEnumTagSinglePayload(v1, 1, 1, v3);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  id v5 = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in Array<A>.exitAutoMode(), v4);
  v0[14] = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized Sequence.forEach(_:)(v2, v2, v5);
  id v6 = (void *)swift_task_alloc();
  v0[15] = v6;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v0[16] = v7;
  *id v6 = v0;
  v6[1] = Array<A>.exitAutoMode();
  uint64_t v8 = MEMORY[0x263F8EE60] + 8;
  uint64_t v9 = MEMORY[0x263F8E4E0];
  return MEMORY[0x270FA1FB8](v0 + 4, v5, v8, v7, v9);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t v4;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_15();
  return MEMORY[0x270FA2498]();
}

{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  int v3;
  id v4;
  id v5;
  void *v6;
  Swift::String v7;
  unint64_t v8;
  Swift::String v9;
  os_log_type_t v10;
  char v11;
  uint64_t (*v12)(void);
  uint64_t v14;

  uint64_t v1 = 0x2074756F656D6974;
  uint64_t v2 = *(void **)(v0 + 32);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 40);
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  if (v3 == 1)
  {
    *(void *)(v0 + 56) = v2;
    uint64_t v4 = v2;
    id v5 = v2;
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void))(*(void *)(v0 + 88) + 8))(*(void *)(v0 + 96), *(void *)(v0 + 80));
      outlined consume of Result<(), Error>(v2, 1);
      id v6 = (void *)0x8000000249485BF0;
      uint64_t v1 = 0xD000000000000011;
    }
    else
    {
      _StringGuts.grow(_:)(17);
      *(void *)(v0 + 16) = 0;
      *(void *)(v0 + 24) = 0xE000000000000000;
      v7._countAndFlagsBits = 0x2074756F656D6974;
      v7._object = (void *)0xEF203A726F727265;
      String.append(_:)(v7);
      *(void *)(v0 + 64) = v2;
      _print_unlocked<A, B>(_:_:)();
      outlined consume of Result<(), Error>(v2, 1);
      uint64_t v1 = *(void *)(v0 + 16);
      id v6 = *(void **)(v0 + 24);
    }
  }
  else
  {
    id v6 = (void *)0xED00006465726966;
  }
  uint64_t v8 = *(void *)(v0 + 72);
  v9._countAndFlagsBits = v1;
  v9._object = v6;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_14();
  static CAFCombineLogger.log(_:message:function:file:line:)(v10, 0xD00000000000001ELL, 0x8000000249485BD0, 0x6F74754174697865, 0xEE00292865646F4DLL);
  swift_bridgeObjectRelease();
  uint64_t v11 = Array<A>.autoMode.getter(v8);
  outlined consume of Result<(), Error>(v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12(v11 & 1);
}

uint64_t closure #1 in Array<A>.exitAutoMode()()
{
  uint64_t v1 = type metadata accessor for ContinuousClock();
  v0[2] = v1;
  v0[3] = *(void *)(v1 - 8);
  v0[4] = swift_task_alloc();
  return MEMORY[0x270FA2498](closure #1 in Array<A>.exitAutoMode(), 0, 0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t, char);
  uint64_t v7;

  objc_msgSend(self, sel_autoGroupTimer);
  uint64_t v1 = static Duration.seconds(_:)();
  uint64_t v3 = v2;
  ContinuousClock.init()();
  id v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&async function pointer to specialized Clock.sleep(for:tolerance:)
                                                                        + async function pointer to specialized Clock.sleep(for:tolerance:));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v4;
  void *v4 = v0;
  v4[1] = closure #1 in Array<A>.exitAutoMode();
  return v6(v1, v3, 0, 0, 1);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  id v5 = v4[4];
  id v6 = v4[3];
  uint64_t v7 = v4[2];
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v9 = v8;
  *(void *)(v3 + 48) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  if (v0)
  {
    OUTLINED_FUNCTION_15();
    return MEMORY[0x270FA2498]();
  }
  else
  {
    swift_task_dealloc();
    OUTLINED_FUNCTION_13();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_12();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload(a1, 1, v5) == 1)
  {
    outlined destroy of CAUVehicleLayoutKey?(a1, &demangling cache variable for type metadata for TaskPriority?);
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  }
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

id closure #2 in Array<A>.exitAutoMode()(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(v5, sel_instanceID);
  id v7 = objc_msgSend(v6, sel_description);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);

  swift_bridgeObjectRelease();
  unint64_t v12 = 0xE400000000000000;
  v13._countAndFlagsBits = 544175136;
  v13._object = (void *)0xE400000000000000;
  String.append(_:)(v13);
  unsigned int v14 = objc_msgSend(v5, sel_on);
  BOOL v15 = v14 == 0;
  if (v14) {
    uint64_t v16 = 1702195828;
  }
  else {
    uint64_t v16 = 0x65736C6166;
  }
  if (v15) {
    unint64_t v12 = 0xE500000000000000;
  }
  unint64_t v17 = v12;
  String.append(_:)(*(Swift::String *)&v16);
  swift_bridgeObjectRelease();
  os_log_type_t v18 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v18, 0xD000000000000026, 0x8000000249485C10, 0x6F74754174697865, 0xEE00292865646F4DLL);
  swift_bridgeObjectRelease();
  objc_msgSend(v5, sel_setOn_, objc_msgSend(v5, sel_on));
  id result = objc_msgSend(v5, sel_hasAutoMode);
  if (result)
  {
    id v20 = (void *)specialized CAFObserved<>.observable.getter();
    CAFVentObservable.$autoMode.getter();

    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a2;
    *(void *)(v21 + 24) = a3;
    swift_bridgeObjectRetain();
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyPublisher<Bool?, Never>);
    lazy protocol witness table accessor for type AnyPublisher<Bool?, Never> and conformance AnyPublisher<A, B>();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    AnyCancellable.store(in:)();
    return (id)swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #2 in Array<A>.exitAutoMode()(uint64_t a1, unint64_t a2)
{
  uint64_t result = Array<A>.autoMode.getter(a2);
  if ((result & 1) == 0)
  {
    os_log_type_t v3 = static os_log_type_t.debug.getter();
    static CAFCombineLogger.log(_:message:function:file:line:)(v3, 0xD00000000000002ALL, 0x8000000249485C40, 0x6F74754174697865, 0xEE00292865646F4DLL);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    JUMPOUT(0x24C59DBE0);
  }
  return result;
}

void specialized Sequence.forEach(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62) {
    goto LABEL_13;
  }
  uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v6; uint64_t v6 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v7 = 4;
    while (1)
    {
      id v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x24C59DCE0](v7 - 4, a1) : *(id *)(a1 + 8 * v7);
      uint64_t v9 = v8;
      uint64_t v10 = v7 - 3;
      if (__OFADD__(v7 - 4, 1)) {
        break;
      }
      unint64_t v12 = v8;
      closure #2 in Array<A>.exitAutoMode()(&v12, a2, a3);
      if (v3)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return;
      }

      ++v7;
      if (v10 == v6) {
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_13:
    swift_bridgeObjectRetain();
  }
LABEL_10:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t specialized Clock.sleep(for:tolerance:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return MEMORY[0x270FA2498](specialized Clock.sleep(for:tolerance:), 0, 0);
}

uint64_t specialized Clock.sleep(for:tolerance:)()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, MEMORY[0x263F8F710]);
  dispatch thunk of Clock.now.getter();
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock.Instant and conformance ContinuousClock.Instant, MEMORY[0x263F8F6D8]);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = specialized Clock.sleep(for:tolerance:);
  uint64_t v8 = v0[11];
  return MEMORY[0x270FA2380](v8, v0 + 2, v4, v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t (*v10)(void);
  uint64_t v12;

  OUTLINED_FUNCTION_1();
  uint64_t v3 = v2;
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v4[12];
  uint64_t v6 = v4[11];
  uint64_t v7 = v4[8];
  uint64_t v8 = *v1;
  OUTLINED_FUNCTION_7();
  *uint64_t v9 = v8;
  *(void *)(v3 + 120) = v0;
  swift_task_dealloc();
  v5(v6, v7);
  if (v0)
  {
    OUTLINED_FUNCTION_15();
    return MEMORY[0x270FA2498]();
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    OUTLINED_FUNCTION_13();
    return v10();
  }
}

{
  uint64_t (*v0)(void);
  uint64_t v2;

  OUTLINED_FUNCTION_12();
  swift_task_dealloc();
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v0();
}

uint64_t static String._createEmpty(withInitialCapacity:)(Swift::Int a1)
{
  if (a1 < 16) {
    return 0;
  }
  _StringGuts.grow(_:)(a1);
  return 0;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t sub_249393D84()
{
  swift_unknownObjectRelease();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in Array<A>.exitAutoMode()()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = partial apply for closure #1 in Array<A>.exitAutoMode();
  return closure #1 in Array<A>.exitAutoMode()();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_12();
  OUTLINED_FUNCTION_1();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_7();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_13();
  return v3();
}

void outlined consume of Result<(), Error>(id a1, char a2)
{
  if (a2) {
}
  }

void sub_249393F34(unsigned char *a1@<X8>)
{
  CAFClimate.on.getter();
  *a1 = v2;
}

void sub_249393F60(unsigned __int8 *a1)
{
}

uint64_t sub_249393F88()
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in closure #2 in Array<A>.exitAutoMode()(uint64_t a1)
{
  return closure #1 in closure #2 in Array<A>.exitAutoMode()(a1, *(void *)(v1 + 16));
}

unint64_t lazy protocol witness table accessor for type AnyPublisher<Bool?, Never> and conformance AnyPublisher<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyPublisher<Bool?, Never> and conformance AnyPublisher<A, B>;
  if (!lazy protocol witness table cache variable for type AnyPublisher<Bool?, Never> and conformance AnyPublisher<A, B>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<Bool?, Never>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyPublisher<Bool?, Never> and conformance AnyPublisher<A, B>);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined destroy of CAUVehicleLayoutKey?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9()
{
  return type metadata accessor for CAUVehicleLayoutKey();
}

uint64_t OUTLINED_FUNCTION_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13()
{
  return v0 + 8;
}

id CAFTemperatureObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
}

uint64_t CAFTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTemperatureObservable.currentTemperature.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFTemperatureObservable.$currentTemperature.getter()
{
  return CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__currentTemperature, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

#error "249394350: call analysis failed (funcsize=9)"

#error "249394418: call analysis failed (funcsize=51)"

void CAFTemperatureObservable.targetTemperature.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_36();
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  OUTLINED_FUNCTION_116();
  unint64_t v29 = *(void **)(v24 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  a13 = v29;
  swift_retain();
  swift_retain();
  id v30 = v29;
  os_log_type_t v31 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v33 = v32;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_73();
  (*(void (**)(uint64_t, uint64_t))(v34 + 16))(v28, v33);
  v31(&a9, 0);
  swift_release();
  swift_release();

  OUTLINED_FUNCTION_35();
}

void CAFTemperatureObservable.targetTemperature.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_82();
  a17 = v19;
  a18 = v20;
  uint64_t v22 = v21;
  uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v25 = v24;
  MEMORY[0x270FA5388](v26);
  uint64_t v28 = (char *)&a9 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t KeyPath = swift_getKeyPath();
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v22, v23);
  specialized static SafePublished.subscript.setter((uint64_t)v28, v18, KeyPath);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v22, v23);
  OUTLINED_FUNCTION_81();
}

uint64_t specialized static SafePublished.subscript.setter(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v22 = a1;
  uint64_t v23 = a3;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  uint64_t v21 = *(void *)(v7 - 8);
  uint64_t v8 = v21;
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAFTemperatureObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v11, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  id v25 = a2;
  uint64_t v12 = a2;
  id v20 = v12;
  swift_retain();
  Swift::String v13 = (void (*)(void **, void))swift_readAtKeyPath();
  swift_retain();
  v13(&v24, 0);
  swift_release();

  uint64_t v24 = *(void **)&v12[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed];
  uint64_t v14 = v24;
  BOOL v15 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v16 = v22;
  v15(v10, v22, v7);
  swift_retain();
  id v17 = v14;
  swift_setAtReferenceWritableKeyPath();

  v15(v6, v16, v7);
  __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v7);
  specialized SafePublished.value.setter((uint64_t)v6);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v16, v7);
}

#error "24939494C: call analysis failed (funcsize=59)"

#error "249394A48: call analysis failed (funcsize=59)"

#error "249394B40: call analysis failed (funcsize=58)"

#error "249394C38: call analysis failed (funcsize=58)"

#error "249394D34: call analysis failed (funcsize=65)"

#error "249394E44: call analysis failed (funcsize=58)"

#error "249394F3C: call analysis failed (funcsize=58)"

#error "249395038: call analysis failed (funcsize=59)"

#error "249395134: call analysis failed (funcsize=59)"

#error "249395230: call analysis failed (funcsize=59)"

#error "24939532C: call analysis failed (funcsize=59)"

#error "249395424: call analysis failed (funcsize=58)"

#error "24939551C: call analysis failed (funcsize=58)"

#error "249395618: call analysis failed (funcsize=59)"

#error "249395714: call analysis failed (funcsize=59)"

#error "249395810: call analysis failed (funcsize=63)"

#error "249395920: call analysis failed (funcsize=67)"

#error "249395A38: call analysis failed (funcsize=59)"

#error "249395B38: call analysis failed (funcsize=67)"

#error "249395C4C: call analysis failed (funcsize=58)"

#error "249395D44: call analysis failed (funcsize=58)"

#error "249395E3C: call analysis failed (funcsize=58)"

#error "249395F34: call analysis failed (funcsize=58)"

#error "24939602C: call analysis failed (funcsize=58)"

#error "249396124: call analysis failed (funcsize=58)"

#error "24939621C: call analysis failed (funcsize=58)"

#error "249396314: call analysis failed (funcsize=58)"

#error "24939640C: call analysis failed (funcsize=58)"

#error "249396504: call analysis failed (funcsize=58)"

#error "249396600: call analysis failed (funcsize=60)"

#error "2493966FC: call analysis failed (funcsize=58)"

#error "2493967F4: call analysis failed (funcsize=58)"

#error "2493968EC: call analysis failed (funcsize=58)"

#error "2493969E8: call analysis failed (funcsize=60)"

#error "249396AE4: call analysis failed (funcsize=58)"

#error "249396BE4: call analysis failed (funcsize=67)"

#error "249396D08: call analysis failed (funcsize=72)"

#error "249396E28: call analysis failed (funcsize=58)"

#error "249396F20: call analysis failed (funcsize=58)"

#error "249397018: call analysis failed (funcsize=62)"

#error "249397120: call analysis failed (funcsize=63)"

#error "24939722C: call analysis failed (funcsize=63)"

#error "249397338: call analysis failed (funcsize=63)"

#error "249397444: call analysis failed (funcsize=63)"

#error "249397550: call analysis failed (funcsize=63)"

#error "24939765C: call analysis failed (funcsize=63)"

#error "249397768: call analysis failed (funcsize=63)"

#error "249397874: call analysis failed (funcsize=63)"

#error "249397980: call analysis failed (funcsize=63)"

#error "249397A8C: call analysis failed (funcsize=63)"

#error "249397B98: call analysis failed (funcsize=63)"

#error "249397CA4: call analysis failed (funcsize=63)"

#error "249397DB0: call analysis failed (funcsize=62)"

#error "249397EBC: call analysis failed (funcsize=59)"

#error "249397FB8: call analysis failed (funcsize=65)"

#error "2493980CC: call analysis failed (funcsize=59)"

#error "2493981C8: call analysis failed (funcsize=59)"

#error "2493982C4: call analysis failed (funcsize=59)"

#error "2493983BC: call analysis failed (funcsize=58)"

#error "2493984B4: call analysis failed (funcsize=58)"

#error "2493985B0: call analysis failed (funcsize=59)"

#error "2493986AC: call analysis failed (funcsize=59)"

#error "2493987A8: call analysis failed (funcsize=59)"

#error "2493988A0: call analysis failed (funcsize=58)"

#error "249398998: call analysis failed (funcsize=58)"

#error "249398A90: call analysis failed (funcsize=58)"

#error "249398B88: call analysis failed (funcsize=58)"

#error "249398C84: call analysis failed (funcsize=59)"

#error "249398D80: call analysis failed (funcsize=59)"

#error "249398E7C: call analysis failed (funcsize=59)"

#error "249398F74: call analysis failed (funcsize=58)"

#error "24939906C: call analysis failed (funcsize=58)"

#error "249399164: call analysis failed (funcsize=58)"

#error "24939925C: call analysis failed (funcsize=58)"

#error "249399358: call analysis failed (funcsize=60)"

#error "249399454: call analysis failed (funcsize=58)"

#error "24939954C: call analysis failed (funcsize=58)"

#error "249399644: call analysis failed (funcsize=58)"

#error "249399740: call analysis failed (funcsize=60)"

#error "24939983C: call analysis failed (funcsize=58)"

#error "24939993C: call analysis failed (funcsize=67)"

#error "249399A60: call analysis failed (funcsize=72)"

#error "249399B80: call analysis failed (funcsize=58)"

#error "249399C78: call analysis failed (funcsize=58)"

#error "249399D70: call analysis failed (funcsize=62)"

#error "249399E78: call analysis failed (funcsize=63)"

#error "249399F84: call analysis failed (funcsize=63)"

#error "24939A090: call analysis failed (funcsize=63)"

#error "24939A19C: call analysis failed (funcsize=63)"

#error "24939A2A8: call analysis failed (funcsize=63)"

#error "24939A3B4: call analysis failed (funcsize=63)"

#error "24939A4C0: call analysis failed (funcsize=63)"

#error "24939A5CC: call analysis failed (funcsize=63)"

#error "24939A6D8: call analysis failed (funcsize=63)"

#error "24939A7E4: call analysis failed (funcsize=63)"

#error "24939A8F0: call analysis failed (funcsize=63)"

#error "24939A9FC: call analysis failed (funcsize=63)"

#error "24939AB08: call analysis failed (funcsize=62)"

void specialized static SafePublished.subscript.setter()
{
  OUTLINED_FUNCTION_8_0();
  uint64_t v15 = v1;
  uint64_t v3 = v2;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x270FA5388](v4 - 8);
  OUTLINED_FUNCTION_3_0();
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  uint64_t v14 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_106();
  type metadata accessor for CAFBatteryLevelObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  id v17 = v3;
  Swift::String v13 = v3;
  swift_retain();
  uint64_t v9 = (void (*)(void **, void))swift_readAtKeyPath();
  OUTLINED_FUNCTION_23();
  v9(&v16, 0);
  swift_release();

  uint64_t v16 = *(void **)&v13[OBJC_IVAR____TtC10CAFCombine25CAFBatteryLevelObservable_observed];
  uint64_t v10 = v16;
  uint64_t v11 = *(void (**)(void))(v7 + 16);
  OUTLINED_FUNCTION_113();
  v11();
  swift_retain();
  id v12 = v10;
  swift_setAtReferenceWritableKeyPath();

  OUTLINED_FUNCTION_113();
  v11();
  __swift_storeEnumTagSinglePayload(v0, 0, 1, v5);
  specialized SafePublished.value.setter(v0);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v5);
  OUTLINED_FUNCTION_8();
}

#error "24939AE5C: call analysis failed (funcsize=58)"

#error "24939AF54: call analysis failed (funcsize=58)"

#error "24939B04C: call analysis failed (funcsize=58)"

#error "24939B144: call analysis failed (funcsize=58)"

#error "24939B240: call analysis failed (funcsize=60)"

#error "24939B33C: call analysis failed (funcsize=58)"

#error "24939B434: call analysis failed (funcsize=58)"

#error "24939B52C: call analysis failed (funcsize=58)"

#error "24939B628: call analysis failed (funcsize=60)"

#error "24939B724: call analysis failed (funcsize=58)"

#error "24939B824: call analysis failed (funcsize=67)"

#error "24939B948: call analysis failed (funcsize=72)"

#error "24939BA68: call analysis failed (funcsize=58)"

#error "24939BB60: call analysis failed (funcsize=58)"

#error "24939BC58: call analysis failed (funcsize=62)"

#error "24939BD60: call analysis failed (funcsize=63)"

#error "24939BE6C: call analysis failed (funcsize=63)"

#error "24939BF78: call analysis failed (funcsize=63)"

#error "24939C084: call analysis failed (funcsize=63)"

#error "24939C190: call analysis failed (funcsize=63)"

#error "24939C29C: call analysis failed (funcsize=63)"

#error "24939C3A8: call analysis failed (funcsize=63)"

#error "24939C4B4: call analysis failed (funcsize=63)"

#error "24939C5C0: call analysis failed (funcsize=63)"

#error "24939C6CC: call analysis failed (funcsize=63)"

#error "24939C7D8: call analysis failed (funcsize=63)"

#error "24939C8E4: call analysis failed (funcsize=63)"

#error "24939C9F0: call analysis failed (funcsize=62)"

#error "24939CAF8: call analysis failed (funcsize=62)"

#error "24939CC00: call analysis failed (funcsize=62)"

#error "24939CD08: call analysis failed (funcsize=62)"

#error "24939CE10: call analysis failed (funcsize=62)"

#error "24939CF1C: call analysis failed (funcsize=59)"

uint64_t specialized static SafePublished.subscript.setter(void *a1, float a2)
{
  type metadata accessor for CAFFloatSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  dispatch thunk of ObservableObject.objectWillChange.getter();
  ObservableObjectPublisher.send()();
  swift_release();
  id v10 = a1;
  uint64_t v4 = a1;
  swift_retain();
  uint64_t v5 = (void (*)(void **, void))OUTLINED_FUNCTION_17();
  OUTLINED_FUNCTION_23();
  v5(&v9, 0);
  swift_release();

  uint64_t v9 = *(void **)&v4[OBJC_IVAR____TtC10CAFCombine25CAFFloatSettingObservable_observed];
  uint64_t v6 = v9;
  *(float *)&id v10 = a2;
  swift_retain();
  id v7 = v6;
  swift_setAtReferenceWritableKeyPath();

  LOBYTE(v9) = 0;
  specialized SafePublished.value.setter();

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void CAFTemperatureObservable.targetTemperature.modify()
{
  OUTLINED_FUNCTION_8_0();
  uint64_t v2 = v1;
  uint64_t v3 = malloc(0x88uLL);
  *uint64_t v2 = v3;
  *((void *)v3 + 8) = v0;
  *((void *)v3 + 9) = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  *((void *)v3 + 10) = v4;
  size_t v7 = *(void *)(v6 + 64);
  *((void *)v3 + 11) = malloc(v7);
  uint64_t v8 = malloc(v7);
  *((void *)v3 + 12) = v8;
  *((void *)v3 + 13) = swift_getKeyPath();
  *((void *)v3 + 14) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v9 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  *((void *)v3 + 7) = v9;
  swift_retain();
  swift_retain();
  id v10 = v9;
  uint64_t v11 = (void (*)(void *, void))swift_readAtKeyPath();
  id v12 = *(void (**)(void *))(v5 + 16);
  *((void *)v3 + 15) = v12;
  *((void *)v3 + 16) = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v12(v8);
  v11(v3, 0);
  swift_release();
  swift_release();

  OUTLINED_FUNCTION_8();
}

{
  uint64_t *v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;

  OUTLINED_FUNCTION_82();
  uint64_t v1 = *v0;
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 104);
    uint64_t v5 = *(void **)(v1 + 88);
    uint64_t v4 = *(void **)(v1 + 96);
    uint64_t v6 = *(void *)(v1 + 72);
    size_t v7 = *(void *)(v1 + 80);
    uint64_t v8 = *(void **)(v1 + 64);
    (*(void (**)(void *, void *, uint64_t))(v1 + 120))(v5, v4, v6);
    specialized static SafePublished.subscript.setter((uint64_t)v5, v8, v3);
    (*(void (**)(void *, uint64_t))(v7 + 8))(v4, v6);
  }
  else
  {
    uint64_t v5 = *(void **)(v1 + 88);
    uint64_t v4 = *(void **)(v1 + 96);
    specialized static SafePublished.subscript.setter((uint64_t)v4, *(id *)(v1 + 64), *(void *)(v1 + 104));
  }
  free(v4);
  free(v5);
  OUTLINED_FUNCTION_81();
  free(v9);
}

uint64_t CAFTemperatureObservable.$targetTemperature.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  uint64_t v0 = specialized SafePublished.projectedValue.getter();
  swift_release();
  return v0;
}

uint64_t CAFTemperatureObservable.vehicleLayoutKey.getter()
{
  return CAFTemperatureObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTemperatureObservable.$vehicleLayoutKey.getter()
{
  return CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTemperatureObservable.name.getter()
{
  return CAFTemperatureObservable.vehicleLayoutKey.getter();
}

uint64_t CAFTemperatureObservable.$name.getter()
{
  return CAFTemperatureObservable.$currentTemperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__name, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTemperatureObservable.$currentTemperature.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

#error "24939D628: call analysis failed (funcsize=163)"

uint64_t CAFTemperatureObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  uint64_t v3 = swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription + 8))
  {
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTemperatureObservable._description.getter(v3);
    swift_bridgeObjectRetain();
    uint64_t v5 = OUTLINED_FUNCTION_93();
    CAFTemperatureObservable.cachedDescription.setter(v5, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFTemperatureObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTemperatureObservable.init(_:)(a1);
}

id CAFTemperatureObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__currentTemperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTemperatureObservable, Measurement<NSUnitTemperature>?>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__targetTemperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTemperatureObservable, Measurement<NSUnitTemperature>>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTemperatureObservable, String>);
  swift_allocObject();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)();
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v13] = specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFTemperatureObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFTemperatureObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTemperatureObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTemperatureObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTemperatureObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTemperatureObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTemperatureObservable(void **a1)
{
  return CAFTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTemperatureObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateCurrentTemperature:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);

  return swift_release();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateTargetTemperature:)(uint64_t a1, uint64_t a2)
{
  return swift_release();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTemperatureObservable.temperatureService(_:didUpdateName:)()
{
  return CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFTemperatureObservable.temperatureService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t specialized SafePublished.projectedValue.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  id v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

void specialized SafePublished.projectedValue.getter()
{
  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFLockState?>.Publisher, CAFLockState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFLockState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFLockState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFLockState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFLockState?>.Publisher, CAFLockState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFLockState?>.Publisher, CAFLockState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool?>.Publisher, Bool>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Bool?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool?>.Publisher, Bool> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool?>.Publisher, Bool>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool??>.Publisher, Bool?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Bool??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool??>.Publisher, Bool?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool??>.Publisher, Bool?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int32?>.Publisher, Int32>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int32?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int32?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int32?>.Publisher, Int32> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int32?>.Publisher, Int32>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt8]?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt8]?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt32?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt32?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction?>.Publisher, CAFButtonAction>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFButtonAction(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFButtonAction?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFButtonAction?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction?>.Publisher, CAFButtonAction> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction?>.Publisher, CAFButtonAction>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int32??>.Publisher, Int32?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int32??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int32??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int32??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int32??>.Publisher, Int32?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int32??>.Publisher, Int32?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8??>.Publisher, UInt8?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt8??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt8??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8??>.Publisher, UInt8?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8??>.Publisher, UInt8?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutoModeIntensity??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFAutoModeIntensity??>.Publisher, CAFAutoModeIntensity?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutoModeIntensity??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFAutoModeIntensity?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFAutoModeIntensity??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFAutoModeIntensity??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFAutoModeIntensity??>.Publisher, CAFAutoModeIntensity?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFAutoModeIntensity??>.Publisher, CAFAutoModeIntensity?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt8?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt8?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int16?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int16?>.Publisher, Int16>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Int16?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int16?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int16?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int16?>.Publisher, Int16> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int16?>.Publisher, Int16>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationSeverity?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFNotificationSeverity?>.Publisher, CAFNotificationSeverity>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationSeverity?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFNotificationSeverity(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFNotificationSeverity?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFNotificationSeverity?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFNotificationSeverity?>.Publisher, CAFNotificationSeverity> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFNotificationSeverity?>.Publisher, CAFNotificationSeverity>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFButtonAction??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFButtonAction??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt16??>.Publisher, UInt16?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt16??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt16??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt16??>.Publisher, UInt16?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt16??>.Publisher, UInt16?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32??>.Publisher, UInt32?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt32??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt32??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32??>.Publisher, UInt32?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32??>.Publisher, UInt32?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt64??>.Publisher, UInt64?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt64??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt64??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt64??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt64??>.Publisher, UInt64?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt64??>.Publisher, UInt64?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int8??>.Publisher, Int8?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int8??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int8??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int8??>.Publisher, Int8?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int8??>.Publisher, Int8?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int16??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int16??>.Publisher, Int16?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int16??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int16??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int16??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int16??>.Publisher, Int16?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int16??>.Publisher, Int16?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int64??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int64??>.Publisher, Int64?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int64??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int64??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int64??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int64??>.Publisher, Int64?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int64??>.Publisher, Int64?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Float??>.Publisher, Float?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Float??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Float??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float??>.Publisher, Float?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Float??>.Publisher, Float?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String??>.Publisher, String?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String??>.Publisher, String?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String??>.Publisher, String?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Data??>.Publisher, Data?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Data??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Data??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data??>.Publisher, Data?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Data??>.Publisher, Data?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUnitType??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUnitType??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexItem??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexItem??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Bool]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Bool]??>.Publisher, [Bool]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Bool]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Bool]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Bool]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Bool]??>.Publisher, [Bool]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Bool]??>.Publisher, [Bool]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]??>.Publisher, [UInt8]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt8]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt8]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]??>.Publisher, [UInt8]?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]??>.Publisher, [UInt8]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt16]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt16]??>.Publisher, [UInt16]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt16]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt16]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt16]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt16]??>.Publisher, [UInt16]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt16]??>.Publisher, [UInt16]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt32]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt32]??>.Publisher, [UInt32]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt32]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt32]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt32]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt32]??>.Publisher, [UInt32]?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt32]??>.Publisher, [UInt32]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64]??>.Publisher, [UInt64]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt64]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt64]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt64]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt64]??>.Publisher, [UInt64]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt64]??>.Publisher, [UInt64]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int8]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int8]??>.Publisher, [Int8]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int8]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Int8]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Int8]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int8]??>.Publisher, [Int8]?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int8]??>.Publisher, [Int8]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int16]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int16]??>.Publisher, [Int16]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int16]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Int16]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Int16]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int16]??>.Publisher, [Int16]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int16]??>.Publisher, [Int16]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int32]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int32]??>.Publisher, [Int32]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int32]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Int32]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Int32]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int32]??>.Publisher, [Int32]?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int32]??>.Publisher, [Int32]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int64]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int64]??>.Publisher, [Int64]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Int64]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Int64]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Int64]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Int64]??>.Publisher, [Int64]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Int64]??>.Publisher, [Int64]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Float]??>.Publisher, [Float]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Float]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Float]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Float]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Float]??>.Publisher, [Float]?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Float]??>.Publisher, [Float]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[String]??>.Publisher, [String]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[String]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[String]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[String]??>.Publisher, [String]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[String]??>.Publisher, [String]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Data]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Data]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItems??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItems??>.Publisher, CAFTestComplexItems?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItems??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexItems??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexItems??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItems??>.Publisher, CAFTestComplexItems?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItems??>.Publisher, CAFTestComplexItems?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[UInt8]?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[UInt8]?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[UInt8]?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[UInt8]?>.Publisher, [UInt8]>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Int8?>.Publisher, Int8>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Int8?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Int8?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Int8?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Int8?>.Publisher, Int8> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Int8?>.Publisher, Int8>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt8?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt8?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt8?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt8?>.Publisher, UInt8>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool??>.Publisher, Bool?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Bool??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Bool??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Bool??>.Publisher, Bool?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Bool??>.Publisher, Bool?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Float??>.Publisher, Float?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Float??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Float??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float??>.Publisher, Float?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Float??>.Publisher, Float?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String??>.Publisher, String?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String??>.Publisher, String?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String??>.Publisher, String?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Data??>.Publisher, Data?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Data??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Data??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data??>.Publisher, Data?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Data??>.Publisher, Data?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFButtonAction??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFButtonAction??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFButtonAction??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFButtonAction??>.Publisher, CAFButtonAction?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUnitType??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUnitType??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType??>.Publisher, CAFUnitType?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexItem??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexItem??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexItem??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexItem??>.Publisher, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Data]??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Data]??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]??>.Publisher, [Data]?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexArrayItem??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexArrayItem??>.Publisher, CAFTestComplexArrayItem?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexArrayItem??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexArrayItem?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexArrayItem??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexArrayItem??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexArrayItem??>.Publisher, CAFTestComplexArrayItem?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexArrayItem??>.Publisher, CAFTestComplexArrayItem?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItem??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedItem??>.Publisher, CAFTestComplexNestedItem?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItem??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexNestedItem?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedItem??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexNestedItem??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedItem??>.Publisher, CAFTestComplexNestedItem?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedItem??>.Publisher, CAFTestComplexNestedItem?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItems??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedItems??>.Publisher, CAFTestComplexNestedItems?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedItems??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedItems?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedItems??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexNestedItems??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedItems??>.Publisher, CAFTestComplexNestedItems?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedItems??>.Publisher, CAFTestComplexNestedItems?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedListItem??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedListItem??>.Publisher, CAFTestComplexNestedListItem?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTestComplexNestedListItem??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedListItem?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTestComplexNestedListItem??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTestComplexNestedListItem??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTestComplexNestedListItem??>.Publisher, CAFTestComplexNestedListItem?> and conformance Publishers.CompactMap<A, B>, (uint64_t *)&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTestComplexNestedListItem??>.Publisher, CAFTestComplexNestedListItem?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Float?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Float?>.Publisher, Float>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<Float?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Float?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Float?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Float?>.Publisher, Float> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Float?>.Publisher, Float>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

{
  return a1 & 0xFFFFFFFFFFLL | (((a1 >> 40) & 1) << 40);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1)
{
  return a1;
}

{
  outlined copy of [Data]??(a1);
  return a1;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1, uint64_t a2)
{
  return a1;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return outlined copy of Data??(a1, a2);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(int a1)
{
  return a1 & 0x1FFFF;
}

{
  return a1 & 0x1FFFFFF;
}

void *specialized closure #1 in SafePublished.projectedValue.getter(void *a1)
{
  return a1;
}

uint64_t specialized SafePublished.setValue(_:)(uint64_t a1)
{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

void specialized SafePublished.init(observedValuekeypath:)()
{
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  OUTLINED_FUNCTION_8_0();
  id v3 = v2;
  uint64_t v5 = v4;
  uint64_t v22 = v6;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v7);
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_73();
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  id v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  objc_super v17 = (char *)&v21 - v16;
  OUTLINED_FUNCTION_11_0();
  uint64_t v19 = v0 + *(void *)(v18 + 112);
  id v20 = __swift_instantiateConcreteTypeFromMangledName(v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v17, 1, 1, v20);
  outlined init with copy of Measurement<CAFUnitPercent>?((uint64_t)v17, (uint64_t)v15, v5);
  Published.init(initialValue:)();
  outlined destroy of Measurement<NSUnitTemperature>?((uint64_t)v17, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v19, v1, v8);
  *(void *)(v0 + 16) = v22;
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  Published.init(initialValue:)();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  Published.init(initialValue:)();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_86();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_86();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_86();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  OUTLINED_FUNCTION_86();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  Published.init(initialValue:)();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_82();
  OUTLINED_FUNCTION_63(v1, v2);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_1_0();
  __swift_instantiateConcreteTypeFromMangledName(v0);
  Published.init(initialValue:)();
  uint64_t v4 = OUTLINED_FUNCTION_50();
  v5(v4);
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_81();
}

uint64_t specialized SafeReadOnlyPublished.value.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTemperatureObservable();
  v10[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v10[5] = v6;
  uint64_t v8 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v7, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  v10[6] = v8;
  swift_getKeyPath();
  v10[0] = v5;
  v10[1] = v6;
  v10[2] = v8;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitLength>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTripObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFInteriorConditionsObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFInteriorConditionsObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEngineTemperatureObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineTemperatureObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEngineTemperatureObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineTemperatureObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFChargingTimeObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingTimeObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFExteriorConditionsObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFExteriorConditionsObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFExteriorConditionsObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFExteriorConditionsObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFHistoricalNotificationObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEnginePowerObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEnginePowerObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPower>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEnginePowerObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEnginePowerObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFFuelConsumptionObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelConsumptionObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFRemainingRangeObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRemainingRangeObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFOdometerObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFOdometerObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTargetSpeedObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTargetSpeedObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFBatteryTemperatureObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryTemperatureObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFBatteryTemperatureObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryTemperatureObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFTirePressureObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEngineRPMObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineRPMObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFEngineRPMObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineRPMObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFNowPlayingObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFChargingRateObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingRateObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFChargingRateObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingRateObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFBatteryLevelObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFBatteryLevelObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFDisplayedSpeedObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFDisplayedSpeedObservable and conformance CAFDisplayedSpeedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDisplayedSpeedObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFFuelLevelObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void v9[8];

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  MEMORY[0x270FA5388](v2 - 8);
  uint64_t v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CAFFuelLevelObservable();
  v9[4] = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  v9[5] = v6;
  uint64_t v7 = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  v9[6] = v7;
  swift_getKeyPath();
  v9[0] = v5;
  v9[1] = v6;
  v9[2] = v7;
  swift_getKeyPath();
  outlined init with copy of Measurement<CAFUnitPercent>?(a1, (uint64_t)v4, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
  swift_retain();
  static Published.subscript.setter();
  return outlined destroy of Measurement<NSUnitTemperature>?(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

uint64_t specialized SafeReadOnlyPublished.value.setter()
{
  type metadata accessor for CAFTemperatureObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, v0, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  return static Published.subscript.setter();
}

void specialized SafeReadOnlyPublished.value.setter()
{
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFClimateControlsLockedObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFZonesSyncedObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSeatHeatingCoolingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFVentObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFVentTypes]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVentObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFVentObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVentObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFButtonSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFButtonSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFButtonSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFButtonSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFTripObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTripObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFTypeTestIndexByUnitObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFEngineTemperatureObservable();
  type metadata accessor for CAFTemperatureState(0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineTemperatureObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFLocalNotificationObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFUIInputDeviceButtonObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFUIInputDevicePurpose(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFUIInputDeviceButtonObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFUIInputDeviceButtonEvent(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFUIInputDeviceButtonObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFAutoClimateControlObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFStaticSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFStaticSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFStaticSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFStaticSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFStaticSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFClosureStateObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFClosureStateObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFPairedDevicesInformationObservable();
  OUTLINED_FUNCTION_47();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFPairedDeviceList);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFCriticalInputStreamObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFProtocolPerfTestObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  static Published.subscript.setter();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFProtocolPerfTestObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFProtocolPerfTestObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFGearRecommendationObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFGearRecommendationObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFHistoricalNotificationObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFHistoricalNotificationObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFHistoricalNotificationUserActions?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFCameraButtonObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFCameraButtonObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFTypeTestMultiObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFTypeTestMultiObservable();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTypeTestMultiObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFRequestContentObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRequestContentObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFVehicleInformationObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFVolumeObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFVolumeType(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVolumeObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFVolumeObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVolumeObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFDriveModeObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDriveModeObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFDriveModeObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDriveModeObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFEqualizerObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFEqualizerType(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEqualizerObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFEqualizerObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEqualizerObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFBooleanSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFBooleanSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFBooleanSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFBooleanSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMediaSourceObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMediaSourceObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItems?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFMediaSourceObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFMediaSourceObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFMediaSourceSemanticType(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFMediaSourceObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItemImages?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFFanObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFanObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFDefrostObservable();
  OUTLINED_FUNCTION_110();
  type metadata accessor for CAFDefrostTypes(0);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFDefrostObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFPickerObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFPickerObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFPickerObservable();
  OUTLINED_FUNCTION_47();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFEntryList);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFPickerObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTargetSpeedObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFTargetSpeedState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTargetSpeedObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFBatteryTemperatureObservable();
  type metadata accessor for CAFTemperatureState(0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryTemperatureObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFTirePressureObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFSensorState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFTirePressureObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFPressureState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFTirePressureObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFEngineRPMObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFRotationalSpeedState?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFEngineRPMObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSeatFanObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatFanObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSingleSelectSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSingleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  type metadata accessor for CAFUnitType(0);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFIntegerSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFIntegerSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFIntegerSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFIntegerSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFNowPlayingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFNowPlayingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFNowPlayingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFPlaybackState?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFNowPlayingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFRemoteNotificationObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFRemoteNotificationObservable();
  OUTLINED_FUNCTION_47();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFNotificationUserActions);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFRemoteNotificationObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFSymbolImageWithColor?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSettingsSectionObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFTypeTestWithStatesObservable();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTypeTestWithStatesObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFDeepLinkSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFDeepLinkSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFDeepLinkSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFDeepLinkSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFDeepLinkSettingObservable and conformance CAFDeepLinkSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFDeepLinkSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFSeatBeltObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatBeltObservable and conformance CAFSeatBeltObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatBeltObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSeatBeltObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeatOccupancy?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatBeltObservable and conformance CAFSeatBeltObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatBeltObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSeatBeltObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFLockState?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatBeltObservable and conformance CAFSeatBeltObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatBeltObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSeatBeltObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFSeatBeltIndicator(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatBeltObservable and conformance CAFSeatBeltObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatBeltObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFBatteryLevelObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFBatteryLevelState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  type metadata accessor for CAFTypeTestObservable();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTypeTestObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFTypeTestIndexByPositionObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByPositionObservable and conformance CAFTypeTestIndexByPositionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByPositionObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTransmissionStatusObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFTransmissionMode(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTransmissionStatusObservable and conformance CAFTransmissionStatusObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTransmissionStatusObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFVehicleVariantObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFVehicleVariantObservable and conformance CAFVehicleVariantObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVehicleVariantObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFChargingStatusObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFChargingState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFChargingStatusObservable and conformance CAFChargingStatusObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingStatusObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFChargingStatusObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFCableState?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFChargingStatusObservable and conformance CAFChargingStatusObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingStatusObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFChargingStatusObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFPortSideIndicator?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFChargingStatusObservable and conformance CAFChargingStatusObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFChargingStatusObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFUIStateObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFUISceneState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFUIStateObservable and conformance CAFUIStateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFUIStateObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFUIStateObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFUIStateObservable and conformance CAFUIStateObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFUIStateObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFFuelLevelObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFFuelLevelState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFFuelLevelObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFFillLevelLabel(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFFuelLevelObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFPortSideIndicator(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFFuelLevelObservable and conformance CAFFuelLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFuelLevelObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_38();
  type metadata accessor for CAFFloatSettingObservable();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_33();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_24();
  OUTLINED_FUNCTION_29();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  void (*v0)(void);

  OUTLINED_FUNCTION_30();
  v0(0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFFloatSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFFloatSettingObservable();
  OUTLINED_FUNCTION_61();
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafeReadOnlyPublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_70();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFFloatSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

uint64_t specialized SafeReadOnlyPublished.projectedValue.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>.Publisher);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x270FA5388](v0);
  uint64_t v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<String?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<String?>.Publisher);
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<String?>.Publisher, String> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<String?>.Publisher, String>);
  uint64_t v8 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v8;
}

#error "2493ADBB8: call analysis failed (funcsize=9)"

char *keypath_get_selector_currentTemperature()
{
  return sel_currentTemperature;
}

void specialized SafeReadOnlyPublished.projectedValue.getter()
{
  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSettingsCategory?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSettingsCategory?>.Publisher, CAFSettingsCategory>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSettingsCategory?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFSettingsCategory(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSettingsCategory?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSettingsCategory?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSettingsCategory?>.Publisher, CAFSettingsCategory> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSettingsCategory?>.Publisher, CAFSettingsCategory>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFProminenceInformation??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFProminenceInformation??>.Publisher, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFProminenceInformation??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFProminenceInformation?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFProminenceInformation??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFProminenceInformation??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFProminenceInformation??>.Publisher, CAFProminenceInformation?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFProminenceInformation??>.Publisher, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[String]?>.Publisher, [String]>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[String]?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[String]?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[String]?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[String]?>.Publisher, [String]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[String]?>.Publisher, [String]>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]?>.Publisher, [Data]>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[Data]?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[Data]?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[Data]?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[Data]?>.Publisher, [Data]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[Data]?>.Publisher, [Data]>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[CAFVentTypes]?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<[CAFVentTypes]?>.Publisher, [CAFVentTypes]>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<[CAFVentTypes]?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFVentTypes]);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<[CAFVentTypes]?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<[CAFVentTypes]?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<[CAFVentTypes]?>.Publisher, [CAFVentTypes]> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<[CAFVentTypes]?>.Publisher, [CAFVentTypes]>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>??>.Publisher, Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitLength>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>??>.Publisher, Measurement<NSUnitLength>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>??>.Publisher, Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitEnergy>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitEnergy>??>.Publisher, Measurement<NSUnitEnergy>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitEnergy>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitEnergy>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitEnergy>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitEnergy>??>.Publisher, Measurement<NSUnitEnergy>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitEnergy>??>.Publisher, Measurement<NSUnitEnergy>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher, Measurement<CAFUnitEnergyEfficiency>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitEnergyEfficiency>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher, Measurement<CAFUnitEnergyEfficiency>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitEnergyEfficiency>??>.Publisher, Measurement<CAFUnitEnergyEfficiency>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>??>.Publisher, Measurement<NSUnitFuelEfficiency>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitFuelEfficiency>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>??>.Publisher, Measurement<NSUnitFuelEfficiency>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>??>.Publisher, Measurement<NSUnitFuelEfficiency>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType?>.Publisher, CAFUnitType>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUnitType?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFUnitType(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUnitType?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUnitType?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUnitType?>.Publisher, CAFUnitType> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUnitType?>.Publisher, CAFUnitType>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitAirQuality>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>?>.Publisher, Measurement<NSUnitTemperature>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTemperatureState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTemperatureState?>.Publisher, CAFTemperatureState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTemperatureState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTemperatureState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTemperatureState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTemperatureState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTemperatureState?>.Publisher, CAFTemperatureState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTemperatureState?>.Publisher, CAFTemperatureState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitTemperature>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitTemperature>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitTemperature>??>.Publisher, Measurement<NSUnitTemperature>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDevicePurpose?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUIInputDevicePurpose?>.Publisher, CAFUIInputDevicePurpose>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDevicePurpose?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFUIInputDevicePurpose(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUIInputDevicePurpose?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUIInputDevicePurpose?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUIInputDevicePurpose?>.Publisher, CAFUIInputDevicePurpose> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUIInputDevicePurpose?>.Publisher, CAFUIInputDevicePurpose>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDeviceButtonEvent?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUIInputDeviceButtonEvent?>.Publisher, CAFUIInputDeviceButtonEvent>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUIInputDeviceButtonEvent?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFUIInputDeviceButtonEvent(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUIInputDeviceButtonEvent?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUIInputDeviceButtonEvent?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUIInputDeviceButtonEvent?>.Publisher, CAFUIInputDeviceButtonEvent> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUIInputDeviceButtonEvent?>.Publisher, CAFUIInputDeviceButtonEvent>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPairedDeviceList?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPairedDeviceList?>.Publisher, CAFPairedDeviceList>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPairedDeviceList?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFPairedDeviceList);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFPairedDeviceList?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFPairedDeviceList?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPairedDeviceList?>.Publisher, CAFPairedDeviceList> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPairedDeviceList?>.Publisher, CAFPairedDeviceList>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitAirQuality>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitAirQuality>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitAirQuality>??>.Publisher, Measurement<CAFUnitAirQuality>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt32?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt32?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt32?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt32?>.Publisher, UInt32>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt16?>.Publisher, UInt16>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<UInt16?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<UInt16?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<UInt16?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<UInt16?>.Publisher, UInt16> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<UInt16?>.Publisher, UInt16>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>?>.Publisher, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFHistoricalNotificationUserActions??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFHistoricalNotificationUserActions??>.Publisher, CAFHistoricalNotificationUserActions?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFHistoricalNotificationUserActions??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFHistoricalNotificationUserActions?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFHistoricalNotificationUserActions??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFHistoricalNotificationUserActions??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFHistoricalNotificationUserActions??>.Publisher, CAFHistoricalNotificationUserActions?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFHistoricalNotificationUserActions??>.Publisher, CAFHistoricalNotificationUserActions?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSelectSettingEntryList?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSelectSettingEntryList?>.Publisher, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSelectSettingEntryList?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFSelectSettingEntryList);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSelectSettingEntryList?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSelectSettingEntryList?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSelectSettingEntryList?>.Publisher, CAFSelectSettingEntryList> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSelectSettingEntryList?>.Publisher, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>??>.Publisher, Measurement<NSUnitPower>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitPower>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>??>.Publisher, Measurement<NSUnitPower>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>??>.Publisher, Measurement<NSUnitPower>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVolumeType?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFVolumeType?>.Publisher, CAFVolumeType>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVolumeType?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFVolumeType(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFVolumeType?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFVolumeType?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFVolumeType?>.Publisher, CAFVolumeType> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFVolumeType?>.Publisher, CAFVolumeType>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>?>.Publisher, Measurement<NSUnitFuelEfficiency>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitFuelEfficiency>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitFuelEfficiency>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>?>.Publisher, Measurement<NSUnitFuelEfficiency>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitFuelEfficiency>?>.Publisher, Measurement<NSUnitFuelEfficiency>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEqualizerType?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFEqualizerType?>.Publisher, CAFEqualizerType>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEqualizerType?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFEqualizerType(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFEqualizerType?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFEqualizerType?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFEqualizerType?>.Publisher, CAFEqualizerType> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFEqualizerType?>.Publisher, CAFEqualizerType>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItems??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaItems??>.Publisher, CAFMediaItems?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItems??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItems?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFMediaItems??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFMediaItems??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaItems??>.Publisher, CAFMediaItems?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaItems??>.Publisher, CAFMediaItems?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaSourceSemanticType?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaSourceSemanticType?>.Publisher, CAFMediaSourceSemanticType>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaSourceSemanticType?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFMediaSourceSemanticType(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFMediaSourceSemanticType?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFMediaSourceSemanticType?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaSourceSemanticType?>.Publisher, CAFMediaSourceSemanticType> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaSourceSemanticType?>.Publisher, CAFMediaSourceSemanticType>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItemImages??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaItemImages??>.Publisher, CAFMediaItemImages?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMediaItemImages??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItemImages?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFMediaItemImages??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFMediaItemImages??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFMediaItemImages??>.Publisher, CAFMediaItemImages?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFMediaItemImages??>.Publisher, CAFMediaItemImages?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitLength>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitLength>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitLength>?>.Publisher, Measurement<NSUnitLength>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDefrostTypes?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFDefrostTypes?>.Publisher, CAFDefrostTypes>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDefrostTypes?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFDefrostTypes(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFDefrostTypes?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFDefrostTypes?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFDefrostTypes?>.Publisher, CAFDefrostTypes> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFDefrostTypes?>.Publisher, CAFDefrostTypes>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEntryList?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFEntryList?>.Publisher, CAFEntryList>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEntryList?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFEntryList);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFEntryList?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFEntryList?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFEntryList?>.Publisher, CAFEntryList> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFEntryList?>.Publisher, CAFEntryList>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTargetSpeedState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTargetSpeedState?>.Publisher, CAFTargetSpeedState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTargetSpeedState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTargetSpeedState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTargetSpeedState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTargetSpeedState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTargetSpeedState?>.Publisher, CAFTargetSpeedState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTargetSpeedState?>.Publisher, CAFTargetSpeedState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSensorState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSensorState?>.Publisher, CAFSensorState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSensorState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFSensorState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSensorState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSensorState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSensorState?>.Publisher, CAFSensorState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSensorState?>.Publisher, CAFSensorState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPressure>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPressure>?>.Publisher, Measurement<NSUnitPressure>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPressure>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPressure>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitPressure>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPressure>?>.Publisher, Measurement<NSUnitPressure>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPressure>?>.Publisher, Measurement<NSUnitPressure>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPressureState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPressureState?>.Publisher, CAFPressureState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPressureState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFPressureState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFPressureState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFPressureState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPressureState?>.Publisher, CAFPressureState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPressureState?>.Publisher, CAFPressureState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher, Measurement<CAFUnitRotationalSpeed>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher, Measurement<CAFUnitRotationalSpeed>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>?>.Publisher, Measurement<CAFUnitRotationalSpeed>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFRotationalSpeedState??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFRotationalSpeedState??>.Publisher, CAFRotationalSpeedState?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFRotationalSpeedState??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFRotationalSpeedState?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFRotationalSpeedState??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFRotationalSpeedState??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFRotationalSpeedState??>.Publisher, CAFRotationalSpeedState?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFRotationalSpeedState??>.Publisher, CAFRotationalSpeedState?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher, Measurement<CAFUnitRotationalSpeed>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher, Measurement<CAFUnitRotationalSpeed>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitRotationalSpeed>??>.Publisher, Measurement<CAFUnitRotationalSpeed>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Data?>.Publisher, Data>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  Published.projectedValue.getter();
  swift_endAccess();
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Data?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Data?>.Publisher);
  OUTLINED_FUNCTION_18();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Data?>.Publisher, Data> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Data?>.Publisher, Data>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitDuration>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitDuration>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitDuration>??>.Publisher, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPlaybackState??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPlaybackState??>.Publisher, CAFPlaybackState?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPlaybackState??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFPlaybackState?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFPlaybackState??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFPlaybackState??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPlaybackState??>.Publisher, CAFPlaybackState?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPlaybackState??>.Publisher, CAFPlaybackState?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationUserActions?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFNotificationUserActions?>.Publisher, CAFNotificationUserActions>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNotificationUserActions?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFNotificationUserActions);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFNotificationUserActions?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFNotificationUserActions?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher((unint64_t *)&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFNotificationUserActions?>.Publisher, CAFNotificationUserActions> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFNotificationUserActions?>.Publisher, CAFNotificationUserActions>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSymbolImageWithColor??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSymbolImageWithColor??>.Publisher, CAFSymbolImageWithColor?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSymbolImageWithColor??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFSymbolImageWithColor?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSymbolImageWithColor??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSymbolImageWithColor??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSymbolImageWithColor??>.Publisher, CAFSymbolImageWithColor?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSymbolImageWithColor??>.Publisher, CAFSymbolImageWithColor?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitPower>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitPower>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitPower>?>.Publisher, Measurement<NSUnitPower>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>??>.Publisher, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatOccupancy??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSeatOccupancy??>.Publisher, CAFSeatOccupancy?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatOccupancy??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeatOccupancy?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSeatOccupancy??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSeatOccupancy??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSeatOccupancy??>.Publisher, CAFSeatOccupancy?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSeatOccupancy??>.Publisher, CAFSeatOccupancy?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFLockState??>.Publisher, CAFLockState?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFLockState??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFLockState?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFLockState??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFLockState??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFLockState??>.Publisher, CAFLockState?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFLockState??>.Publisher, CAFLockState?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatBeltIndicator?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSeatBeltIndicator?>.Publisher, CAFSeatBeltIndicator>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeatBeltIndicator?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFSeatBeltIndicator(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFSeatBeltIndicator?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFSeatBeltIndicator?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFSeatBeltIndicator?>.Publisher, CAFSeatBeltIndicator> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFSeatBeltIndicator?>.Publisher, CAFSeatBeltIndicator>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>?>.Publisher, Measurement<CAFUnitPercent>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFBatteryLevelState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFBatteryLevelState?>.Publisher, CAFBatteryLevelState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFBatteryLevelState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFBatteryLevelState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFBatteryLevelState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFBatteryLevelState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFBatteryLevelState?>.Publisher, CAFBatteryLevelState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFBatteryLevelState?>.Publisher, CAFBatteryLevelState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTransmissionMode?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTransmissionMode?>.Publisher, CAFTransmissionMode>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTransmissionMode?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFTransmissionMode(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFTransmissionMode?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFTransmissionMode?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFTransmissionMode?>.Publisher, CAFTransmissionMode> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFTransmissionMode?>.Publisher, CAFTransmissionMode>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<NSUnitSpeed>?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<NSUnitSpeed>?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<NSUnitSpeed>?>.Publisher, Measurement<NSUnitSpeed>>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFChargingState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFChargingState?>.Publisher, CAFChargingState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFChargingState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFChargingState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFChargingState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFChargingState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFChargingState?>.Publisher, CAFChargingState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFChargingState?>.Publisher, CAFChargingState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCableState??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFCableState??>.Publisher, CAFCableState?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCableState??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFCableState?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFCableState??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFCableState??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFCableState??>.Publisher, CAFCableState?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFCableState??>.Publisher, CAFCableState?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPortSideIndicator??>.Publisher, CAFPortSideIndicator?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFPortSideIndicator?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFPortSideIndicator??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFPortSideIndicator??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPortSideIndicator??>.Publisher, CAFPortSideIndicator?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPortSideIndicator??>.Publisher, CAFPortSideIndicator?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUISceneState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUISceneState?>.Publisher, CAFUISceneState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFUISceneState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFUISceneState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFUISceneState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFUISceneState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFUISceneState?>.Publisher, CAFUISceneState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFUISceneState?>.Publisher, CAFUISceneState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFuelLevelState?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFFuelLevelState?>.Publisher, CAFFuelLevelState>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFuelLevelState?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFFuelLevelState(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFFuelLevelState?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFFuelLevelState?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFFuelLevelState?>.Publisher, CAFFuelLevelState> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFFuelLevelState?>.Publisher, CAFFuelLevelState>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>);
  Published.projectedValue.getter();
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<Measurement<CAFUnitPercent>??>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<Measurement<CAFUnitPercent>??>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<Measurement<CAFUnitPercent>??>.Publisher, Measurement<CAFUnitPercent>?>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFillLevelLabel?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFFillLevelLabel?>.Publisher, CAFFillLevelLabel>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFillLevelLabel?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFFillLevelLabel(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFFillLevelLabel?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFFillLevelLabel?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFFillLevelLabel?>.Publisher, CAFFillLevelLabel> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFFillLevelLabel?>.Publisher, CAFFillLevelLabel>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);
  uint64_t v4;
  void (*v5)(uint64_t);

  OUTLINED_FUNCTION_8_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_3_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPortSideIndicator?>.Publisher, CAFPortSideIndicator>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v1);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_5_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPortSideIndicator?>);
  Published.projectedValue.getter();
  swift_endAccess();
  type metadata accessor for CAFPortSideIndicator(0);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Published<CAFPortSideIndicator?>.Publisher and conformance Published<A>.Publisher, &demangling cache variable for type metadata for Published<CAFPortSideIndicator?>.Publisher);
  OUTLINED_FUNCTION_6_0();
  uint64_t v2 = OUTLINED_FUNCTION_4_0();
  v3(v2);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type Publishers.CompactMap<Published<CAFPortSideIndicator?>.Publisher, CAFPortSideIndicator> and conformance Publishers.CompactMap<A, B>, &demangling cache variable for type metadata for Publishers.CompactMap<Published<CAFPortSideIndicator?>.Publisher, CAFPortSideIndicator>);
  OUTLINED_FUNCTION_9_0();
  uint64_t v4 = OUTLINED_FUNCTION_2_0();
  v5(v4);
  OUTLINED_FUNCTION_13_0();
  OUTLINED_FUNCTION_8();
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
}

{
  return outlined init with copy of Measurement<CAFUnitPercent>?(a1, a2, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

void *specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(void *a1)
{
  id v2 = a1;
  return a1;
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  return outlined copy of Data?(a1, a2);
}

uint64_t specialized SafeReadOnlyPublished.setValue(_:)(uint64_t a1)
{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitLength>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitPower>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitPressure>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>??);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<NSUnitDuration>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
}

{
  return specialized SafePublished.setValue(_:)(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

{
  return specialized SafeReadOnlyPublished.setValue(_:)(a1, &demangling cache variable for type metadata for Measurement<CAFUnitPercent>??);
}

uint64_t specialized SafePublished.setValue(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_112(a1, a2);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v6 = OUTLINED_FUNCTION_91();
  OUTLINED_FUNCTION_73();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v4, v3, v6);
  __swift_storeEnumTagSinglePayload(v4, 0, 1, v6);
  return v2(v4);
}

uint64_t specialized SafeReadOnlyPublished.setValue(_:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = OUTLINED_FUNCTION_112(a1, a2);
  MEMORY[0x270FA5388](v5 - 8);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Measurement<CAFUnitPercent>?(v4, (uint64_t)v7, v3);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(v3);
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, v8);
  return v2(v7);
}

void specialized SafeReadOnlyPublished.init(observedValuekeypath:)()
{
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

{
  specialized SafePublished.init(observedValuekeypath:)();
}

uint64_t specialized SafeReadOnlyPublished.init(observedValuekeypath:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDefrostTypes?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFDefrostTypes?);
  OUTLINED_FUNCTION_80();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_80();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

uint64_t specialized SafePublished.init(observedValuekeypath:)()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Data??>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data??);
  OUTLINED_FUNCTION_80();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  Published.init(initialValue:)();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String??>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String??);
  OUTLINED_FUNCTION_80();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<String?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_80();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<Bool??>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v0);
  OUTLINED_FUNCTION_11_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool??);
  Published.init(initialValue:)();
  uint64_t v1 = OUTLINED_FUNCTION_51();
  v2(v1);
  return OUTLINED_FUNCTION_65();
}

uint64_t key path getter for CAFTemperature.currentTemperature : CAFTemperature@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_currentTemperature);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

char *keypath_get_selector_targetTemperature()
{
  return sel_targetTemperature;
}

void key path getter for CAFTemperature.targetTemperature : CAFTemperature(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_targetTemperature);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void key path setter for CAFTemperature.targetTemperature : CAFTemperature(uint64_t a1, void **a2)
{
  id v2 = *a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  NSMeasurement v5 = Measurement._bridgeToObjectiveC()();
  Class isa = v5.super.isa;
  objc_msgSend(v2, sel_setTargetTemperature_, v5.super.isa, v5._doubleValue);
}

char *keypath_get_selector_vehicleLayoutKey()
{
  return sel_vehicleLayoutKey;
}

void sub_2493B5C48(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_name()
{
  return sel_name;
}

void key path getter for CAFTemperature.vehicleLayoutKey : CAFTemperature(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *a3 = v5;
  a3[1] = v7;
}

void sub_2493B5CC8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFTemperatureObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTemperature(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTemperature and conformance CAFTemperature()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature;
  if (!lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTemperature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTemperature and conformance CAFTemperature);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTemperatureObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTemperatureObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTemperatureObservable);
}

uint64_t dispatch thunk of CAFTemperatureObservable.currentTemperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$currentTemperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.targetTemperature.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$targetTemperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTemperatureObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t sub_2493B609C()
{
  return 24;
}

__n128 sub_2493B60A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(void))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(void))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  uint64_t result;

  __n128 result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(unint64_t))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(unint64_t))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(unsigned __int16 *a1)
{
  return specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(a1);
}

{
  return specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(a1);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  id v2 = OUTLINED_FUNCTION_117(a1);
  __n128 result = v3(v2);
  *(_WORD *)id v1 = result;
  *(unsigned char *)(v1 + 2) = BYTE2(result) & 1;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t result;

  id v2 = OUTLINED_FUNCTION_117(a1);
  __n128 result = v3(v2);
  *(_WORD *)id v1 = result;
  *(unsigned char *)(v1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  a2[1] = v4;
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  uint64_t result = specialized closure #1 in SafePublished.projectedValue.getter(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  return result;
}

{
  uint64_t result;

  uint64_t result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned __int16 *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(void))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

{
  return specialized closure #1 in SafePublished.projectedValue.getter(a1, (uint64_t (*)(void))specialized closure #1 in SafePublished.projectedValue.getter, a2);
}

void specialized closure #1 in SafePublished.projectedValue.getter(uint64_t a1@<X8>)
{
  specialized closure #1 in SafePublished.projectedValue.getter();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 9) = v4 & 1;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

void specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(uint64_t a1@<X8>)
{
  specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

void *specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return specialized closure #1 in SafePublished.projectedValue.getter(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter(unsigned __int16 *a1)
{
  return specialized closure #1 in SafeReadOnlyPublished.projectedValue.getter(a1);
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned __int16 *a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (*((unsigned __int8 *)a1 + 3) << 24));
  *(_WORD *)a3 = result;
  *(unsigned char *)(a3 + 2) = BYTE2(result);
  *(unsigned char *)(a3 + 3) = BYTE3(result) & 1;
  return result;
}

void *specialized closure #1 in SafePublished.projectedValue.getter@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t result = specialized closure #1 in SafePublished.projectedValue.getter(*a1);
  *a2 = result;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(unint64_t)@<X1>, uint64_t a3@<X8>)
{
  uint64_t result = a2(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1
                                                                                                + 5) << 40));
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result);
  *(unsigned char *)(a3 + 5) = BYTE5(result) & 1;
  return result;
}

{
  uint64_t result;

  uint64_t result = a2(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
  *(_DWORD *)a3 = result;
  *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t specialized closure #1 in SafePublished.projectedValue.getter@<X0>(unsigned __int8 *a1@<X0>, uint64_t (*a2)(void)@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = a2(*a1 | (a1[1] << 8));
  *a3 = result;
  a3[1] = BYTE1(result) & 1;
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  if (a2 != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of [Data]??(uint64_t result)
{
  if (result != 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined copy of Data??(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return outlined copy of Data?(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined copy of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_retain();
  }

  return swift_retain();
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }

  return swift_release();
}

id outlined copy of CAFMediaItems??(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t type metadata accessor for CAFTemperature(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t outlined init with copy of Measurement<CAFUnitPercent>?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_73();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of Measurement<NSUnitTemperature>?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_73();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t partial apply for closure #1 in CAFTemperatureObservable.resetCachedDescription()()
{
  return CAFTemperatureObservable.cachedDescription.setter(0, 0);
}

uint64_t lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_2_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_4_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_0()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_6_0()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_9_0()
{
  return Publisher.eraseToAnyPublisher()();
}

uint64_t OUTLINED_FUNCTION_10_0()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

char *OUTLINED_FUNCTION_12_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_13_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_17()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_18()
{
  return Publisher.compactMap<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_20()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_21()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_23()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_24()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_26()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_27()
{
  *(unsigned char *)(v1 - 50) = v0;
  *(unsigned char *)(v1 - 49) = HIBYTE(v0) & 1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_31()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_32()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_34()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_38()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_39()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_40()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_41()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_42()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_43()
{
  *(_WORD *)(v1 - 52) = v0;
  *(unsigned char *)(v1 - 50) = BYTE2(v0) & 1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_44()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_45()
{
  return dispatch thunk of ObservableObject.objectWillChange.getter();
}

uint64_t OUTLINED_FUNCTION_46()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_48()
{
  return swift_retain();
}

char *OUTLINED_FUNCTION_49(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_50()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_51()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52()
{
  return v0 & 0x1FFFFFFFFLL;
}

uint64_t OUTLINED_FUNCTION_53()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_54()
{
  return swift_setAtReferenceWritableKeyPath();
}

uint64_t OUTLINED_FUNCTION_55()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_59()
{
  return 0;
}

id OUTLINED_FUNCTION_60()
{
  return v0;
}

void OUTLINED_FUNCTION_61()
{
  type metadata accessor for CAFSettingsCategory(0);
}

uint64_t OUTLINED_FUNCTION_62()
{
  *(void *)(v0 + 16) = v1;
  return v0;
}

uint64_t OUTLINED_FUNCTION_63(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_64()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_65()
{
  *(void *)(v1 + 16) = v0;
  return v1;
}

uint64_t OUTLINED_FUNCTION_67()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_68()
{
  return type metadata accessor for CAFHistoricalNotificationObservable();
}

uint64_t OUTLINED_FUNCTION_70()
{
  return lazy protocol witness table accessor for type CAFTemperatureObservable and conformance CAFTemperatureObservable(v1, 255, v0);
}

uint64_t OUTLINED_FUNCTION_71()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_72()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_74()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_75()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_76()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_77()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_78()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_79()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_83()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_84()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_86()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_88()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_89()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_90()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_91()
{
  return __swift_instantiateConcreteTypeFromMangledName(v0);
}

uint64_t OUTLINED_FUNCTION_92()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_93()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_96()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_97()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_98()
{
  return type metadata accessor for CAFFanObservable();
}

uint64_t OUTLINED_FUNCTION_99()
{
  return type metadata accessor for CAFSoundDistributionObservable();
}

uint64_t OUTLINED_FUNCTION_100()
{
  return type metadata accessor for CAFSeatHeatingCoolingObservable();
}

uint64_t OUTLINED_FUNCTION_101()
{
  return type metadata accessor for CAFCameraButtonObservable();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return type metadata accessor for CAFAutoClimateControlObservable();
}

uint64_t OUTLINED_FUNCTION_103()
{
  return type metadata accessor for CAFVentObservable();
}

uint64_t OUTLINED_FUNCTION_104()
{
  return type metadata accessor for CAFSeatFanObservable();
}

uint64_t OUTLINED_FUNCTION_108()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_109()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_111()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_112(uint64_t a1, uint64_t *a2)
{
  return __swift_instantiateConcreteTypeFromMangledName(a2);
}

uint64_t OUTLINED_FUNCTION_116()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_117(unsigned __int16 *a1)
{
  return *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
}

void one-time initialization function for allCases()
{
  static CAFLockState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFMediaCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFVentTypes.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSeatOccupancy.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFFuelLevelState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPlaybackState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUIInputDeviceButtonEvent.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFButtonAction.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFMediaSourceSemanticType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUIInputDevicePurpose.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFCableState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFChargingState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFBatteryLevelState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFEqualizerType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSensorState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTemperatureState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFImageColor.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSeatBeltIndicator.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTransmissionMode.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFFillLevelLabel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFUISceneState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFRotationalSpeedState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFNotificationSeverity.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFTargetSpeedState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSettingProminenceLevel.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFVolumeType.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFDefrostTypes.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPairedDeviceState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPressureState.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFAutoModeIntensity.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFPortSideIndicator.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

{
  static CAFSettingsCategory.allCases = (uint64_t)&outlined read-only object #0 of one-time initialization function for allCases;
}

uint64_t static CAFLockState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFLockState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFLockState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFLockState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFLockState.description.getter()
{
  id v0 = (id)NSStringFromLockState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFLockState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState);
  a1[2] = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState);
  uint64_t result = lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(&lazy protocol witness table cache variable for type CAFLockState and conformance CAFLockState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFLockState and conformance CAFLockState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFLockState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFLockState()
{
  return CAFLockState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFLockState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFLockState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFLockState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFLockState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFLockState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFLockState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFLockState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in CAFLockState()
{
  return MEMORY[0x263F8D320];
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFLockState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void CAFAccessory.id.getter()
{
  id v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

void protocol witness for Identifiable.id.getter in conformance CAFAccessory()
{
}

id CAFClimateControlsLockedObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
}

uint64_t CAFClimateControlsLockedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFClimateControlsLockedObservable.lockState : CAFClimateControlsLockedObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFClimateControlsLockedObservable.lockState.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFClimateControlsLockedObservable.lockState : CAFClimateControlsLockedObservable(unsigned __int8 *a1)
{
  return CAFClimateControlsLockedObservable.lockState.setter(*a1);
}

uint64_t CAFClimateControlsLockedObservable.lockState.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFClimateControlsLockedObservable.lockState.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFClimateControlsLockedObservable.lockState.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFClimateControlsLockedObservable.lockState.modify;
}

void CAFClimateControlsLockedObservable.lockState.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFClimateControlsLockedObservable.$lockState.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFClimateControlsLockedObservable.vehicleLayoutKey.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter()
{
  return CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClimateControlsLockedObservable.name.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFClimateControlsLockedObservable.$name.getter()
{
  return CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFClimateControlsLockedObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForLockState))
  {
    CAFClimateControlsLockedObservable.lockState.getter();
    id v4 = (id)NSStringFromLockState();
    if (v4)
    {
      id v5 = v4;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v6;
    }
    else
    {
      uint64_t v3 = (void *)0xE900000000000029;
      uint64_t v2 = 0x6E776F6E6B6E7528;
    }
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    CAFClimateControlsLockedObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(80);
  v7._countAndFlagsBits = 0xD000000000000025;
  v7._object = (void *)0x8000000249485E30;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0x536B636F6C207B20;
  v8._object = (void *)0xEE00203A65746174;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v2;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000249485D90;
  v10._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v10);
  v11._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 4095264;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t CAFClimateControlsLockedObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFClimateControlsLockedObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFClimateControlsLockedObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFClimateControlsLockedObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFClimateControlsLockedObservable.init(_:)(a1);
}

id CAFClimateControlsLockedObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__lockState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFClimateControlsLockedObservable, CAFLockState>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__vehicleLayoutKey;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClimateControlsLockedObservable, String?>);
  swift_allocObject();
  *(void *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable__name;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClimateControlsLockedObservable, String>);
  swift_allocObject();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFClimateControlsLockedObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFClimateControlsLockedObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFClimateControlsLockedObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine34CAFClimateControlsLockedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFClimateControlsLockedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFClimateControlsLockedObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFClimateControlsLockedObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFClimateControlsLockedObservable@<X0>(void *a1@<X8>)
{
  id result = CAFClimateControlsLockedObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493B8460@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFClimateControlsLockedObservable.lockState.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493B848C(unsigned __int8 *a1)
{
  return CAFClimateControlsLockedObservable.lockState.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFClimateControlsLockedObservable(void **a1)
{
  return CAFClimateControlsLockedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFClimateControlsLockedObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFClimateControlsLockedObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateLockState:)()
{
  return swift_release();
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFClimateControlsLockedObservable.climateControlsLockedService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFClimateControlsLockedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFClimateControlsLockedObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFClimateControlsLockedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t specialized SafePublished.value.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_31_0();
  type metadata accessor for CAFTemperatureObservable();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTemperatureObservable and conformance CAFTemperatureObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTemperatureObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_48_0();
  swift_retain();
  OUTLINED_FUNCTION_43_0();
  return outlined destroy of CAUVehicleLayoutKey?(a1, &demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
}

{
  uint64_t v2;

  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
  MEMORY[0x270FA5388](v2 - 8);
  OUTLINED_FUNCTION_31_0();
  type metadata accessor for CAFBatteryLevelObservable();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitPercent>);
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFBatteryLevelObservable and conformance CAFBatteryLevelObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFBatteryLevelObservable);
  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_48_0();
  swift_retain();
  OUTLINED_FUNCTION_43_0();
  return outlined destroy of CAUVehicleLayoutKey?(a1, (uint64_t *)&demangling cache variable for type metadata for Measurement<CAFUnitPercent>?);
}

void specialized SafePublished.value.setter()
{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFClimateControlsLockedObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFLockState(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, v1, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectImageSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFVentObservable();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFVentObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFButtonSettingObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFButtonAction(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTypeTestIndexByUnitObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  void (*v0)(void);

  OUTLINED_FUNCTION_95();
  v0(0);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFAutoClimateControlObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFAutoClimateControlObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFAutoModeIntensity?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFProtocolPerfTestObservable();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  void (*v0)(void);

  OUTLINED_FUNCTION_30();
  v0(0);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  swift_getKeyPath();
  swift_retain();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_29();
}

{
  uint64_t v0;

  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFHistoricalNotificationObservable();
  uint64_t v0 = OUTLINED_FUNCTION_53();
  type metadata accessor for CAFNotificationSeverity(v0);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFHistoricalNotificationObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFHistoricalNotificationObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFCameraButtonObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFCameraButtonObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_44_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_18_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestMultiObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFMultipleSelectSettingObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt8]);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFMultipleSelectSettingObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);

  OUTLINED_FUNCTION_95();
  uint64_t v0 = OUTLINED_FUNCTION_67();
  v1(v0);
  OUTLINED_FUNCTION_20_0();
  OUTLINED_FUNCTION_107();
  swift_getKeyPath();
  OUTLINED_FUNCTION_87();
  swift_getKeyPath();
  OUTLINED_FUNCTION_38_0();
  OUTLINED_FUNCTION_79();
  OUTLINED_FUNCTION_94();
}

{
  OUTLINED_FUNCTION_36();
  type metadata accessor for CAFSoundDistributionObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFSoundDistributionObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_46_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_19_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestWithStatesObservable and conformance CAFTypeTestWithStatesObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestWithStatesObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  specialized SafePublished.value.setter();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_13_1();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_30();
  OUTLINED_FUNCTION_45_0();
  OUTLINED_FUNCTION_110();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  OUTLINED_FUNCTION_115();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_114();
  swift_getKeyPath();
  OUTLINED_FUNCTION_85();
  swift_getKeyPath();
  OUTLINED_FUNCTION_31();
  OUTLINED_FUNCTION_74();
  OUTLINED_FUNCTION_29();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_43();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_11_1();
  OUTLINED_FUNCTION_21();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexArrayItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexNestedItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedItems?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_17_0();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexNestedListItem?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestObservable and conformance CAFTypeTestObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_44();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFTypeTestIndexByPositionObservable();
  OUTLINED_FUNCTION_47();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
  OUTLINED_FUNCTION_37();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByPositionObservable and conformance CAFTypeTestIndexByPositionObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByPositionObservable);
  OUTLINED_FUNCTION_25();
  swift_getKeyPath();
  OUTLINED_FUNCTION_22();
  swift_getKeyPath();
  OUTLINED_FUNCTION_9_1();
  OUTLINED_FUNCTION_0_1();
  OUTLINED_FUNCTION_35();
}

{
  OUTLINED_FUNCTION_36();
  OUTLINED_FUNCTION_64();
  type metadata accessor for CAFFloatSettingObservable();
  lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFloatSettingObservable and conformance CAFFloatSettingObservable, 255, (void (*)(uint64_t))type metadata accessor for CAFFloatSettingObservable);
  swift_getKeyPath();
  OUTLINED_FUNCTION_105();
  swift_getKeyPath();
  OUTLINED_FUNCTION_40_0();
  OUTLINED_FUNCTION_96();
  OUTLINED_FUNCTION_35();
}

char *keypath_get_selector_lockState()
{
  return sel_lockState;
}

id sub_2493BDC68@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_lockState);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493BDC9C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLockState_, *a1);
}

void key path getter for CAFClimateControlsLocked.vehicleLayoutKey : CAFClimateControlsLocked(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_vehicleLayoutKey);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path getter for CAFService.name : CAFClimateControlsLocked(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_name);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t type metadata accessor for CAFClimateControlsLockedObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFClimateControlsLocked(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFClimateControlsLockedObservable()
{
  return lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLocked and conformance CAFClimateControlsLocked, 255, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLocked);
}

unint64_t type metadata accessor for CAFClimateControlsLocked()
{
  unint64_t result = lazy cache variable for type metadata for CAFClimateControlsLocked;
  if (!lazy cache variable for type metadata for CAFClimateControlsLocked)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFClimateControlsLocked);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFClimateControlsLockedObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(&lazy protocol witness table cache variable for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFClimateControlsLockedObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t method lookup function for CAFClimateControlsLockedObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFClimateControlsLockedObservable);
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.lockState.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$lockState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFClimateControlsLockedObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t sub_2493BE09C()
{
  return 24;
}

__n128 sub_2493BE0A8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t partial apply for closure #1 in CAFClimateControlsLockedObservable.resetCachedDescription()()
{
  return CAFClimateControlsLockedObservable.cachedDescription.setter(0, 0);
}

uint64_t lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s10Foundation11MeasurementVySo14CAFUnitPercentCGSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_1()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_9_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_11_1()
{
  *(unsigned char *)(v1 - 50) = BYTE2(v0);
  *(_WORD *)(v1 - 52) = v0;
  *(unsigned char *)(v1 - 49) = HIBYTE(v0) & 1;
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_13_1()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_18_0()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return lazy protocol witness table accessor for type CAFClimateControlsLockedObservable and conformance CAFClimateControlsLockedObservable(v1, 255, v0);
}

uint64_t OUTLINED_FUNCTION_31_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_40_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_44_0()
{
  return type metadata accessor for CAFTypeTestMultiObservable();
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return type metadata accessor for CAFTypeTestObservable();
}

uint64_t OUTLINED_FUNCTION_46_0()
{
  return type metadata accessor for CAFTypeTestWithStatesObservable();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return _s10Foundation11MeasurementVySo14CAFUnitPercentCGSgWOcTm_0(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return swift_getAtKeyPath();
}

uint64_t static CAFMediaCategory.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFMediaCategory.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFMediaCategory.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFMediaCategory.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFMediaCategory.description.getter()
{
  id v0 = (id)NSStringFromMediaCategory();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFMediaCategory(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory);
  a1[2] = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory);
  uint64_t result = lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(&lazy protocol witness table cache variable for type CAFMediaCategory and conformance CAFMediaCategory);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMediaCategory and conformance CAFMediaCategory(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMediaCategory(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFMediaCategory()
{
  return CAFMediaCategory.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFMediaCategory] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFMediaCategory]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFMediaCategory] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFMediaCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFMediaCategory.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFMediaCategory@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFZonesSyncedObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
}

uint64_t CAFZonesSyncedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFZonesSyncedObservable.on : CAFZonesSyncedObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFZonesSyncedObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFZonesSyncedObservable.on : CAFZonesSyncedObservable(unsigned __int8 *a1)
{
  return CAFZonesSyncedObservable.on.setter(*a1);
}

uint64_t CAFZonesSyncedObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFZonesSyncedObservable.on.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFZonesSyncedObservable.on.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFZonesSyncedObservable.on.modify;
}

void CAFZonesSyncedObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFZonesSyncedObservable.$on.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFZonesSyncedObservable.vehicleLayoutKey.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFZonesSyncedObservable.$vehicleLayoutKey.getter()
{
  return CAFZonesSyncedObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFZonesSyncedObservable.name.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFZonesSyncedObservable.$name.getter()
{
  return CAFZonesSyncedObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFZonesSyncedObservable.$vehicleLayoutKey.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFZonesSyncedObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForOn))
  {
    char v4 = CAFZonesSyncedObservable.on.getter();
    if (v4) {
      uint64_t v2 = 1702195828;
    }
    else {
      uint64_t v2 = 0x65736C6166;
    }
    if (v4) {
      uint64_t v3 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v3 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    CAFZonesSyncedObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(63);
  v5._countAndFlagsBits = 0xD00000000000001BLL;
  v5._object = (void *)0x8000000249485EC0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x203A6E6F207B20;
  v6._object = (void *)0xE700000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000249485D90;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFZonesSyncedObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFZonesSyncedObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFZonesSyncedObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFZonesSyncedObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFZonesSyncedObservable.init(_:)(a1);
}

id CAFZonesSyncedObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFZonesSyncedObservable, Bool>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__vehicleLayoutKey;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFZonesSyncedObservable, String?>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable__name;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFZonesSyncedObservable, String>);
  swift_allocObject();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for CAFZonesSyncedObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFZonesSyncedObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFZonesSyncedObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFZonesSyncedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFZonesSyncedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFZonesSyncedObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFZonesSyncedObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFZonesSyncedObservable@<X0>(void *a1@<X8>)
{
  id result = CAFZonesSyncedObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493BF344@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFZonesSyncedObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2493BF374(unsigned __int8 *a1)
{
  return CAFZonesSyncedObservable.on.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFZonesSyncedObservable(void **a1)
{
  return CAFZonesSyncedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFZonesSyncedObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFZonesSyncedObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFZonesSyncedObservable.zonesSyncedService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFZonesSyncedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFZonesSyncedObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFZonesSyncedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_on()
{
  return sel_on;
}

id sub_2493BF80C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493BF840(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

uint64_t type metadata accessor for CAFZonesSyncedObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFZonesSynced(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable(&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFZonesSyncedObservable()
{
  return lazy protocol witness table accessor for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable(&lazy protocol witness table cache variable for type CAFZonesSynced and conformance CAFZonesSynced, 255, (void (*)(uint64_t))type metadata accessor for CAFZonesSynced);
}

unint64_t type metadata accessor for CAFZonesSynced()
{
  unint64_t result = lazy cache variable for type metadata for CAFZonesSynced;
  if (!lazy cache variable for type metadata for CAFZonesSynced)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFZonesSynced);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFZonesSyncedObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFZonesSyncedObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFZonesSyncedObservable and conformance CAFZonesSyncedObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFZonesSyncedObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFZonesSyncedObservable);
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFZonesSyncedObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t partial apply for closure #1 in CAFZonesSyncedObservable.resetCachedDescription()()
{
  return CAFZonesSyncedObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFVentTypes.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFVentTypes.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFVentTypes.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFVentTypes.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFVentTypes.description.getter()
{
  id v0 = (id)NSStringFromVentTypes();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFVentTypes.hasWindow.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 1);
}

id CAFVentTypes.hasUpper.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 2);
}

id CAFVentTypes.hasLower.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 4);
}

id CAFVentTypes.hasNeck.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 8);
}

id CAFVentTypes.hasMiddle.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 16);
}

uint64_t instantiation function for generic protocol witness table for CAFVentTypes(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes);
  a1[2] = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes);
  uint64_t result = lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(&lazy protocol witness table cache variable for type CAFVentTypes and conformance CAFVentTypes);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVentTypes and conformance CAFVentTypes(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFVentTypes(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFVentTypes()
{
  return CAFVentTypes.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFVentTypes] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFVentTypes]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFVentTypes] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFVentTypes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFVentTypes.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFVentTypes@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CAFSeatHeatingCooling.onBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasOn, (SEL *)&selRef_on);
}

id CAFSeatHeatingCooling.onBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setOn_, a1 & 1);
}

uint64_t CAFSeatHeatingCooling.autoModeBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasAutoMode, (SEL *)&selRef_autoMode);
}

uint64_t CAFSeatHeatingCooling.onBridged.getter(SEL *a1, SEL *a2)
{
  if ([v2 *a1]) {
    return (uint64_t)[v2 *a2];
  }
  else {
    return 2;
  }
}

id CAFSeatHeatingCoolingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
}

uint64_t CAFSeatHeatingCoolingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSeatHeatingCoolingObservable.on : CAFSeatHeatingCoolingObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSeatHeatingCoolingObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatHeatingCoolingObservable.on : CAFSeatHeatingCoolingObservable()
{
  return CAFSeatHeatingCoolingObservable.on.setter();
}

uint64_t CAFSeatHeatingCoolingObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v15;
  uint64_t v2 = OUTLINED_FUNCTION_4_1();
  uint64_t v4 = *v3;
  uint64_t v11 = OUTLINED_FUNCTION_3_1(v2, (uint64_t)v3, v5, v6, v7, v8, v9, v10, v14);
  v12(v11);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.on.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_8_1();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFSeatHeatingCoolingObservable.on.modify())(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  char v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  return CAFSeatHeatingCoolingObservable.on.modify;
}

void CAFSeatHeatingCoolingObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(id *)(*(void *)a1 + 64);
  uint64_t v3 = OUTLINED_FUNCTION_7_0();
  specialized static SafePublished.subscript.setter(v3);

  free(v1);
}

uint64_t CAFSeatHeatingCoolingObservable.$on.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFSeatHeatingCoolingObservable.heatingCoolingLevel : CAFSeatHeatingCoolingObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatHeatingCoolingObservable.heatingCoolingLevel : CAFSeatHeatingCoolingObservable()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  OUTLINED_FUNCTION_116();
  id v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v15;
  uint64_t v2 = OUTLINED_FUNCTION_4_1();
  uint64_t v4 = *v3;
  uint64_t v11 = OUTLINED_FUNCTION_3_1(v2, (uint64_t)v3, v5, v6, v7, v8, v9, v10, v14);
  v12(v11);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_8_1();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify())(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  int v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  return CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify;
}

void CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(id *)(*(void *)a1 + 64);
  uint64_t v3 = OUTLINED_FUNCTION_7_0();
  specialized static SafePublished.subscript.setter(v3);

  free(v1);
}

uint64_t CAFSeatHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  return CAFSeatHeatingCoolingObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__heatingCoolingLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.$on.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.autoMode.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.$autoMode.getter()
{
  return CAFSeatHeatingCoolingObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__autoMode, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter()
{
  return CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable.$vehicleLayoutKey.getter()
{
  return CAFSeatHeatingCoolingObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.name.getter()
{
  return CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
}

uint64_t CAFSeatHeatingCoolingObservable.$name.getter()
{
  return CAFSeatHeatingCoolingObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatHeatingCoolingObservable.$autoMode.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSeatHeatingCoolingObservable._description.getter()
{
  id v1 = (void *)0xEE003E6465726574;
  uint64_t v24 = 0x73696765726E753CLL;
  id v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed);
  uint64_t v3 = 0x73696765726E753CLL;
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForOn))
  {
    CAFSeatHeatingCoolingObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v3 = String.init<A>(describing:)();
    uint64_t v4 = v5;
  }
  uint64_t v6 = 0x73696765726E753CLL;
  uint64_t v7 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForHeatingCoolingLevel))
  {
    CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v7 = v8;
  }
  uint64_t v9 = 0x73696765726E753CLL;
  uint64_t v10 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForAutoMode))
  {
    CAFSeatHeatingCoolingObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v10 = v11;
  }
  if (objc_msgSend(v2, sel_registeredForVehicleLayoutKey))
  {
    uint64_t v24 = CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter();
    id v1 = v12;
  }
  _StringGuts.grow(_:)(109);
  v13._countAndFlagsBits = 0xD000000000000022;
  v13._object = (void *)0x8000000249485F80;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x203A6E6F207B20;
  v14._object = (void *)0xE700000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v3;
  v15._object = v4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0xD000000000000017;
  v16._object = (void *)0x8000000249485FB0;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v6;
  v17._object = v7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v18._object = (void *)0xEC000000203A6564;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v9;
  v19._object = v10;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000249485D90;
  v20._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFSeatHeatingCoolingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock;
  id v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFSeatHeatingCoolingObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFSeatHeatingCoolingObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFSeatHeatingCoolingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSeatHeatingCoolingObservable.init(_:)(a1);
}

id CAFSeatHeatingCoolingObservable.init(_:)(void *a1)
{
  id v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatHeatingCoolingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__heatingCoolingLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatHeatingCoolingObservable, Int32>);
  OUTLINED_FUNCTION_10_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__autoMode;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatHeatingCoolingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__vehicleLayoutKey;
  uint64_t v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatHeatingCoolingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable__name;
  uint64_t v17 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for CAFSeatHeatingCoolingObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFSeatHeatingCoolingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSeatHeatingCoolingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFSeatHeatingCoolingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSeatHeatingCoolingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSeatHeatingCoolingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSeatHeatingCoolingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSeatHeatingCoolingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSeatHeatingCoolingObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493C11B0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCoolingObservable.on.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493C11D8()
{
  return CAFSeatHeatingCoolingObservable.on.setter();
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSeatHeatingCoolingObservable(void **a1)
{
  return CAFSeatHeatingCoolingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSeatHeatingCoolingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSeatHeatingCoolingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateHeatingCoolingLevel:)()
{
  return swift_release();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateName:)()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFSeatHeatingCoolingObservable.heatingCoolingService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSeatHeatingCoolingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSeatHeatingCoolingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSeatHeatingCoolingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493C1744()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493C176C()
{
  return CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter();
}

uint64_t sub_2493C1794()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.onBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_2493C17BC(char *a1)
{
  return CAFSeatHeatingCooling.onBridged.setter(*a1);
}

char *keypath_get_selector_heatingCoolingLevel()
{
  return sel_heatingCoolingLevel;
}

id sub_2493C17F0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_heatingCoolingLevel);
  *a2 = result;
  return result;
}

id sub_2493C1824(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeatingCoolingLevel_, *a1);
}

uint64_t sub_2493C1838()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.autoModeBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2493C1860(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493C1880(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFSeatHeatingCoolingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSeatHeatingCooling(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable(&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSeatHeatingCoolingObservable()
{
  return lazy protocol witness table accessor for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable(&lazy protocol witness table cache variable for type CAFSeatHeatingCooling and conformance CAFSeatHeatingCooling, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatHeatingCooling);
}

unint64_t type metadata accessor for CAFSeatHeatingCooling()
{
  unint64_t result = lazy cache variable for type metadata for CAFSeatHeatingCooling;
  if (!lazy cache variable for type metadata for CAFSeatHeatingCooling)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSeatHeatingCooling);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSeatHeatingCoolingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatHeatingCoolingObservable and conformance CAFSeatHeatingCoolingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSeatHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSeatHeatingCoolingObservable);
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.heatingCoolingLevel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSeatHeatingCoolingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFSeatHeatingCoolingObservable.resetCachedDescription()()
{
  return CAFSeatHeatingCoolingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return swift_beginAccess();
}

uint64_t *OUTLINED_FUNCTION_3_1(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return &a9;
}

uint64_t OUTLINED_FUNCTION_4_1()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_5_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_1@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 56) = *(void *)(v1 + a1);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_7_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_2(uint64_t result)
{
  *uint64_t v1 = result;
  *(void *)(result + 64) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_10_1()
{
  return swift_allocObject();
}

uint64_t specialized static SafePublished.subscript.getter(void *a1)
{
  id v10 = a1;
  uint64_t v1 = a1;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  swift_retain();
  v2(v9, 0);

  uint64_t v3 = *(void **)&v1[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed];
  id v10 = v3;
  swift_retain_n();
  id v4 = v3;
  uint64_t v5 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  uint64_t v7 = *v6;
  swift_bridgeObjectRetain();
  v5(v9, 0);
  swift_release_n();
  swift_release();

  return v7;
}

uint64_t specialized static SafePublished.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine21CAFTypeTestObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine21CAFTypeTestObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine21CAFTypeTestObservable_observed);
}

{
  return specialized static SafePublished.subscript.getter(a1, a2, a3, &OBJC_IVAR____TtC10CAFCombine21CAFTypeTestObservable_observed);
}

#error "2493C1FCC: call analysis failed (funcsize=36)"

#error "2493C20AC: call analysis failed (funcsize=55)"

#error "2493C21DC: call analysis failed (funcsize=55)"

#error "2493C22A8: call analysis failed (funcsize=35)"

#error "2493C2334: call analysis failed (funcsize=34)"

uint64_t CAFMultipleSelectImageSetting.sortOrderBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasSortOrder);
  unsigned int v2 = v1;
  if (v1) {
    unsigned int v1 = objc_msgSend(v0, sel_sortOrder);
  }
  return v1 | ((v2 ^ 1) << 8);
}

uint64_t CAFMultipleSelectImageSetting.disabledBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasDisabled, (SEL *)&selRef_disabled);
}

uint64_t CAFMultipleSelectImageSetting.limitableUIElementBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasLimitableUIElement, (SEL *)&selRef_limitableUIElement);
}

uint64_t CAFMultipleSelectImageSetting.hiddenBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasHidden, (SEL *)&selRef_hidden);
}

uint64_t CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasShowAudioBrandLogo, (SEL *)&selRef_showAudioBrandLogo);
}

void CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.getter()
{
  id v1 = objc_msgSend(v0, sel_indicesUserVisibleValue);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_unsignedCharValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

void CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setIndicesUserVisibleValue_, isa);
}

id CAFMultipleSelectImageSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
}

uint64_t CAFMultipleSelectImageSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectImageSettingObservable.userVisibleLabel.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFMultipleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFMultipleSelectImageSettingObservable.$sortOrder.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectImageSettingObservable.$category.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.identifier.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$identifier.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.disabled.getter()
{
  return CAFMultipleSelectImageSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectImageSettingObservable.$disabled.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.limitableUIElement.getter()
{
  return CAFMultipleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$limitableUIElement.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.hidden.getter()
{
  return CAFMultipleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$hidden.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  return CAFMultipleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.symbolName.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$symbolName.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_31_1();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectImageSettingObservable.$prominenceInfo.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue : CAFMultipleSelectImageSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue : CAFMultipleSelectImageSettingObservable()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter(v0);
}

uint64_t CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v1 = specialized static SafePublished.subscript.getter(v0);
  swift_release();
  swift_release();
  return v1;
}

uint64_t CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

uint64_t (*CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  a1[1] = (uint64_t)v1;
  a1[2] = swift_getKeyPath();
  a1[3] = swift_getKeyPath();
  *a1 = specialized static SafePublished.subscript.getter(v1);
  return CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify;
}

uint64_t CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  id v5 = (id)a1[1];
  unint64_t v8 = a1 + 2;
  uint64_t v7 = a1[2];
  uint64_t v6 = v8[1];
  if (a2)
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized static SafePublished.subscript.setter(v9, v5, v7, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return specialized static SafePublished.subscript.setter(v4, v5, v7, v6);
  }
}

uint64_t CAFMultipleSelectImageSettingObservable.$indicesUserVisibleValue.getter()
{
  swift_beginAccess();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  return CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
}

{
  void *v0;
  id v1;
  uint64_t v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_31_1();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.images.getter()
{
  return CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$images.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.name.getter()
{
  return CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectImageSettingObservable.$name.getter()
{
  return CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFMultipleSelectImageSettingObservable._description.getter()
{
  uint64_t v1 = *(void **)&v0[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed];
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForIndicesUserVisibleValue))
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v4 = specialized static SafePublished.subscript.getter(v0);
    swift_release();
    swift_release();
    uint64_t v2 = MEMORY[0x24C59DB40](v4, MEMORY[0x263F8E778]);
    uint64_t v3 = v5;
    swift_bridgeObjectRelease();
  }
  uint64_t v6 = 0x73696765726E753CLL;
  uint64_t v7 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForListUserVisibleValue))
  {
    CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter();
    uint64_t v6 = MEMORY[0x24C59DB40]();
    uint64_t v7 = v8;
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v1, sel_registeredForImageList))
  {
    CAFMultipleSelectImageSettingObservable.images.getter();
    MEMORY[0x24C59DB40]();
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(115);
  v9._countAndFlagsBits = 0xD00000000000002ALL;
  v9._object = (void *)0x8000000249486240;
  String.append(_:)(v9);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x8000000249486270;
  String.append(_:)(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._object = (void *)0x8000000249486290;
  v12._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v6;
  v13._object = v7;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x736567616D69202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4095264;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t CAFMultipleSelectImageSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFMultipleSelectImageSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFMultipleSelectImageSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFMultipleSelectImageSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFMultipleSelectImageSettingObservable.init(_:)(a1);
}

id CAFMultipleSelectImageSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__indicesUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFMultipleSelectImageSettingObservable, [UInt8]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, [String]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v27] = v28;
  uint64_t v29 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images;
  uint64_t v30 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectImageSettingObservable, [Data]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v29] = v31;
  uint64_t v32 = OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v32] = specialized SafePublished.init(observedValuekeypath:)(v30);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed] = a1;
  id v33 = a1;

  v36.receiver = v9;
  v36.super_class = (Class)type metadata accessor for CAFMultipleSelectImageSettingObservable();
  id v34 = objc_msgSendSuper2(&v36, sel_init);
  objc_msgSend(v33, sel_registerObserver_, v34);

  return v34;
}

uint64_t CAFMultipleSelectImageSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFMultipleSelectImageSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMultipleSelectImageSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMultipleSelectImageSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFMultipleSelectImageSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFMultipleSelectImageSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFMultipleSelectImageSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFMultipleSelectImageSettingObservable(void **a1)
{
  return CAFMultipleSelectImageSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMultipleSelectImageSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFMultipleSelectImageSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

void CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateIndicesUserVisibleValue:)(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  if (a2 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, a2);
      }
      else {
        id v5 = *(id *)(a2 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_unsignedCharValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2)
{
  return CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateImages:)(uint64_t a1, uint64_t a2)
{
  return CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine39CAFMultipleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_23_0();
  uint64_t v5 = swift_bridgeObjectRetain();
  a4(v5);

  return swift_release();
}

uint64_t @objc CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a6();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectImageSettingObservable.multipleSelectImageSettingService(_:didUpdateName:)()
{
  return CAFMultipleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFMultipleSelectImageSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFMultipleSelectImageSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFMultipleSelectImageSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493C468C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter();
  *uint64_t v0 = result;
  return result;
}

char *keypath_get_selector_userVisibleLabel()
{
  return sel_userVisibleLabel;
}

void sub_2493C46C4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_sectionIdentifier()
{
  return sel_sectionIdentifier;
}

void sub_2493C46F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t key path getter for CAFMultipleSelectImageSetting.sortOrderBridged : CAFMultipleSelectImageSetting@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFMultipleSelectImageSetting.sortOrderBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

char *keypath_get_selector_category()
{
  return sel_category;
}

id sub_2493C4754@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_identifier()
{
  return sel_identifier;
}

void sub_2493C4794(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2493C47B4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493C47DC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493C4804()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493C482C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2493C4854(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_symbolName()
{
  return sel_symbolName;
}

void key path getter for CAFAutomakerSetting.sectionIdentifier : CAFMultipleSelectImageSetting(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  *a3 = v6;
  a3[1] = v8;
}

void sub_2493C48E4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_prominenceInfo()
{
  return sel_prominenceInfo;
}

id key path getter for CAFAutomakerSetting.prominenceInfo : CAFMultipleSelectImageSetting@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_prominenceInfo);
  *a2 = result;
  return result;
}

void sub_2493C4950()
{
  OUTLINED_FUNCTION_2_1();
  CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged : CAFMultipleSelectImageSetting()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFMultipleSelectImageSetting.indicesUserVisibleValueBridged.setter(v0);
}

char *keypath_get_selector_listUserVisibleValue()
{
  return sel_listUserVisibleValue;
}

void sub_2493C49B4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_images()
{
  return sel_images;
}

void key path getter for CAFMultipleSelectImageSetting.listUserVisibleValue : CAFMultipleSelectImageSetting(id *a1@<X0>, SEL *a2@<X3>, uint64_t *a3@<X8>)
{
  id v4 = [*a1 *a2];
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a3 = v5;
}

void sub_2493C4A40(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493C4A68(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFMultipleSelectImageSettingObservable()
{
  return self;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    uint64_t v7 = OUTLINED_FUNCTION_1_1();
    __break(1u);
    return MEMORY[0x270FA01D0](v7);
  }
  if (a3 < a1
    || (uint64_t result = type metadata accessor for CAUVehicleLayoutKey(),
        a1 + *(void *)(*(void *)(result - 8) + 72) * a2 <= a3))
  {
    type metadata accessor for CAUVehicleLayoutKey();
    uint64_t v8 = OUTLINED_FUNCTION_36_0();
    return MEMORY[0x270FA01D8](v8);
  }
  else if (a3 != a1)
  {
    uint64_t v7 = OUTLINED_FUNCTION_36_0();
    return MEMORY[0x270FA01D0](v7);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[8 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 8 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

{
  uint64_t v3;

  if ((__len & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_3();
    __src = (char *)OUTLINED_FUNCTION_1_1();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_1();
    __break(1u);
  }
  else if (a3 != result || &result[2 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_6_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_1();
    __break(1u);
  }
  else if (a3 != result || &result[4 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_6_2(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_1();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_6_2(a3, result);
  }
  return result;
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0 || (a3 + 8 * a2 > a1 ? (BOOL v3 = a1 + 8 * a2 > a3) : (BOOL v3 = 0), v3))
  {
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFService]);
    return swift_arrayInitWithCopy();
  }
  return result;
}

{
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_12_1();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_8_2();
    __break(1u);
    return result;
  }
  if (a3 + 8 * a2 > a1 && a1 + 8 * a2 > a3)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_11_2();
    goto LABEL_11;
  }
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFService);

  return swift_arrayInitWithCopy();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0 || (&__dst[8 * a2] > __src ? (BOOL v3 = &__src[8 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 8 * a2);
  }
  return result;
}

{
  void *result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_12_1();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_8_2();
    __break(1u);
    return result;
  }
  if (&__dst[2 * a2] > __src && &__src[2 * a2] > __dst)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_11_2();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 2 * a2);
}

{
  void *result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_12_1();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_8_2();
    __break(1u);
    return result;
  }
  if (&__dst[4 * a2] > __src && &__src[4 * a2] > __dst)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_11_2();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 4 * a2);
}

{
  void *result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_12_1();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_8_2();
    __break(1u);
    return result;
  }
  if (&__dst[8 * a2] > __src && &__src[8 * a2] > __dst)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_11_2();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, 8 * a2);
}

{
  BOOL v3;
  void *result;
  uint64_t vars8;

  if (a2 < 0 || (&__dst[4 * a2] > __src ? (BOOL v3 = &__src[4 * a2] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, 4 * a2);
  }
  return result;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

{
  void *result;
  uint64_t vars8;

  if ((__n & 0x8000000000000000) != 0)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_12_1();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_8_2();
    __break(1u);
    return result;
  }
  if (&__dst[__n] > __src && &__src[__n] > __dst)
  {
    OUTLINED_FUNCTION_0_3();
    OUTLINED_FUNCTION_11_2();
    goto LABEL_11;
  }

  return memcpy(__dst, __src, __n);
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[CAFService]>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CAFVentTypes>, (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.initialize(from:count:));
  uint64_t *v3 = v4;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *uint64_t v0 = v1;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMultipleSelectImageSetting()
{
  return lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting;
  if (!lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFMultipleSelectImageSetting);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectImageSetting and conformance CAFMultipleSelectImageSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFMultipleSelectImageSettingObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMultipleSelectImageSettingObservable and conformance CAFMultipleSelectImageSettingObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMultipleSelectImageSettingObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFMultipleSelectImageSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFMultipleSelectImageSettingObservable);
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))() & 0x1FF;
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.indicesUserVisibleValue.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$indicesUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.images.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$images.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFMultipleSelectImageSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 560))();
}

char *specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char *a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

{
  uint64_t *v3;
  char *result;

  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  uint64_t *v3 = (uint64_t)result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(uint64_t, uint64_t, void *), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_10_2();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_25_0();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v16 = (void *)OUTLINED_FUNCTION_28_0();
    size_t v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 8);
  }
  else
  {
    uint64_t v16 = (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v18 = v16 + 4;
  uint64_t v19 = a4 + 32;
  if (a1)
  {
    a6(v19, v14, v18);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a7(v19, v14, v18);
  }
  swift_release();
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Bool>);
    id v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v12 = v10 + 32;
  char v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    id v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 4);
  }
  else
  {
    id v10 = (char *)MEMORY[0x263F8EE78];
  }
  char v12 = v10 + 32;
  char v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_37_0();
  if (v3)
  {
    OUTLINED_FUNCTION_10_2();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_25_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_14_1();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(v6);
    int64_t v7 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_27_0(v8 - 32);
  }
  int64_t v9 = (char *)OUTLINED_FUNCTION_20_1();
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v9, v10, v11);
  }
  swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t *v7;
  void *v8;
  size_t v9;
  char *v10;
  size_t v11;
  char *v12;

  OUTLINED_FUNCTION_37_0();
  if (v4)
  {
    OUTLINED_FUNCTION_10_2();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_25_0();
      if (v5)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_14_1();
  if (v3)
  {
    __swift_instantiateConcreteTypeFromMangledName(v7);
    size_t v8 = (void *)swift_allocObject();
    int64_t v9 = _swift_stdlib_malloc_size(v8);
    v8[2] = v2;
    v8[3] = 2 * v9 - 64;
  }
  uint64_t v10 = (char *)OUTLINED_FUNCTION_20_1();
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v10, v11, v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v10, v11, v12);
  }
  swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t *v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  OUTLINED_FUNCTION_37_0();
  if (v3)
  {
    OUTLINED_FUNCTION_10_2();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_25_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_14_1();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(v6);
    int64_t v7 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_27_0(v8 - 32);
  }
  int64_t v9 = (char *)OUTLINED_FUNCTION_20_1();
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v9, v10, v11);
  }
  swift_release();
}

{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t *v6;
  const void *v7;
  size_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  OUTLINED_FUNCTION_37_0();
  if (v3)
  {
    OUTLINED_FUNCTION_10_2();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_25_0();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_9_3();
    }
  }
  OUTLINED_FUNCTION_14_1();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(v6);
    int64_t v7 = (const void *)OUTLINED_FUNCTION_28_0();
    size_t v8 = _swift_stdlib_malloc_size(v7);
    OUTLINED_FUNCTION_27_0(v8 - 32);
  }
  int64_t v9 = (char *)OUTLINED_FUNCTION_20_1();
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v9, v10, v11);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v9, v10, v11);
  }
  swift_release();
}

uint64_t partial apply for closure #1 in CAFMultipleSelectImageSettingObservable.resetCachedDescription()()
{
  return CAFMultipleSelectImageSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_1_1()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_2_2()
{
  return swift_retain_n();
}

char *OUTLINED_FUNCTION_3_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

char *OUTLINED_FUNCTION_4_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

uint64_t OUTLINED_FUNCTION_5_2()
{
  return swift_readAtKeyPath();
}

void *OUTLINED_FUNCTION_6_2@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_2()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

uint64_t OUTLINED_FUNCTION_17_1()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_18_1()
{
  return swift_retain();
}

id OUTLINED_FUNCTION_19_1(id a1)
{
  return a1;
}

uint64_t OUTLINED_FUNCTION_20_1()
{
  return v0 + 32;
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_26_0()
{
  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

void OUTLINED_FUNCTION_27_0(uint64_t a1@<X8>)
{
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = 2 * (a1 / v1);
}

uint64_t OUTLINED_FUNCTION_28_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_31_1()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_33_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_34_0()
{
  return swift_getAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_35_0()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  return v0;
}

uint64_t static CAFSeatOccupancy.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSeatOccupancy.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFSeatOccupancy.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSeatOccupancy.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSeatOccupancy.description.getter()
{
  id v0 = (id)NSStringFromSeatOccupancy();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatOccupancy(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy);
  a1[2] = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy);
  uint64_t result = lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(&lazy protocol witness table cache variable for type CAFSeatOccupancy and conformance CAFSeatOccupancy);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatOccupancy and conformance CAFSeatOccupancy(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSeatOccupancy(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSeatOccupancy()
{
  return CAFSeatOccupancy.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSeatOccupancy] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSeatOccupancy]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSeatOccupancy] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSeatOccupancy@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFSeatOccupancy.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFSeatOccupancy@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void CAFCharacteristic.id.getter()
{
  id v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for Identifiable.id.getter in conformance CAFCharacteristic()
{
}

uint64_t static CAFFuelLevelState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFFuelLevelState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFFuelLevelState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFFuelLevelState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFFuelLevelState.description.getter()
{
  id v0 = (id)NSStringFromFuelLevelState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFFuelLevelState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState);
  a1[2] = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState);
  uint64_t result = lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(&lazy protocol witness table cache variable for type CAFFuelLevelState and conformance CAFFuelLevelState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFuelLevelState and conformance CAFFuelLevelState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFFuelLevelState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFFuelLevelState()
{
  return CAFFuelLevelState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFFuelLevelState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFFuelLevelState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFFuelLevelState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFFuelLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFFuelLevelState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFFuelLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFCarObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFCarObservable_observed);
}

uint64_t key path getter for CAFCarObservable.receivedAllValues : CAFCarObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCarObservable.receivedAllValues.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFCarObservable.receivedAllValues : CAFCarObservable()
{
  return CAFCarObservable.receivedAllValues.setter();
}

uint64_t CAFCarObservable.receivedAllValues.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2493C7288()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.receivedAllValues.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_2493C72B4()
{
  return CAFCarObservable.receivedAllValues.setter();
}

uint64_t CAFCarObservable.receivedAllValues.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t CAFCarObservable.$receivedAllValues.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues, &demangling cache variable for type metadata for Published<Bool>);
}

uint64_t CAFCarObservable.$receivedAllValues.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues, &demangling cache variable for type metadata for Published<Bool>);
}

uint64_t key path getter for CAFCarObservable.audioSettings : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.audioSettings.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.audioSettings : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.audioSettings.setter();
}

uint64_t CAFCarObservable.audioSettings.didset()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.audioSettings.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v5 = v4;
  }
  else
  {
    char v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x80000002494866E0, 0x7465536F69647561, 0xED000073676E6974);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.audioSettings.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C751C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.audioSettings.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.audioSettings.setter()
{
}

{
  void (*v0)(uint64_t);
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;

  OUTLINED_FUNCTION_31_2();
  swift_getKeyPath();
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  char v5 = OUTLINED_FUNCTION_28_1();
  v0(v5);
}

uint64_t key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  __swift_instantiateConcreteTypeFromMangledName(a5);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_0();
  (*(void (**)(uint64_t, uint64_t))(v10 + 16))(v6, a1);
  return a6(v6);
}

uint64_t CAFCarObservable.$audioSettings.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__audioSettings, &demangling cache variable for type metadata for Published<CAFAudioSettings?>);
}

uint64_t CAFCarObservable.$audioSettings.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAudioSettings?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__audioSettings, &demangling cache variable for type metadata for Published<CAFAudioSettings?>);
}

uint64_t key path getter for CAFCarObservable.automakerExteriorCamera : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerExteriorCamera.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.automakerExteriorCamera : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.automakerExteriorCamera.setter();
}

uint64_t CAFCarObservable.automakerExteriorCamera.didset()
{
  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x8000000249486710;
  String.append(_:)(v0);
  id v1 = (void *)CAFCarObservable.automakerExteriorCamera.getter();
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v1, sel_description);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = (void *)0xE500000000000000;
    uint64_t v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000017, 0x8000000249486750);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerExteriorCamera.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C77E0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerExteriorCamera.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.automakerExteriorCamera.setter()
{
}

uint64_t CAFCarObservable.$automakerExteriorCamera.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerExteriorCamera, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
}

uint64_t CAFCarObservable.$automakerExteriorCamera.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerExteriorCamera, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
}

uint64_t key path getter for CAFCarObservable.automakerInputStreams : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerInputStreams.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarObservable.automakerInputStreams : CAFCarObservable()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.automakerInputStreams.didset()
{
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  uint64_t v0 = CAFCarObservable.automakerInputStreams.getter();
  uint64_t v1 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
  uint64_t v2 = MEMORY[0x24C59DB40](v0, v1);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v6, 0xD000000000000030, 0x8000000249486770, 0xD000000000000015, 0x80000002494867B0);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerInputStreams.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

{
  uint64_t v1;

  swift_getKeyPath();
  swift_getKeyPath();
  OUTLINED_FUNCTION_27_1();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2493C79F4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerInputStreams.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t CAFCarObservable.automakerInputStreams.setter()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

{
  uint64_t (*v0)(uint64_t);
  void *v1;
  id v2;
  uint64_t v3;

  OUTLINED_FUNCTION_31_2();
  swift_getKeyPath();
  uint64_t v2 = v1;
  id v3 = OUTLINED_FUNCTION_28_1();
  return v0(v3);
}

uint64_t CAFCarObservable.$automakerInputStreams.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerInputStreams, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>);
}

uint64_t CAFCarObservable.$automakerInputStreams.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerInputStreams, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>);
}

uint64_t key path getter for CAFCarObservable.automakerNotificationHistory : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerNotificationHistory.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.automakerNotificationHistory : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.automakerNotificationHistory.setter();
}

uint64_t CAFCarObservable.automakerNotificationHistory.didset()
{
  _StringGuts.grow(_:)(57);
  v0._countAndFlagsBits = 0xD000000000000037;
  v0._object = (void *)0x80000002494867D0;
  String.append(_:)(v0);
  id v1 = (void *)CAFCarObservable.automakerNotificationHistory.getter();
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_description);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    os_log_type_t v6 = v5;
  }
  else
  {
    os_log_type_t v6 = (void *)0xE500000000000000;
    uint64_t v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD00000000000001CLL, 0x8000000249486810);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerNotificationHistory.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C7C1C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerNotificationHistory.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.automakerNotificationHistory.setter()
{
}

uint64_t CAFCarObservable.$automakerNotificationHistory.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotificationHistory, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
}

uint64_t CAFCarObservable.$automakerNotificationHistory.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotificationHistory, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
}

uint64_t key path getter for CAFCarObservable.automakerNotifications : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerNotifications.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarObservable.automakerNotifications : CAFCarObservable()
{
  return CAFCarObservable.automakerNotifications.setter();
}

uint64_t CAFCarObservable.automakerNotifications.didset()
{
  _StringGuts.grow(_:)(51);
  v0._countAndFlagsBits = 0xD000000000000031;
  v0._object = (void *)0x8000000249486830;
  String.append(_:)(v0);
  uint64_t v1 = CAFCarObservable.automakerNotifications.getter();
  uint64_t v2 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerNotifications);
  uint64_t v3 = MEMORY[0x24C59DB40](v1, v2);
  Swift::String v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0, 0xE000000000000000, 0xD000000000000016, 0x8000000249486870);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerNotifications.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C7E34()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerNotifications.getter();
  *Swift::String v0 = result;
  return result;
}

uint64_t CAFCarObservable.automakerNotifications.setter()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$automakerNotifications.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotifications, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>);
}

uint64_t CAFCarObservable.$automakerNotifications.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerNotifications, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>);
}

uint64_t key path getter for CAFCarObservable.automakerRequestContent : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerRequestContent.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarObservable.automakerRequestContent : CAFCarObservable()
{
  return CAFCarObservable.automakerRequestContent.setter();
}

uint64_t CAFCarObservable.automakerRequestContent.didset()
{
  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x8000000249486890;
  String.append(_:)(v0);
  uint64_t v1 = CAFCarObservable.automakerRequestContent.getter();
  uint64_t v2 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
  uint64_t v3 = MEMORY[0x24C59DB40](v1, v2);
  Swift::String v5 = v4;
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0, 0xE000000000000000, 0xD000000000000017, 0x80000002494868D0);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerRequestContent.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C804C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerRequestContent.getter();
  *Swift::String v0 = result;
  return result;
}

uint64_t CAFCarObservable.automakerRequestContent.setter()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$automakerRequestContent.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>);
}

uint64_t CAFCarObservable.$automakerRequestContent.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerRequestContent, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>);
}

uint64_t key path getter for CAFCarObservable.automakerSettings : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.automakerSettings.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.automakerSettings : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.automakerSettings.setter();
}

uint64_t CAFCarObservable.automakerSettings.didset()
{
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.automakerSettings.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002CLL, 0x80000002494868F0, 0xD000000000000011, 0x8000000249486920);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.automakerSettings.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C8270()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.automakerSettings.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.automakerSettings.setter()
{
}

uint64_t CAFCarObservable.$automakerSettings.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerSettings, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
}

uint64_t CAFCarObservable.$automakerSettings.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__automakerSettings, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
}

uint64_t key path getter for CAFCarObservable.charging : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.charging.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.charging : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.charging.setter();
}

uint64_t CAFCarObservable.charging.didset()
{
  _StringGuts.grow(_:)(37);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.charging.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000023, 0x8000000249486940, 0x676E696772616863, 0xE800000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.charging.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C848C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.charging.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.charging.setter()
{
}

uint64_t CAFCarObservable.$charging.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__charging, &demangling cache variable for type metadata for Published<CAFCharging?>);
}

uint64_t CAFCarObservable.$charging.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFCharging?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__charging, &demangling cache variable for type metadata for Published<CAFCharging?>);
}

uint64_t key path getter for CAFCarObservable.climate : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.climate.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.climate : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.climate.setter();
}

uint64_t CAFCarObservable.climate.didset()
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.climate.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000022, 0x8000000249486970, 0x6574616D696C63, 0xE700000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.climate.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C86A8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.climate.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.climate.setter()
{
}

uint64_t CAFCarObservable.$climate.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__climate, &demangling cache variable for type metadata for Published<CAFClimate?>);
}

uint64_t CAFCarObservable.$climate.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFClimate?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__climate, &demangling cache variable for type metadata for Published<CAFClimate?>);
}

uint64_t key path getter for CAFCarObservable.closure : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.closure.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.closure : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.closure.setter();
}

uint64_t CAFCarObservable.closure.didset()
{
  _StringGuts.grow(_:)(36);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.closure.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000022, 0x80000002494869A0, 0x657275736F6C63, 0xE700000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.closure.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C88C4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.closure.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.closure.setter()
{
}

uint64_t CAFCarObservable.$closure.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__closure, &demangling cache variable for type metadata for Published<CAFClosure?>);
}

uint64_t CAFCarObservable.$closure.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFClosure?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__closure, &demangling cache variable for type metadata for Published<CAFClosure?>);
}

uint64_t key path getter for CAFCarObservable.driveState : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.driveState.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.driveState : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.driveState.setter();
}

uint64_t CAFCarObservable.driveState.didset()
{
  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.driveState.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000025, 0x80000002494869D0, 0x6174536576697264, 0xEA00000000006574);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.driveState.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C8AE4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.driveState.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.driveState.setter()
{
}

uint64_t CAFCarObservable.$driveState.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driveState, &demangling cache variable for type metadata for Published<CAFDriveState?>);
}

uint64_t CAFCarObservable.$driveState.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFDriveState?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driveState, &demangling cache variable for type metadata for Published<CAFDriveState?>);
}

uint64_t key path getter for CAFCarObservable.driverAssistance : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.driverAssistance.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.driverAssistance : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.driverAssistance.setter();
}

uint64_t CAFCarObservable.driverAssistance.didset()
{
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.driverAssistance.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002BLL, 0x8000000249486A00, 0xD000000000000010, 0x8000000249486A30);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.driverAssistance.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C8D08()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.driverAssistance.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.driverAssistance.setter()
{
}

uint64_t CAFCarObservable.$driverAssistance.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driverAssistance, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
}

uint64_t CAFCarObservable.$driverAssistance.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__driverAssistance, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
}

uint64_t key path getter for CAFCarObservable.electricEngine : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.electricEngine.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.electricEngine : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.electricEngine.setter();
}

uint64_t CAFCarObservable.electricEngine.didset()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.electricEngine.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000029, 0x8000000249486A50, 0x6369727463656C65, 0xEE00656E69676E45);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.electricEngine.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C8F30()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.electricEngine.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.electricEngine.setter()
{
}

uint64_t CAFCarObservable.$electricEngine.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__electricEngine, &demangling cache variable for type metadata for Published<CAFElectricEngine?>);
}

uint64_t CAFCarObservable.$electricEngine.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFElectricEngine?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__electricEngine, &demangling cache variable for type metadata for Published<CAFElectricEngine?>);
}

uint64_t key path getter for CAFCarObservable.environmentalConditions : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.environmentalConditions.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.environmentalConditions : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.environmentalConditions.setter();
}

uint64_t CAFCarObservable.environmentalConditions.didset()
{
  _StringGuts.grow(_:)(52);
  v0._countAndFlagsBits = 0xD000000000000032;
  v0._object = (void *)0x8000000249486A80;
  String.append(_:)(v0);
  id v1 = (void *)CAFCarObservable.environmentalConditions.getter();
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v1, sel_description);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v6 = v5;
  }
  else
  {
    Swift::String v6 = (void *)0xE500000000000000;
    uint64_t v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000017, 0x8000000249486AC0);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.environmentalConditions.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C9158()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.environmentalConditions.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.environmentalConditions.setter()
{
}

uint64_t CAFCarObservable.$environmentalConditions.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__environmentalConditions, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
}

uint64_t CAFCarObservable.$environmentalConditions.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__environmentalConditions, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
}

uint64_t key path getter for CAFCarObservable.fuel : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.fuel.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.fuel : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.fuel.setter();
}

uint64_t CAFCarObservable.fuel.didset()
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.fuel.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x8000000249486AE0, 1818588518, 0xE400000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.fuel.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C936C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.fuel.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.fuel.setter()
{
}

uint64_t CAFCarObservable.$fuel.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__fuel, &demangling cache variable for type metadata for Published<CAFFuel?>);
}

uint64_t CAFCarObservable.$fuel.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFFuel?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__fuel, &demangling cache variable for type metadata for Published<CAFFuel?>);
}

uint64_t key path getter for CAFCarObservable.highVoltageBattery : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.highVoltageBattery.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.highVoltageBattery : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.highVoltageBattery.setter();
}

uint64_t CAFCarObservable.highVoltageBattery.didset()
{
  _StringGuts.grow(_:)(47);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.highVoltageBattery.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002DLL, 0x8000000249486B00, 0xD000000000000012, 0x8000000249486B30);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.highVoltageBattery.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C9590()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.highVoltageBattery.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.highVoltageBattery.setter()
{
}

uint64_t CAFCarObservable.$highVoltageBattery.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__highVoltageBattery, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
}

uint64_t CAFCarObservable.$highVoltageBattery.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__highVoltageBattery, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
}

uint64_t key path getter for CAFCarObservable.internalCombustionEngine : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.internalCombustionEngine.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.internalCombustionEngine : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.internalCombustionEngine.setter();
}

uint64_t CAFCarObservable.internalCombustionEngine.didset()
{
  _StringGuts.grow(_:)(53);
  v0._countAndFlagsBits = 0xD000000000000033;
  v0._object = (void *)0x8000000249486B50;
  String.append(_:)(v0);
  id v1 = (void *)CAFCarObservable.internalCombustionEngine.getter();
  if (v1)
  {
    id v2 = v1;
    id v3 = objc_msgSend(v1, sel_description);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v6 = v5;
  }
  else
  {
    Swift::String v6 = (void *)0xE500000000000000;
    uint64_t v4 = 0x3E6C696E3CLL;
  }
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v8, 0, 0xE000000000000000, 0xD000000000000018, 0x8000000249486B90);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.internalCombustionEngine.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C97B8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.internalCombustionEngine.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.internalCombustionEngine.setter()
{
}

uint64_t CAFCarObservable.$internalCombustionEngine.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__internalCombustionEngine, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
}

uint64_t CAFCarObservable.$internalCombustionEngine.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__internalCombustionEngine, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
}

uint64_t key path getter for CAFCarObservable.media : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.media.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.media : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.media.setter();
}

uint64_t CAFCarObservable.media.didset()
{
  _StringGuts.grow(_:)(34);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.media.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000020, 0x8000000249486BB0, 0x616964656DLL, 0xE500000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.media.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C99D0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.media.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.media.setter()
{
}

uint64_t CAFCarObservable.$media.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__media, &demangling cache variable for type metadata for Published<CAFMedia?>);
}

uint64_t CAFCarObservable.$media.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFMedia?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__media, &demangling cache variable for type metadata for Published<CAFMedia?>);
}

uint64_t key path getter for CAFCarObservable.nowPlayingInformation : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.nowPlayingInformation.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.nowPlayingInformation : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.nowPlayingInformation.setter();
}

uint64_t CAFCarObservable.nowPlayingInformation.didset()
{
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.nowPlayingInformation.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000030, 0x8000000249486BE0, 0xD000000000000015, 0x8000000249486C20);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.nowPlayingInformation.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C9BF4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.nowPlayingInformation.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.nowPlayingInformation.setter()
{
}

uint64_t CAFCarObservable.$nowPlayingInformation.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__nowPlayingInformation, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>);
}

uint64_t CAFCarObservable.$nowPlayingInformation.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__nowPlayingInformation, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>);
}

uint64_t key path getter for CAFCarObservable.pairedDevices : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.pairedDevices.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.pairedDevices : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.pairedDevices.setter();
}

uint64_t CAFCarObservable.pairedDevices.didset()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.pairedDevices.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x8000000249486C40, 0x6544646572696170, 0xED00007365636976);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.pairedDevices.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493C9E1C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.pairedDevices.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.pairedDevices.setter()
{
}

uint64_t CAFCarObservable.$pairedDevices.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__pairedDevices, &demangling cache variable for type metadata for Published<CAFPairedDevices?>);
}

uint64_t CAFCarObservable.$pairedDevices.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFPairedDevices?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__pairedDevices, &demangling cache variable for type metadata for Published<CAFPairedDevices?>);
}

uint64_t key path getter for CAFCarObservable.seat : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.seat.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.seat : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.seat.setter();
}

uint64_t CAFCarObservable.seat.didset()
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  Swift::String v0 = (void *)CAFCarObservable.seat.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x8000000249486C70, 1952540019, 0xE400000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.seat.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CA030()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.seat.getter();
  *Swift::String v0 = result;
  return result;
}

void CAFCarObservable.seat.setter()
{
}

uint64_t CAFCarObservable.$seat.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__seat, &demangling cache variable for type metadata for Published<CAFSeat?>);
}

uint64_t CAFCarObservable.$seat.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFSeat?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__seat, &demangling cache variable for type metadata for Published<CAFSeat?>);
}

uint64_t key path getter for CAFCarObservable.testingUseOnly : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.testingUseOnly.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarObservable.testingUseOnly : CAFCarObservable()
{
  return CAFCarObservable.testingUseOnly.setter();
}

uint64_t CAFCarObservable.testingUseOnly.didset()
{
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  uint64_t v0 = CAFCarObservable.testingUseOnly.getter();
  uint64_t v1 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFTestingUseOnly);
  uint64_t v2 = MEMORY[0x24C59DB40](v0, v1);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v6, 0xD000000000000029, 0x8000000249486C90, 0x55676E6974736574, 0xEE00796C6E4F6573);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.testingUseOnly.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CA24C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.testingUseOnly.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t CAFCarObservable.testingUseOnly.setter()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$testingUseOnly.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__testingUseOnly, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>);
}

uint64_t CAFCarObservable.$testingUseOnly.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__testingUseOnly, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>);
}

uint64_t key path getter for CAFCarObservable.tire : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.tire.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.tire : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.tire.setter();
}

uint64_t CAFCarObservable.tire.didset()
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.tire.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000001FLL, 0x8000000249486CC0, 1701996916, 0xE400000000000000);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.tire.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CA460()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.tire.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.tire.setter()
{
}

uint64_t CAFCarObservable.$tire.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tire, &demangling cache variable for type metadata for Published<CAFTire?>);
}

uint64_t CAFCarObservable.$tire.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFTire?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tire, &demangling cache variable for type metadata for Published<CAFTire?>);
}

uint64_t key path getter for CAFCarObservable.tripComputer : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.tripComputer.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.tripComputer : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.tripComputer.setter();
}

uint64_t CAFCarObservable.tripComputer.didset()
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.tripComputer.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000027, 0x8000000249486CE0, 0x706D6F4370697274, 0xEC00000072657475);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.tripComputer.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CA684()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.tripComputer.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.tripComputer.setter()
{
}

uint64_t CAFCarObservable.$tripComputer.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tripComputer, &demangling cache variable for type metadata for Published<CAFTripComputer?>);
}

uint64_t CAFCarObservable.$tripComputer.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFTripComputer?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__tripComputer, &demangling cache variable for type metadata for Published<CAFTripComputer?>);
}

uint64_t key path getter for CAFCarObservable.uiControl : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.uiControl.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarObservable.uiControl : CAFCarObservable()
{
  return CAFCarObservable.uiControl.setter();
}

uint64_t CAFCarObservable.uiControl.didset()
{
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  uint64_t v0 = CAFCarObservable.uiControl.getter();
  uint64_t v1 = type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUIControl);
  uint64_t v2 = MEMORY[0x24C59DB40](v0, v1);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v6, 0xD000000000000024, 0x8000000249486D10, 0x6F72746E6F436975, 0xE90000000000006CLL);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.uiControl.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CA8F0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.uiControl.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t CAFCarObservable.uiControl.setter()
{
  return CAFCarObservable.automakerInputStreams.setter();
}

uint64_t CAFCarObservable.$uiControl.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__uiControl, &demangling cache variable for type metadata for Published<[CAFUIControl]>);
}

uint64_t CAFCarObservable.$uiControl.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<[CAFUIControl]>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__uiControl, &demangling cache variable for type metadata for Published<[CAFUIControl]>);
}

uint64_t key path getter for CAFCarObservable.vehicleMotion : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.vehicleMotion.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.vehicleMotion : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.vehicleMotion.setter();
}

uint64_t CAFCarObservable.vehicleMotion.didset()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.vehicleMotion.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000028, 0x8000000249486D40, 0x4D656C6369686576, 0xED00006E6F69746FLL);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.vehicleMotion.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CAB74()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.vehicleMotion.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.vehicleMotion.setter()
{
}

uint64_t CAFCarObservable.$vehicleMotion.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleMotion, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
}

uint64_t CAFCarObservable.$vehicleMotion.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleMotion, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
}

uint64_t key path getter for CAFCarObservable.vehicleResources : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.vehicleResources.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.vehicleResources : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.vehicleResources.setter();
}

uint64_t CAFCarObservable.vehicleResources.didset()
{
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.vehicleResources.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD00000000000002BLL, 0x8000000249486D70, 0xD000000000000010, 0x8000000249486DA0);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.vehicleResources.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CAD98()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.vehicleResources.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.vehicleResources.setter()
{
}

uint64_t CAFCarObservable.$vehicleResources.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleResources, &demangling cache variable for type metadata for Published<CAFVehicleResources?>);
}

uint64_t CAFCarObservable.$vehicleResources.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleResources?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleResources, &demangling cache variable for type metadata for Published<CAFVehicleResources?>);
}

uint64_t key path getter for CAFCarObservable.vehicleUnits : CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarObservable.vehicleUnits.getter();
  *a1 = result;
  return result;
}

void key path setter for CAFCarObservable.vehicleUnits : CAFCarObservable(id *a1)
{
  id v1 = *a1;
  CAFCarObservable.vehicleUnits.setter();
}

uint64_t CAFCarObservable.vehicleUnits.didset()
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  uint64_t v0 = (void *)CAFCarObservable.vehicleUnits.getter();
  if (v0)
  {
    id v1 = v0;
    id v2 = objc_msgSend(v0, sel_description);

    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v5 = v4;
  }
  else
  {
    Swift::String v5 = (void *)0xE500000000000000;
    uint64_t v3 = 0x3E6C696E3CLL;
  }
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v7, 0xD000000000000027, 0x8000000249486DC0, 0x55656C6369686576, 0xEC0000007374696ELL);

  return swift_bridgeObjectRelease();
}

uint64_t CAFCarObservable.vehicleUnits.getter()
{
  return CAFCarObservable.automakerInputStreams.getter();
}

uint64_t sub_2493CAFBC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCarObservable.vehicleUnits.getter();
  *uint64_t v0 = result;
  return result;
}

void CAFCarObservable.vehicleUnits.setter()
{
}

uint64_t CAFCarObservable.$vehicleUnits.getter()
{
  return CAFCarObservable.$receivedAllValues.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleUnits, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
}

uint64_t CAFCarObservable.$receivedAllValues.getter(uint64_t a1, uint64_t *a2)
{
  return swift_endAccess();
}

uint64_t CAFCarObservable.$vehicleUnits.setter(uint64_t a1)
{
  return CAFCarObservable.$receivedAllValues.setter(a1, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>.Publisher, (uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__vehicleUnits, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
}

uint64_t CAFCarObservable.$receivedAllValues.setter(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_106();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11 - v10, a1, v6);
  OUTLINED_FUNCTION_8_3();
  __swift_instantiateConcreteTypeFromMangledName(a4);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 8))(a1, v6);
}

id CAFCarObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCarObservable.init(_:)(a1);
}

id CAFCarObservable.init(_:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleUnits?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v3);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleResources?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v5);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFVehicleMotion?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTripComputer?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v9);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFTire?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v10);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v11);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFSeat?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v13);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFPairedDevices?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v14);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v15);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v16);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v17);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFMedia?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v18);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v19);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v20);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v21);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v22);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v23);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFFuel?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v24);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v25);
  uint64_t v197 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v198 = v26;
  MEMORY[0x270FA5388](v27);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v28);
  uint64_t v195 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFElectricEngine?>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v196 = v29;
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v31);
  uint64_t v193 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDriverAssistance?>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v194 = v32;
  MEMORY[0x270FA5388](v33);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v34);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFDriveState?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v35);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v36);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFClosure?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v37);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v38);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFClimate?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v39);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v40);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharging?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v42);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerSettings?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v43);
  OUTLINED_FUNCTION_3_3();
  OUTLINED_FUNCTION_15_2(v44);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v45);
  OUTLINED_FUNCTION_24_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v46);
  OUTLINED_FUNCTION_106();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFAudioSettings?>);
  OUTLINED_FUNCTION_0_0();
  MEMORY[0x270FA5388](v47);
  OUTLINED_FUNCTION_106();
  OUTLINED_FUNCTION_16_1();
  unsigned int v48 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAudioSettings?);
  OUTLINED_FUNCTION_11_3();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_10_3();
  v49();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerExteriorCamera?);
  OUTLINED_FUNCTION_11_3();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_10_3();
  v50();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerNotificationHistory?);
  OUTLINED_FUNCTION_11_3();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_10_3();
  v51();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFAutomakerSettings?);
  OUTLINED_FUNCTION_11_3();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_10_3();
  v52();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFCharging?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v53();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFClimate?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v54();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFClosure?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v55();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDriveState?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v56();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFDriverAssistance?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v57();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFElectricEngine?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v58();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFEnvironmentalConditions?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v59();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFFuel?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v60();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFHighVoltageBattery?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v61();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFInternalCombustionEngine?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v62();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMedia?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_19_2();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_14_2();
  OUTLINED_FUNCTION_10_3();
  v63();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFNowPlayingInformation?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v64();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFPairedDevices?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v65();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFSeat?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v66();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTire?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v67();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTripComputer?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v68();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleMotion?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v69();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleResources?);
  OUTLINED_FUNCTION_11_3();
  OUTLINED_FUNCTION_21_1();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_18_2();
  OUTLINED_FUNCTION_10_3();
  v70();
  OUTLINED_FUNCTION_16_1();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFVehicleUnits?);
  OUTLINED_FUNCTION_11_3();
  Published.init(initialValue:)();
  OUTLINED_FUNCTION_17_2();
  OUTLINED_FUNCTION_10_3();
  v71();
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  unint64_t v201 = 0xD00000000000001DLL;
  unint64_t v202 = 0x80000002494862B0;
  id v72 = objc_msgSend(a1, sel_description);
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v75 = v74;

  v76._countAndFlagsBits = v73;
  v76._object = v75;
  String.append(_:)(v76);
  swift_bridgeObjectRelease();
  os_log_type_t v77 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v77, 0xD00000000000001DLL, 0x80000002494862B0, 0x293A5F2874696E69, 0xE800000000000000);
  swift_bridgeObjectRelease();
  *(void *)&v48[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable_observed] = a1;
  id v78 = a1;
  id v79 = objc_msgSend(v78, sel_receivedAllValues);
  uint64_t v80 = (uint64_t)&v48[OBJC_IVAR____TtC10CAFCombine16CAFCarObservable__receivedAllValues];
  OUTLINED_FUNCTION_8_3();
  LOBYTE(v200) = (_BYTE)v79;
  Published.init(initialValue:)();
  swift_endAccess();
  uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v81, v82, v78))
  {
    id v83 = objc_msgSend(v78, sel_audioSettings);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_5_3();
    v84();
    uint64_t v200 = (uint64_t)v79;
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v85, v86, v78))
  {
    id v87 = objc_msgSend(v78, sel_automakerExteriorCamera);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_8_3();
    OUTLINED_FUNCTION_5_3();
    v88();
    uint64_t v200 = (uint64_t)v79;
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unsigned __int8 v91 = outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v89, v90, v78);
  uint64_t v92 = MEMORY[0x263F8EE78];
  if (v91)
  {
    id v93 = objc_msgSend(v78, sel_automakerInputStreams);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
    uint64_t v80 = OUTLINED_FUNCTION_26_1();

    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v80;
  }
  else
  {
    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v92;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerInputStreams]);
  OUTLINED_FUNCTION_20_2();
  swift_endAccess();
  uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v94, v95, v78))
  {
    id v96 = objc_msgSend(v78, sel_automakerNotificationHistory);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v97();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v98, v99, v78))
  {
    id v100 = objc_msgSend(v78, sel_automakerNotifications);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerNotifications);
    uint64_t v80 = OUTLINED_FUNCTION_26_1();

    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v80;
  }
  else
  {
    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v92;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerNotifications]);
  OUTLINED_FUNCTION_20_2();
  swift_endAccess();
  uint64_t v101 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v101, v102, v78))
  {
    id v103 = objc_msgSend(v78, sel_automakerRequestContent);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
    uint64_t v80 = OUTLINED_FUNCTION_26_1();

    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v80;
  }
  else
  {
    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v92;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFAutomakerRequestContent]);
  OUTLINED_FUNCTION_20_2();
  swift_endAccess();
  uint64_t v104 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v104, v105, v78))
  {
    id v106 = objc_msgSend(v78, sel_automakerSettings);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v107();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v108, v109, v78))
  {
    id v110 = objc_msgSend(v78, sel_charging);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v111();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v112 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v112, v113, v78))
  {
    id v114 = objc_msgSend(v78, sel_climate);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v115();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v116, v117, v78))
  {
    id v118 = objc_msgSend(v78, sel_closure);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v119();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v120, v121, v78))
  {
    id v122 = objc_msgSend(v78, sel_driveState);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v123();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v124, v125, v78))
  {
    id v126 = objc_msgSend(v78, sel_driverAssistance);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    (*(void (**)(uint64_t, uint64_t))(v194 + 8))(v80, v193);
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v127, v128, v78))
  {
    id v129 = objc_msgSend(v78, sel_electricEngine);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    (*(void (**)(uint64_t, uint64_t))(v196 + 8))(v80, v195);
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v130 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v130, v131, v78))
  {
    id v132 = objc_msgSend(v78, sel_environmentalConditions);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v80, v197);
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v133, v134, v78))
  {
    id v135 = objc_msgSend(v78, sel_fuel);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v136();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v137, v138, v78))
  {
    id v139 = objc_msgSend(v78, sel_highVoltageBattery);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v140();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v141 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v141, v142, v78))
  {
    id v143 = objc_msgSend(v78, sel_internalCombustionEngine);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v144();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v145, v146, v78))
  {
    id v147 = objc_msgSend(v78, sel_media);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v148();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v149, v150, v78))
  {
    id v151 = objc_msgSend(v78, sel_nowPlayingInformation);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v152();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v153, v154, v78))
  {
    id v155 = objc_msgSend(v78, sel_pairedDevices);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v156();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v157 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v157, v158, v78))
  {
    id v159 = objc_msgSend(v78, sel_seat);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v160();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v161, v162, v78))
  {
    id v163 = objc_msgSend(v78, sel_testingUseOnly);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFTestingUseOnly);
    uint64_t v164 = OUTLINED_FUNCTION_26_1();

    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v164;
  }
  else
  {
    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v92;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFTestingUseOnly]);
  OUTLINED_FUNCTION_20_2();
  swift_endAccess();
  uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v165, v166, v78))
  {
    id v167 = objc_msgSend(v78, sel_tire);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v168();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v169 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v169, v170, v78))
  {
    id v171 = objc_msgSend(v78, sel_tripComputer);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v172();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v173, v174, v78))
  {
    id v175 = objc_msgSend(v78, sel_uiControl);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUIControl);
    uint64_t v176 = OUTLINED_FUNCTION_26_1();

    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v176;
  }
  else
  {
    OUTLINED_FUNCTION_7_2();
    uint64_t v200 = v92;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFUIControl]);
  OUTLINED_FUNCTION_20_2();
  swift_endAccess();
  uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v177, v178, v78))
  {
    id v179 = objc_msgSend(v78, sel_vehicleMotion);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_5_3();
    v180();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v181, v182, v78))
  {
    id v183 = objc_msgSend(v78, sel_vehicleResources);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v184();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }
  uint64_t v185 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v185, v186, v78))
  {
    id v187 = objc_msgSend(v78, sel_vehicleUnits);
    OUTLINED_FUNCTION_12_2();
    OUTLINED_FUNCTION_2_3();
    OUTLINED_FUNCTION_13_2();
    OUTLINED_FUNCTION_5_3();
    v188();
    OUTLINED_FUNCTION_6_3();
    Published.init(initialValue:)();
    swift_endAccess();
  }

  v189 = (objc_class *)type metadata accessor for CAFCarObservable();
  v199.receiver = v48;
  v199.super_class = v189;
  id v190 = objc_msgSendSuper2(&v199, sel_init);

  return v190;
}

id CAFCarObservable.__deallocating_deinit()
{
  os_log_type_t v1 = static os_log_type_t.debug.getter();
  static CAFCombineLogger.log(_:message:function:file:line:)(v1, 0xD000000000000019, 0x8000000249486340, 0x74696E696564, 0xE600000000000000);
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for CAFCarObservable();
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

id CAFCarObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCarObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCarObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCarObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCarObservable(void **a1)
{
  return CAFCarObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCarObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCarObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarObservable.carDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_30_1();
  _StringGuts.grow(_:)(59);
  v4._countAndFlagsBits = 0xD000000000000030;
  v4._object = (void *)0x8000000249486380;
  String.append(_:)(v4);
  if (a2) {
    uint64_t v5 = 1702195828;
  }
  else {
    uint64_t v5 = 0x65736C6166;
  }
  if (a2) {
    unint64_t v6 = 0xE400000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  unint64_t v7 = v6;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3D72616320202ELL;
  v8._object = (void *)0xE700000000000000;
  String.append(_:)(v8);
  id v9 = objc_msgSend(v2, sel_description);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_29_1();
  static CAFCombineLogger.log(_:message:function:file:line:)(v14, v15, v16, 0xD000000000000022, v17);
  swift_bridgeObjectRelease();
  objc_msgSend(v2, sel_receivedAllValues);

  return CAFCarObservable.receivedAllValues.setter();
}

void CAFCarObservable.carDidUpdateAccessories(_:)()
{
  OUTLINED_FUNCTION_30_1();
  _StringGuts.grow(_:)(46);
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend(v0, sel_description, 0xD00000000000002CLL, 0x80000002494863F0);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Swift::String v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  OUTLINED_FUNCTION_29_1();
  static CAFCombineLogger.log(_:message:function:file:line:)(v6, v7, v8, 0xD00000000000001BLL, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v10, v11, v0))
  {
    id v12 = objc_msgSend(v0, sel_audioSettings);
    CAFCarObservable.audioSettings.setter();
  }
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v13, v14, v0))
  {
    id v15 = objc_msgSend(v0, sel_automakerExteriorCamera);
    CAFCarObservable.automakerExteriorCamera.setter();
  }
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v16, v17, v0))
  {
    id v18 = objc_msgSend(v0, sel_automakerInputStreams);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerInputStreams);
    OUTLINED_FUNCTION_25_1();

    OUTLINED_FUNCTION_22_0();
    CAFCarObservable.automakerInputStreams.setter();
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v19, v20, v0))
  {
    id v21 = objc_msgSend(v0, sel_automakerNotificationHistory);
    CAFCarObservable.automakerNotificationHistory.setter();
  }
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v22, v23, v0))
  {
    id v24 = objc_msgSend(v0, sel_automakerNotifications);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerNotifications);
    OUTLINED_FUNCTION_25_1();

    OUTLINED_FUNCTION_22_0();
    CAFCarObservable.automakerNotifications.setter();
  }
  uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v25, v26, v0))
  {
    id v27 = objc_msgSend(v0, sel_automakerRequestContent);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFAutomakerRequestContent);
    OUTLINED_FUNCTION_25_1();

    OUTLINED_FUNCTION_22_0();
    CAFCarObservable.automakerRequestContent.setter();
  }
  uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v28, v29, v0))
  {
    id v30 = objc_msgSend(v0, sel_automakerSettings);
    CAFCarObservable.automakerSettings.setter();
  }
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v31, v32, v0))
  {
    id v33 = objc_msgSend(v0, sel_charging);
    CAFCarObservable.charging.setter();
  }
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v34, v35, v0))
  {
    id v36 = objc_msgSend(v0, sel_climate);
    CAFCarObservable.climate.setter();
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v37, v38, v0))
  {
    id v39 = objc_msgSend(v0, sel_closure);
    CAFCarObservable.closure.setter();
  }
  uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v40, v41, v0))
  {
    id v42 = objc_msgSend(v0, sel_driveState);
    CAFCarObservable.driveState.setter();
  }
  uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v43, v44, v0))
  {
    id v45 = objc_msgSend(v0, sel_driverAssistance);
    CAFCarObservable.driverAssistance.setter();
  }
  uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v46, v47, v0))
  {
    id v48 = objc_msgSend(v0, sel_electricEngine);
    CAFCarObservable.electricEngine.setter();
  }
  uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v49, v50, v0))
  {
    id v51 = objc_msgSend(v0, sel_environmentalConditions);
    CAFCarObservable.environmentalConditions.setter();
  }
  uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v52, v53, v0))
  {
    id v54 = objc_msgSend(v0, sel_fuel);
    CAFCarObservable.fuel.setter();
  }
  uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v55, v56, v0))
  {
    id v57 = objc_msgSend(v0, sel_highVoltageBattery);
    CAFCarObservable.highVoltageBattery.setter();
  }
  uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v58, v59, v0))
  {
    id v60 = objc_msgSend(v0, sel_internalCombustionEngine);
    CAFCarObservable.internalCombustionEngine.setter();
  }
  uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v61, v62, v0))
  {
    id v63 = objc_msgSend(v0, sel_media);
    CAFCarObservable.media.setter();
  }
  uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v64, v65, v0))
  {
    id v66 = objc_msgSend(v0, sel_nowPlayingInformation);
    CAFCarObservable.nowPlayingInformation.setter();
  }
  uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v67, v68, v0))
  {
    id v69 = objc_msgSend(v0, sel_pairedDevices);
    CAFCarObservable.pairedDevices.setter();
  }
  uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v70, v71, v0))
  {
    id v72 = objc_msgSend(v0, sel_seat);
    CAFCarObservable.seat.setter();
  }
  uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v73, v74, v0))
  {
    id v75 = objc_msgSend(v0, sel_testingUseOnly);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFTestingUseOnly);
    OUTLINED_FUNCTION_25_1();

    OUTLINED_FUNCTION_22_0();
    CAFCarObservable.testingUseOnly.setter();
  }
  uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v76, v77, v0))
  {
    id v78 = objc_msgSend(v0, sel_tire);
    CAFCarObservable.tire.setter();
  }
  uint64_t v79 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v79, v80, v0))
  {
    id v81 = objc_msgSend(v0, sel_tripComputer);
    CAFCarObservable.tripComputer.setter();
  }
  uint64_t v82 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v82, v83, v0))
  {
    id v84 = objc_msgSend(v0, sel_uiControl);
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUIControl);
    OUTLINED_FUNCTION_25_1();

    OUTLINED_FUNCTION_22_0();
    CAFCarObservable.uiControl.setter();
  }
  uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v85, v86, v0))
  {
    id v87 = objc_msgSend(v0, sel_vehicleMotion);
    CAFCarObservable.vehicleMotion.setter();
  }
  uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v88, v89, v0))
  {
    id v90 = objc_msgSend(v0, sel_vehicleResources);
    CAFCarObservable.vehicleResources.setter();
  }
  uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(v91, v92, v0))
  {
    id v93 = objc_msgSend(v0, sel_vehicleUnits);
    CAFCarObservable.vehicleUnits.setter();
  }
}

id outlined bridged method (mbnn) of @objc CAFCar.registered(forAccessory:)(uint64_t a1, uint64_t a2, void *a3)
{
  Swift::String v4 = (void *)MEMORY[0x24C59DAA0]();
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(a3, sel_registeredForAccessory_, v4);

  return v5;
}

uint64_t type metadata accessor for CAFCarObservable()
{
  uint64_t result = type metadata singleton initialization cache for CAFCarObservable;
  if (!type metadata singleton initialization cache for CAFCarObservable) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCar()
{
  return lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable(&lazy protocol witness table cache variable for type CAFCarObservable and conformance CAFCarObservable);
}

unint64_t lazy protocol witness table accessor for type CAFCar and conformance CAFCar()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFCar and conformance CAFCar;
  if (!lazy protocol witness table cache variable for type CAFCar and conformance CAFCar)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFCar);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFCar and conformance CAFCar);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCarObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFCarObservable and conformance CAFCarObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCarObservable and conformance CAFCarObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFCarObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2493CE3B0()
{
  return CAFCarObservable.$receivedAllValues.getter();
}

uint64_t sub_2493CE3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for Published<Bool>.Publisher, CAFCarObservable.$receivedAllValues.setter);
}

uint64_t sub_2493CE408()
{
  return CAFCarObservable.$audioSettings.getter();
}

uint64_t sub_2493CE42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAudioSettings?>.Publisher, CAFCarObservable.$audioSettings.setter);
}

uint64_t sub_2493CE460()
{
  return CAFCarObservable.$automakerExteriorCamera.getter();
}

uint64_t sub_2493CE484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>.Publisher, CAFCarObservable.$automakerExteriorCamera.setter);
}

uint64_t sub_2493CE4B8()
{
  return CAFCarObservable.$automakerInputStreams.getter();
}

uint64_t sub_2493CE4DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerInputStreams]>.Publisher, CAFCarObservable.$automakerInputStreams.setter);
}

uint64_t sub_2493CE510()
{
  return CAFCarObservable.$automakerNotificationHistory.getter();
}

uint64_t sub_2493CE534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>.Publisher, CAFCarObservable.$automakerNotificationHistory.setter);
}

uint64_t sub_2493CE568()
{
  return CAFCarObservable.$automakerNotifications.getter();
}

uint64_t sub_2493CE58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerNotifications]>.Publisher, CAFCarObservable.$automakerNotifications.setter);
}

uint64_t sub_2493CE5C0()
{
  return CAFCarObservable.$automakerRequestContent.getter();
}

uint64_t sub_2493CE5E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFAutomakerRequestContent]>.Publisher, CAFCarObservable.$automakerRequestContent.setter);
}

uint64_t sub_2493CE618()
{
  return CAFCarObservable.$automakerSettings.getter();
}

uint64_t sub_2493CE63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFAutomakerSettings?>.Publisher, CAFCarObservable.$automakerSettings.setter);
}

uint64_t sub_2493CE670()
{
  return CAFCarObservable.$charging.getter();
}

uint64_t sub_2493CE694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFCharging?>.Publisher, CAFCarObservable.$charging.setter);
}

uint64_t sub_2493CE6C8()
{
  return CAFCarObservable.$climate.getter();
}

uint64_t sub_2493CE6EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFClimate?>.Publisher, CAFCarObservable.$climate.setter);
}

uint64_t sub_2493CE720()
{
  return CAFCarObservable.$closure.getter();
}

uint64_t sub_2493CE744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFClosure?>.Publisher, CAFCarObservable.$closure.setter);
}

uint64_t sub_2493CE778()
{
  return CAFCarObservable.$driveState.getter();
}

uint64_t sub_2493CE79C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFDriveState?>.Publisher, CAFCarObservable.$driveState.setter);
}

uint64_t sub_2493CE7D0()
{
  return CAFCarObservable.$driverAssistance.getter();
}

uint64_t sub_2493CE7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFDriverAssistance?>.Publisher, CAFCarObservable.$driverAssistance.setter);
}

uint64_t sub_2493CE828()
{
  return CAFCarObservable.$electricEngine.getter();
}

uint64_t sub_2493CE84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFElectricEngine?>.Publisher, CAFCarObservable.$electricEngine.setter);
}

uint64_t sub_2493CE880()
{
  return CAFCarObservable.$environmentalConditions.getter();
}

uint64_t sub_2493CE8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFEnvironmentalConditions?>.Publisher, CAFCarObservable.$environmentalConditions.setter);
}

uint64_t sub_2493CE8D8()
{
  return CAFCarObservable.$fuel.getter();
}

uint64_t sub_2493CE8FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFFuel?>.Publisher, CAFCarObservable.$fuel.setter);
}

uint64_t sub_2493CE930()
{
  return CAFCarObservable.$highVoltageBattery.getter();
}

uint64_t sub_2493CE954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFHighVoltageBattery?>.Publisher, CAFCarObservable.$highVoltageBattery.setter);
}

uint64_t sub_2493CE988()
{
  return CAFCarObservable.$internalCombustionEngine.getter();
}

uint64_t sub_2493CE9AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFInternalCombustionEngine?>.Publisher, CAFCarObservable.$internalCombustionEngine.setter);
}

uint64_t sub_2493CE9E0()
{
  return CAFCarObservable.$media.getter();
}

uint64_t sub_2493CEA04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFMedia?>.Publisher, CAFCarObservable.$media.setter);
}

uint64_t sub_2493CEA38()
{
  return CAFCarObservable.$nowPlayingInformation.getter();
}

uint64_t sub_2493CEA5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFNowPlayingInformation?>.Publisher, CAFCarObservable.$nowPlayingInformation.setter);
}

uint64_t sub_2493CEA90()
{
  return CAFCarObservable.$pairedDevices.getter();
}

uint64_t sub_2493CEAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFPairedDevices?>.Publisher, CAFCarObservable.$pairedDevices.setter);
}

uint64_t sub_2493CEAE8()
{
  return CAFCarObservable.$seat.getter();
}

uint64_t sub_2493CEB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFSeat?>.Publisher, CAFCarObservable.$seat.setter);
}

uint64_t sub_2493CEB40()
{
  return CAFCarObservable.$testingUseOnly.getter();
}

uint64_t sub_2493CEB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFTestingUseOnly]>.Publisher, CAFCarObservable.$testingUseOnly.setter);
}

uint64_t sub_2493CEB98()
{
  return CAFCarObservable.$tire.getter();
}

uint64_t sub_2493CEBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFTire?>.Publisher, CAFCarObservable.$tire.setter);
}

uint64_t sub_2493CEBF0()
{
  return CAFCarObservable.$tripComputer.getter();
}

uint64_t sub_2493CEC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFTripComputer?>.Publisher, CAFCarObservable.$tripComputer.setter);
}

uint64_t sub_2493CEC48()
{
  return CAFCarObservable.$uiControl.getter();
}

uint64_t sub_2493CEC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<[CAFUIControl]>.Publisher, CAFCarObservable.$uiControl.setter);
}

uint64_t sub_2493CECA0()
{
  return CAFCarObservable.$vehicleMotion.getter();
}

uint64_t sub_2493CECC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleMotion?>.Publisher, CAFCarObservable.$vehicleMotion.setter);
}

uint64_t sub_2493CECF8()
{
  return CAFCarObservable.$vehicleResources.getter();
}

uint64_t sub_2493CED1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleResources?>.Publisher, CAFCarObservable.$vehicleResources.setter);
}

uint64_t sub_2493CED50()
{
  return CAFCarObservable.$vehicleUnits.getter();
}

uint64_t sub_2493CED74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCarObservable.$receivedAllValues : CAFCarObservable(a1, a2, a3, a4, &demangling cache variable for type metadata for Published<CAFVehicleUnits?>.Publisher, CAFCarObservable.$vehicleUnits.setter);
}

uint64_t ObjC metadata update function for CAFCarObservable()
{
  return type metadata accessor for CAFCarObservable();
}

void type metadata completion function for CAFCarObservable()
{
  type metadata accessor for Published<Bool>();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAudioSettings?>, &demangling cache variable for type metadata for CAFAudioSettings?);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerExteriorCamera?>, &demangling cache variable for type metadata for CAFAutomakerExteriorCamera?);
      if (v2 <= 0x3F)
      {
        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerInputStreams]>, &demangling cache variable for type metadata for [CAFAutomakerInputStreams]);
        if (v3 <= 0x3F)
        {
          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerNotificationHistory?>, &demangling cache variable for type metadata for CAFAutomakerNotificationHistory?);
          if (v4 <= 0x3F)
          {
            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerNotifications]>, &demangling cache variable for type metadata for [CAFAutomakerNotifications]);
            if (v5 <= 0x3F)
            {
              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFAutomakerRequestContent]>, &demangling cache variable for type metadata for [CAFAutomakerRequestContent]);
              if (v6 <= 0x3F)
              {
                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFAutomakerSettings?>, &demangling cache variable for type metadata for CAFAutomakerSettings?);
                if (v7 <= 0x3F)
                {
                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFCharging?>, &demangling cache variable for type metadata for CAFCharging?);
                  if (v8 <= 0x3F)
                  {
                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFClimate?>, &demangling cache variable for type metadata for CAFClimate?);
                    if (v9 <= 0x3F)
                    {
                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFClosure?>, &demangling cache variable for type metadata for CAFClosure?);
                      if (v10 <= 0x3F)
                      {
                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFDriveState?>, &demangling cache variable for type metadata for CAFDriveState?);
                        if (v11 <= 0x3F)
                        {
                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFDriverAssistance?>, &demangling cache variable for type metadata for CAFDriverAssistance?);
                          if (v12 <= 0x3F)
                          {
                            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFElectricEngine?>, &demangling cache variable for type metadata for CAFElectricEngine?);
                            if (v13 <= 0x3F)
                            {
                              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFEnvironmentalConditions?>, &demangling cache variable for type metadata for CAFEnvironmentalConditions?);
                              if (v14 <= 0x3F)
                              {
                                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFFuel?>, &demangling cache variable for type metadata for CAFFuel?);
                                if (v15 <= 0x3F)
                                {
                                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFHighVoltageBattery?>, &demangling cache variable for type metadata for CAFHighVoltageBattery?);
                                  if (v16 <= 0x3F)
                                  {
                                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFInternalCombustionEngine?>, &demangling cache variable for type metadata for CAFInternalCombustionEngine?);
                                    if (v17 <= 0x3F)
                                    {
                                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFMedia?>, &demangling cache variable for type metadata for CAFMedia?);
                                      if (v18 <= 0x3F)
                                      {
                                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFNowPlayingInformation?>, &demangling cache variable for type metadata for CAFNowPlayingInformation?);
                                        if (v19 <= 0x3F)
                                        {
                                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFPairedDevices?>, &demangling cache variable for type metadata for CAFPairedDevices?);
                                          if (v20 <= 0x3F)
                                          {
                                            type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFSeat?>, &demangling cache variable for type metadata for CAFSeat?);
                                            if (v21 <= 0x3F)
                                            {
                                              type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFTestingUseOnly]>, &demangling cache variable for type metadata for [CAFTestingUseOnly]);
                                              if (v22 <= 0x3F)
                                              {
                                                type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFTire?>, &demangling cache variable for type metadata for CAFTire?);
                                                if (v23 <= 0x3F)
                                                {
                                                  type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFTripComputer?>, &demangling cache variable for type metadata for CAFTripComputer?);
                                                  if (v24 <= 0x3F)
                                                  {
                                                    type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<[CAFUIControl]>, &demangling cache variable for type metadata for [CAFUIControl]);
                                                    if (v25 <= 0x3F)
                                                    {
                                                      type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleMotion?>, &demangling cache variable for type metadata for CAFVehicleMotion?);
                                                      if (v26 <= 0x3F)
                                                      {
                                                        type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleResources?>, &demangling cache variable for type metadata for CAFVehicleResources?);
                                                        if (v27 <= 0x3F)
                                                        {
                                                          type metadata accessor for Published<CAFAudioSettings?>(319, &lazy cache variable for type metadata for Published<CAFVehicleUnits?>, &demangling cache variable for type metadata for CAFVehicleUnits?);
                                                          if (v28 <= 0x3F) {
                                                            swift_updateClassMetadata2();
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t method lookup function for CAFCarObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCarObservable);
}

uint64_t dispatch thunk of CAFCarObservable.receivedAllValues.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFCarObservable.$receivedAllValues.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFCarObservable.audioSettings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFCarObservable.$audioSettings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerExteriorCamera.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerExteriorCamera.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerInputStreams.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerInputStreams.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerNotificationHistory.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerNotificationHistory.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerNotifications.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerNotifications.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerRequestContent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x260))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerRequestContent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x278))();
}

uint64_t dispatch thunk of CAFCarObservable.automakerSettings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CAFCarObservable.$automakerSettings.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAFCarObservable.charging.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of CAFCarObservable.$charging.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of CAFCarObservable.climate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CAFCarObservable.$climate.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAFCarObservable.closure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of CAFCarObservable.$closure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CAFCarObservable.driveState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x350))();
}

uint64_t dispatch thunk of CAFCarObservable.$driveState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x368))();
}

uint64_t dispatch thunk of CAFCarObservable.driverAssistance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CAFCarObservable.$driverAssistance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of CAFCarObservable.electricEngine.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of CAFCarObservable.$electricEngine.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CAFCarObservable.environmentalConditions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CAFCarObservable.$environmentalConditions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CAFCarObservable.fuel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CAFCarObservable.$fuel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CAFCarObservable.highVoltageBattery.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of CAFCarObservable.$highVoltageBattery.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of CAFCarObservable.internalCombustionEngine.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of CAFCarObservable.$internalCombustionEngine.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of CAFCarObservable.media.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CAFCarObservable.$media.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of CAFCarObservable.nowPlayingInformation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CAFCarObservable.$nowPlayingInformation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of CAFCarObservable.pairedDevices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CAFCarObservable.$pairedDevices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of CAFCarObservable.seat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CAFCarObservable.$seat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of CAFCarObservable.testingUseOnly.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CAFCarObservable.$testingUseOnly.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x578))();
}

uint64_t dispatch thunk of CAFCarObservable.tire.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x590))();
}

uint64_t dispatch thunk of CAFCarObservable.$tire.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5A8))();
}

uint64_t dispatch thunk of CAFCarObservable.tripComputer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5C0))();
}

uint64_t dispatch thunk of CAFCarObservable.$tripComputer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5D8))();
}

uint64_t dispatch thunk of CAFCarObservable.uiControl.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5F0))();
}

uint64_t dispatch thunk of CAFCarObservable.$uiControl.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x608))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleMotion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x620))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleMotion.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x638))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleResources.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x650))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleResources.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x668))();
}

uint64_t dispatch thunk of CAFCarObservable.vehicleUnits.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x680))();
}

uint64_t dispatch thunk of CAFCarObservable.$vehicleUnits.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x698))();
}

uint64_t dispatch thunk of CAFCarObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 1712))();
}

void type metadata accessor for Published<Bool>()
{
  if (!lazy cache variable for type metadata for Published<Bool>)
  {
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<Bool>);
    }
  }
}

void type metadata accessor for Published<CAFAudioSettings?>(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a3);
    unint64_t v4 = type metadata accessor for Published();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t OUTLINED_FUNCTION_2_3()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_4_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  *(void *)(v1 - 120) = v0;
  return v1 - 120;
}

uint64_t OUTLINED_FUNCTION_7_2()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_8_3()
{
  return swift_beginAccess();
}

uint64_t OUTLINED_FUNCTION_11_3()
{
  return v0 - 112;
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  *(void *)(v0 - 256) = v1;
  return v1;
}

void OUTLINED_FUNCTION_15_2(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
}

void OUTLINED_FUNCTION_16_1()
{
  *(void *)(v0 - 112) = 0;
}

uint64_t OUTLINED_FUNCTION_18_2()
{
  *(void *)(v0 - 256) = v1;
  return v1;
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return Published.init(initialValue:)();
}

uint64_t OUTLINED_FUNCTION_22_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_25_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_26_1()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return static Published.subscript.getter();
}

uint64_t OUTLINED_FUNCTION_28_1()
{
  return static Published.subscript.setter();
}

uint64_t OUTLINED_FUNCTION_31_2()
{
  return swift_getKeyPath();
}

void CAFVent.combinationsBridged.getter()
{
  id v1 = objc_msgSend(v0, sel_combinations);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v10 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      unint64_t v6 = v5;
      id v7 = objc_msgSend(v5, sel_unsignedLongLongValue);

      unint64_t v9 = *(void *)(v10 + 16);
      unint64_t v8 = *(void *)(v10 + 24);
      if (v9 >= v8 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v10 + 16) = v9 + 1;
      *(void *)(v10 + 8 * v9 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

id CAFVentObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
}

uint64_t CAFVentObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFVentObservable.combinations.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVentObservable.$combinations.getter()
{
  return CAFVentObservable.$combinations.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFVentObservable.currentIndex : CAFVentObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CAFVentObservable.currentIndex.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFVentObservable.currentIndex : CAFVentObservable()
{
  return CAFVentObservable.currentIndex.setter();
}

uint64_t CAFVentObservable.currentIndex.getter()
{
  OUTLINED_FUNCTION_116();
  unint64_t v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v15;
  uint64_t v2 = OUTLINED_FUNCTION_4_1();
  uint64_t v4 = *v3;
  unint64_t v11 = OUTLINED_FUNCTION_3_1(v2, (uint64_t)v3, v5, v6, v7, v8, v9, v10, v14);
  v12(v11);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFVentObservable.currentIndex.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_8_1();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFVentObservable.currentIndex.modify())(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  int v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  return CAFVentObservable.currentIndex.modify;
}

void CAFVentObservable.currentIndex.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(id *)(*(void *)a1 + 64);
  uint64_t v3 = OUTLINED_FUNCTION_7_0();
  specialized static SafePublished.subscript.setter(v3);

  free(v1);
}

uint64_t CAFVentObservable.$currentIndex.getter()
{
  return CAFVentObservable.$currentIndex.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__currentIndex, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.autoMode.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVentObservable.$autoMode.getter()
{
  return CAFVentObservable.$combinations.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__autoMode, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFVentObservable.on : CAFVentObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFVentObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFVentObservable.on : CAFVentObservable()
{
  return CAFVentObservable.on.setter();
}

uint64_t CAFVentObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  unint64_t v15 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v15;
  uint64_t v2 = OUTLINED_FUNCTION_4_1();
  uint64_t v4 = *v3;
  unint64_t v11 = OUTLINED_FUNCTION_3_1(v2, (uint64_t)v3, v5, v6, v7, v8, v9, v10, v14);
  v12(v11);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFVentObservable.on.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_8_1();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFVentObservable.on.modify())(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  char v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  return CAFVentObservable.on.modify;
}

void CAFVentObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  id v2 = *(id *)(*(void *)a1 + 64);
  uint64_t v3 = OUTLINED_FUNCTION_7_0();
  specialized static SafePublished.subscript.setter(v3);

  free(v1);
}

uint64_t CAFVentObservable.$on.getter()
{
  return CAFVentObservable.$currentIndex.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.$currentIndex.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFVentObservable.vehicleLayoutKey.getter()
{
  return CAFVentObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVentObservable.$vehicleLayoutKey.getter()
{
  return CAFVentObservable.$combinations.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.name.getter()
{
  return CAFVentObservable.vehicleLayoutKey.getter();
}

uint64_t CAFVentObservable.$name.getter()
{
  return CAFVentObservable.$combinations.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVentObservable.$combinations.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFVentObservable._description.getter()
{
  HIBYTE(v30._object) = -18;
  strcpy((char *)&v30, "<unregistered>");
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForVentCombinations))
  {
    uint64_t v4 = CAFVentObservable.combinations.getter();
    type metadata accessor for CAFVentTypes(0);
    uint64_t v2 = MEMORY[0x24C59DB40](v4, v5);
    uint64_t v3 = v6;
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = 0x73696765726E753CLL;
  uint64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForCurrentIndex, v2))
  {
    LODWORD(v31) = CAFVentObservable.currentIndex.getter();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v9;
  }
  uint64_t v10 = 0x73696765726E753CLL;
  unint64_t v11 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForAutoMode))
  {
    LOBYTE(v31) = CAFVentObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v10 = String.init<A>(describing:)();
    unint64_t v11 = v12;
  }
  uint64_t v13 = 0x73696765726E753CLL;
  uint64_t v14 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForOn))
  {
    LOBYTE(v31) = CAFVentObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v14 = v15;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    v30._countAndFlagsBits = CAFVentObservable.vehicleLayoutKey.getter();
    v30._object = v16;
  }
  _StringGuts.grow(_:)(106);
  v17._object = (void *)0x8000000249486E70;
  v17._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  v18._countAndFlagsBits = 0xD000000000000011;
  v18._object = (void *)0x8000000249486E90;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v29;
  v19._object = v3;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000010;
  v20._object = (void *)0x8000000249486EB0;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v7;
  v21._object = v8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v22._object = (void *)0xEC000000203A6564;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v10;
  v23._object = v11;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x203A6E6F202CLL;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v13;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0x8000000249485D90;
  v26._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v26);
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 4095264;
  v27._object = (void *)0xE300000000000000;
  String.append(_:)(v27);
  return 0;
}

uint64_t CAFVentObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFVentObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFVentObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFVentObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFVentObservable.init(_:)(a1);
}

id CAFVentObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, [CAFVentTypes]>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__currentIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVentObservable, UInt32>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__autoMode;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v13 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__on;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVentObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v15 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__vehicleLayoutKey;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVentObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__name;
  uint64_t v19 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v18] = specialized SafePublished.init(observedValuekeypath:)(v19);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed] = a1;
  id v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFVentObservable();
  id v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

uint64_t CAFVentObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFVentObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine17CAFVentObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVentObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVentObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFVentObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFVentObservable@<X0>(void *a1@<X8>)
{
  id result = CAFVentObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFVentObservable(void **a1)
{
  return CAFVentObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVentObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFVentObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

void CAFVentObservable.ventService(_:didUpdateCombinations:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = *(void *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFVentObservable__combinations);
  if (a2 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (v5)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5 & ~(v5 >> 63), 0);
    if (v5 < 0)
    {
      __break(1u);
      return;
    }
    uint64_t v12 = v4;
    for (uint64_t i = 0; i != v5; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C59DCE0](i, a2);
      }
      else {
        id v7 = *(id *)(a2 + 8 * i + 32);
      }
      uint64_t v8 = v7;
      id v9 = objc_msgSend(v7, sel_unsignedLongLongValue, v12);

      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
    }
  }
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();
  swift_bridgeObjectRelease();

  swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateCurrentIndex:)()
{
  return swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVentObservable.ventService(_:didUpdateName:)()
{
  return CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFVentObservable.ventService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFVentObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFVentObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFVentObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493D223C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFVentObservable.currentIndex.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D2264()
{
  return CAFVentObservable.currentIndex.setter();
}

uint64_t sub_2493D228C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFVentObservable.on.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D22B4()
{
  return CAFVentObservable.on.setter();
}

void sub_2493D22DC()
{
  OUTLINED_FUNCTION_2_1();
  CAFVent.combinationsBridged.getter();
  *uint64_t v0 = v1;
}

char *keypath_get_selector_currentIndex()
{
  return sel_currentIndex;
}

id sub_2493D2310@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_currentIndex);
  *a2 = result;
  return result;
}

id sub_2493D2344(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCurrentIndex_, *a1);
}

uint64_t sub_2493D2358()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.autoModeBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D2380()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.onBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_2493D23A8(char *a1)
{
  return CAFSeatHeatingCooling.onBridged.setter(*a1);
}

void sub_2493D23D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493D23F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFVentObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVent()
{
  return lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable);
}

unint64_t lazy protocol witness table accessor for type CAFVent and conformance CAFVent()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFVent and conformance CAFVent;
  if (!lazy protocol witness table cache variable for type CAFVent and conformance CAFVent)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFVent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFVent and conformance CAFVent);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFVentObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(&lazy protocol witness table cache variable for type CAFVentObservable and conformance CAFVentObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVentObservable and conformance CAFVentObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFVentObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFVentObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFVentObservable);
}

uint64_t dispatch thunk of CAFVentObservable.combinations.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFVentObservable.$combinations.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFVentObservable.currentIndex.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFVentObservable.$currentIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFVentObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFVentObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFVentObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFVentObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFVentObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFVentObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFVentObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFVentObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFVentObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFVentObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFVentObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 336))();
}

uint64_t partial apply for closure #1 in CAFVentObservable.resetCachedDescription()()
{
  return CAFVentObservable.cachedDescription.setter(0, 0);
}

id CAFPositionManager.driverSeat.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v38 = a1;
  uint64_t v2 = type metadata accessor for CAUVehicleLayoutKey();
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x270FA5388])();
  id v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v5);
  uint64_t v43 = (char *)&v33 - v8;
  uint64_t v40 = CAFPositionManager.layoutKeys.getter();
  id result = objc_msgSend(v1, sel_car);
  if (!result)
  {
LABEL_25:
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
  objc_msgSend(result, sel_rightHandDrive);

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAUVehicleLayoutKey>);
  uint64_t v11 = *(void *)(v4 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_249470980;
  uint64_t v14 = v4;
  uint64_t v15 = *(void (**)(void))(v4 + 104);
  unint64_t v41 = v13 + v12;
  v15();
  id result = (id)((uint64_t (*)(unint64_t, void, uint64_t))v15)(v13 + v12 + v11, *MEMORY[0x263F30D40], v2);
  uint64_t v16 = *(void *)(v13 + 16);
  if (!v16)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v32 = 1;
    uint64_t v22 = v38;
    return (id)__swift_storeEnumTagSinglePayload(v22, v32, 1, v2);
  }
  uint64_t v17 = *(void *)(v40 + 16);
  id v45 = (void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  uint64_t v46 = v17;
  uint64_t v36 = v13;
  unint64_t v37 = v40 + v12;
  uint64_t v33 = v14;
  uint64_t v18 = (void (**)(char *, uint64_t))(v14 + 8);
  unint64_t v19 = 0;
  unint64_t v34 = v40 + v11 + v12;
  uint64_t v35 = v16;
  uint64_t v44 = v18;
  uint64_t v39 = (unint64_t)v18 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  id v20 = v43;
  uint64_t v21 = v11;
  uint64_t v22 = v38;
  while (1)
  {
    if (v19 >= *(void *)(v13 + 16)) {
      goto LABEL_24;
    }
    unint64_t v42 = v19;
    unint64_t v23 = v41 + v21 * v19;
    Swift::String v24 = *v45;
    (*v45)(v20, v23, v2);
    if (!v46)
    {
      Swift::String v27 = *v44;
      goto LABEL_16;
    }
    uint64_t v25 = v21;
    v24(v7, v37, v2);
    lazy protocol witness table accessor for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey();
    swift_bridgeObjectRetain();
    char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
    Swift::String v27 = *v44;
    (*v44)(v7, v2);
    if (v26) {
      break;
    }
    if (v46 != 1)
    {
      unint64_t v28 = v34;
      uint64_t v29 = 1;
      while (1)
      {
        id result = (id)((uint64_t (*)(char *, unint64_t, uint64_t))v24)(v7, v28, v2);
        uint64_t v30 = v29 + 1;
        if (__OFADD__(v29, 1)) {
          break;
        }
        char v31 = dispatch thunk of static Equatable.== infix(_:_:)();
        v27(v7, v2);
        if (v31)
        {
          swift_bridgeObjectRelease();
          uint64_t v22 = v38;
          id v20 = v43;
          goto LABEL_19;
        }
        ++v29;
        v28 += v25;
        if (v30 == v46)
        {
          uint64_t v21 = v25;
          swift_bridgeObjectRelease();
          uint64_t v22 = v38;
          id v20 = v43;
          uint64_t v13 = v36;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
    uint64_t v13 = v36;
LABEL_15:
    uint64_t v16 = v35;
LABEL_16:
    unint64_t v19 = v42 + 1;
    id result = (id)((uint64_t (*)(char *, uint64_t))v27)(v20, v2);
    if (v19 == v16)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v32 = 1;
      return (id)__swift_storeEnumTagSinglePayload(v22, v32, 1, v2);
    }
  }
  swift_bridgeObjectRelease();
LABEL_19:
  swift_bridgeObjectRelease_n();
  (*(void (**)(uint64_t, char *, uint64_t))(v33 + 32))(v22, v20, v2);
  uint64_t v32 = 0;
  return (id)__swift_storeEnumTagSinglePayload(v22, v32, 1, v2);
}

unint64_t CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(uint64_t a1, char a2, char a3, uint64_t (*a4)(id), uint64_t a5)
{
  uint64_t v10 = CAUVehicleLayoutKey.rawValue.getter();
  uint64_t v11 = (void *)MEMORY[0x24C59DAA0](v10);
  swift_bridgeObjectRelease();
  id v12 = objc_msgSend(v5, sel_servicesForVehicleLayoutKey_, v11);

  type metadata accessor for CAFService();
  unint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v17 = v13;
  if (a4)
  {
    unint64_t v13 = specialized _ArrayProtocol.filter(_:)(v13, a4, a5);
    unint64_t v17 = v13;
  }
  if (a2)
  {
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v16)
      {
LABEL_6:
        if (a3) {
          return v13;
        }
      }
    }
    else if (!*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_6;
    }
    unint64_t v14 = CAFPositionManager.sharedServices(for:)();
    if (a4) {
      unint64_t v14 = specialized _ArrayProtocol.filter(_:)(v14, a4, a5);
    }
    specialized Array.append<A>(contentsOf:)(v14);
    return v17;
  }
  return v13;
}

uint64_t specialized _ArrayProtocol.filter(_:)(unint64_t a1, uint64_t (*a2)(id), uint64_t a3)
{
  unint64_t v6 = a1;
  uint64_t v18 = MEMORY[0x263F8EE78];
  if (a1 >> 62) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v7)
  {
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v16 = v6 & 0xFFFFFFFFFFFFFF8;
      unint64_t v17 = v6 & 0xC000000000000001;
      unint64_t v15 = v6;
      while (v17)
      {
        id v9 = (id)MEMORY[0x24C59DCE0](v8, v6);
LABEL_7:
        uint64_t v10 = v9;
        unint64_t v11 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_17;
        }
        uint64_t v12 = a3;
        char v13 = a2(v9);
        if (v3)
        {
          swift_bridgeObjectRelease();

          swift_release();
          return v12;
        }
        if (v13)
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          unint64_t v6 = v15;
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
        }
        else
        {
        }
        ++v8;
        if (v11 == v7)
        {
          uint64_t v12 = v18;
          goto LABEL_20;
        }
      }
      if (v8 < *(void *)(v16 + 16)) {
        break;
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
      if (!v7) {
        goto LABEL_19;
      }
    }
    id v9 = *(id *)(v6 + 8 * v8 + 32);
    goto LABEL_7;
  }
LABEL_19:
  uint64_t v12 = MEMORY[0x263F8EE78];
LABEL_20:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13CarAssetUtils19CAUVehicleLayoutKeyOG_SaySo10CAFServiceCGs5NeverOTg5065_sSo18CAFPositionManagerC10CAFCombineE14sharedServices3forSaySo10j4CG13de7Utils19ghI12O_tFAhKXEfU_So0nO0CTf1cn_n(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v13 = MEMORY[0x263F8EE78];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3, 0);
    uint64_t v5 = v13;
    uint64_t v6 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    do
    {
      uint64_t v9 = CAFPositionManager.services(for:includeSharedServices:requireSpecificServices:filter:)(v7, 1, 0, 0, 0);
      unint64_t v11 = *(void *)(v13 + 16);
      unint64_t v10 = *(void *)(v13 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v13 + 16) = v11 + 1;
      *(void *)(v13 + 8 * v11 + 32) = v9;
      v7 += v8;
      --v3;
    }
    while (v3);
  }
  else
  {

    return MEMORY[0x263F8EE78];
  }
  return v5;
}

unint64_t CAFPositionManager.sharedServices(for:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = CAUVehicleLayoutKey.sharedKeys.getter();
  uint64_t v3 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay13CarAssetUtils19CAUVehicleLayoutKeyOG_SaySo10CAFServiceCGs5NeverOTg5065_sSo18CAFPositionManagerC10CAFCombineE14sharedServices3forSaySo10j4CG13de7Utils19ghI12O_tFAhKXEfU_So0nO0CTf1cn_n(v2, v1);
  swift_bridgeObjectRelease();
  uint64_t v4 = specialized FlattenSequence<>.startIndex.getter(v3);
  uint64_t v7 = specialized FlattenSequence<>.distance(from:to:)(v4, v6, v5 & 1, *(void *)(v3 + 16), 0, 1, v3);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v18 = MEMORY[0x263F8EE78];
    specialized ContiguousArray.reserveCapacity(_:)();
    unint64_t result = specialized FlattenSequence<>.startIndex.getter(v3);
    if ((v8 & 0x8000000000000000) == 0)
    {
      unint64_t v12 = result;
      unint64_t v13 = v10;
      while ((v12 & 0x8000000000000000) == 0)
      {
        if (v12 >= *(void *)(v3 + 16)) {
          goto LABEL_17;
        }
        if (v11) {
          goto LABEL_21;
        }
        uint64_t v14 = *(void *)(v3 + 32 + 8 * v12);
        if ((v14 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          MEMORY[0x24C59DCE0](v13, v14);
          swift_bridgeObjectRelease();
        }
        else
        {
          if ((v13 & 0x8000000000000000) != 0) {
            goto LABEL_18;
          }
          if (v13 >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_19;
          }
          id v15 = *(id *)(v14 + 8 * v13 + 32);
        }
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        unint64_t result = specialized FlattenSequence<>._index(after:)(v12, v13, 0, v3);
        unint64_t v12 = result;
        unint64_t v13 = v16;
        if (!--v8)
        {
          uint64_t v17 = v18;
          swift_bridgeObjectRelease();
          return v17;
        }
      }
      __break(1u);
LABEL_17:
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
    }
    __break(1u);
LABEL_21:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v4 = *v1;
  if (*v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
    goto LABEL_26;
  }
  unint64_t v4 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v1 = v4;
  uint64_t v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_16;
    }
    uint64_t v5 = 1;
  }
  if (v4 >> 62) {
    goto LABEL_27;
  }
  uint64_t v9 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6) {
      uint64_t v9 = v6;
    }
    swift_bridgeObjectRetain();
    unint64_t v4 = MEMORY[0x24C59DCF0](v5, v9, 1, v4);
    swift_bridgeObjectRelease();
    *uint64_t v1 = v4;
    uint64_t v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_16:
    uint64_t result = specialized Array._copyContents(initializing:)(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_26:
    __break(1u);
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t CAFPositionManager.layoutKeys.getter()
{
  uint64_t v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388]();
  uint64_t v3 = OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388]();
  OUTLINED_FUNCTION_4_4();
  MEMORY[0x270FA5388]();
  id v6 = objc_msgSend(v2, sel_vehicleLayoutKeys);
  uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v9 = (void (**)(void))(v5 + 32);
    swift_bridgeObjectRetain();
    uint64_t v10 = v7 + 40;
    uint64_t v11 = MEMORY[0x263F8EE78];
    do
    {
      swift_bridgeObjectRetain();
      CAUVehicleLayoutKey.init(rawValue:)();
      if (__swift_getEnumTagSinglePayload(v0, 1, v3) == 1)
      {
        outlined destroy of CAUVehicleLayoutKey?(v0);
      }
      else
      {
        uint64_t v12 = *v9;
        OUTLINED_FUNCTION_2_4();
        v12();
        OUTLINED_FUNCTION_2_4();
        v12();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = OUTLINED_FUNCTION_5_4();
        }
        unint64_t v14 = *(void *)(v11 + 16);
        unint64_t v13 = *(void *)(v11 + 24);
        if (v14 >= v13 >> 1) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1, v11);
        }
        unint64_t v15 = OUTLINED_FUNCTION_1_3();
        ((void (*)(unint64_t))v12)(v15);
      }
      v10 += 16;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v11;
}

unint64_t lazy protocol witness table accessor for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey()
{
  unint64_t result = lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey;
  if (!lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey)
  {
    type metadata accessor for CAUVehicleLayoutKey();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAUVehicleLayoutKey and conformance CAUVehicleLayoutKey);
  }
  return result;
}

unint64_t type metadata accessor for CAFService()
{
  unint64_t result = lazy cache variable for type metadata for CAFService;
  if (!lazy cache variable for type metadata for CAFService)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFService);
  }
  return result;
}

uint64_t CAFPositionManager.vehicleLayoutKeys(for:)()
{
  uint64_t v2 = v1;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388](v3 - 8);
  uint64_t v4 = OUTLINED_FUNCTION_3_4();
  OUTLINED_FUNCTION_0_0();
  uint64_t v6 = v5;
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_4_4();
  MEMORY[0x270FA5388](v8);
  id v9 = objc_msgSend(v2, sel_vehicleLayoutKeysFor_, swift_getObjCClassFromMetadata());
  uint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = (void (**)(void))(v6 + 32);
    swift_bridgeObjectRetain();
    uint64_t v13 = v10 + 40;
    uint64_t v14 = MEMORY[0x263F8EE78];
    do
    {
      swift_bridgeObjectRetain();
      CAUVehicleLayoutKey.init(rawValue:)();
      if (__swift_getEnumTagSinglePayload(v0, 1, v4) == 1)
      {
        outlined destroy of CAUVehicleLayoutKey?(v0);
      }
      else
      {
        unint64_t v15 = *v12;
        OUTLINED_FUNCTION_2_4();
        v15();
        OUTLINED_FUNCTION_2_4();
        v15();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v14 = OUTLINED_FUNCTION_5_4();
        }
        unint64_t v17 = *(void *)(v14 + 16);
        unint64_t v16 = *(void *)(v14 + 24);
        if (v17 >= v16 >> 1) {
          uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1, v14);
        }
        unint64_t v18 = OUTLINED_FUNCTION_1_3();
        ((void (*)(unint64_t))v15)(v18);
      }
      v13 += 16;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x263F8EE78];
  }
  return v14;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, uint64_t a4)
{
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x263F8EE78];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CAUVehicleLayoutKey>);
  uint64_t v10 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t v14 = _swift_stdlib_malloc_size(v13);
  if (!v11 || (v14 - v12 == 0x8000000000000000 ? (BOOL v15 = v11 == -1) : (BOOL v15 = 0), v15))
  {
LABEL_24:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(v14 - v12) / v11);
LABEL_19:
  uint64_t v16 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
  unint64_t v17 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  unint64_t v18 = (unint64_t)v13 + v17;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v17, v8, v18);
    *(void *)(a4 + 16) = 0;
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v18, a4);
  }
  return (uint64_t)v13;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(type metadata accessor for CAUVehicleLayoutKey() - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    unint64_t v11 = v9 + v10 * a1;
    unint64_t v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(uint64_t result, uint64_t a2, unint64_t a3)
{
  unint64_t v5 = result;
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (v5)
  {
    if (v6)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      if (v8 <= a2)
      {
        if (v7 >= 1)
        {
          lazy protocol witness table accessor for type [[CAFService]] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [CAFService] and conformance [A], &demangling cache variable for type metadata for [CAFService]);
          swift_bridgeObjectRetain();
          for (unint64_t i = 0; i != v7; ++i)
          {
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CAFService]);
            uint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v13, i, a3);
            id v12 = *v11;
            ((void (*)(void *, void))v10)(v13, 0);
            *(void *)(v5 + 8 * i) = v12;
          }
          swift_bridgeObjectRelease();
          return a3;
        }
        goto LABEL_16;
      }
    }
    else
    {
      if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a2)
      {
        specialized UnsafeMutablePointer.initialize(from:count:)((a3 & 0xFFFFFFFFFFFFFF8) + 32, *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10), v5);
        return a3;
      }
      __break(1u);
    }
    __break(1u);
LABEL_16:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void *a1, unint64_t a2, uint64_t a3))()
{
  unint64_t v6 = malloc(0x28uLL);
  *a1 = v6;
  v6[4] = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)(a3 + 16) > a2)
  {
    *(void *)uint64_t result = *(void *)(a3 + 8 * a2 + 32);
    swift_bridgeObjectRetain();
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_bridgeObjectRelease();
}

void (*specialized Array.subscript.read(void *a1, unint64_t a2, uint64_t a3))(id *a1)
{
  unint64_t v6 = a3 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(a2, (a3 & 0xC000000000000001) == 0, a3);
  if (v6) {
    id v7 = (id)MEMORY[0x24C59DCE0](a2, a3);
  }
  else {
    id v7 = *(id *)(a3 + 8 * a2 + 32);
  }
  *a1 = v7;
  return Array.subscript.readspecialized ;
}

void Array.subscript.readspecialized (id *a1)
{
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized FlattenSequence<>.startIndex.getter(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 16);
  if (!v1) {
    return v1;
  }
  uint64_t v2 = result;
  unint64_t v3 = *(void *)(result + 32);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t result = swift_bridgeObjectRelease();
    if (v4) {
      return 0;
    }
  }
  else if (*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    return 0;
  }
  if (v1 == 1) {
    return v1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = v2 + 40;
  while (v5 + 1 < v1)
  {
    unint64_t v7 = *(void *)(v6 + 8 * v5);
    if (v7 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    if (v8) {
      return v5 + 1;
    }
    if (v1 - 1 == ++v5) {
      return v1;
    }
  }
  __break(1u);
  return result;
}

uint64_t specialized FlattenSequence<>.distance(from:to:)(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  if (a4 != result)
  {
    uint64_t v8 = result;
    if (a4 < result)
    {
      uint64_t v7 = a3 & 1;
      uint64_t v11 = result;
      unint64_t v10 = a4;
      uint64_t v9 = a5;
      a5 = a2;
      if (a6)
      {
LABEL_20:
        uint64_t v17 = 0;
        uint64_t v14 = 0;
        goto LABEL_21;
      }
LABEL_7:
      if ((v10 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      if (v10 >= *(void *)(a7 + 16)) {
        goto LABEL_42;
      }
      unint64_t v15 = *(void *)(a7 + 8 * v10 + 32);
      if (v15 >> 62) {
        goto LABEL_44;
      }
      uint64_t v16 = *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v7 = a6 & 1;
    uint64_t v11 = a4;
    unint64_t v10 = v8;
    uint64_t v9 = a2;
    if (a3) {
      goto LABEL_20;
    }
    goto LABEL_7;
  }
  if (a6)
  {
    if (a3) {
      return 0;
    }
    while (1)
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      uint64_t v21 = a5;
      uint64_t v22 = v7;
      swift_bridgeObjectRetain();
      uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
      uint64_t result = swift_bridgeObjectRelease();
      uint64_t v7 = v22;
      a5 = v21;
LABEL_11:
      uint64_t v17 = v16 - v9;
      if (__OFSUB__(v16, v9))
      {
        __break(1u);
        goto LABEL_46;
      }
      ++v10;
      uint64_t v14 = v16 - v9;
LABEL_21:
      if ((uint64_t)v10 >= v11) {
        break;
      }
      unint64_t v18 = *(void *)(a7 + 16);
      uint64_t v14 = v17;
      while (v10 < v18)
      {
        unint64_t v19 = *(void *)(a7 + 32 + 8 * v10);
        if (v19 >> 62)
        {
          uint64_t v24 = a5;
          unsigned int v23 = v7;
          swift_bridgeObjectRetain();
          uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
          uint64_t result = swift_bridgeObjectRelease();
          uint64_t v7 = v23;
          a5 = v24;
        }
        else
        {
          uint64_t v9 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        BOOL v20 = __OFADD__(v14, v9);
        v14 += v9;
        if (v20) {
          goto LABEL_38;
        }
        if ((uint64_t)++v10 >= v11) {
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
    }
LABEL_30:
    if ((v7 & 1) == 0)
    {
      if ((v10 & 0x8000000000000000) == 0)
      {
        if (v10 < *(void *)(a7 + 16))
        {
          BOOL v20 = __OFADD__(v14, a5);
          v14 += a5;
          if (!v20) {
            goto LABEL_34;
          }
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
        goto LABEL_49;
      }
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
LABEL_34:
    if (a4 < v8)
    {
      BOOL v20 = __OFSUB__(0, v14);
      uint64_t v14 = -v14;
      if (v20) {
        goto LABEL_48;
      }
    }
    return v14;
  }
  if ((a3 & 1) == 0)
  {
    if (a4 < 0) {
      goto LABEL_41;
    }
    if (*(void *)(a7 + 16) <= (unint64_t)a4) {
      goto LABEL_43;
    }
    uint64_t v14 = a5 - a2;
    if (!__OFSUB__(a5, a2)) {
      return v14;
    }
    __break(1u);
    goto LABEL_19;
  }
LABEL_50:
  __break(1u);
  return result;
}

unint64_t specialized FlattenSequence<>._index(after:)(unint64_t result, uint64_t a2, char a3, uint64_t a4)
{
  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v5 = a4;
  unint64_t v4 = result;
  unint64_t v7 = *(void *)(a4 + 16);
  if (v7 <= result)
  {
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (a3)
  {
LABEL_24:
    __break(1u);
    return result;
  }
  uint64_t v6 = a2 + 1;
  if (__OFADD__(a2, 1)) {
    goto LABEL_11;
  }
  unint64_t v8 = *(void *)(a4 + 8 * result + 32);
  if (v8 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_7:
  if (v6 == v9)
  {
    if (++v4 == v7)
    {
      return v7;
    }
    else
    {
      while (1)
      {
        swift_bridgeObjectRetain();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [[CAFService]]);
        lazy protocol witness table accessor for type [[CAFService]] and conformance [A](&lazy protocol witness table cache variable for type [[CAFService]] and conformance [A], &demangling cache variable for type metadata for [[CAFService]]);
        unint64_t v10 = specialized protocol witness for Collection.subscript.read in conformance [A](v15, v4, v5);
        unint64_t v12 = *v11;
        swift_bridgeObjectRetain();
        ((void (*)(uint64_t (**)(), void))v10)(v15, 0);
        swift_bridgeObjectRelease();
        if (v12 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t result = swift_bridgeObjectRelease();
        if (v13) {
          break;
        }
        unint64_t v14 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
          goto LABEL_24;
        }
        ++v4;
        if (v14 == v7) {
          return v7;
        }
      }
    }
  }
  return v4;
}

uint64_t outlined destroy of CAUVehicleLayoutKey?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [[CAFService]] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t OUTLINED_FUNCTION_1_3()
{
  *(void *)(v1 + 16) = v2;
  return v1
       + ((*(unsigned __int8 *)(*(void *)(v3 - 88) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 88) + 80))
       + *(void *)(*(void *)(v3 - 88) + 72) * v0;
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return type metadata accessor for CAUVehicleLayoutKey();
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  int64_t v2 = *(void *)(v0 + 16) + 1;
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 1, v0);
}

id CAFButtonSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
}

uint64_t CAFButtonSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFButtonSettingObservable.userVisibleLabel.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFButtonSettingObservable.$userVisibleLabel.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.sectionIdentifier.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFButtonSettingObservable.$sectionIdentifier.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFButtonSettingObservable.$sortOrder.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFButtonSettingObservable.$category.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.identifier.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFButtonSettingObservable.$identifier.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.disabled.getter()
{
  return CAFButtonSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFButtonSettingObservable.$disabled.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.limitableUIElement.getter()
{
  return CAFButtonSettingObservable.disabled.getter();
}

uint64_t CAFButtonSettingObservable.$limitableUIElement.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.hidden.getter()
{
  return CAFButtonSettingObservable.disabled.getter();
}

uint64_t CAFButtonSettingObservable.$hidden.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.showAudioBrandLogo.getter()
{
  return CAFButtonSettingObservable.disabled.getter();
}

uint64_t CAFButtonSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.vehicleLayoutKey.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFButtonSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.symbolName.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFButtonSettingObservable.$symbolName.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFButtonSettingObservable.$prominenceInfo.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFButtonSettingObservable.buttonAction : CAFButtonSettingObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFButtonSettingObservable.buttonAction.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFButtonSettingObservable.buttonAction : CAFButtonSettingObservable(unsigned __int8 *a1)
{
  return CAFButtonSettingObservable.buttonAction.setter(*a1);
}

uint64_t CAFButtonSettingObservable.buttonAction.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFButtonSettingObservable.buttonAction.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFButtonSettingObservable.buttonAction.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFButtonSettingObservable.buttonAction.modify;
}

void CAFButtonSettingObservable.buttonAction.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFButtonSettingObservable.$buttonAction.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFButtonSettingObservable.name.getter()
{
  return CAFButtonSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFButtonSettingObservable.$name.getter()
{
  return CAFButtonSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFButtonSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFButtonSettingObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed), sel_registeredForButtonAction))
  {
    CAFButtonSettingObservable.buttonAction.getter();
    id v1 = (id)NSStringFromButtonAction();
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v5 = v4;
    }
    else
    {
      id v5 = (void *)0xE900000000000029;
      uint64_t v3 = 0x6E776F6E6B6E7528;
    }
  }
  else
  {
    id v5 = (void *)0xEE003E6465726574;
    uint64_t v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(53);
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  v6._object = (void *)0x8000000249486FA0;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x8000000249486FC0;
  v7._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t CAFButtonSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFButtonSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFButtonSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFButtonSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFButtonSettingObservable.init(_:)(a1);
}

id CAFButtonSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFButtonSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__buttonAction;
  uint64_t v26 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFButtonSettingObservable, CAFButtonAction>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v27;
  uint64_t v28 = OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v28] = specialized SafePublished.init(observedValuekeypath:)(v26);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed] = a1;
  id v29 = a1;

  v32.receiver = v9;
  v32.super_class = (Class)type metadata accessor for CAFButtonSettingObservable();
  id v30 = objc_msgSendSuper2(&v32, sel_init);
  objc_msgSend(v29, sel_registerObserver_, v30);

  return v30;
}

uint64_t CAFButtonSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFButtonSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFButtonSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFButtonSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFButtonSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFButtonSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFButtonSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFButtonSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFButtonSettingObservable(void **a1)
{
  return CAFButtonSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFButtonSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFButtonSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFButtonSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFButtonSettingObservable.buttonSettingService(_:didUpdateButtonAction:)()
{
  return swift_release();
}

uint64_t CAFButtonSettingObservable.buttonSettingService(_:didUpdateName:)()
{
  return CAFButtonSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFButtonSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFButtonSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFButtonSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493D6288()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFButtonSettingObservable.buttonAction.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D62B0(unsigned __int8 *a1)
{
  return CAFButtonSettingObservable.buttonAction.setter(*a1);
}

void sub_2493D62D8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493D62F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2493D631C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493D6350(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2493D6370()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D6398()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D63C0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493D63E8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2493D6410(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493D6430(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_buttonAction()
{
  return sel_buttonAction;
}

id sub_2493D6460@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_buttonAction);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493D6494(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setButtonAction_, *a1);
}

void sub_2493D64A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFButtonSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFButtonSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable(&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFButtonSettingObservable()
{
  return lazy protocol witness table accessor for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable(&lazy protocol witness table cache variable for type CAFButtonSetting and conformance CAFButtonSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFButtonSetting);
}

unint64_t type metadata accessor for CAFButtonSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFButtonSetting;
  if (!lazy cache variable for type metadata for CAFButtonSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFButtonSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFButtonSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFButtonSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFButtonSettingObservable and conformance CAFButtonSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFButtonSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFButtonSettingObservable);
}

uint64_t dispatch thunk of CAFButtonSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))() & 0x1FF;
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.buttonAction.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$buttonAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFButtonSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t partial apply for closure #1 in CAFButtonSettingObservable.resetCachedDescription()()
{
  return CAFButtonSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFTrip.showOdometerBridged.getter()
{
  if (objc_msgSend(v0, sel_hasShowOdometer)) {
    return (uint64_t)objc_msgSend(v0, sel_showOdometer);
  }
  else {
    return 2;
  }
}

id CAFTrip.showOdometerBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setShowOdometer_, a1 & 1);
}

id CAFTripObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
}

uint64_t CAFTripObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTripObservable.userVisibleLabel.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTripObservable.$userVisibleLabel.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTripObservable.sortOrder.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTripObservable.$sortOrder.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTripObservable.averageSpeed.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFTripObservable.$averageSpeed.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.distance.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

uint64_t CAFTripObservable.$distance.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.duration.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

uint64_t CAFTripObservable.$duration.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.energy.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

uint64_t CAFTripObservable.$energy.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.energyEfficiency.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

uint64_t CAFTripObservable.$energyEfficiency.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTripObservable.fuelEfficiency.getter()
{
  return CAFTripObservable.averageSpeed.getter();
}

uint64_t CAFTripObservable.$fuelEfficiency.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFTripObservable.showOdometer : CAFTripObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTripObservable.showOdometer.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTripObservable.showOdometer : CAFTripObservable(unsigned __int8 *a1)
{
  return CAFTripObservable.showOdometer.setter(*a1);
}

uint64_t CAFTripObservable.showOdometer.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFTripObservable.showOdometer.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFTripObservable.showOdometer.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFTripObservable.showOdometer.modify;
}

void CAFTripObservable.showOdometer.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFTripObservable.$showOdometer.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFTripObservable.name.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTripObservable.$name.getter()
{
  return CAFTripObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTripObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTripObservable._description.getter()
{
  v64._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v64._countAndFlagsBits = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v2);
  OUTLINED_FUNCTION_3_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v3);
  OUTLINED_FUNCTION_3_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitEnergy>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_106();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_106();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_106();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  OUTLINED_FUNCTION_73();
  MEMORY[0x270FA5388](v7);
  OUTLINED_FUNCTION_106();
  id v8 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed);
  objc_msgSend(v8, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_4_5();
  if (v11)
  {
    CAFTripObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v10 = String.init<A>(describing:)();
  }
  v63._countAndFlagsBits = v10;
  v63._object = v9;
  objc_msgSend(v8, sel_registeredForSortOrder);
  OUTLINED_FUNCTION_4_5();
  if (v14)
  {
    CAFTripObservable.sortOrder.getter();
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  v62._countAndFlagsBits = v13;
  v62._object = v12;
  objc_msgSend(v8, sel_registeredForAverageSpeed);
  OUTLINED_FUNCTION_0_4();
  uint64_t v16 = (void *)0xEE003E6465726574;
  if (v17)
  {
    CAFTripObservable.averageSpeed.getter();
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v16 = v18;
  }
  uint64_t v61 = v15;
  objc_msgSend(v8, sel_registeredForDistance);
  OUTLINED_FUNCTION_0_4();
  uint64_t v20 = (void *)0xEE003E6465726574;
  if (v21)
  {
    CAFTripObservable.distance.getter();
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v20 = v22;
  }
  uint64_t v60 = v19;
  objc_msgSend(v8, sel_registeredForDuration);
  OUTLINED_FUNCTION_0_4();
  uint64_t v24 = (void *)0xEE003E6465726574;
  if (v25)
  {
    CAFTripObservable.duration.getter();
    uint64_t v23 = String.init<A>(describing:)();
    uint64_t v24 = v26;
  }
  uint64_t v59 = v23;
  objc_msgSend(v8, sel_registeredForEnergy);
  OUTLINED_FUNCTION_0_4();
  uint64_t v28 = (void *)0xEE003E6465726574;
  if (v29)
  {
    CAFTripObservable.energy.getter();
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v28 = v30;
  }
  uint64_t v58 = v27;
  objc_msgSend(v8, sel_registeredForEnergyEfficiency);
  OUTLINED_FUNCTION_0_4();
  objc_super v32 = (void *)0xEE003E6465726574;
  if (v33)
  {
    CAFTripObservable.energyEfficiency.getter();
    uint64_t v31 = String.init<A>(describing:)();
    objc_super v32 = v34;
  }
  uint64_t v57 = v31;
  objc_msgSend(v8, sel_registeredForFuelEfficiency);
  OUTLINED_FUNCTION_0_4();
  uint64_t v36 = (void *)0xEE003E6465726574;
  if (v37)
  {
    CAFTripObservable.fuelEfficiency.getter();
    uint64_t v35 = String.init<A>(describing:)();
    uint64_t v36 = v38;
  }
  uint64_t v56 = v35;
  if (objc_msgSend(v8, sel_registeredForShowOdometer))
  {
    CAFTripObservable.showOdometer.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    v64._countAndFlagsBits = String.init<A>(describing:)();
    v64._object = v39;
  }
  uint64_t v65 = static String._createEmpty(withInitialCapacity:)(181);
  v40._object = (void *)0x80000002494870A0;
  v40._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v40);
  _print_unlocked<A, B>(_:_:)();
  v41._countAndFlagsBits = 0xD000000000000015;
  v41._object = (void *)0x80000002494870C0;
  String.append(_:)(v41);
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0x724F74726F73202CLL;
  v42._object = (void *)0xED0000203A726564;
  String.append(_:)(v42);
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_3((uint64_t)", averageSpeed: ");
  v43._countAndFlagsBits = v61;
  v43._object = v16;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0x6E6174736964202CLL;
  v44._object = (void *)0xEC000000203A6563;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v60;
  v45._object = v20;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._object = (void *)0xEC000000203A6E6FLL;
  v46._countAndFlagsBits = 0x697461727564202CLL;
  String.append(_:)(v46);
  v47._countAndFlagsBits = v59;
  v47._object = v24;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 0x796772656E65202CLL;
  v48._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v48);
  v49._countAndFlagsBits = v58;
  v49._object = v28;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._object = (void *)0x8000000249487100;
  v50._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v50);
  v51._countAndFlagsBits = v57;
  v51._object = v32;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0xD000000000000012;
  v52._object = (void *)0x8000000249487120;
  String.append(_:)(v52);
  v53._countAndFlagsBits = v56;
  v53._object = v36;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_7_3((uint64_t)", showOdometer: ");
  String.append(_:)(v64);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 4095264;
  v54._object = (void *)0xE300000000000000;
  String.append(_:)(v54);
  return v65;
}

uint64_t CAFTripObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTripObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFTripObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFTripObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTripObservable.init(_:)(a1);
}

id CAFTripObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  id v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitSpeed>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitLength>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitEnergy>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<CAFUnitEnergyEfficiency>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v20] = v21;
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, Measurement<NSUnitFuelEfficiency>?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v22] = v23;
  uint64_t v24 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__showOdometer;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTripObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v25 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v24] = specialized SafePublished.init(observedValuekeypath:)(v25);
  uint64_t v26 = OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTripObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v27 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v26] = specialized SafePublished.init(observedValuekeypath:)(v27);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed] = a1;
  id v28 = a1;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for CAFTripObservable();
  id v29 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(v28, sel_registerObserver_, v29);

  return v29;
}

uint64_t CAFTripObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTripObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine17CAFTripObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTripObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTripObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTripObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTripObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTripObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTripObservable(void **a1)
{
  return CAFTripObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTripObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTripObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTripObservable.tripService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTripObservable.tripService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__averageSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateDistance:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__distance, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateDuration:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__duration, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateEnergy:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energy, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateEnergyEfficiency:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__energyEfficiency, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateFuelEfficiency:)(uint64_t a1, uint64_t a2)
{
  return CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine17CAFTripObservable__fuelEfficiency, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFTripObservable.tripService(_:didUpdateAverageSpeed:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_23_0();
  a4(a2);

  return swift_release();
}

uint64_t CAFTripObservable.tripService(_:didUpdateShowOdometer:)()
{
  return swift_release();
}

uint64_t CAFTripObservable.tripService(_:didUpdateName:)()
{
  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTripObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTripObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTripObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493D8F64@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTripObservable.showOdometer.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493D8F90(unsigned __int8 *a1)
{
  return CAFTripObservable.showOdometer.setter(*a1);
}

void key path getter for CAFTrip.userVisibleLabel : CAFTrip(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_userVisibleLabel);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_sortOrder()
{
  return sel_sortOrder;
}

id sub_2493D9030@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sortOrder);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_averageSpeed()
{
  return sel_averageSpeed;
}

uint64_t sub_2493D9070@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_averageSpeed, &lazy cache variable for type metadata for NSUnitSpeed, &demangling cache variable for type metadata for Measurement<NSUnitSpeed>, a2);
}

char *keypath_get_selector_distance()
{
  return sel_distance;
}

uint64_t key path getter for CAFTrip.averageSpeed : CAFTrip@<X0>(id *a1@<X0>, SEL *a2@<X3>, unint64_t *a3@<X4>, uint64_t *a4@<X6>, uint64_t a5@<X8>)
{
  id v8 = [*a1 *a2];
  if (v8)
  {
    id v9 = v8;
    type metadata accessor for CAFTemperature(0, a3);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 1;
  }
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(a4);

  return __swift_storeEnumTagSinglePayload(a5, v10, 1, v11);
}

uint64_t sub_2493D9164@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_distance, &lazy cache variable for type metadata for NSUnitLength, (uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>, a2);
}

char *keypath_get_selector_duration()
{
  return sel_duration;
}

uint64_t sub_2493D91A8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_duration, (unint64_t *)&lazy cache variable for type metadata for NSUnitDuration, &demangling cache variable for type metadata for Measurement<NSUnitDuration>, a2);
}

char *keypath_get_selector_energy()
{
  return sel_energy;
}

uint64_t sub_2493D91EC@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_energy, &lazy cache variable for type metadata for NSUnitEnergy, &demangling cache variable for type metadata for Measurement<NSUnitEnergy>, a2);
}

char *keypath_get_selector_energyEfficiency()
{
  return sel_energyEfficiency;
}

uint64_t sub_2493D9230@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_energyEfficiency, (unint64_t *)&lazy cache variable for type metadata for CAFUnitEnergyEfficiency, &demangling cache variable for type metadata for Measurement<CAFUnitEnergyEfficiency>, a2);
}

char *keypath_get_selector_fuelEfficiency()
{
  return sel_fuelEfficiency;
}

uint64_t sub_2493D9274@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFTrip.averageSpeed : CAFTrip(a1, (SEL *)&selRef_fuelEfficiency, &lazy cache variable for type metadata for NSUnitFuelEfficiency, &demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>, a2);
}

uint64_t sub_2493D92AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTrip.showOdometerBridged.getter();
  *a1 = result;
  return result;
}

id sub_2493D92D8(char *a1)
{
  return CAFTrip.showOdometerBridged.setter(*a1);
}

uint64_t type metadata accessor for CAFTripObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTrip()
{
  return lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTrip and conformance CAFTrip()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip;
  if (!lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTrip);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTrip and conformance CAFTrip);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTripObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable(&lazy protocol witness table cache variable for type CAFTripObservable and conformance CAFTripObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTripObservable and conformance CAFTripObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTripObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTripObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTripObservable);
}

uint64_t dispatch thunk of CAFTripObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTripObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTripObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTripObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTripObservable.averageSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFTripObservable.$averageSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFTripObservable.distance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFTripObservable.$distance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFTripObservable.duration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFTripObservable.$duration.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFTripObservable.energy.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFTripObservable.$energy.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFTripObservable.energyEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFTripObservable.$energyEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFTripObservable.fuelEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFTripObservable.$fuelEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFTripObservable.showOdometer.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFTripObservable.$showOdometer.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFTripObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFTripObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFTripObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 416))();
}

uint64_t partial apply for closure #1 in CAFTripObservable.resetCachedDescription()()
{
  return CAFTripObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_7_3(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000010;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t Measurement<>.localeStep(_:by:)@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v9 = v8;
  uint64_t v10 = v8;
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v36 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)v36 - v18;
  LODWORD(a1) = *a1;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  int v37 = (int)a1;
  v36[0] = a2;
  if (a1) {
    static Measurement<>.- infix(_:_:)();
  }
  else {
    static Measurement<>.+ infix(_:_:)();
  }
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v38 = v10 + 32;
  v20(a3, v19, v7);
  v36[1] = v3;
  uint64_t v21 = Measurement<>.readableString.getter();
  uint64_t v23 = v22;
  uint64_t v24 = Measurement<>.readableString.getter();
  if (v21 == v24 && v23 == v25)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v27 = OUTLINED_FUNCTION_1_4(v24, v25);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if ((v27 & 1) == 0) {
      return result;
    }
  }
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  do
  {
    while (1)
    {
      if (v37)
      {
        OUTLINED_FUNCTION_3_5();
        static Measurement<>.- infix(_:_:)();
      }
      else
      {
        OUTLINED_FUNCTION_3_5();
        static Measurement<>.+ infix(_:_:)();
      }
      v20(v17, v14, v7);
      (*(void (**)(char *, uint64_t))(v9 + 8))(a3, v7);
      v20(a3, v17, v7);
      uint64_t v29 = Measurement<>.readableString.getter();
      uint64_t v31 = v30;
      uint64_t v32 = Measurement<>.readableString.getter();
      if (v29 != v32 || v31 != v33) {
        break;
      }
      swift_bridgeObjectRelease_n();
    }
    char v35 = OUTLINED_FUNCTION_1_4(v32, v33);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  while ((v35 & 1) != 0);
  return result;
}

uint64_t Measurement<>.step(_:by:)(char *a1)
{
  char v1 = *a1;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  if (v1)
  {
    return static Measurement<>.- infix(_:_:)();
  }
  else
  {
    return static Measurement<>.+ infix(_:_:)();
  }
}

uint64_t Measurement<>.readableString.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v3);
  uint64_t v7 = (char *)&v18 - v6;
  if (static Measurement<>.isFahrenheitUI.getter())
  {
    id v8 = objc_msgSend(self, sel_fahrenheit);
    Measurement<>.converted(to:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v7, v0, v1);
  }
  id v9 = static Measurement<>.targetTemperatureFormatter.getter();
  uint64_t v10 = Measurement.value.getter();
  uint64_t v11 = (void *)MEMORY[0x24C59DC00](v10);
  id v12 = objc_msgSend(v9, sel_stringFromNumber_, v11);

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
  if (!v15)
  {
    Measurement.value.getter();
    uint64_t v13 = Double.description.getter();
  }
  uint64_t v16 = *(void (**)(char *, uint64_t))(v2 + 8);
  v16(v5, v1);
  v16(v7, v1);
  return v13;
}

uint64_t Measurement<>.readableString(in:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  Measurement.value.getter();
  *(float *)&double v2 = v2;
  if (!objc_msgSend(a1, sel_valueIsInRange_, v2)) {
    return 0;
  }
  Measurement.value.getter();
  double v4 = v3;
  id v5 = objc_msgSend(a1, sel_maximum);
  objc_msgSend(v5, sel_doubleValue);
  double v7 = v6;

  if (v7 <= v4) {
    return 18760;
  }
  Measurement.value.getter();
  double v9 = v8;
  id v10 = objc_msgSend(a1, sel_minimum);
  objc_msgSend(v10, sel_doubleValue);
  double v12 = v11;

  if (v9 <= v12) {
    return 20300;
  }
  else {
    return Measurement<>.readableString.getter();
  }
}

uint64_t static Measurement<>.isFahrenheitUI.getter()
{
  uint64_t v0 = type metadata accessor for Locale();
  MEMORY[0x270FA5388](v0 - 8);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSObject);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Locale.current.getter();
  uint64_t v1 = NSDimension.init(forLocale:)();
  id v2 = objc_msgSend(self, sel_fahrenheit);
  char v3 = static NSObject.== infix(_:_:)();

  return v3 & 1;
}

id static Measurement<>.targetTemperatureFormatter.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_2_5();
  id v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08A30]), sel_init);
  static Locale.autoupdatingCurrent.getter();
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  objc_msgSend(v5, sel_setLocale_, isa);

  objc_msgSend(v5, sel_setNumberStyle_, 1);
  objc_msgSend(v5, sel_setRoundingMode_, 6);
  objc_msgSend(v5, sel_setMinimumFractionDigits_, (static Measurement<>.isFahrenheitUI.getter() & 1) == 0);
  objc_msgSend(v5, sel_setMaximumFractionDigits_, (static Measurement<>.isFahrenheitUI.getter() & 1) == 0);
  return v5;
}

uint64_t Measurement<>.invalidString.getter()
{
  uint64_t v1 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_2_5();
  if (static Measurement<>.isFahrenheitUI.getter()) {
    return 11565;
  }
  static Locale.autoupdatingCurrent.getter();
  uint64_t v5 = Locale.decimalSeparator.getter();
  double v7 = v6;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0, v1);
  if (!v7) {
    return 11565;
  }
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 45;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  return 11565;
}

uint64_t OUTLINED_FUNCTION_1_4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270F9F7D0](v3, v2, a1, a2, 0);
}

uint64_t OUTLINED_FUNCTION_3_5()
{
  return v0;
}

unint64_t CAFTypeTestIndexByUnit.testInt32Bridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasTestInt32);
  unsigned __int8 v2 = v1;
  if (v1) {
    uint64_t v3 = objc_msgSend(v0, sel_testInt32);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFTypeTestIndexByUnit.testInt32Bridged.setter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestInt32_, v2);
}

id CAFTypeTestIndexByUnitObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
}

uint64_t CAFTypeTestIndexByUnitObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter()
{
  return CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__distanceUnitRawValue, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestIndexByUnitObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(a1, a2, a3, a4, CAFTypeTestIndexByUnitObservable.testInt32.setter);
}

unint64_t CAFTypeTestIndexByUnitObservable.testInt32.getter()
{
  OUTLINED_FUNCTION_116();
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v8;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  unsigned __int8 v5 = *((unsigned char *)v3 + 4);
  v2(v7, 0);
  swift_release();
  swift_release();

  return v4 | ((unint64_t)v5 << 32);
}

uint64_t CAFTypeTestIndexByUnitObservable.testInt32.setter(unint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1 | ((HIDWORD(a1) & 1) << 32), v5, KeyPath, v4);
}

void (*CAFTypeTestIndexByUnitObservable.testInt32.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  double v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LODWORD(v4) = *(_DWORD *)v7;
  char v8 = *(unsigned char *)(v7 + 4);
  v6(v3, 0);
  swift_release();
  swift_release();

  *((_DWORD *)v3 + 22) = v4;
  *((unsigned char *)v3 + 92) = v8;
  return CAFTypeTestIndexByUnitObservable.testInt32.modify;
}

void CAFTypeTestIndexByUnitObservable.testInt32.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(void *)a1 + 88) | ((unint64_t)*(unsigned __int8 *)(*(void *)a1 + 92) << 32), *(id *)(*(void *)a1 + 64), v1[9], v1[10]);

  free(v1);
}

uint64_t CAFTypeTestIndexByUnitObservable.$testInt32.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFTypeTestIndexByUnitObservable.name.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestIndexByUnitObservable.$name.getter()
{
  return CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTypeTestIndexByUnitObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForDistanceUnit))
  {
    CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter();
    type metadata accessor for CAFUnitType(0);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForTestInt32))
  {
    CAFTypeTestIndexByUnitObservable.testInt32.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(82);
  v5._countAndFlagsBits = 0xD000000000000023;
  v5._object = (void *)0x8000000249487200;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x8000000249487230;
  v6._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E4974736574202CLL;
  v8._object = (void *)0xED0000203A323374;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFTypeTestIndexByUnitObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTypeTestIndexByUnitObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFTypeTestIndexByUnitObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFTypeTestIndexByUnitObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTypeTestIndexByUnitObservable.init(_:)(a1);
}

id CAFTypeTestIndexByUnitObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__distanceUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestIndexByUnitObservable, CAFUnitType>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestIndexByUnitObservable, Int32?>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable__name;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestIndexByUnitObservable, String>);
  swift_allocObject();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFTypeTestIndexByUnitObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFTypeTestIndexByUnitObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTypeTestIndexByUnitObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFTypeTestIndexByUnitObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTypeTestIndexByUnitObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTypeTestIndexByUnitObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTypeTestIndexByUnitObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTypeTestIndexByUnitObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTypeTestIndexByUnitObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTypeTestIndexByUnitObservable(void **a1)
{
  return CAFTypeTestIndexByUnitObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTypeTestIndexByUnitObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTypeTestIndexByUnitObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateDistanceUnitRawValue:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateTestInt32:)()
{
  return swift_release();
}

uint64_t CAFTypeTestIndexByUnitObservable.typeTestIndexByUnitService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTypeTestIndexByUnitObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTypeTestIndexByUnitObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTypeTestIndexByUnitObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_distanceUnitRawValue()
{
  return sel_distanceUnitRawValue;
}

id sub_2493DB4DC@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_distanceUnitRawValue);
  *a2 = (_WORD)result;
  return result;
}

unint64_t key path getter for CAFTypeTestIndexByUnit.testInt32Bridged : CAFTypeTestIndexByUnit@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestIndexByUnit.testInt32Bridged.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

uint64_t sub_2493DB58C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestIndexByUnitObservable.testInt32 : CAFTypeTestIndexByUnitObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestIndexByUnit.testInt32Bridged.setter);
}

uint64_t type metadata accessor for CAFTypeTestIndexByUnitObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTypeTestIndexByUnit(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTypeTestIndexByUnitObservable()
{
  return lazy protocol witness table accessor for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable(&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnit and conformance CAFTypeTestIndexByUnit, 255, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnit);
}

unint64_t type metadata accessor for CAFTypeTestIndexByUnit()
{
  unint64_t result = lazy cache variable for type metadata for CAFTypeTestIndexByUnit;
  if (!lazy cache variable for type metadata for CAFTypeTestIndexByUnit)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTypeTestIndexByUnit);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTypeTestIndexByUnitObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTypeTestIndexByUnitObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTypeTestIndexByUnitObservable and conformance CAFTypeTestIndexByUnitObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTypeTestIndexByUnitObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTypeTestIndexByUnitObservable);
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.distanceUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$distanceUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x263F8EED0] & *v1) + 0xC8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.testInt32.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$testInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTypeTestIndexByUnitObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 248))();
}

uint64_t partial apply for closure #1 in CAFTypeTestIndexByUnitObservable.resetCachedDescription()()
{
  return CAFTypeTestIndexByUnitObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFSteeringWheelHeatingCooling.autoModeBridged.getter()
{
  if (objc_msgSend(v0, sel_hasAutoMode)) {
    return (uint64_t)objc_msgSend(v0, sel_autoMode);
  }
  else {
    return 2;
  }
}

id CAFSteeringWheelHeatingCoolingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel : CAFSteeringWheelHeatingCoolingObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel : CAFSteeringWheelHeatingCoolingObservable(unsigned int *a1)
{
  return CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(*a1);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LODWORD(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((_DWORD *)v3 + 22) = v4;
  return CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify;
}

void CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.autoMode.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.$autoMode.getter()
{
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  id v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForHeatingCoolingLevel))
  {
    CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    id v5 = v6;
  }
  if (objc_msgSend(v3, sel_registeredForAutoMode))
  {
    CAFSteeringWheelHeatingCoolingObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v1 = v7;
  }
  _StringGuts.grow(_:)(88);
  v8._countAndFlagsBits = 0xD00000000000002BLL;
  v8._object = (void *)0x80000002494872D0;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x8000000249487300;
  v9._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v11._object = (void *)0xEC000000203A6564;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFSteeringWheelHeatingCoolingObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSteeringWheelHeatingCoolingObservable.init(_:)(a1);
}

id CAFSteeringWheelHeatingCoolingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable__heatingCoolingLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSteeringWheelHeatingCoolingObservable, Int32>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable__autoMode;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSteeringWheelHeatingCoolingObservable, Bool?>);
  swift_allocObject();
  *(void *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSteeringWheelHeatingCoolingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine40CAFSteeringWheelHeatingCoolingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSteeringWheelHeatingCoolingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSteeringWheelHeatingCoolingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSteeringWheelHeatingCoolingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSteeringWheelHeatingCoolingObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493DC4E4@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493DC510(unsigned int *a1)
{
  return CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSteeringWheelHeatingCoolingObservable(void **a1)
{
  return CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSteeringWheelHeatingCoolingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSteeringWheelHeatingCoolingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.steeringWheelHeatingCoolingService(_:didUpdateHeatingCoolingLevel:)()
{
  return swift_release();
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.steeringWheelHeatingCoolingService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSteeringWheelHeatingCoolingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

id sub_2493DC8A0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_heatingCoolingLevel);
  *a2 = result;
  return result;
}

id sub_2493DC8D4(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeatingCoolingLevel_, *a1);
}

uint64_t sub_2493DC8E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSteeringWheelHeatingCooling.autoModeBridged.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CAFSteeringWheelHeatingCoolingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSteeringWheelHeatingCooling(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSteeringWheelHeatingCoolingObservable()
{
  return lazy protocol witness table accessor for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable(&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCooling and conformance CAFSteeringWheelHeatingCooling, 255, (void (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCooling);
}

unint64_t type metadata accessor for CAFSteeringWheelHeatingCooling()
{
  unint64_t result = lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling;
  if (!lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSteeringWheelHeatingCooling);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSteeringWheelHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSteeringWheelHeatingCoolingObservable and conformance CAFSteeringWheelHeatingCoolingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSteeringWheelHeatingCoolingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSteeringWheelHeatingCoolingObservable);
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.heatingCoolingLevel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.$heatingCoolingLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSteeringWheelHeatingCoolingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFSteeringWheelHeatingCoolingObservable.resetCachedDescription()()
{
  return CAFSteeringWheelHeatingCoolingObservable.cachedDescription.setter(0, 0);
}

id CAFInteriorConditionsObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed);
}

uint64_t CAFInteriorConditionsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFInteriorConditionsObservable.aqi.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFInteriorConditionsObservable.$aqi.getter()
{
  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFInteriorConditionsObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  MEMORY[0x270FA5388](v1);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed), sel_registeredForAQI))
  {
    CAFInteriorConditionsObservable.aqi.getter();
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = (void *)0xEE003E6465726574;
    uint64_t v2 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(49);
  v5._object = (void *)0x8000000249487390;
  v5._countAndFlagsBits = 0xD000000000000022;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x203A697161207B20;
  v6._object = (void *)0xE800000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 4095264;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  return 0;
}

uint64_t CAFInteriorConditionsObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFInteriorConditionsObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFInteriorConditionsObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFInteriorConditionsObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFInteriorConditionsObservable.init(_:)(a1);
}

id CAFInteriorConditionsObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable__aqi;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFInteriorConditionsObservable, Measurement<CAFUnitAirQuality>?>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFInteriorConditionsObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFInteriorConditionsObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFInteriorConditionsObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFInteriorConditionsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFInteriorConditionsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFInteriorConditionsObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFInteriorConditionsObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFInteriorConditionsObservable@<X0>(void *a1@<X8>)
{
  id result = CAFInteriorConditionsObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFInteriorConditionsObservable(void **a1)
{
  return CAFInteriorConditionsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFInteriorConditionsObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFInteriorConditionsObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFInteriorConditionsObservable.interiorConditionsService(_:didUpdateAqi:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFInteriorConditionsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFInteriorConditionsObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFInteriorConditionsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_aqi()
{
  return sel_aqi;
}

uint64_t key path getter for CAFInteriorConditions.aqi : CAFInteriorConditions@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_aqi);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for CAFUnitAirQuality);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>);

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

uint64_t type metadata accessor for CAFInteriorConditionsObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFInteriorConditions()
{
  return lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable);
}

unint64_t lazy protocol witness table accessor for type CAFInteriorConditions and conformance CAFInteriorConditions()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions;
  if (!lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFInteriorConditions);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFInteriorConditions and conformance CAFInteriorConditions);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFInteriorConditionsObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFInteriorConditionsObservable and conformance CAFInteriorConditionsObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFInteriorConditionsObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFInteriorConditionsObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFInteriorConditionsObservable);
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.aqi.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.$aqi.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFInteriorConditionsObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t outlined destroy of Measurement<CAFUnitAirQuality>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFInteriorConditionsObservable.resetCachedDescription()()
{
  return CAFInteriorConditionsObservable.cachedDescription.setter(0, 0);
}

id CAFEngineTemperatureObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
}

uint64_t CAFEngineTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEngineTemperatureObservable.temperature.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFEngineTemperatureObservable.$temperature.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureState.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFEngineTemperatureObservable.$temperatureState.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMin.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

uint64_t CAFEngineTemperatureObservable.$temperatureMin.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMax.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

uint64_t CAFEngineTemperatureObservable.$temperatureMax.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMarkerCold.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

uint64_t CAFEngineTemperatureObservable.$temperatureMarkerCold.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.temperatureMarkerHot.getter()
{
  return CAFEngineTemperatureObservable.temperature.getter();
}

uint64_t CAFEngineTemperatureObservable.$temperatureMarkerHot.getter()
{
  return CAFEngineTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineTemperatureObservable.$temperature.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFEngineTemperatureObservable._description.getter()
{
  uint64_t v43 = 0x73696765726E753CLL;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_106();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_106();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed);
  objc_msgSend(v9, sel_registeredForTemperature);
  uint64_t v10 = 0x73696765726E753CLL;
  OUTLINED_FUNCTION_7_4();
  if (v11)
  {
    CAFEngineTemperatureObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    uint64_t v12 = OUTLINED_FUNCTION_4_6();
    v13(v12);
  }
  Swift::String v42 = v0;
  objc_msgSend(v9, sel_registeredForTemperatureState);
  OUTLINED_FUNCTION_3_6();
  id v14 = (void *)0xEE003E6465726574;
  if (v15)
  {
    CAFEngineTemperatureObservable.temperatureState.getter();
    id v16 = (id)NSStringFromTemperatureState();
    if (v16)
    {
      uint64_t v0 = v16;
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v14 = v17;
    }
    else
    {
      id v14 = (void *)0xE900000000000029;
      uint64_t v1 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v39 = v1;
  uint64_t v40 = v10;
  objc_msgSend(v9, sel_registeredForTemperatureMin);
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_7_4();
  if (v18)
  {
    CAFEngineTemperatureObservable.temperatureMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v1 = OUTLINED_FUNCTION_5_5();
    uint64_t v19 = OUTLINED_FUNCTION_4_6();
    v20(v19);
  }
  uint64_t v38 = v1;
  objc_msgSend(v9, sel_registeredForTemperatureMax);
  OUTLINED_FUNCTION_3_6();
  uint64_t v21 = (void *)0xEE003E6465726574;
  if (v22)
  {
    CAFEngineTemperatureObservable.temperatureMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v1 = OUTLINED_FUNCTION_5_5();
    uint64_t v21 = v23;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  }
  uint64_t v24 = 0x73696765726E753CLL;
  uint64_t v25 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForTemperatureMarkerCold, v1))
  {
    CAFEngineTemperatureObservable.temperatureMarkerCold.getter();
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v25 = v26;
  }
  char v27 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForTemperatureMarkerHot))
  {
    CAFEngineTemperatureObservable.temperatureMarkerHot.getter();
    uint64_t v43 = String.init<A>(describing:)();
    char v27 = v28;
  }
  _StringGuts.grow(_:)(171);
  OUTLINED_FUNCTION_6_4(0xD000000000000021, (uint64_t)"<CAFEngineTemperatureObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_6_4(0xD000000000000010, (uint64_t)" { temperature: ");
  v29._countAndFlagsBits = v40;
  v29._object = v42;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000014, (uint64_t)", temperatureState: ");
  v30._countAndFlagsBits = v39;
  v30._object = v14;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", temperatureMin: ");
  v31._countAndFlagsBits = v38;
  v31._object = v0;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", temperatureMax: ");
  v32._countAndFlagsBits = v37;
  v32._object = v21;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000019, (uint64_t)", temperatureMarkerCold: ");
  v33._countAndFlagsBits = v24;
  v33._object = v25;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000018, (uint64_t)", temperatureMarkerHot: ");
  v34._countAndFlagsBits = v43;
  v34._object = v27;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 4095264;
  v35._object = (void *)0xE300000000000000;
  String.append(_:)(v35);
  return 0;
}

uint64_t CAFEngineTemperatureObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFEngineTemperatureObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFEngineTemperatureObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFEngineTemperatureObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFEngineTemperatureObservable.init(_:)(a1);
}

id CAFEngineTemperatureObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, Measurement<NSUnitTemperature>>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, CAFTemperatureState>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineTemperatureObservable, Measurement<NSUnitTemperature>?>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v18] = v19;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed] = a1;
  id v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFEngineTemperatureObservable();
  id v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

uint64_t CAFEngineTemperatureObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFEngineTemperatureObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEngineTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEngineTemperatureObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFEngineTemperatureObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEngineTemperatureObservable@<X0>(void *a1@<X8>)
{
  id result = CAFEngineTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFEngineTemperatureObservable(void **a1)
{
  return CAFEngineTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEngineTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFEngineTemperatureObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureState:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a3;
  id v16 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerCold:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerCold, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerHot:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFEngineTemperatureObservable__temperatureMarkerHot, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t @objc CAFEngineTemperatureObservable.engineTemperatureService(_:didUpdateTemperatureMarkerCold:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_106();
  uint64_t v12 = v11 - v10;
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    uint64_t v14 = v12;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    uint64_t v14 = v12;
    uint64_t v15 = 1;
  }
  __swift_storeEnumTagSinglePayload(v14, v15, 1, v13);
  id v16 = a3;
  id v17 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitTemperature>?(v12);
}

uint64_t CAFEngineTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFEngineTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFEngineTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_temperature()
{
  return sel_temperature;
}

void sub_2493DEC68(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_temperatureState()
{
  return sel_temperatureState;
}

id sub_2493DEC94@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_temperatureState);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_temperatureMin()
{
  return sel_temperatureMin;
}

void key path getter for CAFEngineTemperature.temperature : CAFEngineTemperature(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_2493DED50(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_temperatureMax()
{
  return sel_temperatureMax;
}

void sub_2493DED7C(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_temperatureMarkerCold()
{
  return sel_temperatureMarkerCold;
}

uint64_t sub_2493DEDA8@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, (SEL *)&selRef_temperatureMarkerCold, a2);
}

char *keypath_get_selector_temperatureMarkerHot()
{
  return sel_temperatureMarkerHot;
}

uint64_t key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);

  return __swift_storeEnumTagSinglePayload(a3, v6, 1, v7);
}

uint64_t sub_2493DEE74@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, (SEL *)&selRef_temperatureMarkerHot, a2);
}

uint64_t type metadata accessor for CAFEngineTemperatureObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEngineTemperature()
{
  return lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable(&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEngineTemperature and conformance CAFEngineTemperature()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature;
  if (!lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEngineTemperature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEngineTemperature and conformance CAFEngineTemperature);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFEngineTemperatureObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEngineTemperatureObservable and conformance CAFEngineTemperatureObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFEngineTemperatureObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFEngineTemperatureObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFEngineTemperatureObservable);
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMarkerCold.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMarkerCold.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.temperatureMarkerHot.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.$temperatureMarkerHot.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFEngineTemperatureObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t outlined destroy of Measurement<NSUnitTemperature>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEngineTemperatureObservable.resetCachedDescription()()
{
  return CAFEngineTemperatureObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitTemperature> and conformance Measurement<A>);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_6()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_5()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

void OUTLINED_FUNCTION_6_4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

void OUTLINED_FUNCTION_8_4(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000012;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

id CAFLocalNotificationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed);
}

uint64_t CAFLocalNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFLocalNotificationObservable.identifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFLocalNotificationObservable.$identifier.getter()
{
  return CAFLocalNotificationObservable.$identifier.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFLocalNotificationObservable.displayPanelIdentifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

uint64_t CAFLocalNotificationObservable.$displayPanelIdentifier.getter()
{
  return CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable.displayZoneIdentifier.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

uint64_t CAFLocalNotificationObservable.$displayZoneIdentifier.getter()
{
  return CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable.name.getter()
{
  return CAFLocalNotificationObservable.identifier.getter();
}

uint64_t CAFLocalNotificationObservable.$name.getter()
{
  return CAFLocalNotificationObservable.$identifier.getter();
}

uint64_t CAFLocalNotificationObservable._description.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  unint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForIdentifier))
  {
    uint64_t v2 = CAFLocalNotificationObservable.identifier.getter();
    unint64_t v3 = v4;
  }
  uint64_t v5 = 0x73696765726E753CLL;
  uint64_t v6 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForDisplayPanelIdentifier))
  {
    uint64_t v5 = CAFLocalNotificationObservable.displayPanelIdentifier.getter();
    uint64_t v6 = v7;
  }
  if (objc_msgSend(v1, sel_registeredForDisplayZoneIdentifier)) {
    CAFLocalNotificationObservable.displayZoneIdentifier.getter();
  }
  _StringGuts.grow(_:)(110);
  v8._countAndFlagsBits = 0xD000000000000021;
  v8._object = (void *)0x8000000249487660;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x746E656469207B20;
  v9._object = (void *)0xEF203A7265696669;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v2;
  v10._object = v3;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  v11._object = (void *)0x8000000249487690;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v5;
  v12._object = v6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000002494876B0;
  v13._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v13);
  v14._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4095264;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t CAFLocalNotificationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription + 8))
  {
    unint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFLocalNotificationObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFLocalNotificationObservable.cachedDescription.setter(v4, v5);
    unint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFLocalNotificationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFLocalNotificationObservable.init(_:)(a1);
}

id CAFLocalNotificationObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__identifier;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFLocalNotificationObservable, String>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_1_5();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v11] = OUTLINED_FUNCTION_1_5();
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v12] = OUTLINED_FUNCTION_1_5();
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed] = a1;
  id v13 = a1;

  v16.receiver = v9;
  v16.super_class = (Class)type metadata accessor for CAFLocalNotificationObservable();
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  objc_msgSend(v13, sel_registerObserver_, v14);

  return v14;
}

uint64_t CAFLocalNotificationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFLocalNotificationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFLocalNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFLocalNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFLocalNotificationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFLocalNotificationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFLocalNotificationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFLocalNotificationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFLocalNotificationObservable(void **a1)
{
  return CAFLocalNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFLocalNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFLocalNotificationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t @objc CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t CAFLocalNotificationObservable.localNotificationService(_:didUpdateName:)()
{
  return CAFLocalNotificationObservable.localNotificationService(_:didUpdateIdentifier:)();
}

uint64_t CAFLocalNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFLocalNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFLocalNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void sub_2493E0014(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_displayPanelIdentifier()
{
  return sel_displayPanelIdentifier;
}

void sub_2493E0040(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_displayZoneIdentifier()
{
  return sel_displayZoneIdentifier;
}

void sub_2493E006C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493E008C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFLocalNotificationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFLocalNotification(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable(&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFLocalNotificationObservable()
{
  return lazy protocol witness table accessor for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable(&lazy protocol witness table cache variable for type CAFLocalNotification and conformance CAFLocalNotification, 255, (void (*)(uint64_t))type metadata accessor for CAFLocalNotification);
}

unint64_t type metadata accessor for CAFLocalNotification()
{
  unint64_t result = lazy cache variable for type metadata for CAFLocalNotification;
  if (!lazy cache variable for type metadata for CAFLocalNotification)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFLocalNotification);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFLocalNotificationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFLocalNotificationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFLocalNotificationObservable and conformance CAFLocalNotificationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFLocalNotificationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFLocalNotificationObservable);
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFLocalNotificationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t partial apply for closure #1 in CAFLocalNotificationObservable.resetCachedDescription()()
{
  return CAFLocalNotificationObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return specialized SafePublished.init(observedValuekeypath:)(v0);
}

id CAFUIInputDeviceButtonObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
}

uint64_t CAFUIInputDeviceButtonObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter()
{
  return CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter()
{
  return CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter()
{
  return CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter();
}

uint64_t CAFUIInputDeviceButtonObservable.$uiInputDeviceButtonEvent.getter()
{
  return CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFUIInputDeviceButtonObservable.name.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFUIInputDeviceButtonObservable.$name.getter()
{
  return CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFUIInputDeviceButtonObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed), sel_registeredForUIInputDeviceButtonEvent))
  {
    CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter();
    id v1 = (id)NSStringFromUIInputDeviceButtonEvent();
    if (v1)
    {
      uint64_t v2 = v1;
      uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v5 = v4;
    }
    else
    {
      uint64_t v5 = (void *)0xE900000000000029;
      uint64_t v3 = 0x6E776F6E6B6E7528;
    }
  }
  else
  {
    uint64_t v5 = (void *)0xEE003E6465726574;
    uint64_t v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(71);
  v6._countAndFlagsBits = 0xD000000000000023;
  v6._object = (void *)0x8000000249487790;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x80000002494877C0;
  v7._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t CAFUIInputDeviceButtonObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFUIInputDeviceButtonObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFUIInputDeviceButtonObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFUIInputDeviceButtonObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFUIInputDeviceButtonObservable.init(_:)(a1);
}

id CAFUIInputDeviceButtonObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, CAFUIInputDevicePurpose>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, CAFUIInputDeviceButtonEvent>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__name;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFUIInputDeviceButtonObservable, String>);
  swift_allocObject();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFUIInputDeviceButtonObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFUIInputDeviceButtonObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFUIInputDeviceButtonObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFUIInputDeviceButtonObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFUIInputDeviceButtonObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFUIInputDeviceButtonObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFUIInputDeviceButtonObservable@<X0>(void *a1@<X8>)
{
  id result = CAFUIInputDeviceButtonObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFUIInputDeviceButtonObservable(void **a1)
{
  return CAFUIInputDeviceButtonObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFUIInputDeviceButtonObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFUIInputDeviceButtonObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDevicePurpose, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonService(_:didUpdateUiInputDeviceButtonEvent:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFUIInputDeviceButtonObservable__uiInputDeviceButtonEvent, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFUIInputDeviceButtonObservable.uIInputDeviceService(_:didUpdateUiInputDevicePurpose:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t CAFUIInputDeviceButtonObservable.uiInputDeviceButtonService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFUIInputDeviceButtonObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFUIInputDeviceButtonObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFUIInputDeviceButtonObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_uiInputDevicePurpose()
{
  return sel_uiInputDevicePurpose;
}

id sub_2493E1130@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_uiInputDevicePurpose);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_uiInputDeviceButtonEvent()
{
  return sel_uiInputDeviceButtonEvent;
}

id sub_2493E1170@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_uiInputDeviceButtonEvent);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t type metadata accessor for CAFUIInputDeviceButtonObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFUIInputDeviceButton(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFUIInputDeviceButtonObservable()
{
  return lazy protocol witness table accessor for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable(&lazy protocol witness table cache variable for type CAFUIInputDeviceButton and conformance CAFUIInputDeviceButton, 255, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButton);
}

unint64_t type metadata accessor for CAFUIInputDeviceButton()
{
  unint64_t result = lazy cache variable for type metadata for CAFUIInputDeviceButton;
  if (!lazy cache variable for type metadata for CAFUIInputDeviceButton)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFUIInputDeviceButton);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFUIInputDeviceButtonObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFUIInputDeviceButtonObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUIInputDeviceButtonObservable and conformance CAFUIInputDeviceButtonObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFUIInputDeviceButtonObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFUIInputDeviceButtonObservable);
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.uiInputDevicePurpose.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$uiInputDevicePurpose.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.uiInputDeviceButtonEvent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$uiInputDeviceButtonEvent.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFUIInputDeviceButtonObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFUIInputDeviceButtonObservable.resetCachedDescription()()
{
  return CAFUIInputDeviceButtonObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFAutoClimateControl.levelBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasLevel, (SEL *)&selRef_level);
}

id CAFAutoClimateControl.levelBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setLevel_, v2);
}

uint64_t CAFAutoClimateControl.intensityBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasIntensity, (SEL *)&selRef_intensity);
}

uint64_t CAFAutoClimateControl.levelBridged.getter(SEL *a1, SEL *a2)
{
  unsigned int v4 = [v2 *a1];
  unsigned int v5 = v4;
  if (v4) {
    unsigned int v4 = [v2 *a2];
  }
  return v4 | ((v5 ^ 1) << 8);
}

id CAFAutoClimateControl.intensityBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setIntensity_, v2);
}

id CAFAutoClimateControlObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
}

uint64_t CAFAutoClimateControlObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFAutoClimateControlObservable.level.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFAutoClimateControlObservable.level.setter);
}

uint64_t CAFAutoClimateControlObservable.level.getter()
{
  return CAFAutoClimateControlObservable.level.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(unsigned char *, void);
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned char v7[32];
  id v8;

  OUTLINED_FUNCTION_116();
  Swift::String v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v8;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  unsigned int v4 = *v3;
  unsigned int v5 = v3[1];
  v2(v7, 0);
  swift_release();
  swift_release();

  return v4 | (v5 << 8);
}

uint64_t CAFAutoClimateControlObservable.level.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_249471AB0, (uint64_t)&unk_249471AD8, (uint64_t (*)(void, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void (*CAFAutoClimateControlObservable.level.modify())(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v4);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  id v5 = v2;
  swift_readAtKeyPath();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  v7(v6);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  *(unsigned char *)(v1 + 89) = v3;
  return CAFAutoClimateControlObservable.level.modify;
}

void CAFAutoClimateControlObservable.level.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFAutoClimateControlObservable.$level.getter()
{
  return CAFAutoClimateControlObservable.$level.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFAutoClimateControlObservable.intensity : CAFAutoClimateControlObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFAutoClimateControlObservable.intensity.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFAutoClimateControlObservable.intensity : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFAutoClimateControlObservable.intensity.setter);
}

uint64_t key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t CAFAutoClimateControlObservable.intensity.getter()
{
  return CAFAutoClimateControlObservable.level.getter();
}

uint64_t CAFAutoClimateControlObservable.intensity.setter(__int16 a1)
{
  return CAFAutoClimateControlObservable.level.setter(a1, (uint64_t)&unk_249471AF8, (uint64_t)&unk_249471B20, (uint64_t (*)(void, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFAutoClimateControlObservable.level.setter(__int16 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, id, uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  id v8 = v4;

  return a4(a1 & 0x1FF, v8, KeyPath, v7);
}

void (*CAFAutoClimateControlObservable.intensity.modify())(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v4);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  id v5 = v2;
  swift_readAtKeyPath();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  v7(v6);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  *(unsigned char *)(v1 + 89) = v3;
  return CAFAutoClimateControlObservable.intensity.modify;
}

void CAFAutoClimateControlObservable.intensity.modify(uint64_t a1, uint64_t a2)
{
}

void CAFAutoClimateControlObservable.level.modify(uint64_t a1, uint64_t a2, void (*a3)(void, id, void, void))
{
  char v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 88) | (*(unsigned __int8 *)(*(void *)a1 + 89) << 8), *(id *)(*(void *)a1 + 64), v3[9], v3[10]);

  free(v3);
}

uint64_t CAFAutoClimateControlObservable.$intensity.getter()
{
  return CAFAutoClimateControlObservable.$level.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFAutoClimateControlObservable.$level.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_116();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFAutoClimateControlObservable.vehicleLayoutKey.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFAutoClimateControlObservable.$vehicleLayoutKey.getter()
{
  return CAFAutoClimateControlObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFAutoClimateControlObservable.name.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFAutoClimateControlObservable.$name.getter()
{
  return CAFAutoClimateControlObservable.$vehicleLayoutKey.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFAutoClimateControlObservable.$vehicleLayoutKey.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFAutoClimateControlObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForAutoModeLevel))
  {
    CAFAutoClimateControlObservable.level.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v3 = v4;
  }
  uint64_t v5 = 0x73696765726E753CLL;
  uint64_t v6 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForAutoModeIntensity))
  {
    CAFAutoClimateControlObservable.intensity.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFAutoModeIntensity?);
    uint64_t v5 = String.init<A>(describing:)();
    uint64_t v6 = v7;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey))
  {
    CAFAutoClimateControlObservable.vehicleLayoutKey.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(88);
  v8._countAndFlagsBits = 0xD000000000000022;
  v8._object = (void *)0x8000000249487860;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x6C6576656C207B20;
  v9._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v2;
  v10._object = v3;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x736E65746E69202CLL;
  v11._object = (void *)0xED0000203A797469;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v5;
  v12._object = v6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x8000000249485D90;
  v13._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v13);
  v14._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4095264;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t CAFAutoClimateControlObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFAutoClimateControlObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFAutoClimateControlObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFAutoClimateControlObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFAutoClimateControlObservable.init(_:)(a1);
}

id CAFAutoClimateControlObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFAutoClimateControlObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFAutoClimateControlObservable, CAFAutoModeIntensity?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__vehicleLayoutKey;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFAutoClimateControlObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v13 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFAutoClimateControlObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v15 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed] = a1;
  id v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFAutoClimateControlObservable();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFAutoClimateControlObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFAutoClimateControlObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFAutoClimateControlObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFAutoClimateControlObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFAutoClimateControlObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFAutoClimateControlObservable@<X0>(void *a1@<X8>)
{
  id result = CAFAutoClimateControlObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFAutoClimateControlObservable(void **a1)
{
  return CAFAutoClimateControlObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFAutoClimateControlObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFAutoClimateControlObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__level, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateIntensity:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFAutoClimateControlObservable__intensity, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateLevel:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateVehicleLayoutKey:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFAutoClimateControlObservable.autoClimateControlService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFAutoClimateControlObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFAutoClimateControlObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFAutoClimateControlObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t key path getter for CAFAutoClimateControl.levelBridged : CAFAutoClimateControl@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFAutoClimateControl.levelBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_2493E2A24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFAutoClimateControl.levelBridged.setter);
}

uint64_t key path getter for CAFAutoClimateControl.intensityBridged : CAFAutoClimateControl@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFAutoClimateControl.intensityBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_2493E2A88(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFAutoClimateControlObservable.level : CAFAutoClimateControlObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFAutoClimateControl.intensityBridged.setter);
}

uint64_t type metadata accessor for CAFAutoClimateControlObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFAutoClimateControl(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFAutoClimateControlObservable()
{
  return lazy protocol witness table accessor for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable(&lazy protocol witness table cache variable for type CAFAutoClimateControl and conformance CAFAutoClimateControl, 255, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControl);
}

unint64_t type metadata accessor for CAFAutoClimateControl()
{
  unint64_t result = lazy cache variable for type metadata for CAFAutoClimateControl;
  if (!lazy cache variable for type metadata for CAFAutoClimateControl)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFAutoClimateControl);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFAutoClimateControlObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFAutoClimateControlObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFAutoClimateControlObservable and conformance CAFAutoClimateControlObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFAutoClimateControlObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFAutoClimateControlObservable);
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xC0))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.level.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$level.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xE0))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.intensity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$intensity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFAutoClimateControlObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t partial apply for closure #1 in CAFAutoClimateControlObservable.resetCachedDescription()()
{
  return CAFAutoClimateControlObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_0_5()
{
  return v0;
}

uint64_t static CAFPlaybackState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFPlaybackState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFPlaybackState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFPlaybackState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFPlaybackState.description.getter()
{
  id v0 = (id)NSStringFromPlaybackState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFPlaybackState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState);
  a1[2] = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState);
  uint64_t result = lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(&lazy protocol witness table cache variable for type CAFPlaybackState and conformance CAFPlaybackState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPlaybackState and conformance CAFPlaybackState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFPlaybackState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFPlaybackState()
{
  return CAFPlaybackState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFPlaybackState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFPlaybackState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFPlaybackState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFPlaybackState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFPlaybackState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFPlaybackState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTestControlAsync()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTestControlAsyncObservable, (uint64_t (*)(void))CAFTestControlAsyncObservable.init(_:));
}

uint64_t specialized CAFObserved<>.observable.getter()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFVentObservable, (uint64_t (*)(void))CAFVentObservable.init(_:));
}

uint64_t specialized CAFObserved<>.observable.getter(void (*a1)(void), uint64_t (*a2)(void))
{
  if (objc_msgSend(v2, sel_observableCache))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  outlined init with take of Any?((uint64_t)v9, (uint64_t)v10);
  if (!v11)
  {
    outlined destroy of Any?((uint64_t)v10);
    goto LABEL_8;
  }
  a1(0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    objc_allocWithZone((Class)((uint64_t (*)(void))a1)(0));
    id v6 = v2;
    uint64_t v5 = a2();
    objc_msgSend(v6, sel_setObservableCache_, v5);
    return v5;
  }
  return v8;
}

uint64_t CAFObserved<>.observable.getter()
{
  id v1 = v0;
  if (objc_msgSend(v0, sel_observableCache))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
  }
  outlined init with take of Any?((uint64_t)v8, (uint64_t)v9);
  if (!v9[3])
  {
    outlined destroy of Any?((uint64_t)v9);
    uint64_t v2 = OUTLINED_FUNCTION_1_6();
    goto LABEL_8;
  }
  uint64_t v2 = OUTLINED_FUNCTION_1_6();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    v9[0] = v0;
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
    swift_unknownObjectRetain();
    uint64_t v3 = v5(v9, v2, AssociatedConformanceWitness);
    objc_msgSend(v1, sel_setObservableCache_, v3);
    return v3;
  }
  return v7;
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTemperature()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTemperatureObservable, (uint64_t (*)(void))CAFTemperatureObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFClimateControlsLocked()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFClimateControlsLockedObservable, (uint64_t (*)(void))CAFClimateControlsLockedObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFZonesSynced()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFZonesSyncedObservable, (uint64_t (*)(void))CAFZonesSyncedObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSeatHeatingCooling()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSeatHeatingCoolingObservable, (uint64_t (*)(void))CAFSeatHeatingCoolingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFMultipleSelectImageSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFMultipleSelectImageSettingObservable, (uint64_t (*)(void))CAFMultipleSelectImageSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCar()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCarObservable, (uint64_t (*)(void))CAFCarObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFVent()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFVentObservable, (uint64_t (*)(void))CAFVentObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFButtonSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFButtonSettingObservable, (uint64_t (*)(void))CAFButtonSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTrip()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTripObservable, (uint64_t (*)(void))CAFTripObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestIndexByUnit()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTypeTestIndexByUnitObservable, (uint64_t (*)(void))CAFTypeTestIndexByUnitObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSteeringWheelHeatingCooling()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSteeringWheelHeatingCoolingObservable, (uint64_t (*)(void))CAFSteeringWheelHeatingCoolingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFInteriorConditions()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFInteriorConditionsObservable, (uint64_t (*)(void))CAFInteriorConditionsObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFEngineTemperature()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFEngineTemperatureObservable, (uint64_t (*)(void))CAFEngineTemperatureObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFLocalNotification()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFLocalNotificationObservable, (uint64_t (*)(void))CAFLocalNotificationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFUIInputDeviceButton()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFUIInputDeviceButtonObservable, (uint64_t (*)(void))CAFUIInputDeviceButtonObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFAutoClimateControl()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFAutoClimateControlObservable, (uint64_t (*)(void))CAFAutoClimateControlObservable.init(_:));
}

uint64_t CAFObservable.objectDidChange.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for AnyPublisher<(), Never>);
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type AnyPublisher<(), Never> and conformance AnyPublisher<A, B>, &demangling cache variable for type metadata for AnyPublisher<(), Never>);
  uint64_t v6 = type metadata accessor for Publishers.CompactMap();
  OUTLINED_FUNCTION_0_0();
  uint64_t v8 = v7;
  MEMORY[0x270FA5388](v9);
  uint64_t v11 = (char *)v16 - v10;
  v16[1] = closure #1 in CAFObservable.objectDidChange.getter(v3);
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  void v13[4] = v12;
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_getWitnessTable();
  uint64_t v14 = Publisher.eraseToAnyPublisher()();
  swift_release();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  return v14;
}

uint64_t closure #1 in CAFObservable.objectDidChange.getter(void *a1)
{
  swift_beginAccess();
  id v2 = objc_getAssociatedObject(a1, &static AssociatedKeys.objectDidChange);
  swift_endAccess();
  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  outlined init with take of Any?((uint64_t)v7, (uint64_t)v8);
  if (!v8[3])
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_8;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_8:
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    swift_allocObject();
    uint64_t v4 = (void *)PassthroughSubject.init()();
    swift_beginAccess();
    objc_setAssociatedObject(a1, &static AssociatedKeys.objectDidChange, v4, (void *)0x301);
    swift_endAccess();
    v8[0] = v4;
    lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
    uint64_t v3 = Publisher.eraseToAnyPublisher()();
    goto LABEL_9;
  }
  v8[0] = v6;
  lazy protocol witness table accessor for type Published<Float?>.Publisher and conformance Published<A>.Publisher(&lazy protocol witness table cache variable for type PassthroughSubject<(), Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<(), Never>);
  uint64_t v3 = Publisher.eraseToAnyPublisher()();
LABEL_9:
  swift_release();
  return v3;
}

uint64_t closure #2 in CAFObservable.objectDidChange.getter@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t result = MEMORY[0x24C59E690](v3);
  *a2 = result;
  return result;
}

uint64_t CAFObservable.publisher.getter(uint64_t a1, uint64_t a2)
{
  v24[0] = a2;
  type metadata accessor for Array();
  swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for Publishers.Sequence();
  uint64_t v6 = type metadata accessor for AnyPublisher();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  uint64_t v29 = WitnessTable;
  uint64_t v30 = v25;
  uint64_t v8 = type metadata accessor for Publishers.Concatenate();
  OUTLINED_FUNCTION_0_0();
  uint64_t v26 = v9;
  MEMORY[0x270FA5388](v10);
  uint64_t v12 = (char *)v24 - v11;
  v24[1] = swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for Publishers.Filter();
  OUTLINED_FUNCTION_0_0();
  uint64_t v15 = v14;
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (char *)v24 - v17;
  uint64_t v27 = CAFObservable.objectDidChange.getter(a1, a2);
  getContiguousArrayStorageType<A>(for:)(a1, a1);
  swift_allocObject();
  static Array._adoptStorage(_:count:)();
  *objc_super v19 = v2;
  type metadata accessor for Array();
  swift_unknownObjectRetain();
  Publisher.prepend(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v24[0];
  *(void *)(v20 + 16) = a1;
  *(void *)(v20 + 24) = v21;
  Publisher.filter(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v8);
  swift_getWitnessTable();
  uint64_t v22 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v13);
  return v22;
}

uint64_t closure #1 in CAFObservable.publisher.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  type metadata accessor for CAFService();
  if ((swift_dynamicCast() & 1) == 0) {
    return 1;
  }
  id v6 = objc_msgSend(v8, sel_receivedAllValues);

  return (uint64_t)v6;
}

id specialized CAFObserved<>.observable.getter()
{
  id v1 = objc_allocWithZone((Class)type metadata accessor for CAFPositionManagerObservable());
  return CAFPositionManagerObservable.init(_:)(v0);
}

uint64_t CAFObserved<>.observable.getter(uint64_t a1)
{
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1, a1);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v7, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFChargingTime()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFChargingTimeObservable, (uint64_t (*)(void))CAFChargingTimeObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFStaticSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFStaticSettingObservable, (uint64_t (*)(void))CAFStaticSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFClosureState()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFClosureStateObservable, (uint64_t (*)(void))CAFClosureStateObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTestControlSync()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTestControlSyncObservable, (uint64_t (*)(void))CAFTestControlSyncObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFPairedDevicesInformation()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFPairedDevicesInformationObservable, (uint64_t (*)(void))CAFPairedDevicesInformationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFRecirculation()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFRecirculationObservable, (uint64_t (*)(void))CAFRecirculationObservable.init(_:));
}

id protocol witness for CAFObserved.observable.getter in conformance CAFPositionManager()
{
  return specialized CAFObserved<>.observable.getter();
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSingleSelectImageSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSingleSelectImageSettingObservable, (uint64_t (*)(void))CAFSingleSelectImageSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCriticalInputStream()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCriticalInputStreamObservable, (uint64_t (*)(void))CAFCriticalInputStreamObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFExteriorConditions()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFExteriorConditionsObservable, (uint64_t (*)(void))CAFExteriorConditionsObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFProtocolPerfTest()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFProtocolPerfTestObservable, (uint64_t (*)(void))CAFProtocolPerfTestObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCameraGeneral()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCameraGeneralObservable, (uint64_t (*)(void))CAFCameraGeneralObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFGearRecommendation()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFGearRecommendationObservable, (uint64_t (*)(void))CAFGearRecommendationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFHistoricalNotification()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFHistoricalNotificationObservable, (uint64_t (*)(void))CAFHistoricalNotificationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCameraButton()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCameraButtonObservable, (uint64_t (*)(void))CAFCameraButtonObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestMulti()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTypeTestMultiObservable, (uint64_t (*)(void))CAFTypeTestMultiObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFRequestContent()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFRequestContentObservable, (uint64_t (*)(void))CAFRequestContentObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFMultipleSelectSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFMultipleSelectSettingObservable, (uint64_t (*)(void))CAFMultipleSelectSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFVehicleInformation()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFVehicleInformationObservable, (uint64_t (*)(void))CAFVehicleInformationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFEnginePower()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFEnginePowerObservable, (uint64_t (*)(void))CAFEnginePowerObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFVolume()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFVolumeObservable, (uint64_t (*)(void))CAFVolumeObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFFuelConsumption()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFFuelConsumptionObservable, (uint64_t (*)(void))CAFFuelConsumptionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDriveMode()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDriveModeObservable, (uint64_t (*)(void))CAFDriveModeObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFPairedDevicesAction()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFPairedDevicesActionObservable, (uint64_t (*)(void))CAFPairedDevicesActionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFEqualizer()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFEqualizerObservable, (uint64_t (*)(void))CAFEqualizerObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFBooleanSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFBooleanSettingObservable, (uint64_t (*)(void))CAFBooleanSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFMediaSource()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFMediaSourceObservable, (uint64_t (*)(void))CAFMediaSourceObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFFan()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFFanObservable, (uint64_t (*)(void))CAFFanObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFRemainingRange()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFRemainingRangeObservable, (uint64_t (*)(void))CAFRemainingRangeObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFOdometer()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFOdometerObservable, (uint64_t (*)(void))CAFOdometerObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDefrost()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDefrostObservable, (uint64_t (*)(void))CAFDefrostObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFPicker()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFPickerObservable, (uint64_t (*)(void))CAFPickerObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTestControlEvent()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTestControlEventObservable, (uint64_t (*)(void))CAFTestControlEventObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTargetSpeed()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTargetSpeedObservable, (uint64_t (*)(void))CAFTargetSpeedObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCabin()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCabinObservable, (uint64_t (*)(void))CAFCabinObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFBatteryTemperature()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFBatteryTemperatureObservable, (uint64_t (*)(void))CAFBatteryTemperatureObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFCarManager()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFCarManagerObservable, (uint64_t (*)(void))CAFCarManagerObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTirePressure()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTirePressureObservable, (uint64_t (*)(void))CAFTirePressureObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFEngineRPM()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFEngineRPMObservable, (uint64_t (*)(void))CAFEngineRPMObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSeatFan()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSeatFanObservable, (uint64_t (*)(void))CAFSeatFanObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSoundDistribution()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSoundDistributionObservable, (uint64_t (*)(void))CAFSoundDistributionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSingleSelectSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSingleSelectSettingObservable, (uint64_t (*)(void))CAFSingleSelectSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTirePressureMonitoringSystem()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTirePressureMonitoringSystemObservable, (uint64_t (*)(void))CAFTirePressureMonitoringSystemObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDisplayUnits()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDisplayUnitsObservable, (uint64_t (*)(void))CAFDisplayUnitsObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFIntegerSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFIntegerSettingObservable, (uint64_t (*)(void))CAFIntegerSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFNowPlaying()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFNowPlayingObservable, (uint64_t (*)(void))CAFNowPlayingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFRemoteNotification()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFRemoteNotificationObservable, (uint64_t (*)(void))CAFRemoteNotificationObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSettingsSection()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSettingsSectionObservable, (uint64_t (*)(void))CAFSettingsSectionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFChargingRate()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFChargingRateObservable, (uint64_t (*)(void))CAFChargingRateObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestWithStates()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTypeTestWithStatesObservable, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDeepLinkSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDeepLinkSettingObservable, (uint64_t (*)(void))CAFDeepLinkSettingObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDimensionManager()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDimensionObservable, (uint64_t (*)(void))CAFDimensionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFSeatBelt()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFSeatBeltObservable, (uint64_t (*)(void))CAFSeatBeltObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFBatteryLevel()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFBatteryLevelObservable, (uint64_t (*)(void))CAFBatteryLevelObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTypeTest()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTypeTestObservable, (uint64_t (*)(void))CAFTypeTestObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTypeTestIndexByPosition()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTypeTestIndexByPositionObservable, (uint64_t (*)(void))CAFTypeTestIndexByPositionObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFTransmissionStatus()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFTransmissionStatusObservable, (uint64_t (*)(void))CAFTransmissionStatusObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFVehicleVariant()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFVehicleVariantObservable, (uint64_t (*)(void))CAFVehicleVariantObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFDisplayedSpeed()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFDisplayedSpeedObservable, (uint64_t (*)(void))CAFDisplayedSpeedObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFChargingStatus()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFChargingStatusObservable, (uint64_t (*)(void))CAFChargingStatusObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFUIState()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFUIStateObservable, (uint64_t (*)(void))CAFUIStateObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFFuelLevel()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFFuelLevelObservable, (uint64_t (*)(void))CAFFuelLevelObservable.init(_:));
}

uint64_t protocol witness for CAFObserved.observable.getter in conformance CAFFloatSetting()
{
  return specialized CAFObserved<>.observable.getter((void (*)(void))type metadata accessor for CAFFloatSettingObservable, (uint64_t (*)(void))CAFFloatSettingObservable.init(_:));
}

uint64_t getContiguousArrayStorageType<A>(for:)(uint64_t a1, uint64_t a2)
{
  if (dynamic_cast_existential_0_class_conditional(a2))
  {
    return __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
  }
  else
  {
    return MEMORY[0x270F9F4F8]();
  }
}

uint64_t sub_2493E56F4()
{
  return MEMORY[0x270FA0238](v0, 32, 7);
}

uint64_t partial apply for closure #1 in CAFObservable.publisher.getter(uint64_t a1)
{
  return closure #1 in CAFObservable.publisher.getter(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t dispatch thunk of CAFObserved.observable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of CAFObservable.observed.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of CAFObservable.init(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dynamic_cast_existential_0_class_conditional(uint64_t a1)
{
  if (swift_isClassType()) {
    return a1;
  }
  else {
    return 0;
  }
}

uint64_t sub_2493E5778()
{
  swift_unknownObjectWeakDestroy();

  return MEMORY[0x270FA0238](v0, 24, 7);
}

uint64_t sub_2493E57B0()
{
  swift_release();

  return MEMORY[0x270FA0238](v0, 40, 7);
}

uint64_t partial apply for closure #2 in CAFObservable.objectDidChange.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in CAFObservable.objectDidChange.getter(*(void *)(v1 + 32), a1);
}

uint64_t OUTLINED_FUNCTION_1_6()
{
  return swift_getAssociatedTypeWitness();
}

id CAFChargingTimeObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed);
}

uint64_t CAFChargingTimeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFChargingTimeObservable.remainingTime.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFChargingTimeObservable.$remainingTime.getter()
{
  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFChargingTimeObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed), sel_registeredForRemainingTime))
  {
    CAFChargingTimeObservable.remainingTime.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>();
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v7 = v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    uint64_t v7 = (void *)0xEE003E6465726574;
    uint64_t v5 = 0x73696765726E753CLL;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x8000000249487910;
  String.append(_:)(v8);
  v13[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x8000000249487930;
  v9._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v5;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4095264;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  return v14;
}

uint64_t CAFChargingTimeObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFChargingTimeObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFChargingTimeObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFChargingTimeObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFChargingTimeObservable.init(_:)(a1);
}

id CAFChargingTimeObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable__remainingTime;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingTimeObservable, Measurement<NSUnitDuration>>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFChargingTimeObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFChargingTimeObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFChargingTimeObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFChargingTimeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFChargingTimeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFChargingTimeObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFChargingTimeObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFChargingTimeObservable@<X0>(void *a1@<X8>)
{
  id result = CAFChargingTimeObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFChargingTimeObservable(void **a1)
{
  return CAFChargingTimeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFChargingTimeObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFChargingTimeObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFChargingTimeObservable.chargingTimeService(_:didUpdateRemainingTime:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFChargingTimeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFChargingTimeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFChargingTimeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_remainingTime()
{
  return sel_remainingTime;
}

void key path getter for CAFChargingTime.remainingTime : CAFChargingTime(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_remainingTime);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitDuration);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for CAFChargingTimeObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFChargingTime()
{
  return lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable(&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable);
}

unint64_t lazy protocol witness table accessor for type CAFChargingTime and conformance CAFChargingTime()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime;
  if (!lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFChargingTime);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFChargingTime and conformance CAFChargingTime);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFChargingTimeObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFChargingTimeObservable and conformance CAFChargingTimeObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFChargingTimeObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFChargingTimeObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFChargingTimeObservable);
}

uint64_t dispatch thunk of CAFChargingTimeObservable.remainingTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFChargingTimeObservable.$remainingTime.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFChargingTimeObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFChargingTimeObservable.resetCachedDescription()()
{
  return CAFChargingTimeObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitDuration> and conformance Measurement<A>);
  }
  return result;
}

uint64_t static CAFUIInputDeviceButtonEvent.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUIInputDeviceButtonEvent.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFUIInputDeviceButtonEvent.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUIInputDeviceButtonEvent.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUIInputDeviceButtonEvent.description.getter()
{
  id v0 = (id)NSStringFromUIInputDeviceButtonEvent();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUIInputDeviceButtonEvent(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent);
  a1[2] = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent);
  uint64_t result = lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(&lazy protocol witness table cache variable for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUIInputDeviceButtonEvent and conformance CAFUIInputDeviceButtonEvent(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUIInputDeviceButtonEvent(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUIInputDeviceButtonEvent()
{
  return CAFUIInputDeviceButtonEvent.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUIInputDeviceButtonEvent] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFUIInputDeviceButtonEvent]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUIInputDeviceButtonEvent] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUIInputDeviceButtonEvent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFUIInputDeviceButtonEvent.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFUIInputDeviceButtonEvent@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFStaticSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
}

uint64_t CAFStaticSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFStaticSettingObservable.userVisibleLabel.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$userVisibleLabel.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.sectionIdentifier.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_5_6();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFStaticSettingObservable.$sectionIdentifier.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.sortOrder.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFStaticSettingObservable.$sortOrder.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFStaticSettingObservable.$category.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.identifier.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$identifier.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.disabled.getter()
{
  return CAFStaticSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFStaticSettingObservable.$disabled.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.limitableUIElement.getter()
{
  return CAFStaticSettingObservable.disabled.getter();
}

uint64_t CAFStaticSettingObservable.$limitableUIElement.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.hidden.getter()
{
  return CAFStaticSettingObservable.disabled.getter();
}

uint64_t CAFStaticSettingObservable.$hidden.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.showAudioBrandLogo.getter()
{
  return CAFStaticSettingObservable.disabled.getter();
}

uint64_t CAFStaticSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.vehicleLayoutKey.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.symbolName.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$symbolName.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.prominenceInfo.getter()
{
  return CAFStaticSettingObservable.prominenceInfo.getter();
}

{
  void *v0;
  id v1;
  uint64_t v3;

  OUTLINED_FUNCTION_5_6();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFStaticSettingObservable.$prominenceInfo.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.userVisibleValue.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$userVisibleValue.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.childrenSettingsIdentifiers.getter()
{
  return CAFStaticSettingObservable.prominenceInfo.getter();
}

uint64_t CAFStaticSettingObservable.$childrenSettingsIdentifiers.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__childrenSettingsIdentifiers, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.name.getter()
{
  return CAFStaticSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFStaticSettingObservable.$name.getter()
{
  return CAFStaticSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFStaticSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFStaticSettingObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForUserVisibleValue))
  {
    uint64_t v2 = CAFStaticSettingObservable.userVisibleValue.getter();
    uint64_t v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForChildrenSettingsIdentifiers))
  {
    CAFStaticSettingObservable.childrenSettingsIdentifiers.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(90);
  v5._countAndFlagsBits = 0xD00000000000001DLL;
  v5._object = (void *)0x80000002494879F0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x8000000249487A10;
  v6._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  v8._object = (void *)0x8000000249487A30;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFStaticSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFStaticSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFStaticSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFStaticSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFStaticSettingObservable.init(_:)(a1);
}

id CAFStaticSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__category;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v14;
  uint64_t v15 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v15] = OUTLINED_FUNCTION_1_5();
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v16] = OUTLINED_FUNCTION_16_0();
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_26_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v22] = v23;
  uint64_t v24 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__userVisibleValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v24] = OUTLINED_FUNCTION_1_5();
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__childrenSettingsIdentifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFStaticSettingObservable, [String]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v27] = OUTLINED_FUNCTION_1_5();
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed] = a1;
  id v28 = a1;

  v31.receiver = v9;
  v31.super_class = (Class)type metadata accessor for CAFStaticSettingObservable();
  id v29 = objc_msgSendSuper2(&v31, sel_init);
  objc_msgSend(v28, sel_registerObserver_, v29);

  return v29;
}

uint64_t CAFStaticSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFStaticSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFStaticSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFStaticSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFStaticSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFStaticSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFStaticSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFStaticSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFStaticSettingObservable(void **a1)
{
  return CAFStaticSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFStaticSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFStaticSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFStaticSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateUserVisibleValue:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateChildrenSettingsIdentifiers:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFStaticSettingObservable.staticSettingService(_:didUpdateName:)()
{
  return CAFStaticSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFStaticSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFStaticSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFStaticSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void sub_2493E8198(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493E81B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2493E81DC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493E8210(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2493E8230()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493E8258()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493E8280()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493E82A8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2493E82D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493E82F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_userVisibleValue()
{
  return sel_userVisibleValue;
}

void sub_2493E8320(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_childrenSettingsIdentifiers()
{
  return sel_childrenSettingsIdentifiers;
}

void key path getter for CAFStaticSetting.childrenSettingsIdentifiers : CAFStaticSetting(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_childrenSettingsIdentifiers);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

void sub_2493E83B8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFStaticSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFStaticSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFStaticSettingObservable()
{
  return lazy protocol witness table accessor for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable(&lazy protocol witness table cache variable for type CAFStaticSetting and conformance CAFStaticSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFStaticSetting);
}

unint64_t type metadata accessor for CAFStaticSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFStaticSetting;
  if (!lazy cache variable for type metadata for CAFStaticSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFStaticSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFStaticSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFStaticSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFStaticSettingObservable and conformance CAFStaticSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFStaticSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFStaticSettingObservable);
}

uint64_t dispatch thunk of CAFStaticSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.userVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$userVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.childrenSettingsIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$childrenSettingsIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFStaticSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 520))();
}

uint64_t partial apply for closure #1 in CAFStaticSettingObservable.resetCachedDescription()()
{
  return CAFStaticSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFButtonAction.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFButtonAction.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFButtonAction.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFButtonAction.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFButtonAction.description.getter()
{
  id v0 = (id)NSStringFromButtonAction();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFButtonAction(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction);
  a1[2] = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction);
  uint64_t result = lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(&lazy protocol witness table cache variable for type CAFButtonAction and conformance CAFButtonAction);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFButtonAction and conformance CAFButtonAction(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFButtonAction(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFButtonAction()
{
  return CAFButtonAction.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFButtonAction] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFButtonAction]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFButtonAction] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFButtonAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFButtonAction.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFButtonAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFClosureStateObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
}

uint64_t CAFClosureStateObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFClosureStateObservable.latchState.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFClosureStateObservable.$latchState.getter()
{
  return CAFClosureStateObservable.$latchState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__latchState, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable.vehicleLayoutKey.getter()
{
  return CAFClosureStateObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFClosureStateObservable.$vehicleLayoutKey.getter()
{
  return CAFClosureStateObservable.$latchState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable.name.getter()
{
  return CAFClosureStateObservable.vehicleLayoutKey.getter();
}

uint64_t CAFClosureStateObservable.$name.getter()
{
  return CAFClosureStateObservable.$latchState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFClosureStateObservable.$latchState.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFClosureStateObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForLatchState))
  {
    char v4 = CAFClosureStateObservable.latchState.getter();
    if (v4) {
      uint64_t v2 = 1702195828;
    }
    else {
      uint64_t v2 = 0x65736C6166;
    }
    if (v4) {
      uint64_t v3 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v3 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey)) {
    CAFClosureStateObservable.vehicleLayoutKey.getter();
  }
  _StringGuts.grow(_:)(72);
  v5._countAndFlagsBits = 0xD00000000000001CLL;
  v5._object = (void *)0x8000000249487AD0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._countAndFlagsBits = 0x686374616C207B20;
  v6._object = (void *)0xEF203A6574617453;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._object = (void *)0x8000000249485D90;
  v8._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFClosureStateObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFClosureStateObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFClosureStateObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFClosureStateObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFClosureStateObservable.init(_:)(a1);
}

id CAFClosureStateObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__latchState;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClosureStateObservable, Bool>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__vehicleLayoutKey;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFClosureStateObservable, String>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable__name;
  uint64_t v13 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for CAFClosureStateObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFClosureStateObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFClosureStateObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFClosureStateObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFClosureStateObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFClosureStateObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFClosureStateObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFClosureStateObservable@<X0>(void *a1@<X8>)
{
  id result = CAFClosureStateObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFClosureStateObservable(void **a1)
{
  return CAFClosureStateObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFClosureStateObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFClosureStateObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateLatchState:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFClosureStateObservable.closureStateService(_:didUpdateName:)()
{
  return CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFClosureStateObservable.closureStateService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFClosureStateObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFClosureStateObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFClosureStateObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_latchState()
{
  return sel_latchState;
}

id sub_2493E9D5C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_latchState);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493E9D90(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493E9DB0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFClosureStateObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFClosureState(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFClosureStateObservable and conformance CAFClosureStateObservable(&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFClosureStateObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFClosureStateObservable()
{
  return lazy protocol witness table accessor for type CAFClosureStateObservable and conformance CAFClosureStateObservable(&lazy protocol witness table cache variable for type CAFClosureState and conformance CAFClosureState, 255, (void (*)(uint64_t))type metadata accessor for CAFClosureState);
}

unint64_t type metadata accessor for CAFClosureState()
{
  unint64_t result = lazy cache variable for type metadata for CAFClosureState;
  if (!lazy cache variable for type metadata for CAFClosureState)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFClosureState);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFClosureStateObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFClosureStateObservable and conformance CAFClosureStateObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFClosureStateObservable and conformance CAFClosureStateObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFClosureStateObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFClosureStateObservable and conformance CAFClosureStateObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFClosureStateObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFClosureStateObservable);
}

uint64_t dispatch thunk of CAFClosureStateObservable.latchState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$latchState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFClosureStateObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFClosureStateObservable.resetCachedDescription()()
{
  return CAFClosureStateObservable.cachedDescription.setter(0, 0);
}

id CAFTestControlSyncObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed);
}

uint64_t CAFTestControlSyncObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlSyncObservable._description.getter()
{
  _StringGuts.grow(_:)(39);
  v0._object = (void *)0x8000000249487B50;
  v0._countAndFlagsBits = 0xD00000000000001FLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlSyncObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTestControlSyncObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlSyncObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlSyncObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTestControlSyncObservable.init(_:)(a1);
}

id CAFTestControlSyncObservable.init(_:)(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescription];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)&v1[v4] = v5;
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlSyncObservable();
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTestControlSyncObservable()
{
  return self;
}

uint64_t CAFTestControlSyncObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlSyncObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFTestControlSyncObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlSyncObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlSyncObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTestControlSyncObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlSyncObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTestControlSyncObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlSyncObservable(void **a1)
{
  return CAFTestControlSyncObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlSyncObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTestControlSyncObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlSyncObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTestControlSyncObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTestControlSyncObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlSync(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable(&lazy protocol witness table cache variable for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlSyncObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlSyncObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable(&lazy protocol witness table cache variable for type CAFTestControlSync and conformance CAFTestControlSync, 255, (void (*)(uint64_t))type metadata accessor for CAFTestControlSync);
}

unint64_t type metadata accessor for CAFTestControlSync()
{
  unint64_t result = lazy cache variable for type metadata for CAFTestControlSync;
  if (!lazy cache variable for type metadata for CAFTestControlSync)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlSync);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlSyncObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlSyncObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTestControlSyncObservable and conformance CAFTestControlSyncObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTestControlSyncObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTestControlSyncObservable);
}

uint64_t dispatch thunk of CAFTestControlSyncObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTestControlSyncObservable.resetCachedDescription()()
{
  return CAFTestControlSyncObservable.cachedDescription.setter(0, 0);
}

id CAFPairedDevicesInformationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed);
}

uint64_t CAFPairedDevicesInformationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFPairedDevicesInformationObservable.pairedDeviceList.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFPairedDevicesInformationObservable.$pairedDeviceList.getter()
{
  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFPairedDevicesInformationObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed), sel_registeredForPairedDeviceList))
  {
    uint64_t v1 = (void *)CAFPairedDevicesInformationObservable.pairedDeviceList.getter();
    id v2 = objc_msgSend(v1, sel_description);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
  }
  else
  {
    uint64_t v5 = (void *)0xEE003E6465726574;
    uint64_t v3 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(68);
  v6._countAndFlagsBits = 0xD000000000000028;
  v6._object = (void *)0x8000000249487C20;
  String.append(_:)(v6);
  _print_unlocked<A, B>(_:_:)();
  v7._object = (void *)0x8000000249487C50;
  v7._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v7);
  v8._countAndFlagsBits = v3;
  v8._object = v5;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 4095264;
  v9._object = (void *)0xE300000000000000;
  String.append(_:)(v9);
  return 0;
}

uint64_t CAFPairedDevicesInformationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock;
  id v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFPairedDevicesInformationObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFPairedDevicesInformationObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFPairedDevicesInformationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFPairedDevicesInformationObservable.init(_:)(a1);
}

id CAFPairedDevicesInformationObservable.init(_:)(void *a1)
{
  id v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable__pairedDeviceList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPairedDevicesInformationObservable, CAFPairedDeviceList>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFPairedDevicesInformationObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFPairedDevicesInformationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFPairedDevicesInformationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine37CAFPairedDevicesInformationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPairedDevicesInformationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPairedDevicesInformationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFPairedDevicesInformationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPairedDevicesInformationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFPairedDevicesInformationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPairedDevicesInformationObservable(void **a1)
{
  return CAFPairedDevicesInformationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPairedDevicesInformationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFPairedDevicesInformationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPairedDevicesInformationObservable.pairedDevicesInformationService(_:didUpdatePairedDeviceList:)(uint64_t a1, void *a2)
{
  swift_retain();
  id v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFPairedDevicesInformationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFPairedDevicesInformationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFPairedDevicesInformationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_pairedDeviceList()
{
  return sel_pairedDeviceList;
}

id key path getter for CAFPairedDevicesInformation.pairedDeviceList : CAFPairedDevicesInformation@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_pairedDeviceList);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CAFPairedDevicesInformationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPairedDevicesInformation(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPairedDevicesInformationObservable()
{
  return lazy protocol witness table accessor for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesInformation and conformance CAFPairedDevicesInformation, 255, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformation);
}

unint64_t type metadata accessor for CAFPairedDevicesInformation()
{
  unint64_t result = lazy cache variable for type metadata for CAFPairedDevicesInformation;
  if (!lazy cache variable for type metadata for CAFPairedDevicesInformation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPairedDevicesInformation);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPairedDevicesInformationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesInformationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPairedDevicesInformationObservable and conformance CAFPairedDevicesInformationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFPairedDevicesInformationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFPairedDevicesInformationObservable);
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.pairedDeviceList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.$pairedDeviceList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFPairedDevicesInformationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFPairedDevicesInformationObservable.resetCachedDescription()()
{
  return CAFPairedDevicesInformationObservable.cachedDescription.setter(0, 0);
}

id CAFRecirculationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
}

uint64_t CAFRecirculationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFRecirculationObservable.on : CAFRecirculationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRecirculationObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFRecirculationObservable.on : CAFRecirculationObservable(unsigned __int8 *a1)
{
  return CAFRecirculationObservable.on.setter(*a1);
}

uint64_t CAFRecirculationObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFRecirculationObservable.on.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFRecirculationObservable.on.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFRecirculationObservable.on.modify;
}

void CAFRecirculationObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFRecirculationObservable.$on.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFRecirculationObservable.autoMode.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRecirculationObservable.$autoMode.getter()
{
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFRecirculationObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  id v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForOn))
  {
    char v6 = CAFRecirculationObservable.on.getter();
    if (v6) {
      uint64_t v4 = 1702195828;
    }
    else {
      uint64_t v4 = 0x65736C6166;
    }
    if (v6) {
      id v5 = (void *)0xE400000000000000;
    }
    else {
      id v5 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v3, sel_registeredForAutoMode))
  {
    CAFRecirculationObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v1 = v7;
  }
  _StringGuts.grow(_:)(57);
  v8._object = (void *)0x8000000249487CD0;
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A6E6F207B20;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v11._object = (void *)0xEC000000203A6564;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFRecirculationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFRecirculationObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFRecirculationObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFRecirculationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFRecirculationObservable.init(_:)(a1);
}

id CAFRecirculationObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRecirculationObservable, Bool>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable__autoMode;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRecirculationObservable, Bool?>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFRecirculationObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFRecirculationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFRecirculationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFRecirculationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRecirculationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRecirculationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFRecirculationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFRecirculationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFRecirculationObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493EC120@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRecirculationObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2493EC150(unsigned __int8 *a1)
{
  return CAFRecirculationObservable.on.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFRecirculationObservable(void **a1)
{
  return CAFRecirculationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRecirculationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFRecirculationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRecirculationObservable.recirculationService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFRecirculationObservable.recirculationService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRecirculationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFRecirculationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFRecirculationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

id sub_2493EC4D4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493EC508(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

uint64_t sub_2493EC51C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSteeringWheelHeatingCooling.autoModeBridged.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CAFRecirculationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRecirculation(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFRecirculationObservable and conformance CAFRecirculationObservable(&lazy protocol witness table cache variable for type CAFRecirculationObservable and conformance CAFRecirculationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRecirculationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRecirculationObservable()
{
  return lazy protocol witness table accessor for type CAFRecirculationObservable and conformance CAFRecirculationObservable(&lazy protocol witness table cache variable for type CAFRecirculation and conformance CAFRecirculation, 255, (void (*)(uint64_t))type metadata accessor for CAFRecirculation);
}

unint64_t type metadata accessor for CAFRecirculation()
{
  unint64_t result = lazy cache variable for type metadata for CAFRecirculation;
  if (!lazy cache variable for type metadata for CAFRecirculation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRecirculation);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFRecirculationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFRecirculationObservable and conformance CAFRecirculationObservable(&lazy protocol witness table cache variable for type CAFRecirculationObservable and conformance CAFRecirculationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRecirculationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRecirculationObservable and conformance CAFRecirculationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFRecirculationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFRecirculationObservable);
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRecirculationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFRecirculationObservable.resetCachedDescription()()
{
  return CAFRecirculationObservable.cachedDescription.setter(0, 0);
}

id CAFPositionManagerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed);
}

uint64_t key path getter for CAFPositionManagerObservable.state : CAFPositionManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFPositionManagerObservable.state.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFPositionManagerObservable.state : CAFPositionManagerObservable()
{
  return CAFPositionManagerObservable.state.setter();
}

uint64_t CAFPositionManagerObservable.state.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_2493EC950@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFPositionManagerObservable.state.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493EC97C()
{
  return CAFPositionManagerObservable.state.setter();
}

uint64_t CAFPositionManagerObservable.state.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

uint64_t key path setter for CAFPositionManagerObservable.$state : CAFPositionManagerObservable(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>.Publisher);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CAFPositionManagerObservable.$state.setter((uint64_t)v4);
}

uint64_t CAFPositionManagerObservable.$state.getter()
{
  return swift_endAccess();
}

uint64_t CAFPositionManagerObservable.$state.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>.Publisher);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v6 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  swift_beginAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCharacteristicState>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

id CAFPositionManagerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFPositionManagerObservable.init(_:)(a1);
}

id CAFPositionManagerObservable.init(_:)(void *a1)
{
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed] = a1;
  id v3 = v1;
  id v4 = a1;
  id v5 = objc_msgSend(v4, sel_state);
  swift_beginAccess();
  id v9 = v5;
  type metadata accessor for CAFCharacteristicState(0);
  Published.init(initialValue:)();
  swift_endAccess();

  v8.receiver = v3;
  v8.super_class = (Class)type metadata accessor for CAFPositionManagerObservable();
  id v6 = objc_msgSendSuper2(&v8, sel_init);
  objc_msgSend(v4, sel_registerObserver_, v6);

  return v6;
}

uint64_t type metadata accessor for CAFPositionManagerObservable()
{
  uint64_t result = type metadata singleton initialization cache for CAFPositionManagerObservable;
  if (!type metadata singleton initialization cache for CAFPositionManagerObservable) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id CAFPositionManagerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFPositionManagerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPositionManagerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPositionManagerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFPositionManagerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPositionManagerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFPositionManagerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPositionManagerObservable(void **a1)
{
  return CAFPositionManagerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPositionManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFPositionManagerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPositionManagerObservable.positionManager(_:didUpdate:)(void *a1)
{
  objc_msgSend(a1, sel_state);

  return CAFPositionManagerObservable.state.setter();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPositionManager()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable, (void (*)(uint64_t))type metadata accessor for CAFPositionManagerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPositionManagerObservable()
{
  return lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(&lazy protocol witness table cache variable for type CAFPositionManager and conformance CAFPositionManager, (void (*)(uint64_t))type metadata accessor for CAFPositionManager);
}

unint64_t type metadata accessor for CAFPositionManager()
{
  unint64_t result = lazy cache variable for type metadata for CAFPositionManager;
  if (!lazy cache variable for type metadata for CAFPositionManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPositionManager);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPositionManagerObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable, (void (*)(uint64_t))type metadata accessor for CAFPositionManagerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPositionManagerObservable and conformance CAFPositionManagerObservable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_2493ED158()
{
  return CAFPositionManagerObservable.$state.getter();
}

uint64_t ObjC metadata update function for CAFPositionManagerObservable()
{
  return type metadata accessor for CAFPositionManagerObservable();
}

void type metadata completion function for CAFPositionManagerObservable()
{
  type metadata accessor for Published<CAFCharacteristicState>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CAFPositionManagerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFPositionManagerObservable);
}

uint64_t dispatch thunk of CAFPositionManagerObservable.state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CAFPositionManagerObservable.$state.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CAFPositionManagerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for Published<CAFCharacteristicState>()
{
  if (!lazy cache variable for type metadata for Published<CAFCharacteristicState>)
  {
    type metadata accessor for CAFCharacteristicState(255);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CAFCharacteristicState>);
    }
  }
}

id CAFSingleSelectImageSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
}

uint64_t CAFSingleSelectImageSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectImageSettingObservable.userVisibleLabel.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.sectionIdentifier.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSingleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFSingleSelectImageSettingObservable.$sortOrder.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectImageSettingObservable.$category.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.identifier.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$identifier.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.disabled.getter()
{
  return CAFSingleSelectImageSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectImageSettingObservable.$disabled.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.limitableUIElement.getter()
{
  return CAFSingleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$limitableUIElement.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.hidden.getter()
{
  return CAFSingleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$hidden.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  return CAFSingleSelectImageSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.symbolName.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$symbolName.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectImageSettingObservable.$prominenceInfo.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFSingleSelectImageSettingObservable.currentUserVisibleValue : CAFSingleSelectImageSettingObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSingleSelectImageSettingObservable.currentUserVisibleValue : CAFSingleSelectImageSettingObservable(unsigned __int8 *a1)
{
  return CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(*a1);
}

uint64_t CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify;
}

void CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFSingleSelectImageSettingObservable.$currentUserVisibleValue.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  return CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
}

{
  void *v0;
  id v1;
  uint64_t v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.images.getter()
{
  return CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$images.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.name.getter()
{
  return CAFSingleSelectImageSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectImageSettingObservable.$name.getter()
{
  return CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSingleSelectImageSettingObservable._description.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForCurrentUserVisibleValue))
  {
    CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
    uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v3 = v4;
  }
  uint64_t v5 = 0x73696765726E753CLL;
  uint64_t v6 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForListUserVisibleValue))
  {
    CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter();
    uint64_t v5 = MEMORY[0x24C59DB40]();
    uint64_t v6 = v7;
    swift_bridgeObjectRelease();
  }
  if (objc_msgSend(v1, sel_registeredForImageList))
  {
    CAFSingleSelectImageSettingObservable.images.getter();
    MEMORY[0x24C59DB40]();
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(113);
  v8._countAndFlagsBits = 0xD000000000000028;
  v8._object = (void *)0x8000000249487E10;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0xD00000000000001CLL;
  v9._object = (void *)0x8000000249487E40;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v2;
  v10._object = v3;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x8000000249486290;
  v11._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v5;
  v12._object = v6;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x736567616D69202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4095264;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t CAFSingleSelectImageSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSingleSelectImageSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFSingleSelectImageSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFSingleSelectImageSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSingleSelectImageSettingObservable.init(_:)(a1);
}

id CAFSingleSelectImageSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__currentUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSingleSelectImageSettingObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, [String]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v27] = v28;
  uint64_t v29 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images;
  uint64_t v30 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectImageSettingObservable, [Data]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v29] = v31;
  uint64_t v32 = OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v32] = specialized SafePublished.init(observedValuekeypath:)(v30);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed] = a1;
  id v33 = a1;

  v36.receiver = v9;
  v36.super_class = (Class)type metadata accessor for CAFSingleSelectImageSettingObservable();
  id v34 = objc_msgSendSuper2(&v36, sel_init);
  objc_msgSend(v33, sel_registerObserver_, v34);

  return v34;
}

uint64_t CAFSingleSelectImageSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSingleSelectImageSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSingleSelectImageSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSingleSelectImageSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSingleSelectImageSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSingleSelectImageSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSingleSelectImageSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSingleSelectImageSettingObservable(void **a1)
{
  return CAFSingleSelectImageSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSingleSelectImageSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSingleSelectImageSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateCurrentUserVisibleValue:)()
{
  return swift_release();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2)
{
  return CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__listUserVisibleValue, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateImages:)(uint64_t a1, uint64_t a2)
{
  return CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine37CAFSingleSelectImageSettingObservable__images, (void (*)(uint64_t))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  OUTLINED_FUNCTION_23_0();
  uint64_t v5 = swift_bridgeObjectRetain();
  a4(v5);

  return swift_release();
}

uint64_t @objc CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateListUserVisibleValue:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  a6();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectImageSettingObservable.singleSelectImageSettingService(_:didUpdateName:)()
{
  return CAFSingleSelectImageSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFSingleSelectImageSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSingleSelectImageSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSingleSelectImageSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493EF1E8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493EF210(unsigned __int8 *a1)
{
  return CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter(*a1);
}

void sub_2493EF238(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493EF258(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2493EF27C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493EF2B0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2493EF2D0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493EF2F8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493EF320()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2493EF348()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2493EF370(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493EF390(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_currentUserVisibleValue()
{
  return sel_currentUserVisibleValue;
}

id sub_2493EF3C0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_currentUserVisibleValue);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493EF3F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCurrentUserVisibleValue_, *a1);
}

void sub_2493EF408(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493EF430(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2493EF458(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFSingleSelectImageSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSingleSelectImageSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSingleSelectImageSettingObservable()
{
  return lazy protocol witness table accessor for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable(&lazy protocol witness table cache variable for type CAFSingleSelectImageSetting and conformance CAFSingleSelectImageSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSetting);
}

unint64_t type metadata accessor for CAFSingleSelectImageSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFSingleSelectImageSetting;
  if (!lazy cache variable for type metadata for CAFSingleSelectImageSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSingleSelectImageSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSingleSelectImageSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectImageSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSingleSelectImageSettingObservable and conformance CAFSingleSelectImageSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSingleSelectImageSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSingleSelectImageSettingObservable);
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.currentUserVisibleValue.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$currentUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.listUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$listUserVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.images.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$images.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFSingleSelectImageSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 560))();
}

uint64_t partial apply for closure #1 in CAFSingleSelectImageSettingObservable.resetCachedDescription()()
{
  return CAFSingleSelectImageSettingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_10_4()
{
  return swift_getAtKeyPath();
}

id CAFCriticalInputStreamObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
}

uint64_t CAFCriticalInputStreamObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFCriticalInputStreamObservable.inputStreamUID.getter()
{
  return CAFCriticalInputStreamObservable.inputStreamUID.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFCriticalInputStreamObservable.$inputStreamUID.getter()
{
  return CAFCriticalInputStreamObservable.$inputStreamUID.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__inputStreamUID, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable.on.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFCriticalInputStreamObservable.$on.getter()
{
  return CAFCriticalInputStreamObservable.$inputStreamUID.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable.name.getter()
{
  return CAFCriticalInputStreamObservable.inputStreamUID.getter();
}

uint64_t CAFCriticalInputStreamObservable.$name.getter()
{
  return CAFCriticalInputStreamObservable.$inputStreamUID.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCriticalInputStreamObservable.$inputStreamUID.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFCriticalInputStreamObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForInputStreamUID))
  {
    uint64_t v2 = CAFCriticalInputStreamObservable.inputStreamUID.getter();
    uint64_t v3 = v4;
  }
  if (objc_msgSend(v1, sel_registeredForOn)) {
    CAFCriticalInputStreamObservable.on.getter();
  }
  _StringGuts.grow(_:)(69);
  v5._countAndFlagsBits = 0xD000000000000023;
  v5._object = (void *)0x8000000249487EE0;
  String.append(_:)(v5);
  _print_unlocked<A, B>(_:_:)();
  v6._object = (void *)0x8000000249487F10;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v2;
  v7._object = v3;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x203A6E6F202CLL;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 4095264;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t CAFCriticalInputStreamObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFCriticalInputStreamObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFCriticalInputStreamObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFCriticalInputStreamObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCriticalInputStreamObservable.init(_:)(a1);
}

id CAFCriticalInputStreamObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__inputStreamUID;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCriticalInputStreamObservable, String>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__on;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCriticalInputStreamObservable, Bool>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable__name;
  uint64_t v13 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v9;
  v17.super_class = (Class)type metadata accessor for CAFCriticalInputStreamObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFCriticalInputStreamObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFCriticalInputStreamObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFCriticalInputStreamObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCriticalInputStreamObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCriticalInputStreamObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCriticalInputStreamObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCriticalInputStreamObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCriticalInputStreamObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCriticalInputStreamObservable(void **a1)
{
  return CAFCriticalInputStreamObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCriticalInputStreamObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCriticalInputStreamObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)()
{
  return CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateOn:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateName:)()
{
  return CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)();
}

uint64_t @objc CAFCriticalInputStreamObservable.criticalInputStreamService(_:didUpdateInputStreamUID:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFCriticalInputStreamObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFCriticalInputStreamObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFCriticalInputStreamObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_inputStreamUID()
{
  return sel_inputStreamUID;
}

void sub_2493F0B64(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2493F0B84@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493F0BB8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFCriticalInputStreamObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCriticalInputStream(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCriticalInputStreamObservable()
{
  return lazy protocol witness table accessor for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable(&lazy protocol witness table cache variable for type CAFCriticalInputStream and conformance CAFCriticalInputStream, 255, (void (*)(uint64_t))type metadata accessor for CAFCriticalInputStream);
}

unint64_t type metadata accessor for CAFCriticalInputStream()
{
  unint64_t result = lazy cache variable for type metadata for CAFCriticalInputStream;
  if (!lazy cache variable for type metadata for CAFCriticalInputStream)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCriticalInputStream);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCriticalInputStreamObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCriticalInputStreamObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCriticalInputStreamObservable and conformance CAFCriticalInputStreamObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFCriticalInputStreamObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCriticalInputStreamObservable);
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.inputStreamUID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$inputStreamUID.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFCriticalInputStreamObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFCriticalInputStreamObservable.resetCachedDescription()()
{
  return CAFCriticalInputStreamObservable.cachedDescription.setter(0, 0);
}

id CAFExteriorConditionsObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
}

uint64_t CAFExteriorConditionsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFExteriorConditionsObservable.temperature.getter()
{
  return CAFExteriorConditionsObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFExteriorConditionsObservable.$temperature.getter()
{
  return CAFExteriorConditionsObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFExteriorConditionsObservable.aqi.getter()
{
  return CAFExteriorConditionsObservable.temperature.getter();
}

uint64_t CAFExteriorConditionsObservable.$aqi.getter()
{
  return CAFExteriorConditionsObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFExteriorConditionsObservable.$temperature.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFExteriorConditionsObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitAirQuality>?);
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed);
  uint64_t v7 = 0x73696765726E753CLL;
  id v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForTemperature))
  {
    CAFExteriorConditionsObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    id v8 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v10 = (void *)0xEE003E6465726574;
  uint64_t v11 = 0x73696765726E753CLL;
  if (objc_msgSend(v6, sel_registeredForAQI))
  {
    CAFExteriorConditionsObservable.aqi.getter();
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v10 = v12;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(66);
  v13._countAndFlagsBits = 0xD000000000000022;
  v13._object = (void *)0x8000000249487FA0;
  String.append(_:)(v13);
  v20[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v14._object = (void *)0x80000002494874F0;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v7;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x203A697161202CLL;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v11;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 4095264;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return v21;
}

uint64_t CAFExteriorConditionsObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFExteriorConditionsObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFExteriorConditionsObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFExteriorConditionsObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFExteriorConditionsObservable.init(_:)(a1);
}

id CAFExteriorConditionsObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFExteriorConditionsObservable, Measurement<NSUnitTemperature>>);
  swift_allocObject();
  id v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFExteriorConditionsObservable, Measurement<CAFUnitAirQuality>?>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFExteriorConditionsObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFExteriorConditionsObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFExteriorConditionsObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFExteriorConditionsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFExteriorConditionsObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFExteriorConditionsObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFExteriorConditionsObservable@<X0>(void *a1@<X8>)
{
  id result = CAFExteriorConditionsObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFExteriorConditionsObservable(void **a1)
{
  return CAFExteriorConditionsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFExteriorConditionsObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFExteriorConditionsObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateAqi:)(uint64_t a1, uint64_t a2)
{
  return CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFExteriorConditionsObservable__aqi, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFExteriorConditionsObservable.exteriorConditionsService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t CAFExteriorConditionsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFExteriorConditionsObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFExteriorConditionsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void key path getter for CAFExteriorConditions.temperature : CAFExteriorConditions(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_temperature);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for CAFExteriorConditionsObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFExteriorConditions()
{
  return lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable(&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable);
}

unint64_t lazy protocol witness table accessor for type CAFExteriorConditions and conformance CAFExteriorConditions()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions;
  if (!lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFExteriorConditions);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFExteriorConditions and conformance CAFExteriorConditions);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFExteriorConditionsObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFExteriorConditionsObservable and conformance CAFExteriorConditionsObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFExteriorConditionsObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFExteriorConditionsObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFExteriorConditionsObservable);
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.$temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.aqi.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.$aqi.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFExteriorConditionsObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFExteriorConditionsObservable.resetCachedDescription()()
{
  return CAFExteriorConditionsObservable.cachedDescription.setter(0, 0);
}

id CAFProtocolPerfTestObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
}

uint64_t CAFProtocolPerfTestObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFProtocolPerfTestObservable.testInt32.getter()
{
  return CAFProtocolPerfTestObservable.testInt32.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned int v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable.$testInt32.getter()
{
  return CAFProtocolPerfTestObservable.$testInt32.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFProtocolPerfTestObservable.testInt16 : CAFProtocolPerfTestObservable@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = CAFProtocolPerfTestObservable.testInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFProtocolPerfTestObservable.testInt16 : CAFProtocolPerfTestObservable(unsigned __int16 *a1)
{
  return CAFProtocolPerfTestObservable.testInt16.setter(*a1);
}

uint64_t CAFProtocolPerfTestObservable.testInt16.getter()
{
  swift_beginAccess();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFProtocolPerfTestObservable.testInt16.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFProtocolPerfTestObservable.testInt16.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  swift_beginAccess();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOWORD(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((_WORD *)v3 + 44) = (_WORD)v4;
  return CAFProtocolPerfTestObservable.testInt16.modify;
}

void CAFProtocolPerfTestObservable.testInt16.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int16 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFProtocolPerfTestObservable.$testInt16.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.testUInt32.getter()
{
  return CAFProtocolPerfTestObservable.testInt32.getter();
}

uint64_t CAFProtocolPerfTestObservable.$testUInt32.getter()
{
  return CAFProtocolPerfTestObservable.$testInt32.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.testUInt16.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable.$testUInt16.getter()
{
  return CAFProtocolPerfTestObservable.$testInt32.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt16, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.testString.getter()
{
  return CAFProtocolPerfTestObservable.testString.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable.$testString.getter()
{
  return CAFProtocolPerfTestObservable.$testInt32.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFProtocolPerfTestObservable.testString2 : CAFProtocolPerfTestObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFProtocolPerfTestObservable.testString2.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFProtocolPerfTestObservable.testString2 : CAFProtocolPerfTestObservable()
{
  return CAFProtocolPerfTestObservable.testString2.setter();
}

uint64_t CAFProtocolPerfTestObservable.testString2.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFProtocolPerfTestObservable.testString2.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_93();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFProtocolPerfTestObservable.testString2.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  uint64_t KeyPath = swift_getKeyPath();
  v3[3] = KeyPath;
  uint64_t v5 = swift_getKeyPath();
  v3[4] = v5;
  void *v3 = specialized static SafePublished.subscript.getter(v1, KeyPath, v5);
  v3[1] = v6;
  return CAFProtocolPerfTestObservable.testString2.modify;
}

void CAFProtocolPerfTestObservable.testString2.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v4 = *(id *)(*(void *)a1 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_8_5();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_8_5();
  }

  free(v3);
}

uint64_t CAFProtocolPerfTestObservable.$testString2.getter()
{
  return CAFProtocolPerfTestObservable.$testInt16.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString2, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.$testInt16.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable.name.getter()
{
  return CAFProtocolPerfTestObservable.testString.getter();
}

uint64_t CAFProtocolPerfTestObservable.$name.getter()
{
  return CAFProtocolPerfTestObservable.$testInt32.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFProtocolPerfTestObservable.$testInt32.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFProtocolPerfTestObservable._description.getter()
{
  uint64_t v1 = v0;
  v45._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v45._countAndFlagsBits = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed);
  objc_msgSend(v3, sel_registeredForTestInt32);
  OUTLINED_FUNCTION_0_4();
  uint64_t v5 = (void *)0xEE003E6465726574;
  if (v6)
  {
    CAFProtocolPerfTestObservable.testInt32.getter();
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v5 = v7;
  }
  uint64_t v44 = v4;
  objc_msgSend(v3, sel_registeredForTestInt16);
  OUTLINED_FUNCTION_0_4();
  uint64_t v9 = (void *)0xEE003E6465726574;
  if (v10)
  {
    CAFProtocolPerfTestObservable.testInt16.getter();
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v9 = v11;
  }
  uint64_t v43 = v8;
  objc_msgSend(v3, sel_registeredForTestUInt32);
  OUTLINED_FUNCTION_0_4();
  id v13 = (void *)0xEE003E6465726574;
  if (v14)
  {
    CAFProtocolPerfTestObservable.testUInt32.getter();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    id v13 = v15;
  }
  uint64_t v16 = 0x73696765726E753CLL;
  Swift::String v17 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForTestUInt16, v12))
  {
    CAFProtocolPerfTestObservable.testUInt16.getter();
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    Swift::String v17 = v18;
  }
  uint64_t v19 = 0x73696765726E753CLL;
  uint64_t v20 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForTestString))
  {
    uint64_t v19 = CAFProtocolPerfTestObservable.testString.getter();
    uint64_t v20 = v21;
  }
  if (objc_msgSend(v3, sel_registeredForTestString2))
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v23 = swift_getKeyPath();
    v45._countAndFlagsBits = specialized static SafePublished.subscript.getter(v1, KeyPath, v23);
    v45._object = v24;
    swift_release();
    swift_release();
  }
  _StringGuts.grow(_:)(133);
  v25._object = (void *)0x8000000249488080;
  v25._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_9_4(0x4974736574207B20, 0x3233746Eu);
  v26._countAndFlagsBits = v44;
  v26._object = v5;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0x6E4974736574202CLL;
  v27._object = (void *)0xED0000203A363174;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v43;
  v28._object = v9;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_9_4(v29, v30 | 0x32330000);
  v31._countAndFlagsBits = v42;
  v31._object = v13;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  uint64_t v32 = OUTLINED_FUNCTION_5_7();
  OUTLINED_FUNCTION_9_4(v32, v33 | 0x36310000);
  v34._countAndFlagsBits = v16;
  v34._object = v17;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = OUTLINED_FUNCTION_2_6();
  OUTLINED_FUNCTION_9_4(v35, v36);
  v37._countAndFlagsBits = v19;
  v37._object = v20;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = OUTLINED_FUNCTION_2_6();
  v38._object = (void *)(v39 | 0xEF203A3200000000);
  String.append(_:)(v38);
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 4095264;
  v40._object = (void *)0xE300000000000000;
  String.append(_:)(v40);
  return 0;
}

uint64_t CAFProtocolPerfTestObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFProtocolPerfTestObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFProtocolPerfTestObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFProtocolPerfTestObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFProtocolPerfTestObservable.init(_:)(a1);
}

id CAFProtocolPerfTestObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, Int32>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFProtocolPerfTestObservable, Int16>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, UInt32>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, UInt16>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFProtocolPerfTestObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testString2;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFProtocolPerfTestObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v19 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v18] = specialized SafePublished.init(observedValuekeypath:)(v19);
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__name;
  uint64_t v21 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v20] = specialized SafePublished.init(observedValuekeypath:)(v21);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed] = a1;
  id v22 = a1;

  v25.receiver = v8;
  v25.super_class = (Class)type metadata accessor for CAFProtocolPerfTestObservable();
  id v23 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(v22, sel_registerObserver_, v23);

  return v23;
}

uint64_t CAFProtocolPerfTestObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFProtocolPerfTestObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFProtocolPerfTestObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFProtocolPerfTestObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFProtocolPerfTestObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFProtocolPerfTestObservable@<X0>(void *a1@<X8>)
{
  id result = CAFProtocolPerfTestObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFProtocolPerfTestObservable(void **a1)
{
  return CAFProtocolPerfTestObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFProtocolPerfTestObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFProtocolPerfTestObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testInt32, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt16:)()
{
  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine29CAFProtocolPerfTestObservable__testUInt32, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2, uint64_t a3, void (*a4)(void))
{
  OUTLINED_FUNCTION_23_0();
  a4(a2);

  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestUInt16:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)()
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString2:)()
{
  return swift_release();
}

uint64_t @objc CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateName:)()
{
  return CAFProtocolPerfTestObservable.protocolPerfTestService(_:didUpdateTestString:)();
}

uint64_t CAFProtocolPerfTestObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFProtocolPerfTestObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFProtocolPerfTestObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493F38C8@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = CAFProtocolPerfTestObservable.testInt16.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493F38F4(unsigned __int16 *a1)
{
  return CAFProtocolPerfTestObservable.testInt16.setter(*a1);
}

uint64_t sub_2493F391C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFProtocolPerfTestObservable.testString2.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

char *keypath_get_selector_testInt32()
{
  return sel_testInt32;
}

id sub_2493F3958(uint64_t a1)
{
  id result = objc_msgSend((id)OUTLINED_FUNCTION_6_5(a1), sel_testInt32);
  *id v1 = result;
  return result;
}

char *keypath_get_selector_testInt16()
{
  return sel_testInt16;
}

id sub_2493F3994(uint64_t a1)
{
  id result = objc_msgSend((id)OUTLINED_FUNCTION_6_5(a1), sel_testInt16);
  *id v1 = (_WORD)result;
  return result;
}

id sub_2493F39C4(__int16 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestInt16_, *a1);
}

char *keypath_get_selector_testUInt32()
{
  return sel_testUInt32;
}

id sub_2493F39E4(uint64_t a1)
{
  id result = objc_msgSend((id)OUTLINED_FUNCTION_6_5(a1), sel_testUInt32);
  *id v1 = result;
  return result;
}

char *keypath_get_selector_testUInt16()
{
  return sel_testUInt16;
}

id sub_2493F3A20(uint64_t a1)
{
  id result = objc_msgSend((id)OUTLINED_FUNCTION_6_5(a1), sel_testUInt16);
  *id v1 = (_WORD)result;
  return result;
}

char *keypath_get_selector_testString()
{
  return sel_testString;
}

void sub_2493F3A5C(uint64_t a1)
{
}

char *keypath_get_selector_testString2()
{
  return sel_testString2;
}

void sub_2493F3A88(uint64_t a1)
{
}

void key path setter for CAFProtocolPerfTest.testString2 : CAFProtocolPerfTest(void *a1, void **a2)
{
  objc_super v2 = *a2;
  id v3 = (id)MEMORY[0x24C59DAA0](*a1, a1[1]);
  objc_msgSend(v2, sel_setTestString2_, v3);
}

void key path getter for CAFProtocolPerfTest.testString : CAFProtocolPerfTest(uint64_t a1)
{
  objc_super v2 = (void *)OUTLINED_FUNCTION_6_5(a1);
  id v4 = [v2 *v3];
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;

  *id v1 = v5;
  v1[1] = v7;
}

void sub_2493F3B60(uint64_t a1)
{
}

uint64_t type metadata accessor for CAFProtocolPerfTestObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFProtocolPerfTest(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFProtocolPerfTestObservable()
{
  return lazy protocol witness table accessor for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable(&lazy protocol witness table cache variable for type CAFProtocolPerfTest and conformance CAFProtocolPerfTest, 255, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTest);
}

unint64_t type metadata accessor for CAFProtocolPerfTest()
{
  unint64_t result = lazy cache variable for type metadata for CAFProtocolPerfTest;
  if (!lazy cache variable for type metadata for CAFProtocolPerfTest)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFProtocolPerfTest);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFProtocolPerfTestObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFProtocolPerfTestObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFProtocolPerfTestObservable and conformance CAFProtocolPerfTestObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFProtocolPerfTestObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFProtocolPerfTestObservable);
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testInt16.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testUInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testUInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testUInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testUInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.testString2.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$testString2.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFProtocolPerfTestObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 360))();
}

uint64_t partial apply for closure #1 in CAFProtocolPerfTestObservable.resetCachedDescription()()
{
  return CAFProtocolPerfTestObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_2_6()
{
  return 0x745374736574202CLL;
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return 0x495574736574202CLL;
}

uint64_t OUTLINED_FUNCTION_6_5(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t OUTLINED_FUNCTION_8_5()
{
  return specialized static SafePublished.subscript.setter(v0);
}

void OUTLINED_FUNCTION_9_4(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = a2 | 0xEE00203A00000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t static CAFMediaSourceSemanticType.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFMediaSourceSemanticType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFMediaSourceSemanticType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFMediaSourceSemanticType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFMediaSourceSemanticType.description.getter()
{
  id v0 = (id)NSStringFromMediaSourceSemanticType();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFMediaSourceSemanticType(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType);
  a1[2] = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType);
  uint64_t result = lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(&lazy protocol witness table cache variable for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMediaSourceSemanticType and conformance CAFMediaSourceSemanticType(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMediaSourceSemanticType(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFMediaSourceSemanticType()
{
  return CAFMediaSourceSemanticType.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFMediaSourceSemanticType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFMediaSourceSemanticType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFMediaSourceSemanticType] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFMediaSourceSemanticType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFMediaSourceSemanticType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFMediaSourceSemanticType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFCameraGeneralObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
}

uint64_t CAFCameraGeneralObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCameraGeneralObservable.on : CAFCameraGeneralObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraGeneralObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFCameraGeneralObservable.on : CAFCameraGeneralObservable(unsigned __int8 *a1)
{
  return CAFCameraGeneralObservable.on.setter(*a1);
}

uint64_t CAFCameraGeneralObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFCameraGeneralObservable.on.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFCameraGeneralObservable.on.modify(void *a1))(uint64_t a1)
{
  unint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFCameraGeneralObservable.on.modify;
}

void CAFCameraGeneralObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFCameraGeneralObservable.$on.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFCameraGeneralObservable.userDismissible.getter()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFCameraGeneralObservable.$userDismissible.getter()
{
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFCameraGeneralObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  id v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForOn))
  {
    char v6 = CAFCameraGeneralObservable.on.getter();
    if (v6) {
      uint64_t v4 = 1702195828;
    }
    else {
      uint64_t v4 = 0x65736C6166;
    }
    if (v6) {
      id v5 = (void *)0xE400000000000000;
    }
    else {
      id v5 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v3, sel_registeredForUserDismissible))
  {
    char v7 = CAFCameraGeneralObservable.userDismissible.getter();
    if (v7) {
      uint64_t v2 = 1702195828;
    }
    else {
      uint64_t v2 = 0x65736C6166;
    }
    if (v7) {
      uint64_t v1 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v1 = (void *)0xE500000000000000;
    }
  }
  _StringGuts.grow(_:)(64);
  v8._countAndFlagsBits = 0xD00000000000001DLL;
  v8._object = (void *)0x8000000249488130;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x203A6E6F207B20;
  v9._object = (void *)0xE700000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x8000000249488150;
  v11._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFCameraGeneralObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFCameraGeneralObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFCameraGeneralObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFCameraGeneralObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCameraGeneralObservable.init(_:)(a1);
}

id CAFCameraGeneralObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCameraGeneralObservable, Bool>);
  swift_allocObject();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable__userDismissible;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraGeneralObservable, Bool>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v9;
  v15.super_class = (Class)type metadata accessor for CAFCameraGeneralObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFCameraGeneralObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFCameraGeneralObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFCameraGeneralObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCameraGeneralObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCameraGeneralObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCameraGeneralObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCameraGeneralObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCameraGeneralObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493F5098@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraGeneralObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_2493F50C8(unsigned __int8 *a1)
{
  return CAFCameraGeneralObservable.on.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCameraGeneralObservable(void **a1)
{
  return CAFCameraGeneralObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCameraGeneralObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCameraGeneralObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCameraGeneralObservable.cameraGeneralService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFCameraGeneralObservable.cameraGeneralService(_:didUpdateUserDismissible:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraGeneralObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFCameraGeneralObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFCameraGeneralObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

id sub_2493F544C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493F5480(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

char *keypath_get_selector_userDismissible()
{
  return sel_userDismissible;
}

id sub_2493F54A0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_userDismissible);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t type metadata accessor for CAFCameraGeneralObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCameraGeneral(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable(&lazy protocol witness table cache variable for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCameraGeneralObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCameraGeneralObservable()
{
  return lazy protocol witness table accessor for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable(&lazy protocol witness table cache variable for type CAFCameraGeneral and conformance CAFCameraGeneral, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraGeneral);
}

unint64_t type metadata accessor for CAFCameraGeneral()
{
  unint64_t result = lazy cache variable for type metadata for CAFCameraGeneral;
  if (!lazy cache variable for type metadata for CAFCameraGeneral)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCameraGeneral);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCameraGeneralObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable(&lazy protocol witness table cache variable for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCameraGeneralObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCameraGeneralObservable and conformance CAFCameraGeneralObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFCameraGeneralObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCameraGeneralObservable);
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.$userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCameraGeneralObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 224))();
}

uint64_t partial apply for closure #1 in CAFCameraGeneralObservable.resetCachedDescription()()
{
  return CAFCameraGeneralObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFUIInputDevicePurpose.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUIInputDevicePurpose.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFUIInputDevicePurpose.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUIInputDevicePurpose.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUIInputDevicePurpose.description.getter()
{
  id v0 = (id)NSStringFromUIInputDevicePurpose();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUIInputDevicePurpose(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose);
  a1[2] = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose);
  uint64_t result = lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(&lazy protocol witness table cache variable for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUIInputDevicePurpose and conformance CAFUIInputDevicePurpose(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUIInputDevicePurpose(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUIInputDevicePurpose()
{
  return CAFUIInputDevicePurpose.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUIInputDevicePurpose] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFUIInputDevicePurpose]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUIInputDevicePurpose] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUIInputDevicePurpose@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFUIInputDevicePurpose.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFUIInputDevicePurpose@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFGearRecommendationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed);
}

uint64_t CAFGearRecommendationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFGearRecommendationObservable.gearShiftRecommendation.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFGearRecommendationObservable.$gearShiftRecommendation.getter()
{
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFGearRecommendationObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed), sel_registeredForGearShiftRecommendation))
  {
    CAFGearRecommendationObservable.gearShiftRecommendation.getter();
    uint64_t v1 = dispatch thunk of CustomStringConvertible.description.getter();
    id v3 = v2;
  }
  else
  {
    id v3 = (void *)0xEE003E6465726574;
    uint64_t v1 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(69);
  v4._countAndFlagsBits = 0xD000000000000022;
  v4._object = (void *)0x8000000249488210;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._object = (void *)0x8000000249488240;
  v5._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t CAFGearRecommendationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription);
    Swift::String v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFGearRecommendationObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFGearRecommendationObservable.cachedDescription.setter(v3, v6);
    Swift::String v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFGearRecommendationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFGearRecommendationObservable.init(_:)(a1);
}

id CAFGearRecommendationObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  Swift::String v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescription];
  *(void *)Swift::String v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable__gearShiftRecommendation;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFGearRecommendationObservable, Int8>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFGearRecommendationObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFGearRecommendationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFGearRecommendationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFGearRecommendationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFGearRecommendationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFGearRecommendationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFGearRecommendationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFGearRecommendationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFGearRecommendationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFGearRecommendationObservable(void **a1)
{
  return CAFGearRecommendationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFGearRecommendationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFGearRecommendationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFGearRecommendationObservable.gearRecommendationService(_:didUpdateGearShiftRecommendation:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFGearRecommendationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFGearRecommendationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFGearRecommendationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_gearShiftRecommendation()
{
  return sel_gearShiftRecommendation;
}

id sub_2493F6500@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gearShiftRecommendation);
  *a2 = (_BYTE)result;
  return result;
}

uint64_t type metadata accessor for CAFGearRecommendationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFGearRecommendation(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable(&lazy protocol witness table cache variable for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFGearRecommendationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFGearRecommendationObservable()
{
  return lazy protocol witness table accessor for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable(&lazy protocol witness table cache variable for type CAFGearRecommendation and conformance CAFGearRecommendation, 255, (void (*)(uint64_t))type metadata accessor for CAFGearRecommendation);
}

unint64_t type metadata accessor for CAFGearRecommendation()
{
  unint64_t result = lazy cache variable for type metadata for CAFGearRecommendation;
  if (!lazy cache variable for type metadata for CAFGearRecommendation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFGearRecommendation);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFGearRecommendationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFGearRecommendationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFGearRecommendationObservable and conformance CAFGearRecommendationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFGearRecommendationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFGearRecommendationObservable);
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.gearShiftRecommendation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.$gearShiftRecommendation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFGearRecommendationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFGearRecommendationObservable.resetCachedDescription()()
{
  return CAFGearRecommendationObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFCableState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFCableState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFCableState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFCableState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFCableState.description.getter()
{
  id v0 = (id)NSStringFromCableState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFCableState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState);
  a1[2] = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState);
  uint64_t result = lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(&lazy protocol witness table cache variable for type CAFCableState and conformance CAFCableState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCableState and conformance CAFCableState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFCableState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFCableState()
{
  return CAFCableState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFCableState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFCableState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFCableState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFCableState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFCableState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFCableState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFCableState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFCableState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CAFHistoricalNotification.userDismissibleBridged.getter()
{
  if (objc_msgSend(v0, sel_hasUserDismissible)) {
    return (uint64_t)objc_msgSend(v0, sel_userDismissible);
  }
  else {
    return 2;
  }
}

id CAFHistoricalNotification.userDismissibleBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setUserDismissible_, a1 & 1);
}

uint64_t CAFHistoricalNotification.userActionBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasUserAction);
  unsigned int v2 = v1;
  if (v1) {
    unsigned int v1 = objc_msgSend(v0, sel_userAction);
  }
  return v1 | ((v2 ^ 1) << 8);
}

id CAFHistoricalNotification.userActionBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setUserAction_, v2);
}

id CAFHistoricalNotificationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
}

uint64_t CAFHistoricalNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFHistoricalNotificationObservable.userVisibleLabel.getter()
{
  return CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  unsigned int v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFHistoricalNotificationObservable.$userVisibleLabel.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.userVisibleDescription.getter()
{
  return CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFHistoricalNotificationObservable.$userVisibleDescription.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleDescription, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.userVisibleFullDescription.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFHistoricalNotificationObservable.$userVisibleFullDescription.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleFullDescription, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.timestamp.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.$timestamp.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__timestamp, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFHistoricalNotificationObservable.symbolName : CAFHistoricalNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotificationObservable.symbolName.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.symbolName : CAFHistoricalNotificationObservable()
{
  return CAFHistoricalNotificationObservable.symbolName.setter();
}

uint64_t CAFHistoricalNotificationObservable.symbolName.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFHistoricalNotificationObservable.symbolName.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  uint64_t v2 = OUTLINED_FUNCTION_93();

  return specialized static SafePublished.subscript.setter(v2);
}

void (*CAFHistoricalNotificationObservable.symbolName.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  uint64_t KeyPath = swift_getKeyPath();
  v3[3] = KeyPath;
  uint64_t v5 = swift_getKeyPath();
  v3[4] = v5;
  void *v3 = specialized static SafePublished.subscript.getter(v1, KeyPath, v5);
  v3[1] = v6;
  return CAFHistoricalNotificationObservable.symbolName.modify;
}

void CAFHistoricalNotificationObservable.symbolName.modify(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  id v4 = *(id *)(*(void *)a1 + 16);
  if (a2)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_14_3();
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_14_3();
  }

  free(v3);
}

uint64_t CAFHistoricalNotificationObservable.$symbolName.getter()
{
  return CAFHistoricalNotificationObservable.$symbolName.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void *key path getter for CAFHistoricalNotificationObservable.notificationSeverity : CAFHistoricalNotificationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotificationObservable.notificationSeverity.getter();
  *a1 = (_BYTE)result;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.notificationSeverity : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(*a1);
}

void *CAFHistoricalNotificationObservable.notificationSeverity.getter()
{
  return CAFHistoricalNotificationObservable.notificationSeverity.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(void);
  void *v4;

  OUTLINED_FUNCTION_116();
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v4;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_11_4();
  v2();
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFHistoricalNotificationObservable.notificationSeverity.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_249473958, (uint64_t)&unk_249473980, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void (*CAFHistoricalNotificationObservable.notificationSeverity.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFHistoricalNotificationObservable.notificationSeverity.modify;
}

void CAFHistoricalNotificationObservable.notificationSeverity.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFHistoricalNotificationObservable.$notificationSeverity.getter()
{
  return CAFHistoricalNotificationObservable.$symbolName.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__notificationSeverity, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFHistoricalNotificationObservable.$historicalNotificationUserActions.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__historicalNotificationUserActions, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

void *key path getter for CAFHistoricalNotificationObservable.userDismissible : CAFHistoricalNotificationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotificationObservable.userDismissible.getter();
  *a1 = (_BYTE)result;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.userDismissible : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.userDismissible.setter(*a1);
}

void *CAFHistoricalNotificationObservable.userDismissible.getter()
{
  return CAFHistoricalNotificationObservable.notificationSeverity.getter();
}

uint64_t CAFHistoricalNotificationObservable.userDismissible.setter(uint64_t a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(a1, (uint64_t)&unk_2494739A0, (uint64_t)&unk_2494739C8, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFHistoricalNotificationObservable.notificationSeverity.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, id, uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  id v8 = v4;

  return a4(a1, v8, KeyPath, v7);
}

void (*CAFHistoricalNotificationObservable.userDismissible.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFHistoricalNotificationObservable.userDismissible.modify;
}

void CAFHistoricalNotificationObservable.userDismissible.modify(uint64_t a1, uint64_t a2)
{
}

void CAFHistoricalNotificationObservable.notificationSeverity.modify(uint64_t a1, uint64_t a2, void (*a3)(void, id, void, void))
{
  uint64_t v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v3);
}

uint64_t CAFHistoricalNotificationObservable.$userDismissible.getter()
{
  return CAFHistoricalNotificationObservable.$symbolName.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userDismissible, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

void *key path getter for CAFHistoricalNotificationObservable.hidden : CAFHistoricalNotificationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotificationObservable.hidden.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.hidden : CAFHistoricalNotificationObservable(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.hidden.setter(*a1);
}

void *CAFHistoricalNotificationObservable.hidden.getter()
{
  OUTLINED_FUNCTION_116();
  id v4 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v4;
  OUTLINED_FUNCTION_4_1();
  OUTLINED_FUNCTION_11_4();
  v2();
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFHistoricalNotificationObservable.hidden.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFHistoricalNotificationObservable.hidden.modify())(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFHistoricalNotificationObservable.hidden.modify;
}

void CAFHistoricalNotificationObservable.hidden.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFHistoricalNotificationObservable.$hidden.getter()
{
  return CAFHistoricalNotificationObservable.$symbolName.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotificationObservable.userAction.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFHistoricalNotificationObservable.userAction.setter);
}

uint64_t CAFHistoricalNotificationObservable.userAction.getter()
{
  OUTLINED_FUNCTION_116();
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v8;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  int v4 = *v3;
  int v5 = v3[1];
  v2(v7, 0);
  swift_release();
  swift_release();

  return v4 | (v5 << 8);
}

uint64_t CAFHistoricalNotificationObservable.userAction.setter(__int16 a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1 & 0x1FF, v5, KeyPath, v4);
}

void (*CAFHistoricalNotificationObservable.userAction.modify())(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  swift_retain();
  id v4 = v2;
  id v5 = (void (*)(uint64_t, void))OUTLINED_FUNCTION_8_6();
  char v7 = *v6;
  char v8 = v6[1];
  v5(v1, 0);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v7;
  *(unsigned char *)(v1 + 89) = v8;
  return CAFHistoricalNotificationObservable.userAction.modify;
}

void CAFHistoricalNotificationObservable.userAction.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88) | (*(unsigned __int8 *)(*(void *)a1 + 89) << 8), *(id *)(*(void *)a1 + 64), v1[9], v1[10]);

  free(v1);
}

uint64_t CAFHistoricalNotificationObservable.$userAction.getter()
{
  return CAFHistoricalNotificationObservable.$symbolName.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userAction, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.$symbolName.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = OUTLINED_FUNCTION_10_5();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFHistoricalNotificationObservable.name.getter()
{
  return CAFHistoricalNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFHistoricalNotificationObservable.$name.getter()
{
  return CAFHistoricalNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFHistoricalNotificationObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFHistoricalNotificationObservable._description.getter()
{
  uint64_t v1 = v0;
  v61._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v61._countAndFlagsBits = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v5 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed);
  objc_msgSend(v5, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_4_5();
  if (v8) {
    uint64_t v7 = CAFHistoricalNotificationObservable.userVisibleLabel.getter();
  }
  v60._countAndFlagsBits = v7;
  v60._object = v6;
  objc_msgSend(v5, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_4_5();
  if (v11) {
    uint64_t v10 = CAFHistoricalNotificationObservable.userVisibleDescription.getter();
  }
  v59._countAndFlagsBits = v10;
  v59._object = v9;
  objc_msgSend(v5, sel_registeredForUserVisibleFullDescription);
  OUTLINED_FUNCTION_4_5();
  if (v14)
  {
    CAFHistoricalNotificationObservable.userVisibleFullDescription.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v13 = OUTLINED_FUNCTION_16_2();
  }
  v58._countAndFlagsBits = v13;
  v58._object = v12;
  uint64_t v15 = 0x73696765726E753CLL;
  unint64_t v16 = 0xEE003E6465726574;
  if (objc_msgSend(v5, sel_registeredForTimestamp))
  {
    CAFHistoricalNotificationObservable.timestamp.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitDuration> and conformance Measurement<A>();
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v16 = v17;
    v4 += 8;
    uint64_t v18 = OUTLINED_FUNCTION_93();
    v19(v18);
  }
  v57._object = (void *)v16;
  uint64_t v20 = 0x73696765726E753CLL;
  uint64_t v21 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v5, sel_registeredForSymbolName))
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v23 = swift_getKeyPath();
    uint64_t v20 = specialized static SafePublished.subscript.getter(v1, KeyPath, v23);
    uint64_t v21 = v24;
    swift_release();
    swift_release();
  }
  objc_msgSend(v5, sel_registeredForNotificationSeverity);
  OUTLINED_FUNCTION_20_3();
  objc_super v25 = (void *)0xEE003E6465726574;
  if (v26)
  {
    CAFHistoricalNotificationObservable.notificationSeverity.getter();
    id v27 = (id)NSStringFromNotificationSeverity();
    if (v27)
    {
      Swift::String v28 = v27;
      uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      objc_super v25 = v29;
    }
    else
    {
      objc_super v25 = (void *)0xE900000000000029;
      uint64_t v4 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v55 = v4;
  v57._countAndFlagsBits = v15;
  objc_msgSend(v5, sel_registeredForHistoricalNotificationUserActions);
  OUTLINED_FUNCTION_0_4();
  Swift::String v31 = (void *)0xEE003E6465726574;
  if (v32)
  {
    CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFHistoricalNotificationUserActions?);
    uint64_t v30 = OUTLINED_FUNCTION_16_2();
    Swift::String v31 = v33;
  }
  uint64_t v56 = v20;
  objc_msgSend(v5, sel_registeredForUserDismissible, v30);
  OUTLINED_FUNCTION_20_3();
  Swift::String v34 = (void *)0xEE003E6465726574;
  if (v35)
  {
    CAFHistoricalNotificationObservable.userDismissible.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v4 = OUTLINED_FUNCTION_16_2();
    Swift::String v34 = v36;
  }
  uint64_t v37 = 0x73696765726E753CLL;
  Swift::String v38 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v5, sel_registeredForHidden))
  {
    unsigned __int8 v39 = CAFHistoricalNotificationObservable.hidden.getter();
    if (v39) {
      uint64_t v37 = 1702195828;
    }
    else {
      uint64_t v37 = 0x65736C6166;
    }
    if (v39) {
      Swift::String v38 = (void *)0xE400000000000000;
    }
    else {
      Swift::String v38 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v5, sel_registeredForUserAction))
  {
    CAFHistoricalNotificationObservable.userAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v61._countAndFlagsBits = OUTLINED_FUNCTION_16_2();
    v61._object = v40;
  }
  uint64_t v62 = static String._createEmpty(withInitialCapacity:)(271);
  v41._countAndFlagsBits = 0xD000000000000026;
  v41._object = (void *)0x8000000249488380;
  String.append(_:)(v41);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_6_4(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD00000000000001ALL, (uint64_t)", userVisibleDescription: ");
  String.append(_:)(v59);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD00000000000001ELL, (uint64_t)", userVisibleFullDescription: ");
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0x7473656D6974202CLL;
  v42._object = (void *)0xED0000203A706D61;
  String.append(_:)(v42);
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 0x6C6F626D7973202CLL;
  v43._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v43);
  v44._countAndFlagsBits = v56;
  v44._object = v21;
  String.append(_:)(v44);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000018, (uint64_t)", notificationSeverity: ");
  v45._countAndFlagsBits = v55;
  v45._object = v25;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000025, (uint64_t)", historicalNotificationUserActions: ");
  v46._countAndFlagsBits = v54;
  v46._object = v31;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  v47._object = (void *)0x8000000249488150;
  v47._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v47);
  v48._countAndFlagsBits = v4;
  v48._object = v34;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0x6E6564646968202CLL;
  v49._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v49);
  v50._countAndFlagsBits = v37;
  v50._object = v38;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0x634172657375202CLL;
  v51._object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v51);
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 4095264;
  v52._object = (void *)0xE300000000000000;
  String.append(_:)(v52);
  return v62;
}

uint64_t CAFHistoricalNotificationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFHistoricalNotificationObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFHistoricalNotificationObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFHistoricalNotificationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFHistoricalNotificationObservable.init(_:)(a1);
}

id CAFHistoricalNotificationObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, String>);
  uint64_t v9 = OUTLINED_FUNCTION_10_1();
  uint64_t v10 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleDescription;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v10[v11] = specialized SafePublished.init(observedValuekeypath:)(v9);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userVisibleFullDescription;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v13 = OUTLINED_FUNCTION_7_1();
  *(void *)&v10[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__timestamp;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, Measurement<NSUnitDuration>>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v10[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__symbolName;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v17 = OUTLINED_FUNCTION_7_1();
  *(void *)&v10[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__notificationSeverity;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, CAFNotificationSeverity>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v10[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__historicalNotificationUserActions;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFHistoricalNotificationObservable, CAFHistoricalNotificationUserActions?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v10[v20] = v21;
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userDismissible;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v23 = OUTLINED_FUNCTION_7_1();
  *(void *)&v10[v22] = specialized SafePublished.init(observedValuekeypath:)(v23);
  uint64_t v24 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__hidden;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, Bool>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v25 = OUTLINED_FUNCTION_7_1();
  *(void *)&v10[v24] = specialized SafePublished.init(observedValuekeypath:)(v25);
  uint64_t v26 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__userAction;
  uint64_t v27 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFHistoricalNotificationObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v10[v26] = v28;
  uint64_t v29 = OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v10[v29] = specialized SafePublished.init(observedValuekeypath:)(v27);
  *(void *)&v10[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed] = a1;
  id v30 = a1;

  v33.receiver = v10;
  v33.super_class = (Class)type metadata accessor for CAFHistoricalNotificationObservable();
  id v31 = objc_msgSendSuper2(&v33, sel_init);
  objc_msgSend(v30, sel_registerObserver_, v31);

  return v31;
}

uint64_t CAFHistoricalNotificationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFHistoricalNotificationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine35CAFHistoricalNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFHistoricalNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFHistoricalNotificationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFHistoricalNotificationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFHistoricalNotificationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFHistoricalNotificationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFHistoricalNotificationObservable(void **a1)
{
  return CAFHistoricalNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFHistoricalNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFHistoricalNotificationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleDescription:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleFullDescription:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateTimestamp:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateSymbolName:)()
{
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateNotificationSeverity:)()
{
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateHistoricalNotificationUserActions:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserDismissible:)()
{
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateHidden:)()
{
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserAction:)()
{
  return swift_release();
}

uint64_t CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateName:)()
{
  return CAFHistoricalNotificationObservable.historicalNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFHistoricalNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFHistoricalNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFHistoricalNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2493F9330()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFHistoricalNotificationObservable.symbolName.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

void *sub_2493F935C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFHistoricalNotificationObservable.notificationSeverity.getter();
  *uint64_t v0 = (_BYTE)result;
  return result;
}

uint64_t sub_2493F9384(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.notificationSeverity.setter(*a1);
}

void *sub_2493F93AC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFHistoricalNotificationObservable.userDismissible.getter();
  *uint64_t v0 = (_BYTE)result;
  return result;
}

uint64_t sub_2493F93D4(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.userDismissible.setter(*a1);
}

void *sub_2493F93FC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFHistoricalNotificationObservable.hidden.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_2493F9428(unsigned __int8 *a1)
{
  return CAFHistoricalNotificationObservable.hidden.setter(*a1);
}

void sub_2493F9458(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_userVisibleDescription()
{
  return sel_userVisibleDescription;
}

void sub_2493F9484(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_userVisibleFullDescription()
{
  return sel_userVisibleFullDescription;
}

void key path getter for CAFHistoricalNotification.userVisibleFullDescription : CAFHistoricalNotification(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_userVisibleFullDescription);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_timestamp()
{
  return sel_timestamp;
}

void key path getter for CAFHistoricalNotification.timestamp : CAFHistoricalNotification(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_timestamp);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitDuration);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_2493F95AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void key path setter for CAFHistoricalNotification.symbolName : CAFHistoricalNotification(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  id v3 = (id)MEMORY[0x24C59DAA0](*a1, a1[1]);
  objc_msgSend(v2, sel_setSymbolName_, v3);
}

char *keypath_get_selector_notificationSeverity()
{
  return sel_notificationSeverity;
}

id sub_2493F9640@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_notificationSeverity);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493F9674(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setNotificationSeverity_, *a1);
}

char *keypath_get_selector_historicalNotificationUserActions()
{
  return sel_historicalNotificationUserActions;
}

id key path getter for CAFHistoricalNotification.historicalNotificationUserActions : CAFHistoricalNotification@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_historicalNotificationUserActions);
  *a2 = result;
  return result;
}

uint64_t sub_2493F96D4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFHistoricalNotification.userDismissibleBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_2493F96FC(char *a1)
{
  return CAFHistoricalNotification.userDismissibleBridged.setter(*a1);
}

char *keypath_get_selector_hidden()
{
  return sel_hidden;
}

id sub_2493F9730@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_hidden);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2493F9764(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHidden_, *a1);
}

uint64_t key path getter for CAFHistoricalNotification.userActionBridged : CAFHistoricalNotification@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFHistoricalNotification.userActionBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t sub_2493F97EC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFHistoricalNotificationObservable.userAction : CAFHistoricalNotificationObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFHistoricalNotification.userActionBridged.setter);
}

void sub_2493F9818(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFHistoricalNotificationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFHistoricalNotification()
{
  return lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable);
}

unint64_t lazy protocol witness table accessor for type CAFHistoricalNotification and conformance CAFHistoricalNotification()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification;
  if (!lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFHistoricalNotification);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFHistoricalNotification and conformance CAFHistoricalNotification);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFHistoricalNotificationObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(&lazy protocol witness table cache variable for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFHistoricalNotificationObservable and conformance CAFHistoricalNotificationObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFHistoricalNotificationObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFHistoricalNotificationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFHistoricalNotificationObservable);
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userVisibleFullDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userVisibleFullDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.timestamp.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$timestamp.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.symbolName.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.notificationSeverity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$notificationSeverity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.historicalNotificationUserActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$historicalNotificationUserActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userDismissible.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.hidden.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))() & 0x1FF;
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x1C8))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.userAction.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$userAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFHistoricalNotificationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 504))();
}

uint64_t partial apply for closure #1 in CAFHistoricalNotificationObservable.resetCachedDescription()()
{
  return CAFHistoricalNotificationObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_6()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_10_5()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_14_3()
{
  return specialized static SafePublished.subscript.setter(v0);
}

void *OUTLINED_FUNCTION_15_3()
{
  return malloc(0x60uLL);
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return String.init<A>(describing:)();
}

uint64_t CAFCameraButton.buttonActionBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasButtonAction, (SEL *)&selRef_buttonAction);
}

id CAFCameraButton.buttonActionBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setButtonAction_, v2);
}

uint64_t CAFCameraButton.selectedBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasSelected, (SEL *)&selRef_selected);
}

uint64_t CAFCameraButton.selectedEntryIndexBridged.getter()
{
  return CAFAutoClimateControl.levelBridged.getter((SEL *)&selRef_hasSelectedEntryIndex, (SEL *)&selRef_selectedEntryIndex);
}

id CAFCameraButton.selectedEntryIndexBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setSelectedEntryIndex_, v2);
}

id CAFCameraButtonObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
}

uint64_t CAFCameraButtonObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraButtonObservable.buttonAction.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFCameraButtonObservable.buttonAction.setter);
}

uint64_t CAFCameraButtonObservable.buttonAction.getter()
{
  return CAFCameraButtonObservable.buttonAction.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(unsigned char *, void);
  unsigned __int8 *v3;
  int v4;
  int v5;
  unsigned char v7[32];
  id v8;

  swift_beginAccess();
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v8;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  v2(v7, 0);
  swift_release();
  swift_release();

  return v4 | (v5 << 8);
}

uint64_t CAFCameraButtonObservable.buttonAction.setter(__int16 a1)
{
  return CAFCameraButtonObservable.buttonAction.setter(a1, (uint64_t)&unk_249473DD0, (uint64_t)&unk_249473DF8, (uint64_t (*)(void, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void (*CAFCameraButtonObservable.buttonAction.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v4);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  swift_retain();
  id v5 = v2;
  swift_readAtKeyPath();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  v7(v6);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  *(unsigned char *)(v1 + 89) = v3;
  return CAFCameraButtonObservable.buttonAction.modify;
}

void CAFCameraButtonObservable.buttonAction.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFCameraButtonObservable.$buttonAction.getter()
{
  return CAFCameraButtonObservable.$buttonAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.contentURLAction.getter()
{
  OUTLINED_FUNCTION_15_1();
  char v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFCameraButtonObservable.$contentURLAction.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__contentURLAction, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFCameraButtonObservable.$sortOrder.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.symbolName.getter()
{
  return CAFCameraButtonObservable.symbolName.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  unsigned __int8 v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFCameraButtonObservable.$symbolName.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.disabled.getter()
{
  return CAFCameraButtonObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFCameraButtonObservable.$disabled.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.selected.getter()
{
  return CAFCameraButtonObservable.disabled.getter();
}

uint64_t CAFCameraButtonObservable.$selected.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selected, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.hidden.getter()
{
  return CAFCameraButtonObservable.disabled.getter();
}

uint64_t CAFCameraButtonObservable.$hidden.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.identifier.getter()
{
  return CAFCameraButtonObservable.symbolName.getter();
}

uint64_t CAFCameraButtonObservable.$identifier.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.childrenIdentifiers.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFCameraButtonObservable.$childrenIdentifiers.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__childrenIdentifiers, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFCameraButtonObservable.selectedEntryIndex : CAFCameraButtonObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraButtonObservable.selectedEntryIndex.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFCameraButtonObservable.selectedEntryIndex : CAFCameraButtonObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFCameraButtonObservable.selectedEntryIndex.setter);
}

uint64_t key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t CAFCameraButtonObservable.selectedEntryIndex.getter()
{
  return CAFCameraButtonObservable.buttonAction.getter();
}

uint64_t CAFCameraButtonObservable.selectedEntryIndex.setter(__int16 a1)
{
  return CAFCameraButtonObservable.buttonAction.setter(a1, (uint64_t)&unk_249473E18, (uint64_t)&unk_249473E40, (uint64_t (*)(void, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFCameraButtonObservable.buttonAction.setter(__int16 a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, id, uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  id v8 = v4;

  return a4(a1 & 0x1FF, v8, KeyPath, v7);
}

void (*CAFCameraButtonObservable.selectedEntryIndex.modify())(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v4);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  swift_retain();
  id v5 = v2;
  swift_readAtKeyPath();
  uint64_t v6 = OUTLINED_FUNCTION_0_5();
  v7(v6);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  *(unsigned char *)(v1 + 89) = v3;
  return CAFCameraButtonObservable.selectedEntryIndex.modify;
}

void CAFCameraButtonObservable.selectedEntryIndex.modify(uint64_t a1, uint64_t a2)
{
}

void CAFCameraButtonObservable.buttonAction.modify(uint64_t a1, uint64_t a2, void (*a3)(void, id, void, void))
{
  char v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 88) | (*(unsigned __int8 *)(*(void *)a1 + 89) << 8), *(id *)(*(void *)a1 + 64), v3[9], v3[10]);

  free(v3);
}

uint64_t CAFCameraButtonObservable.$selectedEntryIndex.getter()
{
  return CAFCameraButtonObservable.$buttonAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.$buttonAction.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFCameraButtonObservable.name.getter()
{
  return CAFCameraButtonObservable.symbolName.getter();
}

uint64_t CAFCameraButtonObservable.$name.getter()
{
  return CAFCameraButtonObservable.$contentURLAction.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFCameraButtonObservable.$contentURLAction.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFCameraButtonObservable._description.getter()
{
  v63._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v63._countAndFlagsBits = v1;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed);
  objc_msgSend(v2, sel_registeredForButtonAction);
  OUTLINED_FUNCTION_4_5();
  if (v5)
  {
    CAFCameraButtonObservable.buttonAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
    uint64_t v4 = OUTLINED_FUNCTION_16_2();
  }
  v62._countAndFlagsBits = v4;
  v62._object = v3;
  objc_msgSend(v2, sel_registeredForContentURLAction);
  OUTLINED_FUNCTION_4_5();
  if (v8)
  {
    CAFCameraButtonObservable.contentURLAction.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v7 = OUTLINED_FUNCTION_16_2();
  }
  v61._countAndFlagsBits = v7;
  v61._object = v6;
  objc_msgSend(v2, sel_registeredForSortOrder);
  OUTLINED_FUNCTION_4_5();
  if (v11)
  {
    CAFCameraButtonObservable.sortOrder.getter();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
  }
  v60._countAndFlagsBits = v10;
  v60._object = v9;
  objc_msgSend(v2, sel_registeredForSymbolName);
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = (void *)0xEE003E6465726574;
  if (v14)
  {
    uint64_t v12 = CAFCameraButtonObservable.symbolName.getter();
    uint64_t v13 = v15;
  }
  uint64_t v59 = v12;
  objc_msgSend(v2, sel_registeredForDisabled);
  OUTLINED_FUNCTION_0_4();
  uint64_t v17 = (void *)0xEE003E6465726574;
  if (v18)
  {
    CAFCameraButtonObservable.disabled.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v16 = OUTLINED_FUNCTION_16_2();
    uint64_t v17 = v19;
  }
  uint64_t v58 = v16;
  objc_msgSend(v2, sel_registeredForSelected);
  OUTLINED_FUNCTION_0_4();
  uint64_t v21 = (void *)0xEE003E6465726574;
  if (v22)
  {
    CAFCameraButtonObservable.selected.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v20 = OUTLINED_FUNCTION_16_2();
    uint64_t v21 = v23;
  }
  uint64_t v57 = v20;
  objc_msgSend(v2, sel_registeredForHidden);
  OUTLINED_FUNCTION_0_4();
  uint64_t v25 = (void *)0xEE003E6465726574;
  if (v26)
  {
    CAFCameraButtonObservable.hidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v24 = OUTLINED_FUNCTION_16_2();
    uint64_t v25 = v27;
  }
  uint64_t v56 = v24;
  objc_msgSend(v2, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_0_4();
  uint64_t v29 = (void *)0xEE003E6465726574;
  if (v30)
  {
    uint64_t v28 = CAFCameraButtonObservable.identifier.getter();
    uint64_t v29 = v31;
  }
  uint64_t v32 = 0x73696765726E753CLL;
  objc_super v33 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForChildrenIdentifiers, v28))
  {
    CAFCameraButtonObservable.childrenIdentifiers.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    uint64_t v32 = OUTLINED_FUNCTION_16_2();
    objc_super v33 = v34;
  }
  if (objc_msgSend(v2, sel_registeredForSelectedEntryIndex))
  {
    CAFCameraButtonObservable.selectedEntryIndex.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    v63._countAndFlagsBits = OUTLINED_FUNCTION_16_2();
    v63._object = v35;
  }
  uint64_t v64 = static String._createEmpty(withInitialCapacity:)(210);
  v36._countAndFlagsBits = 0xD00000000000001CLL;
  v36._object = (void *)0x8000000249488500;
  String.append(_:)(v36);
  _print_unlocked<A, B>(_:_:)();
  v37._object = (void *)0x8000000249486FC0;
  v37._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v37);
  String.append(_:)(v62);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0xD000000000000014;
  v38._object = (void *)0x8000000249488520;
  String.append(_:)(v38);
  String.append(_:)(v61);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0x724F74726F73202CLL;
  v39._object = (void *)0xED0000203A726564;
  String.append(_:)(v39);
  String.append(_:)(v60);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 0x6C6F626D7973202CLL;
  v40._object = (void *)0xEE00203A656D614ELL;
  String.append(_:)(v40);
  v41._countAndFlagsBits = v59;
  v41._object = v13;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._countAndFlagsBits = 0x6C6261736964202CLL;
  v42._object = (void *)0xEC000000203A6465;
  String.append(_:)(v42);
  v43._countAndFlagsBits = v58;
  v43._object = v17;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0x7463656C6573202CLL;
  v44._object = (void *)0xEC000000203A6465;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v57;
  v45._object = v21;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._countAndFlagsBits = 0x6E6564646968202CLL;
  v46._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v46);
  v47._countAndFlagsBits = v56;
  v47._object = v25;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  v48._countAndFlagsBits = 0x69746E656469202CLL;
  v48._object = (void *)0xEE00203A72656966;
  String.append(_:)(v48);
  v49._countAndFlagsBits = v55;
  v49._object = v29;
  String.append(_:)(v49);
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = 0xD000000000000017;
  v50._object = (void *)0x8000000249488540;
  String.append(_:)(v50);
  v51._countAndFlagsBits = v32;
  v51._object = v33;
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v52._countAndFlagsBits = 0xD000000000000016;
  v52._object = (void *)0x8000000249488560;
  String.append(_:)(v52);
  String.append(_:)(v63);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 4095264;
  v53._object = (void *)0xE300000000000000;
  String.append(_:)(v53);
  return v64;
}

uint64_t CAFCameraButtonObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFCameraButtonObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFCameraButtonObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFCameraButtonObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCameraButtonObservable.init(_:)(a1);
}

id CAFCameraButtonObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCameraButtonObservable, CAFButtonAction?>);
  OUTLINED_FUNCTION_10_1();
  int v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__contentURLAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v11 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__symbolName;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v14] = OUTLINED_FUNCTION_1_5();
  uint64_t v15 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v15] = OUTLINED_FUNCTION_16_0();
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selected;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v8[v16] = OUTLINED_FUNCTION_16_0();
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v8[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v8[v18] = OUTLINED_FUNCTION_1_5();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__childrenIdentifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFCameraButtonObservable, [String]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v19] = v20;
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFCameraButtonObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v21] = v22;
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v8[v23] = OUTLINED_FUNCTION_1_5();
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed] = a1;
  id v24 = a1;

  v27.receiver = v8;
  v27.super_class = (Class)type metadata accessor for CAFCameraButtonObservable();
  id v25 = objc_msgSendSuper2(&v27, sel_init);
  objc_msgSend(v24, sel_registerObserver_, v25);

  return v25;
}

uint64_t CAFCameraButtonObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFCameraButtonObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCameraButtonObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCameraButtonObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCameraButtonObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCameraButtonObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCameraButtonObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCameraButtonObservable(void **a1)
{
  return CAFCameraButtonObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCameraButtonObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCameraButtonObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateButtonAction:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateButtonAction:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__buttonAction, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateContentURLAction:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSelected:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateHidden:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateDisabled:)();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateIdentifier:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

uint64_t @objc CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateChildrenIdentifiers:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateSelectedEntryIndex:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateButtonAction:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFCameraButtonObservable__selectedEntryIndex, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateButtonAction:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t CAFCameraButtonObservable.cameraButtonService(_:didUpdateName:)()
{
  return CAFCameraButtonObservable.cameraButtonService(_:didUpdateSymbolName:)();
}

uint64_t CAFCameraButtonObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFCameraButtonObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFCameraButtonObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t key path getter for CAFCameraButton.buttonActionBridged : CAFCameraButton@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraButton.buttonActionBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_2493FC1A4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFCameraButton.buttonActionBridged.setter);
}

char *keypath_get_selector_contentURLAction()
{
  return sel_contentURLAction;
}

void key path getter for CAFCameraButton.contentURLAction : CAFCameraButton(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_contentURLAction);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

id sub_2493FC248@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sortOrder);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2493FC27C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2493FC29C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493FC2C8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraButton.selectedBridged.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2493FC2F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *a1 = result;
  return result;
}

void sub_2493FC320(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_childrenIdentifiers()
{
  return sel_childrenIdentifiers;
}

void key path getter for CAFCameraButton.childrenIdentifiers : CAFCameraButton(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_childrenIdentifiers);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v5 = 0;
  }
  *a2 = v5;
}

uint64_t key path getter for CAFCameraButton.selectedEntryIndexBridged : CAFCameraButton@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCameraButton.selectedEntryIndexBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_2493FC3F0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFCameraButtonObservable.buttonAction : CAFCameraButtonObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFCameraButton.selectedEntryIndexBridged.setter);
}

void sub_2493FC41C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFCameraButtonObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCameraButton(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCameraButtonObservable()
{
  return lazy protocol witness table accessor for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable(&lazy protocol witness table cache variable for type CAFCameraButton and conformance CAFCameraButton, 255, (void (*)(uint64_t))type metadata accessor for CAFCameraButton);
}

unint64_t type metadata accessor for CAFCameraButton()
{
  unint64_t result = lazy cache variable for type metadata for CAFCameraButton;
  if (!lazy cache variable for type metadata for CAFCameraButton)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCameraButton);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCameraButtonObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable(&lazy protocol witness table cache variable for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCameraButtonObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCameraButtonObservable and conformance CAFCameraButtonObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFCameraButtonObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCameraButtonObservable);
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))() & 0x1FF;
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xF8))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFCameraButtonObservable.buttonAction.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$buttonAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.contentURLAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$contentURLAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selected.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$selected.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.childrenIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$childrenIdentifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))() & 0x1FF;
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x198))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFCameraButtonObservable.selectedEntryIndex.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFCameraButtonObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 456))();
}

uint64_t partial apply for closure #1 in CAFCameraButtonObservable.resetCachedDescription()()
{
  return CAFCameraButtonObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_6_6()
{
  return swift_beginAccess();
}

uint64_t CAUAssetLibrary.featureFlags()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for CAUResource();
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  id v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUFeatureFlag?);
  MEMORY[0x270FA5388](v9);
  OUTLINED_FUNCTION_24_0();
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v8, *MEMORY[0x263F30D20], v3);
  lazy protocol witness table accessor for type CAUFeatureFlag? and conformance <A> A?();
  dispatch thunk of CAUAssetLibrary.asset<A>(for:)();
  uint64_t v10 = OUTLINED_FUNCTION_2_7();
  v11(v10);
  uint64_t v12 = type metadata accessor for CAUFeatureFlag();
  if (__swift_getEnumTagSinglePayload(v1, 1, v12) != 1) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v1, v12);
  }
  outlined destroy of CAUFeatureFlag?(v1);
  return CAUFeatureFlag.init()();
}

unint64_t lazy protocol witness table accessor for type CAUFeatureFlag? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type CAUFeatureFlag? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type CAUFeatureFlag? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for CAUFeatureFlag?);
    lazy protocol witness table accessor for type CAUFeatureFlag and conformance CAUFeatureFlag();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAUFeatureFlag? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CAUFeatureFlag and conformance CAUFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type CAUFeatureFlag and conformance CAUFeatureFlag;
  if (!lazy protocol witness table cache variable for type CAUFeatureFlag and conformance CAUFeatureFlag)
  {
    type metadata accessor for CAUFeatureFlag();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAUFeatureFlag and conformance CAUFeatureFlag);
  }
  return result;
}

uint64_t outlined destroy of CAUFeatureFlag?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUFeatureFlag?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Optional<A>.featureFlags()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for CAUFeatureFlag();
  OUTLINED_FUNCTION_0_0();
  uint64_t v7 = v6;
  MEMORY[0x270FA5388](v8);
  OUTLINED_FUNCTION_24_0();
  if (a1)
  {
    CAUAssetLibrary.featureFlags()(v2);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a2, v2, v5);
  }
  else
  {
    return CAUFeatureFlag.init()();
  }
}

uint64_t OUTLINED_FUNCTION_2_7()
{
  return v0;
}

uint64_t CAFTypeTestMulti.testBoolBridged.getter()
{
  if (objc_msgSend(v0, sel_hasTestBool)) {
    return (uint64_t)objc_msgSend(v0, sel_testBool);
  }
  else {
    return 2;
  }
}

id CAFTypeTestMulti.testBoolBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setTestBool_, a1 & 1);
}

uint64_t CAFTypeTestMulti.testUInt8Bridged.getter()
{
  return CAFTypeTestMulti.testUInt8Bridged.getter((const char **)&selRef_hasTestUInt8);
}

id CAFTypeTestMulti.testUInt8Bridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestUInt8_, v2);
}

uint64_t CAFTypeTestMulti.testUInt16Bridged.getter()
{
  return CAFTypeTestMulti.testUInt16Bridged.getter((const char **)&selRef_hasTestUInt16);
}

id CAFTypeTestMulti.testUInt16Bridged.setter(int a1)
{
  if ((a1 & 0x10000) != 0) {
    unsigned __int16 v2 = 0;
  }
  else {
    unsigned __int16 v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestUInt16_, v2);
}

unint64_t CAFTypeTestMulti.testUInt32Bridged.getter()
{
  return CAFTypeTestMulti.testUInt32Bridged.getter((const char **)&selRef_hasTestUInt32);
}

id CAFTypeTestMulti.testUInt32Bridged.setter(uint64_t a1)
{
  if ((a1 & 0x100000000) != 0) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestUInt32_, v2);
}

id CAFTypeTestMulti.testUInt64Bridged.getter()
{
  return CAFTypeTestMulti.testUInt64Bridged.getter((const char **)&selRef_hasTestUInt64);
}

id CAFTypeTestMulti.testUInt64Bridged.setter(uint64_t a1, char a2)
{
  if (a2) {
    a1 = 0;
  }
  return objc_msgSend(v2, sel_setTestUInt64_, a1);
}

uint64_t CAFTypeTestMulti.testInt8Bridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasTestInt8);
  unsigned int v2 = v1;
  if (v1) {
    LOBYTE(v1) = objc_msgSend(v0, sel_testInt8);
  }
  return v1 | ((v2 ^ 1) << 8);
}

id CAFTypeTestMulti.testInt8Bridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    char v2 = 0;
  }
  else {
    char v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestInt8_, v2);
}

uint64_t CAFTypeTestMulti.testInt16Bridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasTestInt16);
  if (v1) {
    int v2 = (unsigned __int16)objc_msgSend(v0, sel_testInt16);
  }
  else {
    int v2 = 0;
  }
  return v2 | ((v1 ^ 1) << 16);
}

id CAFTypeTestMulti.testInt16Bridged.setter(int a1)
{
  if ((a1 & 0x10000) != 0) {
    __int16 v2 = 0;
  }
  else {
    __int16 v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestInt16_, v2);
}

unint64_t CAFTypeTestMulti.testInt32Bridged.getter()
{
  return CAFTypeTestMulti.testUInt32Bridged.getter((const char **)&selRef_hasTestInt32);
}

unint64_t CAFTypeTestMulti.testUInt32Bridged.getter(const char **a1)
{
  unsigned int v3 = OUTLINED_FUNCTION_41_0(a1);
  unsigned __int8 v4 = v3;
  if (v3) {
    uint64_t v5 = [v1 *v2];
  }
  else {
    uint64_t v5 = 0;
  }
  return v5 | ((unint64_t)(v4 ^ 1u) << 32);
}

id CAFTypeTestMulti.testInt64Bridged.getter()
{
  return CAFTypeTestMulti.testUInt64Bridged.getter((const char **)&selRef_hasTestInt64);
}

id CAFTypeTestMulti.testUInt64Bridged.getter(const char **a1)
{
  if (OUTLINED_FUNCTION_41_0(a1)) {
    return [v1 *v2];
  }
  else {
    return 0;
  }
}

id CAFTypeTestMulti.testInt64Bridged.setter(uint64_t a1, char a2)
{
  if (a2) {
    a1 = 0;
  }
  return objc_msgSend(v2, sel_setTestInt64_, a1);
}

unint64_t CAFTypeTestMulti.testFloatBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasTestFloat);
  unsigned __int8 v2 = v1;
  if (v1)
  {
    objc_msgSend(v0, sel_testFloat);
    uint64_t v4 = v3;
  }
  else
  {
    uint64_t v4 = 0;
  }
  return v4 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFTypeTestMulti.testFloatBridged.setter(uint64_t a1, double a2)
{
  LODWORD(a2) = a1;
  if ((a1 & 0x100000000) != 0) {
    *(float *)&a2 = 0.0;
  }
  return objc_msgSend(v2, sel_setTestFloat_, a2);
}

uint64_t CAFTypeTestMulti.testEnumBridged.getter()
{
  return CAFTypeTestMulti.testUInt8Bridged.getter((const char **)&selRef_hasTestEnum);
}

uint64_t CAFTypeTestMulti.testUInt8Bridged.getter(const char **a1)
{
  unsigned int v3 = OUTLINED_FUNCTION_41_0(a1);
  unsigned int v4 = v3;
  if (v3) {
    unsigned int v3 = [v1 *v2];
  }
  return v3 | ((v4 ^ 1) << 8);
}

id CAFTypeTestMulti.testEnumBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    unsigned __int8 v2 = 0;
  }
  else {
    unsigned __int8 v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestEnum_, v2);
}

uint64_t CAFTypeTestMulti.testDimensionUnitRawValueBridged.getter()
{
  return CAFTypeTestMulti.testUInt16Bridged.getter((const char **)&selRef_hasTestDimensionUnitRawValue);
}

uint64_t CAFTypeTestMulti.testUInt16Bridged.getter(const char **a1)
{
  unsigned int v3 = OUTLINED_FUNCTION_41_0(a1);
  unsigned int v4 = v3;
  if (v3) {
    unsigned int v3 = [v1 *v2];
  }
  return v3 | ((v4 ^ 1) << 16);
}

id CAFTypeTestMulti.testDimensionUnitRawValueBridged.setter(int a1)
{
  if ((a1 & 0x10000) != 0) {
    unsigned __int16 v2 = 0;
  }
  else {
    unsigned __int16 v2 = a1;
  }
  return objc_msgSend(v1, sel_setTestDimensionUnitRawValue_, v2);
}

char *CAFTypeTestMulti.testArrayBoolBridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayBool);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x263F8EE78];
  }
LABEL_4:
  uint64_t v12 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v12;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C59DCE0](v5, v2);
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      unsigned __int8 v9 = objc_msgSend(v7, sel_BOOLValue);

      unint64_t v11 = *(void *)(v12 + 16);
      unint64_t v10 = *(void *)(v12 + 24);
      if (v11 >= v10 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v10 > 1), v11 + 1, 1);
      }
      ++v5;
      *(void *)(v12 + 16) = v11 + 1;
      *(unsigned char *)(v12 + v11 + 32) = v9;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

void CAFTypeTestMulti.testArrayBoolBridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithBool_, *(unsigned __int8 *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayBool_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayBool_, 0, 0, v8);
  }
}

void CAFTypeTestMulti.testArrayUInt8Bridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayUInt8);
  if (!v1) {
    return;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      id v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_unsignedCharValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt8Bridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayUInt8_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayUInt8_, 0, 0, v8);
  }
}

void CAFTypeTestMulti.testArrayUInt16Bridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayUInt16);
  if (!v1) {
    return;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      id v6 = v5;
      unsigned __int16 v7 = (unsigned __int16)objc_msgSend(v5, sel_unsignedShortValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(_WORD *)(v9 + 2 * v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt16Bridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, *(unsigned __int16 *)(a1 + 2 * v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayUInt16_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayUInt16_, 0, 0, v8);
  }
}

void CAFTypeTestMulti.testArrayUInt32Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

{
  SEL *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  SEL *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  unsigned int v22;
  unint64_t v23;
  char v24;

  OUTLINED_FUNCTION_37_1();
  uint64_t v14 = OUTLINED_FUNCTION_82_0(v13);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    OUTLINED_FUNCTION_36_1();
    return;
  }
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v17 = OUTLINED_FUNCTION_59_0();
  v11(v17);
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = a10;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        uint64_t v20 = (id)MEMORY[0x24C59DCE0](v18, v15);
      }
      else {
        uint64_t v20 = *(id *)(v15 + 8 * v18 + 32);
      }
      uint64_t v21 = v20;
      uint64_t v22 = [v20 *v10];

      OUTLINED_FUNCTION_77_0();
      if (v24)
      {
        ((void (*)(BOOL, void *, uint64_t))v11)(v23 > 1, v21, 1);
        uint64_t v19 = a10;
      }
      ++v18;
      *(void *)(v19 + 16) = v21;
      *(_DWORD *)(v19 + 4 * v12 + 32) = v22;
    }
    while (v16 != v18);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayUInt64Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

{
  SEL *v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  SEL *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  char v24;

  OUTLINED_FUNCTION_37_1();
  uint64_t v14 = OUTLINED_FUNCTION_82_0(v13);
  if (!v14) {
    goto LABEL_16;
  }
  uint64_t v15 = v14;
  if (!(v14 >> 62))
  {
    uint64_t v16 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v16) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
LABEL_16:
    OUTLINED_FUNCTION_36_1();
    return;
  }
  uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
  if (!v16) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v17 = OUTLINED_FUNCTION_59_0();
  v11(v17);
  if ((v16 & 0x8000000000000000) == 0)
  {
    uint64_t v18 = 0;
    uint64_t v19 = a10;
    do
    {
      if ((v15 & 0xC000000000000001) != 0) {
        uint64_t v20 = (id)MEMORY[0x24C59DCE0](v18, v15);
      }
      else {
        uint64_t v20 = *(id *)(v15 + 8 * v18 + 32);
      }
      uint64_t v21 = v20;
      uint64_t v22 = [v20 *v10];

      OUTLINED_FUNCTION_77_0();
      if (v24)
      {
        ((void (*)(BOOL, void *, uint64_t))v11)(v23 > 1, v21, 1);
        uint64_t v19 = a10;
      }
      ++v18;
      *(void *)(v19 + 16) = v21;
      *(void *)(v19 + 8 * v12 + 32) = v22;
    }
    while (v16 != v18);
    goto LABEL_15;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt8Bridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayInt8);
  if (!v1) {
    return;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      id v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_charValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt8Bridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, *(char *)(a1 + v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayInt8_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayInt8_, 0, 0, v8);
  }
}

void CAFTypeTestMulti.testArrayInt16Bridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayInt16);
  if (!v1) {
    return;
  }
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    if (v3) {
      goto LABEL_4;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      id v6 = v5;
      unsigned __int16 v7 = (unsigned __int16)objc_msgSend(v5, sel_shortValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(_WORD *)(v9 + 2 * v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

void CAFTypeTestMulti.testArrayInt16Bridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v8 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, *(__int16 *)(a1 + 2 * v4 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayInt16_, isa, isa, v8);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayInt16_, 0, 0, v8);
  }
}

void CAFTypeTestMulti.testArrayInt32Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void CAFTypeTestMulti.testArrayUInt32Bridged.setter()
{
  OUTLINED_FUNCTION_37_1();
  uint64_t v4 = v3;
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t v6 = *(void *)(v1 + 16);
    if (v6)
    {
      unsigned __int16 v7 = v2;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), *v7, *(unsigned int *)(v5 + 4 * v8 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_74_0();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v0, *v4, isa);
  OUTLINED_FUNCTION_36_1();
}

void CAFTypeTestMulti.testArrayInt64Bridged.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void CAFTypeTestMulti.testArrayUInt64Bridged.setter()
{
  OUTLINED_FUNCTION_37_1();
  uint64_t v4 = v3;
  if (v1)
  {
    uint64_t v5 = v1;
    uint64_t v6 = *(void *)(v1 + 16);
    if (v6)
    {
      unsigned __int16 v7 = v2;
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v8 = 0;
      do
      {
        uint64_t v9 = v8 + 1;
        objc_msgSend(objc_allocWithZone(NSNumber), *v7, *(void *)(v5 + 8 * v8 + 32));
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_74_0();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v8 = v9;
      }
      while (v6 != v9);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    Class isa = 0;
  }
  objc_msgSend(v0, *v4, isa);
  OUTLINED_FUNCTION_36_1();
}

char *CAFTypeTestMulti.testArrayFloatBridged.getter()
{
  unint64_t v1 = outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v0, (SEL *)&selRef_testArrayFloat);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  if (!(v1 >> 62))
  {
    uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  if (!v3)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x263F8EE78];
  }
LABEL_4:
  uint64_t v13 = MEMORY[0x263F8EE78];
  unint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v5 = 0;
    uint64_t v6 = v13;
    do
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v7 = (id)MEMORY[0x24C59DCE0](v5, v2);
      }
      else {
        id v7 = *(id *)(v2 + 8 * v5 + 32);
      }
      uint64_t v8 = v7;
      objc_msgSend(v7, sel_floatValue);
      int v10 = v9;

      unint64_t v12 = *(void *)(v13 + 16);
      unint64_t v11 = *(void *)(v13 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
      }
      ++v5;
      *(void *)(v13 + 16) = v12 + 1;
      *(_DWORD *)(v13 + 4 * v12 + 32) = v10;
    }
    while (v3 != v5);
    swift_bridgeObjectRelease();
    return (char *)v6;
  }
  __break(1u);
  return result;
}

void CAFTypeTestMulti.testArrayFloatBridged.setter(uint64_t a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(a1 + 16);
    if (v3)
    {
      uint64_t v11 = MEMORY[0x263F8EE78];
      specialized ContiguousArray.reserveCapacity(_:)();
      uint64_t v4 = 0;
      do
      {
        uint64_t v5 = v4 + 1;
        int v6 = *(_DWORD *)(a1 + 4 * v4 + 32);
        id v7 = objc_allocWithZone(NSNumber);
        LODWORD(v8) = v6;
        objc_msgSend(v7, sel_initWithFloat_, v8);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        uint64_t v4 = v5;
      }
      while (v3 != v5);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setTestArrayFloat_, isa, isa, v11);
  }
  else
  {
    objc_msgSend(v1, sel_setTestArrayFloat_, 0, 0, v11);
  }
}

id CAFTypeTestMultiObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
}

uint64_t CAFTypeTestMultiObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTypeTestMultiObservable.userVisibleLabel.getter()
{
  return CAFTypeTestMultiObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  swift_retain();
  unint64_t v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.$userVisibleLabel.getter()
{
  return CAFTypeTestMultiObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testBool : CAFTypeTestMultiObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testBool : CAFTypeTestMultiObservable(unsigned __int8 *a1)
{
  return CAFTypeTestMultiObservable.testBool.setter(*a1);
}

uint64_t CAFTypeTestMultiObservable.testBool.getter()
{
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  id v1 = v0;
  uint64_t v2 = (void (*)(id *, void))OUTLINED_FUNCTION_49_1();
  uint64_t v4 = *v3;
  v2(v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFTypeTestMultiObservable.testBool.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFTypeTestMultiObservable.testBool.modify())(uint64_t a1)
{
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  return CAFTypeTestMultiObservable.testBool.modify;
}

void CAFTypeTestMultiObservable.testBool.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFTypeTestMultiObservable.$testBool.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testUInt8.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testUInt8.setter);
}

uint64_t CAFTypeTestMultiObservable.testUInt8.getter()
{
  return CAFTypeTestMultiObservable.testUInt8.getter();
}

{
  uint64_t v0;
  id v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v7;
  OUTLINED_FUNCTION_73_0();
  uint64_t v3 = *v2;
  id v4 = v2[1];
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | (v4 << 8);
}

uint64_t CAFTypeTestMultiObservable.testUInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestMultiObservable.testUInt8.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

{
  void (*v0)(void, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned __int8 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 89) << 8), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestMultiObservable.$testUInt8.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testUInt16.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testUInt16.setter);
}

uint64_t CAFTypeTestMultiObservable.testUInt16.getter()
{
  return CAFTypeTestMultiObservable.testUInt16.getter();
}

{
  uint64_t v0;
  id v1;
  unsigned __int16 *v2;
  int v3;
  int v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  char v7 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v7;
  OUTLINED_FUNCTION_73_0();
  uint64_t v3 = *v2;
  id v4 = *((unsigned __int8 *)v2 + 2);
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | (v4 << 16);
}

uint64_t CAFTypeTestMultiObservable.testUInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestMultiObservable.testUInt16.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

{
  void (*v0)(void, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned __int16 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 90) << 16), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestMultiObservable.$testUInt16.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMultiObservable.testUInt32.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestMultiObservable.testUInt32.setter);
}

unint64_t CAFTypeTestMultiObservable.testUInt32.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

{
  void *v0;
  id v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned __int8 v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_49_1();
  uint64_t v3 = *v2;
  id v4 = *((unsigned char *)v2 + 4);
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | ((unint64_t)v4 << 32);
}

uint64_t CAFTypeTestMultiObservable.testUInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  swift_getKeyPath();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestMultiObservable.testUInt32.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

{
  void (*v0)(unint64_t, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned int *)(v2 + 88) | ((unint64_t)*(unsigned __int8 *)(v1 + 92) << 32), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestMultiObservable.$testUInt32.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testUInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testUInt64.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt64 : CAFTypeTestMultiObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CAFTypeTestMultiObservable.testUInt64.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8), a3, a4, a5, a6, a7, a8, v9);
}

uint64_t CAFTypeTestMultiObservable.testUInt64.getter()
{
  return CAFTypeTestMultiObservable.testUInt64.getter();
}

{
  void *v0;
  id v1;
  void (*v2)(id *, void);
  uint64_t *v3;
  uint64_t v4;
  id v6[5];

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  uint64_t v1 = v0;
  uint64_t v2 = (void (*)(id *, void))OUTLINED_FUNCTION_49_1();
  id v4 = *v3;
  v2(v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFTypeTestMultiObservable.testUInt64.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestMultiObservable.testUInt64.setter(a1, a2, (uint64_t)&unk_249474260, (uint64_t)&unk_249474288, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  OUTLINED_FUNCTION_81_0();
  uint64_t v21 = v10;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = v9;
  OUTLINED_FUNCTION_67_0();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19, a9, v21);
}

void CAFTypeTestMultiObservable.testUInt64.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = malloc(0x68uLL);
  OUTLINED_FUNCTION_71_0((uint64_t)v3);
  *(void *)(v1 + 88) = swift_getKeyPath();
  *(void *)(v1 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_70_0(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestMultiObservable.testUInt64.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFTypeTestMultiObservable.$testUInt64.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testInt8 : CAFTypeTestMultiObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testInt8.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testInt8.setter);
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t CAFTypeTestMultiObservable.testInt8.getter()
{
  return CAFTypeTestMultiObservable.testUInt8.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt8.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestMultiObservable.testInt8.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt8.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testInt16.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testInt16.setter);
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (*((unsigned __int8 *)a1 + 2) << 16));
}

uint64_t CAFTypeTestMultiObservable.testInt16.getter()
{
  return CAFTypeTestMultiObservable.testUInt16.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt16.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestMultiObservable.testInt16.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt16.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMultiObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestMultiObservable.testInt32.setter);
}

uint64_t key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

unint64_t CAFTypeTestMultiObservable.testInt32.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt32.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestMultiObservable.testInt32.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestMultiObservable.$testInt32.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testInt64.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testInt64 : CAFTypeTestMultiObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CAFTypeTestMultiObservable.testInt64.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8), a3, a4, a5, a6, a7, a8, v9);
}

uint64_t CAFTypeTestMultiObservable.testInt64.getter()
{
  return CAFTypeTestMultiObservable.testUInt64.getter();
}

uint64_t CAFTypeTestMultiObservable.testInt64.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestMultiObservable.testUInt64.setter(a1, a2, (uint64_t)&unk_249474380, (uint64_t)&unk_2494743A8, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

void CAFTypeTestMultiObservable.testInt64.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = malloc(0x68uLL);
  OUTLINED_FUNCTION_71_0((uint64_t)v3);
  *(void *)(v1 + 88) = swift_getKeyPath();
  *(void *)(v1 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_70_0(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestMultiObservable.testInt64.modify(uint64_t a1, uint64_t a2)
{
}

void CAFTypeTestMultiObservable.testUInt64.modify(uint64_t a1, uint64_t a2, void (*a3)(void, void, id, void, void))
{
  char v3 = *(void **)a1;
  a3(*(void *)(*(void *)a1 + 56), *(unsigned __int8 *)(*(void *)a1 + 64), *(id *)(*(void *)a1 + 80), *(void *)(*(void *)a1 + 88), *(void *)(*(void *)a1 + 96));

  free(v3);
}

uint64_t CAFTypeTestMultiObservable.$testInt64.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestMultiObservable.testFloat : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMultiObservable.testFloat.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testFloat : CAFTypeTestMultiObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestMultiObservable.testFloat.setter);
}

unint64_t CAFTypeTestMultiObservable.testFloat.getter()
{
  return CAFTypeTestMultiObservable.testUInt32.getter();
}

uint64_t CAFTypeTestMultiObservable.testFloat.setter()
{
  return CAFTypeTestMultiObservable.testUInt32.setter();
}

void CAFTypeTestMultiObservable.testFloat.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt32.modify();
}

uint64_t CAFTypeTestMultiObservable.$testFloat.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testString : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testString.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testString : CAFTypeTestMultiObservable(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CAFTypeTestMultiObservable.testString.setter(v1, v2, v3, v4, v5, v6, v7, v8, v10);
}

uint64_t CAFTypeTestMultiObservable.testString.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return OUTLINED_FUNCTION_83_0();
}

uint64_t CAFTypeTestMultiObservable.testString.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestMultiObservable.testString.setter(a1, a2, (uint64_t)&unk_249474410, (uint64_t)&unk_249474438, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  OUTLINED_FUNCTION_81_0();
  uint64_t v21 = v10;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = v9;
  OUTLINED_FUNCTION_67_0();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19, a9, v21);
}

uint64_t (*CAFTypeTestMultiObservable.testString.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_83_0();
  void *v3 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  v3[1] = v7;
  return CAFTypeTestMultiObservable.testString.modify;
}

#error "2494001D4: call analysis failed (funcsize=30)"

uint64_t CAFTypeTestMultiObservable.$testString.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testData : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testData : CAFTypeTestMultiObservable(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  outlined copy of Data?(*a1, v2);
  return CAFTypeTestMultiObservable.testData.setter(v1, v2, v3, v4, v5, v6, v7, v8, v10);
}

uint64_t CAFTypeTestMultiObservable.testData.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.testData.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestMultiObservable.testString.setter(a1, a2, (uint64_t)&unk_249474458, (uint64_t)&unk_249474480, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

uint64_t (*CAFTypeTestMultiObservable.testData.modify(void *a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_83_0();
  specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testData.modify;
}

#error "249400490: call analysis failed (funcsize=32)"

uint64_t CAFTypeTestMultiObservable.$testData.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestMultiObservable.testRawData.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.$testRawData.getter()
{
  return CAFTypeTestMultiObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testRawData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testEnum : CAFTypeTestMultiObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testEnum.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testEnum : CAFTypeTestMultiObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testEnum.setter);
}

uint64_t CAFTypeTestMultiObservable.testEnum.getter()
{
  return CAFTypeTestMultiObservable.testUInt8.getter();
}

uint64_t CAFTypeTestMultiObservable.testEnum.setter()
{
  return CAFTypeTestMultiObservable.testUInt8.setter();
}

void CAFTypeTestMultiObservable.testEnum.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt8.modify();
}

uint64_t CAFTypeTestMultiObservable.$testEnum.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testDimensionUnitRawValue : CAFTypeTestMultiObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testDimensionUnitRawValue : CAFTypeTestMultiObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter);
}

uint64_t CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter()
{
  return CAFTypeTestMultiObservable.testUInt16.getter();
}

uint64_t CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter()
{
  return CAFTypeTestMultiObservable.testUInt16.setter();
}

void CAFTypeTestMultiObservable.testDimensionUnitRawValue.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestMultiObservable.testUInt16.modify();
}

uint64_t CAFTypeTestMultiObservable.$testDimensionUnitRawValue.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItem : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testComplexItem.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItem : CAFTypeTestMultiObservable(id *a1)
{
  id v1 = *a1;
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItem.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_61_0();
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = OUTLINED_FUNCTION_83_0();
  uint64_t v2 = v0(v1);
  swift_release();
  swift_release();
  return v2;
}

uint64_t CAFTypeTestMultiObservable.testComplexItem.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  swift_getKeyPath();
  OUTLINED_FUNCTION_80_0();
  id v1 = v0;
  OUTLINED_FUNCTION_54_0();

  return v2();
}

void (*CAFTypeTestMultiObservable.testComplexItem.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *id v1 = OUTLINED_FUNCTION_78_0(v3);
  return CAFTypeTestMultiObservable.testComplexItem.modify;
}

void CAFTypeTestMultiObservable.testComplexItem.modify(uint64_t a1, char a2)
{
}

{
  void *v2;
  id v3;
  void (*v4)(void);
  id v5;
  void (*v6)(void);
  id v7;
  uint64_t vars8;

  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    char v7 = *(id *)a1;
    uint64_t v3 = v2;
    OUTLINED_FUNCTION_54_0();
    v4();
  }
  else
  {
    uint64_t v5 = v2;
    OUTLINED_FUNCTION_54_0();
    v6();
  }
}

uint64_t CAFTypeTestMultiObservable.$testComplexItem.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayBool : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayBool : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayBool.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayBool.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayBool.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayBool.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

{
  void *v2;
  id v3;
  void (*v4)(void);
  id v6;
  uint64_t (*v7)(void);
  uint64_t vars8;

  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = v2;
    OUTLINED_FUNCTION_54_0();
    v4();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v2;
    OUTLINED_FUNCTION_54_0();
    return v7();
  }
}

uint64_t CAFTypeTestMultiObservable.$testArrayBool.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt8 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt8 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayUInt8.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayUInt8.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayUInt8.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt8.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt16 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayUInt16.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayUInt16.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayUInt16.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt16.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt32 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayUInt32.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayUInt32.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayUInt32.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt32.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayUInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayUInt64 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayUInt64.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayUInt64.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayUInt64.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayUInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayUInt64.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt8 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt8.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt8 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayInt8.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayInt8.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayInt8.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayInt8.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt8.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt16 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt16.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt16 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayInt16.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayInt16.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayInt16.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayInt16.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt16.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt32 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt32.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt32 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayInt32.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayInt32.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayInt32.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayInt32.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt32.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayInt64 : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt64.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayInt64 : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayInt64.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayInt64.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayInt64.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayInt64.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayInt64.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayFloat : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayFloat.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayFloat : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayFloat.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayFloat.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayFloat.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayFloat.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayFloat.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayString : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayString.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayString : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayString.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayString.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayString.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayString.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayString.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayString.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayString.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testArrayData : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testArrayData.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testArrayData : CAFTypeTestMultiObservable()
{
  return CAFTypeTestMultiObservable.testArrayData.setter();
}

uint64_t CAFTypeTestMultiObservable.testArrayData.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testArrayData.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

uint64_t (*CAFTypeTestMultiObservable.testArrayData.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_7_5(v3);
  *id v1 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestMultiObservable.testArrayData.modify;
}

uint64_t CAFTypeTestMultiObservable.testArrayData.modify(uint64_t a1, char a2)
{
  return CAFTypeTestMultiObservable.testArrayBool.modify(a1, a2);
}

uint64_t CAFTypeTestMultiObservable.$testArrayData.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestMultiObservable.testArrayRawData.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.$testArrayRawData.getter()
{
  return CAFTypeTestMultiObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayRawData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItems : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testComplexItems.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItems : CAFTypeTestMultiObservable(id *a1)
{
  id v1 = *a1;
  return CAFTypeTestMultiObservable.testComplexItems.setter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItems.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItems.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

void (*CAFTypeTestMultiObservable.testComplexItems.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *id v1 = OUTLINED_FUNCTION_78_0(v3);
  return CAFTypeTestMultiObservable.testComplexItems.modify;
}

void CAFTypeTestMultiObservable.testComplexItems.modify(uint64_t a1, char a2)
{
}

uint64_t CAFTypeTestMultiObservable.$testComplexItems.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItemValue : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testComplexItemValue.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItemValue : CAFTypeTestMultiObservable(id *a1)
{
  id v1 = *a1;
  return CAFTypeTestMultiObservable.testComplexItemValue.setter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemValue.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemValue.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

void (*CAFTypeTestMultiObservable.testComplexItemValue.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *id v1 = OUTLINED_FUNCTION_78_0(v3);
  return CAFTypeTestMultiObservable.testComplexItem.modify;
}

uint64_t CAFTypeTestMultiObservable.$testComplexItemValue.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestMultiObservable.testComplexItemList : CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestMultiObservable.testComplexItemList.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestMultiObservable.testComplexItemList : CAFTypeTestMultiObservable(id *a1)
{
  id v1 = *a1;
  return CAFTypeTestMultiObservable.testComplexItemList.setter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemList.getter()
{
  return CAFTypeTestMultiObservable.testComplexItem.getter();
}

uint64_t CAFTypeTestMultiObservable.testComplexItemList.setter()
{
  return CAFTypeTestMultiObservable.testComplexItem.setter();
}

void (*CAFTypeTestMultiObservable.testComplexItemList.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *id v1 = OUTLINED_FUNCTION_78_0(v3);
  return CAFTypeTestMultiObservable.testComplexItems.modify;
}

uint64_t CAFTypeTestMultiObservable.$testComplexItemList.getter()
{
  return CAFTypeTestMultiObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestMultiObservable.$testBool.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = OUTLINED_FUNCTION_10_5();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable.name.getter()
{
  return CAFTypeTestMultiObservable.userVisibleLabel.getter();
}

uint64_t CAFTypeTestMultiObservable.$name.getter()
{
  return CAFTypeTestMultiObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestMultiObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTypeTestMultiObservable._description.getter()
{
  uint64_t v1 = v0;
  v229._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v229._countAndFlagsBits = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed);
  objc_msgSend(v3, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_4_5();
  if (v6) {
    uint64_t v5 = CAFTypeTestMultiObservable.userVisibleLabel.getter();
  }
  v228._countAndFlagsBits = v5;
  v228._object = v4;
  unsigned int v7 = objc_msgSend(v3, sel_registeredForTestBool);
  uint64_t v8 = 0x73696765726E753CLL;
  unint64_t v9 = 0xEE003E6465726574;
  if (v7)
  {
    CAFTypeTestMultiObservable.testBool.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v8 = OUTLINED_FUNCTION_8_7();
  }
  v227 = (void *)v9;
  objc_msgSend(v3, sel_registeredForTestUInt8);
  OUTLINED_FUNCTION_4_5();
  if (v12)
  {
    uint64_t v13 = CAFTypeTestMultiObservable.testUInt8.getter();
    OUTLINED_FUNCTION_65_0(v13);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt8?);
    uint64_t v11 = OUTLINED_FUNCTION_8_7();
  }
  v226._countAndFlagsBits = v11;
  v226._object = v10;
  objc_msgSend(v3, sel_registeredForTestUInt16);
  OUTLINED_FUNCTION_4_5();
  if (v16)
  {
    uint64_t v17 = CAFTypeTestMultiObservable.testUInt16.getter();
    OUTLINED_FUNCTION_64_0(v17);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt16?);
    uint64_t v15 = OUTLINED_FUNCTION_8_7();
  }
  v225._countAndFlagsBits = v15;
  v225._object = v14;
  objc_msgSend(v3, sel_registeredForTestUInt32);
  OUTLINED_FUNCTION_4_5();
  if (v20)
  {
    unint64_t v21 = CAFTypeTestMultiObservable.testUInt32.getter();
    OUTLINED_FUNCTION_63_0(v21);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    uint64_t v19 = OUTLINED_FUNCTION_8_7();
  }
  v224._countAndFlagsBits = v19;
  v224._object = v18;
  objc_msgSend(v3, sel_registeredForTestUInt64);
  OUTLINED_FUNCTION_4_5();
  if (v24)
  {
    CAFTypeTestMultiObservable.testUInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UInt64?);
    uint64_t v23 = OUTLINED_FUNCTION_8_7();
  }
  v223._countAndFlagsBits = v23;
  v223._object = v22;
  objc_msgSend(v3, sel_registeredForTestInt8);
  OUTLINED_FUNCTION_4_5();
  if (v27)
  {
    uint64_t v28 = CAFTypeTestMultiObservable.testInt8.getter();
    OUTLINED_FUNCTION_65_0(v28);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
    uint64_t v26 = OUTLINED_FUNCTION_8_7();
  }
  v222._countAndFlagsBits = v26;
  v222._object = v25;
  objc_msgSend(v3, sel_registeredForTestInt16);
  OUTLINED_FUNCTION_4_5();
  if (v31)
  {
    uint64_t v32 = CAFTypeTestMultiObservable.testInt16.getter();
    OUTLINED_FUNCTION_64_0(v32);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Int16?);
    uint64_t v30 = OUTLINED_FUNCTION_8_7();
  }
  v221._countAndFlagsBits = v30;
  v221._object = v29;
  objc_msgSend(v3, sel_registeredForTestInt32);
  OUTLINED_FUNCTION_4_5();
  if (v35)
  {
    unint64_t v36 = CAFTypeTestMultiObservable.testInt32.getter();
    OUTLINED_FUNCTION_63_0(v36);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int32?);
    uint64_t v34 = OUTLINED_FUNCTION_8_7();
  }
  v220._countAndFlagsBits = v34;
  v220._object = v33;
  objc_msgSend(v3, sel_registeredForTestInt64);
  OUTLINED_FUNCTION_4_5();
  if (v39)
  {
    CAFTypeTestMultiObservable.testInt64.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int64?);
    uint64_t v38 = OUTLINED_FUNCTION_8_7();
  }
  v219._countAndFlagsBits = v38;
  v219._object = v37;
  objc_msgSend(v3, sel_registeredForTestFloat);
  OUTLINED_FUNCTION_4_5();
  if (v42)
  {
    unint64_t v43 = CAFTypeTestMultiObservable.testFloat.getter();
    OUTLINED_FUNCTION_63_0(v43);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Float?);
    uint64_t v41 = OUTLINED_FUNCTION_8_7();
  }
  v218._countAndFlagsBits = v41;
  v218._object = v40;
  objc_msgSend(v3, sel_registeredForTestString);
  OUTLINED_FUNCTION_4_5();
  if (v46)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v47 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v47, v48, v49);
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v45 = OUTLINED_FUNCTION_8_7();
  }
  v217._countAndFlagsBits = v45;
  v217._object = v44;
  objc_msgSend(v3, sel_registeredForTestData);
  OUTLINED_FUNCTION_4_5();
  if (v52)
  {
    CAFTypeTestMultiObservable.testData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    uint64_t v51 = OUTLINED_FUNCTION_8_7();
  }
  v216._countAndFlagsBits = v51;
  v216._object = v50;
  objc_msgSend(v3, sel_registeredForTestRawData);
  OUTLINED_FUNCTION_4_5();
  if (v55)
  {
    CAFTypeTestMultiObservable.testRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    uint64_t v54 = OUTLINED_FUNCTION_8_7();
  }
  v215._countAndFlagsBits = v54;
  v215._object = v53;
  objc_msgSend(v3, sel_registeredForTestEnum);
  OUTLINED_FUNCTION_4_5();
  if (v58)
  {
    uint64_t v59 = CAFTypeTestMultiObservable.testEnum.getter();
    OUTLINED_FUNCTION_65_0(v59);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFButtonAction?);
    uint64_t v57 = OUTLINED_FUNCTION_8_7();
  }
  v214._countAndFlagsBits = v57;
  v214._object = v56;
  objc_msgSend(v3, sel_registeredForTestDimensionUnit);
  OUTLINED_FUNCTION_4_5();
  if (v62)
  {
    uint64_t v63 = CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter();
    OUTLINED_FUNCTION_64_0(v63);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFUnitType?);
    uint64_t v61 = OUTLINED_FUNCTION_8_7();
  }
  v213._countAndFlagsBits = v61;
  v213._object = v60;
  objc_msgSend(v3, sel_registeredForTestComplexItem);
  OUTLINED_FUNCTION_4_5();
  if (v66)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v67 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v67, v68, v69);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    uint64_t v65 = OUTLINED_FUNCTION_8_7();
  }
  v212._countAndFlagsBits = v65;
  v212._object = v64;
  objc_msgSend(v3, sel_registeredForTestArrayBool);
  OUTLINED_FUNCTION_4_5();
  if (v72)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v73 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v73, v74, v75);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Bool]?);
    uint64_t v71 = OUTLINED_FUNCTION_8_7();
  }
  v211._countAndFlagsBits = v71;
  v211._object = v70;
  objc_msgSend(v3, sel_registeredForTestArrayUInt8);
  OUTLINED_FUNCTION_4_5();
  if (v78)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v79 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v79, v80, v81);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt8]?);
    uint64_t v77 = OUTLINED_FUNCTION_8_7();
  }
  v210._countAndFlagsBits = v77;
  v210._object = v76;
  objc_msgSend(v3, sel_registeredForTestArrayUInt16);
  OUTLINED_FUNCTION_4_5();
  if (v84)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v85 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v85, v86, v87);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt16]?);
    uint64_t v83 = OUTLINED_FUNCTION_8_7();
  }
  v209._countAndFlagsBits = v83;
  v209._object = v82;
  objc_msgSend(v3, sel_registeredForTestArrayUInt32);
  OUTLINED_FUNCTION_4_5();
  if (v90)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v91 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v91, v92, v93);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [UInt32]?);
    uint64_t v89 = OUTLINED_FUNCTION_8_7();
  }
  v208._countAndFlagsBits = v89;
  v208._object = v88;
  objc_msgSend(v3, sel_registeredForTestArrayUInt64);
  OUTLINED_FUNCTION_4_5();
  if (v96)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v97 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v97, v98, v99);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UInt64]?);
    uint64_t v95 = OUTLINED_FUNCTION_8_7();
  }
  v207._countAndFlagsBits = v95;
  v207._object = v94;
  objc_msgSend(v3, sel_registeredForTestArrayInt8);
  OUTLINED_FUNCTION_4_5();
  if (v102)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v103 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v103, v104, v105);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int8]?);
    uint64_t v101 = OUTLINED_FUNCTION_8_7();
  }
  v206._countAndFlagsBits = v101;
  v206._object = v100;
  objc_msgSend(v3, sel_registeredForTestArrayInt16);
  OUTLINED_FUNCTION_4_5();
  if (v108)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v109 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v109, v110, v111);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int16]?);
    uint64_t v107 = OUTLINED_FUNCTION_8_7();
  }
  v205._countAndFlagsBits = v107;
  v205._object = v106;
  objc_msgSend(v3, sel_registeredForTestArrayInt32);
  OUTLINED_FUNCTION_4_5();
  if (v114)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v115 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v115, v116, v117);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Int32]?);
    uint64_t v113 = OUTLINED_FUNCTION_8_7();
  }
  v204._countAndFlagsBits = v113;
  v204._object = v112;
  objc_msgSend(v3, sel_registeredForTestArrayInt64);
  OUTLINED_FUNCTION_4_5();
  if (v120)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v121 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v121, v122, v123);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int64]?);
    uint64_t v119 = OUTLINED_FUNCTION_8_7();
  }
  v203._countAndFlagsBits = v119;
  v203._object = v118;
  objc_msgSend(v3, sel_registeredForTestArrayFloat);
  OUTLINED_FUNCTION_4_5();
  if (v126)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v127 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v127, v128, v129);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Float]?);
    uint64_t v125 = OUTLINED_FUNCTION_8_7();
  }
  v202._countAndFlagsBits = v125;
  v202._object = v124;
  objc_msgSend(v3, sel_registeredForTestArrayString);
  OUTLINED_FUNCTION_0_4();
  uint64_t v131 = (void *)0xEE003E6465726574;
  if (v132)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v133 = OUTLINED_FUNCTION_4_8();
    specialized static SafePublished.subscript.getter(v133, v134, v135);
    OUTLINED_FUNCTION_24_1();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String]?);
    uint64_t v130 = OUTLINED_FUNCTION_8_7();
    uint64_t v131 = v136;
  }
  uint64_t v201 = v130;
  objc_msgSend(v3, sel_registeredForTestArrayData);
  OUTLINED_FUNCTION_0_4();
  uint64_t v138 = (void *)0xEE003E6465726574;
  if (v139)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v140 = OUTLINED_FUNCTION_39_0();
    specialized static SafePublished.subscript.getter(v140, v141, v142);
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    uint64_t v137 = OUTLINED_FUNCTION_8_7();
    uint64_t v138 = v143;
  }
  uint64_t v200 = v137;
  objc_msgSend(v3, sel_registeredForTestArrayRawData);
  OUTLINED_FUNCTION_0_4();
  uint64_t v145 = (void *)0xEE003E6465726574;
  if (v146)
  {
    CAFTypeTestMultiObservable.testArrayRawData.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Data]?);
    uint64_t v144 = OUTLINED_FUNCTION_8_7();
    uint64_t v145 = v147;
  }
  uint64_t v199 = v144;
  objc_msgSend(v3, sel_registeredForTestComplexItems);
  OUTLINED_FUNCTION_0_4();
  uint64_t v149 = (void *)0xEE003E6465726574;
  if (v150)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v151 = OUTLINED_FUNCTION_39_0();
    specialized static SafePublished.subscript.getter(v151, v152, v153);
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    uint64_t v148 = OUTLINED_FUNCTION_8_7();
    uint64_t v149 = v154;
  }
  uint64_t v198 = v148;
  objc_msgSend(v3, sel_registeredForTestComplexItemValue);
  OUTLINED_FUNCTION_0_4();
  v156 = (void *)0xEE003E6465726574;
  if (v157)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    uint64_t v158 = OUTLINED_FUNCTION_39_0();
    specialized static SafePublished.subscript.getter(v158, v159, v160);
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFTestComplexItem?);
    uint64_t v155 = OUTLINED_FUNCTION_8_7();
    v156 = v161;
  }
  if (objc_msgSend(v3, sel_registeredForTestComplexItemList, v155))
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v163 = swift_getKeyPath();
    specialized static SafePublished.subscript.getter(v1, KeyPath, v163);
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFTestComplexItems?);
    v229._countAndFlagsBits = OUTLINED_FUNCTION_8_7();
    v229._object = v164;
  }
  static String._createEmpty(withInitialCapacity:)(657);
  v165._object = (void *)0x8000000249488810;
  v165._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v165);
  _print_unlocked<A, B>(_:_:)();
  v166._countAndFlagsBits = 0xD000000000000015;
  v166._object = (void *)0x80000002494870C0;
  String.append(_:)(v166);
  String.append(_:)(v228);
  swift_bridgeObjectRelease();
  v167._countAndFlagsBits = OUTLINED_FUNCTION_28_2() & 0xFFFFFFFFFFFFLL | 0x6F42000000000000;
  String.append(_:)(v167);
  v168._countAndFlagsBits = v8;
  v168._object = v227;
  String.append(_:)(v168);
  swift_bridgeObjectRelease();
  uint64_t v169 = OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_52_0(v169, v170 | 0x3A380000);
  String.append(_:)(v226);
  swift_bridgeObjectRelease();
  uint64_t v171 = OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_9_4(v171, v172 | 0x36310000);
  String.append(_:)(v225);
  swift_bridgeObjectRelease();
  uint64_t v173 = OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_9_4(v173, v174 | 0x32330000);
  String.append(_:)(v224);
  swift_bridgeObjectRelease();
  uint64_t v175 = OUTLINED_FUNCTION_21_2();
  OUTLINED_FUNCTION_9_4(v175, v176 | 0x34360000);
  String.append(_:)(v223);
  swift_bridgeObjectRelease();
  v177._countAndFlagsBits = OUTLINED_FUNCTION_32_0();
  v177._object = (void *)0xEC000000203A3874;
  String.append(_:)(v177);
  String.append(_:)(v222);
  swift_bridgeObjectRelease();
  uint64_t v178 = OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_52_0(v178, 0x3A363174u);
  String.append(_:)(v221);
  swift_bridgeObjectRelease();
  uint64_t v179 = OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_52_0(v179, 0x3A323374u);
  String.append(_:)(v220);
  swift_bridgeObjectRelease();
  uint64_t v180 = OUTLINED_FUNCTION_32_0();
  OUTLINED_FUNCTION_52_0(v180, 0x3A343674u);
  String.append(_:)(v219);
  swift_bridgeObjectRelease();
  uint64_t v181 = OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_52_0(v181 & 0xFFFFFFFFFFFFLL | 0x6C46000000000000, 0x3A74616Fu);
  String.append(_:)(v218);
  swift_bridgeObjectRelease();
  uint64_t v182 = OUTLINED_FUNCTION_28_2();
  OUTLINED_FUNCTION_9_4(v182 & 0xFFFFFFFFFFFFLL | 0x7453000000000000, 0x676E6972u);
  String.append(_:)(v217);
  swift_bridgeObjectRelease();
  v183._countAndFlagsBits = OUTLINED_FUNCTION_28_2() & 0xFFFFFFFFFFFFLL | 0x6144000000000000;
  v183._object = (void *)0xEC000000203A6174;
  String.append(_:)(v183);
  String.append(_:)(v216);
  swift_bridgeObjectRelease();
  v184._countAndFlagsBits = OUTLINED_FUNCTION_28_2() & 0xFFFFFFFFFFFFLL | 0x6152000000000000;
  v184._object = (void *)0xEF203A6174614477;
  String.append(_:)(v184);
  String.append(_:)(v215);
  swift_bridgeObjectRelease();
  v185._countAndFlagsBits = OUTLINED_FUNCTION_28_2() & 0xFFFFFFFFFFFFLL | 0x6E45000000000000;
  String.append(_:)(v185);
  String.append(_:)(v214);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_1((uint64_t)", testDimensionUnitRawValue: ");
  String.append(_:)(v213);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_1((uint64_t)", testComplexItem: ");
  String.append(_:)(v212);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_1((uint64_t)", testArrayBool: ");
  String.append(_:)(v211);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", testArrayUInt8: ");
  String.append(_:)(v210);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_1((uint64_t)", testArrayUInt16: ");
  String.append(_:)(v209);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_1((uint64_t)", testArrayUInt32: ");
  String.append(_:)(v208);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_1((uint64_t)", testArrayUInt64: ");
  String.append(_:)(v207);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_1((uint64_t)", testArrayInt8: ");
  String.append(_:)(v206);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", testArrayInt16: ");
  String.append(_:)(v205);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", testArrayInt32: ");
  String.append(_:)(v204);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", testArrayInt64: ");
  String.append(_:)(v203);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", testArrayFloat: ");
  String.append(_:)(v202);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_33_1((uint64_t)", testArrayString: ");
  v186._countAndFlagsBits = v201;
  v186._object = v131;
  String.append(_:)(v186);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_40_1((uint64_t)", testArrayData: ");
  v187._countAndFlagsBits = v200;
  v187._object = v138;
  String.append(_:)(v187);
  swift_bridgeObjectRelease();
  v188._object = (void *)0x80000002494889F0;
  v188._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v188);
  v189._countAndFlagsBits = v199;
  v189._object = v145;
  String.append(_:)(v189);
  swift_bridgeObjectRelease();
  v190._object = (void *)0x8000000249488A10;
  v190._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v190);
  v191._countAndFlagsBits = v198;
  v191._object = v149;
  String.append(_:)(v191);
  swift_bridgeObjectRelease();
  v192._countAndFlagsBits = 0xD000000000000018;
  v192._object = (void *)0x8000000249488A30;
  String.append(_:)(v192);
  v193._countAndFlagsBits = v197;
  v193._object = v156;
  String.append(_:)(v193);
  swift_bridgeObjectRelease();
  v194._countAndFlagsBits = 0xD000000000000017;
  v194._object = (void *)0x8000000249488A50;
  String.append(_:)(v194);
  String.append(_:)(v229);
  swift_bridgeObjectRelease();
  v195._countAndFlagsBits = 4095264;
  v195._object = (void *)0xE300000000000000;
  String.append(_:)(v195);
  return String.init(stringInterpolation:)();
}

uint64_t CAFTypeTestMultiObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFTypeTestMultiObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFTypeTestMultiObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFTypeTestMultiObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTypeTestMultiObservable.init(_:)(a1);
}

id CAFTypeTestMultiObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, String>);
  OUTLINED_FUNCTION_10_1();
  unint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testBool;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v11 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt16?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt32?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, UInt64?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v20] = v21;
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int16?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v22] = v23;
  uint64_t v24 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int32?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v24] = v25;
  uint64_t v26 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Int64?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v26] = v27;
  uint64_t v28 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Float?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v28] = v29;
  uint64_t v30 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v31 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v30] = specialized SafePublished.init(observedValuekeypath:)(v31);
  uint64_t v32 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, Data?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v33 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v32] = specialized SafePublished.init(observedValuekeypath:)(v33);
  uint64_t v34 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, Data?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v35 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v34] = specialized SafePublished.init(observedValuekeypath:)(v35);
  uint64_t v36 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFButtonAction?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v36] = v37;
  uint64_t v38 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFUnitType?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v38] = v39;
  uint64_t v40 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFTestComplexItem?>);
  OUTLINED_FUNCTION_10_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v40] = v41;
  uint64_t v42 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayBool;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Bool]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v42] = v43;
  uint64_t v44 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt8]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v44] = v45;
  uint64_t v46 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt16]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v46] = v47;
  uint64_t v48 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt32]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v48] = v49;
  uint64_t v50 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [UInt64]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v50] = v51;
  uint64_t v52 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt8;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int8]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v52] = v53;
  uint64_t v54 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt16;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int16]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v54] = v55;
  uint64_t v56 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int32]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v56] = v57;
  uint64_t v58 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Int64]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v58] = v59;
  uint64_t v60 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayFloat;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Float]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v60] = v61;
  uint64_t v62 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [String]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v62] = v63;
  uint64_t v64 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, [Data]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v64] = v65;
  uint64_t v66 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayRawData;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTypeTestMultiObservable, [Data]?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v66] = v67;
  uint64_t v68 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFTypeTestMultiObservable, CAFTestComplexItems?>);
  OUTLINED_FUNCTION_10_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v68] = v69;
  uint64_t v70 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v70] = v71;
  uint64_t v72 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v72] = v73;
  uint64_t v74 = OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__name;
  swift_getKeyPath();
  swift_allocObject();
  uint64_t v75 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v74] = specialized SafePublished.init(observedValuekeypath:)(v75);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed] = a1;
  id v76 = a1;

  v79.receiver = v9;
  v79.super_class = (Class)type metadata accessor for CAFTypeTestMultiObservable();
  id v77 = objc_msgSendSuper2(&v79, sel_init);
  objc_msgSend(v76, sel_registerObserver_, v77);

  return v77;
}

uint64_t CAFTypeTestMultiObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTypeTestMultiObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTypeTestMultiObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTypeTestMultiObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTypeTestMultiObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTypeTestMultiObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTypeTestMultiObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTypeTestMultiObservable(void **a1)
{
  return CAFTypeTestMultiObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTypeTestMultiObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTypeTestMultiObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)()
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_61_0();
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestBool:)()
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt8, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(uint64_t a1, unsigned __int16 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt16, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt32, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(uint64_t a1, uint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testUInt64, (void (*)(uint64_t, void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt8:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt8, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt16:)(uint64_t a1, unsigned __int16 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt16, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt32:)(uint64_t a1, unsigned int a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt32, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt32:)(uint64_t a1, unsigned int a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestInt64:)(uint64_t a1, uint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testInt64, (void (*)(uint64_t, void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt64:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void))
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestFloat:)()
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestString:)()
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestData:)()
{
  OUTLINED_FUNCTION_61_0();
  OUTLINED_FUNCTION_0_2();
  OUTLINED_FUNCTION_10_5();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_93();
  specialized SafePublished.value.setter();
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestRawData:)()
{
  OUTLINED_FUNCTION_61_0();
  swift_retain();
  outlined copy of Data?(v1, v0);
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

void @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestData:)(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  OUTLINED_FUNCTION_81_0();
  uint64_t v21 = v20;
  uint64_t v22 = v18;
  id v35 = v23;
  if (v19)
  {
    uint64_t v24 = v19;
    id v25 = v18;
    id v26 = v35;
    id v27 = v24;
    uint64_t v28 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v30 = v29;
  }
  else
  {
    id v31 = v18;
    id v32 = v35;
    uint64_t v28 = 0;
    unint64_t v30 = 0xF000000000000000;
  }
  v21();
  outlined consume of Data?(v28, v30);

  OUTLINED_FUNCTION_67_0();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestEnum:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testEnum, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt8:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestDimensionUnitRawValue:)(uint64_t a1, unsigned __int16 a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testDimensionUnitRawValue, (void (*)(void))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestUInt16:)(uint64_t a1, unsigned __int16 a2, uint64_t a3, void (*a4)(void))
{
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(uint64_t a1, void *a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItem, (void (*)(void *))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayBool:)()
{
  OUTLINED_FUNCTION_27_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116();
  if (!v3)
  {
    swift_retain();
LABEL_17:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    return;
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  if (!v0) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v5 = (char *)OUTLINED_FUNCTION_15_4();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v6, v7);
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_20_4();
    do
    {
      if (v1) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v8 = OUTLINED_FUNCTION_43_1();
      }
      unint64_t v9 = v8;
      objc_msgSend(v8, sel_BOOLValue);

      OUTLINED_FUNCTION_19_3();
      if (v11)
      {
        BOOL v13 = OUTLINED_FUNCTION_14_4(v10);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)v13, v14, v15);
      }
      OUTLINED_FUNCTION_34_1();
    }
    while (!v12);
    goto LABEL_16;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt8:)()
{
  OUTLINED_FUNCTION_27_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116();
  if (!v3)
  {
    swift_retain();
LABEL_17:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    return;
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  if (!v0) {
    goto LABEL_16;
  }
LABEL_4:
  OUTLINED_FUNCTION_15_4();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_20_4();
    do
    {
      if (v1) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v5 = OUTLINED_FUNCTION_43_1();
      }
      int64_t v6 = v5;
      objc_msgSend(v5, sel_unsignedCharValue);

      OUTLINED_FUNCTION_19_3();
      if (v8)
      {
        OUTLINED_FUNCTION_14_4(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_34_1();
    }
    while (!v9);
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayBool:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt16:)()
{
  OUTLINED_FUNCTION_27_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116();
  if (!v3)
  {
    swift_retain();
LABEL_17:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    return;
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  if (!v0) {
    goto LABEL_16;
  }
LABEL_4:
  OUTLINED_FUNCTION_15_4();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_20_4();
    do
    {
      if (v1) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v5 = OUTLINED_FUNCTION_43_1();
      }
      int64_t v6 = v5;
      objc_msgSend(v5, sel_unsignedShortValue);

      OUTLINED_FUNCTION_19_3();
      if (v8)
      {
        OUTLINED_FUNCTION_14_4(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_56();
    }
    while (!v9);
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt32, (uint64_t (*)(uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedIntValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayUInt64, (uint64_t (*)(uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_unsignedLongLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt8:)()
{
  OUTLINED_FUNCTION_27_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116();
  if (!v3)
  {
    swift_retain();
LABEL_17:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    return;
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  if (!v0) {
    goto LABEL_16;
  }
LABEL_4:
  OUTLINED_FUNCTION_15_4();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_20_4();
    do
    {
      if (v1) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v5 = OUTLINED_FUNCTION_43_1();
      }
      int64_t v6 = v5;
      objc_msgSend(v5, sel_charValue);

      OUTLINED_FUNCTION_19_3();
      if (v8)
      {
        OUTLINED_FUNCTION_14_4(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_34_1();
    }
    while (!v9);
    goto LABEL_16;
  }
  __break(1u);
}

void CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt16:)()
{
  OUTLINED_FUNCTION_27_2();
  uint64_t v3 = v2;
  OUTLINED_FUNCTION_116();
  if (!v3)
  {
    swift_retain();
LABEL_17:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    OUTLINED_FUNCTION_26_2();
    return;
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v0) {
      goto LABEL_4;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v0 = _CocoaArrayWrapper.endIndex.getter();
  if (!v0) {
    goto LABEL_16;
  }
LABEL_4:
  OUTLINED_FUNCTION_15_4();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v0 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_20_4();
    do
    {
      if (v1) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v5 = OUTLINED_FUNCTION_43_1();
      }
      int64_t v6 = v5;
      objc_msgSend(v5, sel_shortValue);

      OUTLINED_FUNCTION_19_3();
      if (v8)
      {
        OUTLINED_FUNCTION_14_4(v7);
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      OUTLINED_FUNCTION_56();
    }
    while (!v9);
    goto LABEL_16;
  }
  __break(1u);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt32:)(uint64_t a1, unint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt32, (uint64_t (*)(uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_intValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt32:)(uint64_t a1, unint64_t a2, void *a3, uint64_t (*a4)(uint64_t), SEL *a5, void (*a6)(uint64_t))
{
  BOOL v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_116();
  uint64_t v14 = *v13;
  if (!a2)
  {
    swift_retain();
LABEL_16:
    uint64_t v23 = swift_bridgeObjectRetain();
    a6(v23);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!(a2 >> 62))
  {
    uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v16 = OUTLINED_FUNCTION_57();
  uint64_t result = a4(v16);
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_47_0();
    do
    {
      if (a6) {
        id v18 = (id)MEMORY[0x24C59DCE0](v8, a2);
      }
      else {
        id v18 = *(id *)(a2 + 8 * v8 + 32);
      }
      uint64_t v19 = v18;
      unsigned int v20 = [v18 *a5];

      OUTLINED_FUNCTION_68_0();
      if (v21)
      {
        OUTLINED_FUNCTION_69();
        v22();
        uint64_t v7 = v25;
      }
      ++v8;
      *(void *)(v7 + 16) = a4;
      *(_DWORD *)(v7 + 4 * v14 + 32) = v20;
    }
    while (v15 != v8);
    swift_bridgeObjectRelease();
    a6 = v24;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayInt64:)(uint64_t a1, unint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(a1, a2, &OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayInt64, (uint64_t (*)(uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (SEL *)&selRef_longLongValue, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayUInt64:)(uint64_t a1, unint64_t a2, void *a3, uint64_t (*a4)(uint64_t), SEL *a5, void (*a6)(uint64_t))
{
  BOOL v13 = (uint64_t *)(v6 + *a3);
  OUTLINED_FUNCTION_116();
  uint64_t v14 = *v13;
  if (!a2)
  {
    swift_retain();
LABEL_16:
    uint64_t v23 = swift_bridgeObjectRetain();
    a6(v23);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  if (!(a2 >> 62))
  {
    uint64_t v15 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
    swift_bridgeObjectRetain();
    if (v15) {
      goto LABEL_4;
    }
    goto LABEL_15;
  }
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  if (!v15)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
LABEL_4:
  uint64_t v16 = OUTLINED_FUNCTION_57();
  uint64_t result = a4(v16);
  if ((v15 & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_47_0();
    do
    {
      if (a6) {
        id v18 = (id)MEMORY[0x24C59DCE0](v8, a2);
      }
      else {
        id v18 = *(id *)(a2 + 8 * v8 + 32);
      }
      uint64_t v19 = v18;
      id v20 = [v18 *a5];

      OUTLINED_FUNCTION_68_0();
      if (v21)
      {
        OUTLINED_FUNCTION_69();
        v22();
        uint64_t v7 = v25;
      }
      ++v8;
      *(void *)(v7 + 16) = a4;
      *(void *)(v7 + 8 * v14 + 32) = v20;
    }
    while (v15 != v8);
    swift_bridgeObjectRelease();
    a6 = v24;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

char *CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayFloat:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_116();
  if (!a2)
  {
    swift_retain();
LABEL_16:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    return (char *)swift_release();
  }
  OUTLINED_FUNCTION_45_1();
  if (!v4)
  {
    OUTLINED_FUNCTION_44_1();
    swift_bridgeObjectRetain();
    if (v2) {
      goto LABEL_4;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_25_2();
  swift_bridgeObjectRetain();
  uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
  if (!v2) {
    goto LABEL_15;
  }
LABEL_4:
  uint64_t v14 = MEMORY[0x263F8EE78];
  uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    uint64_t v7 = v14;
    do
    {
      if ((a2 & 0xC000000000000001) != 0) {
        OUTLINED_FUNCTION_46_1();
      }
      else {
        id v8 = OUTLINED_FUNCTION_43_1();
      }
      char v9 = v8;
      objc_msgSend(v8, sel_floatValue, v14);
      int v11 = v10;

      uint64_t v14 = v7;
      unint64_t v13 = *(void *)(v7 + 16);
      unint64_t v12 = *(void *)(v7 + 24);
      if (v13 >= v12 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1);
      }
      ++v6;
      *(void *)(v7 + 16) = v13 + 1;
      *(_DWORD *)(v7 + 4 * v13 + 32) = v11;
    }
    while (v2 != v6);
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(uint64_t a1, uint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayString, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayData:)(uint64_t a1, uint64_t a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testArrayData, (void (*)(uint64_t))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  return swift_release();
}

uint64_t @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayString:)(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  if (a4) {
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v9 = a3;
  id v10 = a1;
  a6();

  return swift_bridgeObjectRelease();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestArrayRawData:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItems:)(uint64_t a1, void *a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItems, (void (*)(void *))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItemValue:)(uint64_t a1, void *a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemValue, (void (*)(void *))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItemList:)(uint64_t a1, void *a2)
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine26CAFTypeTestMultiObservable__testComplexItemList, (void (*)(void *))specialized SafePublished.value.setter);
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateTestComplexItem:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *))
{
  OUTLINED_FUNCTION_0_2();
  id v6 = a2;
  swift_retain();
  a4(a2);
  return swift_release();
}

uint64_t CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateName:)()
{
  return CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFTypeTestMultiObservable.typeTestMultiService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFTypeTestMultiObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTypeTestMultiObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTypeTestMultiObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_249406218()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testBool.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406240(unsigned __int8 *a1)
{
  return CAFTypeTestMultiObservable.testBool.setter(*a1);
}

uint64_t sub_2494062B0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testString.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_2494062DC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testData.getter();
  *uint64_t v0 = result;
  v0[1] = v2;
  return result;
}

uint64_t sub_249406318()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testComplexItem.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406344()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayBool.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406370()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt8.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24940639C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt16.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494063C8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt32.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494063F4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayUInt64.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406420()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt8.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24940644C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt16.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406478()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt32.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494064A4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayInt64.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494064D0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayFloat.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494064FC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayString.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406528()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testArrayData.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406554()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testComplexItems.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249406580()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testComplexItemValue.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494065AC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMultiObservable.testComplexItemList.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_2494065D8(void **a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_2494065F8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFTypeTestMulti.testBoolBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_249406620(char *a1)
{
  return CAFTypeTestMulti.testBoolBridged.setter(*a1);
}

uint64_t key path getter for CAFTypeTestMulti.testUInt8Bridged : CAFTypeTestMulti@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testUInt8Bridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_249406680(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testUInt8Bridged.setter);
}

uint64_t key path getter for CAFTypeTestMulti.testUInt16Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testUInt16Bridged.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_2494066E4(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testUInt16Bridged.setter);
}

unint64_t key path getter for CAFTypeTestMulti.testUInt32Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMulti.testUInt32Bridged.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_249406748(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestMulti.testUInt32Bridged.setter);
}

id key path getter for CAFTypeTestMulti.testUInt64Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  id result = CAFTypeTestMulti.testUInt64Bridged.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

id key path setter for CAFTypeTestMulti.testUInt64Bridged : CAFTypeTestMulti(uint64_t a1)
{
  return CAFTypeTestMulti.testUInt64Bridged.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t key path getter for CAFTypeTestMulti.testInt8Bridged : CAFTypeTestMulti@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testInt8Bridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_24940681C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testInt8Bridged.setter);
}

uint64_t key path getter for CAFTypeTestMulti.testInt16Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testInt16Bridged.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_249406880(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testInt16Bridged.setter);
}

unint64_t key path getter for CAFTypeTestMulti.testInt32Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMulti.testInt32Bridged.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_2494068E4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestIndexByUnit.testInt32Bridged.setter);
}

id key path getter for CAFTypeTestMulti.testInt64Bridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  id result = CAFTypeTestMulti.testInt64Bridged.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

id key path setter for CAFTypeTestMulti.testInt64Bridged : CAFTypeTestMulti(uint64_t a1)
{
  return CAFTypeTestMulti.testInt64Bridged.setter(*(void *)a1, *(unsigned char *)(a1 + 8));
}

unint64_t key path getter for CAFTypeTestMulti.testFloatBridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestMulti.testFloatBridged.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_2494069B8(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt32 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestMulti.testFloatBridged.setter);
}

void key path getter for CAFTypeTestMulti.testString : CAFTypeTestMulti(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_testString);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void key path setter for CAFTypeTestMulti.testString : CAFTypeTestMulti(void *a1, void **a2)
{
  uint64_t v2 = *a2;
  if (a1[1]) {
    uint64_t v3 = MEMORY[0x24C59DAA0](*a1);
  }
  else {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  objc_msgSend(v2, sel_setTestString_);
}

char *keypath_get_selector_testData()
{
  return sel_testData;
}

void sub_249406AD0(void **a1, uint64_t a2, uint64_t a3)
{
}

void key path setter for CAFTypeTestMulti.testData : CAFTypeTestMulti(uint64_t a1, void **a2)
{
  uint64_t v2 = *a2;
  if (*(void *)(a1 + 8) >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v4 = isa;
  objc_msgSend(v2, sel_setTestData_);
}

char *keypath_get_selector_testRawData()
{
  return sel_testRawData;
}

void key path getter for CAFTypeTestMulti.testData : CAFTypeTestMulti(void **a1, uint64_t a2, uint64_t a3, const char **a4)
{
  id v5 = OUTLINED_FUNCTION_53_0(a1, a2, a3, a4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    unint64_t v9 = 0xF000000000000000;
  }
  uint64_t *v4 = v7;
  v4[1] = v9;
}

void sub_249406BD0(void **a1, uint64_t a2, uint64_t a3)
{
}

uint64_t key path getter for CAFTypeTestMulti.testEnumBridged : CAFTypeTestMulti@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testEnumBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t sub_249406C28(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt8 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testEnumBridged.setter);
}

uint64_t key path getter for CAFTypeTestMulti.testDimensionUnitRawValueBridged : CAFTypeTestMulti@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestMulti.testDimensionUnitRawValueBridged.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t sub_249406C8C(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestMultiObservable.testUInt16 : CAFTypeTestMultiObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestMulti.testDimensionUnitRawValueBridged.setter);
}

char *keypath_get_selector_testComplexItem()
{
  return sel_testComplexItem;
}

id key path getter for CAFTypeTestMulti.testComplexItem : CAFTypeTestMulti@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_testComplexItem);
  *a2 = result;
  return result;
}

id sub_249406D04(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItem_, *a1);
}

char *sub_249406D18()
{
  OUTLINED_FUNCTION_2_1();
  id result = CAFTypeTestMulti.testArrayBoolBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void key path setter for CAFTypeTestMulti.testArrayBoolBridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayBoolBridged.setter(v0);
}

void sub_249406D70()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayUInt8Bridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFTypeTestMulti.testArrayUInt8Bridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayUInt8Bridged.setter(v0);
}

void sub_249406DC8()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayUInt16Bridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFTypeTestMulti.testArrayUInt16Bridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayUInt16Bridged.setter(v0);
}

void sub_249406E20()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayUInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *uint64_t v0 = v9;
}

void key path setter for CAFTypeTestMulti.testArrayUInt32Bridged : CAFTypeTestMulti()
{
}

void sub_249406E88()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayUInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *uint64_t v0 = v9;
}

void key path setter for CAFTypeTestMulti.testArrayUInt64Bridged : CAFTypeTestMulti()
{
}

void sub_249406EF0()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayInt8Bridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFTypeTestMulti.testArrayInt8Bridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayInt8Bridged.setter(v0);
}

void sub_249406F48()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayInt16Bridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFTypeTestMulti.testArrayInt16Bridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayInt16Bridged.setter(v0);
}

void sub_249406FA0()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayInt32Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *uint64_t v0 = v9;
}

void key path setter for CAFTypeTestMulti.testArrayInt32Bridged : CAFTypeTestMulti()
{
}

void sub_249407008()
{
  OUTLINED_FUNCTION_2_1();
  CAFTypeTestMulti.testArrayInt64Bridged.getter(v1, v2, v3, v4, v5, v6, v7, v8, v10, v11);
  *uint64_t v0 = v9;
}

void key path setter for CAFTypeTestMulti.testArrayInt64Bridged : CAFTypeTestMulti()
{
}

char *sub_249407070()
{
  OUTLINED_FUNCTION_2_1();
  id result = CAFTypeTestMulti.testArrayFloatBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void key path setter for CAFTypeTestMulti.testArrayFloatBridged : CAFTypeTestMulti()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFTypeTestMulti.testArrayFloatBridged.setter(v0);
}

char *keypath_get_selector_testArrayString()
{
  return sel_testArrayString;
}

void sub_2494070D4(void **a1, uint64_t a2, uint64_t a3)
{
}

void sub_2494070FC(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_testArrayData()
{
  return sel_testArrayData;
}

void sub_249407130(void **a1, uint64_t a2, uint64_t a3)
{
}

void key path setter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(void *a1, void **a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v7 = *a2;
  if (*a1) {
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  }
  else {
    v8.super.Class isa = 0;
  }
  Class isa = v8.super.isa;
  [v7 *a6];
}

void sub_2494071C4(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
}

char *keypath_get_selector_testArrayRawData()
{
  return sel_testArrayRawData;
}

void key path getter for CAFTypeTestMulti.testArrayString : CAFTypeTestMulti(void **a1, uint64_t a2, uint64_t a3, const char **a4)
{
  id v5 = OUTLINED_FUNCTION_53_0(a1, a2, a3, a4);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t *v4 = v7;
}

void sub_249407250(void **a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_testComplexItems()
{
  return sel_testComplexItems;
}

id key path getter for CAFTypeTestMulti.testComplexItems : CAFTypeTestMulti@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_testComplexItems);
  *a2 = result;
  return result;
}

id sub_2494072C4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItems_, *a1);
}

char *keypath_get_selector_testComplexItemValue()
{
  return sel_testComplexItemValue;
}

id key path getter for CAFTypeTestMulti.testComplexItemValue : CAFTypeTestMulti@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_testComplexItemValue);
  *a2 = result;
  return result;
}

id sub_249407324(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemValue_, *a1);
}

char *keypath_get_selector_testComplexItemList()
{
  return sel_testComplexItemList;
}

id key path getter for CAFTypeTestMulti.testComplexItemList : CAFTypeTestMulti@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_testComplexItemList);
  *a2 = result;
  return result;
}

id sub_249407384(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setTestComplexItemList_, *a1);
}

void key path getter for CAFTypeTestMulti.userVisibleLabel : CAFTypeTestMulti(void **a1, uint64_t a2, uint64_t a3, const char **a4)
{
  id v5 = OUTLINED_FUNCTION_53_0(a1, a2, a3, a4);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  uint64_t *v4 = v6;
  v4[1] = v8;
}

void sub_2494073E0(void **a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for CAFTypeTestMultiObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTypeTestMulti()
{
  return lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTypeTestMulti and conformance CAFTypeTestMulti()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti;
  if (!lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTypeTestMulti);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMulti and conformance CAFTypeTestMulti);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTypeTestMultiObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTypeTestMultiObservable and conformance CAFTypeTestMultiObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTypeTestMultiObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTypeTestMultiObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTypeTestMultiObservable);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testBool.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testBool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt8.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 472))() & 0x1FF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt8.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x1E0))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt8.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt16.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 504))() & 0x1FFFF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt16.setter(int a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x200))(a1 & 0x1FFFF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt16.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt32.getter()
{
  OUTLINED_FUNCTION_35_1();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 536))();
  return OUTLINED_FUNCTION_62_0(v1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt32.setter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(unint64_t))(v0 + 544))(v1 | ((HIDWORD(v1) & 1) << 32));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt32.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 568))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v2) + 0x240))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testUInt64.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testUInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt8.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 600))() & 0x1FF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt8.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x260))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt8.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x268))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x270))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt16.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 632))() & 0x1FFFF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt16.setter(int a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x280))(a1 & 0x1FFFF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt16.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x288))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x290))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt32.getter()
{
  OUTLINED_FUNCTION_35_1();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 664))();
  return OUTLINED_FUNCTION_62_0(v1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt32.setter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(unint64_t))(v0 + 672))(v1 | ((HIDWORD(v1) & 1) << 32));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt32.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 696))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x263F8EED0] & *v2) + 0x2C0))(a1, a2 & 1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testInt64.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testFloat.getter()
{
  OUTLINED_FUNCTION_35_1();
  unint64_t v1 = (*(uint64_t (**)(void))(v0 + 728))();
  return OUTLINED_FUNCTION_62_0(v1);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testFloat.setter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(unint64_t))(v0 + 736))(v1 | ((HIDWORD(v1) & 1) << 32));
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testFloat.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testFloat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x2F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x300))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testString.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x308))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x310))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x318))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x320))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testData.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x328))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x330))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testRawData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x338))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testRawData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x340))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testEnum.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 840))() & 0x1FF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testEnum.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x350))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testEnum.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x358))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testEnum.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x360))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.getter()
{
  OUTLINED_FUNCTION_35_1();
  return (*(uint64_t (**)(void))(v0 + 872))() & 0x1FFFF;
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.setter(int a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0x370))(a1 & 0x1FFFF);
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testDimensionUnitRawValue.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x378))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testDimensionUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x380))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x388))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x390))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItem.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x398))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItem.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayBool.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayBool.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt8.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3D8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt16.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x3F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x400))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x408))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x410))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt32.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x418))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x420))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x428))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x430))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayUInt64.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x438))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayUInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x440))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x448))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x450))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt8.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x458))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt8.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x460))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x468))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x470))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt16.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x478))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt16.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x480))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x488))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x490))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt32.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x498))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt32.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4A8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4B0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayInt64.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4B8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayInt64.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4C0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4C8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayFloat.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4D8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayFloat.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4E8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayString.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x4F8))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayString.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x500))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x508))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x510))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayData.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x518))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x520))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testArrayRawData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x528))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testArrayRawData.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x530))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x538))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x540))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItems.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x548))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItems.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x550))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x558))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x560))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemValue.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x568))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItemValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x570))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x578))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x580))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.testComplexItemList.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x588))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$testComplexItemList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x590))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x598))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x5A0))();
}

uint64_t dispatch thunk of CAFTypeTestMultiObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 1456))();
}

uint64_t partial apply for closure #1 in CAFTypeTestMultiObservable.resetCachedDescription()()
{
  return CAFTypeTestMultiObservable.cachedDescription.setter(0, 0);
}

uint64_t outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(void *a1, SEL *a2)
{
  id v2 = [a1 *a2];
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v4;
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_5(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return v2;
}

uint64_t OUTLINED_FUNCTION_8_7()
{
  return String.init<A>(describing:)();
}

BOOL OUTLINED_FUNCTION_14_4@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_17_3(uint64_t result)
{
  *(void *)(result + 8) = v1;
  return result;
}

uint64_t OUTLINED_FUNCTION_18_3(uint64_t result)
{
  *(void *)(v1 + 16) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return 0x495574736574202CLL;
}

uint64_t OUTLINED_FUNCTION_24_1()
{
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_25_2()
{
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return 0x74736574202CLL;
}

uint64_t OUTLINED_FUNCTION_32_0()
{
  return 0x6E4974736574202CLL;
}

void OUTLINED_FUNCTION_33_1(uint64_t a1@<X8>)
{
  uint64_t v4 = v1;
  unint64_t v3 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
}

void OUTLINED_FUNCTION_34_1()
{
  *(void *)(v1 + 16) = v3;
  *(unsigned char *)(v1 + v0 + 32) = v2;
}

uint64_t OUTLINED_FUNCTION_39_0()
{
  return v0;
}

void OUTLINED_FUNCTION_40_1(uint64_t a1@<X8>)
{
  uint64_t v4 = v1;
  unint64_t v3 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v4);
}

id OUTLINED_FUNCTION_41_0(const char **a1)
{
  unint64_t v3 = *a1;
  return [v1 v3];
}

id OUTLINED_FUNCTION_43_1()
{
  unint64_t v3 = *(void **)(v0 + 8 * v1 + 32);
  return v3;
}

uint64_t OUTLINED_FUNCTION_44_1()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_46_1()
{
  JUMPOUT(0x24C59DCE0);
}

uint64_t OUTLINED_FUNCTION_49_1()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return swift_retain();
}

void OUTLINED_FUNCTION_52_0(uint64_t a1, unsigned int a2)
{
  unint64_t v3 = a2 | 0xED00002000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

id OUTLINED_FUNCTION_53_0(void **a1, uint64_t a2, uint64_t a3, const char **a4)
{
  id v5 = *a1;
  uint64_t v6 = *a4;
  return [v5 v6];
}

void OUTLINED_FUNCTION_56()
{
  *(void *)(v1 + 16) = v3;
  *(_WORD *)(v1 + 2 * v0 + 32) = v2;
}

uint64_t OUTLINED_FUNCTION_57()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_58(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return specialized static SafePublished.subscript.setter(v25, v26, a1, v27, v24, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t OUTLINED_FUNCTION_59_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_62_0(unint64_t a1)
{
  return a1 | ((HIDWORD(a1) & 1) << 32);
}

uint64_t OUTLINED_FUNCTION_63_0(uint64_t result)
{
  *(_DWORD *)(v1 - 104) = result;
  *(unsigned char *)(v1 - 100) = BYTE4(result) & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_64_0(uint64_t result)
{
  *(_WORD *)(v1 - 104) = result;
  *(unsigned char *)(v1 - 102) = BYTE2(result) & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_65_0(uint64_t result)
{
  *(unsigned char *)(v1 - 104) = result;
  *(unsigned char *)(v1 - 103) = BYTE1(result) & 1;
  return result;
}

uint64_t OUTLINED_FUNCTION_66(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  return specialized static SafePublished.subscript.setter(v24, v25, v27, v28, v26, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
           a20,
           a21,
           a22,
           a23,
           a24);
}

uint64_t OUTLINED_FUNCTION_70_0@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v2 + 72) = *(void *)(v1 + a1);
  return swift_retain();
}

uint64_t OUTLINED_FUNCTION_71_0(uint64_t result)
{
  *uint64_t v1 = result;
  *(void *)(result + 80) = v2;
  return result;
}

uint64_t OUTLINED_FUNCTION_73_0()
{
  return swift_readAtKeyPath();
}

uint64_t OUTLINED_FUNCTION_74_0()
{
  return specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
}

uint64_t OUTLINED_FUNCTION_76_0()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_78_0(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return specialized static SafePublished.subscript.getter(v2, v3, a1);
}

uint64_t OUTLINED_FUNCTION_80_0()
{
  return swift_getKeyPath();
}

uint64_t OUTLINED_FUNCTION_82_0(SEL *a1)
{
  return outlined bridged method (pb) of @objc CAFTypeTestMulti.testArrayBool.getter(v1, a1);
}

uint64_t OUTLINED_FUNCTION_83_0()
{
  return v0;
}

id CAFRequestContentObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
}

uint64_t CAFRequestContentObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFRequestContentObservable.on : CAFRequestContentObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRequestContentObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFRequestContentObservable.on : CAFRequestContentObservable(unsigned __int8 *a1)
{
  return CAFRequestContentObservable.on.setter(*a1);
}

uint64_t CAFRequestContentObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFRequestContentObservable.on.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFRequestContentObservable.on.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFRequestContentObservable.on.modify;
}

void CAFRequestContentObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFRequestContentObservable.$on.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFRequestContentObservable.contentURL.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRequestContentObservable.$contentURL.getter()
{
  return CAFRequestContentObservable.$contentURL.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__contentURL, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.userDismissible.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRequestContentObservable.$userDismissible.getter()
{
  return CAFRequestContentObservable.$contentURL.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__userDismissible, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.displayPanelIdentifier.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

uint64_t CAFRequestContentObservable.$displayPanelIdentifier.getter()
{
  return CAFRequestContentObservable.$contentURL.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayPanelIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.displayZoneIdentifier.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

uint64_t CAFRequestContentObservable.$displayZoneIdentifier.getter()
{
  return CAFRequestContentObservable.$contentURL.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayZoneIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.name.getter()
{
  return CAFRequestContentObservable.contentURL.getter();
}

uint64_t CAFRequestContentObservable.$name.getter()
{
  return CAFRequestContentObservable.$contentURL.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRequestContentObservable.$contentURL.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFRequestContentObservable._description.getter()
{
  HIBYTE(v26._object) = -18;
  strcpy((char *)&v26, "<unregistered>");
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed);
  unsigned int v2 = objc_msgSend(v1, sel_registeredForOn);
  uint64_t v3 = 0x73696765726E753CLL;
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (v2)
  {
    char v5 = CAFRequestContentObservable.on.getter();
    if (v5) {
      uint64_t v3 = 1702195828;
    }
    else {
      uint64_t v3 = 0x65736C6166;
    }
    if (v5) {
      uint64_t v4 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v4 = (void *)0xE500000000000000;
    }
  }
  uint64_t v6 = 0x73696765726E753CLL;
  id v7 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForContentURL, v3))
  {
    uint64_t v6 = CAFRequestContentObservable.contentURL.getter();
    id v7 = v8;
  }
  uint64_t v9 = 0x73696765726E753CLL;
  uint64_t v10 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForUserDismissible))
  {
    char v11 = CAFRequestContentObservable.userDismissible.getter();
    if (v11) {
      uint64_t v9 = 1702195828;
    }
    else {
      uint64_t v9 = 0x65736C6166;
    }
    if (v11) {
      uint64_t v10 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v10 = (void *)0xE500000000000000;
    }
  }
  uint64_t v12 = 0x73696765726E753CLL;
  unint64_t v13 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForDisplayPanelIdentifier))
  {
    uint64_t v12 = CAFRequestContentObservable.displayPanelIdentifier.getter();
    unint64_t v13 = v14;
  }
  if (objc_msgSend(v1, sel_registeredForDisplayZoneIdentifier))
  {
    v26._countAndFlagsBits = CAFRequestContentObservable.displayZoneIdentifier.getter();
    v26._object = v15;
  }
  _StringGuts.grow(_:)(136);
  OUTLINED_FUNCTION_2_8(0xD00000000000001ELL, (uint64_t)"<CAFRequestContentObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v16._countAndFlagsBits = 0x203A6E6F207B20;
  v16._object = (void *)0xE700000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v25;
  v17._object = v4;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v18._object = (void *)0xEE00203A4C525574;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v6;
  v19._object = v7;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000249488150;
  v20._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v9;
  v21._object = v10;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_8(0xD00000000000001ALL, (uint64_t)", displayPanelIdentifier: ");
  v22._countAndFlagsBits = v12;
  v22._object = v13;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_8(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 4095264;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  return 0;
}

uint64_t CAFRequestContentObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock;
  unsigned int v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFRequestContentObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFRequestContentObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFRequestContentObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFRequestContentObservable.init(_:)(a1);
}

id CAFRequestContentObservable.init(_:)(void *a1)
{
  unsigned int v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRequestContentObservable, Bool>);
  swift_allocObject();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__contentURL;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRequestContentObservable, String>);
  swift_allocObject();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_1_5();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__userDismissible;
  uint64_t v12 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRequestContentObservable, Bool>);
  swift_allocObject();
  *(void *)&v9[v11] = specialized SafePublished.init(observedValuekeypath:)(v12);
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v13] = OUTLINED_FUNCTION_1_5();
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v14] = OUTLINED_FUNCTION_1_5();
  uint64_t v15 = OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v15] = OUTLINED_FUNCTION_1_5();
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed] = a1;
  id v16 = a1;

  v19.receiver = v9;
  v19.super_class = (Class)type metadata accessor for CAFRequestContentObservable();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFRequestContentObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFRequestContentObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFRequestContentObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRequestContentObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRequestContentObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFRequestContentObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFRequestContentObservable@<X0>(void *a1@<X8>)
{
  id result = CAFRequestContentObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24940A9E8@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRequestContentObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_24940AA18(unsigned __int8 *a1)
{
  return CAFRequestContentObservable.on.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFRequestContentObservable(void **a1)
{
  return CAFRequestContentObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRequestContentObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFRequestContentObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateUserDismissible:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

uint64_t @objc CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

uint64_t CAFRequestContentObservable.requestContentService(_:didUpdateName:)()
{
  return CAFRequestContentObservable.requestContentService(_:didUpdateContentURL:)();
}

uint64_t CAFRequestContentObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFRequestContentObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFRequestContentObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

id sub_24940AF14@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

id sub_24940AF48(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

char *keypath_get_selector_contentURL()
{
  return sel_contentURL;
}

void sub_24940AF68(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_24940AF88@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_userDismissible);
  *a2 = (_BYTE)result;
  return result;
}

void sub_24940AFBC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24940AFDC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24940AFFC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFRequestContentObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRequestContent(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFRequestContentObservable and conformance CAFRequestContentObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRequestContentObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRequestContentObservable()
{
  return lazy protocol witness table accessor for type CAFRequestContentObservable and conformance CAFRequestContentObservable(&lazy protocol witness table cache variable for type CAFRequestContent and conformance CAFRequestContent, 255, (void (*)(uint64_t))type metadata accessor for CAFRequestContent);
}

unint64_t type metadata accessor for CAFRequestContent()
{
  unint64_t result = lazy cache variable for type metadata for CAFRequestContent;
  if (!lazy cache variable for type metadata for CAFRequestContent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRequestContent);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFRequestContentObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFRequestContentObservable and conformance CAFRequestContentObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRequestContentObservable and conformance CAFRequestContentObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRequestContentObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRequestContentObservable and conformance CAFRequestContentObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFRequestContentObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFRequestContentObservable);
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.contentURL.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$contentURL.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$userDismissible.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFRequestContentObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t partial apply for closure #1 in CAFRequestContentObservable.resetCachedDescription()()
{
  return CAFRequestContentObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_2_8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t static CAFChargingState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFChargingState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFChargingState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFChargingState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFChargingState.description.getter()
{
  id v0 = (id)NSStringFromChargingState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFChargingState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState);
  a1[2] = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState);
  uint64_t result = lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(&lazy protocol witness table cache variable for type CAFChargingState and conformance CAFChargingState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFChargingState and conformance CAFChargingState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFChargingState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFChargingState()
{
  return CAFChargingState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFChargingState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFChargingState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFChargingState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFChargingState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFChargingState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFChargingState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void CAFMultipleSelectSetting.selectedEntryIndicesBridged.getter()
{
  id v1 = objc_msgSend(v0, sel_selectedEntryIndices);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v3) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v3) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((v2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, v2);
      }
      else {
        id v5 = *(id *)(v2 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_unsignedCharValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_11;
  }
  __break(1u);
}

void CAFMultipleSelectSetting.selectedEntryIndicesBridged.setter(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = 0;
    do
    {
      uint64_t v5 = v4 + 1;
      objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, *(unsigned __int8 *)(a1 + v4 + 32));
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v4 = v5;
    }
    while (v3 != v5);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_setSelectedEntryIndices_, isa);
}

id CAFMultipleSelectSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
}

uint64_t CAFMultipleSelectSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectSettingObservable.userVisibleLabel.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$userVisibleLabel.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.sectionIdentifier.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFMultipleSelectSettingObservable.$sectionIdentifier.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFMultipleSelectSettingObservable.$sortOrder.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectSettingObservable.$category.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.identifier.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$identifier.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.disabled.getter()
{
  return CAFMultipleSelectSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectSettingObservable.$disabled.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.limitableUIElement.getter()
{
  return CAFMultipleSelectSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$limitableUIElement.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.hidden.getter()
{
  return CAFMultipleSelectSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$hidden.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.showAudioBrandLogo.getter()
{
  return CAFMultipleSelectSettingObservable.disabled.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.vehicleLayoutKey.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.symbolName.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$symbolName.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectSettingObservable.$prominenceInfo.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.selectSettingEntryList.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectSettingObservable.$selectSettingEntryList.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectSettingEntryList, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFMultipleSelectSettingObservable.selectedEntryIndices : CAFMultipleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFMultipleSelectSettingObservable.selectedEntryIndices.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFMultipleSelectSettingObservable.selectedEntryIndices : CAFMultipleSelectSettingObservable()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  return CAFMultipleSelectSettingObservable.selectedEntryIndices.setter(v0);
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  uint64_t v3 = specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

uint64_t (*CAFMultipleSelectSettingObservable.selectedEntryIndices.modify(void *a1))(uint64_t *a1, char a2)
{
  a1[1] = v1;
  uint64_t KeyPath = swift_getKeyPath();
  a1[2] = KeyPath;
  uint64_t v4 = swift_getKeyPath();
  a1[3] = v4;
  *a1 = specialized static SafePublished.subscript.getter(v1, KeyPath, v4);
  return CAFMultipleSelectSettingObservable.selectedEntryIndices.modify;
}

uint64_t CAFMultipleSelectSettingObservable.selectedEntryIndices.modify(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  id v5 = (id)a1[1];
  unint64_t v8 = a1 + 2;
  uint64_t v7 = a1[2];
  uint64_t v6 = v8[1];
  if (a2)
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    specialized static SafePublished.subscript.setter(v9, v5, v7, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    return specialized static SafePublished.subscript.setter(v4, v5, v7, v6);
  }
}

uint64_t CAFMultipleSelectSettingObservable.$selectedEntryIndices.getter()
{
  swift_beginAccess();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFMultipleSelectSettingObservable.name.getter()
{
  return CAFMultipleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFMultipleSelectSettingObservable.$name.getter()
{
  return CAFMultipleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMultipleSelectSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFMultipleSelectSettingObservable._description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed);
  uint64_t v3 = 0x73696765726E753CLL;
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForSelectSettingEntryList))
  {
    id v5 = (void *)CAFMultipleSelectSettingObservable.selectSettingEntryList.getter();
    id v6 = objc_msgSend(v5, sel_description);
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v4 = v7;
  }
  if (objc_msgSend(v2, sel_registeredForSelectedEntryIndices))
  {
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v9 = swift_getKeyPath();
    uint64_t v10 = specialized static SafePublished.subscript.getter(v1, KeyPath, v9);
    swift_release();
    swift_release();
    MEMORY[0x24C59DB40](v10, MEMORY[0x263F8E778]);
    swift_bridgeObjectRelease();
  }
  _StringGuts.grow(_:)(97);
  v11._countAndFlagsBits = 0xD000000000000025;
  v11._object = (void *)0x8000000249488BC0;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0xD00000000000001BLL;
  v12._object = (void *)0x8000000249488BF0;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v3;
  v13._object = v4;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0x8000000249488C10;
  v14._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v14);
  v15._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 4095264;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return 0;
}

uint64_t CAFMultipleSelectSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFMultipleSelectSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFMultipleSelectSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFMultipleSelectSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFMultipleSelectSettingObservable.init(_:)(a1);
}

id CAFMultipleSelectSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectSettingEntryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMultipleSelectSettingObservable, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__selectedEntryIndices;
  uint64_t v28 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFMultipleSelectSettingObservable, [UInt8]>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v27] = v29;
  uint64_t v30 = OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v30] = specialized SafePublished.init(observedValuekeypath:)(v28);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed] = a1;
  id v31 = a1;

  v34.receiver = v9;
  v34.super_class = (Class)type metadata accessor for CAFMultipleSelectSettingObservable();
  id v32 = objc_msgSendSuper2(&v34, sel_init);
  objc_msgSend(v31, sel_registerObserver_, v32);

  return v32;
}

uint64_t CAFMultipleSelectSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFMultipleSelectSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine34CAFMultipleSelectSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMultipleSelectSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMultipleSelectSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFMultipleSelectSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFMultipleSelectSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFMultipleSelectSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFMultipleSelectSettingObservable(void **a1)
{
  return CAFMultipleSelectSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMultipleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFMultipleSelectSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateSelectSettingEntryList:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_23_0();
  id v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

void CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateSelectedEntryIndices:)(uint64_t a1, unint64_t a2)
{
  swift_beginAccess();
  if (a2 >> 62)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_retain();
  }
  if (!v3)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    specialized SafePublished.value.setter();
    swift_bridgeObjectRelease();
    swift_release();
    return;
  }
  uint64_t v9 = MEMORY[0x263F8EE78];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v3 & 0x8000000000000000) == 0)
  {
    for (uint64_t i = 0; i != v3; ++i)
    {
      if ((a2 & 0xC000000000000001) != 0) {
        id v5 = (id)MEMORY[0x24C59DCE0](i, a2);
      }
      else {
        id v5 = *(id *)(a2 + 8 * i + 32);
      }
      uint64_t v6 = v5;
      unsigned __int8 v7 = objc_msgSend(v5, sel_unsignedCharValue);

      unint64_t v8 = *(void *)(v9 + 16);
      if (v8 >= *(void *)(v9 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v9 + 16) = v8 + 1;
      *(unsigned char *)(v9 + v8 + 32) = v7;
    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t CAFMultipleSelectSettingObservable.multipleSelectSettingService(_:didUpdateName:)()
{
  return CAFMultipleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFMultipleSelectSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFMultipleSelectSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFMultipleSelectSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_24940D9A4()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectSettingObservable.selectedEntryIndices.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_24940D9D0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24940D9F0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_24940DA14@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_24940DA48(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_24940DA68()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24940DA90()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24940DAB8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24940DAE0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_24940DB08(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24940DB28(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_selectSettingEntryList()
{
  return sel_selectSettingEntryList;
}

id key path getter for CAFMultipleSelectSetting.selectSettingEntryList : CAFMultipleSelectSetting@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_selectSettingEntryList);
  *a2 = result;
  return result;
}

void sub_24940DB98()
{
  OUTLINED_FUNCTION_2_1();
  CAFMultipleSelectSetting.selectedEntryIndicesBridged.getter();
  *uint64_t v0 = v1;
}

void key path setter for CAFMultipleSelectSetting.selectedEntryIndicesBridged : CAFMultipleSelectSetting()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  CAFMultipleSelectSetting.selectedEntryIndicesBridged.setter(v0);
}

void sub_24940DBF0(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFMultipleSelectSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMultipleSelectSetting()
{
  return lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable(&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting;
  if (!lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFMultipleSelectSetting);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectSetting and conformance CAFMultipleSelectSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFMultipleSelectSettingObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMultipleSelectSettingObservable and conformance CAFMultipleSelectSettingObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFMultipleSelectSettingObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFMultipleSelectSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFMultipleSelectSettingObservable);
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectSettingEntryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$selectSettingEntryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.selectedEntryIndices.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$selectedEntryIndices.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFMultipleSelectSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t partial apply for closure #1 in CAFMultipleSelectSettingObservable.resetCachedDescription()()
{
  return CAFMultipleSelectSettingObservable.cachedDescription.setter(0, 0);
}

id CAFVehicleInformationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed);
}

uint64_t CAFVehicleInformationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVehicleInformationObservable.$vehicleUserVisibleLabel.getter()
{
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFVehicleInformationObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed), sel_registeredForVehicleUserVisibleLabel))CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter(); {
  _StringGuts.grow(_:)(69);
  }
  v1._countAndFlagsBits = 0xD000000000000022;
  v1._object = (void *)0x8000000249488CC0;
  String.append(_:)(v1);
  _print_unlocked<A, B>(_:_:)();
  v2._object = (void *)0x8000000249488CF0;
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 4095264;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  return 0;
}

uint64_t CAFVehicleInformationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock;
  Swift::String v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription + 8))
  {
    Swift::String v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFVehicleInformationObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFVehicleInformationObservable.cachedDescription.setter(v4, v5);
    Swift::String v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFVehicleInformationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFVehicleInformationObservable.init(_:)(a1);
}

id CAFVehicleInformationObservable.init(_:)(void *a1)
{
  Swift::String v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable__vehicleUserVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVehicleInformationObservable, String>);
  swift_allocObject();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v9;
  v13.super_class = (Class)type metadata accessor for CAFVehicleInformationObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFVehicleInformationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFVehicleInformationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFVehicleInformationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVehicleInformationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVehicleInformationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFVehicleInformationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFVehicleInformationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFVehicleInformationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFVehicleInformationObservable(void **a1)
{
  return CAFVehicleInformationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVehicleInformationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFVehicleInformationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFVehicleInformationObservable.vehicleInformationService(_:didUpdateVehicleUserVisibleLabel:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVehicleInformationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFVehicleInformationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFVehicleInformationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_vehicleUserVisibleLabel()
{
  return sel_vehicleUserVisibleLabel;
}

void key path getter for CAFVehicleInformation.vehicleUserVisibleLabel : CAFVehicleInformation(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_vehicleUserVisibleLabel);
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

uint64_t type metadata accessor for CAFVehicleInformationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVehicleInformation(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable(&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFVehicleInformationObservable()
{
  return lazy protocol witness table accessor for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable(&lazy protocol witness table cache variable for type CAFVehicleInformation and conformance CAFVehicleInformation, 255, (void (*)(uint64_t))type metadata accessor for CAFVehicleInformation);
}

unint64_t type metadata accessor for CAFVehicleInformation()
{
  unint64_t result = lazy cache variable for type metadata for CAFVehicleInformation;
  if (!lazy cache variable for type metadata for CAFVehicleInformation)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFVehicleInformation);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFVehicleInformationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFVehicleInformationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVehicleInformationObservable and conformance CAFVehicleInformationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFVehicleInformationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFVehicleInformationObservable);
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.vehicleUserVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.$vehicleUserVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFVehicleInformationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFVehicleInformationObservable.resetCachedDescription()()
{
  return CAFVehicleInformationObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFBatteryLevelState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFBatteryLevelState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFBatteryLevelState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFBatteryLevelState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFBatteryLevelState.description.getter()
{
  id v0 = (id)NSStringFromBatteryLevelState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFBatteryLevelState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState);
  a1[2] = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState);
  uint64_t result = lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(&lazy protocol witness table cache variable for type CAFBatteryLevelState and conformance CAFBatteryLevelState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFBatteryLevelState and conformance CAFBatteryLevelState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFBatteryLevelState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFBatteryLevelState()
{
  return CAFBatteryLevelState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFBatteryLevelState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFBatteryLevelState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFBatteryLevelState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFBatteryLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFBatteryLevelState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFBatteryLevelState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFEnginePowerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed);
}

uint64_t CAFEnginePowerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEnginePowerObservable.power.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFEnginePowerObservable.$power.getter()
{
  return CAFEnginePowerObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMin.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

uint64_t CAFEnginePowerObservable.$powerMin.getter()
{
  return CAFEnginePowerObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMax.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

uint64_t CAFEnginePowerObservable.$powerMax.getter()
{
  return CAFEnginePowerObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMarkerAvailableMin.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

uint64_t CAFEnginePowerObservable.$powerMarkerAvailableMin.getter()
{
  return CAFEnginePowerObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.powerMarkerAvailableMax.getter()
{
  return CAFEnginePowerObservable.power.getter();
}

uint64_t CAFEnginePowerObservable.$powerMarkerAvailableMax.getter()
{
  return CAFEnginePowerObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEnginePowerObservable.$power.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFEnginePowerObservable._description.getter()
{
  uint64_t v42 = 0x73696765726E753CLL;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_106();
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v3 = v2;
  MEMORY[0x270FA5388](v4);
  OUTLINED_FUNCTION_106();
  uint64_t v7 = v6 - v5;
  unint64_t v8 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed);
  objc_msgSend(v8, sel_registeredForPower);
  OUTLINED_FUNCTION_3_6();
  uint64_t v9 = (void *)0xEE003E6465726574;
  if (v10)
  {
    CAFEnginePowerObservable.power.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    uint64_t v0 = OUTLINED_FUNCTION_4_9();
    uint64_t v9 = v11;
    uint64_t v12 = OUTLINED_FUNCTION_5_8();
    v13(v12);
  }
  uint64_t v40 = v0;
  objc_msgSend(v8, sel_registeredForPowerMin);
  OUTLINED_FUNCTION_3_6();
  uint64_t v14 = (void *)0xEE003E6465726574;
  if (v15)
  {
    CAFEnginePowerObservable.powerMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    uint64_t v0 = OUTLINED_FUNCTION_4_9();
    uint64_t v14 = v16;
    uint64_t v17 = OUTLINED_FUNCTION_5_8();
    v18(v17);
  }
  uint64_t v39 = v0;
  objc_msgSend(v8, sel_registeredForPowerMax);
  OUTLINED_FUNCTION_3_6();
  uint64_t v19 = (void *)0xEE003E6465726574;
  if (v20)
  {
    CAFEnginePowerObservable.powerMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    uint64_t v0 = OUTLINED_FUNCTION_4_9();
    uint64_t v19 = v21;
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v7, v1);
  }
  uint64_t v22 = 0x73696765726E753CLL;
  uint64_t v23 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v8, sel_registeredForPowerMarkerAvailableMin, v0))
  {
    CAFEnginePowerObservable.powerMarkerAvailableMin.getter();
    uint64_t v22 = String.init<A>(describing:)();
    uint64_t v23 = v24;
  }
  unsigned int v25 = objc_msgSend(v8, sel_registeredForPowerMarkerAvailableMax);
  uint64_t v26 = (void *)0xEE003E6465726574;
  if (v25)
  {
    CAFEnginePowerObservable.powerMarkerAvailableMax.getter();
    uint64_t v42 = String.init<A>(describing:)();
    uint64_t v26 = v27;
  }
  _StringGuts.grow(_:)(130);
  OUTLINED_FUNCTION_2_9((uint64_t)"<CAFEnginePowerObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v28._countAndFlagsBits = 0x7265776F70207B20;
  v28._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v40;
  v29._object = v9;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = OUTLINED_FUNCTION_6_7();
  v30._object = (void *)0xEC000000203A6E69;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v39;
  v31._object = v14;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = OUTLINED_FUNCTION_6_7();
  String.append(_:)(v32);
  v33._countAndFlagsBits = v38;
  v33._object = v19;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_9((uint64_t)", powerMarkerAvailableMin: ");
  v34._countAndFlagsBits = v22;
  v34._object = v23;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_9((uint64_t)", powerMarkerAvailableMax: ");
  v35._countAndFlagsBits = v42;
  v35._object = v26;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 4095264;
  v36._object = (void *)0xE300000000000000;
  String.append(_:)(v36);
  return 0;
}

uint64_t CAFEnginePowerObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFEnginePowerObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFEnginePowerObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFEnginePowerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFEnginePowerObservable.init(_:)(a1);
}

id CAFEnginePowerObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEnginePowerObservable, Measurement<NSUnitPower>>);
  swift_allocObject();
  unint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEnginePowerObservable, Measurement<NSUnitPower>?>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v16] = v17;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFEnginePowerObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFEnginePowerObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFEnginePowerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEnginePowerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEnginePowerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFEnginePowerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEnginePowerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFEnginePowerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFEnginePowerObservable(void **a1)
{
  return CAFEnginePowerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEnginePowerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFEnginePowerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(uint64_t a1, uint64_t a2)
{
  return CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__power, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a3;
  id v16 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMin:)(uint64_t a1, uint64_t a2)
{
  return CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFEnginePowerObservable__powerMarkerAvailableMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEnginePowerObservable.enginePowerService(_:didUpdatePower:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t @objc CAFEnginePowerObservable.enginePowerService(_:didUpdatePowerMarkerAvailableMin:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_106();
  uint64_t v12 = v11 - v10;
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    uint64_t v14 = v12;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    uint64_t v14 = v12;
    uint64_t v15 = 1;
  }
  __swift_storeEnumTagSinglePayload(v14, v15, 1, v13);
  id v16 = a3;
  id v17 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitPower>?(v12);
}

uint64_t CAFEnginePowerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFEnginePowerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFEnginePowerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_power()
{
  return sel_power;
}

void sub_2494105A0(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_powerMin()
{
  return sel_powerMin;
}

void key path getter for CAFEnginePower.power : CAFEnginePower(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_249410648(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_powerMax()
{
  return sel_powerMax;
}

void sub_249410674(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_powerMarkerAvailableMin()
{
  return sel_powerMarkerAvailableMin;
}

uint64_t sub_2494106A0@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower(a1, (SEL *)&selRef_powerMarkerAvailableMin, a2);
}

char *keypath_get_selector_powerMarkerAvailableMax()
{
  return sel_powerMarkerAvailableMax;
}

uint64_t key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);

  return __swift_storeEnumTagSinglePayload(a3, v6, 1, v7);
}

uint64_t sub_24941076C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEnginePower.powerMarkerAvailableMin : CAFEnginePower(a1, (SEL *)&selRef_powerMarkerAvailableMax, a2);
}

uint64_t type metadata accessor for CAFEnginePowerObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEnginePower()
{
  return lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable(&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEnginePower and conformance CAFEnginePower()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower;
  if (!lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEnginePower);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEnginePower and conformance CAFEnginePower);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFEnginePowerObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEnginePowerObservable and conformance CAFEnginePowerObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFEnginePowerObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFEnginePowerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFEnginePowerObservable);
}

uint64_t dispatch thunk of CAFEnginePowerObservable.power.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$power.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMarkerAvailableMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMarkerAvailableMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.powerMarkerAvailableMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.$powerMarkerAvailableMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEnginePowerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t outlined destroy of Measurement<NSUnitPower>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEnginePowerObservable.resetCachedDescription()()
{
  return CAFEnginePowerObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitPower> and conformance Measurement<A>);
  }
  return result;
}

void OUTLINED_FUNCTION_2_9(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000001BLL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_4_9()
{
  return dispatch thunk of CustomStringConvertible.description.getter();
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return 0x4D7265776F70202CLL;
}

id CAFVolumeObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
}

uint64_t CAFVolumeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFVolumeObservable.volumeType.getter()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVolumeObservable.$volumeType.getter()
{
  return CAFVolumeObservable.$volumeType.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volumeType, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFVolumeObservable.volume : CAFVolumeObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFVolumeObservable.volume.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFVolumeObservable.volume : CAFVolumeObservable(unsigned __int8 *a1)
{
  return CAFVolumeObservable.volume.setter(*a1);
}

uint64_t CAFVolumeObservable.volume.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFVolumeObservable.volume.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFVolumeObservable.volume.modify(void *a1))(uint64_t a1)
{
  unint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFVolumeObservable.volume.modify;
}

void CAFVolumeObservable.volume.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFVolumeObservable.$volume.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFVolumeObservable.userVisibleLabel.getter()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVolumeObservable.$userVisibleLabel.getter()
{
  return CAFVolumeObservable.$volumeType.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVolumeObservable.name.getter()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFVolumeObservable.$name.getter()
{
  return CAFVolumeObservable.$volumeType.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFVolumeObservable.$volumeType.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFVolumeObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForVolumeType))
  {
    CAFVolumeObservable.volumeType.getter();
    id v4 = (id)NSStringFromVolumeType();
    if (v4)
    {
      id v5 = v4;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v6;
    }
    else
    {
      uint64_t v3 = (void *)0xE900000000000029;
      uint64_t v2 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v7 = 0x73696765726E753CLL;
  uint64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForVolume))
  {
    CAFVolumeObservable.volume.getter();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v9;
  }
  if (objc_msgSend(v1, sel_registeredForUserVisibleLabel))
  {
    CAFVolumeObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(78);
  v10._countAndFlagsBits = 0xD000000000000016;
  v10._object = (void *)0x8000000249488EA0;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x6D756C6F76207B20;
  v11._object = (void *)0xEF203A6570795465;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x656D756C6F76202CLL;
  v13._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000249488EC0;
  v15._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v15);
  v16._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 4095264;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t CAFVolumeObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFVolumeObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFVolumeObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFVolumeObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFVolumeObservable.init(_:)(a1);
}

id CAFVolumeObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volumeType;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, CAFVolumeType>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__volume;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFVolumeObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__userVisibleLabel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v13 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFVolumeObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v15 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed] = a1;
  id v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFVolumeObservable();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFVolumeObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFVolumeObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine19CAFVolumeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFVolumeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFVolumeObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFVolumeObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFVolumeObservable@<X0>(void *a1@<X8>)
{
  id result = CAFVolumeObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFVolumeObservable(void **a1)
{
  return CAFVolumeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFVolumeObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFVolumeObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateVolumeType:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateVolume:)()
{
  return swift_release();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVolumeObservable.volumeService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFVolumeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFVolumeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFVolumeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_249411F1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFVolumeObservable.volume.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249411F48(unsigned __int8 *a1)
{
  return CAFVolumeObservable.volume.setter(*a1);
}

char *keypath_get_selector_volumeType()
{
  return sel_volumeType;
}

id sub_249411F7C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_volumeType);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_volume()
{
  return sel_volume;
}

id sub_249411FBC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_volume);
  *a2 = (_BYTE)result;
  return result;
}

id sub_249411FF0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVolume_, *a1);
}

uint64_t type metadata accessor for CAFVolumeObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFVolume(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFVolumeObservable and conformance CAFVolumeObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFVolumeObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFVolumeObservable()
{
  return lazy protocol witness table accessor for type CAFVolumeObservable and conformance CAFVolumeObservable(&lazy protocol witness table cache variable for type CAFVolume and conformance CAFVolume, 255, (void (*)(uint64_t))type metadata accessor for CAFVolume);
}

unint64_t type metadata accessor for CAFVolume()
{
  unint64_t result = lazy cache variable for type metadata for CAFVolume;
  if (!lazy cache variable for type metadata for CAFVolume)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFVolume);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFVolumeObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFVolumeObservable and conformance CAFVolumeObservable(&lazy protocol witness table cache variable for type CAFVolumeObservable and conformance CAFVolumeObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFVolumeObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFVolumeObservable and conformance CAFVolumeObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFVolumeObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFVolumeObservable);
}

uint64_t dispatch thunk of CAFVolumeObservable.volumeType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$volumeType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.volume.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$volume.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFVolumeObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFVolumeObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFVolumeObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in CAFVolumeObservable.resetCachedDescription()()
{
  return CAFVolumeObservable.cachedDescription.setter(0, 0);
}

id CAFFuelConsumptionObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed);
}

uint64_t CAFFuelConsumptionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFFuelConsumptionObservable.fuelEfficiency.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFFuelConsumptionObservable.$fuelEfficiency.getter()
{
  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFFuelConsumptionObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x270FA5388](v1);
  uint64_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed), sel_registeredForFuelEfficiency))
  {
    CAFFuelConsumptionObservable.fuelEfficiency.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>();
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v7 = v6;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  else
  {
    uint64_t v7 = (void *)0xEE003E6465726574;
    uint64_t v5 = 0x73696765726E753CLL;
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(57);
  v8._countAndFlagsBits = 0xD00000000000001FLL;
  v8._object = (void *)0x8000000249488F40;
  String.append(_:)(v8);
  v13[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v9._object = (void *)0x8000000249488F60;
  v9._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v5;
  v10._object = v7;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 4095264;
  v11._object = (void *)0xE300000000000000;
  String.append(_:)(v11);
  return v14;
}

uint64_t CAFFuelConsumptionObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFFuelConsumptionObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFFuelConsumptionObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFFuelConsumptionObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFFuelConsumptionObservable.init(_:)(a1);
}

id CAFFuelConsumptionObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable__fuelEfficiency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFuelConsumptionObservable, Measurement<NSUnitFuelEfficiency>>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed] = a1;
  id v10 = a1;

  v13.receiver = v8;
  v13.super_class = (Class)type metadata accessor for CAFFuelConsumptionObservable();
  id v11 = objc_msgSendSuper2(&v13, sel_init);
  objc_msgSend(v10, sel_registerObserver_, v11);

  return v11;
}

uint64_t CAFFuelConsumptionObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFFuelConsumptionObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFFuelConsumptionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFFuelConsumptionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFFuelConsumptionObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFFuelConsumptionObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFFuelConsumptionObservable@<X0>(void *a1@<X8>)
{
  id result = CAFFuelConsumptionObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFFuelConsumptionObservable(void **a1)
{
  return CAFFuelConsumptionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFFuelConsumptionObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFFuelConsumptionObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFFuelConsumptionObservable.fuelConsumptionService(_:didUpdateFuelEfficiency:)(uint64_t a1, uint64_t a2)
{
  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFFuelConsumptionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFFuelConsumptionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFFuelConsumptionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void key path getter for CAFFuelConsumption.fuelEfficiency : CAFFuelConsumption(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_fuelEfficiency);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitFuelEfficiency);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t type metadata accessor for CAFFuelConsumptionObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFFuelConsumption()
{
  return lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable(&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable);
}

unint64_t lazy protocol witness table accessor for type CAFFuelConsumption and conformance CAFFuelConsumption()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption;
  if (!lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFFuelConsumption);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFFuelConsumption and conformance CAFFuelConsumption);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFFuelConsumptionObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFuelConsumptionObservable and conformance CAFFuelConsumptionObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFFuelConsumptionObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFFuelConsumptionObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFFuelConsumptionObservable);
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.fuelEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.$fuelEfficiency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFFuelConsumptionObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 184))();
}

uint64_t partial apply for closure #1 in CAFFuelConsumptionObservable.resetCachedDescription()()
{
  return CAFFuelConsumptionObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitFuelEfficiency>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitFuelEfficiency> and conformance Measurement<A>);
  }
  return result;
}

id CAFDriveModeObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
}

uint64_t CAFDriveModeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDriveModeObservable.identifiers.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFDriveModeObservable.$identifiers.getter()
{
  return CAFDriveModeObservable.$identifiers.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__identifiers, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFDriveModeObservable.currentIndex.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFDriveModeObservable.$currentIndex.getter()
{
  return CAFDriveModeObservable.$identifiers.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__currentIndex, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFDriveModeObservable.$identifiers.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFDriveModeObservable._description.getter()
{
  _StringGuts.grow(_:)(33);
  v0._object = (void *)0x8000000249489000;
  v0._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFDriveModeObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFDriveModeObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFDriveModeObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFDriveModeObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFDriveModeObservable.init(_:)(a1);
}

id CAFDriveModeObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__identifiers;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDriveModeObservable, [String]>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable__currentIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDriveModeObservable, UInt32>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFDriveModeObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFDriveModeObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFDriveModeObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFDriveModeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDriveModeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDriveModeObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFDriveModeObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDriveModeObservable@<X0>(void *a1@<X8>)
{
  id result = CAFDriveModeObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFDriveModeObservable(void **a1)
{
  return CAFDriveModeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDriveModeObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFDriveModeObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDriveModeObservable.modeItemsService(_:didUpdateIdentifiers:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFDriveModeObservable.modeItemsService(_:didUpdateCurrentIndex:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFDriveModeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFDriveModeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFDriveModeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_identifiers()
{
  return sel_identifiers;
}

void key path getter for CAFModeItems.identifiers : CAFDriveMode(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_identifiers);
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  *a2 = v4;
}

id sub_249413CB4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_currentIndex);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CAFDriveModeObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDriveMode(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFDriveModeObservable and conformance CAFDriveModeObservable(&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDriveModeObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDriveModeObservable()
{
  return lazy protocol witness table accessor for type CAFDriveModeObservable and conformance CAFDriveModeObservable(&lazy protocol witness table cache variable for type CAFDriveMode and conformance CAFDriveMode, 255, (void (*)(uint64_t))type metadata accessor for CAFDriveMode);
}

unint64_t type metadata accessor for CAFDriveMode()
{
  unint64_t result = lazy cache variable for type metadata for CAFDriveMode;
  if (!lazy cache variable for type metadata for CAFDriveMode)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDriveMode);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFDriveModeObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFDriveModeObservable and conformance CAFDriveModeObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFDriveModeObservable and conformance CAFDriveModeObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDriveModeObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFDriveModeObservable and conformance CAFDriveModeObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFDriveModeObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFDriveModeObservable);
}

uint64_t dispatch thunk of CAFDriveModeObservable.identifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.$identifiers.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.currentIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.$currentIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDriveModeObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFDriveModeObservable.resetCachedDescription()()
{
  return CAFDriveModeObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFEqualizerType.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFEqualizerType.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFEqualizerType.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFEqualizerType.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFEqualizerType.description.getter()
{
  id v0 = (id)NSStringFromEqualizerType();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFEqualizerType(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType);
  a1[2] = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType);
  uint64_t result = lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(&lazy protocol witness table cache variable for type CAFEqualizerType and conformance CAFEqualizerType);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEqualizerType and conformance CAFEqualizerType(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFEqualizerType(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFEqualizerType()
{
  return CAFEqualizerType.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFEqualizerType] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFEqualizerType]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFEqualizerType] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFEqualizerType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFEqualizerType.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFEqualizerType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFPairedDevicesActionObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed);
}

uint64_t CAFPairedDevicesActionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFPairedDevicesActionObservable._description.getter()
{
  _StringGuts.grow(_:)(43);
  v0._object = (void *)0x8000000249489090;
  v0._countAndFlagsBits = 0xD000000000000023;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFPairedDevicesActionObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFPairedDevicesActionObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFPairedDevicesActionObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFPairedDevicesActionObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFPairedDevicesActionObservable.init(_:)(a1);
}

id CAFPairedDevicesActionObservable.init(_:)(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescription];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)&v1[v4] = v5;
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFPairedDevicesActionObservable();
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFPairedDevicesActionObservable()
{
  return self;
}

uint64_t CAFPairedDevicesActionObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFPairedDevicesActionObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFPairedDevicesActionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPairedDevicesActionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPairedDevicesActionObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFPairedDevicesActionObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPairedDevicesActionObservable@<X0>(void *a1@<X8>)
{
  id result = CAFPairedDevicesActionObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPairedDevicesActionObservable(void **a1)
{
  return CAFPairedDevicesActionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPairedDevicesActionObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFPairedDevicesActionObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPairedDevicesActionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFPairedDevicesActionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFPairedDevicesActionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPairedDevicesAction(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesActionObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPairedDevicesActionObservable()
{
  return lazy protocol witness table accessor for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable(&lazy protocol witness table cache variable for type CAFPairedDevicesAction and conformance CAFPairedDevicesAction, 255, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesAction);
}

unint64_t type metadata accessor for CAFPairedDevicesAction()
{
  unint64_t result = lazy cache variable for type metadata for CAFPairedDevicesAction;
  if (!lazy cache variable for type metadata for CAFPairedDevicesAction)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPairedDevicesAction);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPairedDevicesActionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPairedDevicesActionObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPairedDevicesActionObservable and conformance CAFPairedDevicesActionObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFPairedDevicesActionObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFPairedDevicesActionObservable);
}

uint64_t dispatch thunk of CAFPairedDevicesActionObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFPairedDevicesActionObservable.resetCachedDescription()()
{
  return CAFPairedDevicesActionObservable.cachedDescription.setter(0, 0);
}

id CAFEqualizerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
}

uint64_t CAFEqualizerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEqualizerObservable.type.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFEqualizerObservable.$type.getter()
{
  return CAFEqualizerObservable.$type.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEqualizerObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFEqualizerObservable.$sortOrder.getter()
{
  return CAFEqualizerObservable.$type.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFEqualizerObservable.value : CAFEqualizerObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFEqualizerObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFEqualizerObservable.value : CAFEqualizerObservable(unsigned __int8 *a1)
{
  return CAFEqualizerObservable.value.setter(*a1);
}

uint64_t CAFEqualizerObservable.value.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFEqualizerObservable.value.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFEqualizerObservable.value.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFEqualizerObservable.value.modify;
}

void CAFEqualizerObservable.value.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFEqualizerObservable.$value.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFEqualizerObservable.userVisibleLabel.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFEqualizerObservable.$userVisibleLabel.getter()
{
  return CAFEqualizerObservable.$type.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFEqualizerObservable.name.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFEqualizerObservable.$name.getter()
{
  return CAFEqualizerObservable.$type.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFEqualizerObservable.$type.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFEqualizerObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForEqualizerType))
  {
    CAFEqualizerObservable.type.getter();
    id v4 = (id)NSStringFromEqualizerType();
    if (v4)
    {
      id v5 = v4;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v6;
    }
    else
    {
      uint64_t v3 = (void *)0xE900000000000029;
      uint64_t v2 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v7 = 0x73696765726E753CLL;
  Swift::String v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForSortOrder))
  {
    CAFEqualizerObservable.sortOrder.getter();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    Swift::String v8 = v9;
  }
  uint64_t v10 = 0x73696765726E753CLL;
  uint64_t v11 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForEqualizerValue))
  {
    CAFEqualizerObservable.value.getter();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v12;
  }
  if (objc_msgSend(v1, sel_registeredForUserVisibleLabel))
  {
    CAFEqualizerObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    String.init<A>(describing:)();
  }
  _StringGuts.grow(_:)(89);
  v13._countAndFlagsBits = 0xD000000000000019;
  v13._object = (void *)0x8000000249489140;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x3A65707974207B20;
  v14._object = (void *)0xE900000000000020;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v2;
  v15._object = v3;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x724F74726F73202CLL;
  v16._object = (void *)0xED0000203A726564;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v7;
  v17._object = v8;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x3A65756C6176202CLL;
  v18._object = (void *)0xE900000000000020;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v10;
  v19._object = v11;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0x8000000249488EC0;
  v20._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v20);
  v21._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFEqualizerObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFEqualizerObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFEqualizerObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFEqualizerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFEqualizerObservable.init(_:)(a1);
}

id CAFEqualizerObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, CAFEqualizerType>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__value;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFEqualizerObservable, Int8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__userVisibleLabel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v15 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__name;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEqualizerObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v17 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFEqualizerObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFEqualizerObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFEqualizerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEqualizerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEqualizerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFEqualizerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEqualizerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFEqualizerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFEqualizerObservable(void **a1)
{
  return CAFEqualizerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEqualizerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFEqualizerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateType:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFEqualizerObservable.equalizerService(_:didUpdateType:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__type, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateSortOrder:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFEqualizerObservable.equalizerService(_:didUpdateType:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEqualizerObservable__sortOrder, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateType:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateValue:)()
{
  return swift_release();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateUserVisibleLabel:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFEqualizerObservable.equalizerService(_:didUpdateName:)()
{
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFEqualizerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFEqualizerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFEqualizerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2494160C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFEqualizerObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494160EC(unsigned __int8 *a1)
{
  return CAFEqualizerObservable.value.setter(*a1);
}

char *keypath_get_selector_type()
{
  return sel_type;
}

id sub_249416120@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_type);
  *a2 = (_BYTE)result;
  return result;
}

id sub_249416154@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sortOrder);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_value()
{
  return sel_value;
}

id sub_249416194@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_value);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2494161C8(char *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setValue_, *a1);
}

uint64_t type metadata accessor for CAFEqualizerObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEqualizer(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFEqualizerObservable and conformance CAFEqualizerObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFEqualizerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFEqualizerObservable()
{
  return lazy protocol witness table accessor for type CAFEqualizerObservable and conformance CAFEqualizerObservable(&lazy protocol witness table cache variable for type CAFEqualizer and conformance CAFEqualizer, 255, (void (*)(uint64_t))type metadata accessor for CAFEqualizer);
}

unint64_t type metadata accessor for CAFEqualizer()
{
  unint64_t result = lazy cache variable for type metadata for CAFEqualizer;
  if (!lazy cache variable for type metadata for CAFEqualizer)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFEqualizer);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFEqualizerObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFEqualizerObservable and conformance CAFEqualizerObservable(&lazy protocol witness table cache variable for type CAFEqualizerObservable and conformance CAFEqualizerObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFEqualizerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEqualizerObservable and conformance CAFEqualizerObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFEqualizerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFEqualizerObservable);
}

uint64_t dispatch thunk of CAFEqualizerObservable.type.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$type.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.value.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$value.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFEqualizerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 296))();
}

uint64_t partial apply for closure #1 in CAFEqualizerObservable.resetCachedDescription()()
{
  return CAFEqualizerObservable.cachedDescription.setter(0, 0);
}

id CAFBooleanSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
}

uint64_t CAFBooleanSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFBooleanSettingObservable.userVisibleLabel.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFBooleanSettingObservable.$userVisibleLabel.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.sectionIdentifier.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFBooleanSettingObservable.$sectionIdentifier.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFBooleanSettingObservable.$sortOrder.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFBooleanSettingObservable.$category.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.identifier.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFBooleanSettingObservable.$identifier.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.disabled.getter()
{
  return CAFBooleanSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFBooleanSettingObservable.$disabled.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.limitableUIElement.getter()
{
  return CAFBooleanSettingObservable.disabled.getter();
}

uint64_t CAFBooleanSettingObservable.$limitableUIElement.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.hidden.getter()
{
  return CAFBooleanSettingObservable.disabled.getter();
}

uint64_t CAFBooleanSettingObservable.$hidden.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.showAudioBrandLogo.getter()
{
  return CAFBooleanSettingObservable.disabled.getter();
}

uint64_t CAFBooleanSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.vehicleLayoutKey.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFBooleanSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.symbolName.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFBooleanSettingObservable.$symbolName.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFBooleanSettingObservable.$prominenceInfo.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFBooleanSettingObservable.on : CAFBooleanSettingObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFBooleanSettingObservable.on.getter();
  *a1 = result & 1;
  return result;
}

uint64_t key path setter for CAFBooleanSettingObservable.on : CAFBooleanSettingObservable(unsigned __int8 *a1)
{
  return CAFBooleanSettingObservable.on.setter(*a1);
}

uint64_t CAFBooleanSettingObservable.on.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFBooleanSettingObservable.on.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFBooleanSettingObservable.on.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFBooleanSettingObservable.on.modify;
}

void CAFBooleanSettingObservable.on.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFBooleanSettingObservable.$on.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFBooleanSettingObservable.name.getter()
{
  return CAFBooleanSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFBooleanSettingObservable.$name.getter()
{
  return CAFBooleanSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFBooleanSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFBooleanSettingObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed), sel_registeredForOn))
  {
    char v1 = CAFBooleanSettingObservable.on.getter();
    if (v1) {
      uint64_t v2 = 1702195828;
    }
    else {
      uint64_t v2 = 0x65736C6166;
    }
    if (v1) {
      uint64_t v3 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v3 = (void *)0xE500000000000000;
    }
  }
  else
  {
    uint64_t v3 = (void *)0xEE003E6465726574;
    uint64_t v2 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(44);
  v4._object = (void *)0x80000002494891C0;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x203A6E6F207B20;
  v5._object = (void *)0xE700000000000000;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v2;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t CAFBooleanSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFBooleanSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFBooleanSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFBooleanSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFBooleanSettingObservable.init(_:)(a1);
}

id CAFBooleanSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBooleanSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__on;
  uint64_t v26 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFBooleanSettingObservable, Bool>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v27 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v25] = specialized SafePublished.init(observedValuekeypath:)(v27);
  uint64_t v28 = OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v28] = specialized SafePublished.init(observedValuekeypath:)(v26);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed] = a1;
  id v29 = a1;

  v32.receiver = v9;
  v32.super_class = (Class)type metadata accessor for CAFBooleanSettingObservable();
  id v30 = objc_msgSendSuper2(&v32, sel_init);
  objc_msgSend(v29, sel_registerObserver_, v30);

  return v30;
}

uint64_t CAFBooleanSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFBooleanSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFBooleanSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFBooleanSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFBooleanSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFBooleanSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFBooleanSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFBooleanSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFBooleanSettingObservable(void **a1)
{
  return CAFBooleanSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFBooleanSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFBooleanSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFBooleanSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBooleanSettingObservable.BOOLeanSettingService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFBooleanSettingObservable.BOOLeanSettingService(_:didUpdateName:)()
{
  return CAFBooleanSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFBooleanSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFBooleanSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFBooleanSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2494180F0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFBooleanSettingObservable.on.getter();
  *uint64_t v0 = result & 1;
  return result;
}

uint64_t sub_24941811C(unsigned __int8 *a1)
{
  return CAFBooleanSettingObservable.on.setter(*a1);
}

void sub_249418144(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249418164(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_249418188@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2494181BC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2494181DC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249418204()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24941822C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249418254()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_24941827C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24941829C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2494182C0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_on);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2494182F4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOn_, *a1);
}

void sub_249418308(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFBooleanSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFBooleanSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFBooleanSettingObservable()
{
  return lazy protocol witness table accessor for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable(&lazy protocol witness table cache variable for type CAFBooleanSetting and conformance CAFBooleanSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFBooleanSetting);
}

unint64_t type metadata accessor for CAFBooleanSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFBooleanSetting;
  if (!lazy cache variable for type metadata for CAFBooleanSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFBooleanSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFBooleanSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFBooleanSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFBooleanSettingObservable and conformance CAFBooleanSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFBooleanSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFBooleanSettingObservable);
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))() & 0x1FF;
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFBooleanSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 512))();
}

uint64_t partial apply for closure #1 in CAFBooleanSettingObservable.resetCachedDescription()()
{
  return CAFBooleanSettingObservable.cachedDescription.setter(0, 0);
}

unint64_t CAFMediaSource.currentFrequencyBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasCurrentFrequency);
  unsigned __int8 v2 = v1;
  if (v1) {
    uint64_t v3 = objc_msgSend(v0, sel_currentFrequency);
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 | ((unint64_t)(v2 ^ 1u) << 32);
}

id CAFMediaSourceObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
}

uint64_t CAFMediaSourceObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

unint64_t CAFMediaSourceObservable.currentFrequency.getter()
{
  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t CAFMediaSourceObservable.$currentFrequency.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentFrequency, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.currentMediaItemIdentifier.getter()
{
  return CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFMediaSourceObservable.$currentMediaItemIdentifier.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentMediaItemIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.mediaItems.getter()
{
  return CAFMediaSourceObservable.mediaItems.getter();
}

{
  void *v0;
  id v1;
  uint64_t v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMediaSourceObservable.$mediaItems.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.userVisibleLabel.getter()
{
  return CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

uint64_t CAFMediaSourceObservable.$userVisibleLabel.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.identifier.getter()
{
  return CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

uint64_t CAFMediaSourceObservable.$identifier.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.mediaSourceSemanticType.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMediaSourceObservable.$mediaSourceSemanticType.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaSourceSemanticType, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.disabled.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFMediaSourceObservable.$disabled.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.mediaItemImages.getter()
{
  return CAFMediaSourceObservable.mediaItems.getter();
}

uint64_t CAFMediaSourceObservable.$mediaItemImages.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.name.getter()
{
  return CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
}

uint64_t CAFMediaSourceObservable.$name.getter()
{
  return CAFMediaSourceObservable.$currentFrequency.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFMediaSourceObservable.$currentFrequency.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFMediaSourceObservable._description.getter()
{
  v51._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v51._countAndFlagsBits = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed);
  objc_msgSend(v3, sel_registeredForCurrentFrequency);
  OUTLINED_FUNCTION_0_4();
  unint64_t v5 = 0xEE003E6465726574;
  if (v6)
  {
    CAFMediaSourceObservable.currentFrequency.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    uint64_t v4 = OUTLINED_FUNCTION_5_9();
  }
  v50._countAndFlagsBits = v4;
  v50._object = (void *)v5;
  objc_msgSend(v3, sel_registeredForCurrentMediaItemIdentifier);
  OUTLINED_FUNCTION_0_4();
  id v8 = (void *)0xEE003E6465726574;
  if (v9)
  {
    CAFMediaSourceObservable.currentMediaItemIdentifier.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v7 = OUTLINED_FUNCTION_5_9();
    id v8 = v10;
  }
  uint64_t v49 = v7;
  objc_msgSend(v3, sel_registeredForMediaItems);
  OUTLINED_FUNCTION_0_4();
  uint64_t v12 = (void *)0xEE003E6465726574;
  if (v13)
  {
    CAFMediaSourceObservable.mediaItems.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItems?);
    uint64_t v11 = OUTLINED_FUNCTION_5_9();
    uint64_t v12 = v14;
  }
  uint64_t v48 = v11;
  objc_msgSend(v3, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_0_4();
  uint64_t v16 = (void *)0xEE003E6465726574;
  if (v17)
  {
    CAFMediaSourceObservable.userVisibleLabel.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v15 = OUTLINED_FUNCTION_5_9();
    uint64_t v16 = v18;
  }
  uint64_t v47 = v15;
  objc_msgSend(v3, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_0_4();
  uint64_t v20 = (void *)0xEE003E6465726574;
  if (v21)
  {
    uint64_t v19 = CAFMediaSourceObservable.identifier.getter();
    uint64_t v20 = v22;
  }
  uint64_t v46 = v19;
  objc_msgSend(v3, sel_registeredForMediaSourceSemanticType);
  OUTLINED_FUNCTION_20_3();
  uint64_t v23 = (void *)0xEE003E6465726574;
  if (v24)
  {
    CAFMediaSourceObservable.mediaSourceSemanticType.getter();
    id v25 = (id)NSStringFromMediaSourceSemanticType();
    if (v25)
    {
      uint64_t v26 = v25;
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v23 = v27;
    }
    else
    {
      uint64_t v23 = (void *)0xE900000000000029;
      uint64_t v1 = 0x6E776F6E6B6E7528;
    }
  }
  objc_msgSend(v3, sel_registeredForDisabled, v1);
  OUTLINED_FUNCTION_20_3();
  uint64_t v28 = (void *)0xEE003E6465726574;
  if (v29)
  {
    char v30 = CAFMediaSourceObservable.disabled.getter();
    if (v30) {
      uint64_t v1 = 1702195828;
    }
    else {
      uint64_t v1 = 0x65736C6166;
    }
    if (v30) {
      uint64_t v28 = (void *)0xE400000000000000;
    }
    else {
      uint64_t v28 = (void *)0xE500000000000000;
    }
  }
  if (objc_msgSend(v3, sel_registeredForMediaItemImages))
  {
    CAFMediaSourceObservable.mediaItemImages.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAFMediaItemImages?);
    v51._countAndFlagsBits = OUTLINED_FUNCTION_5_9();
    v51._object = v31;
  }
  uint64_t v52 = static String._createEmpty(withInitialCapacity:)(205);
  v32._object = (void *)0x80000002494892D0;
  v32._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v32);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_3_7(0xD000000000000015, (uint64_t)" { currentFrequency: ");
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD00000000000001ELL, (uint64_t)", currentMediaItemIdentifier: ");
  v33._countAndFlagsBits = v49;
  v33._object = v8;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0x49616964656D202CLL;
  v34._object = (void *)0xEE00203A736D6574;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v48;
  v35._object = v12;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000014, (uint64_t)", userVisibleLabel: ");
  v36._countAndFlagsBits = v47;
  v36._object = v16;
  String.append(_:)(v36);
  swift_bridgeObjectRelease();
  v37._countAndFlagsBits = 0x69746E656469202CLL;
  v37._object = (void *)0xEE00203A72656966;
  String.append(_:)(v37);
  v38._countAndFlagsBits = v46;
  v38._object = v20;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  v39._object = (void *)0x8000000249489330;
  v39._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v39);
  v40._countAndFlagsBits = v45;
  v40._object = v23;
  String.append(_:)(v40);
  swift_bridgeObjectRelease();
  v41._countAndFlagsBits = 0x6C6261736964202CLL;
  v41._object = (void *)0xEC000000203A6465;
  String.append(_:)(v41);
  v42._countAndFlagsBits = v1;
  v42._object = v28;
  String.append(_:)(v42);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000013, (uint64_t)", mediaItemImages: ");
  String.append(_:)(v51);
  swift_bridgeObjectRelease();
  v43._countAndFlagsBits = 4095264;
  v43._object = (void *)0xE300000000000000;
  String.append(_:)(v43);
  return v52;
}

uint64_t CAFMediaSourceObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFMediaSourceObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFMediaSourceObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFMediaSourceObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFMediaSourceObservable.init(_:)(a1);
}

id CAFMediaSourceObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentFrequency;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, UInt32?>);
  OUTLINED_FUNCTION_10_1();
  id v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__currentMediaItemIdentifier;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaItems?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v14;
  uint64_t v15 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__userVisibleLabel;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v8[v15] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__identifier;
  uint64_t v17 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaSourceSemanticType;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaSourceSemanticType>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, Bool>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v21 = OUTLINED_FUNCTION_7_1();
  *(void *)&v8[v20] = specialized SafePublished.init(observedValuekeypath:)(v21);
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages;
  uint64_t v23 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFMediaSourceObservable, CAFMediaItemImages?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v22] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v8[v25] = specialized SafePublished.init(observedValuekeypath:)(v23);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed] = a1;
  id v26 = a1;

  v29.receiver = v8;
  v29.super_class = (Class)type metadata accessor for CAFMediaSourceObservable();
  id v27 = objc_msgSendSuper2(&v29, sel_init);
  objc_msgSend(v26, sel_registerObserver_, v27);

  return v27;
}

uint64_t CAFMediaSourceObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFMediaSourceObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFMediaSourceObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFMediaSourceObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFMediaSourceObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFMediaSourceObservable@<X0>(void *a1@<X8>)
{
  id result = CAFMediaSourceObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFMediaSourceObservable(void **a1)
{
  return CAFMediaSourceObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFMediaSourceObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFMediaSourceObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentFrequency:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(uint64_t a1, void *a2)
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItems, (void (*)(void *))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateUserVisibleLabel:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)();
}

uint64_t @objc CAFMediaSourceObservable.mediaSourceService(_:didUpdateCurrentMediaItemIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaSourceSemanticType:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateDisabled:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItemImages:)(uint64_t a1, void *a2)
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFMediaSourceObservable__mediaItemImages, (void (*)(void *))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateMediaItems:)(uint64_t a1, void *a2, uint64_t a3, void (*a4)(void *))
{
  id v6 = a2;
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t CAFMediaSourceObservable.mediaSourceService(_:didUpdateName:)()
{
  return CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)();
}

uint64_t @objc CAFMediaSourceObservable.mediaSourceService(_:didUpdateIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFMediaSourceObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFMediaSourceObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFMediaSourceObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

unint64_t key path getter for CAFMediaSource.currentFrequencyBridged : CAFMediaSource@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFMediaSource.currentFrequencyBridged.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

char *keypath_get_selector_currentMediaItemIdentifier()
{
  return sel_currentMediaItemIdentifier;
}

void sub_24941A4A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_mediaItems()
{
  return sel_mediaItems;
}

id key path getter for CAFMediaSource.mediaItems : CAFMediaSource@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mediaItems);
  *a2 = result;
  return result;
}

void sub_24941A510(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24941A530(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_mediaSourceSemanticType()
{
  return sel_mediaSourceSemanticType;
}

id sub_24941A55C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mediaSourceSemanticType);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_disabled()
{
  return sel_disabled;
}

id sub_24941A59C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_disabled);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_mediaItemImages()
{
  return sel_mediaItemImages;
}

id key path getter for CAFMediaSource.mediaItemImages : CAFMediaSource@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mediaItemImages);
  *a2 = result;
  return result;
}

void sub_24941A61C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFMediaSourceObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFMediaSource(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable(&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFMediaSourceObservable()
{
  return lazy protocol witness table accessor for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable(&lazy protocol witness table cache variable for type CAFMediaSource and conformance CAFMediaSource, 255, (void (*)(uint64_t))type metadata accessor for CAFMediaSource);
}

unint64_t type metadata accessor for CAFMediaSource()
{
  unint64_t result = lazy cache variable for type metadata for CAFMediaSource;
  if (!lazy cache variable for type metadata for CAFMediaSource)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFMediaSource);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFMediaSourceObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFMediaSourceObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFMediaSourceObservable and conformance CAFMediaSourceObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFMediaSourceObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFMediaSourceObservable);
}

uint64_t dispatch thunk of CAFMediaSourceObservable.currentFrequency.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$currentFrequency.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.currentMediaItemIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$currentMediaItemIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaItems.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaItems.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaSourceSemanticType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaSourceSemanticType.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.mediaItemImages.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$mediaItemImages.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFMediaSourceObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t partial apply for closure #1 in CAFMediaSourceObservable.resetCachedDescription()()
{
  return CAFMediaSourceObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_3_7(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t OUTLINED_FUNCTION_5_9()
{
  return String.init<A>(describing:)();
}

id CAFFanObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
}

uint64_t CAFFanObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFFanObservable.fanLevel : CAFFanObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFFanObservable.fanLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFFanObservable.fanLevel : CAFFanObservable(unsigned __int8 *a1)
{
  return CAFFanObservable.fanLevel.setter(*a1);
}

uint64_t CAFFanObservable.fanLevel.getter()
{
  return CAFFanObservable.fanLevel.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, void);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  swift_beginAccess();
  uint64_t v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  swift_retain();
  swift_retain();
  unint64_t v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFFanObservable.fanLevel.setter(uint64_t a1)
{
  return CAFFanObservable.fanLevel.setter(a1, (uint64_t)&unk_249476A40, (uint64_t)&unk_249476A68, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void (*CAFFanObservable.fanLevel.modify())(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFFanObservable.fanLevel.modify;
}

void CAFFanObservable.fanLevel.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFFanObservable.$fanLevel.getter()
{
  return CAFFanObservable.$fanLevel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__fanLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFFanObservable.on : CAFFanObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFFanObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFFanObservable.on : CAFFanObservable(unsigned __int8 *a1)
{
  return CAFFanObservable.on.setter(*a1);
}

uint64_t CAFFanObservable.on.getter()
{
  return CAFFanObservable.fanLevel.getter();
}

uint64_t CAFFanObservable.on.setter(uint64_t a1)
{
  return CAFFanObservable.fanLevel.setter(a1, (uint64_t)&unk_249476A88, (uint64_t)&unk_249476AB0, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFFanObservable.fanLevel.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, id, uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  id v8 = v4;

  return a4(a1, v8, KeyPath, v7);
}

void (*CAFFanObservable.on.modify())(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFFanObservable.on.modify;
}

void CAFFanObservable.on.modify(uint64_t a1, uint64_t a2)
{
}

void CAFFanObservable.fanLevel.modify(uint64_t a1, uint64_t a2, void (*a3)(void, id, void, void))
{
  unint64_t v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v3);
}

uint64_t CAFFanObservable.$on.getter()
{
  return CAFFanObservable.$fanLevel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.$fanLevel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFFanObservable.autoMode.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFFanObservable.$autoMode.getter()
{
  return CAFFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__autoMode, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.vehicleLayoutKey.getter()
{
  return CAFFanObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFFanObservable.$vehicleLayoutKey.getter()
{
  return CAFFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.name.getter()
{
  return CAFFanObservable.vehicleLayoutKey.getter();
}

uint64_t CAFFanObservable.$name.getter()
{
  return CAFFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFFanObservable.$autoMode.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFFanObservable._description.getter()
{
  id v1 = (void *)0xEE003E6465726574;
  uint64_t v24 = 0x73696765726E753CLL;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed);
  uint64_t v3 = 0x73696765726E753CLL;
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForFanLevel))
  {
    CAFFanObservable.fanLevel.getter();
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v4 = v5;
  }
  uint64_t v6 = 0x73696765726E753CLL;
  uint64_t v7 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForOn))
  {
    CAFFanObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v7 = v8;
  }
  uint64_t v9 = 0x73696765726E753CLL;
  uint64_t v10 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForAutoMode))
  {
    CAFFanObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v10 = v11;
  }
  if (objc_msgSend(v2, sel_registeredForVehicleLayoutKey))
  {
    uint64_t v24 = CAFFanObservable.vehicleLayoutKey.getter();
    id v1 = v12;
  }
  _StringGuts.grow(_:)(83);
  v13._object = (void *)0x80000002494893D0;
  v13._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x654C6E6166207B20;
  v14._object = (void *)0xED0000203A6C6576;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v3;
  v15._object = v4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x203A6E6F202CLL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v6;
  v17._object = v7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v18._object = (void *)0xEC000000203A6564;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v9;
  v19._object = v10;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0xD000000000000014;
  v20._object = (void *)0x8000000249485D90;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFFanObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFFanObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFFanObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFFanObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFFanObservable.init(_:)(a1);
}

id CAFFanObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__fanLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFFanObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  id v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFFanObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v10] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__autoMode;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFanObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__vehicleLayoutKey;
  uint64_t v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFFanObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine16CAFFanObservable__name;
  uint64_t v17 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFFanObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFFanObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFFanObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine16CAFFanObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFFanObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFFanObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFFanObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFFanObservable@<X0>(void *a1@<X8>)
{
  id result = CAFFanObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24941BC9C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFFanObservable.fanLevel.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24941BCC4(unsigned __int8 *a1)
{
  return CAFFanObservable.fanLevel.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFFanObservable(void **a1)
{
  return CAFFanObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFFanObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFFanObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFFanObservable.fanService(_:didUpdateFanLevel:)()
{
  return swift_release();
}

uint64_t CAFFanObservable.fanService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFFanObservable.fanService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFFanObservable.fanService(_:didUpdateName:)()
{
  return CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFFanObservable.fanService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFFanObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFFanObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFFanObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_24941C224()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFFanObservable.on.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24941C24C(unsigned __int8 *a1)
{
  return CAFFanObservable.on.setter(*a1);
}

char *keypath_get_selector_fanLevel()
{
  return sel_fanLevel;
}

id sub_24941C280@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fanLevel);
  *a2 = (_BYTE)result;
  return result;
}

id sub_24941C2B4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFanLevel_, *a1);
}

uint64_t sub_24941C2C8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.onBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_24941C2F0(char *a1)
{
  return CAFSeatHeatingCooling.onBridged.setter(*a1);
}

uint64_t sub_24941C318()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.autoModeBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_24941C340(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24941C360(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFFanObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFFan(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFFanObservable and conformance CAFFanObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFFanObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFFanObservable()
{
  return lazy protocol witness table accessor for type CAFFanObservable and conformance CAFFanObservable(&lazy protocol witness table cache variable for type CAFFan and conformance CAFFan, 255, (void (*)(uint64_t))type metadata accessor for CAFFan);
}

unint64_t type metadata accessor for CAFFan()
{
  unint64_t result = lazy cache variable for type metadata for CAFFan;
  if (!lazy cache variable for type metadata for CAFFan)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFFan);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFFanObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFFanObservable and conformance CAFFanObservable(&lazy protocol witness table cache variable for type CAFFanObservable and conformance CAFFanObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFFanObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFanObservable and conformance CAFFanObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFFanObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFFanObservable);
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFFanObservable.fanLevel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFFanObservable.$fanLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFFanObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFFanObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFFanObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFFanObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFFanObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFFanObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFFanObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFFanObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFFanObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFFanObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFFanObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFFanObservable.resetCachedDescription()()
{
  return CAFFanObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFRemainingRange.hiddenBridged.getter()
{
  if (objc_msgSend(v0, sel_hasHidden)) {
    return (uint64_t)objc_msgSend(v0, sel_hidden);
  }
  else {
    return 2;
  }
}

id CAFRemainingRangeObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
}

uint64_t CAFRemainingRangeObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFRemainingRangeObservable.distanceKM.getter()
{
  return CAFRemainingRangeObservable.distanceKM.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFRemainingRangeObservable.$distanceKM.getter()
{
  return CAFRemainingRangeObservable.$distanceKM.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceKM, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable.distanceMiles.getter()
{
  return CAFRemainingRangeObservable.distanceKM.getter();
}

uint64_t CAFRemainingRangeObservable.$distanceMiles.getter()
{
  return CAFRemainingRangeObservable.$distanceKM.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceMiles, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable.hidden.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRemainingRangeObservable.$hidden.getter()
{
  return CAFRemainingRangeObservable.$distanceKM.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemainingRangeObservable.$distanceKM.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFRemainingRangeObservable._description.getter()
{
  if (objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed), sel_registeredForHidden))
  {
    CAFRemainingRangeObservable.hidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v1 = String.init<A>(describing:)();
    uint64_t v3 = v2;
  }
  else
  {
    uint64_t v3 = (void *)0xEE003E6465726574;
    uint64_t v1 = 0x73696765726E753CLL;
  }
  _StringGuts.grow(_:)(48);
  v4._object = (void *)0x8000000249489480;
  v4._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v4);
  _print_unlocked<A, B>(_:_:)();
  v5._countAndFlagsBits = 0x6564646968207B20;
  v5._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v5);
  v6._countAndFlagsBits = v1;
  v6._object = v3;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 4095264;
  v7._object = (void *)0xE300000000000000;
  String.append(_:)(v7);
  return 0;
}

uint64_t CAFRemainingRangeObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription);
    Swift::String v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFRemainingRangeObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFRemainingRangeObservable.cachedDescription.setter(v3, v6);
    Swift::String v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFRemainingRangeObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFRemainingRangeObservable.init(_:)(a1);
}

id CAFRemainingRangeObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  Swift::String v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescription];
  *(void *)Swift::String v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceKM;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemainingRangeObservable, Measurement<NSUnitLength>>);
  swift_allocObject();
  id v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__distanceMiles;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable__hidden;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemainingRangeObservable, Bool?>);
  swift_allocObject();
  *(void *)&v8[v12] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFRemainingRangeObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFRemainingRangeObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFRemainingRangeObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFRemainingRangeObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRemainingRangeObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRemainingRangeObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFRemainingRangeObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFRemainingRangeObservable@<X0>(void *a1@<X8>)
{
  id result = CAFRemainingRangeObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFRemainingRangeObservable(void **a1)
{
  return CAFRemainingRangeObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRemainingRangeObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFRemainingRangeObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(uint64_t a1, uint64_t a2)
{
  return CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

{
  uint64_t vars8;

  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceMiles:)(uint64_t a1, uint64_t a2)
{
  return CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

uint64_t @objc CAFRemainingRangeObservable.distanceDisplayService(_:didUpdateDistanceKM:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitLength);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5();

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t CAFRemainingRangeObservable.remainingRangeService(_:didUpdateHidden:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRemainingRangeObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFRemainingRangeObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFRemainingRangeObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_distanceKM()
{
  return sel_distanceKM;
}

void sub_24941D598(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_distanceMiles()
{
  return sel_distanceMiles;
}

void key path getter for CAFDistanceDisplay.distanceKM : CAFRemainingRange(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitLength);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_24941D640(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_24941D660@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRemainingRange.hiddenBridged.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CAFRemainingRangeObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRemainingRange()
{
  return lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable);
}

unint64_t lazy protocol witness table accessor for type CAFRemainingRange and conformance CAFRemainingRange()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange;
  if (!lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFRemainingRange);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFRemainingRange and conformance CAFRemainingRange);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFRemainingRangeObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRemainingRangeObservable and conformance CAFRemainingRangeObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFRemainingRangeObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFRemainingRangeObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFRemainingRangeObservable);
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.distanceKM.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$distanceKM.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.distanceMiles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$distanceMiles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFRemainingRangeObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFRemainingRangeObservable.resetCachedDescription()()
{
  return CAFRemainingRangeObservable.cachedDescription.setter(0, 0);
}

void CAFRange.maximumValue<A>()(uint64_t a1, uint64_t a2)
{
}

void CAFRange.minimumValue<A>()(uint64_t a1, uint64_t a2)
{
}

BOOL static CAFRange.StepDirection.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void CAFRange.StepDirection.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int CAFRange.StepDirection.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CAFRange.StepDirection()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t CAFRange.extract<A>(from:)(void *a1)
{
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_floatValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_doubleValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_charValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_shortValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_intValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_longLongValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedCharValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedShortValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedIntValue);
    return swift_dynamicCast();
  }
  if (swift_dynamicCastMetatype())
  {
    objc_msgSend(a1, sel_unsignedLongLongValue);
    return swift_dynamicCast();
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void CAFRange.stepValue<A>()(uint64_t a1, uint64_t a2)
{
}

void CAFRange.maximumValue<A>()(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v4 = [v3 *a3];
  CAFRange.extract<A>(from:)(v4);
}

unint64_t lazy protocol witness table accessor for type CAFRange.StepDirection and conformance CAFRange.StepDirection()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection;
  if (!lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFRange.StepDirection and conformance CAFRange.StepDirection);
  }
  return result;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CAFRange.StepDirection(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CAFRange.StepDirection(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24941DF28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for CAFRange.StepDirection(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for CAFRange.StepDirection(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CAFRange.StepDirection()
{
  return &type metadata for CAFRange.StepDirection;
}

uint64_t static CAFSensorState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSensorState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFSensorState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSensorState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSensorState.description.getter()
{
  id v0 = (id)NSStringFromSensorState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  Swift::UInt v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSensorState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState);
  a1[2] = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState);
  uint64_t result = lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(&lazy protocol witness table cache variable for type CAFSensorState and conformance CAFSensorState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSensorState and conformance CAFSensorState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSensorState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSensorState()
{
  return CAFSensorState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSensorState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFSensorState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSensorState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSensorState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFSensorState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFSensorState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFOdometerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed);
}

uint64_t CAFOdometerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFOdometerObservable.distanceKM.getter()
{
  return CAFOdometerObservable.distanceKM.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  int v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed);
  swift_retain();
  swift_retain();
  Swift::UInt v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFOdometerObservable.$distanceKM.getter()
{
  return CAFOdometerObservable.$distanceKM.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  Swift::UInt v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFOdometerObservable.distanceMiles.getter()
{
  return CAFOdometerObservable.distanceKM.getter();
}

uint64_t CAFOdometerObservable.$distanceMiles.getter()
{
  return CAFOdometerObservable.$distanceKM.getter();
}

uint64_t CAFOdometerObservable._description.getter()
{
  _StringGuts.grow(_:)(32);
  v0._object = (void *)0x8000000249489550;
  v0._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFOdometerObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFOdometerObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFOdometerObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFOdometerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFOdometerObservable.init(_:)(a1);
}

id CAFOdometerObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable__distanceKM;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFOdometerObservable, Measurement<NSUnitLength>>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable__distanceMiles;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFOdometerObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFOdometerObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFOdometerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine21CAFOdometerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFOdometerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFOdometerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFOdometerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFOdometerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFOdometerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFOdometerObservable(void **a1)
{
  return CAFOdometerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFOdometerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFOdometerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(uint64_t a1, uint64_t a2)
{
  return CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

{
  uint64_t vars8;

  swift_retain();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceMiles:)(uint64_t a1, uint64_t a2)
{
  return CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(a1, a2);
}

uint64_t @objc CAFOdometerObservable.distanceDisplayService(_:didUpdateDistanceKM:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitLength>);
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitLength);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  a5();

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t CAFOdometerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFOdometerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFOdometerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void sub_24941ED34(id *a1, uint64_t a2, uint64_t a3)
{
}

void sub_24941ED54(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for CAFOdometerObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFOdometer()
{
  return lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable(&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable);
}

unint64_t lazy protocol witness table accessor for type CAFOdometer and conformance CAFOdometer()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer;
  if (!lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFOdometer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFOdometer and conformance CAFOdometer);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFOdometerObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFOdometerObservable and conformance CAFOdometerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFOdometerObservable and conformance CAFOdometerObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFOdometerObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFOdometerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFOdometerObservable);
}

uint64_t dispatch thunk of CAFOdometerObservable.distanceKM.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFOdometerObservable.$distanceKM.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFOdometerObservable.distanceMiles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFOdometerObservable.$distanceMiles.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFOdometerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t partial apply for closure #1 in CAFOdometerObservable.resetCachedDescription()()
{
  return CAFOdometerObservable.cachedDescription.setter(0, 0);
}

id CAFDefrostObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
}

uint64_t CAFDefrostObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDefrostObservable.types.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFDefrostObservable.$types.getter()
{
  return CAFDefrostObservable.$types.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__types, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFDefrostObservable.level : CAFDefrostObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFDefrostObservable.level.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFDefrostObservable.level : CAFDefrostObservable(unsigned __int8 *a1)
{
  return CAFDefrostObservable.level.setter(*a1);
}

uint64_t CAFDefrostObservable.level.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFDefrostObservable.level.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFDefrostObservable.level.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFDefrostObservable.level.modify;
}

void CAFDefrostObservable.level.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFDefrostObservable.$level.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFDefrostObservable.vehicleLayoutKey.getter()
{
  return CAFDefrostObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFDefrostObservable.$vehicleLayoutKey.getter()
{
  return CAFDefrostObservable.$types.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDefrostObservable.name.getter()
{
  return CAFDefrostObservable.vehicleLayoutKey.getter();
}

uint64_t CAFDefrostObservable.$name.getter()
{
  return CAFDefrostObservable.$types.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFDefrostObservable.$types.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFDefrostObservable._description.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForDefrostTypes))
  {
    CAFDefrostObservable.types.getter();
    id v4 = (id)NSStringFromDefrostTypes();
    if (v4)
    {
      id v5 = v4;
      uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v3 = v6;
    }
    else
    {
      uint64_t v3 = (void *)0xE900000000000029;
      uint64_t v2 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v7 = 0x73696765726E753CLL;
  uint64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForLevel))
  {
    CAFDefrostObservable.level.getter();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v9;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey)) {
    CAFDefrostObservable.vehicleLayoutKey.getter();
  }
  _StringGuts.grow(_:)(73);
  v10._countAndFlagsBits = 0xD000000000000017;
  v10._object = (void *)0x80000002494895E0;
  String.append(_:)(v10);
  _print_unlocked<A, B>(_:_:)();
  v11._countAndFlagsBits = 0x7365707974207B20;
  v11._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v3;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A6C6576656C202CLL;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  v14._countAndFlagsBits = v7;
  v14._object = v8;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._object = (void *)0x8000000249485D90;
  v15._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v15);
  v16._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 4095264;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  return 0;
}

uint64_t CAFDefrostObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFDefrostObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFDefrostObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFDefrostObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFDefrostObservable.init(_:)(a1);
}

id CAFDefrostObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__types;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDefrostObservable, CAFDefrostTypes>);
  swift_allocObject();
  uint64_t v8 = v2;
  *(void *)&v2[v7] = specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  uint64_t v9 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__level;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFDefrostObservable, UInt8>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v9] = v10;
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__vehicleLayoutKey;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDefrostObservable, String>);
  swift_allocObject();
  *(void *)&v8[v11] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable__name;
  uint64_t v14 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v13] = specialized SafePublished.init(observedValuekeypath:)(v14);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed] = a1;
  id v15 = a1;

  v18.receiver = v8;
  v18.super_class = (Class)type metadata accessor for CAFDefrostObservable();
  id v16 = objc_msgSendSuper2(&v18, sel_init);
  objc_msgSend(v15, sel_registerObserver_, v16);

  return v16;
}

uint64_t CAFDefrostObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFDefrostObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine20CAFDefrostObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDefrostObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDefrostObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFDefrostObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDefrostObservable@<X0>(void *a1@<X8>)
{
  id result = CAFDefrostObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFDefrostObservable(void **a1)
{
  return CAFDefrostObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDefrostObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFDefrostObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateTypes:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateLevel:)()
{
  return swift_release();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFDefrostObservable.defrostService(_:didUpdateName:)()
{
  return CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFDefrostObservable.defrostService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFDefrostObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFDefrostObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFDefrostObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2494201C0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFDefrostObservable.level.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494201EC(unsigned __int8 *a1)
{
  return CAFDefrostObservable.level.setter(*a1);
}

char *keypath_get_selector_types()
{
  return sel_types;
}

id sub_249420220@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_types);
  *a2 = result;
  return result;
}

char *keypath_get_selector_level()
{
  return sel_level;
}

id sub_249420260@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_level);
  *a2 = (_BYTE)result;
  return result;
}

id sub_249420294(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLevel_, *a1);
}

void sub_2494202A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_2494202C8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFDefrostObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDefrost(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFDefrostObservable and conformance CAFDefrostObservable(&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDefrostObservable()
{
  return lazy protocol witness table accessor for type CAFDefrostObservable and conformance CAFDefrostObservable(&lazy protocol witness table cache variable for type CAFDefrost and conformance CAFDefrost, 255, (void (*)(uint64_t))type metadata accessor for CAFDefrost);
}

unint64_t type metadata accessor for CAFDefrost()
{
  unint64_t result = lazy cache variable for type metadata for CAFDefrost;
  if (!lazy cache variable for type metadata for CAFDefrost)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDefrost);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFDefrostObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFDefrostObservable and conformance CAFDefrostObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFDefrostObservable and conformance CAFDefrostObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDefrostObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFDefrostObservable and conformance CAFDefrostObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFDefrostObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFDefrostObservable);
}

uint64_t dispatch thunk of CAFDefrostObservable.types.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$types.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.level.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$level.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFDefrostObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFDefrostObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFDefrostObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 272))();
}

uint64_t partial apply for closure #1 in CAFDefrostObservable.resetCachedDescription()()
{
  return CAFDefrostObservable.cachedDescription.setter(0, 0);
}

id CAFPickerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
}

uint64_t CAFPickerObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFPickerObservable.identifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFPickerObservable.$identifier.getter()
{
  return CAFPickerObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.entryList.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFPickerObservable.$entryList.getter()
{
  return CAFPickerObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__entryList, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFPickerObservable.selectedEntryIndex : CAFPickerObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFPickerObservable.selectedEntryIndex.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFPickerObservable.selectedEntryIndex : CAFPickerObservable(unsigned __int8 *a1)
{
  return CAFPickerObservable.selectedEntryIndex.setter(*a1);
}

uint64_t CAFPickerObservable.selectedEntryIndex.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFPickerObservable.selectedEntryIndex.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFPickerObservable.selectedEntryIndex.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFPickerObservable.selectedEntryIndex.modify;
}

void CAFPickerObservable.selectedEntryIndex.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFPickerObservable.$selectedEntryIndex.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFPickerObservable.userSelectionEnabled.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFPickerObservable.$userSelectionEnabled.getter()
{
  return CAFPickerObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__userSelectionEnabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.displayPanelIdentifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

uint64_t CAFPickerObservable.$displayPanelIdentifier.getter()
{
  return CAFPickerObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayPanelIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.displayZoneIdentifier.getter()
{
  return CAFPickerObservable.identifier.getter();
}

uint64_t CAFPickerObservable.$displayZoneIdentifier.getter()
{
  return CAFPickerObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayZoneIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFPickerObservable.$identifier.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFPickerObservable._description.getter()
{
  v37._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v37._countAndFlagsBits = v1;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed);
  objc_msgSend(v2, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_0_4();
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (v5)
  {
    uint64_t v3 = CAFPickerObservable.identifier.getter();
    uint64_t v4 = v6;
  }
  uint64_t v36 = v3;
  uint64_t v7 = 0x73696765726E753CLL;
  id v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForEntryList))
  {
    id v9 = (void *)CAFPickerObservable.entryList.getter();
    id v10 = objc_msgSend(v9, sel_description);
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v8 = v11;
  }
  uint64_t v35 = v7;
  objc_msgSend(v2, sel_registeredForSelectedEntryIndex);
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = (void *)0xEE003E6465726574;
  if (v14)
  {
    CAFPickerObservable.selectedEntryIndex.getter();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = v15;
  }
  uint64_t v16 = 0x73696765726E753CLL;
  Swift::String v17 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForUserSelectionEnabled, v12))
  {
    char v18 = CAFPickerObservable.userSelectionEnabled.getter();
    if (v18) {
      uint64_t v16 = 1702195828;
    }
    else {
      uint64_t v16 = 0x65736C6166;
    }
    if (v18) {
      Swift::String v17 = (void *)0xE400000000000000;
    }
    else {
      Swift::String v17 = (void *)0xE500000000000000;
    }
  }
  uint64_t v19 = 0x73696765726E753CLL;
  Swift::String v20 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForDisplayPanelIdentifier))
  {
    uint64_t v19 = CAFPickerObservable.displayPanelIdentifier.getter();
    Swift::String v20 = v21;
  }
  if (objc_msgSend(v2, sel_registeredForDisplayZoneIdentifier))
  {
    v37._countAndFlagsBits = CAFPickerObservable.displayZoneIdentifier.getter();
    v37._object = v22;
  }
  _StringGuts.grow(_:)(164);
  v23._object = (void *)0x8000000249489680;
  v23._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v23);
  _print_unlocked<A, B>(_:_:)();
  v24._countAndFlagsBits = 0x746E656469207B20;
  v24._object = (void *)0xEF203A7265696669;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v36;
  v25._object = v4;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x4C7972746E65202CLL;
  v26._object = (void *)0xED0000203A747369;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v35;
  v27._object = v8;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000249488560;
  v28._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v34;
  v29._object = v13;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_10(0xD000000000000018, (uint64_t)", userSelectionEnabled: ");
  v30._countAndFlagsBits = v16;
  v30._object = v17;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_10(0xD00000000000001ALL, (uint64_t)", displayPanelIdentifier: ");
  v31._countAndFlagsBits = v19;
  v31._object = v20;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_2_10(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 4095264;
  v32._object = (void *)0xE300000000000000;
  String.append(_:)(v32);
  return 0;
}

uint64_t CAFPickerObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFPickerObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFPickerObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFPickerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFPickerObservable.init(_:)(a1);
}

id CAFPickerObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__identifier;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, String>);
  OUTLINED_FUNCTION_10_1();
  id v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__entryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, CAFEntryList>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__selectedEntryIndex;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFPickerObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__userSelectionEnabled;
  uint64_t v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFPickerObservable, Bool>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v16 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v14] = specialized SafePublished.init(observedValuekeypath:)(v16);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayPanelIdentifier;
  swift_getKeyPath();
  uint64_t v18 = OUTLINED_FUNCTION_33_0();
  uint64_t v19 = v15;
  uint64_t v20 = v18;
  *(void *)&v9[v17] = specialized SafePublished.init(observedValuekeypath:)(v19);
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v21] = specialized SafePublished.init(observedValuekeypath:)(v20);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed] = a1;
  id v22 = a1;

  v25.receiver = v9;
  v25.super_class = (Class)type metadata accessor for CAFPickerObservable();
  id v23 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(v22, sel_registerObserver_, v23);

  return v23;
}

uint64_t CAFPickerObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFPickerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine19CAFPickerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFPickerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFPickerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFPickerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFPickerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFPickerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFPickerObservable(void **a1)
{
  return CAFPickerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFPickerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFPickerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateEntryList:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_23_0();
  id v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateSelectedEntryIndex:)()
{
  return swift_release();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateUserSelectionEnabled:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

uint64_t @objc CAFPickerObservable.pickerService(_:didUpdateIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFPickerObservable.pickerService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFPickerObservable.pickerService(_:didUpdateIdentifier:)();
}

uint64_t CAFPickerObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFPickerObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFPickerObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_249421C1C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFPickerObservable.selectedEntryIndex.getter();
  *a1 = result;
  return result;
}

uint64_t sub_249421C48(unsigned __int8 *a1)
{
  return CAFPickerObservable.selectedEntryIndex.setter(*a1);
}

void sub_249421C70(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_entryList()
{
  return sel_entryList;
}

id key path getter for CAFPicker.entryList : CAFPicker@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_entryList);
  *a2 = result;
  return result;
}

char *keypath_get_selector_selectedEntryIndex()
{
  return sel_selectedEntryIndex;
}

id sub_249421CE8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_selectedEntryIndex);
  *a2 = (_BYTE)result;
  return result;
}

id sub_249421D1C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelectedEntryIndex_, *a1);
}

char *keypath_get_selector_userSelectionEnabled()
{
  return sel_userSelectionEnabled;
}

id sub_249421D3C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_userSelectionEnabled);
  *a2 = (_BYTE)result;
  return result;
}

void sub_249421D70(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249421D90(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFPickerObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFPicker(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFPickerObservable and conformance CAFPickerObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPickerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFPickerObservable()
{
  return lazy protocol witness table accessor for type CAFPickerObservable and conformance CAFPickerObservable(&lazy protocol witness table cache variable for type CAFPicker and conformance CAFPicker, 255, (void (*)(uint64_t))type metadata accessor for CAFPicker);
}

unint64_t type metadata accessor for CAFPicker()
{
  unint64_t result = lazy cache variable for type metadata for CAFPicker;
  if (!lazy cache variable for type metadata for CAFPicker)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFPicker);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFPickerObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFPickerObservable and conformance CAFPickerObservable(&lazy protocol witness table cache variable for type CAFPickerObservable and conformance CAFPickerObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFPickerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFPickerObservable and conformance CAFPickerObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFPickerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFPickerObservable);
}

uint64_t dispatch thunk of CAFPickerObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFPickerObservable.entryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$entryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFPickerObservable.selectedEntryIndex.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFPickerObservable.$selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFPickerObservable.userSelectionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFPickerObservable.$userSelectionEnabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFPickerObservable.displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFPickerObservable.$displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFPickerObservable.displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFPickerObservable.$displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFPickerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 320))();
}

uint64_t partial apply for closure #1 in CAFPickerObservable.resetCachedDescription()()
{
  return CAFPickerObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_2_10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

id CAFTestControlEventObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed);
}

uint64_t CAFTestControlEventObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTestControlEventObservable._description.getter()
{
  _StringGuts.grow(_:)(40);
  v0._object = (void *)0x8000000249489720;
  v0._countAndFlagsBits = 0xD000000000000020;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTestControlEventObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTestControlEventObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTestControlEventObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTestControlEventObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTestControlEventObservable.init(_:)(a1);
}

id CAFTestControlEventObservable.init(_:)(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescription];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)&v1[v4] = v5;
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTestControlEventObservable();
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTestControlEventObservable()
{
  return self;
}

uint64_t CAFTestControlEventObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTestControlEventObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine29CAFTestControlEventObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTestControlEventObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTestControlEventObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTestControlEventObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTestControlEventObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTestControlEventObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTestControlEventObservable(void **a1)
{
  return CAFTestControlEventObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTestControlEventObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTestControlEventObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTestControlEventObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTestControlEventObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTestControlEventObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTestControlEvent(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable(&lazy protocol witness table cache variable for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlEventObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTestControlEventObservable()
{
  return lazy protocol witness table accessor for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable(&lazy protocol witness table cache variable for type CAFTestControlEvent and conformance CAFTestControlEvent, 255, (void (*)(uint64_t))type metadata accessor for CAFTestControlEvent);
}

unint64_t type metadata accessor for CAFTestControlEvent()
{
  unint64_t result = lazy cache variable for type metadata for CAFTestControlEvent;
  if (!lazy cache variable for type metadata for CAFTestControlEvent)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTestControlEvent);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTestControlEventObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTestControlEventObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTestControlEventObservable and conformance CAFTestControlEventObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTestControlEventObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTestControlEventObservable);
}

uint64_t dispatch thunk of CAFTestControlEventObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTestControlEventObservable.resetCachedDescription()()
{
  return CAFTestControlEventObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFTemperatureState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTemperatureState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFTemperatureState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTemperatureState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTemperatureState.description.getter()
{
  id v0 = (id)NSStringFromTemperatureState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTemperatureState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState);
  a1[2] = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState);
  uint64_t result = lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(&lazy protocol witness table cache variable for type CAFTemperatureState and conformance CAFTemperatureState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTemperatureState and conformance CAFTemperatureState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTemperatureState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTemperatureState()
{
  return CAFTemperatureState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTemperatureState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTemperatureState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTemperatureState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTemperatureState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFTemperatureState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFTemperatureState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CAFTargetSpeed.speedLimitedBridged.getter()
{
  if (objc_msgSend(v0, sel_hasSpeedLimited)) {
    return (uint64_t)objc_msgSend(v0, sel_speedLimited);
  }
  else {
    return 2;
  }
}

id CAFTargetSpeedObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
}

uint64_t CAFTargetSpeedObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTargetSpeedObservable.targetSpeedState.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTargetSpeedObservable.$targetSpeedState.getter()
{
  return CAFTargetSpeedObservable.$targetSpeedState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__targetSpeedState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.speedKMH.getter()
{
  return CAFTargetSpeedObservable.speedKMH.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFTargetSpeedObservable.$speedKMH.getter()
{
  return CAFTargetSpeedObservable.$targetSpeedState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedKMH, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.speedMPH.getter()
{
  return CAFTargetSpeedObservable.speedKMH.getter();
}

uint64_t CAFTargetSpeedObservable.$speedMPH.getter()
{
  return CAFTargetSpeedObservable.$targetSpeedState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedMPH, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.speedLimited.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTargetSpeedObservable.$speedLimited.getter()
{
  return CAFTargetSpeedObservable.$targetSpeedState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedLimited, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTargetSpeedObservable.$targetSpeedState.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTargetSpeedObservable._description.getter()
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  OUTLINED_FUNCTION_3_0();
  id v7 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed);
  uint64_t v8 = 0x73696765726E753CLL;
  objc_super v9 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v7, sel_registeredForTargetSpeedState))
  {
    CAFTargetSpeedObservable.targetSpeedState.getter();
    id v10 = (id)NSStringFromTargetSpeedState();
    if (v10)
    {
      uint64_t v0 = v10;
      uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      objc_super v9 = v11;
    }
    else
    {
      objc_super v9 = (void *)0xE900000000000029;
      uint64_t v8 = 0x6E776F6E6B6E7528;
    }
  }
  objc_msgSend(v7, sel_registeredForSpeedKMH);
  OUTLINED_FUNCTION_3_8();
  uint64_t v12 = (void *)0xEE003E6465726574;
  if (v13)
  {
    CAFTargetSpeedObservable.speedKMH.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>();
    uint64_t v0 = (void *)dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v12 = v14;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  }
  uint64_t v32 = (uint64_t)v0;
  objc_msgSend(v7, sel_registeredForSpeedMPH);
  OUTLINED_FUNCTION_3_8();
  uint64_t v15 = (void *)0xEE003E6465726574;
  if (v16)
  {
    CAFTargetSpeedObservable.speedMPH.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>();
    uint64_t v0 = (void *)dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = v17;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v2, v3);
  }
  uint64_t v18 = (void *)0xEE003E6465726574;
  uint64_t v19 = 0x73696765726E753CLL;
  if (objc_msgSend(v7, sel_registeredForSpeedLimited))
  {
    CAFTargetSpeedObservable.speedLimited.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v19 = String.init<A>(describing:)();
    uint64_t v18 = v20;
  }
  _StringGuts.grow(_:)(101);
  v21._countAndFlagsBits = 0xD00000000000001BLL;
  v21._object = (void *)0x80000002494897F0;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)();
  v22._countAndFlagsBits = 0xD000000000000015;
  v22._object = (void *)0x8000000249489810;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v8;
  v23._object = v9;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x4B6465657073202CLL;
  v24._object = (void *)0xEC000000203A484DLL;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v32;
  v25._object = v12;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0xEC000000203A4850;
  v26._countAndFlagsBits = 0x4D6465657073202CLL;
  String.append(_:)(v26);
  v27._countAndFlagsBits = (uint64_t)v0;
  v27._object = v15;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000249489830;
  v28._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v19;
  v29._object = v18;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 4095264;
  v30._object = (void *)0xE300000000000000;
  String.append(_:)(v30);
  return 0;
}

uint64_t CAFTargetSpeedObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTargetSpeedObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTargetSpeedObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTargetSpeedObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTargetSpeedObservable.init(_:)(a1);
}

id CAFTargetSpeedObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__targetSpeedState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, CAFTargetSpeedState>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedKMH;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, Measurement<NSUnitSpeed>>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedMPH;
  swift_getKeyPath();
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable__speedLimited;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTargetSpeedObservable, Bool?>);
  swift_allocObject();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed] = a1;
  id v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFTargetSpeedObservable();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFTargetSpeedObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTargetSpeedObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine24CAFTargetSpeedObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTargetSpeedObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTargetSpeedObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTargetSpeedObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTargetSpeedObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTargetSpeedObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTargetSpeedObservable(void **a1)
{
  return CAFTargetSpeedObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTargetSpeedObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTargetSpeedObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateTargetSpeedState:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(uint64_t a1, uint64_t a2)
{
  return CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(a1, a2);
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedMPH:)(uint64_t a1, uint64_t a2)
{
  return CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(a1, a2);
}

uint64_t @objc CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedKMH:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v11 = v10;
  MEMORY[0x270FA5388](v12);
  OUTLINED_FUNCTION_3_0();
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v13 = a3;
  id v14 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v5, v9);
}

uint64_t CAFTargetSpeedObservable.targetSpeedService(_:didUpdateSpeedLimited:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTargetSpeedObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTargetSpeedObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTargetSpeedObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_targetSpeedState()
{
  return sel_targetSpeedState;
}

id sub_249423FC8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_targetSpeedState);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_speedKMH()
{
  return sel_speedKMH;
}

void sub_249424008(id *a1, uint64_t a2, uint64_t a3)
{
}

char *keypath_get_selector_speedMPH()
{
  return sel_speedMPH;
}

void key path getter for CAFTargetSpeed.speedKMH : CAFTargetSpeed(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_2494240B0(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_2494240D0@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTargetSpeed.speedLimitedBridged.getter();
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for CAFTargetSpeedObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTargetSpeed()
{
  return lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable(&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTargetSpeed and conformance CAFTargetSpeed()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed;
  if (!lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTargetSpeed);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTargetSpeed and conformance CAFTargetSpeed);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTargetSpeedObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTargetSpeedObservable and conformance CAFTargetSpeedObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTargetSpeedObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTargetSpeedObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTargetSpeedObservable);
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.targetSpeedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$targetSpeedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedKMH.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedKMH.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedMPH.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedMPH.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.speedLimited.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.$speedLimited.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTargetSpeedObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t partial apply for closure #1 in CAFTargetSpeedObservable.resetCachedDescription()()
{
  return CAFTargetSpeedObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitSpeed> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitSpeed> and conformance Measurement<A>);
  }
  return result;
}

uint64_t CAFCabin.maxACOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasMaxACOn, (SEL *)&selRef_maxACOn);
}

id CAFCabin.maxACOnBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setMaxACOn_, a1 & 1);
}

uint64_t CAFCabin.hvacOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasHvacOn, (SEL *)&selRef_hvacOn);
}

id CAFCabin.hvacOnBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setHvacOn_, a1 & 1);
}

uint64_t CAFCabin.compressorOnBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasCompressorOn, (SEL *)&selRef_compressorOn);
}

id CAFCabin.compressorOnBridged.setter(char a1)
{
  return objc_msgSend(v1, sel_setCompressorOn_, a1 & 1);
}

id CAFCabinObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
}

uint64_t CAFCabinObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFCabinObservable.maxACOn : CAFCabinObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCabinObservable.maxACOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.maxACOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.maxACOn.setter(*a1);
}

uint64_t CAFCabinObservable.maxACOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, void);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  swift_beginAccess();
  uint64_t v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  id v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFCabinObservable.maxACOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

{
  void *v1;
  uint64_t KeyPath;
  uint64_t v4;
  id v5;
  uint64_t vars8;

  uint64_t KeyPath = swift_getKeyPath();
  id v4 = swift_getKeyPath();
  uint64_t v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

uint64_t (*CAFCabinObservable.maxACOn.modify())()
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFCabinObservable.maxACOn.modify;
}

uint64_t CAFCabinObservable.$maxACOn.getter()
{
  return CAFCabinObservable.$maxACOn.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t key path getter for CAFCabinObservable.hvacOn : CAFCabinObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCabinObservable.hvacOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.hvacOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.hvacOn.setter(*a1);
}

uint64_t CAFCabinObservable.hvacOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

uint64_t CAFCabinObservable.hvacOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

uint64_t (*CAFCabinObservable.hvacOn.modify())()
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFCabinObservable.maxACOn.modify;
}

uint64_t CAFCabinObservable.$hvacOn.getter()
{
  return CAFCabinObservable.$maxACOn.getter();
}

uint64_t key path getter for CAFCabinObservable.compressorOn : CAFCabinObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFCabinObservable.compressorOn.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCabinObservable.compressorOn : CAFCabinObservable(unsigned __int8 *a1)
{
  return CAFCabinObservable.compressorOn.setter(*a1);
}

uint64_t CAFCabinObservable.compressorOn.getter()
{
  return CAFCabinObservable.maxACOn.getter();
}

uint64_t CAFCabinObservable.compressorOn.setter(uint64_t a1)
{
  return CAFCabinObservable.maxACOn.setter(a1);
}

uint64_t (*CAFCabinObservable.compressorOn.modify())()
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFCabinObservable.maxACOn.modify;
}

void CAFCabinObservable.maxACOn.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFCabinObservable.$compressorOn.getter()
{
  return CAFCabinObservable.$maxACOn.getter();
}

uint64_t CAFCabinObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  uint64_t v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForMaxACOn))
  {
    CAFCabinObservable.maxACOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v4 = String.init<A>(describing:)();
    uint64_t v5 = v6;
  }
  uint64_t v7 = 0x73696765726E753CLL;
  uint64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForHVACOn))
  {
    CAFCabinObservable.hvacOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v7 = String.init<A>(describing:)();
    uint64_t v8 = v9;
  }
  if (objc_msgSend(v3, sel_registeredForACCompressorOn))
  {
    CAFCabinObservable.compressorOn.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v1 = v10;
  }
  _StringGuts.grow(_:)(70);
  v11._countAndFlagsBits = 0xD000000000000015;
  v11._object = (void *)0x80000002494898C0;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0x434178616D207B20;
  v12._object = (void *)0xEC000000203A6E4FLL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v4;
  v13._object = v5;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x6E4F63617668202CLL;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v7;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000002494898E0;
  v16._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v2;
  v17._object = v1;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 4095264;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return 0;
}

uint64_t CAFCabinObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFCabinObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFCabinObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFCabinObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCabinObservable.init(_:)(a1);
}

id CAFCabinObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__maxACOn;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFCabinObservable, Bool?>);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__hvacOn;
  swift_getKeyPath();
  uint64_t v12 = OUTLINED_FUNCTION_35_0();
  *(void *)&v10[v11] = specialized SafePublished.init(observedValuekeypath:)(v9);
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable__compressorOn;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v10[v13] = specialized SafePublished.init(observedValuekeypath:)(v12);
  *(void *)&v10[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v10;
  v17.super_class = (Class)type metadata accessor for CAFCabinObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFCabinObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFCabinObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine18CAFCabinObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCabinObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCabinObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCabinObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCabinObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCabinObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_2494252B8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabinObservable.maxACOn.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494252E0(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabinObservable.maxACOn.setter(v1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCabinObservable(void **a1)
{
  return CAFCabinObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCabinObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCabinObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

{
  swift_beginAccess();
  swift_retain();
  specialized SafePublished.value.setter();
  return swift_release();
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateHvacOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

uint64_t CAFCabinObservable.cabinService(_:didUpdateCompressorOn:)()
{
  return CAFCabinObservable.cabinService(_:didUpdateMaxACOn:)();
}

uint64_t CAFCabinObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFCabinObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFCabinObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2494256A0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabinObservable.hvacOn.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494256C8(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabinObservable.hvacOn.setter(v1);
}

uint64_t sub_2494256EC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabinObservable.compressorOn.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249425714(unsigned __int8 *a1)
{
  uint64_t v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabinObservable.compressorOn.setter(v1);
}

uint64_t sub_249425738()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabin.maxACOnBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_249425760(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabin.maxACOnBridged.setter(v1);
}

uint64_t sub_249425784()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabin.hvacOnBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_2494257AC(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabin.hvacOnBridged.setter(v1);
}

uint64_t sub_2494257D0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFCabin.compressorOnBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_2494257F8(unsigned __int8 *a1)
{
  char v1 = OUTLINED_FUNCTION_4_10(a1);
  return CAFCabin.compressorOnBridged.setter(v1);
}

uint64_t type metadata accessor for CAFCabinObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCabin(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFCabinObservable and conformance CAFCabinObservable(&lazy protocol witness table cache variable for type CAFCabinObservable and conformance CAFCabinObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCabinObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCabinObservable()
{
  return lazy protocol witness table accessor for type CAFCabinObservable and conformance CAFCabinObservable(&lazy protocol witness table cache variable for type CAFCabin and conformance CAFCabin, 255, (void (*)(uint64_t))type metadata accessor for CAFCabin);
}

unint64_t type metadata accessor for CAFCabin()
{
  unint64_t result = lazy cache variable for type metadata for CAFCabin;
  if (!lazy cache variable for type metadata for CAFCabin)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCabin);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCabinObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCabinObservable and conformance CAFCabinObservable(&lazy protocol witness table cache variable for type CAFCabinObservable and conformance CAFCabinObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFCabinObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCabinObservable and conformance CAFCabinObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFCabinObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCabinObservable);
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFCabinObservable.maxACOn.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFCabinObservable.$maxACOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFCabinObservable.hvacOn.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFCabinObservable.$hvacOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFCabinObservable.compressorOn.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFCabinObservable.$compressorOn.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFCabinObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFCabinObservable.resetCachedDescription()()
{
  return CAFCabinObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_4_10(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t CAFPositioned.layoutKey.getter@<X0>(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v2, sel_vehicleLayoutKey);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v11 = v10;

    swift_bridgeObjectRetain();
    CAUVehicleLayoutKey.init(rawValue:)();
    uint64_t v12 = type metadata accessor for CAUVehicleLayoutKey();
    if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v12) == 1)
    {
      outlined destroy of CAUVehicleLayoutKey?((uint64_t)v6);
      unint64_t v16 = 0;
      unint64_t v17 = 0xE000000000000000;
      _StringGuts.grow(_:)(30);
      swift_bridgeObjectRelease();
      unint64_t v16 = 0xD00000000000001CLL;
      unint64_t v17 = 0x8000000249489930;
      v15._countAndFlagsBits = v9;
      v15._object = v11;
      String.append(_:)(v15);
      uint64_t result = OUTLINED_FUNCTION_0_6();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v12 - 8) + 32))(a1, v6, v12);
      return __swift_storeEnumTagSinglePayload(a1, 0, 1, v12);
    }
  }
  else
  {
    uint64_t v14 = type metadata accessor for CAUVehicleLayoutKey();
    return __swift_storeEnumTagSinglePayload(a1, 1, 1, v14);
  }
  return result;
}

uint64_t CAFPositionedRequired.layoutKey.getter@<X0>(uint64_t a1@<X8>)
{
  objc_super v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAUVehicleLayoutKey?);
  MEMORY[0x270FA5388](v4 - 8);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v7 = objc_msgSend(v2, sel_vehicleLayoutKey);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  CAUVehicleLayoutKey.init(rawValue:)();
  uint64_t v8 = type metadata accessor for CAUVehicleLayoutKey();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v8) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v8 - 8) + 32))(a1, v6, v8);
  }
  outlined destroy of CAUVehicleLayoutKey?((uint64_t)v6);
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  id v10 = objc_msgSend(v2, sel_vehicleLayoutKey, 0xD00000000000001CLL, 0x8000000249489930);
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v13 = v12;

  v14._countAndFlagsBits = v11;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  uint64_t result = OUTLINED_FUNCTION_0_6();
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_0_6()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t static CAFImageColor.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFImageColor.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFImageColor.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFImageColor.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFImageColor.description.getter()
{
  id v0 = (id)NSStringFromImageColor();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  char v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFImageColor(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor);
  a1[2] = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor);
  uint64_t result = lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(&lazy protocol witness table cache variable for type CAFImageColor and conformance CAFImageColor);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFImageColor and conformance CAFImageColor(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFImageColor(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFImageColor()
{
  return CAFImageColor.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFImageColor] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFImageColor]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFImageColor] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFImageColor@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFImageColor.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFImageColor@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFBatteryTemperatureObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
}

uint64_t CAFBatteryTemperatureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFBatteryTemperatureObservable.temperature.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  char v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFBatteryTemperatureObservable.$temperature.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureState.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFBatteryTemperatureObservable.$temperatureState.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMin.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

uint64_t CAFBatteryTemperatureObservable.$temperatureMin.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMax.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

uint64_t CAFBatteryTemperatureObservable.$temperatureMax.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMarkerCold.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

uint64_t CAFBatteryTemperatureObservable.$temperatureMarkerCold.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.temperatureMarkerHot.getter()
{
  return CAFBatteryTemperatureObservable.temperature.getter();
}

uint64_t CAFBatteryTemperatureObservable.$temperatureMarkerHot.getter()
{
  return CAFBatteryTemperatureObservable.$temperature.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFBatteryTemperatureObservable.$temperature.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFBatteryTemperatureObservable._description.getter()
{
  uint64_t v43 = 0x73696765726E753CLL;
  uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v41);
  OUTLINED_FUNCTION_106();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_106();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed);
  objc_msgSend(v9, sel_registeredForTemperature);
  uint64_t v10 = 0x73696765726E753CLL;
  OUTLINED_FUNCTION_7_4();
  if (v11)
  {
    CAFBatteryTemperatureObservable.temperature.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v10 = OUTLINED_FUNCTION_5_5();
    uint64_t v12 = OUTLINED_FUNCTION_4_6();
    v13(v12);
  }
  Swift::String v42 = v0;
  objc_msgSend(v9, sel_registeredForTemperatureState);
  OUTLINED_FUNCTION_3_6();
  Swift::String v14 = (void *)0xEE003E6465726574;
  if (v15)
  {
    CAFBatteryTemperatureObservable.temperatureState.getter();
    id v16 = (id)NSStringFromTemperatureState();
    if (v16)
    {
      uint64_t v0 = v16;
      uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Swift::String v14 = v17;
    }
    else
    {
      Swift::String v14 = (void *)0xE900000000000029;
      uint64_t v1 = 0x6E776F6E6B6E7528;
    }
  }
  uint64_t v39 = v1;
  uint64_t v40 = v10;
  objc_msgSend(v9, sel_registeredForTemperatureMin);
  OUTLINED_FUNCTION_3_6();
  OUTLINED_FUNCTION_7_4();
  if (v18)
  {
    CAFBatteryTemperatureObservable.temperatureMin.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v1 = OUTLINED_FUNCTION_5_5();
    uint64_t v19 = OUTLINED_FUNCTION_4_6();
    v20(v19);
  }
  uint64_t v38 = v1;
  objc_msgSend(v9, sel_registeredForTemperatureMax);
  OUTLINED_FUNCTION_3_6();
  Swift::String v21 = (void *)0xEE003E6465726574;
  if (v22)
  {
    CAFBatteryTemperatureObservable.temperatureMax.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitTemperature> and conformance Measurement<A>();
    uint64_t v1 = OUTLINED_FUNCTION_5_5();
    Swift::String v21 = v23;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  }
  uint64_t v24 = 0x73696765726E753CLL;
  Swift::String v25 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForTemperatureMarkerCold, v1))
  {
    CAFBatteryTemperatureObservable.temperatureMarkerCold.getter();
    uint64_t v24 = String.init<A>(describing:)();
    Swift::String v25 = v26;
  }
  Swift::String v27 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForTemperatureMarkerHot))
  {
    CAFBatteryTemperatureObservable.temperatureMarkerHot.getter();
    uint64_t v43 = String.init<A>(describing:)();
    Swift::String v27 = v28;
  }
  _StringGuts.grow(_:)(172);
  OUTLINED_FUNCTION_6_4(0xD000000000000022, (uint64_t)"<CAFBatteryTemperatureObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_6_4(0xD000000000000010, (uint64_t)" { temperature: ");
  v29._countAndFlagsBits = v40;
  v29._object = v42;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000014, (uint64_t)", temperatureState: ");
  v30._countAndFlagsBits = v39;
  v30._object = v14;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", temperatureMin: ");
  v31._countAndFlagsBits = v38;
  v31._object = v0;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_8_4((uint64_t)", temperatureMax: ");
  v32._countAndFlagsBits = v37;
  v32._object = v21;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000019, (uint64_t)", temperatureMarkerCold: ");
  v33._countAndFlagsBits = v24;
  v33._object = v25;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000018, (uint64_t)", temperatureMarkerHot: ");
  v34._countAndFlagsBits = v43;
  v34._object = v27;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  v35._countAndFlagsBits = 4095264;
  v35._object = (void *)0xE300000000000000;
  String.append(_:)(v35);
  return 0;
}

uint64_t CAFBatteryTemperatureObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFBatteryTemperatureObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFBatteryTemperatureObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFBatteryTemperatureObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFBatteryTemperatureObservable.init(_:)(a1);
}

id CAFBatteryTemperatureObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, Measurement<NSUnitTemperature>>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, CAFTemperatureState>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFBatteryTemperatureObservable, Measurement<NSUnitTemperature>?>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v18] = v19;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed] = a1;
  id v20 = a1;

  v23.receiver = v8;
  v23.super_class = (Class)type metadata accessor for CAFBatteryTemperatureObservable();
  id v21 = objc_msgSendSuper2(&v23, sel_init);
  objc_msgSend(v20, sel_registerObserver_, v21);

  return v21;
}

uint64_t CAFBatteryTemperatureObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFBatteryTemperatureObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFBatteryTemperatureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFBatteryTemperatureObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFBatteryTemperatureObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFBatteryTemperatureObservable@<X0>(void *a1@<X8>)
{
  id result = CAFBatteryTemperatureObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFBatteryTemperatureObservable(void **a1)
{
  return CAFBatteryTemperatureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFBatteryTemperatureObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFBatteryTemperatureObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2)
{
  return CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperature, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureState:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMin:)(uint64_t a1, uint64_t a2)
{
  return CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMin, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t @objc CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a3;
  id v16 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMax:)(uint64_t a1, uint64_t a2)
{
  return CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMarkerCold:)(uint64_t a1, uint64_t a2)
{
  return CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerCold, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMarkerHot:)(uint64_t a1, uint64_t a2)
{
  return CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFBatteryTemperatureObservable__temperatureMarkerHot, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperature:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t @objc CAFBatteryTemperatureObservable.batteryTemperatureService(_:didUpdateTemperatureMarkerCold:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitTemperature>?);
  MEMORY[0x270FA5388](v9 - 8);
  OUTLINED_FUNCTION_106();
  uint64_t v12 = v11 - v10;
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitTemperature);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    uint64_t v14 = v12;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitTemperature>);
    uint64_t v14 = v12;
    uint64_t v15 = 1;
  }
  __swift_storeEnumTagSinglePayload(v14, v15, 1, v13);
  id v16 = a3;
  id v17 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitTemperature>?(v12);
}

uint64_t CAFBatteryTemperatureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFBatteryTemperatureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFBatteryTemperatureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void sub_2494276D8(id *a1, uint64_t a2, uint64_t a3)
{
}

id sub_2494276F8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_temperatureState);
  *a2 = (_BYTE)result;
  return result;
}

void sub_24942772C(id *a1, uint64_t a2, uint64_t a3)
{
}

void sub_24942774C(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_24942776C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, (SEL *)&selRef_temperatureMarkerCold, a2);
}

uint64_t sub_24942778C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFEngineTemperature.temperatureMarkerCold : CAFEngineTemperature(a1, (SEL *)&selRef_temperatureMarkerHot, a2);
}

uint64_t type metadata accessor for CAFBatteryTemperatureObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFBatteryTemperature()
{
  return lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable(&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFBatteryTemperature and conformance CAFBatteryTemperature()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature;
  if (!lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFBatteryTemperature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFBatteryTemperature and conformance CAFBatteryTemperature);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFBatteryTemperatureObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFBatteryTemperatureObservable and conformance CAFBatteryTemperatureObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFBatteryTemperatureObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFBatteryTemperatureObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFBatteryTemperatureObservable);
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperature.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMin.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMarkerCold.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMarkerCold.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.temperatureMarkerHot.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.$temperatureMarkerHot.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFBatteryTemperatureObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 304))();
}

uint64_t partial apply for closure #1 in CAFBatteryTemperatureObservable.resetCachedDescription()()
{
  return CAFBatteryTemperatureObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFSeatBeltIndicator.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSeatBeltIndicator.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFSeatBeltIndicator.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSeatBeltIndicator.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSeatBeltIndicator.description.getter()
{
  id v0 = (id)NSStringFromSeatBeltIndicator();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatBeltIndicator(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator);
  a1[2] = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator);
  uint64_t result = lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(&lazy protocol witness table cache variable for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatBeltIndicator and conformance CAFSeatBeltIndicator(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSeatBeltIndicator(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSeatBeltIndicator()
{
  return CAFSeatBeltIndicator.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSeatBeltIndicator] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSeatBeltIndicator]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSeatBeltIndicator] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSeatBeltIndicator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFSeatBeltIndicator.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFSeatBeltIndicator@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFCarManagerObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed);
}

uint64_t key path getter for CAFCarManagerObservable.currentCar : CAFCarManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarManagerObservable.currentCar.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFCarManagerObservable.currentCar : CAFCarManagerObservable(id *a1)
{
  id v1 = *a1;
  return CAFCarManagerObservable.currentCar.setter();
}

uint64_t CAFCarManagerObservable.currentCar.getter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  static Published.subscript.getter();
  swift_release();
  swift_release();
  return v1;
}

uint64_t sub_24942804C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFCarManagerObservable.currentCar.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarManagerObservable.currentCar.setter()
{
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = v0;
  return static Published.subscript.setter();
}

void (*CAFCarManagerObservable.currentCar.modify(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x38uLL);
  *a1 = v2;
  v2[4] = swift_getKeyPath();
  v2[5] = swift_getKeyPath();
  v2[6] = static Published.subscript.modify();
  return CAFCarManagerObservable.currentCar.modify;
}

void CAFCarManagerObservable.currentCar.modify(void *a1)
{
  id v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  swift_release();
  swift_release();

  free(v1);
}

uint64_t key path setter for CAFCarManagerObservable.$currentCar : CAFCarManagerObservable(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  MEMORY[0x270FA5388](v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v5 + 16))(v4, a1);
  return CAFCarManagerObservable.$currentCar.setter((uint64_t)v4);
}

uint64_t CAFCarManagerObservable.$currentCar.getter()
{
  return swift_endAccess();
}

uint64_t CAFCarManagerObservable.$currentCar.setter(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)&v8 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  OUTLINED_FUNCTION_8_3();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  Published.projectedValue.setter();
  swift_endAccess();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v2);
}

void (*CAFCarManagerObservable.$currentCar.modify(void *a1))(uint64_t a1, char a2)
{
  uint64_t v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Published<CAFCar?>.Publisher);
  v3[4] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[5] = v5;
  size_t v6 = *(void *)(v5 + 64);
  v3[6] = malloc(v6);
  v3[7] = malloc(v6);
  OUTLINED_FUNCTION_8_3();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  Published.projectedValue.getter();
  swift_endAccess();
  return CAFCarManagerObservable.$currentCar.modify;
}

void CAFCarManagerObservable.$currentCar.modify(uint64_t a1, char a2)
{
  uint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void **)(*(void *)a1 + 48);
  uint64_t v4 = *(void **)(*(void *)a1 + 56);
  if (a2)
  {
    uint64_t v5 = v2[4];
    uint64_t v6 = v2[5];
    (*(void (**)(void, void *, uint64_t))(v6 + 16))(*(void *)(*(void *)a1 + 48), v4, v5);
    CAFCarManagerObservable.$currentCar.setter((uint64_t)v3);
    (*(void (**)(void *, uint64_t))(v6 + 8))(v4, v5);
  }
  else
  {
    CAFCarManagerObservable.$currentCar.setter(*(void *)(*(void *)a1 + 56));
  }
  free(v4);
  free(v3);

  free(v2);
}

id CAFCarManagerObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFCarManagerObservable.init(_:)(a1);
}

id CAFCarManagerObservable.init(_:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Published<CAFCar?>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v5 = v4;
  MEMORY[0x270FA5388](v6);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = &v1[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable__currentCar];
  uint64_t v18 = 0;
  uint64_t v10 = v1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFCar?);
  Published.init(initialValue:)();
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v9, v8, v3);
  *(void *)&v10[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed] = a1;
  id v11 = a1;
  id v12 = objc_msgSend(v11, sel_currentCar);
  OUTLINED_FUNCTION_8_3();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v3);
  id v17 = v12;
  Published.init(initialValue:)();
  swift_endAccess();

  uint64_t v13 = (objc_class *)type metadata accessor for CAFCarManagerObservable();
  v16.receiver = v10;
  v16.super_class = v13;
  id v14 = objc_msgSendSuper2(&v16, sel_init);
  objc_msgSend(v11, sel_registerObserver_, v14);

  return v14;
}

uint64_t type metadata accessor for CAFCarManagerObservable()
{
  uint64_t result = type metadata singleton initialization cache for CAFCarManagerObservable;
  if (!type metadata singleton initialization cache for CAFCarManagerObservable) {
    return swift_getSingletonMetadata();
  }
  return result;
}

id CAFCarManagerObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine23CAFCarManagerObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFCarManagerObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFCarManagerObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFCarManagerObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFCarManagerObservable@<X0>(void *a1@<X8>)
{
  id result = CAFCarManagerObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFCarManagerObservable(void **a1)
{
  return CAFCarManagerObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFCarManagerObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFCarManagerObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFCarManagerObservable.carManager(_:didUpdateCurrentCar:)(uint64_t a1, void *a2)
{
  id v2 = a2;

  return CAFCarManagerObservable.currentCar.setter();
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFCarManager()
{
  return lazy protocol witness table accessor for type CAFCarManagerObservable and conformance CAFCarManagerObservable(&lazy protocol witness table cache variable for type CAFCarManagerObservable and conformance CAFCarManagerObservable, (void (*)(uint64_t))type metadata accessor for CAFCarManagerObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFCarManagerObservable()
{
  return lazy protocol witness table accessor for type CAFCarManagerObservable and conformance CAFCarManagerObservable(&lazy protocol witness table cache variable for type CAFCarManager and conformance CAFCarManager, (void (*)(uint64_t))type metadata accessor for CAFCarManager);
}

unint64_t type metadata accessor for CAFCarManager()
{
  unint64_t result = lazy cache variable for type metadata for CAFCarManager;
  if (!lazy cache variable for type metadata for CAFCarManager)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFCarManager);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFCarManagerObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFCarManagerObservable and conformance CAFCarManagerObservable(&lazy protocol witness table cache variable for type CAFCarManagerObservable and conformance CAFCarManagerObservable, (void (*)(uint64_t))type metadata accessor for CAFCarManagerObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFCarManagerObservable and conformance CAFCarManagerObservable(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_249428BD0()
{
  return CAFCarManagerObservable.$currentCar.getter();
}

uint64_t ObjC metadata update function for CAFCarManagerObservable()
{
  return type metadata accessor for CAFCarManagerObservable();
}

void type metadata completion function for CAFCarManagerObservable()
{
  type metadata accessor for Published<CAFCar?>();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for CAFCarManagerObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFCarManagerObservable);
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x60))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x68))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.currentCar.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x70))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x78))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x80))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.$currentCar.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x88))();
}

uint64_t dispatch thunk of CAFCarManagerObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 144))();
}

void type metadata accessor for Published<CAFCar?>()
{
  if (!lazy cache variable for type metadata for Published<CAFCar?>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for CAFCar?);
    unint64_t v0 = type metadata accessor for Published();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Published<CAFCar?>);
    }
  }
}

uint64_t static CAFTransmissionMode.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTransmissionMode.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFTransmissionMode.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTransmissionMode.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTransmissionMode.description.getter()
{
  id v0 = (id)NSStringFromTransmissionMode();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTransmissionMode(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode);
  a1[2] = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode);
  uint64_t result = lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(&lazy protocol witness table cache variable for type CAFTransmissionMode and conformance CAFTransmissionMode);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTransmissionMode and conformance CAFTransmissionMode(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTransmissionMode(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTransmissionMode()
{
  return CAFTransmissionMode.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTransmissionMode] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTransmissionMode]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTransmissionMode] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTransmissionMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFTransmissionMode.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFTransmissionMode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFTirePressureObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
}

uint64_t CAFTirePressureObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTirePressureObservable.sensorState.getter()
{
  return CAFTirePressureObservable.sensorState.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int8 v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTirePressureObservable.$sensorState.getter()
{
  return CAFTirePressureObservable.$sensorState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.pressure.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFTirePressureObservable.$pressure.getter()
{
  return CAFTirePressureObservable.$sensorState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressure, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.pressureState.getter()
{
  return CAFTirePressureObservable.sensorState.getter();
}

uint64_t CAFTirePressureObservable.$pressureState.getter()
{
  return CAFTirePressureObservable.$sensorState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.vehicleLayoutKey.getter()
{
  return CAFTirePressureObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTirePressureObservable.$vehicleLayoutKey.getter()
{
  return CAFTirePressureObservable.$sensorState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.name.getter()
{
  return CAFTirePressureObservable.vehicleLayoutKey.getter();
}

uint64_t CAFTirePressureObservable.$name.getter()
{
  return CAFTirePressureObservable.$sensorState.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTirePressureObservable.$sensorState.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFTirePressureObservable._description.getter()
{
  uint64_t v1 = v0;
  v34[0] = 0x73696765726E753CLL;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed);
  uint64_t v7 = 0x73696765726E753CLL;
  uint64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForSensorState))
  {
    CAFTirePressureObservable.sensorState.getter();
    id v9 = (id)NSStringFromSensorState();
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v11;
    }
    else
    {
      uint64_t v7 = 0x6E776F6E6B6E7528;
      uint64_t v8 = (void *)0xE900000000000029;
    }
  }
  uint64_t v12 = 0x73696765726E753CLL;
  uint64_t v13 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForPressure, v34[0]))
  {
    CAFTirePressureObservable.pressure.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPressure> and conformance Measurement<A>();
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v13 = v14;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v15 = 0x73696765726E753CLL;
  objc_super v16 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForPressureState))
  {
    CAFTirePressureObservable.pressureState.getter();
    id v17 = (id)NSStringFromPressureState();
    if (v17)
    {
      uint64_t v18 = v17;
      uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      objc_super v16 = v19;
    }
    else
    {
      uint64_t v15 = 0x6E776F6E6B6E7528;
      objc_super v16 = (void *)0xE900000000000029;
    }
  }
  unsigned int v20 = objc_msgSend(v6, sel_registeredForVehicleLayoutKey);
  id v21 = (void *)0xEE003E6465726574;
  if (v20)
  {
    v34[0] = CAFTirePressureObservable.vehicleLayoutKey.getter();
    id v21 = v22;
  }
  uint64_t v35 = 0;
  unint64_t v36 = 0xE000000000000000;
  _StringGuts.grow(_:)(106);
  v23._countAndFlagsBits = 0xD00000000000001CLL;
  v23._object = (void *)0x8000000249489B00;
  String.append(_:)(v23);
  v34[1] = v1;
  _print_unlocked<A, B>(_:_:)();
  v24._object = (void *)0x8000000249489B20;
  v24._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v7;
  v25._object = v8;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0x757373657270202CLL;
  v26._object = (void *)0xEC000000203A6572;
  String.append(_:)(v26);
  v27._countAndFlagsBits = v12;
  v27._object = v13;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 0xD000000000000011;
  v28._object = (void *)0x8000000249489B40;
  String.append(_:)(v28);
  v29._countAndFlagsBits = v15;
  v29._object = v16;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v30._countAndFlagsBits = 0xD000000000000014;
  v30._object = (void *)0x8000000249485D90;
  String.append(_:)(v30);
  v31._countAndFlagsBits = v34[0];
  v31._object = v21;
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 4095264;
  v32._object = (void *)0xE300000000000000;
  String.append(_:)(v32);
  return v35;
}

uint64_t CAFTirePressureObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTirePressureObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTirePressureObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTirePressureObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTirePressureObservable.init(_:)(a1);
}

id CAFTirePressureObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, CAFSensorState>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressure;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, Measurement<NSUnitPressure>>);
  OUTLINED_FUNCTION_10_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, CAFPressureState>);
  OUTLINED_FUNCTION_10_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__vehicleLayoutKey;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFTirePressureObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v8[v14] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__name;
  uint64_t v17 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v8[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v8;
  v21.super_class = (Class)type metadata accessor for CAFTirePressureObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFTirePressureObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTirePressureObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTirePressureObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTirePressureObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTirePressureObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTirePressureObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTirePressureObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTirePressureObservable(void **a1)
{
  return CAFTirePressureObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTirePressureObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTirePressureObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateSensorState:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateSensorState:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__sensorState, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdatePressure:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdatePressureState:)(uint64_t a1, unsigned __int8 a2)
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateSensorState:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFTirePressureObservable__pressureState, (void (*)(void))specialized SafeReadOnlyPublished.value.setter);
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateSensorState:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, void (*a4)(void))
{
  OUTLINED_FUNCTION_23_0();
  a4(a2);

  return swift_release();
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFTirePressureObservable.tirePressureService(_:didUpdateName:)()
{
  return CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFTirePressureObservable.tirePressureService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFTirePressureObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTirePressureObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTirePressureObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_sensorState()
{
  return sel_sensorState;
}

id sub_24942A408@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sensorState);
  *a2 = (_BYTE)result;
  return result;
}

char *keypath_get_selector_pressure()
{
  return sel_pressure;
}

void key path getter for CAFTirePressure.pressure : CAFTirePressure(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_pressure);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPressure);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

char *keypath_get_selector_pressureState()
{
  return sel_pressureState;
}

id sub_24942A4D8@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_pressureState);
  *a2 = (_BYTE)result;
  return result;
}

void sub_24942A50C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24942A52C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFTirePressureObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTirePressure()
{
  return lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable(&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable);
}

unint64_t lazy protocol witness table accessor for type CAFTirePressure and conformance CAFTirePressure()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure;
  if (!lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFTirePressure);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFTirePressure and conformance CAFTirePressure);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTirePressureObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTirePressureObservable and conformance CAFTirePressureObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTirePressureObservable and conformance CAFTirePressureObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTirePressureObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTirePressureObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTirePressureObservable);
}

uint64_t dispatch thunk of CAFTirePressureObservable.sensorState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$sensorState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.pressure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$pressure.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.pressureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$pressureState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFTirePressureObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFTirePressureObservable.resetCachedDescription()()
{
  return CAFTirePressureObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<NSUnitPressure> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<NSUnitPressure>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<NSUnitPressure> and conformance Measurement<A>);
  }
  return result;
}

uint64_t static CAFFillLevelLabel.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFFillLevelLabel.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFFillLevelLabel.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFFillLevelLabel.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFFillLevelLabel.description.getter()
{
  id v0 = (id)NSStringFromFillLevelLabel();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFFillLevelLabel(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel);
  a1[2] = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel);
  uint64_t result = lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(&lazy protocol witness table cache variable for type CAFFillLevelLabel and conformance CAFFillLevelLabel);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFFillLevelLabel and conformance CAFFillLevelLabel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFFillLevelLabel(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFFillLevelLabel()
{
  return CAFFillLevelLabel.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFFillLevelLabel] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFFillLevelLabel]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFFillLevelLabel] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFFillLevelLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFFillLevelLabel.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFFillLevelLabel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static CAFUISceneState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFUISceneState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFUISceneState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFUISceneState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFUISceneState.description.getter()
{
  id v0 = (id)NSStringFromUISceneState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFUISceneState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState);
  a1[2] = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState);
  uint64_t result = lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(&lazy protocol witness table cache variable for type CAFUISceneState and conformance CAFUISceneState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFUISceneState and conformance CAFUISceneState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFUISceneState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFUISceneState()
{
  return CAFUISceneState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFUISceneState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFUISceneState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFUISceneState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFUISceneState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFUISceneState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFUISceneState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t CAFEngineRPM.rotationalSpeedStateBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasRotationalSpeedState);
  unsigned int v2 = v1;
  if (v1) {
    unsigned int v1 = objc_msgSend(v0, sel_rotationalSpeedState);
  }
  return v1 | ((v2 ^ 1) << 8);
}

id CAFEngineRPMObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
}

uint64_t CAFEngineRPMObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFEngineRPMObservable.rotationalSpeed.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
  swift_retain();
  swift_retain();
  unsigned int v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFEngineRPMObservable.$rotationalSpeed.getter()
{
  return CAFEngineRPMObservable.$rotationalSpeed.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedState.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFEngineRPMObservable.$rotationalSpeedState.getter()
{
  return CAFEngineRPMObservable.$rotationalSpeed.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

uint64_t CAFEngineRPMObservable.$rotationalSpeedMarkerRedline.getter()
{
  return CAFEngineRPMObservable.$rotationalSpeed.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.rotationalSpeedMax.getter()
{
  return CAFEngineRPMObservable.rotationalSpeed.getter();
}

uint64_t CAFEngineRPMObservable.$rotationalSpeedMax.getter()
{
  return CAFEngineRPMObservable.$rotationalSpeed.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFEngineRPMObservable.$rotationalSpeed.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFEngineRPMObservable._description.getter()
{
  OUTLINED_FUNCTION_0_4();
  uint64_t v34 = v1;
  uint64_t v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  MEMORY[0x270FA5388](v30);
  OUTLINED_FUNCTION_106();
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v4 = v3;
  MEMORY[0x270FA5388](v5);
  OUTLINED_FUNCTION_106();
  uint64_t v8 = v7 - v6;
  id v9 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed);
  uint64_t v10 = 0x73696765726E753CLL;
  uint64_t v11 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForRotationalSpeed))
  {
    CAFEngineRPMObservable.rotationalSpeed.getter();
    lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>();
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v11 = v12;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  }
  uint64_t v33 = v10;
  objc_msgSend(v9, sel_registeredForRotationalSpeedState);
  OUTLINED_FUNCTION_0_4();
  uint64_t v14 = (void *)0xEE003E6465726574;
  if (v15)
  {
    CAFEngineRPMObservable.rotationalSpeedState.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFRotationalSpeedState?);
    uint64_t v13 = String.init<A>(describing:)();
    uint64_t v14 = v16;
  }
  uint64_t v32 = v13;
  objc_msgSend(v9, sel_registeredForRotationalSpeedMarkerRedline);
  OUTLINED_FUNCTION_0_4();
  id v18 = (void *)0xEE003E6465726574;
  if (v19)
  {
    CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter();
    uint64_t v17 = String.init<A>(describing:)();
    id v18 = v20;
  }
  uint64_t v31 = v17;
  objc_super v21 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v9, sel_registeredForRotationalSpeedMax))
  {
    CAFEngineRPMObservable.rotationalSpeedMax.getter();
    lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>();
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    objc_super v21 = v22;
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v8, v2);
  }
  _StringGuts.grow(_:)(136);
  OUTLINED_FUNCTION_6_4(0xD000000000000019, (uint64_t)"<CAFEngineRPMObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v23._object = (void *)0x8000000249489C60;
  v23._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v33;
  v24._object = v11;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000018, (uint64_t)", rotationalSpeedState: ");
  v25._countAndFlagsBits = v32;
  v25._object = v14;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000020, (uint64_t)", rotationalSpeedMarkerRedline: ");
  v26._countAndFlagsBits = v31;
  v26._object = v18;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000016, (uint64_t)", rotationalSpeedMax: ");
  v27._countAndFlagsBits = v34;
  v27._object = v21;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 4095264;
  v28._object = (void *)0xE300000000000000;
  String.append(_:)(v28);
  return 0;
}

uint64_t CAFEngineRPMObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFEngineRPMObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFEngineRPMObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFEngineRPMObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFEngineRPMObservable.init(_:)(a1);
}

id CAFEngineRPMObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, Measurement<CAFUnitRotationalSpeed>>);
  swift_allocObject();
  uint64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, CAFRotationalSpeedState?>);
  swift_allocObject();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFEngineRPMObservable, Measurement<CAFUnitRotationalSpeed>?>);
  swift_allocObject();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax;
  swift_getKeyPath();
  swift_allocObject();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v14] = v15;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed] = a1;
  id v16 = a1;

  v19.receiver = v8;
  v19.super_class = (Class)type metadata accessor for CAFEngineRPMObservable();
  id v17 = objc_msgSendSuper2(&v19, sel_init);
  objc_msgSend(v16, sel_registerObserver_, v17);

  return v17;
}

uint64_t CAFEngineRPMObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFEngineRPMObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFEngineRPMObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFEngineRPMObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFEngineRPMObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFEngineRPMObservable@<X0>(void *a1@<X8>)
{
  id result = CAFEngineRPMObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFEngineRPMObservable(void **a1)
{
  return CAFEngineRPMObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFEngineRPMObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFEngineRPMObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedState:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedMarkerRedline:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMarkerRedline, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeedMax:)(uint64_t a1, uint64_t a2)
{
  return CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine22CAFEngineRPMObservable__rotationalSpeedMax, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t @objc CAFEngineRPMObservable.engineRPMService(_:didUpdateRotationalSpeed:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
  OUTLINED_FUNCTION_0_0();
  uint64_t v10 = v9;
  MEMORY[0x270FA5388](v11);
  OUTLINED_FUNCTION_106();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
  id v15 = a3;
  id v16 = a1;
  a5();

  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v14, v8);
}

uint64_t CAFEngineRPMObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFEngineRPMObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFEngineRPMObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_rotationalSpeed()
{
  return sel_rotationalSpeed;
}

void sub_24942C174(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t key path getter for CAFEngineRPM.rotationalSpeedStateBridged : CAFEngineRPM@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFEngineRPM.rotationalSpeedStateBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

char *keypath_get_selector_rotationalSpeedMarkerRedline()
{
  return sel_rotationalSpeedMarkerRedline;
}

uint64_t key path getter for CAFEngineRPM.rotationalSpeedMarkerRedline : CAFEngineRPM@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_rotationalSpeedMarkerRedline);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

char *keypath_get_selector_rotationalSpeedMax()
{
  return sel_rotationalSpeedMax;
}

void key path getter for CAFEngineRPM.rotationalSpeed : CAFEngineRPM(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for CAFUnitRotationalSpeed);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

void sub_24942C308(id *a1, uint64_t a2, uint64_t a3)
{
}

uint64_t type metadata accessor for CAFEngineRPMObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFEngineRPM()
{
  return lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable(&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable);
}

unint64_t lazy protocol witness table accessor for type CAFEngineRPM and conformance CAFEngineRPM()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM;
  if (!lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFEngineRPM);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFEngineRPM and conformance CAFEngineRPM);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFEngineRPMObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFEngineRPMObservable and conformance CAFEngineRPMObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFEngineRPMObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFEngineRPMObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFEngineRPMObservable);
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedMarkerRedline.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedMarkerRedline.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.rotationalSpeedMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.$rotationalSpeedMax.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFEngineRPMObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 256))();
}

uint64_t outlined destroy of Measurement<CAFUnitRotationalSpeed>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFEngineRPMObservable.resetCachedDescription()()
{
  return CAFEngineRPMObservable.cachedDescription.setter(0, 0);
}

unint64_t lazy protocol witness table accessor for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>;
  if (!lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for Measurement<CAFUnitRotationalSpeed>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Measurement<CAFUnitRotationalSpeed> and conformance Measurement<A>);
  }
  return result;
}

id CAFSeatFanObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
}

uint64_t CAFSeatFanObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSeatFanObservable.on : CAFSeatFanObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSeatFanObservable.on.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatFanObservable.on : CAFSeatFanObservable(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.on.setter(*a1);
}

uint64_t CAFSeatFanObservable.on.getter()
{
  return CAFSeatFanObservable.on.getter();
}

{
  uint64_t v0;
  id v1;
  void (*v2)(uint64_t *, void);
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v6;
  id v7;

  swift_beginAccess();
  uint64_t v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  id v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSeatFanObservable.on.setter(uint64_t a1)
{
  return CAFSeatFanObservable.on.setter(a1, (uint64_t)&unk_2494784F0, (uint64_t)&unk_249478518, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

void (*CAFSeatFanObservable.on.modify())(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFSeatFanObservable.on.modify;
}

void CAFSeatFanObservable.on.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFSeatFanObservable.$on.getter()
{
  return CAFSeatFanObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__on, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFSeatFanObservable.fanLevel : CAFSeatFanObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSeatFanObservable.fanLevel.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSeatFanObservable.fanLevel : CAFSeatFanObservable(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.fanLevel.setter(*a1);
}

uint64_t CAFSeatFanObservable.fanLevel.getter()
{
  return CAFSeatFanObservable.on.getter();
}

uint64_t CAFSeatFanObservable.fanLevel.setter(uint64_t a1)
{
  return CAFSeatFanObservable.on.setter(a1, (uint64_t)&unk_249478538, (uint64_t)&unk_249478560, (uint64_t (*)(uint64_t, id, uint64_t, uint64_t))specialized static SafePublished.subscript.setter);
}

uint64_t CAFSeatFanObservable.on.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, id, uint64_t, uint64_t))
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  id v8 = v4;

  return a4(a1, v8, KeyPath, v7);
}

void (*CAFSeatFanObservable.fanLevel.modify())(uint64_t a1, uint64_t a2)
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  uint64_t v5 = OUTLINED_FUNCTION_4_7();
  v6(v5);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = (_BYTE)v2;
  return CAFSeatFanObservable.fanLevel.modify;
}

void CAFSeatFanObservable.fanLevel.modify(uint64_t a1, uint64_t a2)
{
}

void CAFSeatFanObservable.on.modify(uint64_t a1, uint64_t a2, void (*a3)(void, id, void, void))
{
  id v3 = *(void **)a1;
  a3(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v3);
}

uint64_t CAFSeatFanObservable.$fanLevel.getter()
{
  return CAFSeatFanObservable.$on.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__fanLevel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.$on.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSeatFanObservable.autoMode.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSeatFanObservable.$autoMode.getter()
{
  return CAFSeatFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__autoMode, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.vehicleLayoutKey.getter()
{
  return CAFSeatFanObservable.vehicleLayoutKey.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSeatFanObservable.$vehicleLayoutKey.getter()
{
  return CAFSeatFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.name.getter()
{
  return CAFSeatFanObservable.vehicleLayoutKey.getter();
}

uint64_t CAFSeatFanObservable.$name.getter()
{
  return CAFSeatFanObservable.$autoMode.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSeatFanObservable.$autoMode.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSeatFanObservable._description.getter()
{
  id v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForOn))
  {
    CAFSeatFanObservable.on.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v3 = v4;
  }
  uint64_t v5 = 0x73696765726E753CLL;
  uint64_t v6 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForFanLevel))
  {
    CAFSeatFanObservable.fanLevel.getter();
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v6 = v7;
  }
  uint64_t v8 = 0x73696765726E753CLL;
  uint64_t v9 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForAutoMode))
  {
    CAFSeatFanObservable.autoMode.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v9 = v10;
  }
  if (objc_msgSend(v1, sel_registeredForVehicleLayoutKey)) {
    CAFSeatFanObservable.vehicleLayoutKey.getter();
  }
  _StringGuts.grow(_:)(87);
  v11._countAndFlagsBits = 0xD000000000000017;
  v11._object = (void *)0x8000000249489D40;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0x203A6E6F207B20;
  v12._object = (void *)0xE700000000000000;
  String.append(_:)(v12);
  v13._countAndFlagsBits = v2;
  v13._object = v3;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._object = (void *)0xEC000000203A6C65;
  v14._countAndFlagsBits = 0x76654C6E6166202CLL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v5;
  v15._object = v6;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x6F4D6F747561202CLL;
  v16._object = (void *)0xEC000000203A6564;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v8;
  v17._object = v9;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000249485D90;
  v18._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v18);
  v19._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 4095264;
  v20._object = (void *)0xE300000000000000;
  String.append(_:)(v20);
  return 0;
}

uint64_t CAFSeatFanObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSeatFanObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFSeatFanObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFSeatFanObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSeatFanObservable.init(_:)(a1);
}

id CAFSeatFanObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__on;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatFanObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__fanLevel;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSeatFanObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__autoMode;
  uint64_t v13 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatFanObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__vehicleLayoutKey;
  uint64_t v15 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSeatFanObservable, String>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v14] = specialized SafePublished.init(observedValuekeypath:)(v15);
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable__name;
  uint64_t v17 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for CAFSeatFanObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFSeatFanObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSeatFanObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine20CAFSeatFanObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSeatFanObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSeatFanObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSeatFanObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSeatFanObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSeatFanObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24942D724()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatFanObservable.on.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24942D74C(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.on.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSeatFanObservable(void **a1)
{
  return CAFSeatFanObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSeatFanObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSeatFanObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateOn:)()
{
  return swift_release();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateFanLevel:)()
{
  return swift_release();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateAutoMode:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSeatFanObservable.fanService(_:didUpdateName:)()
{
  return CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)();
}

uint64_t @objc CAFSeatFanObservable.fanService(_:didUpdateVehicleLayoutKey:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSeatFanObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSeatFanObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSeatFanObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_24942DCA8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatFanObservable.fanLevel.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_24942DCD0(unsigned __int8 *a1)
{
  return CAFSeatFanObservable.fanLevel.setter(*a1);
}

uint64_t sub_24942DCF8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.onBridged.getter();
  *uint64_t v0 = result;
  return result;
}

id sub_24942DD20(char *a1)
{
  return CAFSeatHeatingCooling.onBridged.setter(*a1);
}

id sub_24942DD48@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fanLevel);
  *a2 = (_BYTE)result;
  return result;
}

id sub_24942DD7C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFanLevel_, *a1);
}

uint64_t sub_24942DD90()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSeatHeatingCooling.autoModeBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_24942DDB8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24942DDD8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFSeatFanObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSeatFan(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSeatFanObservable and conformance CAFSeatFanObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSeatFanObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSeatFanObservable()
{
  return lazy protocol witness table accessor for type CAFSeatFanObservable and conformance CAFSeatFanObservable(&lazy protocol witness table cache variable for type CAFSeatFan and conformance CAFSeatFan, 255, (void (*)(uint64_t))type metadata accessor for CAFSeatFan);
}

unint64_t type metadata accessor for CAFSeatFan()
{
  unint64_t result = lazy cache variable for type metadata for CAFSeatFan;
  if (!lazy cache variable for type metadata for CAFSeatFan)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSeatFan);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSeatFanObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSeatFanObservable and conformance CAFSeatFanObservable(&lazy protocol witness table cache variable for type CAFSeatFanObservable and conformance CAFSeatFanObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSeatFanObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSeatFanObservable and conformance CAFSeatFanObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSeatFanObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSeatFanObservable);
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.on.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$on.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.fanLevel.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$fanLevel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$autoMode.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSeatFanObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 312))();
}

uint64_t partial apply for closure #1 in CAFSeatFanObservable.resetCachedDescription()()
{
  return CAFSeatFanObservable.cachedDescription.setter(0, 0);
}

uint64_t CAFSoundDistribution.fadeBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasFade);
  unsigned int v2 = v1;
  if (v1) {
    LOBYTE(v1) = objc_msgSend(v0, sel_fade);
  }
  return v1 | ((v2 ^ 1) << 8);
}

id CAFSoundDistribution.fadeBridged.setter(__int16 a1)
{
  if ((a1 & 0x100) != 0) {
    char v2 = 0;
  }
  else {
    char v2 = a1;
  }
  return objc_msgSend(v1, sel_setFade_, v2);
}

id CAFSoundDistributionObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
}

uint64_t CAFSoundDistributionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFSoundDistributionObservable.balance : CAFSoundDistributionObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSoundDistributionObservable.balance.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSoundDistributionObservable.balance : CAFSoundDistributionObservable(unsigned __int8 *a1)
{
  return CAFSoundDistributionObservable.balance.setter(*a1);
}

uint64_t CAFSoundDistributionObservable.balance.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSoundDistributionObservable.balance.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFSoundDistributionObservable.balance.modify())(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  char v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  return CAFSoundDistributionObservable.balance.modify;
}

void CAFSoundDistributionObservable.balance.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFSoundDistributionObservable.$balance.getter()
{
  return CAFSoundDistributionObservable.$balance.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__balance, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSoundDistributionObservable.fade.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFSoundDistributionObservable.fade.setter);
}

uint64_t CAFSoundDistributionObservable.fade.getter()
{
  OUTLINED_FUNCTION_116();
  id v8 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v8;
  uint64_t v2 = (void (*)(unsigned char *, void))swift_readAtKeyPath();
  int v4 = *v3;
  int v5 = v3[1];
  v2(v7, 0);
  swift_release();
  swift_release();

  return v4 | (v5 << 8);
}

uint64_t CAFSoundDistributionObservable.fade.setter(__int16 a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1 & 0x1FF, v5, KeyPath, v4);
}

void (*CAFSoundDistributionObservable.fade.modify())(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  swift_retain();
  id v4 = v2;
  swift_readAtKeyPath();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  return CAFSoundDistributionObservable.fade.modify;
}

void CAFSoundDistributionObservable.fade.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88) | (*(unsigned __int8 *)(*(void *)a1 + 89) << 8), *(id *)(*(void *)a1 + 64), v1[9], v1[10]);

  free(v1);
}

uint64_t CAFSoundDistributionObservable.$fade.getter()
{
  return CAFSoundDistributionObservable.$balance.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__fade, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSoundDistributionObservable.$balance.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  OUTLINED_FUNCTION_0_2();
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSoundDistributionObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  id v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForBalance))
  {
    CAFSoundDistributionObservable.balance.getter();
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    id v5 = v6;
  }
  if (objc_msgSend(v3, sel_registeredForFade))
  {
    CAFSoundDistributionObservable.fade.getter();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int8?);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v1 = v7;
  }
  _StringGuts.grow(_:)(62);
  v8._object = (void *)0x8000000249489DE0;
  v8._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v8);
  _print_unlocked<A, B>(_:_:)();
  v9._countAndFlagsBits = 0x6E616C6162207B20;
  v9._object = (void *)0xEC000000203A6563;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v4;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A65646166202CLL;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v2;
  v12._object = v1;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 4095264;
  v13._object = (void *)0xE300000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t CAFSoundDistributionObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFSoundDistributionObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFSoundDistributionObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFSoundDistributionObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSoundDistributionObservable.init(_:)(a1);
}

id CAFSoundDistributionObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__balance;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSoundDistributionObservable, Int8>);
  swift_allocObject();
  Swift::String v8 = v2;
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable__fade;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFSoundDistributionObservable, Int8?>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFSoundDistributionObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFSoundDistributionObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSoundDistributionObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine30CAFSoundDistributionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSoundDistributionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSoundDistributionObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSoundDistributionObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSoundDistributionObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSoundDistributionObservable.observed.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24942F0AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSoundDistributionObservable.balance.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24942F0D8(unsigned __int8 *a1)
{
  return CAFSoundDistributionObservable.balance.setter(*a1);
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSoundDistributionObservable(void **a1)
{
  return CAFSoundDistributionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSoundDistributionObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSoundDistributionObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSoundDistributionObservable.soundDistributionService(_:didUpdateBalance:)()
{
  return swift_release();
}

uint64_t CAFSoundDistributionObservable.soundDistributionService(_:didUpdateFade:)()
{
  return swift_release();
}

uint64_t CAFSoundDistributionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSoundDistributionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSoundDistributionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_balance()
{
  return sel_balance;
}

id sub_24942F464@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_balance);
  *a2 = (_BYTE)result;
  return result;
}

id sub_24942F498(char *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBalance_, *a1);
}

uint64_t key path getter for CAFSoundDistribution.fadeBridged : CAFSoundDistribution@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSoundDistribution.fadeBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t sub_24942F520(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFSoundDistributionObservable.fade : CAFSoundDistributionObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFSoundDistribution.fadeBridged.setter);
}

uint64_t type metadata accessor for CAFSoundDistributionObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSoundDistribution(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSoundDistributionObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSoundDistributionObservable()
{
  return lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type CAFSoundDistribution and conformance CAFSoundDistribution, 255, (void (*)(uint64_t))type metadata accessor for CAFSoundDistribution);
}

unint64_t type metadata accessor for CAFSoundDistribution()
{
  unint64_t result = lazy cache variable for type metadata for CAFSoundDistribution;
  if (!lazy cache variable for type metadata for CAFSoundDistribution)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSoundDistribution);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSoundDistributionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(&lazy protocol witness table cache variable for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSoundDistributionObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSoundDistributionObservable and conformance CAFSoundDistributionObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSoundDistributionObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSoundDistributionObservable);
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.balance.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$balance.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.setter(__int16 a1)
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v1) + 0xD0))(a1 & 0x1FF);
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.fade.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.$fade.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSoundDistributionObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 240))();
}

uint64_t partial apply for closure #1 in CAFSoundDistributionObservable.resetCachedDescription()()
{
  return CAFSoundDistributionObservable.cachedDescription.setter(0, 0);
}

id CAFSingleSelectSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
}

uint64_t CAFSingleSelectSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectSettingObservable.userVisibleLabel.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectSettingObservable.$userVisibleLabel.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.sectionIdentifier.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSingleSelectSettingObservable.$sectionIdentifier.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFSingleSelectSettingObservable.$sortOrder.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectSettingObservable.$category.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.identifier.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectSettingObservable.$identifier.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.disabled.getter()
{
  return CAFSingleSelectSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectSettingObservable.$disabled.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.limitableUIElement.getter()
{
  return CAFSingleSelectSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectSettingObservable.$limitableUIElement.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.hidden.getter()
{
  return CAFSingleSelectSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectSettingObservable.$hidden.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.showAudioBrandLogo.getter()
{
  return CAFSingleSelectSettingObservable.disabled.getter();
}

uint64_t CAFSingleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.vehicleLayoutKey.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.symbolName.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectSettingObservable.$symbolName.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectSettingObservable.$prominenceInfo.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.selectSettingEntryList.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_10_4();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFSingleSelectSettingObservable.$selectSettingEntryList.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectSettingEntryList, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFSingleSelectSettingObservable.selectedEntryIndex : CAFSingleSelectSettingObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFSingleSelectSettingObservable.selectedEntryIndex : CAFSingleSelectSettingObservable(unsigned __int8 *a1)
{
  return CAFSingleSelectSettingObservable.selectedEntryIndex.setter(*a1);
}

uint64_t CAFSingleSelectSettingObservable.selectedEntryIndex.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFSingleSelectSettingObservable.selectedEntryIndex.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFSingleSelectSettingObservable.selectedEntryIndex.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFSingleSelectSettingObservable.selectedEntryIndex.modify;
}

void CAFSingleSelectSettingObservable.selectedEntryIndex.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFSingleSelectSettingObservable.$selectedEntryIndex.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFSingleSelectSettingObservable.name.getter()
{
  return CAFSingleSelectSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFSingleSelectSettingObservable.$name.getter()
{
  return CAFSingleSelectSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSingleSelectSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSingleSelectSettingObservable._description.getter()
{
  uint64_t v1 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed);
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v1, sel_registeredForSelectSettingEntryList))
  {
    uint64_t v4 = (void *)CAFSingleSelectSettingObservable.selectSettingEntryList.getter();
    id v5 = objc_msgSend(v4, sel_description);
    uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v3 = v6;
  }
  if (objc_msgSend(v1, sel_registeredForSelectedEntryIndex))
  {
    CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
    dispatch thunk of CustomStringConvertible.description.getter();
  }
  _StringGuts.grow(_:)(93);
  v7._countAndFlagsBits = 0xD000000000000023;
  v7._object = (void *)0x8000000249489E80;
  String.append(_:)(v7);
  _print_unlocked<A, B>(_:_:)();
  v8._countAndFlagsBits = 0xD00000000000001BLL;
  v8._object = (void *)0x8000000249488BF0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = v2;
  v9._object = v3;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000249488560;
  v10._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v10);
  v11._countAndFlagsBits = OUTLINED_FUNCTION_93();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 4095264;
  v12._object = (void *)0xE300000000000000;
  String.append(_:)(v12);
  return 0;
}

uint64_t CAFSingleSelectSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSingleSelectSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFSingleSelectSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFSingleSelectSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSingleSelectSettingObservable.init(_:)(a1);
}

id CAFSingleSelectSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  Swift::String v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectSettingEntryList;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSingleSelectSettingObservable, CAFSelectSettingEntryList>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v26;
  uint64_t v27 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__selectedEntryIndex;
  uint64_t v28 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFSingleSelectSettingObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v27] = v29;
  uint64_t v30 = OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v30] = specialized SafePublished.init(observedValuekeypath:)(v28);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed] = a1;
  id v31 = a1;

  v34.receiver = v9;
  v34.super_class = (Class)type metadata accessor for CAFSingleSelectSettingObservable();
  id v32 = objc_msgSendSuper2(&v34, sel_init);
  objc_msgSend(v31, sel_registerObserver_, v32);

  return v32;
}

uint64_t CAFSingleSelectSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSingleSelectSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine32CAFSingleSelectSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSingleSelectSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSingleSelectSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSingleSelectSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSingleSelectSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSingleSelectSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSingleSelectSettingObservable(void **a1)
{
  return CAFSingleSelectSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSingleSelectSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSingleSelectSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateSelectSettingEntryList:)(uint64_t a1, void *a2)
{
  OUTLINED_FUNCTION_23_0();
  id v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateSelectedEntryIndex:)()
{
  return swift_release();
}

uint64_t CAFSingleSelectSettingObservable.singleSelectSettingService(_:didUpdateName:)()
{
  return CAFSingleSelectSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFSingleSelectSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSingleSelectSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSingleSelectSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_2494315E0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFSingleSelectSettingObservable.selectedEntryIndex.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249431608(unsigned __int8 *a1)
{
  return CAFSingleSelectSettingObservable.selectedEntryIndex.setter(*a1);
}

void sub_249431630(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249431650(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_249431674@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_2494316A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_2494316C8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_2494316F0()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249431718()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249431740()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_249431768(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249431788(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_2494317B0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_selectedEntryIndex);
  *a2 = (_BYTE)result;
  return result;
}

id sub_2494317E4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSelectedEntryIndex_, *a1);
}

void sub_2494317F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFSingleSelectSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSingleSelectSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSingleSelectSettingObservable()
{
  return lazy protocol witness table accessor for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable(&lazy protocol witness table cache variable for type CAFSingleSelectSetting and conformance CAFSingleSelectSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSetting);
}

unint64_t type metadata accessor for CAFSingleSelectSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFSingleSelectSetting;
  if (!lazy cache variable for type metadata for CAFSingleSelectSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSingleSelectSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSingleSelectSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable(&lazy protocol witness table cache variable for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSingleSelectSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSingleSelectSettingObservable and conformance CAFSingleSelectSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSingleSelectSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSingleSelectSettingObservable);
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))() & 0x1FF;
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectSettingEntryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$selectSettingEntryList.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.selectedEntryIndex.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$selectedEntryIndex.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFSingleSelectSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 536))();
}

uint64_t partial apply for closure #1 in CAFSingleSelectSettingObservable.resetCachedDescription()()
{
  return CAFSingleSelectSettingObservable.cachedDescription.setter(0, 0);
}

void CAFCar.id.getter()
{
  id v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for Identifiable.id.getter in conformance CAFCar()
{
}

id CAFTirePressureMonitoringSystemObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed);
}

uint64_t CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFTirePressureMonitoringSystemObservable._description.getter()
{
  _StringGuts.grow(_:)(52);
  v0._object = (void *)0x8000000249489F30;
  v0._countAndFlagsBits = 0xD00000000000002CLL;
  String.append(_:)(v0);
  _print_unlocked<A, B>(_:_:)();
  v1._countAndFlagsBits = 0x3E7D20207B20;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return 0;
}

uint64_t CAFTirePressureMonitoringSystemObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFTirePressureMonitoringSystemObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFTirePressureMonitoringSystemObservable.init(_:)(a1);
}

id CAFTirePressureMonitoringSystemObservable.init(_:)(void *a1)
{
  id v3 = &v1[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescription];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  uint64_t v4 = OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v5 = swift_allocObject();
  *(_DWORD *)(v5 + 16) = 0;
  *(void *)&v1[v4] = v5;
  *(void *)&v1[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed] = a1;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  id v6 = a1;
  id v7 = objc_msgSendSuper2(&v9, sel_init);
  objc_msgSend(v6, sel_registerObserver_, v7, v9.receiver, v9.super_class);

  return v7;
}

uint64_t type metadata accessor for CAFTirePressureMonitoringSystemObservable()
{
  return self;
}

uint64_t CAFTirePressureMonitoringSystemObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0
                            + OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFTirePressureMonitoringSystemObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine41CAFTirePressureMonitoringSystemObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFTirePressureMonitoringSystemObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFTirePressureMonitoringSystemObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFTirePressureMonitoringSystemObservable@<X0>(void *a1@<X8>)
{
  id result = CAFTirePressureMonitoringSystemObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFTirePressureMonitoringSystemObservable(void **a1)
{
  return CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFTirePressureMonitoringSystemObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFTirePressureMonitoringSystemObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFTirePressureMonitoringSystemObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFTirePressureMonitoringSystemObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFTirePressureMonitoringSystemObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFTirePressureMonitoringSystem(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable(&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystemObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFTirePressureMonitoringSystemObservable()
{
  return lazy protocol witness table accessor for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable(&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystem and conformance CAFTirePressureMonitoringSystem, 255, (void (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystem);
}

unint64_t type metadata accessor for CAFTirePressureMonitoringSystem()
{
  unint64_t result = lazy cache variable for type metadata for CAFTirePressureMonitoringSystem;
  if (!lazy cache variable for type metadata for CAFTirePressureMonitoringSystem)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFTirePressureMonitoringSystem);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFTirePressureMonitoringSystemObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFTirePressureMonitoringSystemObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTirePressureMonitoringSystemObservable and conformance CAFTirePressureMonitoringSystemObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFTirePressureMonitoringSystemObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFTirePressureMonitoringSystemObservable);
}

uint64_t dispatch thunk of CAFTirePressureMonitoringSystemObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 160))();
}

uint64_t partial apply for closure #1 in CAFTirePressureMonitoringSystemObservable.resetCachedDescription()()
{
  return CAFTirePressureMonitoringSystemObservable.cachedDescription.setter(0, 0);
}

void CAFService.id.getter()
{
  id v1 = objc_msgSend(v0, sel_uniqueIdentifier);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

void protocol witness for Identifiable.id.getter in conformance CAFService()
{
}

uint64_t static CAFRotationalSpeedState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFRotationalSpeedState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFRotationalSpeedState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFRotationalSpeedState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFRotationalSpeedState.description.getter()
{
  id v0 = (id)NSStringFromRotationalSpeedState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFRotationalSpeedState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState);
  a1[2] = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState);
  uint64_t result = lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(&lazy protocol witness table cache variable for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRotationalSpeedState and conformance CAFRotationalSpeedState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFRotationalSpeedState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFRotationalSpeedState()
{
  return CAFRotationalSpeedState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFRotationalSpeedState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFRotationalSpeedState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFRotationalSpeedState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFRotationalSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFRotationalSpeedState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFRotationalSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static CAFCombineLogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90278]);
}

uint64_t one-time initialization function for default()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static OS_os_log.default = result;
  return result;
}

uint64_t static CAFCombineLogger.error(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90280]);
}

uint64_t static CAFCombineLogger.log(_:message:function:file:line:)(os_log_type_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (one-time initialization token for default != -1) {
    swift_once();
  }
  uint64_t v10 = static OS_os_log.default;
  uint64_t result = os_log_type_enabled((os_log_t)static OS_os_log.default, a1);
  if (result)
  {
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v12 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = v13;
    *(_DWORD *)uint64_t v12 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24938F000, v10, a1, "%s: %ld  %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x24C59E600](v13, -1, -1);
    return MEMORY[0x24C59E600](v12, -1, -1);
  }
  return result;
}

uint64_t static CAFCombineLogger.info(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90270]);
}

uint64_t static CAFCombineLogger.default(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90270]);
}

uint64_t static CAFCombineLogger.fault(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return static CAFCombineLogger.debug(_:function:file:line:)(a1, a2, a3, a4, a5, a6, a7, MEMORY[0x263F90288]);
}

uint64_t static CAFCombineLogger.debug(_:function:file:line:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(void))
{
  os_log_type_t v12 = a8();

  return static CAFCombineLogger.log(_:message:function:file:line:)(v12, a1, a2, a3, a4);
}

ValueMetadata *type metadata accessor for CAFCombineLogger()
{
  return &type metadata for CAFCombineLogger;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x263F8DBE0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_0((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x263F8EE78];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x263F8EE78];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x263F8EE78];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  unint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  _OWORD v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x263F8EE78];
  }
  os_log_type_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t __swift_destroy_boxed_opaque_existential_0(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t static CAFNotificationSeverity.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFNotificationSeverity.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFNotificationSeverity.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFNotificationSeverity.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFNotificationSeverity.description.getter()
{
  id v0 = (id)NSStringFromNotificationSeverity();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  uint64_t v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFNotificationSeverity(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity);
  a1[2] = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity);
  uint64_t result = lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(&lazy protocol witness table cache variable for type CAFNotificationSeverity and conformance CAFNotificationSeverity);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFNotificationSeverity and conformance CAFNotificationSeverity(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFNotificationSeverity(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFNotificationSeverity()
{
  return CAFNotificationSeverity.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFNotificationSeverity] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [CAFNotificationSeverity]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFNotificationSeverity] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFNotificationSeverity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFNotificationSeverity.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFNotificationSeverity@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFDisplayUnitsObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed);
}

uint64_t CAFDisplayUnitsObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFDisplayUnitsObservable.speedUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  unsigned __int16 v4;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFDisplayUnitsObservable.$speedUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_retain();
  specialized SafeReadOnlyPublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFDisplayUnitsObservable.distanceUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable.$distanceUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable.temperatureUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable.$temperatureUnitRawValue.getter()
{
  return CAFDisplayUnitsObservable.$speedUnitRawValue.getter();
}

uint64_t CAFDisplayUnitsObservable._description.getter()
{
  uint64_t v1 = (void *)0xEE003E6465726574;
  uint64_t v2 = 0x73696765726E753CLL;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed);
  uint64_t v4 = 0x73696765726E753CLL;
  char v5 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForSpeedUnit))
  {
    CAFDisplayUnitsObservable.speedUnitRawValue.getter();
    type metadata accessor for CAFUnitType(0);
    uint64_t v4 = String.init<A>(describing:)();
    char v5 = v6;
  }
  uint64_t v7 = 0x73696765726E753CLL;
  int64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v3, sel_registeredForDistanceUnit))
  {
    CAFDisplayUnitsObservable.distanceUnitRawValue.getter();
    type metadata accessor for CAFUnitType(0);
    uint64_t v7 = String.init<A>(describing:)();
    int64_t v8 = v9;
  }
  if (objc_msgSend(v3, sel_registeredForTemperatureUnit))
  {
    CAFDisplayUnitsObservable.temperatureUnitRawValue.getter();
    type metadata accessor for CAFUnitType(0);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v1 = v10;
  }
  _StringGuts.grow(_:)(112);
  OUTLINED_FUNCTION_0_7(0xD00000000000001CLL, (uint64_t)"<CAFDisplayUnitsObservable: ");
  _print_unlocked<A, B>(_:_:)();
  v11._object = (void *)0x800000024948A260;
  v11._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v11);
  v12._countAndFlagsBits = v4;
  v12._object = v5;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_7(0xD000000000000018, (uint64_t)", distanceUnitRawValue: ");
  v13._countAndFlagsBits = v7;
  v13._object = v8;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_0_7(0xD00000000000001BLL, (uint64_t)", temperatureUnitRawValue: ");
  v14._countAndFlagsBits = v2;
  v14._object = v1;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 4095264;
  v15._object = (void *)0xE300000000000000;
  String.append(_:)(v15);
  return 0;
}

uint64_t CAFDisplayUnitsObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFDisplayUnitsObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFDisplayUnitsObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFDisplayUnitsObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFDisplayUnitsObservable.init(_:)(a1);
}

id CAFDisplayUnitsObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__speedUnitRawValue;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFDisplayUnitsObservable, CAFUnitType>);
  swift_allocObject();
  int64_t v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__distanceUnitRawValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable__temperatureUnitRawValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v12] = v13;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed] = a1;
  id v14 = a1;

  v17.receiver = v8;
  v17.super_class = (Class)type metadata accessor for CAFDisplayUnitsObservable();
  id v15 = objc_msgSendSuper2(&v17, sel_init);
  objc_msgSend(v14, sel_registerObserver_, v15);

  return v15;
}

uint64_t CAFDisplayUnitsObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFDisplayUnitsObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFDisplayUnitsObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFDisplayUnitsObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFDisplayUnitsObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFDisplayUnitsObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFDisplayUnitsObservable@<X0>(void *a1@<X8>)
{
  id result = CAFDisplayUnitsObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFDisplayUnitsObservable(void **a1)
{
  return CAFDisplayUnitsObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFDisplayUnitsObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFDisplayUnitsObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

{
  uint64_t vars8;

  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateDistanceUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

uint64_t CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateTemperatureUnitRawValue:)()
{
  return CAFDisplayUnitsObservable.displayUnitsService(_:didUpdateSpeedUnitRawValue:)();
}

uint64_t CAFDisplayUnitsObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFDisplayUnitsObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFDisplayUnitsObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_speedUnitRawValue()
{
  return sel_speedUnitRawValue;
}

id sub_249434964@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_speedUnitRawValue);
  *a2 = (_WORD)result;
  return result;
}

id sub_249434998@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_distanceUnitRawValue);
  *a2 = (_WORD)result;
  return result;
}

char *keypath_get_selector_temperatureUnitRawValue()
{
  return sel_temperatureUnitRawValue;
}

id sub_2494349D8@<X0>(id *a1@<X0>, _WORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_temperatureUnitRawValue);
  *a2 = (_WORD)result;
  return result;
}

uint64_t type metadata accessor for CAFDisplayUnitsObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFDisplayUnits(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable(&lazy protocol witness table cache variable for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDisplayUnitsObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFDisplayUnitsObservable()
{
  return lazy protocol witness table accessor for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable(&lazy protocol witness table cache variable for type CAFDisplayUnits and conformance CAFDisplayUnits, 255, (void (*)(uint64_t))type metadata accessor for CAFDisplayUnits);
}

unint64_t type metadata accessor for CAFDisplayUnits()
{
  unint64_t result = lazy cache variable for type metadata for CAFDisplayUnits;
  if (!lazy cache variable for type metadata for CAFDisplayUnits)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFDisplayUnits);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFDisplayUnitsObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFDisplayUnitsObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFDisplayUnitsObservable and conformance CAFDisplayUnitsObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFDisplayUnitsObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFDisplayUnitsObservable);
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.speedUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$speedUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.distanceUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$distanceUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.temperatureUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.$temperatureUnitRawValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFDisplayUnitsObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 232))();
}

uint64_t partial apply for closure #1 in CAFDisplayUnitsObservable.resetCachedDescription()()
{
  return CAFDisplayUnitsObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_0_7(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (a2 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&a1);
}

uint64_t CAFIntegerSetting.stepperBarHiddenBridged.getter()
{
  return CAFSeatHeatingCooling.onBridged.getter((SEL *)&selRef_hasStepperBarHidden, (SEL *)&selRef_stepperBarHidden);
}

id CAFIntegerSettingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
}

uint64_t CAFIntegerSettingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFIntegerSettingObservable.userVisibleLabel.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$userVisibleLabel.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.sectionIdentifier.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_15_1();
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFIntegerSettingObservable.$sectionIdentifier.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sectionIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.sortOrder.getter()
{
  OUTLINED_FUNCTION_15_1();
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFIntegerSettingObservable.$sortOrder.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.category.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFIntegerSettingObservable.$category.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__category, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.identifier.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$identifier.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.disabled.getter()
{
  return CAFIntegerSettingObservable.disabled.getter();
}

{
  void *v0;
  id v1;
  unsigned __int8 v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_34_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFIntegerSettingObservable.$disabled.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__disabled, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.limitableUIElement.getter()
{
  return CAFIntegerSettingObservable.disabled.getter();
}

uint64_t CAFIntegerSettingObservable.$limitableUIElement.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__limitableUIElement, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.hidden.getter()
{
  return CAFIntegerSettingObservable.disabled.getter();
}

uint64_t CAFIntegerSettingObservable.$hidden.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__hidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.showAudioBrandLogo.getter()
{
  return CAFIntegerSettingObservable.disabled.getter();
}

uint64_t CAFIntegerSettingObservable.$showAudioBrandLogo.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__showAudioBrandLogo, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.vehicleLayoutKey.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$vehicleLayoutKey.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__vehicleLayoutKey, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.symbolName.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$symbolName.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__symbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.prominenceInfo.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_21_0();
  swift_retain();
  id v1 = v0;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFIntegerSettingObservable.$prominenceInfo.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__prominenceInfo, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFIntegerSettingObservable.value : CAFIntegerSettingObservable@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = CAFIntegerSettingObservable.value.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFIntegerSettingObservable.value : CAFIntegerSettingObservable(unsigned int *a1)
{
  return CAFIntegerSettingObservable.value.setter(*a1);
}

uint64_t CAFIntegerSettingObservable.value.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFIntegerSettingObservable.value.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFIntegerSettingObservable.value.modify(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LODWORD(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((_DWORD *)v3 + 22) = v4;
  return CAFIntegerSettingObservable.value.modify;
}

void CAFIntegerSettingObservable.value.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned int *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFIntegerSettingObservable.$value.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFIntegerSettingObservable.userVisibleValue.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$userVisibleValue.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.maximumSymbolName.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$maximumSymbolName.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__maximumSymbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.minimumSymbolName.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$minimumSymbolName.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__minimumSymbolName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.stepperBarHidden.getter()
{
  return CAFIntegerSettingObservable.disabled.getter();
}

uint64_t CAFIntegerSettingObservable.$stepperBarHidden.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__stepperBarHidden, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.name.getter()
{
  return CAFIntegerSettingObservable.sectionIdentifier.getter();
}

uint64_t CAFIntegerSettingObservable.$name.getter()
{
  return CAFIntegerSettingObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFIntegerSettingObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFIntegerSettingObservable._description.getter()
{
  unint64_t v30 = 0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  uint64_t v27 = v1;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed);
  objc_msgSend(v2, sel_registeredForInt32Value);
  OUTLINED_FUNCTION_0_4();
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (v5)
  {
    CAFIntegerSettingObservable.value.getter();
    uint64_t v3 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v4 = v6;
  }
  uint64_t v7 = 0x73696765726E753CLL;
  int64_t v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForUserVisibleValue, v3))
  {
    CAFIntegerSettingObservable.userVisibleValue.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v7 = OUTLINED_FUNCTION_12_3();
    int64_t v8 = v9;
  }
  uint64_t v10 = 0x73696765726E753CLL;
  uint64_t v11 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForMaximumSymbolName))
  {
    CAFIntegerSettingObservable.maximumSymbolName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v10 = OUTLINED_FUNCTION_12_3();
    uint64_t v11 = v12;
  }
  uint64_t v13 = 0x73696765726E753CLL;
  id v14 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForMinimumSymbolName))
  {
    CAFIntegerSettingObservable.minimumSymbolName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v13 = OUTLINED_FUNCTION_12_3();
    id v14 = v15;
  }
  if (objc_msgSend(v2, sel_registeredForStepperBarHidden))
  {
    CAFIntegerSettingObservable.stepperBarHidden.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Bool?);
    uint64_t v27 = OUTLINED_FUNCTION_12_3();
    unint64_t v30 = v16;
  }
  _StringGuts.grow(_:)(137);
  v17._countAndFlagsBits = 0xD00000000000001ELL;
  v17._object = (void *)0x800000024948A390;
  String.append(_:)(v17);
  _print_unlocked<A, B>(_:_:)();
  v18._countAndFlagsBits = 0x65756C6176207B20;
  v18._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v25;
  v19._object = v4;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6((uint64_t)", userVisibleValue: ");
  v20._countAndFlagsBits = v7;
  v20._object = v8;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_4((uint64_t)", maximumSymbolName: ", v25, v27, v30, v0, 0);
  v21._countAndFlagsBits = v10;
  v21._object = v11;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_18_4((uint64_t)", minimumSymbolName: ", v26, v28, v31, v32, v33);
  v22._countAndFlagsBits = v13;
  v22._object = v14;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_6((uint64_t)", stepperBarHidden: ");
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 4095264;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  return *(void *)v34;
}

uint64_t CAFIntegerSettingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFIntegerSettingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFIntegerSettingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFIntegerSettingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFIntegerSettingObservable.init(_:)(a1);
}

id CAFIntegerSettingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sectionIdentifier;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_26_0();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, UInt8?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v11] = v12;
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__category;
  uint64_t v14 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, CAFSettingsCategory>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v13] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v17 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__disabled;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, Bool?>);
  OUTLINED_FUNCTION_10_1();
  *(void *)&v9[v17] = OUTLINED_FUNCTION_16_0();
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__limitableUIElement;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_16_0();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__hidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_16_0();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__showAudioBrandLogo;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_16_0();
  uint64_t v21 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__vehicleLayoutKey;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v21] = OUTLINED_FUNCTION_26_0();
  uint64_t v22 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__symbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v22] = OUTLINED_FUNCTION_26_0();
  uint64_t v23 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__prominenceInfo;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFIntegerSettingObservable, CAFProminenceInformation?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v23] = v24;
  uint64_t v25 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__value;
  uint64_t v26 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafePublished<CAFIntegerSettingObservable, Int32>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v25] = v27;
  uint64_t v28 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__userVisibleValue;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v28] = OUTLINED_FUNCTION_26_0();
  uint64_t v29 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__maximumSymbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v29] = OUTLINED_FUNCTION_26_0();
  uint64_t v30 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__minimumSymbolName;
  swift_getKeyPath();
  OUTLINED_FUNCTION_35_0();
  *(void *)&v9[v30] = OUTLINED_FUNCTION_26_0();
  uint64_t v31 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__stepperBarHidden;
  swift_getKeyPath();
  OUTLINED_FUNCTION_17_1();
  *(void *)&v9[v31] = OUTLINED_FUNCTION_16_0();
  uint64_t v32 = OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v32] = specialized SafePublished.init(observedValuekeypath:)(v26);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed] = a1;
  id v33 = a1;

  v36.receiver = v9;
  v36.super_class = (Class)type metadata accessor for CAFIntegerSettingObservable();
  id v34 = objc_msgSendSuper2(&v36, sel_init);
  objc_msgSend(v33, sel_registerObserver_, v34);

  return v34;
}

uint64_t CAFIntegerSettingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFIntegerSettingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine27CAFIntegerSettingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFIntegerSettingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFIntegerSettingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFIntegerSettingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFIntegerSettingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFIntegerSettingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFIntegerSettingObservable(void **a1)
{
  return CAFIntegerSettingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFIntegerSettingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFIntegerSettingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

{
  uint64_t vars8;

  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSortOrder:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateCategory:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateIdentifier:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateLimitableUIElement:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateHidden:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateShowAudioBrandLogo:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateVehicleLayoutKey:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t @objc CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.automakerSettingService(_:didUpdateProminenceInfo:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateValue:)()
{
  return swift_release();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateUserVisibleValue:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateMaximumSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateMinimumSymbolName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateSectionIdentifier:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateStepperBarHidden:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateDisabled:)();
}

uint64_t CAFIntegerSettingObservable.integerSettingService(_:didUpdateName:)()
{
  return CAFIntegerSettingObservable.automakerSettingService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFIntegerSettingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFIntegerSettingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFIntegerSettingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_249436C4C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFIntegerSettingObservable.value.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249436C74(unsigned int *a1)
{
  return CAFIntegerSettingObservable.value.setter(*a1);
}

void sub_249436C9C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249436CBC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_249436CE0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_category);
  *a2 = (_BYTE)result;
  return result;
}

void sub_249436D14(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_249436D34()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.disabledBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249436D5C()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.limitableUIElementBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249436D84()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.hiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

uint64_t sub_249436DAC()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFMultipleSelectImageSetting.showAudioBrandLogoBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_249436DD4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_249436DF4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_249436E18@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_value);
  *a2 = result;
  return result;
}

id sub_249436E4C(unsigned int *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setValue_, *a1);
}

void sub_249436E60(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_maximumSymbolName()
{
  return sel_maximumSymbolName;
}

void sub_249436E8C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_minimumSymbolName()
{
  return sel_minimumSymbolName;
}

void sub_249436EB8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_249436ED8()
{
  OUTLINED_FUNCTION_2_1();
  uint64_t result = CAFIntegerSetting.stepperBarHiddenBridged.getter();
  *uint64_t v0 = result;
  return result;
}

void sub_249436F00(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFIntegerSettingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFIntegerSetting(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable(&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFIntegerSettingObservable()
{
  return lazy protocol witness table accessor for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable(&lazy protocol witness table cache variable for type CAFIntegerSetting and conformance CAFIntegerSetting, 255, (void (*)(uint64_t))type metadata accessor for CAFIntegerSetting);
}

unint64_t type metadata accessor for CAFIntegerSetting()
{
  unint64_t result = lazy cache variable for type metadata for CAFIntegerSetting;
  if (!lazy cache variable for type metadata for CAFIntegerSetting)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFIntegerSetting);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFIntegerSettingObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFIntegerSettingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFIntegerSettingObservable and conformance CAFIntegerSettingObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFIntegerSettingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFIntegerSettingObservable);
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$sectionIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))() & 0x1FF;
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$category.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$disabled.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x180))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x188))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$limitableUIElement.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x190))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x198))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$hidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$showAudioBrandLogo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1B8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$vehicleLayoutKey.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1C8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$symbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$prominenceInfo.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1E8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.value.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$value.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x200))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.userVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x208))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$userVisibleValue.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x210))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.maximumSymbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x218))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$maximumSymbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x220))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.minimumSymbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x228))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$minimumSymbolName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x230))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.stepperBarHidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x238))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$stepperBarHidden.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x240))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x248))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x250))();
}

uint64_t dispatch thunk of CAFIntegerSettingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 608))();
}

uint64_t partial apply for closure #1 in CAFIntegerSettingObservable.resetCachedDescription()()
{
  return CAFIntegerSettingObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_10_6(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000014;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return String.init<A>(describing:)();
}

void OUTLINED_FUNCTION_18_4(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v9 = v6;
  unint64_t v8 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v9);
}

uint64_t CAFNowPlaying.playbackStateBridged.getter()
{
  unsigned int v1 = objc_msgSend(v0, sel_hasPlaybackState);
  unsigned int v2 = v1;
  if (v1) {
    unsigned int v1 = objc_msgSend(v0, sel_playbackState);
  }
  return v1 | ((v2 ^ 1) << 8);
}

id CAFNowPlayingObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
}

uint64_t CAFNowPlayingObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFNowPlayingObservable.currentMediaSourceIdentifier.getter()
{
  return CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

{
  void *v0;
  id v1;
  uint64_t v3;

  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_7_6();
  swift_retain();
  unsigned int v1 = v0;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__currentMediaSourceIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.title.getter()
{
  return CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

uint64_t CAFNowPlayingObservable.$title.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__title, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.artist.getter()
{
  return CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

uint64_t CAFNowPlayingObservable.$artist.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artist, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.album.getter()
{
  return CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
}

uint64_t CAFNowPlayingObservable.$album.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__album, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.userVisibleDescription.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_7_6();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFNowPlayingObservable.$userVisibleDescription.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__userVisibleDescription, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.artwork.getter()
{
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_7_6();
  swift_retain();
  id v1 = v0;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v3;
}

uint64_t CAFNowPlayingObservable.$artwork.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artwork, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.jumpBackwardInterval.getter()
{
  return CAFNowPlayingObservable.jumpBackwardInterval.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFNowPlayingObservable.$jumpBackwardInterval.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpBackwardInterval, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.jumpForwardInterval.getter()
{
  return CAFNowPlayingObservable.jumpBackwardInterval.getter();
}

uint64_t CAFNowPlayingObservable.$jumpForwardInterval.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpForwardInterval, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.playbackState.getter()
{
  OUTLINED_FUNCTION_15_1();
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4 | (v5 << 8);
}

uint64_t CAFNowPlayingObservable.$playbackState.getter()
{
  return CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__playbackState, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = OUTLINED_FUNCTION_23_0();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFNowPlayingObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed);
  objc_msgSend(v2, sel_registeredForCurrentMediaSourceIdentifier);
  OUTLINED_FUNCTION_4_5();
  if (v5) {
    uint64_t v4 = CAFNowPlayingObservable.currentMediaSourceIdentifier.getter();
  }
  v58._countAndFlagsBits = v4;
  v58._object = v3;
  objc_msgSend(v2, sel_registeredForTitle);
  OUTLINED_FUNCTION_4_5();
  if (v8) {
    uint64_t v7 = CAFNowPlayingObservable.title.getter();
  }
  v57._countAndFlagsBits = v7;
  v57._object = v6;
  objc_msgSend(v2, sel_registeredForArtist);
  OUTLINED_FUNCTION_4_5();
  if (v11) {
    uint64_t v10 = CAFNowPlayingObservable.artist.getter();
  }
  v56._countAndFlagsBits = v10;
  v56._object = v9;
  objc_msgSend(v2, sel_registeredForAlbum);
  OUTLINED_FUNCTION_0_4();
  uint64_t v13 = (void *)0xEE003E6465726574;
  if (v14)
  {
    uint64_t v12 = CAFNowPlayingObservable.album.getter();
    uint64_t v13 = v15;
  }
  uint64_t v55 = v12;
  objc_msgSend(v2, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_0_4();
  uint64_t v17 = (void *)0xEE003E6465726574;
  if (v18)
  {
    CAFNowPlayingObservable.userVisibleDescription.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v17 = v19;
  }
  uint64_t v54 = v16;
  uint64_t v20 = 0x73696765726E753CLL;
  uint64_t v21 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForArtwork))
  {
    uint64_t v22 = CAFNowPlayingObservable.artwork.getter();
    unint64_t v24 = v23;
    uint64_t v20 = Data.description.getter();
    uint64_t v21 = v25;
    outlined consume of Data._Representation(v22, v24);
  }
  uint64_t v53 = v20;
  objc_msgSend(v2, sel_registeredForJumpBackwardInterval);
  OUTLINED_FUNCTION_0_4();
  uint64_t v27 = (void *)0xEE003E6465726574;
  if (v28)
  {
    CAFNowPlayingObservable.jumpBackwardInterval.getter();
    uint64_t v26 = String.init<A>(describing:)();
    uint64_t v27 = v29;
  }
  uint64_t v52 = v26;
  objc_msgSend(v2, sel_registeredForJumpForwardInterval);
  OUTLINED_FUNCTION_0_4();
  uint64_t v31 = (void *)0xEE003E6465726574;
  if (v32)
  {
    CAFNowPlayingObservable.jumpForwardInterval.getter();
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v31 = v33;
  }
  id v34 = (void *)0xEE003E6465726574;
  uint64_t v35 = 0x73696765726E753CLL;
  if (objc_msgSend(v2, sel_registeredForPlaybackState, v30))
  {
    CAFNowPlayingObservable.playbackState.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFPlaybackState?);
    uint64_t v35 = String.init<A>(describing:)();
    id v34 = v36;
  }
  uint64_t v59 = static String._createEmpty(withInitialCapacity:)(211);
  v37._object = (void *)0x800000024948A530;
  v37._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_6_4(0xD000000000000021, (uint64_t)" { currentMediaSourceIdentifier: ");
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v38._countAndFlagsBits = 0x3A656C746974202CLL;
  v38._object = (void *)0xE900000000000020;
  String.append(_:)(v38);
  String.append(_:)(v57);
  swift_bridgeObjectRelease();
  v39._countAndFlagsBits = 0x747369747261202CLL;
  v39._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v39);
  String.append(_:)(v56);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 0x3A6D75626C61202CLL;
  v40._object = (void *)0xE900000000000020;
  String.append(_:)(v40);
  v41._countAndFlagsBits = v55;
  v41._object = v13;
  String.append(_:)(v41);
  swift_bridgeObjectRelease();
  v42._object = (void *)0x80000002494883B0;
  v42._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v42);
  v43._countAndFlagsBits = v54;
  v43._object = v17;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0x726F77747261202CLL;
  v44._object = (void *)0xEB00000000203A6BLL;
  String.append(_:)(v44);
  v45._countAndFlagsBits = v53;
  v45._object = v21;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000018, (uint64_t)", jumpBackwardInterval: ");
  v46._countAndFlagsBits = v52;
  v46._object = v27;
  String.append(_:)(v46);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000017, (uint64_t)", jumpForwardInterval: ");
  v47._countAndFlagsBits = v51;
  v47._object = v31;
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_6_4(0xD000000000000011, (uint64_t)", playbackState: ");
  v48._countAndFlagsBits = v35;
  v48._object = v34;
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 4095264;
  v49._object = (void *)0xE300000000000000;
  String.append(_:)(v49);
  return v59;
}

uint64_t CAFNowPlayingObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFNowPlayingObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFNowPlayingObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFNowPlayingObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFNowPlayingObservable.init(_:)(a1);
}

id CAFNowPlayingObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__currentMediaSourceIdentifier;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, String>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__title;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_1_5();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artist;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v11] = OUTLINED_FUNCTION_1_5();
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__album;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v12] = OUTLINED_FUNCTION_1_5();
  uint64_t v13 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__userVisibleDescription;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, String?>);
  OUTLINED_FUNCTION_10_1();
  uint64_t v14 = OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v13] = specialized SafePublished.init(observedValuekeypath:)(v14);
  uint64_t v15 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__artwork;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, Data>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  *(void *)&v9[v15] = specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpBackwardInterval;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, Measurement<NSUnitDuration>?>);
  OUTLINED_FUNCTION_10_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__jumpForwardInterval;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v18] = v19;
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable__playbackState;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFNowPlayingObservable, CAFPlaybackState?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v20] = v21;
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed] = a1;
  id v22 = a1;

  v25.receiver = v9;
  v25.super_class = (Class)type metadata accessor for CAFNowPlayingObservable();
  id v23 = objc_msgSendSuper2(&v25, sel_init);
  objc_msgSend(v22, sel_registerObserver_, v23);

  return v23;
}

uint64_t CAFNowPlayingObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFNowPlayingObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine23CAFNowPlayingObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFNowPlayingObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFNowPlayingObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFNowPlayingObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFNowPlayingObservable@<X0>(void *a1@<X8>)
{
  id result = CAFNowPlayingObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFNowPlayingObservable(void **a1)
{
  return CAFNowPlayingObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFNowPlayingObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFNowPlayingObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateTitle:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t @objc CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateArtist:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateAlbum:)()
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateCurrentMediaSourceIdentifier:)();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateUserVisibleDescription:)()
{
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateArtwork:)()
{
  OUTLINED_FUNCTION_23_0();
  uint64_t v0 = OUTLINED_FUNCTION_93();
  outlined copy of Data._Representation(v0, v1);
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(uint64_t a1, uint64_t a2)
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(a1, a2);
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.setValue(_:)(a2);

  return swift_release();
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpForwardInterval:)(uint64_t a1, uint64_t a2)
{
  return CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(a1, a2);
}

uint64_t @objc CAFNowPlayingObservable.nowPlayingService(_:didUpdateJumpBackwardInterval:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4)
  {
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitDuration);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    uint64_t v13 = (uint64_t)v11;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);
    uint64_t v13 = (uint64_t)v11;
    uint64_t v14 = 1;
  }
  __swift_storeEnumTagSinglePayload(v13, v14, 1, v12);
  id v15 = a3;
  id v16 = a1;
  a5();

  return outlined destroy of Measurement<NSUnitDuration>?((uint64_t)v11);
}

uint64_t CAFNowPlayingObservable.nowPlayingService(_:didUpdatePlaybackState:)()
{
  OUTLINED_FUNCTION_23_0();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFNowPlayingObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFNowPlayingObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFNowPlayingObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

char *keypath_get_selector_currentMediaSourceIdentifier()
{
  return sel_currentMediaSourceIdentifier;
}

void sub_249439220(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_title()
{
  return sel_title;
}

void sub_24943924C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_artist()
{
  return sel_artist;
}

void sub_249439278(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_album()
{
  return sel_album;
}

void sub_2494392A4(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void key path getter for CAFNowPlaying.userVisibleDescription : CAFNowPlaying(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_userVisibleDescription);
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

char *keypath_get_selector_artwork()
{
  return sel_artwork;
}

void key path getter for CAFNowPlaying.artwork : CAFNowPlaying(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_artwork);
  uint64_t v4 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v6 = v5;

  *a2 = v4;
  a2[1] = v6;
}

char *keypath_get_selector_jumpBackwardInterval()
{
  return sel_jumpBackwardInterval;
}

uint64_t sub_2494393A4@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying(a1, (SEL *)&selRef_jumpBackwardInterval, a2);
}

char *keypath_get_selector_jumpForwardInterval()
{
  return sel_jumpForwardInterval;
}

uint64_t key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying@<X0>(id *a1@<X0>, SEL *a2@<X3>, uint64_t a3@<X8>)
{
  id v4 = [*a1 *a2];
  if (v4)
  {
    uint64_t v5 = v4;
    type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitDuration);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = 1;
  }
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>);

  return __swift_storeEnumTagSinglePayload(a3, v6, 1, v7);
}

uint64_t sub_249439470@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for CAFNowPlaying.jumpBackwardInterval : CAFNowPlaying(a1, (SEL *)&selRef_jumpForwardInterval, a2);
}

uint64_t key path getter for CAFNowPlaying.playbackStateBridged : CAFNowPlaying@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFNowPlaying.playbackStateBridged.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t type metadata accessor for CAFNowPlayingObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFNowPlaying()
{
  return lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable(&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable);
}

unint64_t lazy protocol witness table accessor for type CAFNowPlaying and conformance CAFNowPlaying()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying;
  if (!lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFNowPlaying);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFNowPlaying and conformance CAFNowPlaying);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFNowPlayingObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFNowPlayingObservable and conformance CAFNowPlayingObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFNowPlayingObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFNowPlayingObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFNowPlayingObservable);
}

uint64_t dispatch thunk of CAFNowPlayingObservable.currentMediaSourceIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$currentMediaSourceIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$title.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.artist.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$artist.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.album.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$album.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.artwork.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$artwork.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.jumpBackwardInterval.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$jumpBackwardInterval.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.jumpForwardInterval.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$jumpForwardInterval.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.playbackState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))() & 0x1FF;
}

uint64_t dispatch thunk of CAFNowPlayingObservable.$playbackState.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFNowPlayingObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 376))();
}

uint64_t outlined destroy of Measurement<NSUnitDuration>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitDuration>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFNowPlayingObservable.resetCachedDescription()()
{
  return CAFNowPlayingObservable.cachedDescription.setter(0, 0);
}

uint64_t OUTLINED_FUNCTION_7_6()
{
  return swift_retain();
}

id CAFRemoteNotificationObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
}

uint64_t CAFRemoteNotificationObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFRemoteNotificationObservable.userVisibleLabel.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  swift_retain();
  swift_retain();
  unint64_t v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRemoteNotificationObservable.$userVisibleLabel.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleLabel, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.userVisibleDescription.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFRemoteNotificationObservable.$userVisibleDescription.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleDescription, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.identifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFRemoteNotificationObservable.$identifier.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.notificationUserActions.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_31_1();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRemoteNotificationObservable.$notificationUserActions.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__notificationUserActions, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t key path getter for CAFRemoteNotificationObservable.userAction : CAFRemoteNotificationObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRemoteNotificationObservable.userAction.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFRemoteNotificationObservable.userAction : CAFRemoteNotificationObservable(unsigned __int8 *a1)
{
  return CAFRemoteNotificationObservable.userAction.setter(*a1);
}

uint64_t CAFRemoteNotificationObservable.userAction.getter()
{
  OUTLINED_FUNCTION_116();
  id v7 = *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v7;
  uint64_t v2 = (void (*)(uint64_t *, void))swift_readAtKeyPath();
  uint64_t v4 = *v3;
  v2(&v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFRemoteNotificationObservable.userAction.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFRemoteNotificationObservable.userAction.modify(void *a1))(uint64_t a1)
{
  id v3 = malloc(0x60uLL);
  *a1 = v3;
  *((void *)v3 + 8) = v1;
  *((void *)v3 + 9) = swift_getKeyPath();
  *((void *)v3 + 10) = swift_getKeyPath();
  OUTLINED_FUNCTION_116();
  uint64_t v4 = *(void **)(v1 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  *((void *)v3 + 7) = v4;
  swift_retain();
  swift_retain();
  id v5 = v4;
  uint64_t v6 = (void (*)(void *, void))swift_readAtKeyPath();
  LOBYTE(v4) = *v7;
  v6(v3, 0);
  swift_release();
  swift_release();

  *((unsigned char *)v3 + 88) = (_BYTE)v4;
  return CAFRemoteNotificationObservable.userAction.modify;
}

void CAFRemoteNotificationObservable.userAction.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFRemoteNotificationObservable.$userAction.getter()
{
  OUTLINED_FUNCTION_116();
  swift_retain();
  specialized SafePublished.projectedValue.getter();
  uint64_t v1 = v0;
  swift_release();
  return v1;
}

uint64_t CAFRemoteNotificationObservable.symbolNameAndColor.getter()
{
  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  OUTLINED_FUNCTION_31_1();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFRemoteNotificationObservable.$symbolNameAndColor.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__symbolNameAndColor, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.displayPanelIdentifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFRemoteNotificationObservable.$displayPanelIdentifier.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayPanelIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.displayZoneIdentifier.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFRemoteNotificationObservable.$displayZoneIdentifier.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayZoneIdentifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.name.getter()
{
  return CAFRemoteNotificationObservable.userVisibleLabel.getter();
}

uint64_t CAFRemoteNotificationObservable.$name.getter()
{
  return CAFRemoteNotificationObservable.$userVisibleLabel.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFRemoteNotificationObservable.$userVisibleLabel.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFRemoteNotificationObservable._description.getter()
{
  v48._object = (void *)0xEE003E6465726574;
  OUTLINED_FUNCTION_0_4();
  v48._countAndFlagsBits = v2;
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed);
  objc_msgSend(v3, sel_registeredForUserVisibleLabel);
  OUTLINED_FUNCTION_0_4();
  unint64_t v5 = 0xEE003E6465726574;
  if (v6) {
    uint64_t v4 = CAFRemoteNotificationObservable.userVisibleLabel.getter();
  }
  v47._countAndFlagsBits = v4;
  v47._object = (void *)v5;
  objc_msgSend(v3, sel_registeredForUserVisibleDescription);
  OUTLINED_FUNCTION_0_4();
  id v8 = (void *)0xEE003E6465726574;
  if (v9)
  {
    uint64_t v7 = CAFRemoteNotificationObservable.userVisibleDescription.getter();
    id v8 = v10;
  }
  uint64_t v46 = v7;
  objc_msgSend(v3, sel_registeredForIdentifier);
  OUTLINED_FUNCTION_0_4();
  uint64_t v12 = (void *)0xEE003E6465726574;
  if (v13)
  {
    uint64_t v11 = CAFRemoteNotificationObservable.identifier.getter();
    uint64_t v12 = v14;
  }
  uint64_t v45 = v11;
  objc_msgSend(v3, sel_registeredForNotificationUserActions);
  OUTLINED_FUNCTION_9_5();
  id v15 = (void *)0xEE003E6465726574;
  if (v16)
  {
    uint64_t v17 = (void *)CAFRemoteNotificationObservable.notificationUserActions.getter();
    id v18 = objc_msgSend(v17, sel_description);
    uint64_t v1 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v15 = v19;
  }
  objc_msgSend(v3, sel_registeredForUserAction);
  OUTLINED_FUNCTION_0_4();
  uint64_t v21 = (void *)0xEE003E6465726574;
  if (v22)
  {
    CAFRemoteNotificationObservable.userAction.getter();
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v21 = v23;
  }
  uint64_t v43 = v20;
  uint64_t v44 = v1;
  objc_msgSend(v3, sel_registeredForSymbolNameAndColor);
  OUTLINED_FUNCTION_0_4();
  objc_super v25 = (void *)0xEE003E6465726574;
  if (v26)
  {
    CAFRemoteNotificationObservable.symbolNameAndColor.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CAFSymbolImageWithColor?);
    uint64_t v24 = String.init<A>(describing:)();
    objc_super v25 = v27;
  }
  objc_msgSend(v3, sel_registeredForDisplayPanelIdentifier, v24);
  OUTLINED_FUNCTION_9_5();
  int v28 = (void *)0xEE003E6465726574;
  if (v29)
  {
    uint64_t v1 = CAFRemoteNotificationObservable.displayPanelIdentifier.getter();
    int v28 = v30;
  }
  if (objc_msgSend(v3, sel_registeredForDisplayZoneIdentifier))
  {
    v48._countAndFlagsBits = CAFRemoteNotificationObservable.displayZoneIdentifier.getter();
    v48._object = v31;
  }
  _StringGuts.grow(_:)(230);
  OUTLINED_FUNCTION_3_7(0xD000000000000022, (uint64_t)"<CAFRemoteNotificationObservable: ");
  _print_unlocked<A, B>(_:_:)();
  OUTLINED_FUNCTION_3_7(0xD000000000000015, (uint64_t)" { userVisibleLabel: ");
  String.append(_:)(v47);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_10((uint64_t)", userVisibleDescription: ");
  v32._countAndFlagsBits = v46;
  v32._object = v8;
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  v33._countAndFlagsBits = 0x69746E656469202CLL;
  v33._object = (void *)0xEE00203A72656966;
  String.append(_:)(v33);
  v34._countAndFlagsBits = v45;
  v34._object = v12;
  String.append(_:)(v34);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD00000000000001BLL, (uint64_t)", notificationUserActions: ");
  v35._countAndFlagsBits = v44;
  v35._object = v15;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0x634172657375202CLL;
  v36._object = (void *)0xEE00203A6E6F6974;
  String.append(_:)(v36);
  v37._countAndFlagsBits = v43;
  v37._object = v21;
  String.append(_:)(v37);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000016, (uint64_t)", symbolNameAndColor: ");
  v38._countAndFlagsBits = v42;
  v38._object = v25;
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_5_10((uint64_t)", displayPanelIdentifier: ");
  v39._countAndFlagsBits = v1;
  v39._object = v28;
  String.append(_:)(v39);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_3_7(0xD000000000000019, (uint64_t)", displayZoneIdentifier: ");
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 4095264;
  v40._object = (void *)0xE300000000000000;
  String.append(_:)(v40);
  return 0;
}

uint64_t CAFRemoteNotificationObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFRemoteNotificationObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFRemoteNotificationObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFRemoteNotificationObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFRemoteNotificationObservable.init(_:)(a1);
}

id CAFRemoteNotificationObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleLabel;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, String>);
  OUTLINED_FUNCTION_10_1();
  int v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userVisibleDescription;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v10] = OUTLINED_FUNCTION_1_5();
  uint64_t v11 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__identifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v11] = OUTLINED_FUNCTION_1_5();
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__notificationUserActions;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, CAFNotificationUserActions>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v12] = v13;
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__userAction;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafePublished<CAFRemoteNotificationObservable, UInt8>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__symbolNameAndColor;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFRemoteNotificationObservable, CAFSymbolImageWithColor?>);
  OUTLINED_FUNCTION_10_1();
  OUTLINED_FUNCTION_7_1();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v9[v16] = v17;
  uint64_t v18 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayPanelIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v18] = OUTLINED_FUNCTION_1_5();
  uint64_t v19 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__displayZoneIdentifier;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v19] = OUTLINED_FUNCTION_1_5();
  uint64_t v20 = OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable__name;
  swift_getKeyPath();
  OUTLINED_FUNCTION_33_0();
  *(void *)&v9[v20] = OUTLINED_FUNCTION_1_5();
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed] = a1;
  id v21 = a1;

  v24.receiver = v9;
  v24.super_class = (Class)type metadata accessor for CAFRemoteNotificationObservable();
  id v22 = objc_msgSendSuper2(&v24, sel_init);
  objc_msgSend(v21, sel_registerObserver_, v22);

  return v22;
}

uint64_t CAFRemoteNotificationObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFRemoteNotificationObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine31CAFRemoteNotificationObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFRemoteNotificationObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFRemoteNotificationObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFRemoteNotificationObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFRemoteNotificationObservable@<X0>(void *a1@<X8>)
{
  id result = CAFRemoteNotificationObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFRemoteNotificationObservable(void **a1)
{
  return CAFRemoteNotificationObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFRemoteNotificationObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFRemoteNotificationObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

{
  uint64_t vars8;

  swift_retain();
  swift_bridgeObjectRetain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleDescription:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t @objc CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateNotificationUserActions:)(uint64_t a1, void *a2)
{
  swift_retain();
  id v3 = a2;
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserAction:)()
{
  return swift_release();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateSymbolNameAndColor:)(uint64_t a1, void *a2)
{
  id v2 = a2;
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateDisplayPanelIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateDisplayZoneIdentifier:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateName:)()
{
  return CAFRemoteNotificationObservable.remoteNotificationService(_:didUpdateUserVisibleLabel:)();
}

uint64_t CAFRemoteNotificationObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFRemoteNotificationObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFRemoteNotificationObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

uint64_t sub_24943B258@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFRemoteNotificationObservable.userAction.getter();
  *a1 = result;
  return result;
}

uint64_t sub_24943B284(unsigned __int8 *a1)
{
  return CAFRemoteNotificationObservable.userAction.setter(*a1);
}

void sub_24943B2AC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24943B2CC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24943B2EC(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_notificationUserActions()
{
  return sel_notificationUserActions;
}

id key path getter for CAFRemoteNotification.notificationUserActions : CAFRemoteNotification@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_notificationUserActions);
  *a2 = result;
  return result;
}

char *keypath_get_selector_userAction()
{
  return sel_userAction;
}

id sub_24943B364@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_userAction);
  *a2 = (_BYTE)result;
  return result;
}

id sub_24943B398(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUserAction_, *a1);
}

char *keypath_get_selector_symbolNameAndColor()
{
  return sel_symbolNameAndColor;
}

id key path getter for CAFRemoteNotification.symbolNameAndColor : CAFRemoteNotification@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_symbolNameAndColor);
  *a2 = result;
  return result;
}

void sub_24943B3F8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24943B418(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

void sub_24943B438(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFRemoteNotificationObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFRemoteNotification(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFRemoteNotificationObservable()
{
  return lazy protocol witness table accessor for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable(&lazy protocol witness table cache variable for type CAFRemoteNotification and conformance CAFRemoteNotification, 255, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotification);
}

unint64_t type metadata accessor for CAFRemoteNotification()
{
  unint64_t result = lazy cache variable for type metadata for CAFRemoteNotification;
  if (!lazy cache variable for type metadata for CAFRemoteNotification)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFRemoteNotification);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFRemoteNotificationObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable(&lazy protocol witness table cache variable for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFRemoteNotificationObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFRemoteNotificationObservable and conformance CAFRemoteNotificationObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFRemoteNotificationObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFRemoteNotificationObservable);
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userVisibleLabel.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userVisibleDescription.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.notificationUserActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x110))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$notificationUserActions.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x118))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x120))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x128))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.userAction.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x130))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$userAction.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x138))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.symbolNameAndColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x140))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$symbolNameAndColor.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x148))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x150))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$displayPanelIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x158))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x160))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$displayZoneIdentifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x168))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x170))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x178))();
}

uint64_t dispatch thunk of CAFRemoteNotificationObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 392))();
}

uint64_t partial apply for closure #1 in CAFRemoteNotificationObservable.resetCachedDescription()()
{
  return CAFRemoteNotificationObservable.cachedDescription.setter(0, 0);
}

void OUTLINED_FUNCTION_5_10(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000001ALL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

id CAFSettingsSectionObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
}

uint64_t CAFSettingsSectionObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFSettingsSectionObservable.identifier.getter()
{
  return CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

uint64_t CAFSettingsSectionObservable.$identifier.getter()
{
  return CAFSettingsSectionObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__identifier, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.userVisibleSectionName.getter()
{
  return CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;
  uint64_t v4;

  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v3;
  OUTLINED_FUNCTION_49_0();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSettingsSectionObservable.$userVisibleSectionName.getter()
{
  return CAFSettingsSectionObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleSectionName, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.userVisibleFooter.getter()
{
  return CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

uint64_t CAFSettingsSectionObservable.$userVisibleFooter.getter()
{
  return CAFSettingsSectionObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleFooter, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.sortOrder.getter()
{
  unint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFSettingsSectionObservable.$sortOrder.getter()
{
  return CAFSettingsSectionObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__sortOrder, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.name.getter()
{
  return CAFSettingsSectionObservable.userVisibleSectionName.getter();
}

uint64_t CAFSettingsSectionObservable.$name.getter()
{
  return CAFSettingsSectionObservable.$identifier.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__name, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFSettingsSectionObservable.$identifier.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFSettingsSectionObservable._description.getter()
{
  id v1 = (void *)0xEE003E6465726574;
  uint64_t v24 = 0x73696765726E753CLL;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed);
  uint64_t v3 = 0x73696765726E753CLL;
  uint64_t v4 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForIdentifier))
  {
    uint64_t v3 = CAFSettingsSectionObservable.identifier.getter();
    uint64_t v4 = v5;
  }
  uint64_t v6 = 0x73696765726E753CLL;
  uint64_t v7 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForUserVisibleSectionName))
  {
    CAFSettingsSectionObservable.userVisibleSectionName.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v6 = String.init<A>(describing:)();
    uint64_t v7 = v8;
  }
  uint64_t v9 = 0x73696765726E753CLL;
  uint64_t v10 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v2, sel_registeredForUserVisibleFooter))
  {
    CAFSettingsSectionObservable.userVisibleFooter.getter();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for String?);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v10 = v11;
  }
  if (objc_msgSend(v2, sel_registeredForSortOrder))
  {
    CAFSettingsSectionObservable.sortOrder.getter();
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    id v1 = v12;
  }
  _StringGuts.grow(_:)(119);
  v13._countAndFlagsBits = 0xD00000000000001FLL;
  v13._object = (void *)0x800000024948A7A0;
  String.append(_:)(v13);
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x746E656469207B20;
  v14._object = (void *)0xEF203A7265696669;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v3;
  v15._object = v4;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0xD00000000000001ALL;
  v16._object = (void *)0x800000024948A7C0;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v6;
  v17._object = v7;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x800000024948A7E0;
  v18._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v18);
  v19._countAndFlagsBits = v9;
  v19._object = v10;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x724F74726F73202CLL;
  v20._object = (void *)0xED0000203A726564;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v24;
  v21._object = v1;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 4095264;
  v22._object = (void *)0xE300000000000000;
  String.append(_:)(v22);
  return 0;
}

uint64_t CAFSettingsSectionObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    CAFSettingsSectionObservable._description.getter();
    swift_bridgeObjectRetain();
    uint64_t v4 = OUTLINED_FUNCTION_93();
    CAFSettingsSectionObservable.cachedDescription.setter(v4, v5);
    uint64_t v3 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v3 + 4);
  swift_release();
  return OUTLINED_FUNCTION_93();
}

id CAFSettingsSectionObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFSettingsSectionObservable.init(_:)(a1);
}

id CAFSettingsSectionObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__identifier;
  uint64_t KeyPath = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, String>);
  swift_allocObject();
  uint64_t v9 = v2;
  *(void *)&v2[v7] = specialized SafePublished.init(observedValuekeypath:)(KeyPath);
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleSectionName;
  uint64_t v11 = swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, String?>);
  swift_allocObject();
  *(void *)&v9[v10] = specialized SafePublished.init(observedValuekeypath:)(v11);
  uint64_t v12 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__userVisibleFooter;
  uint64_t v13 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v12] = specialized SafePublished.init(observedValuekeypath:)(v13);
  uint64_t v14 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__sortOrder;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFSettingsSectionObservable, UInt8>);
  swift_allocObject();
  specialized SafePublished.init(observedValuekeypath:)();
  *(void *)&v9[v14] = v15;
  uint64_t v16 = OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable__name;
  uint64_t v17 = swift_getKeyPath();
  swift_allocObject();
  *(void *)&v9[v16] = specialized SafePublished.init(observedValuekeypath:)(v17);
  *(void *)&v9[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed] = a1;
  id v18 = a1;

  v21.receiver = v9;
  v21.super_class = (Class)type metadata accessor for CAFSettingsSectionObservable();
  id v19 = objc_msgSendSuper2(&v21, sel_init);
  objc_msgSend(v18, sel_registerObserver_, v19);

  return v19;
}

uint64_t CAFSettingsSectionObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFSettingsSectionObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine28CAFSettingsSectionObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFSettingsSectionObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFSettingsSectionObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFSettingsSectionObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFSettingsSectionObservable@<X0>(void *a1@<X8>)
{
  id result = CAFSettingsSectionObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFSettingsSectionObservable(void **a1)
{
  return CAFSettingsSectionObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFSettingsSectionObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFSettingsSectionObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_1_7();
  swift_retain();
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_1_7();
  swift_bridgeObjectRetain();
  swift_retain();
  OUTLINED_FUNCTION_93();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleFooter:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)();
}

uint64_t @objc CAFSettingsSectionObservable.settingsSectionService(_:didUpdateUserVisibleSectionName:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  if (a4) {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateSortOrder:)()
{
  swift_retain();
  specialized SafeReadOnlyPublished.value.setter();

  return swift_release();
}

uint64_t CAFSettingsSectionObservable.settingsSectionService(_:didUpdateName:)()
{
  return CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)();
}

uint64_t @objc CAFSettingsSectionObservable.settingsSectionService(_:didUpdateIdentifier:)(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void))
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v8 = a3;
  id v9 = a1;
  a5();

  return swift_bridgeObjectRelease();
}

uint64_t CAFSettingsSectionObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFSettingsSectionObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFSettingsSectionObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void sub_24943CB3C(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_userVisibleSectionName()
{
  return sel_userVisibleSectionName;
}

void sub_24943CB68(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

char *keypath_get_selector_userVisibleFooter()
{
  return sel_userVisibleFooter;
}

void sub_24943CB94(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

id sub_24943CBB4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sortOrder);
  *a2 = (_BYTE)result;
  return result;
}

void sub_24943CBE8(id *a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t type metadata accessor for CAFSettingsSectionObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFSettingsSection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable);
}

uint64_t associated type witness table accessor for CAFObservable.Observed : CAFObserved in CAFSettingsSectionObservable()
{
  return lazy protocol witness table accessor for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable(&lazy protocol witness table cache variable for type CAFSettingsSection and conformance CAFSettingsSection, 255, (void (*)(uint64_t))type metadata accessor for CAFSettingsSection);
}

unint64_t type metadata accessor for CAFSettingsSection()
{
  unint64_t result = lazy cache variable for type metadata for CAFSettingsSection;
  if (!lazy cache variable for type metadata for CAFSettingsSection)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CAFSettingsSection);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFSettingsSectionObservable(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable, a2, (void (*)(uint64_t))type metadata accessor for CAFSettingsSectionObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSettingsSectionObservable and conformance CAFSettingsSectionObservable(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFSettingsSectionObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFSettingsSectionObservable);
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$identifier.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.userVisibleSectionName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$userVisibleSectionName.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.userVisibleFooter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$userVisibleFooter.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$sortOrder.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x100))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.$name.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0x108))();
}

uint64_t dispatch thunk of CAFSettingsSectionObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 280))();
}

uint64_t partial apply for closure #1 in CAFSettingsSectionObservable.resetCachedDescription()()
{
  return CAFSettingsSectionObservable.cachedDescription.setter(0, 0);
}

id CAFChargingRateObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
}

uint64_t CAFChargingRateObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t CAFChargingRateObservable.power.getter()
{
  return CAFChargingRateObservable.power.getter();
}

{
  uint64_t v0;
  id v1;
  void *v3;

  id v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  return swift_release();
}

uint64_t CAFChargingRateObservable.$power.getter()
{
  return CAFChargingRateObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFChargingRateObservable.chargingSpeed.getter()
{
  return CAFChargingRateObservable.power.getter();
}

uint64_t CAFChargingRateObservable.$chargingSpeed.getter()
{
  return CAFChargingRateObservable.$power.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed, (uint64_t (*)(uint64_t))specialized SafeReadOnlyPublished.projectedValue.getter);
}

uint64_t CAFChargingRateObservable.$power.getter(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v3 = swift_retain();
  uint64_t v4 = a2(v3);
  swift_release();
  return v4;
}

uint64_t CAFChargingRateObservable._description.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitPower>);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x270FA5388](v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed);
  uint64_t v7 = 0x73696765726E753CLL;
  id v8 = (void *)0xEE003E6465726574;
  if (objc_msgSend(v6, sel_registeredForPower))
  {
    CAFChargingRateObservable.power.getter();
    lazy protocol witness table accessor for type Measurement<NSUnitPower> and conformance Measurement<A>();
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    id v8 = v9;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  uint64_t v10 = (void *)0xEE003E6465726574;
  uint64_t v11 = 0x73696765726E753CLL;
  if (objc_msgSend(v6, sel_registeredForChargingSpeed))
  {
    CAFChargingRateObservable.chargingSpeed.getter();
    uint64_t v11 = String.init<A>(describing:)();
    uint64_t v10 = v12;
  }
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(64);
  v13._countAndFlagsBits = 0xD00000000000001CLL;
  v13._object = (void *)0x800000024948A870;
  String.append(_:)(v13);
  v20[1] = v0;
  _print_unlocked<A, B>(_:_:)();
  v14._countAndFlagsBits = 0x7265776F70207B20;
  v14._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v14);
  v15._countAndFlagsBits = v7;
  v15._object = v8;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x800000024948A890;
  v16._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v11;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 4095264;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  return v21;
}

uint64_t CAFChargingRateObservable.description.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock;
  uint64_t v2 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v2 + 4);
  swift_release();
  if (*(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription + 8))
  {
    uint64_t v3 = *(void *)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v3 = CAFChargingRateObservable._description.getter();
    uint64_t v6 = v5;
    swift_bridgeObjectRetain();
    CAFChargingRateObservable.cachedDescription.setter(v3, v6);
    uint64_t v4 = *(os_unfair_lock_s **)(v0 + v1);
  }
  swift_retain();
  os_unfair_lock_unlock(v4 + 4);
  swift_release();
  return v3;
}

id CAFChargingRateObservable.__allocating_init(_:)(void *a1)
{
  id v3 = objc_allocWithZone(v1);
  return CAFChargingRateObservable.init(_:)(a1);
}

id CAFChargingRateObservable.init(_:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescription];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  uint64_t v5 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ManagedBuffer<(), os_unfair_lock_s>);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)&v2[v5] = v6;
  uint64_t v7 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingRateObservable, Measurement<NSUnitPower>>);
  swift_allocObject();
  id v8 = v2;
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v2[v7] = v9;
  uint64_t v10 = OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed;
  swift_getKeyPath();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SafeReadOnlyPublished<CAFChargingRateObservable, Measurement<NSUnitSpeed>?>);
  swift_allocObject();
  specialized SafeReadOnlyPublished.init(observedValuekeypath:)();
  *(void *)&v8[v10] = v11;
  *(void *)&v8[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed] = a1;
  id v12 = a1;

  v15.receiver = v8;
  v15.super_class = (Class)type metadata accessor for CAFChargingRateObservable();
  id v13 = objc_msgSendSuper2(&v15, sel_init);
  objc_msgSend(v12, sel_registerObserver_, v13);

  return v13;
}

uint64_t CAFChargingRateObservable.resetCachedDescription()()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_cachedDescriptionLock);
  swift_retain();
  os_unfair_lock_lock(v1 + 4);
  partial apply for specialized closure #1 in OSAllocatedUnfairLock<A>.withLock<A>(_:)(v2);
  os_unfair_lock_unlock(v1 + 4);
  return swift_release();
}

id CAFChargingRateObservable.__deallocating_deinit()
{
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable_observed], sel_unregisterObserver_, v0);
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CAFChargingRateObservable();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

id CAFChargingRateObservable.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void CAFChargingRateObservable.init()()
{
}

id protocol witness for CAFObservable.observed.getter in conformance CAFChargingRateObservable@<X0>(void *a1@<X8>)
{
  id result = CAFChargingRateObservable.observed.getter();
  *a1 = result;
  return result;
}

id protocol witness for CAFObservable.init(_:) in conformance CAFChargingRateObservable(void **a1)
{
  return CAFChargingRateObservable.__allocating_init(_:)(*a1);
}

uint64_t protocol witness for ObservableObject.objectWillChange.getter in conformance CAFChargingRateObservable@<X0>(uint64_t *a1@<X8>)
{
  type metadata accessor for CAFChargingRateObservable();
  uint64_t result = ObservableObject<>.objectWillChange.getter();
  *a1 = result;
  return result;
}

uint64_t CAFChargingRateObservable.chargingRateService(_:didUpdatePower:)(uint64_t a1, uint64_t a2)
{
  return CAFChargingRateObservable.chargingRateService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__power, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFChargingRateObservable.chargingRateService(_:didUpdateChargingSpeed:)(uint64_t a1, uint64_t a2)
{
  return CAFChargingRateObservable.chargingRateService(_:didUpdatePower:)(a1, a2, (uint64_t)&OBJC_IVAR____TtC10CAFCombine25CAFChargingRateObservable__chargingSpeed, (void (*)(uint64_t))specialized SafeReadOnlyPublished.setValue(_:));
}

uint64_t CAFChargingRateObservable.chargingRateService(_:didUpdatePower:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  swift_retain();
  a4(a2);

  return swift_release();
}

uint64_t CAFChargingRateObservable.serviceDidUpdate(_:characteristic:fromGroupUpdate:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = CAFChargingRateObservable.resetCachedDescription()();
  if ((a3 & 1) == 0)
  {
    return specialized CAFObservable.notifyChange()(result);
  }
  return result;
}

uint64_t CAFChargingRateObservable.serviceDidUpdate(_:receivedAllValues:)(uint64_t a1, char a2)
{
  if (a2) {
    return specialized CAFObservable.notifyChange()();
  }
  return result;
}

void key path getter for CAFChargingRate.power : CAFChargingRate(id *a1)
{
  id v1 = objc_msgSend(*a1, sel_power);
  type metadata accessor for CAFTemperature(0, (unint64_t *)&lazy cache variable for type metadata for NSUnitPower);
  static Measurement._unconditionallyBridgeFromObjectiveC(_:)();
}

char *keypath_get_selector_chargingSpeed()
{
  return sel_chargingSpeed;
}

uint64_t key path getter for CAFChargingRate.chargingSpeed : CAFChargingRate@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = objc_msgSend(*a1, sel_chargingSpeed);
  if (v3)
  {
    uint64_t v4 = v3;
    type metadata accessor for CAFTemperature(0, &lazy cache variable for type metadata for NSUnitSpeed);
    static Measurement._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Measurement<NSUnitSpeed>);

  return __swift_storeEnumTagSinglePayload(a2, v5, 1, v6);
}

uint64_t type metadata accessor for CAFChargingRateObservable()
{
  return self;
}

uint64_t associated type witness table accessor for CAFObserved.Observable : CAFObservable in CAFChargingRate()
{
  return lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable(&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable);
}

unint64_t lazy protocol witness table accessor for type CAFChargingRate and conformance CAFChargingRate()
{
  unint64_t result = lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate;
  if (!lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate)
  {
    type metadata accessor for CAFTemperature(255, &lazy cache variable for type metadata for CAFChargingRate);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CAFChargingRate and conformance CAFChargingRate);
  }
  return result;
}

uint64_t instantiation function for generic protocol witness table for CAFChargingRateObservable(uint64_t a1)
{
  uint64_t result = lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable((unint64_t *)&lazy protocol witness table cache variable for type CAFChargingRateObservable and conformance CAFChargingRateObservable);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFChargingRateObservable and conformance CAFChargingRateObservable(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFChargingRateObservable();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t method lookup function for CAFChargingRateObservable(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x270FA04D0](a1, a2, &nominal type descriptor for CAFChargingRateObservable);
}

uint64_t dispatch thunk of CAFChargingRateObservable.power.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.$power.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB0))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.chargingSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xB8))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.$chargingSpeed.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x263F8EED0] & *v0) + 0xC0))();
}

uint64_t dispatch thunk of CAFChargingRateObservable.__allocating_init(_:)()
{
  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t outlined destroy of Measurement<NSUnitSpeed>?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Measurement<NSUnitSpeed>?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in CAFChargingRateObservable.resetCachedDescription()()
{
  return CAFChargingRateObservable.cachedDescription.setter(0, 0);
}

uint64_t static CAFTargetSpeedState.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFTargetSpeedState.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFTargetSpeedState.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFTargetSpeedState.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFTargetSpeedState.description.getter()
{
  id v0 = (id)NSStringFromTargetSpeedState();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t instantiation function for generic protocol witness table for CAFTargetSpeedState(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState);
  a1[2] = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState);
  uint64_t result = lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(&lazy protocol witness table cache variable for type CAFTargetSpeedState and conformance CAFTargetSpeedState);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFTargetSpeedState and conformance CAFTargetSpeedState(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFTargetSpeedState(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFTargetSpeedState()
{
  return CAFTargetSpeedState.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFTargetSpeedState] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFTargetSpeedState]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFTargetSpeedState] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFTargetSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFTargetSpeedState.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFTargetSpeedState@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static CAFSettingProminenceLevel.allCases.getter()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static CAFSettingProminenceLevel.allCases.setter(uint64_t a1)
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CAFSettingProminenceLevel.allCases = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static CAFSettingProminenceLevel.allCases.modify())()
{
  if (one-time initialization token for allCases != -1) {
    swift_once();
  }
  swift_beginAccess();
  return static CAFLockState.allCases.modify;
}

uint64_t CAFSettingProminenceLevel.description.getter()
{
  id v0 = (id)NSStringFromSettingProminenceLevel();
  if (!v0) {
    return 0x6E776F6E6B6E7528;
  }
  id v1 = v0;
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

id CAFSettingProminenceLevel.hasAppHomeTile.getter(uint64_t a1)
{
  return objc_msgSend(self, sel_bitmask_hasOption_, a1, 1);
}

uint64_t instantiation function for generic protocol witness table for CAFSettingProminenceLevel(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel);
  a1[2] = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel);
  uint64_t result = lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(&lazy protocol witness table cache variable for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel);
  a1[3] = result;
  return result;
}

uint64_t lazy protocol witness table accessor for type CAFSettingProminenceLevel and conformance CAFSettingProminenceLevel(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CAFSettingProminenceLevel(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CAFSettingProminenceLevel()
{
  return CAFSettingProminenceLevel.description.getter();
}

unint64_t lazy protocol witness table accessor for type [CAFSettingProminenceLevel] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A];
  if (!lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CAFSettingProminenceLevel]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CAFSettingProminenceLevel] and conformance [A]);
  }
  return result;
}

uint64_t protocol witness for static CaseIterable.allCases.getter in conformance CAFSettingProminenceLevel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static CAFSettingProminenceLevel.allCases.getter();
  *a1 = result;
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance CAFSettingProminenceLevel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized CAFEnum.id.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

id CAFTypeTestWithStatesObservable.observed.getter()
{
  return *(id *)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
}

uint64_t CAFTypeTestWithStatesObservable.cachedDescription.setter(uint64_t a1, uint64_t a2)
{
  id v3 = (void *)(v2 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_cachedDescription);
  void *v3 = a1;
  v3[1] = a2;
  return swift_bridgeObjectRelease();
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testBool : CAFTypeTestWithStatesObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testBool.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testBool : CAFTypeTestWithStatesObservable(unsigned __int8 *a1)
{
  return CAFTypeTestWithStatesObservable.testBool.setter(*a1);
}

uint64_t CAFTypeTestWithStatesObservable.testBool.getter()
{
  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  id v1 = v0;
  uint64_t v2 = (void (*)(id *, void))OUTLINED_FUNCTION_49_1();
  uint64_t v4 = *v3;
  v2(v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.testBool.setter(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  id v5 = v1;

  return specialized static SafePublished.subscript.setter(a1, v5, KeyPath, v4);
}

void (*CAFTypeTestWithStatesObservable.testBool.modify())(uint64_t a1)
{
  id v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  uint64_t v7 = OUTLINED_FUNCTION_5_1();
  v8(v7);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  return CAFTypeTestWithStatesObservable.testBool.modify;
}

void CAFTypeTestWithStatesObservable.testBool.modify(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  specialized static SafePublished.subscript.setter(*(unsigned __int8 *)(*(void *)a1 + 88), *(id *)(*(void *)a1 + 64), *(void *)(*(void *)a1 + 72), *(void *)(*(void *)a1 + 80));

  free(v1);
}

uint64_t CAFTypeTestWithStatesObservable.$testBool.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testBool, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testUInt8.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testUInt8.setter);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt8.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.getter();
}

{
  uint64_t v0;
  id v1;
  unsigned __int8 *v2;
  int v3;
  int v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  uint64_t v7 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v7;
  OUTLINED_FUNCTION_73_0();
  id v3 = *v2;
  id v4 = v2[1];
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | (v4 << 8);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt8.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestWithStatesObservable.testUInt8.modify()
{
  OUTLINED_FUNCTION_82();
  id v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt8.modify();
}

{
  void (*v0)(void, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned __int8 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 89) << 8), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt8.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testUInt16.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testUInt16.setter);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt16.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.getter();
}

{
  uint64_t v0;
  id v1;
  unsigned __int16 *v2;
  int v3;
  int v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  char v7 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  swift_retain();
  uint64_t v1 = v7;
  OUTLINED_FUNCTION_73_0();
  id v3 = *v2;
  id v4 = *((unsigned __int8 *)v2 + 2);
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | (v4 << 16);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt16.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  OUTLINED_FUNCTION_76_0();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestWithStatesObservable.testUInt16.modify()
{
  OUTLINED_FUNCTION_82();
  id v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt16.modify();
}

{
  void (*v0)(void, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned __int16 *)(v2 + 88) | (*(unsigned __int8 *)(v1 + 90) << 16), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt16.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestWithStatesObservable.testUInt32.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestWithStatesObservable.testUInt32.setter);
}

unint64_t CAFTypeTestWithStatesObservable.testUInt32.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

{
  void *v0;
  id v1;
  unsigned int *v2;
  uint64_t v3;
  unsigned __int8 v4;
  void (*v5)(void);
  void *v7;

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_49_1();
  id v3 = *v2;
  id v4 = *((unsigned char *)v2 + 4);
  OUTLINED_FUNCTION_48_1();
  v5();
  swift_release();
  swift_release();

  return v3 | ((unint64_t)v4 << 32);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt32.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  swift_getKeyPath();
  OUTLINED_FUNCTION_80_0();
  uint64_t v1 = v0;
  OUTLINED_FUNCTION_55_0();

  return v2();
}

void CAFTypeTestWithStatesObservable.testUInt32.modify()
{
  OUTLINED_FUNCTION_82();
  id v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt32.modify();
}

{
  void (*v0)(unint64_t, id, void, void);
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  OUTLINED_FUNCTION_81_0();
  OUTLINED_FUNCTION_60_0();
  v0(*(unsigned int *)(v2 + 88) | ((unint64_t)*(unsigned __int8 *)(v1 + 92) << 32), *(id *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80));
  OUTLINED_FUNCTION_67_0();
  free(v3);
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt32.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testUInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testUInt64.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt64 : CAFTypeTestWithStatesObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CAFTypeTestWithStatesObservable.testUInt64.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8), a3, a4, a5, a6, a7, a8, v9);
}

uint64_t CAFTypeTestWithStatesObservable.testUInt64.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt64.getter();
}

{
  void *v0;
  id v1;
  void (*v2)(id *, void);
  uint64_t *v3;
  uint64_t v4;
  id v6[5];

  OUTLINED_FUNCTION_116();
  OUTLINED_FUNCTION_51_0();
  OUTLINED_FUNCTION_50_0();
  swift_retain();
  uint64_t v1 = v0;
  uint64_t v2 = (void (*)(id *, void))OUTLINED_FUNCTION_49_1();
  id v4 = *v3;
  v2(v6, 0);
  swift_release();
  swift_release();

  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.testUInt64.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestWithStatesObservable.testUInt64.setter(a1, a2, (uint64_t)&unk_24947A2C0, (uint64_t)&unk_24947A2E8, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  OUTLINED_FUNCTION_81_0();
  uint64_t v21 = v10;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = v9;
  OUTLINED_FUNCTION_67_0();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19, a9, v21);
}

void CAFTypeTestWithStatesObservable.testUInt64.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = malloc(0x68uLL);
  OUTLINED_FUNCTION_71_0((uint64_t)v3);
  *(void *)(v1 + 88) = swift_getKeyPath();
  *(void *)(v1 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_70_0(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestWithStatesObservable.testUInt64.modify(uint64_t a1, uint64_t a2)
{
}

uint64_t CAFTypeTestWithStatesObservable.$testUInt64.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testUInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testInt8 : CAFTypeTestWithStatesObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testInt8.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testInt8 : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testInt8.setter);
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (a1[1] << 8));
}

uint64_t CAFTypeTestWithStatesObservable.testInt8.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt8.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.setter();
}

void CAFTypeTestWithStatesObservable.testInt8.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt8.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt8.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt8, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testInt16 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testInt16.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testInt16 : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testInt16.setter);
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5(*a1 | (*((unsigned __int8 *)a1 + 2) << 16));
}

uint64_t CAFTypeTestWithStatesObservable.testInt16.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt16.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.setter();
}

void CAFTypeTestWithStatesObservable.testInt16.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt16.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt16.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt16, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testInt32 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestWithStatesObservable.testInt32.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testInt32 : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestWithStatesObservable.testInt32.setter);
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32));
}

unint64_t CAFTypeTestWithStatesObservable.testInt32.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt32.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.setter();
}

void CAFTypeTestWithStatesObservable.testInt32.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt32.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testInt32.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt32, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testInt64 : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testInt64.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testInt64 : CAFTypeTestWithStatesObservable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return CAFTypeTestWithStatesObservable.testInt64.setter(*(void *)a1, *(unsigned __int8 *)(a1 + 8), a3, a4, a5, a6, a7, a8, v9);
}

uint64_t CAFTypeTestWithStatesObservable.testInt64.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt64.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testInt64.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestWithStatesObservable.testUInt64.setter(a1, a2, (uint64_t)&unk_24947A3E0, (uint64_t)&unk_24947A408, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

void CAFTypeTestWithStatesObservable.testInt64.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = malloc(0x68uLL);
  OUTLINED_FUNCTION_71_0((uint64_t)v3);
  *(void *)(v1 + 88) = swift_getKeyPath();
  *(void *)(v1 + 96) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_70_0(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  uint64_t v6 = *v5;
  char v7 = *((unsigned char *)v5 + 8);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(void *)(v1 + 56) = v6;
  *(unsigned char *)(v1 + 64) = v7;
  OUTLINED_FUNCTION_81();
}

void CAFTypeTestWithStatesObservable.testInt64.modify(uint64_t a1, uint64_t a2)
{
}

void CAFTypeTestWithStatesObservable.testUInt64.modify(uint64_t a1, uint64_t a2, void (*a3)(void, void, id, void, void))
{
  char v3 = *(void **)a1;
  a3(*(void *)(*(void *)a1 + 56), *(unsigned __int8 *)(*(void *)a1 + 64), *(id *)(*(void *)a1 + 80), *(void *)(*(void *)a1 + 88), *(void *)(*(void *)a1 + 96));

  free(v3);
}

uint64_t CAFTypeTestWithStatesObservable.$testInt64.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testInt64, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

unint64_t key path getter for CAFTypeTestWithStatesObservable.testFloat : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  unint64_t result = CAFTypeTestWithStatesObservable.testFloat.getter();
  *(_DWORD *)a1 = result;
  *(unsigned char *)(a1 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testFloat : CAFTypeTestWithStatesObservable(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt32 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(unint64_t))CAFTypeTestWithStatesObservable.testFloat.setter);
}

unint64_t CAFTypeTestWithStatesObservable.testFloat.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testFloat.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt32.setter();
}

void CAFTypeTestWithStatesObservable.testFloat.modify()
{
  OUTLINED_FUNCTION_82();
  char v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  int v6 = *v5;
  char v7 = *((unsigned char *)v5 + 4);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_DWORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 92) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt32.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testFloat.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testFloat, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testString : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testString.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testString : CAFTypeTestWithStatesObservable(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  swift_bridgeObjectRetain();
  return CAFTypeTestWithStatesObservable.testString.setter(v1, v2, v3, v4, v5, v6, v7, v8, v10);
}

uint64_t CAFTypeTestWithStatesObservable.testString.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return OUTLINED_FUNCTION_83_0();
}

uint64_t CAFTypeTestWithStatesObservable.testString.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestWithStatesObservable.testString.setter(a1, a2, (uint64_t)&unk_24947A470, (uint64_t)&unk_24947A498, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

{
  void *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  OUTLINED_FUNCTION_81_0();
  uint64_t v21 = v10;
  swift_getKeyPath();
  swift_getKeyPath();
  uint64_t v11 = v9;
  OUTLINED_FUNCTION_67_0();
  return v17(v12, v13, v14, v15, v16, v17, v18, v19, a9, v21);
}

uint64_t (*CAFTypeTestWithStatesObservable.testString.modify(void *a1))()
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_83_0();
  void *v3 = specialized static SafePublished.subscript.getter(v4, v5, v6);
  v3[1] = v7;
  return CAFTypeTestWithStatesObservable.testString.modify;
}

#error "24943FFA8: call analysis failed (funcsize=30)"

uint64_t CAFTypeTestWithStatesObservable.$testString.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testString, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testData : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testData.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testData : CAFTypeTestWithStatesObservable(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = a1[1];
  outlined copy of Data?(*a1, v2);
  return CAFTypeTestWithStatesObservable.testData.setter(v1, v2, v3, v4, v5, v6, v7, v8, v10);
}

uint64_t CAFTypeTestWithStatesObservable.testData.getter()
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  specialized static SafePublished.subscript.getter(v0, KeyPath, v2);
  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.testData.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return CAFTypeTestWithStatesObservable.testString.setter(a1, a2, (uint64_t)&unk_24947A4B8, (uint64_t)&unk_24947A4E0, (uint64_t)specialized static SafePublished.subscript.setter, a6, a7, a8, a9);
}

uint64_t (*CAFTypeTestWithStatesObservable.testData.modify(void *a1))(int, int, int, int, int, int, int, int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)
{
  uint64_t v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[2] = v1;
  v3[3] = swift_getKeyPath();
  v3[4] = swift_getKeyPath();
  uint64_t v4 = OUTLINED_FUNCTION_83_0();
  specialized static SafePublished.subscript.getter(v4, v5, v6);
  return CAFTypeTestWithStatesObservable.testData.modify;
}

#error "249440264: call analysis failed (funcsize=32)"

uint64_t CAFTypeTestWithStatesObservable.$testData.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t CAFTypeTestWithStatesObservable.testRawData.getter()
{
  uint64_t v3 = *(void **)(v0 + OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  swift_retain();
  id v1 = v3;
  swift_getAtKeyPath();

  swift_release();
  swift_release();
  return v4;
}

uint64_t CAFTypeTestWithStatesObservable.$testRawData.getter()
{
  return CAFTypeTestWithStatesObservable.$testRawData.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testRawData, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testEnum : CAFTypeTestWithStatesObservable@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testEnum.getter();
  *a1 = result;
  a1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testEnum : CAFTypeTestWithStatesObservable(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt8 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testEnum.setter);
}

uint64_t CAFTypeTestWithStatesObservable.testEnum.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testEnum.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt8.setter();
}

void CAFTypeTestWithStatesObservable.testEnum.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  char v6 = *v5;
  char v7 = v5[1];
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(unsigned char *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 89) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt8.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testEnum.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testEnum, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testDimensionUnitRawValue : CAFTypeTestWithStatesObservable@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter();
  *(_WORD *)a1 = result;
  *(unsigned char *)(a1 + 2) = BYTE2(result) & 1;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testDimensionUnitRawValue : CAFTypeTestWithStatesObservable(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return key path setter for CAFTypeTestWithStatesObservable.testUInt16 : CAFTypeTestWithStatesObservable(a1, a2, a3, a4, (uint64_t (*)(void))CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.setter);
}

uint64_t CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.getter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.getter();
}

uint64_t CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.setter()
{
  return CAFTypeTestWithStatesObservable.testUInt16.setter();
}

void CAFTypeTestWithStatesObservable.testDimensionUnitRawValue.modify()
{
  OUTLINED_FUNCTION_82();
  uint64_t v3 = OUTLINED_FUNCTION_15_3();
  OUTLINED_FUNCTION_9_2((uint64_t)v3);
  *(void *)(v1 + 72) = swift_getKeyPath();
  *(void *)(v1 + 80) = swift_getKeyPath();
  OUTLINED_FUNCTION_6_6();
  OUTLINED_FUNCTION_22_1();
  OUTLINED_FUNCTION_6_1(OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable_observed);
  swift_retain();
  id v4 = v2;
  OUTLINED_FUNCTION_8_6();
  __int16 v6 = *v5;
  char v7 = *((unsigned char *)v5 + 2);
  uint64_t v8 = OUTLINED_FUNCTION_5_1();
  v9(v8);
  swift_release();
  swift_release();

  *(_WORD *)(v1 + 88) = v6;
  *(unsigned char *)(v1 + 90) = v7;
  OUTLINED_FUNCTION_81();
}

{
  CAFTypeTestWithStatesObservable.testUInt16.modify();
}

uint64_t CAFTypeTestWithStatesObservable.$testDimensionUnitRawValue.getter()
{
  return CAFTypeTestWithStatesObservable.$testBool.getter((uint64_t)&OBJC_IVAR____TtC10CAFCombine31CAFTypeTestWithStatesObservable__testDimensionUnitRawValue, (uint64_t (*)(uint64_t))specialized SafePublished.projectedValue.getter);
}

uint64_t key path getter for CAFTypeTestWithStatesObservable.testComplexItem : CAFTypeTestWithStatesObservable@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CAFTypeTestWithStatesObservable.testComplexItem.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for CAFTypeTestWithStatesObservable.testComplexItem : CAFTypeTestWithStatesObservable(id *a1)
{
  id v1 = *a1;
  return CAFTypeTestWithStatesObservable.testComplexItem.setter();
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItem.getter()
{
  return CAFTypeTestWithStatesObservable.testComplexItem.getter();
}

{
  uint64_t (*v0)(uint64_t);
  uint64_t v1;
  uint64_t v2;

  OUTLINED_FUNCTION_61_0();
  swift_getKeyPath();
  swift_getKeyPath();
  id v1 = OUTLINED_FUNCTION_83_0();
  uint64_t v2 = v0(v1);
  swift_release();
  swift_release();
  return v2;
}

uint64_t CAFTypeTestWithStatesObservable.testComplexItem.setter()
{
  return CAFTypeTestWithStatesObservable.testComplexItem.setter();
}

{
  void *v0;
  id v1;
  uint64_t (*v2)(void);
  uint64_t vars8;

  swift_getKeyPath();
  OUTLINED_FUNCTION_80_0();
  id v1 = v0;
  OUTLINED_FUNCTION_54_0();

  return v2();
}

void (*CAFTypeTestWithStatesObservable.testComplexItem.modify(uint64_t a1))(uint64_t a1, char a2)
{
  OUTLINED_FUNCTION_17_3(a1);
  uint64_t KeyPath = swift_getKeyPath();
  OUTLINED_FUNCTION_18_3(KeyPath);
  uint64_t v3 = swift_getKeyPath();
  *id v1 = OUTLINED_FUNCTION_76_1(v3);
  return CAFTypeTestWithStatesObservable.testComplexItem.modify;
}

void CAFTypeTestWithStatesObservable.testComplexItem.modify(uint64_t a1, char a2)
{
}

{
  void *v2;
  id v3;
  void (*v4)(void);
  id v5;
  void (*v6)(void);
  id v7;
  uint64_t vars8;

  uint64_t v2 = *(void **)(a1 + 8);
  if (a2)
  {
    char v7 = *(id *)a1;
    uint64_t v3 = v2;
    OUTLINED_FUNCTION_54_0();
    v4();
  }
  else
  {
    uint64_t v5 = v2;
    OUTLINED_FUNCTION_54_0();
    v6();
  }
}