uint64_t one-time initialization function for defaultModelMetadata()
{
  uint64_t inited;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, [String : String])>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
  *(void *)(inited + 32) = 0xD000000000000025;
  *(void *)(inited + 40) = 0x80000001C9DA2580;
  *(void *)(inited + 48) = OUTLINED_FUNCTION_0();
  *(void *)(inited + 56) = 0xD000000000000029;
  *(void *)(inited + 64) = 0x80000001C9DA2510;
  *(void *)(inited + 72) = OUTLINED_FUNCTION_0();
  *(void *)(inited + 80) = 0xD000000000000031;
  *(void *)(inited + 88) = 0x80000001C9DA2540;
  *(void *)(inited + 96) = OUTLINED_FUNCTION_0();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]);
  result = Dictionary.init(dictionaryLiteral:)();
  static AssetMetadataProvider.defaultModelMetadata = result;
  return result;
}

uint64_t static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1F4188790](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  uint64_t v12 = MEMORY[0x1F4188790](v11 - 8);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  v16 = (char *)&v37 - v15;
  if (*(void *)(a3 + 16))
  {
    LOBYTE(v17) = static AssetMetadataProvider.getShadowLogField(for:using:)(a1, a2, a3);
    LODWORD(v38) = v17;
    static AssetMetadataProvider.getLocale(from:)(a3, (uint64_t)v16);
    uint64_t v18 = static AssetMetadataProvider.getModelVersion(for:using:)(a1, a2, a3);
    uint64_t v20 = v19;
    uint64_t v22 = v21;
    v37 = (uint8_t *)a4;
    uint64_t v24 = v23;
    outlined init with copy of Locale?((uint64_t)v16, (uint64_t)v14);
    uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 28)];
    uint64_t v26 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload(v25, 1, 1, v26);
    *(void *)v10 = a1;
    *((void *)v10 + 1) = a2;
    *((void *)v10 + 2) = v18;
    *((void *)v10 + 3) = v20;
    *((void *)v10 + 4) = v22;
    *((void *)v10 + 5) = v24;
    v10[48] = v38;
    swift_bridgeObjectRetain();
    outlined assign with take of Locale?((uint64_t)v14, v25);
    outlined init with take of CamModelMetadata((uint64_t)v10, (uint64_t)v37);
    return outlined destroy of Locale?((uint64_t)v16);
  }
  else
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v38 = v8;
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.common);
    swift_bridgeObjectRetain_n();
    v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = v16;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v40 = v33;
      *(_DWORD *)v31 = 136315138;
      v37 = v31 + 4;
      swift_bridgeObjectRetain();
      uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v29, v30, "%s: Model metadata is empty. Setting modelname alone", v31, 0xCu);
      swift_arrayDestroy();
      uint64_t v34 = v33;
      v16 = v32;
      MEMORY[0x1CB78E290](v34, -1, -1);
      MEMORY[0x1CB78E290](v31, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v35 = type metadata accessor for Locale();
    __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v35);
    uint64_t v36 = (uint64_t)&v10[*(int *)(v38 + 28)];
    __swift_storeEnumTagSinglePayload(v36, 1, 1, v35);
    *(void *)v10 = a1;
    *((void *)v10 + 1) = a2;
    *((void *)v10 + 2) = 0;
    *((void *)v10 + 3) = 0;
    *((void *)v10 + 4) = 0;
    *((void *)v10 + 5) = 1;
    v10[48] = 2;
    swift_bridgeObjectRetain();
    outlined assign with take of Locale?((uint64_t)v16, v36);
    return outlined init with take of CamModelMetadata((uint64_t)v10, a4);
  }
}

Swift::Bool_optional static AssetMetadataProvider.getShadowLogField(for:using:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)
    || (specialized __RawDictionaryStorage.find<A>(_:)(0x6F4C776F64616873, 0xE900000000000067), (v5 & 1) == 0))
  {
    if (one-time initialization token for defaultModelMetadata != -1) {
      swift_once();
    }
    uint64_t v6 = static AssetMetadataProvider.defaultModelMetadata;
    if (*(void *)(static AssetMetadataProvider.defaultModelMetadata + 16))
    {
      swift_bridgeObjectRetain();
      unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if (v8)
      {
        uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        specialized Dictionary.subscript.getter(0x6F4C776F64616873, 0xE900000000000067, v9);
        uint64_t v11 = v10;
        swift_bridgeObjectRelease();
        if (v11) {
          goto LABEL_9;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    return (Swift::Bool_optional)2;
  }
  swift_bridgeObjectRetain();
LABEL_9:
  Swift::String v12 = String.lowercased()();
  swift_bridgeObjectRelease();
  uint64_t countAndFlagsBits = v12._countAndFlagsBits;
  object = v12._object;
  return Bool.init(_:)(*(Swift::String *)&countAndFlagsBits);
}

uint64_t static AssetMetadataProvider.getLocale(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = specialized Dictionary.subscript.getter(0x656C61636F6CLL, 0xE600000000000000, a1);
  if (v9)
  {
    uint64_t v10 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFLL;
    }
    if (v10)
    {
      Locale.init(identifier:)();
      v17[4] = Locale.identifier.getter();
      v17[5] = v11;
      v17[2] = 45;
      v17[3] = 0xE100000000000000;
      v17[0] = 95;
      v17[1] = 0xE100000000000000;
      lazy protocol witness table accessor for type String and conformance String();
      StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
      swift_bridgeObjectRelease();
      Locale.init(identifier:)();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return __swift_storeEnumTagSinglePayload(a2, 0, 1, v4);
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.common);
  v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C9CFE000, v14, v15, "Locale not present in asset metadata", v16, 2u);
    MEMORY[0x1CB78E290](v16, -1, -1);
  }

  return __swift_storeEnumTagSinglePayload(a2, 1, 1, v4);
}

uint64_t static AssetMetadataProvider.getModelVersion(for:using:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  specialized Dictionary.subscript.getter(0x6E6F6973726576, 0xE700000000000000, a3);
  if (v5)
  {
    swift_bridgeObjectRetain();
    CamModelVersion.init(_:)();
    uint64_t v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.common);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      uint64_t v17 = v10;
      *(_DWORD *)uint64_t v9 = 136315394;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v11 = Dictionary.description.getter();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v7, v8, "%s: Version information not present in UAF asset metadata : %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v10, -1, -1);
      MEMORY[0x1CB78E290](v9, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v15;
}

uint64_t AssetMetadataProvider.__deallocating_deinit()
{
  return MEMORY[0x1F4186488](v0, 16, 7);
}

uint64_t type metadata accessor for AssetMetadataProvider()
{
  return self;
}

void type metadata accessor for RepetitionType(uint64_t a1)
{
}

void type metadata accessor for MLMultiArrayDataType(uint64_t a1)
{
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLMultiArrayDataType(uint64_t *a1, uint64_t *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

uint64_t protocol witness for SetAlgebra.init() in conformance NSJSONWritingOptions@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = specialized OptionSet<>.init()();
  *a1 = result;
  return result;
}

void protocol witness for RawRepresentable.init(rawValue:) in conformance MLMultiArrayDataType(uint64_t a1@<X8>)
{
  MLMultiArrayDataType.init(rawValue:)();
  *(void *)a1 = v2;
  *(unsigned char *)(a1 + 8) = v3 & 1;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance MLMultiArrayDataType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = destructiveProjectEnumData for FeatureDictionaryError(*v1);
  *a1 = result;
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContext2();
    *a1 = result;
  }
  return result;
}

uint64_t outlined init with copy of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t __swift_storeEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56))();
}

uint64_t outlined assign with take of Locale?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CamModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Locale?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(*(void *)(a1 - 8) + 82) & 2) != 0) {
    return *(void *)a2;
  }
  return a2;
}

void *protocol witness for OptionSet.init(rawValue:) in conformance NSJSONWritingOptions@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

void type metadata accessor for CAMSchemaCAMAction(uint64_t a1)
{
}

void type metadata accessor for CAMSchemaCAMFeature(uint64_t a1)
{
}

void type metadata accessor for RepetitionType(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4) {
      atomic_store(ForeignTypeMetadata, a2);
    }
  }
}

uint64_t OUTLINED_FUNCTION_0()
{
  return Dictionary.init(dictionaryLiteral:)();
}

void *initializeBufferWithCopyOfBuffer for CamInputFeatureExtractor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

uint64_t destroy for CamInputFeatureExtractor()
{
  return swift_release();
}

void *assignWithCopy for CamInputFeatureExtractor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

void *assignWithTake for CamInputFeatureExtractor(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamInputFeatureExtractor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamInputFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CamInputFeatureExtractor()
{
  return &type metadata for CamInputFeatureExtractor;
}

uint64_t static CamInputFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  uint64_t v0 = static ConstantStepFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return v0;
}

id CamInputFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.ambiguityHandling);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl(&dword_1C9CFE000, v6, v7, "Extracting CAM features", v8, 2u);
    MEMORY[0x1CB78E290](v8, -1, -1);
  }

  type metadata accessor for MLMultiArray();
  uint64_t v30 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v9 = specialized FeatureExtracting.extract(from:)(a2);
  if (v2) {
    return (id)swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_0_0(v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void **)(a1 + *(int *)(type metadata accessor for CamInput() + 32));
  if (!v11) {
    goto LABEL_15;
  }
  id v12 = v11;
  id v13 = objc_msgSend(v12, sel_recognition);
  if (v13)
  {
    uint64_t v14 = v13;
    id v15 = objc_msgSend(v12, sel_audioAnalytics);
    if (v15)
    {
      v16 = v15;
      uint64_t v17 = specialized FeatureExtracting.extract(from:)((uint64_t)v15);
      OUTLINED_FUNCTION_0_0(v17);
      swift_bridgeObjectRelease();
      id result = objc_msgSend(v14, sel_aceRecognition);
      if (result)
      {
        uint64_t v25 = result;
        uint64_t v26 = specialized FeatureExtracting.extract(from:)((uint64_t)result);

        OUTLINED_FUNCTION_0_0(v26);
        swift_bridgeObjectRelease();
        swift_retain();
        id result = objc_msgSend(v14, sel_aceRecognition);
        if (result)
        {
          v27 = result;
          uint64_t v28 = specialized FeatureExtracting.extract(from:)();
          swift_release();

          OUTLINED_FUNCTION_0_0(v28);
          swift_bridgeObjectRelease();
          goto LABEL_15;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    uint64_t v14 = v12;
  }

LABEL_15:
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    v29[0] = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v22 = Dictionary.Keys.description.getter();
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v18, v19, "Extracted CAM features: %s", v20, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v21, -1, -1);
    MEMORY[0x1CB78E290](v20, -1, -1);
  }

  swift_beginAccess();
  return (id)v30;
}

id protocol witness for FeatureExtracting.extractImpl(from:) in conformance CamInputFeatureExtractor(uint64_t a1)
{
  return CamInputFeatureExtractor.extractImpl(from:)(a1, *v1);
}

unint64_t type metadata accessor for MLMultiArray()
{
  unint64_t result = lazy cache variable for type metadata for MLMultiArray;
  if (!lazy cache variable for type metadata for MLMultiArray)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_0(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

uint64_t *LatticePathFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static LatticePathFeatureExtractor.extractedFeatures;
}

void one-time initialization function for extractedFeatures()
{
  static LatticePathFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static UserParseFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static PommesFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static WordEmbeddingFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static RankedActionFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static AsrSimpleFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static ConstantStepFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  if (one-time initialization token for CLIENT_TIME_RANGE != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static PersonalContextFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static SnrFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

{
  static DeviceContextFeatureExtractor.extractedFeatures = (uint64_t)&outlined read-only object #0 of one-time initialization function for extractedFeatures;
}

uint64_t LatticePathFeatureExtractor.extractImpl(from:)(void *a1)
{
  return LatticePathFeatureExtractor.getLatticePathFeatures(from:)(a1);
}

uint64_t LatticePathFeatureExtractor.getLatticePathFeatures(from:)(void *a1)
{
  unint64_t v5 = v1;
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  uint64_t v70 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v7 = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(a1);
  if (!v7) {
    goto LABEL_50;
  }
  unint64_t v8 = v7;
  uint64_t v67 = outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(a1, (SEL *)&selRef_phrases, &lazy cache variable for type metadata for SASPhrase);
  if (!v67)
  {
    swift_bridgeObjectRelease();
LABEL_50:
    swift_bridgeObjectRelease();
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.common);
    v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v49 = 0;
      _os_log_impl(&dword_1C9CFE000, v47, v48, "LatticePathFeature Extractor failed due to empty SASRecognition", v49, 2u);
      MEMORY[0x1CB78E290](v49, -1, -1);
    }

    lazy protocol witness table accessor for type CamError and conformance CamError();
    OUTLINED_FUNCTION_3();
    return OUTLINED_FUNCTION_0_1(v50, 0xD000000000000014);
  }
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v62 = swift_bridgeObjectRelease();
    if (v9 < 0)
    {
      __break(1u);
      goto LABEL_70;
    }
  }
  else
  {
    uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v63 = a1;
  if (!v9)
  {
    OUTLINED_FUNCTION_8();
LABEL_56:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v52 = swift_bridgeObjectRetain();
    id v53 = static MLMultiArray.make1DSetOrSequence(from:)(v52);
    if (!v5)
    {
      v54 = v53;
      swift_bridgeObjectRelease();
      id v55 = static MLMultiArray.make1DSetOrSequence(from:)((uint64_t)v2);
      swift_bridgeObjectRelease();
      id v56 = static MLMultiArray.make1DSetOrSequence(from:)(v69);
      swift_bridgeObjectRelease();
      id v57 = static MLMultiArray.make1DSetOrSequence(from:)((uint64_t)v3);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C9D9D120;
      *(void *)(inited + 32) = 0xD00000000000002CLL;
      *(void *)(inited + 40) = 0x80000001C9DA14E0;
      *(void *)(inited + 48) = v56;
      *(void *)(inited + 56) = 0xD00000000000002CLL;
      *(void *)(inited + 64) = 0x80000001C9DA1510;
      *(void *)(inited + 72) = v55;
      *(void *)(inited + 80) = 0xD00000000000002DLL;
      *(void *)(inited + 88) = 0x80000001C9DA1540;
      *(void *)(inited + 96) = v54;
      *(void *)(inited + 104) = 0xD00000000000002CLL;
      *(void *)(inited + 112) = 0x80000001C9DA1570;
      *(void *)(inited + 120) = v57;
      uint64_t v3 = v56;
      uint64_t v2 = v55;
      uint64_t v9 = v54;
      unint64_t v8 = (unint64_t)v57;
      uint64_t v59 = Dictionary.init(dictionaryLiteral:)();
      specialized Dictionary.update(other:allowDuplicateKeys:)(v59, 0);
      swift_bridgeObjectRelease();
      uint64_t v60 = swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = LatticePathFeatureExtractor.getTopLatticePathScoresFeatures(tokenConfidences:meanConfidences:)(v60);
      goto LABEL_65;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease_n();
  }
  unint64_t v10 = 0;
  unint64_t v66 = v8 & 0xC000000000000001;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  OUTLINED_FUNCTION_8();
  uint64_t v64 = v9;
  v65 = (void *)v8;
  while (v9 != v10)
  {
    if (v66) {
      id v13 = (id)MEMORY[0x1CB78D7C0](v10, v8);
    }
    else {
      id v13 = *(id *)(v8 + 8 * v10 + 32);
    }
    uint64_t v14 = v13;
    unint64_t v15 = v5;
    uint64_t v16 = LatticePathFeatureExtractor.getTokenConfidences(from:for:)(v67, v13);
    if (v5)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return swift_bridgeObjectRelease();
    }
    uint64_t v9 = v16;
    uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v68 = v14;
    unint64_t v8 = (unint64_t)a1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v11 = isUniquelyReferenced_nonNull_native;
    }
    unint64_t v18 = *(void *)(v11 + 16);
    unint64_t v17 = *(void *)(v11 + 24);
    if (v18 >= v17 >> 1)
    {
      OUTLINED_FUNCTION_1(v17);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v11 = isUniquelyReferenced_nonNull_native;
    }
    *(void *)(v11 + 16) = v18 + 1;
    *(void *)(v11 + 8 * v18 + 32) = v9;
    if (v10 > v18) {
      goto LABEL_61;
    }
    uint64_t v19 = v11 + 8 * v10;
    uint64_t v20 = specialized Sequence<>.max()(*(void *)(v19 + 32));
    if (v21)
    {
      uint64_t v22 = v69;
      uint64_t v9 = 0;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v9 = v20;
      uint64_t v22 = v69;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_19;
      }
    }
    OUTLINED_FUNCTION_2();
    uint64_t v22 = v35;
LABEL_19:
    unint64_t v5 = *(void *)(v22 + 16);
    unint64_t v23 = *(void *)(v22 + 24);
    uint64_t v69 = v22;
    if (v5 >= v23 >> 1)
    {
      OUTLINED_FUNCTION_1(v23);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v69 = v41;
    }
    *(void *)(v69 + 16) = v5 + 1;
    OUTLINED_FUNCTION_4(v69 + 8 * v5);
    if (v24) {
      goto LABEL_62;
    }
    uint64_t v25 = specialized Sequence<>.min()(*(void *)(v19 + 32));
    if (v26)
    {
      uint64_t v9 = 0x408F400000000000;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_24;
      }
    }
    else
    {
      uint64_t v9 = v25;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_24;
      }
    }
    OUTLINED_FUNCTION_7();
    uint64_t v2 = v36;
LABEL_24:
    unint64_t v5 = v2[2];
    if (v5 >= v2[3] >> 1)
    {
      OUTLINED_FUNCTION_5();
      uint64_t v2 = v42;
    }
    v2[2] = v5 + 1;
    OUTLINED_FUNCTION_4((uint64_t)&v2[v5]);
    if (v24) {
      goto LABEL_63;
    }
    uint64_t v27 = specialized Array<A>.avg()(*(void *)(v19 + 32));
    if (v28)
    {
      v29 = (void *)v8;
      uint64_t v9 = 0;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_29;
      }
    }
    else
    {
      uint64_t v9 = v27;
      v29 = (void *)v8;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_29;
      }
    }
    OUTLINED_FUNCTION_2();
    v29 = v37;
LABEL_29:
    unint64_t v5 = v29[2];
    unint64_t v30 = v29[3];
    unint64_t v8 = (unint64_t)v29;
    if (v5 >= v30 >> 1)
    {
      OUTLINED_FUNCTION_1(v30);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      unint64_t v8 = (unint64_t)v43;
    }
    *(void *)(v8 + 16) = v5 + 1;
    OUTLINED_FUNCTION_4(v8 + 8 * v5);
    if (v24) {
      goto LABEL_64;
    }
    uint64_t v31 = specialized Array<A>.variance()(*(void *)(v19 + 32));
    if (v32)
    {
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v33 = 0;
    }
    else
    {
      uint64_t v33 = v31;
      char v34 = swift_isUniquelyReferenced_nonNull_native();
    }
    unint64_t v5 = v15;
    if (v34)
    {
      uint64_t v38 = v3;
    }
    else
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v38 = v44;
    }
    unint64_t v40 = v38[2];
    unint64_t v39 = v38[3];
    if (v40 >= v39 >> 1)
    {
      OUTLINED_FUNCTION_1(v39);
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
      uint64_t v38 = v45;
    }
    ++v10;
    v38[2] = v40 + 1;
    uint64_t v3 = v38;
    v38[v40 + 4] = v33;

    uint64_t v9 = v64;
    a1 = (void *)v8;
    unint64_t v8 = (unint64_t)v65;
    if (v64 == v10) {
      goto LABEL_56;
    }
  }
  __break(1u);
LABEL_61:
  __break(1u);
LABEL_62:
  __break(1u);
LABEL_63:
  __break(1u);
LABEL_64:
  __break(1u);
LABEL_65:
  uint64_t v61 = isUniquelyReferenced_nonNull_native;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  specialized Dictionary.update(other:allowDuplicateKeys:)(v61, 0);
  if (v5)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v62 = LatticePathFeatureExtractor.getTopLatticePathLeadingSilenceFeature(recognition:)(v63);
  uint64_t v4 = 0;
LABEL_70:
  specialized Dictionary.update(other:allowDuplicateKeys:)(v62, 0);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  else {
    return v70;
  }
}

uint64_t specialized Sequence<>.min()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v5 < v2) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t specialized Array<A>.avg()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    double v3 = 0.0;
    do
    {
      double v4 = *(double *)(a1 + 32 + 8 * v2++);
      double v3 = v3 + v4;
    }
    while (v1 != v2);
    *(double *)&uint64_t result = v3 / (double)v1;
  }
  else
  {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t specialized Array<A>.variance()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = 0;
    double v3 = (double *)(a1 + 32);
    double v4 = 0.0;
    do
    {
      double v5 = v3[v2++];
      double v4 = v4 + v5;
    }
    while (v1 != v2);
    double v6 = v4 / (double)v1;
    double v7 = 0.0;
    uint64_t v8 = *(void *)(a1 + 16);
    do
    {
      double v9 = *v3++;
      double v7 = v7 + (v6 - v9) * (v6 - v9);
      --v8;
    }
    while (v8);
    *(double *)&uint64_t result = v7 / (double)v1;
  }
  else
  {
    *(double *)&uint64_t result = 0.0;
  }
  return result;
}

uint64_t LatticePathFeatureExtractor.getTopLatticePathScoresFeatures(tokenConfidences:meanConfidences:)(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v1 = type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    double v4 = (double)*(uint64_t *)(v3 + 16);
    swift_bridgeObjectRetain();
    uint64_t v5 = static MLMultiArray.makeScalar(from:)(v4);
    if (v2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      double v7 = (void *)v5;
      id v8 = static MLMultiArray.make1DSetOrSequence(from:)(v3);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C9D9D130;
      *(void *)(inited + 32) = 0xD00000000000002BLL;
      *(void *)(inited + 40) = 0x80000001C9DA15F0;
      *(void *)(inited + 48) = v7;
      *(void *)(inited + 56) = 0xD00000000000002CLL;
      *(void *)(inited + 64) = 0x80000001C9DA1620;
      *(void *)(inited + 72) = v8;
      id v11 = v7;
      uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
    }
  }
  else
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_0_1(v6, 0xD000000000000014);
  }
  return v1;
}

uint64_t LatticePathFeatureExtractor.getTokenConfidences(from:for:)(uint64_t a1, void *a2)
{
  uint64_t result = outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(a2, (SEL *)&selRef_interpretationIndices, &lazy cache variable for type metadata for NSNumber);
  if (result)
  {
    swift_bridgeObjectRetain();
    id v3 = specialized Zip2Sequence.Iterator.next()();
    if (v3)
    {
      uint64_t v5 = v3;
      uint64_t v6 = v4;
      uint64_t v7 = MEMORY[0x1E4FBC860];
      static Int._conditionallyBridgeFromObjectiveC(_:result:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CamError and conformance CamError();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_0_1(v9, 0xD000000000000022);
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    return v7;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t LatticePathFeatureExtractor.getTopLatticePathLeadingSilenceFeature(recognition:)(void *a1)
{
  uint64_t result = outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(a1, (SEL *)&selRef_phrases, &lazy cache variable for type metadata for SASPhrase);
  if (!result)
  {
    __break(1u);
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  uint64_t v5 = result;
  OUTLINED_FUNCTION_6();
  if (v7)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_41;
    }
  }
  else if (!*(void *)(v6 + 16))
  {
    goto LABEL_41;
  }
  uint64_t v8 = OUTLINED_FUNCTION_9();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v8, v9, v10);
  if (v2) {
    id v11 = (id)MEMORY[0x1CB78D7C0](0, v5);
  }
  else {
    id v11 = *(id *)(v5 + 32);
  }
  id v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(v12, (SEL *)&selRef_interpretations, &lazy cache variable for type metadata for SASInterpretation);
  if (!v13) {
    goto LABEL_42;
  }
  uint64_t v5 = v13;
  uint64_t result = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(a1);
  if (!result) {
    goto LABEL_46;
  }
  uint64_t v14 = result;
  OUTLINED_FUNCTION_6();
  if (v16)
  {
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_33;
    }
  }
  else if (!*(void *)(v15 + 16))
  {
    goto LABEL_33;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v14 & 0xC000000000000001) == 0, v14);
  if ((v14 & 0xC000000000000001) != 0) {
    id v17 = (id)MEMORY[0x1CB78D7C0](0, v14);
  }
  else {
    id v17 = *(id *)(v14 + 32);
  }
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  uint64_t result = outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(v18, (SEL *)&selRef_interpretationIndices, &lazy cache variable for type metadata for NSNumber);
  if (!result)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  uint64_t v19 = result;
  OUTLINED_FUNCTION_6();
  if (!v21)
  {
    if (*(void *)(v20 + 16)) {
      goto LABEL_15;
    }
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_41;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_33;
  }
LABEL_15:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v19 & 0xC000000000000001) == 0, v19);
  if ((v19 & 0xC000000000000001) != 0) {
    id v22 = (id)MEMORY[0x1CB78D7C0](0, v19);
  }
  else {
    id v22 = *(id *)(v19 + 32);
  }
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = Int.init(truncating:)();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v24, (v5 & 0xC000000000000001) == 0, v5);
  if ((v5 & 0xC000000000000001) != 0) {
    id v25 = (id)MEMORY[0x1CB78D7C0](v24, v5);
  }
  else {
    id v25 = *(id *)(v5 + 8 * v24 + 32);
  }
  char v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t result = outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(v26, (SEL *)&selRef_tokens, &lazy cache variable for type metadata for SASToken);
  if (result)
  {
    uint64_t v5 = result;
    OUTLINED_FUNCTION_6();
    if (v28)
    {
      if (_CocoaArrayWrapper.endIndex.getter()) {
        goto LABEL_22;
      }
    }
    else if (*(void *)(v27 + 16))
    {
LABEL_22:
      uint64_t v29 = OUTLINED_FUNCTION_9();
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v29, v30, v31);
      if (v26) {
        id v32 = (id)MEMORY[0x1CB78D7C0](0, v5);
      }
      else {
        id v32 = *(id *)(v5 + 32);
      }
      uint64_t v33 = v32;
      swift_bridgeObjectRelease();
      id v34 = objc_msgSend(v33, sel_startTime);

      if (v34)
      {
        uint64_t v5 = type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
        Double.init(truncating:)();
        uint64_t v36 = static MLMultiArray.makeScalar(from:)(v35);
        if (!v1)
        {
          v37 = (void *)v36;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
          uint64_t inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1C9D9D130;
          *(void *)(inited + 32) = 0xD00000000000002CLL;
          *(void *)(inited + 40) = 0x80000001C9DA15A0;
          *(void *)(inited + 48) = v37;
          *(void *)(inited + 56) = 0xD00000000000001BLL;
          *(void *)(inited + 64) = 0x80000001C9DA15D0;
          *(void *)(inited + 72) = v37;
          id v39 = v37;
          uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
        }

        return v5;
      }

LABEL_42:
      lazy protocol witness table accessor for type CamError and conformance CamError();
      OUTLINED_FUNCTION_3();
      OUTLINED_FUNCTION_0_1(v40, 0xD000000000000038);
      return v5;
    }

LABEL_41:
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
LABEL_48:
  __break(1u);
  return result;
}

uint64_t type metadata accessor for LatticePathFeatureExtractor()
{
  return self;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance LatticePathFeatureExtractor()
{
  LatticePathFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance LatticePathFeatureExtractor(void **a1)
{
  return LatticePathFeatureExtractor.extractImpl(from:)(*a1);
}

uint64_t outlined bridged method (pb) of @objc SASUtterance.interpretationIndices.getter(void *a1, SEL *a2, unint64_t *a3)
{
  id v4 = [a1 *a2];
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  type metadata accessor for MLMultiArray(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

uint64_t outlined bridged method (ob) of @objc SASInterpretation.tokens.getter(void *a1, SEL *a2, unint64_t *a3)
{
  id v5 = [a1 *a2];

  if (!v5) {
    return 0;
  }
  type metadata accessor for MLMultiArray(0, a3);
  uint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v6;
}

unint64_t lazy protocol witness table accessor for type CamError and conformance CamError()
{
  unint64_t result = lazy protocol witness table cache variable for type CamError and conformance CamError;
  if (!lazy protocol witness table cache variable for type CamError and conformance CamError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamError and conformance CamError);
  }
  return result;
}

uint64_t type metadata accessor for MLMultiArray(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    self;
    uint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_1@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = (v2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 1;
  return swift_willThrow();
}

BOOL OUTLINED_FUNCTION_1@<W0>(unint64_t a1@<X8>)
{
  return a1 > 1;
}

void OUTLINED_FUNCTION_2()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_3()
{
  return swift_allocError();
}

void OUTLINED_FUNCTION_4(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = v1;
}

void OUTLINED_FUNCTION_5()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_7()
{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_9()
{
  return 0;
}

uint64_t dispatch thunk of CaarHandler.init(scorer:tieBreakerChain:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of CaarHandler.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of Scoring.scoreHypothesis(features:loggingId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t static CamModelLogger.map(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamModelMetadata();
  uint64_t v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v5);
  uint64_t v10 = (char *)&v41 - v9;
  MEMORY[0x1F4188790](v8);
  id v12 = (uint64_t *)((char *)&v41 - v11);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  uint64_t v14 = v13 - 8;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  id v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v41 - v18;
  uint64_t v20 = (char *)&v41 + *(int *)(v14 + 56) - v18;
  *(uint64_t *)((char *)&v41 - v18) = a1;
  outlined init with copy of CamModelMetadata(a2, (uint64_t)v20);
  uint64_t v21 = (uint64_t)&v17[*(int *)(v14 + 56)];
  outlined init with copy of CamModelMetadata((uint64_t)v20, v21);
  outlined init with take of CamModelMetadata(v21, (uint64_t)v12);
  uint64_t v22 = one-time initialization token for common;
  swift_retain_n();
  if (v22 != -1) {
    swift_once();
  }
  uint64_t v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.common);
  outlined init with copy of CamModelMetadata((uint64_t)v12, (uint64_t)v10);
  uint64_t v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    v42 = v19;
    uint64_t v27 = (uint8_t *)v26;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v41 = a1;
    uint64_t v29 = v28;
    uint64_t v44 = v28;
    *(_DWORD *)uint64_t v27 = 136315138;
    outlined init with copy of CamModelMetadata((uint64_t)v10, (uint64_t)v7);
    uint64_t v30 = String.init<A>(describing:)();
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamModelMetadata((uint64_t)v10);
    _os_log_impl(&dword_1C9CFE000, v24, v25, "Model metadata used for logging: %s", v27, 0xCu);
    swift_arrayDestroy();
    uint64_t v32 = v29;
    a1 = v41;
    MEMORY[0x1CB78E290](v32, -1, -1);
    uint64_t v33 = v27;
    uint64_t v19 = v42;
    MEMORY[0x1CB78E290](v33, -1, -1);
  }
  else
  {
    outlined destroy of CamModelMetadata((uint64_t)v10);
  }

  id v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01F0]), sel_init);
  if (!v34)
  {
    swift_release();
LABEL_13:
    outlined destroy of CamModelMetadata((uint64_t)v12);
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v19, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
    return (uint64_t)v34;
  }
  double v35 = specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(v12, 0xD000000000000013, 0x80000001C9DA2870);
  objc_msgSend(v34, sel_setAsset_, v35);
  unint64_t v36 = *(void *)(a1 + 16);
  if ((v36 & 0x8000000000000000) == 0 && !HIDWORD(v36))
  {
    objc_msgSend(v34, sel_setPrediction_);
    double v37 = *(double *)(a1 + 24);
    *(float *)&double v37 = v37;
    objc_msgSend(v34, sel_setPredictionScore_, v37);
    double v38 = *(double *)(a1 + 32);
    *(float *)&double v38 = v38;
    objc_msgSend(v34, sel_setPredictionThreshold_, v38);
    int v39 = *((unsigned __int8 *)v12 + 48);
    if (v39 != 2) {
      objc_msgSend(v34, sel_setIsShadowLog_, v39 & 1);
    }
    swift_release();

    goto LABEL_13;
  }
  OUTLINED_FUNCTION_1_0();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  id v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1250]), sel_init);
  uint64_t v14 = v13;
  if (v13)
  {
    uint64_t v38 = v10;
    uint64_t v15 = *a1;
    uint64_t v16 = a1[1];
    id v17 = v13;
    uint64_t v18 = (void *)MEMORY[0x1CB78D210](v15, v16);
    objc_msgSend(v17, sel_setAssetName_, v18);

    id v19 = v17;
    uint64_t v20 = specialized static ModelLoggingProtocol.generateModelVersion(using:)(a1);
    objc_msgSend(v19, sel_setAssetVersion_, v20);

    id v21 = v19;
    uint64_t v22 = (void *)MEMORY[0x1CB78D210](a2, a3);
    objc_msgSend(v21, sel_setTrialNamespace_, v22);

    uint64_t v10 = v38;
  }
  uint64_t v23 = type metadata accessor for CamModelMetadata();
  outlined init with copy of Locale?((uint64_t)a1 + *(int *)(v23 + 28), (uint64_t)v8);
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v8, &demangling cache variable for type metadata for Locale?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v43 = Locale.identifier.getter();
    uint64_t v44 = v24;
    uint64_t v41 = 95;
    unint64_t v42 = 0xE100000000000000;
    uint64_t v39 = 45;
    unint64_t v40 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    uint64_t v27 = v26;
    swift_bridgeObjectRelease();
    if (v14)
    {
      uint64_t v28 = self;
      id v29 = v14;
      uint64_t v30 = (void *)MEMORY[0x1CB78D210](v25, v27);
      swift_bridgeObjectRelease();
      id v31 = objc_msgSend(v28, sel_convertLanguageCodeToSchemaLocale_, v30);

      objc_msgSend(v29, sel_setAssetLocale_, v31);
      uint64_t v32 = OUTLINED_FUNCTION_0_2();
      v33(v32);
    }
    else
    {
      uint64_t v34 = OUTLINED_FUNCTION_0_2();
      v35(v34);
      swift_bridgeObjectRelease();
    }
  }
  return v14;
}

void *specialized static ModelLoggingProtocol.generateModelVersion(using:)(void *a1)
{
  uint64_t v1 = (void *)a1[5];
  if (v1 == (void *)1) {
    return 0;
  }
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  unint64_t v5 = a1[2];
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1380]), sel_init);
  uint64_t v2 = v6;
  if (v6)
  {
    objc_msgSend(v6, sel_setMajor_, v5);
    objc_msgSend(v2, sel_setMinor_, HIDWORD(v5));
    objc_msgSend(v2, sel_setPatch_, v4);
    id v7 = v2;
    if (v1) {
      uint64_t v1 = (void *)MEMORY[0x1CB78D210](v3, v1);
    }
    objc_msgSend(v2, sel_setPrerelease_, v1);
  }
  return v2;
}

uint64_t outlined init with copy of CamModelMetadata(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CamModelMetadata(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CamModelMetadata();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t __swift_getEnumTagSinglePayload(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48))();
}

uint64_t outlined destroy of (CamLogOutput, CamModelMetadata)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_2()
{
  return v0;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoSendPersonalFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v7 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
    uint64_t v8 = (char *)v4 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10))
    {
      uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
      memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v8, v9, v13);
      *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
      uint64_t v14 = v10[6];
      uint64_t v15 = *(void **)&v9[v14];
      *(void *)&v8[v14] = v15;
      *(void *)&v8[v10[7]] = *(void *)&v9[v10[7]];
      swift_retain();
      id v16 = v15;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
    }
    *(uint64_t *)((char *)v4 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return v4;
}

uint64_t destroy for AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  swift_release();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v3 = type metadata accessor for WordEmbeddingFeatureExtractor();
  if (!__swift_getEnumTagSinglePayload(v2, 1, v3))
  {
    uint64_t v4 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v2, v4);
    swift_release();

    swift_bridgeObjectRelease();
  }
  return swift_release();
}

uint64_t initializeWithCopy for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
    *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
    uint64_t v12 = v9[6];
    uint64_t v13 = *(void **)&v8[v12];
    *(void *)&v7[v12] = v13;
    *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
    swift_retain();
    id v14 = v13;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  swift_retain();
  return a1;
}

void *assignWithCopy for AutoSendPersonalFeatureExtractor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v11)
    {
      uint64_t v18 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v7, v8, v18);
      *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
      swift_retain();
      swift_release();
      uint64_t v19 = v9[6];
      uint64_t v20 = *(void **)&v7[v19];
      id v21 = *(void **)&v8[v19];
      *(void *)&v7[v19] = v21;
      id v22 = v21;

      *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
  *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
  uint64_t v13 = v9[6];
  id v14 = *(void **)&v8[v13];
  *(void *)&v7[v13] = v14;
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_retain();
  id v15 = v14;
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t outlined destroy of WordEmbeddingFeatureExtractor(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WordEmbeddingFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithTake for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v7 = (char *)(a1 + v6);
  uint64_t v8 = (char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9))
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v11 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v7, v8, v11);
    *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
    *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
    *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  }
  *(void *)(a1 + *(int *)(a3 + 20)) = *(void *)(a2 + *(int *)(a3 + 20));
  return a1;
}

void *assignWithTake for AutoSendPersonalFeatureExtractor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v12)
    {
      uint64_t v16 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v8, v9, v16);
      *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
      swift_release();
      uint64_t v17 = v10[6];
      uint64_t v18 = *(void **)&v8[v17];
      *(void *)&v8[v17] = *(void *)&v9[v17];

      *(void *)&v8[v10[7]] = *(void *)&v9[v10[7]];
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v13 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
  *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
  *(void *)&v8[v10[6]] = *(void *)&v9[v10[6]];
  *(void *)&v8[v10[7]] = *(void *)&v9[v10[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D04FD4);
}

uint64_t sub_1C9D04FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for AutoSendInputFeatureExtractor();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AutoSendPersonalFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D05074);
}

void sub_1C9D05074(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for AutoSendInputFeatureExtractor();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for AutoSendPersonalFeatureExtractor()
{
  uint64_t result = type metadata singleton initialization cache for AutoSendPersonalFeatureExtractor;
  if (!type metadata singleton initialization cache for AutoSendPersonalFeatureExtractor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoSendPersonalFeatureExtractor()
{
  uint64_t result = type metadata accessor for AutoSendInputFeatureExtractor();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t static AutoSendPersonalFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  uint64_t v0 = static PersonalContextFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static AutoSendInputFeatureExtractor.extractedFeatures.getter();
  specialized Array.append<A>(contentsOf:)();
  return v0;
}

uint64_t AutoSendPersonalFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (autoSendInput: AutoSendInput, crrSignals: [String : Int]));
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AutoSendInput(a1, (uint64_t)v11);
  uint64_t v12 = *(int *)(v9 + 56);
  *(void *)&v11[v12] = a2;
  uint64_t v13 = one-time initialization token for autoSend;
  swift_bridgeObjectRetain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.autoSend);
  id v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl(&dword_1C9CFE000, v15, v16, "Extracting Personal AutoSend features", v17, 2u);
    MEMORY[0x1CB78E290](v17, -1, -1);
  }

  type metadata accessor for MLMultiArray();
  uint64_t v36 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v18 = v5;
  uint64_t v19 = specialized FeatureExtracting.extract(from:)(v11);
  if (v4)
  {
    swift_bridgeObjectRelease();
    outlined destroy of (autoSendInput: AutoSendInput, crrSignals: [String : Int])((uint64_t)v11);
  }
  else
  {
    uint64_t v20 = v19;
    uint64_t v21 = specialized FeatureExtracting.extract(from:)(*(void *)&v11[v12]);
    type metadata accessor for AutoSendPersonalFeatureExtractor();
    uint64_t v22 = swift_retain();
    uint64_t v24 = specialized FeatureExtracting.extract(from:)(v22);
    swift_release();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v20, 0);
    swift_bridgeObjectRelease();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v21, 0);
    swift_bridgeObjectRelease();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v24, 0);
    swift_bridgeObjectRelease();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      v35[0] = v33;
      *(_DWORD *)uint64_t v27 = 136315138;
      v32[1] = v27 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v28 = Dictionary.Keys.description.getter();
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v30, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v25, v26, "Extracted Personal AutoSend features: %s", v27, 0xCu);
      uint64_t v31 = v33;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v31, -1, -1);
      MEMORY[0x1CB78E290](v27, -1, -1);
    }

    swift_beginAccess();
    uint64_t v18 = v36;
    outlined destroy of (autoSendInput: AutoSendInput, crrSignals: [String : Int])((uint64_t)v11);
  }
  return v18;
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (autoSendInput: AutoSendInput, crrSignals: [String : Int]));
  return AutoSendPersonalFeatureExtractor.extractImpl(from:)(a1, *(void *)(a1 + *(int *)(v2 + 48)));
}

uint64_t outlined init with copy of AutoSendInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AutoSendInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t AutoSendPersonalHandlerProvider.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for AutoSendPersonalHandlerProvider()
{
  return self;
}

uint64_t AutoSendPersonalHandler.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  outlined destroy of AutoSendPersonalFeatureExtractor(v0 + OBJC_IVAR____TtC7SiriCam23AutoSendPersonalHandler_autoSendPersonalFeatureExtractor);
  return v0;
}

uint64_t AutoSendPersonalHandler.__deallocating_deinit()
{
  AutoSendPersonalHandler.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for AutoSendPersonalHandler()
{
  return type metadata accessor for AutoSendPersonalHandler();
}

uint64_t type metadata accessor for AutoSendPersonalHandler()
{
  uint64_t result = type metadata singleton initialization cache for AutoSendPersonalHandler;
  if (!type metadata singleton initialization cache for AutoSendPersonalHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoSendPersonalHandler()
{
  uint64_t result = type metadata accessor for AutoSendPersonalFeatureExtractor();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 24) - 8);
  if ((*(unsigned char *)(v1 + 82) & 2) != 0) {
    return swift_release();
  }
  else {
    return (*(uint64_t (**)(void))(v1 + 8))();
  }
}

uint64_t outlined destroy of AutoSendPersonalFeatureExtractor(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AutoSendPersonalFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *static ConversationHistoryFeatureExtractor.extractedFeatures.getter()
{
  return &outlined read-only object #0 of static ConversationHistoryFeatureExtractor.extractedFeatures.getter;
}

uint64_t ConversationHistoryFeatureExtractor.extractImpl(from:)(void *a1)
{
  uint64_t v2 = *(void *)(v1 + 24);
  BOOL v4 = 0;
  if (v2)
  {
    BOOL v3 = *a1 == *(void *)(v1 + 16) && v2 == a1[1];
    if (v3 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      BOOL v4 = 1;
    }
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
  *(void *)(inited + 32) = 0xD000000000000018;
  *(void *)(inited + 40) = 0x80000001C9DA1BA0;
  *(void *)(inited + 48) = objc_msgSend(self, sel_featureValueWithInt64_, v4);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

uint64_t ConversationHistoryFeatureExtractor.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t type metadata accessor for ConversationHistoryFeatureExtractor()
{
  return self;
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance ConversationHistoryFeatureExtractor(void *a1)
{
  return ConversationHistoryFeatureExtractor.extractImpl(from:)(a1);
}

unint64_t type metadata accessor for MLFeatureValue()
{
  unint64_t result = lazy cache variable for type metadata for MLFeatureValue;
  if (!lazy cache variable for type metadata for MLFeatureValue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for MLFeatureValue);
  }
  return result;
}

uint64_t Array<A>.topTwo.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 16) >= 2uLL)
  {
    uint64_t v7 = *(void *)(type metadata accessor for RankedAction() - 8);
    uint64_t v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    outlined init with copy of RankedAction(v8, a2);
    uint64_t v9 = type metadata accessor for TopTwo();
    outlined init with copy of RankedAction(v8 + *(void *)(v7 + 72), a2 + *(int *)(v9 + 20));
    uint64_t v4 = a2;
    uint64_t v5 = 0;
    uint64_t v3 = v9;
  }
  else
  {
    uint64_t v3 = type metadata accessor for TopTwo();
    uint64_t v4 = a2;
    uint64_t v5 = 1;
  }
  return __swift_storeEnumTagSinglePayload(v4, v5, 1, v3);
}

uint64_t outlined init with copy of RankedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for TopTwo()
{
  uint64_t result = type metadata singleton initialization cache for TopTwo;
  if (!type metadata singleton initialization cache for TopTwo) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TopTwo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for RankedAction();
    uint64_t v8 = v7[5];
    uint64_t v9 = (void **)((char *)v4 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v73 = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v10;
      *uint64_t v9 = *v10;
      id v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        goto LABEL_12;
      }
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      os_log_type_t v16 = (char *)v9 + v15;
      uint64_t v17 = (char *)v10 + v15;
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      uint64_t v23 = v14[6];
      uint64_t v24 = (void **)((char *)v9 + v23);
      uint64_t v25 = (void **)((char *)v10 + v23);
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v14[7];
      uint64_t v28 = (char *)v9 + v27;
      unint64_t v29 = (char *)v10 + v27;
      v28[4] = v29[4];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
LABEL_12:
    *(void *)((char *)v4 + v7[6]) = *(void *)((char *)a2 + v7[6]);
    *(void *)((char *)v4 + v7[7]) = *(void *)((char *)a2 + v7[7]);
    *(void *)((char *)v4 + v7[8]) = *(void *)((char *)a2 + v7[8]);
    uint64_t v30 = v7[9];
    uint64_t v31 = (char *)v4 + v30;
    uint64_t v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for UUID();
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    double v35 = v32;
    uint64_t v36 = v33;
    v76 = v34;
    v34(v31, v35, v33);
    uint64_t v37 = v7[10];
    uint64_t v38 = (void *)((char *)v4 + v37);
    uint64_t v39 = (void *)((char *)a2 + v37);
    uint64_t v40 = v39[1];
    *uint64_t v38 = *v39;
    v38[1] = v40;
    *(void *)((char *)v4 + v7[11]) = *(void *)((char *)a2 + v7[11]);
    uint64_t v41 = *(int *)(a3 + 20);
    unint64_t v42 = (void *)((char *)v4 + v41);
    uint64_t v43 = (char *)a2 + v41;
    uint64_t v44 = *(void *)((char *)a2 + v41 + 8);
    void *v42 = *(void *)((char *)a2 + v41);
    v42[1] = v44;
    uint64_t v45 = v7[5];
    uint64_t v46 = (void **)((char *)v42 + v45);
    v47 = (void **)&v43[v45];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v48 = swift_getEnumCaseMultiPayload();
    if (v48 == 1)
    {
      id v55 = *v47;
      *uint64_t v46 = *v47;
      id v56 = v55;
    }
    else
    {
      if (v48)
      {
        memcpy(v46, v47, *(void *)(*(void *)(v73 - 8) + 64));
LABEL_21:
        *(void *)((char *)v42 + v7[6]) = *(void *)&v43[v7[6]];
        *(void *)((char *)v42 + v7[7]) = *(void *)&v43[v7[7]];
        *(void *)((char *)v42 + v7[8]) = *(void *)&v43[v7[8]];
        uint64_t v64 = v7[9];
        v65 = (char *)v42 + v64;
        unint64_t v66 = &v43[v64];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v76(v65, v66, v36);
        uint64_t v67 = v7[10];
        v68 = (void *)((char *)v42 + v67);
        uint64_t v69 = &v43[v67];
        uint64_t v70 = *((void *)v69 + 1);
        void *v68 = *(void *)v69;
        v68[1] = v70;
        *(void *)((char *)v42 + v7[11]) = *(void *)&v43[v7[11]];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      uint64_t v72 = v36;
      uint64_t v49 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v49 - 8) + 16))(v46, v47, v49);
      uint64_t v50 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v51 = v50[5];
      __dsta = (char *)v46 + v51;
      uint64_t v52 = (char *)v47 + v51;
      uint64_t v53 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v52, 1, v53))
      {
        uint64_t v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v52, *(void *)(*(void *)(v54 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v53 - 8) + 16))(__dsta, v52, v53);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v53);
      }
      uint64_t v36 = v72;
      uint64_t v57 = v50[6];
      v58 = (void **)((char *)v46 + v57);
      uint64_t v59 = (void **)((char *)v47 + v57);
      uint64_t v60 = v59[1];
      void *v58 = *v59;
      v58[1] = v60;
      uint64_t v61 = v50[7];
      uint64_t v62 = (char *)v46 + v61;
      v63 = (char *)v47 + v61;
      v62[4] = v63[4];
      *(_DWORD *)uint64_t v62 = *(_DWORD *)v63;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  uint64_t v20 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for TopTwo(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for RankedAction();
  int v5 = (id *)(a1 + *(int *)(v4 + 20));
  type metadata accessor for CamParse(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
    uint64_t v8 = (uint64_t)v5 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + *(int *)(v4 + 36);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);
  v12(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v14 = (id *)(v13 + *(int *)(v4 + 20));
  int v15 = swift_getEnumCaseMultiPayload();
  if (v15 == 1)
  {
  }
  else if (!v15)
  {
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v16 - 8) + 8))(v14, v16);
    uint64_t v17 = (uint64_t)v14 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v17, 1, v18)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12(v13 + *(int *)(v4 + 36), v11);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TopTwo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for RankedAction();
  uint64_t v7 = v6[5];
  uint64_t v72 = a1;
  uint64_t v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = *v9;
    *uint64_t v8 = *v9;
    id v20 = v19;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_10;
    }
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    uint64_t v13 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v14 = v13[5];
    int v15 = (char *)v8 + v14;
    uint64_t v16 = (char *)v9 + v14;
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v21 = v13[6];
    id v22 = (void **)((char *)v8 + v21);
    uint64_t v23 = (void **)((char *)v9 + v21);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v13[7];
    uint64_t v26 = (char *)v8 + v25;
    uint64_t v27 = (char *)v9 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  uint64_t v28 = v6[9];
  unint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v71 = v31;
  uint64_t v69 = v32;
  v32(v29, v30, v31);
  uint64_t v33 = v6[10];
  uint64_t v34 = (void *)((char *)v72 + v33);
  double v35 = (void *)((char *)a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  *(void *)((char *)v72 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = (void *)((char *)v72 + v37);
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = *(void *)((char *)a2 + v37 + 8);
  *uint64_t v38 = *(void *)((char *)a2 + v37);
  v38[1] = v40;
  uint64_t v41 = v6[5];
  unint64_t v42 = (void **)((char *)v38 + v41);
  uint64_t v43 = (void **)&v39[v41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 1)
  {
    uint64_t v52 = *v43;
    void *v42 = *v43;
    id v53 = v52;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  if (!v44)
  {
    uint64_t v45 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v45 - 8) + 16))(v42, v43, v45);
    uint64_t v46 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v47 = v46[5];
    int v48 = (char *)v42 + v47;
    uint64_t v49 = (char *)v43 + v47;
    uint64_t v50 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v49, 1, v50))
    {
      uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v48, v49, *(void *)(*(void *)(v51 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v50 - 8) + 16))(v48, v49, v50);
      __swift_storeEnumTagSinglePayload((uint64_t)v48, 0, 1, v50);
    }
    uint64_t v54 = v46[6];
    id v55 = (void **)((char *)v42 + v54);
    id v56 = (void **)((char *)v43 + v54);
    uint64_t v57 = v56[1];
    *id v55 = *v56;
    v55[1] = v57;
    uint64_t v58 = v46[7];
    uint64_t v59 = (char *)v42 + v58;
    uint64_t v60 = (char *)v43 + v58;
    v59[4] = v60[4];
    *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  memcpy(v42, v43, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_19:
  *(void *)((char *)v38 + v6[6]) = *(void *)&v39[v6[6]];
  *(void *)((char *)v38 + v6[7]) = *(void *)&v39[v6[7]];
  *(void *)((char *)v38 + v6[8]) = *(void *)&v39[v6[8]];
  uint64_t v61 = v6[9];
  uint64_t v62 = (char *)v38 + v61;
  v63 = &v39[v61];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v69(v62, v63, v71);
  uint64_t v64 = v6[10];
  v65 = (void *)((char *)v38 + v64);
  unint64_t v66 = &v39[v64];
  uint64_t v67 = *((void *)v66 + 1);
  void *v65 = *(void *)v66;
  v65[1] = v67;
  *(void *)((char *)v38 + v6[11]) = *(void *)&v39[v6[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v72;
}

void *assignWithCopy for TopTwo(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for RankedAction();
  uint64_t v7 = (int *)v6;
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(v6 + 20);
    uint64_t v9 = (void **)((char *)a1 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    outlined destroy of CamParse((uint64_t)a1 + v8);
    uint64_t v11 = type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      id v20 = *v10;
      *uint64_t v9 = *v10;
      id v21 = v20;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
    }
    else
    {
      uint64_t v65 = a3;
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)v9 + v15;
      uint64_t v17 = (char *)v10 + v15;
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      uint64_t v22 = v14[6];
      uint64_t v23 = (void **)((char *)v9 + v22);
      uint64_t v24 = (void **)((char *)v10 + v22);
      *uint64_t v23 = *v24;
      v23[1] = v24[1];
      uint64_t v25 = v14[7];
      uint64_t v26 = (char *)v9 + v25;
      uint64_t v27 = (char *)v10 + v25;
      int v28 = *(_DWORD *)v27;
      v26[4] = v27[4];
      *(_DWORD *)uint64_t v26 = v28;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      a3 = v65;
    }
  }
  *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v7[7]) = *(void *)((char *)a2 + v7[7]);
  *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v29 = v7[9];
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 24);
  v33(v30, v31, v32);
  uint64_t v34 = v7[10];
  double v35 = (void *)((char *)a1 + v34);
  uint64_t v36 = (void *)((char *)a2 + v34);
  *double v35 = *v36;
  v35[1] = v36[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v37 = *(int *)(a3 + 20);
  uint64_t v38 = (char *)a1 + v37;
  uint64_t v39 = (char *)a2 + v37;
  *(void *)uint64_t v38 = *(void *)((char *)a2 + v37);
  *((void *)v38 + 1) = *(void *)((char *)a2 + v37 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v40 = v7[5];
    uint64_t v41 = (void **)&v38[v40];
    unint64_t v42 = (void **)&v39[v40];
    outlined destroy of CamParse((uint64_t)&v38[v40]);
    uint64_t v43 = type metadata accessor for CamParse(0);
    int v44 = swift_getEnumCaseMultiPayload();
    if (v44 == 1)
    {
      uint64_t v50 = *v42;
      *uint64_t v41 = *v42;
      id v51 = v50;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
    if (!v44)
    {
      unint64_t v66 = v33;
      uint64_t v45 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v45 - 8) + 16))(v41, v42, v45);
      v63 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v46 = v63[5];
      uint64_t v64 = (char *)v41 + v46;
      uint64_t v47 = (char *)v42 + v46;
      uint64_t v48 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v47, 1, v48))
      {
        uint64_t v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v64, v47, *(void *)(*(void *)(v49 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v48 - 8) + 16))(v64, v47, v48);
        __swift_storeEnumTagSinglePayload((uint64_t)v64, 0, 1, v48);
      }
      uint64_t v33 = v66;
      uint64_t v52 = v63[6];
      id v53 = (void **)((char *)v41 + v52);
      uint64_t v54 = (void **)((char *)v42 + v52);
      *id v53 = *v54;
      v53[1] = v54[1];
      uint64_t v55 = v63[7];
      id v56 = (char *)v41 + v55;
      uint64_t v57 = (char *)v42 + v55;
      int v58 = *(_DWORD *)v57;
      v56[4] = v57[4];
      *(_DWORD *)id v56 = v58;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    memcpy(v41, v42, *(void *)(*(void *)(v43 - 8) + 64));
  }
LABEL_20:
  *(void *)&v38[v7[6]] = *(void *)&v39[v7[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v38[v7[7]] = *(void *)&v39[v7[7]];
  *(void *)&v38[v7[8]] = *(void *)&v39[v7[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v33(&v38[v7[9]], &v39[v7[9]], v32);
  uint64_t v59 = v7[10];
  uint64_t v60 = &v38[v59];
  uint64_t v61 = &v39[v59];
  *(void *)uint64_t v60 = *(void *)v61;
  *((void *)v60 + 1) = *((void *)v61 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v38[v7[11]] = *(void *)&v39[v7[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of CamParse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CamParse(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

_OWORD *initializeWithTake for TopTwo(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for RankedAction();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    __dst = a3;
    uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    uint64_t v12 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
    uint64_t v18 = v12[7];
    uint64_t v19 = &v8[v18];
    id v20 = &v9[v18];
    v19[4] = v20[4];
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    swift_storeEnumTagMultiPayload();
    a3 = __dst;
  }
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  uint64_t v21 = v6[9];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32);
  v25(v22, v23, v24);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  uint64_t v26 = a3[5];
  uint64_t v27 = (char *)a1 + v26;
  int v28 = (char *)a2 + v26;
  *(_OWORD *)uint64_t v27 = *(_OWORD *)((char *)a2 + v26);
  uint64_t v29 = v6[5];
  uint64_t v30 = &v27[v29];
  uint64_t v31 = &v28[v29];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v30, v31, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    unint64_t v42 = v25;
    uint64_t v32 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
    uint64_t v41 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v33 = v41[5];
    __dsta = &v30[v33];
    uint64_t v34 = &v31[v33];
    uint64_t v35 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dsta, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(__dsta, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v35);
    }
    *(_OWORD *)&v30[v41[6]] = *(_OWORD *)&v31[v41[6]];
    uint64_t v37 = v41[7];
    uint64_t v38 = &v30[v37];
    uint64_t v39 = &v31[v37];
    v38[4] = v39[4];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    swift_storeEnumTagMultiPayload();
    uint64_t v25 = v42;
  }
  *(void *)&v27[v6[6]] = *(void *)&v28[v6[6]];
  *(void *)&v27[v6[7]] = *(void *)&v28[v6[7]];
  *(void *)&v27[v6[8]] = *(void *)&v28[v6[8]];
  v25(&v27[v6[9]], &v28[v6[9]], v24);
  *(_OWORD *)&v27[v6[10]] = *(_OWORD *)&v28[v6[10]];
  *(void *)&v27[v6[11]] = *(void *)&v28[v6[11]];
  return a1;
}

void *assignWithTake for TopTwo(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for RankedAction();
  uint64_t v8 = (int *)v7;
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(v7 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    outlined destroy of CamParse((uint64_t)a1 + v9);
    uint64_t v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      __dst = &v10[v15];
      uint64_t v16 = &v11[v15];
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      uint64_t v19 = v14[7];
      id v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)id v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)a1 + v8[6]) = *(void *)((char *)a2 + v8[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  swift_bridgeObjectRelease();
  uint64_t v22 = v8[9];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  uint64_t v27 = v8[10];
  int v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *int v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  swift_bridgeObjectRelease();
  uint64_t v32 = *(int *)(a3 + 20);
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32 + 8);
  *(void *)uint64_t v33 = *(void *)((char *)a2 + v32);
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v36 = v8[5];
    uint64_t v37 = &v33[v36];
    uint64_t v38 = &v34[v36];
    outlined destroy of CamParse((uint64_t)&v33[v36]);
    uint64_t v39 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      __dsta = v26;
      uint64_t v40 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v37, v38, v40);
      uint64_t v54 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v41 = v54[5];
      uint64_t v55 = &v37[v41];
      unint64_t v42 = &v38[v41];
      uint64_t v43 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v42, 1, v43))
      {
        uint64_t v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v55, v42, *(void *)(*(void *)(v44 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v43 - 8) + 32))(v55, v42, v43);
        __swift_storeEnumTagSinglePayload((uint64_t)v55, 0, 1, v43);
      }
      uint64_t v26 = __dsta;
      *(_OWORD *)&v37[v54[6]] = *(_OWORD *)&v38[v54[6]];
      uint64_t v45 = v54[7];
      uint64_t v46 = &v37[v45];
      uint64_t v47 = &v38[v45];
      v46[4] = v47[4];
      *(_DWORD *)uint64_t v46 = *(_DWORD *)v47;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)&v33[v8[6]] = *(void *)&v34[v8[6]];
  swift_bridgeObjectRelease();
  *(void *)&v33[v8[7]] = *(void *)&v34[v8[7]];
  *(void *)&v33[v8[8]] = *(void *)&v34[v8[8]];
  swift_bridgeObjectRelease();
  v26(&v33[v8[9]], &v34[v8[9]], v25);
  uint64_t v48 = v8[10];
  uint64_t v49 = &v33[v48];
  uint64_t v50 = &v34[v48];
  uint64_t v52 = *(void *)v50;
  uint64_t v51 = *((void *)v50 + 1);
  *(void *)uint64_t v49 = v52;
  *((void *)v49 + 1) = v51;
  swift_bridgeObjectRelease();
  *(void *)&v33[v8[11]] = *(void *)&v34[v8[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TopTwo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D07ADC);
}

uint64_t sub_1C9D07ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TopTwo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D07B38);
}

uint64_t sub_1C9D07B38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TopTwo()
{
  uint64_t result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance FeatureDictionaryError()
{
  return MEMORY[0x1F4185E10]();
}

uint64_t protocol witness for Error._code.getter in conformance FeatureDictionaryError()
{
  return MEMORY[0x1F4185E08]();
}

uint64_t protocol witness for Error._userInfo.getter in conformance FeatureDictionaryError()
{
  return MEMORY[0x1F4185E18]();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance FeatureDictionaryError()
{
  return MEMORY[0x1F4185E00]();
}

unint64_t Dictionary<>.debugDescription.getter(uint64_t a1)
{
  unint64_t v2 = 0xD00000000000001ALL;
  unint64_t v19 = 0xD00000000000001ALL;
  unint64_t v20 = 0x80000001C9DA2A80;
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized _copyCollectionToContiguousArray<A>(_:)(v3);
  swift_bridgeObjectRelease();
  v18._uint64_t countAndFlagsBits = (uint64_t)v4;
  swift_retain();
  specialized MutableCollection<>.sort(by:)(&v18._countAndFlagsBits);
  swift_release();
  uint64_t v5 = *(void *)(v18._countAndFlagsBits + 16);
  if (v5)
  {
    uint64_t v6 = (void **)(v18._countAndFlagsBits + 40);
    do
    {
      uint64_t v8 = (uint64_t)*(v6 - 1);
      uint64_t v7 = *v6;
      v18._uint64_t countAndFlagsBits = 0;
      v18._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain();
      v9._uint64_t countAndFlagsBits = 8237;
      v9._object = (void *)0xE200000000000000;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = v8;
      v10._object = v7;
      String.append(_:)(v10);
      v11._uint64_t countAndFlagsBits = 8250;
      v11._object = (void *)0xE200000000000000;
      String.append(_:)(v11);
      if (*(void *)(a1 + 16)
        && (unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v8, (uint64_t)v7), (v13 & 1) != 0))
      {
        uint64_t v14 = *(void **)(*(void *)(a1 + 56) + 8 * v12);
        id v15 = v14;
      }
      else
      {
        uint64_t v14 = 0;
      }
      v6 += 2;
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLFeatureValue?);
      _print_unlocked<A, B>(_:_:)();

      v16._uint64_t countAndFlagsBits = 10;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      --v5;
    }
    while (v5);
    swift_release();
    return v19;
  }
  else
  {
    swift_release();
  }
  return v2;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v2 = v3;
  }
  uint64_t v4 = *(void *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  uint64_t result = specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v2;
  return result;
}

{
  return specialized MutableCollection<>.sort(by:)(a1, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
}

void specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v5)
  {
    if (v5 <= 0) {
      goto LABEL_11;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    uint64_t v8 = type metadata accessor for RankedAction();
    OUTLINED_FUNCTION_0_4(v8);
    uint64_t v10 = *(void *)(v9 + 72);
    unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    char v13 = (void *)swift_allocObject();
    size_t v14 = _swift_stdlib_malloc_size(v13);
    if (v10)
    {
      if (v14 - v12 != 0x8000000000000000 || v10 != -1)
      {
        v13[2] = v5;
        v13[3] = 2 * ((uint64_t)(v14 - v12) / v10);
LABEL_11:
        if (v4 != a3)
        {
          uint64_t v16 = type metadata accessor for RankedAction();
          OUTLINED_FUNCTION_0_4(v16);
          specialized UnsafeMutablePointer.initialize(from:count:)(a2 + *(void *)(v17 + 72) * a3, v5);
          return;
        }
        goto LABEL_16;
      }
LABEL_15:
      __break(1u);
LABEL_16:
      __break(1u);
      return;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
}

void *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 16);
  uint64_t v5 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : MLFeatureValue].Iterator._Variant();
  if (v5 != v1)
  {
    __break(1u);
    return (void *)MEMORY[0x1E4FBC860];
  }
  return v3;
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3) {
        return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, a1);
      }
      return result;
    }
    goto LABEL_144;
  }
  uint64_t v5 = result;
  uint64_t result = specialized static Array._allocateUninitialized(_:)(v3 / 2);
  uint64_t v95 = result;
  uint64_t v96 = v3;
  v97 = v6;
  v93 = a1;
  if (v3 <= 0)
  {
    uint64_t v98 = MEMORY[0x1E4FBC860];
    unint64_t v31 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_110:
    if (v31 < 2)
    {
LABEL_121:
      uint64_t result = swift_bridgeObjectRelease();
      if (v3 >= -1)
      {
        *(void *)(v95 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      goto LABEL_149;
    }
    uint64_t v85 = *v93;
    while (1)
    {
      unint64_t v86 = v31 - 2;
      if (v31 < 2) {
        break;
      }
      if (!v85) {
        goto LABEL_153;
      }
      uint64_t v87 = v98;
      uint64_t v88 = *(void *)(v98 + 32 + 16 * v86);
      uint64_t v89 = *(void *)(v98 + 32 + 16 * (v31 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v85 + 16 * v88), (char *)(v85 + 16 * *(void *)(v98 + 32 + 16 * (v31 - 1))), v85 + 16 * v89, v97);
      if (v1) {
        goto LABEL_106;
      }
      if (v89 < v88) {
        goto LABEL_139;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v98);
        uint64_t v87 = result;
      }
      if (v86 >= *(void *)(v87 + 16)) {
        goto LABEL_140;
      }
      v90 = (void *)(v87 + 32 + 16 * v86);
      void *v90 = v88;
      v90[1] = v89;
      unint64_t v91 = *(void *)(v87 + 16);
      if (v31 > v91) {
        goto LABEL_141;
      }
      uint64_t result = (uint64_t)memmove((void *)(v87 + 32 + 16 * (v31 - 1)), (const void *)(v87 + 32 + 16 * v31), 16 * (v91 - v31));
      uint64_t v98 = v87;
      *(void *)(v87 + 16) = v91 - 1;
      unint64_t v31 = v91 - 1;
      Swift::Int v3 = v96;
      if (v91 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_138:
    __break(1u);
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
LABEL_148:
    __break(1u);
LABEL_149:
    __break(1u);
LABEL_150:
    __break(1u);
LABEL_151:
    __break(1u);
LABEL_152:
    __break(1u);
LABEL_153:
    __break(1u);
    return result;
  }
  uint64_t v94 = v5;
  Swift::Int v7 = 0;
  uint64_t v8 = *a1;
  uint64_t v92 = *a1 + 8;
  uint64_t v98 = MEMORY[0x1E4FBC860];
  while (1)
  {
    Swift::Int v9 = v7++;
    if (v7 >= v3) {
      goto LABEL_32;
    }
    uint64_t v10 = (uint64_t *)(v8 + 16 * v7);
    uint64_t result = *v10;
    uint64_t v11 = v10[1];
    unint64_t v12 = (void *)(v8 + 16 * v9);
    if (result == *v12 && v11 == v12[1])
    {
      Swift::Int v15 = v9 + 2;
      if (v9 + 2 >= v3) {
        goto LABEL_31;
      }
      int v14 = 0;
LABEL_13:
      uint64_t v16 = (void *)(v92 + 16 * v15);
      do
      {
        uint64_t result = *(v16 - 1);
        uint64_t v17 = (void *)(v8 + 16 * v7);
        if (result == *v17 && *v16 == v17[1])
        {
          if (v14) {
            goto LABEL_24;
          }
        }
        else
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((v14 ^ result)) {
            goto LABEL_23;
          }
        }
        v16 += 2;
        Swift::Int v19 = v15 + 1;
        Swift::Int v7 = v15;
        Swift::Int v15 = v19;
      }
      while (v19 < v3);
      Swift::Int v15 = v19;
      goto LABEL_23;
    }
    uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
    int v14 = result;
    Swift::Int v15 = v9 + 2;
    if (v9 + 2 < v3) {
      goto LABEL_13;
    }
LABEL_23:
    Swift::Int v7 = v15;
    if ((v14 & 1) == 0) {
      goto LABEL_32;
    }
LABEL_24:
    if (v15 < v9) {
      goto LABEL_148;
    }
    if (v9 < v15)
    {
      uint64_t v20 = 16 * v15;
      uint64_t v21 = 16 * v9;
      Swift::Int v22 = v15;
      Swift::Int v23 = v9;
      do
      {
        if (v23 != --v22)
        {
          if (!v8) {
            goto LABEL_152;
          }
          uint64_t v24 = v8 + v20;
          uint64_t v25 = *(void *)(v8 + v21);
          uint64_t v26 = *(void *)(v8 + v21 + 8);
          *(_OWORD *)(v8 + v21) = *(_OWORD *)(v8 + v20 - 16);
          *(void *)(v24 - 16) = v25;
          *(void *)(v24 - 8) = v26;
        }
        ++v23;
        v20 -= 16;
        v21 += 16;
      }
      while (v23 < v22);
    }
LABEL_31:
    Swift::Int v7 = v15;
LABEL_32:
    if (v7 >= v3) {
      goto LABEL_41;
    }
    if (__OFSUB__(v7, v9)) {
      goto LABEL_143;
    }
    if (v7 - v9 >= v94) {
      goto LABEL_41;
    }
    if (__OFADD__(v9, v94)) {
      goto LABEL_146;
    }
    if (v9 + v94 >= v3) {
      Swift::Int v27 = v3;
    }
    else {
      Swift::Int v27 = v9 + v94;
    }
    if (v27 < v9) {
      goto LABEL_147;
    }
    if (v7 == v27)
    {
LABEL_41:
      uint64_t v28 = v98;
    }
    else
    {
      v79 = (uint64_t *)(v8 + 16 * v7);
      uint64_t v28 = v98;
      do
      {
        v80 = (uint64_t *)(v8 + 16 * v7);
        uint64_t result = *v80;
        uint64_t v81 = v80[1];
        Swift::Int v82 = v9;
        v83 = v79;
        do
        {
          if (result == *(v83 - 2) && v81 == *(v83 - 1)) {
            break;
          }
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            break;
          }
          if (!v8) {
            goto LABEL_150;
          }
          uint64_t result = *v83;
          uint64_t v81 = v83[1];
          *(_OWORD *)v83 = *((_OWORD *)v83 - 1);
          *(v83 - 1) = v81;
          *(v83 - 2) = result;
          v83 -= 2;
          ++v82;
        }
        while (v7 != v82);
        ++v7;
        v79 += 2;
      }
      while (v7 != v27);
      Swift::Int v7 = v27;
    }
    if (v7 < v9) {
      goto LABEL_142;
    }
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v28 + 16) + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    unint64_t v30 = *(void *)(v28 + 16);
    unint64_t v29 = *(void *)(v28 + 24);
    unint64_t v31 = v30 + 1;
    if (v30 >= v29 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v29 > 1), v30 + 1, 1, (char *)v28);
      uint64_t v28 = result;
    }
    *(void *)(v28 + 16) = v31;
    uint64_t v32 = v28 + 32;
    uint64_t v33 = (Swift::Int *)(v28 + 32 + 16 * v30);
    *uint64_t v33 = v9;
    v33[1] = v7;
    uint64_t v98 = v28;
    if (v30) {
      break;
    }
    unint64_t v31 = 1;
LABEL_90:
    Swift::Int v3 = v96;
    if (v7 >= v96) {
      goto LABEL_110;
    }
  }
  while (1)
  {
    unint64_t v34 = v31 - 1;
    if (v31 >= 4)
    {
      unint64_t v39 = v32 + 16 * v31;
      uint64_t v40 = *(void *)(v39 - 64);
      uint64_t v41 = *(void *)(v39 - 56);
      BOOL v45 = __OFSUB__(v41, v40);
      uint64_t v42 = v41 - v40;
      if (v45) {
        goto LABEL_127;
      }
      uint64_t v44 = *(void *)(v39 - 48);
      uint64_t v43 = *(void *)(v39 - 40);
      BOOL v45 = __OFSUB__(v43, v44);
      uint64_t v37 = v43 - v44;
      char v38 = v45;
      if (v45) {
        goto LABEL_128;
      }
      unint64_t v46 = v31 - 2;
      uint64_t v47 = (uint64_t *)(v32 + 16 * (v31 - 2));
      uint64_t v49 = *v47;
      uint64_t v48 = v47[1];
      BOOL v45 = __OFSUB__(v48, v49);
      uint64_t v50 = v48 - v49;
      if (v45) {
        goto LABEL_129;
      }
      BOOL v45 = __OFADD__(v37, v50);
      uint64_t v51 = v37 + v50;
      if (v45) {
        goto LABEL_131;
      }
      if (v51 >= v42)
      {
        uint64_t v69 = (uint64_t *)(v32 + 16 * v34);
        uint64_t v71 = *v69;
        uint64_t v70 = v69[1];
        BOOL v45 = __OFSUB__(v70, v71);
        uint64_t v72 = v70 - v71;
        if (v45) {
          goto LABEL_137;
        }
        BOOL v62 = v37 < v72;
        goto LABEL_79;
      }
    }
    else
    {
      if (v31 != 3)
      {
        uint64_t v63 = *(void *)(v28 + 32);
        uint64_t v64 = *(void *)(v28 + 40);
        BOOL v45 = __OFSUB__(v64, v63);
        uint64_t v56 = v64 - v63;
        char v57 = v45;
        goto LABEL_73;
      }
      uint64_t v36 = *(void *)(v28 + 32);
      uint64_t v35 = *(void *)(v28 + 40);
      BOOL v45 = __OFSUB__(v35, v36);
      uint64_t v37 = v35 - v36;
      char v38 = v45;
    }
    if (v38) {
      goto LABEL_130;
    }
    unint64_t v46 = v31 - 2;
    uint64_t v52 = (uint64_t *)(v32 + 16 * (v31 - 2));
    uint64_t v54 = *v52;
    uint64_t v53 = v52[1];
    BOOL v55 = __OFSUB__(v53, v54);
    uint64_t v56 = v53 - v54;
    char v57 = v55;
    if (v55) {
      goto LABEL_132;
    }
    int v58 = (uint64_t *)(v32 + 16 * v34);
    uint64_t v60 = *v58;
    uint64_t v59 = v58[1];
    BOOL v45 = __OFSUB__(v59, v60);
    uint64_t v61 = v59 - v60;
    if (v45) {
      goto LABEL_134;
    }
    if (__OFADD__(v56, v61)) {
      goto LABEL_136;
    }
    if (v56 + v61 >= v37)
    {
      BOOL v62 = v37 < v61;
LABEL_79:
      if (v62) {
        unint64_t v34 = v46;
      }
      goto LABEL_81;
    }
LABEL_73:
    if (v57) {
      goto LABEL_133;
    }
    uint64_t v65 = (uint64_t *)(v32 + 16 * v34);
    uint64_t v67 = *v65;
    uint64_t v66 = v65[1];
    BOOL v45 = __OFSUB__(v66, v67);
    uint64_t v68 = v66 - v67;
    if (v45) {
      goto LABEL_135;
    }
    if (v68 < v56) {
      goto LABEL_90;
    }
LABEL_81:
    unint64_t v73 = v34 - 1;
    if (v34 - 1 >= v31)
    {
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    if (!v8) {
      goto LABEL_151;
    }
    v74 = (uint64_t *)(v32 + 16 * v73);
    uint64_t v75 = *v74;
    v76 = (void *)(v32 + 16 * v34);
    uint64_t v77 = v76[1];
    uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)((char *)(v8 + 16 * *v74), (char *)(v8 + 16 * *v76), v8 + 16 * v77, v97);
    if (v1) {
      break;
    }
    if (v77 < v75) {
      goto LABEL_124;
    }
    if (v34 > *(void *)(v98 + 16)) {
      goto LABEL_125;
    }
    uint64_t *v74 = v75;
    *(void *)(v32 + 16 * v73 + 8) = v77;
    unint64_t v78 = *(void *)(v98 + 16);
    if (v34 >= v78) {
      goto LABEL_126;
    }
    uint64_t v28 = v98;
    unint64_t v31 = v78 - 1;
    uint64_t result = (uint64_t)memmove((void *)(v32 + 16 * v34), v76 + 2, 16 * (v78 - 1 - v34));
    *(void *)(v98 + 16) = v78 - 1;
    if (v78 <= 2) {
      goto LABEL_90;
    }
  }
LABEL_106:
  uint64_t result = swift_bridgeObjectRelease();
  if (v96 < -1) {
    goto LABEL_145;
  }
  *(void *)(v95 + 16) = 0;
  return swift_bridgeObjectRelease();
}

{
  uint64_t v1;
  Swift::Int v2;
  uint64_t result;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  long long v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  long long v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  char v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  void v152[3];
  uint64_t v153;
  uint64_t v154;
  long long v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;

  v158 = a1;
  uint64_t v2 = a1[1];
  uint64_t result = _minimumMergeRunLength(_:)(v2);
  if (result >= v2)
  {
    if (v2 < 0) {
      goto LABEL_182;
    }
    if (v2) {
      return specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v2, 1, v158);
    }
    return result;
  }
  size_t v4 = result;
  v151 = v1;
  uint64_t result = specialized static Array._allocateUninitialized(_:)(v2 / 2);
  v142 = result;
  v143 = v2;
  v150 = v5;
  if (v2 > 0)
  {
    v141 = v4;
    uint64_t v6 = 0;
    Swift::Int v7 = MEMORY[0x1E4FBC860];
    uint64_t v8 = v2;
    while (1)
    {
      Swift::Int v9 = v6++;
      v149 = v9;
      if (v6 >= v8) {
        goto LABEL_48;
      }
      uint64_t v10 = *v158;
      outlined init with copy of SignalProviding(*v158 + 40 * v6, (uint64_t)&v155);
      v145 = v10;
      outlined init with copy of SignalProviding(v10 + 40 * v9, (uint64_t)v152);
      v144 = closure #1 in DisambiguationSerialiser.init(actions:)(&v155, v152);
      if (v151)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
        uint64_t result = swift_bridgeObjectRelease();
        v132 = v143;
LABEL_143:
        if (v132 < -1) {
          goto LABEL_184;
        }
        *(void *)(v142 + 16) = 0;
        return swift_bridgeObjectRelease();
      }
      v151 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
      uint64_t v6 = v9 + 2;
      v147 = v8;
      if (v9 + 2 >= v8) {
        goto LABEL_39;
      }
      uint64_t v11 = v10 + 40 * v9 + 40;
      do
      {
        outlined init with copy of SignalProviding(v11 + 40, (uint64_t)&v155);
        outlined init with copy of SignalProviding(v11, (uint64_t)v152);
        unint64_t v12 = v156;
        char v13 = v157;
        __swift_project_boxed_opaque_existential_1(&v155, v156);
        int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v12, v13);
        if (!v15)
        {
          unint64_t v34 = 0;
          goto LABEL_36;
        }
        uint64_t v16 = v14;
        uint64_t v17 = v15;
        Swift::String v18 = v153;
        Swift::Int v19 = v154;
        __swift_project_boxed_opaque_existential_1(v152, v153);
        uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 40))(v18, v19);
        if (!v21) {
          goto LABEL_33;
        }
        Swift::Int v22 = v16 == v20 && v17 == v21;
        if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          goto LABEL_21;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        Swift::Int v23 = v156;
        uint64_t v24 = v157;
        __swift_project_boxed_opaque_existential_1(&v155, v156);
        uint64_t v25 = ActionProtocol.actionRepresentation.getter(v23, v24);
        Swift::Int v27 = v26;
        uint64_t v28 = v153;
        unint64_t v29 = v154;
        __swift_project_boxed_opaque_existential_1(v152, v153);
        unint64_t v30 = ActionProtocol.actionRepresentation.getter(v28, v29);
        uint64_t v32 = v31;
        if (v27)
        {
          if (v31)
          {
            if (v25 == v30 && v27 == v31)
            {
              swift_bridgeObjectRelease();
LABEL_33:
              unint64_t v34 = 0;
            }
            else
            {
LABEL_21:
              unint64_t v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
            }
            uint64_t v8 = v147;
            goto LABEL_35;
          }
          swift_bridgeObjectRelease();
        }
        if (one-time initialization token for ranker != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)static Logger.ranker);
        uint64_t v36 = Logger.logObject.getter();
        uint64_t v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v36, v37))
        {
          char v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)char v38 = 0;
          _os_log_impl(&dword_1C9CFE000, v36, v37, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v38, 2u);
          MEMORY[0x1CB78E290](v38, -1, -1);
        }

        uint64_t v8 = v147;
        if (!v32)
        {
          unint64_t v34 = 1;
          goto LABEL_36;
        }
        unint64_t v34 = 0;
LABEL_35:
        swift_bridgeObjectRelease();
LABEL_36:
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
        uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
        if ((v144 ^ v34)) {
          goto LABEL_39;
        }
        ++v6;
        v11 += 40;
      }
      while (v6 < v8);
      uint64_t v6 = v8;
LABEL_39:
      if (v144)
      {
        if (v6 >= v9)
        {
          if (v9 < v6)
          {
            unint64_t v39 = v7;
            uint64_t v40 = v9;
            uint64_t v41 = 40 * v6 - 40;
            uint64_t v42 = 40 * v40;
            uint64_t v43 = v6;
            do
            {
              if (v40 != --v43)
              {
                if (!v145) {
                  goto LABEL_191;
                }
                uint64_t v44 = v145 + v42;
                outlined init with take of AppSelectionSignalComponent((long long *)(v145 + v42), (uint64_t)&v155);
                BOOL v45 = *(void *)(v145 + v41 + 32);
                unint64_t v46 = *(_OWORD *)(v145 + v41 + 16);
                *(_OWORD *)uint64_t v44 = *(_OWORD *)(v145 + v41);
                *(_OWORD *)(v44 + 16) = v46;
                *(void *)(v44 + 32) = v45;
                uint64_t result = outlined init with take of AppSelectionSignalComponent(&v155, v145 + v41);
              }
              ++v40;
              v41 -= 40;
              v42 += 40;
            }
            while (v40 < v43);
            Swift::Int v7 = v39;
            uint64_t v8 = v147;
            Swift::Int v9 = v149;
          }
          goto LABEL_48;
        }
LABEL_187:
        __break(1u);
LABEL_188:
        __break(1u);
LABEL_189:
        __break(1u);
LABEL_190:
        __break(1u);
LABEL_191:
        __break(1u);
LABEL_192:
        __break(1u);
        return result;
      }
LABEL_48:
      if (v6 < v8)
      {
        if (__OFSUB__(v6, v9)) {
          goto LABEL_183;
        }
        if (v6 - v9 < v141)
        {
          if (__OFADD__(v9, v141)) {
            goto LABEL_185;
          }
          if (v9 + v141 >= v8) {
            uint64_t v47 = v8;
          }
          else {
            uint64_t v47 = v9 + v141;
          }
          if (v47 < v9)
          {
LABEL_186:
            __break(1u);
            goto LABEL_187;
          }
          if (v6 == v47) {
            goto LABEL_89;
          }
          v146 = v7;
          v148 = v47;
          uint64_t v48 = 40 * v6 - 40;
LABEL_58:
          uint64_t v49 = v48;
          while (1)
          {
            uint64_t v50 = *v158 + v49;
            outlined init with copy of SignalProviding(v50 + 40, (uint64_t)&v155);
            outlined init with copy of SignalProviding(v50, (uint64_t)v152);
            uint64_t v51 = v156;
            uint64_t v52 = v157;
            __swift_project_boxed_opaque_existential_1(&v155, v156);
            uint64_t v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 40))(v51, v52);
            if (!v54)
            {
LABEL_86:
              __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
              uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
LABEL_87:
              ++v6;
              v48 += 40;
              Swift::Int v9 = v149;
              if (v6 == v148)
              {
                uint64_t v6 = v148;
                Swift::Int v7 = v146;
                break;
              }
              goto LABEL_58;
            }
            BOOL v55 = v53;
            uint64_t v56 = v54;
            char v57 = v153;
            int v58 = v154;
            __swift_project_boxed_opaque_existential_1(v152, v153);
            uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 40))(v57, v58);
            if (!v60) {
              goto LABEL_85;
            }
            uint64_t v61 = v55 == v59 && v56 == v60;
            if (!v61 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
              goto LABEL_72;
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            BOOL v62 = v156;
            uint64_t v63 = v157;
            __swift_project_boxed_opaque_existential_1(&v155, v156);
            uint64_t v64 = ActionProtocol.actionRepresentation.getter(v62, v63);
            uint64_t v66 = v65;
            uint64_t v67 = v153;
            uint64_t v68 = v154;
            __swift_project_boxed_opaque_existential_1(v152, v153);
            uint64_t v69 = ActionProtocol.actionRepresentation.getter(v67, v68);
            uint64_t v71 = v70;
            if (v66)
            {
              if (v70)
              {
                if (v64 == v69 && v66 == v70)
                {
                  swift_bridgeObjectRelease();
LABEL_85:
                  swift_bridgeObjectRelease();
                  goto LABEL_86;
                }
LABEL_72:
                unint64_t v73 = _stringCompareWithSmolCheck(_:_:expecting:)();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
                uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
                if ((v73 & 1) == 0) {
                  goto LABEL_87;
                }
                goto LABEL_81;
              }
              swift_bridgeObjectRelease();
            }
            if (one-time initialization token for ranker != -1) {
              swift_once();
            }
            v74 = type metadata accessor for Logger();
            __swift_project_value_buffer(v74, (uint64_t)static Logger.ranker);
            uint64_t v75 = Logger.logObject.getter();
            v76 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v75, v76))
            {
              uint64_t v77 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v77 = 0;
              _os_log_impl(&dword_1C9CFE000, v75, v76, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v77, 2u);
              MEMORY[0x1CB78E290](v77, -1, -1);
            }

            if (v71) {
              goto LABEL_85;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v152);
            uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v155);
LABEL_81:
            unint64_t v78 = *v158;
            if (!*v158) {
              goto LABEL_189;
            }
            v79 = v78 + v49;
            outlined init with take of AppSelectionSignalComponent((long long *)(v78 + v49 + 40), (uint64_t)&v155);
            v80 = *(_OWORD *)(v79 + 16);
            *(_OWORD *)(v79 + 40) = *(_OWORD *)v79;
            *(_OWORD *)(v79 + 56) = v80;
            *(void *)(v79 + 72) = *(void *)(v79 + 32);
            uint64_t result = outlined init with take of AppSelectionSignalComponent(&v155, v79);
            v49 -= 40;
            if (v6 == ++v9) {
              goto LABEL_87;
            }
          }
        }
      }
LABEL_89:
      if (v6 < v9) {
        goto LABEL_181;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v7 + 16) + 1, 1, (char *)v7);
        Swift::Int v7 = result;
      }
      Swift::Int v82 = *(void *)(v7 + 16);
      uint64_t v81 = *(void *)(v7 + 24);
      v83 = v82 + 1;
      if (v82 >= v81 >> 1)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v81 > 1), v82 + 1, 1, (char *)v7);
        Swift::Int v7 = result;
      }
      *(void *)(v7 + 16) = v83;
      v84 = v7 + 32;
      uint64_t v85 = (uint64_t *)(v7 + 32 + 16 * v82);
      *uint64_t v85 = v149;
      v85[1] = v6;
      if (v82)
      {
        while (2)
        {
          unint64_t v86 = v83 - 1;
          if (v83 >= 4)
          {
            unint64_t v91 = v84 + 16 * v83;
            uint64_t v92 = *(void *)(v91 - 64);
            v93 = *(void *)(v91 - 56);
            v97 = __OFSUB__(v93, v92);
            uint64_t v94 = v93 - v92;
            if (v97) {
              goto LABEL_166;
            }
            uint64_t v96 = *(void *)(v91 - 48);
            uint64_t v95 = *(void *)(v91 - 40);
            v97 = __OFSUB__(v95, v96);
            uint64_t v89 = v95 - v96;
            v90 = v97;
            if (v97) {
              goto LABEL_167;
            }
            uint64_t v98 = v83 - 2;
            v99 = (uint64_t *)(v84 + 16 * (v83 - 2));
            v101 = *v99;
            v100 = v99[1];
            v97 = __OFSUB__(v100, v101);
            v102 = v100 - v101;
            if (v97) {
              goto LABEL_168;
            }
            v97 = __OFADD__(v89, v102);
            v103 = v89 + v102;
            if (v97) {
              goto LABEL_170;
            }
            if (v103 >= v94)
            {
              v121 = (uint64_t *)(v84 + 16 * v86);
              v123 = *v121;
              v122 = v121[1];
              v97 = __OFSUB__(v122, v123);
              v124 = v122 - v123;
              if (v97) {
                goto LABEL_176;
              }
              v114 = v89 < v124;
            }
            else
            {
LABEL_108:
              if (v90) {
                goto LABEL_169;
              }
              uint64_t v98 = v83 - 2;
              v104 = (uint64_t *)(v84 + 16 * (v83 - 2));
              v106 = *v104;
              v105 = v104[1];
              v107 = __OFSUB__(v105, v106);
              v108 = v105 - v106;
              v109 = v107;
              if (v107) {
                goto LABEL_171;
              }
              v110 = (uint64_t *)(v84 + 16 * v86);
              v112 = *v110;
              v111 = v110[1];
              v97 = __OFSUB__(v111, v112);
              v113 = v111 - v112;
              if (v97) {
                goto LABEL_173;
              }
              if (__OFADD__(v108, v113)) {
                goto LABEL_175;
              }
              if (v108 + v113 < v89) {
                goto LABEL_120;
              }
              v114 = v89 < v113;
            }
            if (v114) {
              unint64_t v86 = v98;
            }
          }
          else
          {
            if (v83 == 3)
            {
              uint64_t v88 = *(void *)(v7 + 32);
              uint64_t v87 = *(void *)(v7 + 40);
              v97 = __OFSUB__(v87, v88);
              uint64_t v89 = v87 - v88;
              v90 = v97;
              goto LABEL_108;
            }
            v115 = *(void *)(v7 + 32);
            v116 = *(void *)(v7 + 40);
            v97 = __OFSUB__(v116, v115);
            v108 = v116 - v115;
            v109 = v97;
LABEL_120:
            if (v109) {
              goto LABEL_172;
            }
            v117 = (uint64_t *)(v84 + 16 * v86);
            v119 = *v117;
            v118 = v117[1];
            v97 = __OFSUB__(v118, v119);
            v120 = v118 - v119;
            if (v97) {
              goto LABEL_174;
            }
            if (v120 < v108) {
              goto LABEL_137;
            }
          }
          v125 = v86 - 1;
          if (v86 - 1 >= v83)
          {
            __break(1u);
LABEL_163:
            __break(1u);
LABEL_164:
            __break(1u);
LABEL_165:
            __break(1u);
LABEL_166:
            __break(1u);
LABEL_167:
            __break(1u);
LABEL_168:
            __break(1u);
LABEL_169:
            __break(1u);
LABEL_170:
            __break(1u);
LABEL_171:
            __break(1u);
LABEL_172:
            __break(1u);
LABEL_173:
            __break(1u);
LABEL_174:
            __break(1u);
LABEL_175:
            __break(1u);
LABEL_176:
            __break(1u);
LABEL_177:
            __break(1u);
LABEL_178:
            __break(1u);
LABEL_179:
            __break(1u);
LABEL_180:
            __break(1u);
LABEL_181:
            __break(1u);
LABEL_182:
            __break(1u);
LABEL_183:
            __break(1u);
LABEL_184:
            __break(1u);
LABEL_185:
            __break(1u);
            goto LABEL_186;
          }
          if (!*v158) {
            goto LABEL_190;
          }
          v126 = v7;
          v127 = (uint64_t *)(v84 + 16 * v125);
          v128 = *v127;
          v129 = (void *)(v84 + 16 * v86);
          v130 = v129[1];
          uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)(*v158 + 40 * *v127, *v158 + 40 * *v129, *v158 + 40 * v130, v150);
          if (v151)
          {
LABEL_142:
            uint64_t result = swift_bridgeObjectRelease();
            v132 = v143;
            goto LABEL_143;
          }
          if (v130 < v128) {
            goto LABEL_163;
          }
          if (v86 > *(void *)(v126 + 16)) {
            goto LABEL_164;
          }
          *v127 = v128;
          *(void *)(v84 + 16 * v125 + 8) = v130;
          v131 = *(void *)(v126 + 16);
          if (v86 >= v131) {
            goto LABEL_165;
          }
          Swift::Int v7 = v126;
          v83 = v131 - 1;
          uint64_t result = (uint64_t)memmove((void *)(v84 + 16 * v86), v129 + 2, 16 * (v131 - 1 - v86));
          *(void *)(v126 + 16) = v131 - 1;
          if (v131 <= 2) {
            goto LABEL_137;
          }
          continue;
        }
      }
      v83 = 1;
LABEL_137:
      uint64_t v8 = v158[1];
      if (v6 >= v8) {
        goto LABEL_146;
      }
    }
  }
  Swift::Int v7 = MEMORY[0x1E4FBC860];
  v83 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_146:
  if (v83 >= 2)
  {
    v133 = *v158;
    do
    {
      v134 = v83 - 2;
      if (v83 < 2) {
        goto LABEL_177;
      }
      if (!v133) {
        goto LABEL_192;
      }
      v135 = v7;
      v136 = v7 + 32;
      v137 = *(void *)(v7 + 32 + 16 * v134);
      v138 = *(void *)(v7 + 32 + 16 * (v83 - 1) + 8);
      uint64_t result = specialized _merge<A>(low:mid:high:buffer:by:)(v133 + 40 * v137, v133 + 40 * *(void *)(v136 + 16 * (v83 - 1)), v133 + 40 * v138, v150);
      if (v151) {
        goto LABEL_142;
      }
      if (v138 < v137) {
        goto LABEL_178;
      }
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v135);
        v135 = result;
      }
      if (v134 >= *(void *)(v135 + 16)) {
        goto LABEL_179;
      }
      v139 = (void *)(v135 + 32 + 16 * v134);
      *v139 = v137;
      v139[1] = v138;
      v140 = *(void *)(v135 + 16);
      if (v83 > v140) {
        goto LABEL_180;
      }
      Swift::Int v7 = v135;
      uint64_t result = (uint64_t)memmove((void *)(v135 + 32 + 16 * (v83 - 1)), (const void *)(v135 + 32 + 16 * v83), 16 * (v140 - v83));
      *(void *)(v135 + 16) = v140 - 1;
      v83 = v140 - 1;
    }
    while (v140 > 2);
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (v143 < -1) {
    goto LABEL_188;
  }
  *(void *)(v142 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = a3;
    uint64_t v6 = result;
    uint64_t v7 = *a4;
    uint64_t v8 = *a4 + 16 * a3;
    while (2)
    {
      Swift::Int v9 = (uint64_t *)(v7 + 16 * v4);
      uint64_t result = *v9;
      uint64_t v10 = v9[1];
      uint64_t v11 = v6;
      unint64_t v12 = (uint64_t *)v8;
      do
      {
        if (result == *(v12 - 2) && v10 == *(v12 - 1)) {
          break;
        }
        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((result & 1) == 0) {
          break;
        }
        if (!v7)
        {
          __break(1u);
          return result;
        }
        uint64_t result = *v12;
        uint64_t v10 = v12[1];
        *(_OWORD *)unint64_t v12 = *((_OWORD *)v12 - 1);
        *(v12 - 1) = v10;
        *(v12 - 2) = result;
        v12 -= 2;
        ++v11;
      }
      while (v4 != v11);
      ++v4;
      v8 += 16;
      if (v4 != a2) {
        continue;
      }
      break;
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  long long v38;
  uint64_t v40;
  void v41[3];
  uint64_t v42;
  uint64_t v43;
  long long v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  uint64_t v40 = result;
  if (a3 == a2) {
    return result;
  }
  uint64_t v5 = a3;
  uint64_t v6 = 40 * a3 - 40;
  while (2)
  {
    uint64_t v7 = v40;
    uint64_t v47 = v6;
    while (1)
    {
      uint64_t v8 = *a4 + v6;
      outlined init with copy of SignalProviding(v8 + 40, (uint64_t)&v44);
      outlined init with copy of SignalProviding(v8, (uint64_t)v41);
      Swift::Int v9 = v45;
      uint64_t v10 = v46;
      __swift_project_boxed_opaque_existential_1(&v44, v45);
      uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(v9, v10);
      if (!v12) {
        break;
      }
      char v13 = v11;
      int v14 = v12;
      uint64_t v16 = v42;
      Swift::Int v15 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 40))(v16, v15);
      if (!v18) {
        goto LABEL_30;
      }
      Swift::Int v19 = v13 == v17 && v14 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
        goto LABEL_17;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = v45;
      uint64_t v21 = v46;
      __swift_project_boxed_opaque_existential_1(&v44, v45);
      Swift::Int v22 = ActionProtocol.actionRepresentation.getter(v20, v21);
      uint64_t v24 = v23;
      uint64_t v25 = v42;
      uint64_t v26 = v43;
      __swift_project_boxed_opaque_existential_1(v41, v42);
      Swift::Int v27 = ActionProtocol.actionRepresentation.getter(v25, v26);
      unint64_t v29 = v28;
      if (v24)
      {
        if (v28)
        {
          if (v22 == v27 && v24 == v28)
          {
            swift_bridgeObjectRelease();
LABEL_30:
            swift_bridgeObjectRelease();
            break;
          }
LABEL_17:
          unint64_t v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
          uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
          if ((v31 & 1) == 0) {
            goto LABEL_32;
          }
          goto LABEL_26;
        }
        swift_bridgeObjectRelease();
      }
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      __swift_project_value_buffer(v32, (uint64_t)static Logger.ranker);
      uint64_t v33 = Logger.logObject.getter();
      unint64_t v34 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v35 = 0;
        _os_log_impl(&dword_1C9CFE000, v33, v34, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v35, 2u);
        MEMORY[0x1CB78E290](v35, -1, -1);
      }

      if (v29) {
        goto LABEL_30;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
LABEL_26:
      uint64_t v36 = *a4;
      if (!*a4)
      {
        __break(1u);
        return result;
      }
      uint64_t v37 = v36 + v6;
      outlined init with take of AppSelectionSignalComponent((long long *)(v36 + v6 + 40), (uint64_t)&v44);
      char v38 = *(_OWORD *)(v37 + 16);
      *(_OWORD *)(v37 + 40) = *(_OWORD *)v37;
      *(_OWORD *)(v37 + 56) = v38;
      *(void *)(v37 + 72) = *(void *)(v37 + 32);
      uint64_t result = outlined init with take of AppSelectionSignalComponent(&v44, v37);
      v6 -= 40;
      if (v5 == ++v7) {
        goto LABEL_32;
      }
    }
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v41);
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v44);
LABEL_32:
    ++v5;
    uint64_t v6 = v47 + 40;
    if (v5 != a2) {
      continue;
    }
    return result;
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4)
{
  uint64_t v4 = a4;
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = a2 - a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    unint64_t v12 = (unint64_t)&v4[16 * v11];
    if (v7 >= v6 || v10 < 16) {
      goto LABEL_47;
    }
    Swift::String v18 = (char *)(a3 - 16);
    while (1)
    {
      Swift::Int v19 = v18 + 16;
      uint64_t v20 = (char *)(v12 - 16);
      BOOL v21 = *(void *)(v12 - 16) == *((void *)v6 - 2) && *(void *)(v12 - 8) == *((void *)v6 - 1);
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        BOOL v23 = v19 != (char *)v12 || (unint64_t)v18 >= v12;
        v12 -= 16;
        if (!v23) {
          goto LABEL_43;
        }
      }
      else
      {
        BOOL v22 = v19 != v6 || v18 >= v6;
        uint64_t v20 = v6 - 16;
        v6 -= 16;
        if (!v22) {
          goto LABEL_43;
        }
      }
      *(_OWORD *)Swift::String v18 = *(_OWORD *)v20;
LABEL_43:
      v18 -= 16;
      if (v6 <= v7 || v12 <= (unint64_t)v4) {
        goto LABEL_47;
      }
    }
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  unint64_t v12 = (unint64_t)&v4[16 * v9];
  if ((unint64_t)v6 < a3 && v8 >= 16)
  {
    while (1)
    {
      BOOL v14 = *(void *)v6 == *(void *)v4 && *((void *)v6 + 1) == *((void *)v4 + 1);
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        break;
      }
      Swift::Int v15 = v4;
      BOOL v14 = v7 == v4;
      v4 += 16;
      if (!v14) {
        goto LABEL_15;
      }
LABEL_16:
      v7 += 16;
      if ((unint64_t)v4 >= v12 || (unint64_t)v6 >= a3) {
        goto LABEL_21;
      }
    }
    Swift::Int v15 = v6;
    BOOL v14 = v7 == v6;
    v6 += 16;
    if (v14) {
      goto LABEL_16;
    }
LABEL_15:
    *(_OWORD *)uint64_t v7 = *(_OWORD *)v15;
    goto LABEL_16;
  }
LABEL_21:
  uint64_t v6 = v7;
LABEL_47:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v4, (uint64_t)(v12 - (void)v4) / 16, v6);
  return 1;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v12 = v10 + 32;
  char v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || &v13[16 * v8] <= v12) {
      memmove(v12, v13, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (__dst != __src || &__src[16 * a2] <= __dst) {
    return (char *)memmove(__dst, __src, 16 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[24 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 24 * a2);
  }
  return __src;
}

{
  uint64_t v3;

  if (a2 < 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[4 * a2] <= __dst)
  {
    return (char *)memmove(__dst, __src, 4 * a2);
  }
  return __src;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *char v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  size_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *size_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for FeatureDictionaryError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for FeatureDictionaryError()
{
  return swift_bridgeObjectRelease();
}

void *assignWithCopy for FeatureDictionaryError(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for FeatureDictionaryError(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTag for FeatureDictionaryError()
{
  return 0;
}

ValueMetadata *type metadata accessor for FeatureDictionaryError()
{
  return &type metadata for FeatureDictionaryError;
}

uint64_t OUTLINED_FUNCTION_0_4(uint64_t a1)
{
  return a1 - 8;
}

uint64_t initializeBufferWithCopyOfBuffer for MixingModel(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a1 = *a2;
  uint64_t v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t destroy for MixingModel(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MixingModel(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 64) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 40, a2 + 40);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for MixingModel(uint64_t *a1, uint64_t *a2)
{
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v3 = result;
    uint64_t v4 = result[3];
    uint64_t v5 = a2[3];
    if (v4 == v5)
    {
      uint64_t v10 = *(void *)(v4 - 8);
      if ((*(unsigned char *)(v10 + 82) & 2) != 0)
      {
        uint64_t v12 = *a2;
        swift_retain();
        uint64_t result = (uint64_t *)swift_release();
        *uint64_t v3 = v12;
      }
      else
      {
        size_t v11 = *(uint64_t (**)(void))(v10 + 24);
        return (uint64_t *)v11();
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      uint64_t v6 = *(void *)(v4 - 8);
      uint64_t v7 = *(void *)(v5 - 8);
      uint64_t v8 = v7;
      int v9 = *(_DWORD *)(v7 + 80);
      if ((*(unsigned char *)(v6 + 82) & 2) != 0)
      {
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(unsigned char *, uint64_t *, uint64_t))(v6 + 32))(v13, result, v4);
        if ((v9 & 0x20000) != 0)
        {
          *uint64_t v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v13, v4);
      }
    }
  }
  return result;
}

void *__swift_memcpy88_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x58uLL);
}

uint64_t assignWithTake for MixingModel(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  __swift_destroy_boxed_opaque_existential_1(a1 + 40);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MixingModel(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 88))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MixingModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 88) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MixingModel()
{
  return &type metadata for MixingModel;
}

uint64_t static AppLaunchCountFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for APP_LAUNCH_COUNT != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

uint64_t AppLaunchCountFeatureExtractor.extractAppLaunchCount(from:)(void *a1)
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  Swift::String_optional v3 = ActionProtocol.inferBundleId()();
  if (v3.value._object)
  {
    __swift_project_boxed_opaque_existential_1(v1, v1[3]);
    type metadata accessor for AppLaunchCountSignal();
    uint64_t v4 = MEMORY[0x1CB78C980]();
    uint64_t v5 = SiriSignalsContainer.get(from:query:defaultVal:)(v4, v3.value._countAndFlagsBits, (unint64_t)v3.value._object, 0);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v8 = v5;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v9 = specialized _NativeDictionary.mapValues<A>(_:)(v8);
      swift_bridgeObjectRelease();
      return (uint64_t)v9;
    }
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v7 = 0xD000000000000022;
    *(void *)(v7 + 8) = 0x80000001C9DA2AA0;
    *(unsigned char *)(v7 + 16) = 1;
    return swift_willThrow();
  }
}

uint64_t AppLaunchCountFeatureExtractor.extractImpl(from:)(void *a1)
{
  return AppLaunchCountFeatureExtractor.extractAppLaunchCount(from:)(a1);
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AppLaunchCountFeatureExtractor(void *a1)
{
  return AppLaunchCountFeatureExtractor.extractImpl(from:)(a1);
}

void *__swift_project_boxed_opaque_existential_1(void *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0) {
    return (void *)(*result
  }
                    + ((*(_DWORD *)(*(void *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(void *)(a2 - 8) + 80)));
  return result;
}

unint64_t lazy protocol witness table accessor for type CaarError and conformance CaarError()
{
  unint64_t result = lazy protocol witness table cache variable for type CaarError and conformance CaarError;
  if (!lazy protocol witness table cache variable for type CaarError and conformance CaarError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CaarError and conformance CaarError);
  }
  return result;
}

uint64_t initializeWithCopy for AppLaunchCountFeatureExtractor(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t *assignWithCopy for AppLaunchCountFeatureExtractor(uint64_t *a1, uint64_t *a2)
{
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for AppLaunchCountFeatureExtractor(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLaunchCountFeatureExtractor(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 40))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 24);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppLaunchCountFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AppLaunchCountFeatureExtractor()
{
  return &type metadata for AppLaunchCountFeatureExtractor;
}

uint64_t one-time initialization function for modelOutputToAutoConfirmAction()
{
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static AutoSendOutput.modelOutputToAutoConfirmAction = result;
  return result;
}

uint64_t AutoSendOutput.init(decision:score:threshold:)(uint64_t a1, double a2, double a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = one-time initialization token for modelOutputToAutoConfirmAction;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  uint64_t v9 = static AutoSendOutput.modelOutputToAutoConfirmAction;
  if (*(void *)(static AutoSendOutput.modelOutputToAutoConfirmAction + 16)
    && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v11 & 1) != 0))
  {
    char v12 = *(unsigned char *)(*(void *)(v9 + 56) + v10);
    *(unsigned char *)(v4 + 57) = v12;
    *(unsigned char *)(v4 + 56) = v12;
    swift_release();
    return CamLogOutput.init(prediction:score:threshold:)(a1, a2, a3);
  }
  else
  {
    swift_release();
    v22[0] = 0;
    v22[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(70);
    v14._object = (void *)0x80000001C9DA2B10;
    v14._uint64_t countAndFlagsBits = 0xD000000000000044;
    String.append(_:)(v14);
    uint64_t v23 = a1;
    v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain_n();
    int64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      int64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      v22[0] = v20;
      *(_DWORD *)int64_t v19 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v17, v18, "%s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v20, -1, -1);
      MEMORY[0x1CB78E290](v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
    swift_allocError();
    *(void *)uint64_t v21 = 0;
    *(void *)(v21 + 8) = 0xE000000000000000;
    *(unsigned char *)(v21 + 16) = 5;
    swift_willThrow();
    type metadata accessor for AutoSendOutput();
    return swift_deallocPartialClassInstance();
  }
}

Swift::Void __swiftcall AutoSendOutput.overrideAction(action:enforcer:)(SiriCam::AutoConfirmAction action, Swift::String enforcer)
{
  *(unsigned char *)(v2 + 57) = *(unsigned char *)action;
  *(Swift::String *)(v2 + 40) = enforcer;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
}

uint64_t AutoSendOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 58, 7);
}

uint64_t type metadata accessor for AutoSendOutput()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError;
  if (!lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmError and conformance AutoConfirmError);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for AutoSendInput(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    uint64_t v9 = a3[5];
    uint64_t v10 = a3[6];
    char v11 = *(void **)&a2[v9];
    *(void *)&a1[v9] = v11;
    char v12 = &a1[v10];
    uint64_t v13 = &a2[v10];
    uint64_t v14 = *((void *)v13 + 1);
    *(void *)char v12 = *(void *)v13;
    *((void *)v12 + 1) = v14;
    uint64_t v15 = a3[8];
    a1[a3[7]] = a2[a3[7]];
    uint64_t v16 = &a1[v15];
    int64_t v17 = &a2[v15];
    id v18 = v11;
    swift_bridgeObjectRetain();
    v8(v16, v17, v7);
  }
  return a1;
}

uint64_t destroy for AutoSendInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);

  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  return v7(v5, v4);
}

uint64_t initializeWithCopy for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = a3[6];
  uint64_t v10 = *(void **)(a2 + v8);
  *(void *)(a1 + v8) = v10;
  char v11 = (void *)(a1 + v9);
  char v12 = (void *)(a2 + v9);
  uint64_t v13 = v12[1];
  *char v11 = *v12;
  v11[1] = v13;
  uint64_t v14 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v15 = a1 + v14;
  uint64_t v16 = a2 + v14;
  id v17 = v10;
  swift_bridgeObjectRetain();
  v7(v15, v16, v6);
  return a1;
}

uint64_t assignWithCopy for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = *(void **)(a2 + v8);
  uint64_t v10 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  id v11 = v9;

  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  v7(a1 + a3[8], a2 + a3[8], v6);
  return a1;
}

uint64_t initializeWithTake for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  uint64_t v8 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  v7(a1 + v9, a2 + v9, v6);
  return a1;
}

uint64_t assignWithTake for AutoSendInput(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = *(void **)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);

  uint64_t v10 = a3[6];
  id v11 = (void *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *id v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  v7(a1 + v15, a2 + v15, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendInput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D09FE0);
}

uint64_t sub_1C9D09FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for AutoSendInput(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D0A080);
}

void sub_1C9D0A080(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for AutoSendInput()
{
  uint64_t result = type metadata singleton initialization cache for AutoSendInput;
  if (!type metadata singleton initialization cache for AutoSendInput) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoSendInput()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoSendOutputProvider()
{
  return &type metadata for AutoSendOutputProvider;
}

void AutoSendOutputProvider.toAutoSendOutput(from:)(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1CB78D210](0xD00000000000001ALL, 0x80000001C9DA2B60);
  id v3 = objc_msgSend(a1, sel_featureValueForName_, v2);

  if (v3 && (id v4 = objc_msgSend(v3, sel_multiArrayValue), v3, v4))
  {
    double v5 = MLMultiArray.toDoubleScalar()();

    if (v6) {
      return;
    }
    unint64_t v7 = 0xD00000000000001ELL;
    OUTLINED_FUNCTION_1_1();
    uint64_t v9 = v8;
    id v10 = objc_msgSend(a1, sel_objectForKeyedSubscript_, v8);

    if (v10
      && (id v11 = objc_msgSend(v10, sel_multiArrayValue), v10, v11))
    {
      double v12 = MLMultiArray.toDoubleScalar()();

      if (v13) {
        return;
      }
      unint64_t v7 = 0xD00000000000001DLL;
      OUTLINED_FUNCTION_1_1();
      uint64_t v15 = v14;
      id v16 = objc_msgSend(a1, sel_featureValueForName_, v14);

      if (v16)
      {
        id v17 = objc_msgSend(v16, sel_multiArrayValue);

        if (v17)
        {
          Swift::Int v18 = MLMultiArray.toIntScalar()();

          if (!v19)
          {
            type metadata accessor for AutoSendOutput();
            swift_allocObject();
            AutoSendOutput.init(decision:score:threshold:)(v18, v5, v12);
          }
          return;
        }
      }
      OUTLINED_FUNCTION_0_5();
      _StringGuts.grow(_:)(63);
      unint64_t v31 = 0xD00000000000003DLL;
      uint64_t v32 = "Unable to retrieve model decision from output feature name : ";
    }
    else
    {
      OUTLINED_FUNCTION_0_5();
      _StringGuts.grow(_:)(58);
      unint64_t v31 = 0xD000000000000038;
      uint64_t v32 = "Unable to retrieve model threshold from output feature: ";
    }
    unint64_t v33 = (unint64_t)(v32 - 32) | 0x8000000000000000;
    String.append(_:)(*(Swift::String *)&v31);
    unint64_t v21 = v7;
    unint64_t v22 = (unint64_t)v4;
  }
  else
  {
    OUTLINED_FUNCTION_0_5();
    _StringGuts.grow(_:)(60);
    v20._uint64_t countAndFlagsBits = 0xD00000000000003ALL;
    v20._object = (void *)0x80000001C9DA2B80;
    String.append(_:)(v20);
    unint64_t v21 = 0xD00000000000001ALL;
    unint64_t v22 = 0x80000001C9DA2B60;
  }
  String.append(_:)(*(Swift::String *)&v21);
  uint64_t v23 = v34[0];
  unint64_t v24 = v34[1];
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.autoSend);
  swift_bridgeObjectRetain_n();
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v34[0] = v29;
    *(_DWORD *)uint64_t v28 = 136315138;
    swift_bridgeObjectRetain();
    v34[5] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v26, v27, "%s", v28, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v29, -1, -1);
    MEMORY[0x1CB78E290](v28, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
  swift_allocError();
  *(void *)uint64_t v30 = v23;
  *(void *)(v30 + 8) = v24;
  *(unsigned char *)(v30 + 16) = 5;
  swift_willThrow();
}

void OUTLINED_FUNCTION_1_1()
{
  JUMPOUT(0x1CB78D210);
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of ScoreHeuristic.requiredInputs.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ScoreHeuristic.score(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t RankerContext.rrCandidates.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t RankerContext.responseMode.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for RankerContext() + 20);
  uint64_t v4 = type metadata accessor for ResponseMode();
  double v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for RankerContext()
{
  uint64_t result = type metadata singleton initialization cache for RankerContext;
  if (!type metadata singleton initialization cache for RankerContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t RankerContext.previousConversationHandlerId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for RankerContext() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t RankerContext.maxNLProba.getter()
{
  return *(void *)(v0 + *(int *)(type metadata accessor for RankerContext() + 28));
}

uint64_t RankerContext.init(rrCandidates:responseMode:previousConversationHandlerId:maxNLProba:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, void *a7@<X8>)
{
  *a7 = a1;
  uint64_t v13 = (int *)type metadata accessor for RankerContext();
  uint64_t v14 = (char *)a7 + v13[5];
  uint64_t v15 = type metadata accessor for ResponseMode();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32))(v14, a2, v15);
  id v17 = (void *)((char *)a7 + v13[6]);
  *id v17 = a3;
  v17[1] = a4;
  Swift::Int v18 = (char *)a7 + v13[7];
  *(void *)Swift::Int v18 = a5;
  v18[8] = a6 & 1;
  return result;
}

uint64_t RankerContext.description.getter()
{
  _StringGuts.grow(_:)(100);
  v0._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
  v0._object = (void *)0x80000001C9DA2C80;
  String.append(_:)(v0);
  uint64_t v1 = type metadata accessor for RRCandidate();
  uint64_t v2 = swift_bridgeObjectRetain();
  v3._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v2, v1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001C9DA2CA0;
  v4._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v4);
  type metadata accessor for RankerContext();
  v5._uint64_t countAndFlagsBits = ResponseMode.aceValue.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x80000001C9DA2CC0;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x504C4E78616D202CLL;
  v8._object = (void *)0xEE00203A61626F72;
  String.append(_:)(v8);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  v9._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._uint64_t countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 0;
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 8))(a1);
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 16))();
}

uint64_t dispatch thunk of Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t *initializeBufferWithCopyOfBuffer for RankerContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    Swift::String v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    Swift::String v7 = a1;
    uint64_t v8 = a3[5];
    Swift::String v9 = (char *)a1 + v8;
    Swift::String v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for ResponseMode();
    double v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    uint64_t v13 = a3[6];
    uint64_t v14 = a3[7];
    uint64_t v15 = (uint64_t *)((char *)v7 + v13);
    id v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    Swift::Int v18 = (char *)v7 + v14;
    uint64_t v19 = (char *)a2 + v14;
    v18[8] = v19[8];
    *(void *)Swift::Int v18 = *(void *)v19;
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t destroy for RankerContext(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RankerContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  Swift::String v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ResponseMode();
  Swift::String v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (void *)((char *)a2 + v11);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  id v16 = (char *)a1 + v12;
  uint64_t v17 = (char *)a2 + v12;
  v16[8] = v17[8];
  *(void *)id v16 = *(void *)v17;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RankerContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  Swift::String v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = *(void *)v15;
  v14[8] = v15[8];
  *(void *)uint64_t v14 = v16;
  return a1;
}

void *initializeWithTake for RankerContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  Swift::String v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  v11[8] = v12[8];
  *(void *)uint64_t v11 = *(void *)v12;
  return a1;
}

void *assignWithTake for RankerContext(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  Swift::String v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  *(void *)uint64_t v16 = *(void *)v17;
  v16[8] = v17[8];
  return a1;
}

uint64_t getEnumTagSinglePayload for RankerContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D0B04C);
}

uint64_t sub_1C9D0B04C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for ResponseMode();
    uint64_t v9 = (uint64_t)a1 + *(int *)(a3 + 20);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for RankerContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D0B0E8);
}

void *sub_1C9D0B0E8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for ResponseMode();
    uint64_t v8 = (uint64_t)v5 + *(int *)(a4 + 20);
    return (void *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for RankerContext()
{
  uint64_t result = type metadata accessor for ResponseMode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t outlined copy of CaarError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CaarError(uint64_t a1)
{
  return outlined consume of CaarError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of CaarError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 3u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CaarError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CaarError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CaarError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CaarError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CaarError(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CaarError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CaarError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CaarError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFD && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 252;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 3) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CaarError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for CaarError(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for CaarError(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for CaarError()
{
  return &type metadata for CaarError;
}

id static MLMultiArray.make1DSetOrSequence(from:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    unsigned int v3 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v4 = *v3;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_1C9D9D280;
      *(void *)(v5 + 32) = v4;
      unint64_t v6 = *(void *)(v10 + 16);
      if (v6 >= *(void *)(v10 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v10 + 16) = v6 + 1;
      *(void *)(v10 + 8 * v6 + 32) = v5;
      ++v3;
      --v1;
    }
    while (v1);
  }
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  uint64_t v7 = OUTLINED_FUNCTION_13();
  id v8 = static MLMultiArray.make1DSetOrSequence(from:)(v7);
  swift_bridgeObjectRelease();
  return v8;
}

{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  unsigned int v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 16);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
    *(void *)(inited + 32) = 1;
    *(void *)(inited + 40) = v3;
    *(void *)(inited + 48) = v5;
    uint64_t v7 = specialized _arrayForceCast<A, B>(_:)(inited);
    swift_setDeallocating();
    uint64_t v1 = objc_allocWithZone(MEMORY[0x1E4F1E9A8]);
    id v8 = @nonobjc MLMultiArray.init(shape:dataType:)(v7, 65600);
    if (!v2)
    {
      uint64_t v1 = v8;
      swift_bridgeObjectRetain();
      uint64_t v9 = 0;
      uint64_t v17 = v4;
      do
      {
        uint64_t v10 = *(void *)(v4 + 8 * v9);
        uint64_t v11 = *(void *)(v10 + 16);
        if (v11)
        {
          swift_bridgeObjectRetain();
          for (i = 0; i != v11; ++i)
          {
            uint64_t v13 = *(double *)(v10 + 8 * i + 32);
            uint64_t v14 = swift_allocObject();
            *(_OWORD *)(v14 + 16) = xmmword_1C9D9CFB0;
            *(void *)(v14 + 32) = 0;
            *(void *)(v14 + 40) = v9;
            *(void *)(v14 + 48) = i;
            specialized MLMultiArray.safeAssign<A>(_:at:)(v14, v13);
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
        }
        uint64_t v4 = v17;
        ++v9;
      }
      while (v9 != v3);
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    OUTLINED_FUNCTION_3();
    *(void *)uint64_t v15 = 0xD000000000000037;
    *(void *)(v15 + 8) = 0x80000001C9DA2D20;
    *(unsigned char *)(v15 + 16) = 1;
    swift_willThrow();
  }
  return v1;
}

uint64_t static MLMultiArray.makeScalar(from:)(double a1)
{
  uint64_t v3 = specialized _arrayForceCast<A, B>(_:)((uint64_t)&outlined read-only object #0 of static MLMultiArray.makeScalar(from:));
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1E9A8]);
  @nonobjc MLMultiArray.init(shape:dataType:)(v3, 65600);
  if (!v1) {
    specialized MLMultiArray.safeAssign<A>(_:at:)((uint64_t)&outlined read-only object #1 of static MLMultiArray.makeScalar(from:), a1);
  }
  return OUTLINED_FUNCTION_13();
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toDoubleScalar()()
{
  if (objc_msgSend(v0, sel_count) == (id)1)
  {
    id v1 = objc_msgSend(v0, sel_objectAtIndexedSubscript_, 0);
    Double.init(truncating:)();
    double v3 = v2;

    return v3;
  }
  else
  {
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_14();
    id v5 = objc_msgSend(v0, sel_shape);
    type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
    uint64_t v6 = OUTLINED_FUNCTION_19();

    v9._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v6);
    OUTLINED_FUNCTION_12(v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_0((uint64_t)" is not a scalar");
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v7 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_4_0(v7, v8);
  }
  return result;
}

Swift::Int __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toIntScalar()()
{
  if (objc_msgSend(v0, sel_count) == (id)1)
  {
    id v1 = objc_msgSend(v0, sel_objectAtIndexedSubscript_, 0);
    Swift::Int v2 = Int.init(truncating:)();

    return v2;
  }
  else
  {
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_14();
    id v4 = objc_msgSend(v0, sel_shape);
    type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
    uint64_t v5 = OUTLINED_FUNCTION_19();

    v8._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v5);
    OUTLINED_FUNCTION_12(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_0((uint64_t)" is not a scalar");
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v6 = OUTLINED_FUNCTION_3();
    return OUTLINED_FUNCTION_4_0(v6, v7);
  }
}

uint64_t MLMultiArrayDataType.description.getter(uint64_t a1)
{
  uint64_t v1 = 0x656C62756F64;
  uint64_t v2 = 0x6E776F6E6B6E75;
  if (a1 == 65552) {
    uint64_t v2 = 0x363174616F6C66;
  }
  if (a1 != 65600) {
    uint64_t v1 = v2;
  }
  if (a1 == 65568) {
    uint64_t v1 = 0x323374616F6C66;
  }
  if (a1 == 131104) {
    return 0x3233746E69;
  }
  else {
    return v1;
  }
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLMultiArrayDataType()
{
  return MLMultiArrayDataType.description.getter(*v0);
}

void specialized MLMultiArray.safeAssign<A>(_:at:)(uint64_t a1, double a2)
{
  char v6 = MLMultiArray.indexExists(_:)(a1);
  if (!v3)
  {
    if (v6)
    {
      uint64_t v7 = (void *)MEMORY[0x1CB78D4D0](a2);
      specialized _arrayForceCast<A, B>(_:)(a1);
      type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setObject_forKeyedSubscript_, v7, isa);
    }
    else
    {
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v9._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](a1, MEMORY[0x1E4FBB550]);
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v10._object = (void *)0x80000001C9DA2D60;
      v10._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v10);
      id v11 = objc_msgSend(v2, sel_shape);
      uint64_t v12 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v14._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v13, v12);
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
      swift_allocError();
      *(void *)uint64_t v15 = 0x207865646E49;
      *(void *)(v15 + 8) = 0xE600000000000000;
      *(unsigned char *)(v15 + 16) = 2;
      swift_willThrow();
    }
  }
}

void specialized MLMultiArray.safeAssign<A>(_:at:)(uint64_t a1, uint64_t a2)
{
  char v5 = MLMultiArray.indexExists(_:)(a2);
  if (!v3)
  {
    if (v5)
    {
      Class isa = Int._bridgeToObjectiveC()().super.super.isa;
      specialized _arrayForceCast<A, B>(_:)(a2);
      type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      Class v7 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v2, sel_setObject_forKeyedSubscript_, isa, v7);
    }
    else
    {
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease();
      v8._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](a2, MEMORY[0x1E4FBB550]);
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      v9._object = (void *)0x80000001C9DA2D60;
      v9._uint64_t countAndFlagsBits = 0xD00000000000001CLL;
      String.append(_:)(v9);
      id v10 = objc_msgSend(v2, sel_shape);
      uint64_t v11 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
      uint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v13._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v12, v11);
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
      swift_allocError();
      *(void *)uint64_t v14 = 0x207865646E49;
      *(void *)(v14 + 8) = 0xE600000000000000;
      *(unsigned char *)(v14 + 16) = 2;
      swift_willThrow();
    }
  }
}

uint64_t MLMultiArray.indexExists(_:)(uint64_t a1)
{
  uint64_t v2 = v1;
  id v4 = objc_msgSend(v2, sel_shape);
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v5 >> 62) {
    goto LABEL_18;
  }
  uint64_t v6 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v6)
  {
    unint64_t v7 = 0;
    while (1)
    {
      if ((v5 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x1CB78D7C0](v7, v5);
      }
      else {
        id v8 = *(id *)(v5 + 8 * v7 + 32);
      }
      Swift::String v9 = v8;
      uint64_t v10 = Int.init(exactly:)();
      if (v11)
      {
        swift_bridgeObjectRelease();
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease();
        id v14 = objc_msgSend(v9, sel_description);
        uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v17 = v16;

        v18._uint64_t countAndFlagsBits = v15;
        v18._object = v17;
        String.append(_:)(v18);
        swift_bridgeObjectRelease();
        v19._uint64_t countAndFlagsBits = 0x746E69206F7420;
        v19._object = (void *)0xE700000000000000;
        String.append(_:)(v19);
        lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
        swift_allocError();
        *(void *)uint64_t v20 = 0xD00000000000001ELL;
        *(void *)(v20 + 8) = 0x80000001C9DA2D80;
        *(unsigned char *)(v20 + 16) = 0;
        swift_willThrow();

        return v21 & 1;
      }
      if (v7 >= *(void *)(a1 + 16)) {
        break;
      }
      uint64_t v12 = *(void *)(a1 + 32 + 8 * v7);
      if (v12 < 0)
      {
        swift_bridgeObjectRelease();

LABEL_16:
        char v21 = 0;
        return v21 & 1;
      }
      uint64_t v13 = v10;

      if (v12 >= v13)
      {
        swift_bridgeObjectRelease();
        goto LABEL_16;
      }
      if (v6 == ++v7) {
        goto LABEL_19;
      }
    }
    __break(1u);
LABEL_18:
    swift_bridgeObjectRetain();
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
LABEL_19:
  swift_bridgeObjectRelease();
  char v21 = 1;
  return v21 & 1;
}

uint64_t specialized _arrayForceCast<A, B>(_:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = a1 + 32;
    do
    {
      v4 += 8;
      Int._bridgeToObjectiveC()();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v5;
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unsigned char v7[40];
  long long v8;
  uint64_t v9;

  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    Swift::String v9 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v4 = a1 + 32;
    uint64_t v2 = v9;
    do
    {
      outlined init with copy of SignalProviding(v4, (uint64_t)v7);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalProviding);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppSelectionSignalComponent);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v9;
      }
      uint64_t v5 = *(void *)(v2 + 16);
      if (v5 >= *(void *)(v2 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v2 = v9;
      }
      *(void *)(v2 + 16) = v5 + 1;
      outlined init with take of AppSelectionSignalComponent(&v8, v2 + 40 * v5 + 32);
      v4 += 40;
      --v1;
    }
    while (v1);
  }
  return v2;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *boxed_opaque_existential_1;
  long long v15;
  uint64_t v16;
  _UNKNOWN **v17;
  uint64_t v18;

  uint64_t v2 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_2();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  unint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = *(void *)(a1 + 16);
  Swift::String v9 = MEMORY[0x1E4FBC860];
  if (v8)
  {
    Swift::String v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    Swift::String v9 = v18;
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    char v11 = *(void *)(v4 + 72);
    do
    {
      outlined init with copy of RankedAction(v10, (uint64_t)v7);
      Swift::String v18 = v9;
      uint64_t v12 = *(void *)(v9 + 16);
      if (v12 >= *(void *)(v9 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        Swift::String v9 = v18;
      }
      uint64_t v16 = v2;
      uint64_t v17 = &protocol witness table for RankedAction;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v15);
      outlined init with copy of RankedAction((uint64_t)v7, (uint64_t)boxed_opaque_existential_1);
      *(void *)(v9 + 16) = v12 + 1;
      outlined init with take of AppSelectionSignalComponent(&v15, v9 + 40 * v12 + 32);
      outlined destroy of RankedAction((uint64_t)v7);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

id static MLMultiArray.makeScalar(from:)(uint64_t a1)
{
  uint64_t v3 = specialized _arrayForceCast<A, B>(_:)((uint64_t)&outlined read-only object #0 of static MLMultiArray.makeScalar(from:));
  id v4 = objc_allocWithZone(MEMORY[0x1E4F1E9A8]);
  id v5 = @nonobjc MLMultiArray.init(shape:dataType:)(v3, 131104);
  if (!v1) {
    specialized MLMultiArray.safeAssign<A>(_:at:)(a1, (uint64_t)&outlined read-only object #1 of static MLMultiArray.makeScalar(from:));
  }
  return v5;
}

Swift::Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MLMultiArray.toBoolScalar()()
{
  if (objc_msgSend(v0, sel_count) == (id)1)
  {
    id v1 = objc_msgSend(v0, sel_objectAtIndexedSubscript_, 0);
    char v2 = Bool.init(truncating:)();

    return v2 & 1;
  }
  else
  {
    OUTLINED_FUNCTION_7_0();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_15();
    OUTLINED_FUNCTION_14();
    id v4 = objc_msgSend(v0, sel_shape);
    type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
    uint64_t v5 = OUTLINED_FUNCTION_19();

    v8._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v5);
    OUTLINED_FUNCTION_12(v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_0((uint64_t)" is not a scalar");
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v6 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_4_0(v6, v7);
    return 0;
  }
}

uint64_t MLMultiArray.toDoubleArray()()
{
  if (OUTLINED_FUNCTION_2_0() != (id)65600)
  {
    OUTLINED_FUNCTION_0_5();
    _StringGuts.grow(_:)(38);
    int v7 = swift_bridgeObjectRelease();
    id v15 = OUTLINED_FUNCTION_0_6(v7, v8, v9, v10, v11, v12, v13, v14, v20, v21);
    v22._uint64_t countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_12(v22);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v16 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_11(v16, v17);
    return OUTLINED_FUNCTION_13();
  }
  id v1 = OUTLINED_FUNCTION_18();
  uint64_t v2 = specialized Array.init(repeating:count:)((uint64_t)v1, 0.0);
  id v3 = v0;
  objc_msgSend(v3, sel_dataPointer);
  unint64_t v4 = (unint64_t)OUTLINED_FUNCTION_22();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    id v3 = (id)v4;
    if (!v4) {
      return OUTLINED_FUNCTION_13();
    }
    OUTLINED_FUNCTION_20();
    if (!v5)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()();
  uint64_t v2 = v19;
LABEL_6:
  uint64_t v6 = 0;
  do
  {
    *(void *)(v2 + 8 * (void)v6 + 32) = *((void *)v0 + (void)v6);
    uint64_t v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
  return OUTLINED_FUNCTION_13();
}

uint64_t MLMultiArray.toIntArray()()
{
  if (OUTLINED_FUNCTION_2_0() != (id)131104)
  {
    OUTLINED_FUNCTION_0_5();
    _StringGuts.grow(_:)(35);
    int v7 = swift_bridgeObjectRelease();
    id v15 = OUTLINED_FUNCTION_0_6(v7, v8, v9, v10, v11, v12, v13, v14, v20, v21);
    v22._uint64_t countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_12(v22);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v16 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_11(v16, v17);
    return OUTLINED_FUNCTION_13();
  }
  id v1 = OUTLINED_FUNCTION_18();
  uint64_t v2 = specialized Array.init(repeating:count:)(0, (uint64_t)v1);
  id v3 = v0;
  objc_msgSend(v3, sel_dataPointer);
  unint64_t v4 = (unint64_t)OUTLINED_FUNCTION_22();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    id v3 = (id)v4;
    if (!v4) {
      return OUTLINED_FUNCTION_13();
    }
    OUTLINED_FUNCTION_20();
    if (!v5)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v2 = v19;
LABEL_6:
  uint64_t v6 = 0;
  do
  {
    *(_DWORD *)(v2 + 4 * (void)v6 + 32) = *((_DWORD *)v0 + (void)v6);
    uint64_t v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
  return OUTLINED_FUNCTION_13();
}

uint64_t MLMultiArray.toFloatArray()()
{
  if (OUTLINED_FUNCTION_2_0() != (id)65568)
  {
    OUTLINED_FUNCTION_0_5();
    _StringGuts.grow(_:)(37);
    int v7 = swift_bridgeObjectRelease();
    id v15 = OUTLINED_FUNCTION_0_6(v7, v8, v9, v10, v11, v12, v13, v14, v20, v21);
    v22._uint64_t countAndFlagsBits = MLMultiArrayDataType.description.getter((uint64_t)v15);
    OUTLINED_FUNCTION_12(v22);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
    uint64_t v16 = OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_11(v16, v17);
    return OUTLINED_FUNCTION_13();
  }
  id v1 = OUTLINED_FUNCTION_18();
  uint64_t v2 = specialized Array.init(repeating:count:)((uint64_t)v1, 0.0);
  id v3 = v0;
  objc_msgSend(v3, sel_dataPointer);
  unint64_t v4 = (unint64_t)OUTLINED_FUNCTION_22();
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    id v3 = (id)v4;
    if (!v4) {
      return OUTLINED_FUNCTION_13();
    }
    OUTLINED_FUNCTION_20();
    if (!v5)
    {
      if (swift_isUniquelyReferenced_nonNull_native()) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  __break(1u);
LABEL_13:
  specialized _ArrayBuffer._consumeAndCreateNew()(v2);
  uint64_t v2 = v19;
LABEL_6:
  uint64_t v6 = 0;
  do
  {
    *(_DWORD *)(v2 + 4 * (void)v6 + 32) = *((_DWORD *)v0 + (void)v6);
    uint64_t v6 = (char *)v6 + 1;
  }
  while (v3 != v6);
  return OUTLINED_FUNCTION_13();
}

BOOL static MLMultiArray.MLMultiArrayCodingKeys.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void MLMultiArray.MLMultiArrayCodingKeys.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570616873 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 1635017060 && a2 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.init(intValue:)()
{
  return 3;
}

Swift::Int MLMultiArray.MLMultiArrayCodingKeys.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.intValue.getter()
{
  return 0;
}

uint64_t MLMultiArray.MLMultiArrayCodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 0x6570616873;
  }
  if (a1 == 1) {
    return 0x6570795461746164;
  }
  return 1635017060;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLMultiArray.MLMultiArrayCodingKeys(char *a1, char *a2)
{
  return static MLMultiArray.MLMultiArrayCodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLMultiArray.MLMultiArrayCodingKeys(uint64_t a1)
{
  MLMultiArray.MLMultiArrayCodingKeys.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MLMultiArray.MLMultiArrayCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = MLMultiArray.MLMultiArrayCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MLMultiArray.MLMultiArrayCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = MLMultiArray.MLMultiArrayCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLMultiArray.MLMultiArrayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLMultiArray.MLMultiArrayCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

void MLMultiArray.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLMultiArray.MLMultiArrayCodingKeys>);
  OUTLINED_FUNCTION_1_2();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys();
  unint64_t v33 = v9;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  id v10 = objc_msgSend(v2, sel_shape);
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v11 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  id v31 = v2;
  if (!v12)
  {
    swift_bridgeObjectRelease();
    uint64_t v14 = MEMORY[0x1E4FBC860];
    goto LABEL_14;
  }
  uint64_t v35 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  if ((v12 & 0x8000000000000000) == 0)
  {
    uint64_t v29 = v4;
    uint64_t v30 = v6;
    uint64_t v13 = 0;
    uint64_t v14 = v35;
    do
    {
      if ((v11 & 0xC000000000000001) != 0) {
        id v15 = (id)MEMORY[0x1CB78D7C0](v13, v11);
      }
      else {
        id v15 = *(id *)(v11 + 8 * v13 + 32);
      }
      uint64_t v16 = v15;
      uint64_t v17 = Int.init(truncating:)();

      uint64_t v35 = v14;
      unint64_t v18 = *(void *)(v14 + 16);
      if (v18 >= *(void *)(v14 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v14 = v35;
      }
      ++v13;
      *(void *)(v14 + 16) = v18 + 1;
      *(void *)(v14 + 8 * v18 + 32) = v17;
    }
    while (v12 != v13);
    swift_bridgeObjectRelease();
    uint64_t v4 = v29;
    uint64_t v6 = v30;
LABEL_14:
    uint64_t v35 = v14;
    char v34 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Int] and conformance <A> [A](&lazy protocol witness table cache variable for type [Int] and conformance <A> [A], &demangling cache variable for type metadata for [Int]);
    OUTLINED_FUNCTION_24();
    uint64_t v19 = v32;
    uint64_t v20 = v33;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v19)
    {
      swift_bridgeObjectRelease();
      id v21 = v31;
      objc_msgSend(v31, sel_dataType);
      LOBYTE(v35) = 1;
      KeyedEncodingContainer.encode(_:forKey:)();
      id v22 = objc_msgSend(v21, sel_dataType);
      if (v22 == (id)65568)
      {
        uint64_t v26 = MLMultiArray.toFloatArray()();
        OUTLINED_FUNCTION_10(v26);
        unint64_t v24 = &demangling cache variable for type metadata for [Float];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Float]);
        uint64_t v25 = (unint64_t *)&lazy protocol witness table cache variable for type [Float] and conformance <A> [A];
      }
      else if (v22 == (id)131104)
      {
        uint64_t v27 = MLMultiArray.toIntArray()();
        OUTLINED_FUNCTION_10(v27);
        unint64_t v24 = &demangling cache variable for type metadata for [Int32];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int32]);
        uint64_t v25 = (unint64_t *)&lazy protocol witness table cache variable for type [Int32] and conformance <A> [A];
      }
      else
      {
        if (v22 != (id)65600)
        {
          lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
          OUTLINED_FUNCTION_3();
          *(void *)uint64_t v28 = 0xD000000000000026;
          *(void *)(v28 + 8) = 0x80000001C9DA2CF0;
          *(unsigned char *)(v28 + 16) = 0;
          swift_willThrow();
          goto LABEL_17;
        }
        uint64_t v23 = MLMultiArray.toDoubleArray()();
        OUTLINED_FUNCTION_10(v23);
        unint64_t v24 = &demangling cache variable for type metadata for [Double];
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
        uint64_t v25 = (unint64_t *)&lazy protocol witness table cache variable for type [Double] and conformance <A> [A];
      }
      lazy protocol witness table accessor for type [Int] and conformance <A> [A](v25, v24);
      OUTLINED_FUNCTION_24();
      KeyedEncodingContainer.encode<A>(_:forKey:)();
    }
    swift_bridgeObjectRelease();
LABEL_17:
    (*(void (**)(char *, uint64_t))(v6 + 8))(v20, v4);
    return;
  }
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys;
  if (!lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray.MLMultiArrayCodingKeys and conformance MLMultiArray.MLMultiArrayCodingKeys);
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance MLMultiArray(void *a1)
{
}

id @nonobjc MLMultiArray.init(shape:dataType:)(uint64_t a1, uint64_t a2)
{
  v9[1] = *(id *)MEMORY[0x1E4F143B8];
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v9[0] = 0;
  id v5 = objc_msgSend(v2, sel_initWithShape_dataType_error_, isa, a2, v9);

  if (v5)
  {
    id v6 = v9[0];
  }
  else
  {
    id v7 = v9[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

{
  void *v0;
  uint64_t v1;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
  *Swift::String v0 = v1;
}

void specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3)
{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Token>, MEMORY[0x1E4F78FB0], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, MEMORY[0x1E4FA3DB8], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, MEMORY[0x1E4F27990], (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(void))type metadata accessor for RankedAction, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

{
  uint64_t *v3;
  uint64_t v4;

  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<CamParse>, type metadata accessor for CamParse, (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.moveInitialize(from:count:), (void (*)(uint64_t, uint64_t, char *))specialized UnsafeMutablePointer.initialize(from:count:));
  *id v3 = v4;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result = *a1;
  if (result < 0)
  {
    uint64_t result = swift_getTypeByMangledNameInContextInMetadataState2();
    *a1 = result;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError()
{
  unint64_t result = lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError;
  if (!lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoreMLError and conformance CoreMLError);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Int] and conformance <A> [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined copy of CoreMLError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CoreMLError(uint64_t a1)
{
  return outlined consume of CoreMLError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of CoreMLError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CoreMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CoreMLError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CoreMLError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CoreMLError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CoreMLError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CoreMLError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CoreMLError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreMLError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFE && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 253;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 2) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreMLError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreMLError()
{
  return &type metadata for CoreMLError;
}

unsigned char *__swift_memcpy1_1(unsigned char *result, unsigned char *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for MLMultiArray.MLMultiArrayCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFE)
  {
    if (a2 + 2 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 2) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 3;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v5 = v6 - 3;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLMultiArray.MLMultiArrayCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D0D8D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for MLMultiArray.MLMultiArrayCodingKeys(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *destructiveInjectEnumTag for MLMultiArray.MLMultiArrayCodingKeys(unsigned char *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

void *type metadata accessor for MLMultiArray.MLMultiArrayCodingKeys()
{
  return &unk_1F2415E28;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t a1, int64_t a2, char a3)
{
  uint64_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

size_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(size_t a1, int64_t a2, char a3)
{
  size_t result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *int v3 = result;
  return result;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  if (v6)
  {
    OUTLINED_FUNCTION_8_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    id v10 = (void *)swift_allocObject();
    unint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  uint64_t v12 = OUTLINED_FUNCTION_21();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  if (v6)
  {
    OUTLINED_FUNCTION_8_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    id v10 = (void *)swift_allocObject();
    unint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 8);
  }
  uint64_t v12 = OUTLINED_FUNCTION_21();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

{
  specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

{
  uint64_t v0;
  void (*v1)(uint64_t);
  void (*v2)(uint64_t);
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t *v9;
  void *v10;
  size_t v11;
  uint64_t v12;

  OUTLINED_FUNCTION_9_0();
  if (v6)
  {
    OUTLINED_FUNCTION_8_0();
    if (v7 != v8)
    {
      OUTLINED_FUNCTION_23();
      if (v7)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_16();
  if (v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(v9);
    id v10 = (void *)swift_allocObject();
    unint64_t v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v4;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 16);
  }
  uint64_t v12 = OUTLINED_FUNCTION_21();
  if (v3)
  {
    v2(v12);
    *(void *)(v0 + 16) = 0;
  }
  else
  {
    v1(v12);
  }
  swift_release();
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(uint64_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
    uint64_t v10 = swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size((const void *)v10);
    *(void *)(v10 + 16) = v8;
    *(void *)(v10 + 24) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v12, v8, (char *)(v10 + 32));
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)((uint64_t)v12, v8);
  }
  swift_release();
  return v10;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t outlined init with copy of SignalProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined init with take of AppSelectionSignalComponent(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

size_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(size_t result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    uint64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_25:
        __break(1u);
        return result;
      }
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        uint64_t v7 = a2;
      }
    }
  }
  else
  {
    uint64_t v7 = a2;
  }
  uint64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    uint64_t v9 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v9 = v7;
  }
  if (!v9)
  {
    uint64_t v13 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UUID, [String : MLFeatureValue])>);
  uint64_t v10 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]))
                  - 8);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (void *)swift_allocObject();
  size_t result = _swift_stdlib_malloc_size(v13);
  if (!v11)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (result - v12 == 0x8000000000000000 && v11 == -1) {
    goto LABEL_24;
  }
  v13[2] = v8;
  v13[3] = 2 * ((uint64_t)(result - v12) / v11);
LABEL_19:
  uint64_t v15 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]))
                  - 8);
  uint64_t v16 = a4 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v16, v8);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v16, v8);
  }
  swift_release();
  return (size_t)v13;
}

void specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), void (*a7)(uint64_t, uint64_t, char *), void (*a8)(uint64_t, uint64_t, char *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v14 != v15)
    {
      OUTLINED_FUNCTION_23();
      if (v14)
      {
LABEL_24:
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  else
  {
    uint64_t v13 = a2;
  }
  uint64_t v16 = *(void *)(a4 + 16);
  if (v13 <= v16) {
    uint64_t v17 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v17 = v13;
  }
  if (!v17)
  {
    id v21 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v18 = *(void *)(a6(0) - 8);
  uint64_t v19 = *(void *)(v18 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  id v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v19)
  {
    __break(1u);
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v22 - v20 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_23;
  }
  v21[2] = v16;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v19);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  uint64_t v26 = (char *)v21 + v25;
  uint64_t v27 = a4 + v25;
  if (a1)
  {
    a7(v27, v16, v26);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    a8(v27, v16, v26);
  }
  swift_release();
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t v1 = a1;
  if ((*(unsigned char *)(*(void *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t outlined destroy of RankedAction(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id OUTLINED_FUNCTION_0_6(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  return [v10 (SEL)(v11 + 3608)];
}

id OUTLINED_FUNCTION_2_0()
{
  return objc_msgSend(v0, sel_dataType);
}

void OUTLINED_FUNCTION_3_0(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD000000000000010;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_4_0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 1;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_7_0()
{
  _StringGuts.grow(_:)(42);
}

uint64_t OUTLINED_FUNCTION_10(uint64_t result)
{
  *(void *)(v1 - 72) = result;
  *(unsigned char *)(v1 - 81) = 2;
  return result;
}

uint64_t OUTLINED_FUNCTION_11(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 0;
  return swift_willThrow();
}

void OUTLINED_FUNCTION_12(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_13()
{
  return v0;
}

id OUTLINED_FUNCTION_18()
{
  return objc_msgSend(v0, sel_count);
}

uint64_t OUTLINED_FUNCTION_19()
{
  return static Array._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t OUTLINED_FUNCTION_21()
{
  return v0 + 32;
}

id OUTLINED_FUNCTION_22()
{
  return [v0 (SEL)(v1 + 3608)];
}

uint64_t OUTLINED_FUNCTION_24()
{
  return v0 - 72;
}

uint64_t one-time initialization function for common()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.common = result;
  return result;
}

uint64_t one-time initialization function for ambiguityHandling()
{
  type metadata accessor for OS_os_log();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.ambiguityHandling = result;
  return result;
}

unint64_t type metadata accessor for OS_os_log()
{
  unint64_t result = lazy cache variable for type metadata for OS_os_log;
  if (!lazy cache variable for type metadata for OS_os_log)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_os_log);
  }
  return result;
}

uint64_t one-time initialization function for autoSend()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_0_7();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.autoSend = result;
  return result;
}

uint64_t one-time initialization function for ranker()
{
  type metadata accessor for OS_os_log();
  OUTLINED_FUNCTION_0_7();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  static Log.ranker = result;
  return result;
}

uint64_t one-time initialization function for common(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.common, &one-time initialization token for common, (id *)&static Log.common);
}

uint64_t one-time initialization function for ambiguityHandling(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.ambiguityHandling, &one-time initialization token for ambiguityHandling, (id *)&static Log.ambiguityHandling);
}

uint64_t one-time initialization function for autoSend(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.autoSend, &one-time initialization token for autoSend, (id *)&static Log.autoSend);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  if ((*(_DWORD *)(*(void *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    uint64_t v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t one-time initialization function for ranker(uint64_t a1)
{
  return one-time initialization function for common(a1, static Logger.ranker, &one-time initialization token for ranker, (id *)&static Log.ranker);
}

uint64_t one-time initialization function for common(uint64_t a1, uint64_t *a2, void *a3, id *a4)
{
  uint64_t v7 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  if (*a3 != -1) {
    swift_once();
  }
  id v8 = *a4;
  return Logger.init(_:)();
}

unint64_t OUTLINED_FUNCTION_0_7()
{
  return 0xD000000000000012;
}

uint64_t PommesResponse.sash()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v59 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent();
  OUTLINED_FUNCTION_1_2();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  int v58 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  OUTLINED_FUNCTION_1_2();
  uint64_t v13 = v12;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v49 - v18;
  unint64_t v20 = dispatch thunk of PommesResponse.experiences.getter();
  unint64_t v21 = v20;
  if (!(v20 >> 62))
  {
    if (*(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_3;
    }
LABEL_18:
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_18;
  }
LABEL_3:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v21 & 0xC000000000000001) == 0, v21);
  if ((v21 & 0xC000000000000001) != 0) {
    id v22 = (id)MEMORY[0x1CB78D7C0](0, v21);
  }
  else {
    id v22 = *(id *)(v21 + 32);
  }
  uint64_t v23 = v22;
  swift_bridgeObjectRelease();
  type metadata accessor for GenericExperience();
  if (swift_dynamicCastClass())
  {
    id v55 = v23;
    uint64_t v56 = v19;
    uint64_t v24 = GenericExperience.components.getter();
    uint64_t v25 = *(void *)(v24 + 16);
    if (v25)
    {
      uint64_t v50 = v10;
      uint64_t v51 = v13;
      uint64_t v53 = v2;
      uint64_t v54 = a1;
      uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v26 = v13 + 16;
      char v57 = v27;
      uint64_t v28 = *(unsigned __int8 *)(v26 + 64);
      uint64_t v49 = v24;
      uint64_t v29 = v24 + ((v28 + 32) & ~v28);
      uint64_t v52 = v5;
      uint64_t v30 = *(void *)(v26 + 56);
      uint64_t v31 = v11;
      uint64_t v32 = v58;
      while (1)
      {
        v57(v17, v29, v31);
        uint64_t v33 = v31;
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter();
        char v34 = Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.hasSash.getter();
        (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v59);
        if (v34) {
          break;
        }
        (*(void (**)(char *, uint64_t))(v26 - 8))(v17, v33);
        v29 += v30;
        --v25;
        uint64_t v31 = v33;
        if (!v25)
        {
          uint64_t v35 = 1;
          uint64_t v2 = v53;
          a1 = v54;
          uint64_t v13 = v51;
          uint64_t v5 = v52;
          uint64_t v10 = v50;
          goto LABEL_14;
        }
      }
      uint64_t v10 = v50;
      uint64_t v13 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v17, v33);
      uint64_t v35 = 0;
      uint64_t v2 = v53;
      a1 = v54;
      uint64_t v5 = v52;
      uint64_t v31 = v33;
    }
    else
    {
      uint64_t v35 = 1;
      uint64_t v31 = v11;
    }
LABEL_14:
    __swift_storeEnumTagSinglePayload((uint64_t)v10, v35, 1, v31);
    swift_bridgeObjectRelease();
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v31);
    uint64_t v37 = v56;
    if (EnumTagSinglePayload != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v56, v10, v31);
      char v38 = v58;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.layoutExperience.getter();
      Apple_Parsec_Siri_V2alpha_LayoutSnippetComponent.sash.getter();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v38, v59);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v37, v31);
      uint64_t v39 = 0;
      goto LABEL_25;
    }

    outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent?((uint64_t)v10);
  }
  else
  {
  }
LABEL_19:
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.common);
  uint64_t v41 = v2;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    BOOL v45 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 138412290;
    uint64_t v60 = v41;
    unint64_t v46 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v45 = v41;

    _os_log_impl(&dword_1C9CFE000, v42, v43, "No sash found in pommes response: %@", v44, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v45, -1, -1);
    MEMORY[0x1CB78E290](v44, -1, -1);
  }
  else
  {

    uint64_t v42 = v41;
  }

  uint64_t v39 = 1;
LABEL_25:
  uint64_t v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  return __swift_storeEnumTagSinglePayload(a1, v39, 1, v47);
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ExperienceComponent?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id static CaarRequestLogger.wrapIntoLogEvent(message:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01A0]), sel_init);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0178]), sel_init);
  if (v4)
  {
    objc_msgSend(v3, sel_setStartedOrChanged_, a1);
    objc_msgSend(v4, sel_setCaarRequestContext_, v3);
  }

  return v4;
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.FeatureStoreDataVersion.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.write(streamId:object:requestId:rcId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(uint64_t))(a9 + 16))(a1);
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.write(streamId:interaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of static FeatureStoreLoggingProtocol.createStream(streamId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t FeatureStoreStream.rawValue.getter(char a1)
{
  if (!a1) {
    return 0x6C65646F4D6D6143;
  }
  if (a1 == 1) {
    return 0x65646F4D72616143;
  }
  return 0x646E65536F747541;
}

void *assignWithCopy for AnyEncodable(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for AnyEncodable(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AnyEncodable(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 16))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AnyEncodable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AnyEncodable()
{
  return &type metadata for AnyEncodable;
}

uint64_t AnyEncodable.encode(to:)(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AnyEncodable(uint64_t a1)
{
  return AnyEncodable.encode(to:)(a1, *v1);
}

id static CaarModelLogger.map(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = (char *)a2;
  uint64_t v78 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v74 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_2();
  uint64_t v73 = v11;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_2_1();
  uint64_t v15 = v14 - v13;
  uint64_t v16 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1F4188790](v16 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v19 = v18 - v17;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  OUTLINED_FUNCTION_1_3();
  uint64_t v22 = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x1F4188790](v22);
  uint64_t v27 = (char *)&v69 - v26;
  uint64_t v28 = (char *)&v69 + *(int *)(v25 + 48) - v26;
  *(uint64_t *)((char *)&v69 - v26) = a1;
  outlined init with copy of CamModelMetadata((uint64_t)v77, (uint64_t)v28, (void (*)(void))type metadata accessor for CamModelMetadata);
  uint64_t v29 = *(int *)(v20 + 64);
  uint64_t v77 = v27;
  uint64_t v30 = &v27[v29];
  long long v31 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)a3;
  *((_OWORD *)v30 + 1) = v31;
  long long v32 = *(_OWORD *)(a3 + 48);
  *((_OWORD *)v30 + 2) = *(_OWORD *)(a3 + 32);
  *((_OWORD *)v30 + 3) = v32;
  id v33 = objc_allocWithZone(MEMORY[0x1E4FA0190]);
  uint64_t v76 = a1;
  swift_bridgeObjectRetain();
  outlined retain of CAARTrialEnrollment(a3);
  id v34 = objc_msgSend(v33, sel_init);
  if (v34)
  {
    uint64_t v35 = *(int *)(v20 + 48);
    id v75 = v34;
    uint64_t v36 = (uint64_t)&v24[v35];
    outlined init with copy of CamModelMetadata((uint64_t)v28, (uint64_t)&v24[v35], (void (*)(void))type metadata accessor for CamModelMetadata);
    id v37 = v75;
    outlined init with take of CamModelMetadata(v36, v19);
    uint64_t v38 = v76;
    swift_bridgeObjectRetain();
    outlined retain of CAARTrialEnrollment(a3);
    id v39 = (id)specialized static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(v19, 0xD000000000000013, 0x80000001C9DA2870);
    objc_msgSend(v37, sel_setAsset_, v39);
    int v40 = *(unsigned __int8 *)(v19 + 48);
    uint64_t v41 = v19;
    if (v40 != 2) {
      objc_msgSend(v37, sel_setIsShadowLog_, v40 & 1);
    }
    id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0198]), sel_init);
    if (v42)
    {
      os_log_type_t v43 = v42;
      uint64_t v72 = v41;
      uint64_t v44 = *(void *)(v38 + 16);
      if (v44)
      {
        id v70 = v39;
        uint64_t v71 = a3;
        uint64_t v45 = v38 + ((*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80));
        unint64_t v46 = (void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
        uint64_t v47 = *(void *)(v73 + 72);
        while (1)
        {
          outlined init with copy of CamModelMetadata(v45, v15, (void (*)(void))type metadata accessor for RankedAction);
          id v48 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0160]), sel_init);
          if (!v48) {
            break;
          }
          uint64_t v49 = v48;
          type metadata accessor for SISchemaUUID();
          (*v46)(v9, v15 + *(int *)(v10 + 36), v78);
          id v50 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v49, sel_setActionCandidateId_, v50);

          double v51 = *(double *)(v15 + *(int *)(v10 + 28));
          *(float *)&double v51 = v51;
          objc_msgSend(v49, sel_setModelScore_, v51);
          objc_msgSend(v43, sel_addActionModelOutputs_, v49);

          outlined destroy of CamModelMetadata(v15, (void (*)(void))type metadata accessor for RankedAction);
          v45 += v47;
          if (!--v44)
          {
            swift_bridgeObjectRelease();
            a3 = v71;
            uint64_t v41 = v72;
            id v37 = v75;
            id v39 = v70;
            goto LABEL_13;
          }
        }

        outlined release of CAARTrialEnrollment(v71);
        outlined destroy of CamModelMetadata(v15, (void (*)(void))type metadata accessor for RankedAction);
        swift_bridgeObjectRelease();
        id v52 = 0;
        uint64_t v41 = v72;
        goto LABEL_30;
      }
      swift_bridgeObjectRelease();
      uint64_t v41 = v72;
LABEL_13:
      objc_msgSend(v37, sel_setModelOutput_, v43);
      id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01D8]), sel_init);
      if (v54)
      {
        id v55 = v54;
        if (*(void *)(a3 + 40))
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_3_1();
          char v57 = v56;
          id v54 = (id)swift_bridgeObjectRelease();
        }
        else
        {
          char v57 = 0;
        }
        OUTLINED_FUNCTION_4_1((uint64_t)v54, sel_setDeploymentId_);

        if (*(void *)(a3 + 56))
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_3_1();
          uint64_t v60 = v59;
          uint64_t v58 = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v60 = 0;
        }
        OUTLINED_FUNCTION_4_1(v58, sel_setRolloutId_);

        if (*(void *)(a3 + 24))
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_3_1();
          uint64_t v63 = v62;
          uint64_t v61 = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v63 = 0;
        }
        OUTLINED_FUNCTION_4_1(v61, sel_setTreatmentId_);

        if (*(void *)(a3 + 8))
        {
          swift_bridgeObjectRetain();
          OUTLINED_FUNCTION_3_1();
          uint64_t v65 = v64;
          outlined release of CAARTrialEnrollment(a3);
          uint64_t v66 = swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v66 = outlined release of CAARTrialEnrollment(a3);
          uint64_t v65 = 0;
        }
        OUTLINED_FUNCTION_4_1(v66, sel_setExperimentId_);

        id v67 = v55;
        id v52 = v75;
        objc_msgSend(v75, sel_setTrialEnrollment_, v67);

        goto LABEL_30;
      }

      outlined release of CAARTrialEnrollment(a3);
    }
    else
    {
      swift_bridgeObjectRelease();

      outlined release of CAARTrialEnrollment(a3);
    }
    id v52 = 0;
LABEL_30:
    uint64_t v53 = (uint64_t)v77;
    outlined destroy of CamModelMetadata(v41, (void (*)(void))type metadata accessor for CamModelMetadata);
    goto LABEL_31;
  }
  id v52 = 0;
  uint64_t v53 = (uint64_t)v77;
LABEL_31:
  outlined destroy of ([RankedAction], CamModelMetadata, CAARTrialEnrollment)(v53);
  return v52;
}

uint64_t outlined retain of CAARTrialEnrollment(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of ([RankedAction], CamModelMetadata, CAARTrialEnrollment)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined release of CAARTrialEnrollment(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CamModelMetadata(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of CamModelMetadata(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t type metadata accessor for SISchemaUUID()
{
  unint64_t result = lazy cache variable for type metadata for SISchemaUUID;
  if (!lazy cache variable for type metadata for SISchemaUUID)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  }
  return result;
}

void OUTLINED_FUNCTION_3_1()
{
  JUMPOUT(0x1CB78D210);
}

id OUTLINED_FUNCTION_4_1(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, v3);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance DateTimeOptions@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized OptionSet.intersection(_:)(*a1, *v2);
  *a2 = result;
  return result;
}

uint64_t protocol witness for SetAlgebra.formIntersection(_:) in conformance DateTimeOptions(uint64_t *a1)
{
  return specialized OptionSet<>.formIntersection(_:)(*a1);
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance DateTimeOptions(uint64_t *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance DateTimeOptions(uint64_t *a1)
{
  return specialized SetAlgebra.isSuperset(of:)(*a1, *v1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance DateTimeOptions(void *a1@<X8>)
{
  *a1 = *v1;
}

void *one-time initialization function for top13LocaleMap()
{
  uint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13LocaleMap._rawValue = result;
  return result;
}

void *one-time initialization function for top13RegionMap()
{
  uint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13RegionMap._rawValue = result;
  return result;
}

void *one-time initialization function for top13LanguageMap()
{
  uint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  top13LanguageMap._rawValue = result;
  return result;
}

unint64_t ForcedDisambiguation.trialFactor.getter(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  unint64_t result = 0;
  switch(v1)
  {
    case 1:
      unint64_t result = 0xD00000000000002BLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000023;
      break;
    case 3:
      return result;
    default:
      unint64_t result = 0xD000000000000027;
      break;
  }
  return result;
}

uint64_t ForcedDisambiguation.overrideRate.getter(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      char v3 = 1;
      return CamDoubleUserDefaults.value.getter(v3);
    case 2:
      char v3 = 0;
      return CamDoubleUserDefaults.value.getter(v3);
    case 3:
      return result;
    default:
      char v3 = 2;
      return CamDoubleUserDefaults.value.getter(v3);
  }
}

unint64_t ForcedDisambiguation.cooldownKey.getter(char a1)
{
  unint64_t v2 = 0xD000000000000016;
  uint64_t v3 = 0xD000000000000021;
  unint64_t v4 = 0x80000001C9DA24B0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001C9DA24E0;
      uint64_t v3 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v3 = OUTLINED_FUNCTION_0_8();
      break;
    case 3:
      unint64_t v4 = 0xE800000000000000;
      uint64_t v3 = OUTLINED_FUNCTION_1_4();
      break;
    default:
      break;
  }
  unint64_t v7 = v2 + 10;
  unint64_t v5 = v4;
  String.append(_:)(*(Swift::String *)&v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t ForcedDisambiguation.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000021;
  switch(a1)
  {
    case 1:
      uint64_t result = 0xD000000000000016;
      break;
    case 2:
      uint64_t result = OUTLINED_FUNCTION_0_8();
      break;
    case 3:
      uint64_t result = OUTLINED_FUNCTION_1_4();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t ForcedDisambiguation.cooldownPeriodInDays.getter(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  uint64_t result = 0;
  switch(v1)
  {
    case 1:
      uint64_t result = 84;
      break;
    case 2:
      uint64_t v3 = (void *)MEMORY[0x1CB78D210](0x6C616E7265746E49, 0xED0000646C697542);
      int v4 = MGGetBoolAnswer();

      if (v4) {
        uint64_t result = 0;
      }
      else {
        uint64_t result = 30;
      }
      break;
    default:
      return result;
  }
  return result;
}

Swift::Bool __swiftcall ForcedDisambiguation.decision()()
{
  unsigned __int8 v1 = v0;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.common);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = OUTLINED_FUNCTION_7_1();
    *(_DWORD *)unint64_t v5 = 136315138;
    uint64_t v6 = 0xD000000000000021;
    unint64_t v7 = 0x80000001C9DA24B0;
    switch(v1)
    {
      case 1u:
        uint64_t v6 = OUTLINED_FUNCTION_5_0();
        break;
      case 2u:
        unint64_t v7 = 0xE800000000000000;
        uint64_t v6 = OUTLINED_FUNCTION_0_8();
        break;
      case 3u:
        unint64_t v7 = 0xE800000000000000;
        uint64_t v6 = OUTLINED_FUNCTION_1_4();
        break;
      default:
        break;
    }
    uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v3, v4, "[ForcedDisambiguation] Sampling force disambiguation decision for %s", v5, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
  }
  if (ForcedDisambiguation.inCooldown()(v1))
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_6_1(v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v11 = 0xD000000000000021;
      unint64_t v12 = 0x80000001C9DA24B0;
      switch(v1)
      {
        case 0u:
          goto LABEL_22;
        case 1u:
          uint64_t v11 = OUTLINED_FUNCTION_9_1();
          goto LABEL_22;
        case 2u:
          unint64_t v12 = 0xE800000000000000;
          uint64_t v11 = OUTLINED_FUNCTION_0_8();
          goto LABEL_22;
        case 3u:
          unint64_t v12 = 0xE800000000000000;
          uint64_t v11 = OUTLINED_FUNCTION_1_4();
LABEL_22:
          uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v10 + 12) = 2080;
          uint64_t v27 = ForcedDisambiguation.cooldownPeriodInDays.getter(v1);
          char v28 = v23 & 1;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
          uint64_t v24 = String.init<A>(describing:)();
          uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v29);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C9CFE000, v8, v9, "[ForcedDisambiguation] %s currently in cooldown (period is %s days).", (uint8_t *)v10, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
          break;
        default:
          goto LABEL_30;
      }
    }
  }
  else
  {
    uint64_t v13 = v1;
    switch(v1)
    {
      case 0u:
      case 1u:
        goto LABEL_16;
      case 2u:
        OUTLINED_FUNCTION_0_8();
LABEL_16:
        _stringCompareWithSmolCheck(_:_:expecting:)();
        break;
      case 3u:
        break;
      default:
LABEL_30:
        JUMPOUT(0);
    }
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    double v15 = ForcedDisambiguation.getRate()();
    specialized static BinaryFloatingPoint<>.random<A>(in:using:)(0.0, 1.0);
    double v17 = v16;
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_6_1(v19))
    {
      uint64_t v20 = 0x534549545F4C4C41;
      uint64_t v21 = swift_slowAlloc();
      uint64_t v27 = OUTLINED_FUNCTION_7_1();
      *(_DWORD *)uint64_t v21 = 136315394;
      unint64_t v22 = 0xE800000000000000;
      switch(v14)
      {
        case 0:
          uint64_t v20 = 0xD000000000000021;
          unint64_t v22 = 0x80000001C9DA24B0;
          goto LABEL_26;
        case 1:
          unint64_t v22 = 0x80000001C9DA24E0;
          uint64_t v20 = 0xD000000000000016;
          goto LABEL_26;
        case 2:
          goto LABEL_26;
        case 3:
          uint64_t v20 = 0x444E45534F545541;
LABEL_26:
          uint64_t v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v22, &v27);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 12) = 1024;
          LODWORD(v29) = v17 <= v15;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C9CFE000, v18, v19, "[ForcedDisambiguation] %s decision = %{BOOL}d", (uint8_t *)v21, 0x12u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
          break;
        default:
          goto LABEL_30;
      }
    }

    if (v17 <= v15)
    {
      ForcedDisambiguation.startCooldown()(v1);
      return 1;
    }
  }
  return 0;
}

BOOL ForcedDisambiguation.inCooldown()(char a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v38 - v7;
  uint64_t v9 = ForcedDisambiguation.cooldownPeriodInDays.getter(a1);
  if (v10)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.common);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v24, v25)) {
      goto LABEL_28;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v41[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v28 = 0xD000000000000021;
    unint64_t v29 = 0x80000001C9DA24B0;
    switch(a1)
    {
      case 1:
        unint64_t v29 = 0x80000001C9DA24E0;
        uint64_t v28 = 0xD000000000000016;
        break;
      case 2:
        unint64_t v29 = 0xE800000000000000;
        uint64_t v28 = 0x534549545F4C4C41;
        break;
      case 3:
        unint64_t v29 = 0xE800000000000000;
        uint64_t v28 = 0x444E45534F545541;
        break;
      default:
        break;
    }
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v29, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v34 = v25;
    uint64_t v35 = "[ForcedDisambiguation] %s does not use a cooldown.";
    goto LABEL_27;
  }
  uint64_t v11 = v9;
  unint64_t v12 = ForcedDisambiguation.cooldownKey.getter(a1);
  static CamUserHistoryDefaultsManager.getValue(key:)(v12, v13, v41);
  swift_bridgeObjectRelease();
  if (!v42)
  {
    outlined destroy of Any?((uint64_t)v41);
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_15:
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.common);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v24, v31)) {
      goto LABEL_28;
    }
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v41[0] = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    uint64_t v32 = 0xD000000000000021;
    unint64_t v33 = 0x80000001C9DA24B0;
    switch(a1)
    {
      case 1:
        unint64_t v33 = 0x80000001C9DA24E0;
        uint64_t v32 = 0xD000000000000016;
        break;
      case 2:
        unint64_t v33 = 0xE800000000000000;
        uint64_t v32 = 0x534549545F4C4C41;
        break;
      case 3:
        unint64_t v33 = 0xE800000000000000;
        uint64_t v32 = 0x444E45534F545541;
        break;
      default:
        break;
    }
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v34 = v31;
    uint64_t v35 = "[ForcedDisambiguation] %s could not retrieve cooldown timestamp: assume no previous forced disambiguation.";
LABEL_27:
    _os_log_impl(&dword_1C9CFE000, v24, v34, v35, v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v27, -1, -1);
    MEMORY[0x1CB78E290](v26, -1, -1);
LABEL_28:

    return 0;
  }
  Date.init(timeIntervalSince1970:)();
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v15 = v14;
  double v16 = *(void (**)(char *, uint64_t))(v3 + 8);
  v16(v6, v2);
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.common);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    int v40 = v16;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    v41[0] = v39;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v21 = 0xD000000000000021;
    unint64_t v22 = 0x80000001C9DA24B0;
    switch(a1)
    {
      case 1:
        unint64_t v22 = 0x80000001C9DA24E0;
        uint64_t v21 = 0xD000000000000016;
        break;
      case 2:
        unint64_t v22 = 0xE800000000000000;
        uint64_t v21 = 0x534549545F4C4C41;
        break;
      case 3:
        unint64_t v22 = 0xE800000000000000;
        uint64_t v21 = 0x444E45534F545541;
        break;
      default:
        break;
    }
    uint64_t v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2048;
    uint64_t v43 = *(void *)&v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9CFE000, v18, v19, "[ForcedDisambiguation] %s time since last disambiguation %f.", (uint8_t *)v20, 0x16u);
    uint64_t v37 = v39;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v37, -1, -1);
    MEMORY[0x1CB78E290](v20, -1, -1);

    v40(v8, v2);
  }
  else
  {

    v16(v8, v2);
  }
  return v15 < (double)(86400 * v11);
}

Swift::Double __swiftcall ForcedDisambiguation.getRate()()
{
  signed __int8 v2 = v0;
  uint64_t v3 = ForcedDisambiguation.overrideRate.getter(v0);
  if ((v4 & 1) == 0)
  {
    double v5 = *(double *)&v3;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.common);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (!OUTLINED_FUNCTION_6_1(v8)) {
      goto LABEL_30;
    }
    uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_8_1();
    uint64_t v30 = OUTLINED_FUNCTION_7_1();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = v1 + 11;
    unint64_t v11 = 0x80000001C9DA24B0;
    switch(v2)
    {
      case 1:
        uint64_t v10 = OUTLINED_FUNCTION_5_0();
        break;
      case 2:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v10 = OUTLINED_FUNCTION_0_8();
        break;
      case 3:
        unint64_t v11 = 0xE800000000000000;
        uint64_t v10 = OUTLINED_FUNCTION_1_4();
        break;
      default:
        break;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v30);
    OUTLINED_FUNCTION_4_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_3_2();
    os_log_type_t v27 = v8;
    uint64_t v28 = "[ForcedDisambiguation] %s override rate is set = %f.";
LABEL_29:
    _os_log_impl(&dword_1C9CFE000, v7, v27, v28, v9, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
LABEL_30:

    return v5;
  }
  unint64_t v12 = ForcedDisambiguation.trialFactor.getter(v2);
  if (v13)
  {
    uint64_t v14 = static TrialProvider.fetchDoubleFactorFromTrial(_:)(v12, v13);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      double v5 = *(double *)&v14;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.common);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.info.getter();
      if (!OUTLINED_FUNCTION_6_1(v18)) {
        goto LABEL_30;
      }
      uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_8_1();
      uint64_t v30 = OUTLINED_FUNCTION_7_1();
      *(_DWORD *)uint64_t v9 = 136315394;
      uint64_t v19 = v1 + 11;
      unint64_t v20 = 0x80000001C9DA24B0;
      switch(v2)
      {
        case 1:
          uint64_t v19 = OUTLINED_FUNCTION_5_0();
          break;
        case 2:
          unint64_t v20 = 0xE800000000000000;
          uint64_t v19 = OUTLINED_FUNCTION_0_8();
          break;
        case 3:
          unint64_t v20 = 0xE800000000000000;
          uint64_t v19 = OUTLINED_FUNCTION_1_4();
          break;
        default:
          break;
      }
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v30);
      OUTLINED_FUNCTION_4_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_3_2();
      os_log_type_t v27 = v18;
      uint64_t v28 = "[ForcedDisambiguation] %s fetched rate from Trial = %f.";
      goto LABEL_29;
    }
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.common);
  unint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (OUTLINED_FUNCTION_6_1(v23))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v30 = OUTLINED_FUNCTION_7_1();
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v25 = 0xD000000000000021;
    unint64_t v26 = 0x80000001C9DA24B0;
    switch(v2)
    {
      case 1:
        uint64_t v25 = OUTLINED_FUNCTION_9_1();
        break;
      case 2:
        unint64_t v26 = 0xE800000000000000;
        uint64_t v25 = OUTLINED_FUNCTION_0_8();
        break;
      case 3:
        unint64_t v26 = 0xE800000000000000;
        uint64_t v25 = OUTLINED_FUNCTION_1_4();
        break;
      default:
        break;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9CFE000, v22, v23, "[ForcedDisambiguation] Could not fetch %s rate from Trial, using default=%f", (uint8_t *)v24, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  return dbl_1C9D9D8B0[v2];
}

uint64_t ForcedDisambiguation.startCooldown()(char a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  double v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = ForcedDisambiguation.cooldownKey.getter(a1);
  uint64_t v8 = v7;
  Date.init()();
  Date.timeIntervalSince1970.getter();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12[3] = MEMORY[0x1E4FBB3D0];
  v12[0] = v10;
  static CamUserHistoryDefaultsManager.setValue(key:value:)(v6, v8, (uint64_t)v12);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
}

SiriCam::ForcedDisambiguation_optional __swiftcall ForcedDisambiguation.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v2._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of ForcedDisambiguation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return (SiriCam::ForcedDisambiguation_optional)4;
  }
  else {
    return (SiriCam::ForcedDisambiguation_optional)v3;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ForcedDisambiguation(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ForcedDisambiguation()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ForcedDisambiguation(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ForcedDisambiguation(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::ForcedDisambiguation_optional protocol witness for RawRepresentable.init(rawValue:) in conformance ForcedDisambiguation@<W0>(Swift::String *a1@<X0>, SiriCam::ForcedDisambiguation_optional *a2@<X8>)
{
  result.value = ForcedDisambiguation.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance ForcedDisambiguation@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = ForcedDisambiguation.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t v5 = *a1 + 8;
  uint64_t result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

void specialized static BinaryFloatingPoint<>.random<A>(in:using:)(double a1, double a2)
{
  if ((~COERCE__INT64(a2 - a1) & 0x7FF0000000000000) != 0) {
    specialized RandomNumberGenerator.next<A>(upperBound:)(0x20000000000001uLL);
  }
  else {
    __break(1u);
  }
}

unint64_t specialized RandomNumberGenerator.next<A>(upperBound:)(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    unint64_t v3 = 0;
    MEMORY[0x1CB78E2B0](&v3, 8);
    uint64_t result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      unint64_t v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          unint64_t v3 = 0;
          MEMORY[0x1CB78E2B0](&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ForcedDisambiguation(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFD)
  {
    if (a2 + 3 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 3) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 4;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 4;
  int v5 = v6 - 4;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for ForcedDisambiguation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D1177CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ForcedDisambiguation()
{
  return &type metadata for ForcedDisambiguation;
}

unint64_t lazy protocol witness table accessor for type ForcedDisambiguation and conformance ForcedDisambiguation()
{
  unint64_t result = lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation;
  if (!lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForcedDisambiguation and conformance ForcedDisambiguation);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_8()
{
  return 0x534549545F4C4C41;
}

uint64_t OUTLINED_FUNCTION_1_4()
{
  return 0x444E45534F545541;
}

void OUTLINED_FUNCTION_2_2()
{
  JUMPOUT(0x1CB78E290);
}

uint64_t OUTLINED_FUNCTION_3_2()
{
  *(_WORD *)(v0 + 12) = 2048;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_4_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

unint64_t OUTLINED_FUNCTION_5_0()
{
  return 0xD000000000000016;
}

BOOL OUTLINED_FUNCTION_6_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_7_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_8_1()
{
  return swift_slowAlloc();
}

unint64_t OUTLINED_FUNCTION_9_1()
{
  return 0xD000000000000016;
}

uint64_t *initializeBufferWithCopyOfBuffer for AutoSendInputFeatureExtractor(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *int v3 = *a2;
    int v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 36);
    unsigned int v6 = (char *)a1 + v5;
    BOOL v7 = (char *)a2 + v5;
    uint64_t v8 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
    swift_retain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8))
    {
      uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
      memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v6, v7, v11);
      *(void *)&v6[v8[5]] = *(void *)&v7[v8[5]];
      uint64_t v12 = v8[6];
      unint64_t v13 = *(void **)&v7[v12];
      *(void *)&v6[v12] = v13;
      *(void *)&v6[v8[7]] = *(void *)&v7[v8[7]];
      swift_retain();
      id v14 = v13;
      swift_bridgeObjectRetain();
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
    }
  }
  return v3;
}

uint64_t destroy for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for WordEmbeddingFeatureExtractor();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    swift_release();

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)(a1 + v4);
  unsigned int v6 = (char *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  swift_retain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v5, v6, v9);
    *(void *)&v5[v7[5]] = *(void *)&v6[v7[5]];
    uint64_t v10 = v7[6];
    uint64_t v11 = *(void **)&v6[v10];
    *(void *)&v5[v10] = v11;
    *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
    swift_retain();
    id v12 = v11;
    swift_bridgeObjectRetain();
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

void *assignWithCopy for AutoSendInputFeatureExtractor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v9);
  int v11 = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v9);
  if (!EnumTagSinglePayload)
  {
    if (!v11)
    {
      uint64_t v18 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 24))(v7, v8, v18);
      *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
      swift_retain();
      swift_release();
      uint64_t v19 = v9[6];
      unint64_t v20 = *(void **)&v7[v19];
      uint64_t v21 = *(void **)&v8[v19];
      *(void *)&v7[v19] = v21;
      id v22 = v21;

      *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v7);
    goto LABEL_6;
  }
  if (v11)
  {
LABEL_6:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  uint64_t v12 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v7, v8, v12);
  *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
  uint64_t v13 = v9[6];
  id v14 = *(void **)&v8[v13];
  *(void *)&v7[v13] = v14;
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  swift_retain();
  id v15 = v14;
  swift_bridgeObjectRetain();
  __swift_storeEnumTagSinglePayload((uint64_t)v7, 0, 1, (uint64_t)v9);
  return a1;
}

uint64_t initializeWithTake for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    uint64_t v9 = type metadata accessor for Locale();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v5, v6, v9);
    *(void *)&v5[v7[5]] = *(void *)&v6[v7[5]];
    *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
    *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

void *assignWithTake for AutoSendInputFeatureExtractor(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release();
  uint64_t v7 = *(int *)(a3 + 36);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, (uint64_t)v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, (uint64_t)v10);
  if (!EnumTagSinglePayload)
  {
    if (!v12)
    {
      uint64_t v16 = type metadata accessor for Locale();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v8, v9, v16);
      *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
      swift_release();
      uint64_t v17 = v10[6];
      uint64_t v18 = *(void **)&v8[v17];
      *(void *)&v8[v17] = *(void *)&v9[v17];

      *(void *)&v8[v10[7]] = *(void *)&v9[v10[7]];
      swift_bridgeObjectRelease();
      return a1;
    }
    outlined destroy of WordEmbeddingFeatureExtractor((uint64_t)v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    return a1;
  }
  uint64_t v13 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v8, v9, v13);
  *(void *)&v8[v10[5]] = *(void *)&v9[v10[5]];
  *(void *)&v8[v10[6]] = *(void *)&v9[v10[6]];
  *(void *)&v8[v10[7]] = *(void *)&v9[v10[7]];
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, (uint64_t)v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D12160);
}

uint64_t sub_1C9D12160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for AutoSendInputFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D12200);
}

uint64_t sub_1C9D12200(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    uint64_t v8 = v5 + *(int *)(a4 + 36);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AutoSendInputFeatureExtractor()
{
  uint64_t result = type metadata singleton initialization cache for AutoSendInputFeatureExtractor;
  if (!type metadata singleton initialization cache for AutoSendInputFeatureExtractor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for AutoSendInputFeatureExtractor()
{
  type metadata accessor for WordEmbeddingFeatureExtractor?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for WordEmbeddingFeatureExtractor?()
{
  if (!lazy cache variable for type metadata for WordEmbeddingFeatureExtractor?)
  {
    type metadata accessor for WordEmbeddingFeatureExtractor();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WordEmbeddingFeatureExtractor?);
    }
  }
}

#error "1C9D124C0: call analysis failed (funcsize=91)"

uint64_t specialized FeatureExtracting.extract(from:)(uint64_t a1)
{
  return specialized FeatureExtracting.extract(from:)(a1, CRRFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static CRRFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, AsrSimpleFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static AsrSimpleFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, SnrFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static SnrFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, ConversationHistoryFeatureExtractor.extractImpl(from:), type metadata accessor for ConversationHistoryFeatureExtractor, static ConversationHistoryFeatureExtractor.extractedFeatures.getter);
}

{
  return specialized FeatureExtracting.extract(from:)(a1, AffinityRankFeatureExtractor.extractImpl(from:), type metadata accessor for AffinityRankFeatureExtractor, static AffinityRankFeatureExtractor.extractedFeatures.getter);
}

#error "1C9D126AC: call analysis failed (funcsize=103)"

#error "1C9D1286C: call analysis failed (funcsize=103)"

uint64_t specialized FeatureExtracting.extract(from:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = DeviceContextFeatureExtractor.extractImpl(from:)(a1, a2);
  if (!v2)
  {
    if (one-time initialization token for extractedFeatures != -1) {
      swift_once();
    }
    uint64_t v4 = swift_bridgeObjectRetain();
    uint64_t v5 = specialized Set.init<A>(_:)(v4);
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = specialized Set.init<A>(_:)(v6);
    uint64_t v8 = specialized Set.subtracting(_:)(v7, v5);
    swift_bridgeObjectRelease();
    if (*(void *)(v8 + 16))
    {
      swift_bridgeObjectRelease();
      v19[0] = 0;
      v19[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v9._uint64_t countAndFlagsBits = 0x7365727574616546;
      v9._object = (void *)0xE900000000000020;
      String.append(_:)(v9);
      v10._uint64_t countAndFlagsBits = Set.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v11._object = (void *)0x80000001C9DA2FB0;
      v11._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v11);
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.common);
      swift_bridgeObjectRetain_n();
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        id v15 = (uint8_t *)swift_slowAlloc();
        uint64_t v16 = swift_slowAlloc();
        v19[0] = v16;
        *(_DWORD *)id v15 = 136315138;
        swift_bridgeObjectRetain();
        v19[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v19);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9CFE000, v13, v14, "%s", v15, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v16, -1, -1);
        MEMORY[0x1CB78E290](v15, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type CamError and conformance CamError();
      swift_allocError();
      *(void *)uint64_t v17 = 0;
      *(void *)(v17 + 8) = 0xE000000000000000;
      *(unsigned char *)(v17 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v3;
}

#error "1C9D12DD8: call analysis failed (funcsize=103)"

#error "1C9D12F88: call analysis failed (funcsize=103)"

uint64_t specialized FeatureExtracting.extract(from:)(void *a1)
{
  uint64_t v2 = WordEmbeddingFeatureExtractor.extractImpl(from:)(a1);
  if (!v1)
  {
    if (one-time initialization token for extractedFeatures != -1) {
      swift_once();
    }
    uint64_t v3 = swift_bridgeObjectRetain();
    uint64_t v4 = specialized Set.init<A>(_:)(v3);
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = specialized Set.init<A>(_:)(v5);
    uint64_t v7 = specialized Set.subtracting(_:)(v6, v4);
    swift_bridgeObjectRelease();
    if (*(void *)(v7 + 16))
    {
      swift_bridgeObjectRelease();
      v18[0] = 0;
      v18[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(53);
      v8._uint64_t countAndFlagsBits = 0x7365727574616546;
      v8._object = (void *)0xE900000000000020;
      String.append(_:)(v8);
      v9._uint64_t countAndFlagsBits = Set.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v10._object = (void *)0x80000001C9DA2FB0;
      v10._uint64_t countAndFlagsBits = 0xD00000000000002ALL;
      String.append(_:)(v10);
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v11 = type metadata accessor for Logger();
      __swift_project_value_buffer(v11, (uint64_t)static Logger.common);
      swift_bridgeObjectRetain_n();
      uint64_t v12 = Logger.logObject.getter();
      os_log_type_t v13 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v12, v13))
      {
        os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
        uint64_t v15 = swift_slowAlloc();
        v18[0] = v15;
        *(_DWORD *)os_log_type_t v14 = 136315138;
        swift_bridgeObjectRetain();
        v18[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0, 0xE000000000000000, v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9CFE000, v12, v13, "%s", v14, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v15, -1, -1);
        MEMORY[0x1CB78E290](v14, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      lazy protocol witness table accessor for type CamError and conformance CamError();
      swift_allocError();
      *(void *)uint64_t v16 = 0;
      *(void *)(v16 + 8) = 0xE000000000000000;
      *(unsigned char *)(v16 + 16) = 1;
      swift_willThrow();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

#error "1C9D13494: call analysis failed (funcsize=91)"

#error "1C9D136A4: call analysis failed (funcsize=110)"

#error "1C9D13860: call analysis failed (funcsize=104)"

#error "1C9D13A20: call analysis failed (funcsize=103)"

#error "1C9D13BE0: call analysis failed (funcsize=103)"

#error "1C9D13D8C: call analysis failed (funcsize=91)"

#error "1C9D13F14: call analysis failed (funcsize=91)"

#error "1C9D1409C: call analysis failed (funcsize=91)"

#error "1C9D1423C: call analysis failed (funcsize=103)"

uint64_t specialized Dictionary.update(other:allowDuplicateKeys:)(uint64_t a1, int a2)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
}

{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, a2, &demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
}

uint64_t specialized Dictionary.update(other:allowDuplicateKeys:)(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  HIDWORD(v65) = a2;
  uint64_t v63 = a1 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a1 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a1 + 64);
  int64_t v62 = (unint64_t)(63 - v6) >> 6;
  uint64_t v8 = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  if (!v7) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v67 = (v7 - 1) & v7;
  unint64_t v17 = __clz(__rbit64(v7)) | (v16 << 6);
  int64_t v69 = v16;
  while (1)
  {
    id v22 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v17);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = *(void **)(*(void *)(a1 + 56) + 8 * v17);
    if ((v65 & 0x100000000) != 0)
    {
      swift_bridgeObjectRetain();
      id v26 = v25;
    }
    else
    {
      uint64_t v27 = *(void *)(*v4 + 16);
      swift_bridgeObjectRetain();
      id v28 = v25;
      if (v27)
      {
        unint64_t v29 = v28;
        specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
        if (v30)
        {
          _StringGuts.grow(_:)(41);
          v50._object = (void *)0x80000001C9DA2FE0;
          v50._uint64_t countAndFlagsBits = 0xD000000000000027;
          String.append(_:)(v50);
          _print_unlocked<A, B>(_:_:)();
          lazy protocol witness table accessor for type FeatureDictionaryError and conformance FeatureDictionaryError();
          OUTLINED_FUNCTION_3();
          *double v51 = 0;
          v51[1] = 0xE000000000000000;
          swift_willThrow();
          swift_bridgeObjectRelease();

          OUTLINED_FUNCTION_28(v52, v53, v54, v55, v56, v57, v58, v59, v60, v61, v62, v63, (uint64_t)a3, v65, a1);
          return outlined consume of [String : MLFeatureValue].Iterator._Variant();
        }
      }
    }
    id v31 = v25;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v33 = *v4;
    uint64_t v68 = (void *)*v4;
    *uint64_t v4 = 0x8000000000000000;
    unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
    uint64_t v36 = *(void *)(v33 + 16);
    BOOL v37 = (v35 & 1) == 0;
    Swift::Int v38 = v36 + v37;
    if (__OFADD__(v36, v37))
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    unint64_t v39 = v34;
    char v40 = v35;
    __swift_instantiateConcreteTypeFromMangledName(a3);
    if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v38))
    {
      unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24);
      if ((v40 & 1) != (v42 & 1)) {
        goto LABEL_39;
      }
      unint64_t v39 = v41;
    }
    if (v40)
    {
      uint64_t v43 = v68[7];
      uint64_t v44 = *(void **)(v43 + 8 * v39);
      *(void *)(v43 + 8 * v39) = v31;
    }
    else
    {
      v68[(v39 >> 6) + 8] |= 1 << v39;
      uint64_t v45 = (uint64_t *)(v68[6] + 16 * v39);
      uint64_t *v45 = v23;
      v45[1] = v24;
      *(void *)(v68[7] + 8 * v39) = v31;
      uint64_t v46 = v68[2];
      BOOL v47 = __OFADD__(v46, 1);
      uint64_t v48 = v46 + 1;
      if (v47) {
        goto LABEL_36;
      }
      v68[2] = v48;
      swift_bridgeObjectRetain();
      uint64_t v44 = 0;
    }
    *uint64_t v4 = (uint64_t)v68;
    swift_bridgeObjectRelease();

    uint64_t v8 = swift_bridgeObjectRelease();
    int64_t v16 = v69;
    unint64_t v7 = v67;
    if (v67) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v18 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_37;
    }
    if (v18 >= v62) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v63 + 8 * v18);
    int64_t v20 = v16 + 1;
    if (!v19)
    {
      int64_t v20 = v16 + 2;
      if (v16 + 2 >= v62) {
        goto LABEL_33;
      }
      unint64_t v19 = *(void *)(v63 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = v16 + 3;
        if (v16 + 3 >= v62) {
          goto LABEL_33;
        }
        unint64_t v19 = *(void *)(v63 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_18:
    uint64_t v67 = (v19 - 1) & v19;
    int64_t v69 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
  }
  uint64_t v21 = v16 + 4;
  if (v16 + 4 >= v62)
  {
LABEL_33:
    OUTLINED_FUNCTION_28(v8, v9, v10, v11, v12, v13, v14, v15, v60, v61, v62, v63, (uint64_t)a3, v65, a1);
    return outlined consume of [String : MLFeatureValue].Iterator._Variant();
  }
  unint64_t v19 = *(void *)(v63 + 8 * v21);
  if (v19)
  {
    int64_t v20 = v16 + 4;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v20 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v20 >= v62) {
      goto LABEL_33;
    }
    unint64_t v19 = *(void *)(v63 + 8 * v20);
    ++v21;
    if (v19) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
LABEL_39:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t static AutoSendInputFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  uint64_t v0 = static AsrSimpleFeatureExtractor.extractedFeatures;
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  static AutoSendInputFeatureExtractor.wordEmbeddingExtractedFeatures.getter();
  specialized Array.append<A>(contentsOf:)();
  return v0;
}

uint64_t specialized Set.init<A>(_:)(uint64_t a1)
{
  uint64_t v2 = Set.init(minimumCapacity:)();
  uint64_t v10 = v2;
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = (Swift::Int *)(a1 + 40);
    do
    {
      Swift::Int v5 = *(v4 - 1);
      Swift::Int v6 = *v4;
      swift_bridgeObjectRetain();
      specialized Set._Variant.insert(_:)(&v9, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t v7 = v2;
    swift_bridgeObjectRelease();
  }
  return v7;
}

{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  int64_t v13;
  Swift::Int *v14;
  Swift::Int v15;
  Swift::Int v16;
  Swift::Int v17;
  uint64_t v18;
  void v19[4];
  unint64_t v20;

  int64_t v18 = Set.init(minimumCapacity:)();
  uint64_t result = specialized _NativeDictionary.makeIterator()(a1, v19);
  uint64_t v3 = v19[0];
  uint64_t v4 = v19[1];
  Swift::Int v5 = v19[3];
  Swift::Int v6 = v20;
  uint64_t v7 = (unint64_t)(v19[2] + 64) >> 6;
  if (!v20) {
    goto LABEL_3;
  }
LABEL_2:
  uint64_t v8 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  Swift::Int v9 = v8 | (v5 << 6);
  while (1)
  {
    uint64_t v14 = (Swift::Int *)(*(void *)(v3 + 48) + 16 * v9);
    uint64_t v15 = *v14;
    int64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.insert(_:)(&v17, v15, v16);
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_2;
    }
LABEL_3:
    uint64_t v10 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      break;
    }
    if (v10 >= v7) {
      goto LABEL_21;
    }
    uint64_t v11 = *(void *)(v4 + 8 * v10);
    uint64_t v12 = v5 + 1;
    if (!v11)
    {
      uint64_t v12 = v5 + 2;
      if (v5 + 2 >= v7) {
        goto LABEL_21;
      }
      uint64_t v11 = *(void *)(v4 + 8 * v12);
      if (!v11)
      {
        uint64_t v12 = v5 + 3;
        if (v5 + 3 >= v7) {
          goto LABEL_21;
        }
        uint64_t v11 = *(void *)(v4 + 8 * v12);
        if (!v11)
        {
          uint64_t v12 = v5 + 4;
          if (v5 + 4 >= v7) {
            goto LABEL_21;
          }
          uint64_t v11 = *(void *)(v4 + 8 * v12);
          if (!v11)
          {
            uint64_t v12 = v5 + 5;
            if (v5 + 5 >= v7) {
              goto LABEL_21;
            }
            uint64_t v11 = *(void *)(v4 + 8 * v12);
            if (!v11)
            {
              uint64_t v13 = v5 + 6;
              while (v13 < v7)
              {
                uint64_t v11 = *(void *)(v4 + 8 * v13++);
                if (v11)
                {
                  uint64_t v12 = v13 - 1;
                  goto LABEL_18;
                }
              }
LABEL_21:
              swift_release();
              return v18;
            }
          }
        }
      }
    }
LABEL_18:
    Swift::Int v6 = (v11 - 1) & v11;
    Swift::Int v9 = __clz(__rbit64(v11)) + (v12 << 6);
    Swift::Int v5 = v12;
  }
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (**v17)(char *, uint64_t, uint64_t);
  void (**v18)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;

  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x1F4188790](v2);
  Swift::Int v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v20 - v7;
  Swift::Int v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v9 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v12 = v11 - v10;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v23 = Set.init(minimumCapacity:)();
  int64_t v20 = a1;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v14 = v3 + 16;
    uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    int64_t v16 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v21 = *(void *)(v14 + 56);
    id v22 = v15;
    unint64_t v17 = (void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    int64_t v18 = (void (**)(char *, uint64_t))(v14 - 8);
    while (1)
    {
      v22(v12, v16, v2);
      __swift_storeEnumTagSinglePayload(v12, 0, 1, v2);
      if (__swift_getEnumTagSinglePayload(v12, 1, v2) == 1) {
        break;
      }
      (*v17)(v6, v12, v2);
      specialized Set._Variant.insert(_:)((uint64_t)v8, v6);
      (*v18)(v8, v2);
      v16 += v21;
      if (!--v13) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    __swift_storeEnumTagSinglePayload(v12, 1, 1, v2);
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t specialized Set.subtracting(_:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) <= *(void *)(a2 + 16) >> 3)
  {
    specialized Set._subtract<A>(_:)(a1);
    return a2;
  }
  else
  {
    return specialized _NativeSet.subtracting<A>(_:)(a1, a2);
  }
}

uint64_t static AutoSendInputFeatureExtractor.wordEmbeddingExtractedFeatures.getter()
{
  uint64_t v3 = &type metadata for CamFeatureFlag;
  unint64_t v4 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
  v2[0] = 1;
  char v0 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  if ((v0 & 1) == 0 || (static WordEmbeddingFeatureExtractor.currentLocaleIsSupported()() & 1) == 0) {
    return MEMORY[0x1E4FBC860];
  }
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return swift_bridgeObjectRetain();
}

void AutoSendInputFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  MEMORY[0x1F4188790](v5 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v8 = v7 - v6;
  uint64_t v9 = type metadata accessor for WordEmbeddingFeatureExtractor();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  uint64_t v47 = v11 - v10;
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.autoSend);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl(&dword_1C9CFE000, v13, v14, "Extracting AutoSend features", v15, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  int64_t v16 = *(void **)(a1 + *(int *)(type metadata accessor for AutoSendInput() + 20));
  id v17 = objc_msgSend(v16, sel_recognition);
  if (!v17) {
    goto LABEL_10;
  }
  int64_t v18 = v17;
  id v19 = objc_msgSend(v16, sel_audioAnalytics);
  if (!v19)
  {

LABEL_10:
    lazy protocol witness table accessor for type AutoConfirmError and conformance AutoConfirmError();
    OUTLINED_FUNCTION_3();
    *(void *)uint64_t v22 = 0xD000000000000038;
    *(void *)(v22 + 8) = 0x80000001C9DA2F70;
    *(unsigned char *)(v22 + 16) = 2;
    swift_willThrow();
    return;
  }
  uint64_t v46 = v19;
  type metadata accessor for MLMultiArray();
  v48[4] = Dictionary.init(dictionaryLiteral:)();
  uint64_t v20 = specialized FeatureExtracting.extract(from:)(*(double *)v3);
  if (v2)
  {
    swift_bridgeObjectRelease();

    return;
  }
  OUTLINED_FUNCTION_26(v20, v21, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  uint64_t v23 = specialized FeatureExtracting.extract(from:)(a1, *(void *)(v3 + 8));
  OUTLINED_FUNCTION_26(v23, v24, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(v18, sel_aceRecognition);
  if (!v25)
  {
    __break(1u);
    goto LABEL_21;
  }
  id v26 = v25;
  uint64_t v27 = specialized FeatureExtracting.extract(from:)(v25, AsrSimpleFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static AsrSimpleFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);

  OUTLINED_FUNCTION_26(v27, v28, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  uint64_t v29 = specialized FeatureExtracting.extract(from:)(v46, SnrFeatureExtractor.extractImpl(from:), &one-time initialization token for extractedFeatures, &static SnrFeatureExtractor.extractedFeatures, one-time initialization function for extractedFeatures);
  OUTLINED_FUNCTION_26(v29, v30, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  swift_retain();
  id v31 = objc_msgSend(v18, sel_aceRecognition);
  if (!v31)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v32 = v31;
  uint64_t v45 = specialized FeatureExtracting.extract(from:)();
  swift_release();

  OUTLINED_FUNCTION_26(v45, v33, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
  swift_bridgeObjectRelease();
  uint64_t v34 = type metadata accessor for AutoSendInputFeatureExtractor();
  outlined init with copy of WordEmbeddingFeatureExtractor?(v3 + *(int *)(v34 + 36), v8);
  if (__swift_getEnumTagSinglePayload(v8, 1, v9) != 1)
  {
    outlined init with take of WordEmbeddingFeatureExtractor(v8, v47);
    id v41 = objc_msgSend(v18, sel_aceRecognition);
    if (v41)
    {
      char v42 = v41;
      uint64_t v43 = specialized FeatureExtracting.extract(from:)(v41);

      OUTLINED_FUNCTION_26(v43, v44, &demangling cache variable for type metadata for _NativeDictionary<String, MLMultiArray>);
      outlined destroy of WordEmbeddingFeatureExtractor(v47);
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
LABEL_22:
    __break(1u);
    return;
  }
  outlined destroy of WordEmbeddingFeatureExtractor?(v8);
LABEL_15:
  char v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v35, v36))
  {
    BOOL v37 = (uint8_t *)swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)BOOL v37 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v38 = Dictionary.Keys.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v40, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v35, v36, "Extracted AutoSend features: %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  swift_beginAccess();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AutoSendInputFeatureExtractor.update()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.autoSend);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C9CFE000, v3, v4, "Updating AutoSendInputFeatureExtractor", v5, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  uint64_t v6 = v1 + *(int *)(type metadata accessor for AutoSendInputFeatureExtractor() + 36);
  uint64_t v7 = type metadata accessor for WordEmbeddingFeatureExtractor();
  if (!__swift_getEnumTagSinglePayload(v6, 1, v7)) {
    WordEmbeddingFeatureExtractor.update()();
  }
}

void protocol witness for FeatureExtracting.extractImpl(from:) in conformance AutoSendInputFeatureExtractor(uint64_t a1)
{
}

uint64_t outlined init with copy of WordEmbeddingFeatureExtractor?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WordEmbeddingFeatureExtractor?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for WordEmbeddingFeatureExtractor?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WordEmbeddingFeatureExtractor();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      os_log_type_t v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      int64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

uint64_t specialized Set._Variant.insert(_:)(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *v2;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  swift_bridgeObjectRetain();
  uint64_t v34 = a2;
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v12 = -1 << *(unsigned char *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  uint64_t v33 = v10 + 56;
  if ((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v29 = v2;
    uint64_t v30 = a1;
    uint64_t v31 = ~v12;
    uint64_t v28 = v7;
    int64_t v16 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v15 = v7 + 16;
    os_log_type_t v14 = v16;
    uint64_t v32 = *(void *)(v15 + 56);
    uint64_t v17 = (void (**)(char *, uint64_t))(v15 - 8);
    v27[1] = v15 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    while (1)
    {
      uint64_t v18 = v10;
      unint64_t v19 = v32 * v13;
      unint64_t v20 = *(void *)(v10 + 48) + v32 * v13;
      uint64_t v21 = v14;
      v14(v9, v20, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v23 = *v17;
      (*v17)(v9, v6);
      if (v22) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v31;
      os_log_type_t v14 = v21;
      uint64_t v10 = v18;
      if (((*(void *)(v33 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v29;
        a1 = v30;
        uint64_t v7 = v28;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    v23(v34, v6);
    v21(v30, *(void *)(*v29 + 48) + v19, v6);
    return 0;
  }
  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v14 = *(void (**)(void, void, void))(v7 + 16);
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    id v25 = v34;
    v14(v9, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)((uint64_t)v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(a1, v25, v6);
    return 1;
  }
}

uint64_t specialized Set._subtract<A>(_:)(uint64_t result)
{
  if (!*(void *)(*(void *)v1 + 16)) {
    return result;
  }
  uint64_t v2 = result;
  uint64_t v3 = result + 56;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  if (!v6) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    os_log_type_t v14 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v15 = *v14;
    uint64_t v16 = v14[1];
    swift_bridgeObjectRetain();
    specialized Set._Variant.remove(_:)(v15, v16);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
LABEL_29:
      __break(1u);
      return result;
    }
    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v12 - 1) & v12;
  }
  int64_t v13 = v11 + 4;
  if (v13 < v7)
  {
    unint64_t v12 = *(void *)(v3 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_29;
        }
        if (v8 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_21;
        }
      }
    }
    int64_t v8 = v13;
    goto LABEL_21;
  }
LABEL_24:
  return swift_release();
}

uint64_t specialized _NativeSet.subtracting<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = *(void *)(a1 + 56);
    uint64_t v36 = a1 + 56;
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v34 = ~v5;
    if (-v5 < 64) {
      uint64_t v6 = ~(-1 << -(char)v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & v4;
    int64_t v35 = (unint64_t)(63 - v5) >> 6;
    uint64_t v8 = a2 + 56;
    swift_bridgeObjectRetain();
    int64_t v9 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v11 = v10 | (v9 << 6);
    while (1)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      Swift::Int v19 = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v2 + 32);
      unint64_t v21 = v19 & ~v20;
      if ((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21)) {
        break;
      }
LABEL_37:
      swift_bridgeObjectRelease();
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v12 = v9 + 1;
      if (__OFADD__(v9, 1))
      {
        __break(1u);
        goto LABEL_50;
      }
      if (v12 >= v35) {
        goto LABEL_48;
      }
      unint64_t v13 = *(void *)(v36 + 8 * v12);
      int64_t v14 = v9 + 1;
      if (!v13)
      {
        int64_t v14 = v9 + 2;
        if (v9 + 2 >= v35) {
          goto LABEL_48;
        }
        unint64_t v13 = *(void *)(v36 + 8 * v14);
        if (!v13)
        {
          int64_t v14 = v9 + 3;
          if (v9 + 3 >= v35) {
            goto LABEL_48;
          }
          unint64_t v13 = *(void *)(v36 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 4;
            if (v9 + 4 >= v35) {
              goto LABEL_48;
            }
            unint64_t v13 = *(void *)(v36 + 8 * v14);
            if (!v13)
            {
              int64_t v15 = v9 + 5;
              if (v9 + 5 >= v35)
              {
LABEL_48:
                outlined consume of [String : MLFeatureValue].Iterator._Variant();
                return v2;
              }
              unint64_t v13 = *(void *)(v36 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  int64_t v14 = v15 + 1;
                  if (__OFADD__(v15, 1)) {
                    break;
                  }
                  if (v14 >= v35) {
                    goto LABEL_48;
                  }
                  unint64_t v13 = *(void *)(v36 + 8 * v14);
                  ++v15;
                  if (v13) {
                    goto LABEL_22;
                  }
                }
LABEL_50:
                __break(1u);
              }
              int64_t v14 = v9 + 5;
            }
          }
        }
      }
LABEL_22:
      unint64_t v7 = (v13 - 1) & v13;
      unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
      int64_t v9 = v14;
    }
    uint64_t v22 = *(void *)(v2 + 48);
    uint64_t v23 = (void *)(v22 + 16 * v21);
    BOOL v24 = *v23 == v18 && v23[1] == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      uint64_t v37 = a1;
      uint64_t v38 = v36;
      uint64_t v39 = v34;
      int64_t v40 = v9;
      unint64_t v41 = v7;
    }
    else
    {
      uint64_t v25 = ~v20;
      do
      {
        unint64_t v21 = (v21 + 1) & v25;
        if (((*(void *)(v8 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
          goto LABEL_37;
        }
        id v26 = (void *)(v22 + 16 * v21);
        BOOL v27 = *v26 == v18 && v26[1] == v17;
      }
      while (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
      uint64_t v37 = a1;
      uint64_t v38 = v36;
      uint64_t v39 = v34;
      int64_t v40 = v9;
      unint64_t v41 = v7;
      swift_bridgeObjectRelease();
    }
    char v28 = *(unsigned char *)(v2 + 32);
    unint64_t v29 = (unint64_t)((1 << v28) + 63) >> 6;
    size_t v30 = 8 * v29;
    if ((v28 & 0x3Fu) < 0xE || swift_stdlib_isStackAllocationSafe())
    {
      MEMORY[0x1F4188790]();
      memcpy((char *)&v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), (const void *)(v2 + 56), v30);
      uint64_t v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)&v34 - ((v30 + 15) & 0x3FFFFFFFFFFFFFF0), v29, v2, v21, &v37);
      swift_release();
      outlined consume of [String : MLFeatureValue].Iterator._Variant();
    }
    else
    {
      uint64_t v32 = (void *)swift_slowAlloc();
      memcpy(v32, (const void *)(v2 + 56), v30);
      uint64_t v31 = specialized closure #1 in _NativeSet.subtracting<A>(_:)((uint64_t)v32, v29, v2, v21, &v37);
      swift_release();
      outlined consume of [String : MLFeatureValue].Iterator._Variant();
      MEMORY[0x1CB78E290](v32, -1, -1);
    }
    return v31;
  }
  else
  {
    swift_release();
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized Set._Variant.remove(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = *(void *)(v5 + 48);
  unint64_t v10 = (void *)(v9 + 16 * v8);
  BOOL v11 = *v10 == a1 && v10[1] == a2;
  if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    uint64_t v15 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v15;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v16 = (void *)(v9 + 16 * v8);
      BOOL v17 = *v16 == a1 && v16[1] == a2;
    }
    while (!v17 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
  }
  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *v2;
  uint64_t v19 = *v2;
  *uint64_t v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    specialized _NativeSet.copy()();
    uint64_t v13 = v19;
  }
  uint64_t v14 = *(void *)(*(void *)(v13 + 48) + 16 * v8);
  specialized _NativeSet._delete(at:)(v8);
  *uint64_t v2 = v19;
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t specialized _NativeSet.resize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
    size_t v30 = (void *)(v2 + 56);
    if (v5 < 64) {
      uint64_t v6 = ~(-1 << v5);
    }
    else {
      uint64_t v6 = -1;
    }
    unint64_t v7 = v6 & *(void *)(v2 + 56);
    int64_t v8 = (unint64_t)(v5 + 63) >> 6;
    uint64_t v9 = v3 + 56;
    uint64_t result = swift_retain();
    int64_t v11 = 0;
    if (!v7) {
      goto LABEL_7;
    }
LABEL_6:
    unint64_t v12 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
    {
      BOOL v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      Hasher.init(_seed:)();
      String.hash(into:)();
      uint64_t result = Hasher._finalize()();
      uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
      unint64_t v21 = result & ~v20;
      unint64_t v22 = v21 >> 6;
      if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
      {
        char v24 = 0;
        unint64_t v25 = (unint64_t)(63 - v20) >> 6;
        while (++v22 != v25 || (v24 & 1) == 0)
        {
          BOOL v26 = v22 == v25;
          if (v22 == v25) {
            unint64_t v22 = 0;
          }
          v24 |= v26;
          uint64_t v27 = *(void *)(v9 + 8 * v22);
          if (v27 != -1)
          {
            unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
      char v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
      *char v28 = v18;
      v28[1] = v19;
      ++*(void *)(v4 + 16);
      if (v7) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v14 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_38;
      }
      if (v14 >= v8) {
        goto LABEL_32;
      }
      unint64_t v15 = v30[v14];
      ++v11;
      if (!v15)
      {
        int64_t v11 = v14 + 1;
        if (v14 + 1 >= v8) {
          goto LABEL_32;
        }
        unint64_t v15 = v30[v11];
        if (!v15)
        {
          int64_t v11 = v14 + 2;
          if (v14 + 2 >= v8) {
            goto LABEL_32;
          }
          unint64_t v15 = v30[v11];
          if (!v15)
          {
            int64_t v16 = v14 + 3;
            if (v16 >= v8)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v0;
              uint64_t v29 = 1 << *(unsigned char *)(v2 + 32);
              if (v29 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v29 + 63) >> 6, v30);
              }
              else {
                *size_t v30 = -1 << v29;
              }
              *(void *)(v2 + 16) = 0;
              break;
            }
            unint64_t v15 = v30[v16];
            if (!v15)
            {
              while (1)
              {
                int64_t v11 = v16 + 1;
                if (__OFADD__(v16, 1)) {
                  goto LABEL_39;
                }
                if (v11 >= v8) {
                  goto LABEL_32;
                }
                unint64_t v15 = v30[v11];
                ++v16;
                if (v15) {
                  goto LABEL_20;
                }
              }
            }
            int64_t v11 = v16;
          }
        }
      }
LABEL_20:
      unint64_t v7 = (v15 - 1) & v15;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v4;
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t result;
  int64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t i;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  char *v41;
  uint64_t v42;

  uint64_t v1 = v0;
  uint64_t v42 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  unint64_t v41 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v6 = v5;
  if (*(void *)(v4 + 16))
  {
    unint64_t v7 = 1 << *(unsigned char *)(v4 + 32);
    int64_t v8 = *(void *)(v4 + 56);
    uint64_t v37 = (void *)(v4 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1 << v7);
    }
    else {
      uint64_t v9 = -1;
    }
    unint64_t v10 = v9 & v8;
    int64_t v35 = v0;
    uint64_t v36 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v39 = v2;
    int64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    uint64_t v13 = 0;
    uint64_t v38 = v6;
    int64_t v14 = v41;
    unint64_t v15 = v42;
    if (!v10) {
      goto LABEL_7;
    }
LABEL_6:
    int64_t v16 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    int64_t v40 = v13;
    for (unint64_t i = v16 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v19)) + (v20 << 6))
    {
      unint64_t v22 = v4;
      unint64_t v23 = *(void *)(v4 + 48);
      char v24 = *(void *)(v39 + 72);
      unint64_t v25 = *(void (**)(char *, unint64_t, uint64_t))(v39 + 32);
      v25(v14, v23 + v24 * i, v15);
      uint64_t v6 = v38;
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
      BOOL v26 = -1 << *(unsigned char *)(v6 + 32);
      uint64_t v27 = result & ~v26;
      char v28 = v27 >> 6;
      if (((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6))) == 0)
      {
        size_t v30 = 0;
        uint64_t v31 = (unint64_t)(63 - v26) >> 6;
        while (++v28 != v31 || (v30 & 1) == 0)
        {
          uint64_t v32 = v28 == v31;
          if (v28 == v31) {
            char v28 = 0;
          }
          v30 |= v32;
          uint64_t v33 = *(void *)(v11 + 8 * v28);
          if (v33 != -1)
          {
            uint64_t v29 = __clz(__rbit64(~v33)) + (v28 << 6);
            goto LABEL_30;
          }
        }
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
        return result;
      }
      uint64_t v29 = __clz(__rbit64((-1 << v27) & ~*(void *)(v11 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
      *(void *)(v11 + ((v29 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v29;
      uint64_t result = ((uint64_t (*)(unint64_t, char *, uint64_t))v25)(*(void *)(v6 + 48) + v29 * v24, v41, v42);
      ++*(void *)(v6 + 16);
      uint64_t v4 = v22;
      uint64_t v13 = v40;
      if (v10) {
        goto LABEL_6;
      }
LABEL_7:
      uint64_t v18 = v13 + 1;
      if (__OFADD__(v13, 1)) {
        goto LABEL_38;
      }
      if (v18 >= v36) {
        goto LABEL_32;
      }
      uint64_t v19 = v37[v18];
      uint64_t v20 = v13 + 1;
      if (!v19)
      {
        uint64_t v20 = v13 + 2;
        if (v13 + 2 >= v36) {
          goto LABEL_32;
        }
        uint64_t v19 = v37[v20];
        if (!v19)
        {
          uint64_t v20 = v13 + 3;
          if (v13 + 3 >= v36) {
            goto LABEL_32;
          }
          uint64_t v19 = v37[v20];
          if (!v19)
          {
            unint64_t v21 = v13 + 4;
            if (v13 + 4 >= v36)
            {
LABEL_32:
              swift_release();
              uint64_t v1 = v35;
              uint64_t v34 = 1 << *(unsigned char *)(v4 + 32);
              if (v34 > 63) {
                specialized UnsafeMutablePointer.assign(repeating:count:)(0, (unint64_t)(v34 + 63) >> 6, v37);
              }
              else {
                uint8_t *v37 = -1 << v34;
              }
              *(void *)(v4 + 16) = 0;
              break;
            }
            uint64_t v19 = v37[v21];
            if (!v19)
            {
              while (1)
              {
                uint64_t v20 = v21 + 1;
                if (__OFADD__(v21, 1)) {
                  goto LABEL_39;
                }
                if (v20 >= v36) {
                  goto LABEL_32;
                }
                uint64_t v19 = v37[v20];
                ++v21;
                if (v19) {
                  goto LABEL_20;
                }
              }
            }
            uint64_t v20 = v13 + 4;
          }
        }
      }
LABEL_20:
      unint64_t v10 = (v19 - 1) & v19;
      int64_t v40 = v20;
    }
  }
  uint64_t result = swift_release();
  uint64_t *v1 = v6;
  return result;
}

uint64_t specialized closure #1 in _NativeSet.subtracting<A>(_:)(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v38 = (unint64_t *)result;
  *(void *)(result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v39 = a3 + 56;
  while (2)
  {
    uint64_t v37 = v8;
    do
    {
      while (1)
      {
        int64_t v9 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v11 = (v10 - 1) & v10;
          unint64_t v12 = __clz(__rbit64(v10)) | (v9 << 6);
        }
        else
        {
          int64_t v13 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            goto LABEL_46;
          }
          int64_t v14 = (unint64_t)(a5[2] + 64) >> 6;
          int64_t v15 = a5[3];
          if (v13 >= v14) {
            goto LABEL_44;
          }
          uint64_t v16 = a5[1];
          unint64_t v17 = *(void *)(v16 + 8 * v13);
          if (!v17)
          {
            int64_t v15 = v9 + 1;
            if (v9 + 2 >= v14) {
              goto LABEL_44;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v9 + 2));
            if (v17)
            {
              int64_t v13 = v9 + 2;
            }
            else
            {
              int64_t v15 = v9 + 2;
              if (v9 + 3 >= v14) {
                goto LABEL_44;
              }
              unint64_t v17 = *(void *)(v16 + 8 * (v9 + 3));
              if (v17)
              {
                int64_t v13 = v9 + 3;
              }
              else
              {
                int64_t v13 = v9 + 4;
                int64_t v15 = v9 + 3;
                if (v9 + 4 >= v14) {
                  goto LABEL_44;
                }
                unint64_t v17 = *(void *)(v16 + 8 * v13);
                if (!v17)
                {
                  int64_t v18 = v9 + 5;
                  while (v18 < v14)
                  {
                    unint64_t v17 = *(void *)(v16 + 8 * v18++);
                    if (v17)
                    {
                      int64_t v13 = v18 - 1;
                      goto LABEL_20;
                    }
                  }
                  int64_t v15 = v14 - 1;
LABEL_44:
                  a5[3] = v15;
                  a5[4] = 0;
                  swift_retain();
                  return specialized _NativeSet.extractSubset(using:count:)(v38, a2, v37, a3);
                }
              }
            }
          }
LABEL_20:
          uint64_t v11 = (v17 - 1) & v17;
          unint64_t v12 = __clz(__rbit64(v17)) + (v13 << 6);
          int64_t v9 = v13;
        }
        uint64_t v19 = (uint64_t *)(*(void *)(*a5 + 48) + 16 * v12);
        uint64_t v21 = *v19;
        uint64_t v20 = v19[1];
        a5[3] = v9;
        a5[4] = v11;
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v22 = Hasher._finalize()();
        uint64_t v23 = -1 << *(unsigned char *)(a3 + 32);
        unint64_t v24 = v22 & ~v23;
        unint64_t v25 = v24 >> 6;
        uint64_t v26 = 1 << v24;
        if (((1 << v24) & *(void *)(v39 + 8 * (v24 >> 6))) != 0) {
          break;
        }
LABEL_38:
        uint64_t result = swift_bridgeObjectRelease();
      }
      uint64_t v27 = *(void *)(a3 + 48);
      char v28 = (void *)(v27 + 16 * v24);
      BOOL v29 = *v28 == v21 && v28[1] == v20;
      if (!v29 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v31 = ~v23;
        for (unint64_t i = v24 + 1; ; unint64_t i = v33 + 1)
        {
          unint64_t v33 = i & v31;
          if (((*(void *)(v39 + (((i & v31) >> 3) & 0xFFFFFFFFFFFFFF8)) >> (i & v31)) & 1) == 0) {
            break;
          }
          uint64_t v34 = (void *)(v27 + 16 * v33);
          BOOL v35 = *v34 == v21 && v34[1] == v20;
          if (v35 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            uint64_t result = swift_bridgeObjectRelease();
            unint64_t v25 = v33 >> 6;
            uint64_t v26 = 1 << v33;
            goto LABEL_28;
          }
        }
        goto LABEL_38;
      }
      uint64_t result = swift_bridgeObjectRelease();
LABEL_28:
      unint64_t v30 = v38[v25];
      v38[v25] = v30 & ~v26;
    }
    while ((v26 & v30) == 0);
    uint64_t v8 = v37 - 1;
    if (__OFSUB__(v37, 1))
    {
LABEL_46:
      __break(1u);
      return result;
    }
    if (v37 != 1) {
      continue;
    }
    return MEMORY[0x1E4FBC870];
  }
}

uint64_t specialized _NativeSet.extractSubset(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (!a3)
  {
    uint64_t v8 = MEMORY[0x1E4FBC870];
LABEL_35:
    swift_release();
    return v8;
  }
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3) {
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t result = static _SetStorage.allocate(capacity:)();
  uint64_t v8 = result;
  uint64_t v30 = a2;
  if (a2 < 1) {
    unint64_t v9 = 0;
  }
  else {
    unint64_t v9 = *a1;
  }
  uint64_t v10 = 0;
  uint64_t v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      unint64_t v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    uint64_t v14 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      goto LABEL_39;
    }
    if (v14 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      uint64_t v10 = v14 + 1;
      if (v14 + 1 >= v30) {
        goto LABEL_35;
      }
      unint64_t v15 = a1[v10];
      if (!v15)
      {
        uint64_t v10 = v14 + 2;
        if (v14 + 2 >= v30) {
          goto LABEL_35;
        }
        unint64_t v15 = a1[v10];
        if (!v15) {
          break;
        }
      }
    }
LABEL_23:
    unint64_t v9 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    unint64_t v17 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v13);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v8 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v11 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_33;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_33:
    *(void *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    char v28 = (void *)(*(void *)(v8 + 48) + 16 * v23);
    *char v28 = v18;
    v28[1] = v19;
    ++*(void *)(v8 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_38;
    }
    if (!v5) {
      goto LABEL_35;
    }
  }
  uint64_t v16 = v14 + 3;
  if (v16 >= v30) {
    goto LABEL_35;
  }
  unint64_t v15 = a1[v16];
  if (v15)
  {
    uint64_t v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    uint64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v30) {
      goto LABEL_35;
    }
    unint64_t v15 = a1[v10];
    ++v16;
    if (v15) {
      goto LABEL_23;
    }
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t specialized UnsafeMutablePointer.assign(repeating:count:)(uint64_t result, uint64_t a2, void *a3)
{
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    for (; a2; --a2)
      *a3++ = result;
  }
  return result;
}

void *specialized _NativeSet.copy()()
{
  uint64_t v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1 << *(unsigned char *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 56 + 8 * v7) {
    uint64_t result = memmove(result, (const void *)(v2 + 56), 8 * v7);
  }
  int64_t v9 = 0;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v11 = *(void *)(v2 + 56);
  uint64_t v12 = -1;
  if (v10 < 64) {
    uint64_t v12 = ~(-1 << v10);
  }
  unint64_t v13 = v12 & v11;
  int64_t v14 = (unint64_t)(v10 + 63) >> 6;
  if ((v12 & v11) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  unint64_t v15 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  for (unint64_t i = v15 | (v9 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v9 << 6))
  {
    uint64_t v20 = (void *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v21 = v20[1];
    unint64_t v22 = (void *)(*(void *)(v4 + 48) + 16 * i);
    *unint64_t v22 = *v20;
    v22[1] = v21;
    uint64_t result = (void *)swift_bridgeObjectRetain();
    if (v13) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }
LABEL_25:
    unint64_t v13 = (v18 - 1) & v18;
  }
  int64_t v19 = v17 + 3;
  if (v19 >= v14) {
    goto LABEL_28;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
    int64_t v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    int64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v9 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_25;
    }
  }
LABEL_30:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *result;
  unint64_t v10;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  const void *v25;
  int64_t v26;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v6 = *v0;
  unint64_t v7 = static _SetStorage.copy(original:)();
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = (void *)swift_release();
LABEL_30:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t result = (void *)(v7 + 56);
  uint64_t v10 = (unint64_t)((1 << *(unsigned char *)(v8 + 32)) + 63) >> 6;
  char v24 = v1;
  unint64_t v25 = (const void *)(v6 + 56);
  if (v8 != v6 || (unint64_t)result >= v6 + 56 + 8 * v10) {
    uint64_t result = memmove(result, v25, 8 * v10);
  }
  uint64_t v12 = 0;
  *(void *)(v8 + 16) = *(void *)(v6 + 16);
  unint64_t v13 = 1 << *(unsigned char *)(v6 + 32);
  int64_t v14 = *(void *)(v6 + 56);
  unint64_t v15 = -1;
  if (v13 < 64) {
    unint64_t v15 = ~(-1 << v13);
  }
  uint64_t v16 = v15 & v14;
  BOOL v26 = (unint64_t)(v13 + 63) >> 6;
  if ((v15 & v14) == 0) {
    goto LABEL_12;
  }
LABEL_11:
  int64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v12 << 6))
  {
    unint64_t v22 = *(void *)(v3 + 72) * i;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v5, *(void *)(v6 + 48) + v22, v2);
    uint64_t result = (void *)(*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(void *)(v8 + 48) + v22, v5, v2);
    if (v16) {
      goto LABEL_11;
    }
LABEL_12:
    int64_t v19 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v26) {
      goto LABEL_28;
    }
    uint64_t v20 = *((void *)v25 + v19);
    ++v12;
    if (!v20)
    {
      uint64_t v12 = v19 + 1;
      if (v19 + 1 >= v26) {
        goto LABEL_28;
      }
      uint64_t v20 = *((void *)v25 + v12);
      if (!v20)
      {
        uint64_t v12 = v19 + 2;
        if (v19 + 2 >= v26) {
          goto LABEL_28;
        }
        uint64_t v20 = *((void *)v25 + v12);
        if (!v20) {
          break;
        }
      }
    }
LABEL_25:
    uint64_t v16 = (v20 - 1) & v20;
  }
  uint64_t v21 = v19 + 3;
  if (v21 >= v26)
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    uint64_t v1 = v24;
    goto LABEL_30;
  }
  uint64_t v20 = *((void *)v25 + v21);
  if (v20)
  {
    uint64_t v12 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v12 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_28;
    }
    uint64_t v20 = *((void *)v25 + v12);
    ++v21;
    if (v20) {
      goto LABEL_25;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t specialized _NativeSet.copyAndResize(capacity:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
  uint64_t v3 = static _SetStorage.resize(original:capacity:move:)();
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v4;
    return result;
  }
  uint64_t v5 = 1 << *(unsigned char *)(v2 + 32);
  uint64_t v6 = v2 + 56;
  if (v5 < 64) {
    uint64_t v7 = ~(-1 << v5);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(v2 + 56);
  int64_t v29 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = v3 + 56;
  uint64_t result = swift_retain();
  int64_t v11 = 0;
  if (!v8) {
    goto LABEL_7;
  }
LABEL_6:
  unint64_t v12 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v12 | (v11 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v11 << 6))
  {
    int64_t v17 = (uint64_t *)(*(void *)(v2 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v20 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v21 = result & ~v20;
    unint64_t v22 = v21 >> 6;
    if (((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6))) == 0)
    {
      char v24 = 0;
      unint64_t v25 = (unint64_t)(63 - v20) >> 6;
      while (++v22 != v25 || (v24 & 1) == 0)
      {
        BOOL v26 = v22 == v25;
        if (v22 == v25) {
          unint64_t v22 = 0;
        }
        v24 |= v26;
        uint64_t v27 = *(void *)(v9 + 8 * v22);
        if (v27 != -1)
        {
          unint64_t v23 = __clz(__rbit64(~v27)) + (v22 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    unint64_t v23 = __clz(__rbit64((-1 << v21) & ~*(void *)(v9 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v9 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    char v28 = (void *)(*(void *)(v4 + 48) + 16 * v23);
    *char v28 = v18;
    v28[1] = v19;
    ++*(void *)(v4 + 16);
    if (v8) {
      goto LABEL_6;
    }
LABEL_7:
    int64_t v14 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      goto LABEL_36;
    }
    if (v14 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v14);
    ++v11;
    if (!v15)
    {
      int64_t v11 = v14 + 1;
      if (v14 + 1 >= v29) {
        goto LABEL_32;
      }
      unint64_t v15 = *(void *)(v6 + 8 * v11);
      if (!v15)
      {
        int64_t v11 = v14 + 2;
        if (v14 + 2 >= v29) {
          goto LABEL_32;
        }
        unint64_t v15 = *(void *)(v6 + 8 * v11);
        if (!v15) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v8 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v0;
    goto LABEL_34;
  }
  unint64_t v15 = *(void *)(v6 + 8 * v16);
  if (v15)
  {
    int64_t v11 = v16;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v11 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v11 >= v29) {
      goto LABEL_32;
    }
    unint64_t v15 = *(void *)(v6 + 8 * v11);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t (**v14)(unint64_t, char *, uint64_t);
  uint64_t result;
  int64_t v16;
  unint64_t v17;
  unint64_t i;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *v0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<UUID>);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)();
  unint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_34:
    uint64_t *v1 = v8;
    return result;
  }
  uint64_t v9 = 1 << *(unsigned char *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  uint64_t v34 = v0;
  BOOL v35 = v6 + 56;
  if (v9 < 64) {
    int64_t v11 = ~(-1 << v9);
  }
  else {
    int64_t v11 = -1;
  }
  unint64_t v12 = v11 & v10;
  uint64_t v36 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v37 = v3 + 16;
  unint64_t v13 = v7 + 56;
  uint64_t v38 = v3;
  int64_t v14 = (uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32);
  uint64_t result = swift_retain();
  int64_t v16 = 0;
  if (!v12) {
    goto LABEL_7;
  }
LABEL_6:
  int64_t v17 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v17 | (v16 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v16 << 6))
  {
    unint64_t v22 = v6;
    unint64_t v23 = *(void *)(v6 + 48);
    char v24 = *(void *)(v38 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v5, v23 + v24 * i, v2);
    lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
    uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)();
    unint64_t v25 = -1 << *(unsigned char *)(v8 + 32);
    BOOL v26 = result & ~v25;
    uint64_t v27 = v26 >> 6;
    if (((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6))) == 0)
    {
      int64_t v29 = 0;
      uint64_t v30 = (unint64_t)(63 - v25) >> 6;
      while (++v27 != v30 || (v29 & 1) == 0)
      {
        uint64_t v31 = v27 == v30;
        if (v27 == v30) {
          uint64_t v27 = 0;
        }
        v29 |= v31;
        uint64_t v32 = *(void *)(v13 + 8 * v27);
        if (v32 != -1)
        {
          char v28 = __clz(__rbit64(~v32)) + (v27 << 6);
          goto LABEL_30;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    char v28 = __clz(__rbit64((-1 << v26) & ~*(void *)(v13 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
LABEL_30:
    *(void *)(v13 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    uint64_t result = (*v14)(*(void *)(v8 + 48) + v28 * v24, v5, v2);
    ++*(void *)(v8 + 16);
    uint64_t v6 = v22;
    if (v12) {
      goto LABEL_6;
    }
LABEL_7:
    uint64_t v19 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      goto LABEL_36;
    }
    if (v19 >= v36) {
      goto LABEL_32;
    }
    uint64_t v20 = *(void *)(v35 + 8 * v19);
    ++v16;
    if (!v20)
    {
      int64_t v16 = v19 + 1;
      if (v19 + 1 >= v36) {
        goto LABEL_32;
      }
      uint64_t v20 = *(void *)(v35 + 8 * v16);
      if (!v20)
      {
        int64_t v16 = v19 + 2;
        if (v19 + 2 >= v36) {
          goto LABEL_32;
        }
        uint64_t v20 = *(void *)(v35 + 8 * v16);
        if (!v20) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v12 = (v20 - 1) & v20;
  }
  unint64_t v21 = v19 + 3;
  if (v21 >= v36)
  {
LABEL_32:
    uint64_t result = swift_release_n();
    uint64_t v1 = v34;
    goto LABEL_34;
  }
  uint64_t v20 = *(void *)(v35 + 8 * v21);
  if (v20)
  {
    int64_t v16 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v16 = v21 + 1;
    if (__OFADD__(v21, 1)) {
      break;
    }
    if (v16 >= v36) {
      goto LABEL_32;
    }
    uint64_t v20 = *(void *)(v35 + 8 * v16);
    ++v21;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t specialized _NativeSet._delete(at:)(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1 << *(unsigned char *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)();
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        Swift::Int v10 = Hasher._finalize()();
        swift_bridgeObjectRelease();
        Swift::Int v11 = v10 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 >= v9 && v2 >= v11)
          {
LABEL_15:
            uint64_t v14 = *(void *)(v3 + 48);
            unint64_t v15 = (_OWORD *)(v14 + 16 * v2);
            int64_t v16 = (_OWORD *)(v14 + 16 * v6);
            BOOL v17 = v2 != v6 || v15 >= v16 + 1;
            int64_t v2 = v6;
            if (v17)
            {
              *unint64_t v15 = *v16;
              int64_t v2 = v6;
            }
          }
        }
        else if (v11 >= v9 || v2 >= v11)
        {
          goto LABEL_15;
        }
        unint64_t v6 = (v6 + 1) & v7;
      }
      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    uint64_t result = swift_release();
  }
  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    unint64_t v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  unint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *unint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

uint64_t specialized _NativeSet.insertNew(_:at:isUnique:)(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v28 = v3;
  uint64_t v29 = v7;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v11 > v10)
    {
      specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v12 = *v3;
  lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  uint64_t v13 = dispatch thunk of Hashable._rawHashValue(seed:)();
  uint64_t v14 = -1 << *(unsigned char *)(v12 + 32);
  a2 = v13 & ~v14;
  uint64_t v30 = v12;
  uint64_t v15 = v12 + 56;
  if ((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v16 = ~v14;
    BOOL v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    uint64_t v18 = v7 + 16;
    uint64_t v17 = v19;
    uint64_t v20 = *(void *)(v18 + 56);
    do
    {
      v17(v9, *(void *)(v30 + 48) + v20 * a2, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
      char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v18 - 8))(v9, v6);
      if (v21) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v16;
    }
    while (((*(void *)(v15 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v22 = v29;
  uint64_t v23 = *v28;
  *(void *)(v23 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(*(void *)(v23 + 48) + *(void *)(v22 + 72) * a2, v31, v6);
  uint64_t v25 = *(void *)(v23 + 16);
  BOOL v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (!v26)
  {
    *(void *)(v23 + 16) = v27;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FeatureDictionaryError and conformance FeatureDictionaryError()
{
  unint64_t result = lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError;
  if (!lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureDictionaryError and conformance FeatureDictionaryError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag;
  if (!lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeatureFlag and conformance CamFeatureFlag);
  }
  return result;
}

uint64_t specialized _NativeDictionary.makeIterator()@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  *a2 = a1;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t result = a1 + 64;
  uint64_t v5 = v6;
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  a2[1] = result;
  a2[2] = ~v3;
  a2[3] = 0;
  a2[4] = v2 & v5;
  return result;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for UUID();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_0_9()
{
  uint64_t v1 = 0x7365727574616546;
  unint64_t v2 = 0xE900000000000020;
  String.append(_:)(*(Swift::String *)&v1);
}

uint64_t OUTLINED_FUNCTION_1_5()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_2_3(uint64_t a1@<X8>)
{
  unint64_t v3 = 0xD00000000000002ALL;
  unint64_t v2 = (a1 - 32) | 0x8000000000000000;
  String.append(_:)(*(Swift::String *)&v3);
}

uint64_t OUTLINED_FUNCTION_3_3(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = v2;
  *(void *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 16) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_4_3(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_5_1()
{
  _StringGuts.grow(_:)(53);
}

void OUTLINED_FUNCTION_6_2(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_7_2(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return swift_bridgeObjectRetain_n();
}

uint64_t OUTLINED_FUNCTION_11_0()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_12_0()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_13_0(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_14_0()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_15_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &a9);
}

void OUTLINED_FUNCTION_18_0(Swift::String a1)
{
  String.append(_:)(a1);
}

uint64_t OUTLINED_FUNCTION_19_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_20_0()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_21_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_22_0(uint64_t a1)
{
  return specialized Set.subtracting(_:)(a1, v1);
}

uint64_t OUTLINED_FUNCTION_23_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_24_0()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_26(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0, a3);
}

uint64_t OUTLINED_FUNCTION_28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  return a15;
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of static WithForcedValuesOffering.forcedValues.modify(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

uint64_t dispatch thunk of WithForcedValuesOffering.withForcedValue<A>(_:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 48))();
}

uint64_t CamDoubleUserDefaults.value.getter(char a1)
{
  if (one-time initialization token for forcedValues != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static CamDoubleUserDefaults.forcedValues;
  if (!*(void *)(static CamDoubleUserDefaults.forcedValues + 16)
    || (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) == 0))
  {
    uint64_t v6 = 0xD000000000000026;
    swift_endAccess();
    uint64_t v7 = CamDoubleUserDefaults.values.getter();
    if (a1)
    {
      if (a1 == 1) {
        uint64_t v6 = 0xD00000000000002CLL;
      }
      else {
        uint64_t v6 = 0xD000000000000033;
      }
      if (a1 == 1) {
        uint64_t v8 = 0x80000001C9DA3050;
      }
      else {
        uint64_t v8 = 0x80000001C9DA3010;
      }
    }
    else
    {
      uint64_t v8 = 0x80000001C9DA3080;
    }
    specialized Dictionary.subscript.getter(v6, v8, v7, &v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v13)
    {
      if (OUTLINED_FUNCTION_3_4()) {
        return specialized Double.init<A>(_:)(v10, v11);
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v12);
    }
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_endAccess();
  return v5;
}

uint64_t static CamUserHistoryDefaultsManager.getValue(key:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  if (one-time initialization token for forcedValues != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v6 = static CamUserHistoryDefaultsManager.forcedValues;
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.getter(a1, a2, v6, &v13);
  swift_bridgeObjectRelease();
  if (v14)
  {
    outlined init with take of Any(&v13, a3);
    return swift_endAccess();
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v13);
    swift_endAccess();
    id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
    OUTLINED_FUNCTION_1_6();
    uint64_t v10 = v9;
    id v11 = objc_msgSend(v8, sel_dictionaryForKey_, v9);

    if (v11)
    {
      uint64_t v12 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      uint64_t v12 = Dictionary.init(dictionaryLiteral:)();
    }
    swift_bridgeObjectRetain();
    specialized Dictionary.subscript.getter(a1, a2, v12, a3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

void static CamUserHistoryDefaultsManager.setValue(key:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  uint64_t v7 = (void *)MEMORY[0x1CB78D210](0xD000000000000016, 0x80000001C9DA30B0);
  id v8 = objc_msgSend(v6, sel_dictionaryForKey_, v7);

  if (v8)
  {
    uint64_t v9 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v9 = Dictionary.init(dictionaryLiteral:)();
  }
  uint64_t v14 = v9;
  outlined init with copy of Any(a3, (uint64_t)v13);
  swift_bridgeObjectRetain();
  specialized Dictionary.subscript.setter((uint64_t)v13, a1, a2);
  id v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v12 = (void *)MEMORY[0x1CB78D210](0xD000000000000016, 0x80000001C9DA30B0);
  objc_msgSend(v10, sel_setObject_forKey_, isa, v12);
}

void PersistencyKeys.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_2_4();
  }
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24))
  {
    outlined init with take of Any((_OWORD *)a1, v6);
    specialized Dictionary._Variant.setValue(_:forKey:)(v6, a2, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    outlined destroy of Any?(a1);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, a3, v6);
    swift_bridgeObjectRelease();
    return outlined destroy of Any?((uint64_t)v6);
  }
}

void one-time initialization function for forcedValues()
{
  static CamDoubleUserDefaults.forcedValues = MEMORY[0x1E4FBC868];
}

{
  static CamStringUserDefaults.forcedValues = MEMORY[0x1E4FBC868];
}

{
  static CamUserHistoryDefaultsManager.forcedValues = MEMORY[0x1E4FBC868];
}

uint64_t CamDoubleUserDefaults.values.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  OUTLINED_FUNCTION_1_6();
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v0, sel_dictionaryForKey_, v1);

  if (v3)
  {
    uint64_t v4 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    return v4;
  }
  else
  {
    return Dictionary.init(dictionaryLiteral:)();
  }
}

void CamDoubleUserDefaults.rawValue.getter(char a1)
{
  if (!a1) {
    OUTLINED_FUNCTION_2_4();
  }
}

uint64_t specialized Double.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)();
    swift_bridgeObjectRelease();
    char v6 = v9;
  }
  else
  {
    MEMORY[0x1F4188790](a1);
    if ((a2 & 0x2000000000000000) != 0)
    {
      char v6 = (v3 > 0x20u || ((0x100003E01uLL >> v3) & 1) == 0)
        && (uint64_t v7 = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0
        && *v7 == 0;
      swift_bridgeObjectRelease();
    }
    else
    {
      if ((v3 & 0x1000000000000000) != 0)
      {
        uint64_t v4 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v5 = v3 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v4 = _StringObject.sharedUTF8.getter();
      }
      char v6 = _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(v4, v5, (void (*)(uint64_t *__return_ptr))partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:));
      swift_bridgeObjectRelease();
    }
  }
  if (v6) {
    return 0;
  }
  else {
    return 0;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamDoubleUserDefaults()
{
  return specialized == infix<A>(_:_:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CamDoubleUserDefaults(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamDoubleUserDefaults(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CamDoubleUserDefaults(void *a1@<X8>)
{
  CamDoubleUserDefaults.rawValue.getter(*v1);
  *a1 = v3;
  a1[1] = v4;
}

uint64_t CamStringUserDefaults.values.getter()
{
  id v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1CB18]), sel_init);
  uint64_t v1 = (void *)MEMORY[0x1CB78D210](0xD00000000000001ELL, 0x80000001C9DA30F0);
  id v2 = objc_msgSend(v0, sel_dictionaryForKey_, v1);

  if (v2)
  {
    uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    return v3;
  }
  else
  {
    return Dictionary.init(dictionaryLiteral:)();
  }
}

uint64_t CamStringUserDefaults.value.getter()
{
  if (one-time initialization token for forcedValues != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static CamStringUserDefaults.forcedValues;
  if (!*(void *)(static CamStringUserDefaults.forcedValues + 16)
    || (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) == 0))
  {
    swift_endAccess();
    uint64_t v4 = CamStringUserDefaults.values.getter();
    uint64_t v5 = OUTLINED_FUNCTION_0_10();
    specialized Dictionary.subscript.getter(v5, v6, v4, v7);
    swift_bridgeObjectRelease();
    if (v11)
    {
      if (OUTLINED_FUNCTION_3_4()) {
        return v9;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v10);
    }
    return 0;
  }
  uint64_t v3 = *(void *)(*(void *)(v0 + 56) + 16 * v1);
  swift_endAccess();
  swift_bridgeObjectRetain();
  return v3;
}

uint64_t CamStringUserDefaults.rawValue.getter()
{
  return OUTLINED_FUNCTION_0_10();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CamStringUserDefaults(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

unsigned char *closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  BOOL v7 = v6 && (result = (unsigned char *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t _sSRsRi_zrlE17withMemoryRebound2to_qd_1_qd__m_qd_1_SRyqd__Gqd_0_YKXEtqd_0_YKs5ErrorRd_0_Ri_d__Ri_d_1_r1_lFSRyxGq0_q_Ri_zRi0_zRi__Ri0__Ri_0_Ri0_0_r1_lys4Int8VsAD_pqd_1_Isgyrzr_SRys5UInt8VGqd_1_sAD_pAIRszAGRsd__sAD_pRsd_0_Ri_d_1_r_1_lIetMgyrzo_Tpq5Sb_Tg507_sSRys4f5VGxs5E34_pIgyrzo_ACxsAD_pIegyrzr_lTRSb_TG5SRyAGGSbsAD_pIgyrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *__return_ptr))
{
  if (a1)
  {
    a3(&var2);
    if (!v3) {
      char v4 = var2;
    }
  }
  else
  {
    ((void (*)(uint64_t *__return_ptr, void, void))a3)((uint64_t *)((char *)&var2 + 1), 0, 0);
    if (!v3) {
      char v4 = BYTE1(var2);
    }
  }
  return v4 & 1;
}

unsigned char *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return closure #1 in closure #1 in Double.init<A>(_:)(a1, a2);
}

void *partial apply for specialized closure #1 in _StringGuts.withCString<A>(_:)@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = (*(void *(**)(uint64_t *__return_ptr))(v1 + 16))(&v5);
  if (!v2) {
    *a1 = v5;
  }
  return result;
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t OUTLINED_FUNCTION_0_10()
{
  return 0x6365446C65646F4DLL;
}

void OUTLINED_FUNCTION_1_6()
{
  JUMPOUT(0x1CB78D210);
}

uint64_t OUTLINED_FUNCTION_3_4()
{
  return swift_dynamicCast();
}

void DawnHeuristicScorer.scoreHypothesis(features:loggingId:)(Swift::OpaquePointer a1)
{
  long long v2 = (void *)specialized Dictionary.subscript.getter(0xD000000000000015, 0x80000001C9DA1BE0, a1._rawValue);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_int64Value);

    if (__OFSUB__(v4, 1)) {
      __break(1u);
    }
    else {
      DawnHeuristicScorer.platformBoost(features:)(a1);
    }
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v5 = 0xD00000000000002FLL;
    *(void *)(v5 + 8) = 0x80000001C9DA3170;
    *(unsigned char *)(v5 + 16) = 1;
    swift_willThrow();
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DawnHeuristicScorer.platformBoost(features:)(Swift::OpaquePointer features)
{
  long long v2 = (void *)specialized Dictionary.subscript.getter(0x665F73656D6D6F70, 0xEF6B6361626C6C61, features._rawValue);
  if (v2)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(v2, sel_int64Value);

    if (v4) {
      return 0.1;
    }
  }
  BOOL v6 = (void *)specialized Dictionary.subscript.getter(0x535F5050415F5349, 0xEF54554354524F48, features._rawValue);
  if (v6 && (v7 = v6, id v8 = objc_msgSend(v6, sel_int64Value), v7, v8))
  {
    if ((static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, 0x80000001C9DA3140) & 1) != 0
      && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
    {
      return 0.015;
    }
    uint64_t v9 = (void *)specialized Dictionary.subscript.getter(0xD000000000000013, 0x80000001C9DA2430, features._rawValue);
    if (!v9) {
      return 0.015;
    }
    id v10 = v9;
    id v11 = objc_msgSend(v9, sel_int64Value);

    if (!v11) {
      return 0.015;
    }
    else {
      return 0.06;
    }
  }
  else
  {
    uint64_t v12 = (void *)specialized Dictionary.subscript.getter(0x705F726573726170, 0xEF797469726F6972, features._rawValue);
    if (v12)
    {
      long long v13 = v12;
      id v14 = objc_msgSend(v12, sel_int64Value);

      return (double)(uint64_t)v14 * 0.01;
    }
    else
    {
      return 0.0;
    }
  }
}

uint64_t type metadata accessor for DawnHeuristicScorer()
{
  return self;
}

void protocol witness for Scoring.scoreHypothesis(features:loggingId:) in conformance DawnHeuristicScorer(Swift::OpaquePointer a1)
{
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d78Cam25UserParseFeatureExtractorV27extractOnScreenAppBundleIds4fromShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v19 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    v17[1] = v1;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v8 = *(void *)(type metadata accessor for RRCandidate() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v18 = *(void *)(v8 + 72);
    id v10 = (void (**)(char *, uint64_t))(v3 + 8);
    do
    {
      RRCandidate.entity.getter();
      uint64_t v11 = RREntity.id.getter();
      uint64_t v13 = v12;
      (*v10)(v5, v19);
      uint64_t v7 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v20;
      }
      unint64_t v14 = *(void *)(v7 + 16);
      if (v14 >= *(void *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v20;
      }
      *(void *)(v7 + 16) = v14 + 1;
      uint64_t v15 = v7 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v13;
      v9 += v18;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t one-time initialization function for kLogger()
{
  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.ranker);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t);
  uint64_t vars8;

  uint64_t v0 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v0, kLogger);
  uint64_t v1 = __swift_project_value_buffer(v0, (uint64_t)kLogger);
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v2 = __swift_project_value_buffer(v0, (uint64_t)static Logger.ranker);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v1, v2, v0);
}

uint64_t static UserParseFeatureExtractor.extractOnScreenAppBundleIds(from:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  uint64_t v4 = OUTLINED_FUNCTION_11_1(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_21_1();
  uint64_t v5 = type metadata accessor for RRMetadata();
  OUTLINED_FUNCTION_0_11();
  uint64_t v106 = v6;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_9_3();
  uint64_t v10 = v8 - v9;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_20_1();
  uint64_t v143 = v12;
  uint64_t v13 = type metadata accessor for RRDataSourceMetadataValue();
  OUTLINED_FUNCTION_0_11();
  uint64_t v132 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_5_2();
  uint64_t v126 = v16;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_10_0();
  uint64_t v138 = v18;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_10_0();
  uint64_t v130 = v20;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_10_0();
  uint64_t v129 = v22;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_20_1();
  uint64_t v133 = v24;
  uint64_t v120 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_11();
  v142 = v25;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_5_2();
  uint64_t v108 = v27;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_20_1();
  uint64_t v115 = v29;
  uint64_t v125 = type metadata accessor for RRCandidate();
  OUTLINED_FUNCTION_0_11();
  uint64_t v31 = v30;
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_5_2();
  v105 = v33;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_10_0();
  uint64_t v119 = v35;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)v101 - v37;
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)kLogger);
  int64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.info.getter();
  BOOL v42 = os_log_type_enabled(v40, v41);
  v116 = v38;
  if (v42)
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl(&dword_1C9CFE000, v40, v41, "Expanding salient entity apps.", v43, 2u);
    uint64_t v44 = v43;
    uint64_t v38 = v116;
    MEMORY[0x1CB78E290](v44, -1, -1);
  }

  uint64_t v45 = MEMORY[0x1E4FBC860];
  uint64_t v144 = MEMORY[0x1E4FBC860];
  uint64_t v46 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v114 = v46;
  if (v46)
  {
    uint64_t v47 = v31 + 16;
    OUTLINED_FUNCTION_19_1();
    uint64_t v117 = *(void *)(v47 + 56);
    v101[1] = a1;
    uint64_t v102 = v50;
    uint64_t v112 = a1 + v50;
    v118 = (void (**)(void))(v142 + 1);
    v123 = (void (**)(void))(v47 - 8);
    uint64_t v137 = v106 + 16;
    v136 = (uint64_t (**)(uint64_t, uint64_t))(v106 + 88);
    int v135 = *MEMORY[0x1E4FA3DB0];
    v134 = (void (**)(void))(v106 + 8);
    v128 = (void (**)(uint64_t, uint64_t))(v106 + 96);
    v142 = (void (**)(uint64_t, uint64_t, uint64_t))(v132 + 32);
    unsigned int v107 = *MEMORY[0x1E4FA3DE0];
    v111 = (void (**)(void))(v132 + 104);
    v110 = (void (**)(void))(v132 + 8);
    unsigned int v103 = *MEMORY[0x1E4FA3DD0];
    v104 = (void (**)(uint64_t, char *, uint64_t))(v47 + 16);
    uint64_t v131 = v1;
    uint64_t v141 = v10;
    uint64_t v51 = v125;
    uint64_t v124 = v47;
    v113 = v49;
    uint64_t v127 = v5;
    while (1)
    {
      uint64_t v122 = v48;
      uint64_t v52 = v49;
      ((void (*)(char *, uint64_t, uint64_t))v49)(v38, v112 + v117 * v48, v51);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      uint64_t v53 = *v118;
      OUTLINED_FUNCTION_13_1();
      v53();
      uint64_t v54 = UsoTask.verbString.getter();
      uint64_t v56 = v55;
      swift_release();
      BOOL v57 = v54 == 0x415F6E6F6D6D6F63 && v56 == 0xEA00000000007070;
      uint64_t v121 = (unint64_t)v123 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      if (v57)
      {
        swift_bridgeObjectRelease();
        uint64_t v61 = OUTLINED_FUNCTION_7_3();
        v52(v61);
      }
      else
      {
        char v58 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v59 = OUTLINED_FUNCTION_7_3();
        v52(v59);
        if ((v58 & 1) == 0)
        {
          uint64_t v60 = *v123;
          uint64_t v51 = v125;
          OUTLINED_FUNCTION_13_1();
          v60();
          goto LABEL_36;
        }
      }
      RRCandidate.entity.getter();
      uint64_t v51 = RREntity.metadata.getter();
      OUTLINED_FUNCTION_13_1();
      v53();
      uint64_t v62 = *(void *)(v51 + 16);
      if (v62)
      {
        uint64_t v63 = OUTLINED_FUNCTION_22_1();
        uint64_t v65 = *(void (**)(void))(v64 + 72);
        v139 = *(void (**)(void, void, void))(v64 + 16);
        v140 = v65;
        uint64_t v109 = v63;
        swift_bridgeObjectRetain();
        uint64_t v66 = MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v67 = v143;
          uint64_t v68 = v139;
          v139(v143, v51, v5);
          v68(v10, v67, v5);
          int v69 = (*v136)(v10, v5);
          if (v69 == v135)
          {
            uint64_t v70 = v5;
            uint64_t v71 = v134;
            (*v128)(v10, v70);
            uint64_t v72 = v10;
            uint64_t v73 = *v142;
            uint64_t v74 = v130;
            (*v142)(v130, v72, v13);
            v73(v1, v74, v13);
            __swift_storeEnumTagSinglePayload(v1, 0, 1, v13);
            id v75 = *v71;
            uint64_t v5 = v127;
            ((void (*)(uint64_t, uint64_t))v75)(v143, v127);
          }
          else
          {
            uint64_t v76 = *v134;
            OUTLINED_FUNCTION_18_1();
            v76();
            __swift_storeEnumTagSinglePayload(v1, 1, 1, v13);
            ((void (*)(uint64_t, uint64_t))v76)(v143, v5);
          }
          if (__swift_getEnumTagSinglePayload(v1, 1, v13) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v1, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
          }
          else
          {
            uint64_t v77 = *v142;
            uint64_t v78 = v129;
            (*v142)(v129, v1, v13);
            v77(v138, v78, v13);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v66 + 16) + 1, 1, v66);
            }
            unint64_t v80 = *(void *)(v66 + 16);
            unint64_t v79 = *(void *)(v66 + 24);
            if (v80 >= v79 >> 1) {
              uint64_t v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1, v66);
            }
            *(void *)(v66 + 16) = v80 + 1;
            OUTLINED_FUNCTION_19_1();
            v77(v66 + v81 + *(void *)(v82 + 72) * v80, v138, v13);
            uint64_t v1 = v131;
          }
          uint64_t v10 = v141;
          v51 += (uint64_t)v140;
          --v62;
        }
        while (v62);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v66 = MEMORY[0x1E4FBC860];
      }
      uint64_t v60 = *v111;
      ((void (*)(uint64_t, void, uint64_t))*v111)(v133, v107, v13);
      uint64_t v83 = *(void *)(v66 + 16);
      if (v83)
      {
        v140 = v60;
        OUTLINED_FUNCTION_19_1();
        uint64_t v85 = v66 + v84;
        uint64_t v60 = (void (*)(void))v66;
        uint64_t v87 = *(void *)(v86 + 72);
        lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
        swift_bridgeObjectRetain();
        uint64_t v88 = v85;
        while (1)
        {
          uint64_t v51 = v13;
          if (dispatch thunk of static Equatable.== infix(_:_:)()) {
            break;
          }
          v88 += v87;
          if (!--v83)
          {
            swift_bridgeObjectRelease();
            uint64_t v1 = v131;
            goto LABEL_34;
          }
        }
        swift_bridgeObjectRelease();
        unint64_t v91 = *v110;
        OUTLINED_FUNCTION_13_1();
        v91();
        ((void (*)(uint64_t, void, uint64_t))v140)(v126, v103, v13);
        uint64_t v92 = *((void *)v60 + 2);
        if (!v92)
        {
LABEL_44:
          OUTLINED_FUNCTION_13_1();
          v91();
          swift_bridgeObjectRelease();
          uint64_t v51 = v125;
          OUTLINED_FUNCTION_18_1();
          v93();
          uint64_t v94 = *v104;
          uint64_t v38 = v116;
          (*v104)((uint64_t)v105, v116, v51);
          uint64_t v95 = v144;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v95 + 16) + 1, 1);
            uint64_t v51 = v125;
            uint64_t v95 = v144;
          }
          uint64_t v1 = v131;
          unint64_t v97 = *(void *)(v95 + 16);
          unint64_t v96 = *(void *)(v95 + 24);
          if (v97 >= v96 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v96 > 1, v97 + 1, 1);
            uint64_t v51 = v125;
            uint64_t v95 = v144;
          }
          *(void *)(v95 + 16) = v97 + 1;
          v94(v95 + v102 + v97 * v117, v105, v51);
          uint64_t v144 = v95;
          uint64_t v10 = v141;
          goto LABEL_37;
        }
        swift_bridgeObjectRetain();
        while (1)
        {
          uint64_t v51 = v13;
          if (dispatch thunk of static Equatable.== infix(_:_:)()) {
            break;
          }
          v85 += v87;
          if (!--v92)
          {
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
        }
        swift_bridgeObjectRelease();
        OUTLINED_FUNCTION_13_1();
        v91();
        swift_bridgeObjectRelease();
        uint64_t v98 = OUTLINED_FUNCTION_6_3();
        ((void (*)(uint64_t))v60)(v98);
        uint64_t v1 = v131;
      }
      else
      {
LABEL_34:
        OUTLINED_FUNCTION_18_1();
        v89();
        swift_bridgeObjectRelease();
        uint64_t v90 = OUTLINED_FUNCTION_6_3();
        ((void (*)(uint64_t))v60)(v90);
      }
      uint64_t v10 = v141;
LABEL_36:
      uint64_t v38 = v116;
      ((void (*)(char *, uint64_t))v60)(v116, v51);
LABEL_37:
      uint64_t v48 = v122 + 1;
      uint64_t v49 = v113;
      if (v122 + 1 == v114)
      {
        uint64_t v45 = v144;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v99 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d78Cam25UserParseFeatureExtractorV27extractOnScreenAppBundleIds4fromShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v45);
  swift_release();
  return specialized Set.init<A>(_:)(v99);
}

uint64_t *UserParseFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static UserParseFeatureExtractor.extractedFeatures;
}

uint64_t UserParseFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  double v8 = UserParseFeatureExtractor.extractProbaFromAction(from:)(a1);
  uint64_t v9 = UserParseFeatureExtractor.extractRepetitionTypeFromAction(from:)(a1);
  uint64_t v10 = type metadata accessor for ActionCandidate();
  uint64_t v11 = *(void *)(a1 + *(int *)(v10 + 24));
  uint64_t v12 = (uint64_t *)(a1 + *(int *)(v10 + 36));
  uint64_t v13 = v12[1];
  if (v13)
  {
    specialized Set.contains(_:)(*v12, v13, a2);
    uint64_t v15 = v14 & 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  BOOL v16 = UserParseFeatureExtractor.extractIsTopNLParse(from:maxNLProba:)(a1, a3, a4 & 1);
  uint64_t v17 = UserParseFeatureExtractor.extractHighPriorityNLXParse(from:)(a1);
  uint64_t v18 = UserParseFeatureExtractor.extractIsInterpretableAsUniversalCommand(from:)(a1);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9D9C0;
  strcpy((char *)(inited + 32), "nl_parse_proba");
  *(unsigned char *)(inited + 47) = -18;
  *(void *)(inited + 48) = objc_msgSend(self, sel_featureValueWithDouble_, v8);
  strcpy((char *)(inited + 56), "top_nl_parse");
  *(unsigned char *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  uint64_t v20 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 72) = objc_msgSend(v20, v21, v16);
  *(void *)(inited + 80) = 0x6974697465706572;
  *(void *)(inited + 88) = 0xEF657079745F6E6FLL;
  uint64_t v22 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 96) = objc_msgSend(v22, v23, v9);
  *(void *)(inited + 104) = 0xD000000000000015;
  OUTLINED_FUNCTION_24_1();
  *(void *)(inited + 112) = v24;
  uint64_t v25 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 120) = objc_msgSend(v25, v26, v11);
  *(void *)(inited + 128) = 0xD000000000000013;
  OUTLINED_FUNCTION_24_1();
  *(void *)(inited + 136) = v27;
  uint64_t v28 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 144) = objc_msgSend(v28, v29, v15);
  *(void *)(inited + 152) = 0xD000000000000017;
  OUTLINED_FUNCTION_24_1();
  *(void *)(inited + 160) = v30;
  uint64_t v31 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 168) = objc_msgSend(v31, v32, v17);
  *(void *)(inited + 176) = 0xD000000000000025;
  OUTLINED_FUNCTION_24_1();
  *(void *)(inited + 184) = v33;
  uint64_t v34 = (void *)OUTLINED_FUNCTION_14_1();
  *(void *)(inited + 192) = objc_msgSend(v34, v35, v18);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

double UserParseFeatureExtractor.extractProbaFromAction(from:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for CamUSOParse(0);
  uint64_t v5 = OUTLINED_FUNCTION_11_1(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_17_0();
  outlined init with copy of CamParse(a1 + *(int *)(v7 + 20), v1);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v1, (void (*)(void))type metadata accessor for CamParse);
    return 0.0;
  }
  else
  {
    outlined init with take of CamUSOParse(v1, v2);
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    double v8 = v9;
    outlined destroy of CamParse(v2, (void (*)(void))type metadata accessor for CamUSOParse);
  }
  return v8;
}

uint64_t UserParseFeatureExtractor.extractRepetitionTypeFromAction(from:)(uint64_t a1)
{
  type metadata accessor for Siri_Nlu_External_RepetitionResult();
  OUTLINED_FUNCTION_0_11();
  uint64_t v39 = v2;
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_1();
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_RepetitionResult.RepetitionType();
  OUTLINED_FUNCTION_0_11();
  uint64_t v40 = v5;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_9_3();
  uint64_t v9 = v7 - v8;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v37 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for CamUSOParse(0);
  uint64_t v17 = OUTLINED_FUNCTION_11_1(v16);
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_2_1();
  uint64_t v20 = v19 - v18;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_2_1();
  uint64_t v24 = v23 - v22;
  uint64_t v25 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v25 + 20), v24);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v24, (void (*)(void))type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v24, v20);
    Siri_Nlu_External_UserParse.repetitionResult.getter();
    Siri_Nlu_External_RepetitionResult.repetitionType.getter();
    OUTLINED_FUNCTION_18_1();
    v27();
    uint64_t v28 = *MEMORY[0x1E4FA2918];
    uint64_t v29 = v40;
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 104);
    v38(v13, v28, v4);
    uint64_t v30 = lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type Siri_Nlu_External_RepetitionResult.RepetitionType and conformance Siri_Nlu_External_RepetitionResult.RepetitionType, MEMORY[0x1E4FA2928]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v37 = v30;
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v39 = v42;
    uint64_t v31 = v20;
    uint64_t v32 = v41;
    uint64_t v33 = *(void (**)(void))(v29 + 8);
    OUTLINED_FUNCTION_4_4();
    v33();
    (*(void (**)(uint64_t, char *, uint64_t))(v29 + 16))(v9, v15, v4);
    BOOL v34 = v39 == v32;
    uint64_t v35 = v31;
    if (v34)
    {
      OUTLINED_FUNCTION_4_4();
      v33();
      OUTLINED_FUNCTION_4_4();
      v33();
      outlined destroy of CamParse(v31, (void (*)(void))type metadata accessor for CamUSOParse);
      return 1;
    }
    else
    {
      v38(v13, *MEMORY[0x1E4FA2920], v4);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      BOOL v26 = v42 == v41;
      OUTLINED_FUNCTION_4_4();
      v33();
      OUTLINED_FUNCTION_4_4();
      v33();
      OUTLINED_FUNCTION_4_4();
      v33();
      outlined destroy of CamParse(v35, (void (*)(void))type metadata accessor for CamUSOParse);
    }
  }
  return v26;
}

BOOL UserParseFeatureExtractor.extractIsTopNLParse(from:maxNLProba:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for CamUSOParse(0);
  uint64_t v8 = OUTLINED_FUNCTION_11_1(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v13 + 20), v12);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v12, (void (*)(void))type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v12, v3);
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    double v16 = v15;
    outlined destroy of CamParse(v3, (void (*)(void))type metadata accessor for CamUSOParse);
    return v16 == *(double *)&a2 && (a3 & 1) == 0;
  }
}

uint64_t UserParseFeatureExtractor.extractHighPriorityNLXParse(from:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v4 = OUTLINED_FUNCTION_11_1(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_9_3();
  uint64_t v7 = v5 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_15_1();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_2_1();
  uint64_t v16 = v15 - v14;
  uint64_t v17 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v17 + 20), v16);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v16, (void (*)(void))type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v16, v1);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v1 + *(int *)(v11 + 20), (uint64_t)v10);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    uint64_t v18 = 0;
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v19) != 1)
    {
      outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v10, v7);
      OUTLINED_FUNCTION_0_11();
      uint64_t v21 = v20;
      int v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v7, v19);
      if (v23 == *MEMORY[0x1E4FA27A8] || v23 == *MEMORY[0x1E4FA2790] || v23 == *MEMORY[0x1E4FA2778])
      {
        uint64_t v18 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v7, v19);
        uint64_t v18 = 0;
      }
    }
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined destroy of CamParse(v1, (void (*)(void))type metadata accessor for CamUSOParse);
  }
  return v18;
}

uint64_t UserParseFeatureExtractor.extractIsInterpretableAsUniversalCommand(from:)(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for CamUSOParse(0);
  uint64_t v5 = OUTLINED_FUNCTION_11_1(v4);
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_16_0();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v6);
  uint64_t v7 = OUTLINED_FUNCTION_17_0();
  outlined init with copy of CamParse(a1 + *(int *)(v7 + 20), v1);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of CamParse(v1, (void (*)(void))type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v1, v2);
    char v9 = Siri_Nlu_External_UserParse.interpretableAsUniversalCommand.getter();
    outlined destroy of CamParse(v2, (void (*)(void))type metadata accessor for CamUSOParse);
    return v9 & 1;
  }
}

void specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    Swift::Int v6 = Hasher._finalize()();
    uint64_t v7 = -1 << *(unsigned char *)(a3 + 32);
    Swift::Int v8 = v6 & ~v7;
    OUTLINED_FUNCTION_8_3();
    if (v9)
    {
      uint64_t v10 = *(void *)(a3 + 48);
      uint64_t v11 = (void *)(v10 + 16 * v8);
      if ((*v11 != a1 || v11[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
      {
        uint64_t v13 = ~v7;
        uint64_t v14 = (v8 + 1) & v13;
        OUTLINED_FUNCTION_8_3();
        if (v15)
        {
          do
          {
            uint64_t v16 = (void *)(v10 + 16 * v14);
            if (*v16 == a1 && v16[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
            uint64_t v14 = (v14 + 1) & v13;
            OUTLINED_FUNCTION_8_3();
          }
          while ((v18 & 1) != 0);
        }
      }
    }
  }
}

uint64_t RRCandidate.isOnScreen.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RRDataSourceMetadataValue?);
  uint64_t v2 = OUTLINED_FUNCTION_11_1(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_2_1();
  uint64_t v74 = v4 - v3;
  uint64_t v5 = type metadata accessor for RRMetadata();
  OUTLINED_FUNCTION_0_11();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_9_3();
  uint64_t v11 = v9 - v10;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_20_1();
  uint64_t v77 = v13;
  uint64_t v14 = type metadata accessor for RRDataSourceMetadataValue();
  OUTLINED_FUNCTION_0_11();
  uint64_t v16 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_5_2();
  uint64_t v65 = v18;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_10_0();
  uint64_t v73 = v20;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_20_1();
  uint64_t v67 = v24;
  uint64_t v25 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_11();
  uint64_t v27 = v26;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_21_1();
  RRCandidate.entity.getter();
  uint64_t v29 = RREntity.metadata.getter();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0, v25);
  uint64_t v30 = *(void *)(v29 + 16);
  if (v30)
  {
    uint64_t v31 = v7 + 16;
    OUTLINED_FUNCTION_22_1();
    uint64_t v71 = *(void *)(v31 + 56);
    uint64_t v72 = v32;
    int v69 = *MEMORY[0x1E4FA3DB0];
    uint64_t v33 = (void (**)(uint64_t, uint64_t))(v31 - 8);
    id v75 = (void (**)(void))(v16 + 32);
    swift_bridgeObjectRetain();
    uint64_t v76 = MEMORY[0x1E4FBC860];
    uint64_t v66 = (void *)v16;
    uint64_t v70 = (void (**)(uint64_t, uint64_t))(v31 - 8);
    do
    {
      v72(v77, v29, v5);
      v72(v11, v77, v5);
      uint64_t v34 = OUTLINED_FUNCTION_23_1();
      if (v35(v34) == v69)
      {
        uint64_t v36 = OUTLINED_FUNCTION_23_1();
        v37(v36);
        uint64_t v38 = *v75;
        OUTLINED_FUNCTION_12_1();
        v38();
        uint64_t v68 = v30;
        uint64_t v39 = v5;
        uint64_t v40 = v33;
        uint64_t v41 = v74;
        OUTLINED_FUNCTION_12_1();
        v38();
        __swift_storeEnumTagSinglePayload(v74, 0, 1, v14);
        uint64_t v42 = *v40;
        uint64_t v5 = v39;
        uint64_t v30 = v68;
      }
      else
      {
        uint64_t v42 = *v33;
        (*v33)(v11, v5);
        uint64_t v41 = v74;
        __swift_storeEnumTagSinglePayload(v74, 1, 1, v14);
      }
      v42(v77, v5);
      if (__swift_getEnumTagSinglePayload(v41, 1, v14) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v41, &demangling cache variable for type metadata for RRDataSourceMetadataValue?);
      }
      else
      {
        uint64_t v43 = *v75;
        OUTLINED_FUNCTION_12_1();
        v43();
        OUTLINED_FUNCTION_12_1();
        v43();
        uint64_t v44 = v76;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v76 + 16) + 1, 1, v76);
        }
        unint64_t v46 = *(void *)(v44 + 16);
        unint64_t v45 = *(void *)(v44 + 24);
        uint64_t v76 = v44;
        if (v46 >= v45 >> 1) {
          uint64_t v76 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v45 > 1, v46 + 1, 1, v44);
        }
        *(void *)(v76 + 16) = v46 + 1;
        OUTLINED_FUNCTION_19_1();
        ((void (*)(unint64_t, uint64_t, uint64_t))v43)(v48 + v47 + *(void *)(v49 + 72) * v46, v73, v14);
      }
      v29 += v71;
      --v30;
      uint64_t v33 = v70;
    }
    while (v30);
    swift_bridgeObjectRelease_n();
    uint64_t v50 = v76;
    uint64_t v51 = v66;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v50 = MEMORY[0x1E4FBC860];
    uint64_t v51 = (void *)v16;
  }
  uint64_t v52 = (void (*)(uint64_t, void, uint64_t))v51[13];
  v52(v67, *MEMORY[0x1E4FA3DE0], v14);
  uint64_t v53 = *(void *)(v50 + 16);
  if (v53)
  {
    OUTLINED_FUNCTION_19_1();
    uint64_t v55 = v50 + v54;
    uint64_t v56 = v51[9];
    lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(&lazy protocol witness table cache variable for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue, MEMORY[0x1E4FA3DE8]);
    swift_bridgeObjectRetain();
    uint64_t v57 = v55;
    while ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
    {
      v57 += v56;
      if (!--v53)
      {
        swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v59 = (void (*)(uint64_t, uint64_t))v51[1];
    v59(v67, v14);
    v52(v65, *MEMORY[0x1E4FA3DD0], v14);
    uint64_t v60 = *(void *)(v50 + 16);
    if (v60)
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = v60 - 1;
      do
      {
        uint64_t v62 = v61;
        char v63 = dispatch thunk of static Equatable.== infix(_:_:)();
        if (v63) {
          break;
        }
        uint64_t v61 = v62 - 1;
        v55 += v56;
      }
      while (v62);
      char v58 = v63 ^ 1;
      swift_bridgeObjectRelease();
    }
    else
    {
      char v58 = 1;
    }
    v59(v65, v14);
  }
  else
  {
LABEL_21:
    ((void (*)(uint64_t, uint64_t))v51[1])(v67, v14);
    char v58 = 0;
  }
  swift_bridgeObjectRelease();
  return v58 & 1;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance UserParseFeatureExtractor()
{
  UserParseFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance UserParseFeatureExtractor(uint64_t a1)
{
  return UserParseFeatureExtractor.extractImpl(from:)(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned char *)(v1 + 16));
}

uint64_t outlined init with copy of CamParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamParse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of CamUSOParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamUSOParse(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CamParse(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

uint64_t outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of RRDataSourceMetadataValue?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

uint64_t lazy protocol witness table accessor for type RRDataSourceMetadataValue and conformance RRDataSourceMetadataValue(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UserParseFeatureExtractor()
{
  return swift_bridgeObjectRelease();
}

uint64_t assignWithCopy for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  return a1;
}

uint64_t assignWithTake for UserParseFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserParseFeatureExtractor(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 17))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserParseFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UserParseFeatureExtractor()
{
  return &type metadata for UserParseFeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_6_3()
{
  return *(void *)(v0 - 312);
}

uint64_t OUTLINED_FUNCTION_7_3()
{
  return *(void *)(v0 - 312);
}

uint64_t OUTLINED_FUNCTION_11_1(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_14_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_1()
{
  return type metadata accessor for CamParse(0);
}

uint64_t OUTLINED_FUNCTION_16_0()
{
  return type metadata accessor for CamParse(0);
}

uint64_t OUTLINED_FUNCTION_17_0()
{
  return type metadata accessor for ActionCandidate();
}

uint64_t OUTLINED_FUNCTION_22_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_1()
{
  return v0;
}

void HeuristicScorer.scoreHypothesis(features:loggingId:)(Swift::OpaquePointer a1)
{
  uint64_t v2 = (void *)specialized Dictionary.subscript.getter(0x535F5050415F5349, 0xEF54554354524F48, a1._rawValue);
  if (!v2)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v8 = 0xD000000000000029;
    uint64_t v9 = "Could not find extracted IS_APP_SHORTCUT.";
LABEL_7:
    OUTLINED_FUNCTION_0_12((uint64_t)v8, (uint64_t)v9);
    return;
  }
  uint64_t v3 = v2;
  id v4 = objc_msgSend(v2, sel_int64Value);

  uint64_t v5 = (void *)specialized Dictionary.subscript.getter(0x656D6D6F705F7369, 0xE900000000000073, a1._rawValue);
  if (!v5)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v8 = 0xD000000000000023;
    uint64_t v9 = "Could not find extracted IS_POMMES.";
    goto LABEL_7;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(v5, sel_int64Value);

  if (v4)
  {
    HeuristicScorer.scoreAppShortcut(features:)(a1);
  }
  else if (v7)
  {
    HeuristicScorer.scorePommes(features:)(a1);
  }
  else
  {
    HeuristicScorer.scoreNLX(features:)(a1);
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scoreAppShortcut(features:)(Swift::OpaquePointer features)
{
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.ranker);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C9CFE000, v3, v4, "AppShortcut feature flag enabled, running AppShortcut scoring logic", v5, 2u);
    MEMORY[0x1CB78E290](v5, -1, -1);
  }

  uint64_t v6 = (void *)specialized Dictionary.subscript.getter(0xD000000000000013, 0x80000001C9DA2430, features._rawValue);
  if (!v6)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    void *v16 = 0xD00000000000002DLL;
    uint64_t v17 = "Could not find extracted IS_APP_FOREGROUNDED.";
LABEL_14:
    OUTLINED_FUNCTION_0_12((uint64_t)v16, (uint64_t)v17);
    return result;
  }
  id v7 = v6;
  id v8 = objc_msgSend(v6, sel_int64Value);

  uint64_t v9 = (void *)OUTLINED_FUNCTION_2_6(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (!v9)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    void *v16 = 0xD000000000000032;
    uint64_t v17 = "Could not find extracted REPEATED_FLOW_HANDLER_ID.";
    goto LABEL_14;
  }
  uint64_t v10 = v9;
  id v11 = objc_msgSend(v9, sel_int64Value);

  if (v8)
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1C9CFE000, v12, v13, "Boosting auto shortcut score because app is on screen", v14, 2u);
      MEMORY[0x1CB78E290](v14, -1, -1);
    }

    if (v11) {
      return 0.57;
    }
    else {
      return 0.56;
    }
  }
  else if (v11)
  {
    return 0.53;
  }
  else
  {
    return 0.52;
  }
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scorePommes(features:)(Swift::OpaquePointer features)
{
  uint64_t v2 = (void *)specialized Dictionary.subscript.getter(0xD000000000000016, 0x80000001C9DA1C50, features._rawValue);
  if (v2)
  {
    uint64_t v3 = v2;
    unint64_t v4 = (unint64_t)objc_msgSend(v2, sel_int64Value);

    uint64_t v5 = (void *)specialized Dictionary.subscript.getter(0x665F73656D6D6F70, 0xEF6B6361626C6C61, features._rawValue);
    if (v5)
    {
      uint64_t v6 = v5;
      BOOL v7 = (v4 | (unint64_t)objc_msgSend(v5, sel_int64Value)) == 0;

      return dbl_1C9D9DA40[v7];
    }
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v9 = 0xD000000000000029;
    uint64_t v10 = "Could not find extracted POMMES_FALLBACK.";
  }
  else
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v9 = 0xD000000000000030;
    uint64_t v10 = "Could not find extracted POMMES_HIGH_CONFIDENCE.";
  }
  OUTLINED_FUNCTION_0_12((uint64_t)v9, (uint64_t)v10);
  return result;
}

Swift::Double __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> HeuristicScorer.scoreNLX(features:)(Swift::OpaquePointer features)
{
  uint64_t v2 = (void *)OUTLINED_FUNCTION_2_6(0xD000000000000017, (uint64_t)"high_priority_nl_parser");
  if (!v2)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v18 = 0xD000000000000030;
    uint64_t v19 = "Could not find extracted POMMES_HIGH_CONFIDENCE.";
LABEL_13:
    OUTLINED_FUNCTION_0_12((uint64_t)v18, (uint64_t)v19);
    return result;
  }
  uint64_t v3 = v2;
  id v4 = objc_msgSend(v2, sel_int64Value);

  uint64_t v5 = (void *)specialized Dictionary.subscript.getter(0x705F6C6E5F706F74, 0xEC00000065737261, features._rawValue);
  if (!v5)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v18 = 0xD000000000000026;
    uint64_t v19 = "Could not find extracted TOP_NL_PARSE.";
    goto LABEL_13;
  }
  uint64_t v6 = v5;
  id v7 = objc_msgSend(v5, sel_int64Value);

  id v8 = (void *)specialized Dictionary.subscript.getter(0x65737261705F6C6ELL, 0xEE0061626F72705FLL, features._rawValue);
  if (!v8)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v18 = 0xD000000000000025;
    uint64_t v19 = "Could not find extracted PARSE_PROBA.";
    goto LABEL_13;
  }
  uint64_t v9 = v8;
  objc_msgSend(v8, sel_doubleValue);

  uint64_t v10 = (void *)OUTLINED_FUNCTION_2_6(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (!v10
    || (id v11 = v10,
        id v12 = objc_msgSend(v10, sel_int64Value),
        v11,
        (os_log_type_t v13 = (void *)OUTLINED_FUNCTION_2_6(0xD000000000000014, (uint64_t)"plugin_affinity_rank")) == 0))
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *uint64_t v18 = 0xD000000000000032;
    uint64_t v19 = "Could not find extracted REPEATED_FLOW_HANDLER_ID.";
    goto LABEL_13;
  }
  uint64_t v14 = v13;
  id v15 = objc_msgSend(v13, sel_int64Value);

  if (!v7)
  {
    BOOL v16 = v15 == (id)2;
    uint64_t v17 = (double *)&unk_1C9D9DA60;
LABEL_16:
    Swift::Double result = v17[v16];
    if (!v12) {
      return result;
    }
    return result + 0.01;
  }
  if (v4)
  {
    BOOL v16 = v15 == (id)2;
    uint64_t v17 = (double *)&unk_1C9D9DA50;
    goto LABEL_16;
  }
  Swift::Double result = 0.52;
  if (v15 != (id)2) {
    Swift::Double result = 0.5;
  }
  if (v12) {
    return result + 0.01;
  }
  return result;
}

uint64_t type metadata accessor for HeuristicScorer()
{
  return self;
}

void protocol witness for Scoring.scoreHypothesis(features:loggingId:) in conformance HeuristicScorer(Swift::OpaquePointer a1)
{
}

uint64_t OUTLINED_FUNCTION_0_12@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a1 + 8) = (a2 - 32) | 0x8000000000000000;
  *(unsigned char *)(a1 + 16) = 1;
  return swift_willThrow();
}

uint64_t OUTLINED_FUNCTION_2_6@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2);
}

uint64_t dispatch thunk of ActionHandler.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActionHandler.handle(camInput:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void static PommesFeatureExtractor.configuredScoreThreshold()()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4F1CB18]);
  id v1 = @nonobjc NSUserDefaults.init(suiteName:)(0xD000000000000015, 0x80000001C9DA3360);
  if (v1)
  {
    id v2 = v1;
    uint64_t v3 = (void *)MEMORY[0x1CB78D210](0xD000000000000012, 0x80000001C9DA3380);
    objc_msgSend(v2, sel_doubleForKey_, v3);
  }
}

uint64_t *PommesFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static PommesFeatureExtractor.extractedFeatures;
}

uint64_t PommesFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v7 = closure #1 in PommesFeatureExtractor.extractImpl(from:)(a1, a2);
  uint64_t v8 = closure #2 in PommesFeatureExtractor.extractImpl(from:)(a1);
  uint64_t v9 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v9 + 20), (uint64_t)v6);
  BOOL v10 = swift_getEnumCaseMultiPayload() == 1;
  outlined destroy of CamParse((uint64_t)v6);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
  *(void *)(inited + 32) = 0xD000000000000016;
  *(void *)(inited + 40) = 0x80000001C9DA1C50;
  id v12 = self;
  *(void *)(inited + 48) = objc_msgSend(v12, sel_featureValueWithInt64_, v7);
  *(void *)(inited + 56) = 0x665F73656D6D6F70;
  *(void *)(inited + 64) = 0xEF6B6361626C6C61;
  *(void *)(inited + 72) = objc_msgSend(v12, sel_featureValueWithInt64_, v8);
  *(void *)(inited + 80) = 0x656D6D6F705F7369;
  *(void *)(inited + 88) = 0xE900000000000073;
  *(void *)(inited + 96) = objc_msgSend(v12, sel_featureValueWithInt64_, v10);
  type metadata accessor for MLFeatureValue();
  return Dictionary.init(dictionaryLiteral:)();
}

BOOL closure #1 in PommesFeatureExtractor.extractImpl(from:)(uint64_t a1, double a2)
{
  uint64_t v4 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (void **)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    int v9 = EnumCaseMultiPayload;
    BOOL result = 0;
    if (v9 == 1)
    {
      id v11 = *v6;
      dispatch thunk of PommesResponse.primaryQueryConfidence()();
      double v13 = v12;

      return v13 >= a2;
    }
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v6);
    return 0;
  }
  return result;
}

uint64_t closure #2 in PommesFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (void **)((char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for ActionCandidate();
  outlined init with copy of CamParse(a1 + *(int *)(v5 + 20), (uint64_t)v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    int v7 = EnumCaseMultiPayload;
    uint64_t result = 0;
    if (v7 == 1)
    {
      int v9 = *v4;
      char v10 = dispatch thunk of PommesResponse.isPersonalDomainFallback.getter();

      return v10 & 1;
    }
  }
  else
  {
    outlined destroy of CamParse((uint64_t)v4);
    return 0;
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance PommesFeatureExtractor()
{
  PommesFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance PommesFeatureExtractor(uint64_t a1)
{
  return PommesFeatureExtractor.extractImpl(from:)(a1, *v1);
}

id @nonobjc NSUserDefaults.init(suiteName:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = (void *)MEMORY[0x1CB78D210]();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = objc_msgSend(v2, sel_initWithSuiteName_, v3);

  return v4;
}

ValueMetadata *type metadata accessor for PommesFeatureExtractor()
{
  return &type metadata for PommesFeatureExtractor;
}

uint64_t CamSingletonProvider.camHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return outlined consume of CamHandler?(v3);
}

void static CamSingletonProvider.cam()(uint64_t *a1@<X8>)
{
}

void static CamSingletonProvider.cam(camEnabledFeatures:allowDefaultAskRepeatModel:)(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.ambiguityHandling);
  swift_bridgeObjectRetain_n();
  int v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v49 = a3;
    uint64_t v11 = MEMORY[0x1CB78D400](v10, &type metadata for CamFeature);
    char v12 = a2;
    unint64_t v14 = v13;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v14, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_1_7();
    a2 = v12;
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 1024;
    a3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9CFE000, v7, v8, "camEnabledFeatures: %s, allowDefaultAskRepeatModel: %{BOOL}d", (uint8_t *)v9, 0x12u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    OUTLINED_FUNCTION_1_7();
  }
  uint64_t v15 = qword_1EBC69D00;
  if (qword_1EBC69D00)
  {
    uint64_t v16 = qword_1EBC69D08;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_1C9CFE000, v17, v18, "Found existing CamHandler", v19, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    if (specialized static Array<A>.== infix(_:_:)(v15, a1))
    {
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        *(_WORD *)swift_slowAlloc() = 0;
        OUTLINED_FUNCTION_2_7(&dword_1C9CFE000, v22, v23, "Trying to update existing CamHandler.");
        OUTLINED_FUNCTION_2_2();
      }

      CamHandler.update()();
      if (v24)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        a3[3] = (uint64_t)&type metadata for CamHandler;
        a3[4] = (uint64_t)&protocol witness table for CamHandler;
        *a3 = v15;
        a3[1] = v16;
      }
      return;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v50 = a3;
      uint64_t v27 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136315394;
      char v48 = a2;
      uint64_t v28 = swift_bridgeObjectRetain();
      log = v25;
      uint64_t v29 = MEMORY[0x1CB78D400](v28, &type metadata for CamFeature);
      os_log_type_t type = v26;
      unint64_t v31 = v30;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v31, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v32 = swift_bridgeObjectRetain();
      uint64_t v33 = MEMORY[0x1CB78D400](v32, &type metadata for CamFeature);
      unint64_t v35 = v34;
      swift_bridgeObjectRelease();
      uint64_t v36 = v33;
      a2 = v48;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v35, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_1_7();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, log, type, "Feature flags for existing CamHandler %s don't match: %s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      a3 = v50;
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      OUTLINED_FUNCTION_1_7();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_2_7(&dword_1C9CFE000, v39, v40, "Creating new CamHandler");
    OUTLINED_FUNCTION_2_2();
  }

  swift_bridgeObjectRetain();
  if (AFDeviceSupportsFullSiriUOD()) {
    char v41 = AFShouldRunAsrOnServerForUOD() ^ 1;
  }
  else {
    char v41 = 0;
  }
  uint64_t v42 = CamHandler.init(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(a1, a2 & 1, v41);
  if (!v51)
  {
    uint64_t v44 = v42;
    uint64_t v45 = v43;
    type metadata accessor for CamSingletonProvider();
    swift_initStaticObject();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    CamSingletonProvider.camHandler.setter(v44, v45);
    a3[3] = (uint64_t)&type metadata for CamHandler;
    a3[4] = (uint64_t)&protocol witness table for CamHandler;
    *a3 = v44;
    a3[1] = v45;
  }
}

void static CamSingletonProvider.cam(camEnabledFeatures:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t CamSingletonProvider.deinit()
{
  outlined consume of CamHandler?(*(void *)(v0 + 16));
  return v0;
}

uint64_t CamSingletonProvider.__deallocating_deinit()
{
  outlined consume of CamHandler?(*(void *)(v0 + 16));
  return MEMORY[0x1F4186488](v0, 32, 7);
}

uint64_t specialized static Array<A>.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (unsigned __int8 *)(a1 + 32);
    id v4 = (unsigned __int8 *)(a2 + 32);
    do
    {
      int v6 = *v3++;
      int v5 = v6;
      int v8 = *v4++;
      int v7 = v8;
      if (v5 == 1) {
        unint64_t v9 = 0x4F5455415F534D53;
      }
      else {
        unint64_t v9 = 0xD000000000000010;
      }
      if (v5 == 1) {
        unint64_t v10 = 0xEC000000444E4553;
      }
      else {
        unint64_t v10 = 0x80000001C9DA2710;
      }
      if (v5) {
        uint64_t v11 = v9;
      }
      else {
        uint64_t v11 = 0x455045525F4B5341;
      }
      if (v5) {
        unint64_t v12 = v10;
      }
      else {
        unint64_t v12 = 0xEA00000000005441;
      }
      unint64_t v13 = 0x80000001C9DA2710;
      if (v7 == 1) {
        unint64_t v14 = 0x4F5455415F534D53;
      }
      else {
        unint64_t v14 = 0xD000000000000010;
      }
      if (v7 == 1) {
        unint64_t v13 = 0xEC000000444E4553;
      }
      if (v7) {
        uint64_t v15 = v14;
      }
      else {
        uint64_t v15 = 0x455045525F4B5341;
      }
      if (v7) {
        unint64_t v16 = v13;
      }
      else {
        unint64_t v16 = 0xEA00000000005441;
      }
      if (v11 == v15 && v12 == v16)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v18 & 1) == 0) {
          return 0;
        }
      }
      --v2;
    }
    while (v2);
  }
  return 1;
}

uint64_t closure #1 in serialize<A>(_:at:)()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

{
  return a1();
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for CamSingletonProvider()
{
  return self;
}

uint64_t outlined consume of CamHandler?(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t method lookup function for CamSingletonProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CamSingletonProvider);
}

uint64_t OUTLINED_FUNCTION_1_7()
{
  return swift_bridgeObjectRelease_n();
}

void OUTLINED_FUNCTION_2_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

void CamModelVersion.init(_:)()
{
  OUTLINED_FUNCTION_11_2();
  id v4 = (void *)v3;
  if ((v3 & 0x2000000000000000) != 0) {
    uint64_t v5 = HIBYTE(v3) & 0xF;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError();
    swift_allocError();
    *(void *)uint64_t v13 = 0xD000000000000017;
    *(void *)(v13 + 8) = 0x80000001C9DA3410;
    *(unsigned char *)(v13 + 16) = 0;
    swift_willThrow();
LABEL_76:
    OUTLINED_FUNCTION_3_5();
    return;
  }
  uint64_t v6 = v2;
  uint64_t v54 = v2;
  unint64_t v55 = v3;
  uint64_t v52 = 45;
  uint64_t v53 = 0xE100000000000000;
  MEMORY[0x1F4188790](v2);
  v49[2] = &v52;
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized BidirectionalCollection.lastIndex(where:)(partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:), (uint64_t)v49, v6, (unint64_t)v4);
  if (v8)
  {
    uint64_t v11 = (uint64_t)v4;
    uint64_t v12 = v6;
  }
  else
  {
    unint64_t v9 = v7;
    if (4 * v5 < v7 >> 14)
    {
      __break(1u);
      goto LABEL_72;
    }
    uint64_t v10 = String.subscript.getter();
    MEMORY[0x1CB78D2A0](v10);
    swift_bridgeObjectRelease();
    String.removeSubrange(_:)();
    uint64_t v12 = v54;
    uint64_t v11 = v55;
  }
  uint64_t v52 = 0;
  uint64_t v53 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  uint64_t v52 = 0x206E6F6973726556;
  uint64_t v53 = 0xE800000000000000;
  v14._uint64_t countAndFlagsBits = v6;
  v14._object = v4;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 0x61766E6920736920;
  v15._object = (void *)0xEB0000000064696CLL;
  String.append(_:)(v15);
  uint64_t v6 = v52;
  uint64_t v1 = v53;
  uint64_t v52 = v12;
  uint64_t v53 = v11;
  uint64_t v50 = 46;
  unint64_t v51 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v5 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v5 + 16) != 3)
  {
    swift_bridgeObjectRelease();
    char v20 = 1;
LABEL_75:
    lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError();
    swift_allocError();
    *(void *)uint64_t v48 = v6;
    *(void *)(v48 + 8) = v1;
    *(unsigned char *)(v48 + 16) = v20;
    swift_willThrow();
    swift_bridgeObjectRelease();
    goto LABEL_76;
  }
  uint64_t v0 = *(void *)(v5 + 32);
  unint64_t v9 = *(void *)(v5 + 40);
  uint64_t v16 = HIBYTE(v9) & 0xF;
  uint64_t v17 = v0 & 0xFFFFFFFFFFFFLL;
  if ((v9 & 0x2000000000000000) != 0) {
    uint64_t v18 = HIBYTE(v9) & 0xF;
  }
  else {
    uint64_t v18 = v0 & 0xFFFFFFFFFFFFLL;
  }
  if (!v18)
  {
LABEL_73:
    swift_bridgeObjectRelease();
LABEL_74:
    char v20 = 2;
    goto LABEL_75;
  }
  if ((v9 & 0x1000000000000000) != 0)
  {
LABEL_72:
    swift_bridgeObjectRetain();
    uint64_t v47 = specialized _parseInteger<A, B>(ascii:radix:)(v0, v9, 10);
    swift_bridgeObjectRelease();
    if ((v47 & 0x100000000) == 0) {
      goto LABEL_60;
    }
    goto LABEL_73;
  }
  if ((v9 & 0x2000000000000000) == 0)
  {
    if ((v0 & 0x1000000000000000) == 0) {
      goto LABEL_78;
    }
    for (unint64_t i = (unsigned __int8 *)((v9 & 0xFFFFFFFFFFFFFFFLL) + 32);
          ;
          unint64_t i = (unsigned __int8 *)_StringObject.sharedUTF8.getter())
    {
      LOBYTE(v50) = ((unint64_t)specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(i, v17, 10) >> 32) & 1;
      LOBYTE(v16) = v50;
LABEL_59:
      if (v16) {
        break;
      }
LABEL_60:
      if (*(void *)(v5 + 16) >= 2uLL)
      {
        uint64_t v40 = *(void *)(v5 + 48);
        unint64_t v41 = *(void *)(v5 + 56);
        swift_bridgeObjectRetain();
        if ((specialized FixedWidthInteger.init(_:)(v40, v41) & 0x100000000) != 0) {
          goto LABEL_73;
        }
        if (*(void *)(v5 + 16) < 3uLL)
        {
          __break(1u);
          goto LABEL_81;
        }
        uint64_t v42 = *(void *)(v5 + 64);
        unint64_t v43 = *(void *)(v5 + 72);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((specialized FixedWidthInteger.init(_:)(v42, v43) & 0x100000000) != 0) {
          goto LABEL_74;
        }
        swift_bridgeObjectRelease();
        goto LABEL_76;
      }
      __break(1u);
LABEL_78:
      ;
    }
    goto LABEL_73;
  }
  uint64_t v52 = *(void *)(v5 + 32);
  uint64_t v53 = v9 & 0xFFFFFFFFFFFFFFLL;
  if (v0 == 43)
  {
    if (!v16) {
      goto LABEL_82;
    }
    if (v16 == 1) {
      goto LABEL_59;
    }
    unsigned int v24 = (BYTE1(v0) - 48);
    if (v24 > 9) {
      goto LABEL_44;
    }
    if (v16 != 2)
    {
      if ((BYTE2(v0) - 48) > 9u) {
        goto LABEL_44;
      }
      unsigned int v25 = 10 * v24 + (BYTE2(v0) - 48);
      uint64_t v26 = v16 - 3;
      if (v16 != 3)
      {
        uint64_t v27 = (unsigned __int8 *)&v52 + 3;
        while (1)
        {
          unsigned int v28 = *v27 - 48;
          if (v28 > 9) {
            goto LABEL_44;
          }
          uint64_t v29 = 10 * v25;
          if ((v29 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_44;
          }
          unsigned int v25 = v29 + v28;
          if (__CFADD__(v29, v28)) {
            goto LABEL_44;
          }
          LOBYTE(v16) = 0;
          ++v27;
          if (!--v26) {
            goto LABEL_59;
          }
        }
      }
    }
LABEL_58:
    LOBYTE(v16) = 0;
    goto LABEL_59;
  }
  if (v0 != 45)
  {
    if (!v16) {
      goto LABEL_44;
    }
    unsigned int v30 = (v0 - 48);
    if (v30 > 9) {
      goto LABEL_44;
    }
    if (v16 != 1)
    {
      if ((BYTE1(v0) - 48) > 9u) {
        goto LABEL_44;
      }
      unsigned int v31 = 10 * v30 + (BYTE1(v0) - 48);
      uint64_t v32 = v16 - 2;
      if (v16 != 2)
      {
        uint64_t v33 = (unsigned __int8 *)&v52 + 2;
        while (1)
        {
          unsigned int v34 = *v33 - 48;
          if (v34 > 9) {
            goto LABEL_44;
          }
          uint64_t v35 = 10 * v31;
          if ((v35 & 0xFFFFFFFF00000000) != 0) {
            goto LABEL_44;
          }
          unsigned int v31 = v35 + v34;
          if (__CFADD__(v35, v34)) {
            goto LABEL_44;
          }
          LOBYTE(v16) = 0;
          ++v33;
          if (!--v32) {
            goto LABEL_59;
          }
        }
      }
    }
    goto LABEL_58;
  }
  if (v16)
  {
    if (v16 == 1) {
      goto LABEL_59;
    }
    unsigned __int8 v21 = BYTE1(v0) - 48;
    if ((BYTE1(v0) - 48) <= 9u)
    {
      BOOL v22 = v21 == 0;
      unsigned int v23 = -v21;
      if (v22)
      {
        if (v16 == 2)
        {
          LOBYTE(v16) = 0;
          goto LABEL_59;
        }
        unsigned __int8 v36 = BYTE2(v0) - 48;
        if ((BYTE2(v0) - 48) <= 9u)
        {
          uint64_t v37 = 10 * v23;
          if ((v37 & 0xFFFFFFFF00000000) == 0)
          {
            unsigned int v38 = v37 - v36;
            if (v37 >= v36)
            {
              uint64_t v39 = v16 - 3;
              if (v16 == 3) {
                goto LABEL_58;
              }
              uint64_t v44 = (unsigned __int8 *)&v52 + 3;
              while (1)
              {
                unsigned int v45 = *v44 - 48;
                if (v45 > 9) {
                  break;
                }
                uint64_t v46 = 10 * v38;
                if ((v46 & 0xFFFFFFFF00000000) != 0) {
                  break;
                }
                unsigned int v38 = v46 - v45;
                if (v46 < v45) {
                  break;
                }
                LOBYTE(v16) = 0;
                ++v44;
                if (!--v39) {
                  goto LABEL_59;
                }
              }
            }
          }
        }
      }
    }
LABEL_44:
    LOBYTE(v16) = 1;
    goto LABEL_59;
  }
LABEL_81:
  __break(1u);
LABEL_82:
  __break(1u);
}

uint64_t CamLogOutput.init(prediction:score:threshold:)(uint64_t a1, double a2, double a3)
{
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 48) = 0;
  *(void *)(v3 + 16) = a1;
  *(double *)(v3 + 24) = a2;
  *(double *)(v3 + 32) = a3;
  return v3;
}

uint64_t CamLogOutput.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamLogOutput.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  char v8 = &v12[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  OUTLINED_FUNCTION_15_2();
  v12[15] = 0;
  OUTLINED_FUNCTION_7_4();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v1) {
    return (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v8, v3);
  }
  v12[14] = 1;
  KeyedEncodingContainer.encode(_:forKey:)();
  v12[13] = 2;
  KeyedEncodingContainer.encode(_:forKey:)();
  v12[12] = 3;
  swift_bridgeObjectRetain();
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  uint64_t v9 = OUTLINED_FUNCTION_5_3();
  v10(v9);
  return swift_bridgeObjectRelease();
}

uint64_t CamLogOutput.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6974636964657270 && a2 == 0xEA00000000006E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x65726F6373 && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6C6F687365726874 && a2 == 0xE900000000000064;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x726563726F666E65 && a2 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t CamLogOutput.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6974636964657270;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x65726F6373;
      break;
    case 2:
      uint64_t result = 0x6C6F687365726874;
      break;
    case 3:
      uint64_t result = 0x726563726F666E65;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamLogOutput.CodingKeys()
{
  return CamLogOutput.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamLogOutput.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CamLogOutput.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamLogOutput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamLogOutput.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CamLogOutput.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 56, 7);
}

uint64_t type metadata accessor for CamLogOutput()
{
  return self;
}

uint64_t initializeBufferWithCopyOfBuffer for CamModelMetadata(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    uint64_t v8 = a2[5];
    swift_bridgeObjectRetain();
    if (v8 == 1)
    {
      long long v9 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      *(void *)(a1 + 16) = a2[2];
      *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
      *(void *)(a1 + 32) = a2[4];
      *(void *)(a1 + 40) = v8;
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(a1 + 48) = *((unsigned char *)a2 + 48);
    uint64_t v11 = *(int *)(a3 + 28);
    uint64_t v12 = (void *)(a1 + v11);
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Locale();
    if (__swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14))
    {
      uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
      memcpy(v12, v13, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
    }
  }
  return a1;
}

uint64_t destroy for CamModelMetadata(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Locale();
  uint64_t result = __swift_getEnumTagSinglePayload(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
    return v7(v4, v5);
  }
  return result;
}

uint64_t initializeWithCopy for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  if (v7 == 1)
  {
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = v7;
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(int *)(a3 + 28);
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
  {
    uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  }
  return a1;
}

uint64_t assignWithCopy for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (_OWORD *)(a1 + 16);
  uint64_t v7 = (_OWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40) == 1)
  {
    if (v8 == 1)
    {
      long long v9 = *(_OWORD *)(a2 + 32);
      *uint64_t v6 = *v7;
      *(_OWORD *)(a1 + 32) = v9;
    }
    else
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      swift_bridgeObjectRetain();
    }
  }
  else if (v8 == 1)
  {
    outlined destroy of CamModelVersion(a1 + 16);
    long long v10 = *(_OWORD *)(a2 + 32);
    *uint64_t v6 = *v7;
    *(_OWORD *)(a1 + 32) = v10;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (const void *)(a2 + v11);
  uint64_t v14 = type metadata accessor for Locale();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v12, 1, v14);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v13, 1, v14);
  if (!EnumTagSinglePayload)
  {
    uint64_t v17 = *(void *)(v14 - 8);
    if (!v16)
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 24))(v12, v13, v14);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v17 + 8))(v12, v14);
    goto LABEL_13;
  }
  if (v16)
  {
LABEL_13:
    uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v12, v13, *(void *)(*(void *)(v18 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
  __swift_storeEnumTagSinglePayload((uint64_t)v12, 0, 1, v14);
  return a1;
}

uint64_t outlined destroy of CamModelVersion(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(int *)(a3 + 28);
  uint64_t v6 = (void *)(a1 + v5);
  uint64_t v7 = (const void *)(a2 + v5);
  uint64_t v8 = type metadata accessor for Locale();
  if (__swift_getEnumTagSinglePayload((uint64_t)v7, 1, v8))
  {
    uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
    __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (*(void *)(a1 + 40) == 1) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 40);
  if (v7 == 1)
  {
    outlined destroy of CamModelVersion(a1 + 16);
LABEL_4:
    long long v8 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v8;
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v7;
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(int *)(a3 + 28);
  long long v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v12 = type metadata accessor for Locale();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v10, 1, v12);
  int v14 = __swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12);
  if (!EnumTagSinglePayload)
  {
    uint64_t v15 = *(void *)(v12 - 8);
    if (!v14)
    {
      (*(void (**)(void *, const void *, uint64_t))(v15 + 40))(v10, v11, v12);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v10, v12);
    goto LABEL_11;
  }
  if (v14)
  {
LABEL_11:
    uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D1E894);
}

uint64_t sub_1C9D1E894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    uint64_t v9 = a1 + *(int *)(a3 + 28);
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for CamModelMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D1E934);
}

uint64_t sub_1C9D1E934(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
    uint64_t v8 = v5 + *(int *)(a4 + 28);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CamModelMetadata()
{
  uint64_t result = type metadata singleton initialization cache for CamModelMetadata;
  if (!type metadata singleton initialization cache for CamModelMetadata) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for CamModelMetadata()
{
  type metadata accessor for Locale?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for Locale?()
{
  if (!lazy cache variable for type metadata for Locale?)
  {
    type metadata accessor for Locale();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale?);
    }
  }
}

uint64_t destroy for CamModelVersion()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CamModelVersion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CamModelVersion(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t assignWithTake for CamModelVersion(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamModelVersion(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 32))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 24);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamModelVersion(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CamModelVersion()
{
  return &type metadata for CamModelVersion;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CamLogOutput(void *a1)
{
  return CamLogOutput.encode(to:)(a1);
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamLogOutput(uint64_t a1)
{
  swift_getWitnessTable();
  return ReflectedStringConvertible.description.getter(a1);
}

uint64_t CamModelMetadata.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6F4C776F64616873 && a2 == 0xE900000000000067;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x656C61636F6CLL && a2 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t CamModelMetadata.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x6D614E6C65646F6DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      uint64_t result = 0x6F4C776F64616873;
      break;
    case 3:
      uint64_t result = 0x656C61636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t CamModelMetadata.encode(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamModelMetadata.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v3);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  OUTLINED_FUNCTION_15_2();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion();
    OUTLINED_FUNCTION_7_4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    OUTLINED_FUNCTION_7_4();
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    type metadata accessor for CamModelMetadata();
    type metadata accessor for Locale();
    lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, MEMORY[0x1E4F27A78]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  uint64_t v4 = OUTLINED_FUNCTION_5_3();
  return v5(v4);
}

void CamModelMetadata.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  OUTLINED_FUNCTION_11_2();
  a22 = v26;
  a23 = v27;
  uint64_t v29 = v28;
  uint64_t v41 = v30;
  uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v31 - 8);
  OUTLINED_FUNCTION_8_4();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CamModelMetadata.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v32);
  uint64_t v33 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1F4188790](v33 - 8);
  OUTLINED_FUNCTION_9_4();
  *(unsigned char *)(v25 + 48) = 2;
  uint64_t v35 = v25 + *(int *)(v34 + 36);
  uint64_t v36 = type metadata accessor for Locale();
  __swift_storeEnumTagSinglePayload(v35, 1, 1, v36);
  __swift_project_boxed_opaque_existential_1(v29, v29[3]);
  lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v23)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    outlined destroy of Locale?(v35);
  }
  else
  {
    LOBYTE(v42[0]) = 0;
    *(void *)uint64_t v25 = KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)(v25 + 8) = v37;
    a13 = 1;
    lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion();
    OUTLINED_FUNCTION_12_2((uint64_t)&type metadata for CamModelVersion, (uint64_t)&a13);
    long long v38 = v42[1];
    *(_OWORD *)(v25 + 16) = v42[0];
    *(_OWORD *)(v25 + 32) = v38;
    LOBYTE(v42[0]) = 2;
    *(unsigned char *)(v25 + 48) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    LOBYTE(v42[0]) = 3;
    lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type Locale and conformance Locale, 255, MEMORY[0x1E4F27A78]);
    OUTLINED_FUNCTION_12_2(v36, (uint64_t)v42);
    uint64_t v39 = OUTLINED_FUNCTION_4_5();
    v40(v39);
    outlined assign with take of Locale?(v24, v35);
    outlined init with copy of CamModelMetadata(v25, v41);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
    outlined destroy of CamModelMetadata(v25);
  }
  OUTLINED_FUNCTION_3_5();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamModelMetadata.CodingKeys()
{
  return CamModelMetadata.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamModelMetadata.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CamModelMetadata.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamModelMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamModelMetadata.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

#error "1C9D1F4F0: call analysis failed (funcsize=6)"

uint64_t protocol witness for Encodable.encode(to:) in conformance CamModelMetadata(void *a1)
{
  return CamModelMetadata.encode(to:)(a1);
}

unint64_t specialized FixedWidthInteger.init(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = HIBYTE(a2) & 0xF;
  uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5)
  {
    swift_bridgeObjectRelease();
    uint64_t v21 = 0;
    LOBYTE(v20) = 1;
    return v21 | ((unint64_t)v20 << 32);
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((a1 & 0x1000000000000000) != 0) {
        BOOL v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        BOOL v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
      }
      BOOL v7 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v6, v4, 10);
      LODWORD(v8) = v7;
      char v27 = BYTE4(v7) & 1;
      char v9 = BYTE4(v7) & 1;
      goto LABEL_38;
    }
    v26[0] = a1;
    v26[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    int v10 = a1;
    if (a1 == 43)
    {
      if (v3)
      {
        if (v3 != 1)
        {
          LODWORD(v8) = (BYTE1(a1) - 48);
          if (v8 <= 9)
          {
            uint64_t v15 = v3 - 2;
            if (v15)
            {
              uint64_t v16 = (unsigned __int8 *)v26 + 2;
              while (1)
              {
                unsigned int v17 = *v16 - 48;
                if (v17 > 9) {
                  goto LABEL_35;
                }
                uint64_t v18 = 10 * v8;
                if ((v18 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v18 + v17;
                if (__CFADD__(v18, v17)) {
                  goto LABEL_35;
                }
                char v9 = 0;
                ++v16;
                if (!--v15) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      if (a1 != 45)
      {
        if (v3)
        {
          LODWORD(v8) = (a1 - 48);
          if (v8 <= 9)
          {
            uint64_t v19 = v3 - 1;
            if (v19)
            {
              uint64_t v23 = (unsigned __int8 *)v26 + 1;
              while (1)
              {
                unsigned int v24 = *v23 - 48;
                if (v24 > 9) {
                  goto LABEL_35;
                }
                uint64_t v25 = 10 * v8;
                if ((v25 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v25 + v24;
                if (__CFADD__(v25, v24)) {
                  goto LABEL_35;
                }
                char v9 = 0;
                ++v23;
                if (!--v19) {
                  goto LABEL_38;
                }
              }
            }
            goto LABEL_37;
          }
        }
        goto LABEL_35;
      }
      if (v3)
      {
        if (v3 != 1 && (BYTE1(a1) - 48) <= 9u)
        {
          int v10 = 0;
          LODWORD(v8) = -(BYTE1(a1) - 48);
          if (BYTE1(a1) == 48)
          {
            uint64_t v11 = v3 - 2;
            if (v11)
            {
              uint64_t v12 = (unsigned __int8 *)v26 + 2;
              while (1)
              {
                unsigned int v13 = *v12 - 48;
                if (v13 > 9) {
                  goto LABEL_35;
                }
                uint64_t v14 = 10 * v8;
                if ((v14 & 0xFFFFFFFF00000000) != 0) {
                  goto LABEL_35;
                }
                LODWORD(v8) = v14 - v13;
                if (v14 < v13) {
                  goto LABEL_35;
                }
                char v9 = 0;
                ++v12;
                if (!--v11) {
                  goto LABEL_38;
                }
              }
            }
LABEL_37:
            char v9 = 0;
            goto LABEL_38;
          }
LABEL_53:
          char v9 = 1;
          LODWORD(v8) = v10;
          goto LABEL_38;
        }
LABEL_35:
        LODWORD(v8) = 0;
        char v9 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        LODWORD(v20) = v9 & 1;
        goto LABEL_39;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_53;
  }
  unint64_t v8 = specialized _parseInteger<A, B>(ascii:radix:)(a1, a2, 10);
  swift_bridgeObjectRelease();
  uint64_t v20 = HIDWORD(v8) & 1;
LABEL_39:
  uint64_t v21 = v8;
  if (v20) {
    uint64_t v21 = 0;
  }
  return v21 | ((unint64_t)v20 << 32);
}

uint64_t static CamModelVersion.== infix(_:_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  if (a1 != a5 || a2 != a6) {
    return 0;
  }
  uint64_t result = (a4 | a8) == 0;
  if (a4 && a8)
  {
    if (a3 == a7 && a4 == a8) {
      return 1;
    }
    else {
      return OUTLINED_FUNCTION_1_8();
    }
  }
  return result;
}

uint64_t CamModelVersion.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F6A616DLL && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x726F6E696DLL && a2 == 0xE500000000000000;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v7 = a1 == 0x6863746170 && a2 == 0xE500000000000000;
      if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 2;
      }
      else if (a1 == 0x61656C6572657270 && a2 == 0xEA00000000006573)
      {
        swift_bridgeObjectRelease();
        return 3;
      }
      else
      {
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v9) {
          return 3;
        }
        else {
          return 4;
        }
      }
    }
  }
}

uint64_t CamModelVersion.CodingKeys.init(intValue:)()
{
  return 4;
}

uint64_t CamModelVersion.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x726F6A616DLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x726F6E696DLL;
      break;
    case 2:
      uint64_t result = 0x6863746170;
      break;
    case 3:
      uint64_t result = 0x61656C6572657270;
      break;
    default:
      return result;
  }
  return result;
}

void CamModelVersion.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_11_2();
  a23 = v26;
  a24 = v27;
  uint64_t v29 = v28;
  unint64_t v31 = v30;
  uint64_t v33 = v32;
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamModelVersion.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  uint64_t v36 = v35;
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_8_4();
  __swift_project_boxed_opaque_existential_1(v33, v33[3]);
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  a14 = 0;
  OUTLINED_FUNCTION_6_4(v31, (uint64_t)&a14);
  if (!v24)
  {
    a13 = 1;
    OUTLINED_FUNCTION_6_4(HIDWORD(v31), (uint64_t)&a13);
    a12 = 2;
    OUTLINED_FUNCTION_6_4(v29, (uint64_t)&a12);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v25, v34);
  OUTLINED_FUNCTION_3_5();
}

void CamModelVersion.init(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  OUTLINED_FUNCTION_11_2();
  a23 = v25;
  a24 = v26;
  uint64_t v28 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<CamModelVersion.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_9_4();
  __swift_project_boxed_opaque_existential_1(v28, v28[3]);
  lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v24)
  {
    a14 = 0;
    OUTLINED_FUNCTION_10_1((uint64_t)&a14);
    a13 = 1;
    OUTLINED_FUNCTION_10_1((uint64_t)&a13);
    a12 = 2;
    OUTLINED_FUNCTION_10_1((uint64_t)&a12);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v30 = OUTLINED_FUNCTION_14_2();
    v31(v30);
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  OUTLINED_FUNCTION_3_5();
}

uint64_t static CamModelVersionError.== infix(_:_:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, char a6)
{
  if (a3)
  {
    if (a3 == 1)
    {
      if (a6 == 1) {
        goto LABEL_8;
      }
      return 0;
    }
    if (a6 != 2) {
      return 0;
    }
  }
  else if (a6)
  {
    return 0;
  }
LABEL_8:
  if (a1 == a4 && a2 == a5) {
    return 1;
  }
  else {
    return OUTLINED_FUNCTION_1_8();
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamModelVersion.CodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.hashValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamModelVersion.CodingKeys()
{
  return CamModelVersion.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamModelVersion.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CamModelVersion.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CamModelVersion.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CamModelVersion.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamModelVersion.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamModelVersion.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

#error "1C9D1FE40: call analysis failed (funcsize=14)"

#error "1C9D1FE7C: call analysis failed (funcsize=9)"

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamModelVersion(uint64_t a1, uint64_t a2)
{
  return static CamModelVersion.== infix(_:_:)(*(void *)a1, *(_DWORD *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)a2, *(_DWORD *)(a2 + 8), *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t instantiation function for generic protocol witness table for CamLogOutput(uint64_t a1, uint64_t a2)
{
  uint64_t result = lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(&lazy protocol witness table cache variable for type CamLogOutput and conformance CamLogOutput, a2, (void (*)(uint64_t))type metadata accessor for CamLogOutput);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelMetadata.CodingKeys and conformance CamModelMetadata.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamModelVersion and conformance CamModelVersion()
{
  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion;
  if (!lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion;
  if (!lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion and conformance CamModelVersion);
  }
  return result;
}

uint64_t outlined consume of CamModelVersion?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CamLogOutput and conformance CamLogOutput(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersion.CodingKeys and conformance CamModelVersion.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamModelVersionError(uint64_t a1, uint64_t a2)
{
  return static CamModelVersionError.== infix(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t _StringGuts._slowEnsureMatchingEncoding(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v6 = String.UTF16View.index(_:offsetBy:)();
    OUTLINED_FUNCTION_2_8(v6);
    return v7 | 4;
  }
  else
  {
    uint64_t v3 = MEMORY[0x1CB78D320](15, a1 >> 16);
    OUTLINED_FUNCTION_2_8(v3);
    return v4 | 8;
  }
}

uint64_t specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4) {
    return 1;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)() & 1;
  }
}

unint64_t specialized BidirectionalCollection.lastIndex(where:)(uint64_t (*a1)(void *), uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0) {
    uint64_t v5 = a3 & 0xFFFFFFFFFFFFLL;
  }
  if (!v5) {
    return 0;
  }
  while (1)
  {
    unint64_t v7 = String.index(before:)();
    v12[0] = String.subscript.getter();
    v12[1] = v8;
    char v9 = a1(v12);
    if (v4) {
      break;
    }
    char v10 = v9;
    swift_bridgeObjectRelease();
    if (v10) {
      return v7;
    }
    if (v7 < 0x4000) {
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t specialized _parseInteger<A, B>(ascii:radix:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = static String._copying(_:)();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v11 = specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *specialized closure #1 in FixedWidthInteger.init<A>(_:radix:)(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            unint64_t v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__CFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            unint64_t v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__CFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            unint64_t v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (v14 < v15) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static String._copying(_:)()
{
  unint64_t v0 = specialized Collection.subscript.getter();
  uint64_t v4 = static String._copying(_:)(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized Collection.subscript.getter()
{
  return String.subscript.getter();
}

uint64_t static String._copying(_:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = specialized Collection.count.getter(a1, a2, a3, a4);
    if (v9)
    {
      uint64_t v10 = v9;
      char v11 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v9, 0);
      unint64_t v12 = specialized Sequence._copySequenceContents(initializing:)((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
LABEL_11:
        _StringObject.sharedUTF8.getter();
LABEL_4:
        JUMPOUT(0x1CB78D2C0);
      }
    }
    else
    {
      char v11 = (void *)MEMORY[0x1E4FBC860];
    }
    uint64_t v13 = MEMORY[0x1CB78D2C0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x1CB78D2C0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

uint64_t specialized Collection.count.getter(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = _StringGuts._slowEnsureMatchingEncoding(_:)(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
  }
  __break(1u);
  return MEMORY[0x1F4183AA8](a1, a2, a3, a4);
}

unint64_t specialized Sequence._copySequenceContents(initializing:)(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_35;
  }
  if (a3 < 0) {
    goto LABEL_38;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_35:
    *uint64_t v9 = a4;
    v9[1] = a5;
    id v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t result = v12;
    if ((v12 & 0xC) == v15) {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      unint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
      }
      else
      {
        unint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          unint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
      }
    }
    if ((v12 & 0xC) == v15)
    {
      unint64_t result = _StringGuts._slowEnsureMatchingEncoding(_:)(v12, a6, a7);
      unint64_t v12 = result;
      if ((a7 & 0x1000000000000000) == 0)
      {
LABEL_27:
        unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
        goto LABEL_31;
      }
    }
    else if ((a7 & 0x1000000000000000) == 0)
    {
      goto LABEL_27;
    }
    if (v23 <= v12 >> 16) {
      goto LABEL_37;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_31:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_35;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t *a1, uint64_t *a2)
{
  return specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(*a1, a1[1], *a2, a2[1]) & 1;
}

uint64_t partial apply for specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(uint64_t *a1)
{
  return specialized closure #1 in BidirectionalCollection<>.lastIndex(of:)(a1, *(uint64_t **)(v1 + 16)) & 1;
}

unint64_t lazy protocol witness table accessor for type CamModelVersionError and conformance CamModelVersionError()
{
  unint64_t result = lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError;
  if (!lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamModelVersionError and conformance CamModelVersionError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamLogOutput.CodingKeys and conformance CamLogOutput.CodingKeys);
  }
  return result;
}

void *type metadata accessor for CamLogOutput.CodingKeys()
{
  return &unk_1F2416148;
}

void *type metadata accessor for CamModelVersion.CodingKeys()
{
  return &unk_1F24161D8;
}

unsigned char *storeEnumTagSinglePayload for CamLogOutput.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D20CF8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CamModelMetadata.CodingKeys()
{
  return &unk_1F2416268;
}

ValueMetadata *type metadata accessor for CamModelVersionError()
{
  return &type metadata for CamModelVersionError;
}

uint64_t OUTLINED_FUNCTION_1_8()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

unint64_t OUTLINED_FUNCTION_2_8(uint64_t a1)
{
  return a1 & 0xFFFFFFFFFFFFFFFCLL | v1 & 3;
}

uint64_t OUTLINED_FUNCTION_4_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_5_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_6_4(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F41856F8](a1, a2, v2);
}

uint64_t OUTLINED_FUNCTION_10_1(uint64_t a1)
{
  return MEMORY[0x1F41855D0](a1, v1);
}

uint64_t OUTLINED_FUNCTION_12_2(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4185528](a1, a2, v2, a1);
}

uint64_t OUTLINED_FUNCTION_13_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_14_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_2()
{
  return dispatch thunk of Encoder.container<A>(keyedBy:)();
}

uint64_t CamRequest.init(requestId:camId:rcId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned __int8 *a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v34 = a3;
  uint64_t v35 = a1;
  uint64_t v40 = a9;
  uint64_t v41 = a2;
  uint64_t v10 = type metadata accessor for CamRequest(0);
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = &v32[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v19 = v18;
  uint64_t v21 = MEMORY[0x1F4188790](v20);
  MEMORY[0x1F4188790](v21);
  int v33 = *a8;
  uint64_t v22 = *(void (**)(void))(v19 + 16);
  OUTLINED_FUNCTION_2_9();
  v22();
  OUTLINED_FUNCTION_2_9();
  v22();
  __swift_storeEnumTagSinglePayload((uint64_t)v16, 1, 1, v17);
  OUTLINED_FUNCTION_2_9();
  v22();
  OUTLINED_FUNCTION_2_9();
  v22();
  unint64_t v23 = &v13[v11[8]];
  uint64_t v24 = v36;
  *unint64_t v23 = v34;
  v23[1] = v24;
  outlined init with copy of UUID?((uint64_t)v16, (uint64_t)&v13[v11[9]]);
  unsigned __int8 v25 = v37;
  uint64_t v26 = v38;
  *(void *)&v13[v11[10]] = v37;
  *(void *)&v13[v11[12]] = v26;
  v13[v11[14]] = v33;
  *(void *)&v13[v11[15]] = v39;
  unint64_t v27 = &v13[v11[13]];
  id v28 = v25;
  OUTLINED_FUNCTION_5_4();
  uint64_t v29 = type metadata accessor for CamRequestContext();
  v27[*(int *)(v29 + 20)] = 5;
  v27[*(int *)(v29 + 24)] = 0;

  outlined destroy of UUID?((uint64_t)v16);
  char v30 = *(void (**)(void))(v19 + 8);
  OUTLINED_FUNCTION_3_6();
  v30();
  OUTLINED_FUNCTION_3_6();
  v30();
  *(void *)&v13[v11[11]] = MEMORY[0x1E4FBC860];
  outlined init with take of CamRequest((uint64_t)v13, v40);
  OUTLINED_FUNCTION_3_6();
  v30();
  OUTLINED_FUNCTION_3_6();
  return ((uint64_t (*)(void))v30)();
}

uint64_t CamRequest.init(requestId:camId:rcId:trpId:maybeSpeechPackage:rankedActions:camEnabledFeatures:previousCamAction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10)
{
  char v29 = *a10;
  uint64_t v16 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v18 = v17;
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
  v20(a9, a1, v16);
  uint64_t v21 = (int *)type metadata accessor for CamRequest(0);
  v20(a9 + v21[5], a2, v16);
  uint64_t v22 = (void *)(a9 + v21[6]);
  *uint64_t v22 = a3;
  v22[1] = a4;
  outlined init with copy of UUID?(a5, a9 + v21[7]);
  *(void *)(a9 + v21[8]) = a6;
  *(void *)(a9 + v21[10]) = a7;
  *(unsigned char *)(a9 + v21[12]) = v29;
  *(void *)(a9 + v21[13]) = a8;
  uint64_t v23 = a9 + v21[11];
  id v24 = a6;
  OUTLINED_FUNCTION_5_4();
  uint64_t v25 = type metadata accessor for CamRequestContext();
  *(unsigned char *)(v23 + *(int *)(v25 + 20)) = 5;
  *(unsigned char *)(v23 + *(int *)(v25 + 24)) = 0;

  outlined destroy of UUID?(a5);
  uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v26(a2, v16);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v26)(a1, v16);
  *(void *)(a9 + v21[9]) = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t type metadata accessor for CamRequest(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamRequest);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with take of CamRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void CamResponse.camAction.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

void CamResponse.responseStatusCode.getter(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 1);
}

SiriCam::CamAction_optional __swiftcall CamAction.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 5;
  if ((unint64_t)rawValue < 5) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriCam::CamAction_optional)rawValue;
}

uint64_t CamAction.rawValue.getter()
{
  return *v0;
}

unint64_t lazy protocol witness table accessor for type CamAction and conformance CamAction()
{
  unint64_t result = lazy protocol witness table cache variable for type CamAction and conformance CamAction;
  if (!lazy protocol witness table cache variable for type CamAction and conformance CamAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamAction and conformance CamAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamAction and conformance CamAction;
  if (!lazy protocol witness table cache variable for type CamAction and conformance CamAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamAction and conformance CamAction);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamAction()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamAction(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::CamAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CamAction(Swift::Int *a1)
{
  return CamAction.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CamAction.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of Cam.action(request:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

char *initializeBufferWithCopyOfBuffer for CamUserParse(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    unint64_t v7 = *a2;
    *(void *)a1 = *a2;
    a1 = &v7[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    else
    {
      uint64_t v8 = *a2;
      uint64_t v9 = a2[1];
      *(void *)a1 = *a2;
      *((void *)a1 + 1) = v9;
      *((void *)a1 + 2) = a2[2];
      uint64_t v10 = v8;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for CamUserParse(id *a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    uint64_t v3 = *(uint64_t (**)(id *, uint64_t))(*(void *)(v2 - 8) + 8);
    return v3(a1, v2);
  }
  else
  {

    return swift_bridgeObjectRelease();
  }
}

void *initializeWithCopy for CamUserParse(void *a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  }
  else
  {
    int v5 = *(void **)a2;
    uint64_t v6 = *(void *)(a2 + 8);
    *a1 = *(void *)a2;
    a1[1] = v6;
    a1[2] = *(void *)(a2 + 16);
    id v7 = v5;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for CamUserParse(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of CamUserParse((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    else
    {
      int v5 = *a2;
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      id v6 = v5;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of CamUserParse(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CamUserParse(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CamUserParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamUserParse);
}

uint64_t type metadata accessor for CamRequest(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *initializeWithTake for CamUserParse(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

void *assignWithTake for CamUserParse(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CamUserParse((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t destructiveInjectEnumTag for CamUserParse()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for CamUserParse()
{
  uint64_t result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for CamRequest(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    uint64_t v9 = a3[6];
    uint64_t v10 = a3[7];
    uint64_t v11 = &a1[v9];
    uint64_t v12 = &a2[v9];
    uint64_t v13 = *((void *)v12 + 1);
    *(void *)uint64_t v11 = *(void *)v12;
    *((void *)v11 + 1) = v13;
    uint64_t v14 = &a1[v10];
    uint64_t v15 = &a2[v10];
    swift_bridgeObjectRetain();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v7))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      v8(v14, v15, v7);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v7);
    }
    uint64_t v18 = a3[8];
    uint64_t v19 = a3[9];
    uint64_t v20 = *(void **)&a2[v18];
    *(void *)&a1[v18] = v20;
    *(void *)&a1[v19] = *(void *)&a2[v19];
    uint64_t v21 = a3[11];
    *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
    uint64_t v22 = &a1[v21];
    uint64_t v23 = &a2[v21];
    uint64_t v24 = type metadata accessor for Locale();
    char v29 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
    id v25 = v20;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v29(v22, v23, v24);
    uint64_t v26 = type metadata accessor for CamRequestContext();
    v22[*(int *)(v26 + 20)] = v23[*(int *)(v26 + 20)];
    v22[*(int *)(v26 + 24)] = v23[*(int *)(v26 + 24)];
    uint64_t v27 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    *(void *)&a1[v27] = *(void *)&a2[v27];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CamRequest(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[7];
  if (!__swift_getEnumTagSinglePayload(v6, 1, v4)) {
    v5(v6, v4);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v7 = a1 + a2[11];
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[6];
  uint64_t v9 = a3[7];
  uint64_t v10 = &a1[v8];
  uint64_t v11 = &a2[v8];
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v12;
  uint64_t v13 = &a1[v9];
  uint64_t v14 = &a2[v9];
  swift_bridgeObjectRetain();
  if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6))
  {
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    v7(v13, v14, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
  }
  uint64_t v16 = a3[8];
  uint64_t v17 = a3[9];
  uint64_t v18 = *(void **)&a2[v16];
  *(void *)&a1[v16] = v18;
  *(void *)&a1[v17] = *(void *)&a2[v17];
  uint64_t v19 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for Locale();
  uint64_t v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v22 - 8) + 16);
  id v23 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27(v20, v21, v22);
  uint64_t v24 = type metadata accessor for CamRequestContext();
  v20[*(int *)(v24 + 20)] = v21[*(int *)(v24 + 20)];
  v20[*(int *)(v24 + 24)] = v21[*(int *)(v24 + 24)];
  uint64_t v25 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v25] = *(void *)&a2[v25];
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = *((void *)v11 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v12], 1, v6);
  int v16 = __swift_getEnumTagSinglePayload((uint64_t)v14, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v16)
    {
      v8(v13, v14, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v13, v14, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v6);
LABEL_7:
  uint64_t v18 = a3[8];
  uint64_t v19 = *(void **)&a1[v18];
  uint64_t v20 = *(void **)&a2[v18];
  *(void *)&a1[v18] = v20;
  id v21 = v20;

  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[11];
  id v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 24))(v23, v24, v25);
  uint64_t v26 = type metadata accessor for CamRequestContext();
  v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
  v23[*(int *)(v26 + 24)] = v24[*(int *)(v26 + 24)];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v8 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  if (__swift_getEnumTagSinglePayload((uint64_t)&a2[v8], 1, v6))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    v7(v9, v10, v6);
    __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v6);
  }
  uint64_t v12 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[11];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
  uint64_t v17 = type metadata accessor for CamRequestContext();
  v14[*(int *)(v17 + 20)] = v15[*(int *)(v17 + 20)];
  v14[*(int *)(v17 + 24)] = v15[*(int *)(v17 + 24)];
  uint64_t v18 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v18] = *(void *)&a2[v18];
  return a1;
}

char *assignWithTake for CamRequest(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v9 = a3[6];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = (uint64_t *)&a2[v9];
  uint64_t v13 = *v11;
  uint64_t v12 = v11[1];
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[7];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)&a1[v14], 1, v6);
  int v18 = __swift_getEnumTagSinglePayload((uint64_t)v16, 1, v6);
  if (!EnumTagSinglePayload)
  {
    if (!v18)
    {
      v8(v15, v16, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
    goto LABEL_6;
  }
  if (v18)
  {
LABEL_6:
    uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v15, v16, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v6);
LABEL_7:
  uint64_t v20 = a3[8];
  id v21 = *(void **)&a1[v20];
  *(void *)&a1[v20] = *(void *)&a2[v20];

  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[11];
  id v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v25 = type metadata accessor for Locale();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  uint64_t v26 = type metadata accessor for CamRequestContext();
  v23[*(int *)(v26 + 20)] = v24[*(int *)(v26 + 20)];
  v23[*(int *)(v26 + 24)] = v24[*(int *)(v26 + 24)];
  uint64_t v27 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(void *)&a1[v27] = *(void *)&a2[v27];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CamRequest(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D22AA8);
}

uint64_t sub_1C9D22AA8(uint64_t a1, uint64_t a2, int *a3)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_11:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  if (a2 != 0x7FFFFFFF)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_0_3();
    if (*(_DWORD *)(v13 + 84) == a2)
    {
      uint64_t v8 = v12;
      uint64_t v14 = a3[7];
    }
    else
    {
      uint64_t v8 = type metadata accessor for CamRequestContext();
      uint64_t v14 = a3[11];
    }
    uint64_t v9 = a1 + v14;
    goto LABEL_11;
  }
  unint64_t v10 = *(void *)(a1 + a3[6] + 8);
  if (v10 >= 0xFFFFFFFF) {
    LODWORD(v10) = -1;
  }
  return (v10 + 1);
}

uint64_t storeEnumTagSinglePayload for CamRequest(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D22B98);
}

void sub_1C9D22B98(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[6] + 8) = (a2 - 1);
      return;
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_0_3();
    if (*(_DWORD *)(v13 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v14 = a4[7];
    }
    else
    {
      uint64_t v10 = type metadata accessor for CamRequestContext();
      uint64_t v14 = a4[11];
    }
    uint64_t v11 = a1 + v14;
  }
  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for CamRequest()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID?();
    if (v1 <= 0x3F)
    {
      type metadata accessor for CamRequestContext();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata accessor for UUID?()
{
  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
    }
  }
}

_WORD *__swift_memcpy2_1(_WORD *result, _WORD *a2)
{
  *uint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for CamResponse(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 65284 <= 0xFFFEFFFF) {
      int v2 = 2;
    }
    else {
      int v2 = 4;
    }
    if (a2 + 65284 < 0xFF0000) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = *((unsigned __int8 *)a1 + 2);
      if (!*((unsigned char *)a1 + 2)) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 16)) - 65285;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CamResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65284 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65284 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 252;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D22F60);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for CamResponse()
{
}

uint64_t getEnumTagSinglePayload for CamAction(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFC)
  {
    if (a2 + 4 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 4) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 5;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 5;
  int v5 = v6 - 5;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CamAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D230E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void type metadata accessor for CamAction()
{
}

uint64_t outlined copy of CamError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for CamError(uint64_t a1)
{
  return outlined consume of CamError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of CamError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 4u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for CamError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CamError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for CamError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of CamError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of CamError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for CamError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of CamError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFC && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 251;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 4) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CamError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 252;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

void type metadata accessor for CamError()
{
}

uint64_t OUTLINED_FUNCTION_5_4()
{
  return Locale.init(identifier:)();
}

uint64_t *initializeBufferWithCopyOfBuffer for DisabledAppShortcutTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    id v23 = (uint64_t *)(v22 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v23;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = *(int *)(a3 + 32);
  unsigned __int8 v6 = (uint64_t *)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *unsigned __int8 v6 = *(uint64_t *)((char *)a2 + v5);
  v6[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  uint64_t v11 = (void **)((char *)v6 + v10);
  uint64_t v12 = (void **)&v7[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v78 = v13;
  unint64_t v79 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v24 = *v12;
    *uint64_t v11 = *v12;
    id v25 = v24;
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
    uint64_t v16 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v17 = v16[5];
    int v18 = (char *)v11 + v17;
    uint64_t v19 = (char *)v12 + v17;
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v26 = v16[6];
    uint64_t v27 = (void **)((char *)v11 + v26);
    id v28 = (void **)((char *)v12 + v26);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = v16[7];
    unint64_t v31 = (char *)v11 + v30;
    unsigned __int8 v32 = (char *)v12 + v30;
    v31[4] = v32[4];
    *(_DWORD *)unint64_t v31 = *(_DWORD *)v32;
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_12:
  *(void *)((char *)v6 + v9[6]) = *(void *)&v7[v9[6]];
  *(void *)((char *)v6 + v9[7]) = *(void *)&v7[v9[7]];
  *(void *)((char *)v6 + v9[8]) = *(void *)&v7[v9[8]];
  uint64_t v33 = v9[9];
  uint64_t v34 = (char *)v6 + v33;
  uint64_t v35 = &v7[v33];
  uint64_t v36 = type metadata accessor for UUID();
  uint64_t v37 = *(void (**)(void, void, void))(*(void *)(v36 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v75 = (void (*)(char *, char *, uint64_t))v37;
  v37(v34, v35, v36);
  uint64_t v38 = v9[10];
  uint64_t v39 = (void *)((char *)v6 + v38);
  uint64_t v40 = &v7[v38];
  uint64_t v41 = *((void *)v40 + 1);
  *uint64_t v39 = *(void *)v40;
  v39[1] = v41;
  *(void *)((char *)v6 + v9[11]) = *(void *)&v7[v9[11]];
  uint64_t v42 = *(int *)(a3 + 36);
  id v23 = v79;
  unint64_t v43 = (uint64_t *)((char *)v79 + v42);
  uint64_t v44 = (char *)a2 + v42;
  uint64_t v45 = *(uint64_t *)((char *)a2 + v42 + 8);
  void *v43 = *(uint64_t *)((char *)a2 + v42);
  v43[1] = v45;
  uint64_t v46 = v9[5];
  uint64_t v47 = (void **)((char *)v43 + v46);
  uint64_t v48 = (void **)&v44[v46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v49 = swift_getEnumCaseMultiPayload();
  if (v49 == 1)
  {
    uint64_t v57 = *v48;
    uint64_t *v47 = *v48;
    id v58 = v57;
    swift_storeEnumTagMultiPayload();
  }
  else if (v49)
  {
    memcpy(v47, v48, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    uint64_t v77 = v36;
    uint64_t v50 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v50 - 8) + 16))(v47, v48, v50);
    unint64_t v51 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v52 = v51[5];
    uint64_t v53 = (char *)v47 + v52;
    uint64_t v54 = (char *)v48 + v52;
    uint64_t v55 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v55))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
      __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v55);
    }
    uint64_t v36 = v77;
    uint64_t v59 = v51[6];
    uint64_t v60 = (void **)((char *)v47 + v59);
    uint64_t v61 = (void **)((char *)v48 + v59);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = v51[7];
    uint64_t v64 = (char *)v47 + v63;
    uint64_t v65 = (char *)v48 + v63;
    v64[4] = v65[4];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    id v23 = v79;
  }
  *(void *)((char *)v43 + v9[6]) = *(void *)&v44[v9[6]];
  *(void *)((char *)v43 + v9[7]) = *(void *)&v44[v9[7]];
  *(void *)((char *)v43 + v9[8]) = *(void *)&v44[v9[8]];
  uint64_t v66 = v9[9];
  uint64_t v67 = (char *)v43 + v66;
  uint64_t v68 = &v44[v66];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v67, v68, v36);
  uint64_t v69 = v9[10];
  uint64_t v70 = (void *)((char *)v43 + v69);
  uint64_t v71 = &v44[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *uint64_t v70 = *(void *)v71;
  v70[1] = v72;
  *(void *)((char *)v43 + v9[11]) = *(void *)&v44[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v23;
}

uint64_t destroy for DisabledAppShortcutTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for RankedAction();
  unsigned __int8 v6 = (id *)(v4 + *(int *)(v5 + 20));
  type metadata accessor for CamParse(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    uint64_t v9 = (uint64_t)v6 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + *(int *)(v5 + 36);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + *(int *)(a2 + 36);
  swift_bridgeObjectRelease();
  uint64_t v15 = (id *)(v14 + *(int *)(v5 + 20));
  int v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 1)
  {
  }
  else if (!v16)
  {
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v17 - 8) + 8))(v15, v17);
    uint64_t v18 = (uint64_t)v15 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13(v14 + *(int *)(v5 + 36), v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_DWORD *initializeWithCopy for DisabledAppShortcutTieBreaker(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 32);
  unsigned __int8 v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(void *)((char *)a2 + v5 + 8);
  *unsigned __int8 v6 = *(void *)((char *)a2 + v5);
  v6[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  uint64_t v11 = (void **)((char *)v6 + v10);
  uint64_t v12 = (void **)&v7[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v77 = a1;
  uint64_t v78 = v13;
  uint64_t v76 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = *v12;
    *uint64_t v11 = *v12;
    id v23 = v22;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
      goto LABEL_10;
    }
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
    int v16 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (char *)v11 + v17;
    uint64_t v19 = (char *)v12 + v17;
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v24 = v16[6];
    id v25 = (void **)((char *)v11 + v24);
    uint64_t v26 = (void **)((char *)v12 + v24);
    uint64_t v27 = v26[1];
    *id v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v16[7];
    uint64_t v29 = (char *)v11 + v28;
    uint64_t v30 = (char *)v12 + v28;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(void *)((char *)v6 + v9[6]) = *(void *)&v7[v9[6]];
  *(void *)((char *)v6 + v9[7]) = *(void *)&v7[v9[7]];
  *(void *)((char *)v6 + v9[8]) = *(void *)&v7[v9[8]];
  uint64_t v31 = v9[9];
  unsigned __int8 v32 = (char *)v6 + v31;
  uint64_t v33 = &v7[v31];
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v75 = v34;
  uint64_t v73 = v35;
  v35(v32, v33, v34);
  uint64_t v36 = v9[10];
  uint64_t v37 = (void *)((char *)v6 + v36);
  uint64_t v38 = &v7[v36];
  uint64_t v39 = *((void *)v38 + 1);
  void *v37 = *(void *)v38;
  v37[1] = v39;
  *(void *)((char *)v6 + v9[11]) = *(void *)&v7[v9[11]];
  uint64_t v40 = v77;
  uint64_t v41 = *(int *)(v76 + 36);
  uint64_t v42 = (void *)((char *)v77 + v41);
  unint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(void *)((char *)a2 + v41 + 8);
  void *v42 = *(void *)((char *)a2 + v41);
  v42[1] = v44;
  uint64_t v45 = v9[5];
  uint64_t v46 = (void **)((char *)v42 + v45);
  uint64_t v47 = (void **)&v43[v45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v48 = swift_getEnumCaseMultiPayload();
  if (v48 == 1)
  {
    uint64_t v56 = *v47;
    *uint64_t v46 = *v47;
    id v57 = v56;
    swift_storeEnumTagMultiPayload();
  }
  else if (v48)
  {
    memcpy(v46, v47, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    uint64_t v49 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v49 - 8) + 16))(v46, v47, v49);
    uint64_t v50 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v51 = v50[5];
    uint64_t v52 = (char *)v46 + v51;
    uint64_t v53 = (char *)v47 + v51;
    uint64_t v54 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v53, 1, v54))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v52, v53, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      __swift_storeEnumTagSinglePayload((uint64_t)v52, 0, 1, v54);
    }
    uint64_t v58 = v50[6];
    uint64_t v59 = (void **)((char *)v46 + v58);
    uint64_t v60 = (void **)((char *)v47 + v58);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    uint64_t v62 = v50[7];
    uint64_t v63 = (char *)v46 + v62;
    uint64_t v64 = (char *)v47 + v62;
    v63[4] = v64[4];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v40 = v77;
  }
  *(void *)((char *)v42 + v9[6]) = *(void *)&v43[v9[6]];
  *(void *)((char *)v42 + v9[7]) = *(void *)&v43[v9[7]];
  *(void *)((char *)v42 + v9[8]) = *(void *)&v43[v9[8]];
  uint64_t v65 = v9[9];
  uint64_t v66 = (char *)v42 + v65;
  uint64_t v67 = &v43[v65];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73(v66, v67, v75);
  uint64_t v68 = v9[10];
  uint64_t v69 = (void *)((char *)v42 + v68);
  uint64_t v70 = &v43[v68];
  uint64_t v71 = *((void *)v70 + 1);
  *uint64_t v69 = *(void *)v70;
  v69[1] = v71;
  *(void *)((char *)v42 + v9[11]) = *(void *)&v43[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v40;
}

unsigned char *assignWithCopy for DisabledAppShortcutTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = *(void *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for RankedAction();
  uint64_t v10 = (int *)v9;
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(v9 + 20);
    uint64_t v12 = (void **)((char *)v7 + v11);
    uint64_t v13 = (void **)&v8[v11];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v7 + v11, type metadata accessor for CamParse);
    uint64_t v14 = type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v13;
      *uint64_t v12 = *v13;
      id v22 = v21;
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload)
    {
      memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v66 = v3;
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v13, v16);
      uint64_t v65 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v17 = v65[5];
      __dst = (char *)v12 + v17;
      uint64_t v18 = (char *)v13 + v17;
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v19);
      }
      uint64_t v23 = v65[6];
      uint64_t v24 = (void **)((char *)v12 + v23);
      id v25 = (void **)((char *)v13 + v23);
      *uint64_t v24 = *v25;
      v24[1] = v25[1];
      uint64_t v26 = v65[7];
      uint64_t v27 = (char *)v12 + v26;
      uint64_t v28 = (char *)v13 + v26;
      int v29 = *(_DWORD *)v28;
      v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = v29;
      swift_bridgeObjectRetain();
      swift_storeEnumTagMultiPayload();
      uint64_t v3 = v66;
    }
  }
  *(void *)((char *)v7 + v10[6]) = *(void *)&v8[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v10[7]) = *(void *)&v8[v10[7]];
  *(void *)((char *)v7 + v10[8]) = *(void *)&v8[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v10[9];
  uint64_t v31 = (char *)v7 + v30;
  unsigned __int8 v32 = &v8[v30];
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = (void **)(*(void *)(v33 - 8) + 24);
  __dsta = (void (*)(char *, unsigned char *, uint64_t))*v34;
  ((void (*)(char *, unsigned char *, uint64_t))*v34)(v31, v32, v33);
  uint64_t v35 = v10[10];
  uint64_t v36 = (void *)((char *)v7 + v35);
  uint64_t v37 = &v8[v35];
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v10[11]) = *(void *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(int *)(v3 + 36);
  uint64_t v39 = &a1[v38];
  uint64_t v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)&a2[v38];
  *((void *)v39 + 1) = *(void *)&a2[v38 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v41 = v10[5];
    uint64_t v42 = (void **)&v39[v41];
    unint64_t v43 = (void **)&v40[v41];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v39[v41], type metadata accessor for CamParse);
    uint64_t v44 = type metadata accessor for CamParse(0);
    int v45 = swift_getEnumCaseMultiPayload();
    if (v45 == 1)
    {
      uint64_t v51 = *v43;
      void *v42 = *v43;
      id v52 = v51;
LABEL_19:
      swift_storeEnumTagMultiPayload();
      goto LABEL_20;
    }
    if (!v45)
    {
      uint64_t v46 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v46 - 8) + 16))(v42, v43, v46);
      uint64_t v64 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v47 = v64[5];
      uint64_t v67 = (char *)v42 + v47;
      int v48 = (char *)v43 + v47;
      uint64_t v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v67, v48, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v67, v48, v49);
        __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v49);
      }
      uint64_t v53 = v64[6];
      uint64_t v54 = (void **)((char *)v42 + v53);
      uint64_t v55 = (void **)((char *)v43 + v53);
      void *v54 = *v55;
      v54[1] = v55[1];
      uint64_t v56 = v64[7];
      id v57 = (char *)v42 + v56;
      uint64_t v58 = (char *)v43 + v56;
      int v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)id v57 = v59;
      swift_bridgeObjectRetain();
      goto LABEL_19;
    }
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
LABEL_20:
  *(void *)&v39[v10[6]] = *(void *)&v40[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v39[v10[7]] = *(void *)&v40[v10[7]];
  *(void *)&v39[v10[8]] = *(void *)&v40[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __dsta(&v39[v10[9]], &v40[v10[9]], v33);
  uint64_t v60 = v10[10];
  uint64_t v61 = &v39[v60];
  uint64_t v62 = &v40[v60];
  *(void *)uint64_t v61 = *v62;
  *((void *)v61 + 1) = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v39[v10[11]] = *(void *)&v40[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_DWORD *initializeWithTake for DisabledAppShortcutTieBreaker(_DWORD *a1, _DWORD *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[8];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v46 = v3;
    int v48 = v5;
    uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    uint64_t v15 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v16 = v15[5];
    __dst = &v11[v16];
    uint64_t v17 = &v12[v16];
    uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(__dst, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v18);
    }
    *(_OWORD *)&v11[v15[6]] = *(_OWORD *)&v12[v15[6]];
    uint64_t v20 = v15[7];
    uint64_t v21 = &v11[v20];
    id v22 = &v12[v20];
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v3 = v46;
    uint64_t v5 = v48;
  }
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  uint64_t v23 = v9[9];
  uint64_t v24 = &v7[v23];
  id v25 = &v8[v23];
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = v24;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
  v28(v27, v25, v26);
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v29 = v3[9];
  uint64_t v30 = (char *)v5 + v29;
  uint64_t v31 = (char *)a2 + v29;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)((char *)a2 + v29);
  uint64_t v32 = v9[5];
  uint64_t v33 = &v30[v32];
  uint64_t v34 = &v31[v32];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v33, v34, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    int v45 = v28;
    uint64_t v49 = v5;
    uint64_t v35 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    uint64_t v36 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v37 = v36[5];
    uint64_t v47 = &v33[v37];
    uint64_t v38 = &v34[v37];
    uint64_t v39 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v47, v38, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v47, v38, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v39);
    }
    *(_OWORD *)&v33[v36[6]] = *(_OWORD *)&v34[v36[6]];
    uint64_t v41 = v36[7];
    uint64_t v42 = &v33[v41];
    unint64_t v43 = &v34[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = v49;
    uint64_t v28 = v45;
  }
  *(void *)&v30[v9[6]] = *(void *)&v31[v9[6]];
  *(void *)&v30[v9[7]] = *(void *)&v31[v9[7]];
  *(void *)&v30[v9[8]] = *(void *)&v31[v9[8]];
  v28(&v30[v9[9]], &v31[v9[9]], v26);
  *(_OWORD *)&v30[v9[10]] = *(_OWORD *)&v31[v9[10]];
  *(void *)&v30[v9[11]] = *(void *)&v31[v9[11]];
  return v5;
}

unsigned char *assignWithTake for DisabledAppShortcutTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  uint64_t v6 = *(int *)(a3 + 32);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for RankedAction();
  uint64_t v11 = (int *)v10;
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(v10 + 20);
    uint64_t v13 = (char *)v7 + v12;
    uint64_t v14 = &v8[v12];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v7 + v12, type metadata accessor for CamParse);
    uint64_t v15 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v58 = v3;
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      id v57 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v17 = v57[5];
      uint64_t v60 = &v13[v17];
      uint64_t v18 = &v14[v17];
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v60, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v60, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v60, 0, 1, v19);
      }
      uint64_t v3 = v58;
      *(_OWORD *)&v13[v57[6]] = *(_OWORD *)&v14[v57[6]];
      uint64_t v21 = v57[7];
      id v22 = &v13[v21];
      uint64_t v23 = &v14[v21];
      v22[4] = v23[4];
      *(_DWORD *)id v22 = *(_DWORD *)v23;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)v7 + v11[6]) = *(void *)&v8[v11[6]];
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v11[7]) = *(void *)&v8[v11[7]];
  *(void *)((char *)v7 + v11[8]) = *(void *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  uint64_t v24 = v11[9];
  id v25 = (char *)v7 + v24;
  uint64_t v26 = &v8[v24];
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = (void (**)(char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 40);
  uint64_t v61 = *v28;
  (*v28)(v25, v26, v27);
  uint64_t v29 = v11[10];
  uint64_t v30 = (void *)((char *)v7 + v29);
  uint64_t v31 = (uint64_t *)&v8[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v11[11]) = *(void *)&v8[v11[11]];
  swift_bridgeObjectRelease();
  uint64_t v34 = *(int *)(v3 + 36);
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(void *)&a2[v34 + 8];
  *(void *)uint64_t v35 = *(void *)&a2[v34];
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v38 = v11[5];
    uint64_t v39 = &v35[v38];
    uint64_t v40 = &v36[v38];
    _s7SiriCam0B5ParseOWOhTm_0((uint64_t)&v35[v38], type metadata accessor for CamParse);
    uint64_t v41 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v39, v40, v42);
      uint64_t v56 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v43 = v56[5];
      int v59 = &v39[v43];
      uint64_t v44 = &v40[v43];
      uint64_t v45 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v45))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v59, v44, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v59, v44, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v45);
      }
      *(_OWORD *)&v39[v56[6]] = *(_OWORD *)&v40[v56[6]];
      uint64_t v47 = v56[7];
      int v48 = &v39[v47];
      uint64_t v49 = &v40[v47];
      v48[4] = v49[4];
      *(_DWORD *)int v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)&v35[v11[6]] = *(void *)&v36[v11[6]];
  swift_bridgeObjectRelease();
  *(void *)&v35[v11[7]] = *(void *)&v36[v11[7]];
  *(void *)&v35[v11[8]] = *(void *)&v36[v11[8]];
  swift_bridgeObjectRelease();
  v61(&v35[v11[9]], &v36[v11[9]], v27);
  uint64_t v50 = v11[10];
  uint64_t v51 = &v35[v50];
  id v52 = (uint64_t *)&v36[v50];
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(void *)&v35[v11[11]] = *(void *)&v36[v11[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisabledAppShortcutTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D250A8);
}

uint64_t sub_1C9D250A8(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for RankedAction();
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 32)];
    return __swift_getEnumTagSinglePayload(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for DisabledAppShortcutTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D25144);
}

unsigned char *sub_1C9D25144(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for RankedAction();
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 32)];
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DisabledAppShortcutTieBreaker()
{
  uint64_t result = type metadata singleton initialization cache for DisabledAppShortcutTieBreaker;
  if (!type metadata singleton initialization cache for DisabledAppShortcutTieBreaker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for DisabledAppShortcutTieBreaker()
{
  uint64_t result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t DisabledAppShortcutTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v18 - v8;
  *(_WORD *)a2 = 1025;
  unsigned __int8 v10 = static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(a1);
  *(unsigned char *)(a2 + 2) = v10 & 1;
  uint64_t v11 = type metadata accessor for TopTwo();
  BOOL v12 = (v10 & 1) == 0;
  uint64_t v13 = *(int *)(v11 + 20);
  if (v10) {
    uint64_t v14 = a1;
  }
  else {
    uint64_t v14 = a1 + v13;
  }
  if (v12) {
    uint64_t v15 = a1;
  }
  else {
    uint64_t v15 = a1 + v13;
  }
  *(unsigned char *)(a2 + 3) = static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(a1 + v13) & 1;
  outlined init with copy of DisabledAppShortcutTieBreaker(v14, (uint64_t)v9, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v16 = type metadata accessor for DisabledAppShortcutTieBreaker();
  outlined init with take of RankedAction((uint64_t)v9, a2 + *(int *)(v16 + 32));
  outlined init with copy of DisabledAppShortcutTieBreaker(v15, (uint64_t)v7, (void (*)(void))type metadata accessor for RankedAction);
  _s7SiriCam0B5ParseOWOhTm_0(a1, (uint64_t (*)(void))type metadata accessor for TopTwo);
  return outlined init with take of RankedAction((uint64_t)v7, a2 + *(int *)(v16 + 36));
}

void *static DisabledAppShortcutTieBreaker.isDisabledAppShortcut(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for RankedAction();
  uint64_t v3 = *(void *)(a1 + *(int *)(v2 + 44));
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  uint64_t v4 = v2;
  uint64_t v5 = OUTLINED_FUNCTION_1_9();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
  if ((v8 & 1) == 0) {
    return 0;
  }
  id v9 = objc_msgSend(*(id *)(*(void *)(v3 + 56) + 8 * v7), sel_int64Value);
  if (!*(void *)(a1 + *(int *)(v4 + 32)))
  {
    long long v19 = 0u;
    long long v20 = 0u;
    goto LABEL_13;
  }
  id v10 = v9;
  OUTLINED_FUNCTION_2_4();
  specialized Dictionary.subscript.getter(0xD000000000000014, v11, v12, &v19);
  if (!*((void *)&v20 + 1))
  {
LABEL_13:
    outlined destroy of Any?((uint64_t)&v19);
    return 0;
  }
  outlined destroy of Any?((uint64_t)&v19);
  OUTLINED_FUNCTION_2_4();
  uint64_t result = (void *)specialized Dictionary.subscript.getter(v13, v14, v3);
  if (result)
  {
    uint64_t v16 = result;
    id v17 = objc_msgSend(result, sel_int64Value);

    return (void *)(v10 && v17 == 0);
  }
  return result;
}

Swift::Bool __swiftcall DisabledAppShortcutTieBreaker.supportedTie()()
{
  uint64_t v1 = type metadata accessor for DisabledAppShortcutTieBreaker();
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v4 = *(unsigned char *)(v0 + 2);
  outlined init with copy of DisabledAppShortcutTieBreaker(v0, (uint64_t)v3, (void (*)(void))type metadata accessor for DisabledAppShortcutTieBreaker);
  if (v4) {
    char v5 = 1;
  }
  else {
    char v5 = v3[3];
  }
  _s7SiriCam0B5ParseOWOhTm_0((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for DisabledAppShortcutTieBreaker);
  return v5;
}

uint64_t DisabledAppShortcutTieBreaker.context.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for DisabledAppShortcutTieBreaker() + 32);
  uint64_t v2 = *(void *)(v1 + *(int *)(type metadata accessor for RankedAction() + 44));
  OUTLINED_FUNCTION_2_4();
  char v5 = (void *)specialized Dictionary.subscript.getter(v3, v4, v2);
  if (v5)
  {
    uint64_t v6 = v5;
    id v7 = objc_msgSend(v5, sel_int64Value);

    int v8 = v7 != 0;
  }
  else
  {
    int v8 = 2;
  }
  OUTLINED_FUNCTION_2_4();
  uint64_t v12 = (void *)specialized Dictionary.subscript.getter(v9, v10, v11);
  if (v12)
  {
    uint64_t v13 = v12;
    id v14 = objc_msgSend(v12, sel_int64Value);

    v15.value = Domain3PProtectionLevel.init(rawValue:)((Swift::Int64)v14).value;
  }
  else
  {
    v15.value = SiriCam_Domain3PProtectionLevel_unknownDefault;
  }
  OUTLINED_FUNCTION_2_4();
  id v17 = (void *)specialized Dictionary.subscript.getter(0xD000000000000013, v16, v2);
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = objc_msgSend(v17, sel_int64Value);

    int v20 = v19 != 0;
  }
  else
  {
    int v20 = 2;
  }
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  __swift_project_value_buffer(v21, (uint64_t)static Logger.ranker);
  id v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc();
    uint64_t v25 = swift_slowAlloc();
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v29 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ambiguousRunPreviouslyShown: Bool?, domainProtectionLevel: Domain3PProtectionLevel?, onScreenAppShortcut: Bool?));
    uint64_t v26 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v22, v23, "[DisabledAppShortcutTieBreaker] Context: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v25, -1, -1);
    MEMORY[0x1CB78E290](v24, -1, -1);
  }

  return (v15.value << 8) | (v20 << 16) | v8;
}

uint64_t DisabledAppShortcutTieBreaker.actionBoost(features:loggingId:)@<X0>(uint64_t a1@<X1>, double *a2@<X8>)
{
  uint64_t v4 = OUTLINED_FUNCTION_1_9();
  id v7 = (void *)specialized Dictionary.subscript.getter(v4, v5, v6);
  if (v7)
  {
    int v8 = v7;
    id v9 = objc_msgSend(v7, sel_int64Value);

    BOOL v10 = v9 != 0;
  }
  else
  {
    BOOL v10 = 0;
  }
  char v11 = DisabledAppShortcutTieBreaker.context.getter();
  if (v11 != 2)
  {
    char v12 = v11;
    __int16 v13 = DisabledAppShortcutTieBreaker.context.getter();
    if ((v13 & 0xFF00) != 0x400)
    {
      unsigned __int8 v14 = HIBYTE(v13);
      uint64_t v15 = DisabledAppShortcutTieBreaker.context.getter();
      if ((v15 & 0x30000) != 0x20000)
      {
        uint64_t v23 = v15;
        int v24 = v14;
        if (v10)
        {
          type metadata accessor for ScoreBoost();
          type metadata accessor for UUID();
          OUTLINED_FUNCTION_0_13();
          OUTLINED_FUNCTION_2_10();
          uint64_t result = v25();
          if (v24 == 3 || (v23 & 0x10000) == 0)
          {
            *a2 = 0.0;
            a2[1] = 0.0;
            a2[2] = 0.0;
            return result;
          }
        }
        else
        {
          if (v24 != 3)
          {
            if ((v15 & 0x10000) != 0)
            {
              type metadata accessor for ScoreBoost();
              OUTLINED_FUNCTION_3_7();
              OUTLINED_FUNCTION_0_13();
              OUTLINED_FUNCTION_2_10();
              uint64_t result = v30();
              a2[2] = 0.0;
              *a2 = 0.0;
            }
            else
            {
              OUTLINED_FUNCTION_2_4();
              if ((static TrialProvider.fetchBoolFactorFromTrial(_:)(v27, v28) & 1) != 0
                && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
              {
                BOOL v29 = (v12 & 1) == 0;
              }
              else
              {
                BOOL v29 = v24 == 1 && (v12 & 1) == 0;
              }
              if (v29) {
                double v31 = 0.0;
              }
              else {
                double v31 = 0.02;
              }
              type metadata accessor for ScoreBoost();
              OUTLINED_FUNCTION_3_7();
              OUTLINED_FUNCTION_0_13();
              OUTLINED_FUNCTION_2_10();
              uint64_t result = v32();
              *a2 = v31;
              a2[2] = 0.0;
            }
            goto LABEL_22;
          }
          type metadata accessor for ScoreBoost();
          OUTLINED_FUNCTION_3_7();
          OUTLINED_FUNCTION_0_13();
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 16))(v23, a1);
        }
        a2[2] = 0.0;
        *a2 = 0.02;
LABEL_22:
        a2[1] = 0.0;
        return result;
      }
    }
  }
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.ranker);
  id v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    id v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v19 = 0;
    _os_log_impl(&dword_1C9CFE000, v17, v18, "[DisabledAppShortcutTieBreaker] Context is unavailable, default to 1P.", v19, 2u);
    MEMORY[0x1CB78E290](v19, -1, -1);
  }

  if (v10) {
    double v20 = 0.02;
  }
  else {
    double v20 = 0.0;
  }
  type metadata accessor for ScoreBoost();
  OUTLINED_FUNCTION_3_7();
  OUTLINED_FUNCTION_0_13();
  OUTLINED_FUNCTION_2_10();
  uint64_t result = v21();
  *a2 = v20;
  a2[1] = -2.31584178e77;
  *((void *)a2 + 2) = 0x80000001C9DA3430;
  return result;
}

uint64_t protocol witness for TieBreaking.enabled.getter in conformance DisabledAppShortcutTieBreaker()
{
  return *v0;
}

uint64_t protocol witness for TieBreaking.forcedDisambiguation.getter in conformance DisabledAppShortcutTieBreaker()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t outlined init with copy of DisabledAppShortcutTieBreaker(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with take of RankedAction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t OUTLINED_FUNCTION_1_9()
{
  return 0x535F5050415F5349;
}

uint64_t OUTLINED_FUNCTION_3_7()
{
  return type metadata accessor for UUID();
}

void *static AppLaunchRecencyFeatureExtractor.extractedFeatures.getter()
{
  return &outlined read-only object #0 of static AppLaunchRecencyFeatureExtractor.extractedFeatures.getter;
}

unint64_t AppLaunchRecencyFeatureExtractor.extractSecondsSinceAppLaunch(from:)(void *a1)
{
  unint64_t v3 = (unint64_t)v1;
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v5);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
  if (!v8)
  {
    _StringGuts.grow(_:)(30);
    swift_bridgeObjectRelease();
    v26[0] = 0xD00000000000001BLL;
    v26[1] = 0x80000001C9DA3470;
    uint64_t v13 = a1[3];
    uint64_t v14 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v13);
    v15._uint64_t countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
    String.append(_:)(v15);
    swift_bridgeObjectRelease();
    v16._uint64_t countAndFlagsBits = 46;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    unint64_t v3 = 0x80000001C9DA3470;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD00000000000001BLL;
    *(void *)(v17 + 8) = 0x80000001C9DA3470;
LABEL_7:
    *(unsigned char *)(v17 + 16) = 1;
    swift_willThrow();
    return v3;
  }
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  uint64_t Launched = static TimeSinceAppLastLaunchedSignal.instances()();
  specialized Collection.first.getter(Launched, (uint64_t)&v24);
  swift_bridgeObjectRelease();
  if (!v25)
  {
    swift_bridgeObjectRelease();
    outlined destroy of SignalProviding?((uint64_t)&v24);
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v17 = 0xD00000000000003DLL;
    *(void *)(v17 + 8) = 0x80000001C9DA3490;
    goto LABEL_7;
  }
  outlined init with take of AppSelectionSignalComponent(&v24, (uint64_t)v26);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  uint64_t v12 = specialized SiriSignalsContaining.get(from:query:defaultVal:)(v26, v9, v10, (void *)0xFFFFFFFFFFFFFFFFLL);
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v3 = v12;
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain();
    double v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(void *)&long long v24 = v23;
      *(_DWORD *)uint64_t v22 = 134218242;
      uint64_t v27 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, (uint64_t *)&v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v20, v21, "[AppLaunchRecencyFeatureExtractor] %lds since app launch for bundle: %s", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v23, -1, -1);
      MEMORY[0x1CB78E290](v22, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  }
  return v3;
}

unint64_t AppLaunchRecencyFeatureExtractor.extractImpl(from:)(void *a1)
{
  unint64_t result = AppLaunchRecencyFeatureExtractor.extractSecondsSinceAppLaunch(from:)(a1);
  unint64_t v3 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLFeatureValue)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
    *(void *)(inited + 32) = 0xD00000000000001ALL;
    *(void *)(inited + 40) = 0x80000001C9DA2270;
    *(void *)(inited + 48) = objc_msgSend(self, sel_featureValueWithInt64_, v3);
    type metadata accessor for MLFeatureValue();
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t outlined destroy of SignalProviding?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SignalProviding?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AppLaunchRecencyFeatureExtractor(void *a1)
{
  return AppLaunchRecencyFeatureExtractor.extractImpl(from:)(a1);
}

uint64_t specialized SiriSignalsContaining.get(from:query:defaultVal:)(void *a1, uint64_t a2, unint64_t a3, void *a4)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<SignalProviding>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
  outlined init with copy of SignalProviding((uint64_t)a1, inited + 32);
  uint64_t v10 = SiriSignalsContainer.get(from:query:defaultVal:)(inited, a2, a3, a4);
  if (v4)
  {
    swift_setDeallocating();
    uint64_t v11 = inited;
    specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    uint64_t v12 = v10;
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    __swift_project_boxed_opaque_existential_1(a1, a1[3]);
    uint64_t v13 = dispatch thunk of AppSelectionSignalComponent.name.getter();
    uint64_t v11 = specialized Dictionary.subscript.getter(v13, v14, v12);
    char v16 = v15;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v16)
    {
      _StringGuts.grow(_:)(23);
      swift_bridgeObjectRelease();
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      v17._uint64_t countAndFlagsBits = dispatch thunk of AppSelectionSignalComponent.name.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      uint64_t v11 = 0x80000001C9DA34D0;
      lazy protocol witness table accessor for type CaarError and conformance CaarError();
      swift_allocError();
      *(void *)uint64_t v18 = 0xD000000000000015;
      *(void *)(v18 + 8) = 0x80000001C9DA34D0;
      *(unsigned char *)(v18 + 16) = 1;
      swift_willThrow();
    }
  }
  return v11;
}

ValueMetadata *type metadata accessor for AppLaunchRecencyFeatureExtractor()
{
  return &type metadata for AppLaunchRecencyFeatureExtractor;
}

id specialized Zip2Sequence.Iterator.next()()
{
  if (*(unsigned char *)(v0 + 32)) {
    return 0;
  }
  uint64_t v2 = *(void *)v0;
  unint64_t v3 = *(void *)(v0 + 8);
  if (*(void *)v0 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v4 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v3 == v4)
  {
LABEL_13:
    uint64_t v1 = 0;
    *(unsigned char *)(v0 + 32) = 1;
    return v1;
  }
  unint64_t v5 = v2 & 0xC000000000000001;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v3, (v2 & 0xC000000000000001) == 0, v2);
  if ((v2 & 0xC000000000000001) != 0) {
    id v6 = (id)MEMORY[0x1CB78D7C0](v3, v2);
  }
  else {
    id v6 = *(id *)(v2 + 8 * v3 + 32);
  }
  uint64_t v1 = v6;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(void *)(v0 + 8) = v3 + 1;
    unint64_t v5 = *(void *)(v0 + 16);
    unint64_t v3 = *(void *)(v0 + 24);
    if (!(v5 >> 62))
    {
      uint64_t v7 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  if (v3 == v7)
  {

    goto LABEL_13;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v3, (v5 & 0xC000000000000001) == 0, v5);
  if ((v5 & 0xC000000000000001) != 0) {
    id result = (id)MEMORY[0x1CB78D7C0](v3, v5);
  }
  else {
    id result = *(id *)(v5 + 8 * v3 + 32);
  }
  if (!__OFADD__(v3, 1))
  {
    *(void *)(v0 + 24) = v3 + 1;
    return v1;
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12MorphunSwift5TokenVG_SSs5NeverOTg5083_s7SiriCam29WordEmbeddingFeatureExtractorV10nlTokenize11recognitionSaySSGSS_tKFSS12d6Swift5F54Vcfu_33_159891d7692f873338f9510e7a09688eAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v13;
    uint64_t v4 = *(void *)(type metadata accessor for Token() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = Token.cleanValue.getter();
      uint64_t v9 = v8;
      unint64_t v10 = *(void *)(v13 + 16);
      if (v10 >= *(void *)(v13 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, double a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_8_5();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v6 = result + 8 * v5++;
      *(double *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(int a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_8_5();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else if (a2)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a2;
    do
    {
      uint64_t v6 = result + 4 * v5++;
      *(_DWORD *)(v6 + 32) = a1;
    }
    while (a2 != v5);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t specialized Array.init(repeating:count:)(uint64_t a1, float a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_8_5();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v6 = result + 4 * v5++;
      *(float *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t static WordEmbeddingFeatureExtractor.currentLocaleIsSupported()()
{
  uint64_t v0 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v2 = v1;
  MEMORY[0x1F4188790]();
  OUTLINED_FUNCTION_2_1();
  uint64_t v5 = v4 - v3;
  static EnvironmentUtilities.currentSiriLocale.getter();
  uint64_t v6 = Locale.languageCode.getter();
  unint64_t v8 = v7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v5, v0);
  if (v8)
  {
    if (one-time initialization token for supportedEmbeddingLanguages != -1) {
      swift_once();
    }
    char v9 = specialized Sequence<>.contains(_:)(v6, v8, (void *)static WordEmbeddingFeatureExtractor.supportedEmbeddingLanguages);
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 67109378;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 8) = 2080;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v8, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v11, v12, "WordEmbeddingFeatureExtractor supported=%{BOOL}d for current siri language %s", (uint8_t *)v13, 0x12u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.autoSend);
    char v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      Swift::String v17 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_19_2(v17);
      _os_log_impl(&dword_1C9CFE000, v15, v16, "Cannot detect current Siri language for WordEmbeddingFeatureExtractor", 0, 2u);
      OUTLINED_FUNCTION_3_8();
    }

    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t *WordEmbeddingFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static WordEmbeddingFeatureExtractor.extractedFeatures;
}

uint64_t WordEmbeddingFeatureExtractor.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  static EnvironmentUtilities.currentSiriLocale.getter();
  uint64_t v10 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  *(void *)(a1 + v10[5]) = 0;
  *(void *)(a1 + v10[6]) = 0;
  *(void *)(a1 + v10[7]) = 0;
  objc_msgSend(self, sel_setTrialNamespaceToUse_, 1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v9, a1, v3);
  WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(v9, 1);
  if (v1)
  {
    uint64_t v11 = OUTLINED_FUNCTION_16_1();
    v12(v11);
    return outlined destroy of WordEmbeddingFeatureExtractor(a1);
  }
  else
  {
    WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(v9, 1);
    uint64_t v13 = OUTLINED_FUNCTION_16_1();
    return v14(v13);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WordEmbeddingFeatureExtractor.update()()
{
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_13_3();
  uint64_t v8 = (int *)type metadata accessor for WordEmbeddingFeatureExtractor();
  unint64_t v9 = 0x1EA5C2000uLL;
  if (*(void *)(v0 + v8[5])) {
    goto LABEL_16;
  }
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.autoSend);
  char v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    Swift::String v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)Swift::String v17 = 0;
    _os_log_impl(&dword_1C9CFE000, v15, v16, "Morphun assets missing, attempting to load on update call", v17, 2u);
    unint64_t v9 = 0x1EA5C2000;
    OUTLINED_FUNCTION_2_2();
  }

  WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(v3, 0);
  if (!v1)
  {
LABEL_16:
    if (!*(void *)(v3 + v8[6]) || !*(void *)(v3 + v8[7]))
    {
      if (*(void *)(v9 + 2552) != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.autoSend);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C9CFE000, v11, v12, "NLEmbeddings assets missing, attempting to load on update call", v13, 2u);
        OUTLINED_FUNCTION_2_2();
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v3, v4);
      WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(v2, 0);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v4);
    }
  }
}

uint64_t NLEmbeddingsAssetsManager.download(for:)()
{
  OUTLINED_FUNCTION_14_3();
  v1[19] = v2;
  v1[20] = v0;
  v1[18] = v3;
  uint64_t v4 = type metadata accessor for Locale();
  v1[21] = v4;
  v1[22] = *(void *)(v4 - 8);
  v1[23] = swift_task_alloc();
  return MEMORY[0x1F4188298](NLEmbeddingsAssetsManager.download(for:), v0, 0);
}

{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _DWORD *v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _WORD *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t);
  uint64_t v36;
  uint64_t v38[3];
  void *v39;

  uint64_t v39 = v0;
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[24] = __swift_project_value_buffer(v1, (uint64_t)static Logger.autoSend);
  uint64_t v2 = Logger.logObject.getter();
  uint64_t v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (_WORD *)OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_19_2(v4);
    OUTLINED_FUNCTION_11_3(&dword_1C9CFE000, v2, v5, "Submitting NLTagger asset request");
    OUTLINED_FUNCTION_3_8();
  }

  uint64_t v6 = Locale.languageCode.getter();
  if (!v7)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32();
    v38[0] = v15;
    v38[1] = 0x80000001C9DA3560;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
    v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    Swift::String v17 = (void *)swift_allocError();
    *(void *)uint64_t v18 = v38[0];
    *(void *)(v18 + 8) = 0x80000001C9DA3560;
    *(unsigned char *)(v18 + 16) = 0;
    swift_willThrow();
    uint64_t v19 = v17;
    double v20 = v17;
    os_log_type_t v21 = Logger.logObject.getter();
    uint64_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (_DWORD *)swift_slowAlloc();
      v38[0] = swift_slowAlloc();
      *uint64_t v23 = 136315138;
      v0[15] = v17;
      long long v24 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      uint64_t v25 = String.init<A>(describing:)();
      v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      OUTLINED_FUNCTION_26_0(&dword_1C9CFE000, v27, v28, "Error during NLTagger asset request: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_3_8();
    }
    else
    {
    }
    BOOL v29 = Logger.logObject.getter();
    uint64_t v30 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_18_2(v30))
    {
      double v31 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_19_2(v31);
      OUTLINED_FUNCTION_11_3(&dword_1C9CFE000, v29, v32, "Completed downloading NLTagger assets");
      OUTLINED_FUNCTION_3_8();
    }

    uint64_t v33 = OUTLINED_FUNCTION_9_5();
    v34(v33);
    swift_task_dealloc();
    OUTLINED_FUNCTION_12_3();
    OUTLINED_FUNCTION_17_1();
    __asm { BRAA            X1, X16 }
  }
  uint64_t v8 = v6;
  unint64_t v9 = v7;
  uint64_t v10 = self;
  uint64_t v11 = MEMORY[0x1CB78D210](v8, v9);
  v0[25] = v11;
  swift_bridgeObjectRelease();
  os_log_type_t v12 = *MEMORY[0x1E4F38868];
  v0[2] = v0;
  v0[7] = v0 + 17;
  v0[3] = NLEmbeddingsAssetsManager.download(for:);
  uint64_t v13 = swift_continuation_init();
  v0[10] = MEMORY[0x1E4F143A8];
  v0[11] = 0x40000000;
  v0[12] = @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLTaggerAssetsResult, @unowned NSError?) -> () with result type NLTaggerAssetsResult;
  v0[13] = &block_descriptor;
  v0[14] = v13;
  objc_msgSend(v10, sel_requestAssetsForLanguage_tagScheme_completionHandler_, v11, v12, v0 + 10);
  OUTLINED_FUNCTION_17_1();
  return MEMORY[0x1F41881E8]();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v6;

  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_1_10();
  uint64_t v1 = *(void *)(v0 + 48);
  *(void *)(v2 + 208) = v1;
  uint64_t v3 = *(void *)(v0 + 160);
  if (v1) {
    uint64_t v4 = NLEmbeddingsAssetsManager.download(for:);
  }
  else {
    uint64_t v4 = NLEmbeddingsAssetsManager.download(for:);
  }
  return MEMORY[0x1F4188298](v4, v3, 0);
}

{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  _WORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  uint64_t (*v7)(void);
  uint64_t v9;

  OUTLINED_FUNCTION_25_0();

  uint64_t v1 = Logger.logObject.getter();
  uint64_t v2 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18_2(v2))
  {
    uint64_t v3 = (_WORD *)OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_19_2(v3);
    OUTLINED_FUNCTION_11_3(&dword_1C9CFE000, v1, v4, "Completed downloading NLTagger assets");
    OUTLINED_FUNCTION_3_8();
  }

  uint64_t v5 = OUTLINED_FUNCTION_9_5();
  v6(v5);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_3();
  return v7();
}

void NLEmbeddingsAssetsManager.download(for:)()
{
  uint64_t v1 = (void *)v0[25];
  swift_willThrow();

  uint64_t v2 = (void *)v0[26];
  id v3 = v2;
  id v4 = v2;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (_DWORD *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *uint64_t v7 = 136315138;
    uint64_t v22 = v8;
    v0[15] = v2;
    id v9 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    uint64_t v10 = String.init<A>(describing:)();
    v0[16] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    OUTLINED_FUNCTION_26_0(&dword_1C9CFE000, v12, v13, "Error during NLTagger asset request: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_3_8();
  }
  else
  {
  }
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_18_2(v15))
  {
    os_log_type_t v16 = (_WORD *)OUTLINED_FUNCTION_20_2();
    OUTLINED_FUNCTION_19_2(v16);
    OUTLINED_FUNCTION_11_3(&dword_1C9CFE000, v14, v17, "Completed downloading NLTagger assets");
    OUTLINED_FUNCTION_3_8();
  }

  uint64_t v18 = OUTLINED_FUNCTION_9_5();
  v19(v18);
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_3();
  OUTLINED_FUNCTION_17_1();
  __asm { BRAA            X1, X16 }
}

uint64_t @objc completion handler block implementation for @escaping @callee_unowned @convention(block) (@unowned NLTaggerAssetsResult, @unowned NSError?) -> () with result type NLTaggerAssetsResult(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    id v4 = a3;
    return specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(v3, (uint64_t)v4);
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 32);
    return specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(v6, a2);
  }
}

uint64_t specialized _resumeUnsafeThrowingContinuationWithError<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  uint64_t v4 = swift_allocError();
  *uint64_t v5 = a2;
  return MEMORY[0x1F4188208](a1, v4);
}

uint64_t specialized _resumeUnsafeThrowingContinuation<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  **(void **)(*(void *)(a1 + 64) + 40) = a2;
  return MEMORY[0x1F4188200]();
}

uint64_t NLEmbeddingsAssetsManager.__deallocating_deinit()
{
  swift_defaultActor_destroy();
  return MEMORY[0x1F4188210](v0);
}

uint64_t type metadata accessor for NLEmbeddingsAssetsManager()
{
  return self;
}

uint64_t *initializeBufferWithCopyOfBuffer for WordEmbeddingFeatureExtractor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(uint64_t *)((char *)a1 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    id v9 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v9;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_retain();
    id v10 = v9;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  uint64_t v8 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v8;
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_retain();
  id v9 = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_retain();
  swift_release();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a1 + v7);
  id v9 = *(void **)(a2 + v7);
  *(void *)(a1 + v7) = v9;
  id v10 = v9;

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  swift_release();
  uint64_t v7 = a3[6];
  uint64_t v8 = *(void **)(a1 + v7);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D27E30);
}

uint64_t sub_1C9D27E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    int v10 = v9 - 1;
    if (v10 < 0) {
      int v10 = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for WordEmbeddingFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D27EDC);
}

void sub_1C9D27EDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

uint64_t type metadata accessor for WordEmbeddingFeatureExtractor()
{
  uint64_t result = type metadata singleton initialization cache for WordEmbeddingFeatureExtractor;
  if (!type metadata singleton initialization cache for WordEmbeddingFeatureExtractor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for WordEmbeddingFeatureExtractor()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t NLEmbeddingsAssetsManager.unownedExecutor.getter()
{
  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance NLEmbeddingsAssetsManager()
{
  return NLEmbeddingsAssetsManager.unownedExecutor.getter();
}

uint64_t one-time initialization function for analyzerConfigOptions()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<ConfigurationFeature>);
  uint64_t v0 = type metadata accessor for ConfigurationFeature();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 72);
  unint64_t v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C9D9D120;
  unint64_t v5 = v4 + v3;
  uint64_t v6 = *(void (**)(unint64_t, void, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E4F78FA8], v0);
  v6(v5 + v2, *MEMORY[0x1E4F78F88], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E4F78F80], v0);
  uint64_t result = ((uint64_t (*)(unint64_t, void, uint64_t))v6)(v5 + 3 * v2, *MEMORY[0x1E4F78F70], v0);
  static WordEmbeddingFeatureExtractor.analyzerConfigOptions = v4;
  return result;
}

uint64_t one-time initialization function for nlEmbeddingsAssetsManager()
{
  type metadata accessor for NLEmbeddingsAssetsManager();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  static WordEmbeddingFeatureExtractor.nlEmbeddingsAssetsManager = v0;
  return result;
}

void one-time initialization function for supportedEmbeddingLanguages()
{
  static WordEmbeddingFeatureExtractor.supportedEmbeddingLanguages = (uint64_t)&outlined read-only object #0 of one-time initialization function for supportedEmbeddingLanguages;
}

void WordEmbeddingFeatureExtractor.loadMorphunAssets(for:kickOffDownloads:)(uint64_t a1, int a2)
{
  int v59 = a2;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v63 = v5;
  uint64_t v64 = v4;
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v60 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v10 - 8);
  OUTLINED_FUNCTION_13_3();
  uint64_t v11 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1_2();
  uint64_t v13 = v12;
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v57 - v18;
  double v20 = self;
  uint64_t v65 = a1;
  Class isa = Locale._bridgeToObjectiveC()().super.isa;
  id v58 = v20;
  id v22 = objc_msgSend(v20, sel_getAssetPathForLocale_, isa);

  if (v22)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v23 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
    v23(v2, v17, v11);
    __swift_storeEnumTagSinglePayload(v2, 0, 1, v11);
    if (__swift_getEnumTagSinglePayload(v2, 1, v11) != 1)
    {
      v23((uint64_t)v19, (char *)v2, v11);
      URL.absoluteString.getter();
      uint64_t v24 = v62;
      registerDataPathForLocaleWithError(locale:path:)();
      if (v24)
      {
        uint64_t v25 = OUTLINED_FUNCTION_2_11();
        v26(v25);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for analyzerConfigOptions != -1) {
          swift_once();
        }
        type metadata accessor for DefaultAnalyzerFactory();
        swift_allocObject();
        swift_bridgeObjectRetain();
        DefaultAnalyzerFactory.init(configOptions:)();
        uint64_t v52 = dispatch thunk of DefaultAnalyzerFactory.getAnalyzer(locale:)();
        uint64_t v53 = OUTLINED_FUNCTION_2_11();
        v54(v53);
        swift_release();
        uint64_t v55 = *(int *)(type metadata accessor for WordEmbeddingFeatureExtractor() + 20);
        uint64_t v56 = v61;
        swift_release();
        *(void *)(v56 + v55) = v52;
      }
      return;
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload(v2, 1, 1, v11);
  }
  outlined destroy of (CamLogOutput, CamModelMetadata)(v2, &demangling cache variable for type metadata for URL?);
  uint64_t v27 = *(int *)(type metadata accessor for WordEmbeddingFeatureExtractor() + 20);
  uint64_t v28 = v61;
  swift_release();
  *(void *)(v28 + v27) = 0;
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.autoSend);
  uint64_t v31 = v63;
  uint64_t v32 = v64;
  uint64_t v61 = *(void *)(v63 + 16);
  OUTLINED_FUNCTION_30();
  v33();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = OUTLINED_FUNCTION_29();
    uint64_t v57 = v30;
    uint64_t v37 = (uint8_t *)v36;
    uint64_t v66 = OUTLINED_FUNCTION_7_1();
    *(_DWORD *)uint64_t v37 = 136315138;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, &v66);
    OUTLINED_FUNCTION_27(v40);
    uint64_t v32 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(char *, uint8_t *))(v63 + 8);
    v41(v9, v32);
    _os_log_impl(&dword_1C9CFE000, v34, v35, "Morphun assets not available for locale %s", v37, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    uint64_t v42 = v41;
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    uint64_t v42 = *(void (**)(char *, uint8_t *))(v31 + 8);
    v42(v9, v32);
  }

  uint64_t v43 = v60;
  if (v59)
  {
    OUTLINED_FUNCTION_30();
    v44();
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = (uint8_t *)OUTLINED_FUNCTION_29();
      uint64_t v66 = OUTLINED_FUNCTION_7_1();
      *(_DWORD *)uint64_t v47 = 136315138;
      uint64_t v64 = v47 + 4;
      lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v66);
      OUTLINED_FUNCTION_27(v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v42(v43, v32);
      _os_log_impl(&dword_1C9CFE000, v45, v46, "Kicking off morphun assets request for locale %s", v47, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      v42(v43, v32);
    }

    Class v51 = Locale._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v58, sel_onDemandDownloadForLocale_withProgress_withCompletion_, v51, 0, 0);
  }
}

uint64_t WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(uint64_t a1, int a2)
{
  uint64_t v4 = v2;
  LODWORD(v69) = a2;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v68 = v8 - v7;
  uint64_t v9 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v70 = v10;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v67 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = Locale.languageCode.getter();
  if (v18)
  {
    uint64_t v19 = v17;
    unint64_t v20 = v18;
    uint64_t v66 = a1;
    uint64_t v21 = self;
    id v22 = (void *)MEMORY[0x1CB78D210](v19, v20);
    id v23 = objc_msgSend(v21, sel_wordEmbeddingForLanguage_revision_, v22, 1);

    if (v23)
    {
      swift_bridgeObjectRelease();
      uint64_t v24 = type metadata accessor for WordEmbeddingFeatureExtractor();
      uint64_t v25 = *(int *)(v24 + 24);
      uint64_t v26 = *(void **)(v4 + v25);
      id v27 = v23;

      *(void *)(v4 + v25) = v23;
      uint64_t v28 = specialized Array.init(repeating:count:)((uint64_t)objc_msgSend(v27, sel_dimension), 0.0);

      uint64_t v29 = *(int *)(v24 + 28);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v4 + v29) = v28;
    }
    else
    {
      uint64_t v65 = v9;
      if (one-time initialization token for autoSend != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      uint64_t v37 = __swift_project_value_buffer(v36, (uint64_t)static Logger.autoSend);
      swift_bridgeObjectRetain();
      uint64_t v63 = (uint8_t *)v37;
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v64 = v3;
      if (v40)
      {
        uint64_t v41 = (uint8_t *)OUTLINED_FUNCTION_29();
        uint64_t v62 = OUTLINED_FUNCTION_7_1();
        uint64_t v71 = v62;
        *(_DWORD *)uint64_t v41 = 136315138;
        uint64_t v61 = v41 + 4;
        swift_bridgeObjectRetain();
        uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v71);
        OUTLINED_FUNCTION_24_2(v42);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9CFE000, v38, v39, "Cannot create word embedder for language: %s", v41, 0xCu);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_2_2();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v43 = type metadata accessor for WordEmbeddingFeatureExtractor();
      uint64_t v44 = *(int *)(v43 + 24);

      *(void *)(v4 + v44) = 0;
      uint64_t v45 = *(int *)(v43 + 28);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)(v4 + v45) = 0;
      uint64_t v46 = v65;
      if (v69)
      {
        uint64_t v47 = v70;
        uint64_t v69 = *(void *)(v70 + 16);
        OUTLINED_FUNCTION_30();
        v48();
        unint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v49, v50))
        {
          Class v51 = (uint8_t *)OUTLINED_FUNCTION_29();
          uint64_t v71 = OUTLINED_FUNCTION_7_1();
          *(_DWORD *)Class v51 = 136315138;
          uint64_t v63 = v51 + 4;
          lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
          uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v71);
          OUTLINED_FUNCTION_24_2(v54);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v65);
          _os_log_impl(&dword_1C9CFE000, v49, v50, "Kicking off NLEmbeddings assets request for locale %s", v51, 0xCu);
          swift_arrayDestroy();
          uint64_t v47 = v70;
          OUTLINED_FUNCTION_2_2();
          uint64_t v46 = v65;
          OUTLINED_FUNCTION_2_2();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v47 + 8))(v16, v46);
        }

        uint64_t v55 = v68;
        static TaskPriority.background.getter();
        uint64_t v56 = type metadata accessor for TaskPriority();
        __swift_storeEnumTagSinglePayload(v55, 0, 1, v56);
        uint64_t v57 = v67;
        OUTLINED_FUNCTION_30();
        v58();
        unint64_t v59 = (*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
        uint64_t v60 = swift_allocObject();
        *(void *)(v60 + 16) = 0;
        *(void *)(v60 + 24) = 0;
        (*(void (**)(unint64_t, char *, uint64_t))(v47 + 32))(v60 + v59, v57, v46);
        _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v55, (uint64_t)&async function pointer to partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:), v60);
        swift_release();
        return outlined destroy of (CamLogOutput, CamModelMetadata)(v55, &demangling cache variable for type metadata for TaskPriority?);
      }
    }
  }
  else
  {
    uint64_t v71 = 0;
    unint64_t v72 = 0xE000000000000000;
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_32();
    uint64_t v71 = v31;
    unint64_t v72 = 0x80000001C9DA3560;
    lazy protocol witness table accessor for type TokenChain and conformance TokenChain((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
    v32._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v71;
    unint64_t v34 = v72;
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_3();
    *(void *)uint64_t v35 = v33;
    *(void *)(v35 + 8) = v34;
    *(unsigned char *)(v35 + 16) = 0;
    return swift_willThrow();
  }
  return result;
}

uint64_t closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return MEMORY[0x1F4188298](closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:), 0, 0);
}

uint64_t closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)()
{
  OUTLINED_FUNCTION_25_0();
  if (one-time initialization token for nlEmbeddingsAssetsManager != -1) {
    swift_once();
  }
  Locale.identifier.getter();
  *(void *)(v0 + 24) = v1;
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v2;
  *uint64_t v2 = v0;
  v2[1] = closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  return NLEmbeddingsAssetsManager.download(for:)();
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_1_10();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_10_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_12_3();
  return v3();
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  taskCreateFlags(priority:isChildTask:copyTaskLocals:inheritContext:enqueueJob:addPendingGroupTaskUnconditionally:isDiscardingTask:)(a1, 0, 0, 0, 1, 0, 0);
  if (*(void *)(a3 + 16))
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = a2;
  *(void *)(v5 + 24) = a3;
  return swift_task_create();
}

uint64_t WordEmbeddingFeatureExtractor.extractImpl(from:)(void *a1)
{
  uint64_t v4 = type metadata accessor for WordEmbeddingFeatureExtractor();
  uint64_t v5 = *(void **)(v1 + *(int *)(v4 + 24));
  if (v5 && (unint64_t v6 = *(void *)(v1 + *(int *)(v4 + 28))) != 0)
  {
    id v7 = v5;
    swift_bridgeObjectRetain();
    specialized TopRecognitionExtractor.getTopRecognition(recognition:)(a1);
    if (v2)
    {

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v11 = WordEmbeddingFeatureExtractor.nlTokenize(recognition:)(v8);
      swift_bridgeObjectRelease();
      uint64_t v12 = *(void *)(v11 + 16);
      if (v12)
      {
        uint64_t v13 = (void **)(v11 + 40);
        uint64_t v14 = MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v15 = (uint64_t)*(v13 - 1);
          uint64_t v16 = *v13;
          swift_bridgeObjectRetain();
          v17._uint64_t countAndFlagsBits = v15;
          v17._object = v16;
          unint64_t v18 = (unint64_t)NLEmbedding.vector(for:)(v17);
          swift_bridgeObjectRelease();
          if (!v18)
          {
            swift_bridgeObjectRetain();
            unint64_t v18 = v6;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            OUTLINED_FUNCTION_22_2();
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v14 = v20;
          }
          unint64_t v19 = *(void *)(v14 + 16);
          if (v19 >= *(void *)(v14 + 24) >> 1)
          {
            specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v14 = v21;
          }
          v13 += 2;
          *(void *)(v14 + 16) = v19 + 1;
          *(void *)(v14 + 8 * v19 + 32) = v18;
          --v12;
        }
        while (v12);
      }
      else
      {
        uint64_t v14 = MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      if (*(void *)(v14 + 16))
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v14 = v26;
        }
        unint64_t v22 = *(void *)(v14 + 16);
        if (v22 >= *(void *)(v14 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v14 = v27;
        }
        *(void *)(v14 + 16) = v22 + 1;
        *(void *)(v14 + 8 * v22 + 32) = v6;
      }
      type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
      id v23 = static MLMultiArray.make1DSetOrSequence(from:)(v14);
      swift_bridgeObjectRelease();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
      *(void *)(inited + 32) = 0xD000000000000023;
      *(void *)(inited + 40) = 0x80000001C9DA1680;
      *(void *)(inited + 48) = v23;
      id v25 = v23;
      uint64_t v1 = Dictionary.init(dictionaryLiteral:)();
    }
  }
  else
  {
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_3();
    *(_OWORD *)uint64_t v9 = xmmword_1C9D9E3A0;
    *(unsigned char *)(v9 + 16) = 3;
    swift_willThrow();
  }
  return v1;
}

void specialized TopRecognitionExtractor.getTopRecognition(recognition:)(void *a1)
{
  uint64_t v4 = v1;
  unint64_t v5 = (unint64_t)a1;
  id v6 = objc_msgSend(a1, sel_utterances);
  if (!v6) {
    goto LABEL_78;
  }
  id v7 = v6;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASUtterance);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_77;
  }
LABEL_76:
  swift_bridgeObjectRetain();
  uint64_t v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_77:
    swift_bridgeObjectRelease();
LABEL_78:
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    swift_allocError();
    *uint64_t v48 = 0xD000000000000028;
    v48[1] = 0x80000001C9DA3530;
    swift_willThrow();
    return;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x1CB78D7C0](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_81;
    }
    id v10 = *(id *)(v8 + 32);
  }
  uint64_t v9 = v10;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend((id)v5, sel_phrases);
  if (!v11)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v12 = v11;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASPhrase);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = objc_msgSend(v9, sel_interpretationIndices);
  if (!v13)
  {
LABEL_95:
    __break(1u);
    return;
  }
  unint64_t v5 = (unint64_t)v13;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_11;
  }
LABEL_81:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v54 = v4;
  uint64_t v55 = v9;
  if (v14)
  {
    unint64_t v65 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = (void *)MEMORY[0x1CB78D7C0](0, v8);
    }
    else
    {
      if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_84;
      }
      uint64_t v15 = *(id *)(v8 + 32);
    }
    uint64_t v3 = v15;
    if (!(v2 >> 62))
    {
      uint64_t v16 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16) {
        goto LABEL_17;
      }
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_86;
    }
LABEL_84:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_17:
      unint64_t v17 = 0;
      unint64_t v64 = v2 & 0xC000000000000001;
      unint64_t v60 = v8;
      unint64_t v61 = v2;
      unint64_t v58 = v2 + 32;
      uint64_t v59 = v2 & 0xFFFFFFFFFFFFFF8;
      uint64_t v56 = (id *)(v8 + 32);
      uint64_t v57 = v8 & 0xFFFFFFFFFFFFFF8;
      unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v19 = 1;
      uint64_t v62 = v16;
      uint64_t v63 = v14;
      while (1)
      {
        if (v64)
        {
          id v20 = (id)MEMORY[0x1CB78D7C0](v17, v61);
        }
        else
        {
          if (v17 >= *(void *)(v59 + 16)) {
            goto LABEL_74;
          }
          id v20 = *(id *)(v58 + 8 * v17);
        }
        unint64_t v2 = (unint64_t)v20;
        unint64_t v5 = Int.init(truncating:)();
        id v21 = objc_msgSend(v3, sel_interpretations);
        if (!v21) {
          break;
        }
        uint64_t v4 = v21;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASInterpretation);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v8 & 0xC000000000000001) != 0)
        {
          id v22 = (id)MEMORY[0x1CB78D7C0](v5, v8);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          if (v5 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_72;
          }
          id v22 = *(id *)(v8 + 8 * v5 + 32);
        }
        id v23 = v22;
        swift_bridgeObjectRelease();
        unint64_t v8 = (unint64_t)objc_msgSend(v23, sel_tokens);

        if (!v8) {
          goto LABEL_93;
        }
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASToken);
        unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v5 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v4 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v66 = (void *)v2;
        unint64_t v67 = v19;
        uint64_t v68 = v3;
        if (v4)
        {
          uint64_t v24 = 4;
          uint64_t v3 = v18;
          while (1)
          {
            unint64_t v8 = v24 - 4;
            if ((v5 & 0xC000000000000001) != 0) {
              id v25 = (id)MEMORY[0x1CB78D7C0](v24 - 4, v5);
            }
            else {
              id v25 = *(id *)(v5 + 8 * v24);
            }
            unint64_t v2 = (unint64_t)v25;
            uint64_t v26 = (void *)(v24 - 3);
            if (__OFADD__(v8, 1))
            {
              __break(1u);
LABEL_70:
              __break(1u);
              goto LABEL_71;
            }
            if (objc_msgSend(v25, sel_removeSpaceBefore))
            {
              uint64_t v27 = v3[2];
              if (v27)
              {
                uint64_t v28 = &v3[2 * v27];
                BOOL v29 = v28[2] == 32 && v28[3] == 0xE100000000000000;
                if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                    uint64_t v3 = v46;
                  }
                  uint64_t v30 = v3[2];
                  if (!v30) {
                    goto LABEL_70;
                  }
                  v3[2] = v30 - 1;
                  swift_bridgeObjectRelease();
                }
              }
            }
            id v31 = objc_msgSend((id)v2, sel_text, v54, v55);
            if (!v31) {
              break;
            }
            Swift::String v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v35 = v34;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v3 = v43;
            }
            uint64_t v36 = v3;
            unint64_t v37 = v3[2];
            uint64_t v38 = v36;
            unint64_t v39 = v36[3] >> 1;
            unint64_t v40 = v37 + 1;
            if (v39 <= v37)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v38 = v44;
              unint64_t v39 = v44[3] >> 1;
            }
            v38[2] = v40;
            uint64_t v41 = &v38[2 * v37];
            v41[4] = v33;
            v41[5] = v35;
            unint64_t v8 = v37 + 2;
            if ((uint64_t)v39 < (uint64_t)(v37 + 2))
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v3 = v45;
            }
            else
            {
              uint64_t v3 = v38;
            }
            v3[2] = v8;
            uint64_t v42 = &v3[2 * v40];
            v42[4] = 32;
            v42[5] = 0xE100000000000000;

            ++v24;
            if (v26 == v4) {
              goto LABEL_58;
            }
          }
          __break(1u);
          break;
        }
        uint64_t v3 = v18;
LABEL_58:

        swift_bridgeObjectRelease();
        unint64_t v5 = v67;
        if (v67 == v63) {
          goto LABEL_68;
        }
        if (v65)
        {
          unint64_t v18 = v3;
          uint64_t v3 = (void *)MEMORY[0x1CB78D7C0](v67, v60);
          uint64_t v47 = v62;
        }
        else
        {
          uint64_t v47 = v62;
          if (v67 >= *(void *)(v57 + 16)) {
            goto LABEL_75;
          }
          unint64_t v18 = v3;
          uint64_t v3 = v56[v67];
        }
        if (__OFADD__(v67, 1)) {
          goto LABEL_73;
        }
        unint64_t v17 = v67;
        uint64_t v19 = v67 + 1;
        if (v67 == v47) {
          goto LABEL_85;
        }
      }
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    goto LABEL_85;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_86:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  uint64_t v49 = BidirectionalCollection<>.joined(separator:)();
  unint64_t v51 = v50;
  swift_bridgeObjectRelease();
  uint64_t v52 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000) == 0) {
    uint64_t v52 = v49 & 0xFFFFFFFFFFFFLL;
  }
  if (!v52)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    swift_allocError();
    *unint64_t v53 = 0xD000000000000028;
    v53[1] = 0x80000001C9DA3530;
    swift_willThrow();
  }
}

{
  specialized TopRecognitionExtractor.getTopRecognition(recognition:)(a1);
}

{
  void *v1;
  unint64_t v2;
  void *v3;
  void *v4;
  unint64_t v5;
  id v6;
  void *v7;
  unint64_t v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  void *v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  void *v38;
  unint64_t v39;
  unint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  unint64_t v69;
  void *v70;

  uint64_t v4 = v1;
  unint64_t v5 = (unint64_t)a1;
  id v6 = objc_msgSend(a1, sel_utterances);
  if (!v6) {
    goto LABEL_78;
  }
  id v7 = v6;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASUtterance);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v9 = *(void **)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v9) {
      goto LABEL_4;
    }
    goto LABEL_77;
  }
LABEL_76:
  OUTLINED_FUNCTION_23_2();
  uint64_t v9 = (void *)_CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_77:
    swift_bridgeObjectRelease();
LABEL_78:
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_31(v48, v49);
    return;
  }
LABEL_4:
  if ((v8 & 0xC000000000000001) != 0)
  {
    id v10 = (id)MEMORY[0x1CB78D7C0](0, v8);
  }
  else
  {
    if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_81;
    }
    id v10 = *(id *)(v8 + 32);
  }
  uint64_t v9 = v10;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend((id)v5, sel_phrases);
  if (!v11)
  {
LABEL_94:
    __break(1u);
    goto LABEL_95;
  }
  uint64_t v12 = v11;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASPhrase);
  unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  id v13 = objc_msgSend(v9, sel_interpretationIndices);
  if (!v13)
  {
LABEL_95:
    __break(1u);
    return;
  }
  unint64_t v5 = (unint64_t)v13;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for NSNumber);
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v8 >> 62))
  {
    uint64_t v14 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
    goto LABEL_11;
  }
LABEL_81:
  OUTLINED_FUNCTION_23_2();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
LABEL_11:
  uint64_t v56 = v4;
  uint64_t v57 = v9;
  if (v14)
  {
    unint64_t v67 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v15 = (void *)MEMORY[0x1CB78D7C0](0, v8);
    }
    else
    {
      if (!*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_84;
      }
      uint64_t v15 = *(id *)(v8 + 32);
    }
    uint64_t v3 = v15;
    if (!(v2 >> 62))
    {
      uint64_t v16 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v16) {
        goto LABEL_17;
      }
LABEL_85:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_86;
    }
LABEL_84:
    swift_bridgeObjectRetain();
    uint64_t v16 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_17:
      unint64_t v17 = 0;
      uint64_t v66 = v2 & 0xC000000000000001;
      uint64_t v62 = v8;
      uint64_t v63 = v2;
      unint64_t v60 = v2 + 32;
      unint64_t v61 = v2 & 0xFFFFFFFFFFFFFF8;
      unint64_t v58 = (id *)(v8 + 32);
      uint64_t v59 = v8 & 0xFFFFFFFFFFFFFF8;
      unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
      uint64_t v19 = 1;
      unint64_t v64 = v16;
      unint64_t v65 = v14;
      while (1)
      {
        if (v66)
        {
          id v20 = (id)MEMORY[0x1CB78D7C0](v17, v63);
        }
        else
        {
          if (v17 >= *(void *)(v61 + 16)) {
            goto LABEL_74;
          }
          id v20 = *(id *)(v60 + 8 * v17);
        }
        unint64_t v2 = (unint64_t)v20;
        unint64_t v5 = Int.init(truncating:)();
        id v21 = objc_msgSend(v3, sel_interpretations);
        if (!v21) {
          break;
        }
        uint64_t v4 = v21;
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASInterpretation);
        unint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if ((v8 & 0xC000000000000001) != 0)
        {
          id v22 = (id)MEMORY[0x1CB78D7C0](v5, v8);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
LABEL_71:
            __break(1u);
LABEL_72:
            __break(1u);
LABEL_73:
            __break(1u);
LABEL_74:
            __break(1u);
LABEL_75:
            __break(1u);
            goto LABEL_76;
          }
          if (v5 >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_72;
          }
          id v22 = *(id *)(v8 + 8 * v5 + 32);
        }
        id v23 = v22;
        swift_bridgeObjectRelease();
        unint64_t v8 = (unint64_t)objc_msgSend(v23, sel_tokens);

        if (!v8) {
          goto LABEL_93;
        }
        type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASToken);
        unint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v5 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v4 = (void *)_CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v4 = *(void **)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v68 = (void *)v2;
        uint64_t v69 = v19;
        uint64_t v70 = v3;
        if (v4)
        {
          uint64_t v24 = 4;
          uint64_t v3 = v18;
          while (1)
          {
            unint64_t v8 = v24 - 4;
            if ((v5 & 0xC000000000000001) != 0) {
              id v25 = (id)MEMORY[0x1CB78D7C0](v24 - 4, v5);
            }
            else {
              id v25 = *(id *)(v5 + 8 * v24);
            }
            unint64_t v2 = (unint64_t)v25;
            uint64_t v26 = (void *)(v24 - 3);
            if (__OFADD__(v8, 1))
            {
              __break(1u);
LABEL_70:
              __break(1u);
              goto LABEL_71;
            }
            if (objc_msgSend(v25, sel_removeSpaceBefore))
            {
              uint64_t v27 = v3[2];
              if (v27)
              {
                uint64_t v28 = &v3[2 * v27];
                BOOL v29 = v28[2] == 32 && v28[3] == 0xE100000000000000;
                if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                {
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  {
                    specialized _ArrayBuffer._consumeAndCreateNew()();
                    uint64_t v3 = v46;
                  }
                  uint64_t v30 = v3[2];
                  if (!v30) {
                    goto LABEL_70;
                  }
                  v3[2] = v30 - 1;
                  swift_bridgeObjectRelease();
                }
              }
            }
            id v31 = objc_msgSend((id)v2, sel_text, v56, v57);
            if (!v31) {
              break;
            }
            Swift::String v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v35 = v34;

            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              OUTLINED_FUNCTION_22_2();
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v3 = v43;
            }
            uint64_t v36 = v3;
            unint64_t v37 = v3[2];
            uint64_t v38 = v36;
            unint64_t v39 = v36[3] >> 1;
            unint64_t v40 = v37 + 1;
            if (v39 <= v37)
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v38 = v44;
              unint64_t v39 = v44[3] >> 1;
            }
            v38[2] = v40;
            uint64_t v41 = &v38[2 * v37];
            v41[4] = v33;
            v41[5] = v35;
            unint64_t v8 = v37 + 2;
            if ((uint64_t)v39 < (uint64_t)(v37 + 2))
            {
              specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
              uint64_t v3 = v45;
            }
            else
            {
              uint64_t v3 = v38;
            }
            v3[2] = v8;
            uint64_t v42 = &v3[2 * v40];
            v42[4] = 32;
            v42[5] = 0xE100000000000000;

            ++v24;
            if (v26 == v4) {
              goto LABEL_58;
            }
          }
          __break(1u);
          break;
        }
        uint64_t v3 = v18;
LABEL_58:

        swift_bridgeObjectRelease();
        unint64_t v5 = v69;
        if (v69 == v65) {
          goto LABEL_68;
        }
        if (v67)
        {
          unint64_t v18 = v3;
          uint64_t v3 = (void *)MEMORY[0x1CB78D7C0](v69, v62);
          uint64_t v47 = v64;
        }
        else
        {
          uint64_t v47 = v64;
          if (v69 >= *(void *)(v59 + 16)) {
            goto LABEL_75;
          }
          unint64_t v18 = v3;
          uint64_t v3 = v58[v69];
        }
        if (__OFADD__(v69, 1)) {
          goto LABEL_73;
        }
        unint64_t v17 = v69;
        uint64_t v19 = v69 + 1;
        if (v69 == v47) {
          goto LABEL_85;
        }
      }
      __break(1u);
LABEL_93:
      __break(1u);
      goto LABEL_94;
    }
    goto LABEL_85;
  }
LABEL_68:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_86:
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  unint64_t v50 = BidirectionalCollection<>.joined(separator:)();
  uint64_t v52 = v51;
  swift_bridgeObjectRelease();
  unint64_t v53 = HIBYTE(v52) & 0xF;
  if ((v52 & 0x2000000000000000) == 0) {
    unint64_t v53 = v50 & 0xFFFFFFFFFFFFLL;
  }
  if (!v53)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError();
    OUTLINED_FUNCTION_3();
    OUTLINED_FUNCTION_32();
    OUTLINED_FUNCTION_31(v54, v55);
  }
}

uint64_t WordEmbeddingFeatureExtractor.nlTokenize(recognition:)(uint64_t a1)
{
  if (*(void *)(v1 + *(int *)(type metadata accessor for WordEmbeddingFeatureExtractor() + 20)))
  {
    swift_retain();
    dispatch thunk of ConfigurableAnalyzer.analyzeString(string:)();
    if (!v2)
    {
      uint64_t v5 = swift_retain();
      uint64_t v6 = specialized Sequence.filter(_:)(v5);
      a1 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12MorphunSwift5TokenVG_SSs5NeverOTg5083_s7SiriCam29WordEmbeddingFeatureExtractorV10nlTokenize11recognitionSaySSGSS_tKFSS12d6Swift5F54Vcfu_33_159891d7692f873338f9510e7a09688eAISSTf3nnnpk_nTf1cn_n(v6);
      swift_bridgeObjectRelease();
      swift_release();
    }
    swift_release();
  }
  else
  {
    lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError();
    OUTLINED_FUNCTION_3();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 3;
    swift_willThrow();
  }
  return a1;
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Token?);
  ((void (*)(void))MEMORY[0x1F4188790])();
  uint64_t v3 = (char *)v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Token();
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v5 = ((uint64_t (*)(void))MEMORY[0x1F4188790])();
  id v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v20 - v8;
  uint64_t v25 = a1;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  uint64_t v10 = type metadata accessor for TokenChain();
  id v11 = (void (*)(uint64_t))MEMORY[0x1E4F78F58];
  lazy protocol witness table accessor for type TokenChain and conformance TokenChain(&lazy protocol witness table cache variable for type TokenChain and conformance TokenChain, MEMORY[0x1E4F78F58]);
  dispatch thunk of Sequence.makeIterator()();
  uint64_t v12 = lazy protocol witness table accessor for type TokenChain and conformance TokenChain(&lazy protocol witness table cache variable for type TokenChain and conformance TokenChain, v11);
  uint64_t v23 = v10;
  dispatch thunk of IteratorProtocol.next()();
  if (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) != 1)
  {
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v22 + 32);
    uint64_t v15 = (void (**)(char *, uint64_t))(v22 + 8);
    v20[2] = v12;
    id v21 = v7;
    do
    {
      v14(v9, v3, v4);
      if (Token.isSignificant()())
      {
        v14(v7, v9, v4);
        uint64_t v16 = v24;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1);
          uint64_t v16 = v24;
        }
        unint64_t v18 = *(void *)(v16 + 16);
        unint64_t v17 = *(void *)(v16 + 24);
        if (v18 >= v17 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v17 > 1, v18 + 1, 1);
          uint64_t v16 = v24;
        }
        *(void *)(v16 + 16) = v18 + 1;
        unint64_t v19 = v16
            + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))
            + *(void *)(v22 + 72) * v18;
        id v7 = v21;
        v14((char *)v19, v21, v4);
        uint64_t v24 = v16;
      }
      else
      {
        (*v15)(v9, v4);
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (__swift_getEnumTagSinglePayload((uint64_t)v3, 1, v4) != 1);
  }
  swift_release();
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v3, &demangling cache variable for type metadata for Token?);
  return v24;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance WordEmbeddingFeatureExtractor()
{
  WordEmbeddingFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance WordEmbeddingFeatureExtractor(void **a1)
{
  return WordEmbeddingFeatureExtractor.extractImpl(from:)(*a1);
}

unint64_t lazy protocol witness table accessor for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError()
{
  unint64_t result = lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError;
  if (!lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WordEmbeddingFeatureExtractorError and conformance WordEmbeddingFeatureExtractorError);
  }
  return result;
}

unint64_t specialized Array._checkSubscript(_:wasNativeTypeChecked:)(unint64_t result, char a2, uint64_t a3)
{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)(a3 + 16) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

{
  if (a2)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > result)
    {
      return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t specialized ContiguousArray.init()()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t taskCreateFlags(priority:isChildTask:copyTaskLocals:inheritContext:enqueueJob:addPendingGroupTaskUnconditionally:isDiscardingTask:)(uint64_t a1, char a2, char a3, char a4, char a5, char a6, char a7)
{
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TaskPriority?(a1, (uint64_t)v16);
  uint64_t v17 = type metadata accessor for TaskPriority();
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v16, &demangling cache variable for type metadata for TaskPriority?);
    uint64_t result = 0;
    if ((a2 & 1) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    uint64_t result = v19;
    if ((a2 & 1) == 0)
    {
LABEL_3:
      if (a3) {
        goto LABEL_4;
      }
      goto LABEL_14;
    }
  }
  result |= 0x100uLL;
  if (a3)
  {
LABEL_4:
    result |= 0x400uLL;
    if ((a4 & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
LABEL_14:
  if ((a4 & 1) == 0)
  {
LABEL_5:
    if ((a5 & 1) == 0) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_15:
  result |= 0x800uLL;
  if (a5) {
LABEL_6:
  }
    result |= 0x1000uLL;
LABEL_7:
  if (a6) {
    result |= 0x2000uLL;
  }
  if (a7) {
    return result | 0x4000;
  }
  return result;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_1_10();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_10_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_3();
  return v3();
}

void specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()()
{
  uint64_t v1 = *v0;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v0 = v1;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    OUTLINED_FUNCTION_22_2();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
}

void specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(uint64_t a1)
{
  if (a1 + 1 > *(void *)(*(void *)v1 + 24) >> 1) {
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  }
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *v3;
  *(void *)(v4 + 16) = result + 1;
  uint64_t v5 = v4 + 16 * result;
  *(void *)(v5 + 32) = a2;
  *(void *)(v5 + 40) = a3;
  return result;
}

unint64_t lazy protocol witness table accessor for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError()
{
  unint64_t result = lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError;
  if (!lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TopRecogntionFeatureExtractorError and conformance TopRecogntionFeatureExtractorError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew()()
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t lazy protocol witness table accessor for type TokenChain and conformance TokenChain(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1C9D2AECC()
{
  uint64_t v1 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = v7 + *(void *)(v5 + 64);
  uint64_t v9 = v6 | 7;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v7, v1);
  return MEMORY[0x1F4186498](v0, v8, v9);
}

uint64_t partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)()
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(type metadata accessor for Locale() - 8);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = v0 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  return closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:)(v3, v5, v6, v7);
}

{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  OUTLINED_FUNCTION_14_3();
  OUTLINED_FUNCTION_1_10();
  uint64_t v1 = *v0;
  OUTLINED_FUNCTION_10_2();
  *uint64_t v2 = v1;
  swift_task_dealloc();
  OUTLINED_FUNCTION_12_3();
  return v3();
}

uint64_t sub_1C9D2B118()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA()
{
  OUTLINED_FUNCTION_25_0();
  uint64_t v3 = v2;
  uint64_t v4 = *(int **)(v0 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = partial apply for closure #1 in WordEmbeddingFeatureExtractor.loadNlEmbeddingsAssets(for:kickOffDownloads:);
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                              + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu);
  return v6(v3, v4);
}

uint64_t outlined init with copy of TaskPriority?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew()(uint64_t a1)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t getEnumTag for WordEmbeddingFeatureExtractorError(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for WordEmbeddingFeatureExtractorError(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WordEmbeddingFeatureExtractorError()
{
  return &type metadata for WordEmbeddingFeatureExtractorError;
}

uint64_t OUTLINED_FUNCTION_2_11()
{
  return v0;
}

void OUTLINED_FUNCTION_3_8()
{
  JUMPOUT(0x1CB78E290);
}

uint64_t OUTLINED_FUNCTION_7_5()
{
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t OUTLINED_FUNCTION_9_5()
{
  return v0;
}

void OUTLINED_FUNCTION_11_3(void *a1, NSObject *a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, a2, v4, a4, v5, 2u);
}

uint64_t OUTLINED_FUNCTION_12_3()
{
  return v0 + 8;
}

uint64_t OUTLINED_FUNCTION_13_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_16_1()
{
  return v0;
}

BOOL OUTLINED_FUNCTION_18_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

_WORD *OUTLINED_FUNCTION_19_2(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_20_2()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_22_2()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_23_2()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_2(uint64_t a1)
{
  *(void *)(v1 - 72) = a1;
  return v1 - 72;
}

void OUTLINED_FUNCTION_26_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_27(uint64_t a1)
{
  *(void *)(v1 - 88) = a1;
  return v1 - 88;
}

uint64_t OUTLINED_FUNCTION_29()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_31@<X0>(void *a1@<X1>, uint64_t a2@<X8>)
{
  *a1 = a2;
  a1[1] = (v2 - 32) | 0x8000000000000000;
  return swift_willThrow();
}

uint64_t destroy for CAARTrialEnrollment()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for CAARTrialEnrollment(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CAARTrialEnrollment(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void *assignWithTake for CAARTrialEnrollment(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for CAARTrialEnrollment(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 64))
    {
      int v2 = *(_DWORD *)a1 + 2147483646;
    }
    else
    {
      unint64_t v3 = *(void *)(a1 + 8);
      if (v3 >= 0xFFFFFFFF) {
        LODWORD(v3) = -1;
      }
      int v2 = v3 - 1;
      if (v2 < 0) {
        int v2 = -1;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CAARTrialEnrollment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CAARTrialEnrollment()
{
  return &type metadata for CAARTrialEnrollment;
}

uint64_t specialized Sequence<>.max()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  double v2 = *(double *)(a1 + 32);
  uint64_t v3 = v1 - 1;
  if (v1 != 1)
  {
    uint64_t v4 = (double *)(a1 + 40);
    do
    {
      double v5 = *v4++;
      double v6 = v5;
      if (v2 < v5) {
        double v2 = v6;
      }
      --v3;
    }
    while (v3);
  }
  return *(void *)&v2;
}

uint64_t specialized Sequence<>.max()(void *a1)
{
  uint64_t v1 = a1[2];
  if (!v1) {
    return 0;
  }
  uint64_t result = a1[4];
  uint64_t v4 = v1 - 1;
  if (v1 != 1)
  {
    double v5 = a1 + 5;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if (result <= v7) {
        uint64_t result = v6;
      }
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_Sis5NeverOTg503_s7d64Cam26DawnRankerFeatureExtractorV7actions13rankerContextACSayAA15fG71VG_AA0dI0VtcfcSiAGcfu_33_8226a15facd6e6e82cd0ea8a8c3738b3AGSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v10 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v10;
    uint64_t v4 = type metadata accessor for ActionCandidate();
    uint64_t v5 = a1
       + ((*(unsigned __int8 *)(*(void *)(v4 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80));
    uint64_t v6 = *(void *)(*(void *)(v4 - 8) + 72);
    do
    {
      uint64_t v7 = *(void *)(v5 + *(int *)(v4 + 24));
      unint64_t v8 = *(void *)(v10 + 16);
      if (v8 >= *(void *)(v10 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      v5 += v6;
      *(void *)(v10 + 16) = v8 + 1;
      *(void *)(v10 + 8 * v8 + 32) = v7;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_SDySSSo14MLFeatureValueCGsAE_pTg5(void (*a1)(uint64_t *__return_ptr, uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v17;
    uint64_t v8 = *(void *)(type metadata accessor for ActionCandidate() - 8);
    uint64_t v9 = a3 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    while (1)
    {
      a1(&v16, v9, &v15);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v11 = v16;
      uint64_t v17 = v6;
      unint64_t v12 = *(void *)(v6 + 16);
      if (v12 >= *(void *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = v17;
      }
      *(void *)(v6 + 16) = v12 + 1;
      *(void *)(v6 + 8 * v12 + 32) = v11;
      v9 += v10;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionVG_10Foundation4UUIDVs5NeverOTg503_s7d104Cam22CodeBasedRankerHandlerC29extractDisambiguationFeatures13rankedActions20siriSignalsContainerySayAA12fG97VGz_AA0aM10Containing_ptF10Foundation4UUIDVAHcfu_33_1cb444e52906099451ab9d686f8988b8AhMTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    v14[1] = v1;
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v17 = type metadata accessor for RankedAction();
    uint64_t v9 = a1
       + ((*(unsigned __int8 *)(*(void *)(v17 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v17 - 8) + 80));
    uint64_t v16 = *(void *)(*(void *)(v17 - 8) + 72);
    uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v14[2] = v4 + 32;
    uint64_t v15 = v10;
    do
    {
      v15(v6, v9 + *(int *)(v17 + 36), v3);
      uint64_t v18 = v8;
      unint64_t v12 = *(void *)(v8 + 16);
      unint64_t v11 = *(void *)(v8 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        uint64_t v8 = v18;
      }
      *(void *)(v8 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v12, v6, v3);
      v9 += v16;
      --v7;
    }
    while (v7);
  }
  return v8;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam0E5ParseOG_Sds5NeverOTg5(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v16 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v6 = v16;
    uint64_t v9 = *(void *)(type metadata accessor for CamParse(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    while (1)
    {
      a1(&v15, v10);
      if (v4) {
        break;
      }
      uint64_t v4 = 0;
      uint64_t v12 = v15;
      uint64_t v16 = v6;
      unint64_t v13 = *(void *)(v6 + 16);
      if (v13 >= *(void *)(v6 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = v16;
      }
      *(void *)(v6 + 16) = v13 + 1;
      *(void *)(v6 + 8 * v13 + 32) = v12;
      v10 += v11;
      if (!--v5) {
        return v6;
      }
    }
    swift_release();
  }
  return v6;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Sd7elementtG_Sis5NeverOTg5231_s7SiriCam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5ParseOG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFS2i6offset_Sd7elementt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960SiAT_SdAUtSiTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v8 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t result = v8;
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v6 = *v4;
      v4 += 2;
      uint64_t v5 = v6;
      uint64_t v9 = result;
      unint64_t v7 = *(void *)(result + 16);
      if (v7 >= *(void *)(result + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t result = v9;
      }
      *(void *)(result + 16) = v7 + 1;
      *(void *)(result + 8 * v7 + 32) = v5;
      --v2;
    }
    while (v2);
  }
  return result;
}

void _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SiriCam0E5ParseOs5NeverOTg503_s7d94Cam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5F49OG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFALSiXEfU0_SayAIGTf1cn_n(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamParse(0);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    unint64_t v7 = (unint64_t *)(a1 + 32);
    while (1)
    {
      unint64_t v9 = *v7++;
      unint64_t v8 = v9;
      if ((v9 & 0x8000000000000000) != 0) {
        break;
      }
      if (v8 >= *(void *)(a2 + 16)) {
        goto LABEL_11;
      }
      uint64_t v10 = v5;
      outlined init with copy of RankedAction();
      unint64_t v12 = *(void *)(v13 + 16);
      unint64_t v11 = *(void *)(v13 + 24);
      if (v12 >= v11 >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
      }
      *(void *)(v13 + 16) = v12 + 1;
      outlined init with take of CamModelMetadata();
      --v6;
      uint64_t v5 = v10;
      if (!v6) {
        goto LABEL_8;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
  }
  else
  {
LABEL_8:
    swift_bridgeObjectRelease();
  }
}

void specialized Sequence.filter(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a4;
  uint64_t v43 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v6);
  unint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (char *)&v32 - v10;
  if (a1 == a2)
  {
    uint64_t v34 = MEMORY[0x1E4FBC860];
LABEL_3:
    swift_bridgeObjectRelease();
    return;
  }
  if (a2 >= a1)
  {
    uint64_t v41 = v43 + 56;
    uint64_t v42 = (void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    unint64_t v11 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v34 = MEMORY[0x1E4FBC860];
    unint64_t v12 = a1;
    uint64_t v36 = a1;
    uint64_t v37 = a2;
    do
    {
      uint64_t v13 = v12;
      unint64_t v35 = v12;
      while (1)
      {
        if (v13 < a1)
        {
          __break(1u);
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        unint64_t v14 = v12;
        if ((uint64_t)v12 >= a2) {
          goto LABEL_25;
        }
        if (v13 < 0) {
          goto LABEL_26;
        }
        uint64_t v15 = *v38;
        if (v12 >= *(void *)(*v38 + 16)) {
          goto LABEL_27;
        }
        unint64_t v40 = v12 + 1;
        uint64_t v16 = type metadata accessor for RankedAction();
        uint64_t v17 = *(void *)(v16 - 8);
        uint64_t v18 = v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
        uint64_t v19 = *(void *)(v17 + 72);
        unint64_t v39 = v14;
        uint64_t v20 = *v42;
        (*v42)(v44, v18 + v19 * v14 + *(int *)(v16 + 36), v6);
        if (*(void *)(v43 + 16))
        {
          uint64_t v21 = v43;
          lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
          uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)();
          uint64_t v23 = -1 << *(unsigned char *)(v21 + 32);
          unint64_t v24 = v22 & ~v23;
          if ((*(void *)(v41 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24)) {
            break;
          }
        }
LABEL_16:
        (*v11)(v44, v6);
        a1 = v36;
        a2 = v37;
        unint64_t v12 = v40;
        uint64_t v13 = v35;
        if (v40 == v37) {
          goto LABEL_3;
        }
      }
      uint64_t v25 = ~v23;
      uint64_t v26 = *(void *)(v33 + 72);
      while (1)
      {
        v20(v9, *(void *)(v43 + 48) + v26 * v24, v6);
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        char v27 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v28 = *v11;
        (*v11)(v9, v6);
        if (v27) {
          break;
        }
        unint64_t v24 = (v24 + 1) & v25;
        if (((*(void *)(v41 + ((v24 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v24) & 1) == 0) {
          goto LABEL_16;
        }
      }
      v28(v44, v6);
      uint64_t v29 = v34;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v45 = v29;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v29 = v45;
      }
      a1 = v36;
      unint64_t v31 = *(void *)(v29 + 16);
      if (v31 >= *(void *)(v29 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v29 = v45;
      }
      *(void *)(v29 + 16) = v31 + 1;
      uint64_t v34 = v29;
      *(void *)(v29 + 8 * v31 + 32) = v39;
      a2 = v37;
      unint64_t v12 = v40;
    }
    while (v40 != v37);
    goto LABEL_3;
  }
LABEL_28:
  __break(1u);
}

uint64_t one-time initialization function for postRankLoggingQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.background.getter();
  v7[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static CodeBasedRankerHandler.postRankLoggingQueue = result;
  return result;
}

uint64_t CodeBasedRankerHandler.init(scorer:tieBreakerChain:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of SignalProviding(a1, v2 + 16);
  *(void *)(v2 + 104) = a2;
  *(void *)(v2 + 56) = 0xD000000000000011;
  *(void *)(v2 + 64) = 0x80000001C9DA3720;
  CamModelVersion.init(_:)();
  if (v3)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(v2 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for CodeBasedRankerHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    int v10 = v6;
    int v11 = v7;
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    unint64_t v14 = HIDWORD(v6);
    __swift_destroy_boxed_opaque_existential_1(a1);
    *(_DWORD *)(v2 + 72) = v10;
    *(_DWORD *)(v2 + 76) = v14;
    *(_DWORD *)(v2 + 80) = v11;
    *(void *)(v2 + 88) = v12;
    *(void *)(v2 + 96) = v13;
  }
  return v2;
}

void CodeBasedRankerHandler.rank(requestId:caarId:rcId:actions:rankerContext:)()
{
  OUTLINED_FUNCTION_11_2();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v13 - 8);
  OUTLINED_FUNCTION_18_3();
  uint64_t v14 = type metadata accessor for UUID();
  __swift_storeEnumTagSinglePayload((uint64_t)v0, 1, 1, v14);
  CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(v12, v10, v8, v6, v0, v4, v2);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v0, &demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_3_5();
}

uint64_t CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v214 = a7;
  OUTLINED_FUNCTION_30_0();
  uint64_t v201 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_2();
  uint64_t v200 = v13;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_15_3(v15);
  uint64_t v199 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_2();
  uint64_t v198 = v16;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_7_6();
  uint64_t v196 = v18;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v20 = OUTLINED_FUNCTION_0_4(v19);
  uint64_t v192 = v21;
  MEMORY[0x1F4188790](v20);
  uint64_t v193 = v22;
  OUTLINED_FUNCTION_15_3((uint64_t)&v183 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v195 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v194 = v23;
  uint64_t v25 = MEMORY[0x1F4188790](v24);
  v204 = (char *)&v183 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v191 = v26;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_15_3((uint64_t)&v183 - v27);
  uint64_t v218 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_2();
  uint64_t v203 = v28;
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_5_2();
  uint64_t v221 = v30;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v31);
  OUTLINED_FUNCTION_10_0();
  *(void *)&long long v220 = v32;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v33);
  unint64_t v35 = (char *)&v183 - v34;
  uint64_t v217 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v216 = v36;
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_5_2();
  uint64_t v202 = v38;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_10_0();
  uint64_t v206 = v40;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v41);
  OUTLINED_FUNCTION_10_0();
  uint64_t v207 = v42;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_40();
  MEMORY[0x1F4188790](v44);
  uint64_t v46 = (char *)&v183 - v45;
  uint64_t v209 = v7;
  uint64_t v212 = a3;
  v213 = (void (*)(void, void))a4;
  uint64_t v210 = v8;
  v211 = a5;
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v7, a3, a4, v8, a5);
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  id v47 = (id)static Log.ranker;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  v215 = v46;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  id v48 = v47;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_38();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v49 = v219;
  CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)();
  uint64_t v51 = v9;
  if (v49)
  {
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v216 + 8);
    uint64_t v53 = v217;
    v52(v9, v217);
    static os_signpost_type_t.end.getter();
    unint64_t v58 = v215;
    os_signpost(_:dso:log:name:signpostID:)();
    v52((uint64_t)v58, v53);
    id v59 = v49;
    CamResponseStatusCode.init(fromError:)(v49, (char *)&aBlock);
    specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(aBlock, v209, v212, (unint64_t)v213, v210, v211);
    swift_willThrow();
  }
  else
  {
    uint64_t v54 = v50;
    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_38();
    os_signpost(_:dso:log:name:signpostID:)();
    id v55 = v48;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v56 = OUTLINED_FUNCTION_54();
    uint64_t v57 = swift_bridgeObjectRetain();
    uint64_t v61 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SiriCam15ActionCandidateVGSaySDySSSo14MLFeatureValueCGGG_AH06RankedH0VsAE_pTg503_s7f5Cam15hi10VSDySSSo14jk6CGAA06l5C0Vs5C33_pIgngrzo_AC_AFtAHsAI_pIegnrzr_TRAjnRsAE_pIgngrzo_Tf1cn_n(v57, v54, (void (*)(char *, uint64_t))partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:), v208);
    uint64_t v214 = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t aBlock = v61;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(&aBlock, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew());
    uint64_t v188 = 0;
    uint64_t v62 = (uint64_t *)(v214 + 16);
    swift_bridgeObjectRelease();
    v190 = v62;
    *uint64_t v62 = aBlock;
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    uint64_t v64 = __swift_project_value_buffer(v63, (uint64_t)static Logger.ranker);
    swift_retain_n();
    v219 = (void *)v64;
    unint64_t v65 = Logger.logObject.getter();
    int v66 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v65, (os_log_type_t)v66))
    {
      LODWORD(v187) = v66;
      unint64_t v67 = (uint8_t *)swift_slowAlloc();
      uint64_t v186 = swift_slowAlloc();
      uint64_t aBlock = v186;
      *(_DWORD *)unint64_t v67 = 136315138;
      OUTLINED_FUNCTION_23_3();
      uint64_t v68 = *(void *)(*(void *)specialized Array._endMutation() + 16);
      uint64_t v69 = MEMORY[0x1E4FBC860];
      if (v68)
      {
        v185 = v67;
        v184 = v65;
        uint64_t v230 = MEMORY[0x1E4FBC860];
        swift_bridgeObjectRetain();
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        OUTLINED_FUNCTION_8_6();
        uint64_t v71 = *(void *)specialized Array._endMutation() + v70;
        uint64_t v73 = *(void *)(v72 + 72);
        uint64_t v69 = v230;
        do
        {
          outlined init with copy of RankedAction();
          uint64_t v74 = *(void *)&v35[*(int *)(v218 + 28)];
          outlined destroy of RankedAction((uint64_t)v35, (void (*)(void))type metadata accessor for RankedAction);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v69 = v230;
          }
          unint64_t v75 = *(void *)(v69 + 16);
          if (v75 >= *(void *)(v69 + 24) >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            uint64_t v69 = v230;
          }
          *(void *)(v69 + 16) = v75 + 1;
          *(void *)(v69 + 8 * v75 + 32) = v74;
          v71 += v73;
          --v68;
        }
        while (v68);
        swift_bridgeObjectRelease();
        unint64_t v65 = v184;
        unint64_t v67 = v185;
      }
      uint64_t v76 = MEMORY[0x1CB78D400](v69, MEMORY[0x1E4FBB3D0]);
      unint64_t v35 = v77;
      swift_bridgeObjectRelease();
      uint64_t v230 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, (unint64_t)v35, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v65, (os_log_type_t)v187, "Ranking generated scores %s", v67, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.info.getter();
    BOOL v80 = os_log_type_enabled(v78, v79);
    uint64_t v81 = v218;
    if (v80)
    {
      unint64_t v35 = (char *)swift_slowAlloc();
      *(_DWORD *)unint64_t v35 = 67109120;
      BOOL v82 = (OUTLINED_FUNCTION_48() & 1) != 0 && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0;
      LODWORD(aBlock) = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C9CFE000, v78, v79, "Dawn AppShortcuts experience enabled=%{BOOL}d", (uint8_t *)v35, 8u);
      OUTLINED_FUNCTION_2_2();
    }

    OUTLINED_FUNCTION_23_3();
    v83.Class isa = v78->isa;
    unint64_t v84 = *((void *)v78->isa + 2);
    if (v84 >= 2)
    {
      OUTLINED_FUNCTION_8_6();
      unint64_t v35 = (char *)v83.isa + v86;
      uint64_t v88 = *(void *)(v87 + 72);
      swift_bridgeObjectRetain();
      uint64_t v89 = 1;
      while (1)
      {
        uint64_t v90 = v220;
        outlined init with copy of RankedAction();
        uint64_t v91 = *(void *)(v90 + *(int *)(v81 + 44));
        if (*(void *)(v91 + 16)
          && (unint64_t v92 = specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48),
              (v93 & 1) != 0))
        {
          id v94 = objc_msgSend(*(id *)(*(void *)(v91 + 56) + 8 * v92), sel_int64Value);
          outlined destroy of RankedAction(v220, (void (*)(void))type metadata accessor for RankedAction);
          if (v94)
          {
            char v85 = 0;
            goto LABEL_39;
          }
        }
        else
        {
          outlined destroy of RankedAction(v220, (void (*)(void))type metadata accessor for RankedAction);
        }
        if (v84 == v89) {
          break;
        }
        v35 += v88;
        if (__OFADD__(v89++, 1))
        {
          __break(1u);
          break;
        }
      }
      char v85 = 1;
LABEL_39:
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_43();
    }
    else
    {
      char v85 = 1;
      OUTLINED_FUNCTION_43();
    }
    uint64_t v218 = OUTLINED_FUNCTION_54();
    unint64_t v96 = (uint64_t *)(v218 + 16);
    char v97 = OUTLINED_FUNCTION_48();
    uint64_t v189 = v51;
    *(void *)&long long v220 = v96;
    if ((v97 & 1) != 0 && !(v85 & 1 | ((CamFeatureFlag.isEnabled.getter(5u) & 1) == 0)))
    {
      id v127 = (id)static Log.ranker;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_38();
      os_signpost(_:dso:log:name:signpostID:)();
      type metadata accessor for SiriSignalsContainer();
      uint64_t v128 = OUTLINED_FUNCTION_54();
      type metadata accessor for SignalValue();
      *(void *)(v128 + 16) = Dictionary.init(dictionaryLiteral:)();
      SiriSignalsContainer.refreshSignals()();
      uint64_t v129 = v190;
      swift_beginAccess();
      swift_retain();
      specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(v129, v128);
      specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(v129, v128);
      swift_endAccess();
      uint64_t v187 = v128;
      swift_release();
      uint64_t v130 = (void *)static Log.ranker;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_38();
      os_signpost(_:dso:log:name:signpostID:)();
      id v131 = v130;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_42();
      OUTLINED_FUNCTION_39();
      uint64_t v132 = *((void *)v35 + 13);
      uint64_t v133 = swift_bridgeObjectRetain();
      uint64_t v134 = Array<A>.execute(_:)(v133, v132);
      uint64_t v186 = v135;
      swift_bridgeObjectRelease();
      *unint64_t v96 = v134;
      uint64_t v136 = v188;
      specialized MutableCollection<>.sort(by:)(v96, specialized _ArrayBuffer._consumeAndCreateNew());
      v190 = (uint64_t *)v136;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_39();
      if (one-time initialization token for postRankLoggingQueue != -1) {
        swift_once();
      }
      uint64_t v188 = static CodeBasedRankerHandler.postRankLoggingQueue;
      uint64_t v137 = v194;
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_56();
      ((void (*)(void))v96)();
      OUTLINED_FUNCTION_52();
      OUTLINED_FUNCTION_56();
      uint64_t v138 = ((uint64_t (*)(void))v96)();
      OUTLINED_FUNCTION_41(v138, v139, &demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_17_2();
      unint64_t v141 = v140 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v143 = (v142 + (v140 & 0xFFFFFFFFFFFFFFF8) + 16) & ~v142;
      OUTLINED_FUNCTION_53();
      unint64_t v146 = (v144 + v143) & ~v145;
      OUTLINED_FUNCTION_51();
      unint64_t v148 = (v147 + v146 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v149 = swift_allocObject();
      uint64_t v150 = v218;
      *(void *)(v149 + 16) = v208;
      *(void *)(v149 + 24) = v150;
      v151 = *(void (**)(void))(v137 + 32);
      OUTLINED_FUNCTION_32_0();
      v151();
      v152 = (void *)(v149 + v141);
      v153 = v213;
      void *v152 = v212;
      v152[1] = v153;
      OUTLINED_FUNCTION_32_0();
      v151();
      outlined init with take of (UUID, [String : MLFeatureValue])(v205, v149 + v146, &demangling cache variable for type metadata for UUID?);
      *(void *)(v149 + v148) = v186;
      v228 = partial apply for closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:);
      uint64_t v229 = v149;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v225 = 1107296256;
      v226 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v227 = &block_descriptor_26;
      v154 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v155 = v196;
      static DispatchQoS.unspecified.getter();
      uint64_t v222 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v156 = v197;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1CB78D610](0, v155, v156, v154);
      _Block_release(v154);
      swift_release();
      OUTLINED_FUNCTION_18_1();
      v157();
      uint64_t v158 = OUTLINED_FUNCTION_11_4();
      v159(v158);
      v160 = *(void (**)(void))(v216 + 8);
      OUTLINED_FUNCTION_49();
      v160();
      v213 = (void (*)(void, void))v160;
      OUTLINED_FUNCTION_49();
      v160();
      swift_release();
    }
    else
    {
      id v98 = (id)static Log.ranker;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_21_2();
      uint64_t v99 = *((void *)v35 + 13);
      uint64_t v100 = swift_bridgeObjectRetain();
      uint64_t v101 = Array<A>.execute(_:)(v100, v99);
      uint64_t v187 = v102;
      swift_bridgeObjectRelease();
      *unint64_t v96 = v101;
      uint64_t v103 = v188;
      specialized MutableCollection<>.sort(by:)(v96, specialized _ArrayBuffer._consumeAndCreateNew());
      v190 = (uint64_t *)v103;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_21_2();
      if (one-time initialization token for postRankLoggingQueue != -1) {
        swift_once();
      }
      uint64_t v202 = static CodeBasedRankerHandler.postRankLoggingQueue;
      uint64_t v104 = v194;
      OUTLINED_FUNCTION_16_2();
      OUTLINED_FUNCTION_56();
      ((void (*)(void))&value witness table for UserHistoryTieBreaker.flags)();
      OUTLINED_FUNCTION_52();
      OUTLINED_FUNCTION_56();
      uint64_t v105 = ((uint64_t (*)(void))&value witness table for UserHistoryTieBreaker.flags)();
      OUTLINED_FUNCTION_41(v105, v106, &demangling cache variable for type metadata for UUID?);
      OUTLINED_FUNCTION_17_2();
      unint64_t v108 = v107 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v110 = (v109 + (v107 & 0xFFFFFFFFFFFFFFF8) + 16) & ~v109;
      OUTLINED_FUNCTION_53();
      unint64_t v113 = (v111 + v110) & ~v112;
      OUTLINED_FUNCTION_51();
      unint64_t v115 = (v114 + v113 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v116 = swift_allocObject();
      uint64_t v117 = v208;
      *(void *)(v116 + 16) = v214;
      *(void *)(v116 + 24) = v117;
      v118 = *(void (**)(void))(v104 + 32);
      OUTLINED_FUNCTION_31_0();
      v118();
      uint64_t v119 = (void *)(v116 + v108);
      uint64_t v120 = v213;
      *uint64_t v119 = v212;
      v119[1] = v120;
      OUTLINED_FUNCTION_31_0();
      v118();
      outlined init with take of (UUID, [String : MLFeatureValue])(v205, v116 + v113, &demangling cache variable for type metadata for UUID?);
      *(void *)(v116 + v115) = v187;
      v228 = partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:);
      uint64_t v229 = v116;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v225 = 1107296256;
      v226 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      v227 = &block_descriptor_0;
      uint64_t v121 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v122 = v196;
      static DispatchQoS.unspecified.getter();
      uint64_t v222 = MEMORY[0x1E4FBC860];
      lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      uint64_t v123 = v197;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1CB78D610](0, v122, v123, v121);
      _Block_release(v121);
      OUTLINED_FUNCTION_18_1();
      v124();
      uint64_t v125 = OUTLINED_FUNCTION_11_4();
      v126(v125);
      v213 = *(void (**)(void, void))(v216 + 8);
      v213(v206, v217);
      swift_release();
      uint64_t v51 = v189;
    }
    uint64_t v161 = v218;
    swift_retain();
    v162 = Logger.logObject.getter();
    os_log_type_t v163 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v162, v163))
    {
      v164 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v164 = 134217984;
      uint64_t v165 = v220;
      swift_beginAccess();
      uint64_t aBlock = *(void *)(*(void *)(v161 + 16) + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1C9CFE000, v162, v163, "Returning %ld ranked actions", v164, 0xCu);
      OUTLINED_FUNCTION_2_2();

      v166 = v215;
      uint64_t v167 = v221;
      v168 = specialized Array._endMutation();
    }
    else
    {

      swift_release();
      v166 = v215;
      uint64_t v167 = v221;
      v168 = specialized Array._endMutation();
      uint64_t v165 = v220;
    }
    swift_beginAccess();
    uint64_t v169 = *(void *)(*(void *)v165 + 16);
    if (v169)
    {
      OUTLINED_FUNCTION_8_6();
      uint64_t v172 = v170 + v171;
      uint64_t v174 = *(void *)(v173 + 72);
      uint64_t v212 = v170;
      swift_bridgeObjectRetain();
      *(void *)&long long v175 = *((void *)v168 + 504);
      long long v220 = v175;
      do
      {
        outlined init with copy of RankedAction();
        v176 = Logger.logObject.getter();
        os_log_type_t v177 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v176, v177))
        {
          uint64_t v178 = swift_slowAlloc();
          uint64_t v223 = swift_slowAlloc();
          *(_DWORD *)uint64_t v178 = v220;
          uint64_t v179 = RankedAction.description.getter();
          *(void *)(v178 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v179, v180, &v223);
          swift_bridgeObjectRelease();
          outlined destroy of RankedAction(v221, (void (*)(void))type metadata accessor for RankedAction);
          _os_log_impl(&dword_1C9CFE000, v176, v177, "%s", (uint8_t *)v178, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          uint64_t v167 = v221;
          OUTLINED_FUNCTION_2_2();
        }
        else
        {

          outlined destroy of RankedAction(v167, (void (*)(void))type metadata accessor for RankedAction);
        }
        v172 += v174;
        --v169;
      }
      while (v169);
      swift_bridgeObjectRelease();
      v166 = v215;
      uint64_t v51 = v189;
    }
    uint64_t v181 = OUTLINED_FUNCTION_50();
    v182 = v213;
    ((void (*)(uint64_t))v213)(v181);
    v182(v51, v169);
    swift_bridgeObjectRetain();
    swift_release();
    swift_release();
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
    v182((uint64_t)v166, v169);
  }
  return OUTLINED_FUNCTION_22_3();
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, NSObject *a5)
{
  uint64_t v160 = a1;
  os_log_t v161 = a5;
  uint64_t v158 = a4;
  uint64_t v159 = a2;
  unint64_t v163 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v8 = (char *)&v148 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v150 = (uint64_t)&v148 - v10;
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v149 = (uint64_t)&v148 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v152 = (uint64_t)&v148 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  v157 = (char *)&v148 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  v151 = (char *)&v148 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v148 - v20;
  uint64_t v22 = MEMORY[0x1F4188790](v19);
  uint64_t v155 = (char **)((char *)&v148 - v23);
  uint64_t v24 = MEMORY[0x1F4188790](v22);
  uint64_t v156 = (char *)&v148 - v25;
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v148 - v26;
  uint64_t v164 = type metadata accessor for UUID();
  uint64_t v162 = *(void *)(v164 - 8);
  uint64_t v28 = MEMORY[0x1F4188790](v164);
  v153 = (char *)&v148 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  unint64_t v148 = (char *)&v148 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v148 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v148 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v148 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v148 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v46 = (char *)&v148 - v45;
  MEMORY[0x1F4188790](v44);
  id v48 = (char *)&v148 - v47;
  id v49 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01B0]), sel_init);
  if (v49)
  {
    uint64_t v50 = v49;
    objc_msgSend(v49, sel_setExists_, 1);
    id v154 = v50;
    uint64_t v51 = (char *)static CaarRequestLogger.wrapIntoLogEvent(message:)((uint64_t)v50);
    if (v51)
    {
      uint64_t v52 = v51;
      id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
      uint64_t v156 = v52;
      if (v53)
      {
        uint64_t v54 = v53;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        id v55 = *(char ***)(v162 + 16);
        uint64_t v56 = v164;
        ((void (*)(char *, uint64_t, uint64_t))v55)(v40, v160, v164);
        id v57 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v54, sel_setCaarId_, v57);

        unint64_t v58 = (void *)MEMORY[0x1CB78D210](v159, v163);
        objc_msgSend(v54, sel_setResultCandidateId_, v58);

        objc_msgSend(v54, sel_setRequestId_, 0);
        if (AFDeviceSupportsSAE())
        {
          ((void (*)(char *, uint64_t, uint64_t))v55)(v40, v158, v56);
          id v59 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v54, sel_setSubRequestId_, v59);
        }
        outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v21, &demangling cache variable for type metadata for UUID?);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v21, 1, v56);
        uint64_t v155 = v55;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v21, &demangling cache variable for type metadata for UUID?);
          uint64_t v61 = (uint64_t)v151;
          UUID.init(uuidString:)();
          uint64_t v62 = v56;
          if (__swift_getEnumTagSinglePayload(v61, 1, v56) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v61, &demangling cache variable for type metadata for UUID?);
            uint64_t v63 = v162;
          }
          else
          {
            uint64_t v121 = v162;
            uint64_t v122 = v148;
            (*(void (**)(char *, uint64_t, uint64_t))(v162 + 32))(v148, v61, v62);
            ((void (*)(char *, char *, uint64_t))v55)(v40, v122, v62);
            id v123 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v54, sel_setTrpId_, v123);

            uint64_t v63 = v121;
            (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v62);
          }
        }
        else
        {
          uint64_t v63 = v162;
          (*(void (**)(char *, char *, uint64_t))(v162 + 32))(v34, v21, v56);
          ((void (*)(char *, char *, uint64_t))v55)(v40, v34, v56);
          id v118 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v54, sel_setTrpId_, v118);

          (*(void (**)(char *, uint64_t))(v63 + 8))(v34, v56);
          uint64_t v62 = v56;
        }
        id v124 = v156;
        uint64_t v125 = v153;
        objc_msgSend(v156, sel_setEventMetadata_, v54);
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v124);
        swift_unknownObjectRelease();
        unint64_t v126 = v163;
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v127 = type metadata accessor for Logger();
        __swift_project_value_buffer(v127, (uint64_t)static Logger.common);
        ((void (*)(char *, uint64_t, uint64_t))v155)(v125, v160, v62);
        uint64_t v128 = (uint64_t)v157;
        outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v157, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        uint64_t v129 = Logger.logObject.getter();
        int v130 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v129, (os_log_type_t)v130))
        {
          LODWORD(v162) = v130;
          uint64_t v131 = swift_slowAlloc();
          os_log_t v161 = (os_log_t)swift_slowAlloc();
          v166[0] = (uint64_t)v161;
          *(_DWORD *)uint64_t v131 = 136315906;
          uint64_t v165 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
          uint64_t v132 = String.init<A>(describing:)();
          unint64_t v133 = v126;
          uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v134, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v131 + 12) = 2080;
          uint64_t v135 = UUID.uuidString.getter();
          uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v136, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v137 = *(void (**)(char *, uint64_t))(v63 + 8);
          v137(v125, v164);
          *(_WORD *)(v131 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v133, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v131 + 32) = 2080;
          uint64_t v138 = v164;
          uint64_t v139 = v152;
          outlined init with copy of UUID?((uint64_t)v157, v152, &demangling cache variable for type metadata for UUID?);
          if (__swift_getEnumTagSinglePayload(v139, 1, v138) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v139, &demangling cache variable for type metadata for UUID?);
            uint64_t v140 = 0;
            unint64_t v141 = 0xE000000000000000;
          }
          else
          {
            uint64_t v140 = UUID.uuidString.getter();
            unint64_t v141 = v142;
            v137((char *)v139, v138);
          }
          uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v166);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v157, &demangling cache variable for type metadata for UUID?);
          _os_log_impl(&dword_1C9CFE000, v129, (os_log_type_t)v162, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v131, 0x2Au);
          os_log_t v143 = v161;
          swift_arrayDestroy();
          MEMORY[0x1CB78E290](v143, -1, -1);
          MEMORY[0x1CB78E290](v131, -1, -1);
        }
        else
        {

          outlined destroy of RRDataSourceMetadataValue?(v128, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v63 + 8))(v125, v62);
        }
        return;
      }
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v102 = type metadata accessor for Logger();
      __swift_project_value_buffer(v102, (uint64_t)static Logger.common);
      uint64_t v103 = v162;
      uint64_t v104 = v164;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v37, v160, v164);
      uint64_t v105 = (void (*)(void, void, void))v155;
      outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v155, &demangling cache variable for type metadata for UUID?);
      unint64_t v106 = v163;
      swift_bridgeObjectRetain_n();
      uint64_t v107 = Logger.logObject.getter();
      int v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v107, (os_log_type_t)v108))
      {
        LODWORD(v161) = v108;
        uint64_t v109 = swift_slowAlloc();
        uint64_t v160 = swift_slowAlloc();
        v166[0] = v160;
        *(_DWORD *)uint64_t v109 = 136315906;
        uint64_t v165 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
        uint64_t v110 = String.init<A>(describing:)();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v109 + 12) = 2080;
        uint64_t v112 = UUID.uuidString.getter();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v114 = *(void (**)(char *, uint64_t))(v103 + 8);
        v114(v37, v104);
        *(_WORD *)(v109 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v106, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v109 + 32) = 2080;
        uint64_t v115 = v149;
        outlined init with copy of UUID?((uint64_t)v155, v149, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v115, 1, v104) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v115, &demangling cache variable for type metadata for UUID?);
          uint64_t v116 = 0;
          unint64_t v117 = 0xE000000000000000;
        }
        else
        {
          uint64_t v116 = UUID.uuidString.getter();
          unint64_t v117 = v146;
          v114((char *)v115, v104);
        }
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v155, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v107, (os_log_type_t)v161, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v109, 0x2Au);
        uint64_t v147 = v160;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v147, -1, -1);
        MEMORY[0x1CB78E290](v109, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v105, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v103 + 8))(v37, v104);
    }
    else
    {
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v85 = type metadata accessor for Logger();
      __swift_project_value_buffer(v85, (uint64_t)static Logger.common);
      uint64_t v86 = v162;
      uint64_t v87 = v164;
      (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v43, v160, v164);
      uint64_t v88 = (uint64_t)v156;
      outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v156, &demangling cache variable for type metadata for UUID?);
      unint64_t v89 = v163;
      swift_bridgeObjectRetain_n();
      uint64_t v90 = Logger.logObject.getter();
      int v91 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v90, (os_log_type_t)v91))
      {
        LODWORD(v161) = v91;
        uint64_t v92 = swift_slowAlloc();
        uint64_t v160 = swift_slowAlloc();
        v166[0] = v160;
        *(_DWORD *)uint64_t v92 = 136315906;
        uint64_t v165 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
        uint64_t v93 = String.init<A>(describing:)();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v92 + 12) = 2080;
        uint64_t v95 = UUID.uuidString.getter();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        char v97 = *(void (**)(char *, uint64_t))(v86 + 8);
        v97(v43, v87);
        *(_WORD *)(v92 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v89, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v92 + 32) = 2080;
        uint64_t v98 = v150;
        outlined init with copy of UUID?((uint64_t)v156, v150, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v98, 1, v87) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v98, &demangling cache variable for type metadata for UUID?);
          uint64_t v99 = 0;
          unint64_t v100 = 0xE000000000000000;
        }
        else
        {
          uint64_t v99 = UUID.uuidString.getter();
          unint64_t v100 = v144;
          v97((char *)v98, v87);
        }
        uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, v166);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v156, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v90, (os_log_type_t)v161, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v92, 0x2Au);
        uint64_t v145 = v160;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v145, -1, -1);
        MEMORY[0x1CB78E290](v92, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v88, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v86 + 8))(v43, v87);
    }

    return;
  }
  uint64_t v156 = v8;
  v157 = v27;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  __swift_project_value_buffer(v64, (uint64_t)static Logger.common);
  uint64_t v65 = v162;
  int v66 = *(void (**)(char *, uint64_t, uint64_t))(v162 + 16);
  uint64_t v67 = v164;
  v66(v48, v160, v164);
  v66(v46, v158, v67);
  uint64_t v68 = (uint64_t)v157;
  outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v157, &demangling cache variable for type metadata for UUID?);
  unint64_t v69 = v163;
  swift_bridgeObjectRetain_n();
  uint64_t v70 = Logger.logObject.getter();
  int v71 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v70, (os_log_type_t)v71))
  {
    LODWORD(v160) = v71;
    os_log_t v161 = v70;
    uint64_t v72 = swift_slowAlloc();
    uint64_t v158 = swift_slowAlloc();
    v166[0] = v158;
    *(_DWORD *)uint64_t v72 = 136316162;
    uint64_t v165 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestReceived.Type);
    uint64_t v73 = String.init<A>(describing:)();
    uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v72 + 12) = 2080;
    uint64_t v75 = UUID.uuidString.getter();
    uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v77 = *(void (**)(char *, uint64_t))(v65 + 8);
    v77(v48, v164);
    *(_WORD *)(v72 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v69, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v72 + 32) = 2080;
    uint64_t v78 = UUID.uuidString.getter();
    uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v166);
    uint64_t v80 = v164;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v77(v46, v80);
    *(_WORD *)(v72 + 42) = 2080;
    uint64_t v82 = (uint64_t)v156;
    uint64_t v81 = (uint64_t)v157;
    outlined init with copy of UUID?((uint64_t)v157, (uint64_t)v156, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v82, 1, v80) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v82, &demangling cache variable for type metadata for UUID?);
      uint64_t v83 = 0;
      unint64_t v84 = 0xE000000000000000;
    }
    else
    {
      uint64_t v83 = UUID.uuidString.getter();
      unint64_t v84 = v119;
      v77((char *)v82, v80);
    }
    uint64_t v165 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v166);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v81, &demangling cache variable for type metadata for UUID?);
    uint64_t v70 = v161;
    _os_log_impl(&dword_1C9CFE000, v161, (os_log_type_t)v160, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v72, 0x34u);
    uint64_t v120 = v158;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v120, -1, -1);
    MEMORY[0x1CB78E290](v72, -1, -1);
  }
  else
  {
    uint64_t v101 = *(void (**)(char *, uint64_t))(v65 + 8);
    v101(v48, v67);
    swift_bridgeObjectRelease_n();
    v101(v46, v67);
    outlined destroy of RRDataSourceMetadataValue?(v68, &demangling cache variable for type metadata for UUID?);
  }
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(char a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v164 = a2;
  os_log_t v165 = a6;
  uint64_t v160 = a5;
  uint64_t v161 = a3;
  unint64_t v162 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v148 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v150 = (uint64_t)&v148 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v149 = (uint64_t)&v148 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v152 = (uint64_t)&v148 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v158 = (char *)&v148 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  v151 = (char *)&v148 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v148 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v154 = (uint64_t)&v148 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v159 = (char **)((char *)&v148 - v27);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char **)((char *)&v148 - v28);
  uint64_t v163 = type metadata accessor for UUID();
  uint64_t v166 = *(void *)(v163 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v163);
  uint64_t v155 = (char *)&v148 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  unint64_t v148 = (char *)&v148 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v148 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  v153 = (char *)&v148 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v148 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v44 = (char *)&v148 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  uint64_t v47 = (char *)&v148 - v46;
  MEMORY[0x1F4188790](v45);
  id v49 = (char *)&v148 - v48;
  id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01A8]), sel_init);
  if (!v50)
  {
    uint64_t v158 = v10;
    uint64_t v159 = v29;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.common);
    uint64_t v62 = v166;
    uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 16);
    uint64_t v64 = v163;
    v63(v49, v164, v163);
    v63(v47, v160, v64);
    uint64_t v65 = (void (*)(void, void, void))v159;
    outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v159, &demangling cache variable for type metadata for UUID?);
    unint64_t v66 = v162;
    swift_bridgeObjectRetain_n();
    uint64_t v67 = Logger.logObject.getter();
    int v68 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v67, (os_log_type_t)v68))
    {
      uint64_t v99 = *(void (**)(char *, uint64_t))(v62 + 8);
      v99(v49, v64);
      swift_bridgeObjectRelease_n();
      v99(v47, v64);
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v65, &demangling cache variable for type metadata for UUID?);
LABEL_45:

      return;
    }
    LODWORD(v164) = v68;
    os_log_t v165 = v67;
    uint64_t v69 = v64;
    uint64_t v70 = swift_slowAlloc();
    uint64_t v160 = swift_slowAlloc();
    v168[0] = v160;
    *(_DWORD *)uint64_t v70 = 136316162;
    uint64_t v167 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    uint64_t v71 = String.init<A>(describing:)();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v70 + 12) = 2080;
    uint64_t v73 = UUID.uuidString.getter();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v75 = v66;
    unint64_t v76 = *(void (**)(char *, uint64_t))(v62 + 8);
    v76(v49, v69);
    *(_WORD *)(v70 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v75, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v70 + 32) = 2080;
    uint64_t v77 = UUID.uuidString.getter();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76(v47, v69);
    *(_WORD *)(v70 + 42) = 2080;
    uint64_t v79 = (uint64_t)v158;
    uint64_t v80 = (void (*)(void, void, void))v159;
    outlined init with copy of UUID?((uint64_t)v159, (uint64_t)v158, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v79, 1, v69) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v79, &demangling cache variable for type metadata for UUID?);
      uint64_t v81 = 0;
      unint64_t v82 = 0xE000000000000000;
    }
    else
    {
      uint64_t v81 = UUID.uuidString.getter();
      unint64_t v82 = v118;
      v76((char *)v79, v69);
    }
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v80, &demangling cache variable for type metadata for UUID?);
    os_log_t v88 = v165;
    _os_log_impl(&dword_1C9CFE000, v165, (os_log_type_t)v164, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v70, 0x34u);
    uint64_t v119 = v160;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v119, -1, -1);
    MEMORY[0x1CB78E290](v70, -1, -1);
    goto LABEL_42;
  }
  uint64_t v51 = v50;
  objc_msgSend(v50, sel_setErrorCode_, dword_1C9D9E5C8[a1]);
  id v156 = v51;
  id v157 = static CaarErrorLogger.wrapIntoLogEvent(message:)((uint64_t)v51);
  if (!v157)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v83 = type metadata accessor for Logger();
    __swift_project_value_buffer(v83, (uint64_t)static Logger.common);
    uint64_t v84 = v166;
    uint64_t v85 = v163;
    (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v44, v164, v163);
    uint64_t v86 = (void (*)(void, void, void))v159;
    outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v159, &demangling cache variable for type metadata for UUID?);
    unint64_t v87 = v162;
    swift_bridgeObjectRetain_n();
    os_log_t v88 = (os_log_t)Logger.logObject.getter();
    int v89 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v88, (os_log_type_t)v89))
    {

      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v86, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v44, v85);
      goto LABEL_30;
    }
    LODWORD(v165) = v89;
    uint64_t v90 = swift_slowAlloc();
    uint64_t v164 = swift_slowAlloc();
    v168[0] = v164;
    *(_DWORD *)uint64_t v90 = 136315906;
    uint64_t v167 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    uint64_t v91 = String.init<A>(describing:)();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v90 + 12) = 2080;
    uint64_t v93 = UUID.uuidString.getter();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v95 = *(void (**)(char *, uint64_t))(v84 + 8);
    v95(v44, v85);
    *(_WORD *)(v90 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v87, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v90 + 32) = 2080;
    uint64_t v96 = v150;
    outlined init with copy of UUID?((uint64_t)v159, v150, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v96, 1, v85) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v96, &demangling cache variable for type metadata for UUID?);
      uint64_t v97 = 0;
      unint64_t v98 = 0xE000000000000000;
    }
    else
    {
      uint64_t v97 = UUID.uuidString.getter();
      unint64_t v98 = v144;
      v95((char *)v96, v85);
    }
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v159, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C9CFE000, v88, (os_log_type_t)v165, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v90, 0x2Au);
    uint64_t v145 = v164;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v145, -1, -1);
    MEMORY[0x1CB78E290](v90, -1, -1);

LABEL_42:
    return;
  }
  id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
  if (!v52)
  {
    uint64_t v100 = v163;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v101 = type metadata accessor for Logger();
    __swift_project_value_buffer(v101, (uint64_t)static Logger.common);
    uint64_t v102 = v166;
    uint64_t v103 = v153;
    (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v153, v164, v100);
    uint64_t v104 = v154;
    outlined init with copy of UUID?((uint64_t)v165, v154, &demangling cache variable for type metadata for UUID?);
    unint64_t v105 = v162;
    swift_bridgeObjectRetain_n();
    uint64_t v67 = Logger.logObject.getter();
    int v106 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, (os_log_type_t)v106))
    {
      LODWORD(v165) = v106;
      uint64_t v107 = swift_slowAlloc();
      uint64_t v164 = swift_slowAlloc();
      v168[0] = v164;
      *(_DWORD *)uint64_t v107 = 136315906;
      uint64_t v167 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
      uint64_t v108 = String.init<A>(describing:)();
      uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v107 + 12) = 2080;
      uint64_t v110 = UUID.uuidString.getter();
      uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v112 = *(void (**)(char *, uint64_t))(v102 + 8);
      v112(v103, v100);
      *(_WORD *)(v107 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v105, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v107 + 32) = 2080;
      uint64_t v113 = v154;
      uint64_t v114 = v149;
      outlined init with copy of UUID?(v154, v149, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v114, 1, v100) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v114, &demangling cache variable for type metadata for UUID?);
        uint64_t v115 = 0;
        unint64_t v116 = 0xE000000000000000;
      }
      else
      {
        uint64_t v115 = UUID.uuidString.getter();
        unint64_t v116 = v146;
        v112((char *)v114, v100);
      }
      uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v113, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1C9CFE000, v67, (os_log_type_t)v165, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v107, 0x2Au);
      uint64_t v147 = v164;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v147, -1, -1);
      MEMORY[0x1CB78E290](v107, -1, -1);

      goto LABEL_45;
    }

    outlined destroy of RRDataSourceMetadataValue?(v104, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v102 + 8))(v103, v100);
LABEL_30:

    return;
  }
  id v53 = v52;
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  uint64_t v54 = v163;
  uint64_t v159 = *(char ***)(v166 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v159)(v41, v164, v163);
  id v55 = SISchemaUUID.__allocating_init(nsuuid:)();
  objc_msgSend(v53, sel_setCaarId_, v55);

  unint64_t v56 = v162;
  id v57 = (void *)MEMORY[0x1CB78D210](v161, v162);
  objc_msgSend(v53, sel_setResultCandidateId_, v57);

  objc_msgSend(v53, sel_setRequestId_, 0);
  if (AFDeviceSupportsSAE())
  {
    ((void (*)(char *, uint64_t, uint64_t))v159)(v41, v160, v54);
    id v58 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v53, sel_setSubRequestId_, v58);
  }
  outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v54) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    uint64_t v59 = (uint64_t)v151;
    UUID.init(uuidString:)();
    if (__swift_getEnumTagSinglePayload(v59, 1, v54) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v59, &demangling cache variable for type metadata for UUID?);
      uint64_t v60 = v166;
    }
    else
    {
      uint64_t v120 = v166;
      uint64_t v121 = v148;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 32))(v148, v59, v54);
      ((void (*)(char *, char *, uint64_t))v159)(v41, v121, v54);
      id v122 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v53, sel_setTrpId_, v122);

      uint64_t v60 = v120;
      (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v54);
    }
  }
  else
  {
    uint64_t v60 = v166;
    (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v36, v23, v54);
    ((void (*)(char *, char *, uint64_t))v159)(v41, v36, v54);
    id v117 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v53, sel_setTrpId_, v117);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v36, v54);
  }
  id v123 = v157;
  objc_msgSend(v157, sel_setEventMetadata_, v53);
  objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v123);
  swift_unknownObjectRelease();
  id v124 = v155;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v125 = type metadata accessor for Logger();
  __swift_project_value_buffer(v125, (uint64_t)static Logger.common);
  ((void (*)(char *, uint64_t, uint64_t))v159)(v124, v164, v54);
  uint64_t v126 = (uint64_t)v158;
  outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v158, &demangling cache variable for type metadata for UUID?);
  swift_bridgeObjectRetain_n();
  uint64_t v127 = Logger.logObject.getter();
  int v128 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v127, (os_log_type_t)v128))
  {
    LODWORD(v166) = v128;
    uint64_t v129 = swift_slowAlloc();
    os_log_t v165 = (os_log_t)swift_slowAlloc();
    v168[0] = (uint64_t)v165;
    *(_DWORD *)uint64_t v129 = 136315906;
    uint64_t v167 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARRequestFailed);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARRequestFailed.Type);
    uint64_t v130 = String.init<A>(describing:)();
    uint64_t v131 = v124;
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v132, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v129 + 12) = 2080;
    uint64_t v133 = UUID.uuidString.getter();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v135 = *(void (**)(char *, uint64_t))(v60 + 8);
    unint64_t v136 = v131;
    uint64_t v137 = v163;
    v135(v136, v163);
    *(_WORD *)(v129 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v161, v56, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v138 = (uint64_t)v158;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v129 + 32) = 2080;
    uint64_t v139 = v152;
    outlined init with copy of UUID?(v138, v152, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v139, 1, v137) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v139, &demangling cache variable for type metadata for UUID?);
      uint64_t v140 = 0;
      unint64_t v141 = 0xE000000000000000;
    }
    else
    {
      uint64_t v140 = UUID.uuidString.getter();
      unint64_t v141 = v142;
      v135((char *)v139, v137);
    }
    uint64_t v167 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v168);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v138, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C9CFE000, v127, (os_log_type_t)v166, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v129, 0x2Au);
    os_log_t v143 = v165;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v143, -1, -1);
    MEMORY[0x1CB78E290](v129, -1, -1);
  }
  else
  {

    outlined destroy of RRDataSourceMetadataValue?(v126, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v124, v54);
  }
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v164 = a2;
  os_log_t v165 = a6;
  uint64_t v162 = a5;
  uint64_t v163 = a3;
  unint64_t v167 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v153 = (uint64_t)&v150 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v152 = (uint64_t)&v150 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v155 = (uint64_t)&v150 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v160 = (char *)&v150 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v154 = (char *)&v150 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v150 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v159 = (uint64_t)&v150 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v161 = (void (*)(char *, uint64_t, uint64_t))((char *)&v150 - v27);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (void (*)(char *, uint64_t, uint64_t))((char *)&v150 - v28);
  uint64_t v168 = type metadata accessor for UUID();
  uint64_t v166 = *(void *)(v168 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v168);
  id v156 = (char *)&v150 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  v151 = (char *)&v150 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v150 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v150 - v38;
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v42 = (char *)&v150 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v150 - v44;
  uint64_t v46 = MEMORY[0x1F4188790](v43);
  uint64_t v48 = (char *)&v150 - v47;
  MEMORY[0x1F4188790](v46);
  id v50 = (char *)&v150 - v49;
  uint64_t v51 = static CaarFeatureLogger.map(from:)(a1);
  if (v51)
  {
    id v52 = v51;
    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0178]), sel_init);
    objc_msgSend(v53, sel_setFeaturesGenerated_, v52);
    id v157 = v52;
    id v158 = v53;
    if (v53)
    {
      id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
      if (v54)
      {
        id v55 = v54;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        unint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 16);
        uint64_t v57 = v168;
        v56(v42, v164, v168);
        id v58 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v55, sel_setCaarId_, v58);

        uint64_t v59 = (void *)MEMORY[0x1CB78D210](v163, v167);
        objc_msgSend(v55, sel_setResultCandidateId_, v59);

        objc_msgSend(v55, sel_setRequestId_, 0);
        if (AFDeviceSupportsSAE())
        {
          v56(v42, v162, v57);
          id v60 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setSubRequestId_, v60);
        }
        outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
        int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v23, 1, v57);
        uint64_t v161 = v56;
        if (EnumTagSinglePayload == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
          uint64_t v62 = (uint64_t)v154;
          UUID.init(uuidString:)();
          uint64_t v63 = v57;
          if (__swift_getEnumTagSinglePayload(v62, 1, v57) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v62, &demangling cache variable for type metadata for UUID?);
            uint64_t v64 = v166;
          }
          else
          {
            uint64_t v122 = v166;
            id v123 = v151;
            (*(void (**)(char *, uint64_t, uint64_t))(v166 + 32))(v151, v62, v63);
            v56(v42, (uint64_t)v123, v63);
            id v124 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v55, sel_setTrpId_, v124);

            uint64_t v64 = v122;
            (*(void (**)(char *, uint64_t))(v122 + 8))(v123, v63);
          }
        }
        else
        {
          uint64_t v64 = v166;
          (*(void (**)(char *, char *, uint64_t))(v166 + 32))(v36, v23, v57);
          v56(v42, (uint64_t)v36, v57);
          id v118 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setTrpId_, v118);

          (*(void (**)(char *, uint64_t))(v64 + 8))(v36, v57);
          uint64_t v63 = v57;
        }
        id v125 = v158;
        objc_msgSend(v158, sel_setEventMetadata_, v55);
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v125);
        swift_unknownObjectRelease();
        unint64_t v126 = v167;
        uint64_t v127 = (uint64_t)v160;
        int v128 = v156;
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v129 = type metadata accessor for Logger();
        __swift_project_value_buffer(v129, (uint64_t)static Logger.common);
        v161(v128, v164, v63);
        outlined init with copy of UUID?((uint64_t)v165, v127, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        uint64_t v71 = Logger.logObject.getter();
        int v130 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v71, (os_log_type_t)v130))
        {

          outlined destroy of RRDataSourceMetadataValue?(v127, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v64 + 8))(v128, v63);

          return;
        }
        LODWORD(v166) = v130;
        uint64_t v131 = swift_slowAlloc();
        os_log_t v165 = (os_log_t)swift_slowAlloc();
        v170[0] = (uint64_t)v165;
        *(_DWORD *)uint64_t v131 = 136315906;
        uint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
        uint64_t v132 = String.init<A>(describing:)();
        uint64_t v133 = v128;
        unint64_t v134 = v126;
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v135, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v131 + 12) = 2080;
        uint64_t v136 = UUID.uuidString.getter();
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v137, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v138 = *(void (**)(char *, uint64_t))(v64 + 8);
        v138(v133, v168);
        *(_WORD *)(v131 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v134, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v139 = (uint64_t)v160;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v131 + 32) = 2080;
        uint64_t v140 = v168;
        uint64_t v141 = v155;
        outlined init with copy of UUID?(v139, v155, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v141, 1, v140) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v141, &demangling cache variable for type metadata for UUID?);
          uint64_t v142 = 0;
          unint64_t v143 = 0xE000000000000000;
        }
        else
        {
          uint64_t v142 = UUID.uuidString.getter();
          unint64_t v143 = v144;
          v138((char *)v141, v140);
        }
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v142, v143, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v139, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v71, (os_log_type_t)v166, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v131, 0x2Au);
        os_log_t v145 = v165;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v145, -1, -1);
        MEMORY[0x1CB78E290](v131, -1, -1);

        goto LABEL_44;
      }
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v103 = type metadata accessor for Logger();
      __swift_project_value_buffer(v103, (uint64_t)static Logger.common);
      uint64_t v104 = v166;
      uint64_t v105 = v168;
      (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v39, v164, v168);
      uint64_t v106 = v159;
      outlined init with copy of UUID?((uint64_t)v165, v159, &demangling cache variable for type metadata for UUID?);
      unint64_t v107 = v167;
      swift_bridgeObjectRetain_n();
      uint64_t v71 = Logger.logObject.getter();
      int v108 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, (os_log_type_t)v108))
      {
        LODWORD(v165) = v108;
        uint64_t v109 = swift_slowAlloc();
        uint64_t v164 = swift_slowAlloc();
        v170[0] = v164;
        *(_DWORD *)uint64_t v109 = 136315906;
        uint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
        uint64_t v110 = String.init<A>(describing:)();
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v109 + 12) = 2080;
        uint64_t v112 = UUID.uuidString.getter();
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v112, v113, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v114 = *(void (**)(char *, uint64_t))(v104 + 8);
        v114(v39, v105);
        *(_WORD *)(v109 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v107, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v109 + 32) = 2080;
        uint64_t v115 = v152;
        outlined init with copy of UUID?(v159, v152, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v115, 1, v105) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v115, &demangling cache variable for type metadata for UUID?);
          uint64_t v116 = 0;
          unint64_t v117 = 0xE000000000000000;
        }
        else
        {
          uint64_t v116 = UUID.uuidString.getter();
          unint64_t v117 = v148;
          v114((char *)v115, v105);
        }
        uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, v170);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v159, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v71, (os_log_type_t)v165, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v109, 0x2Au);
        uint64_t v149 = v164;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v149, -1, -1);
        MEMORY[0x1CB78E290](v109, -1, -1);

LABEL_44:
        goto LABEL_45;
      }

      outlined destroy of RRDataSourceMetadataValue?(v106, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v104 + 8))(v39, v105);
LABEL_30:

      return;
    }
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.common);
    uint64_t v87 = v166;
    uint64_t v88 = v168;
    (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v45, v164, v168);
    int v89 = v161;
    outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v161, &demangling cache variable for type metadata for UUID?);
    unint64_t v90 = v167;
    swift_bridgeObjectRetain_n();
    uint64_t v91 = Logger.logObject.getter();
    int v92 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v91, (os_log_type_t)v92))
    {

      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v89, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v87 + 8))(v45, v88);
      goto LABEL_30;
    }
    LODWORD(v165) = v92;
    uint64_t v93 = swift_slowAlloc();
    uint64_t v164 = swift_slowAlloc();
    v170[0] = v164;
    *(_DWORD *)uint64_t v93 = 136315906;
    uint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
    uint64_t v94 = String.init<A>(describing:)();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v93 + 12) = 2080;
    uint64_t v96 = UUID.uuidString.getter();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v98 = *(void (**)(char *, uint64_t))(v87 + 8);
    v98(v45, v88);
    *(_WORD *)(v93 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v90, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v93 + 32) = 2080;
    uint64_t v99 = v153;
    outlined init with copy of UUID?((uint64_t)v161, v153, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v99, 1, v88) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v99, &demangling cache variable for type metadata for UUID?);
      uint64_t v100 = 0;
      unint64_t v101 = 0xE000000000000000;
    }
    else
    {
      uint64_t v100 = UUID.uuidString.getter();
      unint64_t v101 = v146;
      v98((char *)v99, v88);
    }
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v161, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C9CFE000, v91, (os_log_type_t)v165, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v93, 0x2Au);
    uint64_t v147 = v164;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v147, -1, -1);
    MEMORY[0x1CB78E290](v93, -1, -1);
  }
  else
  {
    uint64_t v160 = v10;
    uint64_t v161 = v29;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.common);
    uint64_t v66 = v166;
    uint64_t v67 = *(void (**)(char *, uint64_t, uint64_t))(v166 + 16);
    uint64_t v68 = v168;
    v67(v50, v164, v168);
    v67(v48, v162, v68);
    uint64_t v69 = v161;
    outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v161, &demangling cache variable for type metadata for UUID?);
    unint64_t v70 = v167;
    swift_bridgeObjectRetain_n();
    uint64_t v71 = Logger.logObject.getter();
    int v72 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v71, (os_log_type_t)v72))
    {
      uint64_t v102 = *(void (**)(char *, uint64_t))(v66 + 8);
      v102(v50, v68);
      swift_bridgeObjectRelease_n();
      v102(v48, v68);
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v69, &demangling cache variable for type metadata for UUID?);
LABEL_45:

      return;
    }
    LODWORD(v164) = v72;
    os_log_t v165 = v71;
    uint64_t v73 = swift_slowAlloc();
    uint64_t v162 = swift_slowAlloc();
    v170[0] = v162;
    *(_DWORD *)uint64_t v73 = 136316162;
    uint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARFeaturesGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARFeaturesGenerated.Type);
    uint64_t v74 = String.init<A>(describing:)();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v73 + 12) = 2080;
    uint64_t v76 = UUID.uuidString.getter();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v78 = *(void (**)(char *, uint64_t))(v66 + 8);
    v78(v50, v168);
    *(_WORD *)(v73 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v163, v70, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v73 + 32) = 2080;
    uint64_t v79 = UUID.uuidString.getter();
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v170);
    uint64_t v81 = v168;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v78(v48, v81);
    *(_WORD *)(v73 + 42) = 2080;
    uint64_t v83 = (uint64_t)v160;
    unint64_t v82 = v161;
    outlined init with copy of UUID?((uint64_t)v161, (uint64_t)v160, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v83, 1, v81) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v83, &demangling cache variable for type metadata for UUID?);
      uint64_t v84 = 0;
      unint64_t v85 = 0xE000000000000000;
    }
    else
    {
      uint64_t v84 = UUID.uuidString.getter();
      unint64_t v85 = v119;
      v78((char *)v83, v81);
    }
    uint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v82, &demangling cache variable for type metadata for UUID?);
    os_log_t v120 = v165;
    _os_log_impl(&dword_1C9CFE000, v165, (os_log_type_t)v164, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v73, 0x34u);
    uint64_t v121 = v162;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v121, -1, -1);
    MEMORY[0x1CB78E290](v73, -1, -1);
  }
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v174 = a6;
  unint64_t v175 = a4;
  uint64_t v170 = a5;
  uint64_t v171 = a3;
  uint64_t v173 = a2;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v156 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v159 = (uint64_t)&v156 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v158 = (uint64_t)&v156 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v162 = (uint64_t)&v156 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v169 = (char *)&v156 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v161 = (char *)&v156 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v156 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v164 = (uint64_t)&v156 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v168 = (char *)&v156 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v156 - v28;
  uint64_t v172 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v172 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v172);
  os_log_t v165 = (char *)&v156 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  id v157 = (char *)&v156 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v160 = (char *)&v156 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  uint64_t v163 = (char *)&v156 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v156 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v44 = (char *)&v156 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  uint64_t v47 = (char *)&v156 - v46;
  MEMORY[0x1F4188790](v45);
  uint64_t v49 = (char *)&v156 - v48;
  uint64_t v50 = *a1;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  uint64_t v52 = (uint64_t)a1 + *(int *)(v51 + 48);
  id v53 = (_OWORD *)((char *)a1 + *(int *)(v51 + 64));
  long long v54 = v53[1];
  v178[0] = *v53;
  v178[1] = v54;
  long long v55 = v53[3];
  v178[2] = v53[2];
  v178[3] = v55;
  id v56 = static CaarModelLogger.map(from:)(v50, v52, (uint64_t)v178);
  if (v56)
  {
    uint64_t v57 = v56;
    id v58 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0178]), sel_init);
    objc_msgSend(v58, sel_setModelExecuted_, v57);
    id v166 = v57;
    id v167 = v58;
    if (v58)
    {
      id v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
      uint64_t v60 = v30;
      if (v59)
      {
        uint64_t v61 = v59;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
        uint64_t v63 = v172;
        v62(v41, v173, v172);
        id v64 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v61, sel_setCaarId_, v64);

        uint64_t v65 = (void *)MEMORY[0x1CB78D210](v171, v175);
        objc_msgSend(v61, sel_setResultCandidateId_, v65);

        objc_msgSend(v61, sel_setRequestId_, 0);
        if (AFDeviceSupportsSAE())
        {
          v62(v41, v170, v63);
          id v66 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v61, sel_setSubRequestId_, v66);
        }
        outlined init with copy of UUID?((uint64_t)v174, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v63) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
          uint64_t v67 = (uint64_t)v161;
          unint64_t v68 = v175;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v67, 1, v63) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v67, &demangling cache variable for type metadata for UUID?);
          }
          else
          {
            int v130 = v157;
            (*(void (**)(char *, uint64_t, uint64_t))(v60 + 32))(v157, v67, v63);
            v62(v41, (uint64_t)v130, v63);
            id v131 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v61, sel_setTrpId_, v131);

            (*(void (**)(char *, uint64_t))(v60 + 8))(v130, v63);
          }
        }
        else
        {
          id v125 = v160;
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v160, v23, v63);
          v62(v41, (uint64_t)v125, v63);
          id v126 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v61, sel_setTrpId_, v126);

          (*(void (**)(char *, uint64_t))(v60 + 8))(v125, v63);
          unint64_t v68 = v175;
        }
        id v132 = v167;
        objc_msgSend(v167, sel_setEventMetadata_, v61);
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v132);
        swift_unknownObjectRelease();
        uint64_t v133 = v165;
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v134 = type metadata accessor for Logger();
        __swift_project_value_buffer(v134, (uint64_t)static Logger.common);
        v62(v133, v173, v63);
        uint64_t v135 = (uint64_t)v169;
        outlined init with copy of UUID?((uint64_t)v174, (uint64_t)v169, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        uint64_t v96 = Logger.logObject.getter();
        int v136 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v96, (os_log_type_t)v136))
        {

          outlined destroy of RRDataSourceMetadataValue?(v135, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v60 + 8))(v133, v63);

          return;
        }
        LODWORD(v175) = v136;
        uint64_t v137 = swift_slowAlloc();
        uint64_t v174 = swift_slowAlloc();
        os_log_type_t v177 = v174;
        *(_DWORD *)uint64_t v137 = 136315906;
        uint64_t v176 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
        uint64_t v138 = String.init<A>(describing:)();
        unint64_t v139 = v68;
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v140, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v137 + 12) = 2080;
        uint64_t v141 = UUID.uuidString.getter();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v141, v142, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v143 = *(void (**)(char *, uint64_t))(v60 + 8);
        uint64_t v144 = v172;
        v143(v133, v172);
        *(_WORD *)(v137 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v139, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v145 = (uint64_t)v169;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v137 + 32) = 2080;
        uint64_t v146 = v162;
        outlined init with copy of UUID?(v145, v162, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v146, 1, v144) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v146, &demangling cache variable for type metadata for UUID?);
          uint64_t v147 = 0;
          unint64_t v148 = 0xE000000000000000;
        }
        else
        {
          uint64_t v147 = UUID.uuidString.getter();
          unint64_t v148 = v149;
          v143((char *)v146, v144);
        }
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v148, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v145, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v96, (os_log_type_t)v175, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v137, 0x2Au);
        uint64_t v150 = (uint64_t)v174;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v150, -1, -1);
        MEMORY[0x1CB78E290](v137, -1, -1);

        goto LABEL_44;
      }
      uint64_t v109 = v172;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v110 = type metadata accessor for Logger();
      __swift_project_value_buffer(v110, (uint64_t)static Logger.common);
      unint64_t v111 = v163;
      (*(void (**)(char *, uint64_t, uint64_t))(v60 + 16))(v163, v173, v109);
      uint64_t v112 = v164;
      outlined init with copy of UUID?((uint64_t)v174, v164, &demangling cache variable for type metadata for UUID?);
      unint64_t v113 = v175;
      swift_bridgeObjectRetain_n();
      uint64_t v96 = Logger.logObject.getter();
      int v114 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, (os_log_type_t)v114))
      {
        LODWORD(v174) = v114;
        uint64_t v115 = swift_slowAlloc();
        uint64_t v173 = swift_slowAlloc();
        os_log_type_t v177 = v173;
        *(_DWORD *)uint64_t v115 = 136315906;
        uint64_t v176 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
        uint64_t v116 = String.init<A>(describing:)();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v117, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v115 + 12) = 2080;
        uint64_t v118 = UUID.uuidString.getter();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v119, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v120 = *(void (**)(char *, uint64_t))(v60 + 8);
        v120(v111, v109);
        *(_WORD *)(v115 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v113, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v121 = v164;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v115 + 32) = 2080;
        uint64_t v122 = v158;
        outlined init with copy of UUID?(v121, v158, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v122, 1, v109) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v122, &demangling cache variable for type metadata for UUID?);
          uint64_t v123 = 0;
          unint64_t v124 = 0xE000000000000000;
        }
        else
        {
          uint64_t v123 = UUID.uuidString.getter();
          unint64_t v124 = v154;
          v120((char *)v122, v109);
        }
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v121, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v96, (os_log_type_t)v174, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v115, 0x2Au);
        uint64_t v155 = v173;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v155, -1, -1);
        MEMORY[0x1CB78E290](v115, -1, -1);

LABEL_44:
        id v153 = v167;
LABEL_45:

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v112, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v60 + 8))(v111, v109);
    }
    else
    {
      uint64_t v90 = v30;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.common);
      int v92 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
      uint64_t v93 = v172;
      v92(v44, v173, v172);
      uint64_t v94 = (uint64_t)v168;
      outlined init with copy of UUID?((uint64_t)v174, (uint64_t)v168, &demangling cache variable for type metadata for UUID?);
      unint64_t v95 = v175;
      swift_bridgeObjectRetain_n();
      uint64_t v96 = Logger.logObject.getter();
      int v97 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v96, (os_log_type_t)v97))
      {
        LODWORD(v174) = v97;
        uint64_t v98 = swift_slowAlloc();
        uint64_t v173 = swift_slowAlloc();
        os_log_type_t v177 = v173;
        *(_DWORD *)uint64_t v98 = 136315906;
        uint64_t v176 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
        uint64_t v99 = String.init<A>(describing:)();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v99, v100, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v98 + 12) = 2080;
        uint64_t v101 = UUID.uuidString.getter();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v102, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v103 = *(void (**)(char *, uint64_t))(v90 + 8);
        v103(v44, v93);
        *(_WORD *)(v98 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v95, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v104 = (uint64_t)v168;
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v98 + 32) = 2080;
        uint64_t v105 = v159;
        outlined init with copy of UUID?(v104, v159, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v105, 1, v93) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v105, &demangling cache variable for type metadata for UUID?);
          uint64_t v106 = 0;
          unint64_t v107 = 0xE000000000000000;
        }
        else
        {
          uint64_t v106 = UUID.uuidString.getter();
          unint64_t v107 = v151;
          v103((char *)v105, v93);
        }
        uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, (uint64_t *)&v177);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v104, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v96, (os_log_type_t)v174, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v98, 0x2Au);
        uint64_t v152 = v173;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v152, -1, -1);
        MEMORY[0x1CB78E290](v98, -1, -1);
        id v153 = v166;
        goto LABEL_45;
      }

      outlined destroy of RRDataSourceMetadataValue?(v94, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v90 + 8))(v44, v93);
    }

    return;
  }
  uint64_t v168 = v10;
  uint64_t v169 = v29;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.common);
  uint64_t v70 = v30;
  uint64_t v71 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  uint64_t v72 = v172;
  v71(v49, v173, v172);
  v71(v47, v170, v72);
  uint64_t v73 = (uint64_t)v169;
  outlined init with copy of UUID?((uint64_t)v174, (uint64_t)v169, &demangling cache variable for type metadata for UUID?);
  unint64_t v74 = v175;
  swift_bridgeObjectRetain_n();
  unint64_t v75 = Logger.logObject.getter();
  int v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, (os_log_type_t)v76))
  {
    LODWORD(v173) = v76;
    uint64_t v174 = v75;
    uint64_t v77 = v72;
    uint64_t v78 = swift_slowAlloc();
    uint64_t v170 = swift_slowAlloc();
    os_log_type_t v177 = v170;
    *(_DWORD *)uint64_t v78 = 136316162;
    uint64_t v176 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARModelExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARModelExecuted.Type);
    uint64_t v79 = String.init<A>(describing:)();
    uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v78 + 12) = 2080;
    uint64_t v81 = UUID.uuidString.getter();
    uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void (**)(char *, uint64_t))(v70 + 8);
    v83(v49, v77);
    *(_WORD *)(v78 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v171, v74, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v78 + 32) = 2080;
    uint64_t v84 = UUID.uuidString.getter();
    uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v85, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v83(v47, v77);
    *(_WORD *)(v78 + 42) = 2080;
    uint64_t v87 = (uint64_t)v168;
    uint64_t v86 = (uint64_t)v169;
    outlined init with copy of UUID?((uint64_t)v169, (uint64_t)v168, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v87, 1, v77) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v87, &demangling cache variable for type metadata for UUID?);
      uint64_t v88 = 0;
      unint64_t v89 = 0xE000000000000000;
    }
    else
    {
      uint64_t v88 = UUID.uuidString.getter();
      unint64_t v89 = v127;
      v83((char *)v87, v77);
    }
    int v128 = v174;
    uint64_t v176 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v177);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v86, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C9CFE000, v128, (os_log_type_t)v173, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v78, 0x34u);
    uint64_t v129 = v170;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v129, -1, -1);
    MEMORY[0x1CB78E290](v78, -1, -1);
  }
  else
  {
    int v108 = *(void (**)(char *, uint64_t))(v70 + 8);
    v108(v49, v72);
    swift_bridgeObjectRelease_n();
    v108(v47, v72);
    outlined destroy of RRDataSourceMetadataValue?(v73, &demangling cache variable for type metadata for UUID?);
  }
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, NSObject *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v168 = a6;
  os_log_t v169 = a2;
  uint64_t v165 = a5;
  uint64_t v166 = a3;
  unint64_t v171 = a4;
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v153 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v8);
  uint64_t v155 = (uint64_t)&v153 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v154 = (uint64_t)&v153 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v157 = (uint64_t)&v153 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v164 = (char *)&v153 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v156 = (char *)&v153 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v153 - v22;
  uint64_t v24 = MEMORY[0x1F4188790](v21);
  uint64_t v162 = (uint64_t)&v153 - v25;
  uint64_t v26 = MEMORY[0x1F4188790](v24);
  uint64_t v163 = (char *)&v153 - v27;
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v153 - v28;
  uint64_t v167 = type metadata accessor for UUID();
  os_log_t v170 = *(os_log_t *)(v167 - 8);
  uint64_t v30 = MEMORY[0x1F4188790](v167);
  uint64_t v159 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  id v153 = (char *)&v153 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v153 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v158 = (char *)&v153 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  uint64_t v41 = (char *)&v153 - v40;
  uint64_t v42 = MEMORY[0x1F4188790](v39);
  uint64_t v44 = (char *)&v153 - v43;
  uint64_t v45 = MEMORY[0x1F4188790](v42);
  uint64_t v47 = (char *)&v153 - v46;
  MEMORY[0x1F4188790](v45);
  uint64_t v49 = (char *)&v153 - v48;
  id v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01D0]), sel_init);
  if (!v50)
  {
    uint64_t v163 = v10;
    uint64_t v164 = v29;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.common);
    os_log_t v66 = v170;
    Class isa = v170[2].isa;
    uint64_t v68 = v167;
    ((void (*)(char *, os_log_t, uint64_t))isa)(v49, v169, v167);
    ((void (*)(char *, uint64_t, uint64_t))isa)(v47, v165, v68);
    uint64_t v69 = (uint64_t)v164;
    outlined init with copy of UUID?(v168, (uint64_t)v164, &demangling cache variable for type metadata for UUID?);
    unint64_t v70 = v171;
    swift_bridgeObjectRetain_n();
    uint64_t v71 = Logger.logObject.getter();
    int v72 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v71, (os_log_type_t)v72))
    {
      LODWORD(v168) = v72;
      os_log_t v169 = v71;
      uint64_t v73 = swift_slowAlloc();
      uint64_t v165 = swift_slowAlloc();
      v173[0] = v165;
      *(_DWORD *)uint64_t v73 = 136316162;
      uint64_t v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
      uint64_t v74 = String.init<A>(describing:)();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v76 = UUID.uuidString.getter();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v78 = (void (*)(char *, uint64_t))v66[1].isa;
      v78(v49, v68);
      *(_WORD *)(v73 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v70, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v73 + 32) = 2080;
      uint64_t v79 = UUID.uuidString.getter();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v173);
      uint64_t v81 = (uint64_t)v164;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v78(v47, v68);
      *(_WORD *)(v73 + 42) = 2080;
      uint64_t v82 = (uint64_t)v163;
      outlined init with copy of UUID?(v81, (uint64_t)v163, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v82, 1, v68) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v82, &demangling cache variable for type metadata for UUID?);
        uint64_t v83 = 0;
        unint64_t v84 = 0xE000000000000000;
      }
      else
      {
        uint64_t v83 = UUID.uuidString.getter();
        unint64_t v84 = v120;
        v78((char *)v82, v68);
      }
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v81, &demangling cache variable for type metadata for UUID?);
      uint64_t v71 = v169;
      _os_log_impl(&dword_1C9CFE000, v169, (os_log_type_t)v168, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v73, 0x34u);
      uint64_t v121 = v165;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v121, -1, -1);
      MEMORY[0x1CB78E290](v73, -1, -1);
    }
    else
    {
      unint64_t v102 = (void (*)(char *, uint64_t))v66[1].isa;
      v102(v49, v68);
      swift_bridgeObjectRelease_n();
      v102(v47, v68);
      outlined destroy of RRDataSourceMetadataValue?(v69, &demangling cache variable for type metadata for UUID?);
    }
LABEL_40:

    return;
  }
  uint64_t v51 = v50;
  uint64_t v52 = a1;
  id v53 = v51;
  outlined bridged method (mbgnn) of @objc CAARSchemaCAARTieBreakersExecuted.tiebreakers.setter(v52, v51);
  id v54 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0178]), sel_init);
  id v160 = v53;
  objc_msgSend(v54, sel_setTieBreakersExecuted_, v53);
  id v161 = v54;
  if (!v54)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v85 = type metadata accessor for Logger();
    __swift_project_value_buffer(v85, (uint64_t)static Logger.common);
    os_log_t v86 = v170;
    uint64_t v87 = v167;
    ((void (*)(char *, os_log_t, uint64_t))v170[2].isa)(v44, v169, v167);
    uint64_t v88 = (uint64_t)v163;
    outlined init with copy of UUID?(v168, (uint64_t)v163, &demangling cache variable for type metadata for UUID?);
    unint64_t v89 = v171;
    swift_bridgeObjectRetain_n();
    uint64_t v90 = Logger.logObject.getter();
    int v91 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v90, (os_log_type_t)v91))
    {
      LODWORD(v169) = v91;
      uint64_t v92 = swift_slowAlloc();
      uint64_t v168 = swift_slowAlloc();
      v173[0] = v168;
      *(_DWORD *)uint64_t v92 = 136315906;
      uint64_t v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
      uint64_t v93 = String.init<A>(describing:)();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v92 + 12) = 2080;
      uint64_t v95 = UUID.uuidString.getter();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      int v97 = (void (*)(char *, uint64_t))v86[1].isa;
      v97(v44, v87);
      *(_WORD *)(v92 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v89, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v98 = (uint64_t)v163;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v92 + 32) = 2080;
      uint64_t v99 = v155;
      outlined init with copy of UUID?(v98, v155, &demangling cache variable for type metadata for UUID?);
      if (__swift_getEnumTagSinglePayload(v99, 1, v87) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v99, &demangling cache variable for type metadata for UUID?);
        uint64_t v100 = 0;
        unint64_t v101 = 0xE000000000000000;
      }
      else
      {
        uint64_t v100 = UUID.uuidString.getter();
        unint64_t v101 = v148;
        v97((char *)v99, v87);
      }
      uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RRDataSourceMetadataValue?(v98, &demangling cache variable for type metadata for UUID?);
      _os_log_impl(&dword_1C9CFE000, v90, (os_log_type_t)v169, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v92, 0x2Au);
      uint64_t v149 = v168;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v149, -1, -1);
      MEMORY[0x1CB78E290](v92, -1, -1);
      id v150 = v160;
      goto LABEL_45;
    }

    outlined destroy of RRDataSourceMetadataValue?(v88, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v86[1].isa)(v44, v87);
LABEL_30:

    return;
  }
  id v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
  if (v55)
  {
    id v56 = v55;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    Class v57 = v170[2].isa;
    uint64_t v58 = v167;
    ((void (*)(char *, os_log_t, uint64_t))v57)(v41, v169, v167);
    id v59 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v56, sel_setCaarId_, v59);

    uint64_t v60 = (void *)MEMORY[0x1CB78D210](v166, v171);
    objc_msgSend(v56, sel_setResultCandidateId_, v60);

    objc_msgSend(v56, sel_setRequestId_, 0);
    if (AFDeviceSupportsSAE())
    {
      ((void (*)(char *, uint64_t, uint64_t))v57)(v41, v165, v58);
      id v61 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setSubRequestId_, v61);
    }
    uint64_t v62 = v168;
    outlined init with copy of UUID?(v168, (uint64_t)v23, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload((uint64_t)v23, 1, v58) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for UUID?);
      uint64_t v63 = (uint64_t)v156;
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v63, 1, v58) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?(v63, &demangling cache variable for type metadata for UUID?);
        os_log_t v64 = v170;
      }
      else
      {
        os_log_t v122 = v170;
        uint64_t v123 = v153;
        ((void (*)(char *, uint64_t, uint64_t))v170[4].isa)(v153, v63, v58);
        ((void (*)(char *, char *, uint64_t))v57)(v41, v123, v58);
        id v124 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v56, sel_setTrpId_, v124);

        id v125 = (void (*)(char *, uint64_t))v122[1].isa;
        os_log_t v64 = v122;
        uint64_t v62 = v168;
        v125(v123, v58);
      }
    }
    else
    {
      os_log_t v64 = v170;
      ((void (*)(char *, char *, uint64_t))v170[4].isa)(v36, v23, v58);
      ((void (*)(char *, char *, uint64_t))v57)(v41, v36, v58);
      id v119 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setTrpId_, v119);

      ((void (*)(char *, uint64_t))v64[1].isa)(v36, v58);
    }
    uint64_t v126 = (uint64_t)v164;
    id v127 = v161;
    objc_msgSend(v161, sel_setEventMetadata_, v56);
    objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v127);
    swift_unknownObjectRelease();
    unint64_t v128 = v171;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v129 = type metadata accessor for Logger();
    __swift_project_value_buffer(v129, (uint64_t)static Logger.common);
    int v130 = v159;
    ((void (*)(char *, os_log_t, uint64_t))v57)(v159, v169, v58);
    outlined init with copy of UUID?(v62, v126, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRetain_n();
    id v131 = Logger.logObject.getter();
    int v132 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v131, (os_log_type_t)v132))
    {

      outlined destroy of RRDataSourceMetadataValue?(v126, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      ((void (*)(char *, uint64_t))v64[1].isa)(v130, v58);

      return;
    }
    LODWORD(v169) = v132;
    os_log_t v170 = v131;
    uint64_t v133 = v130;
    uint64_t v134 = swift_slowAlloc();
    uint64_t v168 = swift_slowAlloc();
    v173[0] = v168;
    *(_DWORD *)uint64_t v134 = 136315906;
    uint64_t v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
    uint64_t v135 = String.init<A>(describing:)();
    unint64_t v136 = v128;
    uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v137, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v134 + 12) = 2080;
    uint64_t v138 = UUID.uuidString.getter();
    uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v139, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v140 = (void (*)(char *, uint64_t))v64[1].isa;
    v140(v133, v58);
    *(_WORD *)(v134 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v136, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v141 = (uint64_t)v164;
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v134 + 32) = 2080;
    uint64_t v142 = v157;
    outlined init with copy of UUID?(v141, v157, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v142, 1, v58) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v142, &demangling cache variable for type metadata for UUID?);
      uint64_t v143 = 0;
      unint64_t v144 = 0xE000000000000000;
    }
    else
    {
      uint64_t v143 = UUID.uuidString.getter();
      unint64_t v144 = v145;
      v140((char *)v142, v58);
    }
    os_log_type_t v146 = v169;
    uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v144, v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?(v141, &demangling cache variable for type metadata for UUID?);
    uint64_t v71 = v170;
    _os_log_impl(&dword_1C9CFE000, v170, v146, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v134, 0x2Au);
    uint64_t v147 = v168;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v147, -1, -1);
    MEMORY[0x1CB78E290](v134, -1, -1);

    goto LABEL_40;
  }
  uint64_t v103 = v167;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v104 = type metadata accessor for Logger();
  __swift_project_value_buffer(v104, (uint64_t)static Logger.common);
  os_log_t v105 = v170;
  uint64_t v106 = v158;
  ((void (*)(char *, os_log_t, uint64_t))v170[2].isa)(v158, v169, v103);
  uint64_t v107 = v162;
  outlined init with copy of UUID?(v168, v162, &demangling cache variable for type metadata for UUID?);
  unint64_t v108 = v171;
  swift_bridgeObjectRetain_n();
  uint64_t v90 = Logger.logObject.getter();
  int v109 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v90, (os_log_type_t)v109))
  {

    outlined destroy of RRDataSourceMetadataValue?(v107, &demangling cache variable for type metadata for UUID?);
    swift_bridgeObjectRelease_n();
    ((void (*)(char *, uint64_t))v105[1].isa)(v106, v103);
    goto LABEL_30;
  }
  LODWORD(v169) = v109;
  uint64_t v110 = swift_slowAlloc();
  uint64_t v168 = swift_slowAlloc();
  v173[0] = v168;
  *(_DWORD *)uint64_t v110 = 136315906;
  uint64_t v172 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARTieBreakersExecuted.Type);
  uint64_t v111 = String.init<A>(describing:)();
  uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v110 + 12) = 2080;
  uint64_t v113 = UUID.uuidString.getter();
  uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v115 = (void (*)(char *, uint64_t))v105[1].isa;
  v115(v106, v103);
  *(_WORD *)(v110 + 22) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v166, v108, v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v110 + 32) = 2080;
  uint64_t v116 = v154;
  outlined init with copy of UUID?(v162, v154, &demangling cache variable for type metadata for UUID?);
  if (__swift_getEnumTagSinglePayload(v116, 1, v103) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?(v116, &demangling cache variable for type metadata for UUID?);
    uint64_t v117 = 0;
    unint64_t v118 = 0xE000000000000000;
  }
  else
  {
    uint64_t v117 = UUID.uuidString.getter();
    unint64_t v118 = v151;
    v115((char *)v116, v103);
  }
  uint64_t v172 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v117, v118, v173);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of RRDataSourceMetadataValue?(v162, &demangling cache variable for type metadata for UUID?);
  _os_log_impl(&dword_1C9CFE000, v90, (os_log_type_t)v169, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v110, 0x2Au);
  uint64_t v152 = v168;
  swift_arrayDestroy();
  MEMORY[0x1CB78E290](v152, -1, -1);
  MEMORY[0x1CB78E290](v110, -1, -1);

  id v150 = v161;
LABEL_45:
}

void specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, NSObject *a6)
{
  os_log_t v183 = a6;
  uint64_t v184 = a3;
  uint64_t v178 = a5;
  unint64_t v181 = a4;
  uint64_t v182 = a2;
  uint64_t v180 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v9 = (char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v7);
  uint64_t v166 = (uint64_t)&v163 - v11;
  uint64_t v12 = MEMORY[0x1F4188790](v10);
  uint64_t v165 = (uint64_t)&v163 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v163 - v15;
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  uint64_t v177 = (uint64_t)&v163 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v168 = (char *)&v163 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v173 = (uint64_t)&v163 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v176 = (uint64_t)&v163 - v24;
  uint64_t v25 = MEMORY[0x1F4188790](v23);
  uint64_t v172 = (uint64_t)&v163 - v26;
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v163 - v27;
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v174 = (char *)&v163 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  uint64_t v164 = (char *)&v163 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v167 = (char *)&v163 - v36;
  uint64_t v37 = MEMORY[0x1F4188790](v35);
  os_log_t v170 = (char *)&v163 - v38;
  uint64_t v39 = MEMORY[0x1F4188790](v37);
  unint64_t v171 = (char *)&v163 - v40;
  uint64_t v41 = MEMORY[0x1F4188790](v39);
  uint64_t v43 = (char *)&v163 - v42;
  uint64_t v44 = MEMORY[0x1F4188790](v41);
  uint64_t v46 = (char *)&v163 - v45;
  MEMORY[0x1F4188790](v44);
  uint64_t v179 = (char *)&v163 - v47;
  uint64_t v48 = type metadata accessor for RankedAction();
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v51 = (char *)&v163 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01B8]), sel_init);
  if (v52)
  {
    os_log_t v169 = v16;
    uint64_t v53 = v180;
    uint64_t v54 = *(void *)(v180 + 16);
    uint64_t v55 = v184;
    uint64_t v175 = v30;
    id v185 = v52;
    if (v54)
    {
      type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
      id v56 = &v51[*(int *)(v48 + 36)];
      unint64_t v57 = v53 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
      uint64_t v58 = *(void *)(v49 + 72);
      id v59 = (void (**)(char *, char *, uint64_t))(v30 + 16);
      swift_bridgeObjectRetain();
      uint64_t v60 = v179;
      do
      {
        outlined init with copy of RankedAction();
        (*v59)(v60, v56, v29);
        outlined destroy of RankedAction((uint64_t)v51, (void (*)(void))type metadata accessor for RankedAction);
        id v61 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v185, sel_addActionCandidateIds_, v61);

        v57 += v58;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
      uint64_t v30 = v175;
      uint64_t v55 = v184;
      id v52 = v185;
    }
    uint64_t v62 = static CaarResponseLogger.wrapIntoLogEvent(message:)((uint64_t)v52);
    if (v62)
    {
      uint64_t v63 = v62;
      id v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0180]), sel_init);
      unint64_t v65 = v181;
      if (v64)
      {
        os_log_t v66 = v64;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        uint64_t v67 = v179;
        uint64_t v180 = *(void *)(v30 + 16);
        ((void (*)(char *, uint64_t, uint64_t))v180)(v179, v182, v29);
        id v68 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v66, sel_setCaarId_, v68);

        uint64_t v69 = (void *)MEMORY[0x1CB78D210](v55, v65);
        objc_msgSend(v66, sel_setResultCandidateId_, v69);

        objc_msgSend(v66, sel_setRequestId_, 0);
        if (AFDeviceSupportsSAE())
        {
          ((void (*)(char *, void *, uint64_t))v180)(v67, v178, v29);
          id v70 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v66, sel_setSubRequestId_, v70);
        }
        uint64_t v71 = v173;
        outlined init with copy of UUID?((uint64_t)v183, v173, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v71, 1, v29) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v71, &demangling cache variable for type metadata for UUID?);
          uint64_t v72 = (uint64_t)v168;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v72, 1, v29) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v72, &demangling cache variable for type metadata for UUID?);
            uint64_t v73 = (void (*)(char *, uint64_t, uint64_t))v180;
          }
          else
          {
            uint64_t v135 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 32);
            uint64_t v178 = v66;
            unint64_t v136 = v65;
            unint64_t v137 = v67;
            uint64_t v138 = v164;
            v135(v164, v72, v29);
            uint64_t v73 = (void (*)(char *, uint64_t, uint64_t))v180;
            ((void (*)(char *, char *, uint64_t))v180)(v137, v138, v29);
            unint64_t v65 = v136;
            os_log_t v66 = v178;
            id v139 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v66, sel_setTrpId_, v139);

            (*(void (**)(char *, uint64_t))(v30 + 8))(v138, v29);
          }
        }
        else
        {
          int v130 = v167;
          (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v167, v71, v29);
          uint64_t v73 = (void (*)(char *, uint64_t, uint64_t))v180;
          ((void (*)(char *, char *, uint64_t))v180)(v67, v130, v29);
          id v131 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v66, sel_setTrpId_, v131);

          int v132 = v130;
          unint64_t v65 = v181;
          (*(void (**)(char *, uint64_t))(v30 + 8))(v132, v29);
        }
        [v63 setEventMetadata:v66];
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v63);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v140 = type metadata accessor for Logger();
        __swift_project_value_buffer(v140, (uint64_t)static Logger.common);
        uint64_t v141 = v174;
        v73(v174, v182, v29);
        uint64_t v142 = v177;
        outlined init with copy of UUID?((uint64_t)v183, v177, &demangling cache variable for type metadata for UUID?);
        swift_bridgeObjectRetain_n();
        uint64_t v143 = Logger.logObject.getter();
        int v144 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v143, (os_log_type_t)v144))
        {
          LODWORD(v182) = v144;
          os_log_t v183 = v63;
          unint64_t v145 = v65;
          uint64_t v146 = swift_slowAlloc();
          uint64_t v180 = swift_slowAlloc();
          v187[0] = v180;
          *(_DWORD *)uint64_t v146 = 136315906;
          uint64_t v186 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
          uint64_t v147 = String.init<A>(describing:)();
          uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v147, v148, v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v146 + 12) = 2080;
          uint64_t v149 = UUID.uuidString.getter();
          uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v149, v150, v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          unint64_t v151 = *(void (**)(char *, uint64_t))(v175 + 8);
          v151(v141, v29);
          *(_WORD *)(v146 + 22) = 2080;
          swift_bridgeObjectRetain();
          uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v184, v145, v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v152 = v177;
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v146 + 32) = 2080;
          uint64_t v153 = (uint64_t)v169;
          outlined init with copy of UUID?(v152, (uint64_t)v169, &demangling cache variable for type metadata for UUID?);
          if (__swift_getEnumTagSinglePayload(v153, 1, v29) == 1)
          {
            outlined destroy of RRDataSourceMetadataValue?(v153, &demangling cache variable for type metadata for UUID?);
            uint64_t v154 = 0;
            unint64_t v155 = 0xE000000000000000;
          }
          else
          {
            uint64_t v154 = UUID.uuidString.getter();
            unint64_t v155 = v156;
            v151((char *)v153, v29);
          }
          uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v154, v155, v187);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of RRDataSourceMetadataValue?(v152, &demangling cache variable for type metadata for UUID?);
          _os_log_impl(&dword_1C9CFE000, v143, (os_log_type_t)v182, "Successfully emitted log message : %s for caarId : %s, rcId: %s, retrpId: %s", (uint8_t *)v146, 0x2Au);
          uint64_t v157 = v180;
          swift_arrayDestroy();
          MEMORY[0x1CB78E290](v157, -1, -1);
          MEMORY[0x1CB78E290](v146, -1, -1);
        }
        else
        {

          outlined destroy of RRDataSourceMetadataValue?(v142, &demangling cache variable for type metadata for UUID?);
          swift_bridgeObjectRelease_n();
          (*(void (**)(char *, uint64_t))(v175 + 8))(v141, v29);
        }
        return;
      }
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v116 = type metadata accessor for Logger();
      __swift_project_value_buffer(v116, (uint64_t)static Logger.common);
      uint64_t v117 = v170;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v170, v182, v29);
      uint64_t v118 = v176;
      outlined init with copy of UUID?((uint64_t)v183, v176, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      id v119 = Logger.logObject.getter();
      int v120 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v119, (os_log_type_t)v120))
      {
        LODWORD(v182) = v120;
        os_log_t v183 = v63;
        uint64_t v121 = swift_slowAlloc();
        uint64_t v180 = swift_slowAlloc();
        v187[0] = v180;
        *(_DWORD *)uint64_t v121 = 136315906;
        uint64_t v186 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
        uint64_t v122 = String.init<A>(describing:)();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v121 + 12) = 2080;
        uint64_t v124 = UUID.uuidString.getter();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v124, v125, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v126 = *(void (**)(char *, uint64_t))(v30 + 8);
        v126(v117, v29);
        *(_WORD *)(v121 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v184, v65, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v121 + 32) = 2080;
        uint64_t v127 = v165;
        outlined init with copy of UUID?(v176, v165, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v127, 1, v29) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v127, &demangling cache variable for type metadata for UUID?);
          uint64_t v128 = 0;
          unint64_t v129 = 0xE000000000000000;
        }
        else
        {
          uint64_t v128 = UUID.uuidString.getter();
          unint64_t v129 = v161;
          v126((char *)v127, v29);
        }
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v128, v129, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v176, &demangling cache variable for type metadata for UUID?);
        _os_log_impl(&dword_1C9CFE000, v119, (os_log_type_t)v182, "Failed to create metadata for log event : %s, caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v121, 0x2Au);
        uint64_t v162 = v180;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v162, -1, -1);
        MEMORY[0x1CB78E290](v121, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v118, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v117, v29);
    }
    else
    {
      unint64_t v98 = v181;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v99 = type metadata accessor for Logger();
      __swift_project_value_buffer(v99, (uint64_t)static Logger.common);
      uint64_t v100 = v30;
      unint64_t v101 = v171;
      (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v171, v182, v29);
      uint64_t v102 = v172;
      outlined init with copy of UUID?((uint64_t)v183, v172, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRetain_n();
      uint64_t v103 = Logger.logObject.getter();
      int v104 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v103, (os_log_type_t)v104))
      {
        LODWORD(v182) = v104;
        os_log_t v183 = v103;
        uint64_t v105 = swift_slowAlloc();
        uint64_t v180 = swift_slowAlloc();
        v187[0] = v180;
        *(_DWORD *)uint64_t v105 = 136315906;
        uint64_t v186 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
        uint64_t v106 = String.init<A>(describing:)();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v106, v107, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v105 + 12) = 2080;
        uint64_t v108 = UUID.uuidString.getter();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v110 = v101;
        uint64_t v111 = *(void (**)(char *, uint64_t))(v100 + 8);
        v111(v110, v29);
        *(_WORD *)(v105 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v184, v98, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v105 + 32) = 2080;
        uint64_t v112 = v166;
        outlined init with copy of UUID?(v102, v166, &demangling cache variable for type metadata for UUID?);
        if (__swift_getEnumTagSinglePayload(v112, 1, v29) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?(v112, &demangling cache variable for type metadata for UUID?);
          uint64_t v113 = 0;
          unint64_t v114 = 0xE000000000000000;
        }
        else
        {
          uint64_t v113 = UUID.uuidString.getter();
          unint64_t v114 = v158;
          v111((char *)v112, v29);
        }
        uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v187);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of RRDataSourceMetadataValue?(v102, &demangling cache variable for type metadata for UUID?);
        os_log_t v159 = v183;
        _os_log_impl(&dword_1C9CFE000, v183, (os_log_type_t)v182, "Couldn't create log event with destination message : %s  for caarId : %s, rcId: %s, trpId: %s", (uint8_t *)v105, 0x2Au);
        uint64_t v160 = v180;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v160, -1, -1);
        MEMORY[0x1CB78E290](v105, -1, -1);

        return;
      }

      outlined destroy of RRDataSourceMetadataValue?(v102, &demangling cache variable for type metadata for UUID?);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v29);
    }

    return;
  }
  uint64_t v74 = v43;
  id v185 = v9;
  os_log_t v169 = v28;
  os_log_t v75 = v183;
  uint64_t v76 = v29;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  __swift_project_value_buffer(v77, (uint64_t)static Logger.common);
  uint64_t v78 = v30;
  uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
  v79(v46, v182, v29);
  v79(v74, (uint64_t)v178, v29);
  uint64_t v80 = (uint64_t)v169;
  outlined init with copy of UUID?((uint64_t)v75, (uint64_t)v169, &demangling cache variable for type metadata for UUID?);
  unint64_t v81 = v181;
  swift_bridgeObjectRetain_n();
  uint64_t v82 = Logger.logObject.getter();
  int v83 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v82, (os_log_type_t)v83))
  {
    LODWORD(v183) = v83;
    uint64_t v84 = swift_slowAlloc();
    uint64_t v180 = (uint64_t)v74;
    unint64_t v85 = v81;
    uint64_t v86 = v84;
    uint64_t v182 = swift_slowAlloc();
    v187[0] = v182;
    *(_DWORD *)uint64_t v86 = 136316162;
    uint64_t v186 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAARSchemaCAARResponseGenerated.Type);
    uint64_t v87 = String.init<A>(describing:)();
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v86 + 12) = 2080;
    uint64_t v89 = UUID.uuidString.getter();
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v91 = *(void (**)(char *, uint64_t))(v78 + 8);
    v91(v46, v76);
    *(_WORD *)(v86 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v184, v85, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v86 + 32) = 2080;
    uint64_t v92 = v180;
    uint64_t v93 = UUID.uuidString.getter();
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v91((char *)v92, v76);
    *(_WORD *)(v86 + 42) = 2080;
    uint64_t v95 = (uint64_t)v185;
    outlined init with copy of UUID?((uint64_t)v169, (uint64_t)v185, &demangling cache variable for type metadata for UUID?);
    if (__swift_getEnumTagSinglePayload(v95, 1, v76) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v95, &demangling cache variable for type metadata for UUID?);
      uint64_t v96 = 0;
      unint64_t v97 = 0xE000000000000000;
    }
    else
    {
      uint64_t v96 = UUID.uuidString.getter();
      unint64_t v97 = v133;
      v91((char *)v95, v76);
    }
    uint64_t v186 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v187);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v169, &demangling cache variable for type metadata for UUID?);
    _os_log_impl(&dword_1C9CFE000, v82, (os_log_type_t)v183, "Mapping function to create:  %s  failed for caarId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v86, 0x34u);
    uint64_t v134 = v182;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v134, -1, -1);
    MEMORY[0x1CB78E290](v86, -1, -1);
  }
  else
  {
    uint64_t v115 = *(void (**)(char *, uint64_t))(v78 + 8);
    v115(v46, v76);
    swift_bridgeObjectRelease_n();
    v115(v74, v76);
    outlined destroy of RRDataSourceMetadataValue?(v80, &demangling cache variable for type metadata for UUID?);
  }
}

void closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v19 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v7 - 8);
  uint64_t v18 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v11 = a3[5];
  uint64_t v12 = a3[6];
  __swift_project_boxed_opaque_existential_1(a3 + 2, v11);
  uint64_t v13 = a1 + *(int *)(type metadata accessor for ActionCandidate() + 32);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 8);
  uint64_t v20 = a2;
  uint64_t v15 = v21;
  v14(a2, v13, v11, v12);
  if (!v15)
  {
    outlined init with copy of RankedAction();
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v9, v13, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)();
  }
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12Zip2SequenceVySay7SiriCam15ActionCandidateVGSaySDySSSo14MLFeatureValueCGGG_AH06RankedH0VsAE_pTg503_s7f5Cam15hi10VSDySSSo14jk6CGAA06l5C0Vs5C33_pIgngrzo_AC_AFtAHsAI_pIegnrzr_TRAjnRsAE_pIgngrzo_Tf1cn_n(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  id v52 = a3;
  uint64_t v53 = a4;
  uint64_t v8 = type metadata accessor for RankedAction();
  uint64_t v50 = *(void *)(v8 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  unint64_t v57 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v44 = (char *)&v44 - v11;
  uint64_t v12 = type metadata accessor for ActionCandidate();
  uint64_t v54 = *(void *)(v12 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v12 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v47 = (char *)&v44 - v14;
  uint64_t v51 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
  uint64_t v15 = MEMORY[0x1F4188790](v51);
  uint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  uint64_t v46 = (char *)&v44 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v45 = (uint64_t)&v44 - v20;
  unint64_t v21 = *(void *)(a1 + 16);
  unint64_t v55 = *(void *)(a2 + 16);
  unint64_t v56 = v21;
  if (v55 >= v21) {
    unint64_t v22 = v21;
  }
  else {
    unint64_t v22 = v55;
  }
  uint64_t v58 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
  uint64_t v49 = a2;
  if (v22)
  {
    uint64_t v23 = v58;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v25 = 0;
    uint64_t v48 = a1;
    while (v56 != v25)
    {
      uint64_t result = outlined init with copy of RankedAction();
      if (v55 == v25) {
        goto LABEL_34;
      }
      uint64_t v26 = *(void *)(v49 + 8 * v25 + 32);
      uint64_t v27 = *(int *)(v51 + 48);
      outlined init with take of CamModelMetadata();
      *(void *)&v17[v27] = v26;
      swift_bridgeObjectRetain();
      v52(v17, v26);
      if (v4)
      {
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      }
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
        uint64_t v23 = v58;
      }
      unint64_t v29 = *(void *)(v23 + 16);
      unint64_t v28 = *(void *)(v23 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        uint64_t v23 = v58;
      }
      ++v25;
      *(void *)(v23 + 16) = v29 + 1;
      uint64_t result = outlined init with take of CamModelMetadata();
      if (v22 == v25) {
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_34:
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
LABEL_16:
    unint64_t v30 = v55;
    unint64_t v31 = v56;
    if (v56 <= v55)
    {
LABEL_31:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v58;
    }
    uint64_t v32 = v49;
    while (v22 < v31)
    {
      uint64_t v33 = (uint64_t)v47;
      uint64_t result = outlined init with copy of RankedAction();
      if (v30 == v22)
      {
        outlined destroy of RankedAction(v33, (void (*)(void))type metadata accessor for ActionCandidate);
        goto LABEL_31;
      }
      if (v22 >= v30) {
        goto LABEL_36;
      }
      uint64_t v34 = *(void *)(v32 + 8 * v22 + 32);
      uint64_t v35 = v51;
      uint64_t v36 = *(int *)(v51 + 48);
      uint64_t v37 = (uint64_t)v46;
      outlined init with take of CamModelMetadata();
      *(void *)(v37 + v36) = v34;
      uint64_t v38 = v45;
      outlined init with take of (UUID, [String : MLFeatureValue])(v37, v45, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      uint64_t v39 = *(void *)(v38 + *(int *)(v35 + 48));
      swift_bridgeObjectRetain();
      v52((char *)v38, v39);
      outlined destroy of RRDataSourceMetadataValue?(v38, &demangling cache variable for type metadata for (ActionCandidate, [String : MLFeatureValue]));
      if (v5)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      uint64_t v40 = v58;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v31 = v56;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v40 + 16) + 1, 1);
        uint64_t v40 = v58;
      }
      unint64_t v43 = *(void *)(v40 + 16);
      unint64_t v42 = *(void *)(v40 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        uint64_t v40 = v58;
      }
      ++v22;
      *(void *)(v40 + 16) = v43 + 1;
      uint64_t result = outlined init with take of CamModelMetadata();
      unint64_t v30 = v55;
      if (v31 == v22) {
        goto LABEL_31;
      }
    }
  }
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_9_6(v4);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = a2(v5);
  }
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)();
  *a1 = v5;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, char a2)
{
  uint64_t v4 = *a1;
  swift_retain_n();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
    uint64_t v4 = v5;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  v8[0] = v4 + 32;
  v8[1] = v6;
  swift_retain();
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v8, a2 & 1);
  *a1 = v4;
  return swift_release_n();
}

uint64_t closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, uint64_t a8)
{
  swift_beginAccess();
  uint64_t v14 = swift_bridgeObjectRetain();
  CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(v14, a3, a4, a5, a6, a7, 0, a8);
  return swift_bridgeObjectRelease();
}

uint64_t closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, NSObject *a7, uint64_t a8)
{
  swift_beginAccess();
  uint64_t v17 = *(void *)(a1 + 16);
  type metadata accessor for SiriSignalsContainer();
  uint64_t v15 = swift_allocObject();
  type metadata accessor for SignalValue();
  swift_bridgeObjectRetain();
  *(void *)(v15 + 16) = Dictionary.init(dictionaryLiteral:)();
  SiriSignalsContainer.refreshSignals()();
  swift_retain();
  specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(&v17, v15);
  specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(&v17, v15);
  swift_release();
  CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(v17, a3, a4, a5, a6, a7, 0, a8);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = __swift_project_value_buffer(v9, (uint64_t)static Logger.ranker);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C9CFE000, v11, v12, "Ranking parses in CAAR", v13, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  MEMORY[0x1F4188790](v14);
  v40[2] = a7;
  uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam0E5ParseOG_Sds5NeverOTg5((void (*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:), (uint64_t)v40, a6);
  swift_bridgeObjectRetain_n();
  uint64_t v42 = v10;
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.debug.getter();
  uint64_t v18 = specialized Array._endMutation();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v41 = a6;
    uint64_t v43 = v20;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v21 = swift_bridgeObjectRetain();
    uint64_t v22 = MEMORY[0x1CB78D400](v21, MEMORY[0x1E4FBB3D0]);
    unint64_t v24 = v23;
    swift_bridgeObjectRelease();
    uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v43);
    OUTLINED_FUNCTION_55(v25);
    uint64_t v18 = specialized Array._endMutation();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v16, v17, "Ranking generated scores %s", v19, 0xCu);
    swift_arrayDestroy();
    a6 = v41;
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_getKeyPath();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v26 = specialized _copySequenceToContiguousArray<A>(_:)(v15);
  swift_bridgeObjectRelease();
  uint64_t v43 = v26;
  specialized MutableCollection<>.sort(by:)(&v43, 1);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v27 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySi6offset_Sd7elementtG_Sis5NeverOTg5231_s7SiriCam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5ParseOG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFS2i6offset_Sd7elementt_tcfu0_33_39c69c9f4ee04694167b65f5fa330960SiAT_SdAUtSiTf3nnnpk_nTf1cn_n(v43);
  swift_release();
  swift_bridgeObjectRetain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySiG_7SiriCam0E5ParseOs5NeverOTg503_s7d94Cam22CodeBasedRankerHandlerC4rank9requestId04caarI002rcI003trpI06parses13rankerContextSayAA0B5F49OG10Foundation4UUIDV_APSSAPSgAmA0eO0VtFALSiXEfU0_SayAIGTf1cn_n(v27, a6);
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  unint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v32 = *((void *)v18 + 504);
    uint64_t v33 = type metadata accessor for CamParse(0);
    uint64_t v34 = swift_bridgeObjectRetain();
    uint64_t v35 = MEMORY[0x1CB78D400](v34, v33);
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v37, &v43);
    OUTLINED_FUNCTION_55(v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v30, v31, "Returning ranked parses %s", v32, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return v29;
}

void closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v5 = MEMORY[0x1F4188790](v4 - 8);
  uint64_t v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1F4188790](v10);
  os_log_type_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (void **)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of RankedAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of CamModelMetadata();
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    double v21 = v20;
    uint64_t v22 = a1 + *(int *)(type metadata accessor for RankerContext() + 28);
    if ((*(unsigned char *)(v22 + 8) & 1) != 0 || v21 != *(double *)v22)
    {
      outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for CamUSOParse);
      uint64_t v28 = 0x3FA999999999999ALL;
    }
    else
    {
      outlined init with copy of UUID?((uint64_t)&v12[*(int *)(v10 + 20)], (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for CamUSOParse);
      uint64_t v23 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v23) == 1)
      {
LABEL_23:
        *a2 = 0x3FE0000000000000;
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        return;
      }
      outlined init with copy of UUID?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      uint64_t v24 = *(void *)(v23 - 8);
      int v25 = (*(uint64_t (**)(char *, uint64_t))(v24 + 88))(v7, v23);
      if (v25 != *MEMORY[0x1E4FA27A8] && v25 != *MEMORY[0x1E4FA2790] && v25 != *MEMORY[0x1E4FA2778])
      {
        (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v23);
        goto LABEL_23;
      }
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      uint64_t v28 = 0x3FE3333333333333;
    }
    *a2 = v28;
    return;
  }
  if (EnumCaseMultiPayload == 1)
  {
    os_log_type_t v17 = *v15;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    BOOL v19 = v18 >= 0.7;

    *a2 = qword_1C9D9E530[v19];
  }
  else
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.ranker);
    unint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl(&dword_1C9CFE000, v30, v31, "Received unknown parse case, ranking last!", v32, 2u);
      MEMORY[0x1CB78E290](v32, -1, -1);
    }

    *a2 = 0;
    outlined destroy of RankedAction((uint64_t)v15, (void (*)(void))type metadata accessor for CamParse);
  }
}

void CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)()
{
  OUTLINED_FUNCTION_11_2();
  uint64_t v3 = v2;
  uint64_t v4 = (int *)type metadata accessor for RankerFeatureExtractor();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for RankerContext();
  OUTLINED_FUNCTION_1_3();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  os_log_type_t v12 = (void *)((char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_40();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (void *)((char *)v40 - v14);
  if (CamFeatureFlag.isEnabled.getter(4u))
  {
    outlined init with copy of RankedAction();
    uint64_t v16 = (uint64_t *)((char *)v15 + *(int *)(v8 + 24));
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    type metadata accessor for ConversationHistoryFeatureExtractor();
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = v18;
    *(void *)(v19 + 24) = v17;
    swift_bridgeObjectRetain();
    uint64_t v20 = swift_bridgeObjectRetain();
    double v21 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_Sis5NeverOTg503_s7d64Cam26DawnRankerFeatureExtractorV7actions13rankerContextACSayAA15fG71VG_AA0dI0VtcfcSiAGcfu_33_8226a15facd6e6e82cd0ea8a8c3738b3AGSiTf3nnnpk_nTf1cn_n(v20);
    swift_bridgeObjectRelease();
    uint64_t v22 = specialized Sequence<>.max()(v21);
    char v24 = v23;
    swift_bridgeObjectRelease();
    if (v22 > 2 && (v24 & 1) == 0) {
      uint64_t v26 = 3;
    }
    else {
      uint64_t v26 = 2;
    }
    uint64_t v27 = static DawnRankerFeatureExtractor.extractOnScreenAppBundleIds(rrCandidates:)(*v15);
    uint64_t v28 = outlined destroy of RankedAction((uint64_t)v15, (void (*)(void))type metadata accessor for RankerContext);
    uint64_t v43 = &type metadata for DawnRankerFeatureExtractor;
    uint64_t v44 = &protocol witness table for DawnRankerFeatureExtractor;
    v42[0] = v19;
    v42[1] = v26;
    _OWORD v42[2] = v27;
  }
  else
  {
    outlined init with copy of RankedAction();
    uint64_t v43 = (ValueMetadata *)v4;
    uint64_t v44 = &protocol witness table for RankerFeatureExtractor;
    v40[1] = __swift_allocate_boxed_opaque_existential_1(v42);
    uint64_t v29 = v4[9];
    swift_bridgeObjectRetain();
    static PommesFeatureExtractor.configuredScoreThreshold()();
    *(void *)&v7[v29] = v30;
    outlined init with copy of RankedAction();
    outlined init with copy of RankedAction();
    uint64_t v31 = static UserParseFeatureExtractor.extractOnScreenAppBundleIds(from:)(*v12);
    uint64_t v32 = (char *)v12 + *(int *)(v8 + 28);
    v40[0] = v0;
    uint64_t v33 = *(void *)v32;
    uint64_t v41 = v3;
    char v34 = v32[8];
    outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for RankerContext);
    uint64_t v35 = &v7[v4[5]];
    *(void *)uint64_t v35 = v31;
    *((void *)v35 + 1) = v33;
    v35[16] = v34;
    type metadata accessor for AffinityRankFeatureExtractor();
    OUTLINED_FUNCTION_54();
    *(void *)&v7[v4[6]] = AffinityRankFeatureExtractor.init(actions:)(v41);
    unint64_t v36 = (uint64_t *)(v1 + *(int *)(v8 + 24));
    uint64_t v37 = *v36;
    uint64_t v38 = v36[1];
    swift_bridgeObjectRetain();
    outlined destroy of RankedAction(v1, (void (*)(void))type metadata accessor for RankerContext);
    type metadata accessor for ConversationHistoryFeatureExtractor();
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v37;
    *(void *)(v39 + 24) = v38;
    uint64_t v3 = v41;
    *(void *)&v7[v4[8]] = v39;
    uint64_t v28 = outlined init with take of CamModelMetadata();
  }
  MEMORY[0x1F4188790](v28);
  v40[-2] = v42;
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam15ActionCandidateVG_SDySSSo14MLFeatureValueCGsAE_pTg5((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))partial apply for closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:), (uint64_t)&v40[-4], v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  OUTLINED_FUNCTION_22_3();
  OUTLINED_FUNCTION_3_5();
}

uint64_t closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v8);
  uint64_t result = FeatureExtracting.extract(from:)(a1, v8, v9);
  if (v4) {
    *a3 = v4;
  }
  else {
    *a4 = result;
  }
  return result;
}

uint64_t CodeBasedRankerHandler.postRankLogging(rankedActions:caarId:rcId:requestId:trpId:shadowLog:tieBreakersExecuted:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, NSObject *a6, int a7, uint64_t a8)
{
  uint64_t v125 = a8;
  int v121 = a7;
  uint64_t v128 = (void *)a4;
  uint64_t v129 = a5;
  uint64_t v126 = a2;
  uint64_t v127 = a3;
  uint64_t v123 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_7_6();
  uint64_t v124 = v12;
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v13 - 8);
  OUTLINED_FUNCTION_7_6();
  OUTLINED_FUNCTION_15_3(v14);
  uint64_t v118 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_5_2();
  uint64_t v119 = v16;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v112 - v18;
  uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  OUTLINED_FUNCTION_1_2();
  uint64_t v22 = v21;
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_18_3();
  uint64_t v140 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_2();
  uint64_t v25 = v24;
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_5_2();
  uint64_t v139 = v27;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_10_0();
  uint64_t v138 = v29;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_10_0();
  uint64_t v137 = v31;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v32);
  uint64_t v141 = (uint64_t)&v112 - v33;
  int64_t v34 = *(void *)(a1 + 16);
  id v131 = v19;
  uint64_t v132 = a1;
  int v130 = a6;
  if (v34)
  {
    uint64_t v115 = v8;
    uint64_t v116 = v22;
    uint64_t v117 = v20;
    unint64_t v35 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v36 = one-time initialization token for ranker;
    swift_bridgeObjectRetain();
    if (v36 != -1) {
      swift_once();
    }
    uint64_t v113 = v25;
    uint64_t v37 = *(void *)(v25 + 72);
    uint64_t v38 = type metadata accessor for Logger();
    *(void *)&long long v39 = 136315650;
    long long v134 = v39;
    uint64_t v133 = MEMORY[0x1E4FBC840] + 8;
    int64_t v114 = v34;
    int64_t v40 = v34;
    uint64_t v42 = v137;
    uint64_t v41 = v138;
    uint64_t v43 = v141;
    uint64_t v135 = v38;
    uint64_t v136 = v37;
    do
    {
      __swift_project_value_buffer(v38, (uint64_t)static Logger.ranker);
      outlined init with copy of RankedAction();
      outlined init with copy of RankedAction();
      outlined init with copy of RankedAction();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc();
        uint64_t v142 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = v134;
        swift_bridgeObjectRetain();
        uint64_t v47 = OUTLINED_FUNCTION_45();
        *(void *)(v46 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v48, v49);
        swift_bridgeObjectRelease();
        outlined destroy of RankedAction(v141, (void (*)(void))type metadata accessor for RankedAction);
        *(_WORD *)(v46 + 12) = 2080;
        uint64_t v50 = v140;
        type metadata accessor for UUID();
        lazy protocol witness table accessor for type UUID and conformance UUID((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
        uint64_t v42 = v137;
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v46 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v52, &v142);
        swift_bridgeObjectRelease();
        outlined destroy of RankedAction(v42, (void (*)(void))type metadata accessor for RankedAction);
        *(_WORD *)(v46 + 22) = 2080;
        uint64_t v53 = *(int *)(v50 + 44);
        uint64_t v41 = v138;
        unint64_t v54 = Dictionary<>.debugDescription.getter(*(void *)(v138 + v53));
        *(void *)(v46 + 24) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v142);
        swift_bridgeObjectRelease();
        uint64_t v43 = v141;
        outlined destroy of RankedAction(v41, (void (*)(void))type metadata accessor for RankedAction);
        _os_log_impl(&dword_1C9CFE000, v44, v45, "Features for %s (%s): \n %s", (uint8_t *)v46, 0x20u);
        swift_arrayDestroy();
        uint64_t v38 = v135;
        OUTLINED_FUNCTION_2_2();
        uint64_t v37 = v136;
        OUTLINED_FUNCTION_2_2();
      }
      else
      {

        outlined destroy of RankedAction(v41, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction(v42, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction(v43, (void (*)(void))type metadata accessor for RankedAction);
      }
      v35 += v37;
      --v40;
    }
    while (v40);
    a1 = v132;
    swift_bridgeObjectRelease();
    a6 = v130;
    uint64_t v20 = v117;
    uint64_t v22 = v116;
    uint64_t v8 = v115;
    int64_t v34 = v114;
    uint64_t v25 = v113;
  }
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  __swift_project_value_buffer(v56, (uint64_t)static Logger.ranker);
  unint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v57, v58))
  {
    id v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v59 = 0;
    _os_log_impl(&dword_1C9CFE000, v57, v58, "Logging CAAR features to SELF.", v59, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  uint64_t v60 = MEMORY[0x1E4FBC860];
  if (v34)
  {
    uint64_t v142 = MEMORY[0x1E4FBC860];
    int64_t v61 = v34;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v34, 0);
    unint64_t v62 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v63 = *(void *)(v25 + 72);
    uint64_t v64 = v139;
    do
    {
      outlined init with copy of RankedAction();
      uint64_t v65 = *(int *)(v20 + 48);
      uint64_t v66 = v140;
      type metadata accessor for UUID();
      OUTLINED_FUNCTION_1_3();
      OUTLINED_FUNCTION_24_3();
      v67();
      *(void *)(v8 + v65) = *(void *)(v64 + *(int *)(v66 + 44));
      swift_bridgeObjectRetain();
      outlined destroy of RankedAction(v64, (void (*)(void))type metadata accessor for RankedAction);
      uint64_t v60 = v142;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v60 + 16) + 1, 1);
        uint64_t v60 = v142;
      }
      unint64_t v69 = *(void *)(v60 + 16);
      unint64_t v68 = *(void *)(v60 + 24);
      if (v69 >= v68 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
        uint64_t v60 = v142;
      }
      *(void *)(v60 + 16) = v69 + 1;
      outlined init with take of (UUID, [String : MLFeatureValue])(v8, v60+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v69, &demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
      v62 += v63;
      --v61;
    }
    while (v61);
    a6 = v130;
  }
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v60, v126, v127, (unint64_t)v128, v129, a6);
  swift_bridgeObjectRelease();
  char v70 = static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, 0x80000001C9DA3140);
  uint64_t v71 = v122;
  if (v70 & 1) != 0 && (CamFeatureFlag.isEnabled.getter(5u))
  {
    uint64_t v142 = 0;
    unint64_t v143 = 0xE000000000000000;
    _StringGuts.grow(_:)(28);
    uint64_t v73 = *(void *)(v71 + 56);
    unint64_t v72 = *(void *)(v71 + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v142 = v73;
    unint64_t v143 = v72;
    v74._object = (void *)0x80000001C9DA3660;
    v74._uint64_t countAndFlagsBits = 0xD00000000000001ALL;
    String.append(_:)(v74);
    unint64_t v75 = v143;
    uint64_t v141 = v142;
  }
  else
  {
    unint64_t v75 = *(void *)(v71 + 64);
    uint64_t v141 = *(void *)(v71 + 56);
    swift_bridgeObjectRetain();
  }
  uint64_t v76 = *(void *)(v71 + 72);
  uint64_t v77 = *(unsigned int *)(v71 + 80);
  char v78 = v121 & 1;
  uint64_t v80 = *(void *)(v71 + 88);
  uint64_t v79 = *(void *)(v71 + 96);
  uint64_t v81 = type metadata accessor for Locale();
  uint64_t v82 = v120;
  __swift_storeEnumTagSinglePayload(v120, 1, 1, v81);
  uint64_t v83 = v119;
  uint64_t v84 = v119 + *(int *)(v118 + 28);
  __swift_storeEnumTagSinglePayload(v84, 1, 1, v81);
  *(void *)uint64_t v83 = v141;
  *(void *)(v83 + 8) = v75;
  *(void *)(v83 + 16) = v76;
  *(void *)(v83 + 24) = v77;
  *(void *)(v83 + 32) = v80;
  *(void *)(v83 + 40) = v79;
  *(unsigned char *)(v83 + 48) = v78;
  swift_bridgeObjectRetain();
  outlined assign with take of Locale?(v82, v84);
  outlined init with take of CamModelMetadata();
  uint64_t v85 = one-time initialization token for enrollment;
  swift_bridgeObjectRetain();
  if (v85 != -1) {
    swift_once();
  }
  long long v86 = static TrialProvider.enrollment;
  uint64_t v88 = qword_1EBC6BCB0;
  uint64_t v87 = qword_1EBC6BCB8;
  long long v89 = xmmword_1EBC6BCC0;
  uint64_t v91 = qword_1EBC6BCD0;
  uint64_t v90 = qword_1EBC6BCD8;
  uint64_t v92 = v124;
  uint64_t v93 = (char *)v124 + *(int *)(v123 + 64);
  *uint64_t v124 = v132;
  outlined init with copy of RankedAction();
  *(_OWORD *)uint64_t v93 = v86;
  *((void *)v93 + 2) = v88;
  *((void *)v93 + 3) = v87;
  *((_OWORD *)v93 + 2) = v89;
  *((void *)v93 + 6) = v91;
  *((void *)v93 + 7) = v90;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v94 = v127;
  uint64_t v95 = v128;
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v92, v126, v127, (unint64_t)v128, v129, (uint64_t)v130);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v92, &demangling cache variable for type metadata for ([RankedAction], CamModelMetadata, CAARTrialEnrollment));
  uint64_t v96 = UUID.uuidString.getter();
  uint64_t v97 = (uint64_t)v131;
  specialized static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(v132, (uint64_t)v131, v96, v98, v94, v95, 1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_29_0();
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v99, v100, v101, v102, v103, v104);
  OUTLINED_FUNCTION_29_0();
  specialized static CaarLoggingProtocol.log(from:forCaarId:forRcId:forRequestId:forTrpId:)(v105, v106, v107, v108, v109, v110);
  return outlined destroy of RankedAction(v97, (void (*)(void))type metadata accessor for CamModelMetadata);
}

uint64_t specialized static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, void *a6, int a7)
{
  LODWORD(v7) = a7;
  uint64_t v66 = a6;
  uint64_t v65 = a5;
  unint64_t v64 = a4;
  uint64_t v63 = a3;
  uint64_t v69 = type metadata accessor for RankedAction();
  uint64_t v10 = *(void *)(v69 - 8);
  MEMORY[0x1F4188790](v69);
  uint64_t v70 = (uint64_t)v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for CamModelMetadata();
  uint64_t v62 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v62 + 64);
  uint64_t v14 = MEMORY[0x1F4188790](v12 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v57 - v15;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AnyEncodable)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
  *(void *)(inited + 32) = 0x7365727574616566;
  *(void *)(inited + 40) = 0xE800000000000000;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  uint64_t v18 = (void *)Dictionary.init(dictionaryLiteral:)();
  uint64_t v19 = *(void *)(a1 + 16);
  int v67 = v7;
  if (v19)
  {
    v57[1] = v13;
    v57[2] = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v58 = inited;
    id v59 = v16;
    uint64_t v60 = a2;
    LOBYTE(v7) = a1 + ((*(unsigned char *)(v10 + 80) + 32) & ~*(unsigned char *)(v10 + 80));
    uint64_t v68 = *(void *)(v10 + 72);
    uint64_t v61 = a1;
    swift_bridgeObjectRetain();
    uint64_t v20 = v70;
    while (1)
    {
      outlined init with copy of RankedAction();
      uint64_t v21 = v69;
      uint64_t v22 = UUID.uuidString.getter();
      uint64_t v24 = v23;
      uint64_t v25 = *(void *)(v20 + *(int *)(v21 + 44));
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v72[0] = (uint64_t)v18;
      unint64_t v27 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
      uint64_t v29 = v18[2];
      BOOL v30 = (v28 & 1) == 0;
      Swift::Int v31 = v29 + v30;
      if (__OFADD__(v29, v30))
      {
        __break(1u);
LABEL_32:
        __break(1u);
        goto LABEL_33;
      }
      unint64_t v32 = v27;
      char v33 = v28;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, [String : MLFeatureValue]>);
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v31))
      {
        unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(v22, v24);
        if ((v33 & 1) != (v35 & 1))
        {
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
        unint64_t v32 = v34;
      }
      uint64_t v18 = (void *)v72[0];
      if (v33)
      {
        uint64_t v36 = *(void *)(v72[0] + 56);
        swift_bridgeObjectRelease();
        *(void *)(v36 + 8 * v32) = v25;
      }
      else
      {
        *(void *)(v72[0] + 8 * (v32 >> 6) + 64) |= 1 << v32;
        uint64_t v37 = (uint64_t *)(v18[6] + 16 * v32);
        uint64_t *v37 = v22;
        v37[1] = v24;
        *(void *)(v18[7] + 8 * v32) = v25;
        uint64_t v38 = v18[2];
        BOOL v39 = __OFADD__(v38, 1);
        uint64_t v40 = v38 + 1;
        if (v39) {
          goto LABEL_32;
        }
        v18[2] = v40;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v20 = v70;
      outlined destroy of RankedAction(v70, (void (*)(void))type metadata accessor for RankedAction);
      LOBYTE(v7) = v7 + v68;
      if (!--v19)
      {
        a1 = v61;
        swift_bridgeObjectRelease();
        LOBYTE(v7) = v67;
        uint64_t v16 = v59;
        uint64_t inited = v58;
        break;
      }
    }
  }
  uint64_t v41 = swift_allocObject();
  *(void *)(v41 + 16) = v18;
  *(void *)(inited + 48) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 56) = v41;
  *(void *)(inited + 64) = 0x74757074756FLL;
  *(void *)(inited + 72) = 0xE600000000000000;
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = a1;
  *(void *)(inited + 80) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 88) = v42;
  *(void *)(inited + 96) = 0x617461646174656DLL;
  *(void *)(inited + 104) = 0xE800000000000000;
  outlined init with copy of RankedAction();
  outlined init with copy of RankedAction();
  uint64_t v43 = swift_allocObject();
  outlined init with take of CamModelMetadata();
  swift_bridgeObjectRetain();
  outlined destroy of RankedAction((uint64_t)v16, (void (*)(void))type metadata accessor for CamModelMetadata);
  *(void *)(inited + 112) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:);
  *(void *)(inited + 120) = v43;
  uint64_t v25 = Dictionary.init(dictionaryLiteral:)();
  if (one-time initialization token for common != -1) {
LABEL_33:
  }
    swift_once();
  uint64_t v44 = 0x6C65646F4D6D6143;
  uint64_t v45 = type metadata accessor for Logger();
  uint64_t v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain_n();
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = swift_slowAlloc();
    uint64_t v50 = swift_slowAlloc();
    v72[0] = v50;
    *(_DWORD *)uint64_t v49 = 136315394;
    uint64_t v70 = v46;
    if ((_BYTE)v7)
    {
      if (v7 == 1) {
        uint64_t v51 = 0x65646F4D72616143;
      }
      else {
        uint64_t v51 = 0x646E65536F747541;
      }
      if (v7 == 1) {
        unint64_t v7 = 0xE90000000000006CLL;
      }
      else {
        unint64_t v7 = 0xED00006C65646F4DLL;
      }
    }
    else
    {
      unint64_t v7 = 0xE800000000000000;
      uint64_t v51 = 0x6C65646F4D6D6143;
    }
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v7, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v49 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v52 = Dictionary.description.getter();
    unint64_t v54 = v53;
    swift_bridgeObjectRelease();
    uint64_t v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v54, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v47, v48, "Writing to Feature Store, streamId=%s, object=%s", (uint8_t *)v49, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v50, -1, -1);
    MEMORY[0x1CB78E290](v49, -1, -1);

    LOBYTE(v7) = v67;
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((_BYTE)v7)
  {
    if (v7 == 1)
    {
      uint64_t v44 = 0x65646F4D72616143;
      uint64_t v55 = 0xE90000000000006CLL;
    }
    else
    {
      uint64_t v44 = 0x646E65536F747541;
      uint64_t v55 = 0xED00006C65646F4DLL;
    }
  }
  else
  {
    uint64_t v55 = 0xE800000000000000;
  }
  v72[3] = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : AnyEncodable]);
  v72[4] = lazy protocol witness table accessor for type [String : AnyEncodable] and conformance <> [A : B]();
  v72[0] = v25;
  specialized static FeatureStoreLoggingProtocol.write(streamId:object:requestId:rcId:)(v44, v55, v72, v63, v64, v65, v66);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v72);
}

uint64_t CodeBasedRankerHandler.deinit()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t CodeBasedRankerHandler.__deallocating_deinit()
{
  CodeBasedRankerHandler.deinit();
  return MEMORY[0x1F4186488](v0, 112, 7);
}

uint64_t type metadata accessor for CodeBasedRankerHandler()
{
  return self;
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:) in conformance CodeBasedRankerHandler(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  return CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, a3, a4, a5, a6, a7);
}

void protocol witness for Caar.rank(requestId:caarId:rcId:actions:rankerContext:) in conformance CodeBasedRankerHandler()
{
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:) in conformance CodeBasedRankerHandler(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t specialized static Comparable.> infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  double v5 = *(double *)((char *)a2 + v4);
  double v6 = *(double *)((char *)a1 + v4);
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  if (v8 == 0xD000000000000021 && v9 == 0x80000001C9DA20E0) {
    return 0;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v10 & 1) == 0)
  {
    uint64_t v12 = *a1;
    uint64_t v11 = a1[1];
    if (v12 == 0xD000000000000021 && v11 == 0x80000001C9DA20E0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 1;
    }
    if (v8 == v12 && v9 == v11) {
      return 0;
    }
    OUTLINED_FUNCTION_34();
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v14 & 1) == 0)
    {
      OUTLINED_FUNCTION_34();
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(uint64_t (*a1)(void))
{
  return a1();
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, void **a2, uint64_t a3, uint64_t (*a4)(void))
{
  double v6 = (void *)a4();
  uint64_t v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  uint64_t v8 = *a2;
  if (*a2)
  {
    *uint64_t v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {
  }
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)()
{
  OUTLINED_FUNCTION_11_2();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v167 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_2();
  uint64_t v162 = v4;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_5_2();
  uint64_t v157 = v6;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_10_0();
  uint64_t v168 = v8;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_10_0();
  unint64_t v171 = v10;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_10_0();
  os_log_t v170 = v12;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_10_0();
  unint64_t v161 = v14;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_10_0();
  os_log_t v159 = v16;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_10_0();
  uint64_t v154 = v18;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v19);
  uint64_t v153 = (uint64_t *)((char *)&v148 - v20);
  os_log_t v169 = v3;
  Swift::Int v21 = v3[1];
  Swift::Int v22 = _minimumMergeRunLength(_:)(v21);
  if (v22 >= v21)
  {
    if (v21 < 0) {
      goto LABEL_193;
    }
    if (v21) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)();
    }
LABEL_170:
    OUTLINED_FUNCTION_3_5();
    return;
  }
  Swift::Int v151 = v22;
  uint64_t v149 = specialized static Array._allocateUninitialized(_:)(v21 / 2);
  uint64_t v160 = v23;
  uint64_t v150 = v21;
  if (v21 <= 0) {
    goto LABEL_156;
  }
  uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v166 = "ettingsFlowDelegatePlugin";
  unint64_t v152 = 0x80000001C9DA20E0;
  Swift::Int v25 = v21;
  Swift::Int v26 = 0;
  while (2)
  {
    Swift::Int v27 = v26;
    unint64_t v156 = v24;
    if (v26 + 1 >= v25)
    {
      Swift::Int v34 = v26 + 1;
      goto LABEL_53;
    }
    uint64_t v28 = *v169;
    Swift::Int v29 = *(void *)(v162 + 72);
    BOOL v30 = v153;
    outlined init with copy of RankedAction();
    uint64_t v163 = v28;
    Swift::Int v165 = v29;
    outlined init with copy of RankedAction();
    double v31 = OUTLINED_FUNCTION_28_0();
    double v33 = *(double *)((char *)v30 + v32);
    if (v31 >= v33)
    {
      if (v33 >= v31)
      {
        uint64_t v35 = *v154;
        uint64_t v36 = v154[1];
        OUTLINED_FUNCTION_27_0();
        if (!v51 || (OUTLINED_FUNCTION_25_1(), v36 != v37))
        {
          char v135 = OUTLINED_FUNCTION_2_12();
          LODWORD(v164) = 0;
          if (v135) {
            goto LABEL_13;
          }
          uint64_t v136 = *v153;
          uint64_t v137 = v153[1];
          OUTLINED_FUNCTION_14_4();
          if (v51)
          {
            OUTLINED_FUNCTION_25_1();
            if (v137 == v138) {
              goto LABEL_6;
            }
          }
          if (OUTLINED_FUNCTION_2_12()) {
            goto LABEL_6;
          }
          if (v35 != v136 || v36 != v137)
          {
            OUTLINED_FUNCTION_47();
            char v140 = _stringCompareWithSmolCheck(_:_:expecting:)();
            LODWORD(v164) = 0;
            if ((v140 & 1) == 0)
            {
              OUTLINED_FUNCTION_47();
              LODWORD(v164) = _stringCompareWithSmolCheck(_:_:expecting:)();
            }
            goto LABEL_13;
          }
        }
      }
      LODWORD(v164) = 0;
      goto LABEL_13;
    }
LABEL_6:
    LODWORD(v164) = 1;
LABEL_13:
    outlined destroy of RankedAction((uint64_t)v154, (void (*)(void))type metadata accessor for RankedAction);
    outlined destroy of RankedAction((uint64_t)v153, (void (*)(void))type metadata accessor for RankedAction);
    Swift::Int v34 = v27 + 2;
    if (v27 + 2 >= v25) {
      goto LABEL_36;
    }
    uint64_t v158 = v27;
    uint64_t v38 = v163;
    while (1)
    {
      Swift::Int v39 = v25;
      Swift::Int v40 = v34;
      uint64_t v41 = v159;
      outlined init with copy of RankedAction();
      outlined init with copy of RankedAction();
      double v42 = OUTLINED_FUNCTION_28_0();
      double v44 = *(double *)((char *)v41 + v43);
      if (v42 < v44)
      {
LABEL_16:
        int v45 = 1;
        goto LABEL_22;
      }
      if (v44 < v42 || (uint64_t v46 = *v161, v47 = v161[1], OUTLINED_FUNCTION_14_4(), v51) && v47 == v152)
      {
LABEL_21:
        int v45 = 0;
        goto LABEL_22;
      }
      int v45 = 0;
      if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
      {
        uint64_t v49 = *v159;
        Swift::Int v48 = v159[1];
        if (*v159 == 0xD000000000000021)
        {
          OUTLINED_FUNCTION_25_1();
          if (v48 == v50) {
            goto LABEL_16;
          }
        }
        Swift::Int v155 = v48;
        if (OUTLINED_FUNCTION_2_12()) {
          goto LABEL_16;
        }
        BOOL v51 = v46 == v49 && v47 == v155;
        if (v51) {
          goto LABEL_21;
        }
        int v45 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
          int v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
LABEL_22:
      outlined destroy of RankedAction((uint64_t)v161, (void (*)(void))type metadata accessor for RankedAction);
      outlined destroy of RankedAction((uint64_t)v159, (void (*)(void))type metadata accessor for RankedAction);
      if ((v164 ^ v45)) {
        break;
      }
      Swift::Int v34 = v40 + 1;
      v38 += v165;
      Swift::Int v25 = v39;
      if (v40 + 1 >= v39)
      {
        Swift::Int v34 = v39;
        Swift::Int v27 = v158;
        goto LABEL_36;
      }
    }
    Swift::Int v34 = v40;
    Swift::Int v27 = v158;
    Swift::Int v25 = v39;
LABEL_36:
    if (v164)
    {
      if (v34 < v27) {
        goto LABEL_194;
      }
      if (v27 < v34)
      {
        Swift::Int v155 = v25;
        uint64_t v52 = 0;
        uint64_t v53 = v165 * (v34 - 1);
        Swift::Int v54 = v34 * v165;
        Swift::Int v55 = v27;
        uint64_t v158 = v27;
        uint64_t v56 = v27 * v165;
        uint64_t v57 = v163;
        do
        {
          if (v55 != v34 + v52 - 1)
          {
            if (!v57) {
              goto LABEL_200;
            }
            uint64_t v58 = v1;
            unint64_t v59 = v57 + v56;
            uint64_t v60 = v57;
            Swift::Int v164 = v57 + v53;
            outlined init with take of CamModelMetadata();
            if (v56 < v53 || v59 >= v60 + v54)
            {
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v1 = v58;
            }
            else
            {
              uint64_t v1 = v58;
              if (v56 != v53) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            outlined init with take of CamModelMetadata();
            uint64_t v57 = v163;
          }
          ++v55;
          --v52;
          v53 -= v165;
          v54 -= v165;
          v56 += v165;
        }
        while (v55 < v34 + v52);
        Swift::Int v27 = v158;
        Swift::Int v25 = v155;
      }
    }
LABEL_53:
    if (v34 < v25)
    {
      if (__OFSUB__(v34, v27)) {
        goto LABEL_192;
      }
      if (v34 - v27 < v151)
      {
        if (__OFADD__(v27, v151)) {
          goto LABEL_195;
        }
        if (v27 + v151 >= v25) {
          Swift::Int v62 = v25;
        }
        else {
          Swift::Int v62 = v27 + v151;
        }
        if (v62 < v27)
        {
LABEL_196:
          __break(1u);
          goto LABEL_197;
        }
        if (v34 != v62)
        {
          uint64_t v158 = v27;
          uint64_t v148 = v1;
          uint64_t v63 = *(void *)(v162 + 72);
          uint64_t v64 = v63 * (v34 - 1);
          uint64_t v163 = v63;
          Swift::Int v65 = v34 * v63;
          Swift::Int v155 = v62;
          while (1)
          {
            uint64_t v66 = 0;
            uint64_t v67 = v158;
            Swift::Int v164 = v65;
            Swift::Int v165 = v34;
            while (1)
            {
              uint64_t v68 = v170;
              outlined init with copy of RankedAction();
              uint64_t v69 = v64;
              outlined init with copy of RankedAction();
              double v70 = OUTLINED_FUNCTION_28_0();
              double v72 = *(double *)((char *)v68 + v71);
              if (v70 < v72)
              {
LABEL_74:
                outlined destroy of RankedAction((uint64_t)v171, (void (*)(void))type metadata accessor for RankedAction);
                outlined destroy of RankedAction((uint64_t)v170, (void (*)(void))type metadata accessor for RankedAction);
                goto LABEL_75;
              }
              if (v72 < v70) {
                break;
              }
              uint64_t v73 = *v171;
              uint64_t v74 = v171[1];
              OUTLINED_FUNCTION_26_1();
              if (v51)
              {
                OUTLINED_FUNCTION_25_1();
                if (v74 == v75) {
                  break;
                }
              }
              if (OUTLINED_FUNCTION_2_12()) {
                break;
              }
              uint64_t v76 = *v170;
              uint64_t v77 = v170[1];
              OUTLINED_FUNCTION_14_4();
              if (v51)
              {
                OUTLINED_FUNCTION_25_1();
                if (v77 == v78) {
                  goto LABEL_74;
                }
              }
              if (OUTLINED_FUNCTION_2_12()) {
                goto LABEL_74;
              }
              if (v73 == v76 && v74 == v77) {
                break;
              }
              OUTLINED_FUNCTION_46();
              if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
                break;
              }
              OUTLINED_FUNCTION_46();
              char v82 = _stringCompareWithSmolCheck(_:_:expecting:)();
              outlined destroy of RankedAction((uint64_t)v171, (void (*)(void))type metadata accessor for RankedAction);
              outlined destroy of RankedAction((uint64_t)v170, (void (*)(void))type metadata accessor for RankedAction);
              if ((v82 & 1) == 0) {
                goto LABEL_86;
              }
LABEL_75:
              if (!*v169) {
                goto LABEL_198;
              }
              uint64_t v64 = v69;
              Swift::Int v79 = v164;
              outlined init with take of CamModelMetadata();
              swift_arrayInitWithTakeFrontToBack();
              outlined init with take of CamModelMetadata();
              v66 -= v163;
              ++v67;
              Swift::Int v80 = v165;
              if (v165 == v67) {
                goto LABEL_87;
              }
            }
            outlined destroy of RankedAction((uint64_t)v171, (void (*)(void))type metadata accessor for RankedAction);
            outlined destroy of RankedAction((uint64_t)v170, (void (*)(void))type metadata accessor for RankedAction);
LABEL_86:
            Swift::Int v79 = v164;
            Swift::Int v80 = v165;
            uint64_t v64 = v69;
LABEL_87:
            Swift::Int v34 = v80 + 1;
            v64 += v163;
            Swift::Int v65 = v79 + v163;
            if (v34 == v155)
            {
              Swift::Int v34 = v155;
              uint64_t v1 = v148;
              Swift::Int v27 = v158;
              break;
            }
          }
        }
      }
    }
    if (v34 < v27) {
      goto LABEL_191;
    }
    if (swift_isUniquelyReferenced_nonNull_native()) {
      uint64_t v24 = v156;
    }
    else {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v156 + 2) + 1, 1, v156);
    }
    unint64_t v84 = *((void *)v24 + 2);
    unint64_t v83 = *((void *)v24 + 3);
    unint64_t v85 = v84 + 1;
    Swift::Int v165 = v34;
    if (v84 >= v83 >> 1) {
      uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v83 > 1), v84 + 1, 1, v24);
    }
    *((void *)v24 + 2) = v85;
    long long v86 = v24 + 32;
    uint64_t v87 = &v24[16 * v84 + 32];
    Swift::Int v88 = v165;
    *(void *)uint64_t v87 = v27;
    *((void *)v87 + 1) = v88;
    if (!v84)
    {
      unint64_t v85 = 1;
LABEL_137:
      Swift::Int v25 = v169[1];
      Swift::Int v26 = v165;
      if (v165 >= v25) {
        goto LABEL_157;
      }
      continue;
    }
    break;
  }
  while (2)
  {
    unint64_t v89 = v85 - 1;
    if (v85 >= 4)
    {
      uint64_t v94 = &v86[16 * v85];
      uint64_t v95 = *((void *)v94 - 8);
      uint64_t v96 = *((void *)v94 - 7);
      BOOL v100 = __OFSUB__(v96, v95);
      uint64_t v97 = v96 - v95;
      if (v100) {
        goto LABEL_176;
      }
      uint64_t v99 = *((void *)v94 - 6);
      uint64_t v98 = *((void *)v94 - 5);
      BOOL v100 = __OFSUB__(v98, v99);
      uint64_t v92 = v98 - v99;
      char v93 = v100;
      if (v100) {
        goto LABEL_177;
      }
      unint64_t v101 = v85 - 2;
      unint64_t v102 = &v86[16 * v85 - 32];
      uint64_t v104 = *(void *)v102;
      uint64_t v103 = *((void *)v102 + 1);
      BOOL v100 = __OFSUB__(v103, v104);
      uint64_t v105 = v103 - v104;
      if (v100) {
        goto LABEL_178;
      }
      BOOL v100 = __OFADD__(v92, v105);
      uint64_t v106 = v92 + v105;
      if (v100) {
        goto LABEL_180;
      }
      if (v106 >= v97)
      {
        uint64_t v124 = &v86[16 * v89];
        uint64_t v126 = *(void *)v124;
        uint64_t v125 = *((void *)v124 + 1);
        BOOL v100 = __OFSUB__(v125, v126);
        uint64_t v127 = v125 - v126;
        if (v100) {
          goto LABEL_186;
        }
        BOOL v117 = v92 < v127;
      }
      else
      {
LABEL_108:
        if (v93) {
          goto LABEL_179;
        }
        unint64_t v101 = v85 - 2;
        uint64_t v107 = &v86[16 * v85 - 32];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v110 = __OFSUB__(v108, v109);
        uint64_t v111 = v108 - v109;
        char v112 = v110;
        if (v110) {
          goto LABEL_181;
        }
        uint64_t v113 = &v86[16 * v89];
        uint64_t v115 = *(void *)v113;
        uint64_t v114 = *((void *)v113 + 1);
        BOOL v100 = __OFSUB__(v114, v115);
        uint64_t v116 = v114 - v115;
        if (v100) {
          goto LABEL_183;
        }
        if (__OFADD__(v111, v116)) {
          goto LABEL_185;
        }
        if (v111 + v116 < v92) {
          goto LABEL_120;
        }
        BOOL v117 = v92 < v116;
      }
      if (v117) {
        unint64_t v89 = v101;
      }
    }
    else
    {
      if (v85 == 3)
      {
        uint64_t v91 = *((void *)v24 + 4);
        uint64_t v90 = *((void *)v24 + 5);
        BOOL v100 = __OFSUB__(v90, v91);
        uint64_t v92 = v90 - v91;
        char v93 = v100;
        goto LABEL_108;
      }
      uint64_t v118 = *((void *)v24 + 4);
      uint64_t v119 = *((void *)v24 + 5);
      BOOL v100 = __OFSUB__(v119, v118);
      uint64_t v111 = v119 - v118;
      char v112 = v100;
LABEL_120:
      if (v112) {
        goto LABEL_182;
      }
      uint64_t v120 = &v86[16 * v89];
      uint64_t v122 = *(void *)v120;
      uint64_t v121 = *((void *)v120 + 1);
      BOOL v100 = __OFSUB__(v121, v122);
      uint64_t v123 = v121 - v122;
      if (v100) {
        goto LABEL_184;
      }
      if (v123 < v111) {
        goto LABEL_137;
      }
    }
    unint64_t v128 = v89 - 1;
    if (v89 - 1 >= v85)
    {
      __break(1u);
LABEL_173:
      __break(1u);
LABEL_174:
      __break(1u);
LABEL_175:
      __break(1u);
LABEL_176:
      __break(1u);
LABEL_177:
      __break(1u);
LABEL_178:
      __break(1u);
LABEL_179:
      __break(1u);
LABEL_180:
      __break(1u);
LABEL_181:
      __break(1u);
LABEL_182:
      __break(1u);
LABEL_183:
      __break(1u);
LABEL_184:
      __break(1u);
LABEL_185:
      __break(1u);
LABEL_186:
      __break(1u);
      goto LABEL_187;
    }
    if (!*v169) {
      goto LABEL_199;
    }
    uint64_t v129 = v24;
    int v130 = &v86[16 * v128];
    uint64_t v131 = *(void *)v130;
    uint64_t v132 = &v86[16 * v89];
    uint64_t v133 = *((void *)v132 + 1);
    specialized _merge<A>(low:mid:high:buffer:by:)();
    if (!v1)
    {
      if (v133 < v131) {
        goto LABEL_173;
      }
      if (v89 > *((void *)v129 + 2)) {
        goto LABEL_174;
      }
      *(void *)int v130 = v131;
      *(void *)&v86[16 * v128 + 8] = v133;
      unint64_t v134 = *((void *)v129 + 2);
      if (v89 >= v134) {
        goto LABEL_175;
      }
      unint64_t v85 = v134 - 1;
      memmove(&v86[16 * v89], v132 + 16, 16 * (v134 - 1 - v89));
      uint64_t v24 = v129;
      *((void *)v129 + 2) = v134 - 1;
      if (v134 <= 2) {
        goto LABEL_137;
      }
      continue;
    }
    break;
  }
LABEL_154:
  swift_bridgeObjectRelease();
  if (v150 >= -1) {
    goto LABEL_169;
  }
  __break(1u);
LABEL_156:
  uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v85 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_157:
  if (v85 >= 2)
  {
    uint64_t v141 = *v169;
    while (1)
    {
      unint64_t v142 = v85 - 2;
      if (v85 < 2) {
        break;
      }
      if (!v141) {
        goto LABEL_201;
      }
      unint64_t v143 = v24;
      uint64_t v144 = *(void *)&v24[16 * v142 + 32];
      uint64_t v145 = *(void *)&v24[16 * v85 + 24];
      specialized _merge<A>(low:mid:high:buffer:by:)();
      if (v1) {
        goto LABEL_154;
      }
      if (v145 < v144) {
        goto LABEL_188;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v143 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v143);
      }
      if (v142 >= *((void *)v143 + 2)) {
        goto LABEL_189;
      }
      uint64_t v146 = &v143[16 * v142 + 32];
      *(void *)uint64_t v146 = v144;
      *((void *)v146 + 1) = v145;
      unint64_t v147 = *((void *)v143 + 2);
      if (v85 > v147) {
        goto LABEL_190;
      }
      memmove(&v143[16 * v85 + 16], &v143[16 * v85 + 32], 16 * (v147 - v85));
      uint64_t v24 = v143;
      *((void *)v143 + 2) = v147 - 1;
      unint64_t v85 = v147 - 1;
      if (v147 <= 2) {
        goto LABEL_168;
      }
    }
LABEL_187:
    __break(1u);
LABEL_188:
    __break(1u);
LABEL_189:
    __break(1u);
LABEL_190:
    __break(1u);
LABEL_191:
    __break(1u);
LABEL_192:
    __break(1u);
LABEL_193:
    __break(1u);
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
    goto LABEL_196;
  }
LABEL_168:
  swift_bridgeObjectRelease();
  if (v150 >= -1)
  {
LABEL_169:
    *(void *)(v149 + 16) = 0;
    swift_bridgeObjectRelease();
    goto LABEL_170;
  }
LABEL_197:
  __break(1u);
LABEL_198:
  __break(1u);
LABEL_199:
  __break(1u);
LABEL_200:
  __break(1u);
LABEL_201:
  __break(1u);
}

uint64_t specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1, char a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = a1[1];
  swift_retain_n();
  Swift::Int v7 = _minimumMergeRunLength(_:)(v6);
  if (v7 >= v6)
  {
    if (v6 < 0) {
      goto LABEL_145;
    }
    if (v6) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v6, 1, a1, a2 & 1);
    }
    swift_release_n();
    return swift_release();
  }
  Swift::Int v8 = v7;
  uint64_t v101 = specialized static Array._allocateUninitialized(_:)(v6 / 2);
  uint64_t v102 = v6;
  uint64_t v104 = v9;
  char v110 = a2;
  uint64_t v99 = a1;
  if (v6 <= 0) {
    goto LABEL_107;
  }
  Swift::Int v100 = v8;
  Swift::Int v10 = 0;
  uint64_t v11 = *a1;
  uint64_t v98 = *a1 + 40;
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v111 = *a1;
  while (1)
  {
    Swift::Int v13 = v10++;
    if (v10 >= v6) {
      goto LABEL_32;
    }
    swift_getAtKeyPath();
    swift_getAtKeyPath();
    if (a2) {
      BOOL v14 = v113 < v114;
    }
    else {
      BOOL v14 = v114 < v113;
    }
    int v15 = v14;
    Swift::Int v10 = v13 + 2;
    uint64_t v11 = v111;
    if (v13 + 2 >= v6)
    {
LABEL_22:
      if (!v15) {
        goto LABEL_32;
      }
LABEL_25:
      if (v10 < v13) {
        goto LABEL_146;
      }
      if (v13 < v10)
      {
        uint64_t v19 = 16 * v10;
        uint64_t v20 = 16 * v13;
        Swift::Int v21 = v10;
        Swift::Int v22 = v13;
        do
        {
          if (v22 != --v21)
          {
            if (!v11) {
              goto LABEL_152;
            }
            uint64_t v23 = v11 + v19;
            uint64_t v24 = *(void *)(v11 + v20);
            uint64_t v25 = *(void *)(v11 + v20 + 8);
            *(_OWORD *)(v11 + v20) = *(_OWORD *)(v11 + v19 - 16);
            *(void *)(v23 - 16) = v24;
            *(void *)(v23 - 8) = v25;
          }
          ++v22;
          v19 -= 16;
          v20 += 16;
        }
        while (v22 < v21);
      }
      goto LABEL_32;
    }
    uint64_t v16 = v98 + 16 * v13;
    while (1)
    {
      swift_getAtKeyPath();
      swift_getAtKeyPath();
      BOOL v17 = (a2 & 1) != 0 ? v113 < v114 : v114 < v113;
      int v18 = v17;
      uint64_t v11 = v111;
      if (v15 != v18) {
        break;
      }
      v16 += 16;
      if (++v10 >= v102)
      {
        Swift::Int v6 = v102;
        Swift::Int v10 = v102;
        goto LABEL_22;
      }
    }
    Swift::Int v6 = v102;
    if (v15) {
      goto LABEL_25;
    }
LABEL_32:
    if (v10 < v6)
    {
      if (__OFSUB__(v10, v13)) {
        goto LABEL_144;
      }
      if (v10 - v13 < v100)
      {
        if (__OFADD__(v13, v100)) {
          goto LABEL_147;
        }
        if (v13 + v100 >= v6) {
          Swift::Int v26 = v6;
        }
        else {
          Swift::Int v26 = v13 + v100;
        }
        if (v26 < v13)
        {
LABEL_148:
          __break(1u);
          goto LABEL_149;
        }
        if (v10 != v26)
        {
          uint64_t v105 = v3;
          uint64_t v107 = v12;
          Swift::Int v27 = (void *)(v11 + 16 * v10);
          do
          {
            Swift::Int v28 = v13;
            Swift::Int v29 = v27;
            do
            {
              if (a2)
              {
                swift_getAtKeyPath();
                swift_getAtKeyPath();
                if (v113 >= v114) {
                  break;
                }
              }
              else
              {
                swift_getAtKeyPath();
                swift_getAtKeyPath();
                if (v114 >= v113) {
                  break;
                }
              }
              if (!v111) {
                goto LABEL_150;
              }
              uint64_t v30 = *v29;
              uint64_t v31 = v29[1];
              *(_OWORD *)Swift::Int v29 = *((_OWORD *)v29 - 1);
              *(v29 - 1) = v31;
              *(v29 - 2) = v30;
              v29 -= 2;
              ++v28;
            }
            while (v10 != v28);
            ++v10;
            v27 += 2;
          }
          while (v10 != v26);
          Swift::Int v10 = v26;
          uint64_t v3 = v105;
          uint64_t v12 = v107;
        }
      }
    }
    if (v10 < v13) {
      goto LABEL_143;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v33 = *((void *)v12 + 2);
    unint64_t v32 = *((void *)v12 + 3);
    unint64_t v34 = v33 + 1;
    uint64_t v11 = v111;
    if (v33 >= v32 >> 1)
    {
      uint64_t v87 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v32 > 1), v33 + 1, 1, v12);
      uint64_t v11 = v111;
      uint64_t v12 = v87;
    }
    *((void *)v12 + 2) = v34;
    uint64_t v35 = &v12[16 * v33 + 32];
    *(void *)uint64_t v35 = v13;
    *((void *)v35 + 1) = v10;
    if (v33) {
      break;
    }
    unint64_t v34 = 1;
LABEL_100:
    Swift::Int v6 = v102;
    if (v10 >= v102) {
      goto LABEL_108;
    }
  }
  uint64_t v36 = v12 + 32;
  Swift::Int v103 = v10;
  while (1)
  {
    unint64_t v37 = v34 - 1;
    if (v34 >= 4)
    {
      double v42 = &v36[16 * v34];
      uint64_t v43 = *((void *)v42 - 8);
      uint64_t v44 = *((void *)v42 - 7);
      BOOL v48 = __OFSUB__(v44, v43);
      uint64_t v45 = v44 - v43;
      if (v48) {
        goto LABEL_128;
      }
      uint64_t v47 = *((void *)v42 - 6);
      uint64_t v46 = *((void *)v42 - 5);
      BOOL v48 = __OFSUB__(v46, v47);
      uint64_t v40 = v46 - v47;
      char v41 = v48;
      if (v48) {
        goto LABEL_129;
      }
      unint64_t v49 = v34 - 2;
      uint64_t v50 = &v36[16 * v34 - 32];
      uint64_t v52 = *(void *)v50;
      uint64_t v51 = *((void *)v50 + 1);
      BOOL v48 = __OFSUB__(v51, v52);
      uint64_t v53 = v51 - v52;
      if (v48) {
        goto LABEL_130;
      }
      BOOL v48 = __OFADD__(v40, v53);
      uint64_t v54 = v40 + v53;
      if (v48) {
        goto LABEL_132;
      }
      if (v54 >= v45)
      {
        double v72 = &v36[16 * v37];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        BOOL v48 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v48) {
          goto LABEL_138;
        }
        BOOL v65 = v40 < v75;
        goto LABEL_89;
      }
    }
    else
    {
      if (v34 != 3)
      {
        uint64_t v66 = *((void *)v12 + 4);
        uint64_t v67 = *((void *)v12 + 5);
        BOOL v48 = __OFSUB__(v67, v66);
        uint64_t v59 = v67 - v66;
        char v60 = v48;
        goto LABEL_83;
      }
      uint64_t v39 = *((void *)v12 + 4);
      uint64_t v38 = *((void *)v12 + 5);
      BOOL v48 = __OFSUB__(v38, v39);
      uint64_t v40 = v38 - v39;
      char v41 = v48;
    }
    if (v41) {
      goto LABEL_131;
    }
    unint64_t v49 = v34 - 2;
    Swift::Int v55 = &v36[16 * v34 - 32];
    uint64_t v57 = *(void *)v55;
    uint64_t v56 = *((void *)v55 + 1);
    BOOL v58 = __OFSUB__(v56, v57);
    uint64_t v59 = v56 - v57;
    char v60 = v58;
    if (v58) {
      goto LABEL_133;
    }
    uint64_t v61 = &v36[16 * v37];
    uint64_t v63 = *(void *)v61;
    uint64_t v62 = *((void *)v61 + 1);
    BOOL v48 = __OFSUB__(v62, v63);
    uint64_t v64 = v62 - v63;
    if (v48) {
      goto LABEL_135;
    }
    if (__OFADD__(v59, v64)) {
      goto LABEL_137;
    }
    if (v59 + v64 >= v40)
    {
      BOOL v65 = v40 < v64;
LABEL_89:
      if (v65) {
        unint64_t v37 = v49;
      }
      goto LABEL_91;
    }
LABEL_83:
    if (v60) {
      goto LABEL_134;
    }
    uint64_t v68 = &v36[16 * v37];
    uint64_t v70 = *(void *)v68;
    uint64_t v69 = *((void *)v68 + 1);
    BOOL v48 = __OFSUB__(v69, v70);
    uint64_t v71 = v69 - v70;
    if (v48) {
      goto LABEL_136;
    }
    if (v71 < v59) {
      goto LABEL_100;
    }
LABEL_91:
    unint64_t v76 = v37 - 1;
    if (v37 - 1 >= v34)
    {
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
      goto LABEL_139;
    }
    if (!v11) {
      goto LABEL_151;
    }
    uint64_t v77 = v3;
    uint64_t v78 = v36;
    Swift::Int v79 = &v36[16 * v76];
    uint64_t v80 = *(void *)v79;
    unint64_t v81 = v37;
    char v82 = &v78[16 * v37];
    uint64_t v83 = *((void *)v82 + 1);
    uint64_t v106 = (char *)(v11 + 16 * *(void *)v82);
    uint64_t v108 = (char *)(v11 + 16 * *(void *)v79);
    unint64_t v84 = v11 + 16 * v83;
    swift_retain();
    specialized _merge<A>(low:mid:high:buffer:by:)(v108, v106, v84, v104, v110 & 1);
    uint64_t v3 = v77;
    if (v77) {
      break;
    }
    if (v83 < v80) {
      goto LABEL_125;
    }
    if (v81 > *((void *)v12 + 2)) {
      goto LABEL_126;
    }
    unint64_t v85 = v81;
    *(void *)Swift::Int v79 = v80;
    uint64_t v36 = v12 + 32;
    *(void *)&v12[16 * v76 + 40] = v83;
    unint64_t v86 = *((void *)v12 + 2);
    if (v81 >= v86) {
      goto LABEL_127;
    }
    unint64_t v34 = v86 - 1;
    memmove(v82, v82 + 16, 16 * (v86 - 1 - v85));
    *((void *)v12 + 2) = v86 - 1;
    a2 = v110;
    uint64_t v11 = v111;
    Swift::Int v10 = v103;
    if (v86 <= 2) {
      goto LABEL_100;
    }
  }
LABEL_105:
  swift_bridgeObjectRelease();
  if (v102 >= -1) {
    goto LABEL_122;
  }
  __break(1u);
LABEL_107:
  uint64_t v12 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v34 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_108:
  if (v34 >= 2)
  {
    uint64_t v88 = *v99;
    uint64_t v109 = *v99;
    while (1)
    {
      unint64_t v89 = v34 - 2;
      if (v34 < 2) {
        break;
      }
      if (!v88) {
        goto LABEL_153;
      }
      uint64_t v90 = v3;
      uint64_t v91 = *(void *)&v12[16 * v89 + 32];
      uint64_t v92 = *(void *)&v12[16 * v34 + 24];
      char v112 = (char *)(v88 + 16 * v91);
      char v93 = (char *)(v88 + 16 * *(void *)&v12[16 * v34 + 16]);
      unint64_t v94 = v88 + 16 * v92;
      swift_retain();
      specialized _merge<A>(low:mid:high:buffer:by:)(v112, v93, v94, v104, v110 & 1);
      uint64_t v3 = v90;
      if (v90) {
        goto LABEL_105;
      }
      if (v92 < v91) {
        goto LABEL_140;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v12);
      }
      if (v89 >= *((void *)v12 + 2)) {
        goto LABEL_141;
      }
      uint64_t v95 = &v12[16 * v89 + 32];
      *(void *)uint64_t v95 = v91;
      *((void *)v95 + 1) = v92;
      unint64_t v96 = *((void *)v12 + 2);
      if (v34 > v96) {
        goto LABEL_142;
      }
      memmove(&v12[16 * v34 + 16], &v12[16 * v34 + 32], 16 * (v96 - v34));
      *((void *)v12 + 2) = v96 - 1;
      unint64_t v34 = v96 - 1;
      uint64_t v88 = v109;
      if (v96 <= 2) {
        goto LABEL_121;
      }
    }
LABEL_139:
    __break(1u);
LABEL_140:
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    __break(1u);
LABEL_144:
    __break(1u);
LABEL_145:
    __break(1u);
LABEL_146:
    __break(1u);
LABEL_147:
    __break(1u);
    goto LABEL_148;
  }
LABEL_121:
  swift_bridgeObjectRelease();
  if (v102 >= -1)
  {
LABEL_122:
    *(void *)(v101 + 16) = 0;
    swift_release_n();
    swift_bridgeObjectRelease();
    return swift_release();
  }
LABEL_149:
  __break(1u);
LABEL_150:
  swift_release_n();
  __break(1u);
LABEL_151:
  swift_release_n();
  __break(1u);
LABEL_152:
  swift_release_n();
  __break(1u);
LABEL_153:
  uint64_t result = swift_release_n();
  __break(1u);
  return result;
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)()
{
  OUTLINED_FUNCTION_11_2();
  uint64_t v40 = v0;
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v31 = v5;
  uint64_t v38 = type metadata accessor for RankedAction();
  MEMORY[0x1F4188790](v38);
  uint64_t v39 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_44();
  MEMORY[0x1F4188790](v7);
  char v41 = (uint64_t *)((char *)&v29 - v8);
  OUTLINED_FUNCTION_44();
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v29 - v11);
  uint64_t v37 = v2;
  uint64_t v30 = v4;
  if (v2 == v4) {
    goto LABEL_27;
  }
  uint64_t v13 = *(void *)(v10 + 72);
  uint64_t v14 = v13 * (v37 - 1);
  uint64_t v15 = v13 * v37;
  uint64_t v33 = v13;
  unint64_t v34 = (unint64_t)"ettingsFlowDelegatePlugin";
  unint64_t v32 = 0x80000001C9DA20E0;
  while (2)
  {
    uint64_t v16 = 0;
    uint64_t v17 = v31;
    uint64_t v35 = v15;
    uint64_t v36 = v14;
    while (1)
    {
      outlined init with copy of RankedAction();
      outlined init with copy of RankedAction();
      uint64_t v18 = *(int *)(v38 + 28);
      double v19 = *(double *)((char *)v41 + v18);
      double v20 = *(double *)((char *)v12 + v18);
      if (v19 < v20)
      {
LABEL_14:
        outlined destroy of RankedAction((uint64_t)v41, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for RankedAction);
        uint64_t v26 = v35;
        uint64_t v25 = v36;
        goto LABEL_15;
      }
      if (v20 < v19) {
        break;
      }
      uint64_t v21 = *v41;
      uint64_t v22 = v41[1];
      OUTLINED_FUNCTION_14_4();
      if (v27 && v22 == v32) {
        break;
      }
      if (OUTLINED_FUNCTION_2_12()) {
        break;
      }
      uint64_t v23 = *v12;
      uint64_t v24 = v12[1];
      OUTLINED_FUNCTION_27_0();
      if (v27 && v24 == (v34 | 0x8000000000000000) || (OUTLINED_FUNCTION_2_12() & 1) != 0) {
        goto LABEL_14;
      }
      BOOL v27 = v21 == v23 && v22 == v24;
      if (v27) {
        break;
      }
      OUTLINED_FUNCTION_33();
      if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
        break;
      }
      OUTLINED_FUNCTION_33();
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      outlined destroy of RankedAction((uint64_t)v41, (void (*)(void))type metadata accessor for RankedAction);
      outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for RankedAction);
      uint64_t v26 = v35;
      uint64_t v25 = v36;
      if ((v28 & 1) == 0) {
        goto LABEL_26;
      }
LABEL_15:
      if (!*v40)
      {
        __break(1u);
        return;
      }
      outlined init with take of CamModelMetadata();
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of CamModelMetadata();
      v16 -= v33;
      if (v37 == ++v17) {
        goto LABEL_26;
      }
    }
    outlined destroy of RankedAction((uint64_t)v41, (void (*)(void))type metadata accessor for RankedAction);
    outlined destroy of RankedAction((uint64_t)v12, (void (*)(void))type metadata accessor for RankedAction);
    uint64_t v26 = v35;
    uint64_t v25 = v36;
LABEL_26:
    uint64_t v14 = v25 + v33;
    uint64_t v15 = v26 + v33;
    if (++v37 != v30) {
      continue;
    }
    break;
  }
LABEL_27:
  OUTLINED_FUNCTION_3_5();
}

uint64_t specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, char a5)
{
  if (a3 == a2) {
    return swift_release();
  }
  uint64_t v7 = a3;
  uint64_t v9 = *a4;
  uint64_t v10 = *a4 + 16 * a3;
  while (2)
  {
    uint64_t v11 = a1;
    uint64_t v12 = (void *)v10;
    do
    {
      if (a5)
      {
        swift_getAtKeyPath();
        uint64_t result = swift_getAtKeyPath();
        if (v16 >= v17) {
          break;
        }
      }
      else
      {
        swift_getAtKeyPath();
        uint64_t result = swift_getAtKeyPath();
        if (v17 >= v16) {
          break;
        }
      }
      if (!v9)
      {
        __break(1u);
        return result;
      }
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      *(_OWORD *)uint64_t v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v14;
      *(v12 - 2) = v13;
      v12 -= 2;
      ++v11;
    }
    while (v7 != v11);
    ++v7;
    v10 += 16;
    if (v7 != a2) {
      continue;
    }
    break;
  }
  return swift_release();
}

void specialized _merge<A>(low:mid:high:buffer:by:)()
{
  OUTLINED_FUNCTION_11_2();
  unint64_t v1 = v0;
  unint64_t v3 = v2;
  unint64_t v5 = v4;
  unint64_t v7 = v6;
  uint64_t v75 = type metadata accessor for RankedAction();
  MEMORY[0x1F4188790](v75);
  uint64_t v74 = (uint64_t *)((char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  OUTLINED_FUNCTION_44();
  MEMORY[0x1F4188790](v9);
  uint64_t v73 = (uint64_t *)((char *)&v66 - v10);
  OUTLINED_FUNCTION_44();
  uint64_t v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v66 - v13);
  MEMORY[0x1F4188790](v12);
  double v16 = (uint64_t *)((char *)&v66 - v15);
  uint64_t v18 = *(void *)(v17 + 72);
  if (!v18)
  {
    __break(1u);
LABEL_112:
    __break(1u);
LABEL_113:
    __break(1u);
    goto LABEL_114;
  }
  int64_t v19 = v5 - v7;
  BOOL v20 = v5 - v7 == 0x8000000000000000 && v18 == -1;
  if (v20) {
    goto LABEL_112;
  }
  int64_t v21 = v3 - v5;
  if (v3 - v5 == 0x8000000000000000 && v18 == -1) {
    goto LABEL_113;
  }
  uint64_t v71 = v18;
  unint64_t v72 = v3;
  uint64_t v23 = v19 / v18;
  uint64_t v24 = v21 / v18;
  if (v19 / v18 >= v21 / v18)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, v21 / v18);
    unint64_t v26 = v1 + v24 * v18;
    if (v24 * v18 < 1 || v7 >= v5) {
      goto LABEL_106;
    }
    uint64_t v29 = -v18;
    unint64_t v69 = (unint64_t)"ettingsFlowDelegatePlugin";
    unint64_t v68 = 0x80000001C9DA20E0;
    unint64_t v30 = v72;
    unint64_t v70 = v1;
    while (1)
    {
      unint64_t v31 = v30;
      unint64_t v72 = v26;
      unint64_t v32 = v26 + v29;
      uint64_t v33 = v73;
      outlined init with copy of RankedAction();
      unint64_t v34 = v5 + v29;
      uint64_t v35 = (uint64_t)v74;
      outlined init with copy of RankedAction();
      uint64_t v36 = *(int *)(v75 + 28);
      double v37 = *(double *)(v35 + v36);
      double v38 = *(double *)((char *)v33 + v36);
      if (v37 < v38)
      {
LABEL_23:
        char v39 = 1;
        goto LABEL_29;
      }
      if (v38 < v37) {
        break;
      }
      uint64_t v40 = *v74;
      uint64_t v41 = v74[1];
      OUTLINED_FUNCTION_26_1();
      if (v20 && v41 == v68) {
        break;
      }
      OUTLINED_FUNCTION_45();
      char v39 = 0;
      if ((OUTLINED_FUNCTION_2_12() & 1) == 0)
      {
        uint64_t v47 = *v73;
        OUTLINED_FUNCTION_27_0();
        if (v20 && v48 == (v69 | 0x8000000000000000)) {
          goto LABEL_23;
        }
        uint64_t v67 = v48;
        if (OUTLINED_FUNCTION_2_12()) {
          goto LABEL_23;
        }
        if (v40 == v47 && v41 == v67) {
          break;
        }
        OUTLINED_FUNCTION_45();
        char v39 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          OUTLINED_FUNCTION_45();
          char v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
        }
      }
LABEL_29:
      uint64_t v42 = v29;
      unint64_t v43 = v31 + v29;
      outlined destroy of RankedAction((uint64_t)v74, (void (*)(void))type metadata accessor for RankedAction);
      outlined destroy of RankedAction((uint64_t)v73, (void (*)(void))type metadata accessor for RankedAction);
      if (v39)
      {
        BOOL v44 = v31 < v5 || v43 >= v5;
        unint64_t v30 = v43;
        if (!v44)
        {
          uint64_t v29 = v42;
          if (v31 != v5) {
            OUTLINED_FUNCTION_36();
          }
          unint64_t v5 = v34;
          unint64_t v1 = v70;
          unint64_t v26 = v72;
          goto LABEL_49;
        }
        OUTLINED_FUNCTION_37();
        unint64_t v5 = v34;
        unint64_t v1 = v70;
        unint64_t v26 = v72;
      }
      else
      {
        BOOL v45 = v31 < v72 || v43 >= v72;
        unint64_t v30 = v43;
        if (!v45)
        {
          uint64_t v29 = v42;
          if (v31 != v72) {
            OUTLINED_FUNCTION_36();
          }
          unint64_t v26 = v32;
          unint64_t v1 = v70;
          goto LABEL_49;
        }
        OUTLINED_FUNCTION_37();
        unint64_t v26 = v32;
        unint64_t v1 = v70;
      }
      uint64_t v29 = v42;
LABEL_49:
      if (v26 <= v1 || v5 <= v7)
      {
        uint64_t v18 = v71;
        goto LABEL_106;
      }
    }
    char v39 = 0;
    goto LABEL_29;
  }
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v19 / v18);
  uint64_t v25 = v23 * v18;
  unint64_t v26 = v1 + v23 * v18;
  if (v25 >= 1 && v5 < v72)
  {
    uint64_t v74 = (uint64_t *)"ettingsFlowDelegatePlugin";
    uint64_t v73 = (void *)0x80000001C9DA20E0;
    do
    {
      outlined init with copy of RankedAction();
      outlined init with copy of RankedAction();
      uint64_t v50 = *(int *)(v75 + 28);
      double v51 = *(double *)((char *)v14 + v50);
      double v52 = *(double *)((char *)v16 + v50);
      if (v51 < v52) {
        goto LABEL_66;
      }
      if (v52 < v51
        || (uint64_t v55 = *v14, v56 = (void *)v14[1], *v14 == 0xD000000000000021) && v56 == v73
        || (OUTLINED_FUNCTION_2_12() & 1) != 0)
      {
LABEL_77:
        outlined destroy of RankedAction((uint64_t)v14, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction((uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
LABEL_78:
        unint64_t v57 = v1;
        uint64_t v18 = v71;
        v1 += v71;
        if (v7 < v57 || v7 >= v1)
        {
          OUTLINED_FUNCTION_37();
        }
        else if (v7 != v57)
        {
          OUTLINED_FUNCTION_36();
        }
        unint64_t v53 = v5;
        goto LABEL_89;
      }
      if ((uint64_t v60 = *v16, OUTLINED_FUNCTION_26_1(), v20) && v61 == ((unint64_t)v74 | 0x8000000000000000)
        || (unint64_t v70 = v61, (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
      {
LABEL_66:
        outlined destroy of RankedAction((uint64_t)v14, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction((uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
      }
      else
      {
        if (v55 == v60 && v56 == (void *)v70) {
          goto LABEL_77;
        }
        OUTLINED_FUNCTION_42();
        if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
          goto LABEL_77;
        }
        OUTLINED_FUNCTION_42();
        char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
        outlined destroy of RankedAction((uint64_t)v14, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RankedAction((uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
        if ((v63 & 1) == 0) {
          goto LABEL_78;
        }
      }
      uint64_t v18 = v71;
      unint64_t v53 = v5 + v71;
      if (v7 < v5 || v7 >= v53)
      {
        OUTLINED_FUNCTION_37();
      }
      else if (v7 != v5)
      {
        OUTLINED_FUNCTION_36();
      }
LABEL_89:
      v7 += v18;
      BOOL v59 = v1 >= v26 || v53 >= v72;
      unint64_t v5 = v53;
    }
    while (!v59);
  }
LABEL_106:
  int64_t v64 = v26 - v1;
  if (v18 != -1 || v64 != 0x8000000000000000)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v1, v64 / v18);
    OUTLINED_FUNCTION_3_5();
    return;
  }
LABEL_114:
  __break(1u);
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(char *a1, char *a2, unint64_t a3, char *a4, char a5)
{
  unint64_t v5 = a4;
  unint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = (a2 - a1) / 16;
  uint64_t v10 = a3 - (void)a2;
  uint64_t v11 = (uint64_t)(a3 - (void)a2) / 16;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - (void)a2) / 16, a4);
    uint64_t v13 = &v5[16 * v11];
    if (v8 >= v7 || v10 < 16) {
      goto LABEL_27;
    }
    BOOL v20 = (char *)(a3 - 16);
    while (1)
    {
      int64_t v21 = v20 + 16;
      uint64_t v22 = v7 - 16;
      if (a5)
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v27 >= v28) {
          goto LABEL_30;
        }
      }
      else
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v28 >= v27)
        {
LABEL_30:
          BOOL v23 = v21 != v13 || v20 >= v13;
          uint64_t v22 = v13 - 16;
          v13 -= 16;
          if (!v23) {
            goto LABEL_36;
          }
          goto LABEL_35;
        }
      }
      BOOL v25 = v21 != v7 || v20 >= v7;
      v7 -= 16;
      if (!v25) {
        goto LABEL_36;
      }
LABEL_35:
      *(_OWORD *)BOOL v20 = *(_OWORD *)v22;
LABEL_36:
      v20 -= 16;
      if (v7 <= v8 || v13 <= v5) {
        goto LABEL_27;
      }
    }
  }
  uint64_t v12 = a2 - a1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (a2 - a1) / 16, a4);
  uint64_t v13 = &v5[16 * v9];
  if ((unint64_t)v7 < a3 && v12 >= 16)
  {
    do
    {
      if (a5)
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v27 < v28) {
          goto LABEL_19;
        }
      }
      else
      {
        swift_getAtKeyPath();
        swift_getAtKeyPath();
        if (v28 < v27)
        {
LABEL_19:
          uint64_t v15 = v7;
          BOOL v16 = v8 == v7;
          v7 += 16;
          if (v16) {
            goto LABEL_12;
          }
LABEL_11:
          *(_OWORD *)uint64_t v8 = *(_OWORD *)v15;
          goto LABEL_12;
        }
      }
      uint64_t v15 = v5;
      BOOL v16 = v8 == v5;
      v5 += 16;
      if (!v16) {
        goto LABEL_11;
      }
LABEL_12:
      v8 += 16;
    }
    while (v5 < v13 && (unint64_t)v7 < a3);
  }
  unint64_t v7 = v8;
LABEL_27:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5, (v13 - v5) / 16, v7);
  swift_release();
  return 1;
}

void outlined bridged method (mbgnn) of @objc CAARSchemaCAARTieBreakersExecuted.tiebreakers.setter(uint64_t a1, void *a2)
{
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARTieBreaker);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(a2, sel_setTiebreakers_, isa);
}

uint64_t specialized _copySequenceToContiguousArray<A>(_:)(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 16);
  unint64_t v2 = (void *)MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v3 = result;
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = v2 + 4;
    while (1)
    {
      uint64_t v7 = *(void *)(v3 + 8 * v5 + 32);
      if (!v4)
      {
        unint64_t v8 = v2[3];
        if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0) {
          goto LABEL_26;
        }
        int64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
        if (v9 <= 1) {
          uint64_t v10 = 1;
        }
        else {
          uint64_t v10 = v9;
        }
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(offset: Int, element: Double)>);
        uint64_t v11 = (void *)swift_allocObject();
        uint64_t v12 = (uint64_t)(_swift_stdlib_malloc_size(v11) - 32) / 16;
        v11[2] = v10;
        v11[3] = 2 * v12;
        unint64_t v13 = (unint64_t)(v11 + 4);
        unint64_t v14 = v2[3];
        unint64_t v15 = v14 >> 1;
        if (v2[2])
        {
          if (v11 != v2 || v13 >= (unint64_t)&v2[2 * v15 + 4]) {
            memmove(v11 + 4, v2 + 4, 16 * v15);
          }
          v2[2] = 0;
        }
        unint64_t v6 = (void *)(v13 + 16 * v15);
        uint64_t v4 = (v12 & 0x7FFFFFFFFFFFFFFFLL) - (v14 >> 1);
        uint64_t result = swift_release();
        unint64_t v2 = v11;
      }
      BOOL v17 = __OFSUB__(v4--, 1);
      if (v17) {
        break;
      }
      *unint64_t v6 = v5;
      v6[1] = v7;
      v6 += 2;
      if (v1 == ++v5)
      {
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_21;
      }
    }
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v4 = 0;
LABEL_21:
  unint64_t v18 = v2[3];
  if (v18 < 2) {
    return (uint64_t)v2;
  }
  unint64_t v19 = v18 >> 1;
  BOOL v17 = __OFSUB__(v19, v4);
  unint64_t v20 = v19 - v4;
  if (!v17)
  {
    v2[2] = v20;
    return (uint64_t)v2;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t specialized CodeBasedRankerHandler.extractUserHistoryFeatures(rankedActions:siriSignalsContainer:)(uint64_t *a1, uint64_t a2)
{
  v23[3] = type metadata accessor for SiriSignalsContainer();
  v23[4] = &protocol witness table for SiriSignalsContainer;
  v23[0] = a2;
  outlined init with copy of SignalProviding((uint64_t)v23, (uint64_t)v22);
  outlined init with copy of SignalProviding((uint64_t)v23, (uint64_t)v21);
  BOOL v17 = a1;
  uint64_t v4 = *a1;
  uint64_t v5 = *(void *)(*a1 + 16);
  swift_retain();
  if (v5)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_14;
    }
    while (1)
    {
      *BOOL v17 = v4;
      uint64_t v4 = type metadata accessor for RankedAction();
      unint64_t v6 = 0;
      uint64_t v16 = v4;
      while (1)
      {
        uint64_t v7 = *v17;
        uint64_t v19 = v4;
        unint64_t v20 = &protocol witness table for RankedAction;
        __swift_allocate_boxed_opaque_existential_1(v18);
        if (v6 >= *(void *)(v7 + 16)) {
          break;
        }
        outlined init with copy of RankedAction();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()(v7);
        }
        uint64_t v8 = specialized FeatureExtracting.extract(from:)(v18);
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v8);
        uint64_t v10 = v9;
        swift_bridgeObjectRelease();
        specialized Dictionary.update(other:allowDuplicateKeys:)(v10, 0);
        swift_bridgeObjectRelease();
        *BOOL v17 = v7;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
        uint64_t v11 = *v17;
        uint64_t v4 = v16;
        uint64_t v19 = v16;
        unint64_t v20 = &protocol witness table for RankedAction;
        __swift_allocate_boxed_opaque_existential_1(v18);
        if (v6 >= *(void *)(v11 + 16)) {
          goto LABEL_13;
        }
        outlined init with copy of RankedAction();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew()(v11);
        }
        uint64_t v12 = specialized FeatureExtracting.extract(from:)(v18);
        specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
        uint64_t v14 = v13;
        swift_bridgeObjectRelease();
        specialized Dictionary.update(other:allowDuplicateKeys:)(v14, 0);
        swift_bridgeObjectRelease();
        *BOOL v17 = v11;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
        uint64_t v4 = v16;
        if (v5 == ++v6) {
          goto LABEL_11;
        }
      }
      __break(1u);
LABEL_13:
      __break(1u);
LABEL_14:
      uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew()(v4);
    }
  }
LABEL_11:
  outlined destroy of AppLaunchCountFeatureExtractor((uint64_t)v21);
  outlined destroy of AppLaunchRecencyFeatureExtractor((uint64_t)v22);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
}

uint64_t specialized CodeBasedRankerHandler.extractDisambiguationFeatures(rankedActions:siriSignalsContainer:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  MEMORY[0x1F4188790](v4 - 8);
  unint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35[3] = type metadata accessor for SiriSignalsContainer();
  v35[4] = &protocol witness table for SiriSignalsContainer;
  v35[0] = a2;
  Array<A>.topTwo.getter(*a1, (uint64_t)v6);
  uint64_t v7 = type metadata accessor for TopTwo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) != 1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    uint64_t v12 = type metadata accessor for RankedAction();
    uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 72);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1C9D9D130;
    outlined init with copy of RankedAction();
    uint64_t v30 = v13;
    outlined init with copy of RankedAction();
    swift_retain();
    outlined destroy of RankedAction((uint64_t)v6, (void (*)(void))type metadata accessor for TopTwo);
    uint64_t v15 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam12RankedActionVG_10Foundation4UUIDVs5NeverOTg503_s7d104Cam22CodeBasedRankerHandlerC29extractDisambiguationFeatures13rankedActions20siriSignalsContainerySayAA12fG97VGz_AA0aM10Containing_ptF10Foundation4UUIDVAHcfu_33_1cb444e52906099451ab9d686f8988b8AhMTf3nnnpk_nTf1cn_n(v14);
    swift_setDeallocating();
    specialized _ContiguousArrayStorage.__deallocating_deinit();
    uint64_t v16 = specialized Set.init<A>(_:)(v15);
    uint64_t v17 = *a1;
    outlined init with copy of SignalProviding((uint64_t)v35, (uint64_t)&v31);
    uint64_t v18 = swift_bridgeObjectRetain();
    DisambiguationFeatureExtractor.init(rankedActions:siriSignalsContainer:)(v18, &v31, v34);
    specialized Sequence.filter(_:)(0, *(void *)(v17 + 16), v16, a1);
    uint64_t v20 = v19;
    uint64_t v28 = *(void *)(v19 + 16);
    if (!v28)
    {
LABEL_14:
      swift_bridgeObjectRelease();
      outlined destroy of DisambiguationFeatureExtractor((uint64_t)v34);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
    }
    swift_bridgeObjectRetain();
    uint64_t v21 = 0;
    uint64_t v29 = v20;
    while (1)
    {
      unint64_t v22 = *(void *)(v20 + 8 * v21 + 32);
      uint64_t v23 = *a1;
      uint64_t v32 = v12;
      uint64_t v33 = &protocol witness table for RankedAction;
      __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v31);
      if ((v22 & 0x8000000000000000) != 0) {
        break;
      }
      if (v22 >= *(void *)(v23 + 16)) {
        goto LABEL_17;
      }
      outlined init with copy of RankedAction();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = specialized _ArrayBuffer._consumeAndCreateNew()(v23);
      }
      uint64_t v24 = specialized FeatureExtracting.extract(from:)(&v31);
      specialized _dictionaryUpCast<A, B, C, D>(_:)(v24);
      uint64_t v26 = v25;
      swift_bridgeObjectRelease();
      specialized Dictionary.update(other:allowDuplicateKeys:)(v26, 0);
      ++v21;
      swift_bridgeObjectRelease();
      *a1 = v23;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v31);
      uint64_t v20 = v29;
      if (v28 == v21)
      {
        swift_bridgeObjectRelease();
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  swift_retain();
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v6, &demangling cache variable for type metadata for TopTwo?);
  if (one-time initialization token for ranker != -1) {
LABEL_18:
  }
    swift_once();
  uint64_t v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.ranker);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl(&dword_1C9CFE000, v9, v10, "Fewer than 2 actions, will not extract disambiguation features.", v11, 2u);
    MEMORY[0x1CB78E290](v11, -1, -1);
  }

  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v35);
}

uint64_t specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  type metadata accessor for RankedAction();
  _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type RankedAction and conformance RankedAction, (void (*)(uint64_t))type metadata accessor for RankedAction);
  return Array<A>.encode(to:)();
}

{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  lazy protocol witness table accessor for type [String : MLFeatureValue] and conformance <> [A : B]();
  return Dictionary<>.encode(to:)();
}

{
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  lazy protocol witness table accessor for type MLFeatureValue and conformance MLFeatureValue((unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  return Dictionary<>.encode(to:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t sub_1C9D3BE08()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)()
{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)();
}

uint64_t sub_1C9D3BE78()
{
  uint64_t v1 = type metadata accessor for CamModelMetadata();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + v3 + 40) != 1) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = v0 + v3 + *(int *)(v1 + 28);
  uint64_t v6 = type metadata accessor for Locale();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(void *a1)
{
  uint64_t v2 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_9_6(v2);
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1);
}

{
  return specialized implicit closure #2 in implicit closure #1 in AnyEncodable.init<A>(_:)(a1);
}

unint64_t lazy protocol witness table accessor for type AnyEncodable and conformance AnyEncodable()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable;
  if (!lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyEncodable and conformance AnyEncodable);
  }
  return result;
}

uint64_t partial apply for closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  return closure #1 in CodeBasedRankerHandler.extractFeatures(actions:rankerContext:)(a1, *(void **)(v3 + 16), a2, a3);
}

void partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(uint64_t *a1@<X8>)
{
  closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)(*(void *)(v1 + 16), a1);
}

uint64_t outlined init with copy of UUID?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_24_3();
  v4();
  return a2;
}

void partial apply for closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  closure #1 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, v3, a3);
}

uint64_t partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)()
{
  return partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t objectdestroy_19Tm()
{
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v3 = v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v7 = *(void *)(v6 + 64);
  unint64_t v8 = (v4 + ((v7 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & ~v4;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_4(v9);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (v7 + v11 + v8) & ~v11;
  uint64_t v16 = *(void *)(v13 + 64);
  swift_release();
  swift_release();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v14(v0 + v5, v1);
  swift_bridgeObjectRelease();
  v14(v0 + v8, v1);
  if (!__swift_getEnumTagSinglePayload(v0 + v12, 1, v1)) {
    v14(v0 + v12, v1);
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, ((v16 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v4 | v11 | 7);
}

uint64_t partial apply for closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)()
{
  return partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))closure #3 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:));
}

uint64_t partial apply for closure #4 in CodeBasedRankerHandler.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v2 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_4(v2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  unint64_t v10 = (v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = (v7 + v10 + 16) & ~v7;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_0_4(v12);
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  unint64_t v17 = (v9 + *(unsigned __int8 *)(v14 + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = *(void *)(v1 + 16);
  uint64_t v19 = *(void *)(v1 + 24);
  uint64_t v20 = *(void *)(v1 + v10);
  uint64_t v21 = *(void *)(v1 + v10 + 8);
  uint64_t v22 = *(void *)(v1 + ((*(void *)(v16 + 64) + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(v18, v19, v1 + v8, v20, v21, v1 + v11, v1 + v17, v22);
}

uint64_t outlined destroy of DisambiguationFeatureExtractor(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AppLaunchCountFeatureExtractor(uint64_t a1)
{
  return a1;
}

uint64_t outlined destroy of AppLaunchRecencyFeatureExtractor(uint64_t a1)
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type UUID and conformance UUID(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of RankedAction()
{
  uint64_t v1 = OUTLINED_FUNCTION_30_0();
  v2(v1);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_24_3();
  v3();
  return v0;
}

uint64_t outlined init with take of CamModelMetadata()
{
  uint64_t v1 = OUTLINED_FUNCTION_30_0();
  v2(v1);
  OUTLINED_FUNCTION_1_3();
  uint64_t v3 = OUTLINED_FUNCTION_35();
  v4(v3);
  return v0;
}

uint64_t outlined destroy of RankedAction(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

uint64_t OUTLINED_FUNCTION_2_12()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_9_6(uint64_t a1)
{
  return a1 - 8;
}

uint64_t OUTLINED_FUNCTION_11_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_3@<X0>(uint64_t a1@<X8>)
{
  *(void *)(v1 - 256) = a1;
  return 0;
}

uint64_t OUTLINED_FUNCTION_16_2()
{
  return *(void *)(v0 - 376);
}

uint64_t OUTLINED_FUNCTION_18_3()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_21_2()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_22_3()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_23_3()
{
  return swift_beginAccess();
}

double OUTLINED_FUNCTION_28_0()
{
  return *(double *)(v0 + *(int *)(*(void *)(v1 - 120) + 28));
}

uint64_t OUTLINED_FUNCTION_30_0()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_33()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_34()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_35()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_36()
{
  return swift_arrayInitWithTakeBackToFront();
}

uint64_t OUTLINED_FUNCTION_37()
{
  return swift_arrayInitWithTakeFrontToBack();
}

uint64_t OUTLINED_FUNCTION_39()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_41(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *(void *)(v3 - 312);
  uint64_t v6 = *(void *)(v3 - 360);
  return outlined init with copy of UUID?(v5, v6, a3);
}

uint64_t OUTLINED_FUNCTION_45()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_46()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_47()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_48()
{
  return static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, (v0 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_50()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52()
{
  return *(void *)(v0 - 368);
}

uint64_t OUTLINED_FUNCTION_54()
{
  return swift_allocObject();
}

uint64_t OUTLINED_FUNCTION_55(uint64_t a1)
{
  *(void *)(v1 - 128) = a1;
  return v1 - 128;
}

uint64_t ReflectedStringConvertible.description.getter(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror?);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Mirror();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  unint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v26 - v11;
  v27[3] = a1;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v27);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(boxed_opaque_existential_1, v1, a1);
  Mirror.init(reflecting:)();
  Mirror.subjectType.getter();
  v27[0] = _typeName(_:qualified:)();
  v27[1] = v14;
  v15._uint64_t countAndFlagsBits = 40;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  Mirror.superclassMirror.getter();
  if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v6) == 1)
  {
    outlined destroy of Mirror?((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v5, v6);
    Mirror.children.getter();
    uint64_t v16 = ReflectedStringConvertible.printElements(_:)();
    uint64_t v18 = v17;
    swift_release();
    v26._uint64_t countAndFlagsBits = v16;
    v26._object = v18;
    swift_bridgeObjectRetain();
    v19._uint64_t countAndFlagsBits = 8236;
    v19._object = (void *)0xE200000000000000;
    String.append(_:)(v19);
    swift_bridgeObjectRelease();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  Mirror.children.getter();
  uint64_t v20 = ReflectedStringConvertible.printElements(_:)();
  uint64_t v22 = v21;
  swift_release();
  v23._uint64_t countAndFlagsBits = v20;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._uint64_t countAndFlagsBits = 41;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
  return v27[0];
}

uint64_t outlined destroy of Mirror?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Mirror?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t ReflectedStringConvertible.printElements(_:)()
{
  uint64_t v13 = 0;
  unint64_t v14 = 0xE000000000000000;
  swift_retain();
  dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  swift_retain();
  dispatch thunk of _AnyIteratorBoxBase.next()();
  outlined init with take of (label: String?, value: Any)?((uint64_t)v9, (uint64_t)v10);
  if (v12)
  {
    char v0 = 1;
    do
    {
      uint64_t v2 = v10[0];
      uint64_t v1 = (void *)v10[1];
      outlined init with take of Any(&v11, v9);
      if (v1)
      {
        if ((v0 & 1) == 0)
        {
          v3._uint64_t countAndFlagsBits = 8236;
          v3._object = (void *)0xE200000000000000;
          String.append(_:)(v3);
        }
        v4._uint64_t countAndFlagsBits = v2;
        v4._object = v1;
        String.append(_:)(v4);
        swift_bridgeObjectRelease();
        v5._uint64_t countAndFlagsBits = 8250;
        v5._object = (void *)0xE200000000000000;
        String.append(_:)(v5);
        _print_unlocked<A, B>(_:_:)();
        v6._uint64_t countAndFlagsBits = 0;
        v6._object = (void *)0xE000000000000000;
        String.append(_:)(v6);
        swift_bridgeObjectRelease();
        char v0 = 0;
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      dispatch thunk of _AnyIteratorBoxBase.next()();
      outlined init with take of (label: String?, value: Any)?((uint64_t)v9, (uint64_t)v10);
    }
    while (v12);
    uint64_t v7 = v13;
  }
  else
  {
    uint64_t v7 = 0;
  }
  swift_release_n();
  return v7;
}

uint64_t outlined init with take of (label: String?, value: Any)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (label: String?, value: Any)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ActionAmbiguityHeuristicHandler.init(forModelWithName:)(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for CamModelMetadata();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  long long v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v28 - v12;
  uint64_t v14 = v2 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_overrideDisambiguateForRankingEvaluationRate;
  *(void *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 8) = 1;
  CamModelVersion.init(_:)();
  if (v3)
  {
    swift_bridgeObjectRelease();
    type metadata accessor for ActionAmbiguityHeuristicHandler();
    OUTLINED_FUNCTION_0_14();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v19 = v15;
    uint64_t v20 = v17;
    uint64_t v29 = v18;
    uint64_t v30 = v16;
    uint64_t v21 = type metadata accessor for Locale();
    uint64_t v28 = a2;
    uint64_t v22 = v21;
    __swift_storeEnumTagSinglePayload((uint64_t)v7, 1, 1, v21);
    uint64_t v23 = (uint64_t)&v11[*(int *)(v8 + 28)];
    __swift_storeEnumTagSinglePayload(v23, 1, 1, v22);
    uint64_t v24 = v28;
    *(void *)long long v11 = v31;
    *((void *)v11 + 1) = v24;
    uint64_t v25 = v30;
    *((void *)v11 + 2) = v19;
    *((void *)v11 + 3) = v25;
    uint64_t v26 = v29;
    *((void *)v11 + 4) = v20;
    *((void *)v11 + 5) = v26;
    v11[48] = 2;
    outlined assign with take of Locale?((uint64_t)v7, v23);
    outlined init with take of CamModelMetadata((uint64_t)v11, (uint64_t)v13);
    outlined init with take of CamModelMetadata((uint64_t)v13, v2 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata);
  }
  return v2;
}

uint64_t ActionAmbiguityHeuristicHandler.getMetadata()@<X0>(uint64_t a1@<X8>)
{
  return outlined init with copy of CamModelMetadata(v1 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata, a1);
}

MLDictionaryFeatureProvider __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ActionAmbiguityHeuristicHandler.predict(from:)(Swift::OpaquePointer from)
{
  id v4 = ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)(0, 0.0);
  if (v2) {
    return (MLDictionaryFeatureProvider)v1;
  }
  uint64_t v1 = v4;
  uint64_t v5 = "uationWasSelected";
  uint64_t v6 = specialized Dictionary.subscript.getter(0xD000000000000024, 0x80000001C9DA23C0, from._rawValue);
  if (!v6)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (!OUTLINED_FUNCTION_2_13(v13)) {
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_6_5();
    OUTLINED_FUNCTION_7_7();
    OUTLINED_FUNCTION_5_5(4.8149e-34);
    uint64_t v15 = v14 + 8;
LABEL_10:
    unint64_t v16 = (unint64_t)v5 | 0x8000000000000000;
LABEL_11:
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9CFE000, v12, (os_log_type_t)0x1Cu, "[ActionAmbiguityHeuristicHandler] Feature not found: %s. Returning default prediction output", (uint8_t *)from._rawValue, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    goto LABEL_12;
  }
  uint64_t v7 = (void *)v6;
  double v8 = MLMultiArray.toDoubleScalar()();

  if (v9)
  {
LABEL_4:

    return (MLDictionaryFeatureProvider)v1;
  }
  uint64_t v17 = specialized Dictionary.subscript.getter(0xD00000000000001CLL, 0x80000001C9DA23F0, from._rawValue);
  if (!v17)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.info.getter();
    if (!OUTLINED_FUNCTION_2_13(v29)) {
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_1_11();
    uint64_t v42 = OUTLINED_FUNCTION_6_5();
    OUTLINED_FUNCTION_5_5(4.8149e-34);
    unint64_t v16 = 0x80000001C9DA23F0;
    uint64_t v15 = 0xD00000000000001CLL;
    goto LABEL_11;
  }
  uint64_t v18 = (void *)v17;
  double v19 = MLMultiArray.toDoubleScalar()();

  if (v20) {
    goto LABEL_4;
  }
  uint64_t v5 = "second_top_action_confidence";
  uint64_t v21 = specialized Dictionary.subscript.getter(0xD00000000000001DLL, 0x80000001C9DA2410, from._rawValue);
  if (!v21)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.info.getter();
    if (!OUTLINED_FUNCTION_2_13(v31)) {
      goto LABEL_13;
    }
    OUTLINED_FUNCTION_1_11();
    OUTLINED_FUNCTION_6_5();
    OUTLINED_FUNCTION_7_7();
    OUTLINED_FUNCTION_5_5(4.8149e-34);
    uint64_t v15 = v32 + 1;
    goto LABEL_10;
  }
  uint64_t v22 = (void *)v21;
  Swift::Bool v23 = MLMultiArray.toBoolScalar()();

  if (v24) {
    goto LABEL_4;
  }
  if (v8 < 0.0)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v12, v26)) {
      goto LABEL_13;
    }
    double v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)double v27 = 134217984;
    OUTLINED_FUNCTION_4_7();
    _os_log_impl(&dword_1C9CFE000, v12, v26, "[ActionAmbiguityHeuristicHandler] Cannot resolve ambiguity because top ranked confidence difference is %f. Returning default prediction output", v27, 0xCu);
LABEL_12:
    OUTLINED_FUNCTION_2_2();
LABEL_13:

    return (MLDictionaryFeatureProvider)v1;
  }
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  __swift_project_value_buffer(v33, (uint64_t)static Logger.ambiguityHandling);
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)OUTLINED_FUNCTION_1_11();
    *(_DWORD *)uint64_t v36 = 134217984;
    OUTLINED_FUNCTION_4_7();
    _os_log_impl(&dword_1C9CFE000, v34, v35, "[ActionAmbiguityHeuristicHandler] Top two action confidence difference is %f", v36, 0xCu);
    OUTLINED_FUNCTION_2_2();
  }

  int v37 = ActionAmbiguityHeuristicHandler.denyDisambiguationOverride(secondTopActionConfidence:topTwoContainsAppShortcut:)(v23, v19);
  double v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_2_13(v39))
  {
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v40 + 8) = 1024;
    LODWORD(v42) = v37 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C9CFE000, v38, (os_log_type_t)v34, "[ActionAmbiguityHeuristicHandler] isTie: %{BOOL}d isDisambiguationDenyOverride: %{BOOL}d", (uint8_t *)v40, 0xEu);
    OUTLINED_FUNCTION_2_2();
  }

  id v41 = ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)((v8 < 0.01) & (v37 ^ 1u), 1.0 - v8);
  return (MLDictionaryFeatureProvider)v41;
}

id ActionAmbiguityHeuristicHandler.createFeatureProvider(modelScore:modelDecision:)(uint64_t a1, double a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
  uint64_t inited = swift_initStackObject();
  *(void *)(inited + 32) = 0xD000000000000025;
  *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
  *(void *)(inited + 40) = 0x80000001C9DA3780;
  unint64_t v6 = type metadata accessor for MLMultiArray();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
  uint64_t v7 = lazy protocol witness table accessor for type [Double] and conformance [A](&lazy protocol witness table cache variable for type [Double] and conformance [A], &demangling cache variable for type metadata for [Double]);
  uint64_t v9 = OUTLINED_FUNCTION_9_7(v7, v8);
  if (v2)
  {
    swift_bridgeObjectRelease();
    *(void *)(inited + 16) = 0;
    swift_setDeallocating();
    return (id)specialized _ContiguousArrayStorage.__deallocating_deinit();
  }
  else
  {
    *(void *)(inited + 80) = 0xD000000000000021;
    *(void *)(inited + 72) = v6;
    *(void *)(inited + 48) = v9;
    *(void *)(inited + 88) = 0x80000001C9DA37B0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C9D9D280;
    *(double *)(v10 + 32) = a2;
    *(void *)(inited + 96) = OUTLINED_FUNCTION_9_7(v10, v11);
    *(void *)(inited + 120) = v6;
    *(void *)(inited + 128) = 0xD000000000000024;
    *(void *)(inited + 136) = 0x80000001C9DA37E0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
    uint64_t v12 = swift_allocObject();
    *(_OWORD *)(v12 + 16) = xmmword_1C9D9D280;
    *(void *)(v12 + 32) = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type [Double] and conformance [A](&lazy protocol witness table cache variable for type [Int] and conformance [A], &demangling cache variable for type metadata for [Int]);
    lazy protocol witness table accessor for type Int and conformance Int();
    uint64_t v13 = MLMultiArray.init<A>(_:)();
    *(void *)(inited + 168) = v6;
    *(void *)(inited + 144) = v13;
    Dictionary.init(dictionaryLiteral:)();
    id v15 = objc_allocWithZone(MEMORY[0x1E4F1E930]);
    return @nonobjc MLDictionaryFeatureProvider.init(dictionary:)();
  }
}

uint64_t ActionAmbiguityHeuristicHandler.denyDisambiguationOverride(secondTopActionConfidence:topTwoContainsAppShortcut:)(char a1, double a2)
{
  if (a1)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_3_9(v6))
    {
      char v12 = 0;
LABEL_21:

      return v12 & 1;
    }
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    uint64_t v8 = "[ActionAmbiguityHeuristicHandler] disambiguation not denied since it contains an app shortcut";
LABEL_19:
    _os_log_impl(&dword_1C9CFE000, v5, v2, v8, v7, 2u);
    char v12 = a1 ^ 1;
    MEMORY[0x1CB78E290](v7, -1, -1);
    goto LABEL_21;
  }
  if (CamFeatureFlag.isEnabled.getter(6u))
  {
    if (ForcedDisambiguation.decision()())
    {
      if (a2 >= 0.5)
      {
        char v12 = 0;
        return v12 & 1;
      }
      if (one-time initialization token for ambiguityHandling != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.ambiguityHandling);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_3_9(v11))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "[ActionAmbiguityHeuristicHandler] disambiguation denied since second top does not have enough confidence";
        goto LABEL_19;
      }
    }
    else
    {
      if (one-time initialization token for ambiguityHandling != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.ambiguityHandling);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_3_9(v14))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v7 = 0;
        uint64_t v8 = "[ActionAmbiguityHeuristicHandler] disambiguation denied for disambiguateAllRankingTies rate limiting. ";
        goto LABEL_19;
      }
    }
    char v12 = 1;
    goto LABEL_21;
  }
  char v12 = 1;
  return v12 & 1;
}

uint64_t ActionAmbiguityHeuristicHandler.__deallocating_deinit()
{
  outlined destroy of CamModelMetadata(v0 + OBJC_IVAR____TtC7SiriCam31ActionAmbiguityHeuristicHandler_modelMetadata);
  OUTLINED_FUNCTION_0_14();
  uint64_t v2 = *(unsigned int *)(v1 + 48);
  uint64_t v3 = *(unsigned __int16 *)(v1 + 52);
  return MEMORY[0x1F4186488](v0, v2, v3);
}

uint64_t ObjC metadata update function for ActionAmbiguityHeuristicHandler()
{
  return type metadata accessor for ActionAmbiguityHeuristicHandler();
}

uint64_t type metadata accessor for ActionAmbiguityHeuristicHandler()
{
  uint64_t result = type metadata singleton initialization cache for ActionAmbiguityHeuristicHandler;
  if (!type metadata singleton initialization cache for ActionAmbiguityHeuristicHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ActionAmbiguityHeuristicHandler()
{
  uint64_t result = type metadata accessor for CamModelMetadata();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for ModelHandler.getMetadata() in conformance ActionAmbiguityHeuristicHandler@<X0>(uint64_t a1@<X8>)
{
  return ActionAmbiguityHeuristicHandler.getMetadata()(a1);
}

MLDictionaryFeatureProvider protocol witness for ModelHandler.predict(from:) in conformance ActionAmbiguityHeuristicHandler(Swift::OpaquePointer a1)
{
  return ActionAmbiguityHeuristicHandler.predict(from:)(a1);
}

uint64_t outlined destroy of (String, Any)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Any));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type [Double] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_11()
{
  return swift_slowAlloc();
}

BOOL OUTLINED_FUNCTION_2_13(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_3_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_4_7()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_5_5(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_6_5()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_9_7(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return MEMORY[0x1F40DB778](va, v2, v3);
}

void *static CaarFeatureLogger.map(from:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  OUTLINED_FUNCTION_1_2();
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_9_3();
  uint64_t v8 = v6 - v7;
  MEMORY[0x1F4188790](v9);
  os_log_type_t v11 = (char *)&v29 - v10;
  id v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0188]), sel_init);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = MEMORY[0x1E4FBC860];
    uint64_t v32 = MEMORY[0x1E4FBC860];
    uint64_t v15 = *(void *)(a1 + 16);
    if (v15)
    {
      uint64_t v30 = v13;
      uint64_t v31 = a1;
      uint64_t v16 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v17 = *(void *)(v4 + 72);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of (UUID, [String : MLFeatureValue])(v16, (uint64_t)v11);
        uint64_t v18 = *(int *)(v2 + 48);
        uint64_t v19 = type metadata accessor for UUID();
        uint64_t v20 = *(void *)(v19 - 8);
        (*(void (**)(uint64_t, char *, uint64_t))(v20 + 16))(v8, v11, v19);
        uint64_t v21 = *(void *)&v11[v18];
        *(void *)(v8 + v18) = v21;
        swift_bridgeObjectRetain();
        uint64_t v22 = static CaarFeatureLogger.extractSelfFeatures(actionFeatures:)(v8, v21);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v8, v19);
        uint64_t v23 = outlined destroy of (UUID, [String : MLFeatureValue])((uint64_t)v11);
        if (v22)
        {
          MEMORY[0x1CB78D3D0](v23);
          if (*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        v16 += v17;
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease();
      uint64_t v14 = v32;
      uint64_t v13 = v30;
    }
    outlined bridged method (mbnn) of @objc CAARSchemaCAARFeaturesGenerated.actionFeatureSets.setter(v14, v13);
  }
  else
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.ranker);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      double v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v27 = 0;
      _os_log_impl(&dword_1C9CFE000, v25, v26, "Failed to create CAARSchemaCAARFeaturesGenerated SELF message.", v27, 2u);
      MEMORY[0x1CB78E290](v27, -1, -1);
    }

    return 0;
  }
  return v13;
}

uint64_t static CaarFeatureLogger.extractSelfFeatures(actionFeatures:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_9_3();
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v57 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  uint64_t v11 = v10 - 8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_9_3();
  uint64_t v14 = v12 - v13;
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v57 - v16;
  uint64_t v58 = v5;
  uint64_t v18 = *(void (**)(void))(v5 + 16);
  OUTLINED_FUNCTION_28_1();
  v18();
  *(void *)&v17[*(int *)(v11 + 56)] = a2;
  id v19 = objc_allocWithZone(MEMORY[0x1E4FA0150]);
  swift_bridgeObjectRetain();
  id v20 = objc_msgSend(v19, sel_init);
  if (!v20)
  {
LABEL_29:
    outlined destroy of (UUID, [String : MLFeatureValue])((uint64_t)v17);
    return (uint64_t)v20;
  }
  unint64_t v57 = v17;
  OUTLINED_FUNCTION_28_1();
  v18();
  uint64_t v21 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v9, v14, v3);
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  OUTLINED_FUNCTION_28_1();
  v18();
  swift_bridgeObjectRetain();
  id v22 = SISchemaUUID.__allocating_init(nsuuid:)();
  OUTLINED_FUNCTION_35_0((uint64_t)v22, sel_setActionCandidateId_);

  uint64_t v23 = (void *)specialized Dictionary.subscript.getter(0xD000000000000013, 0x80000001C9DA2430, a2);
  uint64_t v24 = v3;
  uint64_t v25 = a2;
  if (v23)
  {
    OUTLINED_FUNCTION_17_3(v23);
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsAppInForeground_);
  }
  os_log_type_t v26 = (void *)OUTLINED_FUNCTION_24_4(0xD000000000000014, (uint64_t)"plugin_affinity_rank");
  if (v26)
  {
    objc_msgSend(v20, sel_setIsTopRankedPlugin_, OUTLINED_FUNCTION_17_3(v26) == (id)2);
  }
  double v27 = (void *)specialized Dictionary.subscript.getter(0x535F5050415F5349, 0xEF54554354524F48, a2);
  if (v27)
  {
    OUTLINED_FUNCTION_17_3(v27);
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsAutoshortcut_);
  }
  uint64_t v28 = (void *)specialized Dictionary.subscript.getter(0x705F6C6E5F706F74, 0xEC00000065737261, a2);
  if (v28)
  {
    OUTLINED_FUNCTION_17_3(v28);
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsTopRankedParse_);
  }
  uint64_t v29 = (void *)specialized Dictionary.subscript.getter(0x65737261705F6C6ELL, 0xEE0061626F72705FLL, a2);
  if (v29)
  {
    id v22 = v29;
    objc_msgSend(v29, sel_doubleValue);
    *(float *)&double v30 = v30;
    objc_msgSend(v20, sel_setNlParseProbability_, v30);
  }
  uint64_t v31 = (void *)OUTLINED_FUNCTION_24_4(0xD000000000000016, (uint64_t)"pommes_high_confidence");
  if (v31)
  {
    OUTLINED_FUNCTION_17_3(v31);
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsHighConfidence_);
  }
  uint64_t v32 = (void *)OUTLINED_FUNCTION_24_4(0xD000000000000018, (uint64_t)"repeated_flow_handler_id");
  if (v32)
  {
    OUTLINED_FUNCTION_17_3(v32);
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsRepeatedFlowHandlerId_);
  }
  uint64_t v33 = (void *)0xD00000000000001ELL;
  unint64_t v34 = (void *)OUTLINED_FUNCTION_32_1((uint64_t)"ambiguous_first_run_prev_shown");
  if (v34)
  {
    os_log_type_t v35 = v34;
    [v34 (SEL)0x1F6482E18];
    OUTLINED_FUNCTION_21_3();
    objc_msgSend(v20, sel_setIsAmbiguousFirstRunPreviouslyShown_);
  }
  uint64_t v36 = (void *)OUTLINED_FUNCTION_32_1((uint64_t)"app_shortcut_action_identifier");
  if (v36)
  {
    uint64_t v33 = v36;
    id v37 = objc_msgSend(v36, sel_stringValue);
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v39;

    uint64_t v41 = v38;
    uint64_t v24 = v3;
    uint64_t v42 = v40;
    uint64_t v25 = a2;
    outlined bridged method (mbnn) of @objc CAARSchemaCAARActionFeatureSet.actionIdentifier.setter(v41, v42, v20);
  }
  unint64_t v43 = (void *)OUTLINED_FUNCTION_26_2((uint64_t)"domain_protection_level");
  if (!v43)
  {
LABEL_24:
    BOOL v45 = (void *)OUTLINED_FUNCTION_26_2((uint64_t)"IS_ENABLED_APP_SHORTCUT");
    if (v45)
    {
      OUTLINED_FUNCTION_17_3(v45);
      OUTLINED_FUNCTION_21_3();
      objc_msgSend(v20, sel_setIsAutoShortcutEnabled_);
    }
    uint64_t v46 = (void *)OUTLINED_FUNCTION_24_4(0xD000000000000025, (uint64_t)"is_interpretable_as_universal_command");
    if (v46)
    {
      OUTLINED_FUNCTION_17_3(v46);
      OUTLINED_FUNCTION_21_3();
      objc_msgSend(v20, sel_setIsInterpretableAsUniversalCommand_);
    }
    uint64_t v47 = (void *)static CaarFeatureLogger.extractAppHistorySelfFeatures(_:)(v25);
    OUTLINED_FUNCTION_35_0((uint64_t)v47, sel_setAppHistoryFeatures_);

    OUTLINED_FUNCTION_33_0();
    id v48 = static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(v25, (Class *)0x1E4FA0170, &one-time initialization token for APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumAppDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumAppDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumAppDisambiguationsLastOneHour_, (const char **)&selRef_setNumAppDisambiguationsLastSixHours_, (const char **)&selRef_setNumAppDisambiguationsLastOneDay_, (const char **)&selRef_setNumAppDisambiguationsLastSevenDays_, (const char **)&selRef_setNumAppDisambiguationsLastTwentyEightDays_, (const char **)&selRef_setNumAppDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ, &static CAARFeatures.SELECTED_APP_DISAMBIGUATION_FREQ, (const char **)&selRef_setNumSelectedAppDisambiguationsTwoMinutes_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastOneHour_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastSixHours_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastOneDay_,
            (const char **)&selRef_setNumSelectedAppDisambiguationsLastSevenDays_,
            (const char **)&selRef_setNumSelectedAppDisambiguationsLastTwentyEightDays_,
            (const char **)&selRef_setNumSelectedAppDisambiguationsLastInfinity_,
            v51,
            v53,
            v55,
            0xD00000000000002ALL,
            0x80000001C9DA22C0,
            (const char **)&selRef_setMinutesSinceLastDisambiguationSameApps_,
            (uint64_t)one-time initialization function for APP_DISAMBIGUATION_FREQ,
            (uint64_t)one-time initialization function for SELECTED_APP_DISAMBIGUATION_FREQ);
    OUTLINED_FUNCTION_35_0((uint64_t)v48, sel_setAppLevelDisambiguationHistory_);

    OUTLINED_FUNCTION_33_0();
    id v49 = static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(v25, (Class *)0x1E4FA0158, &one-time initialization token for ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumActionDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumActionDisambiguationsLasTenMinutes_, (const char **)&selRef_setNumActionDisambiguationsLastOneHour_, (const char **)&selRef_setNumActionDisambiguationsLastSixHours_, (const char **)&selRef_setNumActionDisambiguationsLastOneDay_, (const char **)&selRef_setNumActionDisambiguationsLastSevenDays_, (const char **)&selRef_setNumActionDisambiguationsLastTwentyEightDays_, (const char **)&selRef_setNumActionDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ, &static CAARFeatures.SELECTED_ACTION_DISAMBIGUATION_FREQ, (const char **)&selRef_setNumSelectedActionDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastOneHour_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastSixHours_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastOneDay_,
            (const char **)&selRef_setNumSelectedActionDisambiguationsLastSevenDays_,
            (const char **)&selRef_setNumSelectedActionDisambiguationsLastTwentyEightDays_,
            (const char **)&selRef_setNumSelectedActionDisambiguationsLastInfinity_,
            v52,
            v54,
            v56,
            0xD00000000000002DLL,
            0x80000001C9DA2350,
            (const char **)&selRef_setMinutesSinceLastDisambiguationForSameActions_,
            (uint64_t)one-time initialization function for ACTION_DISAMBIGUATION_FREQ,
            (uint64_t)one-time initialization function for SELECTED_ACTION_DISAMBIGUATION_FREQ);
    uint64_t v50 = swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_35_0(v50, sel_setActionLevelDisambiguationHistory_);

    (*(void (**)(char *, uint64_t))(v21 + 8))(v9, v24);
    uint64_t v17 = v57;
    goto LABEL_29;
  }
  uint64_t result = (uint64_t)OUTLINED_FUNCTION_17_3(v43);
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (result <= 0x7FFFFFFF)
  {
    objc_msgSend(v20, sel_setDomainProtectionLevel_, result);

    goto LABEL_24;
  }
  __break(1u);
  return result;
}

uint64_t static CaarFeatureLogger.extractAppHistorySelfFeatures(_:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0168]), sel_init);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  uint64_t v4 = (void *)specialized Dictionary.subscript.getter(0xD00000000000001ALL, 0x80000001C9DA2270, a1);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)objc_msgSend(v4, sel_int64Value));
    if ((v6 & 0x100000000) == 0) {
      objc_msgSend(v3, sel_setNumMinutesSinceAppLastLaunched_, v6);
    }
  }
  uint64_t v7 = (void *)specialized Dictionary.subscript.getter(0xD00000000000001BLL, 0x80000001C9DA3830, a1);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v9 = static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)objc_msgSend(v7, sel_int64Value));
    if ((v9 & 0x100000000) == 0) {
      objc_msgSend(v3, sel_setNumMinutesSinceAppInstalled_, v9);
    }
  }
  if (one-time initialization token for APP_LAUNCH_COUNT != -1) {
    swift_once();
  }
  id v34 = v3;
  p_flags = &value witness table for UserHistoryTieBreaker.flags;
  uint64_t v11 = static CAARFeatures.APP_LAUNCH_COUNT;
  uint64_t v12 = *(void *)(static CAARFeatures.APP_LAUNCH_COUNT + 16);
  if (v12)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v13 = v11 + 40;
    uint64_t v14 = MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_13_4())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_22_4();
        }
        OUTLINED_FUNCTION_30_1();
        if (v15) {
          OUTLINED_FUNCTION_18_4();
        }
        OUTLINED_FUNCTION_25_2();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v13 += 16;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease();
    p_flags = (_DWORD *)(&value witness table for UserHistoryTieBreaker + 80);
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v14 + 16) == 1)
  {
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v17 = (void *)OUTLINED_FUNCTION_27_1();
    swift_bridgeObjectRelease();
    if (v17)
    {
      unint64_t v18 = (unint64_t)objc_msgSend(v17, sel_int64Value);
      if ((v18 & 0x8000000000000000) != 0 || HIDWORD(v18)) {
        goto LABEL_69;
      }
      objc_msgSend(v34, sel_setNumAppLaunchesLastOneDay_, v18);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v19 = *((void *)p_flags + 395);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v21 = v19 + 40;
    uint64_t v22 = MEMORY[0x1E4FBC860];
    do
    {
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_13_4())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_22_4();
        }
        OUTLINED_FUNCTION_30_1();
        if (v15) {
          OUTLINED_FUNCTION_18_4();
        }
        OUTLINED_FUNCTION_25_2();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v21 += 16;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    p_flags = (_DWORD *)(&value witness table for UserHistoryTieBreaker + 80);
  }
  else
  {
    uint64_t v22 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v22 + 16) == 1)
  {
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v23 = (void *)OUTLINED_FUNCTION_27_1();
    swift_bridgeObjectRelease();
    if (v23)
    {
      unint64_t v24 = (unint64_t)objc_msgSend(v23, sel_int64Value);
      if ((v24 & 0x8000000000000000) != 0 || HIDWORD(v24)) {
        goto LABEL_69;
      }
      objc_msgSend(v34, sel_setNumAppLaunchesLastSevenDays_, v24);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v25 = *((void *)p_flags + 395);
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    double v27 = (uint64_t *)(v25 + 40);
    uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v29 = *(v27 - 1);
      uint64_t v30 = *v27;
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_13_4())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_22_4();
        }
        OUTLINED_FUNCTION_30_1();
        if (v15) {
          OUTLINED_FUNCTION_18_4();
        }
        void v28[2] = 0xE400000000000000;
        v28[3362809040] = v29;
        v28[3362809041] = v30;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v27 += 2;
      --v26;
    }
    while (v26);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v28 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v28[2] != 1)
  {
    swift_release();
    return (uint64_t)v34;
  }
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v31 = (void *)OUTLINED_FUNCTION_27_1();
  swift_bridgeObjectRelease();
  if (!v31) {
    return (uint64_t)v34;
  }
  id v16 = v34;
  if (((unint64_t)objc_msgSend(v31, sel_int64Value) & 0x8000000000000000) == 0)
  {
    OUTLINED_FUNCTION_6_6();
    if (!v32)
    {
      objc_msgSend(v34, sel_setNumAppLaunchesLastTwentyEightDays_);

      return (uint64_t)v16;
    }
  }
LABEL_69:
  OUTLINED_FUNCTION_1_0();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(uint64_t a1)
{
  return static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(a1, (Class *)0x1E4FA0170, &one-time initialization token for APP_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.APP_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumAppDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumAppDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumAppDisambiguationsLastOneHour_, (const char **)&selRef_setNumAppDisambiguationsLastSixHours_, (const char **)&selRef_setNumAppDisambiguationsLastOneDay_, (const char **)&selRef_setNumAppDisambiguationsLastSevenDays_, (const char **)&selRef_setNumAppDisambiguationsLastTwentyEightDays_, (const char **)&selRef_setNumAppDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ, &static CAARFeatures.SELECTED_APP_DISAMBIGUATION_FREQ, (const char **)&selRef_setNumSelectedAppDisambiguationsTwoMinutes_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastOneHour_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastSixHours_, (const char **)&selRef_setNumSelectedAppDisambiguationsLastOneDay_,
           (const char **)&selRef_setNumSelectedAppDisambiguationsLastSevenDays_,
           (const char **)&selRef_setNumSelectedAppDisambiguationsLastTwentyEightDays_,
           (const char **)&selRef_setNumSelectedAppDisambiguationsLastInfinity_,
           0xD00000000000002ELL,
           0x80000001C9DA22F0,
           (SEL *)&selRef_setWasAppSelectedInLastDisambiguation_,
           0xD00000000000002ALL,
           0x80000001C9DA22C0,
           (const char **)&selRef_setMinutesSinceLastDisambiguationSameApps_,
           (uint64_t)one-time initialization function for APP_DISAMBIGUATION_FREQ,
           (uint64_t)one-time initialization function for SELECTED_APP_DISAMBIGUATION_FREQ);
}

id static CaarFeatureLogger.extractActionLevelDisambiguationHistorySelfFeatures(_:)(uint64_t a1)
{
  return static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(a1, (Class *)0x1E4FA0158, &one-time initialization token for ACTION_DISAMBIGUATION_FREQ, (uint64_t)&static CAARFeatures.ACTION_DISAMBIGUATION_FREQ, (SEL *)&selRef_setNumActionDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumActionDisambiguationsLasTenMinutes_, (const char **)&selRef_setNumActionDisambiguationsLastOneHour_, (const char **)&selRef_setNumActionDisambiguationsLastSixHours_, (const char **)&selRef_setNumActionDisambiguationsLastOneDay_, (const char **)&selRef_setNumActionDisambiguationsLastSevenDays_, (const char **)&selRef_setNumActionDisambiguationsLastTwentyEightDays_, (const char **)&selRef_setNumActionDisambiguationsLastInfinity_, &one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ, &static CAARFeatures.SELECTED_ACTION_DISAMBIGUATION_FREQ, (const char **)&selRef_setNumSelectedActionDisambiguationsLastTwoMinutes_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastTenMinutes_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastOneHour_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastSixHours_, (const char **)&selRef_setNumSelectedActionDisambiguationsLastOneDay_,
           (const char **)&selRef_setNumSelectedActionDisambiguationsLastSevenDays_,
           (const char **)&selRef_setNumSelectedActionDisambiguationsLastTwentyEightDays_,
           (const char **)&selRef_setNumSelectedActionDisambiguationsLastInfinity_,
           0xD000000000000031,
           0x80000001C9DA2380,
           (SEL *)&selRef_setWasActionSelectedInLastDisambiguation_,
           0xD00000000000002DLL,
           0x80000001C9DA2350,
           (const char **)&selRef_setMinutesSinceLastDisambiguationForSameActions_,
           (uint64_t)one-time initialization function for ACTION_DISAMBIGUATION_FREQ,
           (uint64_t)one-time initialization function for SELECTED_ACTION_DISAMBIGUATION_FREQ);
}

id static CaarFeatureLogger.extractAppLevelDisambiguationHistorySelfFeatures(_:)(uint64_t a1, Class *a2, void *a3, uint64_t a4, SEL *a5, const char **a6, const char **a7, const char **a8, const char **a9, const char **a10, const char **a11, const char **a12, void *a13, uint64_t *a14, const char **a15, const char **a16, const char **a17, const char **a18, const char **a19, const char **a20,const char **a21,const char **a22,uint64_t a23,uint64_t a24,SEL *a25,uint64_t a26,uint64_t a27,const char **a28,uint64_t a29,uint64_t a30)
{
  v268 = a7;
  v269 = a8;
  v267 = a6;
  uint64_t v274 = a1;
  id result = objc_msgSend(objc_allocWithZone(*a2), sel_init);
  if (!result) {
    return result;
  }
  id v273 = result;
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v34 = *(void *)a4;
  uint64_t v35 = *(void *)(*(void *)a4 + 16);
  uint64_t v270 = a4;
  if (v35)
  {
    uint64_t v266 = (uint64_t)a5;
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v265 = v34;
    uint64_t v36 = (uint64_t *)(v34 + 40);
    uint64_t v37 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v39 = (void *)*(v36 - 1);
      uint64_t v38 = *v36;
      v275 = v39;
      uint64_t v276 = v38;
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_11_5())
      {
        v277[0] = v37;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_3();
          uint64_t v37 = v277[0];
        }
        unint64_t v40 = *(void *)(v37 + 16);
        if (v40 >= *(void *)(v37 + 24) >> 1)
        {
          OUTLINED_FUNCTION_31_1();
          uint64_t v37 = v277[0];
        }
        *(void *)(v37 + 16) = v40 + 1;
        uint64_t v41 = v37 + 16 * v40;
        *(void *)(v41 + 32) = v39;
        *(void *)(v41 + 40) = v38;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v36 += 2;
      --v35;
    }
    while (v35);
    swift_bridgeObjectRelease();
    a5 = (SEL *)v266;
  }
  else
  {
    uint64_t v37 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v37 + 16) == 1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v37);
    swift_bridgeObjectRetain();
    uint64_t v42 = swift_release();
    OUTLINED_FUNCTION_1_12(v42, v43, v44, v45, v46, v47, v48, v49, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, a4, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (a3)
    {
      if (((unint64_t)objc_msgSend(a3, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v50) {
        goto LABEL_283;
      }
      [v273 *a5];
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v51 = *(void *)a4;
  uint64_t v52 = *(void *)(*(void *)a4 + 16);
  if (v52)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v266 = v51;
    uint64_t v53 = (uint64_t *)(v51 + 40);
    uint64_t v54 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v56 = (void *)*(v53 - 1);
      uint64_t v55 = *v53;
      v275 = v56;
      uint64_t v276 = v55;
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_11_5())
      {
        v277[0] = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_3();
          uint64_t v54 = v277[0];
        }
        unint64_t v57 = *(void *)(v54 + 16);
        if (v57 >= *(void *)(v54 + 24) >> 1)
        {
          OUTLINED_FUNCTION_31_1();
          uint64_t v54 = v277[0];
        }
        *(void *)(v54 + 16) = v57 + 1;
        uint64_t v58 = v54 + 16 * v57;
        *(void *)(v58 + 32) = v56;
        *(void *)(v58 + 40) = v55;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v53 += 2;
      --v52;
    }
    while (v52);
    swift_bridgeObjectRelease();
    a4 = v270;
  }
  else
  {
    uint64_t v54 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v54 + 16) == 1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v54);
    swift_bridgeObjectRetain();
    uint64_t v59 = swift_release();
    OUTLINED_FUNCTION_1_12(v59, v60, v61, v62, v63, v64, v65, v66, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (a3)
    {
      if (((unint64_t)objc_msgSend(a3, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v67) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(v267, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v68 = *(void *)a4;
  uint64_t v69 = *(void *)(*(void *)a4 + 16);
  uint64_t v70 = MEMORY[0x1E4FBC860];
  if (v69)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    v267 = (const char **)v68;
    uint64_t v71 = (uint64_t *)(v68 + 40);
    unint64_t v72 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v74 = (void *)*(v71 - 1);
      uint64_t v73 = *v71;
      v275 = v74;
      uint64_t v276 = v73;
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_11_5())
      {
        v277[0] = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_3();
          unint64_t v72 = (void *)v277[0];
        }
        unint64_t v75 = v72[2];
        if (v75 >= v72[3] >> 1)
        {
          OUTLINED_FUNCTION_31_1();
          unint64_t v72 = (void *)v277[0];
        }
        v72[2] = v75 + 1;
        unint64_t v76 = &v72[2 * v75];
        v76[4] = v74;
        v76[5] = v73;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v71 += 2;
      --v69;
    }
    while (v69);
    swift_bridgeObjectRelease();
    a4 = v270;
    uint64_t v70 = MEMORY[0x1E4FBC860];
  }
  else
  {
    unint64_t v72 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v72[2] == 1)
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, (uint64_t)v72);
    swift_bridgeObjectRetain();
    uint64_t v77 = swift_release();
    OUTLINED_FUNCTION_1_12(v77, v78, v79, v80, v81, v82, v83, v84, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (a3)
    {
      if (((unint64_t)objc_msgSend(a3, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v85) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(v268, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v86 = *(void *)a4;
  v277[0] = v70;
  uint64_t v87 = *(void *)(v86 + 16);
  if (v87)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    v268 = (const char **)v86;
    uint64_t v88 = (uint64_t *)(v86 + 40);
    a4 = 0xE300000000000000;
    do
    {
      unint64_t v72 = (void *)*(v88 - 1);
      uint64_t v89 = *v88;
      v275 = v72;
      uint64_t v276 = v89;
      swift_bridgeObjectRetain();
      uint64_t v90 = &v275;
      if (StringProtocol.contains<A>(_:)())
      {
        uint64_t v86 = v277[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_16_3();
          uint64_t v86 = v277[0];
        }
        unint64_t v91 = *(void *)(v86 + 16);
        if (v91 >= *(void *)(v86 + 24) >> 1) {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        uint64_t v90 = v277;
        uint64_t v92 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v91, (uint64_t)v72, v89);
        destructiveProjectEnumData for FeatureDictionaryError(v92);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v88 += 2;
      --v87;
    }
    while (v87);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_4();
    uint64_t v70 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v90 = (void *)v70;
  }
  if (v90[2] == 1)
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v93 = swift_release();
    OUTLINED_FUNCTION_1_12(v93, v94, v95, v96, v97, v98, v99, v100, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v90)
    {
      if (((unint64_t)objc_msgSend(v90, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v101) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(v269, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v102 = *(void *)a4;
  v277[0] = v70;
  uint64_t v103 = *(void *)(v102 + 16);
  if (v103)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v104 = (uint64_t *)(v102 + 40);
    a4 = MEMORY[0x1E4FBB1A0];
    do
    {
      unint64_t v72 = (void *)*(v104 - 1);
      uint64_t v105 = *v104;
      v275 = v72;
      uint64_t v276 = v105;
      swift_bridgeObjectRetain();
      if (OUTLINED_FUNCTION_0_15())
      {
        uint64_t v90 = v277;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_3_10();
        uint64_t v106 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, (uint64_t)v72, v105);
        destructiveProjectEnumData for FeatureDictionaryError(v106);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v104 += 2;
      --v103;
    }
    while (v103);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_23_4();
    uint64_t v70 = MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v90 = (void *)v70;
  }
  if (v90[2] == 1)
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v107 = swift_release();
    OUTLINED_FUNCTION_1_12(v107, v108, v109, v110, v111, v112, v113, v114, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v90)
    {
      if (((unint64_t)objc_msgSend(v90, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v115) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a9, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v116 = *(void *)a4;
  v277[0] = v70;
  uint64_t v117 = *(void *)(v116 + 16);
  if (v117)
  {
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    unint64_t v72 = (void *)(v116 + 40);
    do
    {
      uint64_t v118 = *v72;
      v275 = (void *)*(v72 - 1);
      uint64_t v276 = v118;
      OUTLINED_FUNCTION_15_4();
      if (OUTLINED_FUNCTION_0_15())
      {
        uint64_t v90 = v277;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_3_10();
        uint64_t v119 = OUTLINED_FUNCTION_4_8();
        destructiveProjectEnumData for FeatureDictionaryError(v119);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v72 += 2;
      --v117;
    }
    while (v117);
    swift_bridgeObjectRelease();
    uint64_t v70 = v277[0];
    a4 = v270;
  }
  if (specialized Array.count.getter(v70) == 1 && specialized Array._getCount()(v70))
  {
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v70);
    uint64_t v86 = *(void *)(v70 + 32);
    swift_bridgeObjectRetain();
    uint64_t v120 = swift_release();
    OUTLINED_FUNCTION_1_12(v120, v121, v122, v123, v124, v125, v126, v127, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v90)
    {
      if (((unint64_t)objc_msgSend(v90, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v128) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a10, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v129 = *(void *)a4;
  int v130 = (void *)specialized ContiguousArray.init()();
  v277[0] = v130;
  uint64_t v131 = specialized Array._getCount()(v129);
  if (v131)
  {
    uint64_t v132 = v131;
    if (v131 < 1)
    {
      __break(1u);
      goto LABEL_274;
    }
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v133 = (uint64_t *)(v129 + 40);
    do
    {
      unint64_t v72 = (void *)*(v133 - 1);
      uint64_t v134 = *v133;
      v275 = v72;
      uint64_t v276 = v134;
      swift_bridgeObjectRetain();
      if (StringProtocol.contains<A>(_:)())
      {
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        OUTLINED_FUNCTION_3_10();
        uint64_t v135 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v86, (uint64_t)v72, v134);
        destructiveProjectEnumData for FeatureDictionaryError(v135);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v133 += 2;
      --v132;
    }
    while (v132);
    swift_bridgeObjectRelease();
    int v130 = (void *)v277[0];
  }
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v136 = swift_release();
    OUTLINED_FUNCTION_1_12(v136, v137, v138, v139, v140, v141, v142, v143, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v144) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a11, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v145 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v145))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      do
      {
        uint64_t v148 = *v72;
        v275 = (void *)*(v72 - 1);
        uint64_t v276 = v148;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v149 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v149);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      int v130 = (void *)v277[0];
      goto LABEL_128;
    }
LABEL_274:
    __break(1u);
    goto LABEL_275;
  }
LABEL_128:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v151 = swift_release();
    OUTLINED_FUNCTION_1_12(v151, v152, v153, v154, v155, v156, v157, v158, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v270, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v159) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a12, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v271, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v160 = a14;
  if (*a13 != -1) {
    swift_once();
  }
  uint64_t v161 = specialized ContiguousArray.init()();
  uint64_t v272 = (uint64_t)a14;
  if (OUTLINED_FUNCTION_5_6(v161))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        uint64_t v162 = *v72;
        v275 = (void *)*(v72 - 1);
        uint64_t v276 = v162;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v163 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v163);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_146;
    }
LABEL_275:
    __break(1u);
    goto LABEL_276;
  }
LABEL_146:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v164 = swift_release();
    OUTLINED_FUNCTION_1_12(v164, v165, v166, v167, v168, v169, v170, v171, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, (uint64_t)a14, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v172) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a15, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v173 = *v160;
  uint64_t v174 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v174))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      unint64_t v72 = (void *)(v173 + 40);
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        uint64_t v175 = *v72;
        v275 = *(void **)(v173 + 32);
        uint64_t v276 = v175;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v176 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v176);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_162;
    }
LABEL_276:
    __break(1u);
    goto LABEL_277;
  }
LABEL_162:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v177 = swift_release();
    OUTLINED_FUNCTION_1_12(v177, v178, v179, v180, v181, v182, v183, v184, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v185) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a16, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v186 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v186))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        OUTLINED_FUNCTION_34_0();
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v187 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v187);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_178;
    }
LABEL_277:
    __break(1u);
    goto LABEL_278;
  }
LABEL_178:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v188 = swift_release();
    OUTLINED_FUNCTION_1_12(v188, v189, v190, v191, v192, v193, v194, v195, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v196) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a17, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v197 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v197))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        OUTLINED_FUNCTION_34_0();
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v198 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v198);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_194;
    }
LABEL_278:
    __break(1u);
    goto LABEL_279;
  }
LABEL_194:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v199 = swift_release();
    OUTLINED_FUNCTION_1_12(v199, v200, v201, v202, v203, v204, v205, v206, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v207) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a18, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v208 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v208))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        uint64_t v209 = *v72;
        v275 = (void *)*(v72 - 1);
        uint64_t v276 = v209;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v210 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v210);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_210;
    }
LABEL_279:
    __break(1u);
    goto LABEL_280;
  }
LABEL_210:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v211 = swift_release();
    OUTLINED_FUNCTION_1_12(v211, v212, v213, v214, v215, v216, v217, v218, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v219) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a19, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v220 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v220))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      uint64_t v160 = (uint64_t *)MEMORY[0x1E4FBB1A0];
      do
      {
        uint64_t v221 = *v72;
        v275 = (void *)*(v72 - 1);
        uint64_t v276 = v221;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v222 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v222);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_226;
    }
LABEL_280:
    __break(1u);
    goto LABEL_281;
  }
LABEL_226:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v223 = swift_release();
    OUTLINED_FUNCTION_1_12(v223, v224, v225, v226, v227, v228, v229, v230, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v231) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a20, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v232 = *v160;
  uint64_t v233 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v233))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      unint64_t v72 = (void *)(v232 + 40);
      do
      {
        uint64_t v234 = *v72;
        v275 = *(void **)(v232 + 32);
        uint64_t v276 = v234;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          int v130 = v277;
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v235 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v235);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_23_4();
      goto LABEL_242;
    }
LABEL_281:
    __break(1u);
    goto LABEL_282;
  }
LABEL_242:
  if (specialized Array.count.getter((uint64_t)v130) == 1 && specialized Array._getCount()(v130))
  {
    OUTLINED_FUNCTION_2_14();
    OUTLINED_FUNCTION_10_3();
    uint64_t v236 = swift_release();
    OUTLINED_FUNCTION_1_12(v236, v237, v238, v239, v240, v241, v242, v243, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
      v274);
    OUTLINED_FUNCTION_7_8();
    if (v130)
    {
      if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) != 0) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_6_6();
      if (v244) {
        goto LABEL_283;
      }
      OUTLINED_FUNCTION_8_7(a21, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  else
  {
    swift_release();
  }
  uint64_t v245 = specialized ContiguousArray.init()();
  if (OUTLINED_FUNCTION_5_6(v245))
  {
    OUTLINED_FUNCTION_20_3();
    if (v146 == v147)
    {
      swift_bridgeObjectRetain();
      lazy protocol witness table accessor for type String and conformance String();
      OUTLINED_FUNCTION_9_8();
      do
      {
        uint64_t v246 = *v72;
        v275 = (void *)*(v72 - 1);
        uint64_t v276 = v246;
        OUTLINED_FUNCTION_15_4();
        if (OUTLINED_FUNCTION_0_15())
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          OUTLINED_FUNCTION_3_10();
          uint64_t v247 = OUTLINED_FUNCTION_4_8();
          destructiveProjectEnumData for FeatureDictionaryError(v247);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        OUTLINED_FUNCTION_19_3();
      }
      while (!v150);
      swift_bridgeObjectRelease();
      int v130 = (void *)v277[0];
      goto LABEL_258;
    }
LABEL_282:
    __break(1u);
    goto LABEL_283;
  }
LABEL_258:
  if (specialized Array.count.getter((uint64_t)v130) != 1 || !specialized Array._getCount()(v130))
  {
    swift_release();
    goto LABEL_265;
  }
  OUTLINED_FUNCTION_2_14();
  OUTLINED_FUNCTION_10_3();
  uint64_t v248 = swift_release();
  OUTLINED_FUNCTION_1_12(v248, v249, v250, v251, v252, v253, v254, v255, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, (uint64_t)v273,
    v274);
  OUTLINED_FUNCTION_7_8();
  if (v130)
  {
    if (((unint64_t)objc_msgSend(v130, sel_int64Value) & 0x8000000000000000) == 0)
    {
      OUTLINED_FUNCTION_6_6();
      if (!v256)
      {
        OUTLINED_FUNCTION_8_7(a22, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);

        goto LABEL_265;
      }
    }
LABEL_283:
    OUTLINED_FUNCTION_1_0();
    id result = (id)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_265:
  v257 = (void *)specialized Dictionary.subscript.getter(a23, a24, v274);
  if (v257)
  {
    v258 = v257;
    objc_msgSend(v257, sel_int64Value);
    OUTLINED_FUNCTION_21_3();
    [v273 *a25];
  }
  v259 = (void *)specialized Dictionary.subscript.getter(a26, a27, v274);
  if (v259)
  {
    v260 = v259;
    if ((static CaarFeatureLogger.roundToMinutes(seconds:)((uint64_t)objc_msgSend(v259, sel_int64Value)) & 0x100000000) == 0) {
      OUTLINED_FUNCTION_8_7(a28, v261, v262, v263, v264, v265, v266, (uint64_t)v267, (uint64_t)v268, (uint64_t)v269, v272, v273);
    }
  }
  return v273;
}

uint64_t static CaarFeatureLogger.roundToMinutes(seconds:)(uint64_t result)
{
  if (result < 0)
  {
    uint64_t v2 = 0;
    return v2 | ((unint64_t)(result < 0) << 32);
  }
  double v1 = floor((double)result / 60.0);
  if ((~*(void *)&v1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v1 <= -1.0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v1 < 4294967300.0)
  {
    uint64_t v2 = v1;
    return v2 | ((unint64_t)(result < 0) << 32);
  }
LABEL_10:
  __break(1u);
  return result;
}

void outlined bridged method (mbnn) of @objc CAARSchemaCAARFeaturesGenerated.actionFeatureSets.setter(uint64_t a1, void *a2)
{
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARActionFeatureSet);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(a2, sel_setActionFeatureSets_, isa);
}

void outlined bridged method (mbnn) of @objc CAARSchemaCAARActionFeatureSet.actionIdentifier.setter(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = (id)MEMORY[0x1CB78D210]();
  swift_bridgeObjectRelease();
  objc_msgSend(a3, sel_setActionIdentifier_, v4);
}

uint64_t OUTLINED_FUNCTION_0_15()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_1_12(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  return specialized Dictionary.subscript.getter(v20, v21, a20);
}

unint64_t OUTLINED_FUNCTION_2_14()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, 1, v0);
}

void OUTLINED_FUNCTION_3_10()
{
  uint64_t v2 = *(void *)(*(void *)(v0 - 96) + 16);
  specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v2);
}

uint64_t OUTLINED_FUNCTION_4_8()
{
  return specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v0, v2, v1);
}

uint64_t OUTLINED_FUNCTION_5_6(uint64_t a1)
{
  *(void *)(v2 - 96) = a1;
  return specialized Array._getCount()(v1);
}

uint64_t OUTLINED_FUNCTION_7_8()
{
  return swift_bridgeObjectRelease();
}

id OUTLINED_FUNCTION_8_7@<X0>(const char **a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  uint64_t v13 = *a1;
  return [a12 v13];
}

uint64_t OUTLINED_FUNCTION_10_3()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_11_5()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_13_4()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_15_4()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_16_3()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

id OUTLINED_FUNCTION_17_3(void *a1)
{
  return [a1 (SEL)(v1 + 3608)];
}

void OUTLINED_FUNCTION_18_4()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_22_4()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_24_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return specialized Dictionary.subscript.getter(a1, (a2 - 32) | 0x8000000000000000, v2);
}

void OUTLINED_FUNCTION_25_2()
{
  *(void *)(v1 + 16) = v3;
  uint64_t v5 = v1 + 16 * v0;
  *(void *)(v5 + 32) = v4;
  *(void *)(v5 + 40) = v2;
}

uint64_t OUTLINED_FUNCTION_26_2@<X0>(uint64_t a1@<X8>)
{
  return specialized Dictionary.subscript.getter(0xD000000000000017, (a1 - 32) | 0x8000000000000000, v1);
}

uint64_t OUTLINED_FUNCTION_27_1()
{
  return specialized Dictionary.subscript.getter(v0, v1, v2);
}

void OUTLINED_FUNCTION_31_1()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_32_1@<X0>(uint64_t a1@<X8>)
{
  return specialized Dictionary.subscript.getter(v1, (a1 - 32) | 0x8000000000000000, v2);
}

id OUTLINED_FUNCTION_35_0(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t specialized Array.count.getter(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (!v3) {
    return 0;
  }
  if (a3[4] == a1 && a3[5] == a2) {
    return 1;
  }
  uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if (result) {
    return 1;
  }
  if (v3 == 1) {
    return 0;
  }
  uint64_t v9 = a3 + 7;
  for (uint64_t i = 1; ; ++i)
  {
    uint64_t v11 = i + 1;
    if (__OFADD__(i, 1)) {
      break;
    }
    BOOL v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      return 1;
    }
    uint64_t result = 0;
    v9 += 2;
    if (v11 == v3) {
      return result;
    }
  }
  __break(1u);
  return result;
}

uint64_t static AmbiguousFirstRunHelper.recordAmbiguousFirstRunShown(bundleId:)(uint64_t a1, unint64_t a2)
{
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(void *)&long long v16 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v5, v6, "Storing ambiguous first run shown for %s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v8, -1, -1);
    MEMORY[0x1CB78E290](v7, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  static CamUserHistoryDefaultsManager.getValue(key:)(0xD000000000000021, 0x80000001C9DA3850, &v16);
  if (v17)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    if (swift_dynamicCast())
    {
      uint64_t v9 = v15;
      goto LABEL_11;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v16);
  }
  uint64_t v9 = MEMORY[0x1E4FBC860];
LABEL_11:
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = v13;
  }
  unint64_t v10 = *(void *)(v9 + 16);
  if (v10 >= *(void *)(v9 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v9 = v14;
  }
  *(void *)(v9 + 16) = v10 + 1;
  uint64_t v11 = v9 + 16 * v10;
  *(void *)(v11 + 32) = a1;
  *(void *)(v11 + 40) = a2;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  *(void *)&long long v16 = v9;
  static CamUserHistoryDefaultsManager.setValue(key:value:)(0xD000000000000021, 0x80000001C9DA3850, (uint64_t)&v16);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
}

uint64_t static AmbiguousFirstRunHelper.ambiguousFirstRunPreviouslyShown(bundleId:)(uint64_t a1, uint64_t a2)
{
  static CamUserHistoryDefaultsManager.getValue(key:)(0xD000000000000021, 0x80000001C9DA3850, &v8);
  if (!v9)
  {
    outlined destroy of Any?((uint64_t)&v8);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v4 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_6;
  }
  uint64_t v4 = v7;
LABEL_6:
  char v5 = specialized Sequence<>.contains(_:)(a1, a2, v4);
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else if (a1)
  {
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  if (a1 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else
  {
    if (a1)
    {
      type metadata accessor for RankedAction();
      uint64_t v2 = static Array._allocateBufferUninitialized(minimumCapacity:)();
      *(void *)(v2 + 16) = a1;
    }
    else
    {
      uint64_t v2 = MEMORY[0x1E4FBC860];
    }
    uint64_t v3 = type metadata accessor for RankedAction();
    OUTLINED_FUNCTION_9_6(v3);
    return v2;
  }
  return result;
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for ActionProtocol);
}

{
  return specialized static Array._allocateUninitialized(_:)(a1, &demangling cache variable for type metadata for (offset: Int, element: Double));
}

uint64_t specialized static Array._allocateUninitialized(_:)(uint64_t a1, uint64_t *a2)
{
  if (a1 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = OUTLINED_FUNCTION_7_5();
    __break(1u);
  }
  else if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t result = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(result + 16) = a1;
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_14_5();
  if (v2)
  {
    OUTLINED_FUNCTION_8_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_11_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    char v5 = (const void *)OUTLINED_FUNCTION_18_5();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_17_4((uint64_t)(v6 - 32) / 16);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_16_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  void *v6;
  size_t v7;
  char *v8;
  size_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;

  OUTLINED_FUNCTION_14_5();
  if (v3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v4 != v5)
    {
      OUTLINED_FUNCTION_23();
      if (v4)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_11_6();
  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Domain3PProtectionLevel>);
    size_t v6 = (void *)swift_allocObject();
    uint64_t v7 = _swift_stdlib_malloc_size(v6);
    _OWORD v6[2] = v1;
    v6[3] = 2 * v7 - 64;
  }
  if (v0)
  {
    uint64_t v8 = (char *)OUTLINED_FUNCTION_16_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v8, v9, v10);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v11 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v11, v12, v13, v14);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_5();
  if (v2)
  {
    OUTLINED_FUNCTION_8_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_11_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
    char v5 = (const void *)OUTLINED_FUNCTION_18_5();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_17_4((uint64_t)(v6 - 32) / 8);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_16_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_5();
  if (v2)
  {
    OUTLINED_FUNCTION_8_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_11_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[Double]>);
    char v5 = (const void *)OUTLINED_FUNCTION_18_5();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_17_4((uint64_t)(v6 - 32) / 8);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_16_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

{
  char v0;
  uint64_t v1;
  char v2;
  char v3;
  char v4;
  const void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_14_5();
  if (v2)
  {
    OUTLINED_FUNCTION_8_0();
    if (v3 != v4)
    {
      OUTLINED_FUNCTION_23();
      if (v3)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  OUTLINED_FUNCTION_11_6();
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Int)>);
    char v5 = (const void *)swift_allocObject();
    size_t v6 = _swift_stdlib_malloc_size(v5);
    OUTLINED_FUNCTION_17_4((uint64_t)(v6 - 32) / 24);
  }
  if (v0)
  {
    uint64_t v7 = (char *)OUTLINED_FUNCTION_16_4();
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v7, v8, v9);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v10 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v10, v11, v12, v13);
  }
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Int32>, (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Float>, (void (*)(void, uint64_t, void *, uint64_t))specialized _ArrayBuffer._copyContents(subRange:initializing:), (void (*)(uint64_t, uint64_t, void *))specialized UnsafeMutablePointer.moveInitialize(from:count:));
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UncertaintyPromptActionEnforcer>, &demangling cache variable for type metadata for UncertaintyPromptActionEnforcer);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<ActionHandler>, &demangling cache variable for type metadata for ActionHandler);
}

{
  specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<AutoConfirmActionEnforcer>, &demangling cache variable for type metadata for AutoConfirmActionEnforcer);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, void (*a6)(void, uint64_t, void *, uint64_t), void (*a7)(uint64_t, uint64_t, void *))
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_23();
      if (v12)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (v15)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    long long v16 = (void *)OUTLINED_FUNCTION_18_5();
    size_t v17 = _swift_stdlib_malloc_size(v16);
    v16[2] = v14;
    v16[3] = 2 * ((uint64_t)(v17 - 32) / 4);
  }
  else
  {
    long long v16 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v18 = v16 + 4;
  if (a1)
  {
    a7(a4 + 32, v14, v18);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    a6(0, v14, v18, a4);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return OUTLINED_FUNCTION_13_5(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRDataSourceMetadataValue>, MEMORY[0x1E4FA3DE8]);
}

{
  return OUTLINED_FUNCTION_13_5(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>, (uint64_t (*)(void))type metadata accessor for RankedAction);
}

void specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t *a6)
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v10 != v11)
    {
      OUTLINED_FUNCTION_23();
      if (v10)
      {
        __break(1u);
        return;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  else
  {
    uint64_t v9 = a2;
  }
  uint64_t v12 = *(void *)(a4 + 16);
  if (v9 <= v12) {
    uint64_t v13 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v13 = v9;
  }
  if (v13)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    uint64_t v14 = (char *)swift_allocObject();
    size_t v15 = _swift_stdlib_malloc_size(v14);
    *((void *)v14 + 2) = v12;
    *((void *)v14 + 3) = 2 * ((uint64_t)(v15 - 32) / 40);
  }
  else
  {
    uint64_t v14 = (char *)MEMORY[0x1E4FBC860];
  }
  long long v16 = v14 + 32;
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)((char *)(a4 + 32), v12, v16);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v12, (unint64_t)v16, a4, a6);
  }
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)()
{
  OUTLINED_FUNCTION_14_5();
  if (v3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v5 != v6)
    {
      OUTLINED_FUNCTION_23();
      if (v5)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  else
  {
    uint64_t v4 = v2;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  if (v4 <= v7) {
    uint64_t v8 = *(void *)(v0 + 16);
  }
  else {
    uint64_t v8 = v4;
  }
  if (!v8)
  {
    uint64_t v14 = (const void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(flowHandlerId: String, parseId: UUID, affinityScore: Int)>);
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
  OUTLINED_FUNCTION_0_4(v9);
  uint64_t v11 = *(void *)(v10 + 72);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (const void *)swift_allocObject();
  size_t v15 = _swift_stdlib_malloc_size(v14);
  if (!v11 || (v15 - v13 == 0x8000000000000000 ? (BOOL v16 = v11 == -1) : (BOOL v16 = 0), v16))
  {
LABEL_23:
    OUTLINED_FUNCTION_1_0();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_17_4((uint64_t)(v15 - v13) / v11);
LABEL_18:
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int));
  OUTLINED_FUNCTION_9_6(v17);
  if (v1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v0 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80)), v7);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    uint64_t v19 = OUTLINED_FUNCTION_5_7();
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(v19, v20, v21, v22);
  }
  return (uint64_t)v14;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  if (a3)
  {
    OUTLINED_FUNCTION_8_0();
    if (v12 != v13)
    {
      OUTLINED_FUNCTION_23();
      if (v12)
      {
        __break(1u);
        goto LABEL_23;
      }
      OUTLINED_FUNCTION_6_0();
    }
  }
  else
  {
    uint64_t v11 = a2;
  }
  uint64_t v14 = *(void *)(a4 + 16);
  if (v11 <= v14) {
    uint64_t v15 = *(void *)(a4 + 16);
  }
  else {
    uint64_t v15 = v11;
  }
  if (!v15)
  {
    unint64_t v21 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_18;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  uint64_t v16 = a6(0);
  OUTLINED_FUNCTION_0_4(v16);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (void *)swift_allocObject();
  size_t v22 = _swift_stdlib_malloc_size(v21);
  if (!v18 || (v22 - v20 == 0x8000000000000000 ? (BOOL v23 = v18 == -1) : (BOOL v23 = 0), v23))
  {
LABEL_23:
    OUTLINED_FUNCTION_1_0();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v21[2] = v14;
  v21[3] = 2 * ((uint64_t)(v22 - v20) / v18);
LABEL_18:
  uint64_t v24 = *(void *)(a6(0) - 8);
  unint64_t v25 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  if (a1)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a4 + v25, v14);
    OUTLINED_FUNCTION_9_9();
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v14, (unint64_t)v21 + v25, a4, a7);
  }
  return (uint64_t)v21;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 16 * a1 + 32;
    unint64_t v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 8 * a1 + 32;
    unint64_t v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Double]);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = a4 + 24 * a1 + 32;
    unint64_t v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, Int));
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;

  uint64_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    uint64_t v8 = *(void *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (flowHandlerId: String, parseId: UUID, affinityScore: Int))
                   - 8);
    uint64_t v9 = a4 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v10 = *(void *)(v8 + 72);
    uint64_t v11 = v9 + v10 * a1;
    char v12 = a3 + v10 * v4;
    if (v11 >= v12 || v11 + v10 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v12;
    }
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + a1 + 32);
    unint64_t v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 8 * a1 + 32);
    unint64_t v6 = &__dst[8 * v4];
    if (v5 >= v6 || &v5[8 * v4] <= __dst)
    {
      memcpy(__dst, v5, 8 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  char *v6;
  char *result;

  size_t v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    unint64_t v5 = (char *)(a4 + 4 * a1 + 32);
    unint64_t v6 = &__dst[4 * v4];
    if (v5 >= v6 || &v5[4 * v4] <= __dst)
    {
      memcpy(__dst, v5, 4 * v4);
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    uint64_t v9 = *(void *)(a5(0) - 8);
    uint64_t v10 = a4 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    unint64_t v12 = v10 + v11 * a1;
    unint64_t v13 = a3 + v11 * v5;
    if (v12 >= v13 || v12 + v11 * v5 <= a3)
    {
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v13;
    }
  }
  OUTLINED_FUNCTION_1_0();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    unint64_t v6 = a4 + 40 * a1 + 32;
    unint64_t v7 = a3 + 40 * v5;
    if (v6 >= v7 || v6 + 40 * v5 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(a5);
      swift_arrayInitWithCopy();
      swift_bridgeObjectRelease();
      return v7;
    }
  }
  OUTLINED_FUNCTION_1_0();
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *result, uint64_t a2, char *a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else if (a3 != result || &result[16 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else if (a3 != result || &result[8 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else if (a3 != result || &result[24 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }
  return result;
}

{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = (char *)OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else if (a3 != result || &result[40 * a2] <= a3)
  {
    return (char *)OUTLINED_FUNCTION_2_15(a3, result);
  }
  return result;
}

char *specialized UnsafeMutablePointer.moveInitialize(from:count:)(char *__src, size_t __len, char *__dst)
{
  if ((__len & 0x8000000000000000) != 0)
  {
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t specialized UnsafeMutablePointer.moveInitialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  char v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_15_5();
    if (v6
      && (uint64_t result = __swift_instantiateConcreteTypeFromMangledName(v5),
          v3 + *(void *)(*(void *)(result - 8) + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_6_7();
        return swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(v5);
      OUTLINED_FUNCTION_6_7();
      return swift_arrayInitWithTakeFrontToBack();
    }
  }
  return result;
}

{
  return specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, a2);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void (*v5)(void);
  char v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    uint64_t result = OUTLINED_FUNCTION_1_13();
    __break(1u);
  }
  else
  {
    OUTLINED_FUNCTION_15_5();
    if (v6
      && (uint64_t result = ((uint64_t (*)(void))v5)(0), v3 + *(void *)(*(void *)(result - 8) + 72) * v2 > v4))
    {
      if (v4 != v3)
      {
        OUTLINED_FUNCTION_6_7();
        return swift_arrayInitWithTakeBackToFront();
      }
    }
    else
    {
      v5(0);
      OUTLINED_FUNCTION_6_7();
      return swift_arrayInitWithTakeFrontToBack();
    }
  }
  return result;
}

uint64_t dispatch thunk of static AmbiguousFirstRunHelping.ambiguousFirstRunPreviouslyShown(bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of static AmbiguousFirstRunHelping.recordAmbiguousFirstRunShown(bundleId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

ValueMetadata *type metadata accessor for AmbiguousFirstRunHelper()
{
  return &type metadata for AmbiguousFirstRunHelper;
}

uint64_t OUTLINED_FUNCTION_1_13()
{
  return _fatalErrorMessage(_:_:file:line:flags:)();
}

void *OUTLINED_FUNCTION_2_15@<X0>(void *__dst@<X2>, const void *a2@<X8>)
{
  return memmove(__dst, a2, v2);
}

uint64_t OUTLINED_FUNCTION_5_7()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_6_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_9_9()
{
  *(void *)(v0 + 16) = 0;
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_13_5(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(void))
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, a5, a6, a6);
}

uint64_t OUTLINED_FUNCTION_16_4()
{
  return v0 + 32;
}

void OUTLINED_FUNCTION_17_4(uint64_t a1@<X8>)
{
  *(void *)(v2 + 16) = v1;
  *(void *)(v2 + 24) = 2 * a1;
}

uint64_t OUTLINED_FUNCTION_18_5()
{
  return swift_allocObject();
}

uint64_t specialized ActionProtocol.inferBundleId()()
{
  return specialized ActionProtocol.inferBundleId()((uint64_t (*)(void))type metadata accessor for ActionCandidate, (void (*)(void))type metadata accessor for ActionCandidate, (void (*)(void))type metadata accessor for ActionCandidate);
}

uint64_t specialized ActionProtocol.inferBundleId()(uint64_t (*a1)(void), void (*a2)(void), void (*a3)(void))
{
  uint64_t v116 = a2;
  uint64_t v117 = a3;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  uint64_t v6 = OUTLINED_FUNCTION_11_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  uint64_t v113 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  OUTLINED_FUNCTION_0_11();
  uint64_t v109 = v10;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_5_2();
  uint64_t v111 = v12;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v13);
  uint64_t v112 = (char *)&v104 - v14;
  uint64_t v15 = a1(0);
  uint64_t v16 = v15 - 8;
  MEMORY[0x1F4188790](v15);
  uint64_t v114 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_10_0();
  uint64_t v107 = v19;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_10_0();
  uint64_t v108 = (uint64_t *)v21;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (uint64_t *)((char *)&v104 - v23);
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  uint64_t v31 = (char **)((char *)&v104 - v30);
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v104 - v32;
  uint64_t v34 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v35);
  uint64_t v110 = (char *)&v104 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v37);
  uint64_t v39 = (char *)&v104 - v38;
  uint64_t v40 = *(int *)(v16 + 28);
  uint64_t v115 = v3;
  uint64_t v41 = v3 + v40;
  outlined init with copy of CamParse(v3 + v40, (uint64_t)v33, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v42 = type metadata accessor for CamParse;
    uint64_t v43 = (uint64_t)v33;
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v33, (uint64_t)v39, (void (*)(void))type metadata accessor for CamUSOParse);
    uint64_t v105 = CamUSOParse.appShortcutInvocation.getter();
    uint64_t v106 = v51;
    if (v52)
    {
      unint64_t v53 = v52;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.common);
      outlined init with copy of CamParse(v115, (uint64_t)v24, v116);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v55 = (void *)Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_27_2(v56))
      {
        uint64_t v57 = OUTLINED_FUNCTION_8_8();
        uint64_t v119 = (void (*)(void))OUTLINED_FUNCTION_7_9();
        *(_DWORD *)uint64_t v57 = 136315394;
        uint64_t v58 = *v24;
        unint64_t v59 = v24[1];
        swift_bridgeObjectRetain();
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v24, v117);
        *(_WORD *)(v57 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v49 = v105;
        uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v105, v53, (uint64_t *)&v119);
        OUTLINED_FUNCTION_15_6(v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_10_4(&dword_1C9CFE000, v61, v62, "Inferring bundle for %s from AS invocation = %s");
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_2_2();

        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v39, (void (*)(void))type metadata accessor for CamUSOParse);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_21_4();

        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v24, v117);
        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v39, (void (*)(void))type metadata accessor for CamUSOParse);
        swift_bridgeObjectRelease();
        return v105;
      }
      return v49;
    }
    uint64_t v42 = type metadata accessor for CamUSOParse;
    uint64_t v43 = (uint64_t)v39;
  }
  _s7SiriCam0B5ParseOWOhTm_1(v43, (void (*)(void))v42);
  outlined init with copy of CamParse(v41, (uint64_t)v31, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v39 = *v31;
    PommesResponse.sash()(v9);
    uint64_t v44 = v113;
    if (__swift_getEnumTagSinglePayload(v9, 1, v113) != 1)
    {
      uint64_t v86 = v109;
      uint64_t v87 = v112;
      (*(void (**)(char *, uint64_t, uint64_t))(v109 + 32))(v112, v9, v44);
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v88 = type metadata accessor for Logger();
      __swift_project_value_buffer(v88, (uint64_t)static Logger.common);
      uint64_t v89 = v108;
      outlined init with copy of CamParse(v115, (uint64_t)v108, v116);
      uint64_t v90 = v111;
      OUTLINED_FUNCTION_13_6();
      v91();
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = OUTLINED_FUNCTION_8_8();
        uint64_t v95 = v86;
        uint64_t v116 = (void (*)(void))OUTLINED_FUNCTION_7_9();
        uint64_t v119 = v116;
        *(_DWORD *)uint64_t v94 = 136315394;
        uint64_t v96 = (uint64_t)v89;
        uint64_t v97 = *v89;
        unint64_t v98 = v89[1];
        swift_bridgeObjectRetain();
        uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, (uint64_t *)&v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s7SiriCam0B5ParseOWOhTm_1(v96, v117);
        *(_WORD *)(v94 + 12) = 2080;
        uint64_t v99 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
        uint64_t v118 = OUTLINED_FUNCTION_18_6(v99, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v101 = *(void (**)(void))(v95 + 8);
        OUTLINED_FUNCTION_9_10();
        v101();
        _os_log_impl(&dword_1C9CFE000, v92, v93, "Inferring bundle for %s from sash = %s", (uint8_t *)v94, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2_2();
        uint64_t v87 = v112;
        OUTLINED_FUNCTION_2_2();
      }
      else
      {
        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v89, v117);
        uint64_t v101 = *(void (**)(void))(v86 + 8);
        ((void (*)(uint64_t, uint64_t))v101)(v90, v44);
      }

      uint64_t v102 = v44;
      uint64_t v49 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();

      ((void (*)(char *, uint64_t))v101)(v87, v102);
      return v49;
    }

    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  }
  else
  {
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v31, (void (*)(void))type metadata accessor for CamParse);
  }
  uint64_t v45 = v117;
  outlined init with copy of CamParse(v41, (uint64_t)v28, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v28, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v46 = v115;
LABEL_9:
    swift_bridgeObjectRetain();
    v47._uint64_t countAndFlagsBits = OUTLINED_FUNCTION_28_2();
    PluginToBundleMap.init(rawValue:)(v47);
    uint64_t v48 = (uint64_t)v114;
    if (v119 == 32)
    {
      uint64_t v49 = 0;
      unint64_t v50 = 0;
    }
    else
    {
      LOBYTE(v118) = (_BYTE)v119;
      PluginToBundleMap.associatedAppBundleId.getter();
      uint64_t v49 = v63;
      unint64_t v50 = v64;
    }
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.common);
    outlined init with copy of CamParse(v46, v48, v116);
    swift_bridgeObjectRetain_n();
    uint64_t v66 = (void *)Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_27_2(v67))
    {
      uint64_t v68 = OUTLINED_FUNCTION_8_8();
      uint64_t v116 = (void (*)(void))OUTLINED_FUNCTION_7_9();
      uint64_t v119 = v116;
      OUTLINED_FUNCTION_32_2(4.8151e-34);
      uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v39, (unint64_t)v28, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s7SiriCam0B5ParseOWOhTm_1(v48, v45);
      *(_WORD *)(v68 + 12) = 2080;
      if (v50) {
        uint64_t v69 = v49;
      }
      else {
        uint64_t v69 = 7104878;
      }
      if (v50) {
        unint64_t v70 = v50;
      }
      else {
        unint64_t v70 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, (uint64_t *)&v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_21_4();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_10_4(&dword_1C9CFE000, v71, v72, "Inferring bundle for %s from plugin mapping = %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      _s7SiriCam0B5ParseOWOhTm_1(v48, v45);

      OUTLINED_FUNCTION_21_4();
    }
    return v49;
  }
  uint64_t v73 = (uint64_t)v28;
  uint64_t v28 = v110;
  outlined init with take of CamUSOParse(v73, (uint64_t)v110, (void (*)(void))type metadata accessor for CamUSOParse);
  uint64_t v74 = (uint64_t *)&v28[*(int *)(v34 + 24)];
  unint64_t v75 = v74[1];
  uint64_t v46 = v115;
  if (!v75)
  {
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v28, (void (*)(void))type metadata accessor for CamUSOParse);
    goto LABEL_9;
  }
  uint64_t v49 = *v74;
  uint64_t v76 = one-time initialization token for common;
  swift_bridgeObjectRetain();
  if (v76 != -1) {
    swift_once();
  }
  uint64_t v77 = type metadata accessor for Logger();
  __swift_project_value_buffer(v77, (uint64_t)static Logger.common);
  uint64_t v78 = v107;
  outlined init with copy of CamParse(v46, v107, v116);
  swift_bridgeObjectRetain_n();
  uint64_t v79 = (void *)Logger.logObject.getter();
  os_log_type_t v80 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_27_2(v80))
  {
    uint64_t v81 = OUTLINED_FUNCTION_8_8();
    uint64_t v119 = (void (*)(void))OUTLINED_FUNCTION_7_9();
    OUTLINED_FUNCTION_32_2(4.8151e-34);
    uint64_t v82 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v39, (unint64_t)v28, (uint64_t *)&v119);
    OUTLINED_FUNCTION_24_5(v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_1(v78, v117);
    *(_WORD *)(v81 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v118 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v75, (uint64_t *)&v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_10_4(&dword_1C9CFE000, v83, v84, "Inferring bundle for %s from USO parse = %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    uint64_t v85 = (uint64_t)v110;
  }
  else
  {
    OUTLINED_FUNCTION_21_4();

    _s7SiriCam0B5ParseOWOhTm_1(v78, v45);
    uint64_t v85 = (uint64_t)v28;
  }
  _s7SiriCam0B5ParseOWOhTm_1(v85, (void (*)(void))type metadata accessor for CamUSOParse);
  return v49;
}

Swift::String_optional __swiftcall ActionProtocol.inferBundleId()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  uint64_t v6 = OUTLINED_FUNCTION_11_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v138 = (v8 - v7);
  uint64_t v136 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Sash();
  OUTLINED_FUNCTION_0_11();
  uint64_t v129 = v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v133 = (char *)v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v12);
  uint64_t v134 = (char *)v127 - v13;
  OUTLINED_FUNCTION_0_11();
  uint64_t v139 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_5_2();
  uint64_t v135 = v16;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_10_0();
  v127[2] = v18;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_10_0();
  uint64_t v128 = v20;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v127 - v22;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v24);
  uint64_t v137 = (char *)v127 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  OUTLINED_FUNCTION_2_5();
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v29 = (void **)((char *)v127 - v28);
  MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)v127 - v30;
  uint64_t v130 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_5_2();
  uint64_t v132 = v33;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = ((char *)v127 - v35);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v3 + 16);
  uint64_t v140 = v2;
  uint64_t v38 = v4;
  uint64_t v39 = v4;
  uint64_t v40 = v3;
  v37(v39, v3);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v41 = type metadata accessor for CamParse;
    uint64_t v42 = (uint64_t)v31;
  }
  else
  {
    v127[0] = v23;
    outlined init with take of CamUSOParse((uint64_t)v31, (uint64_t)v36, (void (*)(void))type metadata accessor for CamUSOParse);
    uint64_t v131 = CamUSOParse.appShortcutInvocation.getter();
    v127[1] = v55;
    if (v54)
    {
      unint64_t v56 = v54;
      uint64_t v138 = v36;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.common);
      OUTLINED_FUNCTION_13_6();
      v58();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      unint64_t v59 = Logger.logObject.getter();
      os_log_type_t v60 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = OUTLINED_FUNCTION_8_8();
        uint64_t v140 = OUTLINED_FUNCTION_7_9();
        uint64_t v142 = v140;
        *(_DWORD *)uint64_t v61 = 136315394;
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v38, v3);
        uint64_t v64 = OUTLINED_FUNCTION_18_6(v62, v63);
        OUTLINED_FUNCTION_24_5(v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v65 = OUTLINED_FUNCTION_20_4();
        v66(v65);
        *(_WORD *)(v61 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v52 = v131;
        uint64_t v141 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v56, &v142);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9CFE000, v59, v60, "Inferring bundle for %s from AS invocation = %s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_2_2();

        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v138, (void (*)(void))type metadata accessor for CamUSOParse);
        swift_bridgeObjectRelease();
        unint64_t v53 = v56;
      }
      else
      {
        swift_bridgeObjectRelease_n();
        OUTLINED_FUNCTION_21_4();

        uint64_t v118 = OUTLINED_FUNCTION_20_4();
        v119(v118);
        _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v138, (void (*)(void))type metadata accessor for CamUSOParse);
        swift_bridgeObjectRelease();
        unint64_t v53 = v56;
        uint64_t v52 = v131;
      }
      goto LABEL_44;
    }
    uint64_t v41 = type metadata accessor for CamUSOParse;
    uint64_t v42 = (uint64_t)v36;
  }
  _s7SiriCam0B5ParseOWOhTm_1(v42, (void (*)(void))v41);
  uint64_t v43 = v38;
  v37(v38, v3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v45 = v138;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v46 = *v29;
    PommesResponse.sash()((uint64_t)v138);
    uint64_t v47 = v136;
    if (__swift_getEnumTagSinglePayload((uint64_t)v45, 1, v136) != 1)
    {
      uint64_t v99 = v129;
      (*(void (**)(char *, NSObject *, uint64_t))(v129 + 32))(v134, v45, v47);
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v100 = type metadata accessor for Logger();
      __swift_project_value_buffer(v100, (uint64_t)static Logger.common);
      uint64_t v101 = v139;
      uint64_t v102 = v128;
      OUTLINED_FUNCTION_11_7();
      v103();
      uint64_t v104 = v133;
      OUTLINED_FUNCTION_13_6();
      v105();
      uint64_t v106 = Logger.logObject.getter();
      os_log_type_t v107 = static os_log_type_t.debug.getter();
      uint64_t v108 = v47;
      if (os_log_type_enabled(v106, v107))
      {
        uint64_t v109 = OUTLINED_FUNCTION_8_8();
        uint64_t v140 = OUTLINED_FUNCTION_7_9();
        uint64_t v142 = v140;
        *(_DWORD *)uint64_t v109 = 136315394;
        uint64_t v110 = (*(uint64_t (**)(uint64_t))(v40 + 8))(v43);
        uint64_t v141 = OUTLINED_FUNCTION_18_6(v110, v111);
        uint64_t v138 = v106;
        OUTLINED_FUNCTION_14_6();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v102, v43);
        *(_WORD *)(v109 + 12) = 2080;
        uint64_t v112 = v133;
        uint64_t v113 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
        uint64_t v141 = OUTLINED_FUNCTION_18_6(v113, v114);
        OUTLINED_FUNCTION_14_6();
        swift_bridgeObjectRelease();
        uint64_t v115 = *(void (**)(char *, uint64_t))(v99 + 8);
        uint64_t v108 = v136;
        v115(v112, v136);
        uint64_t v106 = v138;
        OUTLINED_FUNCTION_33_1(&dword_1C9CFE000, v116, v117, "Inferring bundle for %s from sash = %s");
        OUTLINED_FUNCTION_30_2();
        OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_2_2();
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v102, v43);
        uint64_t v115 = *(void (**)(char *, uint64_t))(v99 + 8);
        v115(v104, v47);
      }

      uint64_t v120 = v108;
      uint64_t v121 = v134;
      uint64_t v52 = Apple_Parsec_Siri_V2alpha_Sash.appID.getter();
      unint64_t v53 = v122;

      v115(v121, v120);
      goto LABEL_44;
    }

    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v45, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_Sash?);
  }
  else
  {
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)v29, (void (*)(void))type metadata accessor for CamParse);
  }
  uint64_t v48 = (uint64_t)v137;
  v37(v43, v3);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v49 = type metadata accessor for CamParse;
    uint64_t v50 = v48;
LABEL_9:
    _s7SiriCam0B5ParseOWOhTm_1(v50, (void (*)(void))v49);
    uint64_t v138 = *(NSObject **)(v3 + 8);
    uint64_t v139 = v3;
    v51._uint64_t countAndFlagsBits = ((uint64_t (*)(uint64_t, uint64_t))v138)(v43, v3);
    PluginToBundleMap.init(rawValue:)(v51);
    if (v142 == 32)
    {
      uint64_t v52 = 0;
      unint64_t v53 = 0;
    }
    else
    {
      LOBYTE(v141) = v142;
      PluginToBundleMap.associatedAppBundleId.getter();
      uint64_t v52 = v67;
      unint64_t v53 = v68;
    }
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    __swift_project_value_buffer(v69, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_11_7();
    v70();
    swift_bridgeObjectRetain_n();
    uint64_t v71 = Logger.logObject.getter();
    os_log_type_t v72 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = OUTLINED_FUNCTION_8_8();
      uint64_t v140 = OUTLINED_FUNCTION_7_9();
      uint64_t v142 = v140;
      *(_DWORD *)uint64_t v73 = 136315394;
      uint64_t v131 = v52;
      uint64_t v74 = ((uint64_t (*)(uint64_t, uint64_t))v138)(v43, v139);
      uint64_t v141 = OUTLINED_FUNCTION_18_6(v74, v75);
      OUTLINED_FUNCTION_14_6();
      swift_bridgeObjectRelease();
      uint64_t v52 = v131;
      OUTLINED_FUNCTION_9_10();
      v76();
      *(_WORD *)(v73 + 12) = 2080;
      if (v53) {
        uint64_t v77 = v52;
      }
      else {
        uint64_t v77 = 7104878;
      }
      if (v53) {
        unint64_t v78 = v53;
      }
      else {
        unint64_t v78 = 0xE300000000000000;
      }
      swift_bridgeObjectRetain();
      uint64_t v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v142);
      OUTLINED_FUNCTION_15_6(v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_33_1(&dword_1C9CFE000, v80, v81, "Inferring bundle for %s from plugin mapping = %s");
      OUTLINED_FUNCTION_30_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      OUTLINED_FUNCTION_9_10();
      v82();

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_44;
  }
  uint64_t v83 = v132;
  outlined init with take of CamUSOParse(v48, v132, (void (*)(void))type metadata accessor for CamUSOParse);
  uint64_t v84 = (uint64_t *)(v83 + *(int *)(v130 + 24));
  unint64_t v53 = v84[1];
  if (!v53)
  {
    uint64_t v49 = type metadata accessor for CamUSOParse;
    uint64_t v50 = v83;
    goto LABEL_9;
  }
  uint64_t v52 = *v84;
  uint64_t v85 = one-time initialization token for common;
  swift_bridgeObjectRetain();
  if (v85 != -1) {
    swift_once();
  }
  uint64_t v86 = type metadata accessor for Logger();
  __swift_project_value_buffer(v86, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_11_7();
  v87();
  swift_bridgeObjectRetain_n();
  uint64_t v88 = Logger.logObject.getter();
  os_log_type_t v89 = static os_log_type_t.debug.getter();
  int v90 = v89;
  if (os_log_type_enabled(v88, v89))
  {
    uint64_t v91 = OUTLINED_FUNCTION_8_8();
    uint64_t v92 = OUTLINED_FUNCTION_7_9();
    uint64_t v131 = v52;
    uint64_t v142 = v92;
    *(_DWORD *)uint64_t v91 = 136315394;
    os_log_type_t v93 = *(uint64_t (**)(uint64_t))(v40 + 8);
    LODWORD(v140) = v90;
    uint64_t v94 = v93(v43);
    uint64_t v141 = OUTLINED_FUNCTION_18_6(v94, v95);
    OUTLINED_FUNCTION_14_6();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_9_10();
    v96();
    *(_WORD *)(v91 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v97 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v131, v53, &v142);
    OUTLINED_FUNCTION_15_6(v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v88, (os_log_type_t)v140, "Inferring bundle for %s from USO parse = %s", (uint8_t *)v91, 0x16u);
    swift_arrayDestroy();
    uint64_t v52 = v131;
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    uint64_t v98 = v132;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_9_10();
    v123();
    uint64_t v98 = v83;
  }
  _s7SiriCam0B5ParseOWOhTm_1(v98, (void (*)(void))type metadata accessor for CamUSOParse);
LABEL_44:
  uint64_t v124 = v52;
  uint64_t v125 = (void *)v53;
  result.value._object = v125;
  result.value._uint64_t countAndFlagsBits = v124;
  return result;
}

void RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)()
{
  OUTLINED_FUNCTION_23_5();
  uint64_t v35 = v2;
  uint64_t v36 = v3;
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  uint64_t v7 = v6;
  uint64_t v34 = v8;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v37 = v11;
  uint64_t v33 = v13;
  uint64_t v14 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_11();
  uint64_t v16 = v15;
  uint64_t v32 = v15;
  MEMORY[0x1F4188790](v17);
  OUTLINED_FUNCTION_25_3();
  uint64_t v18 = type metadata accessor for CamParse(0);
  uint64_t v19 = OUTLINED_FUNCTION_11_1(v18);
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_26_3();
  uint64_t v20 = type metadata accessor for RankedAction();
  uint64_t v21 = (int *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_2_1();
  uint64_t v24 = (void *)(v23 - v22);
  outlined init with copy of CamParse(v12, v1, (void (*)(void))type metadata accessor for CamParse);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16);
  v25(v0, v7, v14);
  uint64_t v26 = (void *)((char *)v24 + v21[12]);
  *uint64_t v24 = v33;
  v24[1] = v34;
  outlined init with copy of CamParse(v1, (uint64_t)v24 + v21[7], (void (*)(void))type metadata accessor for CamParse);
  *(void *)((char *)v24 + v21[8]) = v35;
  *(void *)((char *)v24 + v21[9]) = v10;
  *(void *)((char *)v24 + v21[10]) = v36;
  v25((uint64_t)v24 + v21[11], v0, v14);
  type metadata accessor for MLFeatureValue();
  *(void *)((char *)v24 + v21[13]) = Dictionary.init(dictionaryLiteral:)();
  *uint64_t v26 = 0;
  v26[1] = 0;
  uint64_t v27 = specialized ActionProtocol.inferBundleId()((uint64_t (*)(void))type metadata accessor for RankedAction, (void (*)(void))type metadata accessor for RankedAction, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v29 = v28;
  uint64_t v30 = *(void (**)(void))(v32 + 8);
  OUTLINED_FUNCTION_9_10();
  v30();
  _s7SiriCam0B5ParseOWOhTm_1(v1, (void (*)(void))type metadata accessor for CamParse);
  swift_bridgeObjectRelease();
  *uint64_t v26 = v27;
  v26[1] = v29;
  OUTLINED_FUNCTION_9_10();
  v30();
  _s7SiriCam0B5ParseOWOhTm_1(v37, (void (*)(void))type metadata accessor for CamParse);
  outlined init with take of CamUSOParse((uint64_t)v24, v38, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v31 = v21[13];
  swift_bridgeObjectRelease();
  *(void *)(v38 + v31) = v39;
  OUTLINED_FUNCTION_19_4();
}

uint64_t RankedAction.flowHandlerId.getter()
{
  return OUTLINED_FUNCTION_28_2();
}

uint64_t RankedAction.parse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for RankedAction();
  return outlined init with copy of CamParse(v1 + *(int *)(v3 + 20), a1, (void (*)(void))type metadata accessor for CamParse);
}

uint64_t RankedAction.alternatives.getter()
{
  type metadata accessor for RankedAction();
  return swift_bridgeObjectRetain();
}

double RankedAction.score.getter()
{
  return *(double *)(v0 + *(int *)(type metadata accessor for RankedAction() + 28));
}

uint64_t RankedAction.userData.getter()
{
  type metadata accessor for RankedAction();
  return swift_bridgeObjectRetain();
}

uint64_t RankedAction.loggingId.getter()
{
  type metadata accessor for RankedAction();
  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_3();
  uint64_t v0 = OUTLINED_FUNCTION_28_2();
  return v1(v0);
}

uint64_t RankedAction.inferredBundleId.getter()
{
  return OUTLINED_FUNCTION_28_2();
}

uint64_t RankedAction.inferredBundleId.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)(v2 + *(int *)(type metadata accessor for RankedAction() + 40));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*RankedAction.inferredBundleId.modify())(void)
{
  return destructiveProjectEnumData for FeatureDictionaryError;
}

uint64_t RankedAction.init(flowHandlerId:parse:score:alternatives:userData:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = OUTLINED_FUNCTION_11_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v7 = type metadata accessor for CamParse(0);
  uint64_t v8 = OUTLINED_FUNCTION_11_1(v7);
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_25_3();
  outlined init with copy of CamParse(a3, v3, (void (*)(void))type metadata accessor for CamParse);
  UUID.init()();
  RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
  return _s7SiriCam0B5ParseOWOhTm_1(a3, (void (*)(void))type metadata accessor for CamParse);
}

void RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)()
{
  OUTLINED_FUNCTION_23_5();
  uint64_t v1 = v0;
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v16 = (int *)type metadata accessor for RankedAction();
  uint64_t v17 = (void *)((char *)v15 + v16[10]);
  *uint64_t v15 = v13;
  v15[1] = v11;
  outlined init with copy of CamParse(v9, (uint64_t)v15 + v16[5], (void (*)(void))type metadata accessor for CamParse);
  *(void *)((char *)v15 + v16[6]) = v3;
  *(void *)((char *)v15 + v16[7]) = v7;
  *(void *)((char *)v15 + v16[8]) = v1;
  uint64_t v18 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_3();
  uint64_t v20 = v19;
  OUTLINED_FUNCTION_13_6();
  v21();
  type metadata accessor for MLFeatureValue();
  *(void *)((char *)v15 + v16[11]) = Dictionary.init(dictionaryLiteral:)();
  *uint64_t v17 = 0;
  v17[1] = 0;
  uint64_t v22 = specialized ActionProtocol.inferBundleId()((uint64_t (*)(void))type metadata accessor for RankedAction, (void (*)(void))type metadata accessor for RankedAction, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v24 = v23;
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v5, v18);
  _s7SiriCam0B5ParseOWOhTm_1(v9, (void (*)(void))type metadata accessor for CamParse);
  swift_bridgeObjectRelease();
  *uint64_t v17 = v22;
  v17[1] = v24;
  OUTLINED_FUNCTION_19_4();
}

uint64_t RankedAction.description.getter()
{
  _StringGuts.grow(_:)(100);
  v1._uint64_t countAndFlagsBits = 0xD000000000000014;
  v1._object = (void *)0x80000001C9DA39C0;
  String.append(_:)(v1);
  type metadata accessor for RankedAction();
  Double.write<A>(to:)();
  v2._uint64_t countAndFlagsBits = 0xD000000000000011;
  v2._object = (void *)0x80000001C9DA39E0;
  String.append(_:)(v2);
  uint64_t v3 = *v0;
  uint64_t v4 = (void *)v0[1];
  swift_bridgeObjectRetain();
  v5._uint64_t countAndFlagsBits = v3;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._uint64_t countAndFlagsBits = 0x614472657375202CLL;
  v6._object = (void *)0xEC000000203A6174;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : Any]?);
  v7._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._uint64_t countAndFlagsBits = 0x3A6573726170202CLL;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  uint64_t v9 = type metadata accessor for CamParse(0);
  _print_unlocked<A, B>(_:_:)();
  v10._object = (void *)0x80000001C9DA3A00;
  v10._uint64_t countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v10);
  uint64_t v11 = swift_bridgeObjectRetain();
  v12._uint64_t countAndFlagsBits = MEMORY[0x1CB78D400](v11, v9);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x6E6967676F6C202CLL;
  v13._object = (void *)0xED0000203A644967;
  String.append(_:)(v13);
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._uint64_t countAndFlagsBits = 41;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  return 0;
}

unint64_t RankedAction.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of RankedAction.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 5) {
    return 5;
  }
  else {
    return v3;
  }
}

uint64_t RankedAction.CodingKeys.init(intValue:)()
{
  return 5;
}

uint64_t RankedAction.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0x646E6148776F6C66;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6174614472657375;
      break;
    case 2:
      uint64_t result = 0x6573726170;
      break;
    case 3:
      uint64_t result = 0x74616E7265746C61;
      break;
    case 4:
      uint64_t result = 0x65726F6373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t RankedAction.CodingKeys.stringValue.getter(char a1)
{
  uint64_t result = 0x646E6148776F6C66;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6174614472657375;
      break;
    case 2:
      uint64_t result = 0x6573726170;
      break;
    case 3:
      uint64_t result = 0x74616E7265746C61;
      break;
    case 4:
      uint64_t result = 0x65726F6373;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance RankedAction.CodingKeys()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance RankedAction.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance RankedAction.CodingKeys()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance RankedAction.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance RankedAction.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = RankedAction.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance RankedAction.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = RankedAction.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance RankedAction.CodingKeys()
{
  return RankedAction.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance RankedAction.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RankedAction.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance RankedAction.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = RankedAction.CodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RankedAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance RankedAction.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t RankedAction.encode(to:)(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<RankedAction.CodingKeys>);
  OUTLINED_FUNCTION_0_11();
  uint64_t v6 = v5;
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_2_1();
  uint64_t v10 = v9 - v8;
  uint64_t v11 = *(void *)(v1 + *(int *)(type metadata accessor for RankedAction() + 32));
  if (v11) {
    specialized _NativeDictionary.mapValues<A>(_:)(v11);
  }
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for CamParse(0);
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type CamParse and conformance CamParse, (void (*)(uint64_t))type metadata accessor for CamParse);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v2)
  {
    uint64_t v12 = OUTLINED_FUNCTION_5_8();
    v13(v12);
    return swift_bridgeObjectRelease();
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : String]?);
    lazy protocol witness table accessor for type [String : String]? and conformance <A> A?();
    OUTLINED_FUNCTION_12_4();
    swift_bridgeObjectRelease();
    KeyedEncodingContainer.encode(_:forKey:)();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CamParse]);
    lazy protocol witness table accessor for type [CamParse] and conformance <A> [A]();
    OUTLINED_FUNCTION_12_4();
    KeyedEncodingContainer.encode(_:forKey:)();
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v10, v4);
  }
}

void RankedAction.with(score:)()
{
  OUTLINED_FUNCTION_23_5();
  uint64_t v1 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_11();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_1();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for CamParse(0);
  uint64_t v9 = OUTLINED_FUNCTION_11_1(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for RankedAction();
  outlined init with copy of CamParse(v0 + *(int *)(v13 + 20), v12, (void (*)(void))type metadata accessor for CamParse);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v7, v0 + *(int *)(v13 + 36), v1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  RankedAction.init(flowHandlerId:parse:score:loggingId:features:alternatives:userData:)();
  OUTLINED_FUNCTION_19_4();
}

uint64_t protocol witness for Encodable.encode(to:) in conformance RankedAction(void *a1)
{
  return RankedAction.encode(to:)(a1);
}

uint64_t closure #1 in ActionProtocol.getAssociatedAppMentioned()@<X0>(unint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = v2;
  uint64_t v67 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_0_11();
  uint64_t v8 = v7;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  Swift::String v14 = (char *)v56 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v16 = OUTLINED_FUNCTION_11_1(v15);
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_26_3();
  unint64_t v17 = *a1;
  if (v17 >> 62)
  {
    swift_bridgeObjectRetain();
    if (!_CocoaArrayWrapper.endIndex.getter()) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v18 = *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v18) {
      goto LABEL_42;
    }
  }
  uint64_t v69 = v12;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v17 & 0xC000000000000001) == 0, v17);
  if ((v17 & 0xC000000000000001) != 0) {
    MEMORY[0x1CB78D7C0](0, v17);
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = dispatch thunk of UsoValue.getAsEntity()();
  uint64_t result = swift_release();
  if (!v19) {
    goto LABEL_43;
  }
  uint64_t v21 = UsoEntity.attributes.getter();
  swift_release();
  unint64_t v22 = specialized Dictionary.subscript.getter(1701667182, 0xE400000000000000, v21);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v22) {
    goto LABEL_43;
  }
  if (!(v22 >> 62))
  {
    if (*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_42:
    uint64_t result = swift_bridgeObjectRelease();
LABEL_43:
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v55) {
    goto LABEL_42;
  }
LABEL_9:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v22 & 0xC000000000000001) == 0, v22);
  if ((v22 & 0xC000000000000001) != 0)
  {
    uint64_t v23 = MEMORY[0x1CB78D7C0](0, v22);
  }
  else
  {
    uint64_t v23 = *(void *)(v22 + 32);
    swift_retain();
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!v23) {
    goto LABEL_43;
  }
  uint64_t v24 = v23;
  uint64_t v60 = v3;
  swift_retain();
  uint64_t v25 = dispatch thunk of UsoValue.getUsoIdentifiers()();
  swift_release();
  uint64_t v26 = *(void *)(v25 + 16);
  if (!v26)
  {
    uint64_t v48 = 1;
LABEL_32:
    uint64_t v49 = v60;
    goto LABEL_35;
  }
  v56[1] = v24;
  uint64_t v57 = v8;
  uint64_t v58 = a2;
  uint64_t v59 = v4;
  uint64_t v27 = v8 + 16;
  uint64_t v28 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  unint64_t v29 = v25 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v65 = *MEMORY[0x1E4FA3830];
  uint64_t v61 = *MEMORY[0x1E4FA3928];
  uint64_t v63 = *(void *)(v27 + 56);
  v56[0] = v25;
  swift_bridgeObjectRetain();
  uint64_t v64 = (void (**)(uint64_t, uint64_t))(v27 - 8);
  uint64_t v62 = (v27 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  uint64_t v30 = v67;
  uint64_t v66 = v14;
  while (1)
  {
    uint64_t v68 = v26;
    v28(v14, v29, v30);
    uint64_t v31 = UsoIdentifier.appBundleId.getter();
    uint64_t v33 = v32;
    if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
    {
      swift_bridgeObjectRelease_n();
      uint64_t v40 = OUTLINED_FUNCTION_22_5();
      ((void (*)(uint64_t))v28)(v40);
    }
    else
    {
      char v36 = OUTLINED_FUNCTION_29_1();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = OUTLINED_FUNCTION_22_5();
      ((void (*)(uint64_t))v28)(v37);
      if ((v36 & 1) == 0)
      {
        uint64_t v38 = *v64;
        (*v64)(v4, v30);
        Swift::String v14 = v66;
        uint64_t v39 = v68;
        goto LABEL_29;
      }
    }
    uint64_t v41 = UsoIdentifier.namespace.getter();
    uint64_t v43 = v42;
    uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v14 = v66;
    uint64_t v39 = v68;
    if (!v43)
    {
      swift_bridgeObjectRelease();
      uint64_t v38 = *v64;
      uint64_t v30 = v67;
      (*v64)(v4, v67);
      goto LABEL_29;
    }
    if (v41 == v44 && v43 == v45) {
      break;
    }
    char v47 = OUTLINED_FUNCTION_29_1();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v38 = *v64;
    uint64_t v30 = v67;
    (*v64)((uint64_t)v69, v67);
    if (v47) {
      goto LABEL_34;
    }
LABEL_29:
    v38((uint64_t)v14, v30);
    v29 += v63;
    uint64_t v26 = v39 - 1;
    if (!v26)
    {
      swift_bridgeObjectRelease();
      uint64_t v48 = 1;
      a2 = v58;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = v67;
  (*v64)((uint64_t)v69, v67);
LABEL_34:
  swift_bridgeObjectRelease();
  uint64_t v49 = v60;
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v60, v14, v30);
  uint64_t v48 = 0;
  a2 = v58;
LABEL_35:
  uint64_t v50 = v67;
  __swift_storeEnumTagSinglePayload(v49, v48, 1, v67);
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v49, 1, v50) == 1)
  {
    swift_release();
    uint64_t result = outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v49, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_43;
  }
  uint64_t v51 = UsoIdentifier.value.getter();
  uint64_t v53 = v52;
  swift_release();
  OUTLINED_FUNCTION_9_10();
  uint64_t result = v54();
  *a2 = v51;
  a2[1] = v53;
  return result;
}

uint64_t ActionProtocol.actionRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)(v2, a1, a2);
}

uint64_t serialize(_:at:)(uint64_t result, unsigned char **a2)
{
  uint64_t v2 = *a2;
  *uint64_t v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  uint64_t v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = swift_getObjectType();
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    uint64_t ObjectType = MEMORY[0x1E4FBB9B0];
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(void *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter();
      uint64_t result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    uint64_t result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    uint64_t v8 = _StringObject.sharedUTF8.getter();
    if (!v8)
    {
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0) {
    return 0;
  }
  else {
    return swift_unknownObjectRetain();
  }
}

void *specialized UnsafeMutableRawPointer.initializeMemory<A>(as:from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v2 + 16) + 1, 1, v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *(void *)(v2 + 16) = v4 + 1;
  *(unsigned char *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000) != 0)
  {
    Swift::Int v2 = String.UTF8View._foreignCount()();
    if (v2) {
      goto LABEL_6;
    }
    return MEMORY[0x1E4FBC860];
  }
  if ((a2 & 0x2000000000000000) != 0) {
    Swift::Int v2 = HIBYTE(a2) & 0xF;
  }
  else {
    Swift::Int v2 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
LABEL_6:
  unint64_t v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    unint64_t v4 = v3;
    uint64_t v5 = _StringGuts.copyUTF8(into:)();
    if ((v6 & 1) != 0 || v5 != v2) {
      goto LABEL_14;
    }
    return (uint64_t)v4;
  }
  _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
LABEL_14:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *(void *)(a4 + 24);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  int64_t v8 = *(void *)(a4 + 16);
  if (v7 <= v8) {
    int64_t v9 = *(void *)(a4 + 16);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    uint64_t v10 = (char *)swift_allocObject();
    size_t v11 = _swift_stdlib_malloc_size(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    uint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = (char *)(a4 + 32);
  if (v5)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(v13, v8, v12);
    *(void *)(a4 + 16) = 0;
  }
  else
  {
    specialized UnsafeMutablePointer.initialize(from:count:)(v13, v8, v12);
  }
  swift_bridgeObjectRelease();
  return v10;
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, size_t __n, char *__dst)
{
  if ((__n & 0x8000000000000000) != 0 || (&__dst[__n] > __src ? (BOOL v3 = &__src[__n] > __dst) : (BOOL v3 = 0), v3))
  {
    uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return memcpy(__dst, __src, __n);
  }
  return result;
}

unsigned char **closure #1 in OSLogArguments.append(_:)(unsigned char **result, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v4 = *result;
  *unint64_t v4 = a4;
  *uint64_t result = v4 + 1;
  return result;
}

uint64_t type metadata accessor for RankedAction()
{
  uint64_t result = type metadata singleton initialization cache for RankedAction;
  if (!type metadata singleton initialization cache for RankedAction) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys;
  if (!lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction.CodingKeys and conformance RankedAction.CodingKeys);
  }
  return result;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [CamParse] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [CamParse]);
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_0(&lazy protocol witness table cache variable for type CamParse and conformance CamParse, (void (*)(uint64_t))type metadata accessor for CamParse);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [CamParse] and conformance <A> [A]);
  }
  return result;
}

uint64_t specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  BOOL v3 = (void *)result;
  int64_t v4 = 0;
  uint64_t v32 = a1;
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v6 = a1 + 64;
  uint64_t v5 = v7;
  uint64_t v8 = 1 << *(unsigned char *)(v6 - 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v5;
  uint64_t v28 = v6;
  int64_t v29 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = result + 64;
  if ((v9 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v4 << 6))
  {
    unint64_t v17 = (uint64_t *)(*(void *)(v32 + 48) + 16 * i);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    outlined init with copy of Any(*(void *)(v32 + 56) + 32 * i, (uint64_t)v31);
    outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
    swift_bridgeObjectRetain();
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
    *(void *)(v11 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v23 = (void *)(v3[6] + 16 * i);
    *uint64_t v23 = v18;
    v23[1] = v19;
    uint64_t v24 = (uint64_t *)(v3[7] + 16 * i);
    *uint64_t v24 = v20;
    v24[1] = v22;
    uint64_t v25 = v3[2];
    BOOL v26 = __OFADD__(v25, 1);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v27;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v14 >= v29) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v29) {
        return (uint64_t)v3;
      }
      unint64_t v15 = *(void *)(v28 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v29) {
          return (uint64_t)v3;
        }
        unint64_t v15 = *(void *)(v28 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 3;
  if (v16 >= v29) {
    return (uint64_t)v3;
  }
  unint64_t v15 = *(void *)(v28 + 8 * v16);
  if (v15)
  {
    int64_t v4 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v4 >= v29) {
      return (uint64_t)v3;
    }
    unint64_t v15 = *(void *)(v28 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = (void *)result;
  uint64_t v5 = 0;
  uint64_t v27 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  unint64_t v10 = -1;
  if (v9 < 64) {
    unint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & v6;
  uint64_t v25 = v7;
  BOOL v26 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v27 + 56) + 8 * i);
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)static MLMultiArray.makeScalar(from:)(v21);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v22 = (void *)(v4[6] + 16 * i);
    *uint64_t v22 = v19;
    v22[1] = v20;
    *(void *)(v4[7] + 8 * i) = result;
    uint64_t v23 = v4[2];
    unint64_t v15 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v24;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v26) {
      return (uint64_t)v4;
    }
    int64_t v16 = *(void *)(v25 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    uint64_t v11 = (v16 - 1) & v16;
  }
  unint64_t v17 = v5 + 1;
  if (v5 + 1 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v5 + 2;
  if (v5 + 2 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v5 + 3;
  if (v5 + 3 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16)
  {
LABEL_14:
    uint64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v26) {
      return (uint64_t)v4;
    }
    int64_t v16 = *(void *)(v25 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t result;
  void *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t i;
  BOOL v15;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  int64_t v4 = (void *)result;
  uint64_t v5 = 0;
  uint64_t v27 = a1;
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v7 = a1 + 64;
  uint64_t v6 = v8;
  uint64_t v9 = 1 << *(unsigned char *)(v7 - 32);
  unint64_t v10 = -1;
  if (v9 < 64) {
    unint64_t v10 = ~(-1 << v9);
  }
  uint64_t v11 = v10 & v6;
  uint64_t v25 = v7;
  BOOL v26 = (unint64_t)(v9 + 63) >> 6;
  unint64_t v12 = result + 64;
  if ((v10 & v6) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v13 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v13 | (v5 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v5 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(v27 + 48) + 16 * i);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(*(void *)(v27 + 56) + 8 * i);
    type metadata accessor for MLMultiArray();
    swift_bridgeObjectRetain();
    uint64_t result = (uint64_t)static MLMultiArray.makeScalar(from:)(v21);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return (uint64_t)v4;
    }
    *(void *)(v12 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v22 = (void *)(v4[6] + 16 * i);
    *uint64_t v22 = v19;
    v22[1] = v20;
    *(void *)(v4[7] + 8 * i) = result;
    uint64_t v23 = v4[2];
    unint64_t v15 = __OFADD__(v23, 1);
    uint64_t v24 = v23 + 1;
    if (v15)
    {
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v4[2] = v24;
    if (v11) {
      goto LABEL_4;
    }
LABEL_5:
    unint64_t v15 = __OFADD__(v5++, 1);
    if (v15) {
      goto LABEL_27;
    }
    if (v5 >= v26) {
      return (uint64_t)v4;
    }
    int64_t v16 = *(void *)(v25 + 8 * v5);
    if (!v16) {
      break;
    }
LABEL_15:
    uint64_t v11 = (v16 - 1) & v16;
  }
  unint64_t v17 = v5 + 1;
  if (v5 + 1 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v5 + 2;
  if (v5 + 2 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16) {
    goto LABEL_14;
  }
  unint64_t v17 = v5 + 3;
  if (v5 + 3 >= v26) {
    return (uint64_t)v4;
  }
  int64_t v16 = *(void *)(v25 + 8 * v17);
  if (v16)
  {
LABEL_14:
    uint64_t v5 = v17;
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v26) {
      return (uint64_t)v4;
    }
    int64_t v16 = *(void *)(v25 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_15;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *initializeBufferWithCopyOfBuffer for RankedAction(void *a1, void *a2, int *a3)
{
  int64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    uint64_t v8 = a3[5];
    uint64_t v9 = (void **)((char *)a1 + v8);
    unint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v10;
      *uint64_t v9 = *v10;
      id v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
LABEL_12:
        uint64_t v30 = a3[7];
        *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
        *(void *)((char *)v4 + v30) = *(void *)((char *)a2 + v30);
        uint64_t v31 = a3[9];
        *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
        uint64_t v32 = (char *)v4 + v31;
        uint64_t v33 = (char *)a2 + v31;
        uint64_t v34 = type metadata accessor for UUID();
        uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35(v32, v33, v34);
        uint64_t v36 = a3[10];
        uint64_t v37 = a3[11];
        uint64_t v38 = (void *)((char *)v4 + v36);
        uint64_t v39 = (void *)((char *)a2 + v36);
        uint64_t v40 = v39[1];
        *uint64_t v38 = *v39;
        v38[1] = v40;
        *(void *)((char *)v4 + v37) = *(void *)((char *)a2 + v37);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      int64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      int64_t v16 = (char *)v9 + v15;
      unint64_t v17 = (char *)v10 + v15;
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      uint64_t v23 = v14[6];
      uint64_t v24 = (void **)((char *)v9 + v23);
      uint64_t v25 = (void **)((char *)v10 + v23);
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v14[7];
      uint64_t v28 = (char *)v9 + v27;
      int64_t v29 = (char *)v10 + v27;
      v28[4] = v29[4];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  uint64_t v20 = *a2;
  *int64_t v4 = *a2;
  int64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

uint64_t destroy for RankedAction(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  int64_t v4 = (id *)(a1 + *(int *)(a2 + 20));
  type metadata accessor for CamParse(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v6 - 8) + 8))(v4, v6);
    uint64_t v7 = (uint64_t)v4 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v7, 1, v8)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + *(int *)(a2 + 36);
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for RankedAction(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = a3[5];
  uint64_t v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = *v9;
    *uint64_t v8 = *v9;
    id v20 = v19;
LABEL_9:
    swift_storeEnumTagMultiPayload();
    goto LABEL_10;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    uint64_t v13 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = (char *)v8 + v14;
    int64_t v16 = (char *)v9 + v14;
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v21 = v13[6];
    id v22 = (void **)((char *)v8 + v21);
    uint64_t v23 = (void **)((char *)v9 + v21);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v13[7];
    uint64_t v26 = (char *)v8 + v25;
    uint64_t v27 = (char *)v9 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
LABEL_10:
  uint64_t v28 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v28) = *(void *)((char *)a2 + v28);
  uint64_t v29 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v33 = *(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33(v30, v31, v32);
  uint64_t v34 = a3[10];
  uint64_t v35 = a3[11];
  uint64_t v36 = (void *)((char *)a1 + v34);
  uint64_t v37 = (void *)((char *)a2 + v34);
  uint64_t v38 = v37[1];
  *uint64_t v36 = *v37;
  v36[1] = v38;
  *(void *)((char *)a1 + v35) = *(void *)((char *)a2 + v35);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for RankedAction(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v6 = a3[5];
    uint64_t v7 = (void **)((char *)a1 + v6);
    uint64_t v8 = (void **)((char *)a2 + v6);
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)a1 + v6, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v9 = type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v18 = *v8;
      *uint64_t v7 = *v8;
      id v19 = v18;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      goto LABEL_11;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v11 - 8) + 16))(v7, v8, v11);
      uint64_t v12 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v13 = v12[5];
      uint64_t v14 = (char *)v7 + v13;
      uint64_t v15 = (char *)v8 + v13;
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      uint64_t v20 = v12[6];
      uint64_t v21 = (void **)((char *)v7 + v20);
      id v22 = (void **)((char *)v8 + v20);
      *uint64_t v21 = *v22;
      v21[1] = v22[1];
      uint64_t v23 = v12[7];
      uint64_t v24 = (char *)v7 + v23;
      uint64_t v25 = (char *)v8 + v23;
      int v26 = *(_DWORD *)v25;
      v24[4] = v25[4];
      *(_DWORD *)uint64_t v24 = v26;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
LABEL_11:
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 24))(v28, v29, v30);
  uint64_t v31 = a3[10];
  uint64_t v32 = (void *)((char *)a1 + v31);
  uint64_t v33 = (void *)((char *)a2 + v31);
  void *v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *initializeWithTake for RankedAction(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v7, v8, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v7, v8, v10);
    uint64_t v11 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v12 = v11[5];
    uint64_t v13 = &v7[v12];
    uint64_t v14 = &v8[v12];
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v14, 1, v15))
    {
      uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v13, v14, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      __swift_storeEnumTagSinglePayload((uint64_t)v13, 0, 1, v15);
    }
    *(_OWORD *)&v7[v11[6]] = *(_OWORD *)&v8[v11[6]];
    uint64_t v17 = v11[7];
    uint64_t v18 = &v7[v17];
    id v19 = &v8[v17];
    uint64_t v18[4] = v19[4];
    *(_DWORD *)uint64_t v18 = *(_DWORD *)v19;
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v20 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v21 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  id v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v22, v23, v24);
  uint64_t v25 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v25) = *(void *)((char *)a2 + v25);
  return a1;
}

void *assignWithTake for RankedAction(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    _s7SiriCam0B5ParseOWOhTm_1((uint64_t)a1 + v7, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v10 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
    else
    {
      uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
      uint64_t v12 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v13 = v12[5];
      uint64_t v14 = &v8[v13];
      uint64_t v15 = &v9[v13];
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
      {
        uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
        __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
      }
      *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
      uint64_t v18 = v12[7];
      id v19 = &v8[v18];
      uint64_t v20 = &v9[v18];
      uint64_t v19[4] = v20[4];
      *(_DWORD *)id v19 = *(_DWORD *)v20;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_bridgeObjectRelease();
  uint64_t v21 = a3[8];
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + v21) = *(void *)((char *)a2 + v21);
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[9];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40))(v23, v24, v25);
  uint64_t v26 = a3[10];
  uint64_t v27 = (void *)((char *)a1 + v26);
  uint64_t v28 = (void *)((char *)a2 + v26);
  uint64_t v30 = *v28;
  uint64_t v29 = v28[1];
  void *v27 = v30;
  v27[1] = v29;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RankedAction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D47804);
}

uint64_t sub_1C9D47804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    type metadata accessor for CamParse(0);
    OUTLINED_FUNCTION_0_3();
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a3 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(int *)(a3 + 36);
    }
    return __swift_getEnumTagSinglePayload(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for RankedAction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D478C4);
}

uint64_t sub_1C9D478C4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    type metadata accessor for CamParse(0);
    OUTLINED_FUNCTION_0_3();
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = *(int *)(a4 + 20);
    }
    else
    {
      uint64_t v10 = type metadata accessor for UUID();
      uint64_t v11 = *(int *)(a4 + 36);
    }
    return __swift_storeEnumTagSinglePayload(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata completion function for RankedAction()
{
  uint64_t result = type metadata accessor for CamParse(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UUID();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t dispatch thunk of ActionProtocol.flowHandlerId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ActionProtocol.parse.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of ActionProtocol.userData.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of ActionProtocol.loggingId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of ActionProtocol.inferredBundleId.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

unsigned char *storeEnumTagSinglePayload for RankedAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D47BA0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

void *type metadata accessor for RankedAction.CodingKeys()
{
  return &unk_1F2416970;
}

uint64_t outlined init with take of CamUSOParse(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of CamParse(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_1(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(uint64_t a1, uint64_t *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(a2);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_8()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_7_9()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_8_8()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_10_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x16u);
}

uint64_t OUTLINED_FUNCTION_12_4()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_14_6()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_6(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_18_6(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 88));
}

uint64_t OUTLINED_FUNCTION_20_4()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_21_4()
{
  return swift_bridgeObjectRelease_n();
}

uint64_t OUTLINED_FUNCTION_22_5()
{
  return *(void *)(v0 - 72);
}

uint64_t OUTLINED_FUNCTION_24_5(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

BOOL OUTLINED_FUNCTION_27_2(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_28_2()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_29_1()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_30_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_32_2(float a1)
{
  float *v1 = a1;
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_33_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v5, v4, a4, v6, 0x16u);
}

uint64_t specialized OptionSet<>.init()()
{
  return 0;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, void *), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v8 = (uint64_t *)(a3 + 56);
  uint64_t v9 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v10 = *(v8 - 1);
    uint64_t v11 = *v8;
    uint64_t v12 = *(v8 - 2);
    v18[0] = *(v8 - 3);
    v18[1] = v12;
    v18[2] = v10;
    uint64_t v18[3] = v11;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a1(&v19, v18);
    if (v4) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    char v13 = v19;
    if (v19 != 4)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        OUTLINED_FUNCTION_22_2();
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v15;
      }
      unint64_t v14 = *(void *)(v9 + 16);
      if (v14 >= *(void *)(v9 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v9 = v16;
      }
      *(void *)(v9 + 16) = v14 + 1;
      *(unsigned char *)(v9 + v14 + 32) = v13;
    }
    v8 += 4;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      return v9;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(uint64_t *__return_ptr, char *), uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  while (1)
  {
    char v18 = *(unsigned char *)(a3 + v5 + 32);
    a1(&v16, &v18);
    if (v3) {
      break;
    }
    uint64_t v7 = v17;
    if (v17)
    {
      uint64_t v8 = v16;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = v11;
      }
      unint64_t v9 = *(void *)(v6 + 16);
      if (v9 >= *(void *)(v6 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v6 = v12;
      }
      *(void *)(v6 + 16) = v9 + 1;
      uint64_t v10 = v6 + 16 * v9;
      *(void *)(v10 + 32) = v8;
      *(void *)(v10 + 40) = v7;
    }
    if (v14 == ++v5)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a1;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v7 = OUTLINED_FUNCTION_11_1(v6);
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_9_4();
  uint64_t v29 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_0_11();
  uint64_t v27 = v8;
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v28 = (uint64_t)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a3 + 16);
  if (!v14) {
    return MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = a3;
  uint64_t v15 = (uint64_t *)(a3 + 56);
  uint64_t v16 = MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v17 = *(v15 - 1);
    uint64_t v18 = *v15;
    uint64_t v19 = *(v15 - 2);
    v30[0] = *(v15 - 3);
    v30[1] = v19;
    v30[2] = v17;
    v30[3] = v18;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31(v30);
    if (v3) {
      break;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v4, 1, v29) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v4, &demangling cache variable for type metadata for RankedAction?);
    }
    else
    {
      outlined init with take of CamUSOParse(v4, (uint64_t)v13, (void (*)(void))type metadata accessor for RankedAction);
      outlined init with take of CamUSOParse((uint64_t)v13, v28, (void (*)(void))type metadata accessor for RankedAction);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        char v22 = OUTLINED_FUNCTION_22_2();
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v22, v23, v24, v16);
      }
      unint64_t v21 = *(void *)(v16 + 16);
      unint64_t v20 = *(void *)(v16 + 24);
      if (v21 >= v20 >> 1) {
        uint64_t v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v16);
      }
      *(void *)(v16 + 16) = v21 + 1;
      outlined init with take of CamUSOParse(v28, v16+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v21, (void (*)(void))type metadata accessor for RankedAction);
    }
    v15 += 4;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = (void *)(a1 + 32);
  swift_bridgeObjectRetain();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v4 = v2[3];
    uint64_t v5 = v2[4];
    __swift_project_boxed_opaque_existential_1(v2, v4);
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
    if (v7)
    {
      uint64_t v8 = v6;
      uint64_t v9 = v7;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v12;
      }
      unint64_t v10 = *(void *)(v3 + 16);
      if (v10 >= *(void *)(v3 + 24) >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v3 = v13;
      }
      *(void *)(v3 + 16) = v10 + 1;
      uint64_t v11 = v3 + 16 * v10;
      *(void *)(v11 + 32) = v8;
      *(void *)(v11 + 40) = v9;
    }
    v2 += 5;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(void *))
{
  uint64_t v6 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v6 = a2(v6);
  }
  uint64_t v7 = *(void *)(v6 + 16);
  v9[0] = v6 + 32;
  v9[1] = v7;
  uint64_t result = a3(v9);
  *a1 = v6;
  return result;
}

uint64_t DisambiguationSerialiser.init(actions:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v4, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t closure #1 in DisambiguationSerialiser.init(actions:)(void *a1, void *a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 40))(v4, v5);
  if (v7)
  {
    uint64_t v8 = v6;
    uint64_t v9 = v7;
    uint64_t v10 = a2[3];
    uint64_t v11 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v10);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 40))(v10, v11);
    if (!v13) {
      goto LABEL_25;
    }
    BOOL v14 = v8 == v12 && v9 == v13;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = a1[3];
    uint64_t v16 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v15);
    uint64_t v17 = ActionProtocol.actionRepresentation.getter(v15, v16);
    uint64_t v19 = v18;
    uint64_t v20 = a2[3];
    uint64_t v21 = a2[4];
    __swift_project_boxed_opaque_existential_1(a2, v20);
    uint64_t v22 = ActionProtocol.actionRepresentation.getter(v20, v21);
    uint64_t v24 = v23;
    if (v19)
    {
      if (v23)
      {
        if (v17 != v22 || v19 != v23)
        {
LABEL_14:
          char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
LABEL_26:
          swift_bridgeObjectRelease();
          return v26 & 1;
        }
        swift_bridgeObjectRelease();
LABEL_25:
        char v26 = 0;
        goto LABEL_26;
      }
      swift_bridgeObjectRelease();
    }
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.ranker);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl(&dword_1C9CFE000, v28, v29, "DisambiguationSerialiser: at least 1 action has nil representation, this should not happen.", v30, 2u);
      MEMORY[0x1CB78E290](v30, -1, -1);
    }

    if (v24) {
      goto LABEL_25;
    }
    char v26 = 1;
  }
  else
  {
    char v26 = 0;
  }
  return v26 & 1;
}

uint64_t DisambiguationSerialiser.indexOfSelectedAction(selected:)(void *a1)
{
  uint64_t v37 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_0_11();
  uint64_t v4 = v3;
  uint64_t v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v35 - v9;
  uint64_t v11 = *v1;
  uint64_t v12 = *(void *)(*v1 + 16);
  if (v12)
  {
    uint64_t v13 = v11 + 32;
    uint64_t v35 = v4;
    uint64_t v36 = v11;
    BOOL v14 = (void (**)(char *, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    while (1)
    {
      outlined init with copy of SignalProviding(v13, (uint64_t)v40);
      __swift_project_boxed_opaque_existential_1(v40, v41);
      uint64_t v16 = OUTLINED_FUNCTION_12_5();
      v17(v16);
      __swift_project_boxed_opaque_existential_1(a1, a1[3]);
      uint64_t v18 = OUTLINED_FUNCTION_12_5();
      v19(v18);
      char v20 = static UUID.== infix(_:_:)();
      uint64_t v21 = *v14;
      uint64_t v22 = v37;
      (*v14)(v8, v37);
      v21(v10, v22);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      if (v20) {
        break;
      }
      ++v15;
      v13 += 40;
      if (v12 == v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v4 = v35;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_6:
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.ranker);
    outlined init with copy of SignalProviding((uint64_t)a1, (uint64_t)v40);
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      char v26 = v4;
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v39 = v36;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v35 = v27 + 4;
      uint64_t v29 = v41;
      uint64_t v28 = v42;
      __swift_project_boxed_opaque_existential_1(v40, v41);
      (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v29, v28);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      uint64_t v30 = v37;
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v33 = v32;
      (*((void (**)(char *, uint64_t))v26 + 1))(v10, v30);
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      _os_log_impl(&dword_1C9CFE000, v24, v25, "Could not find selected action %s in the candidates list", v27, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
    }

    return 0;
  }
  return v15;
}

uint64_t DisambiguationSerialiser.serialisedSelectedActionIndex(selected:)(void *a1)
{
  DisambiguationSerialiser.indexOfSelectedAction(selected:)(a1);
  if (v1) {
    return 0;
  }
  else {
    return dispatch thunk of CustomStringConvertible.description.getter();
  }
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DisambiguationSerialiser.serialiseActionBundles()()
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for String.Encoding();
  uint64_t v3 = OUTLINED_FUNCTION_11_1(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_9_4();
  uint64_t v4 = *v0;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = specialized Sequence.compactMap<A>(_:)(v5);
  swift_bridgeObjectRelease();
  if (*(void *)(v6 + 16) == *(void *)(v4 + 16))
  {
    uint64_t v7 = self;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)&long long v46 = 0;
    id v9 = objc_msgSend(v7, sel_dataWithJSONObject_options_error_, isa, 0, &v46);

    id v10 = (id)v46;
    if (v9)
    {
      uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v13 = v12;

      static String.Encoding.utf8.getter();
      String.init(data:encoding:)();
      outlined consume of Data._Representation(v11, v13);
    }
    else
    {
      uint64_t v38 = v10;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = MEMORY[0x1E4FBC860];
  uint64_t v42 = MEMORY[0x1E4FBC860];
  uint64_t v15 = *(void *)(v4 + 16);
  swift_bridgeObjectRetain();
  if (v15)
  {
    unint64_t v16 = 0;
    uint64_t v14 = v4 + 32;
    while (v16 < *(void *)(v4 + 16))
    {
      outlined init with copy of SignalProviding(v14, (uint64_t)&v46);
      uint64_t v17 = v47;
      uint64_t v18 = v48;
      __swift_project_boxed_opaque_existential_1(&v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v18 + 40))(v17, v18);
      uint64_t v20 = v19;
      swift_bridgeObjectRelease();
      if (v20)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v46);
      }
      else
      {
        outlined init with take of AppSelectionSignalComponent(&v46, (uint64_t)&v43);
        uint64_t v21 = v42;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_11_8();
          uint64_t v21 = v42;
        }
        unint64_t v22 = *(void *)(v21 + 16);
        if (v22 >= *(void *)(v21 + 24) >> 1) {
          OUTLINED_FUNCTION_6_8();
        }
        uint64_t v23 = v44;
        uint64_t v24 = v45;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v43, v44);
        OUTLINED_FUNCTION_0_11();
        MEMORY[0x1F4188790](v25);
        OUTLINED_FUNCTION_25_3();
        (*(void (**)())(v26 + 16))();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v1, &v42, v23, v24);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
      }
      ++v16;
      v14 += 40;
      if (v15 == v16)
      {
        uint64_t v14 = v42;
        goto LABEL_16;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_16:
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker == -1) {
      goto LABEL_17;
    }
  }
  swift_once();
LABEL_17:
  uint64_t v27 = type metadata accessor for Logger();
  __swift_project_value_buffer(v27, (uint64_t)static Logger.ranker);
  swift_retain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = (_DWORD *)swift_slowAlloc();
    *(void *)&long long v46 = swift_slowAlloc();
    *uint64_t v30 = 136315138;
    swift_retain();
    uint64_t v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol);
    uint64_t v32 = MEMORY[0x1CB78D400](v14, v31);
    unint64_t v34 = v33;
    swift_release();
    uint64_t v35 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v34, (uint64_t *)&v46);
    OUTLINED_FUNCTION_18_7(v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_13_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_7(&dword_1C9CFE000, v36, v37, "DisambiguationSerialiser: could not serialize due to nil bundle (%s)");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    OUTLINED_FUNCTION_13_7();
  }
LABEL_21:
  uint64_t v39 = OUTLINED_FUNCTION_17_5();
  result.value._object = v40;
  result.value._uint64_t countAndFlagsBits = v39;
  return result;
}

Swift::String_optional __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> DisambiguationSerialiser.serialiseActionRepresentations()()
{
  uint64_t v65 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = type metadata accessor for String.Encoding();
  uint64_t v2 = OUTLINED_FUNCTION_11_1(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_7_10();
  uint64_t v3 = *v0;
  uint64_t v4 = *(void *)(*v0 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v57 = v4;
  if (v4)
  {
    uint64_t v6 = v3 + 32;
    swift_bridgeObjectRetain();
    uint64_t v7 = MEMORY[0x1E4FBC860];
    uint64_t v8 = v4;
    do
    {
      outlined init with copy of SignalProviding(v6, (uint64_t)&v62);
      uint64_t v9 = v63;
      uint64_t v10 = v64;
      uint64_t v11 = __swift_project_boxed_opaque_existential_1(&v62, v63);
      uint64_t v12 = specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)((uint64_t)v11, v9, v10);
      uint64_t v14 = v13;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
      if (v14)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_22_2();
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v17;
        }
        unint64_t v15 = *(void *)(v7 + 16);
        if (v15 >= *(void *)(v7 + 24) >> 1)
        {
          specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
          uint64_t v7 = v18;
        }
        *(void *)(v7 + 16) = v15 + 1;
        uint64_t v16 = v7 + 16 * v15;
        *(void *)(v16 + 32) = v12;
        *(void *)(v16 + 40) = v14;
      }
      v6 += 40;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v3 + 16);
    uint64_t v4 = v57;
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v7 = MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v7 + 16) == v19)
  {
    uint64_t v20 = self;
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    *(void *)&long long v62 = 0;
    id v22 = objc_msgSend(v20, sel_dataWithJSONObject_options_error_, isa, 0, &v62);

    id v23 = (id)v62;
    if (v22)
    {
      uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v26 = v25;

      static String.Encoding.utf8.getter();
      String.init(data:encoding:)();
      outlined consume of Data._Representation(v24, v26);
    }
    else
    {
      uint64_t v55 = v23;
      _convertNSErrorToError(_:)();

      swift_willThrow();
    }
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  uint64_t v58 = v5;
  swift_bridgeObjectRetain();
  if (v4)
  {
    unint64_t v27 = 0;
    uint64_t v5 = v3 + 32;
    while (v27 < *(void *)(v3 + 16))
    {
      outlined init with copy of SignalProviding(v5, (uint64_t)&v62);
      uint64_t v28 = v63;
      uint64_t v29 = v64;
      uint64_t v30 = __swift_project_boxed_opaque_existential_1(&v62, v63);
      specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)((uint64_t)v30, v28, v29);
      uint64_t v32 = v31;
      swift_bridgeObjectRelease();
      if (v32)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v62);
      }
      else
      {
        outlined init with take of AppSelectionSignalComponent(&v62, (uint64_t)&v59);
        uint64_t v33 = v58;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          OUTLINED_FUNCTION_11_8();
          uint64_t v33 = v58;
        }
        unint64_t v34 = *(void *)(v33 + 16);
        if (v34 >= *(void *)(v33 + 24) >> 1) {
          OUTLINED_FUNCTION_6_8();
        }
        uint64_t v35 = v60;
        uint64_t v36 = v61;
        __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v59, v60);
        OUTLINED_FUNCTION_0_11();
        MEMORY[0x1F4188790](v37);
        OUTLINED_FUNCTION_2_1();
        uint64_t v40 = v39 - v38;
        (*(void (**)(uint64_t))(v41 + 16))(v39 - v38);
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v40, &v58, v35, v36);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v59);
        uint64_t v4 = v57;
      }
      ++v27;
      v5 += 40;
      if (v4 == v27)
      {
        uint64_t v5 = v58;
        goto LABEL_27;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_27:
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker == -1) {
      goto LABEL_28;
    }
  }
  swift_once();
LABEL_28:
  uint64_t v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.ranker);
  swift_retain();
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v45 = (_DWORD *)swift_slowAlloc();
    *(void *)&long long v62 = swift_slowAlloc();
    _DWORD *v45 = 136315138;
    swift_retain();
    uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol);
    uint64_t v47 = MEMORY[0x1CB78D400](v5, v46);
    unint64_t v49 = v48;
    swift_release();
    uint64_t v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v47, v49, (uint64_t *)&v62);
    OUTLINED_FUNCTION_18_7(v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    OUTLINED_FUNCTION_13_7();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_14_7(&dword_1C9CFE000, v51, v52, "DisambiguationSerialiser: could not serialize due to nil repr (%s)");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    OUTLINED_FUNCTION_13_7();
  }
LABEL_31:
  uint64_t v53 = OUTLINED_FUNCTION_17_5();
  result.value._object = v54;
  result.value._uint64_t countAndFlagsBits = v53;
  return result;
}

SiriCam::DisambiguationSerialiser::DonationFields_optional __swiftcall DisambiguationSerialiser.DonationFields.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  uint64_t v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DisambiguationSerialiser.DonationFields.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 3;
  if (v5 < 3) {
    char v7 = v5;
  }
  *uint64_t v4 = v7;
  return result;
}

unint64_t DisambiguationSerialiser.DonationFields.rawValue.getter()
{
  unint64_t v1 = 0xD000000000000018;
  if (*v0 == 1) {
    unint64_t v1 = 0xD000000000000011;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000011;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisambiguationSerialiser.DonationFields()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisambiguationSerialiser.DonationFields()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DisambiguationSerialiser.DonationFields(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisambiguationSerialiser.DonationFields(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::DisambiguationSerialiser::DonationFields_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DisambiguationSerialiser.DonationFields(Swift::String *a1)
{
  return DisambiguationSerialiser.DonationFields.init(rawValue:)(*a1);
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DisambiguationSerialiser.DonationFields@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = DisambiguationSerialiser.DonationFields.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(uint64_t a1, uint64_t a2)
{
  v11[2] = *v2;
  v11[3] = a2;
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, char *))partial apply for closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:), (uint64_t)v11, a1);
  if (*(void *)(v4 + 16) == *(void *)(a1 + 16))
  {
    v11[4] = v4;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v5 = BidirectionalCollection<>.joined(separator:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.ranker);
    char v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C9CFE000, v7, v8, "At least one of the query fields could not be serialised.", v9, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    return 0;
  }
  return v5;
}

uint64_t closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (!*a1)
  {
    v18[0] = a2;
    Swift::String_optional v10 = DisambiguationSerialiser.serialiseActionBundles()();
    object = v10.value._object;
    uint64_t result = v10.value._countAndFlagsBits;
LABEL_5:
    if (!v8)
    {
      *a4 = result;
      a4[1] = (uint64_t)object;
    }
    return result;
  }
  if (*a1 == 1)
  {
    v18[0] = a2;
    Swift::String_optional v9 = DisambiguationSerialiser.serialiseActionRepresentations()();
    object = v9.value._object;
    uint64_t result = v9.value._countAndFlagsBits;
    goto LABEL_5;
  }
  outlined init with copy of ActionProtocol?(a3, (uint64_t)&v16);
  if (v17)
  {
    outlined init with take of AppSelectionSignalComponent(&v16, (uint64_t)v18);
    *(void *)&long long v16 = a2;
    swift_bridgeObjectRetain();
    uint64_t v11 = DisambiguationSerialiser.indexOfSelectedAction(selected:)(v18);
    if (v12)
    {
      swift_bridgeObjectRelease();
      uint64_t v13 = 0;
      uint64_t v15 = 0;
    }
    else
    {
      *(void *)&long long v16 = v11;
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v15 = v14;
      swift_bridgeObjectRelease();
    }
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v18);
    *a4 = v13;
    a4[1] = v15;
  }
  else
  {
    uint64_t result = outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)&v16, &demangling cache variable for type metadata for ActionProtocol?);
    *a4 = 0;
    a4[1] = 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    type metadata accessor for UUID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5 = a4;
  unint64_t v7 = a2;
  unint64_t v8 = a1;
  uint64_t v9 = (uint64_t)(a2 - a1) / 40;
  uint64_t v10 = a3 - a2;
  uint64_t v11 = (uint64_t)(a3 - a2) / 40;
  if (v9 >= v11)
  {
    specialized UnsafeMutablePointer.moveInitialize(from:count:)(a2, (uint64_t)(a3 - a2) / 40, a4);
    unint64_t v13 = v5 + 40 * v11;
    if (v8 >= v7 || v10 < 40) {
      goto LABEL_41;
    }
    unint64_t v22 = a3 - 40;
    unint64_t v39 = v5;
    while (1)
    {
      unint64_t v23 = v13 - 40;
      outlined init with copy of SignalProviding(v13 - 40, (uint64_t)v38);
      unint64_t v24 = v7 - 40;
      outlined init with copy of SignalProviding(v7 - 40, (uint64_t)v37);
      char v25 = closure #1 in DisambiguationSerialiser.init(actions:)(v38, v37);
      if (v4)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
        goto LABEL_41;
      }
      char v26 = v25;
      unint64_t v27 = v13;
      unint64_t v28 = v22 + 40;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      if (v26)
      {
        BOOL v29 = v28 != v7 || v22 >= v7;
        v7 -= 40;
        unint64_t v13 = v27;
        if (!v29) {
          goto LABEL_36;
        }
      }
      else
      {
        BOOL v30 = v28 != v27 || v22 >= v27;
        unint64_t v24 = v23;
        unint64_t v13 = v23;
        if (!v30) {
          goto LABEL_36;
        }
      }
      long long v31 = *(_OWORD *)v24;
      long long v32 = *(_OWORD *)(v24 + 16);
      *(void *)(v22 + 32) = *(void *)(v24 + 32);
      *(_OWORD *)unint64_t v22 = v31;
      *(_OWORD *)(v22 + 16) = v32;
LABEL_36:
      unint64_t v5 = v39;
      if (v13 > v39)
      {
        v22 -= 40;
        if (v7 > v8) {
          continue;
        }
      }
      goto LABEL_41;
    }
  }
  uint64_t v12 = a2 - a1;
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(a1, (uint64_t)(a2 - a1) / 40, a4);
  unint64_t v13 = v5 + 40 * v9;
  if (v7 >= a3 || v12 < 40)
  {
LABEL_19:
    unint64_t v7 = v8;
LABEL_41:
    uint64_t v33 = (uint64_t)(v13 - v5) / 40;
    unint64_t v34 = v5;
    unint64_t v35 = v7;
    goto LABEL_42;
  }
  while (1)
  {
    outlined init with copy of SignalProviding(v7, (uint64_t)v38);
    outlined init with copy of SignalProviding(v5, (uint64_t)v37);
    char v14 = closure #1 in DisambiguationSerialiser.init(actions:)(v38, v37);
    if (v4) {
      break;
    }
    char v15 = v14;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
    if (v15)
    {
      BOOL v16 = v8 == v7;
      unint64_t v17 = v7;
      v7 += 40;
      if (v16 && v8 < v7) {
        goto LABEL_17;
      }
    }
    else
    {
      BOOL v16 = v8 == v5;
      unint64_t v17 = v5;
      v5 += 40;
      if (v16 && v8 < v5) {
        goto LABEL_17;
      }
    }
    long long v20 = *(_OWORD *)v17;
    long long v21 = *(_OWORD *)(v17 + 16);
    *(void *)(v8 + 32) = *(void *)(v17 + 32);
    *(_OWORD *)unint64_t v8 = v20;
    *(_OWORD *)(v8 + 16) = v21;
LABEL_17:
    v8 += 40;
    if (v5 >= v13 || v7 >= a3) {
      goto LABEL_19;
    }
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
  uint64_t v33 = (uint64_t)(v13 - v5) / 40;
  unint64_t v34 = v5;
  unint64_t v35 = v8;
LABEL_42:
  specialized UnsafeMutablePointer.moveInitialize(from:count:)(v34, v33, v35);
  return 1;
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of AppSelectionSignalComponent(&v12, v10 + 40 * a1 + 32);
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(*(void *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2) {
      return result;
    }
    swift_release();
  }
  return swift_release();
}

uint64_t specialized static DisambiguationSerialiser.actionToStrRepresentation(action:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v9 = OUTLINED_FUNCTION_11_1(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_0_11();
  uint64_t v66 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_1();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = type metadata accessor for CamUSOParse(0);
  uint64_t v20 = OUTLINED_FUNCTION_11_1(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_7_10();
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_25_3();
  OUTLINED_FUNCTION_0_11();
  MEMORY[0x1F4188790](v22);
  OUTLINED_FUNCTION_2_1();
  uint64_t v25 = v24 - v23;
  uint64_t v67 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v24 - v23, a1, a2);
  uint64_t v68 = a2;
  uint64_t v69 = v25;
  (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with take of CamUSOParse((uint64_t)v4, v3, (void (*)(void))type metadata accessor for CamUSOParse);
    uint64_t v34 = CamUSOParse.appShortcutInvocation.getter();
    if (v37)
    {
      uint64_t v38 = v35;
      unint64_t v39 = v36;
      strcpy((char *)v70, "appshortcuts:");
      HIWORD(v70[1]) = -4864;
      swift_bridgeObjectRetain();
      v40._uint64_t countAndFlagsBits = v38;
      v40._object = v39;
      String.append(_:)(v40);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      uint64_t v33 = v70[0];
      _s7SiriCam0B5ParseOWOhTm_2(v3, (void (*)(void))type metadata accessor for CamUSOParse);
      goto LABEL_6;
    }
    MEMORY[0x1CB78CBB0](v34);
    specialized Collection.first.getter();
    swift_bridgeObjectRelease();
    if (__swift_getEnumTagSinglePayload(v12, 1, v13) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v12, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      uint64_t v42 = v67;
LABEL_15:
      uint64_t v43 = v69;
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.ranker);
      uint64_t v50 = Logger.logObject.getter();
      os_log_type_t v51 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v50, v51))
      {
        uint64_t v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v52 = 0;
        _os_log_impl(&dword_1C9CFE000, v50, v51, "Couldn't convert UserDialogAct to UsoTask.", v52, 2u);
        OUTLINED_FUNCTION_2_2();
      }

      _s7SiriCam0B5ParseOWOhTm_2(v3, (void (*)(void))type metadata accessor for CamUSOParse);
      uint64_t v33 = 0;
      uint64_t v41 = a2;
      goto LABEL_20;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v66 + 32))(v18, v12, v13);
    unint64_t v48 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    unint64_t v54 = v48;
    uint64_t v42 = v67;
    if (v48 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v60 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v60 == 1)
      {
        swift_bridgeObjectRetain();
        uint64_t v61 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v61)
        {
          swift_bridgeObjectRelease();
          uint64_t v62 = OUTLINED_FUNCTION_1_14();
          v63(v62);
          goto LABEL_15;
        }
LABEL_23:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v54 & 0xC000000000000001) == 0, v54);
        if ((v54 & 0xC000000000000001) != 0) {
          MEMORY[0x1CB78D7C0](0, v54);
        }
        else {
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v70[0] = 0x3A34766C6ELL;
        v70[1] = 0xE500000000000000;
        v55._uint64_t countAndFlagsBits = UsoTask.verbString.getter();
        String.append(_:)(v55);
        swift_bridgeObjectRelease();
        v56._uint64_t countAndFlagsBits = 14906;
        v56._object = (void *)0xE200000000000000;
        String.append(_:)(v56);
        v57._uint64_t countAndFlagsBits = UsoTask.baseEntityAsString.getter();
        String.append(_:)(v57);
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v33 = 0x3A34766C6ELL;
        uint64_t v58 = OUTLINED_FUNCTION_1_14();
        v59(v58);
        _s7SiriCam0B5ParseOWOhTm_2(v3, (void (*)(void))type metadata accessor for CamUSOParse);
        uint64_t v41 = a2;
        uint64_t v43 = v69;
        goto LABEL_20;
      }
    }
    else if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
      goto LABEL_23;
    }
    uint64_t v64 = OUTLINED_FUNCTION_1_14();
    v65(v64);
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (EnumCaseMultiPayload == 1)
  {
    unint64_t v28 = *v4;
    v70[0] = dispatch thunk of PommesResponse.primaryCatIds()();
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)(v70, (uint64_t (*)(uint64_t))specialized _ContiguousArrayBuffer._consumeAndCreateNew(), specialized UnsafeMutableBufferPointer._stableSortImpl(by:));
    swift_bridgeObjectRelease();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance [A]();
    uint64_t v29 = BidirectionalCollection<>.joined(separator:)();
    long long v31 = v30;
    swift_release();
    strcpy((char *)v70, "pommes:");
    v70[1] = 0xE700000000000000;
    v32._uint64_t countAndFlagsBits = v29;
    v32._object = v31;
    String.append(_:)(v32);

    swift_bridgeObjectRelease();
    uint64_t v33 = v70[0];
LABEL_6:
    uint64_t v42 = v67;
    uint64_t v41 = v68;
    uint64_t v43 = v69;
    goto LABEL_20;
  }
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.ranker);
  uint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.debug.getter();
  uint64_t v43 = v69;
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl(&dword_1C9CFE000, v45, v46, "Couldn't represent action as string, not NLv4 parse & not an app shortcut.", v47, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  _s7SiriCam0B5ParseOWOhTm_2((uint64_t)v4, (void (*)(void))type metadata accessor for CamParse);
  uint64_t v33 = 0;
  uint64_t v42 = v67;
  uint64_t v41 = a2;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v41);
  return v33;
}

unint64_t lazy protocol witness table accessor for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields()
{
  unint64_t result = lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields;
  if (!lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisambiguationSerialiser.DonationFields and conformance DisambiguationSerialiser.DonationFields);
  }
  return result;
}

void type metadata accessor for DisambiguationSerialiser()
{
}

unsigned char *storeEnumTagSinglePayload for DisambiguationSerialiser.DonationFields(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D4B9D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void type metadata accessor for DisambiguationSerialiser.DonationFields()
{
}

uint64_t partial apply for closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)@<X0>(unsigned char *a1@<X0>, uint64_t *a2@<X8>)
{
  return closure #1 in SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t outlined init with copy of ActionProtocol?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionProtocol?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_2(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

void type metadata accessor for SiriSignalsQueryManager()
{
}

uint64_t OUTLINED_FUNCTION_1_14()
{
  return v0;
}

void OUTLINED_FUNCTION_6_8()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_11_8()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t OUTLINED_FUNCTION_12_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_13_7()
{
  return swift_release_n();
}

void OUTLINED_FUNCTION_14_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_17_5()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_18_7(uint64_t a1)
{
  *(void *)(v1 - 168) = a1;
  return v1 - 168;
}

void *initializeBufferWithCopyOfBuffer for UserHistoryTieBreaker(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a2[1];
    *a1 = *a2;
    a1[1] = v6;
    uint64_t v7 = (int *)type metadata accessor for RankedAction();
    uint64_t v8 = v7[5];
    uint64_t v9 = (void **)((char *)v4 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v76 = v11;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v10;
      *uint64_t v9 = *v10;
      id v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        goto LABEL_12;
      }
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      uint64_t v16 = (char *)v9 + v15;
      uint64_t v17 = (char *)v10 + v15;
      uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
      {
        uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v16, v17, *(void *)(*(void *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16))(v16, v17, v18);
        __swift_storeEnumTagSinglePayload((uint64_t)v16, 0, 1, v18);
      }
      uint64_t v23 = v14[6];
      uint64_t v24 = (void **)((char *)v9 + v23);
      uint64_t v25 = (void **)((char *)v10 + v23);
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v14[7];
      unint64_t v28 = (char *)v9 + v27;
      uint64_t v29 = (char *)v10 + v27;
      v28[4] = v29[4];
      *(_DWORD *)unint64_t v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
LABEL_12:
    *(void *)((char *)v4 + v7[6]) = *(void *)((char *)a2 + v7[6]);
    *(void *)((char *)v4 + v7[7]) = *(void *)((char *)a2 + v7[7]);
    *(void *)((char *)v4 + v7[8]) = *(void *)((char *)a2 + v7[8]);
    uint64_t v30 = v7[9];
    long long v31 = (char *)v4 + v30;
    Swift::String v32 = (char *)a2 + v30;
    uint64_t v33 = type metadata accessor for UUID();
    uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v77 = v33;
    v34(v31, v32, v33);
    uint64_t v35 = v7[10];
    uint64_t v36 = (void *)((char *)v4 + v35);
    uint64_t v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    *(void *)((char *)v4 + v7[11]) = *(void *)((char *)a2 + v7[11]);
    uint64_t v39 = a3[5];
    Swift::String v40 = (void *)((char *)v4 + v39);
    uint64_t v41 = (char *)a2 + v39;
    uint64_t v42 = *(void *)((char *)a2 + v39 + 8);
    *Swift::String v40 = *(void *)((char *)a2 + v39);
    v40[1] = v42;
    uint64_t v43 = v7[5];
    uint64_t v44 = (void **)((char *)v40 + v43);
    uint64_t v45 = (void **)&v41[v43];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    int v46 = swift_getEnumCaseMultiPayload();
    if (v46 == 1)
    {
      uint64_t v53 = *v45;
      NSObject *v44 = *v45;
      id v54 = v53;
    }
    else
    {
      if (v46)
      {
        memcpy(v44, v45, *(void *)(*(void *)(v76 - 8) + 64));
LABEL_21:
        *(void *)((char *)v40 + v7[6]) = *(void *)&v41[v7[6]];
        *(void *)((char *)v40 + v7[7]) = *(void *)&v41[v7[7]];
        *(void *)((char *)v40 + v7[8]) = *(void *)&v41[v7[8]];
        uint64_t v62 = v7[9];
        uint64_t v63 = (char *)v40 + v62;
        uint64_t v64 = &v41[v62];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34(v63, v64, v77);
        uint64_t v65 = v7[10];
        uint64_t v66 = (void *)((char *)v40 + v65);
        uint64_t v67 = &v41[v65];
        uint64_t v68 = *((void *)v67 + 1);
        *uint64_t v66 = *(void *)v67;
        v66[1] = v68;
        *(void *)((char *)v40 + v7[11]) = *(void *)&v41[v7[11]];
        uint64_t v69 = a3[7];
        *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
        *(void *)((char *)v4 + v69) = *(void *)((char *)a2 + v69);
        uint64_t v70 = a3[9];
        *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
        *(void *)((char *)v4 + v70) = *(void *)((char *)a2 + v70);
        uint64_t v71 = a3[11];
        *(void *)((char *)v4 + a3[10]) = *(void *)((char *)a2 + a3[10]);
        *(void *)((char *)v4 + v71) = *(void *)((char *)a2 + v71);
        uint64_t v72 = a3[13];
        *(void *)((char *)v4 + a3[12]) = *(void *)((char *)a2 + a3[12]);
        *(void *)((char *)v4 + v72) = *(void *)((char *)a2 + v72);
        *(void *)((char *)v4 + a3[14]) = *(void *)((char *)a2 + a3[14]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        return v4;
      }
      uint64_t v47 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v47 - 8) + 16))(v44, v45, v47);
      uint64_t v48 = type metadata accessor for CamUSOParse(0);
      uint64_t v49 = *(int *)(v48 + 20);
      uint64_t v74 = v48;
      __dst = (char *)v44 + v49;
      uint64_t v50 = (char *)v45 + v49;
      uint64_t v51 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v50, 1, v51))
      {
        uint64_t v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v50, *(void *)(*(void *)(v52 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 16))(__dst, v50, v51);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v51);
      }
      uint64_t v55 = *(int *)(v74 + 24);
      Swift::String v56 = (void **)((char *)v44 + v55);
      Swift::String v57 = (void **)((char *)v45 + v55);
      uint64_t v58 = v57[1];
      *Swift::String v56 = *v57;
      v56[1] = v58;
      uint64_t v59 = *(int *)(v74 + 28);
      uint64_t v60 = (char *)v44 + v59;
      uint64_t v61 = (char *)v45 + v59;
      v60[4] = v61[4];
      *(_DWORD *)uint64_t v60 = *(_DWORD *)v61;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
  uint64_t v20 = *a2;
  *uint64_t v4 = *a2;
  uint64_t v4 = (void *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
  swift_retain();
  return v4;
}

void *initializeWithCopy for UserHistoryTieBreaker(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  uint64_t v6 = (int *)type metadata accessor for RankedAction();
  uint64_t v7 = v6[5];
  uint64_t v8 = (void **)((char *)a1 + v7);
  uint64_t v9 = (void **)((char *)a2 + v7);
  uint64_t v10 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v74 = v10;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v19 = *v9;
    *uint64_t v8 = *v9;
    id v20 = v19;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
      goto LABEL_10;
    }
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v12 - 8) + 16))(v8, v9, v12);
    uint64_t v13 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = (char *)v8 + v14;
    uint64_t v16 = (char *)v9 + v14;
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
    {
      uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(v15, v16, v17);
      __swift_storeEnumTagSinglePayload((uint64_t)v15, 0, 1, v17);
    }
    uint64_t v21 = v13[6];
    id v22 = (void **)((char *)v8 + v21);
    uint64_t v23 = (void **)((char *)v9 + v21);
    uint64_t v24 = v23[1];
    *id v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v13[7];
    uint64_t v26 = (char *)v8 + v25;
    uint64_t v27 = (char *)v9 + v25;
    v26[4] = v27[4];
    *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  uint64_t v28 = v6[9];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UUID();
  Swift::String v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v75 = v32;
  uint64_t v76 = v31;
  v32(v29, v30, v31);
  uint64_t v33 = v6[10];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  uint64_t v36 = v35[1];
  *uint64_t v34 = *v35;
  v34[1] = v36;
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  uint64_t v37 = a3[5];
  uint64_t v38 = (void *)((char *)a1 + v37);
  uint64_t v39 = (char *)a2 + v37;
  uint64_t v40 = *(void *)((char *)a2 + v37 + 8);
  *uint64_t v38 = *(void *)((char *)a2 + v37);
  v38[1] = v40;
  uint64_t v41 = v6[5];
  uint64_t v42 = (void **)((char *)v38 + v41);
  uint64_t v43 = (void **)&v39[v41];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v44 = swift_getEnumCaseMultiPayload();
  if (v44 == 1)
  {
    uint64_t v51 = *v43;
    char *v42 = *v43;
    id v52 = v51;
LABEL_18:
    swift_storeEnumTagMultiPayload();
    goto LABEL_19;
  }
  if (!v44)
  {
    uint64_t v45 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v45 - 8) + 16))(v42, v43, v45);
    uint64_t v46 = type metadata accessor for CamUSOParse(0);
    uint64_t v47 = *(int *)(v46 + 20);
    uint64_t v72 = v46;
    __dst = (char *)v42 + v47;
    uint64_t v48 = (char *)v43 + v47;
    uint64_t v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
    {
      uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v48, *(void *)(*(void *)(v50 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(__dst, v48, v49);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v49);
    }
    uint64_t v53 = *(int *)(v72 + 24);
    id v54 = (void **)((char *)v42 + v53);
    uint64_t v55 = (void **)((char *)v43 + v53);
    uint64_t v56 = v55[1];
    void *v54 = *v55;
    v54[1] = v56;
    uint64_t v57 = *(int *)(v72 + 28);
    uint64_t v58 = (char *)v42 + v57;
    uint64_t v59 = (char *)v43 + v57;
    v58[4] = v59[4];
    *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
    swift_bridgeObjectRetain();
    goto LABEL_18;
  }
  memcpy(v42, v43, *(void *)(*(void *)(v74 - 8) + 64));
LABEL_19:
  *(void *)((char *)v38 + v6[6]) = *(void *)&v39[v6[6]];
  *(void *)((char *)v38 + v6[7]) = *(void *)&v39[v6[7]];
  *(void *)((char *)v38 + v6[8]) = *(void *)&v39[v6[8]];
  uint64_t v60 = v6[9];
  uint64_t v61 = (char *)v38 + v60;
  uint64_t v62 = &v39[v60];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v61, v62, v76);
  uint64_t v63 = v6[10];
  uint64_t v64 = (void *)((char *)v38 + v63);
  uint64_t v65 = &v39[v63];
  uint64_t v66 = *((void *)v65 + 1);
  *uint64_t v64 = *(void *)v65;
  v64[1] = v66;
  *(void *)((char *)v38 + v6[11]) = *(void *)&v39[v6[11]];
  uint64_t v67 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v67) = *(void *)((char *)a2 + v67);
  uint64_t v68 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v68) = *(void *)((char *)a2 + v68);
  uint64_t v69 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v69) = *(void *)((char *)a2 + v69);
  uint64_t v70 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v70) = *(void *)((char *)a2 + v70);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for UserHistoryTieBreaker(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for RankedAction();
  uint64_t v7 = (int *)v6;
  if (a1 != a2)
  {
    uint64_t v8 = *(int *)(v6 + 20);
    uint64_t v9 = (void **)((char *)a1 + v8);
    uint64_t v10 = (void **)((char *)a2 + v8);
    _s7SiriCam0B5ParseOWOhTm_3((uint64_t)a1 + v8, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v11 = type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v19 = *v10;
      *uint64_t v9 = *v10;
      id v20 = v19;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v9, v10, *(void *)(*(void *)(v11 - 8) + 64));
        goto LABEL_11;
      }
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v13 - 8) + 16))(v9, v10, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      __dst = (char *)v9 + v15;
      uint64_t v16 = (char *)v10 + v15;
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      uint64_t v21 = v14[6];
      id v22 = (void **)((char *)v9 + v21);
      uint64_t v23 = (void **)((char *)v10 + v21);
      *id v22 = *v23;
      v22[1] = v23[1];
      uint64_t v24 = v14[7];
      uint64_t v25 = (char *)v9 + v24;
      uint64_t v26 = (char *)v10 + v24;
      int v27 = *(_DWORD *)v26;
      v25[4] = v26[4];
      *(_DWORD *)uint64_t v25 = v27;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  *(void *)((char *)a1 + v7[6]) = *(void *)((char *)a2 + v7[6]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v7[7]) = *(void *)((char *)a2 + v7[7]);
  *(void *)((char *)a1 + v7[8]) = *(void *)((char *)a2 + v7[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v28 = v7[9];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for UUID();
  Swift::String v32 = *(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24);
  v32(v29, v30, v31);
  uint64_t v33 = v7[10];
  uint64_t v34 = (void *)((char *)a1 + v33);
  uint64_t v35 = (void *)((char *)a2 + v33);
  *uint64_t v34 = *v35;
  v34[1] = v35[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v7[11]) = *(void *)((char *)a2 + v7[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[5];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  *(void *)uint64_t v37 = *(void *)((char *)a2 + v36);
  *((void *)v37 + 1) = *(void *)((char *)a2 + v36 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v68 = v32;
    uint64_t v39 = v7[5];
    uint64_t v40 = (void **)&v37[v39];
    uint64_t v41 = (void **)&v38[v39];
    _s7SiriCam0B5ParseOWOhTm_3((uint64_t)&v37[v39], (void (*)(void))type metadata accessor for CamParse);
    uint64_t v42 = type metadata accessor for CamParse(0);
    int v43 = swift_getEnumCaseMultiPayload();
    if (v43 == 1)
    {
      uint64_t v51 = *v41;
      *uint64_t v40 = *v41;
      id v52 = v51;
    }
    else
    {
      if (v43)
      {
        memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
LABEL_21:
        Swift::String v32 = v68;
        goto LABEL_22;
      }
      uint64_t v65 = v31;
      uint64_t v44 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v44 - 8) + 16))(v40, v41, v44);
      uint64_t v64 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v45 = v64[5];
      uint64_t v67 = (char *)v40 + v45;
      uint64_t v46 = (char *)v41 + v45;
      uint64_t v47 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      uint64_t v66 = v46;
      uint64_t v48 = (uint64_t)v46;
      uint64_t v49 = v47;
      if (__swift_getEnumTagSinglePayload(v48, 1, v47))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v67, v66, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v49 - 8) + 16))(v67, v66, v49);
        __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v49);
      }
      uint64_t v31 = v65;
      uint64_t v53 = v64[6];
      id v54 = (void **)((char *)v40 + v53);
      uint64_t v55 = (void **)((char *)v41 + v53);
      void *v54 = *v55;
      v54[1] = v55[1];
      uint64_t v56 = v64[7];
      uint64_t v57 = (char *)v40 + v56;
      uint64_t v58 = (char *)v41 + v56;
      int v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)uint64_t v57 = v59;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_21;
  }
LABEL_22:
  *(void *)&v37[v7[6]] = *(void *)&v38[v7[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v37[v7[7]] = *(void *)&v38[v7[7]];
  *(void *)&v37[v7[8]] = *(void *)&v38[v7[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v32(&v37[v7[9]], &v38[v7[9]], v31);
  uint64_t v60 = v7[10];
  uint64_t v61 = &v37[v60];
  uint64_t v62 = &v38[v60];
  *(void *)uint64_t v61 = *(void *)v62;
  *((void *)v61 + 1) = *((void *)v62 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v37[v7[11]] = *(void *)&v38[v7[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + a3[11]) = *(void *)((char *)a2 + a3[11]);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + a3[13]) = *(void *)((char *)a2 + a3[13]);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *initializeWithTake for UserHistoryTieBreaker(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for RankedAction();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v48 = v10;
    uint64_t v11 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v8, v9, v11);
    uint64_t v12 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v13 = v12[5];
    uint64_t v14 = &v8[v13];
    uint64_t v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v15, 1, v16))
    {
      uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v14, v15, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v14, v15, v16);
      __swift_storeEnumTagSinglePayload((uint64_t)v14, 0, 1, v16);
    }
    *(_OWORD *)&v8[v12[6]] = *(_OWORD *)&v9[v12[6]];
    uint64_t v18 = v12[7];
    uint64_t v19 = &v8[v18];
    id v20 = &v9[v18];
    uint64_t v19[4] = v20[4];
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    uint64_t v10 = v48;
    swift_storeEnumTagMultiPayload();
  }
  *(void *)((char *)a1 + v6[6]) = *(void *)((char *)a2 + v6[6]);
  *(void *)((char *)a1 + v6[7]) = *(void *)((char *)a2 + v6[7]);
  *(void *)((char *)a1 + v6[8]) = *(void *)((char *)a2 + v6[8]);
  uint64_t v21 = v6[9];
  id v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v49 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32);
  v49(v22, v23, v24);
  *(_OWORD *)((char *)a1 + v6[10]) = *(_OWORD *)((char *)a2 + v6[10]);
  *(void *)((char *)a1 + v6[11]) = *(void *)((char *)a2 + v6[11]);
  uint64_t v25 = a3[5];
  uint64_t v26 = (char *)a1 + v25;
  int v27 = (char *)a2 + v25;
  *(_OWORD *)uint64_t v26 = *(_OWORD *)((char *)a2 + v25);
  uint64_t v28 = v6[5];
  uint64_t v29 = &v26[v28];
  uint64_t v30 = &v27[v28];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v29, v30, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    uint64_t v45 = v24;
    uint64_t v31 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(v29, v30, v31);
    uint64_t v32 = type metadata accessor for CamUSOParse(0);
    uint64_t v33 = *(int *)(v32 + 20);
    uint64_t v46 = &v29[v33];
    uint64_t v47 = v32;
    uint64_t v34 = &v30[v33];
    uint64_t v35 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v34, 1, v35))
    {
      uint64_t v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v46, v34, *(void *)(*(void *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v46, v34, v35);
      __swift_storeEnumTagSinglePayload((uint64_t)v46, 0, 1, v35);
    }
    *(_OWORD *)&v29[*(int *)(v47 + 24)] = *(_OWORD *)&v30[*(int *)(v47 + 24)];
    uint64_t v37 = *(int *)(v47 + 28);
    uint64_t v38 = &v29[v37];
    uint64_t v39 = &v30[v37];
    v38[4] = v39[4];
    *(_DWORD *)uint64_t v38 = *(_DWORD *)v39;
    swift_storeEnumTagMultiPayload();
    uint64_t v24 = v45;
  }
  *(void *)&v26[v6[6]] = *(void *)&v27[v6[6]];
  *(void *)&v26[v6[7]] = *(void *)&v27[v6[7]];
  *(void *)&v26[v6[8]] = *(void *)&v27[v6[8]];
  v49(&v26[v6[9]], &v27[v6[9]], v24);
  *(_OWORD *)&v26[v6[10]] = *(_OWORD *)&v27[v6[10]];
  *(void *)&v26[v6[11]] = *(void *)&v27[v6[11]];
  uint64_t v40 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v40) = *(void *)((char *)a2 + v40);
  uint64_t v41 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v41) = *(void *)((char *)a2 + v41);
  uint64_t v42 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v42) = *(void *)((char *)a2 + v42);
  uint64_t v43 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v43) = *(void *)((char *)a2 + v43);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

void *assignWithTake for UserHistoryTieBreaker(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for RankedAction();
  uint64_t v8 = (int *)v7;
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(v7 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    _s7SiriCam0B5ParseOWOhTm_3((uint64_t)a1 + v9, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      __dst = &v10[v15];
      uint64_t v16 = &v11[v15];
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      uint64_t v19 = v14[7];
      id v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)id v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)a1 + v8[6]) = *(void *)((char *)a2 + v8[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v8[7]) = *(void *)((char *)a2 + v8[7]);
  *(void *)((char *)a1 + v8[8]) = *(void *)((char *)a2 + v8[8]);
  swift_bridgeObjectRelease();
  uint64_t v22 = v8[9];
  uint64_t v23 = (char *)a1 + v22;
  uint64_t v24 = (char *)a2 + v22;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 40);
  v26(v23, v24, v25);
  uint64_t v27 = v8[10];
  uint64_t v28 = (void *)((char *)a1 + v27);
  uint64_t v29 = (void *)((char *)a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + v8[11]) = *(void *)((char *)a2 + v8[11]);
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[5];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = *(void *)((char *)a2 + v32 + 8);
  *(void *)uint64_t v33 = *(void *)((char *)a2 + v32);
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v64 = v26;
    uint64_t v36 = v8[5];
    uint64_t v37 = &v33[v36];
    uint64_t v38 = &v34[v36];
    _s7SiriCam0B5ParseOWOhTm_3((uint64_t)&v33[v36], (void (*)(void))type metadata accessor for CamParse);
    uint64_t v39 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64));
    }
    else
    {
      uint64_t v61 = v25;
      uint64_t v40 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 32))(v37, v38, v40);
      uint64_t v60 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v41 = v60[5];
      uint64_t v63 = &v37[v41];
      uint64_t v42 = &v38[v41];
      uint64_t v43 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      uint64_t v62 = v42;
      uint64_t v44 = (uint64_t)v42;
      uint64_t v45 = v43;
      if (__swift_getEnumTagSinglePayload(v44, 1, v43))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v63, v62, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v63, v62, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v63, 0, 1, v45);
      }
      uint64_t v25 = v61;
      *(_OWORD *)&v37[v60[6]] = *(_OWORD *)&v38[v60[6]];
      uint64_t v47 = v60[7];
      uint64_t v48 = &v37[v47];
      uint64_t v49 = &v38[v47];
      v48[4] = v49[4];
      *(_DWORD *)uint64_t v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
    uint64_t v26 = v64;
  }
  *(void *)&v33[v8[6]] = *(void *)&v34[v8[6]];
  swift_bridgeObjectRelease();
  *(void *)&v33[v8[7]] = *(void *)&v34[v8[7]];
  *(void *)&v33[v8[8]] = *(void *)&v34[v8[8]];
  swift_bridgeObjectRelease();
  v26(&v33[v8[9]], &v34[v8[9]], v25);
  uint64_t v50 = v8[10];
  uint64_t v51 = &v33[v50];
  id v52 = &v34[v50];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(void *)&v33[v8[11]] = *(void *)&v34[v8[11]];
  swift_bridgeObjectRelease();
  uint64_t v55 = a3[7];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  *(void *)((char *)a1 + v55) = *(void *)((char *)a2 + v55);
  uint64_t v56 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v56) = *(void *)((char *)a2 + v56);
  uint64_t v57 = a3[11];
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  *(void *)((char *)a1 + v57) = *(void *)((char *)a2 + v57);
  uint64_t v58 = a3[13];
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  *(void *)((char *)a1 + v58) = *(void *)((char *)a2 + v58);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserHistoryTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D4D77C);
}

uint64_t sub_1C9D4D77C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  return __swift_getEnumTagSinglePayload(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for UserHistoryTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D4D7D8);
}

uint64_t sub_1C9D4D7D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RankedAction();
  return __swift_storeEnumTagSinglePayload(a1, a2, a2, v4);
}

uint64_t type metadata accessor for UserHistoryTieBreaker()
{
  uint64_t result = type metadata singleton initialization cache for UserHistoryTieBreaker;
  if (!type metadata singleton initialization cache for UserHistoryTieBreaker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for UserHistoryTieBreaker()
{
  uint64_t result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t one-time initialization function for mockFeatures()
{
  type metadata accessor for UUID();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : MLFeatureValue]);
  lazy protocol witness table accessor for type UUID and conformance UUID();
  uint64_t result = Dictionary.init(dictionaryLiteral:)();
  static UserHistoryTieBreaker.mockFeatures = result;
  return result;
}

uint64_t UserHistoryTieBreaker.enabled.getter()
{
  OUTLINED_FUNCTION_2_4();
  if ((static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, v0) & 1) == 0) {
    return 0;
  }
  return CamFeatureFlag.isEnabled.getter(5u);
}

uint64_t UserHistoryTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for UserHistoryTieBreaker();
  *(void *)(a2 + v4[6]) = 0x3FB70A3D70A3D70ALL;
  *(void *)(a2 + v4[7]) = 3600;
  *(void *)(a2 + v4[8]) = 600;
  *(void *)(a2 + v4[9]) = 900;
  *(void *)(a2 + v4[10]) = 300;
  *(void *)(a2 + v4[11]) = 4;
  *(void *)(a2 + v4[12]) = 0x3FECCCCCCCCCCCCDLL;
  *(void *)(a2 + v4[13]) = 6;
  *(void *)(a2 + v4[14]) = 0x3FECCCCCCCCCCCCDLL;
  _s7SiriCam0B8USOParseVWObTm_0(a1, a2, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v5 = type metadata accessor for TopTwo();
  return _s7SiriCam0B8USOParseVWObTm_0(a1 + *(int *)(v5 + 20), a2 + v4[5], (void (*)(void))type metadata accessor for RankedAction);
}

uint64_t UserHistoryTieBreaker.actionBoost(features:loggingId:)@<X0>(Swift::OpaquePointer a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = v3;
  if (one-time initialization token for mockFeatures != -1) {
    swift_once();
  }
  if (*(void *)(static UserHistoryTieBreaker.mockFeatures + 16))
  {
    uint64_t v9 = swift_bridgeObjectRetain();
    a1._rawValue = (void *)Dictionary<>.mock(with:for:)(v9, a2, (uint64_t)a1._rawValue);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  if (UserHistoryTieBreaker.rule_ForegroundedAppShortcut(_:)(a1))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    uint64_t v11 = (void *)OUTLINED_FUNCTION_11_9(v10, (uint64_t)static Logger.ranker);
    os_log_type_t v12 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_9(v12))
    {
      uint64_t v13 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_10_5(v13);
      OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v14, v15, "[UserHistoryHeuristic] ForegroundedAppShortcut rule match.");
      OUTLINED_FUNCTION_6_9();
    }

    uint64_t v4 = *(void *)(v5 + *(int *)(type metadata accessor for UserHistoryTieBreaker() + 24));
    type metadata accessor for ScoreBoost();
    OUTLINED_FUNCTION_3_7();
    OUTLINED_FUNCTION_0_13();
    uint64_t v16 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v17(v16);
    unint64_t v19 = 0xD000000000000017;
    id v20 = "ForegroundedAppShortcut";
LABEL_24:
    unint64_t v41 = (unint64_t)(v20 - 32) | 0x8000000000000000;
    goto LABEL_25;
  }
  uint64_t v21 = OUTLINED_FUNCTION_14_8();
  if (UserHistoryTieBreaker.rule_RecentDisambiguationSameActions(_:)((Swift::OpaquePointer)v21))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = (void *)OUTLINED_FUNCTION_11_9(v22, (uint64_t)static Logger.ranker);
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_9(v24))
    {
      uint64_t v25 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_10_5(v25);
      OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v26, v27, "[UserHistoryHeuristic] RecentDisambiguationSameActions rule match.");
      OUTLINED_FUNCTION_6_9();
    }

    uint64_t v28 = type metadata accessor for UserHistoryTieBreaker();
    OUTLINED_FUNCTION_13_8(v28);
    OUTLINED_FUNCTION_17_6();
    OUTLINED_FUNCTION_3_7();
    OUTLINED_FUNCTION_0_13();
    uint64_t v29 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v30(v29);
    unint64_t v19 = 0xD00000000000001FLL;
    id v20 = "RecentDisambiguationSameActions";
    goto LABEL_24;
  }
  uint64_t v31 = OUTLINED_FUNCTION_14_8();
  if (UserHistoryTieBreaker.rule_RecentDisambiguationSameApps(_:)((Swift::OpaquePointer)v31))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = (void *)OUTLINED_FUNCTION_11_9(v32, (uint64_t)static Logger.ranker);
    os_log_type_t v34 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_9(v34))
    {
      uint64_t v35 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_10_5(v35);
      OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v36, v37, "[UserHistoryHeuristic] RecentDisambiguationSameApps rule match.");
      OUTLINED_FUNCTION_6_9();
    }
    unint64_t v19 = 0xD00000000000001CLL;

    uint64_t v38 = type metadata accessor for UserHistoryTieBreaker();
    OUTLINED_FUNCTION_13_8(v38);
    OUTLINED_FUNCTION_17_6();
    OUTLINED_FUNCTION_3_7();
    OUTLINED_FUNCTION_0_13();
    uint64_t v39 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v40(v39);
    id v20 = "RecentDisambiguationSameApps";
    goto LABEL_24;
  }
  uint64_t v42 = OUTLINED_FUNCTION_14_8();
  if (UserHistoryTieBreaker.rule_RecentInstall(_:)((Swift::OpaquePointer)v42))
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    uint64_t v44 = (void *)OUTLINED_FUNCTION_11_9(v43, (uint64_t)static Logger.ranker);
    os_log_type_t v45 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_4_9(v45))
    {
      uint64_t v46 = (_WORD *)OUTLINED_FUNCTION_20_2();
      OUTLINED_FUNCTION_10_5(v46);
      OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v47, v48, "[UserHistoryHeuristic] RecentInstall rule match.");
      OUTLINED_FUNCTION_6_9();
    }

    uint64_t v49 = type metadata accessor for UserHistoryTieBreaker();
    OUTLINED_FUNCTION_13_8(v49);
    OUTLINED_FUNCTION_17_6();
    OUTLINED_FUNCTION_3_7();
    OUTLINED_FUNCTION_0_13();
    uint64_t v50 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v51(v50);
    unint64_t v41 = 0xED00006C6C617473;
    unint64_t v19 = 0x6E49746E65636552;
  }
  else
  {
    uint64_t v52 = OUTLINED_FUNCTION_14_8();
    if (UserHistoryTieBreaker.rule_RecentLaunch(_:)((Swift::OpaquePointer)v52))
    {
      swift_bridgeObjectRelease();
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      uint64_t v54 = (void *)OUTLINED_FUNCTION_11_9(v53, (uint64_t)static Logger.ranker);
      os_log_type_t v55 = static os_log_type_t.debug.getter();
      if (OUTLINED_FUNCTION_4_9(v55))
      {
        uint64_t v56 = (_WORD *)OUTLINED_FUNCTION_20_2();
        OUTLINED_FUNCTION_10_5(v56);
        OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v57, v58, "[UserHistoryHeuristic] RecentLaunch rule match.");
        OUTLINED_FUNCTION_6_9();
      }

      uint64_t v59 = type metadata accessor for UserHistoryTieBreaker();
      OUTLINED_FUNCTION_13_8(v59);
      OUTLINED_FUNCTION_17_6();
      OUTLINED_FUNCTION_3_7();
      OUTLINED_FUNCTION_0_13();
      uint64_t v60 = OUTLINED_FUNCTION_2_16();
      uint64_t result = v61(v60);
      unint64_t v41 = 0xEC00000068636E75;
      unint64_t v19 = 0x614C746E65636552;
    }
    else
    {
      uint64_t v62 = OUTLINED_FUNCTION_14_8();
      if (UserHistoryTieBreaker.rule_HistoricalPreferenceSameActions(_:)((Swift::OpaquePointer)v62))
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for ranker != -1) {
          swift_once();
        }
        uint64_t v63 = type metadata accessor for Logger();
        uint64_t v64 = (void *)OUTLINED_FUNCTION_11_9(v63, (uint64_t)static Logger.ranker);
        os_log_type_t v65 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_9(v65))
        {
          uint64_t v66 = (_WORD *)OUTLINED_FUNCTION_20_2();
          OUTLINED_FUNCTION_10_5(v66);
          OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v67, v68, "[UserHistoryHeuristic] HistoricalPreferenceSameActions rule match.");
          OUTLINED_FUNCTION_6_9();
        }

        uint64_t v69 = type metadata accessor for UserHistoryTieBreaker();
        OUTLINED_FUNCTION_13_8(v69);
        OUTLINED_FUNCTION_17_6();
        OUTLINED_FUNCTION_3_7();
        OUTLINED_FUNCTION_0_13();
        uint64_t v70 = OUTLINED_FUNCTION_2_16();
        uint64_t result = v71(v70);
        unint64_t v19 = 0xD00000000000001FLL;
        id v20 = "HistoricalPreferenceSameActions";
        goto LABEL_24;
      }
      uint64_t v72 = OUTLINED_FUNCTION_14_8();
      Swift::Bool v73 = UserHistoryTieBreaker.rule_HistoricalPreferenceSameApps(_:)((Swift::OpaquePointer)v72);
      swift_bridgeObjectRelease();
      if (v73)
      {
        if (one-time initialization token for ranker != -1) {
          swift_once();
        }
        uint64_t v74 = type metadata accessor for Logger();
        unint64_t v75 = (void *)OUTLINED_FUNCTION_11_9(v74, (uint64_t)static Logger.ranker);
        os_log_type_t v76 = static os_log_type_t.debug.getter();
        if (OUTLINED_FUNCTION_4_9(v76))
        {
          uint64_t v77 = (_WORD *)OUTLINED_FUNCTION_20_2();
          OUTLINED_FUNCTION_10_5(v77);
          OUTLINED_FUNCTION_3_11(&dword_1C9CFE000, v78, v79, "[UserHistoryHeuristic] HistoricalPreferenceSameApps rule match.");
          OUTLINED_FUNCTION_6_9();
        }
        unint64_t v19 = 0xD00000000000001CLL;

        uint64_t v80 = type metadata accessor for UserHistoryTieBreaker();
        OUTLINED_FUNCTION_13_8(v80);
        OUTLINED_FUNCTION_17_6();
        OUTLINED_FUNCTION_3_7();
        OUTLINED_FUNCTION_0_13();
        uint64_t v81 = OUTLINED_FUNCTION_2_16();
        uint64_t result = v82(v81);
        id v20 = "HistoricalPreferenceSameApps";
        goto LABEL_24;
      }
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v83 = type metadata accessor for Logger();
      uint64_t v84 = OUTLINED_FUNCTION_11_9(v83, (uint64_t)static Logger.ranker);
      os_log_type_t v85 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v84, v85))
      {
        uint64_t v86 = (uint8_t *)OUTLINED_FUNCTION_20_2();
        *(_WORD *)uint64_t v86 = 0;
        _os_log_impl(&dword_1C9CFE000, v84, v85, "[UserHistoryHeuristic] No rule matched.", v86, 2u);
        MEMORY[0x1CB78E290](v86, -1, -1);
      }

      type metadata accessor for ScoreBoost();
      OUTLINED_FUNCTION_3_7();
      OUTLINED_FUNCTION_0_13();
      uint64_t v87 = OUTLINED_FUNCTION_2_16();
      uint64_t result = v88(v87);
      unint64_t v41 = 0xE700000000000000;
      unint64_t v19 = 0x686374614D6F4ELL;
      uint64_t v4 = 0;
    }
  }
LABEL_25:
  *a3 = v4;
  a3[1] = v19;
  a3[2] = v41;
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.supportedTie()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UserHistoryTieBreaker();
  OUTLINED_FUNCTION_1_3();
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  uint64_t v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v38 - v7;
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  uint64_t v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (NSObject **)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  unint64_t v19 = (char *)&v38 - v18;
  uint64_t v20 = type metadata accessor for RankedAction();
  uint64_t v21 = v1 + *(int *)(v20 + 20);
  _s7SiriCam0B5ParseOWOcTm_0(v21, (uint64_t)v19, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v22 = type metadata accessor for CamParse;
    uint64_t v23 = (uint64_t)v19;
  }
  else
  {
    _s7SiriCam0B8USOParseVWObTm_0((uint64_t)v19, (uint64_t)v13, (void (*)(void))type metadata accessor for CamUSOParse);
    uint64_t v30 = CamUSOParse.appShortcutInvocation.getter();
    if (v31)
    {
      outlined consume of AppShortcutInvocation?(v30, v31);
      _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v13, (void (*)(void))type metadata accessor for CamUSOParse);
      _s7SiriCam0B5ParseOWOcTm_0(v1, (uint64_t)v10, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
      _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v10, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
      goto LABEL_10;
    }
    uint64_t v22 = type metadata accessor for CamUSOParse;
    uint64_t v23 = (uint64_t)v13;
  }
  _s7SiriCam0B5ParseOWOhTm_3(v23, (void (*)(void))v22);
  _s7SiriCam0B5ParseOWOcTm_0(v1, (uint64_t)v10, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
  Swift::Bool v24 = CamParse.isAppShortcutParse()();
  _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v10, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
  if (!v24)
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    uint64_t v26 = OUTLINED_FUNCTION_11_9(v25, (uint64_t)static Logger.ranker);
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v26, v27)) {
      goto LABEL_21;
    }
    uint64_t v28 = (uint8_t *)OUTLINED_FUNCTION_20_2();
    *(_WORD *)uint64_t v28 = 0;
    _os_log_impl(&dword_1C9CFE000, v26, v27, "[UserHistoryHeuristic] Only tie breaking app shortcut ambiguity.", v28, 2u);
    uint64_t v29 = (uint64_t)v28;
    goto LABEL_18;
  }
LABEL_10:
  _s7SiriCam0B5ParseOWOcTm_0(v21, (uint64_t)v17, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v26 = *v17;
    Swift::Bool v32 = 1;
LABEL_22:

    return v32;
  }
  _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v17, (void (*)(void))type metadata accessor for CamParse);
  if (vabdd_f64(*(double *)(v1 + *(int *)(v20 + 28)), *(double *)(v1 + *(int *)(v20 + 28) + *(int *)(v2 + 20))) >= 0.01)
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.ranker);
    _s7SiriCam0B5ParseOWOcTm_0(v1, (uint64_t)v8, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
    uint64_t v34 = v38;
    _s7SiriCam0B5ParseOWOcTm_0(v1, v38, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    if (!OUTLINED_FUNCTION_4_9(v35))
    {
      _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v8, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
      _s7SiriCam0B5ParseOWOhTm_3(v34, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
      goto LABEL_21;
    }
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 134218240;
    uint64_t v39 = *(void *)&v8[*(int *)(v20 + 28)];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s7SiriCam0B5ParseOWOhTm_3((uint64_t)v8, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
    *(_WORD *)(v36 + 12) = 2048;
    uint64_t v39 = *(void *)(v34 + *(int *)(v2 + 20) + *(int *)(v20 + 28));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _s7SiriCam0B5ParseOWOhTm_3(v34, (void (*)(void))type metadata accessor for UserHistoryTieBreaker);
    _os_log_impl(&dword_1C9CFE000, v26, (os_log_type_t)v1, "[UserHistoryHeuristic] Scores not ambiguous: top = %f, second = %f.", (uint8_t *)v36, 0x16u);
    uint64_t v29 = v36;
LABEL_18:
    MEMORY[0x1CB78E290](v29, -1, -1);
LABEL_21:
    Swift::Bool v32 = 0;
    goto LABEL_22;
  }
  return 1;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_ForegroundedAppShortcut(_:)(Swift::OpaquePointer a1)
{
  if (*((void *)a1._rawValue + 2) && (unint64_t v2 = OUTLINED_FUNCTION_9_11(), (v3 & 1) != 0))
  {
    id v4 = objc_msgSend(*(id *)(*(void *)(v1 + 56) + 8 * v2), sel_int64Value);
    if (v4)
    {
      OUTLINED_FUNCTION_2_4();
      id v4 = (id)OUTLINED_FUNCTION_26_4(19, v5);
      if (v4)
      {
        uint64_t v6 = v4;
        id v7 = objc_msgSend(v4, sel_int64Value);

        LOBYTE(v4) = v7 != 0;
      }
    }
  }
  else
  {
    LOBYTE(v4) = 0;
  }
  return (char)v4;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentDisambiguationSameActions(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    goto LABEL_6;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000031, 0x80000001C9DA2380);
  if ((v3 & 1) == 0) {
    goto LABEL_6;
  }
  id v4 = OUTLINED_FUNCTION_28_3(v2);
  OUTLINED_FUNCTION_2_4();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_26_4(45, v5);
  if (v6)
  {
    id v7 = v6;
    [v6 (SEL)(v1 + 3608)];

    if (v4)
    {
      uint64_t v8 = type metadata accessor for UserHistoryTieBreaker();
      LOBYTE(v6) = OUTLINED_FUNCTION_22_6(*(int *)(v8 + 28));
      return (char)v6;
    }
LABEL_6:
    LOBYTE(v6) = 0;
  }
  return (char)v6;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentDisambiguationSameApps(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    goto LABEL_6;
  }
  unint64_t v2 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002ELL, 0x80000001C9DA22F0);
  if ((v3 & 1) == 0) {
    goto LABEL_6;
  }
  id v4 = OUTLINED_FUNCTION_28_3(v2);
  OUTLINED_FUNCTION_2_4();
  uint64_t v6 = (void *)OUTLINED_FUNCTION_26_4(42, v5);
  if (v6)
  {
    id v7 = v6;
    [v6 (SEL)(v1 + 3608)];

    if (v4)
    {
      uint64_t v8 = type metadata accessor for UserHistoryTieBreaker();
      LOBYTE(v6) = OUTLINED_FUNCTION_22_6(*(int *)(v8 + 32));
      return (char)v6;
    }
LABEL_6:
    LOBYTE(v6) = 0;
  }
  return (char)v6;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentInstall(_:)(Swift::OpaquePointer a1)
{
  if (!*((void *)a1._rawValue + 2)) {
    return 0;
  }
  OUTLINED_FUNCTION_2_4();
  unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, v2);
  if ((v4 & 1) == 0 || (uint64_t)objc_msgSend(*(id *)(*((void *)a1._rawValue + 7) + 8 * v3), sel_int64Value) < 1) {
    return 0;
  }
  uint64_t v5 = type metadata accessor for UserHistoryTieBreaker();
  return OUTLINED_FUNCTION_22_6(*(int *)(v5 + 36));
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_RecentLaunch(_:)(Swift::OpaquePointer a1)
{
  Swift::Bool result = 0;
  if (*((void *)a1._rawValue + 2))
  {
    uint64_t v2 = v1;
    unint64_t v3 = OUTLINED_FUNCTION_9_11();
    if (v4)
    {
      if (objc_msgSend(*(id *)(*(void *)(v1 + 56) + 8 * v3), sel_int64Value))
      {
        OUTLINED_FUNCTION_2_4();
        uint64_t v6 = (void *)OUTLINED_FUNCTION_26_4(26, v5);
        if (v6)
        {
          id v7 = v6;
          uint64_t v8 = (uint64_t)objc_msgSend(v6, sel_int64Value);

          if (v8 >= 1 && v8 < *(void *)(v2 + *(int *)(type metadata accessor for UserHistoryTieBreaker() + 40))) {
            return 1;
          }
        }
      }
    }
  }
  return result;
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_HistoricalPreferenceSameActions(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  uint64_t v2 = static CAARFeatures.FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ;
  uint64_t v3 = *(void *)(static CAARFeatures.FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ + 16);
  if (v3)
  {
    OUTLINED_FUNCTION_23_6();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v23 = (void *)v2;
    uint64_t v4 = v2 + 40;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      OUTLINED_FUNCTION_27_3();
      if (OUTLINED_FUNCTION_18_8())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_7_11();
        }
        if (v5[2] >= v5[3] >> 1) {
          OUTLINED_FUNCTION_21_5();
        }
        OUTLINED_FUNCTION_16_5();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    a1._rawValue = v24;
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5[2] != 1) {
    goto LABEL_37;
  }
  uint64_t v6 = v5[4];
  uint64_t v7 = v5[5];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v8 = (void *)specialized Dictionary.subscript.getter(v6, v7, a1._rawValue);
  swift_bridgeObjectRelease();
  if (!v8) {
    return 0;
  }
  if (one-time initialization token for ACTION_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  uint64_t v9 = static CAARFeatures.ACTION_DISAMBIGUATION_FREQ;
  uint64_t v10 = *(void *)(static CAARFeatures.ACTION_DISAMBIGUATION_FREQ + 16);
  if (v10)
  {
    OUTLINED_FUNCTION_25_4();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v11 = v9 + 40;
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      OUTLINED_FUNCTION_24_6();
      if (OUTLINED_FUNCTION_19_5())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_7_11();
        }
        if (v12[2] >= v12[3] >> 1) {
          OUTLINED_FUNCTION_20_5();
        }
        OUTLINED_FUNCTION_12_6();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = v23;
    a1._rawValue = v24;
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v12[2] != 1)
  {

LABEL_37:
    swift_release();
    return 0;
  }
  uint64_t v13 = v12[4];
  uint64_t v14 = v12[5];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v15 = (void *)specialized Dictionary.subscript.getter(v13, v14, a1._rawValue);
  swift_bridgeObjectRelease();
  if (!v15)
  {

    return 0;
  }
  objc_msgSend(v8, sel_doubleValue);
  double v17 = v16;
  uint64_t v18 = type metadata accessor for UserHistoryTieBreaker();
  if (*(double *)(v22 + *(int *)(v18 + 48)) > v17)
  {

    return 0;
  }
  uint64_t v20 = v18;
  id v21 = objc_msgSend(v15, sel_int64Value);

  return (uint64_t)v21 >= *(void *)(v22 + *(int *)(v20 + 44));
}

Swift::Bool __swiftcall UserHistoryTieBreaker.rule_HistoricalPreferenceSameApps(_:)(Swift::OpaquePointer a1)
{
  if (one-time initialization token for FRAC_SELECTED_APP_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  uint64_t v2 = static CAARFeatures.FRAC_SELECTED_APP_DISAMBIGUATION_FREQ;
  uint64_t v3 = *(void *)(static CAARFeatures.FRAC_SELECTED_APP_DISAMBIGUATION_FREQ + 16);
  if (v3)
  {
    OUTLINED_FUNCTION_23_6();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v23 = (void *)v2;
    uint64_t v4 = v2 + 40;
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      OUTLINED_FUNCTION_27_3();
      if (OUTLINED_FUNCTION_18_8())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_7_11();
        }
        if (v5[2] >= v5[3] >> 1) {
          OUTLINED_FUNCTION_21_5();
        }
        OUTLINED_FUNCTION_16_5();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    a1._rawValue = v24;
  }
  else
  {
    uint64_t v5 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v5[2] != 1) {
    goto LABEL_37;
  }
  uint64_t v6 = v5[4];
  uint64_t v7 = v5[5];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v8 = (void *)specialized Dictionary.subscript.getter(v6, v7, a1._rawValue);
  swift_bridgeObjectRelease();
  if (!v8) {
    return 0;
  }
  if (one-time initialization token for APP_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  uint64_t v9 = static CAARFeatures.APP_DISAMBIGUATION_FREQ;
  uint64_t v10 = *(void *)(static CAARFeatures.APP_DISAMBIGUATION_FREQ + 16);
  if (v10)
  {
    OUTLINED_FUNCTION_25_4();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v11 = v9 + 40;
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
    do
    {
      OUTLINED_FUNCTION_24_6();
      if (OUTLINED_FUNCTION_19_5())
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          OUTLINED_FUNCTION_7_11();
        }
        if (v12[2] >= v12[3] >> 1) {
          OUTLINED_FUNCTION_20_5();
        }
        OUTLINED_FUNCTION_12_6();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v11 += 16;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v8 = v23;
    a1._rawValue = v24;
  }
  else
  {
    uint64_t v12 = (void *)MEMORY[0x1E4FBC860];
  }
  if (v12[2] != 1)
  {

LABEL_37:
    swift_release();
    return 0;
  }
  uint64_t v13 = v12[4];
  uint64_t v14 = v12[5];
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v15 = (void *)specialized Dictionary.subscript.getter(v13, v14, a1._rawValue);
  swift_bridgeObjectRelease();
  if (!v15)
  {

    return 0;
  }
  objc_msgSend(v8, sel_doubleValue);
  double v17 = v16;
  uint64_t v18 = type metadata accessor for UserHistoryTieBreaker();
  if (*(double *)(v22 + *(int *)(v18 + 56)) > v17)
  {

    return 0;
  }
  uint64_t v20 = v18;
  id v21 = objc_msgSend(v15, sel_int64Value);

  return (uint64_t)v21 >= *(void *)(v22 + *(int *)(v20 + 52));
}

uint64_t protocol witness for TieBreaking.enabled.getter in conformance UserHistoryTieBreaker()
{
  return UserHistoryTieBreaker.enabled.getter() & 1;
}

uint64_t _s7SiriCam0B5ParseOWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_3(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined consume of AppShortcutInvocation?(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7SiriCam0B8USOParseVWObTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t OUTLINED_FUNCTION_2_16()
{
  return v0;
}

void OUTLINED_FUNCTION_3_11(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

BOOL OUTLINED_FUNCTION_4_9(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_6_9()
{
  JUMPOUT(0x1CB78E290);
}

void OUTLINED_FUNCTION_7_11()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

unint64_t OUTLINED_FUNCTION_9_11()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48);
}

_WORD *OUTLINED_FUNCTION_10_5(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

uint64_t OUTLINED_FUNCTION_11_9(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return Logger.logObject.getter();
}

void OUTLINED_FUNCTION_12_6()
{
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = v2 + 16 * v1;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = v3;
}

double OUTLINED_FUNCTION_13_8(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 24));
}

uint64_t OUTLINED_FUNCTION_14_8()
{
  return v0;
}

void OUTLINED_FUNCTION_16_5()
{
  *(void *)(v2 + 16) = v4;
  uint64_t v5 = v2 + 16 * v1;
  *(void *)(v5 + 32) = v0;
  *(void *)(v5 + 40) = v3;
}

uint64_t OUTLINED_FUNCTION_17_6()
{
  return type metadata accessor for ScoreBoost();
}

uint64_t OUTLINED_FUNCTION_18_8()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_19_5()
{
  return StringProtocol.contains<A>(_:)();
}

void OUTLINED_FUNCTION_20_5()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

void OUTLINED_FUNCTION_21_5()
{
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

BOOL OUTLINED_FUNCTION_22_6@<W0>(uint64_t a1@<X8>)
{
  return v2 < *(void *)(v1 + a1);
}

uint64_t OUTLINED_FUNCTION_23_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_24_6()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_25_4()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_26_4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFLL | 0xD000000000000000;
  return specialized Dictionary.subscript.getter(v4, a2, v2);
}

uint64_t OUTLINED_FUNCTION_27_3()
{
  return swift_bridgeObjectRetain();
}

id OUTLINED_FUNCTION_28_3(uint64_t a1)
{
  uint64_t v3 = *(void **)(*(void *)(v1 + 56) + 8 * a1);
  return objc_msgSend(v3, sel_int64Value);
}

ValueMetadata *type metadata accessor for RankedActionFeatureExtractor()
{
  return &type metadata for RankedActionFeatureExtractor;
}

uint64_t *RankedActionFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static RankedActionFeatureExtractor.extractedFeatures;
}

uint64_t RankedActionFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  if (*(void *)(a1 + 16) < 2uLL)
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000044;
    *(void *)(v15 + 8) = 0x80000001C9DA3CE0;
    *(unsigned char *)(v15 + 16) = 1;
    swift_willThrow();
  }
  else
  {
    uint64_t v4 = type metadata accessor for RankedAction();
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    double v7 = 1.0;
    if (!CamParse.isAppShortcutParse()())
    {
      if (CamParse.isAppShortcutParse()()) {
        double v7 = 1.0;
      }
      else {
        double v7 = 0.0;
      }
    }
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl(&dword_1C9CFE000, v9, v10, "Extracting features from ranked actions", v11, 2u);
      MEMORY[0x1CB78E290](v11, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9CFB0;
    *(void *)(inited + 32) = 0xD000000000000024;
    *(void *)(inited + 40) = 0x80000001C9DA23C0;
    type metadata accessor for MLMultiArray();
    uint64_t v12 = (double *)(v6 + *(int *)(v4 + 28));
    double v13 = *(double *)((char *)v12 + *(void *)(v5 + 72));
    uint64_t v14 = static MLMultiArray.makeScalar(from:)(*v12 - v13);
    if (v1)
    {
      swift_bridgeObjectRelease();
      *(void *)(inited + 16) = 0;
      swift_setDeallocating();
      specialized _ContiguousArrayStorage.__deallocating_deinit();
    }
    else
    {
      *(void *)(inited + 48) = v14;
      *(void *)(inited + 56) = 0xD00000000000001CLL;
      *(void *)(inited + 64) = 0x80000001C9DA23F0;
      *(void *)(inited + 72) = static MLMultiArray.makeScalar(from:)(v13);
      *(void *)(inited + 80) = 0xD00000000000001DLL;
      *(void *)(inited + 88) = 0x80000001C9DA2410;
      *(void *)(inited + 96) = static MLMultiArray.makeScalar(from:)(v7);
      uint64_t inited = Dictionary.init(dictionaryLiteral:)();
      swift_bridgeObjectRetain_n();
      double v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v17, v18))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc();
        uint64_t v21 = swift_slowAlloc();
        uint64_t v25 = v21;
        *(_DWORD *)uint64_t v20 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v22 = Dictionary.Keys.description.getter();
        unint64_t v24 = v23;
        swift_bridgeObjectRelease();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C9CFE000, v17, v18, "Extracted ranked action features: %s", v20, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v21, -1, -1);
        MEMORY[0x1CB78E290](v20, -1, -1);
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
  }
  return inited;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance RankedActionFeatureExtractor()
{
  RankedActionFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance RankedActionFeatureExtractor(uint64_t *a1)
{
  return RankedActionFeatureExtractor.extractImpl(from:)(*a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for TrialOverridesTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v3;
  }
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (uint64_t *)((char *)a1 + v5);
  double v7 = (uint64_t *)((char *)a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for RankedAction();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8))
  {
    uint64_t v11 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v11;
    uint64_t v12 = v8[5];
    double v13 = (void **)((char *)v6 + v12);
    uint64_t v14 = (void **)((char *)v7 + v12);
    uint64_t v15 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      unint64_t v23 = *v14;
      *double v13 = *v14;
      id v24 = v23;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
LABEL_14:
        *(void *)((char *)v6 + v8[6]) = *(void *)((char *)v7 + v8[6]);
        *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
        *(void *)((char *)v6 + v8[8]) = *(void *)((char *)v7 + v8[8]);
        uint64_t v32 = v8[9];
        __dsta = (char *)v6 + v32;
        uint64_t v33 = (char *)v7 + v32;
        uint64_t v34 = type metadata accessor for UUID();
        os_log_type_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v35(__dsta, v33, v34);
        uint64_t v36 = v8[10];
        uint64_t v37 = (void *)((char *)v6 + v36);
        uint64_t v38 = (void *)((char *)v7 + v36);
        uint64_t v39 = v38[1];
        void *v37 = *v38;
        v37[1] = v39;
        *(void *)((char *)v6 + v8[11]) = *(void *)((char *)v7 + v8[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
        return v3;
      }
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v17 - 8) + 16))(v13, v14, v17);
      os_log_type_t v18 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v19 = v18[5];
      __dst = (char *)v13 + v19;
      uint64_t v20 = (char *)v14 + v19;
      uint64_t v21 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v21))
      {
        uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v20, *(void *)(*(void *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(__dst, v20, v21);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v21);
      }
      uint64_t v25 = v18[6];
      uint64_t v26 = (void **)((char *)v13 + v25);
      os_log_type_t v27 = (void **)((char *)v14 + v25);
      uint64_t v28 = v27[1];
      *uint64_t v26 = *v27;
      v26[1] = v28;
      uint64_t v29 = v18[7];
      uint64_t v30 = (char *)v13 + v29;
      uint64_t v31 = (char *)v14 + v29;
      void v30[4] = v31[4];
      *(_DWORD *)uint64_t v30 = *(_DWORD *)v31;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_14;
  }
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v6, v7, *(void *)(*(void *)(v9 - 8) + 64));
  return v3;
}

uint64_t destroy for TrialOverridesTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for RankedAction();
  uint64_t result = __swift_getEnumTagSinglePayload(v2, 1, v3);
  if (!result)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = (id *)(v2 + *(int *)(v3 + 20));
    type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
    }
    else if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(id *, uint64_t))(*(void *)(v7 - 8) + 8))(v5, v7);
      uint64_t v8 = (uint64_t)v5 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
      uint64_t v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (!__swift_getEnumTagSinglePayload(v8, 1, v9)) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
      }
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = v2 + *(int *)(v3 + 36);
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

unsigned char *initializeWithCopy for TrialOverridesTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = (int *)type metadata accessor for RankedAction();
  if (!__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v9 = v6[1];
    *uint64_t v5 = *v6;
    v5[1] = v9;
    uint64_t v10 = v7[5];
    uint64_t v11 = (void **)((char *)v5 + v10);
    uint64_t v12 = (void **)((char *)v6 + v10);
    uint64_t v13 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v12;
      *uint64_t v11 = *v12;
      id v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_12:
        *(void *)((char *)v5 + v7[6]) = *(void *)((char *)v6 + v7[6]);
        *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
        *(void *)((char *)v5 + v7[8]) = *(void *)((char *)v6 + v7[8]);
        uint64_t v30 = v7[9];
        uint64_t v31 = (char *)v5 + v30;
        uint64_t v32 = (char *)v6 + v30;
        uint64_t v33 = type metadata accessor for UUID();
        uint64_t v34 = *(void (**)(char *, char *, uint64_t))(*(void *)(v33 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v34(v31, v32, v33);
        uint64_t v35 = v7[10];
        uint64_t v36 = (void *)((char *)v5 + v35);
        uint64_t v37 = (void *)((char *)v6 + v35);
        uint64_t v38 = v37[1];
        *uint64_t v36 = *v37;
        v36[1] = v38;
        *(void *)((char *)v5 + v7[11]) = *(void *)((char *)v6 + v7[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
        return a1;
      }
      uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
      double v16 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v17 = v16[5];
      __dst = (char *)v11 + v17;
      os_log_type_t v18 = (char *)v12 + v17;
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(__dst, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v19);
      }
      uint64_t v23 = v16[6];
      id v24 = (void **)((char *)v11 + v23);
      uint64_t v25 = (void **)((char *)v12 + v23);
      uint64_t v26 = v25[1];
      *id v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v16[7];
      uint64_t v28 = (char *)v11 + v27;
      uint64_t v29 = (char *)v12 + v27;
      v28[4] = v29[4];
      *(_DWORD *)uint64_t v28 = *(_DWORD *)v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  return a1;
}

unsigned char *assignWithCopy for TrialOverridesTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = (int *)type metadata accessor for RankedAction();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v8);
  int v10 = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8);
  if (!EnumTagSinglePayload)
  {
    if (v10)
    {
      _s7SiriCam0B5ParseOWOhTm_4((uint64_t)v6, (void (*)(void))type metadata accessor for RankedAction);
      goto LABEL_9;
    }
    *uint64_t v6 = *v7;
    v6[1] = v7[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    if (a1 != a2)
    {
      uint64_t v23 = v8[5];
      id v24 = (void **)((char *)v6 + v23);
      uint64_t v25 = (void **)((char *)v7 + v23);
      _s7SiriCam0B5ParseOWOhTm_4((uint64_t)v6 + v23, (void (*)(void))type metadata accessor for CamParse);
      uint64_t v26 = type metadata accessor for CamParse(0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v51 = *v25;
        *id v24 = *v25;
        id v52 = v51;
LABEL_25:
        swift_storeEnumTagMultiPayload();
        goto LABEL_26;
      }
      if (!EnumCaseMultiPayload)
      {
        uint64_t v28 = type metadata accessor for Siri_Nlu_External_UserParse();
        (*(void (**)(void **, void **, uint64_t))(*(void *)(v28 - 8) + 16))(v24, v25, v28);
        uint64_t v29 = (int *)type metadata accessor for CamUSOParse(0);
        uint64_t v30 = v29[5];
        __dsta = (char *)v24 + v30;
        uint64_t v31 = (char *)v25 + v30;
        uint64_t v32 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        if (__swift_getEnumTagSinglePayload((uint64_t)v31, 1, v32))
        {
          uint64_t v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          memcpy(__dsta, v31, *(void *)(*(void *)(v33 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(__dsta, v31, v32);
          __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v32);
        }
        uint64_t v53 = v29[6];
        uint64_t v54 = (void **)((char *)v24 + v53);
        os_log_type_t v55 = (void **)((char *)v25 + v53);
        void *v54 = *v55;
        v54[1] = v55[1];
        uint64_t v56 = v29[7];
        uint64_t v57 = (char *)v24 + v56;
        uint64_t v58 = (char *)v25 + v56;
        int v59 = *(_DWORD *)v58;
        v57[4] = v58[4];
        *(_DWORD *)uint64_t v57 = v59;
        swift_bridgeObjectRetain();
        goto LABEL_25;
      }
      memcpy(v24, v25, *(void *)(*(void *)(v26 - 8) + 64));
    }
LABEL_26:
    *(void *)((char *)v6 + v8[6]) = *(void *)((char *)v7 + v8[6]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
    *(void *)((char *)v6 + v8[8]) = *(void *)((char *)v7 + v8[8]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v60 = v8[9];
    uint64_t v61 = (char *)v6 + v60;
    uint64_t v62 = (char *)v7 + v60;
    uint64_t v63 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 24))(v61, v62, v63);
    uint64_t v64 = v8[10];
    os_log_type_t v65 = (void *)((char *)v6 + v64);
    uint64_t v66 = (void *)((char *)v7 + v64);
    void *v65 = *v66;
    v65[1] = v66[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)((char *)v6 + v8[11]) = *(void *)((char *)v7 + v8[11]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (!v10)
  {
    *uint64_t v6 = *v7;
    v6[1] = v7[1];
    uint64_t v11 = v8[5];
    uint64_t v12 = (void **)((char *)v6 + v11);
    uint64_t v13 = (void **)((char *)v7 + v11);
    uint64_t v14 = type metadata accessor for CamParse(0);
    swift_bridgeObjectRetain();
    int v15 = swift_getEnumCaseMultiPayload();
    if (v15 == 1)
    {
      uint64_t v34 = *v13;
      *uint64_t v12 = *v13;
      id v35 = v34;
    }
    else
    {
      if (v15)
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
LABEL_20:
        *(void *)((char *)v6 + v8[6]) = *(void *)((char *)v7 + v8[6]);
        *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
        *(void *)((char *)v6 + v8[8]) = *(void *)((char *)v7 + v8[8]);
        uint64_t v43 = v8[9];
        uint64_t v44 = (char *)v6 + v43;
        os_log_type_t v45 = (char *)v7 + v43;
        uint64_t v46 = type metadata accessor for UUID();
        uint64_t v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v47(v44, v45, v46);
        uint64_t v48 = v8[10];
        uint64_t v49 = (void *)((char *)v6 + v48);
        uint64_t v50 = (void *)((char *)v7 + v48);
        void *v49 = *v50;
        v49[1] = v50[1];
        *(void *)((char *)v6 + v8[11]) = *(void *)((char *)v7 + v8[11]);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
        return a1;
      }
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v13, v16);
      uint64_t v17 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v18 = v17[5];
      __dst = (char *)v12 + v18;
      uint64_t v19 = (char *)v13 + v18;
      uint64_t v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
      {
        uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v19, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(__dst, v19, v20);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v20);
      }
      uint64_t v36 = v17[6];
      uint64_t v37 = (void **)((char *)v12 + v36);
      uint64_t v38 = (void **)((char *)v13 + v36);
      void *v37 = *v38;
      v37[1] = v38[1];
      uint64_t v39 = v17[7];
      uint64_t v40 = (char *)v12 + v39;
      unint64_t v41 = (char *)v13 + v39;
      int v42 = *(_DWORD *)v41;
      void v40[4] = v41[4];
      *(_DWORD *)uint64_t v40 = v42;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
    goto LABEL_20;
  }
LABEL_9:
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  memcpy(v6, v7, *(void *)(*(void *)(v22 - 8) + 64));
  return a1;
}

unsigned char *initializeWithTake for TrialOverridesTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = &a1[v4];
  uint64_t v6 = &a2[v4];
  uint64_t v7 = (int *)type metadata accessor for RankedAction();
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v7))
  {
    uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    memcpy(v5, v6, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *uint64_t v5 = *v6;
    uint64_t v9 = v7[5];
    int v10 = (char *)v5 + v9;
    uint64_t v11 = (char *)v6 + v9;
    uint64_t v12 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32))(v10, v11, v13);
      uint64_t v14 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v15 = v14[5];
      __dst = &v10[v15];
      uint64_t v16 = &v11[v15];
      uint64_t v17 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17))
      {
        uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dst, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 32))(__dst, v16, v17);
        __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v17);
      }
      *(_OWORD *)&v10[v14[6]] = *(_OWORD *)&v11[v14[6]];
      uint64_t v19 = v14[7];
      uint64_t v20 = &v10[v19];
      uint64_t v21 = &v11[v19];
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      swift_storeEnumTagMultiPayload();
    }
    *(void *)((char *)v5 + v7[6]) = *(void *)((char *)v6 + v7[6]);
    *(void *)((char *)v5 + v7[7]) = *(void *)((char *)v6 + v7[7]);
    *(void *)((char *)v5 + v7[8]) = *(void *)((char *)v6 + v7[8]);
    uint64_t v22 = v7[9];
    uint64_t v23 = (char *)v5 + v22;
    id v24 = (char *)v6 + v22;
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(v23, v24, v25);
    *(_OWORD *)((char *)v5 + v7[10]) = *(_OWORD *)((char *)v6 + v7[10]);
    *(void *)((char *)v5 + v7[11]) = *(void *)((char *)v6 + v7[11]);
    __swift_storeEnumTagSinglePayload((uint64_t)v5, 0, 1, (uint64_t)v7);
  }
  return a1;
}

unsigned char *assignWithTake for TrialOverridesTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = &a1[v5];
  uint64_t v7 = &a2[v5];
  uint64_t v8 = (int *)type metadata accessor for RankedAction();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v6, 1, (uint64_t)v8);
  int v10 = __swift_getEnumTagSinglePayload((uint64_t)v7, 1, (uint64_t)v8);
  if (EnumTagSinglePayload)
  {
    if (!v10)
    {
      *(_OWORD *)uint64_t v6 = *(_OWORD *)v7;
      uint64_t v11 = v8[5];
      uint64_t v12 = (char *)v6 + v11;
      uint64_t v13 = (char *)v7 + v11;
      uint64_t v14 = type metadata accessor for CamParse(0);
      if (swift_getEnumCaseMultiPayload())
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        uint64_t v21 = type metadata accessor for Siri_Nlu_External_UserParse();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 32))(v12, v13, v21);
        uint64_t v22 = (int *)type metadata accessor for CamUSOParse(0);
        uint64_t v23 = v22[5];
        __dst = &v12[v23];
        id v24 = &v13[v23];
        uint64_t v25 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
        if (__swift_getEnumTagSinglePayload((uint64_t)v24, 1, v25))
        {
          uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
          memcpy(__dst, v24, *(void *)(*(void *)(v26 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 32))(__dst, v24, v25);
          __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v25);
        }
        *(_OWORD *)&v12[v22[6]] = *(_OWORD *)&v13[v22[6]];
        uint64_t v33 = v22[7];
        uint64_t v34 = &v12[v33];
        id v35 = &v13[v33];
        v34[4] = v35[4];
        *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
        swift_storeEnumTagMultiPayload();
      }
      *(void *)((char *)v6 + v8[6]) = *(void *)((char *)v7 + v8[6]);
      *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
      *(void *)((char *)v6 + v8[8]) = *(void *)((char *)v7 + v8[8]);
      uint64_t v36 = v8[9];
      uint64_t v37 = (char *)v6 + v36;
      uint64_t v38 = (char *)v7 + v36;
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v37, v38, v39);
      *(_OWORD *)((char *)v6 + v8[10]) = *(_OWORD *)((char *)v7 + v8[10]);
      *(void *)((char *)v6 + v8[11]) = *(void *)((char *)v7 + v8[11]);
      __swift_storeEnumTagSinglePayload((uint64_t)v6, 0, 1, (uint64_t)v8);
      return a1;
    }
LABEL_7:
    uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    memcpy(v6, v7, *(void *)(*(void *)(v15 - 8) + 64));
    return a1;
  }
  if (v10)
  {
    _s7SiriCam0B5ParseOWOhTm_4((uint64_t)v6, (void (*)(void))type metadata accessor for RankedAction);
    goto LABEL_7;
  }
  uint64_t v16 = v7[1];
  *uint64_t v6 = *v7;
  v6[1] = v16;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v17 = v8[5];
    uint64_t v18 = (char *)v6 + v17;
    uint64_t v19 = (char *)v7 + v17;
    _s7SiriCam0B5ParseOWOhTm_4((uint64_t)v6 + v17, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v20 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v27 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32))(v18, v19, v27);
      uint64_t v28 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v29 = v28[5];
      __dsta = &v18[v29];
      uint64_t v30 = &v19[v29];
      uint64_t v31 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v30, 1, v31))
      {
        uint64_t v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(__dsta, v30, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 32))(__dsta, v30, v31);
        __swift_storeEnumTagSinglePayload((uint64_t)__dsta, 0, 1, v31);
      }
      *(_OWORD *)&v18[v28[6]] = *(_OWORD *)&v19[v28[6]];
      uint64_t v40 = v28[7];
      unint64_t v41 = &v18[v40];
      int v42 = &v19[v40];
      v41[4] = v42[4];
      *(_DWORD *)unint64_t v41 = *(_DWORD *)v42;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)v6 + v8[6]) = *(void *)((char *)v7 + v8[6]);
  swift_bridgeObjectRelease();
  *(void *)((char *)v6 + v8[7]) = *(void *)((char *)v7 + v8[7]);
  *(void *)((char *)v6 + v8[8]) = *(void *)((char *)v7 + v8[8]);
  swift_bridgeObjectRelease();
  uint64_t v43 = v8[9];
  uint64_t v44 = (char *)v6 + v43;
  os_log_type_t v45 = (char *)v7 + v43;
  uint64_t v46 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 40))(v44, v45, v46);
  uint64_t v47 = v8[10];
  uint64_t v48 = (void *)((char *)v6 + v47);
  uint64_t v49 = (void *)((char *)v7 + v47);
  uint64_t v51 = *v49;
  uint64_t v50 = v49[1];
  *uint64_t v48 = v51;
  v48[1] = v50;
  swift_bridgeObjectRelease();
  *(void *)((char *)v6 + v8[11]) = *(void *)((char *)v7 + v8[11]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialOverridesTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D5123C);
}

uint64_t sub_1C9D5123C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 20)];
    return __swift_getEnumTagSinglePayload(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for TrialOverridesTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D512DC);
}

unsigned char *sub_1C9D512DC(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 20)];
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TrialOverridesTieBreaker()
{
  uint64_t result = type metadata singleton initialization cache for TrialOverridesTieBreaker;
  if (!type metadata singleton initialization cache for TrialOverridesTieBreaker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata completion function for TrialOverridesTieBreaker()
{
  type metadata accessor for RankedAction?();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata accessor for RankedAction?()
{
  if (!lazy cache variable for type metadata for RankedAction?)
  {
    type metadata accessor for RankedAction();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RankedAction?);
    }
  }
}

uint64_t TrialOverridesTieBreaker.forcedDisambiguation.getter()
{
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v2 = OUTLINED_FUNCTION_11_1(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_2_1();
  BOOL v5 = (uint64_t *)(v4 - v3);
  uint64_t v6 = type metadata accessor for TrialOverridesTieBreaker();
  outlined init with copy of RankedAction?(v0 + *(int *)(v6 + 20), (uint64_t)v5, &demangling cache variable for type metadata for RankedAction?);
  uint64_t v7 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_5_9((uint64_t)v5, 1, v7);
  if (v8)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v5, &demangling cache variable for type metadata for RankedAction?);
    return 4;
  }
  uint64_t v10 = *v5;
  uint64_t v9 = v5[1];
  swift_bridgeObjectRetain();
  _s7SiriCam0B5ParseOWOhTm_4((uint64_t)v5, (void (*)(void))type metadata accessor for RankedAction);
  if (v10 == 0xD000000000000021 && v9 == 0x80000001C9DA20E0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
LABEL_10:
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.ranker);
      uint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl(&dword_1C9CFE000, v13, v14, "[TrialOverridesTieBreaker] This override will not be forced disambiguated.", v15, 2u);
        MEMORY[0x1CB78E290](v15, -1, -1);
      }

      return 4;
    }
  }
  if ((static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, 0x80000001C9DA3140) & 1) != 0
    && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
  {
    goto LABEL_10;
  }
  return 0;
}

uint64_t TrialOverridesTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v6 = OUTLINED_FUNCTION_11_1(v5);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_17();
  uint64_t v7 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v11 = v10 - v9;
  *a2 = 1;
  uint64_t v12 = static TrialProvider.tieBreakingOverrides.getter();
  if (v12)
  {
    Array<A>.getFavouredAction(tie:)(a1, v12, v2);
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_4(a1, (void (*)(void))type metadata accessor for TopTwo);
    OUTLINED_FUNCTION_5_9(v2, 1, v7);
    if (v13)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v2, &demangling cache variable for type metadata for RankedAction?);
      uint64_t v17 = (uint64_t)&a2[*(int *)(type metadata accessor for TrialOverridesTieBreaker() + 20)];
      uint64_t v18 = 1;
    }
    else
    {
      outlined init with take of RankedAction(v2, v11);
      uint64_t v16 = (uint64_t)&a2[*(int *)(type metadata accessor for TrialOverridesTieBreaker() + 20)];
      outlined init with take of RankedAction(v11, v16);
      uint64_t v17 = v16;
      uint64_t v18 = 0;
    }
    return __swift_storeEnumTagSinglePayload(v17, v18, 1, v7);
  }
  else
  {
    _s7SiriCam0B5ParseOWOhTm_4(a1, (void (*)(void))type metadata accessor for TopTwo);
    uint64_t v14 = (uint64_t)&a2[*(int *)(type metadata accessor for TrialOverridesTieBreaker() + 20)];
    return __swift_storeEnumTagSinglePayload(v14, 1, 1, v7);
  }
}

Swift::Bool __swiftcall TrialOverridesTieBreaker.supportedTie()()
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v3 = OUTLINED_FUNCTION_11_1(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_3_12();
  uint64_t v4 = type metadata accessor for TrialOverridesTieBreaker();
  outlined init with copy of RankedAction?(v0 + *(int *)(v4 + 20), v1, &demangling cache variable for type metadata for RankedAction?);
  uint64_t v5 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_5_9(v1, 1, v5);
  if (v6) {
    Swift::Bool v7 = 0;
  }
  else {
    Swift::Bool v7 = 1;
  }
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v1, &demangling cache variable for type metadata for RankedAction?);
  return v7;
}

uint64_t TrialOverridesTieBreaker.actionBoost(features:loggingId:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  int v42 = a2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v38 = v9 - v8;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_17();
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v13 = OUTLINED_FUNCTION_11_1(v12);
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_3_12();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v15 = OUTLINED_FUNCTION_11_1(v14);
  uint64_t v16 = MEMORY[0x1F4188790](v15);
  uint64_t v39 = (uint64_t)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v38 - v19;
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v38 - v21;
  uint64_t v40 = v7;
  uint64_t v41 = a1;
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v43((char *)&v38 - v21, a1, v6);
  __swift_storeEnumTagSinglePayload((uint64_t)v22, 0, 1, v6);
  uint64_t v23 = type metadata accessor for TrialOverridesTieBreaker();
  outlined init with copy of RankedAction?(v2 + *(int *)(v23 + 20), v3, &demangling cache variable for type metadata for RankedAction?);
  uint64_t v24 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_5_9(v3, 1, v24);
  if (v29)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v3, &demangling cache variable for type metadata for RankedAction?);
    uint64_t v26 = 1;
  }
  else
  {
    OUTLINED_FUNCTION_6_10();
    v25();
    _s7SiriCam0B5ParseOWOhTm_4(v3, (void (*)(void))type metadata accessor for RankedAction);
    uint64_t v26 = 0;
  }
  __swift_storeEnumTagSinglePayload((uint64_t)v20, v26, 1, v6);
  unint64_t v27 = v4 + *(int *)(v10 + 48);
  outlined init with copy of RankedAction?((uint64_t)v22, v4, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of RankedAction?((uint64_t)v20, v27, &demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_5_9(v4, 1, v6);
  if (!v29)
  {
    uint64_t v28 = v39;
    outlined init with copy of RankedAction?(v4, v39, &demangling cache variable for type metadata for UUID?);
    OUTLINED_FUNCTION_5_9(v27, 1, v6);
    if (!v29)
    {
      uint64_t v30 = v40;
      uint64_t v31 = v38;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 32))(v38, v27, v6);
      lazy protocol witness table accessor for type UUID and conformance UUID();
      unint64_t v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v32(v31, v6);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
      v32(v28, v6);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v4, &demangling cache variable for type metadata for UUID?);
      if (v27)
      {
        OUTLINED_FUNCTION_7_12();
        goto LABEL_15;
      }
LABEL_16:
      unint64_t v27 = 0x80000001C9DA3D30;
      unint64_t v33 = 0xD000000000000011;
      uint64_t v34 = 0;
      goto LABEL_17;
    }
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v28, v6);
LABEL_12:
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v4, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_16;
  }
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v22, &demangling cache variable for type metadata for UUID?);
  OUTLINED_FUNCTION_5_9(v27, 1, v6);
  if (!v29) {
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_7_12();
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v4, &demangling cache variable for type metadata for UUID?);
LABEL_15:
  unint64_t v33 = 0x646572756F766146;
  uint64_t v34 = 0x3F947AE147AE147BLL;
LABEL_17:
  type metadata accessor for ScoreBoost();
  id v35 = v42;
  OUTLINED_FUNCTION_6_10();
  uint64_t result = v36();
  *id v35 = v34;
  v35[1] = v33;
  v35[2] = v27;
  return result;
}

uint64_t outlined init with copy of RankedAction?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_4(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t OUTLINED_FUNCTION_5_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_getEnumTagSinglePayload(a1, a2, a3);
}

uint64_t dispatch thunk of TopRecognitionExtractor.getTopRecognition(recognition:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

ValueMetadata *type metadata accessor for TopRecogntionFeatureExtractorError()
{
  return &type metadata for TopRecogntionFeatureExtractorError;
}

uint64_t dispatch thunk of static ModelLoggingProtocol.setAssetInformation(modelMetadata:namespace:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

BOOL static MLFeatureValue.MLFeatureValueCodingKeys.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void MLFeatureValue.MLFeatureValueCodingKeys.hash(into:)(uint64_t a1, char a2)
{
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6570795461746164 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.init(intValue:)()
{
  return 2;
}

Swift::Int MLFeatureValue.MLFeatureValueCodingKeys.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

uint64_t MLFeatureValue.MLFeatureValueCodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1635017060;
  }
  else {
    return 0x6570795461746164;
  }
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance MLFeatureValue.MLFeatureValueCodingKeys(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return static MLFeatureValue.MLFeatureValueCodingKeys.== infix(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  return MLFeatureValue.MLFeatureValueCodingKeys.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance MLFeatureValue.MLFeatureValueCodingKeys(uint64_t a1)
{
  MLFeatureValue.MLFeatureValueCodingKeys.hash(into:)(a1, *v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  return MLFeatureValue.MLFeatureValueCodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance MLFeatureValue.MLFeatureValueCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = MLFeatureValue.MLFeatureValueCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance MLFeatureValue.MLFeatureValueCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = MLFeatureValue.MLFeatureValueCodingKeys.init(intValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MLFeatureValue.MLFeatureValueCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t MLFeatureValue.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<MLFeatureValue.MLFeatureValueCodingKeys>);
  MEMORY[0x1F4188790](v5);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  objc_msgSend(v3, sel_type);
  OUTLINED_FUNCTION_0_16();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (v2)
  {
LABEL_2:
    uint64_t v6 = OUTLINED_FUNCTION_1_15();
    return v7(v6);
  }
  else
  {
    switch((unint64_t)objc_msgSend(v3, sel_type))
    {
      case 1uLL:
        objc_msgSend(v3, sel_int64Value);
        OUTLINED_FUNCTION_0_16();
        KeyedEncodingContainer.encode(_:forKey:)();
        goto LABEL_2;
      case 2uLL:
        objc_msgSend(v3, sel_doubleValue);
        OUTLINED_FUNCTION_0_16();
        KeyedEncodingContainer.encode(_:forKey:)();
        goto LABEL_2;
      case 3uLL:
        id v9 = objc_msgSend(v3, sel_stringValue);
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        OUTLINED_FUNCTION_0_16();
        KeyedEncodingContainer.encode(_:forKey:)();
        uint64_t v10 = OUTLINED_FUNCTION_1_15();
        v11(v10);
        uint64_t result = swift_bridgeObjectRelease();
        break;
      case 5uLL:
        id v13 = objc_msgSend(v3, sel_multiArrayValue);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MLMultiArray?);
        lazy protocol witness table accessor for type MLMultiArray? and conformance <A> A?();
        OUTLINED_FUNCTION_0_16();
        KeyedEncodingContainer.encode<A>(_:forKey:)();

        goto LABEL_2;
      default:
        lazy protocol witness table accessor for type CoreMLError and conformance CoreMLError();
        swift_allocError();
        *(void *)uint64_t v12 = 0xD000000000000026;
        *(void *)(v12 + 8) = 0x80000001C9DA2CF0;
        *(unsigned char *)(v12 + 16) = 0;
        swift_willThrow();
        goto LABEL_2;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys;
  if (!lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLFeatureValue.MLFeatureValueCodingKeys and conformance MLFeatureValue.MLFeatureValueCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLMultiArray? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for MLMultiArray?);
    lazy protocol witness table accessor for type MLMultiArray and conformance MLMultiArray();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MLMultiArray and conformance MLMultiArray()
{
  unint64_t result = lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray;
  if (!lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray)
  {
    type metadata accessor for MLMultiArray();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MLMultiArray and conformance MLMultiArray);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MLFeatureValue(void *a1)
{
  return MLFeatureValue.encode(to:)(a1);
}

uint64_t getEnumTagSinglePayload for MLFeatureValue.MLFeatureValueCodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xFF)
  {
    if (a2 + 1 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 1) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 2;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 2;
  int v5 = v6 - 2;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for MLFeatureValue.MLFeatureValueCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D52798);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unsigned char *destructiveInjectEnumTag for MLFeatureValue.MLFeatureValueCodingKeys(unsigned char *result, char a2)
{
  *unint64_t result = a2 & 1;
  return result;
}

void *type metadata accessor for MLFeatureValue.MLFeatureValueCodingKeys()
{
  return &unk_1F2416C00;
}

uint64_t OUTLINED_FUNCTION_1_15()
{
  return v0;
}

uint64_t CamUSOParse.appShortcutInvocation.getter()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v1 = OUTLINED_FUNCTION_11_1(v0);
  MEMORY[0x1F4188790](v1);
  OUTLINED_FUNCTION_2_1();
  uint64_t v4 = v3 - v2;
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1_2();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v11 = v10 - v9;
  MEMORY[0x1CB78CBB0]();
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v4, 1, v5) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v4, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11, v4, v5);
  unint64_t v12 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v13 = v12;
  if (!(v12 >> 62))
  {
    if (*(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) == 1)
    {
LABEL_5:
      specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v13 & 0xC000000000000001) == 0, v13);
      if ((v13 & 0xC000000000000001) != 0) {
        MEMORY[0x1CB78D7C0](0, v13);
      }
      else {
        swift_retain();
      }
      swift_bridgeObjectRelease();
      uint64_t v14 = UsoTask.appShortcutInvocation.getter();
      swift_release();
      goto LABEL_8;
    }
LABEL_12:
    uint64_t v19 = OUTLINED_FUNCTION_0_2();
    v20(v19);
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v17 != 1) {
    goto LABEL_12;
  }
  swift_bridgeObjectRetain();
  uint64_t v18 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v18) {
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = 0;
LABEL_8:
  uint64_t v15 = OUTLINED_FUNCTION_0_2();
  v16(v15);
  return v14;
}

Swift::Bool __swiftcall CamParse.isAppShortcutParse()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for CamUSOParse(0);
  uint64_t v3 = OUTLINED_FUNCTION_11_1(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_1();
  uint64_t v6 = v5 - v4;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_2_1();
  uint64_t v10 = v9 - v8;
  outlined init with copy of CamParse(v1, v9 - v8);
  if (swift_getEnumCaseMultiPayload())
  {
    _s7SiriCam0B5ParseOWOhTm_2(v10, (void (*)(void))type metadata accessor for CamParse);
    return 0;
  }
  else
  {
    outlined init with take of CamUSOParse(v10, v6);
    uint64_t v12 = CamUSOParse.appShortcutInvocation.getter();
    Swift::Bool v11 = v13 != 0;
    if (v13) {
      outlined consume of AppShortcutInvocation?(v12, v13);
    }
    _s7SiriCam0B5ParseOWOhTm_2(v6, (void (*)(void))type metadata accessor for CamUSOParse);
  }
  return v11;
}

uint64_t UsoTask.appShortcutInvocation.getter()
{
  uint64_t v0 = 0;
  uint64_t v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?);
  uint64_t v2 = OUTLINED_FUNCTION_11_1(v1);
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_2_1();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match);
  OUTLINED_FUNCTION_1_2();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_2_1();
  uint64_t v12 = v11 - v10;
  uint64_t v13 = (void (*)(void, void, void))__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Regex<(Substring, Substring)>);
  OUTLINED_FUNCTION_1_2();
  uint64_t v99 = v14;
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_1();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  uint64_t v20 = OUTLINED_FUNCTION_11_1(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_5_2();
  uint64_t v98 = v21;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  uint64_t v104 = (char *)v89 - v23;
  uint64_t v107 = type metadata accessor for UsoIdentifier();
  OUTLINED_FUNCTION_1_2();
  uint64_t v101 = v24;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_5_2();
  uint64_t v106 = v26;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v27);
  uint64_t v105 = (char *)v89 - v28;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v29);
  uint64_t v100 = (char *)v89 - v30;
  OUTLINED_FUNCTION_2_5();
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)v89 - v33;
  MEMORY[0x1F4188790](v32);
  uint64_t v103 = (void (**)(char *, uint64_t))((char *)v89 - v35);
  static UsoTask_CodegenConverter.convert(task:)();
  uint64_t v97 = v12;
  if (!v113)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)&v110, &demangling cache variable for type metadata for Any?);
    goto LABEL_11;
  }
  type metadata accessor for UsoTask_execute_common_VoiceCommand();
  if ((OUTLINED_FUNCTION_6_11() & 1) == 0)
  {
LABEL_11:
    uint64_t v44 = v107;
LABEL_18:
    static UsoTask_CodegenConverter.convert(task:)();
    if (!v113)
    {
      uint64_t v72 = &demangling cache variable for type metadata for Any?;
      Swift::Bool v73 = &v110;
      goto LABEL_38;
    }
    type metadata accessor for UsoTask_run_common_VoiceCommand();
    if ((OUTLINED_FUNCTION_6_11() & 1) == 0) {
      return 0;
    }
    uint64_t v96 = v5;
    uint64_t v49 = v108;
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_Reference.reference.getter();
    swift_release();
    uint64_t v50 = v110;
    if (!v110)
    {
      swift_release();
      return v50;
    }
    uint64_t v51 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
    swift_release();
    if (!v51)
    {
      swift_release();
      return 0;
    }
    uint64_t v93 = v8;
    uint64_t v94 = v18;
    uint64_t v52 = *(void *)(v51 + 16);
    uint64_t v91 = v49;
    if (!v52)
    {
      uint64_t v70 = 1;
      uint64_t v71 = v98;
      goto LABEL_48;
    }
    int v90 = 0;
    uint64_t v92 = v13;
    uint64_t v95 = v6;
    uint64_t v53 = *(void (**)(char *, unint64_t, uint64_t))(v101 + 16);
    unint64_t v54 = v51 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
    os_log_type_t v55 = (char *)*MEMORY[0x1E4FA3928];
    uint64_t v56 = (void (**)(void))(v101 + 8);
    uint64_t v103 = *(void (***)(char *, uint64_t))(v101 + 72);
    uint64_t v104 = v55;
    v89[1] = v51;
    swift_bridgeObjectRetain();
    uint64_t v102 = (unint64_t)v56 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v57 = v105;
    while (1)
    {
      v53(v57, v54, v44);
      uint64_t v58 = UsoIdentifier.namespace.getter();
      int v59 = v57;
      uint64_t v60 = v44;
      uint64_t v62 = v61;
      uint64_t v63 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (!v62) {
        break;
      }
      if (v58 == v63 && v62 == v64)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v57 = v105;
        v53(v106, (unint64_t)v105, v107);
      }
      else
      {
        char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v57 = v105;
        uint64_t v44 = v107;
        v53(v106, (unint64_t)v105, v107);
        if ((v66 & 1) == 0) {
          goto LABEL_32;
        }
      }
      uint64_t v110 = UsoIdentifier.value.getter();
      uint64_t v111 = v68;
      uint64_t v108 = 0x726F68736F747561;
      unint64_t v109 = 0xEF2F2F3A74756374;
      lazy protocol witness table accessor for type String and conformance String();
      lazy protocol witness table accessor for type String and conformance String();
      uint64_t v44 = v107;
      char v69 = BidirectionalCollection<>.starts<A>(with:)();
      swift_bridgeObjectRelease();
      uint64_t v67 = *v56;
      OUTLINED_FUNCTION_49();
      v67();
      if (v69)
      {
        swift_bridgeObjectRelease();
        uint64_t v71 = v98;
        OUTLINED_FUNCTION_3_13();
        v80();
        uint64_t v6 = v95;
        OUTLINED_FUNCTION_8_9();
LABEL_47:
        uint64_t v0 = v90;
LABEL_48:
        __swift_storeEnumTagSinglePayload(v71, v70, 1, v44);
        swift_bridgeObjectRelease();
        if (__swift_getEnumTagSinglePayload(v71, 1, v44) == 1)
        {
          swift_release();
          uint64_t v72 = &demangling cache variable for type metadata for UsoIdentifier?;
          Swift::Bool v73 = (uint64_t *)v71;
          goto LABEL_38;
        }
        OUTLINED_FUNCTION_3_13();
        v81();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Substring, Substring));
        Regex.init(_regexString:version:)();
        UsoIdentifier.value.getter();
        uint64_t v82 = v96;
        Regex.firstMatch(in:)();
        if (v0)
        {

          swift_bridgeObjectRelease();
          __swift_storeEnumTagSinglePayload(v82, 1, 1, v6);
LABEL_53:
          swift_release();
          OUTLINED_FUNCTION_49();
          v83();
          uint64_t v84 = OUTLINED_FUNCTION_7_13();
          v85(v84);
          uint64_t v72 = &demangling cache variable for type metadata for Regex<(Substring, Substring)>.Match?;
          Swift::Bool v73 = (uint64_t *)v82;
LABEL_38:
          outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v73, v72);
          return 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          if (__swift_getEnumTagSinglePayload(v82, 1, v6) == 1) {
            goto LABEL_53;
          }
          (*(void (**)(void))(v93 + 32))();
          swift_getKeyPath();
          Regex.Match.subscript.getter();
          swift_release();
          MEMORY[0x1CB78D2A0](v110, v111, v112, v113);
          swift_bridgeObjectRelease();
          uint64_t v50 = UsoIdentifier.appBundleId.getter();
          swift_release();
          (*(void (**)(uint64_t, uint64_t))(v93 + 8))(v97, v6);
          OUTLINED_FUNCTION_49();
          v86();
          uint64_t v87 = OUTLINED_FUNCTION_7_13();
          v88(v87);
        }
        return v50;
      }
LABEL_35:
      ((void (*)(char *, uint64_t))v67)(v57, v44);
      v54 += (unint64_t)v103;
      if (!--v52)
      {
        swift_bridgeObjectRelease();
        uint64_t v6 = v95;
        OUTLINED_FUNCTION_8_9();
        uint64_t v71 = v98;
        goto LABEL_47;
      }
    }
    swift_bridgeObjectRelease();
    v53(v106, (unint64_t)v59, v60);
    uint64_t v44 = v60;
    uint64_t v57 = v59;
LABEL_32:
    uint64_t v67 = *v56;
    OUTLINED_FUNCTION_49();
    v67();
    goto LABEL_35;
  }
  uint64_t v96 = v5;
  uint64_t v36 = v108;
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_ReferenceVoiceCommandPayload.reference.getter();
  swift_release();
  if (!v110)
  {
    swift_release();
    uint64_t v44 = v107;
    uint64_t v5 = v96;
    goto LABEL_18;
  }
  uint64_t v95 = v6;
  uint64_t v37 = v8;
  uint64_t v38 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
  swift_release();
  if (!v38)
  {
    swift_release();
    uint64_t v44 = v107;
    uint64_t v8 = v37;
    uint64_t v6 = v95;
    uint64_t v5 = v96;
    goto LABEL_18;
  }
  uint64_t v39 = v38;
  uint64_t v102 = v36;
  uint64_t v93 = v37;
  uint64_t v40 = *(void *)(v38 + 16);
  if (v40)
  {
    uint64_t v94 = v18;
    uint64_t v92 = v13;
    uint64_t v13 = *(void (**)(void, void, void))(v101 + 16);
    unint64_t v41 = v39 + ((*(unsigned __int8 *)(v101 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
    int v42 = (void (**)(char *, uint64_t))(v101 + 8);
    uint64_t v43 = *(void *)(v101 + 72);
    uint64_t v91 = v39;
    swift_bridgeObjectRetain();
    uint64_t v44 = v107;
    while (1)
    {
      v13(v34, v41, v44);
      if (closure #1 in UsoTask.appShortcutInvocation.getter((uint64_t)v34)) {
        break;
      }
      uint64_t v44 = v107;
      (*v42)(v34, v107);
      v41 += v43;
      if (!--v40)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = v94;
        uint64_t v6 = v95;
        OUTLINED_FUNCTION_8_9();
        uint64_t v46 = (uint64_t)v104;
        goto LABEL_16;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v46 = (uint64_t)v104;
    uint64_t v44 = v107;
    OUTLINED_FUNCTION_3_13();
    v47();
    uint64_t v18 = v94;
    uint64_t v6 = v95;
    OUTLINED_FUNCTION_8_9();
  }
  else
  {
    uint64_t v45 = 1;
    uint64_t v44 = v107;
    uint64_t v46 = (uint64_t)v104;
    uint64_t v6 = v95;
  }
LABEL_16:
  __swift_storeEnumTagSinglePayload(v46, v45, 1, v44);
  swift_bridgeObjectRelease();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v46, 1, v44);
  uint64_t v8 = v93;
  uint64_t v5 = v96;
  if (EnumTagSinglePayload == 1)
  {
    swift_release();
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v46, &demangling cache variable for type metadata for UsoIdentifier?);
    goto LABEL_18;
  }
  unint64_t v75 = v103;
  OUTLINED_FUNCTION_3_13();
  v76();
  uint64_t v110 = UsoIdentifier.value.getter();
  uint64_t v111 = v77;
  uint64_t v108 = 95;
  unint64_t v109 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  uint64_t v78 = StringProtocol.components<A>(separatedBy:)();
  swift_bridgeObjectRelease();
  if (*(void *)(v78 + 16))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v50 = UsoIdentifier.appBundleId.getter();
    swift_release();
    OUTLINED_FUNCTION_49();
    v79();
    return v50;
  }
  swift_bridgeObjectRelease();
  __break(1u);
  (*v75)(v34, v107);
  uint64_t result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t closure #1 in UsoTask.appShortcutInvocation.getter(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UsoIdentifier.NluComponent();
  uint64_t v35 = *(void *)(v2 - 8);
  uint64_t v36 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v33 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1F4188790](v34);
  uint64_t v38 = (uint64_t)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  uint64_t v37 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v33 - v9;
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v33 - v11;
  uint64_t v13 = type metadata accessor for UsoIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = UsoIdentifier.namespace.getter();
  uint64_t v19 = v18;
  uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v19)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    goto LABEL_9;
  }
  if (v17 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
    goto LABEL_11;
  }
  char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  if ((v23 & 1) == 0)
  {
LABEL_9:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
LABEL_17:
    char v28 = 0;
    return v28 & 1;
  }
LABEL_11:
  UsoIdentifier.sourceComponent.getter();
  uint64_t v24 = v35;
  uint64_t v25 = v36;
  (*(void (**)(char *, void, uint64_t))(v35 + 104))(v10, *MEMORY[0x1E4FA2CD0], v36);
  __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v25);
  uint64_t v26 = v38;
  uint64_t v27 = v38 + *(int *)(v34 + 48);
  outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v12, v38);
  outlined init with copy of UsoIdentifier.NluComponent?((uint64_t)v10, v27);
  if (__swift_getEnumTagSinglePayload(v26, 1, v25) != 1)
  {
    outlined init with copy of UsoIdentifier.NluComponent?(v26, (uint64_t)v37);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v27, 1, v25);
    uint64_t v34 = v24 + 8;
    if (EnumTagSinglePayload != 1)
    {
      uint64_t v31 = v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 32))(v33, v27, v25);
      lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent();
      char v28 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v32 = *(void (**)(char *, uint64_t))(v24 + 8);
      v32(v31, v25);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      v32(v37, v25);
      outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v38, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
      return v28 & 1;
    }
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    (*(void (**)(char *, uint64_t))v34)(v37, v25);
    goto LABEL_16;
  }
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v10, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v12, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if (__swift_getEnumTagSinglePayload(v27, 1, v25) != 1)
  {
LABEL_16:
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v26, &demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
    goto LABEL_17;
  }
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v26, &demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  char v28 = 1;
  return v28 & 1;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    type metadata accessor for UsoIdentifier.NluComponent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_6_11()
{
  return swift_dynamicCast();
}

uint64_t OUTLINED_FUNCTION_7_13()
{
  return *(void *)(v0 - 208);
}

uint64_t *AsrSimpleFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static AsrSimpleFeatureExtractor.extractedFeatures;
}

uint64_t AsrSimpleFeatureExtractor.extractImpl(from:)(void *a1)
{
  unint64_t v2 = outlined bridged method (pb) of @objc SASRecognition.utterances.getter(a1);
  if (v2)
  {
    if (v2 >> 62) {
      uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    }
    else {
      uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.common);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      uint64_t v12 = v8;
      *(_DWORD *)uint64_t v7 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001BLL, 0x80000001C9DA14C0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C9CFE000, v5, v6, "No utterances found. Forcing %s to 0", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v8, -1, -1);
      MEMORY[0x1CB78E290](v7, -1, -1);
    }

    uint64_t v3 = 0;
  }
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLMultiArray);
  uint64_t result = static MLMultiArray.makeScalar(from:)((double)v3);
  uint64_t v10 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
    *(void *)(inited + 32) = 0xD00000000000001BLL;
    *(void *)(inited + 40) = 0x80000001C9DA14C0;
    *(void *)(inited + 48) = v10;
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance AsrSimpleFeatureExtractor()
{
  AsrSimpleFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance AsrSimpleFeatureExtractor(void **a1)
{
  return AsrSimpleFeatureExtractor.extractImpl(from:)(*a1);
}

uint64_t outlined bridged method (pb) of @objc SASRecognition.utterances.getter(void *a1)
{
  id v1 = objc_msgSend(a1, sel_utterances);
  if (!v1) {
    return 0;
  }
  unint64_t v2 = v1;
  type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for SASUtterance);
  uint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

ValueMetadata *type metadata accessor for AsrSimpleFeatureExtractor()
{
  return &type metadata for AsrSimpleFeatureExtractor;
}

void *UncertaintyPromptHandler.init()()
{
  unint64_t v2 = v0;
  type metadata accessor for LatticePathFeatureExtractor();
  uint64_t v3 = swift_allocObject();
  v0[2] = 0x3FF0000000000000;
  v0[3] = v3;
  uint64_t v4 = type metadata accessor for CoreMLHandler();
  swift_allocObject();
  uint64_t v5 = CoreMLHandler.init(forModelWithName:)(0xD000000000000025, 0x80000001C9DA2580);
  if (v1)
  {
    swift_release();
    type metadata accessor for UncertaintyPromptHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v18 = (ValueMetadata *)v4;
    uint64_t v19 = &protocol witness table for CoreMLHandler;
    *(void *)&long long v17 = v5;
    outlined init with take of AppSelectionSignalComponent(&v17, (uint64_t)(v0 + 11));
    uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
    v0[4] = 0xD000000000000023;
    v0[5] = 0x80000001C9DA3E20;
    v0[6] = 0xD000000000000027;
    v0[7] = 0x80000001C9DA3E50;
    v0[8] = 0xD000000000000026;
    v0[9] = 0x80000001C9DA3E80;
    v0[10] = v6;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UncertaintyPromptActionEnforcer>);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_1C9D9EE70;
    *(void *)(v7 + 56) = &type metadata for LongPayloadActionEnforcer;
    *(void *)(v7 + 64) = &protocol witness table for LongPayloadActionEnforcer;
    *(void *)(v7 + 96) = &type metadata for UserConfirmationActionEnforcer;
    *(void *)(v7 + 104) = &protocol witness table for UserConfirmationActionEnforcer;
    *(void *)(v7 + 136) = &type metadata for SiriVocabActionEnforcer;
    *(void *)(v7 + 144) = &protocol witness table for SiriVocabActionEnforcer;
    *(void *)(v7 + 176) = &type metadata for MessageDictationActionEnforcer;
    *(void *)(v7 + 184) = &protocol witness table for MessageDictationActionEnforcer;
    *(void *)(v7 + 216) = &type metadata for GiveUpRepeatActionEnforcer;
    *(void *)(v7 + 224) = &protocol witness table for GiveUpRepeatActionEnforcer;
    *(void *)(v7 + 256) = &type metadata for ExecuteActionEnforcer;
    *(void *)(v7 + 264) = &protocol witness table for ExecuteActionEnforcer;
    *(void *)(v7 + 296) = &type metadata for ShadowLogActionEnforcer;
    *(void *)(v7 + 304) = &protocol witness table for ShadowLogActionEnforcer;
    *(void *)(v7 + 336) = &type metadata for ZeroAsrConfidenceActionEnforcer;
    *(void *)(v7 + 344) = &protocol witness table for ZeroAsrConfidenceActionEnforcer;
    *(void *)(v7 + 376) = &type metadata for ExactShortcutActionEnforcer;
    *(void *)(v7 + 384) = &protocol witness table for ExactShortcutActionEnforcer;
    *(void *)(v7 + 416) = &type metadata for OverrideParseActionEnforcer;
    *(void *)(v7 + 424) = &protocol witness table for OverrideParseActionEnforcer;
    *(void *)(v7 + 456) = &type metadata for UserEntityVocabActionEnforcer;
    *(void *)(v7 + 464) = &protocol witness table for UserEntityVocabActionEnforcer;
    uint64_t v16 = v7;
    uint64_t v8 = (void *)MEMORY[0x1CB78D210](0x6C616E7265746E49, 0xED0000646C697542);
    int v9 = MGGetBoolAnswer();

    if (v9)
    {
      if (one-time initialization token for ambiguityHandling != -1) {
        swift_once();
      }
      uint64_t v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.ambiguityHandling);
      uint64_t v11 = Logger.logObject.getter();
      os_log_type_t v12 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v11, v12))
      {
        uint64_t v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v13 = 0;
        _os_log_impl(&dword_1C9CFE000, v11, v12, "Detected internal build", v13, 2u);
        OUTLINED_FUNCTION_2_2();
      }

      uint64_t v18 = &type metadata for UncertaintyPromptMagicWordsActionEnforcer;
      uint64_t v19 = &protocol witness table for UncertaintyPromptMagicWordsActionEnforcer;
      outlined init with take of AppSelectionSignalComponent(&v17, (uint64_t)v15);
      specialized Array.replaceSubrange<A>(_:with:)(0, 0, (uint64_t)v15);
      uint64_t v7 = v16;
    }
    v2[19] = &type metadata for UncertaintyPromptSequentialEnforcer;
    v2[20] = &protocol witness table for UncertaintyPromptSequentialEnforcer;
    v2[16] = v7;
  }
  return v2;
}

uint64_t static UncertaintyPromptHandler.register(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(uint64_t a1, char a2, char a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_10:
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    uint64_t v14 = (uint8_t *)__swift_project_value_buffer(v13, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      swift_slowAlloc();
      uint64_t v29 = OUTLINED_FUNCTION_6_12();
      *(_DWORD *)uint64_t v14 = 136315138;
      uint64_t v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x455045525F4B5341, 0xEA00000000005441, &v29);
      OUTLINED_FUNCTION_5_10(v17);
      uint64_t v18 = "[UncertaintyPromptHandler] Not registering as %s is disabled";
      goto LABEL_14;
    }
    goto LABEL_28;
  }
  swift_bridgeObjectRetain();
  uint64_t v10 = 0;
  while (1)
  {
    int v11 = *(unsigned __int8 *)(a1 + v10 + 32);
    if (v11 == 1)
    {
      OUTLINED_FUNCTION_8_10();
      goto LABEL_7;
    }
    if (v11 != 2) {
      break;
    }
LABEL_7:
    OUTLINED_FUNCTION_4_10();
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_16;
    }
    if (v9 == ++v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
LABEL_16:
  swift_bridgeObjectRelease();
  if (a3)
  {
    if ((a2 & 1) == 0)
    {
      static AssetProvider.fetchModelFromUAF(_:)(0xD000000000000025, 0x80000001C9DA2580, (uint64_t)v8);
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v19);
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v8, &demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
      if (EnumTagSinglePayload == 1)
      {
        if (one-time initialization token for ambiguityHandling != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        uint64_t v14 = (uint8_t *)__swift_project_value_buffer(v21, (uint64_t)static Logger.ambiguityHandling);
        uint64_t v15 = Logger.logObject.getter();
        os_log_type_t v16 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v15, v16))
        {
          swift_slowAlloc();
          uint64_t v29 = OUTLINED_FUNCTION_6_12();
          *(_DWORD *)uint64_t v14 = 136315138;
          uint64_t v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, 0x80000001C9DA2580, &v29);
          OUTLINED_FUNCTION_5_10(v22);
          uint64_t v18 = "[UncertaintyPromptHandler] Cannot find %s model";
LABEL_14:
          _os_log_impl(&dword_1C9CFE000, v15, v16, v18, v14, 0xCu);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
LABEL_27:
          OUTLINED_FUNCTION_2_2();
        }
        goto LABEL_28;
      }
    }
    type metadata accessor for UncertaintyPromptHandler();
    uint64_t v26 = swift_allocObject();
    UncertaintyPromptHandler.init()();
  }
  else
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl(&dword_1C9CFE000, v15, v24, "[UncertaintyPromptHandler] Not registering as ASR did not run on device", v25, 2u);
      goto LABEL_27;
    }
LABEL_28:

    return 0;
  }
  return v26;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UncertaintyPromptHandler.update()()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[15];
  __swift_project_boxed_opaque_existential_1(v0 + 11, v1);
  (*(void (**)(uint64_t, uint64_t))(v2 + 16))(v1, v2);
}

uint64_t UncertaintyPromptHandler.handle(camInput:)(uint64_t a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (unint64_t *)&v97[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_2();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_7_6();
  uint64_t v124 = v11;
  OUTLINED_FUNCTION_7_14();
  uint64_t v12 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_2();
  uint64_t v123 = v13;
  MEMORY[0x1F4188790](v14);
  OUTLINED_FUNCTION_7_6();
  uint64_t v122 = v15;
  OUTLINED_FUNCTION_7_14();
  uint64_t v16 = type metadata accessor for CamInput();
  OUTLINED_FUNCTION_1_2();
  uint64_t v119 = v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v120 = v19;
  uint64_t v121 = &v97[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OUTLINED_FUNCTION_7_14();
  uint64_t v118 = type metadata accessor for DispatchQoS.QoSClass();
  OUTLINED_FUNCTION_1_2();
  uint64_t v117 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_7_6();
  uint64_t v116 = v22;
  OUTLINED_FUNCTION_7_14();
  uint64_t v114 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_7_6();
  uint64_t v115 = v24;
  OUTLINED_FUNCTION_7_14();
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  if (!*(void *)(a1 + *(int *)(v16 + 32)))
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    __swift_project_value_buffer(v42, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v38, v39)) {
      goto LABEL_20;
    }
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    unint64_t v41 = "[UncertaintyPromptHandler] Skipping prediction due to missing speech package";
    goto LABEL_19;
  }
  uint64_t v110 = v12;
  uint64_t v113 = &v97[-v28];
  uint64_t v111 = v9;
  unint64_t v31 = *(void *)(a1 + *(int *)(v16 + 48));
  uint64_t v32 = *(void *)(v31 + 16);
  if (v32)
  {
    uint64_t v107 = v30;
    uint64_t v103 = v16;
    uint64_t v104 = v7;
    uint64_t v108 = v29;
    uint64_t v109 = v27;
    uint64_t v105 = v3;
    uint64_t v106 = v6;
    uint64_t v112 = a1;
    unint64_t v33 = 0xEA00000000005441;
    swift_bridgeObjectRetain_n();
    uint64_t v34 = 0;
    while (1)
    {
      int v35 = *(unsigned __int8 *)(v31 + v34 + 32);
      if (v35 == 1)
      {
        OUTLINED_FUNCTION_8_10();
      }
      else if (v35 != 2)
      {
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v125;
        if (one-time initialization token for ambiguityHandling != -1) {
          swift_once();
        }
        id v44 = (id)static Log.ambiguityHandling;
        OSSignpostID.init(log:)();
        static os_signpost_type_t.begin.getter();
        OUTLINED_FUNCTION_12_7();
        double v45 = *(double *)(v43 + 16);
        uint64_t v46 = *(void *)(v43 + 24);
        swift_retain();
        uint64_t v47 = specialized FeatureExtracting.extract(from:)(v112, v46, v45);
        if (v1)
        {
          swift_release();
          OUTLINED_FUNCTION_18_1();
          v48();
          return v33;
        }
        uint64_t v49 = v47;
        swift_release();
        uint64_t v50 = (void *)static Log.ambiguityHandling;
        static os_signpost_type_t.end.getter();
        OUTLINED_FUNCTION_12_7();
        v50;
        OSSignpostID.init(log:)();
        static os_signpost_type_t.begin.getter();
        os_signpost(_:dso:log:name:signpostID:)();
        uint64_t v51 = *(void *)(v43 + 112);
        uint64_t v52 = *(void *)(v43 + 120);
        __swift_project_boxed_opaque_existential_1((void *)(v43 + 88), v51);
        uint64_t v53 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 32))(v49, v51, v52);
        uint64_t v102 = (void *)(v43 + 88);
        static os_signpost_type_t.end.getter();
        os_signpost(_:dso:log:name:signpostID:)();
        long long v54 = *(_OWORD *)(v43 + 48);
        long long v133 = *(_OWORD *)(v43 + 32);
        long long v134 = v54;
        long long v135 = *(_OWORD *)(v43 + 64);
        uint64_t v136 = *(void *)(v43 + 80);
        CamOutputProvider.toCamOutput(from:)(v53);
        unint64_t v33 = v56;
        id v100 = v53;
        uint64_t v114 = swift_allocBox();
        uint64_t v58 = v57;
        uint64_t v59 = *(void *)(v43 + 112);
        uint64_t v60 = *(void *)(v43 + 120);
        uint64_t v101 = v49;
        __swift_project_boxed_opaque_existential_1(v102, v59);
        uint64_t v61 = *(void (**)(uint64_t, uint64_t))(v60 + 24);
        uint64_t v62 = v60;
        uint64_t v63 = v101;
        v61(v59, v62);
        uint64_t v64 = *(void *)(v43 + 152);
        uint64_t v65 = *(void *)(v43 + 160);
        __swift_project_boxed_opaque_existential_1((void *)(v43 + 128), v64);
        uint64_t v125 = v58;
        uint64_t v66 = v115;
        _s7SiriCam0B13ModelMetadataVWOcTm_0(v58, v115, (void (*)(void))type metadata accessor for CamModelMetadata);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v65 + 8))(&aBlock, v63, v33, v112, v66, v64, v65);
        outlined destroy of CamModelMetadata(v66);
        uint64_t v67 = v129;
        if (v129)
        {
          uint64_t v68 = v128;
          int v69 = aBlock;
          if (one-time initialization token for ambiguityHandling != -1) {
            swift_once();
          }
          uint64_t v70 = type metadata accessor for Logger();
          __swift_project_value_buffer(v70, (uint64_t)static Logger.ambiguityHandling);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v71 = Logger.logObject.getter();
          os_log_type_t v72 = static os_log_type_t.info.getter();
          int v73 = v72;
          if (os_log_type_enabled(v71, v72))
          {
            uint64_t v74 = swift_slowAlloc();
            uint64_t v99 = swift_slowAlloc();
            uint64_t aBlock = v99;
            *(_DWORD *)uint64_t v74 = 136315650;
            int v98 = v73;
            LOBYTE(v126) = *(unsigned char *)(v33 + 56);
            uint64_t v115 = v68;
            uint64_t v75 = String.init<A>(describing:)();
            uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v74 + 12) = 2080;
            LOBYTE(v126) = v69;
            LODWORD(v102) = v69;
            uint64_t v77 = String.init<A>(describing:)();
            uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v74 + 22) = 2080;
            uint64_t v68 = v115;
            swift_bridgeObjectRetain();
            uint64_t v126 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, (unint64_t)v67, &aBlock);
            LOBYTE(v69) = (_BYTE)v102;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C9CFE000, v71, (os_log_type_t)v98, "[UncertaintyPromptHandler] Overriding %s with %s due to %s", (uint8_t *)v74, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2_2();
            uint64_t v63 = v101;
            OUTLINED_FUNCTION_2_2();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_release_n();
          }
          LOBYTE(aBlock) = v69;
          v79._uint64_t countAndFlagsBits = v68;
          v79._object = v67;
          CamOutput.overrideAction(action:enforcer:)((SiriCam::CamAction)&aBlock, v79);
          if (v68 == 0xD000000000000017 && v67 == (uint64_t (*)(uint64_t))0x80000001C9DA3E00)
          {
            swift_bridgeObjectRelease();
            goto LABEL_39;
          }
          char v80 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v80) {
LABEL_39:
          }
            *(unsigned char *)(v125 + 48) = 1;
        }
        type metadata accessor for OS_dispatch_queue();
        uint64_t v81 = v117;
        uint64_t v82 = v116;
        uint64_t v83 = v118;
        (*(void (**)(uint64_t, void, uint64_t))(v117 + 104))(v116, *MEMORY[0x1E4FBCB10], v118);
        uint64_t v84 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v82, v83);
        os_log_type_t v85 = v121;
        _s7SiriCam0B13ModelMetadataVWOcTm_0(v112, (uint64_t)v121, (void (*)(void))type metadata accessor for CamInput);
        unint64_t v86 = (*(unsigned __int8 *)(v119 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80);
        uint64_t v87 = (void *)swift_allocObject();
        v87[2] = v63;
        v87[3] = v33;
        v87[4] = v114;
        outlined init with take of CamInput((uint64_t)v85, (uint64_t)v87 + v86);
        uint64_t v131 = partial apply for closure #1 in UncertaintyPromptHandler.handle(camInput:);
        uint64_t v132 = v87;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v128 = 1107296256;
        uint64_t v129 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        uint64_t v130 = &block_descriptor_1;
        uint64_t v88 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        uint64_t v89 = v122;
        static DispatchQoS.unspecified.getter();
        uint64_t v126 = MEMORY[0x1E4FBC860];
        lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
        uint64_t v90 = v124;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1CB78D610](0, v89, v90, v88);
        _Block_release(v88);

        OUTLINED_FUNCTION_18_1();
        v91();
        OUTLINED_FUNCTION_18_1();
        v92();
        swift_release();
        uint64_t v93 = v125;
        swift_beginAccess();
        uint64_t v94 = (uint64_t)v106;
        uint64_t v95 = (uint64_t)v106 + *(int *)(v105 + 48);
        *uint64_t v106 = v33;
        _s7SiriCam0B13ModelMetadataVWOcTm_0(v93, v95, (void (*)(void))type metadata accessor for CamModelMetadata);
        swift_retain();
        specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();

        outlined destroy of RRDataSourceMetadataValue?(v94, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
        uint64_t v96 = *(void (**)(void))(v108 + 8);
        OUTLINED_FUNCTION_1_16();
        v96();
        OUTLINED_FUNCTION_1_16();
        v96();
        swift_release();
        return v33;
      }
      OUTLINED_FUNCTION_4_10();
      char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v36)
      {
        unint64_t v33 = v31;
        goto LABEL_23;
      }
      if (v32 == ++v34)
      {
        swift_bridgeObjectRelease_n();
        break;
      }
    }
  }
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  __swift_project_value_buffer(v37, (uint64_t)static Logger.ambiguityHandling);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v40 = 0;
    unint64_t v41 = "[UncertaintyPromptHandler] Skipping prediction due to missing ASK_REPEAT feature flag";
LABEL_19:
    _os_log_impl(&dword_1C9CFE000, v38, v39, v41, v40, 2u);
    OUTLINED_FUNCTION_2_2();
  }
LABEL_20:

  type metadata accessor for CamOutput();
  *(unsigned char *)(swift_allocObject() + 56) = 1;
  return CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
}

uint64_t closure #1 in UncertaintyPromptHandler.handle(camInput:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for CamModelMetadata();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_projectBox();
  swift_beginAccess();
  _s7SiriCam0B13ModelMetadataVWOcTm_0(v10, (uint64_t)v9, (void (*)(void))type metadata accessor for CamModelMetadata);
  uint64_t v11 = UUID.uuidString.getter();
  unint64_t v13 = v12;
  uint64_t v14 = type metadata accessor for CamInput();
  specialized static CamFeatureStoreLoggingProtocol.writeData(modelFeatures:modelOutput:modelMetadata:requestId:rcId:fsStream:)(a1, a2, (uint64_t)v9, v11, v13, *(void *)(a4 + *(int *)(v14 + 24)), *(void **)(a4 + *(int *)(v14 + 24) + 8), 0);
  swift_bridgeObjectRelease();
  return outlined destroy of CamModelMetadata((uint64_t)v9);
}

uint64_t UncertaintyPromptHandler.deinit()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 88);
  __swift_destroy_boxed_opaque_existential_1(v0 + 128);
  return v0;
}

uint64_t UncertaintyPromptHandler.__deallocating_deinit()
{
  UncertaintyPromptHandler.deinit();
  return MEMORY[0x1F4186488](v0, 168, 7);
}

uint64_t type metadata accessor for UncertaintyPromptHandler()
{
  return self;
}

void protocol witness for ActionHandler.update() in conformance UncertaintyPromptHandler()
{
}

uint64_t protocol witness for ActionHandler.handle(camInput:) in conformance UncertaintyPromptHandler(uint64_t a1)
{
  return UncertaintyPromptHandler.handle(camInput:)(a1);
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t _s7SiriCam0B13ModelMetadataVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t sub_1C9D55CD4()
{
  uint64_t v1 = (int *)type metadata accessor for CamInput();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_3();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v0 + v3, v5);
  v7(v0 + v3 + v1[5], v5);
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v3 + v1[7];
  if (!__swift_getEnumTagSinglePayload(v8, 1, v5)) {
    v7(v8, v5);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, v3 + v4, v2 | 7);
}

uint64_t outlined init with take of CamInput(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CamInput();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in UncertaintyPromptHandler.handle(camInput:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for CamInput() - 8);
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (uint64_t)v0 + ((*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  return closure #1 in UncertaintyPromptHandler.handle(camInput:)(v2, v3, v4, v5);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result < 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v7 = result;
  uint64_t v8 = a2 - result;
  if (__OFSUB__(a2, result))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *(void *)(v5 + 24) >> 1)
  {
    if (v6 <= v10) {
      uint64_t v13 = v6 + v9;
    }
    else {
      uint64_t v13 = v6;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    uint64_t v5 = v14;
    *uint64_t v3 = v14;
  }
  unint64_t v15 = v5 + 32 + 40 * v7;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UncertaintyPromptActionEnforcer);
  unint64_t result = swift_arrayDestroy();
  if (!v9)
  {
LABEL_16:
    char v20 = 0;
    unint64_t v21 = v5 + 40 * v7 - 8;
    while ((v20 & 1) == 0)
    {
      v21 += 40;
      unint64_t result = outlined init with copy of SignalProviding(a3, v21);
      char v20 = 1;
      if (v21 >= v15) {
        return outlined destroy of RRDataSourceMetadataValue?(a3, &demangling cache variable for type metadata for CollectionOfOne<UncertaintyPromptActionEnforcer>);
      }
    }
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v16 = *(void *)(v5 + 16);
  if (__OFSUB__(v16, a2))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  unint64_t result = specialized UnsafeMutablePointer.moveInitialize(from:count:)(v5 + 32 + 40 * a2, v16 - a2, v15 + 40);
  uint64_t v17 = *(void *)(v5 + 16);
  BOOL v18 = __OFADD__(v17, v9);
  uint64_t v19 = v17 + v9;
  if (!v18)
  {
    *(void *)(v5 + 16) = v19;
    goto LABEL_16;
  }
LABEL_27:
  __break(1u);
  return result;
}

uint64_t OUTLINED_FUNCTION_5_10(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_6_12()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_7_14()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_8_10()
{
  return 0x4F5455415F534D53;
}

uint64_t OUTLINED_FUNCTION_12_7()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t MixingModelHandler.deinit()
{
  outlined destroy of MixingModel(v0 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of CamModelMetadata(v0 + OBJC_IVAR____TtC7SiriCam18MixingModelHandler_modelMetadata);
  return v0;
}

uint64_t MixingModelHandler.__deallocating_deinit()
{
  MixingModelHandler.deinit();
  uint64_t v1 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v2 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v1, v2);
}

uint64_t ObjC metadata update function for MixingModelHandler()
{
  return type metadata accessor for MixingModelHandler();
}

uint64_t type metadata accessor for MixingModelHandler()
{
  uint64_t result = type metadata singleton initialization cache for MixingModelHandler;
  if (!type metadata singleton initialization cache for MixingModelHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for MixingModelHandler()
{
  uint64_t result = type metadata accessor for CamModelMetadata();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t outlined destroy of MixingModel(uint64_t a1)
{
  return a1;
}

uint64_t dispatch thunk of AutoConfirmActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

void type metadata accessor for AutoConfirmMagicWordsActionEnforcer()
{
}

void type metadata accessor for AutoConfirmSequentialEnforcer()
{
}

void type metadata accessor for UserDefaultsActionEnforcer()
{
}

void type metadata accessor for ForcedConfirmationActionEnforcer()
{
}

void AutoConfirmSequentialEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *(void *)(a5 + 16);
  if (v6)
  {
    unint64_t v21 = a6;
    uint64_t v11 = (void *)(a5 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v12 = v11[3];
      uint64_t v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v22, a1, a2, a3, a4, v12, v13);
      unint64_t v14 = v23;
      if (v23) {
        break;
      }
      v11 += 5;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        a6 = v21;
        goto LABEL_6;
      }
    }
    uint64_t v15 = v22[1];
    uint64_t v16 = LOBYTE(v22[0]);
    swift_bridgeObjectRelease();
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.autoSend);
    swift_bridgeObjectRetain_n();
    BOOL v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      char v20 = (uint8_t *)swift_slowAlloc();
      v22[0] = swift_slowAlloc();
      *(_DWORD *)char v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v18, v19, "%s has overridden", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *unint64_t v21 = v16;
    v21[1] = v15;
    v21[2] = v14;
  }
  else
  {
LABEL_6:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void protocol witness for AutoConfirmActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:) in conformance AutoConfirmSequentialEnforcer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  AutoConfirmSequentialEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(a1, a2, a3, a4, *v5, a5);
}

void AutoConfirmMagicWordsActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1@<X2>, uint64_t *a2@<X8>)
{
  id v3 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a1
                                                             + *(int *)(type metadata accessor for AutoSendInput() + 20)), sel_recognition));
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = objc_msgSend(v3, sel_aceRecognition);
    if (!v5)
    {
      __break(1u);
      return;
    }
    uint64_t v6 = v5;
    specialized TopRecognitionExtractor.getTopRecognition(recognition:)(v5);

    String.lowercased()();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type String and conformance String();
    char v7 = OUTLINED_FUNCTION_0_17();
    char v8 = OUTLINED_FUNCTION_0_17();
    swift_bridgeObjectRelease();
    if (v7)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoConfirmMagicWordsActionEnforcer.Type);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v11 = v10;

      uint64_t v12 = 1;
LABEL_10:
      *a2 = v12;
      a2[1] = v9;
      a2[2] = v11;
      return;
    }
    if (v8)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AutoConfirmMagicWordsActionEnforcer.Type);
      uint64_t v9 = String.init<A>(describing:)();
      uint64_t v11 = v13;

      uint64_t v12 = 2;
      goto LABEL_10;
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void UserDefaultsActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(void *a1@<X8>)
{
  uint64_t v2 = CamStringUserDefaults.value.getter();
  if (v3
    && (static AutoConfirmAction.action(from:)(v2, v3, (char *)&v12), swift_bridgeObjectRelease(), uint64_t v4 = v12, v12 != 3))
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserDefaultsActionEnforcer.Type);
    uint64_t v10 = String.init<A>(describing:)();
    *a1 = v4;
    a1[1] = v10;
    a1[2] = v11;
  }
  else
  {
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.autoSend);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_3_14(&dword_1C9CFE000, v8, v9, "No user default override");
      OUTLINED_FUNCTION_2_2();
    }

    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void ForcedConfirmationActionEnforcer.enforce(inputFeatures:autoSendOutput:autoSendInput:modelMetadata:)(uint64_t a1@<X2>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for AutoSendInput() + 28)))
  {
    if (ForcedDisambiguation.decision()())
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForcedConfirmationActionEnforcer.Type);
      uint64_t v3 = String.init<A>(describing:)();
      *a2 = 1;
      a2[1] = v3;
      a2[2] = v4;
      return;
    }
  }
  else
  {
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.autoSend);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      *(_WORD *)swift_slowAlloc() = 0;
      OUTLINED_FUNCTION_3_14(&dword_1C9CFE000, v8, v9, "ForcedConfirmationActionEnforcer: user is not opt in");
      OUTLINED_FUNCTION_2_2();
    }
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

uint64_t OUTLINED_FUNCTION_0_17()
{
  return StringProtocol.contains<A>(_:)();
}

void OUTLINED_FUNCTION_3_14(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t dispatch thunk of static MockableFeaturesProviding.mockFeatures.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSo14MLFeatureValueCG_SS_AGts5NeverOTg508_sSSSo14de36CSSABIgggoo_SS3key_AB5valuetSS_ABts5F11OIegnrzr_TRSSAGSSAGIgggoo_Tf1cn_n(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, id))
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (!v2) {
    return v3;
  }
  uint64_t v27 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
  uint64_t v3 = v27;
  uint64_t result = specialized Dictionary.startIndex.getter(a1);
  if ((result & 0x8000000000000000) == 0)
  {
    unint64_t v7 = result;
    if (result < 1 << *(unsigned char *)(a1 + 32))
    {
      uint64_t v8 = a1 + 64;
      while ((*(void *)(v8 + 8 * (v7 >> 6)) & (1 << v7)) != 0)
      {
        if (v6 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_18;
        }
        int64_t v24 = v2;
        int v25 = v6;
        uint64_t v9 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v7);
        uint64_t v10 = v3;
        uint64_t v11 = *v9;
        uint64_t v12 = v9[1];
        uint64_t v13 = *(void **)(*(void *)(a1 + 56) + 8 * v7);
        swift_bridgeObjectRetain();
        id v14 = v13;
        uint64_t v15 = a2(v11, v12, v14);
        uint64_t v3 = v10;
        uint64_t v26 = v15;
        uint64_t v17 = v16;
        uint64_t v19 = v18;

        uint64_t result = swift_bridgeObjectRelease();
        unint64_t v21 = *(void *)(v3 + 16);
        unint64_t v20 = *(void *)(v3 + 24);
        if (v21 >= v20 >> 1) {
          uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1);
        }
        *(void *)(v3 + 16) = v21 + 1;
        uint64_t v22 = (void *)(v3 + 24 * v21);
        v22[4] = v26;
        v22[5] = v17;
        v22[6] = v19;
        if ((uint64_t)v7 >= -(-1 << *(unsigned char *)(a1 + 32))) {
          goto LABEL_19;
        }
        uint64_t v8 = a1 + 64;
        if ((*(void *)(a1 + 64 + 8 * (v7 >> 6)) & (1 << v7)) == 0) {
          goto LABEL_20;
        }
        if (v25 != *(_DWORD *)(a1 + 36)) {
          goto LABEL_21;
        }
        uint64_t result = _HashTable.occupiedBucket(after:)();
        int64_t v2 = v24 - 1;
        if (v24 == 1) {
          return v3;
        }
        unint64_t v7 = result;
        if ((result & 0x8000000000000000) == 0)
        {
          int v6 = *(_DWORD *)(a1 + 36);
          if (result < 1 << *(unsigned char *)(a1 + 32)) {
            continue;
          }
        }
        goto LABEL_22;
      }
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      __break(1u);
LABEL_20:
      __break(1u);
LABEL_21:
      __break(1u);
    }
  }
LABEL_22:
  __break(1u);
  return result;
}

uint64_t Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v5 & 1) != 0))
  {
    MEMORY[0x1F4188790](v4);
    swift_bridgeObjectRetain();
    uint64_t v6 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSDySSSo14MLFeatureValueCG_SS_AGts5NeverOTg508_sSSSo14de36CSSABIgggoo_SS3key_AB5valuetSS_ABts5F11OIegnrzr_TRSSAGSSAGIgggoo_Tf1cn_n(a3, partial apply for closure #1 in Dictionary<>.mock(with:for:));
    swift_bridgeObjectRelease();
    return specialized Dictionary.init<A>(uniqueKeysWithValues:)(v6);
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  return a3;
}

uint64_t closure #1 in Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  if (!*(void *)(a4 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v9 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    a3;
    goto LABEL_6;
  }
  *(id *)(*(void *)(a4 + 56) + 8 * v8);
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t partial apply for closure #1 in Dictionary<>.mock(with:for:)(uint64_t a1, uint64_t a2, void *a3)
{
  return closure #1 in Dictionary<>.mock(with:for:)(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t AutoSendHandler.init()()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_8_4();
  uint64_t v5 = v0 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  static EnvironmentUtilities.currentSiriLocale.getter();
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  id v6 = (id)static Log.autoSend;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_11_10();
  OUTLINED_FUNCTION_18_9();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.autoSend);
  unint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl(&dword_1C9CFE000, v8, v9, "Initialising AutoSend Handler", v10, 2u);
    uint64_t v2 = v1;
    OUTLINED_FUNCTION_2_2();
  }

  type metadata accessor for AutoSendCoreHandler();
  swift_allocObject();
  uint64_t v11 = AutoSendCoreHandler.init()();
  if (v2)
  {
    uint64_t v12 = OUTLINED_FUNCTION_19_6();
    v13(v12);
    type metadata accessor for Locale();
    OUTLINED_FUNCTION_1_3();
    (*(void (**)(uint64_t))(v14 + 8))(v5);
    type metadata accessor for AutoSendHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    *(void *)(v3 + 16) = v11;
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1C9CFE000, v15, v16, "AutoSend Handler initialised successfully", v17, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    static os_signpost_type_t.end.getter();
    OUTLINED_FUNCTION_18_9();
    os_signpost(_:dso:log:name:signpostID:)();
    uint64_t v18 = OUTLINED_FUNCTION_19_6();
    v19(v18);
  }
  return v3;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AutoSendHandler.update()()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_1_2();
  uint64_t v48 = v4;
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_7_6();
  uint64_t v47 = v6;
  uint64_t v7 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v54 = v8;
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_5_2();
  uint64_t v50 = v10;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_10_0();
  uint64_t v46 = v12;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_40();
  MEMORY[0x1F4188790](v14);
  os_log_type_t v16 = (char *)&v41 - v15;
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v52 = v3;
  uint64_t v53 = v1;
  uint64_t v17 = __swift_project_value_buffer(v3, (uint64_t)static Logger.autoSend);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl(&dword_1C9CFE000, v18, v19, "Updating AutoSendHandler", v20, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  static EnvironmentUtilities.currentSiriLocale.getter();
  uint64_t v49 = v2;
  uint64_t v21 = v2 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  swift_beginAccess();
  uint64_t v22 = v54;
  unint64_t v23 = *(void (**)(void))(v54 + 16);
  OUTLINED_FUNCTION_28_1();
  v23();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
  char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v51 = *(void (**)(void))(v22 + 8);
  OUTLINED_FUNCTION_49();
  v25();
  if (v24)
  {
    uint64_t v26 = v51;
  }
  else
  {
    uint64_t v27 = v47;
    uint64_t v28 = v48;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v17, v52);
    OUTLINED_FUNCTION_28_1();
    v23();
    double v45 = v16;
    OUTLINED_FUNCTION_28_1();
    v23();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.error.getter();
    int v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v32 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      v55[0] = v44;
      *(_DWORD *)uint64_t v32 = 136315394;
      uint64_t v42 = v32 + 4;
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale, MEMORY[0x1E4F27A78]);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v55);
      os_log_t v43 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      LODWORD(v46) = v31;
      int v35 = v51;
      OUTLINED_FUNCTION_49();
      v35();
      *(_WORD *)(v32 + 12) = 2080;
      uint64_t v42 = v32 + 14;
      uint64_t v26 = v35;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_49();
      v35();
      os_log_t v38 = v43;
      _os_log_impl(&dword_1C9CFE000, v43, (os_log_type_t)v46, "Detected locale switch from %s to %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v52);
    }
    else
    {
      uint64_t v26 = v51;
      OUTLINED_FUNCTION_49();
      v26();
      OUTLINED_FUNCTION_49();
      v26();

      (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v27, v52);
    }
    uint64_t v39 = v53;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 24))(v21, v45, v7);
    swift_endAccess();
    type metadata accessor for AutoSendCoreHandler();
    swift_allocObject();
    uint64_t v40 = AutoSendCoreHandler.init()();
    if (v39)
    {
      OUTLINED_FUNCTION_49();
      v26();
      return;
    }
    *(void *)(v49 + 16) = v40;
    swift_release();
  }
  swift_retain();
  AutoSendCoreHandler.update()();
  OUTLINED_FUNCTION_49();
  v26();
  swift_release();
}

uint64_t AutoSendHandler.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  return AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, 0, a6);
}

uint64_t AutoSendHandler.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)@<X0>(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W7>, uint64_t a7@<X8>)
{
  return AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t AutoSendHandler.inferConfirmationImpl(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W6>, uint64_t a7@<X8>)
{
  LODWORD(v105) = a6;
  uint64_t v115 = a4;
  uint64_t v113 = a2;
  uint64_t v104 = type metadata accessor for AutoSendInput();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_7_6();
  uint64_t v112 = v13;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v14 - 8);
  OUTLINED_FUNCTION_5_2();
  uint64_t v95 = v15;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v92 - v17;
  uint64_t v19 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v116 = v20;
  MEMORY[0x1F4188790](v21);
  OUTLINED_FUNCTION_5_2();
  uint64_t v98 = v22;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_10_0();
  uint64_t v96 = v24;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_10_0();
  uint64_t v97 = v26;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_40();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_10_0();
  uint64_t v114 = v29;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v92 - v31;
  uint64_t v108 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v102 = v33;
  MEMORY[0x1F4188790](v34);
  uint64_t v36 = (char *)&v92 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  unint64_t v107 = v19;
  id v37 = (id)static Log.autoSend;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_11_10();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v94 = v7;
  uint64_t v38 = type metadata accessor for Logger();
  uint64_t v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.autoSend);
  swift_bridgeObjectRetain_n();
  id v40 = a1;
  swift_bridgeObjectRetain_n();
  id v41 = v40;
  uint64_t v109 = v39;
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  int v44 = v43;
  BOOL v45 = os_log_type_enabled(v42, v43);
  unint64_t v110 = a3;
  uint64_t v99 = a7;
  uint64_t v101 = v36;
  uint64_t v111 = v32;
  id v103 = v41;
  if (v45)
  {
    uint64_t v46 = OUTLINED_FUNCTION_7_1();
    id v100 = (char *)swift_slowAlloc();
    v118[0] = (uint64_t)v100;
    *(_DWORD *)uint64_t v46 = 136315650;
    int v93 = v44;
    id v47 = v41;
    id v48 = objc_msgSend(v47, sel_description);
    uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v51 = v50;

    v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, v118);
    a3 = v110;
    uint64_t v32 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v46 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v52 = v113;
    v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, a3, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v46 + 22) = 2080;
    v117[0] = v115;
    v117[1] = a5;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v53 = String.init<A>(describing:)();
    v117[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v42, (os_log_type_t)v93, "Handling AutoSend request for speechPackage: %s, requestId: %s and rcId: %s", (uint8_t *)v46, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    unint64_t v55 = v107;
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();

    unint64_t v55 = v107;
    uint64_t v52 = v113;
  }
  type metadata accessor for AutoSendHandler();
  static AutoSendHandler.validateRequestId(requestId:)(v52, a3, (uint64_t)v32);
  static AutoSendHandler.makeAutoSendIdAndLogRequestLink(requestId:)(v32, v114);
  unint64_t v56 = a5;
  uint64_t v57 = v112;
  if (!a5)
  {
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, v59))
    {
      uint64_t v60 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v60 = 0;
      _os_log_impl(&dword_1C9CFE000, v58, v59, "rcId missing in Siri Signals", v60, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    unint64_t v56 = 0xE200000000000000;
    uint64_t v115 = 12589;
  }
  OUTLINED_FUNCTION_15_7((uint64_t)v18);
  swift_bridgeObjectRetain();
  uint64_t v61 = v115;
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();
  id v100 = v18;
  outlined destroy of UUID?((uint64_t)v18);
  uint64_t v62 = (int *)v104;
  uint64_t v63 = *(void (**)(void))(v116 + 16);
  ((void (*)(uint64_t, char *, unint64_t))v63)(v57 + *(int *)(v104 + 32), v32, v55);
  OUTLINED_FUNCTION_2_18();
  v63();
  uint64_t v64 = v103;
  *(void *)(v57 + v62[5]) = v103;
  uint64_t v65 = (uint64_t *)(v57 + v62[6]);
  uint64_t *v65 = v61;
  v65[1] = v56;
  *(unsigned char *)(v57 + v62[7]) = v105 & 1;
  id v66 = v64;
  unint64_t v107 = v56;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v67 = AutoSendCoreHandler.handle(_:)(v57);
  uint64_t v106 = 0;
  uint64_t v68 = v67;
  swift_release();
  OUTLINED_FUNCTION_2_18();
  v63();
  unint64_t v69 = v110;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  uint64_t v70 = Logger.logObject.getter();
  os_log_type_t v71 = static os_log_type_t.default.getter();
  int v72 = v71;
  if (os_log_type_enabled(v70, v71))
  {
    uint64_t v73 = OUTLINED_FUNCTION_7_1();
    uint64_t v109 = swift_slowAlloc();
    v117[0] = v109;
    *(_DWORD *)uint64_t v73 = 136315650;
    LODWORD(v105) = v72;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v76 = OUTLINED_FUNCTION_3_15();
    v77(v76);
    *(_WORD *)(v73 + 12) = 2080;
    swift_bridgeObjectRetain();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v69, v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v73 + 22) = 2080;
    LOBYTE(v118[0]) = v68[57];
    uint64_t v78 = String.init<A>(describing:)();
    v118[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v117);
    uint64_t v57 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v70, (os_log_type_t)v105, "%s, requestid: %s: Sending successful autoSend response : %s", (uint8_t *)v73, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    uint64_t v80 = OUTLINED_FUNCTION_3_15();
    v81(v80);

    swift_release_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v82 = v99;
  uint64_t v83 = v102;
  uint64_t v84 = (uint64_t)v100;
  OUTLINED_FUNCTION_15_7((uint64_t)v100);
  swift_retain();
  os_log_type_t v85 = v111;
  uint64_t v86 = v114;
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v84);
  swift_release();
  outlined destroy of AutoSendInput(v57);
  uint64_t v87 = (void (*)(char *, unint64_t))v116;
  ((void (*)(uint64_t, unint64_t))v116)(v86, v55);
  v87(v85, v55);
  uint64_t v88 = v68[57];
  swift_release();
  uint64_t v89 = v101;
  BOOL v90 = v106 != 0;
  *(void *)uint64_t v82 = v88;
  *(void *)(v82 + 8) = 0;
  *(unsigned char *)(v82 + 16) = 0;
  *(unsigned char *)(v82 + 17) = v90;
  static os_signpost_type_t.end.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v89, v108);
}

uint64_t static AutoSendHandler.validateRequestId(requestId:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
  swift_bridgeObjectRetain_n();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = a3;
    uint64_t v13 = (_DWORD *)v12;
    uint64_t v24 = OUTLINED_FUNCTION_7_1();
    *uint64_t v13 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v14 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v24);
    OUTLINED_FUNCTION_7_15(v14);
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_24_7(&dword_1C9CFE000, v15, v16, "Trying to validate requestId: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    a3 = v23;
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  UUID.init(uuidString:)();
  uint64_t v17 = type metadata accessor for UUID();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v17) != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v17 - 8) + 32))(a3, v8, v17);
  }
  outlined destroy of UUID?((uint64_t)v8);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C9CFE000, v18, v19, "Invalid requestId. Generating an unlinked autoSendId to fulfill the runtime request. Skipping request link event logging and using invalid requestId elsewhere. ", v20, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  return UUID.init()();
}

void static AutoSendHandler.makeAutoSendIdAndLogRequestLink(requestId:)(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_8_4();
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.autoSend);
  (*(void (**)(uint64_t, void *, uint64_t))(v7 + 16))(v2, a1, v5);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v25 = a2;
    uint64_t v12 = (_DWORD *)swift_slowAlloc();
    uint64_t v26 = OUTLINED_FUNCTION_7_1();
    *uint64_t v12 = 136315138;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v26);
    OUTLINED_FUNCTION_7_15(v15);
    swift_bridgeObjectRelease();
    uint64_t v16 = OUTLINED_FUNCTION_17_7();
    v17(v16);
    OUTLINED_FUNCTION_24_7(&dword_1C9CFE000, v18, v19, "Trying to log request link event for requestId: %s");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    a2 = v25;
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    uint64_t v20 = OUTLINED_FUNCTION_17_7();
    v21(v20);
  }

  uint64_t v22 = self;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v24 = objc_msgSend(v22, sel_derivedIdentifierForComponent_fromSourceIdentifier_, 4, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  static CamRequestLinkLogger.log(requestId:camId:)(a1, a2);
}

uint64_t AutoSendHandler.__deallocating_deinit()
{
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SiriCam15AutoSendHandler_siriLocale;
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v2 + 8))(v1);
  uint64_t v3 = *(unsigned int *)(*(void *)v0 + 48);
  uint64_t v4 = *(unsigned __int16 *)(*(void *)v0 + 52);
  return MEMORY[0x1F4186488](v0, v3, v4);
}

uint64_t ObjC metadata update function for AutoSendHandler()
{
  return type metadata accessor for AutoSendHandler();
}

uint64_t type metadata accessor for AutoSendHandler()
{
  uint64_t result = type metadata singleton initialization cache for AutoSendHandler;
  if (!type metadata singleton initialization cache for AutoSendHandler) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AutoSendHandler()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for AutoConfirming.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:) in conformance AutoSendHandler@<X0>(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  return AutoSendHandler.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for AutoConfirming.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:) in conformance AutoSendHandler@<X0>(void *a1@<X0>, uint64_t a2@<X2>, unint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W7>, uint64_t a7@<X8>)
{
  return AutoSendHandler.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t protocol witness for AutoConfirming.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:) in conformance AutoSendHandler()
{
  return AutoSendHandler.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)();
}

void protocol witness for AutoConfirming.update() in conformance AutoSendHandler()
{
}

uint64_t outlined destroy of AutoSendInput(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AutoSendInput();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_1(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_15()
{
  uint64_t result = v0;
  *(void *)(v1 - 128) = *(void *)(*(void *)(v1 - 128) + 8);
  return result;
}

uint64_t OUTLINED_FUNCTION_7_15(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_14_9()
{
  return *(void *)(v0 - 288);
}

uint64_t OUTLINED_FUNCTION_15_7(uint64_t a1)
{
  return __swift_storeEnumTagSinglePayload(a1, 1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_17_7()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_19_6()
{
  return v0;
}

void OUTLINED_FUNCTION_23_7()
{
  *(void *)(v1 - 280) = v0;
}

void OUTLINED_FUNCTION_24_7(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t *initializeBufferWithCopyOfBuffer for AppLaunchTieBreaker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    uint64_t v23 = (uint64_t *)(v22 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
    return v23;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v5 = *(int *)(a3 + 24);
  os_log_type_t v6 = (uint64_t *)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(uint64_t *)((char *)a2 + v5 + 8);
  *os_log_type_t v6 = *(uint64_t *)((char *)a2 + v5);
  v6[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  os_log_type_t v11 = (void **)((char *)v6 + v10);
  uint64_t v12 = (void **)&v7[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v78 = v13;
  unint64_t v79 = a1;
  if (EnumCaseMultiPayload == 1)
  {
    id v24 = *v12;
    *os_log_type_t v11 = *v12;
    id v25 = v24;
LABEL_11:
    swift_storeEnumTagMultiPayload();
    goto LABEL_12;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
    uint64_t v16 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (char *)v11 + v17;
    uint64_t v19 = (char *)v12 + v17;
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v26 = v16[6];
    uint64_t v27 = (void **)((char *)v11 + v26);
    uint64_t v28 = (void **)((char *)v12 + v26);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    uint64_t v30 = v16[7];
    uint64_t v31 = (char *)v11 + v30;
    uint64_t v32 = (char *)v12 + v30;
    v31[4] = v32[4];
    *(_DWORD *)uint64_t v31 = *(_DWORD *)v32;
    swift_bridgeObjectRetain();
    goto LABEL_11;
  }
  memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
LABEL_12:
  *(void *)((char *)v6 + v9[6]) = *(void *)&v7[v9[6]];
  *(void *)((char *)v6 + v9[7]) = *(void *)&v7[v9[7]];
  *(void *)((char *)v6 + v9[8]) = *(void *)&v7[v9[8]];
  uint64_t v33 = v9[9];
  uint64_t v34 = (char *)v6 + v33;
  uint64_t v35 = &v7[v33];
  uint64_t v36 = type metadata accessor for UUID();
  id v37 = *(void (**)(void, void, void))(*(void *)(v36 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v75 = (void (*)(char *, char *, uint64_t))v37;
  v37(v34, v35, v36);
  uint64_t v38 = v9[10];
  uint64_t v39 = (void *)((char *)v6 + v38);
  id v40 = &v7[v38];
  uint64_t v41 = *((void *)v40 + 1);
  *uint64_t v39 = *(void *)v40;
  v39[1] = v41;
  *(void *)((char *)v6 + v9[11]) = *(void *)&v7[v9[11]];
  uint64_t v42 = *(int *)(a3 + 28);
  uint64_t v23 = v79;
  os_log_type_t v43 = (uint64_t *)((char *)v79 + v42);
  int v44 = (char *)a2 + v42;
  uint64_t v45 = *(uint64_t *)((char *)a2 + v42 + 8);
  void *v43 = *(uint64_t *)((char *)a2 + v42);
  v43[1] = v45;
  uint64_t v46 = v9[5];
  id v47 = (void **)((char *)v43 + v46);
  id v48 = (void **)&v44[v46];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v49 = swift_getEnumCaseMultiPayload();
  if (v49 == 1)
  {
    uint64_t v57 = *v48;
    uint8_t *v47 = *v48;
    id v58 = v57;
    swift_storeEnumTagMultiPayload();
  }
  else if (v49)
  {
    memcpy(v47, v48, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    uint64_t v77 = v36;
    uint64_t v50 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v50 - 8) + 16))(v47, v48, v50);
    unint64_t v51 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v52 = v51[5];
    uint64_t v53 = (char *)v47 + v52;
    unint64_t v54 = (char *)v48 + v52;
    uint64_t v55 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v54, 1, v55))
    {
      uint64_t v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v53, v54, *(void *)(*(void *)(v56 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v55 - 8) + 16))(v53, v54, v55);
      __swift_storeEnumTagSinglePayload((uint64_t)v53, 0, 1, v55);
    }
    uint64_t v36 = v77;
    uint64_t v59 = v51[6];
    uint64_t v60 = (void **)((char *)v47 + v59);
    uint64_t v61 = (void **)((char *)v48 + v59);
    uint64_t v62 = v61[1];
    *uint64_t v60 = *v61;
    v60[1] = v62;
    uint64_t v63 = v51[7];
    uint64_t v64 = (char *)v47 + v63;
    uint64_t v65 = (char *)v48 + v63;
    v64[4] = v65[4];
    *(_DWORD *)uint64_t v64 = *(_DWORD *)v65;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v23 = v79;
  }
  *(void *)((char *)v43 + v9[6]) = *(void *)&v44[v9[6]];
  *(void *)((char *)v43 + v9[7]) = *(void *)&v44[v9[7]];
  *(void *)((char *)v43 + v9[8]) = *(void *)&v44[v9[8]];
  uint64_t v66 = v9[9];
  uint64_t v67 = (char *)v43 + v66;
  uint64_t v68 = &v44[v66];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75(v67, v68, v36);
  uint64_t v69 = v9[10];
  uint64_t v70 = (void *)((char *)v43 + v69);
  os_log_type_t v71 = &v44[v69];
  uint64_t v72 = *((void *)v71 + 1);
  *uint64_t v70 = *(void *)v71;
  v70[1] = v72;
  *(void *)((char *)v43 + v9[11]) = *(void *)&v44[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v23;
}

uint64_t destroy for AppLaunchTieBreaker(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for RankedAction();
  os_log_type_t v6 = (id *)(v4 + *(int *)(v5 + 20));
  type metadata accessor for CamParse(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    uint64_t v9 = (uint64_t)v6 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v9, 1, v10)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v4 + *(int *)(v5 + 36);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v14 = a1 + *(int *)(a2 + 28);
  swift_bridgeObjectRelease();
  uint64_t v15 = (id *)(v14 + *(int *)(v5 + 20));
  int v16 = swift_getEnumCaseMultiPayload();
  if (v16 == 1)
  {
  }
  else if (!v16)
  {
    uint64_t v17 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(id *, uint64_t))(*(void *)(v17 - 8) + 8))(v15, v17);
    uint64_t v18 = (uint64_t)v15 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v18, 1, v19)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13(v14 + *(int *)(v5 + 36), v12);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_WORD *initializeWithCopy for AppLaunchTieBreaker(_WORD *a1, _WORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 24);
  os_log_type_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(void *)((char *)a2 + v5 + 8);
  *os_log_type_t v6 = *(void *)((char *)a2 + v5);
  v6[1] = v8;
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  uint64_t v11 = (void **)((char *)v6 + v10);
  uint64_t v12 = (void **)&v7[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  swift_bridgeObjectRetain();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v77 = a1;
  uint64_t v78 = v13;
  uint64_t v76 = a3;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v22 = *v12;
    *uint64_t v11 = *v12;
    id v23 = v22;
  }
  else
  {
    if (EnumCaseMultiPayload)
    {
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
      goto LABEL_10;
    }
    uint64_t v15 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v15 - 8) + 16))(v11, v12, v15);
    int v16 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v17 = v16[5];
    uint64_t v18 = (char *)v11 + v17;
    uint64_t v19 = (char *)v12 + v17;
    uint64_t v20 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v19, 1, v20))
    {
      uint64_t v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v18, v19, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
      __swift_storeEnumTagSinglePayload((uint64_t)v18, 0, 1, v20);
    }
    uint64_t v24 = v16[6];
    id v25 = (void **)((char *)v11 + v24);
    uint64_t v26 = (void **)((char *)v12 + v24);
    uint64_t v27 = v26[1];
    *id v25 = *v26;
    v25[1] = v27;
    uint64_t v28 = v16[7];
    uint64_t v29 = (char *)v11 + v28;
    uint64_t v30 = (char *)v12 + v28;
    v29[4] = v30[4];
    *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_10:
  *(void *)((char *)v6 + v9[6]) = *(void *)&v7[v9[6]];
  *(void *)((char *)v6 + v9[7]) = *(void *)&v7[v9[7]];
  *(void *)((char *)v6 + v9[8]) = *(void *)&v7[v9[8]];
  uint64_t v31 = v9[9];
  uint64_t v32 = (char *)v6 + v31;
  uint64_t v33 = &v7[v31];
  uint64_t v34 = type metadata accessor for UUID();
  uint64_t v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v75 = v34;
  uint64_t v73 = v35;
  v35(v32, v33, v34);
  uint64_t v36 = v9[10];
  id v37 = (void *)((char *)v6 + v36);
  uint64_t v38 = &v7[v36];
  uint64_t v39 = *((void *)v38 + 1);
  void *v37 = *(void *)v38;
  v37[1] = v39;
  *(void *)((char *)v6 + v9[11]) = *(void *)&v7[v9[11]];
  id v40 = v77;
  uint64_t v41 = *(int *)(v76 + 28);
  uint64_t v42 = (void *)((char *)v77 + v41);
  os_log_type_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(void *)((char *)a2 + v41 + 8);
  void *v42 = *(void *)((char *)a2 + v41);
  v42[1] = v44;
  uint64_t v45 = v9[5];
  uint64_t v46 = (void **)((char *)v42 + v45);
  id v47 = (void **)&v43[v45];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v48 = swift_getEnumCaseMultiPayload();
  if (v48 == 1)
  {
    uint64_t v56 = *v47;
    *uint64_t v46 = *v47;
    id v57 = v56;
    swift_storeEnumTagMultiPayload();
  }
  else if (v48)
  {
    memcpy(v46, v47, *(void *)(*(void *)(v78 - 8) + 64));
  }
  else
  {
    uint64_t v49 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v49 - 8) + 16))(v46, v47, v49);
    uint64_t v50 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v51 = v50[5];
    uint64_t v52 = (char *)v46 + v51;
    uint64_t v53 = (char *)v47 + v51;
    uint64_t v54 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v53, 1, v54))
    {
      uint64_t v55 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v52, v53, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v54 - 8) + 16))(v52, v53, v54);
      __swift_storeEnumTagSinglePayload((uint64_t)v52, 0, 1, v54);
    }
    uint64_t v58 = v50[6];
    uint64_t v59 = (void **)((char *)v46 + v58);
    uint64_t v60 = (void **)((char *)v47 + v58);
    uint64_t v61 = v60[1];
    *uint64_t v59 = *v60;
    v59[1] = v61;
    uint64_t v62 = v50[7];
    uint64_t v63 = (char *)v46 + v62;
    uint64_t v64 = (char *)v47 + v62;
    v63[4] = v64[4];
    *(_DWORD *)uint64_t v63 = *(_DWORD *)v64;
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    id v40 = v77;
  }
  *(void *)((char *)v42 + v9[6]) = *(void *)&v43[v9[6]];
  *(void *)((char *)v42 + v9[7]) = *(void *)&v43[v9[7]];
  *(void *)((char *)v42 + v9[8]) = *(void *)&v43[v9[8]];
  uint64_t v65 = v9[9];
  uint64_t v66 = (char *)v42 + v65;
  uint64_t v67 = &v43[v65];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v73(v66, v67, v75);
  uint64_t v68 = v9[10];
  uint64_t v69 = (void *)((char *)v42 + v68);
  uint64_t v70 = &v43[v68];
  uint64_t v71 = *((void *)v70 + 1);
  *uint64_t v69 = *(void *)v70;
  v69[1] = v71;
  *(void *)((char *)v42 + v9[11]) = *(void *)&v43[v9[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return v40;
}

unsigned char *assignWithCopy for AppLaunchTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = *(void *)&a2[v6 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for RankedAction();
  uint64_t v10 = (int *)v9;
  if (a1 != a2)
  {
    uint64_t v11 = *(int *)(v9 + 20);
    uint64_t v12 = (void **)((char *)v7 + v11);
    uint64_t v13 = (void **)&v8[v11];
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v7 + v11, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v14 = type metadata accessor for CamParse(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = *v13;
      *uint64_t v12 = *v13;
      id v22 = v21;
    }
    else
    {
      if (EnumCaseMultiPayload)
      {
        memcpy(v12, v13, *(void *)(*(void *)(v14 - 8) + 64));
        goto LABEL_11;
      }
      uint64_t v66 = v3;
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v16 - 8) + 16))(v12, v13, v16);
      uint64_t v65 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v17 = v65[5];
      uint64_t v68 = (char *)v12 + v17;
      uint64_t v18 = (char *)v13 + v17;
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v68, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v68, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v68, 0, 1, v19);
      }
      uint64_t v3 = v66;
      uint64_t v23 = v65[6];
      uint64_t v24 = (void **)((char *)v12 + v23);
      id v25 = (void **)((char *)v13 + v23);
      *uint64_t v24 = *v25;
      v24[1] = v25[1];
      uint64_t v26 = v65[7];
      uint64_t v27 = (char *)v12 + v26;
      uint64_t v28 = (char *)v13 + v26;
      int v29 = *(_DWORD *)v28;
      uint64_t v27[4] = v28[4];
      *(_DWORD *)uint64_t v27 = v29;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
LABEL_11:
  *(void *)((char *)v7 + v10[6]) = *(void *)&v8[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v10[7]) = *(void *)&v8[v10[7]];
  *(void *)((char *)v7 + v10[8]) = *(void *)&v8[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v30 = v10[9];
  uint64_t v31 = (char *)v7 + v30;
  uint64_t v32 = &v8[v30];
  uint64_t v33 = type metadata accessor for UUID();
  uint64_t v34 = (void (**)(char *, unsigned char *, uint64_t))(*(void *)(v33 - 8) + 24);
  uint64_t v69 = *v34;
  (*v34)(v31, v32, v33);
  uint64_t v35 = v10[10];
  uint64_t v36 = (void *)((char *)v7 + v35);
  id v37 = &v8[v35];
  *uint64_t v36 = *v37;
  v36[1] = v37[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v10[11]) = *(void *)&v8[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v38 = *(int *)(v3 + 28);
  uint64_t v39 = &a1[v38];
  id v40 = &a2[v38];
  *(void *)uint64_t v39 = *(void *)&a2[v38];
  *((void *)v39 + 1) = *(void *)&a2[v38 + 8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v41 = v10[5];
    uint64_t v42 = (void **)&v39[v41];
    os_log_type_t v43 = (void **)&v40[v41];
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)&v39[v41], (void (*)(void))type metadata accessor for CamParse);
    uint64_t v44 = type metadata accessor for CamParse(0);
    int v45 = swift_getEnumCaseMultiPayload();
    if (v45 == 1)
    {
      uint64_t v51 = *v43;
      void *v42 = *v43;
      id v52 = v51;
LABEL_20:
      swift_storeEnumTagMultiPayload();
      goto LABEL_21;
    }
    if (!v45)
    {
      uint64_t v46 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v46 - 8) + 16))(v42, v43, v46);
      uint64_t v64 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v47 = v64[5];
      uint64_t v67 = (char *)v42 + v47;
      int v48 = (char *)v43 + v47;
      uint64_t v49 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v48, 1, v49))
      {
        uint64_t v50 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v67, v48, *(void *)(*(void *)(v50 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v49 - 8) + 16))(v67, v48, v49);
        __swift_storeEnumTagSinglePayload((uint64_t)v67, 0, 1, v49);
      }
      uint64_t v53 = v64[6];
      uint64_t v54 = (void **)((char *)v42 + v53);
      uint64_t v55 = (void **)((char *)v43 + v53);
      void *v54 = *v55;
      v54[1] = v55[1];
      uint64_t v56 = v64[7];
      id v57 = (char *)v42 + v56;
      uint64_t v58 = (char *)v43 + v56;
      int v59 = *(_DWORD *)v58;
      v57[4] = v58[4];
      *(_DWORD *)id v57 = v59;
      swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    memcpy(v42, v43, *(void *)(*(void *)(v44 - 8) + 64));
  }
LABEL_21:
  *(void *)&v39[v10[6]] = *(void *)&v40[v10[6]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v39[v10[7]] = *(void *)&v40[v10[7]];
  *(void *)&v39[v10[8]] = *(void *)&v40[v10[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v69(&v39[v10[9]], &v40[v10[9]], v33);
  uint64_t v60 = v10[10];
  uint64_t v61 = &v39[v60];
  uint64_t v62 = &v40[v60];
  *(void *)uint64_t v61 = *v62;
  *((void *)v61 + 1) = v62[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&v39[v10[11]] = *(void *)&v40[v10[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_WORD *initializeWithTake for AppLaunchTieBreaker(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v3 = a3;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for RankedAction();
  uint64_t v10 = v9[5];
  uint64_t v11 = &v7[v10];
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for CamParse(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v46 = v3;
    int v48 = v5;
    uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v11, v12, v14);
    uint64_t v15 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v16 = v15[5];
    __dst = &v11[v16];
    uint64_t v17 = &v12[v16];
    uint64_t v18 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v18))
    {
      uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(__dst, v17, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(__dst, v17, v18);
      __swift_storeEnumTagSinglePayload((uint64_t)__dst, 0, 1, v18);
    }
    *(_OWORD *)&v11[v15[6]] = *(_OWORD *)&v12[v15[6]];
    uint64_t v20 = v15[7];
    uint64_t v21 = &v11[v20];
    id v22 = &v12[v20];
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    swift_storeEnumTagMultiPayload();
    uint64_t v3 = v46;
    uint64_t v5 = v48;
  }
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  uint64_t v23 = v9[9];
  uint64_t v24 = &v7[v23];
  id v25 = &v8[v23];
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v27 = v24;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32);
  v28(v27, v25, v26);
  *(_OWORD *)&v7[v9[10]] = *(_OWORD *)&v8[v9[10]];
  *(void *)&v7[v9[11]] = *(void *)&v8[v9[11]];
  uint64_t v29 = v3[7];
  uint64_t v30 = (char *)v5 + v29;
  uint64_t v31 = (char *)a2 + v29;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)((char *)a2 + v29);
  uint64_t v32 = v9[5];
  uint64_t v33 = &v30[v32];
  uint64_t v34 = &v31[v32];
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(v33, v34, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    int v45 = v28;
    uint64_t v49 = v5;
    uint64_t v35 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
    uint64_t v36 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v37 = v36[5];
    uint64_t v47 = &v33[v37];
    uint64_t v38 = &v34[v37];
    uint64_t v39 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v38, 1, v39))
    {
      uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v47, v38, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 32))(v47, v38, v39);
      __swift_storeEnumTagSinglePayload((uint64_t)v47, 0, 1, v39);
    }
    *(_OWORD *)&v33[v36[6]] = *(_OWORD *)&v34[v36[6]];
    uint64_t v41 = v36[7];
    uint64_t v42 = &v33[v41];
    os_log_type_t v43 = &v34[v41];
    v42[4] = v43[4];
    *(_DWORD *)uint64_t v42 = *(_DWORD *)v43;
    swift_storeEnumTagMultiPayload();
    uint64_t v5 = v49;
    uint64_t v28 = v45;
  }
  *(void *)&v30[v9[6]] = *(void *)&v31[v9[6]];
  *(void *)&v30[v9[7]] = *(void *)&v31[v9[7]];
  *(void *)&v30[v9[8]] = *(void *)&v31[v9[8]];
  v28(&v30[v9[9]], &v31[v9[9]], v26);
  *(_OWORD *)&v30[v9[10]] = *(_OWORD *)&v31[v9[10]];
  *(void *)&v30[v9[11]] = *(void *)&v31[v9[11]];
  return v5;
}

unsigned char *assignWithTake for AppLaunchTieBreaker(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6 + 8];
  *uint64_t v7 = *(void *)&a2[v6];
  v7[1] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = type metadata accessor for RankedAction();
  uint64_t v11 = (int *)v10;
  if (a1 != a2)
  {
    uint64_t v12 = *(int *)(v10 + 20);
    uint64_t v13 = (char *)v7 + v12;
    uint64_t v14 = &v8[v12];
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v7 + v12, (void (*)(void))type metadata accessor for CamParse);
    uint64_t v15 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      uint64_t v58 = v3;
      uint64_t v16 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 32))(v13, v14, v16);
      id v57 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v17 = v57[5];
      uint64_t v60 = &v13[v17];
      uint64_t v18 = &v14[v17];
      uint64_t v19 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v18, 1, v19))
      {
        uint64_t v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v60, v18, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v60, v18, v19);
        __swift_storeEnumTagSinglePayload((uint64_t)v60, 0, 1, v19);
      }
      uint64_t v3 = v58;
      *(_OWORD *)&v13[v57[6]] = *(_OWORD *)&v14[v57[6]];
      uint64_t v21 = v57[7];
      id v22 = &v13[v21];
      uint64_t v23 = &v14[v21];
      v22[4] = v23[4];
      *(_DWORD *)id v22 = *(_DWORD *)v23;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)((char *)v7 + v11[6]) = *(void *)&v8[v11[6]];
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v11[7]) = *(void *)&v8[v11[7]];
  *(void *)((char *)v7 + v11[8]) = *(void *)&v8[v11[8]];
  swift_bridgeObjectRelease();
  uint64_t v24 = v11[9];
  id v25 = (char *)v7 + v24;
  uint64_t v26 = &v8[v24];
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = (void (**)(char *, unsigned char *, uint64_t))(*(void *)(v27 - 8) + 40);
  uint64_t v61 = *v28;
  (*v28)(v25, v26, v27);
  uint64_t v29 = v11[10];
  uint64_t v30 = (void *)((char *)v7 + v29);
  uint64_t v31 = (uint64_t *)&v8[v29];
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  *(void *)((char *)v7 + v11[11]) = *(void *)&v8[v11[11]];
  swift_bridgeObjectRelease();
  uint64_t v34 = *(int *)(v3 + 28);
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  uint64_t v37 = *(void *)&a2[v34 + 8];
  *(void *)uint64_t v35 = *(void *)&a2[v34];
  *((void *)v35 + 1) = v37;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    uint64_t v38 = v11[5];
    uint64_t v39 = &v35[v38];
    uint64_t v40 = &v36[v38];
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)&v35[v38], (void (*)(void))type metadata accessor for CamParse);
    uint64_t v41 = type metadata accessor for CamParse(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      uint64_t v42 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v42 - 8) + 32))(v39, v40, v42);
      uint64_t v56 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v43 = v56[5];
      int v59 = &v39[v43];
      uint64_t v44 = &v40[v43];
      uint64_t v45 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v44, 1, v45))
      {
        uint64_t v46 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v59, v44, *(void *)(*(void *)(v46 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32))(v59, v44, v45);
        __swift_storeEnumTagSinglePayload((uint64_t)v59, 0, 1, v45);
      }
      *(_OWORD *)&v39[v56[6]] = *(_OWORD *)&v40[v56[6]];
      uint64_t v47 = v56[7];
      int v48 = &v39[v47];
      uint64_t v49 = &v40[v47];
      v48[4] = v49[4];
      *(_DWORD *)int v48 = *(_DWORD *)v49;
      swift_storeEnumTagMultiPayload();
    }
  }
  *(void *)&v35[v11[6]] = *(void *)&v36[v11[6]];
  swift_bridgeObjectRelease();
  *(void *)&v35[v11[7]] = *(void *)&v36[v11[7]];
  *(void *)&v35[v11[8]] = *(void *)&v36[v11[8]];
  swift_bridgeObjectRelease();
  v61(&v35[v11[9]], &v36[v11[9]], v27);
  uint64_t v50 = v11[10];
  uint64_t v51 = &v35[v50];
  id v52 = (uint64_t *)&v36[v50];
  uint64_t v54 = *v52;
  uint64_t v53 = v52[1];
  *(void *)uint64_t v51 = v54;
  *((void *)v51 + 1) = v53;
  swift_bridgeObjectRelease();
  *(void *)&v35[v11[11]] = *(void *)&v36[v11[11]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppLaunchTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D5AC74);
}

uint64_t sub_1C9D5AC74(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v10 = type metadata accessor for RankedAction();
    uint64_t v11 = (uint64_t)&a1[*(int *)(a3 + 24)];
    return __swift_getEnumTagSinglePayload(v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for AppLaunchTieBreaker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D5AD10);
}

unsigned char *sub_1C9D5AD10(unsigned char *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }
  else
  {
    uint64_t v7 = type metadata accessor for RankedAction();
    uint64_t v8 = (uint64_t)&v5[*(int *)(a4 + 24)];
    return (unsigned char *)__swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for AppLaunchTieBreaker()
{
  uint64_t result = type metadata singleton initialization cache for AppLaunchTieBreaker;
  if (!type metadata singleton initialization cache for AppLaunchTieBreaker) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for AppLaunchTieBreaker()
{
  uint64_t result = type metadata accessor for RankedAction();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t specialized ActionProtocol.getAssociatedAppMentioned()()
{
  uint64_t v1 = v0;
  unint64_t v2 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v2);
  unsigned int v4 = (char *)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v8 = type metadata accessor for RankedAction();
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for common != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.common);
  _s7SiriCam12RankedActionVWOcTm_0(v1, v10, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    id v52 = (char *)v1;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v53 = (char *)v2;
    uint64_t v16 = (uint8_t *)v15;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v55 = (uint64_t)v4;
    uint64_t v18 = v17;
    v59[0] = v17;
    unint64_t v51 = v8;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v19 = v7;
    uint64_t v54 = v12;
    uint64_t v20 = *(void *)v10;
    unint64_t v21 = *(void *)(v10 + 8);
    swift_bridgeObjectRetain();
    uint64_t v22 = v20;
    uint64_t v7 = v19;
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v21, v59);
    unint64_t v8 = v51;
    uint64_t v1 = (uint64_t)v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v12 = v54;
    swift_bridgeObjectRelease();
    _s7SiriCam0B5ParseOWOhTm_5(v10, (void (*)(void))type metadata accessor for RankedAction);
    _os_log_impl(&dword_1C9CFE000, v13, v14, "Trying to extract app associated with %s", v16, 0xCu);
    swift_arrayDestroy();
    uint64_t v23 = v18;
    unsigned int v4 = (char *)v55;
    MEMORY[0x1CB78E290](v23, -1, -1);
    uint64_t v24 = v16;
    unint64_t v2 = (unint64_t)v53;
    MEMORY[0x1CB78E290](v24, -1, -1);
  }
  else
  {
    _s7SiriCam0B5ParseOWOhTm_5(v10, (void (*)(void))type metadata accessor for RankedAction);
  }

  _s7SiriCam12RankedActionVWOcTm_0(v1 + *(int *)(v8 + 20), (uint64_t)v4, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    id v25 = type metadata accessor for CamParse;
    uint64_t v26 = (uint64_t)v4;
LABEL_7:
    _s7SiriCam0B5ParseOWOhTm_5(v26, (void (*)(void))v25);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl(&dword_1C9CFE000, v27, v28, "No USO values found", v29, 2u);
      MEMORY[0x1CB78E290](v29, -1, -1);
    }

    return 0;
  }
  outlined init with take of CamUSOParse((uint64_t)v4, (uint64_t)v7, (void (*)(void))type metadata accessor for CamUSOParse);
  if (!CamUSOParse.getFirstUserDialogActAsTask()())
  {
    id v25 = type metadata accessor for CamUSOParse;
    uint64_t v26 = (uint64_t)v7;
    goto LABEL_7;
  }
  uint64_t v53 = v7;
  uint64_t v54 = v12;
  unsigned int v4 = (char *)UsoTask.arguments.getter();
  swift_release();
  specialized _NativeDictionary.makeIterator()(v59, v4);
  uint64_t v7 = (char *)v59[0];
  uint64_t v55 = v59[1];
  uint64_t v10 = v59[3];
  unint64_t v8 = v59[4];
  int64_t v31 = (unint64_t)(v59[2] + 64) >> 6;
  id v52 = v4;
  swift_bridgeObjectRetain();
  uint64_t v32 = (void *)MEMORY[0x1E4FBC860];
  while (v8)
  {
    unint64_t v33 = __clz(__rbit64(v8));
    v8 &= v8 - 1;
    unint64_t v34 = v33 | (v10 << 6);
LABEL_29:
    uint64_t v58 = *(void *)(*((void *)v7 + 7) + 8 * v34);
    closure #1 in ActionProtocol.getAssociatedAppMentioned()((unint64_t *)&v58, &v56);
    uint64_t v38 = v57;
    if (v57)
    {
      uint64_t v1 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v32 = v41;
      }
      unint64_t v2 = v32[2];
      unsigned int v4 = (char *)(v2 + 1);
      if (v2 >= v32[3] >> 1)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v32 = v42;
      }
      void v32[2] = v4;
      uint64_t v39 = &v32[2 * v2];
      v39[4] = v1;
      v39[5] = v38;
    }
  }
  int64_t v35 = v10 + 1;
  if (__OFADD__(v10, 1))
  {
    __break(1u);
    goto LABEL_51;
  }
  if (v35 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v35);
  if (v36)
  {
LABEL_28:
    unint64_t v8 = (v36 - 1) & v36;
    unint64_t v34 = __clz(__rbit64(v36)) + (v35 << 6);
    uint64_t v10 = v35;
    goto LABEL_29;
  }
  uint64_t v37 = v10 + 2;
  if (v10 + 2 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v37);
  if (v36) {
    goto LABEL_27;
  }
  uint64_t v37 = v10 + 3;
  if (v10 + 3 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v37);
  if (v36) {
    goto LABEL_27;
  }
  uint64_t v37 = v10 + 4;
  if (v10 + 4 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v37);
  if (v36) {
    goto LABEL_27;
  }
  uint64_t v37 = v10 + 5;
  if (v10 + 5 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v37);
  if (v36) {
    goto LABEL_27;
  }
  uint64_t v37 = v10 + 6;
  if (v10 + 6 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v37);
  if (v36)
  {
LABEL_27:
    int64_t v35 = v37;
    goto LABEL_28;
  }
  int64_t v35 = v10 + 7;
  if (v10 + 7 >= v31) {
    goto LABEL_41;
  }
  unint64_t v36 = *(void *)(v55 + 8 * v35);
  if (v36) {
    goto LABEL_28;
  }
  int64_t v40 = v10 + 8;
  while (v40 < v31)
  {
    unint64_t v36 = *(void *)(v55 + 8 * v40++);
    if (v36)
    {
      int64_t v35 = v40 - 1;
      goto LABEL_28;
    }
  }
LABEL_41:
  swift_release();
  if (v32[2])
  {
    uint64_t v30 = v32[4];
    uint64_t v43 = v32[5];
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v43 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain_n();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = (uint8_t *)swift_slowAlloc();
    uint64_t v47 = swift_slowAlloc();
    uint64_t v57 = v43;
    uint64_t v58 = v47;
    *(_DWORD *)uint64_t v46 = 136315138;
    uint64_t v56 = v30;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v56 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v44, v45, "Extracted %s", v46, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v47, -1, -1);
    MEMORY[0x1CB78E290](v46, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  swift_bridgeObjectRelease();
  _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v53, (void (*)(void))type metadata accessor for CamUSOParse);
  return v30;
}

uint64_t AppLaunchTieBreaker.init(tie:)@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  *a2 = 1025;
  uint64_t v4 = type metadata accessor for AppLaunchTieBreaker();
  outlined init with take of CamUSOParse(a1, (uint64_t)a2 + *(int *)(v4 + 24), (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v5 = type metadata accessor for TopTwo();
  return outlined init with take of CamUSOParse(a1 + *(int *)(v5 + 20), (uint64_t)a2 + *(int *)(v4 + 28), (void (*)(void))type metadata accessor for RankedAction);
}

Swift::Bool __swiftcall AppLaunchTieBreaker.supportedTie()()
{
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_3();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t v14 = type metadata accessor for AppLaunchTieBreaker();
  uint64_t v15 = v0 + *(int *)(v14 + 24);
  unsigned __int8 v16 = static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(v15);
  uint64_t v17 = v0 + *(int *)(v14 + 28);
  unsigned __int8 v18 = static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(v17);
  if (v16 & 1) != 0 || (v18)
  {
    BOOL v20 = (v16 & 1) == 0;
    if (v16) {
      uint64_t v21 = v17;
    }
    else {
      uint64_t v21 = v15;
    }
    if (v20) {
      uint64_t v22 = v17;
    }
    else {
      uint64_t v22 = v15;
    }
    _s7SiriCam12RankedActionVWOcTm_0(v22, (uint64_t)v13, (void (*)(void))type metadata accessor for RankedAction);
    _s7SiriCam12RankedActionVWOcTm_0(v21, (uint64_t)v11, (void (*)(void))type metadata accessor for RankedAction);
    _s7SiriCam12RankedActionVWOcTm_0((uint64_t)&v13[*(int *)(v7 + 20)], (uint64_t)v3, (void (*)(void))type metadata accessor for CamParse);
    if (swift_getEnumCaseMultiPayload())
    {
      uint64_t v23 = type metadata accessor for CamParse;
      uint64_t v24 = (uint64_t)v3;
    }
    else
    {
      outlined init with take of CamUSOParse((uint64_t)v3, (uint64_t)v6, (void (*)(void))type metadata accessor for CamUSOParse);
      uint64_t v29 = CamUSOParse.appShortcutInvocation.getter();
      if (v30)
      {
        uint64_t v31 = v29;
        uint64_t v32 = v30;
        swift_bridgeObjectRelease();
        if ((*v11 == 0xD00000000000001ELL && v11[1] == 0x80000001C9DA1C90
           || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          && (uint64_t v33 = specialized ActionProtocol.getAssociatedAppMentioned()(), v34))
        {
          if (v33 == v31 && v34 == v32) {
            char v19 = 1;
          }
          else {
            char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          char v19 = 0;
        }
        swift_bridgeObjectRelease();
        _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v6, (void (*)(void))type metadata accessor for CamUSOParse);
        goto LABEL_32;
      }
      uint64_t v23 = type metadata accessor for CamUSOParse;
      uint64_t v24 = (uint64_t)v6;
    }
    _s7SiriCam0B5ParseOWOhTm_5(v24, (void (*)(void))v23);
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.common);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl(&dword_1C9CFE000, v26, v27, "Could not extract App Shortcut bundle ID", v28, 2u);
      MEMORY[0x1CB78E290](v28, -1, -1);
    }

    char v19 = 0;
LABEL_32:
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v11, (void (*)(void))type metadata accessor for RankedAction);
    _s7SiriCam0B5ParseOWOhTm_5((uint64_t)v13, (void (*)(void))type metadata accessor for RankedAction);
    return v19 & 1;
  }
  char v19 = 0;
  return v19 & 1;
}

void *static AppLaunchTieBreaker.isEnabledAppShortcut(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for RankedAction() + 44));
  if (!*(void *)(v1 + 16)) {
    return 0;
  }
  unint64_t v2 = OUTLINED_FUNCTION_1_17();
  if ((v3 & 1) == 0) {
    return 0;
  }
  id v4 = objc_msgSend(*(id *)(*(void *)(v1 + 56) + 8 * v2), sel_int64Value);
  uint64_t result = (void *)specialized Dictionary.subscript.getter(0xD000000000000017, 0x80000001C9DA2450, v1);
  if (result)
  {
    uint64_t v6 = result;
    id v7 = objc_msgSend(result, sel_int64Value);

    if (v7) {
      BOOL v8 = v4 == 0;
    }
    else {
      BOOL v8 = 1;
    }
    return (void *)!v8;
  }
  return result;
}

uint64_t AppLaunchTieBreaker.actionBoost(features:loggingId:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = OUTLINED_FUNCTION_1_17(), (v5 & 1) != 0)
    && (id v6 = *(id *)(*(void *)(a1 + 56) + 8 * v4),
        id v7 = objc_msgSend(v6, sel_int64Value),
        v6,
        v7))
  {
    type metadata accessor for ScoreBoost();
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_1_3();
    uint64_t v8 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v9(v8);
    unint64_t v11 = 0xED00007475637472;
    unint64_t v12 = 0x6F68537070417349;
    uint64_t v13 = 0x3F947AE147AE147BLL;
  }
  else
  {
    type metadata accessor for ScoreBoost();
    type metadata accessor for UUID();
    OUTLINED_FUNCTION_1_3();
    uint64_t v14 = OUTLINED_FUNCTION_2_16();
    uint64_t result = v15(v14);
    unint64_t v11 = 0x80000001C9DA3FB0;
    unint64_t v12 = 0xD000000000000015;
    uint64_t v13 = 0;
  }
  *a2 = v13;
  a2[1] = v12;
  a2[2] = v11;
  return result;
}

uint64_t protocol witness for TieBreaking.actionBoost(features:loggingId:) in conformance AppLaunchTieBreaker@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return AppLaunchTieBreaker.actionBoost(features:loggingId:)(a1, a2);
}

uint64_t _s7SiriCam12RankedActionVWOcTm_0(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOhTm_5(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

unint64_t OUTLINED_FUNCTION_1_17()
{
  return specialized __RawDictionaryStorage.find<A>(_:)(0x535F5050415F5349, 0xEF54554354524F48);
}

void CamResponseStatusCode.init(fromError:)(id a1@<X0>, char *a2@<X8>)
{
  id v114 = a1;
  id v4 = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if (OUTLINED_FUNCTION_0_18())
  {
    if ((_BYTE)v113)
    {
      if (v113 == 1)
      {
        OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 1u, v5, v6, v7, v8, v9, v95, v103, v112, *((uint64_t *)&v112 + 1), v113, v114);
        char v10 = 3;
      }
      else
      {
        OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 2u, v5, v6, v7, v8, v9, v95, v103, v112, *((uint64_t *)&v112 + 1), v113, v114);
        char v10 = 4;
      }
    }
    else
    {
      OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 0, v5, v6, v7, v8, v9, v95, v103, v112, *((uint64_t *)&v112 + 1), v113, v114);
      char v10 = 2;
    }
  }
  else
  {

    OUTLINED_FUNCTION_1_18(v11, v12, v13, v14, v15, v16, v17, v18, v95, v103, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
    if (OUTLINED_FUNCTION_0_18())
    {
      if ((_BYTE)v113)
      {
        if (v113 == 1)
        {
          outlined consume of ModelError(v112, *((uint64_t *)&v112 + 1), 1u);

          char v10 = 8;
        }
        else
        {

          if (v112 == 0) {
            char v10 = 5;
          }
          else {
            char v10 = 6;
          }
        }
      }
      else
      {
        outlined consume of ModelError(v112, *((uint64_t *)&v112 + 1), 0);

        char v10 = 7;
      }
    }
    else
    {

      OUTLINED_FUNCTION_1_18(v19, v20, v21, v22, v23, v24, v25, v26, v96, v104, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
      if (OUTLINED_FUNCTION_0_18())
      {
        swift_bridgeObjectRelease();

        char v10 = 9;
      }
      else
      {

        OUTLINED_FUNCTION_1_18(v27, v28, v29, v30, v31, v32, v33, v34, v97, v105, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
        if (OUTLINED_FUNCTION_0_18())
        {
          if ((_BYTE)v113)
          {
            if (v113 == 1)
            {
              OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 1u, v35, v36, v37, v38, v39, v98, v106, v112, *((uint64_t *)&v112 + 1), v113, v114);
              char v10 = 11;
            }
            else
            {
              OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 2u, v35, v36, v37, v38, v39, v98, v106, v112, *((uint64_t *)&v112 + 1), v113, v114);
              char v10 = 12;
            }
          }
          else
          {
            OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 0, v35, v36, v37, v38, v39, v98, v106, v112, *((uint64_t *)&v112 + 1), v113, v114);
            char v10 = 10;
          }
        }
        else
        {

          OUTLINED_FUNCTION_1_18(v53, v54, v55, v56, v57, v58, v59, v60, v98, v106, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
          if (OUTLINED_FUNCTION_0_18())
          {
            switch((char)v113)
            {
              case 1:
                OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 1u, v61, v62, v63, v64, v65, v99, v107, v112, *((uint64_t *)&v112 + 1), v113, v114);
                char v10 = 14;
                break;
              case 2:
                OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 2u, v61, v62, v63, v64, v65, v99, v107, v112, *((uint64_t *)&v112 + 1), v113, v114);
                char v10 = 15;
                break;
              case 3:

                if (v112 == 0) {
                  char v10 = 17;
                }
                else {
                  char v10 = 18;
                }
                break;
              default:
                OUTLINED_FUNCTION_2_19(v112, *((uint64_t *)&v112 + 1), 0, v61, v62, v63, v64, v65, v99, v107, v112, *((uint64_t *)&v112 + 1), v113, v114);
                char v10 = 13;
                break;
            }
          }
          else
          {

            OUTLINED_FUNCTION_1_18(v66, v67, v68, v69, v70, v71, v72, v73, v99, v107, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
            if (OUTLINED_FUNCTION_0_18())
            {
              swift_bridgeObjectRelease();

              char v10 = 29;
            }
            else
            {

              OUTLINED_FUNCTION_1_18(v74, v75, v76, v77, v78, v79, v80, v81, v100, v108, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
              if (OUTLINED_FUNCTION_0_18())
              {
                switch((char)v113)
                {
                  case 1:
                    outlined consume of CamError(v112, *((uint64_t *)&v112 + 1), 1u);

                    char v10 = 20;
                    break;
                  case 2:
                    outlined consume of CamError(v112, *((uint64_t *)&v112 + 1), 2u);

                    char v10 = 21;
                    break;
                  case 3:
                    outlined consume of CamError(v112, *((uint64_t *)&v112 + 1), 3u);

                    char v10 = 22;
                    break;
                  case 4:
                    outlined consume of CamError(v112, *((uint64_t *)&v112 + 1), 4u);
                    goto LABEL_49;
                  default:
                    outlined consume of CamError(v112, *((uint64_t *)&v112 + 1), 0);

                    char v10 = 19;
                    break;
                }
              }
              else
              {

                OUTLINED_FUNCTION_1_18(v82, v83, v84, v85, v86, v87, v88, v89, v101, v109, v112, *((uint64_t *)&v112 + 1), v113, (uint64_t)v114);
                if (OUTLINED_FUNCTION_0_18())
                {
                  switch((char)v113)
                  {
                    case 1:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 1u, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 24;
                      break;
                    case 2:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 2u, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 25;
                      break;
                    case 3:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 3u, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 26;
                      break;
                    case 4:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 4u, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 27;
                      break;
                    case 5:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 5u, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 28;
                      break;
                    default:
                      OUTLINED_FUNCTION_3_16(v112, *((uint64_t *)&v112 + 1), 0, v90, v91, v92, v93, v94, v102, v110, v112, *((uint64_t *)&v112 + 1), v113, v114);
                      char v10 = 23;
                      break;
                  }
                }
                else
                {
LABEL_49:

                  char v10 = 1;
                }
              }
            }
          }
        }
      }
    }
  }
  uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v42 = v41;
  *(void *)&long long v112 = a1;
  id v43 = a1;
  uint64_t v44 = String.init<A>(reflecting:)();
  unint64_t v46 = v45;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  __swift_project_value_buffer(v47, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v48 = Logger.logObject.getter();
  os_log_type_t v49 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v48, v49))
  {
    char v111 = v10;
    uint64_t v50 = swift_slowAlloc();
    uint64_t v51 = swift_slowAlloc();
    *(void *)&long long v112 = v51;
    *(_DWORD *)uint64_t v50 = 136315394;
    swift_bridgeObjectRetain();
    id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v50 + 12) = 2080;
    swift_bridgeObjectRetain();
    id v114 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v46, (uint64_t *)&v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v48, v49, "CamResponseStatusCode %s used for error %s", (uint8_t *)v50, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v51, -1, -1);
    uint64_t v52 = v50;
    char v10 = v111;
    MEMORY[0x1CB78E290](v52, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  *a2 = v10;
}

uint64_t CamResponseStatusCode.rawValue.getter()
{
  return qword_1C9D9F288[*v0];
}

SiriCam::CamResponseStatusCode_optional __swiftcall CamResponseStatusCode.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 12;
  switch(rawValue)
  {
    case 1000:
      char v2 = 2;
      break;
    case 1001:
      char v2 = 3;
      break;
    case 1002:
      char v2 = 4;
      break;
    case 1003:
    case 1004:
    case 1005:
    case 1006:
    case 1007:
    case 1008:
    case 1009:
    case 1014:
    case 1015:
    case 1016:
    case 1017:
    case 1018:
    case 1019:
    case 1021:
    case 1022:
    case 1023:
    case 1024:
    case 1025:
    case 1026:
    case 1027:
    case 1028:
    case 1029:
    case 1033:
    case 1034:
    case 1035:
    case 1036:
    case 1037:
    case 1038:
    case 1039:
    case 1046:
    case 1047:
    case 1048:
    case 1049:
    case 1054:
    case 1055:
    case 1056:
    case 1057:
    case 1058:
    case 1059:
      goto LABEL_7;
    case 1010:
      char v2 = 5;
      break;
    case 1011:
      char v2 = 6;
      break;
    case 1012:
      char v2 = 7;
      break;
    case 1013:
      char v2 = 8;
      break;
    case 1020:
      char v2 = 9;
      break;
    case 1030:
      char v2 = 10;
      break;
    case 1031:
      char v2 = 11;
      break;
    case 1032:
      break;
    case 1040:
      char v2 = 13;
      break;
    case 1041:
      char v2 = 14;
      break;
    case 1042:
      char v2 = 15;
      break;
    case 1043:
      char v2 = 16;
      break;
    case 1044:
      char v2 = 17;
      break;
    case 1045:
      char v2 = 18;
      break;
    case 1050:
      char v2 = 19;
      break;
    case 1051:
      char v2 = 20;
      break;
    case 1052:
      char v2 = 21;
      break;
    case 1053:
      char v2 = 22;
      break;
    case 1060:
      char v2 = 23;
      break;
    case 1061:
      char v2 = 24;
      break;
    case 1062:
      char v2 = 25;
      break;
    case 1063:
      char v2 = 26;
      break;
    case 1064:
      char v2 = 27;
      break;
    case 1065:
      char v2 = 28;
      break;
    default:
      switch(rawValue)
      {
        case 200:
          char v2 = 0;
          break;
        case 1070:
          char v2 = 29;
          break;
        case 500:
          char v2 = 1;
          break;
        default:
LABEL_7:
          char v2 = 30;
          break;
      }
      break;
  }
  char *v1 = v2;
  return (SiriCam::CamResponseStatusCode_optional)rawValue;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CamResponseStatusCode(char *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type CamResponseStatusCode and conformance CamResponseStatusCode()
{
  unint64_t result = lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode;
  if (!lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamResponseStatusCode and conformance CamResponseStatusCode);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamResponseStatusCode()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance CamResponseStatusCode(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamResponseStatusCode(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::CamResponseStatusCode_optional protocol witness for RawRepresentable.init(rawValue:) in conformance CamResponseStatusCode(Swift::Int *a1)
{
  return CamResponseStatusCode.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamResponseStatusCode@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = CamResponseStatusCode.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for CamResponseStatusCode(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE3)
  {
    if (a2 + 29 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 29) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 30;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1E;
  int v5 = v6 - 30;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CamResponseStatusCode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 29 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 29) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE2)
  {
    unsigned int v6 = ((a2 - 227) >> 8) + 1;
    *uint64_t result = a2 + 29;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D5C884);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 29;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CamResponseStatusCode()
{
  return &type metadata for CamResponseStatusCode;
}

uint64_t outlined consume of AutoConfirmError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t outlined consume of ModelError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 1u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_18()
{
  return swift_dynamicCast();
}

id OUTLINED_FUNCTION_1_18(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return v14;
}

void OUTLINED_FUNCTION_2_19(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  outlined consume of CoreMLError(a1, a2, a3);
}

void OUTLINED_FUNCTION_3_16(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id a14)
{
  outlined consume of AutoConfirmError(a1, a2, a3);
}

uint64_t static EnvironmentUtilities.currentSiriLocale.getter()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790]();
  int v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.preferencesLanguageCode.getter();
  uint64_t v5 = v4;
  swift_release();
  if (!v5)
  {
    static Locale.current.getter();
    Locale.identifier.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  return Locale.init(identifier:)();
}

uint64_t RepetitionType.description.getter()
{
  return 0x4E574F4E4B4E55;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance RepetitionType()
{
  return RepetitionType.description.getter();
}

uint64_t static AssetProvider.fetchModelFromUAF(_:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v197 = a1;
  uint64_t v192 = a3;
  uint64_t v177 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_20_1();
  uint64_t v175 = v6;
  uint64_t v180 = type metadata accessor for CamModelMetadata();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_20_1();
  uint64_t v187 = v9;
  uint64_t v195 = type metadata accessor for URL();
  OUTLINED_FUNCTION_1_2();
  uint64_t v188 = v10;
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_20_1();
  uint64_t v186 = v14;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v15 - 8);
  OUTLINED_FUNCTION_5_2();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_10_0();
  uint64_t v189 = v17;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_20_1();
  uint64_t v190 = v19;
  uint64_t v20 = type metadata accessor for Locale();
  OUTLINED_FUNCTION_1_2();
  uint64_t v22 = v21;
  uint64_t v24 = MEMORY[0x1F4188790](v23);
  int v26 = (char *)&v169 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_10_0();
  uint64_t v185 = (char *)v27;
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_10_0();
  OUTLINED_FUNCTION_4_11();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_10_0();
  uint64_t v198 = v30;
  uint64_t v32 = MEMORY[0x1F4188790](v31);
  int v34 = (char *)&v169 - v33;
  MEMORY[0x1F4188790](v32);
  int v36 = (char *)&v169 - v35;
  static EnvironmentUtilities.currentSiriLocale.getter();
  v203[0] = Locale.identifier.getter();
  v203[1] = v37;
  uint64_t v201 = 45;
  unint64_t v202 = 0xE100000000000000;
  uint64_t v199 = 95;
  unint64_t v200 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  uint64_t v39 = v22 + 8;
  int v38 = *(void (**)(char *, uint64_t))(v22 + 8);
  v38(v34, v20);
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  unint64_t v41 = __swift_project_value_buffer(v40, (uint64_t)static Logger.common);
  uint64_t v176 = v22;
  unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v172 = v22 + 16;
  uint64_t v171 = v42;
  v42(v198, (uint64_t)v36, v20);
  swift_bridgeObjectRetain_n();
  os_log_t v194 = v41;
  id v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  unint64_t v46 = a2;
  uint64_t v191 = v20;
  uint64_t v193 = v38;
  uint64_t v173 = v26;
  if (v45)
  {
    uint64_t v47 = swift_slowAlloc();
    uint64_t v196 = a2;
    uint64_t v48 = v47;
    uint64_t v170 = swift_slowAlloc();
    v203[0] = v170;
    *(_DWORD *)uint64_t v48 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v196, v203);
    OUTLINED_FUNCTION_30_3(v49);
    uint64_t v50 = v20;
    OUTLINED_FUNCTION_29_2();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v48 + 12) = 2080;
    lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
    uint64_t v51 = v198;
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = OUTLINED_FUNCTION_37_0(v52, v53);
    OUTLINED_FUNCTION_19_7(v54);
    uint64_t v55 = v195;
    int v56 = v193;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    int v57 = v51;
    int v38 = v56;
    v56(v57, v50);
    _os_log_impl(&dword_1C9CFE000, v43, v44, "%s: Trying to fetch model for current siri locale : %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    unint64_t v46 = v196;
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    OUTLINED_FUNCTION_19_0();
    v38(v198, v20);

    uint64_t v55 = v195;
  }
  int v58 = static AssetProvider.uafAssetSet.getter();
  if (v58)
  {
    int v59 = v58;
    int v60 = (void *)MEMORY[0x1CB78D210](v197, v46);
    id v61 = objc_msgSend(v59, sel_assetNamed_, v60);

    if (v61)
    {
      id v62 = objc_msgSend(v61, sel_location);
      if (v62)
      {
        int v63 = v62;
        uint64_t v64 = v189;
        static URL._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v65 = 0;
      }
      else
      {
        uint64_t v65 = 1;
        uint64_t v64 = v189;
      }
      uint64_t v66 = (uint64_t)v190;
      __swift_storeEnumTagSinglePayload(v64, v65, 1, v55);
      outlined init with take of URL?(v64, v66);
      if (__swift_getEnumTagSinglePayload(v66, 1, v55) == 1)
      {
        outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v66, &demangling cache variable for type metadata for URL?);
      }
      else
      {
        uint64_t v198 = v36;
        uint64_t v67 = URL.path.getter();
        unint64_t v69 = v68;
        uint64_t v70 = v188;
        uint64_t v71 = v188 + 8;
        uint64_t v190 = *(void (**)(uint64_t, uint64_t))(v188 + 8);
        OUTLINED_FUNCTION_13_9();
        v72();
        uint64_t v73 = HIBYTE(v69) & 0xF;
        if ((v69 & 0x2000000000000000) == 0) {
          uint64_t v73 = v67 & 0xFFFFFFFFFFFFLL;
        }
        if (v73)
        {
          uint64_t v74 = v186;
          URL.init(fileURLWithPath:isDirectory:)();
          swift_bridgeObjectRelease();
          int v75 = v183;
          static AssetProvider.defaultModelUrl(for:)(v197, v46, v183);
          uint64_t v182 = v39;
          uint64_t v170 = (uint64_t)v61;
          uint64_t v89 = v195;
          __swift_storeEnumTagSinglePayload((uint64_t)v75, 0, 1, v195);
          int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v75, 1, v89);
          if (EnumTagSinglePayload == 1)
          {
            outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v75, &demangling cache variable for type metadata for URL?);
          }
          else
          {
            uint64_t v156 = v75;
            uint64_t v157 = v174;
            (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v174, v156, v89);
            if (MEMORY[0x1CB78C6A0](v74, v157))
            {
              OUTLINED_FUNCTION_24_8();
              os_log_t v158 = v194;
              uint64_t v159 = (void *)Logger.logObject.getter();
              os_log_type_t v160 = static os_log_type_t.default.getter();
              if (OUTLINED_FUNCTION_27_2(v160))
              {
                uint64_t v161 = (void (*)(void))swift_slowAlloc();
                v203[0] = OUTLINED_FUNCTION_7_1();
                *(_DWORD *)uint64_t v161 = 136315138;
                swift_bridgeObjectRetain();
                uint64_t v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v46, v203);
                OUTLINED_FUNCTION_14_10(v162);
                swift_bridgeObjectRelease_n();
                OUTLINED_FUNCTION_28_4(&dword_1C9CFE000, v163, v164, "%s: UAF did not deliver a model.");
                swift_arrayDestroy();
                OUTLINED_FUNCTION_2_2();
                OUTLINED_FUNCTION_2_2();
                OUTLINED_FUNCTION_21_6();

                uint64_t v165 = OUTLINED_FUNCTION_11_11();
                ((void (*)(uint64_t))v161)(v165);
                OUTLINED_FUNCTION_13_9();
                v161();
                OUTLINED_FUNCTION_15_8();
                v166();
              }
              else
              {

                OUTLINED_FUNCTION_19_0();
                uint64_t v168 = OUTLINED_FUNCTION_11_11();
                ((void (*)(uint64_t))v158)(v168);
                OUTLINED_FUNCTION_13_9();
                ((void (*)(void))v158)();
                v38(v198, v191);
              }
              uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
              uint64_t v86 = v192;
              goto LABEL_23;
            }
            OUTLINED_FUNCTION_13_9();
            v167();
          }
          id v91 = objc_msgSend(v61, sel_metadata);
          uint64_t v92 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v93 = v178;
          uint64_t v94 = v74;
          uint64_t v95 = v195;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v70 + 16))(v178, v94, v195);
          OUTLINED_FUNCTION_24_8();
          swift_bridgeObjectRetain_n();
          uint64_t v96 = Logger.logObject.getter();
          os_log_type_t v97 = static os_log_type_t.info.getter();
          int v98 = v97;
          BOOL v99 = os_log_type_enabled(v96, v97);
          uint64_t v189 = v71;
          if (v99)
          {
            uint64_t v100 = OUTLINED_FUNCTION_7_1();
            uint64_t v183 = (char *)OUTLINED_FUNCTION_17_8();
            v203[0] = (uint64_t)v183;
            *(_DWORD *)uint64_t v100 = 136315650;
            swift_bridgeObjectRetain();
            uint64_t v101 = v197;
            uint64_t v102 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v46, v203);
            OUTLINED_FUNCTION_30_3(v102);
            LODWORD(v174) = v98;
            OUTLINED_FUNCTION_29_2();
            swift_bridgeObjectRelease_n();
            uint64_t v196 = v46;
            *(_WORD *)(v100 + 12) = 2080;
            uint64_t v103 = v96;
            uint64_t v104 = URL.absoluteString.getter();
            uint64_t v106 = OUTLINED_FUNCTION_37_0(v104, v105);
            OUTLINED_FUNCTION_19_7(v106);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v190(v93, v95);
            *(_WORD *)(v100 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v107 = Dictionary.description.getter();
            unint64_t v109 = v108;
            swift_bridgeObjectRelease();
            uint64_t v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v109, v203);
            OUTLINED_FUNCTION_19_7(v110);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            unint64_t v46 = v196;
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C9CFE000, v103, (os_log_type_t)v174, "%s: Model URL from UAF: %s. Model metadata from UAF: %s", (uint8_t *)v100, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2_2();
            OUTLINED_FUNCTION_2_2();
          }
          else
          {
            OUTLINED_FUNCTION_19_0();
            OUTLINED_FUNCTION_13_9();
            v111();

            swift_bridgeObjectRelease_n();
            uint64_t v101 = v197;
          }
          uint64_t v112 = v180;
          type metadata accessor for AssetMetadataProvider();
          uint64_t v113 = v187;
          static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)(v101, v46, v92, v187);
          swift_bridgeObjectRelease();
          uint64_t v114 = v179;
          outlined init with copy of CamModelMetadata(v113, v179);
          OUTLINED_FUNCTION_24_8();
          uint64_t v115 = Logger.logObject.getter();
          os_log_type_t v116 = static os_log_type_t.info.getter();
          BOOL v117 = os_log_type_enabled(v115, v116);
          uint64_t v118 = v192;
          if (v117)
          {
            uint64_t v119 = swift_slowAlloc();
            uint64_t v196 = swift_slowAlloc();
            v203[0] = v196;
            *(_DWORD *)uint64_t v119 = 136315394;
            swift_bridgeObjectRetain();
            uint64_t v120 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v101, v46, v203);
            OUTLINED_FUNCTION_30_3(v120);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v119 + 12) = 2080;
            uint64_t v121 = v118;
            outlined init with copy of Locale?(v114 + *(int *)(v112 + 28), v175);
            uint64_t v122 = String.init<A>(describing:)();
            uint64_t v123 = v114;
            uint64_t v124 = v112;
            uint64_t v201 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v125, v203);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v126 = v123;
            uint64_t v118 = v121;
            outlined destroy of CamModelMetadata(v126);
            _os_log_impl(&dword_1C9CFE000, v115, v116, "%s: Model locale from asset metadata: %s", (uint8_t *)v119, 0x16u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2_2();
            OUTLINED_FUNCTION_2_2();

            uint64_t v127 = v191;
            uint64_t v128 = v195;
            uint64_t v129 = (void (*)(void))v193;
          }
          else
          {
            OUTLINED_FUNCTION_19_0();
            outlined destroy of CamModelMetadata(v114);

            uint64_t v127 = v191;
            uint64_t v128 = v195;
            uint64_t v129 = (void (*)(void))v193;
            uint64_t v124 = v112;
          }
          uint64_t v130 = v184;
          uint64_t v131 = v185;
          uint64_t v132 = *(int *)(v124 + 28);
          uint64_t v133 = v187;
          uint64_t v134 = v181;
          outlined init with copy of Locale?(v187 + v132, v181);
          if (__swift_getEnumTagSinglePayload(v134, 1, v127) == 1)
          {
            outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?(v134, &demangling cache variable for type metadata for Locale?);
            long long v135 = Logger.logObject.getter();
            os_log_type_t v136 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v135, v136))
            {
              uint64_t v137 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v137 = 0;
              _os_log_impl(&dword_1C9CFE000, v135, v136, "UAF did not have model locale in metadata. Assuming that current model delivered by UAF is good to use", v137, 2u);
              uint64_t v128 = v195;
              OUTLINED_FUNCTION_2_2();
            }
            OUTLINED_FUNCTION_21_6();

            ((void (*)(char *, uint64_t))v129)(v198, v127);
          }
          else
          {
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v176 + 32))(v130, v134, v127);
            lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
            uint64_t v138 = v198;
            if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
            {
              uint64_t v141 = v171;
              v171(v131, (uint64_t)v138, v127);
              v141(v173, v130, v127);
              OUTLINED_FUNCTION_24_8();
              uint64_t v142 = Logger.logObject.getter();
              os_log_type_t v143 = static os_log_type_t.error.getter();
              int v144 = v143;
              if (os_log_type_enabled(v142, v143))
              {
                uint64_t v145 = OUTLINED_FUNCTION_7_1();
                uint64_t v196 = OUTLINED_FUNCTION_17_8();
                v203[0] = v196;
                *(_DWORD *)uint64_t v145 = 136315650;
                os_log_t v194 = v142;
                swift_bridgeObjectRetain();
                uint64_t v146 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v46, v203);
                OUTLINED_FUNCTION_30_3(v146);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                *(_WORD *)(v145 + 12) = 2080;
                lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
                LODWORD(v197) = v144;
                char v147 = v185;
                uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v150 = OUTLINED_FUNCTION_37_0(v148, v149);
                OUTLINED_FUNCTION_31_2(v150);
                swift_bridgeObjectRelease();
                ((void (*)(char *, uint64_t))v129)(v147, v127);
                *(_WORD *)(v145 + 22) = 2080;
                uint64_t v151 = v192;
                uint64_t v152 = dispatch thunk of CustomStringConvertible.description.getter();
                uint64_t v154 = OUTLINED_FUNCTION_37_0(v152, v153);
                OUTLINED_FUNCTION_31_2(v154);
                swift_bridgeObjectRelease();
                OUTLINED_FUNCTION_25_5();
                v129();
                os_log_t v155 = v194;
                _os_log_impl(&dword_1C9CFE000, v194, (os_log_type_t)v197, "%s: Current Siri Locale %s does not match locale of the model %s delivered by UAF. User possibly switched Siri locale recently. ", (uint8_t *)v145, 0x20u);
                swift_arrayDestroy();
                OUTLINED_FUNCTION_2_2();
                OUTLINED_FUNCTION_2_2();
                OUTLINED_FUNCTION_21_6();

                OUTLINED_FUNCTION_25_5();
                v129();
                outlined destroy of CamModelMetadata(v187);
                v190(v186, v195);
                OUTLINED_FUNCTION_25_5();
                v129();
                uint64_t v118 = v151;
              }
              else
              {

                OUTLINED_FUNCTION_20_6();
                v129();
                ((void (*)(char *, uint64_t))v129)(v185, v127);
                OUTLINED_FUNCTION_21_6();
                OUTLINED_FUNCTION_19_0();
                ((void (*)(uint64_t, uint64_t))v129)(v130, v127);
                outlined destroy of CamModelMetadata(v187);
                v190(v186, v128);
                ((void (*)(char *, uint64_t))v129)(v138, v127);
              }
              uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
              uint64_t v86 = v118;
              goto LABEL_23;
            }
            OUTLINED_FUNCTION_21_6();
            OUTLINED_FUNCTION_20_6();
            v129();
            ((void (*)(char *, uint64_t))v129)(v138, v127);
          }
          uint64_t v139 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
          uint64_t v140 = v118 + *(int *)(v139 + 48);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v188 + 32))(v118, v186, v128);
          outlined init with take of CamModelMetadata(v133, v140);
          uint64_t v86 = v118;
          uint64_t v87 = 0;
          uint64_t v85 = v139;
          return __swift_storeEnumTagSinglePayload(v86, v87, 1, v85);
        }
        swift_bridgeObjectRelease();
        int v36 = v198;
      }
    }
  }
  else
  {
    id v61 = 0;
  }
  OUTLINED_FUNCTION_24_8();
  int v76 = (void *)Logger.logObject.getter();
  os_log_type_t v77 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_27_2(v77))
  {
    int v78 = (_DWORD *)swift_slowAlloc();
    uint64_t v79 = OUTLINED_FUNCTION_7_1();
    uint64_t v182 = v39;
    v203[0] = v79;
    *int v78 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v80 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v46, v203);
    OUTLINED_FUNCTION_14_10(v80);
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_28_4(&dword_1C9CFE000, v81, v82, "%s: UAF did not return a model url");
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    OUTLINED_FUNCTION_15_8();
    v83();
  }
  else
  {

    OUTLINED_FUNCTION_19_0();
    v38(v36, v191);
  }
  uint64_t v84 = v192;
  uint64_t v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
  uint64_t v86 = v84;
LABEL_23:
  uint64_t v87 = 1;
  return __swift_storeEnumTagSinglePayload(v86, v87, 1, v85);
}

uint64_t type metadata accessor for DummyClassToIdentifyTheCamFramework()
{
  return self;
}

uint64_t one-time initialization function for savedLocale()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_allocate_value_buffer(v2, static AssetProvider.savedLocale);
  __swift_project_value_buffer(v0, (uint64_t)static AssetProvider.savedLocale);
  static EnvironmentUtilities.currentSiriLocale.getter();
  v7[4] = Locale.identifier.getter();
  v7[5] = v5;
  void v7[2] = 45;
  v7[3] = 0xE100000000000000;
  v7[0] = 95;
  v7[1] = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void *static AssetProvider.uafAssetSet.getter()
{
  uint64_t v0 = type metadata accessor for Locale();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = MEMORY[0x1F4188790](v0);
  uint64_t v4 = &v21[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = &v21[-v5];
  static EnvironmentUtilities.currentSiriLocale.getter();
  uint64_t v24 = Locale.identifier.getter();
  uint64_t v25 = v7;
  uint64_t v22 = 45;
  unint64_t v23 = 0xE100000000000000;
  uint64_t v26 = 95;
  unint64_t v27 = 0xE100000000000000;
  lazy protocol witness table accessor for type String and conformance String();
  StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  swift_bridgeObjectRelease();
  Locale.init(identifier:)();
  uint64_t v8 = *(void (**)(unsigned char *, uint64_t))(v1 + 8);
  v8(v4, v0);
  if (one-time initialization token for savedLocale != -1) {
    swift_once();
  }
  uint64_t v9 = __swift_project_value_buffer(v0, (uint64_t)static AssetProvider.savedLocale);
  swift_beginAccess();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v1 + 16))(v4, v9, v0);
  lazy protocol witness table accessor for type Locale and conformance Locale((unint64_t *)&lazy protocol witness table cache variable for type Locale and conformance Locale);
  char v10 = dispatch thunk of static Equatable.== infix(_:_:)();
  v8(v4, v0);
  if ((v10 & 1) == 0 || (uint64_t v11 = (void *)static AssetProvider.savedUafAssetSet) == 0)
  {
    swift_beginAccess();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v1 + 24))(v9, v6, v0);
    swift_endAccess();
    id v12 = objc_msgSend(self, sel_sharedManager);
    uint64_t v13 = (void *)MEMORY[0x1CB78D210](0xD00000000000001CLL, 0x80000001C9DA4010);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, String)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
    strcpy((char *)(inited + 32), "cam.language");
    *(unsigned char *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    *(void *)(inited + 48) = Locale.identifier.getter();
    *(void *)(inited + 56) = v15;
    uint64_t v16 = Dictionary.init(dictionaryLiteral:)();
    id v17 = outlined bridged method (mnbnn) of @objc UAFAssetSetManager.retrieveAssetSet(_:usages:)((uint64_t)v13, v16, v12);

    uint64_t v18 = (void *)static AssetProvider.savedUafAssetSet;
    static AssetProvider.savedUafAssetSet = (uint64_t)v17;

    uint64_t v11 = (void *)static AssetProvider.savedUafAssetSet;
  }
  id v19 = v11;
  v8(v6, v0);
  return v11;
}

uint64_t static AssetProvider.fetchModel(_:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata));
  OUTLINED_FUNCTION_1_3();
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v18 = (char *)&v32 - v17;
  static AssetProvider.fetchModelFromUAF(_:)(a3, a4, (uint64_t)v11);
  if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v11, &demangling cache variable for type metadata for (modelUrl: URL, modelMetadata: CamModelMetadata)?);
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.common);
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = a1;
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v23 = 0;
      _os_log_impl(&dword_1C9CFE000, v20, v21, "Falling back to default model", v23, 2u);
      uint64_t v24 = v23;
      a1 = v22;
      MEMORY[0x1CB78E290](v24, -1, -1);
    }

    return static AssetProvider.defaultModel(for:)(a1, a2, a3, a4);
  }
  else
  {
    uint64_t v26 = *(int *)(v12 + 48);
    uint64_t v27 = (uint64_t)&v18[v26];
    uint64_t v28 = (uint64_t)&v11[v26];
    type metadata accessor for URL();
    uint64_t v32 = a1;
    uint64_t v33 = a2;
    OUTLINED_FUNCTION_1_3();
    int v30 = *(void (**)(void))(v29 + 32);
    uint64_t v34 = v4;
    OUTLINED_FUNCTION_23_8();
    v30();
    outlined init with take of CamModelMetadata(v28, v27);
    uint64_t v31 = (uint64_t)&v16[*(int *)(v12 + 48)];
    OUTLINED_FUNCTION_23_8();
    v30();
    outlined init with take of CamModelMetadata(v27, v31);
    OUTLINED_FUNCTION_23_8();
    v30();
    return outlined init with take of CamModelMetadata(v31, v33);
  }
}

uint64_t static AssetProvider.defaultModel(for:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v5 = v4;
  if (one-time initialization token for defaultModelMetadata != -1) {
    swift_once();
  }
  uint64_t v10 = static AssetMetadataProvider.defaultModelMetadata;
  swift_bridgeObjectRetain();
  uint64_t v11 = specialized Dictionary.subscript.getter(a3, a4, v10);
  swift_bridgeObjectRelease();
  if (!v11) {
    uint64_t v11 = Dictionary.init(dictionaryLiteral:)();
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.common);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    os_log_type_t type = v14;
    uint64_t v15 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    uint64_t v26 = v23;
    *(_DWORD *)uint64_t v15 = 136315394;
    uint64_t v25 = a2;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v15 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = a3;
    uint64_t v17 = Dictionary.description.getter();
    uint64_t v18 = v5;
    unint64_t v20 = v19;
    swift_bridgeObjectRelease();
    uint64_t v21 = v17;
    a3 = v16;
    a2 = v25;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v20, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v5 = v18;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v13, type, "%s: Using default metadata %s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v23, -1, -1);
    MEMORY[0x1CB78E290](v15, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  static AssetProvider.defaultModelUrl(for:)(a3, a4, a1);
  if (!v5)
  {
    type metadata accessor for AssetMetadataProvider();
    static AssetMetadataProvider.parseAssetMetadata(modelName:metadata:)(a3, a4, v11, a2);
  }
  return swift_bridgeObjectRelease();
}

void static AssetProvider.defaultModelUrl(for:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  os_log_type_t v14 = (char *)&v34 - v13;
  MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v34 - v15;
  static AssetProvider.defaultAssetsUrl()();
  if (!v3)
  {
    URL.appendingPathComponent(_:)();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v38 = v8 + 8;
    v37(v16, v7);
    if (URL.hasDirectoryPath.getter())
    {
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.common);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v11, a3, v7);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v40 = v36;
        *(_DWORD *)uint64_t v20 = 136315394;
        swift_bridgeObjectRetain();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v20 + 12) = 2080;
        uint64_t v21 = URL.absoluteString.getter();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v37(v11, v7);
        _os_log_impl(&dword_1C9CFE000, v18, v19, "%s: Default Model url: %s", (uint8_t *)v20, 0x16u);
        uint64_t v23 = v36;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v23, -1, -1);
        MEMORY[0x1CB78E290](v20, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        v37(v11, v7);
      }
    }
    else
    {
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      __swift_project_value_buffer(v24, (uint64_t)static Logger.common);
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, a3, v7);
      swift_bridgeObjectRetain_n();
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.error.getter();
      int v27 = v26;
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v28 = swift_slowAlloc();
        uint64_t v36 = swift_slowAlloc();
        uint64_t v40 = v36;
        *(_DWORD *)uint64_t v28 = 136315650;
        int v35 = v27;
        swift_bridgeObjectRetain();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v40);
        os_log_t v34 = v25;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v28 + 22) = 2080;
        uint64_t v29 = URL.absoluteString.getter();
        uint64_t v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = v37;
        v37(v14, v7);
        uint64_t v25 = v34;
        _os_log_impl(&dword_1C9CFE000, v34, (os_log_type_t)v35, "%s: Default Model for %s not found in %s.", (uint8_t *)v28, 0x20u);
        uint64_t v32 = v36;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v32, -1, -1);
        MEMORY[0x1CB78E290](v28, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        uint64_t v31 = v37;
        v37(v14, v7);
      }

      lazy protocol witness table accessor for type ModelError and conformance ModelError();
      swift_allocError();
      *(_OWORD *)uint64_t v33 = xmmword_1C9D9E3A0;
      *(unsigned char *)(v33 + 16) = 2;
      swift_willThrow();
      v31(a3, v7);
    }
  }
}

void static AssetProvider.setAssetsProvisional()()
{
  v57[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = static AssetProvider.uafAssetSet.getter();

  if (v2)
  {
    uint64_t v3 = static AssetProvider.uafAssetSet.getter();
    if (v3)
    {
      uint64_t v4 = v3;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      v57[0] = 0;
      unsigned int v6 = objc_msgSend(v4, sel_markAssetsProvisional_error_, isa, v57);

      if (!v6)
      {
        id v26 = v57[0];
        int v27 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        uint64_t v29 = OUTLINED_FUNCTION_11_9(v28, (uint64_t)static Logger.common);
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = OUTLINED_FUNCTION_7_1();
          v57[0] = (id)OUTLINED_FUNCTION_17_8();
          unint64_t v32 = OUTLINED_FUNCTION_26_5(4.8152e-34);
          uint64_t v55 = OUTLINED_FUNCTION_1_19(v32, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v36, (uint64_t)oslog, v47, v52);
          OUTLINED_FUNCTION_6_13();
          uint64_t v33 = OUTLINED_FUNCTION_32_3();
          uint64_t v56 = OUTLINED_FUNCTION_1_19(v33, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v39, (uint64_t)oslogd, v50, v55);
          OUTLINED_FUNCTION_6_13();
          *(_WORD *)(v31 + 22) = v1;
          OUTLINED_FUNCTION_2_20((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v40, (uint64_t)osloge, v51, v56);
          OUTLINED_FUNCTION_6_13();
          OUTLINED_FUNCTION_34_1(&dword_1C9CFE000, v34, v35, "Failed to set assets %s, %s, %s to provisional");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
        }

        goto LABEL_22;
      }
      id v7 = v57[0];
    }
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_11_9(v8, (uint64_t)static Logger.common);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_27_2(v10))
    {
      uint64_t v11 = OUTLINED_FUNCTION_7_1();
      v57[0] = (id)OUTLINED_FUNCTION_17_8();
      unint64_t v12 = OUTLINED_FUNCTION_18_10(4.8152e-34);
      uint64_t v53 = OUTLINED_FUNCTION_1_19(v12, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v36, (uint64_t)oslog, v47, v52);
      OUTLINED_FUNCTION_5_11();
      uint64_t v13 = OUTLINED_FUNCTION_36_0();
      uint64_t v54 = OUTLINED_FUNCTION_1_19(v13, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v37, (uint64_t)oslogb, v48, v53);
      OUTLINED_FUNCTION_5_11();
      *(_WORD *)(v11 + 22) = v0;
      OUTLINED_FUNCTION_2_20((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v38, (uint64_t)oslogc, v49, v54);
      OUTLINED_FUNCTION_5_11();
      OUTLINED_FUNCTION_27_4(&dword_1C9CFE000, v14, v15, "Set assets %s, %s, %s to provisional");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

LABEL_22:
    OUTLINED_FUNCTION_10_6();
    return;
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  osloga = OUTLINED_FUNCTION_11_9(v16, (uint64_t)static Logger.common);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v17))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_35_1(&dword_1C9CFE000, v18, v19, "UAF asset set is nil, so marking assets to provisional will fail", v20, v21, v22, v23, v36, osloga);
    OUTLINED_FUNCTION_2_2();
  }
  OUTLINED_FUNCTION_10_6();
}

void static AssetProvider.promoteAssets()()
{
  v57[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = static AssetProvider.uafAssetSet.getter();

  if (v2)
  {
    uint64_t v3 = static AssetProvider.uafAssetSet.getter();
    if (v3)
    {
      uint64_t v4 = v3;
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      v57[0] = 0;
      unsigned int v6 = objc_msgSend(v4, sel_markAssetsPromoted_error_, isa, v57);

      if (!v6)
      {
        id v26 = v57[0];
        int v27 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        uint64_t v29 = OUTLINED_FUNCTION_11_9(v28, (uint64_t)static Logger.common);
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = OUTLINED_FUNCTION_7_1();
          v57[0] = (id)OUTLINED_FUNCTION_17_8();
          unint64_t v32 = OUTLINED_FUNCTION_26_5(4.8152e-34);
          uint64_t v55 = OUTLINED_FUNCTION_1_19(v32, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v36, (uint64_t)oslog, v47, v52);
          OUTLINED_FUNCTION_6_13();
          uint64_t v33 = OUTLINED_FUNCTION_32_3();
          uint64_t v56 = OUTLINED_FUNCTION_1_19(v33, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v39, (uint64_t)oslogd, v50, v55);
          OUTLINED_FUNCTION_6_13();
          *(_WORD *)(v31 + 22) = v1;
          OUTLINED_FUNCTION_2_20((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v40, (uint64_t)osloge, v51, v56);
          OUTLINED_FUNCTION_6_13();
          OUTLINED_FUNCTION_34_1(&dword_1C9CFE000, v34, v35, "Promoting %s, %s, %s failed");
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
        }

        goto LABEL_22;
      }
      id v7 = v57[0];
    }
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    uint64_t v9 = (void *)OUTLINED_FUNCTION_11_9(v8, (uint64_t)static Logger.common);
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_27_2(v10))
    {
      uint64_t v11 = OUTLINED_FUNCTION_7_1();
      v57[0] = (id)OUTLINED_FUNCTION_17_8();
      unint64_t v12 = OUTLINED_FUNCTION_18_10(4.8152e-34);
      uint64_t v53 = OUTLINED_FUNCTION_1_19(v12, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send", v36, (uint64_t)oslog, v47, v52);
      OUTLINED_FUNCTION_5_11();
      uint64_t v13 = OUTLINED_FUNCTION_36_0();
      uint64_t v54 = OUTLINED_FUNCTION_1_19(v13, (uint64_t)"com.apple.siri.cam.auto_confirm.auto_send_private", v37, (uint64_t)oslogb, v48, v53);
      OUTLINED_FUNCTION_5_11();
      *(_WORD *)(v11 + 22) = v0;
      OUTLINED_FUNCTION_2_20((uint64_t)"com.apple.siri.cam.uncertainty_prompt", v38, (uint64_t)oslogc, v49, v54);
      OUTLINED_FUNCTION_5_11();
      OUTLINED_FUNCTION_27_4(&dword_1C9CFE000, v14, v15, "Promoted %s, %s, %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

LABEL_22:
    OUTLINED_FUNCTION_10_6();
    return;
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  osloga = OUTLINED_FUNCTION_11_9(v16, (uint64_t)static Logger.common);
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(osloga, v17))
  {
    *(_WORD *)swift_slowAlloc() = 0;
    OUTLINED_FUNCTION_35_1(&dword_1C9CFE000, v18, v19, "UAF asset set is nil, so promoting assets will fail", v20, v21, v22, v23, v36, osloga);
    OUTLINED_FUNCTION_2_2();
  }
  OUTLINED_FUNCTION_10_6();
}

uint64_t static AssetProvider.defaultAssetsUrl()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1F4188790](v0 - 8);
  uint64_t v2 = (char *)v16 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for URL();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  id v7 = (char *)v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v16 - v8;
  type metadata accessor for DummyClassToIdentifyTheCamFramework();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v11 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  id v12 = objc_msgSend(v11, sel_resourceURL);

  if (v12)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
    v13(v2, v7, v3);
    __swift_storeEnumTagSinglePayload((uint64_t)v2, 0, 1, v3);
    if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) != 1)
    {
      v13(v9, v2, v3);
      URL.appendingPathComponent(_:isDirectory:)();
      return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v9, v3);
    }
  }
  else
  {
    __swift_storeEnumTagSinglePayload((uint64_t)v2, 1, 1, v3);
  }
  outlined destroy of Apple_Parsec_Siri_V2alpha_Sash?((uint64_t)v2, &demangling cache variable for type metadata for URL?);
  lazy protocol witness table accessor for type ModelError and conformance ModelError();
  swift_allocError();
  *(_OWORD *)uint64_t v15 = xmmword_1C9D9E3A0;
  *(unsigned char *)(v15 + 16) = 2;
  return swift_willThrow();
}

id outlined bridged method (mnbnn) of @objc UAFAssetSetManager.retrieveAssetSet(_:usages:)(uint64_t a1, uint64_t a2, void *a3)
{
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v6 = objc_msgSend(a3, sel_retrieveAssetSet_usages_, a1, isa);

  return v6;
}

unint64_t lazy protocol witness table accessor for type ModelError and conformance ModelError()
{
  unint64_t result = lazy protocol witness table cache variable for type ModelError and conformance ModelError;
  if (!lazy protocol witness table cache variable for type ModelError and conformance ModelError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModelError and conformance ModelError);
  }
  return result;
}

uint64_t outlined init with take of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Locale and conformance Locale(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Locale();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_19@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, (a2 - 32) | 0x8000000000000000, (uint64_t *)va);
}

uint64_t OUTLINED_FUNCTION_2_20@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000025, (a1 - 32) | 0x8000000000000000, (uint64_t *)va);
}

void OUTLINED_FUNCTION_4_11()
{
  *(void *)(v1 - 256) = v0;
}

uint64_t OUTLINED_FUNCTION_5_11()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_6_13()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_11_11()
{
  return *(void *)(v0 - 344);
}

uint64_t OUTLINED_FUNCTION_14_10(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_17_8()
{
  return swift_slowAlloc();
}

unint64_t OUTLINED_FUNCTION_18_10(float a1)
{
  float *v1 = a1;
  return 0xD000000000000029;
}

uint64_t OUTLINED_FUNCTION_19_7(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return v1 - 120;
}

void OUTLINED_FUNCTION_21_6()
{
  uint64_t v2 = *(void **)(v0 - 376);
}

uint64_t OUTLINED_FUNCTION_24_8()
{
  return swift_bridgeObjectRetain_n();
}

unint64_t OUTLINED_FUNCTION_26_5(float a1)
{
  float *v1 = a1;
  return 0xD000000000000029;
}

void OUTLINED_FUNCTION_27_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

void OUTLINED_FUNCTION_28_4(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_29_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_30_3(uint64_t result)
{
  *(void *)(v1 - 120) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_31_2(uint64_t a1)
{
  *(void *)(v1 - 120) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_32_3()
{
  *(_WORD *)(v0 + 12) = 2080;
  return v1 + 12;
}

void OUTLINED_FUNCTION_34_1(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

void OUTLINED_FUNCTION_35_1(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, os_log_t log)
{
  _os_log_impl(a1, log, v10, a4, v11, 2u);
}

uint64_t OUTLINED_FUNCTION_36_0()
{
  *(_WORD *)(v0 + 12) = 2080;
  return v1 + 12;
}

uint64_t OUTLINED_FUNCTION_37_0(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 104));
}

uint64_t dispatch thunk of UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

void type metadata accessor for UncertaintyPromptMagicWordsActionEnforcer()
{
}

void type metadata accessor for UncertaintyPromptSequentialEnforcer()
{
}

void type metadata accessor for UserEntityVocabActionEnforcer()
{
}

void type metadata accessor for OverrideParseActionEnforcer()
{
}

void type metadata accessor for ExactShortcutActionEnforcer()
{
}

void type metadata accessor for ZeroAsrConfidenceActionEnforcer()
{
}

void type metadata accessor for ShadowLogActionEnforcer()
{
}

void type metadata accessor for ExecuteActionEnforcer()
{
}

void type metadata accessor for GiveUpRepeatActionEnforcer()
{
}

void type metadata accessor for MessageDictationActionEnforcer()
{
}

void type metadata accessor for SiriVocabActionEnforcer()
{
}

void type metadata accessor for UserConfirmationActionEnforcer()
{
}

void type metadata accessor for LongPayloadActionEnforcer()
{
}

void UncertaintyPromptSequentialEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  uint64_t v6 = *(void *)(a5 + 16);
  if (v6)
  {
    int v21 = a6;
    id v11 = (void *)(a5 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v12 = v11[3];
      uint64_t v13 = v11[4];
      __swift_project_boxed_opaque_existential_1(v11, v12);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 8))(v22, a1, a2, a3, a4, v12, v13);
      unint64_t v14 = v23;
      if (v23) {
        break;
      }
      v11 += 5;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        a6 = v21;
        goto LABEL_6;
      }
    }
    uint64_t v15 = v22[1];
    uint64_t v16 = LOBYTE(v22[0]);
    swift_bridgeObjectRelease();
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.ambiguityHandling);
    swift_bridgeObjectRetain_n();
    int v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      int v20 = (uint8_t *)OUTLINED_FUNCTION_29();
      v22[0] = OUTLINED_FUNCTION_7_1();
      *(_DWORD *)int v20 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v18, v19, "%s has overridden", v20, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *int v21 = v16;
    v21[1] = v15;
    v21[2] = v14;
  }
  else
  {
LABEL_6:
    *a6 = 0;
    a6[1] = 0;
    a6[2] = 0;
  }
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance UncertaintyPromptSequentialEnforcer(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  UncertaintyPromptSequentialEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(a1, a2, a3, a4, *v5, a5);
}

void GiveUpRepeatActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + *(int *)(OUTLINED_FUNCTION_51_0() + 36)) == 2 && *(unsigned char *)(a2 + 56) == 2)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    uint64_t v6 = (void *)OUTLINED_FUNCTION_11_9(v5, (uint64_t)static Logger.ambiguityHandling);
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_3_9(v7))
    {
      OUTLINED_FUNCTION_29();
      unint64_t v14 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_21_7(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GiveUpRepeatActionEnforcer.Type);
      uint64_t v8 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, (uint64_t *)&v14);
      OUTLINED_FUNCTION_38_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_12(&dword_1C9CFE000, v10, v11, "%s detected previous ASK_REPEAT and about to ASK_REPEAT again - overriding to GIVE_UP_REPEAT");
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

    unint64_t v14 = &type metadata for GiveUpRepeatActionEnforcer;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GiveUpRepeatActionEnforcer.Type);
    uint64_t v12 = String.init<A>(describing:)();
    *uint64_t v3 = 3;
    v3[1] = v12;
    v3[2] = v13;
  }
  else
  {
    OUTLINED_FUNCTION_20_7();
  }
}

void ExecuteActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a3 + *(int *)(OUTLINED_FUNCTION_51_0() + 36)) == 3 && *(unsigned char *)(a2 + 56) == 2)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    uint64_t v5 = (void *)OUTLINED_FUNCTION_11_9(v4, (uint64_t)static Logger.ambiguityHandling);
    os_log_type_t v6 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_3_9(v6))
    {
      OUTLINED_FUNCTION_29();
      uint64_t v13 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_21_7(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteActionEnforcer.Type);
      uint64_t v7 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, (uint64_t *)&v13);
      OUTLINED_FUNCTION_38_0();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_12(&dword_1C9CFE000, v9, v10, "%s detected previous GIVE_UP_REPEAT and about to ASK_REPEAT - overriding to EXECUTE_TOP_HYPOTHESIS");
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

    uint64_t v13 = &type metadata for ExecuteActionEnforcer;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ExecuteActionEnforcer.Type);
    uint64_t v11 = String.init<A>(describing:)();
    OUTLINED_FUNCTION_36_1(v11, v12);
  }
  else
  {
    OUTLINED_FUNCTION_20_7();
  }
}

uint64_t SiriVocabActionEnforcer.getTaskDetailsFromRankedAction(rankedActions:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier.NluComponent();
  int v58 = *(void (***)(char *, uint64_t))(v2 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v2);
  uint64_t v66 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  os_log_type_t v6 = (char *)&v52 - v5;
  uint64_t v7 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  uint64_t v67 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v65 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  uint64_t v60 = *(void *)(v9 - 8);
  id v61 = (void (*)(char *, unint64_t, uint64_t))v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  int v59 = *(void (***)(char *, void, uint64_t))(v12 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v62 = *(void *)(v64 - 8);
  MEMORY[0x1F4188790](v64);
  int v63 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for CamParse(0);
  MEMORY[0x1F4188790](v19);
  int v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for CamUSOParse(0);
  MEMORY[0x1F4188790](v22 - 8);
  if (!*(void *)(a1 + 16)) {
    return 0;
  }
  uint64_t v57 = (uint64_t)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for RankedAction();
  _s7SiriCam0B5ParseOWOcTm_1(a1+ *(int *)(v24 + 20)+ ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80)), (uint64_t)v21, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v25 = type metadata accessor for CamParse;
    uint64_t v26 = (uint64_t)v21;
LABEL_4:
    _s7SiriCam12RankedActionVWOhTm_0(v26, (void (*)(void))v25);
    return 0;
  }
  uint64_t v29 = v57;
  uint64_t v30 = outlined init with take of RankedAction((uint64_t)v21, v57, (void (*)(void))type metadata accessor for CamUSOParse);
  MEMORY[0x1CB78CBB0](v30);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v31 = v64;
  if (__swift_getEnumTagSinglePayload((uint64_t)v17, 1, v64) == 1)
  {
    _s7SiriCam12RankedActionVWOhTm_0(v29, (void (*)(void))type metadata accessor for CamUSOParse);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v17, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v62 + 32))(v63, v17, v31);
  unint64_t v32 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v33 = v32;
  if (v32 >> 62)
  {
    unint64_t v50 = v32;
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    unint64_t v33 = v50;
    if (v51) {
      goto LABEL_11;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v31);
    uint64_t v25 = type metadata accessor for CamUSOParse;
    uint64_t v26 = v57;
    goto LABEL_4;
  }
  if (!*(void *)((v32 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_22;
  }
LABEL_11:
  unint64_t v34 = v33 & 0xC000000000000001;
  unint64_t v35 = v33;
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v33 & 0xC000000000000001) == 0, v33);
  if (v34)
  {
    uint64_t v27 = MEMORY[0x1CB78D7C0](0, v35);
  }
  else
  {
    uint64_t v27 = *(void *)(v35 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v36 = v63;
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  ((void (*)(char *, uint64_t))v59[1])(v14, v12);
  uint64_t v37 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, void (*)(char *, unint64_t, uint64_t)))(v60 + 8))(v11, v61);
  uint64_t v38 = *(void *)(v37 + 16);
  if (v38)
  {
    uint64_t v53 = v27;
    id v61 = *(void (**)(char *, unint64_t, uint64_t))(v67 + 16);
    unint64_t v39 = v37 + ((*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80));
    LODWORD(v60) = *MEMORY[0x1E4FA2960];
    uint64_t v40 = v58++;
    int v59 = (void (**)(char *, void, uint64_t))(v40 + 13);
    v67 += 16;
    uint64_t v54 = *(void *)(v67 + 56);
    uint64_t v55 = (void (**)(char *, uint64_t))(v67 - 8);
    uint64_t v52 = v37;
    swift_bridgeObjectRetain();
    uint64_t v56 = v7;
    unint64_t v41 = v65;
    unint64_t v42 = v58;
    do
    {
      v61(v41, v39, v7);
      Siri_Nlu_External_UsoEntityIdentifier.sourceComponent.getter();
      id v43 = v6;
      os_log_type_t v44 = v66;
      (*v59)(v66, v60, v2);
      lazy protocol witness table accessor for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoEntityIdentifier.NluComponent and conformance Siri_Nlu_External_UsoEntityIdentifier.NluComponent, MEMORY[0x1E4FA2968]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      uint64_t v46 = v68;
      uint64_t v45 = v69;
      uint64_t v47 = *v42;
      uint64_t v48 = v44;
      os_log_type_t v6 = v43;
      uint64_t v7 = v56;
      (*v42)(v48, v2);
      v47(v6, v2);
      (*v55)(v41, v7);
      if (v45 == v46) {
        break;
      }
      v39 += v54;
      --v38;
    }
    while (v38);
    swift_bridgeObjectRelease_n();
    uint64_t v36 = v63;
    uint64_t v31 = v64;
    uint64_t v49 = v62;
    uint64_t v27 = v53;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = v62;
  }
  (*(void (**)(char *, uint64_t))(v49 + 8))(v36, v31);
  _s7SiriCam12RankedActionVWOhTm_0(v57, (void (*)(void))type metadata accessor for CamUSOParse);
  return v27;
}

uint64_t SiriVocabActionEnforcer.getTaskDetailsFromUserParse(topUserParse:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent();
  id v61 = *(char **)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v62 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?, Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?));
  MEMORY[0x1F4188790](v64);
  uint64_t v5 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  uint64_t v63 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v47 - v10;
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for CamUserParse(0);
  uint64_t v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (uint64_t *)((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)&v47 - v21;
  outlined init with copy of CamUserParse?(a1, (uint64_t)v16, &demangling cache variable for type metadata for CamUserParse?);
  if (__swift_getEnumTagSinglePayload((uint64_t)v16, 1, v17) == 1)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v16, &demangling cache variable for type metadata for CamUserParse?);
    return 0;
  }
  outlined init with take of RankedAction((uint64_t)v16, (uint64_t)v22, (void (*)(void))type metadata accessor for CamUserParse);
  _s7SiriCam0B5ParseOWOcTm_1((uint64_t)v22, (uint64_t)v20, (void (*)(void))type metadata accessor for CamUserParse);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v22, (void (*)(void))type metadata accessor for CamUserParse);
    uint64_t v23 = (uint64_t)v20;
LABEL_10:
    _s7SiriCam12RankedActionVWOhTm_0(v23, (void (*)(void))type metadata accessor for CamUserParse);
    return 0;
  }
  uint64_t v24 = *v20;
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend((id)v24, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v26 >> 62) {
    goto LABEL_37;
  }
  if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_38:
    swift_bridgeObjectRelease();
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v22, (void (*)(void))type metadata accessor for CamUserParse);
    goto LABEL_39;
  }
LABEL_7:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v26 & 0xC000000000000001) == 0, v26);
  if ((v26 & 0xC000000000000001) != 0)
  {
    uint64_t v27 = MEMORY[0x1CB78D7C0](0, v26);
  }
  else
  {
    uint64_t v27 = *(void *)(v26 + 32);
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  unint64_t v28 = static UsoConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v29 = v28;
  uint64_t v52 = v27;
  if (!(v28 >> 62))
  {
    if (!*(void *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_43;
    }
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v46)
  {
LABEL_13:
    specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v29 & 0xC000000000000001) == 0, v29);
    if ((v29 & 0xC000000000000001) != 0)
    {
      uint64_t v49 = MEMORY[0x1CB78D7C0](0, v29);
    }
    else
    {
      uint64_t v49 = *(void *)(v29 + 32);
      swift_retain();
    }
    swift_bridgeObjectRelease();
    self;
    uint64_t v30 = swift_dynamicCastObjCClass();
    if (!v30)
    {
      swift_unknownObjectRelease();
      swift_release();

      uint64_t v23 = (uint64_t)v22;
      goto LABEL_10;
    }
    uint64_t v31 = (void *)v30;
    id v48 = (id)v24;
    swift_unknownObjectRetain();
    id v32 = objc_msgSend(v31, sel_task);
    id v33 = objc_msgSend(v32, sel_identifiers);

    type metadata accessor for USOSerializedIdentifier();
    unint64_t v26 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
      if (!v34)
      {
LABEL_35:

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease_n();
        _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v22, (void (*)(void))type metadata accessor for CamUserParse);
        return v49;
      }
    }
    else
    {
      uint64_t v34 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (!v34) {
        goto LABEL_35;
      }
    }
    unint64_t v58 = v26 & 0xC000000000000001;
    uint64_t v57 = v61 + 104;
    unint64_t v50 = (void (**)(char *, uint64_t, uint64_t))(v61 + 32);
    unsigned int v56 = *MEMORY[0x1E4FA2C08];
    uint64_t v53 = v61 + 8;
    unint64_t v54 = v26;
    uint64_t v24 = 4;
    unint64_t v35 = &off_1E65A2000;
    uint64_t v55 = v34;
    int v59 = v11;
    while (1)
    {
      if (v58) {
        uint64_t v36 = (char *)MEMORY[0x1CB78D7C0](v24 - 4, v26);
      }
      else {
        uint64_t v36 = (char *)*(id *)(v26 + 8 * v24);
      }
      uint64_t v37 = v36;
      if (__OFADD__(v24 - 4, 1))
      {
        __break(1u);
LABEL_37:
        swift_bridgeObjectRetain();
        uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v45) {
          goto LABEL_38;
        }
        goto LABEL_7;
      }
      uint64_t v60 = v24 - 3;
      id v38 = [v36 (SEL)v35[337]];
      id v61 = v37;
      if (v38)
      {
        unint64_t v39 = v38;
        uint64_t v65 = 0;
        char v66 = 1;
        static Int._conditionallyBridgeFromObjectiveC(_:result:)();
      }
      Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent.init(rawValue:)();
      (*(void (**)(char *, void, uint64_t))v57)(v11, v56, v2);
      __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v2);
      uint64_t v40 = (uint64_t)&v5[*(int *)(v64 + 48)];
      outlined init with copy of CamUserParse?((uint64_t)v13, (uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
      outlined init with copy of CamUserParse?((uint64_t)v11, v40, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
      if (__swift_getEnumTagSinglePayload((uint64_t)v5, 1, v2) == 1)
      {
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        if (__swift_getEnumTagSinglePayload(v40, 1, v2) == 1)
        {
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);

          goto LABEL_35;
        }
      }
      else
      {
        uint64_t v41 = v63;
        outlined init with copy of CamUserParse?((uint64_t)v5, v63, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        if (__swift_getEnumTagSinglePayload(v40, 1, v2) != 1)
        {
          unint64_t v42 = v62;
          (*v50)(v62, v40, v2);
          lazy protocol witness table accessor for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent(&lazy protocol witness table cache variable for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent, MEMORY[0x1E4FA2C10]);
          int v51 = dispatch thunk of static Equatable.== infix(_:_:)();
          id v43 = *(void (**)(uint64_t, uint64_t))v53;
          (*(void (**)(char *, uint64_t))v53)(v42, v2);
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v59, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
          v43(v41, v2);
          unint64_t v35 = &off_1E65A2000;
          outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);

          unint64_t v26 = v54;
          if (v51) {
            goto LABEL_35;
          }
          goto LABEL_32;
        }
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v59, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        outlined destroy of RRDataSourceMetadataValue?((uint64_t)v13, &demangling cache variable for type metadata for Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?);
        (*(void (**)(uint64_t, uint64_t))v53)(v41, v2);
        unint64_t v26 = v54;
      }
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)v5, &demangling cache variable for type metadata for (Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?, Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent?));

LABEL_32:
      ++v24;
      uint64_t v11 = v59;
      if (v60 == v55) {
        goto LABEL_35;
      }
    }
  }
LABEL_43:
  swift_bridgeObjectRelease();
  _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v22, (void (*)(void))type metadata accessor for CamUserParse);
  swift_unknownObjectRelease();
LABEL_39:

  return 0;
}

void SiriVocabActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  OUTLINED_FUNCTION_18_11();
  uint64_t v1 = v0;
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  uint64_t v3 = OUTLINED_FUNCTION_11_1(v2);
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_1();
  uint64_t v6 = v5 - v4;
  uint64_t v7 = type metadata accessor for CamInput();
  uint64_t v8 = OUTLINED_FUNCTION_34_2(v7);
  if (v9)
  {
    if (!SiriVocabActionEnforcer.getTaskDetailsFromRankedAction(rankedActions:)(v8)) {
      goto LABEL_43;
    }
    int v11 = v10;
  }
  else
  {
    CamInput.topUserParse.getter(v6);
    uint64_t v12 = SiriVocabActionEnforcer.getTaskDetailsFromUserParse(topUserParse:)(v6);
    int v11 = v13;
    outlined destroy of RRDataSourceMetadataValue?(v6, &demangling cache variable for type metadata for CamUserParse?);
    if (!v12) {
      goto LABEL_43;
    }
  }
  swift_retain();
  if (*(void *)(UsoTask.arguments.getter() + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000);
    int v15 = v14;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    int v15 = 0;
  }
  if (UsoTask.verbString.getter() == 1684956531 && v16 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    OUTLINED_FUNCTION_45_0();
    OUTLINED_FUNCTION_42_0();
  }
  if (UsoTask.baseEntityAsString.getter() != 0x4D5F6E6F6D6D6F63 || v18 != 0xEE00656761737365)
  {
    OUTLINED_FUNCTION_9_12();
    OUTLINED_FUNCTION_42_0();
    if (v15 & 1) != 0 && (v11) {
      goto LABEL_20;
    }
    goto LABEL_26;
  }
  swift_bridgeObjectRelease();
  if ((v15 & v11 & 1) == 0)
  {
LABEL_26:
    if (UsoTask.verbString.getter() == 1819042147 && v30 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_42_0();
    }
    if (UsoTask.baseEntityAsString.getter() == 0xD000000000000010 && v32 == 0x80000001C9DA4030)
    {
      swift_bridgeObjectRelease();
      if (v15 & v11)
      {
        if (one-time initialization token for ambiguityHandling != -1) {
          swift_once();
        }
        uint64_t v33 = type metadata accessor for Logger();
        uint64_t v21 = OUTLINED_FUNCTION_11_9(v33, (uint64_t)static Logger.ambiguityHandling);
        os_log_type_t v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v21, v34))
        {
          unint64_t v35 = (_DWORD *)OUTLINED_FUNCTION_29();
          os_log_type_t v44 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
          *unint64_t v35 = 136315138;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
          uint64_t v36 = String.init<A>(describing:)();
          uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)&v44);
          OUTLINED_FUNCTION_39_0(v38);
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_44_0(&dword_1C9CFE000, v39, v40, "%s detected phone call request with contact name");
          OUTLINED_FUNCTION_32_4();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
        }
        goto LABEL_41;
      }
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      OUTLINED_FUNCTION_42_0();
    }
    swift_release_n();
LABEL_43:
    OUTLINED_FUNCTION_20_7();
    goto LABEL_44;
  }
LABEL_20:
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = OUTLINED_FUNCTION_11_9(v20, (uint64_t)static Logger.ambiguityHandling);
  os_log_type_t v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (_DWORD *)OUTLINED_FUNCTION_29();
    uint64_t v24 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
    *uint64_t v23 = 136315138;
    os_log_type_t v44 = v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
    uint64_t v25 = String.init<A>(describing:)();
    uint64_t v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)&v44);
    OUTLINED_FUNCTION_39_0(v27);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_44_0(&dword_1C9CFE000, v28, v29, "%s detected message sending request with contact name");
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
LABEL_41:

  os_log_type_t v44 = &type metadata for SiriVocabActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriVocabActionEnforcer.Type);
  uint64_t v41 = OUTLINED_FUNCTION_48_0();
  uint64_t v43 = v42;
  swift_release_n();
  void *v1 = 1;
  v1[1] = v41;
  v1[2] = v43;
LABEL_44:
  OUTLINED_FUNCTION_17_9();
}

void MessageDictationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  OUTLINED_FUNCTION_18_11();
  int v98 = v2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  uint64_t v4 = OUTLINED_FUNCTION_11_1(v3);
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_1();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for CamUserParse(0);
  OUTLINED_FUNCTION_1_3();
  uint64_t v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (void **)((char *)v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v10);
  int v14 = (char *)v95 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v16 = OUTLINED_FUNCTION_11_1(v15);
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_14_11(v17, v95[0]);
  uint64_t v97 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1_2();
  v95[2] = v18;
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_7_6();
  v95[1] = v20;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v21);
  uint64_t v22 = OUTLINED_FUNCTION_29_3();
  uint64_t v23 = OUTLINED_FUNCTION_11_1(v22);
  MEMORY[0x1F4188790](v23);
  OUTLINED_FUNCTION_7_6();
  uint64_t v96 = v24;
  uint64_t v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v26 = OUTLINED_FUNCTION_11_1(v25);
  MEMORY[0x1F4188790](v26);
  OUTLINED_FUNCTION_26_6();
  uint64_t v27 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v28);
  OUTLINED_FUNCTION_7_6();
  uint64_t v30 = v29;
  uint64_t v31 = type metadata accessor for CamInput();
  OUTLINED_FUNCTION_34_2(v31);
  if (v32)
  {
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_5_9(v1, 1, v27);
    if (v62)
    {
      uint64_t v33 = &demangling cache variable for type metadata for RankedAction?;
      uint64_t v34 = v1;
    }
    else
    {
      outlined init with take of RankedAction(v1, v30, (void (*)(void))type metadata accessor for RankedAction);
      _s7SiriCam0B5ParseOWOcTm_1(v30 + *(int *)(v27 + 20), v0, (void (*)(void))type metadata accessor for CamParse);
      if (swift_getEnumCaseMultiPayload())
      {
        _s7SiriCam12RankedActionVWOhTm_0(v30, (void (*)(void))type metadata accessor for RankedAction);
        uint64_t v36 = type metadata accessor for CamParse;
LABEL_10:
        unint64_t v37 = (void (*)(void))v36;
        uint64_t v38 = v0;
LABEL_23:
        _s7SiriCam12RankedActionVWOhTm_0(v38, v37);
        goto LABEL_24;
      }
      uint64_t v40 = v96;
      uint64_t v41 = outlined init with take of RankedAction(v0, v96, (void (*)(void))type metadata accessor for CamUSOParse);
      MEMORY[0x1CB78CBB0](v41);
      uint64_t v42 = v95[3];
      specialized Collection.first.getter();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_9(v42, 1, v97);
      if (!v62)
      {
        OUTLINED_FUNCTION_46_0();
        v47();
        unint64_t v48 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        if (v48 >> 62)
        {
          OUTLINED_FUNCTION_22_7();
          uint64_t v90 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v90) {
            goto LABEL_34;
          }
        }
        else if (*(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
LABEL_34:
          OUTLINED_FUNCTION_49_0();
          OUTLINED_FUNCTION_35_2();
          uint64_t v94 = v93;
          swift_bridgeObjectRelease();
          uint64_t v57 = UsoTask.arguments.getter();
          uint64_t v58 = OUTLINED_FUNCTION_31_3(v57);
          swift_bridgeObjectRelease();
          if (v58)
          {
            OUTLINED_FUNCTION_49_0();
            if (v94) {
              OUTLINED_FUNCTION_35_2();
            }
            else {
              swift_retain();
            }
            swift_bridgeObjectRelease();
            uint64_t v54 = dispatch thunk of UsoValue.getAsEntity()();
            swift_release();
            uint64_t v59 = OUTLINED_FUNCTION_37_1();
            v60(v59);
            _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
            uint64_t v55 = (void (*)(void))type metadata accessor for RankedAction;
            uint64_t v56 = v30;
            goto LABEL_38;
          }
          swift_release();
LABEL_22:
          uint64_t v49 = OUTLINED_FUNCTION_37_1();
          v50(v49);
          _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
          unint64_t v37 = (void (*)(void))type metadata accessor for RankedAction;
          uint64_t v38 = v30;
          goto LABEL_23;
        }
        swift_bridgeObjectRelease();
        goto LABEL_22;
      }
      _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
      _s7SiriCam12RankedActionVWOhTm_0(v30, (void (*)(void))type metadata accessor for RankedAction);
      uint64_t v33 = &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?;
      uint64_t v34 = v42;
    }
LABEL_16:
    outlined destroy of RRDataSourceMetadataValue?(v34, v33);
LABEL_24:
    int v51 = v98;
    *int v98 = 0;
    v51[1] = 0;
    v51[2] = 0;
    goto LABEL_25;
  }
  CamInput.topUserParse.getter(v7);
  OUTLINED_FUNCTION_5_9(v7, 1, v8);
  if (v62)
  {
    uint64_t v33 = &demangling cache variable for type metadata for CamUserParse?;
    uint64_t v34 = v7;
    goto LABEL_16;
  }
  uint64_t v0 = (uint64_t)v14;
  outlined init with take of RankedAction(v7, (uint64_t)v14, (void (*)(void))type metadata accessor for CamUserParse);
  _s7SiriCam0B5ParseOWOcTm_1((uint64_t)v14, (uint64_t)v12, (void (*)(void))type metadata accessor for CamUserParse);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v14, (void (*)(void))type metadata accessor for CamUserParse);
    uint64_t v38 = (uint64_t)v12;
    unint64_t v37 = (void (*)(void))type metadata accessor for CamUserParse;
    goto LABEL_23;
  }
  uint64_t v43 = *v12;
  swift_bridgeObjectRelease();
  id v44 = objc_msgSend(v43, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v45 >> 62))
  {
    if (*(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_19;
    }
LABEL_78:
    swift_bridgeObjectRelease();
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v14, (void (*)(void))type metadata accessor for CamUserParse);
LABEL_79:

    goto LABEL_24;
  }
  OUTLINED_FUNCTION_22_7();
  uint64_t v88 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v88) {
    goto LABEL_78;
  }
LABEL_19:
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v45 & 0xC000000000000001) == 0, v45);
  if ((v45 & 0xC000000000000001) != 0) {
    OUTLINED_FUNCTION_35_2();
  }
  else {
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  unint64_t v46 = static UsoConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  if (v46 >> 62)
  {
    OUTLINED_FUNCTION_22_7();
    uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v89) {
      goto LABEL_28;
    }
    goto LABEL_82;
  }
  if (!*(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_82:
    swift_bridgeObjectRelease();
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v14, (void (*)(void))type metadata accessor for CamUserParse);
    swift_unknownObjectRelease();
    goto LABEL_79;
  }
LABEL_28:
  OUTLINED_FUNCTION_49_0();
  OUTLINED_FUNCTION_35_2();
  uint64_t v92 = v91;
  swift_bridgeObjectRelease();
  uint64_t v52 = UsoTask.arguments.getter();
  uint64_t v53 = OUTLINED_FUNCTION_31_3(v52);
  swift_bridgeObjectRelease();
  if (!v53)
  {
    swift_release();
    swift_unknownObjectRelease();

    uint64_t v36 = type metadata accessor for CamUserParse;
    goto LABEL_10;
  }
  OUTLINED_FUNCTION_49_0();
  if (v92) {
    OUTLINED_FUNCTION_35_2();
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v54 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  swift_unknownObjectRelease();

  uint64_t v55 = (void (*)(void))type metadata accessor for CamUserParse;
  uint64_t v56 = v0;
LABEL_38:
  _s7SiriCam12RankedActionVWOhTm_0(v56, v55);
  if (!v54)
  {
LABEL_75:
    swift_release();
    goto LABEL_24;
  }
  BOOL v62 = UsoTask.verbString.getter() == 1684956531 && v61 == 0xE400000000000000;
  if (v62)
  {
LABEL_50:
    swift_bridgeObjectRelease();
    goto LABEL_51;
  }
  char v63 = OUTLINED_FUNCTION_45_0();
  swift_bridgeObjectRelease();
  if ((v63 & 1) == 0)
  {
    if (UsoTask.verbString.getter() != 0x657461647075 || v64 != 0xE600000000000000)
    {
      char v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v66 & 1) == 0) {
        goto LABEL_74;
      }
      goto LABEL_51;
    }
    goto LABEL_50;
  }
LABEL_51:
  if (UsoTask.baseEntityAsString.getter() == 0x4D5F6E6F6D6D6F63 && v67 == 0xEE00656761737365) {
    goto LABEL_58;
  }
  char v69 = OUTLINED_FUNCTION_9_12();
  swift_bridgeObjectRelease();
  if (v69) {
    goto LABEL_59;
  }
  if (UsoTask.baseEntityAsString.getter() == 0xD000000000000013 && v70 == 0x80000001C9DA4050)
  {
LABEL_58:
    swift_bridgeObjectRelease();
  }
  else
  {
    char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v87 & 1) == 0) {
      goto LABEL_74;
    }
  }
LABEL_59:
  uint64_t v71 = *(void *)(UsoEntity.attributes.getter() + 16);
  swift_bridgeObjectRelease();
  if (v71 != 1)
  {
LABEL_74:
    swift_release();
    goto LABEL_75;
  }
  if (*(void *)(UsoEntity.attributes.getter() + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(0x6F43676E69727473, 0xED0000746E65746ELL);
    char v73 = v72;
    swift_bridgeObjectRelease();
    if (v73) {
      goto LABEL_68;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  if (!*(void *)(UsoEntity.attributes.getter() + 16))
  {
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_24;
  }
  specialized __RawDictionaryStorage.find<A>(_:)(0x746E65746E6F63, 0xE700000000000000);
  char v75 = v74;
  swift_bridgeObjectRelease();
  if ((v75 & 1) == 0) {
    goto LABEL_74;
  }
LABEL_68:
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v76 = type metadata accessor for Logger();
  os_log_type_t v77 = OUTLINED_FUNCTION_11_9(v76, (uint64_t)static Logger.ambiguityHandling);
  os_log_type_t v78 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v77, v78))
  {
    uint64_t v79 = (uint8_t *)OUTLINED_FUNCTION_29();
    uint64_t v80 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
    BOOL v99 = &type metadata for MessageDictationActionEnforcer;
    uint64_t v100 = v80;
    *(_DWORD *)uint64_t v79 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageDictationActionEnforcer.Type);
    uint64_t v81 = String.init<A>(describing:)();
    BOOL v99 = (ValueMetadata *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v77, v78, "%s detected message content dictation", v79, 0xCu);
    OUTLINED_FUNCTION_32_4();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  uint64_t v100 = &type metadata for MessageDictationActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MessageDictationActionEnforcer.Type);
  uint64_t v83 = String.init<A>(describing:)();
  uint64_t v85 = v84;
  swift_release();
  swift_release();
  uint64_t v86 = v98;
  *int v98 = 1;
  v86[1] = v83;
  v86[2] = v85;
LABEL_25:
  OUTLINED_FUNCTION_17_9();
}

void UserConfirmationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  OUTLINED_FUNCTION_18_11();
  char v66 = v5;
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CamUserParse?);
  uint64_t v7 = OUTLINED_FUNCTION_11_1(v6);
  MEMORY[0x1F4188790](v7);
  uint64_t v8 = OUTLINED_FUNCTION_27_5();
  uint64_t v9 = type metadata accessor for CamUserParse(v8);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_24_9();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v15 = OUTLINED_FUNCTION_11_1(v14);
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_15_9(v16, v60);
  uint64_t v65 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1_2();
  uint64_t v61 = v17;
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_5_2();
  uint64_t v60 = v19;
  MEMORY[0x1F4188790](v20);
  BOOL v62 = (char *)&v60 - v21;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v22);
  uint64_t v23 = OUTLINED_FUNCTION_29_3();
  uint64_t v24 = OUTLINED_FUNCTION_11_1(v23);
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_25_6(v25, v60);
  uint64_t v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  uint64_t v27 = OUTLINED_FUNCTION_11_1(v26);
  MEMORY[0x1F4188790](v27);
  OUTLINED_FUNCTION_28_5();
  uint64_t v28 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_26_6();
  uint64_t v30 = type metadata accessor for CamInput();
  OUTLINED_FUNCTION_34_2(v30);
  if (v31)
  {
    specialized Collection.first.getter();
    OUTLINED_FUNCTION_5_9(v3, 1, v28);
    if (!v32)
    {
      outlined init with take of RankedAction(v3, v2, (void (*)(void))type metadata accessor for RankedAction);
      _s7SiriCam0B5ParseOWOcTm_1(v2 + *(int *)(v28 + 20), v1, (void (*)(void))type metadata accessor for CamParse);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      unint64_t v35 = v66;
      if (EnumCaseMultiPayload)
      {
        _s7SiriCam12RankedActionVWOhTm_0(v2, (void (*)(void))type metadata accessor for RankedAction);
        unint64_t v37 = (void (*)(void))type metadata accessor for CamParse;
        uint64_t v38 = v1;
LABEL_12:
        _s7SiriCam12RankedActionVWOhTm_0(v38, v37);
        goto LABEL_29;
      }
      uint64_t v40 = v64;
      uint64_t v41 = outlined init with take of RankedAction(v1, v64, (void (*)(void))type metadata accessor for CamUSOParse);
      MEMORY[0x1CB78CBB0](v41);
      uint64_t v42 = v63;
      specialized Collection.first.getter();
      swift_bridgeObjectRelease();
      uint64_t v43 = v65;
      OUTLINED_FUNCTION_5_9(v42, 1, v65);
      if (v32)
      {
        _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
        _s7SiriCam12RankedActionVWOhTm_0(v2, (void (*)(void))type metadata accessor for RankedAction);
        outlined destroy of RRDataSourceMetadataValue?(v42, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        goto LABEL_29;
      }
      uint64_t v52 = v61;
      int v51 = v62;
      OUTLINED_FUNCTION_46_0();
      v53();
      char v54 = Siri_Nlu_External_UserDialogAct.hasAccepted.getter();
      (*(void (**)(uint64_t, char *, uint64_t))(v52 + 16))(v60, v51, v43);
      if (v54)
      {
        uint64_t v55 = *(void (**)(void))(v52 + 8);
        OUTLINED_FUNCTION_40_0();
        v55();
      }
      else
      {
        char v56 = Siri_Nlu_External_UserDialogAct.hasRejected.getter();
        uint64_t v55 = *(void (**)(void))(v52 + 8);
        OUTLINED_FUNCTION_40_0();
        v55();
        if ((v56 & 1) == 0)
        {
          OUTLINED_FUNCTION_40_0();
          v55();
          _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
          unint64_t v37 = (void (*)(void))type metadata accessor for RankedAction;
          uint64_t v38 = v2;
          goto LABEL_12;
        }
      }
      uint64_t v67 = &type metadata for UserConfirmationActionEnforcer;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserConfirmationActionEnforcer.Type);
      uint64_t v57 = OUTLINED_FUNCTION_48_0();
      uint64_t v59 = v58;
      ((void (*)(char *, uint64_t))v55)(v51, v43);
      _s7SiriCam12RankedActionVWOhTm_0(v40, (void (*)(void))type metadata accessor for CamUSOParse);
      _s7SiriCam12RankedActionVWOhTm_0(v2, (void (*)(void))type metadata accessor for RankedAction);
      *unint64_t v35 = 1;
      v35[1] = v57;
      v35[2] = v59;
      goto LABEL_30;
    }
    uint64_t v33 = &demangling cache variable for type metadata for RankedAction?;
    uint64_t v34 = v3;
    goto LABEL_8;
  }
  CamInput.topUserParse.getter(v0);
  OUTLINED_FUNCTION_5_9(v0, 1, v9);
  if (v32)
  {
    uint64_t v33 = &demangling cache variable for type metadata for CamUserParse?;
    uint64_t v34 = v0;
LABEL_8:
    outlined destroy of RRDataSourceMetadataValue?(v34, v33);
LABEL_9:
    unint64_t v35 = v66;
LABEL_29:
    *unint64_t v35 = 0;
    v35[1] = 0;
    v35[2] = 0;
    goto LABEL_30;
  }
  outlined init with take of RankedAction(v0, (uint64_t)v13, (void (*)(void))type metadata accessor for CamUserParse);
  _s7SiriCam0B5ParseOWOcTm_1((uint64_t)v13, (uint64_t)v4, (void (*)(void))type metadata accessor for CamUserParse);
  int v39 = swift_getEnumCaseMultiPayload();
  if (v39 == 1)
  {
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for CamUserParse);
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v4, (void (*)(void))type metadata accessor for CamUserParse);
    goto LABEL_9;
  }
  id v44 = *v4;
  swift_bridgeObjectRelease();
  id v45 = objc_msgSend(v44, sel_userDialogActs);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SIRINLUUserDialogAct);
  unint64_t v46 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v46 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v47 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v47 = *(void *)((v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v35 = v66;
  if (!v47)
  {
    swift_bridgeObjectRelease();
    _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for CamUserParse);

    goto LABEL_29;
  }
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v46 & 0xC000000000000001) == 0, v46);
  if ((v46 & 0xC000000000000001) != 0) {
    MEMORY[0x1CB78D7C0](0, v46);
  }
  else {
    swift_unknownObjectRetain();
  }
  swift_bridgeObjectRelease();
  self;
  if (!swift_dynamicCastObjCClass())
  {
    self;
    if (!swift_dynamicCastObjCClass())
    {
      _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for CamUserParse);

      swift_unknownObjectRelease();
      goto LABEL_29;
    }
  }
  uint64_t v67 = &type metadata for UserConfirmationActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserConfirmationActionEnforcer.Type);
  uint64_t v48 = OUTLINED_FUNCTION_48_0();
  uint64_t v50 = v49;
  swift_unknownObjectRelease();

  _s7SiriCam12RankedActionVWOhTm_0((uint64_t)v13, (void (*)(void))type metadata accessor for CamUserParse);
  *unint64_t v35 = 1;
  v35[1] = v48;
  v35[2] = v50;
LABEL_30:
  OUTLINED_FUNCTION_17_9();
}

void LongPayloadActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 16)) {
    goto LABEL_12;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002BLL, 0x80000001C9DA15F0);
  if ((v5 & 1) == 0) {
    goto LABEL_12;
  }
  id v6 = *(id *)(*(void *)(a1 + 56) + 8 * v4);
  Swift::Int v7 = MLMultiArray.toIntScalar()();
  if (v8)
  {

LABEL_12:
    OUTLINED_FUNCTION_20_7();
    return;
  }
  uint64_t v9 = v7;

  if (v9 < 21 || *(unsigned char *)(a2 + 56) != 2) {
    goto LABEL_12;
  }
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = (void *)OUTLINED_FUNCTION_11_9(v10, (uint64_t)static Logger.ambiguityHandling);
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (OUTLINED_FUNCTION_3_9(v12))
  {
    OUTLINED_FUNCTION_29();
    uint64_t v19 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
    OUTLINED_FUNCTION_21_7(4.8149e-34);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LongPayloadActionEnforcer.Type);
    uint64_t v13 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, (uint64_t *)&v19);
    OUTLINED_FUNCTION_33_2();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_5_12(&dword_1C9CFE000, v15, v16, "%s detected long utterance");
    OUTLINED_FUNCTION_10_7();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  uint64_t v19 = &type metadata for LongPayloadActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for LongPayloadActionEnforcer.Type);
  uint64_t v17 = String.init<A>(describing:)();
  OUTLINED_FUNCTION_36_1(v17, v18);
}

uint64_t ShadowLogActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_51_0();
  unsigned __int8 v4 = UUID.uuid.getter();
  uint64_t v5 = 0;
  uint64_t result = 0;
  uint64_t v7 = 0;
  if (*(unsigned char *)(a2 + 56) == 2 && v4 <= 0xCu)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ShadowLogActionEnforcer.Type);
    uint64_t result = String.init<A>(describing:)();
    uint64_t v5 = 1;
  }
  *uint64_t v2 = v5;
  v2[1] = result;
  v2[2] = v7;
  return result;
}

void UncertaintyPromptMagicWordsActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v4 = *(void **)(a3 + *(int *)(OUTLINED_FUNCTION_51_0() + 32));
  if (v4)
  {
    id v5 = objc_msgSend(v4, sel_recognition);
    if (v5)
    {
      id v6 = v5;
      id v7 = objc_msgSend(v5, sel_aceRecognition);

      if (v7)
      {
        specialized TopRecognitionExtractor.getTopRecognition(recognition:)(v7);
        String.lowercased()();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type String and conformance String();
        char v8 = OUTLINED_FUNCTION_30_4();
        char v9 = OUTLINED_FUNCTION_30_4();
        swift_bridgeObjectRelease();
        if (v8)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UncertaintyPromptMagicWordsActionEnforcer.Type);
          uint64_t v10 = String.init<A>(describing:)();
          uint64_t v12 = v11;

          uint64_t v13 = 2;
LABEL_11:
          *uint64_t v3 = v13;
          v3[1] = v10;
          v3[2] = v12;
          return;
        }
        if (v9)
        {
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UncertaintyPromptMagicWordsActionEnforcer.Type);
          uint64_t v10 = String.init<A>(describing:)();
          uint64_t v12 = v14;

          uint64_t v13 = 3;
          goto LABEL_11;
        }
      }
    }
  }
  OUTLINED_FUNCTION_20_7();
}

void ZeroAsrConfidenceActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16)
    && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000002CLL, 0x80000001C9DA1510), (v5 & 1) != 0)
    && (id v6 = *(id *)(*(void *)(a1 + 56) + 8 * v4),
        uint64_t v7 = MLMultiArray.toDoubleArray()(),
        v6,
        double v8 = COERCE_DOUBLE(specialized Sequence<>.min()(v7)),
        char v10 = v9,
        swift_bridgeObjectRelease(),
        (v10 & 1) == 0 && v8 <= 0.01 && *(unsigned char *)(a2 + 56) == 2))
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    uint64_t v12 = (void *)OUTLINED_FUNCTION_11_9(v11, (uint64_t)static Logger.ambiguityHandling);
    os_log_type_t v13 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_3_9(v13))
    {
      OUTLINED_FUNCTION_29();
      uint64_t v20 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
      OUTLINED_FUNCTION_21_7(4.8149e-34);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZeroAsrConfidenceActionEnforcer.Type);
      uint64_t v14 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, (uint64_t *)&v20);
      OUTLINED_FUNCTION_33_2();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_5_12(&dword_1C9CFE000, v16, v17, "%s detected only zero ASR confidence scores - overriding to EXECUTE_TOP_HYPOTHESIS");
      OUTLINED_FUNCTION_10_7();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

    uint64_t v20 = &type metadata for ZeroAsrConfidenceActionEnforcer;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ZeroAsrConfidenceActionEnforcer.Type);
    uint64_t v18 = String.init<A>(describing:)();
    OUTLINED_FUNCTION_36_1(v18, v19);
  }
  else
  {
    OUTLINED_FUNCTION_20_7();
  }
}

void ExactShortcutActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
}

{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;
  uint64_t *v4;
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  void (*v41)(void);
  char v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unsigned int *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;

  OUTLINED_FUNCTION_18_11();
  uint64_t v59 = v2;
  uint64_t v60 = v1;
  uint64_t v61 = v4;
  BOOL v62 = v3;
  uint64_t v63 = v5;
  uint64_t v7 = v6;
  char v66 = v8;
  char v9 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  OUTLINED_FUNCTION_1_2();
  uint64_t v64 = v10;
  MEMORY[0x1F4188790](v11);
  os_log_type_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_1();
  uint64_t v18 = v17 - v16;
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v20 = OUTLINED_FUNCTION_11_1(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_24_9();
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v59 - v22;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_2_1();
  uint64_t v27 = v26 - v25;
  uint64_t v28 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v29);
  OUTLINED_FUNCTION_25_6(v30, (uint64_t)v59);
  uint64_t v31 = *(void *)(v7 + *(int *)(type metadata accessor for CamInput() + 44));
  if (!*(void *)(v31 + 16)) {
    goto LABEL_22;
  }
  char v32 = type metadata accessor for RankedAction();
  uint64_t v33 = OUTLINED_FUNCTION_9_6(v32);
  _s7SiriCam0B5ParseOWOcTm_1(v31+ *(int *)(v33 + 28)+ ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80)), v27, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    unint64_t v35 = type metadata accessor for CamParse;
LABEL_21:
    _s7SiriCam12RankedActionVWOhTm_0(v27, (void (*)(void))v35);
LABEL_22:
    uint64_t v58 = v66;
    *char v66 = 0;
    v58[1] = 0;
    v58[2] = 0;
    goto LABEL_23;
  }
  uint64_t v36 = v27;
  uint64_t v27 = v65;
  outlined init with take of RankedAction(v36, v65, (void (*)(void))type metadata accessor for CamUSOParse);
  unint64_t v37 = v27 + *(int *)(v28 + 20);
  uint64_t v38 = v64;
  (*(void (**)(char *, void, uint64_t))(v64 + 104))(v23, *v63, v9);
  __swift_storeEnumTagSinglePayload((uint64_t)v23, 0, 1, v9);
  int v39 = v18 + *(int *)(v14 + 48);
  outlined init with copy of CamUserParse?(v37, v18, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  outlined init with copy of CamUserParse?((uint64_t)v23, v39, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_5_9(v18, 1, v9);
  if (v40)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    OUTLINED_FUNCTION_5_9(v39, 1, v9);
    if (v40)
    {
      outlined destroy of RRDataSourceMetadataValue?(v18, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      goto LABEL_14;
    }
LABEL_12:
    outlined destroy of RRDataSourceMetadataValue?(v18, (uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
LABEL_20:
    unint64_t v35 = type metadata accessor for CamUSOParse;
    goto LABEL_21;
  }
  outlined init with copy of CamUserParse?(v18, v0, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_5_9(v39, 1, v9);
  if (v40)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v0, v9);
    goto LABEL_12;
  }
  OUTLINED_FUNCTION_46_0();
  v41();
  lazy protocol witness table accessor for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
  uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v43 = *(void (**)(char *, uint64_t))(v38 + 8);
  v43(v13, v9);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v23, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v43((char *)v0, v9);
  outlined destroy of RRDataSourceMetadataValue?(v18, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  if ((v42 & 1) == 0) {
    goto LABEL_20;
  }
LABEL_14:
  if (*(unsigned char *)(v62 + 56) != 2) {
    goto LABEL_20;
  }
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  id v44 = type metadata accessor for Logger();
  id v45 = OUTLINED_FUNCTION_11_9(v44, (uint64_t)static Logger.ambiguityHandling);
  unint64_t v46 = static os_log_type_t.info.getter();
  uint64_t v47 = os_log_type_enabled(v45, v46);
  uint64_t v49 = v60;
  uint64_t v48 = v61;
  if (v47)
  {
    uint64_t v50 = (uint8_t *)OUTLINED_FUNCTION_29();
    int v51 = OUTLINED_FUNCTION_7_1();
    uint64_t v67 = v49;
    uint64_t v68 = v51;
    *(_DWORD *)uint64_t v50 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(v48);
    uint64_t v52 = String.init<A>(describing:)();
    uint64_t v67 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, &v68);
    uint64_t v27 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v45, v46, v59, v50, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  uint64_t v68 = v49;
  __swift_instantiateConcreteTypeFromMangledName(v48);
  char v54 = OUTLINED_FUNCTION_48_0();
  char v56 = v55;
  _s7SiriCam12RankedActionVWOhTm_0(v27, (void (*)(void))type metadata accessor for CamUSOParse);
  uint64_t v57 = v66;
  *char v66 = 1;
  v57[1] = v54;
  id v57[2] = v56;
LABEL_23:
  OUTLINED_FUNCTION_17_9();
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance ExactShortcutActionEnforcer()
{
}

void OverrideParseActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
}

void protocol witness for UncertaintyPromptActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:) in conformance OverrideParseActionEnforcer()
{
}

void UserEntityVocabActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)()
{
  OUTLINED_FUNCTION_18_11();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  id v6 = v5;
  uint64_t v108 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier.NluComponent();
  OUTLINED_FUNCTION_1_2();
  uint64_t v102 = v7;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_5_2();
  uint64_t v107 = v9;
  MEMORY[0x1F4188790](v10);
  uint64_t v106 = (char *)v96 - v11;
  type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  OUTLINED_FUNCTION_1_2();
  uint64_t v109 = v13;
  uint64_t v110 = v12;
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_7_6();
  uint64_t v105 = v14;
  type metadata accessor for Siri_Nlu_External_UsoGraph();
  OUTLINED_FUNCTION_1_2();
  uint64_t v104 = v15;
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_28_5();
  type metadata accessor for Siri_Nlu_External_UserStatedTask();
  OUTLINED_FUNCTION_1_2();
  uint64_t v103 = v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  uint64_t v20 = OUTLINED_FUNCTION_11_1(v19);
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_27_5();
  uint64_t v113 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  OUTLINED_FUNCTION_1_2();
  uint64_t v111 = v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = OUTLINED_FUNCTION_14_11(v23, v96[0]);
  type metadata accessor for CamParse(v24);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_2_1();
  uint64_t v28 = v27 - v26;
  uint64_t v29 = type metadata accessor for CamUSOParse(0);
  uint64_t v30 = OUTLINED_FUNCTION_11_1(v29);
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_15_9(v31, v96[0]);
  uint64_t v32 = *(void *)(v2 + *(int *)(type metadata accessor for CamInput() + 44));
  if (!*(void *)(v32 + 16)) {
    goto LABEL_43;
  }
  uint64_t v33 = type metadata accessor for RankedAction();
  uint64_t v34 = OUTLINED_FUNCTION_9_6(v33);
  _s7SiriCam0B5ParseOWOcTm_1(v32+ *(int *)(v34 + 28)+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80)), v28, (void (*)(void))type metadata accessor for CamParse);
  if (swift_getEnumCaseMultiPayload())
  {
    uint64_t v36 = type metadata accessor for CamParse;
    uint64_t v37 = v28;
LABEL_42:
    _s7SiriCam12RankedActionVWOhTm_0(v37, (void (*)(void))v36);
    goto LABEL_43;
  }
  uint64_t v38 = v114;
  uint64_t v39 = outlined init with take of RankedAction(v28, v114, (void (*)(void))type metadata accessor for CamUSOParse);
  MEMORY[0x1CB78CBB0](v39);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  uint64_t v40 = v113;
  OUTLINED_FUNCTION_5_9(v0, 1, v113);
  if (v41)
  {
    _s7SiriCam12RankedActionVWOhTm_0(v38, (void (*)(void))type metadata accessor for CamUSOParse);
    outlined destroy of RRDataSourceMetadataValue?(v0, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_43:
    OUTLINED_FUNCTION_20_7();
    goto LABEL_44;
  }
  uint64_t v101 = v4;
  uint64_t v42 = v111;
  OUTLINED_FUNCTION_46_0();
  v43();
  unint64_t v44 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
  unint64_t v45 = v44;
  if (!(v44 >> 62))
  {
    if (*(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_39:
    swift_bridgeObjectRelease();
    goto LABEL_40;
  }
  swift_bridgeObjectRetain();
  uint64_t v94 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v94) {
    goto LABEL_39;
  }
LABEL_9:
  uint64_t v46 = OUTLINED_FUNCTION_43_0();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v46, v47, v48);
  uint64_t v95 = MEMORY[0x1CB78D7C0](0, v45);
  swift_bridgeObjectRelease();
  uint64_t v49 = *(void *)(UsoTask.arguments.getter() + 16);
  swift_bridgeObjectRelease();
  if (v49 != 1)
  {
    swift_release();
LABEL_40:
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v112, v40);
    goto LABEL_41;
  }
  uint64_t v50 = UsoTask.arguments.getter();
  specialized Collection.first.getter(v50);
  uint64_t v52 = v51;
  unint64_t v54 = v53;
  swift_bridgeObjectRelease();
  if (!v52) {
    goto LABEL_28;
  }
  swift_bridgeObjectRelease();
  if (v54 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v55 = *(void *)((v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v56 = v113;
  if (!v55) {
    goto LABEL_30;
  }
  uint64_t v57 = OUTLINED_FUNCTION_43_0();
  specialized Array._checkSubscript(_:wasNativeTypeChecked:)(v57, v58, v59);
  if (v56) {
    MEMORY[0x1CB78D7C0](0, v54);
  }
  else {
    swift_retain();
  }
  swift_bridgeObjectRelease();
  uint64_t v60 = dispatch thunk of UsoValue.getAsEntity()();
  swift_release();
  if (!v60) {
    goto LABEL_28;
  }
  uint64_t v61 = UsoTask.verbString.getter();
  uint64_t v63 = v62;
  swift_release();
  if (v61 == 0xD000000000000011 && v63 == 0x80000001C9DA4070)
  {
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v64 & 1) == 0)
  {
LABEL_28:
    swift_release();
LABEL_29:
    OUTLINED_FUNCTION_18_1();
    v80();
LABEL_41:
    uint64_t v36 = type metadata accessor for CamUSOParse;
    uint64_t v37 = v114;
    goto LABEL_42;
  }
LABEL_23:
  Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
  Siri_Nlu_External_UserStatedTask.task.getter();
  OUTLINED_FUNCTION_18_1();
  v65();
  uint64_t v66 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  OUTLINED_FUNCTION_18_1();
  v67();
  uint64_t v68 = *(void *)(v66 + 16);
  if (!v68)
  {
LABEL_30:
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }
  v96[0] = v95;
  uint64_t v103 = *(void (**)(uint64_t, unint64_t, uint64_t))(v109 + 16);
  unint64_t v69 = v66 + ((*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80));
  unsigned int v100 = *MEMORY[0x1E4FA2960];
  uint64_t v70 = v102++;
  uint64_t v98 = v109 + 8;
  BOOL v99 = (void (**)(uint64_t, void, uint64_t))(v70 + 13);
  v109 += 16;
  uint64_t v97 = *(void *)(v109 + 56);
  v96[1] = v66;
  swift_bridgeObjectRetain();
  uint64_t v72 = v105;
  uint64_t v71 = v106;
  uint64_t v74 = v107;
  uint64_t v73 = v108;
  char v75 = v102;
  while (1)
  {
    uint64_t v104 = v68;
    v103(v72, v69, v110);
    Siri_Nlu_External_UsoEntityIdentifier.sourceComponent.getter();
    (*v99)(v74, v100, v73);
    lazy protocol witness table accessor for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent(&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoEntityIdentifier.NluComponent and conformance Siri_Nlu_External_UsoEntityIdentifier.NluComponent, MEMORY[0x1E4FA2968]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    os_log_type_t v77 = v115;
    uint64_t v76 = v116;
    os_log_type_t v78 = *v75;
    (*v75)(v74, v73);
    v78((uint64_t)v71, v73);
    OUTLINED_FUNCTION_18_1();
    v79();
    if (v76 == v77) {
      break;
    }
    v69 += v97;
    uint64_t v68 = v104 - 1;
    if (v104 == 1)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease_n();
  uint64_t v81 = v114;
  if (*(unsigned char *)(v101 + 56) != 2)
  {
    swift_release();
    OUTLINED_FUNCTION_18_1();
    v93();
    uint64_t v36 = type metadata accessor for CamUSOParse;
    uint64_t v37 = v81;
    goto LABEL_42;
  }
  uint64_t v82 = v111;
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v83 = type metadata accessor for Logger();
  uint64_t v84 = OUTLINED_FUNCTION_11_9(v83, (uint64_t)static Logger.ambiguityHandling);
  os_log_type_t v85 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v84, v85))
  {
    uint64_t v86 = (uint8_t *)OUTLINED_FUNCTION_29();
    char v87 = (ValueMetadata *)OUTLINED_FUNCTION_7_1();
    uint64_t v115 = &type metadata for UserEntityVocabActionEnforcer;
    os_log_type_t v116 = v87;
    *(_DWORD *)uint64_t v86 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserEntityVocabActionEnforcer.Type);
    uint64_t v88 = String.init<A>(describing:)();
    uint64_t v115 = (ValueMetadata *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v84, v85, "%s found UserEntityVocab parse - overriding to EXECUTE_TOP_HYPOTHESIS", v86, 0xCu);
    OUTLINED_FUNCTION_10_7();
    uint64_t v81 = v114;
    uint64_t v82 = v111;
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }

  os_log_type_t v116 = &type metadata for UserEntityVocabActionEnforcer;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UserEntityVocabActionEnforcer.Type);
  uint64_t v90 = String.init<A>(describing:)();
  uint64_t v92 = v91;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v82 + 8))(v112, v113);
  _s7SiriCam12RankedActionVWOhTm_0(v81, (void (*)(void))type metadata accessor for CamUSOParse);
  *id v6 = 1;
  v6[1] = v90;
  _OWORD v6[2] = v92;
LABEL_44:
  OUTLINED_FUNCTION_17_9();
}

uint64_t outlined init with take of RankedAction(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t _s7SiriCam0B5ParseOWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  uint64_t v4 = OUTLINED_FUNCTION_41_0();
  v5(v4);
  return a2;
}

uint64_t _s7SiriCam12RankedActionVWOhTm_0(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

unint64_t type metadata accessor for USOSerializedIdentifier()
{
  unint64_t result = lazy cache variable for type metadata for USOSerializedIdentifier;
  if (!lazy cache variable for type metadata for USOSerializedIdentifier)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for USOSerializedIdentifier);
  }
  return result;
}

uint64_t outlined init with copy of CamUserParse?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_1_3();
  uint64_t v4 = OUTLINED_FUNCTION_41_0();
  v5(v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent and conformance Siri_Nl_Core_Protocol_UsoEntityIdentifier.NluComponent(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void OUTLINED_FUNCTION_5_12(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_9_12()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_10_7()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_14_11@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 136) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

uint64_t OUTLINED_FUNCTION_15_9@<X0>(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 120) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
  return 0;
}

void OUTLINED_FUNCTION_20_7()
{
  *uint64_t v0 = 0;
  v0[1] = 0;
  v0[2] = 0;
}

void OUTLINED_FUNCTION_21_7(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_22_7()
{
  return swift_bridgeObjectRetain();
}

void OUTLINED_FUNCTION_25_6(uint64_t a1@<X8>, uint64_t a2)
{
  *(void *)(v2 - 112) = (char *)&a2 - ((a1 + 15) & 0xFFFFFFFFFFFFFFF0);
}

uint64_t OUTLINED_FUNCTION_26_6()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_27_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_28_5()
{
  return 0;
}

uint64_t OUTLINED_FUNCTION_29_3()
{
  return type metadata accessor for CamUSOParse(0);
}

uint64_t OUTLINED_FUNCTION_30_4()
{
  return StringProtocol.contains<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_31_3(uint64_t a1)
{
  return specialized Dictionary.subscript.getter(0x746567726174, 0xE600000000000000, a1);
}

uint64_t OUTLINED_FUNCTION_32_4()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_33_2()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_34_2(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 44));
}

void OUTLINED_FUNCTION_35_2()
{
  JUMPOUT(0x1CB78D7C0);
}

uint64_t OUTLINED_FUNCTION_36_1(uint64_t result, uint64_t a2)
{
  *uint64_t v2 = 1;
  v2[1] = result;
  v2[2] = a2;
  return result;
}

uint64_t OUTLINED_FUNCTION_37_1()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_38_0()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_39_0(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_41_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_42_0()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_43_0()
{
  return 0;
}

void OUTLINED_FUNCTION_44_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0xCu);
}

uint64_t OUTLINED_FUNCTION_45_0()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_48_0()
{
  return String.init<A>(describing:)();
}

uint64_t OUTLINED_FUNCTION_49_0()
{
  return specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v0 & 0xC000000000000001) == 0, v0);
}

uint64_t OUTLINED_FUNCTION_51_0()
{
  return type metadata accessor for CamInput();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1)
{
  return specialized RawRepresentable<>.hashValue.getter(a1, MEMORY[0x1E4FBC3B8]);
}

{
  return specialized RawRepresentable<>.hashValue.getter(a1, MEMORY[0x1E4FBC3C0]);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(char a1)
{
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

{
  OUTLINED_FUNCTION_10_8();
  Hasher._combine(_:)(qword_1C9D9FEA8[a1]);
  return Hasher._finalize()();
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(0, a1);
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(uint64_t a1, void (*a2)(unsigned char *, uint64_t))
{
  OUTLINED_FUNCTION_10_8();
  a2(v5, a1);
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter(unsigned __int8 a1, void (*a2)(void))
{
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>.hashValue.getter()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

uint64_t CamUSOParse.debugDescription.getter()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v2);
  OUTLINED_FUNCTION_8_4();
  _StringGuts.grow(_:)(49);
  swift_bridgeObjectRelease();
  uint64_t v25 = 0xD000000000000017;
  unint64_t v26 = 0x80000001C9DA40E0;
  uint64_t v3 = (int *)type metadata accessor for CamUSOParse(0);
  uint64_t v4 = (void *)(v0 + v3[6]);
  uint64_t v5 = v4[1];
  v29[0] = *v4;
  v29[1] = v5;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v6._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._object = (void *)0x80000001C9DA4100;
  v7._uint64_t countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v7);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v0 + v3[5], v1);
  v8._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 11305;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  uint64_t v25 = 0;
  unint64_t v26 = 0xE000000000000000;
  _StringGuts.grow(_:)(30);
  swift_bridgeObjectRelease();
  strcpy((char *)v29, "groupIndex: ");
  BYTE5(v29[1]) = 0;
  HIWORD(v29[1]) = -5120;
  uint64_t v10 = (int *)(v0 + v3[7]);
  int v11 = *v10;
  LOBYTE(v10) = *((unsigned char *)v10 + 4);
  LODWORD(v25) = v11;
  BYTE4(v25) = (_BYTE)v10;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
  v12._uint64_t countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._uint64_t countAndFlagsBits = 0x615072657375202CLL;
  v13._object = (void *)0xED0000203A657372;
  String.append(_:)(v13);
  type metadata accessor for SiriNLUTypesPrintUtils();
  uint64_t v14 = type metadata accessor for Siri_Nlu_External_UserParse();
  uint64_t v27 = v14;
  uint64_t v28 = lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
  uint64_t v15 = __swift_allocate_boxed_opaque_existential_1(&v25);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16))(v15, v0, v14);
  uint64_t v16 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
  uint64_t v18 = v17;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
  v19._uint64_t countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._uint64_t countAndFlagsBits = 41;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  uint64_t v21 = v29[0];
  uint64_t v22 = (void *)v29[1];
  uint64_t v25 = 0xD000000000000017;
  unint64_t v26 = 0x80000001C9DA40E0;
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = v21;
  v23._object = v22;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v25;
}

uint64_t type metadata accessor for CamUSOParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamUSOParse);
}

uint64_t CamUSOParse.init(userParse:parserIdentifier:appBundleId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = (int *)type metadata accessor for CamUSOParse(0);
  outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(a2, a5 + v10[5]);
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_1_3();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(a5, a1);
  Swift::String v13 = (void *)(a5 + v10[6]);
  *Swift::String v13 = a3;
  v13[1] = a4;
  uint64_t v14 = a5 + v10[7];
  *(_DWORD *)uint64_t v14 = 0;
  *(unsigned char *)(v14 + 4) = 1;
  return result;
}

uint64_t outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t CamUSOParse.init(userParse:parserIdentifier:appBundleId:groupIndex:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  Swift::String v12 = (int *)type metadata accessor for CamUSOParse(0);
  outlined init with take of Siri_Nlu_External_Parser.ParserIdentifier?(a2, a6 + v12[5]);
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_1_3();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(a6, a1);
  uint64_t v15 = (void *)(a6 + v12[6]);
  *uint64_t v15 = a3;
  v15[1] = a4;
  uint64_t v16 = a6 + v12[7];
  *(_DWORD *)uint64_t v16 = a5;
  *(unsigned char *)(v16 + 4) = BYTE4(a5) & 1;
  return result;
}

uint64_t CamUSOParse.userParse.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_1_3();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  return v5(a1, v1, v3);
}

uint64_t CamUSOParse.parserIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
  return outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v3, a1);
}

uint64_t CamUSOParse.appBundleId.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for CamUSOParse(0) + 24));
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t CamUSOParse.groupIndex.getter()
{
  uint64_t v1 = (unsigned int *)(v0 + *(int *)(type metadata accessor for CamUSOParse(0) + 28));
  return *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32);
}

unint64_t CamUSOParse.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CamUSOParse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

unint64_t CamUSOParse.CodingKeys.rawValue.getter(char a1)
{
  unint64_t result = 0x7372615072657375;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6C646E7542707061;
      break;
    case 3:
      unint64_t result = 0x646E4970756F7267;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t CamUSOParse.CodingKeys.stringValue.getter(char a1)
{
  unint64_t result = 0x7372615072657375;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x6C646E7542707061;
      break;
    case 3:
      unint64_t result = 0x646E4970756F7267;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CamUSOParse.CodingKeys(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamUSOParse.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CamUSOParse.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = CamUSOParse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

unint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CamUSOParse.CodingKeys@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = CamUSOParse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t protocol witness for CodingKey.stringValue.getter in conformance CamUSOParse.CodingKeys()
{
  return CamUSOParse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamUSOParse.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CamUSOParse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamUSOParse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t CamUSOParse.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v4 - 8);
  OUTLINED_FUNCTION_7_6();
  uint64_t v17 = v5;
  type metadata accessor for JSONEncodingOptions();
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_26_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamUSOParse.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v7);
  OUTLINED_FUNCTION_2_17();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  JSONEncodingOptions.init()();
  type metadata accessor for Siri_Nlu_External_UserParse();
  lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, MEMORY[0x1E4FA2808]);
  Message.jsonString(options:)();
  if (v18)
  {
    uint64_t v8 = OUTLINED_FUNCTION_16_6();
    v9(v8);
  }
  else
  {
    uint64_t v13 = OUTLINED_FUNCTION_16_6();
    v14(v13);
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = type metadata accessor for CamUSOParse(0);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v2 + *(int *)(v15 + 20), v17);
    uint64_t v16 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload(v17, 1, v16) == 1)
    {
      outlined destroy of RRDataSourceMetadataValue?(v17, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    }
    else
    {
      MEMORY[0x1CB78CB70]();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v17, v16);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Int?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type Int? and conformance <A> A?, &demangling cache variable for type metadata for Int?);
    OUTLINED_FUNCTION_3_17();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
    OUTLINED_FUNCTION_3_17();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UInt32?);
    lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type UInt32? and conformance <A> A?, &demangling cache variable for type metadata for UInt32?);
    OUTLINED_FUNCTION_3_17();
  }
  uint64_t v10 = OUTLINED_FUNCTION_11_12();
  return v11(v10);
}

unint64_t lazy protocol witness table accessor for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamUSOParse.CodingKeys and conformance CamUSOParse.CodingKeys);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Int? and conformance <A> A?(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static CamUSOParse.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  OUTLINED_FUNCTION_1_2();
  uint64_t v7 = v6;
  MEMORY[0x1F4188790](v8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v11 = v10 - v9;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v13);
  OUTLINED_FUNCTION_2_17();
  uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  uint64_t v15 = MEMORY[0x1F4188790](v14 - 8);
  uint64_t v17 = &v42[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = MEMORY[0x1F4188790](v15);
  Swift::String v20 = &v42[-v19];
  MEMORY[0x1F4188790](v18);
  uint64_t v22 = &v42[-v21];
  if ((static Siri_Nlu_External_UserParse.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v45 = v7;
  uint64_t v23 = type metadata accessor for CamUSOParse(0);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a1 + *(int *)(v23 + 20), (uint64_t)v22);
  uint64_t v44 = v23;
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a2 + *(int *)(v23 + 20), (uint64_t)v20);
  uint64_t v24 = v2 + *(int *)(v12 + 48);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v22, v2);
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?((uint64_t)v20, v24);
  OUTLINED_FUNCTION_15_10(v2);
  if (v25)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    OUTLINED_FUNCTION_15_10(v24);
    if (v25)
    {
      outlined destroy of RRDataSourceMetadataValue?(v2, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      goto LABEL_12;
    }
LABEL_10:
    outlined destroy of RRDataSourceMetadataValue?(v2, (uint64_t *)&demangling cache variable for type metadata for (Siri_Nlu_External_Parser.ParserIdentifier?, Siri_Nlu_External_Parser.ParserIdentifier?));
    return 0;
  }
  outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v2, (uint64_t)v17);
  OUTLINED_FUNCTION_15_10(v24);
  if (v25)
  {
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    outlined destroy of RRDataSourceMetadataValue?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    (*(void (**)(unsigned char *, uint64_t))(v45 + 8))(v17, v5);
    goto LABEL_10;
  }
  uint64_t v26 = v45;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v45 + 32))(v11, v24, v5);
  lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E4FA27B0]);
  int v43 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
  v27(v11, v5);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v20, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  v27((uint64_t)v17, v5);
  outlined destroy of RRDataSourceMetadataValue?(v2, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  if ((v43 & 1) == 0) {
    return 0;
  }
LABEL_12:
  uint64_t v28 = v44;
  uint64_t v29 = *(int *)(v44 + 24);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = *(void *)(a1 + v29 + 8);
  uint64_t v32 = (void *)(a2 + v29);
  uint64_t v33 = v32[1];
  if (!v31)
  {
    if (!v33) {
      goto LABEL_21;
    }
    return 0;
  }
  if (!v33) {
    return 0;
  }
  BOOL v34 = *v30 == *v32 && v31 == v33;
  if (v34 || (char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v35 & 1) != 0))
  {
LABEL_21:
    uint64_t v37 = *(int *)(v28 + 28);
    uint64_t v38 = (_DWORD *)(a1 + v37);
    char v39 = *(unsigned char *)(a1 + v37 + 4);
    uint64_t v40 = (_DWORD *)(a2 + v37);
    char v41 = *(unsigned char *)(a2 + v37 + 4);
    if (v39)
    {
      if ((v41 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      if (*v38 != *v40) {
        char v41 = 1;
      }
      if (v41) {
        return 0;
      }
    }
    return 1;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t CamParse.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7304053 && a2 == 0xE300000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else
  {
    BOOL v6 = a1 == 0x655273656D6D6F70 && a2 == 0xEE0065736E6F7073;
    if (v6 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
    else if (a1 == 0x7974706D65 && a2 == 0xE500000000000000)
    {
      swift_bridgeObjectRelease();
      return 2;
    }
    else
    {
      char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v8) {
        return 2;
      }
      else {
        return 3;
      }
    }
  }
}

uint64_t CamParse.CodingKeys.stringValue.getter(char a1)
{
  if (!a1) {
    return 7304053;
  }
  if (a1 == 1) {
    return 0x655273656D6D6F70;
  }
  return 0x7974706D65;
}

uint64_t CamParse.EmptyCodingKeys.init(stringValue:)()
{
  return 1;
}

uint64_t CamParse.EmptyCodingKeys.stringValue.getter()
{
  return 0;
}

uint64_t static CamParse.UsoCodingKeys.== infix(_:_:)()
{
  return 1;
}

void CamParse.UsoCodingKeys.hash(into:)()
{
}

uint64_t CamParse.PommesResponseCodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  if (a1 == 12383 && a2 == 0xE200000000000000)
  {
    swift_bridgeObjectRelease();
    char v4 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v4 = v3 ^ 1;
  }
  return v4 & 1;
}

Swift::Int CamParse.PommesResponseCodingKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t CamParse.UsoCodingKeys.stringValue.getter()
{
  return 12383;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance CamUSOParse(void *a1)
{
  return CamUSOParse.encode(to:)(a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance CamParse.CodingKeys()
{
  return CamParse.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CamParse.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.EmptyCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = CamParse.EmptyCodingKeys.init(stringValue:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.EmptyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.EmptyCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CamParse.PommesResponseCodingKeys()
{
  return CamParse.PommesResponseCodingKeys.hashValue.getter();
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.PommesResponseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.PommesResponseCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CamParse.PommesResponseCodingKeys()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance CamParse.UsoCodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = CamParse.PommesResponseCodingKeys.init(stringValue:)(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance CamParse.UsoCodingKeys()
{
  return MLMultiArray.MLMultiArrayCodingKeys.intValue.getter();
}

uint64_t protocol witness for CodingKey.init(intValue:) in conformance CamParse.UsoCodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = static CamParse.UsoCodingKeys.== infix(_:_:)();
  *a1 = result & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance CamParse.UsoCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance CamParse.UsoCodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

void CamParse.encode(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.EmptyCodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_7_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.PommesResponseCodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_7_6();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.UsoCodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v5);
  OUTLINED_FUNCTION_2_1();
  type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_26_3();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<CamParse.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_8_4();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  outlined init with copy of CamParse(v23, (uint64_t)v1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = *v1;
      char v25 = 1;
      lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys();
      OUTLINED_FUNCTION_8_11((uint64_t)&unk_1F2417310, (uint64_t)&v25);
      type metadata accessor for PommesResponse();
      lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse((unint64_t *)&lazy protocol witness table cache variable for type PommesResponse and conformance PommesResponse, MEMORY[0x1E4F9FEF8]);
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      OUTLINED_FUNCTION_18_1();
      v14();
      uint64_t v15 = OUTLINED_FUNCTION_4_12();
      v16(v15);
    }
    else
    {
      char v26 = 2;
      lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys();
      OUTLINED_FUNCTION_8_11((uint64_t)&unk_1F2417330, (uint64_t)&v26);
      OUTLINED_FUNCTION_18_1();
      v20();
      uint64_t v21 = OUTLINED_FUNCTION_4_12();
      v22(v21);
    }
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v1, v9);
    char v24 = 0;
    lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys();
    OUTLINED_FUNCTION_8_11((uint64_t)&unk_1F2417280, (uint64_t)&v24);
    lazy protocol witness table accessor for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse(&lazy protocol witness table cache variable for type CamUSOParse and conformance CamUSOParse, (void (*)(uint64_t))type metadata accessor for CamUSOParse);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    OUTLINED_FUNCTION_18_1();
    v17();
    outlined destroy of CamUSOParse(v9, (void (*)(void))type metadata accessor for CamUSOParse);
    uint64_t v18 = OUTLINED_FUNCTION_4_12();
    v19(v18);
  }
}

uint64_t type metadata accessor for CamParse(uint64_t a1)
{
  return type metadata accessor for CamRequest(a1, (uint64_t *)&type metadata singleton initialization cache for CamParse);
}

unint64_t lazy protocol witness table accessor for type CamParse.CodingKeys and conformance CamParse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.CodingKeys and conformance CamParse.CodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.EmptyCodingKeys and conformance CamParse.EmptyCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.PommesResponseCodingKeys and conformance CamParse.PommesResponseCodingKeys);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys;
  if (!lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamParse.UsoCodingKeys and conformance CamParse.UsoCodingKeys);
  }
  return result;
}

unint64_t PommesResponse.CodingKeys.init(rawValue:)(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesResponse.CodingKeys.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t PommesResponse.CodingKeys.rawValue.getter(char a1)
{
  uint64_t result = 0xD000000000000010;
  if (a1)
  {
    if (a1 == 1) {
      return 0x6E6F437972657571;
    }
    else {
      return 0xD000000000000012;
    }
  }
  return result;
}

void protocol witness for Encodable.encode(to:) in conformance CamParse(void *a1)
{
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesResponse.CodingKeys()
{
  return specialized == infix<A>(_:_:)();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesResponse.CodingKeys()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PommesResponse.CodingKeys@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = PommesResponse.CodingKeys.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesResponse.CodingKeys@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = PommesResponse.CodingKeys.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesResponse.CodingKeys()
{
  return PommesResponse.CodingKeys.rawValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesResponse.CodingKeys@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = PommesResponse.CodingKeys.init(stringValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesResponse.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t PommesResponse.encode(to:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesResponse.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_17();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  dispatch thunk of PommesResponse.primaryPluginIdentifier()();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  lazy protocol witness table accessor for type Int? and conformance <A> A?(&lazy protocol witness table cache variable for type String? and conformance <A> A?, &demangling cache variable for type metadata for String?);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  if (!v1)
  {
    PommesResponse.metadataDomainName.getter();
    KeyedEncodingContainer.encode(_:forKey:)();
    swift_bridgeObjectRelease();
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  uint64_t v4 = OUTLINED_FUNCTION_5_3();
  return v5(v4);
}

unint64_t lazy protocol witness table accessor for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesResponse.CodingKeys and conformance PommesResponse.CodingKeys);
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesResponse(void *a1)
{
  return PommesResponse.encode(to:)(a1);
}

uint64_t *initializeBufferWithCopyOfBuffer for CamUSOParse(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (char *)a1 + v15;
    Swift::String v20 = (char *)a2 + v15;
    uint64_t v19[4] = v20[4];
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for CamUSOParse(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (!__swift_getEnumTagSinglePayload(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  void *v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 24))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  void *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  Swift::String v20 = (int *)(a2 + v18);
  int v21 = *v20;
  *(unsigned char *)(v19 + 4) = *((unsigned char *)v20 + 4);
  *(_DWORD *)uint64_t v19 = v21;
  return a1;
}

uint64_t initializeWithTake for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10))
  {
    uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
    __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  *(_DWORD *)uint64_t v13 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  return a1;
}

uint64_t assignWithTake for CamUSOParse(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v8, 1, v10);
  int v12 = __swift_getEnumTagSinglePayload((uint64_t)v9, 1, v10);
  if (!EnumTagSinglePayload)
  {
    uint64_t v13 = *(void *)(v10 - 8);
    if (!v12)
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 40))(v8, v9, v10);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v13 + 8))(v8, v10);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, const void *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  __swift_storeEnumTagSinglePayload((uint64_t)v8, 0, 1, v10);
LABEL_7:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  uint64_t v20 = a3[7];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
  *(unsigned char *)(v21 + 4) = *(unsigned char *)(v22 + 4);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamUSOParse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D675CC);
}

uint64_t sub_1C9D675CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1;
LABEL_5:
    return __swift_getEnumTagSinglePayload(v9, a2, v8);
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v11 + 84) == a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t storeEnumTagSinglePayload for CamUSOParse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D676A8);
}

void sub_1C9D676A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Siri_Nlu_External_UserParse();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    OUTLINED_FUNCTION_0_3();
    if (*(_DWORD *)(v13 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
      return;
    }
    uint64_t v10 = v12;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
  }
  __swift_storeEnumTagSinglePayload(v11, a2, a2, v10);
}

void type metadata completion function for CamUSOParse()
{
  type metadata accessor for Siri_Nlu_External_UserParse();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier?();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier?()
{
  if (!lazy cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?)
  {
    type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
    }
  }
}

char *initializeBufferWithCopyOfBuffer for CamParse(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    a1 = &v15[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v16 = *a2;
      *(void *)a1 = *a2;
      uint64_t v17 = v16;
LABEL_11:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v8 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v10 = v9[5];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = (char *)a2 + v10;
      uint64_t v13 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v12, 1, v13))
      {
        uint64_t v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v11, v12, *(void *)(*(void *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v11, v12, v13);
        __swift_storeEnumTagSinglePayload((uint64_t)v11, 0, 1, v13);
      }
      uint64_t v18 = v9[6];
      uint64_t v19 = &a1[v18];
      uint64_t v20 = (char **)((char *)a2 + v18);
      uint64_t v21 = v20[1];
      *(void *)uint64_t v19 = *v20;
      *((void *)v19 + 1) = v21;
      uint64_t v22 = v9[7];
      uint64_t v23 = &a1[v22];
      char v24 = (char *)a2 + v22;
      v23[4] = v24[4];
      *(_DWORD *)uint64_t v23 = *(_DWORD *)v24;
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

void destroy for CamParse(void **a1)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *a1;
  }
  else if (!EnumCaseMultiPayload)
  {
    uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
    uint64_t v4 = (uint64_t)a1 + *(int *)(type metadata accessor for CamUSOParse(0) + 20);
    uint64_t v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (!__swift_getEnumTagSinglePayload(v4, 1, v5)) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
    }
    swift_bridgeObjectRelease();
  }
}

void **initializeWithCopy for CamParse(void **a1, void **a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    id v15 = v14;
LABEL_9:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  if (!EnumCaseMultiPayload)
  {
    uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v9 = v8[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
    {
      uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
      __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
    }
    uint64_t v16 = v8[6];
    uint64_t v17 = (void **)((char *)a1 + v16);
    uint64_t v18 = (void **)((char *)a2 + v16);
    uint64_t v19 = v18[1];
    *uint64_t v17 = *v18;
    v17[1] = v19;
    uint64_t v20 = v8[7];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    v21[4] = v22[4];
    *(_DWORD *)uint64_t v21 = *(_DWORD *)v22;
    swift_bridgeObjectRetain();
    goto LABEL_9;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

void **assignWithCopy for CamParse(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CamUSOParse((uint64_t)a1, (void (*)(void))type metadata accessor for CamParse);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v14 = *a2;
      *a1 = *a2;
      id v15 = v14;
LABEL_10:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    if (!EnumCaseMultiPayload)
    {
      uint64_t v7 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v9 = v8[5];
      uint64_t v10 = (char *)a1 + v9;
      uint64_t v11 = (char *)a2 + v9;
      uint64_t v12 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v11, 1, v12))
      {
        uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
        __swift_storeEnumTagSinglePayload((uint64_t)v10, 0, 1, v12);
      }
      uint64_t v16 = v8[6];
      uint64_t v17 = (void **)((char *)a1 + v16);
      uint64_t v18 = (void **)((char *)a2 + v16);
      *uint64_t v17 = *v18;
      v17[1] = v18[1];
      uint64_t v19 = v8[7];
      uint64_t v20 = (char *)a1 + v19;
      uint64_t v21 = (char *)a2 + v19;
      int v22 = *(_DWORD *)v21;
      v20[4] = v21[4];
      *(_DWORD *)uint64_t v20 = v22;
      swift_bridgeObjectRetain();
      goto LABEL_10;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t outlined destroy of CamUSOParse(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

char *initializeWithTake for CamParse(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = (int *)type metadata accessor for CamUSOParse(0);
    uint64_t v8 = v7[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
    {
      uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
      memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
      __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
    }
    *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
    uint64_t v13 = v7[7];
    uint64_t v14 = &a1[v13];
    id v15 = &a2[v13];
    v14[4] = v15[4];
    *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for CamParse(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of CamUSOParse((uint64_t)a1, (void (*)(void))type metadata accessor for CamParse);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for Siri_Nlu_External_UserParse();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = (int *)type metadata accessor for CamUSOParse(0);
      uint64_t v8 = v7[5];
      uint64_t v9 = &a1[v8];
      uint64_t v10 = &a2[v8];
      uint64_t v11 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
      if (__swift_getEnumTagSinglePayload((uint64_t)v10, 1, v11))
      {
        uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
        memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
        __swift_storeEnumTagSinglePayload((uint64_t)v9, 0, 1, v11);
      }
      *(_OWORD *)&a1[v7[6]] = *(_OWORD *)&a2[v7[6]];
      uint64_t v13 = v7[7];
      uint64_t v14 = &a1[v13];
      id v15 = &a2[v13];
      v14[4] = v15[4];
      *(_DWORD *)uint64_t v14 = *(_DWORD *)v15;
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for CamParse()
{
  uint64_t result = type metadata accessor for CamUSOParse(319);
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *type metadata accessor for PommesResponse.CodingKeys()
{
  return &unk_1F2417160;
}

unsigned char *storeEnumTagSinglePayload for PommesResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D684B4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CamParse.CodingKeys()
{
  return &unk_1F24171F0;
}

void *type metadata accessor for CamParse.UsoCodingKeys()
{
  return &unk_1F2417280;
}

uint64_t getEnumTagSinglePayload for CamParse.UsoCodingKeys(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *storeEnumTagSinglePayload for CamParse.UsoCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9D685F4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for CamParse.PommesResponseCodingKeys()
{
  return &unk_1F2417310;
}

void *type metadata accessor for CamParse.EmptyCodingKeys()
{
  return &unk_1F2417330;
}

unsigned char *storeEnumTagSinglePayload for CamUSOParse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D68708);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

void *type metadata accessor for CamUSOParse.CodingKeys()
{
  return &unk_1F24173C0;
}

uint64_t OUTLINED_FUNCTION_3_17()
{
  return KeyedEncodingContainer.encode<A>(_:forKey:)();
}

uint64_t OUTLINED_FUNCTION_4_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_8_11(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4185608](a1, a2, v2, a1);
}

uint64_t OUTLINED_FUNCTION_10_8()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_11_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_15_10(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_16_6()
{
  return v0;
}

uint64_t dispatch thunk of OperatingPointHeuristic.requiredInputs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of OperatingPointHeuristic.operatingPoint(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t UseCloudThreshold.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for UseCloudThreshold()
{
  return self;
}

uint64_t CamRequestContext.init(siriLocale:renderDeviceIdiom:requestIsDictation:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  char v7 = *a2;
  uint64_t v8 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for CamRequestContext();
  *(unsigned char *)(a4 + *(int *)(result + 20)) = v7;
  *(unsigned char *)(a4 + *(int *)(result + 24)) = a3;
  return result;
}

uint64_t type metadata accessor for CamRequestContext()
{
  uint64_t result = type metadata singleton initialization cache for CamRequestContext;
  if (!type metadata singleton initialization cache for CamRequestContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

SiriCam::DeviceIdiom_optional __swiftcall DeviceIdiom.init(rawValue:)(Swift::String rawValue)
{
  object = rawValue._object;
  v3._uint64_t countAndFlagsBits = rawValue._countAndFlagsBits;
  unsigned int v4 = v1;
  v3._object = object;
  unint64_t v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of DeviceIdiom.init(rawValue:), v3);
  result.value = swift_bridgeObjectRelease();
  char v7 = 9;
  if (v5 < 9) {
    char v7 = v5;
  }
  *unsigned int v4 = v7;
  return result;
}

uint64_t DeviceIdiom.rawValue.getter()
{
  uint64_t result = 7496035;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x646F70656D6F68;
      break;
    case 2:
      uint64_t result = 6513005;
      break;
    case 3:
      uint64_t result = 6578544;
      break;
    case 4:
      uint64_t result = 6582128;
      break;
    case 5:
      uint64_t result = 0x656E6F6870;
      break;
    case 6:
      uint64_t result = 0x6863746177;
      break;
    case 7:
      uint64_t result = 30324;
      break;
    case 8:
      uint64_t result = 0x6E776F6E6B6E75;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DeviceIdiom(unsigned __int8 *a1, char *a2)
{
  return specialized == infix<A>(_:_:)(*a1, *a2);
}

unint64_t lazy protocol witness table accessor for type DeviceIdiom and conformance DeviceIdiom()
{
  unint64_t result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom;
  if (!lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom)
  {
    type metadata accessor for DeviceIdiom();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DeviceIdiom and conformance DeviceIdiom);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DeviceIdiom()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance DeviceIdiom()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DeviceIdiom(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::DeviceIdiom_optional protocol witness for RawRepresentable.init(rawValue:) in conformance DeviceIdiom(Swift::String *a1)
{
  return DeviceIdiom.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance DeviceIdiom@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = DeviceIdiom.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void *initializeBufferWithCopyOfBuffer for CamRequestContext(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (void *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Locale();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
  }
  return a1;
}

uint64_t destroy for CamRequestContext(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  return v3(a1, v2);
}

uint64_t initializeWithCopy for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithCopy for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(unsigned char *)(a1 + v7) = *(unsigned char *)(a2 + v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D69414);
}

uint64_t sub_1C9D69414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v9 >= 2) {
      return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CamRequestContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D694C4);
}

void sub_1C9D694C4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Locale();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
}

uint64_t type metadata completion function for CamRequestContext()
{
  uint64_t result = type metadata accessor for Locale();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceIdiom(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF8)
  {
    if (a2 + 8 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 8) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 9;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 9;
  int v5 = v6 - 9;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for DeviceIdiom(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D69740);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceIdiom()
{
  return &type metadata for DeviceIdiom;
}

uint64_t dispatch thunk of SiriSignalsContaining.refreshSignals()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of SiriSignalsContaining.get(from:query:defaultVal:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG74_pG_SSSitKFSSAiJ_pcfu_33_1ec30c1e3c34803c076ffb86173186a4AiJ_pSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v13;
    unsigned int v4 = (void *)(a1 + 32);
    do
    {
      uint64_t v5 = v4[3];
      uint64_t v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      uint64_t v7 = MEMORY[0x1CB78C920](v5, v6);
      uint64_t v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v10 = *(void *)(v13 + 16);
      if (v10 >= *(void *)(v13 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG75_pG_SSSitKFSSAiJ_pcfu0_33_2f9d014dde3806f51ad5602c3b2cd65fAiJ_pSSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v11;
    unsigned int v4 = (void *)(a1 + 32);
    do
    {
      __swift_project_boxed_opaque_existential_1(v4, v4[3]);
      uint64_t v5 = dispatch thunk of AppSelectionSignalComponent.name.getter();
      uint64_t v7 = v6;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v8 = *(void *)(v11 + 16);
      if (v8 >= *(void *)(v11 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v11 + 16) = v8 + 1;
      uint64_t v9 = v11 + 16 * v8;
      *(void *)(v9 + 32) = v5;
      *(void *)(v9 + 40) = v7;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

void specialized Sequence.compactMap<A>(_:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v40 = a3;
  char v41 = a5;
  uint64_t v42 = a2;
  unint64_t v43 = a4;
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  uint64_t v7 = MEMORY[0x1F4188790](v39);
  uint64_t v9 = (uint64_t *)((char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)&v34 - v10;
  specialized _NativeDictionary.makeIterator()(v47, a1);
  uint64_t v12 = v47[0];
  int64_t v48 = v47[3];
  unint64_t v13 = v47[4];
  uint64_t v37 = v47[1];
  int64_t v38 = (unint64_t)(v47[2] + 64) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v36 = MEMORY[0x1E4FBC860];
  while (1)
  {
    if (v13)
    {
      unint64_t v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v15 = v14 | (v48 << 6);
      goto LABEL_15;
    }
    int64_t v16 = v48 + 1;
    if (__OFADD__(v48, 1)) {
      break;
    }
    if (v16 >= v38) {
      goto LABEL_29;
    }
    unint64_t v17 = *(void *)(v37 + 8 * v16);
    if (!v17)
    {
      int64_t v18 = v48 + 2;
      if (v48 + 2 >= v38) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(v37 + 8 * v18);
      if (v17) {
        goto LABEL_13;
      }
      int64_t v18 = v48 + 3;
      if (v48 + 3 >= v38) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(v37 + 8 * v18);
      if (v17) {
        goto LABEL_13;
      }
      int64_t v18 = v48 + 4;
      if (v48 + 4 >= v38) {
        goto LABEL_29;
      }
      unint64_t v17 = *(void *)(v37 + 8 * v18);
      if (v17)
      {
LABEL_13:
        int64_t v16 = v18;
      }
      else
      {
        int64_t v16 = v48 + 5;
        if (v48 + 5 >= v38) {
          goto LABEL_29;
        }
        unint64_t v17 = *(void *)(v37 + 8 * v16);
        if (!v17)
        {
          int64_t v31 = v48 + 6;
          while (v31 < v38)
          {
            unint64_t v17 = *(void *)(v37 + 8 * v31++);
            if (v17)
            {
              int64_t v16 = v31 - 1;
              goto LABEL_14;
            }
          }
LABEL_29:
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
      }
    }
LABEL_14:
    unint64_t v13 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v48 = v16;
LABEL_15:
    uint64_t v19 = *(void *)(v12 + 56);
    uint64_t v20 = (uint64_t *)(*(void *)(v12 + 48) + 16 * v15);
    uint64_t v22 = *v20;
    uint64_t v21 = v20[1];
    uint64_t v23 = type metadata accessor for SignalValue();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v23 - 8) + 16))(&v11[*(int *)(v39 + 48)], v19 + *(void *)(*(void *)(v23 - 8) + 72) * v15, v23);
    *(void *)uint64_t v11 = v22;
    *((void *)v11 + 1) = v21;
    outlined init with take of (key: String, value: SignalValue)((uint64_t)v11, (uint64_t)v9);
    swift_bridgeObjectRetain();
    closure #1 in SiriSignalsContainer.get(from:query:defaultVal:)(v9, v42, v40, v43, v41, &v44);
    if (v5)
    {
      outlined destroy of (key: String, value: SignalValue)((uint64_t)v9);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return;
    }
    outlined destroy of (key: String, value: SignalValue)((uint64_t)v9);
    uint64_t v24 = v45;
    if (v45)
    {
      uint64_t v25 = v44;
      uint64_t v26 = v46;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v36 = v32;
      }
      unint64_t v27 = *(void *)(v36 + 16);
      unint64_t v28 = v27 + 1;
      if (v27 >= *(void *)(v36 + 24) >> 1)
      {
        unint64_t v35 = v27 + 1;
        specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
        unint64_t v28 = v35;
        uint64_t v36 = v33;
      }
      uint64_t v29 = v36;
      *(void *)(v36 + 16) = v28;
      uint64_t v30 = (void *)(v29 + 24 * v27);
      void v30[4] = v25;
      v30[5] = v24;
      v30[6] = v26;
    }
  }
  __break(1u);
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1)
{
  return specialized Dictionary.init<A>(uniqueKeysWithValues:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
}

uint64_t specialized Dictionary.init<A>(uniqueKeysWithValues:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t, uint64_t *))
{
  if (*(void *)(a1 + 16))
  {
    __swift_instantiateConcreteTypeFromMangledName(a2);
    uint64_t v4 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v4 = MEMORY[0x1E4FBC868];
  }
  uint64_t v7 = v4;
  uint64_t v5 = swift_bridgeObjectRetain();
  a3(v5, 1, &v7);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t static ActionRoutingSiriSignals.all()()
{
  static TimeSinceAppLastInstalledSignal.instances()();
  static TimeSinceAppLastLaunchedSignal.instances()();
  OUTLINED_FUNCTION_0_19();
  type metadata accessor for AppLaunchCountSignal();
  MEMORY[0x1CB78C980]();
  OUTLINED_FUNCTION_0_19();
  MEMORY[0x1CB78CA30]();
  OUTLINED_FUNCTION_0_19();
  MEMORY[0x1CB78CA90]();
  OUTLINED_FUNCTION_0_19();
  MEMORY[0x1CB78CA60]();
  OUTLINED_FUNCTION_0_19();
  MEMORY[0x1CB78CAA0]();
  OUTLINED_FUNCTION_0_19();
  MEMORY[0x1CB78CA50]();
  MEMORY[0x1CB78CA40]();
  OUTLINED_FUNCTION_0_19();
  specialized Array.append<A>(contentsOf:)();
  MEMORY[0x1CB78CA80]();
  MEMORY[0x1CB78CA70]();
  OUTLINED_FUNCTION_0_19();
  specialized Array.append<A>(contentsOf:)();
  return v1;
}

Swift::Void __swiftcall SiriSignalsContainer.refreshSignals()()
{
  uint64_t v1 = static ActionRoutingSiriSignals.all()();
  uint64_t v17 = v0;
  uint64_t v2 = one-time initialization token for ranker;
  swift_bridgeObjectRetain();
  if (v2 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.ranker);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    type metadata accessor for SignalValue();
    swift_bridgeObjectRetain();
    uint64_t v7 = Dictionary.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v9, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v4, v5, "SignalContainer.refresh() called %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  specialized _arrayForceCast<A, B>(_:)(v1);
  swift_bridgeObjectRelease();
  type metadata accessor for SignalGatherer();
  swift_allocObject();
  SignalGatherer.init(signals:candidateAppBundleIds:)();
  uint64_t v10 = swift_allocObject();
  type metadata accessor for SignalValue();
  *(void *)(v10 + 16) = Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
  swift_release();
  swift_retain_n();
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    unint64_t v13 = (uint8_t *)swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v13 = 136315138;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v14 = Dictionary.description.getter();
    unint64_t v16 = v15;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v11, v12, "SignalContainer.refresh() finished %s", v13, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    swift_release();
  }
  else
  {

    swift_release();
    swift_release_n();
  }
  swift_beginAccess();
  *(void *)(v17 + 16) = *(void *)(v10 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
}

uint64_t closure #1 in SiriSignalsContainer.refreshSignals()(uint64_t a1, char *a2)
{
  char v41 = a2;
  uint64_t v3 = type metadata accessor for SignalGatherer.ValuesWithTimings();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SignalGathererError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v40 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  unint64_t v13 = (char *)&v38 - v12;
  MEMORY[0x1F4188790](v11);
  unint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  MEMORY[0x1F4188790](v16);
  int64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v18, v7);
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.ranker);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v13, v15, v7);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      char v41 = v15;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v39 = swift_slowAlloc();
      v43[0] = v39;
      *(_DWORD *)uint64_t v24 = 136315138;
      int64_t v38 = v24 + 4;
      v20(v40, v13, v7);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
      v27(v13, v7);
      _os_log_impl(&dword_1C9CFE000, v21, v22, "Signal gatherer error, setting signalValues to nil: %s", v24, 0xCu);
      uint64_t v28 = v39;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v28, -1, -1);
      MEMORY[0x1CB78E290](v24, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v27)(v41, v7);
    }
    else
    {

      uint64_t v37 = *(void (**)(char *, uint64_t))(v8 + 8);
      v37(v13, v7);
      return ((uint64_t (*)(char *, uint64_t))v37)(v15, v7);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, v3);
    uint64_t v30 = v3;
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    int64_t v31 = (uint64_t *)(v41 + 16);
    uint64_t v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.ranker);
    uint64_t v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      unint64_t v35 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v35 = 0;
      _os_log_impl(&dword_1C9CFE000, v33, v34, "Successfully gathered all signals", v35, 2u);
      MEMORY[0x1CB78E290](v35, -1, -1);
    }

    uint64_t v36 = SignalGatherer.ValuesWithTimings.values.getter();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v30);
    swift_beginAccess();
    uint64_t *v31 = v36;
    return swift_bridgeObjectRelease();
  }
}

uint64_t SiriSignalsContainer.get(from:query:defaultVal:)(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (!*(void *)(*(void *)(v4 + 16) + 16))
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v20 = 0xD000000000000050;
    unint64_t v19 = 0x80000001C9DA41C0;
    goto LABEL_5;
  }
  uint64_t v10 = (void *)_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG74_pG_SSSitKFSSAiJ_pcfu_33_1ec30c1e3c34803c076ffb86173186a4AiJ_pSSTf3nnnpk_nTf1cn_n(a1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  specialized Sequence.compactMap<A>(_:)(v11, v10, a2, a3, a4);
  uint64_t v13 = v12;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = specialized Dictionary.init<A>(uniqueKeysWithValues:)(v13, &demangling cache variable for type metadata for _DictionaryStorage<String, Int>, (void (*)(uint64_t, uint64_t, uint64_t *))specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:));
  if (*(void *)(v5 + 16) != *(void *)(a1 + 16))
  {
    uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay11SiriSignals15SignalProviding_pG_SSs5NeverOTg503_s7d7Cam0A16e54ContainerC3get4from5query10defaultValSDySSSiGSay0aC015fG75_pG_SSSitKFSSAiJ_pcfu0_33_2f9d014dde3806f51ad5602c3b2cd65fAiJ_pSSTf3nnnpk_nTf1cn_n(a1);
    uint64_t v15 = specialized Set.init<A>(_:)(v14);
    uint64_t v16 = specialized Set.init<A>(_:)(v5);
    specialized Set.subtracting(_:)(v16, v15);
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    v17._uint64_t countAndFlagsBits = Set.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v18._uint64_t countAndFlagsBits = 46;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t v5 = 0xD000000000000029;
    unint64_t v19 = 0x80000001C9DA4190;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v20 = 0xD000000000000029;
LABEL_5:
    *(void *)(v20 + 8) = v19;
    *(unsigned char *)(v20 + 16) = 1;
    swift_willThrow();
  }
  return v5;
}

uint64_t closure #1 in SiriSignalsContainer.get(from:query:defaultVal:)@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v72 = a6;
  uint64_t v66 = a5;
  uint64_t v67 = a3;
  unint64_t v69 = a4;
  uint64_t v71 = a2;
  uint64_t v7 = type metadata accessor for SignalValue();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v68 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v9);
  char v75 = (char *)&v64 - v11;
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  uint64_t v13 = v12 - 8;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(int *)(v13 + 56);
  Swift::String v17 = (char *)v15 + v16;
  uint64_t v74 = (char *)a1 + v16;
  uint64_t v18 = *a1;
  unint64_t v19 = a1[1];
  uint64_t v70 = v18;
  *uint64_t v15 = v18;
  v15[1] = v19;
  uint64_t v20 = *(void (**)(char *))(v8 + 16);
  v20(v17);
  os_log_type_t v22 = (uint64_t *)(v8 + 8);
  uint64_t v21 = *(void (**)(char *, char *))(v8 + 8);
  swift_bridgeObjectRetain();
  uint64_t v73 = v21;
  v21(v17, (char *)v7);
  uint64_t v23 = (char *)v15 + *(int *)(v13 + 56);
  uint64_t v24 = (void (*)(uint64_t *, char *, char *))v20;
  ((void (*)(char *, char *, uint64_t))v20)(v23, v74, v7);
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v26 = v23;
  unint64_t v27 = v19;
  uint64_t v74 = (char *)v7;
  v25(v75, v26, v7);
  uint64_t v28 = v70;
  if ((specialized Sequence<>.contains(_:)(v70, v27, v71) & 1) == 0)
  {
    v73(v75, v74);
    uint64_t result = swift_bridgeObjectRelease();
LABEL_14:
    unint64_t v53 = v72;
    *uint64_t v72 = 0;
    v53[1] = 0;
    v53[2] = 0;
    return result;
  }
  uint64_t v29 = v73;
  uint64_t v30 = v74;
  int64_t v31 = v68;
  v24(v68, v75, v74);
  if ((*(unsigned int (**)(uint64_t *, char *))(v8 + 88))(v31, v30) != *MEMORY[0x1E4FA4078])
  {
    swift_bridgeObjectRelease();
    int64_t v48 = (uint64_t (*)(char *, char *))v29;
    v29((char *)v31, v74);
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.ranker);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v52 = 0;
      _os_log_impl(&dword_1C9CFE000, v50, v51, "Ignoring bundle-dependent signal; can only use independent signals in this context",
        v52,
        2u);
      MEMORY[0x1CB78E290](v52, -1, -1);
    }

    uint64_t result = v48(v75, v74);
    goto LABEL_14;
  }
  (*(void (**)(uint64_t *, char *))(v8 + 96))(v31, v74);
  uint64_t v32 = *v31;
  uint64_t v33 = v69;
  swift_bridgeObjectRetain();
  uint64_t v71 = (void *)specialized Dictionary.subscript.getter(v67, v33, v32);
  char v35 = v34;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v36 = (uint64_t (*)(char *, char *))v29;
  uint64_t v37 = v28;
  if (v35)
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    unint64_t v55 = v69;
    swift_bridgeObjectRetain_n();
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.debug.getter();
    LODWORD(v71) = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      os_log_t v65 = v56;
      uint64_t v59 = v58;
      uint64_t v60 = swift_slowAlloc();
      uint64_t v68 = v22;
      uint64_t v61 = v60;
      uint64_t v77 = v60;
      *(_DWORD *)uint64_t v59 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v76 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v76 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v55, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v59 + 22) = 2048;
      uint64_t v45 = v66;
      uint64_t v76 = v66;
      uint64_t v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v62 = v65;
      _os_log_impl(&dword_1C9CFE000, v65, (os_log_type_t)v71, "No value of %s for include %s. Defaulting to %ld", (uint8_t *)v59, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v61, -1, -1);
      MEMORY[0x1CB78E290](v59, -1, -1);

      uint64_t result = ((uint64_t (*)(char *, char *))v73)(v75, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      uint64_t result = v36(v75, v74);
      uint64_t v45 = v66;
    }
  }
  else
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    unint64_t v39 = v69;
    swift_bridgeObjectRetain_n();
    uint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.debug.getter();
    LODWORD(v66) = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = swift_slowAlloc();
      os_log_t v65 = v40;
      uint64_t v43 = v42;
      uint64_t v77 = swift_slowAlloc();
      uint64_t v68 = v22;
      uint64_t v44 = v77;
      *(_DWORD *)uint64_t v43 = 136315650;
      swift_bridgeObjectRetain();
      uint64_t v76 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v27, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v76 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v39, &v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v43 + 22) = 2048;
      uint64_t v45 = v71;
      uint64_t v76 = v71;
      uint64_t v37 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v46 = v65;
      _os_log_impl(&dword_1C9CFE000, v65, (os_log_type_t)v66, "Found value of %s for %s: %ld", (uint8_t *)v43, 0x20u);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v44, -1, -1);
      MEMORY[0x1CB78E290](v43, -1, -1);

      uint64_t result = ((uint64_t (*)(char *, char *))v73)(v75, v74);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();

      uint64_t result = v36(v75, v74);
      uint64_t v45 = v71;
    }
  }
  uint64_t v63 = v72;
  *uint64_t v72 = v37;
  v63[1] = v27;
  v63[2] = (uint64_t)v45;
  return result;
}

uint64_t type metadata accessor for SiriSignalsContainer()
{
  return self;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  return result;
}

void specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  uint64_t v5 = (uint64_t *)(swift_bridgeObjectRetain() + 48);
  while (1)
  {
    uint64_t v7 = *(v5 - 2);
    uint64_t v6 = *(v5 - 1);
    uint64_t v8 = *v5;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    uint64_t v12 = v9[2];
    BOOL v13 = (v10 & 1) == 0;
    if (__OFADD__(v12, v13))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    char v14 = v10;
    if (v9[3] < v12 + v13) {
      break;
    }
    if (a2)
    {
      if (v10) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      _NativeDictionary.copy()();
      if (v14) {
        goto LABEL_14;
      }
    }
LABEL_10:
    Swift::String v17 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1 << v11;
    uint64_t v18 = (uint64_t *)(v17[6] + 16 * v11);
    *uint64_t v18 = v7;
    v18[1] = v6;
    *(void *)(v17[7] + 8 * v11) = v8;
    uint64_t v19 = v17[2];
    BOOL v20 = __OFADD__(v19, 1);
    uint64_t v21 = v19 + 1;
    if (v20) {
      goto LABEL_18;
    }
    v5 += 3;
    void v17[2] = v21;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v14 & 1) != (v16 & 1)) {
    goto LABEL_19;
  }
  unint64_t v11 = v15;
  if ((v14 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  os_log_type_t v22 = (void *)swift_allocError();
  swift_willThrow();
  id v23 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v24._object = (void *)0x80000001C9DA4260;
  v24._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v24);
  _print_unlocked<A, B>(_:_:)();
  v25._uint64_t countAndFlagsBits = 39;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v3;
  void **i;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  unint64_t v16;
  char v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  void *v23;
  id v24;
  Swift::String v25;
  Swift::String v26;

  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    swift_bridgeObjectRelease();
    return;
  }
  for (unint64_t i = (void **)(swift_bridgeObjectRetain() + 48); ; i += 3)
  {
    uint64_t v7 = (uint64_t)*(i - 2);
    uint64_t v6 = (uint64_t)*(i - 1);
    uint64_t v8 = *i;
    uint64_t v9 = (void *)*a3;
    swift_bridgeObjectRetain();
    char v10 = v8;
    uint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
    BOOL v13 = v9[2];
    char v14 = (v11 & 1) == 0;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_18:
      __break(1u);
LABEL_19:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      goto LABEL_20;
    }
    unint64_t v15 = v11;
    if (v9[3] < v13 + v14) {
      break;
    }
    if (a2)
    {
      if (v11) {
        goto LABEL_14;
      }
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
      _NativeDictionary.copy()();
      if (v15) {
        goto LABEL_14;
      }
    }
LABEL_10:
    uint64_t v18 = (void *)*a3;
    *(void *)(*a3 + 8 * (v12 >> 6) + 64) |= 1 << v12;
    uint64_t v19 = (uint64_t *)(v18[6] + 16 * v12);
    *uint64_t v19 = v7;
    v19[1] = v6;
    *(void *)(v18[7] + 8 * v12) = v10;
    BOOL v20 = v18[2];
    uint64_t v21 = __OFADD__(v20, 1);
    os_log_type_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    v18[2] = v22;
    a2 = 1;
    if (!--v3)
    {
      swift_bridgeObjectRelease_n();
      return;
    }
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)();
  char v16 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v6);
  if ((v15 & 1) != (v17 & 1)) {
    goto LABEL_19;
  }
  uint64_t v12 = v16;
  if ((v15 & 1) == 0) {
    goto LABEL_10;
  }
LABEL_14:
  id v23 = (void *)swift_allocError();
  swift_willThrow();
  Swift::String v24 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease_n();
    return;
  }
LABEL_20:
  _StringGuts.grow(_:)(30);
  v25._object = (void *)0x80000001C9DA4260;
  v25._uint64_t countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v25);
  _print_unlocked<A, B>(_:_:)();
  v26._uint64_t countAndFlagsBits = 39;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t outlined init with take of (key: String, value: SignalValue)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of (key: String, value: SignalValue)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C9D6B998()
{
  swift_bridgeObjectRelease();
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t partial apply for closure #1 in SiriSignalsContainer.refreshSignals()(uint64_t a1)
{
  return closure #1 in SiriSignalsContainer.refreshSignals()(a1, v1);
}

uint64_t outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void OUTLINED_FUNCTION_0_19()
{
  specialized Array.append<A>(contentsOf:)();
}

void one-time initialization function for forceEnabled()
{
  static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled = MEMORY[0x1E4FBC868];
}

{
  static CamFeatureFlag.forceEnabled = MEMORY[0x1E4FBC868];
}

const char *SiriKitRuntimeAmbiguityFeatureFlags.domain.getter()
{
  return "SiriKitRuntime";
}

const char *SiriKitRuntimeAmbiguityFeatureFlags.feature.getter()
{
  return "input_paraphrasing_flows";
}

uint64_t SiriKitRuntimeAmbiguityFeatureFlags.isEnabled.getter()
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v0 = static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled;
  if (*(void *)(static SiriKitRuntimeAmbiguityFeatureFlags.forceEnabled + 16)
    && (uint64_t v1 = specialized __RawDictionaryStorage.find<A>(_:)(), (v2 & 1) != 0))
  {
    char v3 = *(unsigned char *)(*(void *)(v0 + 56) + v1);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v6 = &type metadata for SiriKitRuntimeAmbiguityFeatureFlags;
    unint64_t v7 = lazy protocol witness table accessor for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags();
    char v3 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  }
  return v3 & 1;
}

Swift::Int SiriKitRuntimeAmbiguityFeatureFlags.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags;
  if (!lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SiriKitRuntimeAmbiguityFeatureFlags and conformance SiriKitRuntimeAmbiguityFeatureFlags);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SiriKitRuntimeAmbiguityFeatureFlags(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1C9D6BC90);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SiriKitRuntimeAmbiguityFeatureFlags()
{
  return &type metadata for SiriKitRuntimeAmbiguityFeatureFlags;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d88Cam26DawnRankerFeatureExtractorV27extractOnScreenAppBundleIds12rrCandidatesShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v19 = type metadata accessor for RREntity();
  uint64_t v3 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    v17[1] = v1;
    uint64_t v20 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v8 = *(void *)(type metadata accessor for RRCandidate() - 8);
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v18 = *(void *)(v8 + 72);
    char v10 = (void (**)(char *, uint64_t))(v3 + 8);
    do
    {
      RRCandidate.entity.getter();
      uint64_t v11 = RREntity.id.getter();
      uint64_t v13 = v12;
      (*v10)(v5, v19);
      uint64_t v7 = v20;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v20;
      }
      unint64_t v14 = *(void *)(v7 + 16);
      if (v14 >= *(void *)(v7 + 24) >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        uint64_t v7 = v20;
      }
      *(void *)(v7 + 16) = v14 + 1;
      uint64_t v15 = v7 + 16 * v14;
      *(void *)(v15 + 32) = v11;
      *(void *)(v15 + 40) = v13;
      v9 += v18;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t ParserPriority.rawValue.getter(unsigned __int8 a1)
{
  return 5 - a1;
}

SiriCam::Domain3PProtectionLevel_optional __swiftcall Domain3PProtectionLevel.init(rawValue:)(Swift::Int64 rawValue)
{
  if ((unint64_t)rawValue >= 4) {
    LOBYTE(rawValue) = 4;
  }
  return (SiriCam::Domain3PProtectionLevel_optional)rawValue;
}

uint64_t specialized ScalarFeatureExtracting.extract(from:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t result = a3();
  if (!v3)
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(result);
    uint64_t v6 = v5;
    swift_bridgeObjectRelease();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v6, 0);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t one-time initialization function for extractedFeatures()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  uint64_t v0 = static UserParseFeatureExtractor.extractedFeatures;
  type metadata accessor for AffinityRankFeatureExtractor();
  static AffinityRankFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v4;
  }
  unint64_t v1 = *(void *)(v0 + 16);
  if (v1 >= *(void *)(v0 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v0 = v5;
  }
  *(void *)(v0 + 16) = v1 + 1;
  uint64_t v2 = v0 + 16 * v1;
  *(void *)(v2 + 32) = 0x535F5050415F5349;
  *(void *)(v2 + 40) = 0xEF54554354524F48;
  swift_bridgeObjectRelease();
  type metadata accessor for ConversationHistoryFeatureExtractor();
  static ConversationHistoryFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  uint64_t result = swift_bridgeObjectRelease();
  static RankerFeatureExtractor.extractedFeatures = v0;
  return result;
}

{
  uint64_t result;
  void *v1;

  type metadata accessor for ConversationHistoryFeatureExtractor();
  unint64_t v1 = static ConversationHistoryFeatureExtractor.extractedFeatures.getter();
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  uint64_t result = swift_bridgeObjectRelease();
  static DawnRankerFeatureExtractor.extractedFeatures = (uint64_t)v1;
  return result;
}

{
  uint64_t vars8;

  if (one-time initialization token for CRR_FEATURES != -1) {
    swift_once();
  }
  static CRRFeatureExtractor.extractedFeatures = static PersonalInputFeatureNames.CRR_FEATURES;
  return swift_bridgeObjectRetain();
}

uint64_t *RankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static RankerFeatureExtractor.extractedFeatures;
}

uint64_t RankerFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for MLFeatureValue();
  uint64_t v5 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v17 = v5;
  uint64_t v6 = type metadata accessor for RankerFeatureExtractor();
  uint64_t v7 = specialized FeatureExtracting.extract(from:)(a1, *(double *)(v3 + *(int *)(v6 + 36)));
  if (v2)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v7);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_8();
    swift_bridgeObjectRelease();
    uint64_t v8 = (uint64_t *)(v3 + *(int *)(v6 + 20));
    uint64_t v10 = *v8;
    uint64_t v9 = v8[1];
    uint64_t v11 = *((unsigned __int8 *)v8 + 16);
    swift_bridgeObjectRetain();
    uint64_t v12 = specialized FeatureExtracting.extract(from:)(a1, v10, v9, v11);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v12);
    uint64_t v14 = v13;
    swift_bridgeObjectRelease();
    specialized Dictionary.update(other:allowDuplicateKeys:)(v14, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_retain();
    specialized ScalarFeatureExtracting.extract(from:to:)(a1, (uint64_t)&v17, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:));
    swift_release();
    uint64_t v16 = specialized FeatureExtracting.extract(from:)(a1);
    specialized _dictionaryUpCast<A, B, C, D>(_:)(v16);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_19_8();
    swift_bridgeObjectRelease();
    swift_retain();
    specialized ScalarFeatureExtracting.extract(from:to:)(a1, (uint64_t)&v17, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:));
    swift_release();
    return v17;
  }
  return v5;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance RankerFeatureExtractor()
{
  RankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance RankerFeatureExtractor(uint64_t a1)
{
  return RankerFeatureExtractor.extractImpl(from:)(a1);
}

uint64_t ParserPriority.init(parserId:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v2 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v5 = v4 - v3;
  uint64_t v6 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  if (__swift_getEnumTagSinglePayload(a1, 1, v6) != 1)
  {
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(a1, v5);
    OUTLINED_FUNCTION_0_11();
    uint64_t v9 = v8;
    int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 88))(v5, v6);
    if (v11 == *MEMORY[0x1E4FA27A8])
    {
      uint64_t v7 = 0;
      goto LABEL_11;
    }
    if (v11 == *MEMORY[0x1E4FA2798])
    {
      uint64_t v7 = 4;
      goto LABEL_11;
    }
    if (v11 == *MEMORY[0x1E4FA2790])
    {
      uint64_t v7 = 2;
      goto LABEL_11;
    }
    if (v11 == *MEMORY[0x1E4FA2778])
    {
      uint64_t v7 = 1;
      goto LABEL_11;
    }
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v5, v6);
  }
  uint64_t v7 = 5;
LABEL_11:
  outlined destroy of RRDataSourceMetadataValue?(a1, &demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  return v7;
}

uint64_t Domain3PProtectionLevel.rawValue.getter(uint64_t result)
{
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance Domain3PProtectionLevel()
{
  return specialized RawRepresentable<>.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance Domain3PProtectionLevel(uint64_t a1)
{
  specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance Domain3PProtectionLevel(uint64_t a1)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, *v1);
}

SiriCam::Domain3PProtectionLevel_optional protocol witness for RawRepresentable.init(rawValue:) in conformance Domain3PProtectionLevel@<W0>(Swift::Int64 *a1@<X0>, SiriCam::Domain3PProtectionLevel_optional *a2@<X8>)
{
  result.value = Domain3PProtectionLevel.init(rawValue:)(*a1).value;
  a2->value = result.value;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance Domain3PProtectionLevel@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = Domain3PProtectionLevel.rawValue.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t *DawnRankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static DawnRankerFeatureExtractor.extractedFeatures;
}

uint64_t static DawnRankerFeatureExtractor.extractOnScreenAppBundleIds(rrCandidates:)(uint64_t a1)
{
  uint64_t v53 = type metadata accessor for RREntity();
  OUTLINED_FUNCTION_0_11();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_1();
  uint64_t v52 = v6 - v5;
  uint64_t v7 = type metadata accessor for RRCandidate();
  OUTLINED_FUNCTION_0_11();
  uint64_t v9 = v8;
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v47 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  os_log_type_t v51 = (char *)v43 - v14;
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v43 - v15;
  uint64_t v17 = MEMORY[0x1E4FBC860];
  uint64_t v55 = MEMORY[0x1E4FBC860];
  uint64_t v18 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v18)
  {
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    uint64_t v20 = v9 + 16;
    uint64_t v19 = v21;
    uint64_t v22 = *(unsigned __int8 *)(v20 + 64);
    uint64_t v23 = *(void *)(v20 + 56);
    v43[1] = a1;
    uint64_t v44 = (v22 + 32) & ~v22;
    uint64_t v24 = a1 + v44;
    uint64_t v48 = v3 + 8;
    uint64_t v49 = v23;
    uint64_t v54 = (void (**)(void))(v20 - 8);
    uint64_t v45 = v20;
    os_log_t v46 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v50 = v21;
    while (1)
    {
      v19(v16, v24, v7);
      RRCandidate.entity.getter();
      RREntity.usoEntity.getter();
      OUTLINED_FUNCTION_18_1();
      v25();
      uint64_t v26 = UsoTask.verbString.getter();
      uint64_t v28 = v27;
      swift_release();
      if (v26 == 0x415F6E6F6D6D6F63 && v28 == 0xEA00000000007070)
      {
        swift_bridgeObjectRelease();
        uint64_t v33 = OUTLINED_FUNCTION_13_10();
        ((void (*)(uint64_t))v19)(v33);
      }
      else
      {
        char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t v31 = OUTLINED_FUNCTION_13_10();
        ((void (*)(uint64_t))v19)(v31);
        if ((v30 & 1) == 0)
        {
          uint64_t v32 = *v54;
          ((void (*)(uint64_t, uint64_t))*v54)(v28, v7);
          goto LABEL_16;
        }
      }
      char v34 = RRCandidate.isOnScreen.getter();
      uint64_t v32 = *v54;
      OUTLINED_FUNCTION_18_1();
      v32();
      if (v34)
      {
        char v35 = *v46;
        (*v46)(v47, v16, v7);
        uint64_t v36 = v55;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v36 + 16) + 1, 1);
          uint64_t v36 = v55;
        }
        unint64_t v38 = *(void *)(v36 + 16);
        unint64_t v37 = *(void *)(v36 + 24);
        if (v38 >= v37 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v37 > 1, v38 + 1, 1);
          uint64_t v36 = v55;
        }
        *(void *)(v36 + 16) = v38 + 1;
        uint64_t v39 = v36 + v44 + v38 * v49;
        uint64_t v40 = v49;
        v35((char *)v39, v47, v7);
        uint64_t v55 = v36;
        goto LABEL_17;
      }
LABEL_16:
      ((void (*)(char *, uint64_t))v32)(v16, v7);
      uint64_t v40 = v49;
LABEL_17:
      v24 += v40;
      --v18;
      uint64_t v19 = v50;
      if (!v18)
      {
        uint64_t v17 = v55;
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay32SiriReferenceResolutionDataModel11RRCandidateVG_SSs5NeverOTg503_s7d88Cam26DawnRankerFeatureExtractorV27extractOnScreenAppBundleIds12rrCandidatesShySSGSay0A28efg7Model11I63VG_tFZSSAIcfu_33_90a86b9d715d44caa755a7dc6dc8aa3bAISSTf3nnnpk_nTf1cn_n(v17);
  swift_release();
  return specialized Set.init<A>(_:)(v41);
}

uint64_t DawnRankerFeatureExtractor.extractImpl(from:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Parser.ParserIdentifier?);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for CamUSOParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v11);
  OUTLINED_FUNCTION_2_1();
  uint64_t v14 = v13 - v12;
  type metadata accessor for CamParse(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v15);
  OUTLINED_FUNCTION_2_1();
  uint64_t v18 = (void **)(v17 - v16);
  type metadata accessor for MLFeatureValue();
  uint64_t v85 = Dictionary.init(dictionaryLiteral:)();
  swift_retain();
  specialized ScalarFeatureExtracting.extract(from:to:)(a1, (uint64_t)&v85, (uint64_t (*)(void))specialized FeatureExtracting.extract(from:));
  swift_release();
  if (v4) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v20 = (int *)type metadata accessor for ActionCandidate();
  uint64_t v21 = *(void *)(a1 + v20[6]);
  if (v21 >= 4) {
    uint64_t v21 = 4;
  }
  if (v21 <= 1) {
    uint64_t v22 = 1;
  }
  else {
    uint64_t v22 = v21;
  }
  uint64_t v79 = a1;
  outlined init with copy of CamParse(a1 + v20[5], (uint64_t)v18);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v24 = v22;
      Swift::String v25 = *v18;
      dispatch thunk of PommesResponse.isPersonalDomainFallback.getter();

      uint64_t v77 = 0;
      uint64_t v78 = 0;
      int v27 = 0;
    }
    else
    {
      if (one-time initialization token for ranker != -1) {
        swift_once();
      }
      uint64_t v35 = type metadata accessor for Logger();
      __swift_project_value_buffer(v35, (uint64_t)static Logger.ranker);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v36, v37))
      {
        unint64_t v38 = (_WORD *)swift_slowAlloc();
        *unint64_t v38 = 0;
        OUTLINED_FUNCTION_2_7(&dword_1C9CFE000, v39, v40, "Unknown parser");
        MEMORY[0x1CB78E290](v38, -1, -1);
      }
      uint64_t v24 = v22;

      uint64_t v26 = outlined destroy of CamParse((uint64_t)v18, (void (*)(void))type metadata accessor for CamParse);
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      int v27 = 0;
    }
    uint64_t v41 = a4;
  }
  else
  {
    outlined init with take of CamUSOParse((uint64_t)v18, v14);
    outlined init with copy of Siri_Nlu_External_Parser.ParserIdentifier?(v14 + *(int *)(v10 + 20), v9);
    ParserPriority.init(parserId:)(v9);
    uint64_t v28 = CamUSOParse.appShortcutInvocation.getter();
    if (v29)
    {
      outlined consume of AppShortcutInvocation?(v28, v29);
      CamUSOParse.appShortcutInvocation.getter();
      uint64_t v31 = v30;
      uint64_t v77 = v32;
      uint64_t v34 = v33;
      uint64_t v26 = outlined destroy of CamParse(v14, (void (*)(void))type metadata accessor for CamUSOParse);
      if (v31)
      {
        uint64_t v78 = v34;
        uint64_t v26 = swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v77 = 0;
        uint64_t v78 = 0;
      }
      int v27 = 1;
      uint64_t v24 = a3;
    }
    else
    {
      uint64_t v24 = v22;
      uint64_t v26 = outlined destroy of CamParse(v14, (void (*)(void))type metadata accessor for CamUSOParse);
      uint64_t v77 = 0;
      uint64_t v78 = 0;
      int v27 = 0;
    }
    uint64_t v41 = a4;
  }
  uint64_t v42 = (uint64_t *)(v79 + v20[9]);
  uint64_t v43 = v42[1];
  uint64_t v44 = (uint64_t *)MEMORY[0x1E4FBC840];
  if (v43)
  {
    specialized Set.contains(_:)(*v42, v43, v41);
    if ((v27 & 1) == 0) {
      goto LABEL_39;
    }
  }
  else if (!v27)
  {
    goto LABEL_39;
  }
  uint64_t v45 = *(void *)(v79 + v20[7]);
  if (v45)
  {
    OUTLINED_FUNCTION_10_9(v26, v43, v45);
    if (*((void *)&v84 + 1))
    {
      uint64_t v26 = OUTLINED_FUNCTION_14_12();
      if (v26) {
        goto LABEL_39;
      }
      goto LABEL_34;
    }
  }
  else
  {
    long long v83 = 0u;
    long long v84 = 0u;
  }
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)&v83, &demangling cache variable for type metadata for Any?);
LABEL_34:
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v46 = type metadata accessor for Logger();
  __swift_project_value_buffer(v46, (uint64_t)static Logger.ranker);
  uint64_t v47 = Logger.logObject.getter();
  os_log_type_t v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (_WORD *)swift_slowAlloc();
    _WORD *v49 = 0;
    OUTLINED_FUNCTION_2_7(&dword_1C9CFE000, v50, v51, "App Shortcut enablement status not available in user data. This should not happen.");
    MEMORY[0x1CB78E290](v49, -1, -1);
  }

  uint64_t v44 = (uint64_t *)MEMORY[0x1E4FBC840];
LABEL_39:
  uint64_t v52 = *(void *)(v79 + v20[7]);
  if (v52)
  {
    OUTLINED_FUNCTION_10_9(v26, v43, v52);
    if (*((void *)&v84 + 1))
    {
      OUTLINED_FUNCTION_14_12();
      goto LABEL_44;
    }
  }
  else
  {
    long long v83 = 0u;
    long long v84 = 0u;
  }
  outlined destroy of RRDataSourceMetadataValue?((uint64_t)&v83, &demangling cache variable for type metadata for Any?);
LABEL_44:
  DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(v79);
  uint64_t v53 = v42[1];
  if (v53)
  {
    uint64_t v44 = (uint64_t *)*v42;
    OUTLINED_FUNCTION_15_11();
    static CamUserHistoryDefaultsManager.getValue(key:)(v54 + 10, 0x80000001C9DA3850, &v83);
    if (*((void *)&v84 + 1))
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      if (OUTLINED_FUNCTION_14_12())
      {
        uint64_t v55 = v82;
LABEL_51:
        char v57 = specialized Sequence<>.contains(_:)((uint64_t)v44, v53, v55);
        swift_bridgeObjectRelease();
        uint64_t v56 = v57 & 1;
        goto LABEL_52;
      }
    }
    else
    {
      outlined destroy of RRDataSourceMetadataValue?((uint64_t)&v83, &demangling cache variable for type metadata for Any?);
    }
    uint64_t v55 = (void *)MEMORY[0x1E4FBC860];
    goto LABEL_51;
  }
  uint64_t v56 = 0;
LABEL_52:
  uint64_t v58 = self;
  if (objc_msgSend(v58, sel_featureValueWithInt64_, v24))
  {
    OUTLINED_FUNCTION_2_21();
    *(void *)&long long v83 = v44;
    OUTLINED_FUNCTION_15_11();
    OUTLINED_FUNCTION_4_13(v59 - 2, (uint64_t)"plugin_affinity_score");
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_15_11();
    OUTLINED_FUNCTION_7_16(v60 - 2, (uint64_t)"plugin_affinity_score");
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    uint64_t v62 = OUTLINED_FUNCTION_8_12();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v62, 0x705F726573726170, 0xEF797469726F6972);
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    uint64_t v44 = &v85;
    specialized Dictionary._Variant.removeValue(forKey:)(0x705F726573726170, 0xEF797469726F6972);
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    uint64_t v64 = OUTLINED_FUNCTION_8_12();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v64, 0x535F5050415F5349, 0xEF54554354524F48);
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    uint64_t v44 = &v85;
    specialized Dictionary._Variant.removeValue(forKey:)(0x535F5050415F5349, 0xEF54554354524F48);
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    *(void *)&long long v83 = v44;
    OUTLINED_FUNCTION_15_11();
    OUTLINED_FUNCTION_4_13(v66 - 4, (uint64_t)"is_app_foregrounded");
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_15_11();
    OUTLINED_FUNCTION_7_16(v67 - 4, (uint64_t)"is_app_foregrounded");
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    uint64_t v69 = OUTLINED_FUNCTION_8_12();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v69, 0x665F73656D6D6F70, 0xEF6B6361626C6C61);
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    uint64_t v44 = &v85;
    specialized Dictionary._Variant.removeValue(forKey:)(0x665F73656D6D6F70, 0xEF6B6361626C6C61);
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    *(void *)&long long v83 = v44;
    OUTLINED_FUNCTION_9_13((uint64_t)"IS_ENABLED_APP_SHORTCUT");
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_12_9((uint64_t)"IS_ENABLED_APP_SHORTCUT");
  }
  if (OUTLINED_FUNCTION_11_13())
  {
    OUTLINED_FUNCTION_2_21();
    *(void *)&long long v83 = v44;
    OUTLINED_FUNCTION_9_13((uint64_t)"domain_protection_level");
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_12_9((uint64_t)"domain_protection_level");
  }
  if (objc_msgSend(v58, sel_featureValueWithInt64_, v56, v77))
  {
    OUTLINED_FUNCTION_2_21();
    OUTLINED_FUNCTION_16_7();
    OUTLINED_FUNCTION_4_13(v73, (uint64_t)"ambiguous_first_run_prev_shown");
    OUTLINED_FUNCTION_1_20();
  }
  else
  {
    OUTLINED_FUNCTION_7_16(0xD00000000000001ELL, (uint64_t)"ambiguous_first_run_prev_shown");
  }
  if (v78)
  {
    if (@nonobjc MLFeatureValue.__allocating_init(string:)())
    {
      OUTLINED_FUNCTION_2_21();
      OUTLINED_FUNCTION_16_7();
      OUTLINED_FUNCTION_4_13(v75, (uint64_t)"app_shortcut_action_identifier");
      OUTLINED_FUNCTION_1_20();
    }
    else
    {
      OUTLINED_FUNCTION_7_16(0xD00000000000001ELL, (uint64_t)"app_shortcut_action_identifier");
    }
  }
  return v85;
}

uint64_t DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(uint64_t a1)
{
  uint64_t v2 = static TrialProvider.tieBreakingOverrides.getter();
  if (!v2) {
    return 3;
  }
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v8[2] = a1;
  uint64_t v4 = specialized Sequence.compactMap<A>(_:)((void (*)(uint64_t *__return_ptr, void *))partial apply for closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:), (uint64_t)v8, v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    if (v5 == 1) {
      uint64_t v6 = *(unsigned __int8 *)(v4 + 32);
    }
    else {
      uint64_t v6 = 3;
    }
  }
  else
  {
    uint64_t v6 = 2;
  }
  swift_bridgeObjectRelease();
  return v6;
}

id @nonobjc MLFeatureValue.__allocating_init(string:)()
{
  uint64_t v0 = (void *)MEMORY[0x1CB78D210]();
  swift_bridgeObjectRelease();
  id v1 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_featureValueWithString_, v0);

  return v1;
}

uint64_t closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)@<X0>(uint64_t result@<X0>, uint64_t *a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = *(void *)result;
  uint64_t v5 = *(void *)(result + 8);
  uint64_t v6 = *(void *)(result + 16);
  uint64_t v7 = *(void *)(result + 24);
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  BOOL v10 = *(void *)result == *a2 && v5 == v9;
  if (v10 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result))
    && (v6 == 0xD000000000000021 && v7 == 0x80000001C9DA20E0
     || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    char v11 = 3;
  }
  else if ((v4 == 0xD000000000000021 && v5 == 0x80000001C9DA20E0 {
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
  }
         && (v6 == v8 ? (BOOL v12 = v7 == v9) : (BOOL v12 = 0),
             v12 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0)))
  {
    char v11 = 1;
  }
  else
  {
    char v11 = 4;
  }
  *a3 = v11;
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance DawnRankerFeatureExtractor()
{
  DawnRankerFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance DawnRankerFeatureExtractor(uint64_t a1)
{
  return DawnRankerFeatureExtractor.extractImpl(from:)(a1, *v1, v1[1], v1[2]);
}

uint64_t destroy for DawnRankerFeatureExtractor()
{
  swift_release();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for DawnRankerFeatureExtractor(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for DawnRankerFeatureExtractor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for DawnRankerFeatureExtractor(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DawnRankerFeatureExtractor(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 24))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DawnRankerFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DawnRankerFeatureExtractor()
{
  return &type metadata for DawnRankerFeatureExtractor;
}

uint64_t *initializeBufferWithCopyOfBuffer for RankerFeatureExtractor(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = (int *)type metadata accessor for RankerContext();
    uint64_t v9 = v8[5];
    BOOL v10 = (char *)v7 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for ResponseMode();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    swift_bridgeObjectRetain();
    v13(v10, v11, v12);
    uint64_t v14 = v8[6];
    uint64_t v15 = (uint64_t *)((char *)v7 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = v8[7];
    uint64_t v19 = (char *)v7 + v18;
    uint64_t v20 = (char *)a2 + v18;
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
    uint64_t v21 = a3[5];
    uint64_t v22 = a3[6];
    uint64_t v23 = (char *)v7 + v21;
    uint64_t v24 = (char *)a2 + v21;
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    v23[16] = v24[16];
    *(uint64_t *)((char *)v7 + v22) = *(uint64_t *)((char *)a2 + v22);
    uint64_t v26 = a3[9];
    *(uint64_t *)((char *)v7 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    *(uint64_t *)((char *)v7 + v26) = *(uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
  }
  swift_retain();
  return v7;
}

uint64_t destroy for RankerFeatureExtractor(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for RankerContext() + 20);
  uint64_t v3 = type metadata accessor for ResponseMode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void *initializeWithCopy for RankerFeatureExtractor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for RankerContext();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ResponseMode();
  char v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_bridgeObjectRetain();
  v11(v8, v9, v10);
  uint64_t v12 = v6[6];
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  uint64_t v16 = v6[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  *(void *)uint64_t v17 = *(void *)v18;
  v17[8] = v18[8];
  uint64_t v19 = a3[5];
  uint64_t v20 = a3[6];
  uint64_t v21 = (char *)a1 + v19;
  uint64_t v22 = (char *)a2 + v19;
  uint64_t v23 = *((void *)v22 + 1);
  *(void *)uint64_t v21 = *(void *)v22;
  *((void *)v21 + 1) = v23;
  v21[16] = v22[16];
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  uint64_t v24 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v24) = *(void *)((char *)a2 + v24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for RankerFeatureExtractor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for RankerContext();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = v6[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  *uint64_t v12 = *v13;
  v12[1] = v13[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = v6[7];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = *(void *)v16;
  v15[8] = v16[8];
  *(void *)uint64_t v15 = v17;
  uint64_t v18 = a3[5];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v21 = *((void *)v20 + 1);
  v19[16] = v20[16];
  *((void *)v19 + 1) = v21;
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_retain();
  swift_release();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

void *initializeWithTake for RankerFeatureExtractor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = (int *)type metadata accessor for RankerContext();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(_OWORD *)((char *)a1 + v6[6]) = *(_OWORD *)((char *)a2 + v6[6]);
  uint64_t v11 = v6[7];
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  *(void *)uint64_t v12 = *(void *)v13;
  v12[8] = v13[8];
  uint64_t v14 = a3[5];
  uint64_t v15 = a3[6];
  uint64_t v16 = (char *)a1 + v14;
  uint64_t v17 = (char *)a2 + v14;
  v16[16] = v17[16];
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  uint64_t v18 = a3[9];
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  return a1;
}

void *assignWithTake for RankerFeatureExtractor(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = (int *)type metadata accessor for RankerContext();
  uint64_t v7 = v6[5];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for ResponseMode();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  uint64_t v11 = v6[6];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (void *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease();
  uint64_t v16 = v6[7];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  v17[8] = v18[8];
  *(void *)uint64_t v17 = *(void *)v18;
  uint64_t v19 = a3[5];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)((char *)a1 + v19) = *(void *)((char *)a2 + v19);
  swift_bridgeObjectRelease();
  *((void *)v20 + 1) = *((void *)v21 + 1);
  v20[16] = v21[16];
  *(void *)((char *)a1 + a3[6]) = *(void *)((char *)a2 + a3[6]);
  swift_release();
  *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
  swift_release();
  *(void *)((char *)a1 + a3[9]) = *(void *)((char *)a2 + a3[9]);
  return a1;
}

uint64_t getEnumTagSinglePayload for RankerFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D6DFB8);
}

uint64_t sub_1C9D6DFB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for RankerContext();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    return __swift_getEnumTagSinglePayload(a1, a2, v6);
  }
  else
  {
    unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v9 >= 0xFFFFFFFF) {
      LODWORD(v9) = -1;
    }
    return (v9 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for RankerFeatureExtractor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D6E058);
}

void sub_1C9D6E058(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for RankerContext();
  OUTLINED_FUNCTION_0_3();
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    __swift_storeEnumTagSinglePayload(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
}

uint64_t type metadata accessor for RankerFeatureExtractor()
{
  uint64_t result = type metadata singleton initialization cache for RankerFeatureExtractor;
  if (!type metadata singleton initialization cache for RankerFeatureExtractor) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for RankerFeatureExtractor()
{
  uint64_t result = type metadata accessor for RankerContext();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t partial apply for closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return closure #1 in DawnRankerFeatureExtractor.extractDomainProtectionLevel(from:)(a1, *(uint64_t **)(v2 + 16), a2);
}

unsigned char *storeEnumTagSinglePayload for Domain3PProtectionLevel(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D6E2D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Domain3PProtectionLevel()
{
  return &type metadata for Domain3PProtectionLevel;
}

unint64_t lazy protocol witness table accessor for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel()
{
  unint64_t result = lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel;
  if (!lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Domain3PProtectionLevel and conformance Domain3PProtectionLevel);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_1_20()
{
  *(void *)(v0 - 72) = *(void *)(v0 - 112);
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_2_21()
{
  return swift_isUniquelyReferenced_nonNull_native();
}

void OUTLINED_FUNCTION_4_13(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a1, (a2 - 32) | 0x8000000000000000);
}

void OUTLINED_FUNCTION_7_16(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  specialized Dictionary._Variant.removeValue(forKey:)(a1, (a2 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_8_12()
{
  *(void *)(v2 - 112) = v1;
  return v0;
}

void OUTLINED_FUNCTION_9_13(uint64_t a1@<X8>)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v1, 0xD000000000000017, (a1 - 32) | 0x8000000000000000);
}

double OUTLINED_FUNCTION_10_9(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary.subscript.getter(0xD000000000000014, (v3 - 32) | 0x8000000000000000, a3, (_OWORD *)(v4 - 112));
}

id OUTLINED_FUNCTION_11_13()
{
  return [v1 (SEL)(v0 + 573)];
}

void OUTLINED_FUNCTION_12_9(uint64_t a1@<X8>)
{
  specialized Dictionary._Variant.removeValue(forKey:)(0xD000000000000017, (a1 - 32) | 0x8000000000000000);
}

uint64_t OUTLINED_FUNCTION_13_10()
{
  return *(void *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_14_12()
{
  return swift_dynamicCast();
}

void OUTLINED_FUNCTION_16_7()
{
  *(void *)(v1 - 112) = v0;
}

uint64_t OUTLINED_FUNCTION_19_8()
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(v0, 0);
}

id static UncertaintyPromptRequestLogger.map(from:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01F8]), sel_init);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + *(int *)(type metadata accessor for CamRequest(0) + 52));
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = 0;
      do
      {
        int v6 = *(unsigned __int8 *)(v3 + v5++ + 32);
        if (v6 == 1) {
          unint64_t v7 = 0x4F5455415F534D53;
        }
        else {
          unint64_t v7 = 0xD000000000000010;
        }
        unint64_t v8 = 0xEC000000444E4553;
        if (v6 != 1) {
          unint64_t v8 = 0x80000001C9DA2710;
        }
        if (v6) {
          uint64_t v9 = v7;
        }
        else {
          uint64_t v9 = 0x455045525F4B5341;
        }
        if (v6) {
          unint64_t v10 = v8;
        }
        else {
          unint64_t v10 = 0xEA00000000005441;
        }
        uint64_t v11 = (void *)MEMORY[0x1CB78D210](v9, v10);
        swift_bridgeObjectRelease();
        objc_msgSend(v2, sel_addFeature_, v11);
      }
      while (v4 != v5);
      swift_bridgeObjectRelease();
    }
  }
  return v2;
}

uint64_t dispatch thunk of static CamFeatureStoreLoggingProtocol.writeData(modelFeatures:modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 16))();
}

ValueMetadata *type metadata accessor for CamFeatureStoreLogger()
{
  return &type metadata for CamFeatureStoreLogger;
}

id static CaarErrorLogger.wrapIntoLogEvent(message:)(uint64_t a1)
{
  id v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01A0]), sel_init);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2;
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0178]), sel_init);
  if (v4)
  {
    objc_msgSend(v3, sel_setFailed_, a1);
    objc_msgSend(v4, sel_setCaarRequestContext_, v3);
  }

  return v4;
}

void *one-time initialization function for kCamActionMap()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, CAMSchemaCAMAction)>);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C9DA0430;
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  OUTLINED_FUNCTION_1_21();
  *(_DWORD *)(inited + 72) = 0;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 120) = 1;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 168) = 2;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 216) = 3;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 264) = 6;
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  OUTLINED_FUNCTION_1_21();
  *(_DWORD *)(inited + 312) = 0;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 360) = 4;
  OUTLINED_FUNCTION_0_20();
  *(_DWORD *)(inited + 408) = 5;
  type metadata accessor for CAMSchemaCAMAction(0);
  unint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  kCamActionMap._rawValue = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction()
{
  unint64_t result = lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction;
  if (!lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction;
  if (!lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AutoConfirmAction and conformance AutoConfirmAction);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_0_20()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t OUTLINED_FUNCTION_1_21()
{
  return AnyHashable.init<A>(_:)();
}

uint64_t dispatch thunk of static CaarFeatureStoreLoggingProtocol.writeData(modelOutput:modelMetadata:requestId:rcId:fsStream:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 16))();
}

ValueMetadata *type metadata accessor for CaarFeatureStoreLogger()
{
  return &type metadata for CaarFeatureStoreLogger;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam14ActionProtocol_pG_SSSgs5NeverOTg503_s7d81Cam30DisambiguationFeatureExtractorV17actionWasSelected13selectedIndex0F0S2i_AA14fg53_ptKFSSSgAaG_pcfu_33_7add0cbc9e1bf4191ffdfaf15510a374W15G_pAHTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v2 = v13;
    id v4 = (void *)(a1 + 32);
    do
    {
      uint64_t v5 = v4[3];
      uint64_t v6 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v5);
      uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 40))(v5, v6);
      uint64_t v9 = v8;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      unint64_t v10 = *(void *)(v13 + 16);
      if (v10 >= *(void *)(v13 + 24) >> 1) {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      *(void *)(v13 + 16) = v10 + 1;
      uint64_t v11 = v13 + 16 * v10;
      *(void *)(v11 + 32) = v7;
      *(void *)(v11 + 40) = v9;
      v4 += 5;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t DisambiguationFeatureExtractor.init(rankedActions:siriSignalsContainer:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Array<A>.topTwo.getter(a1, (uint64_t)v8);
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for TopTwo();
  if (__swift_getEnumTagSinglePayload((uint64_t)v8, 1, v9) == 1)
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v8, &demangling cache variable for type metadata for TopTwo?);
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    uint64_t v11 = *(void *)(type metadata accessor for RankedAction() - 8);
    uint64_t v12 = *(void *)(v11 + 72);
    unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1C9D9D130;
    uint64_t v14 = v10 + v13;
    outlined init with copy of RankedAction((uint64_t)v8, v14);
    outlined init with copy of RankedAction((uint64_t)&v8[*(int *)(v9 + 20)], v14 + v12);
    outlined destroy of TopTwo((uint64_t)v8);
  }
  uint64_t v15 = specialized _arrayForceCast<A, B>(_:)(v10);
  swift_bridgeObjectRelease();
  uint64_t v18 = v15;
  swift_bridgeObjectRetain();
  specialized MutableCollection<>.sort(by:)(&v18);
  swift_bridgeObjectRelease();
  *a3 = v18;
  return outlined init with take of AppSelectionSignalComponent(a2, (uint64_t)(a3 + 1));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, id))
{
  uint64_t v3 = v2;
  specialized _NativeDictionary.makeIterator()(v21, a1);
  uint64_t v5 = v21[0];
  uint64_t v20 = v21[1];
  int64_t v6 = v21[3];
  unint64_t v7 = v21[4];
  int64_t v22 = (unint64_t)(v21[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v6 << 6);
  while (1)
  {
    uint64_t v14 = (uint64_t *)(*(void *)(v5 + 48) + 16 * v10);
    uint64_t v16 = *v14;
    uint64_t v15 = v14[1];
    uint64_t v17 = *(void **)(*(void *)(v5 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    id v18 = v17;
    a2(v16, v15, v18);
    if (v3)
    {
      swift_release();

      return swift_bridgeObjectRelease();
    }

    uint64_t result = swift_bridgeObjectRelease();
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v11 >= v22) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v20 + 8 * v11);
    if (!v12)
    {
      int64_t v13 = v6 + 2;
      if (v6 + 2 >= v22) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 3;
      if (v6 + 3 >= v22) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12) {
        goto LABEL_12;
      }
      int64_t v13 = v6 + 4;
      if (v6 + 4 >= v22) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v20 + 8 * v13);
      if (v12)
      {
LABEL_12:
        int64_t v11 = v13;
      }
      else
      {
        int64_t v11 = v6 + 5;
        if (v6 + 5 >= v22) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v20 + 8 * v11);
        if (!v12)
        {
          int64_t v19 = v6 + 6;
          while (v19 < v22)
          {
            unint64_t v12 = *(void *)(v20 + 8 * v19++);
            if (v12)
            {
              int64_t v11 = v19 - 1;
              goto LABEL_13;
            }
          }
          return swift_release();
        }
      }
    }
LABEL_13:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    int64_t v6 = v11;
  }
  __break(1u);
  return result;
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = *(void *)(a1 + 32 * v1);
  swift_bridgeObjectRetain();
  return v2;
}

void *static DisambiguationFeatureExtractor.extractedFeatures.getter()
{
  if (one-time initialization token for ACTION_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for APP_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for FRAC_SELECTED_APP_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for FRAC_SELECTED_ACTION_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for SELECTED_APP_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  if (one-time initialization token for SELECTED_ACTION_DISAMBIGUATION_FREQ != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)();
  return &outlined read-only object #0 of static DisambiguationFeatureExtractor.extractedFeatures.getter;
}

uint64_t DisambiguationFeatureExtractor.extractImpl(from:)()
{
  type metadata accessor for MLFeatureValue();
  uint64_t v6 = Dictionary.init(dictionaryLiteral:)();
  uint64_t v1 = DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_1_22(v1);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_10();
  uint64_t v2 = DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_1_22(v2);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_10();
  uint64_t v3 = DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_1_22(v3);
  swift_bridgeObjectRelease();
  OUTLINED_FUNCTION_10_10();
  uint64_t v4 = DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:)();
  OUTLINED_FUNCTION_1_22(v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:)()
{
  OUTLINED_FUNCTION_2_22();
  OUTLINED_FUNCTION_14_13((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:), v3, v4, v5, v6, v7, v8, v9, v32[0]);
  uint64_t v11 = v10;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v32, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_6;
  }
  v32[7] = v2;
  outlined init with copy of SignalProviding(v1, (uint64_t)v32);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_14_13((uint64_t)&outlined read-only object #1 of DisambiguationFeatureExtractor.extractAppDisambiguationFeatures(from:), v12, v13, v14, v15, v16, v17, v18, v32[0]);
  uint64_t v20 = v19;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v32, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v20)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    return OUTLINED_FUNCTION_0_1(v23, 0xD000000000000037);
  }
  uint64_t v21 = OUTLINED_FUNCTION_6_14();
  uint64_t v22 = MEMORY[0x1CB78CA30](v21);
  OUTLINED_FUNCTION_8_13(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_13_11();
  uint64_t v25 = OUTLINED_FUNCTION_6_14();
  uint64_t v26 = MEMORY[0x1CB78CA90](v25);
  OUTLINED_FUNCTION_7_17(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_13_11();
  uint64_t v29 = OUTLINED_FUNCTION_15_12();
  uint64_t v31 = static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(v29, v30);
  type metadata accessor for MLFeatureValue();
  v32[0] = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_1_22((uint64_t)v24);
  swift_release();
  OUTLINED_FUNCTION_1_22((uint64_t)v28);
  swift_release();
  OUTLINED_FUNCTION_1_22(v31);
  swift_bridgeObjectRelease();
  return v32[0];
}

uint64_t DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:)()
{
  OUTLINED_FUNCTION_2_22();
  OUTLINED_FUNCTION_14_13((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:), v3, v4, v5, v6, v7, v8, v9, v32[0]);
  uint64_t v11 = v10;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v32, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v11) {
    goto LABEL_6;
  }
  v32[7] = v2;
  outlined init with copy of SignalProviding(v1, (uint64_t)v32);
  swift_bridgeObjectRetain();
  OUTLINED_FUNCTION_14_13((uint64_t)&outlined read-only object #1 of DisambiguationFeatureExtractor.extractActionDisambiguationFeatures(from:), v12, v13, v14, v15, v16, v17, v18, v32[0]);
  uint64_t v20 = v19;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v32, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v20)
  {
    swift_bridgeObjectRelease();
LABEL_6:
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    return OUTLINED_FUNCTION_0_1(v23, 0xD000000000000037);
  }
  uint64_t v21 = OUTLINED_FUNCTION_6_14();
  uint64_t v22 = MEMORY[0x1CB78CA60](v21);
  OUTLINED_FUNCTION_8_13(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v24 = OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_13_11();
  uint64_t v25 = OUTLINED_FUNCTION_6_14();
  uint64_t v26 = MEMORY[0x1CB78CAA0](v25);
  OUTLINED_FUNCTION_7_17(v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = OUTLINED_FUNCTION_19_9();
  OUTLINED_FUNCTION_13_11();
  uint64_t v29 = OUTLINED_FUNCTION_15_12();
  uint64_t v31 = static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(v29, v30);
  type metadata accessor for MLFeatureValue();
  v32[0] = Dictionary.init(dictionaryLiteral:)();
  OUTLINED_FUNCTION_1_22((uint64_t)v24);
  swift_release();
  OUTLINED_FUNCTION_1_22((uint64_t)v28);
  swift_release();
  OUTLINED_FUNCTION_1_22(v31);
  swift_bridgeObjectRelease();
  return v32[0];
}

uint64_t DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:)()
{
  OUTLINED_FUNCTION_3_18();
  SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractLastActionDisambiguationFeatures(from:), (uint64_t)v21);
  uint64_t v3 = v2;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v21, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    uint64_t v18 = 0xD00000000000003FLL;
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 8), *(void *)(v1 + 32));
  uint64_t v4 = MEMORY[0x1CB78CA80]();
  MEMORY[0x1CB78CA70]();
  v21[0] = v4;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v13 = OUTLINED_FUNCTION_4_14(v5, v6, v7, v8, v9, v10, v11, v12, v21[0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_4();
    specialized Dictionary.subscript.getter(0xD00000000000002CLL, v14, v13);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_8();
      swift_isUniquelyReferenced_nonNull_native();
      v21[0] = v13;
      OUTLINED_FUNCTION_16_8(0xD000000000000031, (uint64_t)"actionRouting.lastActionDisambiguationWasSelected");
      uint64_t v20 = v21[0];
      swift_bridgeObjectRelease();
      specialized _NativeDictionary.mapValues<A>(_:)(v20);
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_13();
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    uint64_t v18 = 0xD000000000000052;
LABEL_7:
    OUTLINED_FUNCTION_0_1(v17, v18);
  }
  return OUTLINED_FUNCTION_13();
}

uint64_t DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:)()
{
  OUTLINED_FUNCTION_3_18();
  SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)((uint64_t)&outlined read-only object #0 of DisambiguationFeatureExtractor.extractLastAppDisambiguationFeatures(from:), (uint64_t)v21);
  uint64_t v3 = v2;
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v21, &demangling cache variable for type metadata for ActionProtocol?);
  swift_bridgeObjectRelease();
  if (!v3)
  {
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    uint64_t v18 = 0xD00000000000003CLL;
    goto LABEL_7;
  }
  __swift_project_boxed_opaque_existential_1((void *)(v1 + 8), *(void *)(v1 + 32));
  uint64_t v4 = MEMORY[0x1CB78CA50]();
  MEMORY[0x1CB78CA40]();
  v21[0] = v4;
  specialized Array.append<A>(contentsOf:)();
  uint64_t v13 = OUTLINED_FUNCTION_4_14(v5, v6, v7, v8, v9, v10, v11, v12, v21[0]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v0)
  {
    swift_bridgeObjectRetain();
    OUTLINED_FUNCTION_2_4();
    specialized Dictionary.subscript.getter(0xD000000000000029, v14, v13);
    char v16 = v15;
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      OUTLINED_FUNCTION_20_8();
      swift_isUniquelyReferenced_nonNull_native();
      v21[0] = v13;
      OUTLINED_FUNCTION_16_8(0xD00000000000002ELL, (uint64_t)"actionRouting.lastAppDisambiguationWasSelected");
      uint64_t v20 = v21[0];
      swift_bridgeObjectRelease();
      specialized _NativeDictionary.mapValues<A>(_:)(v20);
      swift_bridgeObjectRelease();
      return OUTLINED_FUNCTION_13();
    }
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    uint64_t v18 = 0xD00000000000004FLL;
LABEL_7:
    OUTLINED_FUNCTION_0_1(v17, v18);
  }
  return OUTLINED_FUNCTION_13();
}

uint64_t static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, uint64_t a2)
{
  specialized Collection.first.getter(a1);
  if (v5)
  {

    String.signalPrefix.getter();
    uint64_t v7 = v6;
    swift_bridgeObjectRelease();
    if (v7) {
      swift_bridgeObjectRelease();
    }
  }
  specialized Collection.first.getter(a2);
  if (!v9 || (v8, String.signalPrefix.getter(), uint64_t v11 = v10, swift_bridgeObjectRelease(), !v11)) {
    swift_bridgeObjectRelease();
  }
  type metadata accessor for MLFeatureValue();
  uint64_t v15 = Dictionary.init(dictionaryLiteral:)();
  MEMORY[0x1F4188790](v15);
  uint64_t v12 = OUTLINED_FUNCTION_13();
  specialized Sequence.forEach(_:)(v12, v13);
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return OUTLINED_FUNCTION_13();
}

uint64_t DisambiguationFeatureExtractor.actionWasSelected(selectedIndex:action:)(uint64_t a1, void *a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x1F4188790](v7);
  uint64_t v12 = (char *)&v32 - v11;
  if (a1 == -1) {
    return 0;
  }
  if (*(void *)(*(void *)v2 + 16) <= a1)
  {
    uint64_t v32 = 0;
    unint64_t v33 = 0xE000000000000000;
    _StringGuts.grow(_:)(85);
    OUTLINED_FUNCTION_2_4();
    v19._uint64_t countAndFlagsBits = 0xD000000000000024;
    String.append(_:)(v19);
    uint64_t v35 = a1;
    v20._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_4();
    String.append(_:)(v21);
    uint64_t v22 = swift_bridgeObjectRetain();
    uint64_t v23 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SiriCam14ActionProtocol_pG_SSSgs5NeverOTg503_s7d81Cam30DisambiguationFeatureExtractorV17actionWasSelected13selectedIndex0F0S2i_AA14fg53_ptKFSSSgAaG_pcfu_33_7add0cbc9e1bf4191ffdfaf15510a374W15G_pAHTf3nnnpk_nTf1cn_n(v22);
    swift_bridgeObjectRelease();
    uint64_t v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    uint64_t v25 = MEMORY[0x1CB78D400](v23, v24);
    int v27 = v26;
    swift_bridgeObjectRelease();
    v28._uint64_t countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = v32;
    unint64_t v30 = v33;
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    OUTLINED_FUNCTION_3();
    *(void *)uint64_t v31 = v29;
    *(void *)(v31 + 8) = v30;
    *(unsigned char *)(v31 + 16) = 1;
    return swift_willThrow();
  }
  else if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of SignalProviding(*(void *)v2 + 40 * a1 + 32, (uint64_t)&v32);
    __swift_project_boxed_opaque_existential_1(&v32, v34);
    uint64_t v13 = OUTLINED_FUNCTION_11_14();
    v14(v13);
    __swift_project_boxed_opaque_existential_1(a2, a2[3]);
    uint64_t v15 = OUTLINED_FUNCTION_11_14();
    v16(v15);
    char v17 = static UUID.== infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v9, v5);
    v18(v12, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    return v17 & 1;
  }
  return result;
}

uint64_t String.signalPrefix.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_12_10();
  specialized Collection.dropLast(_:)(1, v0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ArraySlice<Substring>);
  lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>();
  lazy protocol witness table accessor for type Substring and conformance Substring();
  uint64_t v1 = Sequence<>.joined(separator:)();
  swift_unknownObjectRelease();
  return v1;
}

void closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v15 = String.signalBucket.getter();
  if (!v16)
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v33[0] = 0xD00000000000001ELL;
    v33[1] = 0x80000001C9DA44B0;
    v26._uint64_t countAndFlagsBits = a1;
    v26._object = a2;
    String.append(_:)(v26);
LABEL_7:
    uint64_t v28 = v33[1];
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v29 = v33[0];
    *(void *)(v29 + 8) = v28;
    *(unsigned char *)(v29 + 16) = 1;
    swift_willThrow();
    return;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  swift_bridgeObjectRetain();
  v19._uint64_t countAndFlagsBits = 46;
  v19._object = (void *)0xE100000000000000;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = v17;
  v20._object = v18;
  String.append(_:)(v20);
  uint64_t v21 = specialized Dictionary.subscript.getter(a4, a5, a6);
  if (!v21)
  {
    swift_bridgeObjectRelease();
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v33, "Couldn't find ");
    HIBYTE(v33[1]) = -18;
    v27._uint64_t countAndFlagsBits = a4;
    v27._object = a5;
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v22 = (void *)v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v23._uint64_t countAndFlagsBits = 46;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v24._uint64_t countAndFlagsBits = v17;
  v24._object = v18;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  id v25 = objc_msgSend(self, sel_featureValueWithDouble_, (double)(uint64_t)objc_msgSend(a3, sel_int64Value) / (double)(uint64_t)objc_msgSend(v22, sel_int64Value));
  if (v25)
  {
    specialized Dictionary._Variant.setValue(_:forKey:)((uint64_t)v25, a7, a8);

    swift_bridgeObjectRelease();
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)(a7, a8);
    uint64_t v31 = v30;

    swift_bridgeObjectRelease();
  }
}

uint64_t String.signalBucket.getter()
{
  lazy protocol witness table accessor for type String and conformance String();
  if ((StringProtocol.contains<A>(_:)() & 1) == 0) {
    return 0;
  }
  OUTLINED_FUNCTION_12_10();
  uint64_t v1 = specialized BidirectionalCollection.last.getter(v0);
  uint64_t v3 = v2;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7) {
    return 0;
  }
  uint64_t v8 = MEMORY[0x1CB78D2A0](v1, v3, v5, v7);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance DisambiguationFeatureExtractor()
{
  return DisambiguationFeatureExtractor.extractImpl(from:)();
}

uint64_t specialized Collection.dropLast(_:)(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  unint64_t v3 = *(void *)(a2 + 16);
  uint64_t result = specialized Array.index(_:offsetBy:limitedBy:)(0, (v3 - result) & ~((uint64_t)(v3 - result) >> 63), v3);
  if (v4) {
    unint64_t v5 = v3;
  }
  else {
    unint64_t v5 = result;
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
  if (v3 >= v5) {
    return a2;
  }
LABEL_10:
  __break(1u);
  return result;
}

void *specialized _NativeDictionary.mapValues<A>(_:)(uint64_t a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>);
  uint64_t result = (void *)static _DictionaryStorage.copy(original:)();
  unint64_t v3 = result;
  int64_t v4 = 0;
  uint64_t v5 = *(void *)(a1 + 64);
  uint64_t v24 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & v5;
  int64_t v25 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v9 = (char *)(result + 8);
  if ((v7 & v5) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v10 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  for (unint64_t i = v10 | (v4 << 6); ; unint64_t i = __clz(__rbit64(v13)) + (v4 << 6))
  {
    uint64_t v15 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    uint64_t v18 = *(void *)(*(void *)(a1 + 56) + 8 * i);
    Swift::String v19 = self;
    swift_bridgeObjectRetain();
    uint64_t result = objc_msgSend(v19, sel_featureValueWithInt64_, v18);
    *(void *)&v9[(i >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << i;
    Swift::String v20 = (void *)(v3[6] + 16 * i);
    *Swift::String v20 = v17;
    v20[1] = v16;
    *(void *)(v3[7] + 8 * i) = result;
    uint64_t v21 = v3[2];
    BOOL v22 = __OFADD__(v21, 1);
    uint64_t v23 = v21 + 1;
    if (v22)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
    v3[2] = v23;
    if (v8) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v12 = v4 + 1;
    if (__OFADD__(v4, 1)) {
      goto LABEL_24;
    }
    if (v12 >= v25) {
      return v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v12);
    ++v4;
    if (!v13)
    {
      int64_t v4 = v12 + 1;
      if (v12 + 1 >= v25) {
        return v3;
      }
      unint64_t v13 = *(void *)(v24 + 8 * v4);
      if (!v13)
      {
        int64_t v4 = v12 + 2;
        if (v12 + 2 >= v25) {
          return v3;
        }
        unint64_t v13 = *(void *)(v24 + 8 * v4);
        if (!v13) {
          break;
        }
      }
    }
LABEL_18:
    unint64_t v8 = (v13 - 1) & v13;
  }
  int64_t v14 = v12 + 3;
  if (v14 >= v25) {
    return v3;
  }
  unint64_t v13 = *(void *)(v24 + 8 * v14);
  if (v13)
  {
    int64_t v4 = v14;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v4 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v4 >= v25) {
      return v3;
    }
    unint64_t v13 = *(void *)(v24 + 8 * v4);
    ++v14;
    if (v13) {
      goto LABEL_18;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

void partial apply for closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(uint64_t a1, void *a2, void *a3)
{
  closure #1 in static DisambiguationFeatureExtractor.computeFractionSignal(numerator:denominator:prefixStr:)(a1, a2, a3, *(void *)(v3 + 16), *(void **)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48));
}

unint64_t lazy protocol witness table accessor for type ArraySlice<Substring> and conformance ArraySlice<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>;
  if (!lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for ArraySlice<Substring>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArraySlice<Substring> and conformance ArraySlice<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t specialized Array.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a3 - result;
  if (__OFSUB__(a3, result))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    return result;
  }
  if (a2 < 1)
  {
    if (v3 <= 0 && v3 > a2) {
      return 0;
    }
  }
  else if ((v3 & 0x8000000000000000) == 0 && v3 < (unint64_t)a2)
  {
    return 0;
  }
  BOOL v5 = __OFADD__(result, a2);
  result += a2;
  if (v5) {
    goto LABEL_14;
  }
  return result;
}

uint64_t outlined destroy of TopTwo(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TopTwo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for DisambiguationFeatureExtractor(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1(v1);
}

uint64_t initializeWithCopy for DisambiguationFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v3 = a2 + 8;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = v4;
  uint64_t v6 = **(void (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);
  swift_bridgeObjectRetain();
  v6(a1 + 8, v3, v5);
  return a1;
}

void *assignWithCopy for DisambiguationFeatureExtractor(void *a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1(a1 + 1, v3);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for DisambiguationFeatureExtractor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguationFeatureExtractor(uint64_t *a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *((unsigned char *)a1 + 48))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      uint64_t v2 = *a1;
      if ((unint64_t)*a1 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DisambiguationFeatureExtractor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DisambiguationFeatureExtractor()
{
  return &type metadata for DisambiguationFeatureExtractor;
}

uint64_t OUTLINED_FUNCTION_1_22(uint64_t a1)
{
  return specialized Dictionary.update(other:allowDuplicateKeys:)(a1, 0);
}

uint64_t OUTLINED_FUNCTION_2_22()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_3_18()
{
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_4_14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return SiriSignalsContainer.get(from:query:defaultVal:)(a9, v9, v10, (void *)0xFFFFFFFFFFFFFFFFLL);
}

void *OUTLINED_FUNCTION_6_14()
{
  return __swift_project_boxed_opaque_existential_1(v1, *(void *)(v0 + 32));
}

uint64_t OUTLINED_FUNCTION_7_17(uint64_t a1)
{
  return SiriSignalsContainer.get(from:query:defaultVal:)(a1, v2, v1, 0);
}

uint64_t OUTLINED_FUNCTION_8_13(uint64_t a1)
{
  return SiriSignalsContainer.get(from:query:defaultVal:)(a1, v2, v1, 0);
}

uint64_t OUTLINED_FUNCTION_9_14()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_10_10()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_11_14()
{
  return v0;
}

void OUTLINED_FUNCTION_12_10()
{
  JUMPOUT(0x1CB78D6E0);
}

uint64_t OUTLINED_FUNCTION_13_11()
{
  return swift_bridgeObjectRelease();
}

uint64_t OUTLINED_FUNCTION_14_13(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return SiriSignalsQueryManager.serialiseQueryFields(fields:selected:)(a1, (uint64_t)&a9);
}

uint64_t OUTLINED_FUNCTION_15_12()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_16_8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v2, a1, (a2 - 32) | 0x8000000000000000);
}

void *OUTLINED_FUNCTION_19_9()
{
  return specialized _NativeDictionary.mapValues<A>(_:)(v0);
}

uint64_t OUTLINED_FUNCTION_20_8()
{
  return DisambiguationFeatureExtractor.actionWasSelected(selectedIndex:action:)(v0, v1);
}

uint64_t static TrialProvider.tieBreakingOverrides.getter()
{
  uint64_t v0 = 0xD000000000000020;
  if ((static TrialProvider.fetchBoolFactorFromTrial(_:)(0xD000000000000021, 0x80000001C9DA3140) & 1) != 0
    && (CamFeatureFlag.isEnabled.getter(5u) & 1) != 0)
  {
    uint64_t v1 = "plugin_tiebreaker_overrides_dawn";
  }
  else
  {
    uint64_t v0 = 0xD000000000000023;
    uint64_t v1 = "plugin_tiebreaker_overrides_sydneye";
  }
  unint64_t v2 = (unint64_t)(v1 - 32) | 0x8000000000000000;
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.ranker);
  swift_bridgeObjectRetain_n();
  long long v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v2, &v13);
    OUTLINED_FUNCTION_5_13();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v4, v5, "[TrialProvider] Tie breaking overrides using factor = %s", v6, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  static TrialProvider.fetchStringFactorFromTrial(_:)(v0, v2);
  if (v7)
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = static TrialProvider.decodeOverrides(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v0, v2, &v13);
      OUTLINED_FUNCTION_5_13();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v9, v10, "[TrialProvider] Could not fetch %s from Trial.", v11, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  return v8;
}

uint64_t Array<A>.getFavouredAction(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  MEMORY[0x1F4188790](v6 - 8);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  uint64_t v10 = type metadata accessor for RankedAction();
  uint64_t v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v32 = a1;
  specialized Sequence.compactMap<A>(_:)((void (*)(void *))partial apply for closure #1 in Array<A>.getFavouredAction(tie:), (uint64_t)v31, a2);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload(v9, 1, v10) == 1)
  {
    outlined destroy of RankedAction?(v9);
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.ranker);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      Swift::String v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)Swift::String v19 = 0;
      _os_log_impl(&dword_1C9CFE000, v17, v18, "No override matching.", v19, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    uint64_t v20 = 1;
  }
  else
  {
    outlined init with take of RankedAction(v9, (uint64_t)v15);
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.ranker);
    outlined init with copy of RankedAction((uint64_t)v15, (uint64_t)v13);
    BOOL v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v30 = a3;
      uint64_t v34 = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v29 = v24 + 4;
      uint64_t v26 = *v13;
      unint64_t v27 = v13[1];
      swift_bridgeObjectRetain();
      uint64_t v33 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of RankedAction((uint64_t)v13);
      _os_log_impl(&dword_1C9CFE000, v22, v23, "Found matching override, will favour %s.", v24, 0xCu);
      swift_arrayDestroy();
      a3 = v30;
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      outlined destroy of RankedAction((uint64_t)v13);
    }

    outlined init with take of RankedAction((uint64_t)v15, a3);
    uint64_t v20 = 0;
  }
  return __swift_storeEnumTagSinglePayload(a3, v20, 1, v10);
}

uint64_t TrialTieBreakingOverride.preference(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v46 = a6;
  uint64_t v45 = type metadata accessor for RankedAction();
  uint64_t v11 = MEMORY[0x1F4188790](v45);
  uint64_t v13 = (uint64_t *)((char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = MEMORY[0x1F4188790](v11);
  uint64_t v16 = (uint64_t *)((char *)&v43 - v15);
  uint64_t v17 = MEMORY[0x1F4188790](v14);
  Swift::String v19 = (uint64_t *)((char *)&v43 - v18);
  MEMORY[0x1F4188790](v17);
  uint64_t v21 = (uint64_t *)((char *)&v43 - v20);
  outlined init with copy of RankedAction(a1, (uint64_t)&v43 - v20);
  uint64_t v43 = a1 + *(int *)(type metadata accessor for TopTwo() + 20);
  uint64_t v44 = a1;
  outlined init with copy of RankedAction(v43, (uint64_t)v19);
  BOOL v22 = *v21 == a2 && v21[1] == a3;
  if (v22
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (a2 == 42 ? (BOOL v23 = a3 == 0xE100000000000000) : (BOOL v23 = 0), v23))
  {
    int v24 = 1;
    if (*v19 == a4 && v19[1] == a5) {
      goto LABEL_29;
    }
  }
  else
  {
    LOBYTE(v24) = OUTLINED_FUNCTION_2_23();
    if (*v19 == a4 && v19[1] == a5)
    {
LABEL_21:
      unint64_t v27 = a5;
      if (v24)
      {
        int v24 = 1;
LABEL_29:
        unint64_t v27 = a5;
        goto LABEL_33;
      }
      goto LABEL_32;
    }
  }
  if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
    goto LABEL_21;
  }
  if (a4 == 42 && a5 == 0xE100000000000000)
  {
    unint64_t v27 = 0xE100000000000000;
    if (v24)
    {
      int v24 = 1;
      a4 = 42;
      goto LABEL_33;
    }
  }
  else
  {
    int v29 = OUTLINED_FUNCTION_2_23();
    unint64_t v27 = a5;
    if (v24)
    {
      int v24 = v29;
      goto LABEL_29;
    }
  }
LABEL_32:
  int v24 = 0;
LABEL_33:
  outlined destroy of RankedAction((uint64_t)v19);
  outlined destroy of RankedAction((uint64_t)v21);
  uint64_t v30 = v43;
  outlined init with copy of RankedAction(v43, (uint64_t)v16);
  uint64_t v31 = v44;
  outlined init with copy of RankedAction(v44, (uint64_t)v13);
  BOOL v32 = *v16 == a2 && v16[1] == a3;
  if (v32
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || (a2 == 42 ? (BOOL v33 = a3 == 0xE100000000000000) : (BOOL v33 = 0), v33))
  {
    int v34 = 1;
    if (a4 == *v13 && v27 == v13[1]) {
      goto LABEL_62;
    }
  }
  else
  {
    LOBYTE(v34) = OUTLINED_FUNCTION_2_23();
    if (a4 == *v13 && v27 == v13[1]) {
      goto LABEL_59;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0 && (a4 != 42 || v27 != 0xE100000000000000))
  {
    int v38 = OUTLINED_FUNCTION_2_23();
    if (v34)
    {
      int v34 = v38;
      goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_59:
  if (v34)
  {
    int v34 = 1;
    goto LABEL_62;
  }
LABEL_61:
  int v34 = 0;
LABEL_62:
  outlined destroy of RankedAction((uint64_t)v13);
  outlined destroy of RankedAction((uint64_t)v16);
  if ((v24 | v34))
  {
    if (v24) {
      uint64_t v39 = v31;
    }
    else {
      uint64_t v39 = v30;
    }
    uint64_t v40 = v46;
    outlined init with copy of RankedAction(v39, v46);
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = 1;
    uint64_t v40 = v46;
  }
  return __swift_storeEnumTagSinglePayload(v40, v41, 1, v45);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> TrialTieBreakingOverride.debugDescription.getter(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  swift_bridgeObjectRetain();
  v6._uint64_t countAndFlagsBits = 2113056;
  v6._object = (void *)0xE300000000000000;
  String.append(_:)(v6);
  swift_bridgeObjectRetain();
  v7._uint64_t countAndFlagsBits = a3;
  v7._object = a4;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
}

uint64_t static TrialTieBreakingOverride.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v12 = a1 == a5 && a2 == a6;
  if (v12 || (char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(), result = 0, (v13 & 1) != 0))
  {
    if (a3 == a7 && a4 == a8)
    {
      return 1;
    }
    else
    {
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t TrialTieBreakingOverride.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x72756F766166 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1919252079 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v7) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t TrialTieBreakingOverride.CodingKeys.stringValue.getter(char a1)
{
  if (a1) {
    return 1919252079;
  }
  else {
    return 0x72756F766166;
  }
}

uint64_t TrialTieBreakingOverride.encode(to:)(void *a1)
{
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<TrialTieBreakingOverride.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  uint64_t v9 = v8 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1) {
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v9, v3);
}

uint64_t TrialTieBreakingOverride.init(from:)(void *a1)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<TrialTieBreakingOverride.CodingKeys>);
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v3);
  OUTLINED_FUNCTION_2_1();
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v4 = KeyedDecodingContainer.decode(_:forKey:)();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v6 = OUTLINED_FUNCTION_4_15();
    v7(v6);
    swift_bridgeObjectRetain();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v4;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance TrialTieBreakingOverride.CodingKeys()
{
  return TrialTieBreakingOverride.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance TrialTieBreakingOverride.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = TrialTieBreakingOverride.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance TrialTieBreakingOverride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialTieBreakingOverride.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys();
  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for Decodable.init(from:) in conformance TrialTieBreakingOverride@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = TrialTieBreakingOverride.init(from:)(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance TrialTieBreakingOverride(void *a1)
{
  return TrialTieBreakingOverride.encode(to:)(a1);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance TrialTieBreakingOverride()
{
  uint64_t result = *(void *)v0;
  TrialTieBreakingOverride.debugDescription.getter(*(void *)v0, *(void *)(v0 + 8), *(void *)(v0 + 16), *(void **)(v0 + 24));
  return result;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance TrialTieBreakingOverride(uint64_t *a1, uint64_t *a2)
{
  return static TrialTieBreakingOverride.== infix(_:_:)(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t static TrialProvider.decodeOverrides(_:)()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v4 = String.data(using:allowLossyConversion:)();
  unint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  if (v6 >> 60 == 15)
  {
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ranker);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      MEMORY[0x1CB78E290](v10, -1, -1);
    }

    return 0;
  }
  else
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [TrialTieBreakingOverride]);
    lazy protocol witness table accessor for type [TrialTieBreakingOverride] and conformance <A> [A]();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    swift_release();
    uint64_t v11 = v23;
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.ranker);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v23 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      v22[0] = v16 + 4;
      uint64_t v18 = swift_bridgeObjectRetain();
      uint64_t v19 = MEMORY[0x1CB78D400](v18, &type metadata for TrialTieBreakingOverride);
      unint64_t v21 = v20;
      swift_bridgeObjectRelease();
      v22[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v14, v15, "[TrialProvider] Decoded overides: %s", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v17, -1, -1);
      MEMORY[0x1CB78E290](v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }
    outlined consume of Data?(v4, v6);
  }
  return v11;
}

uint64_t closure #1 in Array<A>.getFavouredAction(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TrialTieBreakingOverride.preference(tie:)(a2, *(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a3);
}

unint64_t lazy protocol witness table accessor for type [TrialTieBreakingOverride] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A])
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [TrialTieBreakingOverride]);
    lazy protocol witness table accessor for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [TrialTieBreakingOverride] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride()
{
  unint64_t result = lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride and conformance TrialTieBreakingOverride);
  }
  return result;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return outlined consume of Data._Representation(a1, a2);
  }
  return a1;
}

uint64_t partial apply for closure #1 in Array<A>.getFavouredAction(tie:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Array<A>.getFavouredAction(tie:)(a1, *(void *)(v2 + 16), a2);
}

uint64_t outlined destroy of RankedAction?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RankedAction?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for TrialTieBreakingOverride()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for TrialTieBreakingOverride(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for TrialTieBreakingOverride(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for TrialTieBreakingOverride(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TrialTieBreakingOverride(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 < 0 && *(unsigned char *)(a1 + 32))
    {
      LODWORD(v2) = *(_DWORD *)a1 + 0x7FFFFFFF;
    }
    else
    {
      unint64_t v2 = *(void *)(a1 + 8);
      if (v2 >= 0xFFFFFFFF) {
        LODWORD(v2) = -1;
      }
    }
  }
  else
  {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TrialTieBreakingOverride(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TrialTieBreakingOverride()
{
  return &type metadata for TrialTieBreakingOverride;
}

unint64_t lazy protocol witness table accessor for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys;
  if (!lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TrialTieBreakingOverride.CodingKeys and conformance TrialTieBreakingOverride.CodingKeys);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for TrialTieBreakingOverride.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D724B0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for TrialTieBreakingOverride.CodingKeys()
{
  return &unk_1F24178D8;
}

uint64_t OUTLINED_FUNCTION_2_23()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_4_15()
{
  return v0;
}

void static CamRequestLinkLogger.log(requestId:camId:)(void *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x1F4188790](v4);
  uint64_t v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = &v53[-v10];
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v60 = &v53[-v13];
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = &v53[-v15];
  MEMORY[0x1F4188790](v14);
  id v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1300]), sel_init);
  if (v17)
  {
    id v18 = v17;
    uint64_t v61 = v5;
    id v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
    if (v19)
    {
      id v59 = v19;
      id v20 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA1310]), sel_init);
      if (v20)
      {
        unint64_t v21 = v20;
        char v57 = v16;
        type metadata accessor for SISchemaUUID();
        BOOL v22 = a1;
        uint64_t v23 = *(void (**)(void))(v61 + 16);
        uint64_t v56 = a2;
        OUTLINED_FUNCTION_1_23();
        v23();
        id v24 = SISchemaUUID.__allocating_init(nsuuid:)();
        id v25 = v59;
        objc_msgSend(v59, sel_setUuid_, v24);

        objc_msgSend(v25, sel_setComponent_, 4);
        id v58 = v22;
        OUTLINED_FUNCTION_1_23();
        v23();
        id v26 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v21, sel_setUuid_, v26);

        if (AFDeviceSupportsSAE()) {
          uint64_t v27 = 43;
        }
        else {
          uint64_t v27 = 1;
        }
        objc_msgSend(v21, sel_setComponent_, v27);
        objc_msgSend(v18, sel_setSource_, v25);
        objc_msgSend(v18, sel_setTarget_, v21);
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v18);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        __swift_project_value_buffer(v28, (uint64_t)static Logger.common);
        OUTLINED_FUNCTION_1_23();
        v23();
        OUTLINED_FUNCTION_1_23();
        v23();
        int v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.debug.getter();
        int v31 = v30;
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v32 = swift_slowAlloc();
          id v58 = v21;
          os_log_t v55 = v29;
          uint64_t v33 = v32;
          uint64_t v56 = swift_slowAlloc();
          uint64_t v63 = v56;
          *(_DWORD *)uint64_t v33 = 136315394;
          int v54 = v31;
          uint64_t v34 = UUID.uuidString.getter();
          uint64_t v62 = OUTLINED_FUNCTION_18_6(v34, v35);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v36 = *(void (**)(void))(v61 + 8);
          OUTLINED_FUNCTION_0_21();
          v36();
          *(_WORD *)(v33 + 12) = 2080;
          uint64_t v37 = UUID.uuidString.getter();
          uint64_t v62 = OUTLINED_FUNCTION_18_6(v37, v38);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          OUTLINED_FUNCTION_0_21();
          v36();
          os_log_t v39 = v55;
          _os_log_impl(&dword_1C9CFE000, v55, (os_log_type_t)v54, "Successfully emitted requestLink log message for camId : %s and requestId: %s", (uint8_t *)v33, 0x16u);
          swift_arrayDestroy();
          OUTLINED_FUNCTION_2_2();
          OUTLINED_FUNCTION_2_2();
        }
        else
        {

          uint64_t v52 = *(void (**)(void))(v61 + 8);
          OUTLINED_FUNCTION_0_21();
          v52();
          OUTLINED_FUNCTION_0_21();
          v52();
        }
        return;
      }

      uint64_t v5 = v61;
      id v18 = v59;
    }
    else
    {
      uint64_t v5 = v61;
    }
  }
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.common);
  uint64_t v41 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v5 + 16);
  v41(v11, a2, v4);
  v41(v8, (uint64_t)a1, v4);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.error.getter();
  int v44 = v43;
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    uint64_t v63 = v61;
    *(_DWORD *)uint64_t v45 = 136315394;
    lazy protocol witness table accessor for type UUID and conformance UUID();
    LODWORD(v60) = v44;
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = OUTLINED_FUNCTION_18_6(v46, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v48 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_2_24();
    v48();
    *(_WORD *)(v45 + 12) = 2080;
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = OUTLINED_FUNCTION_18_6(v49, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_2_24();
    v48();
    _os_log_impl(&dword_1C9CFE000, v42, (os_log_type_t)v60, "Error in intialising RequestLink object camId: %s, and requestId: %s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    uint64_t v51 = *(void (**)(void))(v5 + 8);
    OUTLINED_FUNCTION_2_24();
    v51();
    ((void (*)(unsigned char *, uint64_t))v51)(v8, v4);
  }
}

uint64_t destroy for CamHandler()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for CamHandler(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CamHandler(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for CamHandler(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CamHandler()
{
  return &type metadata for CamHandler;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)(*(void *)(a3 + 56) + 16 * v4);
  swift_bridgeObjectRetain();
  return v6;
}

{
  unint64_t v4;
  char v5;

  if (*(void *)(a3 + 16) && (unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v5 & 1) != 0)) {
    return *(void *)(*(void *)(a3 + 56) + 8 * v4);
  }
  else {
    return 0;
  }
}

{
  char v3;

  if (*(void *)(a3 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v3 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return 0;
  }
}

double specialized Dictionary.subscript.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  if (*(void *)(a3 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(a3 + 56) + 32 * v6;
    outlined init with copy of Any(v8, (uint64_t)a4);
  }
  else
  {
    double result = 0.0;
    *a4 = 0u;
    a4[1] = 0u;
  }
  return result;
}

unint64_t specialized Dictionary.subscript.getter(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

uint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)(), (v4 & 1) != 0)) {
    return *(void *)(*(void *)(a2 + 56) + 8 * v3);
  }
  else {
    return 0;
  }
}

void *specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    return 0;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v5 & 1) == 0) {
    return 0;
  }
  unsigned __int8 v6 = *(void **)(*(void *)(a3 + 56) + 8 * v4);
  id v7 = v6;
  return v6;
}

unint64_t specialized Dictionary.subscript.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

unint64_t specialized Dictionary.subscript.getter(char a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    goto LABEL_5;
  }
  unint64_t v4 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v5 & 1) == 0)
  {
    uint64_t v2 = 0;
LABEL_5:
    unsigned __int8 v6 = 1;
    return v2 | ((unint64_t)v6 << 32);
  }
  unsigned __int8 v6 = 0;
  uint64_t v2 = *(unsigned int *)(*(void *)(a2 + 56) + 4 * v4);
  return v2 | ((unint64_t)v6 << 32);
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)()
{
  OUTLINED_FUNCTION_18_11();
  int v161 = v1;
  uint64_t v168 = v3;
  unint64_t v169 = v2;
  uint64_t v166 = v4;
  uint64_t v167 = v5;
  os_log_t v170 = v6;
  uint64_t v8 = v7;
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v10 = OUTLINED_FUNCTION_11_1(v9);
  MEMORY[0x1F4188790](v10);
  OUTLINED_FUNCTION_9_3();
  uint64_t v13 = (char *)(v11 - v12);
  MEMORY[0x1F4188790](v14);
  uint64_t v156 = (char *)&v154 - v15;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v16);
  uint64_t v155 = (uint64_t)&v154 - v17;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v18);
  OUTLINED_FUNCTION_10_0();
  uint64_t v162 = v19;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v20);
  os_log_type_t v160 = (char *)&v154 - v21;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  uint64_t v159 = (uint64_t)&v154 - v23;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_10_0();
  uint64_t v165 = v25;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v26);
  uint64_t v27 = OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_1_2();
  uint64_t v29 = v28;
  MEMORY[0x1F4188790](v30);
  OUTLINED_FUNCTION_5_2();
  uint64_t v163 = v31;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v32);
  uint64_t v154 = (char *)&v154 - v33;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v34);
  uint64_t v157 = (char *)&v154 - v35;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v36);
  os_log_t v158 = (char *)&v154 - v37;
  OUTLINED_FUNCTION_2_5();
  uint64_t v39 = MEMORY[0x1F4188790](v38);
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_19_10();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_18_12();
  MEMORY[0x1F4188790](v41);
  uint64_t v42 = *v8;
  uint64_t v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  uint64_t v44 = static CamModelLogger.map(from:)(v42, (uint64_t)v8 + *(int *)(v43 + 48));
  if (!v44)
  {
    uint64_t v164 = v13;
    uint64_t v165 = v0;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v62, (uint64_t)static Logger.common);
    uint64_t v63 = *(void (**)(void))(v29 + 16);
    uint64_t v64 = v27;
    OUTLINED_FUNCTION_30_5();
    v63();
    OUTLINED_FUNCTION_30_5();
    v63();
    uint64_t v65 = v165;
    outlined init with copy of UUID?(v168, v165);
    unint64_t v66 = v169;
    swift_bridgeObjectRetain_n();
    uint64_t v67 = Logger.logObject.getter();
    int v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, (os_log_type_t)v68))
    {
      LODWORD(v168) = v68;
      os_log_t v170 = v67;
      uint64_t v69 = OUTLINED_FUNCTION_88();
      uint64_t v166 = OUTLINED_FUNCTION_86();
      v172[0] = v166;
      *(_DWORD *)uint64_t v69 = 136316162;
      uint64_t v171 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
      uint64_t v70 = String.init<A>(describing:)();
      uint64_t v171 = OUTLINED_FUNCTION_83(v70, v71);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease();
      *(_WORD *)(v69 + 12) = 2080;
      uint64_t v72 = UUID.uuidString.getter();
      uint64_t v74 = OUTLINED_FUNCTION_21_8(v72, v73);
      OUTLINED_FUNCTION_9_15(v74);
      swift_bridgeObjectRelease();
      unint64_t v75 = v66;
      id v76 = *(void (**)(void))(v29 + 8);
      OUTLINED_FUNCTION_22_8();
      v76();
      *(_WORD *)(v69 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v77 = OUTLINED_FUNCTION_82();
      uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v75, v78);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v69 + 32) = 2080;
      uint64_t v79 = UUID.uuidString.getter();
      uint64_t v81 = OUTLINED_FUNCTION_21_8(v79, v80);
      OUTLINED_FUNCTION_9_15(v81);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_8();
      v76();
      *(_WORD *)(v69 + 42) = 2080;
      uint64_t v83 = (uint64_t)v164;
      uint64_t v82 = v165;
      outlined init with copy of UUID?(v165, (uint64_t)v164);
      OUTLINED_FUNCTION_3_19(v83);
      if (v61)
      {
        outlined destroy of UUID?(v83);
      }
      else
      {
        UUID.uuidString.getter();
        ((void (*)(uint64_t, uint64_t))v76)(v83, v64);
      }
      uint64_t v126 = OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_8_14(v126);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v82);
      uint64_t v67 = v170;
      _os_log_impl(&dword_1C9CFE000, v170, (os_log_type_t)v168, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v69, 0x34u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      uint64_t v101 = *(void (**)(void))(v29 + 8);
      OUTLINED_FUNCTION_22_8();
      v101();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_8();
      v101();
      outlined destroy of UUID?(v65);
    }

    goto LABEL_48;
  }
  uint64_t v45 = (char *)v44;
  uint64_t v46 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  objc_msgSend(v46, sel_setModelExecuted_, v45);
  uint64_t v164 = v45;
  if (!v46)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v84 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_17_10(v84, (uint64_t)static Logger.common);
    uint64_t v85 = v27;
    OUTLINED_FUNCTION_13_6();
    v86();
    uint64_t v87 = v165;
    outlined init with copy of UUID?(v168, v165);
    unint64_t v88 = v169;
    swift_bridgeObjectRetain_n();
    os_log_t v89 = (os_log_t)Logger.logObject.getter();
    int v90 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1((os_log_type_t)v90))
    {
      LODWORD(v170) = v90;
      OUTLINED_FUNCTION_33_3();
      uint64_t v168 = OUTLINED_FUNCTION_11_15();
      v172[0] = v168;
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      uint64_t v171 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
      uint64_t v91 = String.init<A>(describing:)();
      uint64_t v93 = (void (*)(void))v92;
      uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v172);
      OUTLINED_FUNCTION_38_1();
      swift_bridgeObjectRelease();
      uint64_t v94 = OUTLINED_FUNCTION_118();
      uint64_t v96 = OUTLINED_FUNCTION_21_8(v94, v95);
      OUTLINED_FUNCTION_76(v96);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_9_10();
      v93();
      *(_WORD *)(v87 + 22) = (_WORD)v13;
      swift_bridgeObjectRetain();
      uint64_t v97 = OUTLINED_FUNCTION_82();
      uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v88, v98);
      OUTLINED_FUNCTION_38_1();
      uint64_t v99 = v165;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v87 + 32) = (_WORD)v13;
      uint64_t v100 = (uint64_t)v156;
      outlined init with copy of UUID?(v99, (uint64_t)v156);
      OUTLINED_FUNCTION_5_9(v100, 1, v85);
      if (v61)
      {
        outlined destroy of UUID?(v100);
        OUTLINED_FUNCTION_113();
      }
      else
      {
        UUID.uuidString.getter();
        ((void (*)(uint64_t, uint64_t))v93)(v100, v85);
      }
      uint64_t v148 = OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_52_0(v148);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v99);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v149, (os_log_type_t)v170, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      uint64_t v150 = v164;
      goto LABEL_47;
    }

    outlined destroy of UUID?(v87);
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_10();
    v125();
LABEL_38:

    goto LABEL_48;
  }
  id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
  uint64_t v165 = v29;
  if (!v47)
  {
    uint64_t v102 = v27;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v103 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v103, (uint64_t)static Logger.common);
    uint64_t v104 = v158;
    OUTLINED_FUNCTION_13_6();
    v105();
    uint64_t v106 = v159;
    outlined init with copy of UUID?(v168, v159);
    unint64_t v107 = v169;
    swift_bridgeObjectRetain_n();
    uint64_t v108 = Logger.logObject.getter();
    int v109 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v108, (os_log_type_t)v109))
    {
      LODWORD(v168) = v109;
      os_log_t v170 = v108;
      uint64_t v156 = v46;
      uint64_t v110 = OUTLINED_FUNCTION_33_3();
      uint64_t v166 = swift_slowAlloc();
      v172[0] = v166;
      *(_DWORD *)uint64_t v110 = 136315906;
      uint64_t v171 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
      uint64_t v111 = String.init<A>(describing:)();
      uint64_t v171 = OUTLINED_FUNCTION_83(v111, v112);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease();
      uint64_t v113 = v165;
      *(_WORD *)(v110 + 12) = 2080;
      uint64_t v114 = UUID.uuidString.getter();
      uint64_t v116 = OUTLINED_FUNCTION_21_8(v114, v115);
      OUTLINED_FUNCTION_9_15(v116);
      swift_bridgeObjectRelease();
      BOOL v117 = *(void (**)(char *, uint64_t))(v113 + 8);
      v117(v104, v102);
      *(_WORD *)(v110 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v118 = OUTLINED_FUNCTION_82();
      uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v118, v107, v119);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v110 + 32) = 2080;
      uint64_t v120 = v155;
      outlined init with copy of UUID?(v106, v155);
      OUTLINED_FUNCTION_5_9(v120, 1, v102);
      if (v61)
      {
        outlined destroy of UUID?(v120);
        OUTLINED_FUNCTION_112();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v151 = ((uint64_t (*)(uint64_t, uint64_t))v117)(v120, v102);
      }
      uint64_t v153 = OUTLINED_FUNCTION_90(v151, v152, v172);
      OUTLINED_FUNCTION_8_14(v153);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v106);
      os_log_t v89 = v170;
      _os_log_impl(&dword_1C9CFE000, v170, (os_log_type_t)v168, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v110, 0x2Au);
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      goto LABEL_46;
    }

    outlined destroy of UUID?(v106);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v165 + 8))(v104, v102);
    goto LABEL_38;
  }
  os_log_type_t v48 = v47;
  uint64_t v156 = v46;
  uint64_t v49 = type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  unint64_t v50 = *(void (**)(void))(v165 + 16);
  uint64_t v51 = v27;
  OUTLINED_FUNCTION_56();
  v50();
  uint64_t v159 = v49;
  id v52 = SISchemaUUID.__allocating_init(nsuuid:)();
  OUTLINED_FUNCTION_26_7((uint64_t)v52, sel_setCamId_);

  unint64_t v53 = v169;
  int v54 = (void *)MEMORY[0x1CB78D210](v167, v169);
  OUTLINED_FUNCTION_26_7((uint64_t)v54, sel_setResultCandidateId_);

  OUTLINED_FUNCTION_94(v55, sel_setRequestId_);
  if (AFDeviceSupportsSAE())
  {
    OUTLINED_FUNCTION_56();
    v50();
    id v56 = SISchemaUUID.__allocating_init(nsuuid:)();
    OUTLINED_FUNCTION_26_7((uint64_t)v56, sel_setSubRequestId_);
  }
  char v57 = v50;
  uint64_t v58 = (uint64_t)v160;
  if (one-time initialization token for kLoggingFeatureName != -1) {
    swift_once();
  }
  unint64_t v59 = specialized Dictionary.subscript.getter(v161, (uint64_t)kLoggingFeatureName._rawValue);
  uint64_t v60 = v162;
  if ((v59 & 0x100000000) == 0) {
    objc_msgSend(v48, sel_setFeature_, v59);
  }
  outlined init with copy of UUID?(v168, v58);
  OUTLINED_FUNCTION_5_9(v58, 1, v51);
  if (v61)
  {
    outlined destroy of UUID?(v58);
    UUID.init(uuidString:)();
    OUTLINED_FUNCTION_5_9(v60, 1, v51);
    if (v61)
    {
      outlined destroy of UUID?(v60);
      uint64_t v122 = v50;
    }
    else
    {
      uint64_t v127 = v165;
      uint64_t v128 = v154;
      OUTLINED_FUNCTION_46_0();
      v129();
      OUTLINED_FUNCTION_56();
      v57();
      id v130 = SISchemaUUID.__allocating_init(nsuuid:)();
      OUTLINED_FUNCTION_26_7((uint64_t)v130, sel_setTrpId_);

      uint64_t v131 = v128;
      uint64_t v122 = v57;
      (*(void (**)(char *, uint64_t))(v127 + 8))(v131, v51);
    }
  }
  else
  {
    OUTLINED_FUNCTION_81();
    OUTLINED_FUNCTION_46_0();
    v121();
    uint64_t v122 = v50;
    OUTLINED_FUNCTION_56();
    v50();
    id v123 = SISchemaUUID.__allocating_init(nsuuid:)();
    OUTLINED_FUNCTION_26_7((uint64_t)v123, sel_setTrpId_);

    OUTLINED_FUNCTION_9_10();
    v124();
  }
  uint64_t v132 = v156;
  objc_msgSend(v156, sel_setEventMetadata_, v48);
  objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v132);
  swift_unknownObjectRelease();
  uint64_t v133 = v163;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v134 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_41_1(v134, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_56();
  v122();
  swift_bridgeObjectRetain_n();
  os_log_t v89 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v135 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_67(v135))
  {
    OUTLINED_FUNCTION_7_1();
    os_log_type_t v136 = OUTLINED_FUNCTION_48_1();
    uint64_t v168 = v51;
    os_log_t v170 = v136;
    v172[0] = (uint64_t)v136;
    OUTLINED_FUNCTION_12_11(4.8152e-34);
    uint64_t v171 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMModelExecuted);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMModelExecuted.Type);
    uint64_t v137 = String.init<A>(describing:)();
    uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v137, v138, v172);
    OUTLINED_FUNCTION_31_4();
    swift_bridgeObjectRelease();
    uint64_t v139 = v165;
    uint64_t v140 = OUTLINED_FUNCTION_99();
    uint64_t v142 = OUTLINED_FUNCTION_21_8(v140, v141);
    OUTLINED_FUNCTION_75(v142);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v133, v168);
    OUTLINED_FUNCTION_98();
    uint64_t v143 = OUTLINED_FUNCTION_82();
    uint64_t v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v143, v53, v144);
    OUTLINED_FUNCTION_31_4();
    OUTLINED_FUNCTION_20_0();
    OUTLINED_FUNCTION_47_0(&dword_1C9CFE000, v145, v146, "Successfully emitted log message : %s for camId : %s, rcId: %s");
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

LABEL_46:
    uint64_t v150 = v156;
LABEL_47:

    goto LABEL_48;
  }
  swift_bridgeObjectRelease_n();

  OUTLINED_FUNCTION_18_1();
  v147();

LABEL_48:
  OUTLINED_FUNCTION_17_9();
}

{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  unint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void (*v43)(void);
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(void);
  unint64_t v57;
  NSObject *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void (*v66)(void);
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(void);
  uint64_t v74;
  unint64_t v75;
  void *v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(void);
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(void);
  uint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  unint64_t v91;
  os_log_type_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  void (*v98)(void);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  void (*v103)(void);
  id v104;
  uint64_t v105;
  void (*v106)(void);
  uint64_t v107;
  char *v108;
  void (*v109)(void);
  id v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  os_log_type_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void (*v120)(void);
  uint64_t v121;
  uint64_t v122;
  id v123;
  void (*v124)(void);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  id v132;
  uint64_t v133;
  uint64_t v134;
  id v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  id v145;
  uint64_t v146;
  uint64_t v147;
  os_log_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153[2];

  OUTLINED_FUNCTION_18_11();
  uint64_t v142 = v2;
  uint64_t v146 = v3;
  char v147 = v4;
  uint64_t v148 = v5;
  uint64_t v149 = v6;
  uint64_t v145 = v7;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = OUTLINED_FUNCTION_11_1(v8);
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_9_3();
  uint64_t v12 = v10 - v11;
  MEMORY[0x1F4188790](v13);
  unint64_t v138 = (uint64_t)&v135 - v14;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v15);
  uint64_t v137 = (uint64_t)&v135 - v16;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v17);
  uint64_t v140 = (char *)&v135 - v18;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v19);
  OUTLINED_FUNCTION_106();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_10_0();
  int v144 = v21;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  unint64_t v141 = (uint64_t)&v135 - v23;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v24);
  OUTLINED_FUNCTION_101();
  OUTLINED_FUNCTION_1_2();
  uint64_t v150 = v26;
  uint64_t v151 = v25;
  MEMORY[0x1F4188790](v25);
  OUTLINED_FUNCTION_5_2();
  uint64_t v143 = v27;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v28);
  os_log_type_t v136 = (char *)&v135 - v29;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v30);
  uint64_t v139 = (char *)&v135 - v31;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v32);
  OUTLINED_FUNCTION_105();
  MEMORY[0x1F4188790](v33);
  OUTLINED_FUNCTION_43_1();
  MEMORY[0x1F4188790](v34);
  OUTLINED_FUNCTION_19_10();
  MEMORY[0x1F4188790](v35);
  OUTLINED_FUNCTION_18_12();
  MEMORY[0x1F4188790](v36);
  uint64_t v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01F8]), sel_init);
  if (!v37)
  {
    unint64_t v53 = v1;
    int v144 = v12;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    int v54 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v54, (uint64_t)static Logger.common);
    uint64_t v55 = v150;
    id v56 = *(void (**)(void))(v150 + 16);
    OUTLINED_FUNCTION_30_5();
    v56();
    OUTLINED_FUNCTION_30_5();
    v56();
    outlined init with copy of UUID?(v147, v53);
    char v57 = v149;
    swift_bridgeObjectRetain_n();
    uint64_t v58 = Logger.logObject.getter();
    unint64_t v59 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v58, (os_log_type_t)v59))
    {
      LODWORD(v147) = v59;
      uint64_t v148 = v58;
      uint64_t v60 = OUTLINED_FUNCTION_88();
      uint64_t v145 = (id)OUTLINED_FUNCTION_86();
      v153[0] = (uint64_t)v145;
      *(_DWORD *)uint64_t v60 = 136316162;
      uint64_t v152 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
      char v61 = String.init<A>(describing:)();
      uint64_t v152 = OUTLINED_FUNCTION_83(v61, v62);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease();
      *(_WORD *)(v60 + 12) = 2080;
      uint64_t v63 = UUID.uuidString.getter();
      uint64_t v65 = OUTLINED_FUNCTION_21_8(v63, v64);
      OUTLINED_FUNCTION_9_15(v65);
      swift_bridgeObjectRelease();
      unint64_t v66 = *(void (**)(void))(v55 + 8);
      OUTLINED_FUNCTION_22_8();
      v66();
      *(_WORD *)(v60 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v57, v153);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v60 + 32) = 2080;
      uint64_t v67 = UUID.uuidString.getter();
      uint64_t v69 = OUTLINED_FUNCTION_21_8(v67, v68);
      OUTLINED_FUNCTION_85(v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_22_8();
      v66();
      *(_WORD *)(v60 + 42) = 2080;
      uint64_t v70 = v144;
      outlined init with copy of UUID?(v53, v144);
      OUTLINED_FUNCTION_5_9(v70, 1, (uint64_t)v153);
      if (v51)
      {
        outlined destroy of UUID?(v70);
      }
      else
      {
        UUID.uuidString.getter();
        ((void (*)(uint64_t, uint64_t *))v66)(v70, v153);
      }
      uint64_t v105 = OUTLINED_FUNCTION_104();
      OUTLINED_FUNCTION_8_14(v105);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v53);
      uint64_t v58 = v148;
      _os_log_impl(&dword_1C9CFE000, v148, (os_log_type_t)v147, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v60, 0x34u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {
      uint64_t v86 = *(void (**)(void))(v55 + 8);
      OUTLINED_FUNCTION_22_8();
      v86();
      swift_bridgeObjectRelease_n();
      OUTLINED_FUNCTION_22_8();
      v86();
      outlined destroy of UUID?(v53);
    }

    goto LABEL_48;
  }
  uint64_t v38 = v37;
  uint64_t v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  objc_msgSend(v39, sel_setRequestReceived_, v38);
  if (!v39)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    unint64_t v71 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_17_10(v71, (uint64_t)static Logger.common);
    uint64_t v72 = v151;
    OUTLINED_FUNCTION_13_6();
    v73();
    uint64_t v74 = v141;
    outlined init with copy of UUID?(v147, v141);
    unint64_t v75 = v149;
    swift_bridgeObjectRetain_n();
    id v76 = (void *)Logger.logObject.getter();
    uint64_t v77 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1((os_log_type_t)v77))
    {
      LODWORD(v148) = v77;
      os_log_type_t v135 = v38;
      OUTLINED_FUNCTION_33_3();
      char v147 = OUTLINED_FUNCTION_11_15();
      v153[0] = v147;
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      uint64_t v152 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
      uint64_t v78 = String.init<A>(describing:)();
      unint64_t v80 = (void (*)(void))v79;
      uint64_t v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v153);
      OUTLINED_FUNCTION_38_1();
      swift_bridgeObjectRelease();
      uint64_t v81 = OUTLINED_FUNCTION_37_2();
      uint64_t v83 = OUTLINED_FUNCTION_21_8(v81, v82);
      OUTLINED_FUNCTION_76(v83);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_9_10();
      v80();
      *(_WORD *)(v72 + 22) = v75;
      swift_bridgeObjectRetain();
      uint64_t v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v75, v153);
      OUTLINED_FUNCTION_38_1();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v72 + 32) = v75;
      uint64_t v84 = v151;
      uint64_t v85 = v138;
      outlined init with copy of UUID?(v74, v138);
      OUTLINED_FUNCTION_5_9(v85, 1, v84);
      if (v51)
      {
        outlined destroy of UUID?(v85);
        OUTLINED_FUNCTION_113();
      }
      else
      {
        UUID.uuidString.getter();
        unint64_t v125 = OUTLINED_FUNCTION_114();
        ((void (*)(uint64_t))v80)(v125);
      }
      uint64_t v126 = OUTLINED_FUNCTION_96();
      OUTLINED_FUNCTION_52_0(v126);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v74);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v127, (os_log_type_t)v148, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      id v123 = v135;
      goto LABEL_45;
    }

    outlined destroy of UUID?(v74);
    swift_bridgeObjectRelease_n();
    goto LABEL_38;
  }
  uint64_t v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
  uint64_t v41 = v150;
  if (!v40)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_110();
    unint64_t v88 = v151;
    OUTLINED_FUNCTION_13_6();
    v89();
    int v90 = v144;
    outlined init with copy of UUID?(v147, v144);
    uint64_t v91 = v149;
    swift_bridgeObjectRetain_n();
    id v76 = (void *)Logger.logObject.getter();
    unint64_t v92 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1(v92))
    {
      uint64_t v145 = v39;
      os_log_type_t v135 = v38;
      OUTLINED_FUNCTION_33_3();
      uint64_t v148 = (os_log_t)OUTLINED_FUNCTION_11_15();
      v153[0] = (uint64_t)v148;
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      uint64_t v152 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
      uint64_t v93 = String.init<A>(describing:)();
      uint64_t v152 = OUTLINED_FUNCTION_83(v93, v94);
      OUTLINED_FUNCTION_7_18();
      swift_bridgeObjectRelease();
      unint64_t v95 = OUTLINED_FUNCTION_84();
      uint64_t v97 = OUTLINED_FUNCTION_21_8(v95, v96);
      OUTLINED_FUNCTION_9_15(v97);
      swift_bridgeObjectRelease();
      uint64_t v98 = *(void (**)(void))(v41 + 8);
      OUTLINED_FUNCTION_9_10();
      v98();
      *(_WORD *)(v88 + 22) = v91;
      swift_bridgeObjectRetain();
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v91, v153);
      OUTLINED_FUNCTION_85(v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v88 + 32) = v91;
      uint64_t v100 = v137;
      outlined init with copy of UUID?(v144, v137);
      OUTLINED_FUNCTION_5_9(v100, 1, (uint64_t)v153);
      if (v51)
      {
        outlined destroy of UUID?(v100);
        OUTLINED_FUNCTION_112();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v128 = OUTLINED_FUNCTION_114();
        uint64_t v129 = ((uint64_t (*)(uint64_t))v98)(v128);
      }
      uint64_t v131 = v135;
      uint64_t v132 = v145;
      uint64_t v133 = OUTLINED_FUNCTION_90(v129, v130, v153);
      OUTLINED_FUNCTION_8_14(v133);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v144);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v134, v92, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      goto LABEL_47;
    }

    outlined destroy of UUID?(v90);
    swift_bridgeObjectRelease_n();
LABEL_38:
    OUTLINED_FUNCTION_9_10();
    v106();

    goto LABEL_48;
  }
  uint64_t v42 = v40;
  type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
  uint64_t v43 = *(void (**)(void))(v41 + 16);
  OUTLINED_FUNCTION_16_9();
  v43();
  uint64_t v44 = SISchemaUUID.__allocating_init(nsuuid:)();
  objc_msgSend(v42, sel_setCamId_, v44);

  uint64_t v45 = (void *)MEMORY[0x1CB78D210](v146, v149);
  objc_msgSend(v42, sel_setResultCandidateId_, v45);

  OUTLINED_FUNCTION_94(v46, sel_setRequestId_);
  if (AFDeviceSupportsSAE())
  {
    OUTLINED_FUNCTION_16_9();
    v43();
    id v47 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v42, sel_setSubRequestId_, v47);
  }
  uint64_t v145 = v39;
  os_log_type_t v135 = v38;
  if (one-time initialization token for kLoggingFeatureName != -1) {
    swift_once();
  }
  os_log_type_t v48 = v149;
  uint64_t v49 = specialized Dictionary.subscript.getter(v142, (uint64_t)kLoggingFeatureName._rawValue);
  if ((v49 & 0x100000000) == 0) {
    objc_msgSend(v42, sel_setFeature_, v49, v135);
  }
  outlined init with copy of UUID?(v147, v0);
  unint64_t v50 = v151;
  OUTLINED_FUNCTION_5_9(v0, 1, v151);
  if (v51)
  {
    outlined destroy of UUID?(v0);
    id v52 = (uint64_t)v140;
    UUID.init(uuidString:)();
    OUTLINED_FUNCTION_5_9(v52, 1, v50);
    if (v51)
    {
      outlined destroy of UUID?(v52);
    }
    else
    {
      unint64_t v107 = v150;
      uint64_t v108 = v136;
      OUTLINED_FUNCTION_46_0();
      v109();
      OUTLINED_FUNCTION_16_9();
      v43();
      uint64_t v110 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v42, sel_setTrpId_, v110);

      (*(void (**)(char *, uint64_t))(v107 + 8))(v108, v50);
    }
  }
  else
  {
    uint64_t v101 = v150;
    uint64_t v102 = v139;
    OUTLINED_FUNCTION_46_0();
    v103();
    OUTLINED_FUNCTION_16_9();
    v43();
    uint64_t v104 = SISchemaUUID.__allocating_init(nsuuid:)();
    OUTLINED_FUNCTION_26_7((uint64_t)v104, sel_setTrpId_);

    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v50);
  }
  uint64_t v111 = v143;
  unint64_t v112 = v145;
  objc_msgSend(v145, sel_setEventMetadata_, v42, v135);
  objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v112);
  swift_unknownObjectRelease();
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v113 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_41_1(v113, (uint64_t)static Logger.common);
  OUTLINED_FUNCTION_16_9();
  v43();
  swift_bridgeObjectRetain_n();
  id v76 = (void *)Logger.logObject.getter();
  uint64_t v114 = static os_log_type_t.debug.getter();
  if (OUTLINED_FUNCTION_67(v114))
  {
    OUTLINED_FUNCTION_7_1();
    uint64_t v151 = OUTLINED_FUNCTION_48_1();
    v153[0] = v151;
    OUTLINED_FUNCTION_12_11(4.8152e-34);
    uint64_t v152 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
    unint64_t v115 = String.init<A>(describing:)();
    uint64_t v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v153);
    OUTLINED_FUNCTION_31_4();
    swift_bridgeObjectRelease();
    BOOL v117 = OUTLINED_FUNCTION_99();
    uint64_t v119 = OUTLINED_FUNCTION_21_8(v117, v118);
    OUTLINED_FUNCTION_75(v119);
    swift_bridgeObjectRelease();
    OUTLINED_FUNCTION_18_1();
    v120();
    *(_WORD *)(v111 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v152 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v146, v48, v153);
    OUTLINED_FUNCTION_31_4();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_47_0(&dword_1C9CFE000, v121, v122, "Successfully emitted log message : %s for camId : %s, rcId: %s");
    OUTLINED_FUNCTION_102();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    id v123 = v145;
LABEL_45:

LABEL_47:
    goto LABEL_48;
  }
  swift_bridgeObjectRelease_n();

  OUTLINED_FUNCTION_18_1();
  v124();

LABEL_48:
  OUTLINED_FUNCTION_17_9();
}

{
  __int16 v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  NSObject *v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *rawValue;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  _WORD *v55;
  id v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void (*v60)(void);
  id v61;
  void *v62;
  uint64_t v63;
  id v64;
  void (*v65)(void);
  unint64_t v66;
  _WORD *v67;
  void (*v68)(void);
  uint64_t v69;
  char v70;
  uint64_t v71;
  void (*v72)(void);
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(void);
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(void);
  uint64_t v93;
  os_log_t v94;
  os_log_type_t v95;
  uint64_t v96;
  unint64_t v97;
  void (*v98)(void);
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(void);
  uint64_t v107;
  void (*v108)(void);
  uint64_t v109;
  int v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  void (*v118)(void);
  uint64_t v119;
  uint64_t v120;
  void (*v121)(void);
  uint64_t v122;
  id v123;
  void (*v124)(void);
  uint64_t v125;
  void (*v126)(uint64_t);
  uint64_t v127;
  uint64_t v128;
  void (*v129)(void);
  uint64_t v130;
  uint64_t v131;
  void (*v132)(void);
  uint64_t v133;
  id v134;
  uint64_t v135;
  os_log_type_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  void (*v143)(void);
  void (*v144)(void);
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  NSObject *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(void);
  int v162;
  char *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  NSObject *v167;
  uint64_t v168;
  _WORD *v169;
  os_log_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174[6];

  OUTLINED_FUNCTION_18_11();
  uint64_t v162 = v1;
  uint64_t v168 = v2;
  unint64_t v169 = (_WORD *)v3;
  uint64_t v172 = v4;
  os_log_t v170 = v5;
  uint64_t v166 = v6;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = OUTLINED_FUNCTION_11_1(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_5_2();
  uint64_t v159 = v13;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v14);
  uint64_t v156 = (uint64_t)&v153 - v15;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v16);
  OUTLINED_FUNCTION_10_0();
  uint64_t v155 = v17;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v18);
  uint64_t v163 = (char *)&v153 - v19;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v20);
  int v161 = (void (*)(void))((char *)&v153 - v21);
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v22);
  os_log_type_t v160 = (uint64_t)&v153 - v23;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v24);
  uint64_t v165 = (uint64_t)&v153 - v25;
  OUTLINED_FUNCTION_2_5();
  uint64_t v27 = MEMORY[0x1F4188790](v26);
  uint64_t v171 = OUTLINED_FUNCTION_71(v27, v28, v29, v30, v31, v32, v33, v34, v153);
  OUTLINED_FUNCTION_1_2();
  uint64_t v36 = v35;
  MEMORY[0x1F4188790](v37);
  OUTLINED_FUNCTION_5_2();
  uint64_t v164 = v38;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v39);
  OUTLINED_FUNCTION_10_0();
  uint64_t v154 = v40;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v41);
  uint64_t v157 = (char *)&v153 - v42;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v43);
  os_log_t v158 = (char *)&v153 - v44;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_18_12();
  MEMORY[0x1F4188790](v46);
  OUTLINED_FUNCTION_19_10();
  MEMORY[0x1F4188790](v47);
  OUTLINED_FUNCTION_43_1();
  MEMORY[0x1F4188790](v48);
  uint64_t v49 = one-time initialization token for kCamActionMap;
  swift_retain();
  if (v49 != -1) {
    swift_once();
  }
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v173) = *(unsigned char *)(v10 + 57);
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  AnyHashable.init<A>(_:)();
  uint64_t v51 = specialized Dictionary.subscript.getter((uint64_t)v174, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v174);
  id v52 = *(void *)(v10 + 40);
  unint64_t v53 = *(void *)(v10 + 48);
  swift_bridgeObjectRetain();
  int v54 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v51 | ((HIDWORD(v51) & 1) << 32), v8, v52, v53);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v54)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    unint64_t v71 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v71, (uint64_t)static Logger.common);
    uint64_t v72 = *(void (**)(void))(v36 + 16);
    OUTLINED_FUNCTION_30_5();
    v72();
    OUTLINED_FUNCTION_30_5();
    v72();
    unint64_t v73 = (uint64_t)v167;
    outlined init with copy of UUID?((uint64_t)v169, (uint64_t)v167);
    uint64_t v74 = v172;
    swift_bridgeObjectRetain_n();
    int v54 = Logger.logObject.getter();
    unint64_t v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, (os_log_type_t)v75))
    {
      LODWORD(v169) = v75;
      os_log_t v170 = v54;
      id v76 = OUTLINED_FUNCTION_88();
      uint64_t v77 = OUTLINED_FUNCTION_86();
      OUTLINED_FUNCTION_111(v77);
      OUTLINED_FUNCTION_12_11(4.8154e-34);
      uint64_t v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v78 = OUTLINED_FUNCTION_39_1();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v174);
      OUTLINED_FUNCTION_46_1();
      swift_bridgeObjectRelease();
      unint64_t v80 = OUTLINED_FUNCTION_108();
      uint64_t v82 = OUTLINED_FUNCTION_20_9(v80, v81);
      OUTLINED_FUNCTION_79(v82);
      swift_bridgeObjectRelease();
      uint64_t v83 = *(void (**)(void))(v36 + 8);
      OUTLINED_FUNCTION_9_10();
      v83();
      *(_WORD *)(v76 + 22) = v53;
      swift_bridgeObjectRetain();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v74, v174);
      OUTLINED_FUNCTION_46_1();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v76 + 32) = v53;
      uint64_t v84 = UUID.uuidString.getter();
      uint64_t v86 = OUTLINED_FUNCTION_20_9(v84, v85);
      OUTLINED_FUNCTION_65(v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_10();
      v83();
      *(_WORD *)(v76 + 42) = v53;
      uint64_t v87 = (uint64_t)v167;
      unint64_t v88 = v159;
      outlined init with copy of UUID?((uint64_t)v167, v159);
      OUTLINED_FUNCTION_3_19(v88);
      if (v70)
      {
        outlined destroy of UUID?(v88);
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v127 = OUTLINED_FUNCTION_69();
        ((void (*)(uint64_t))v83)(v127);
      }
      uint64_t v128 = OUTLINED_FUNCTION_100();
      OUTLINED_FUNCTION_57(v128);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v87);
      uint64_t v94 = v170;
      _os_log_impl(&dword_1C9CFE000, v170, (os_log_type_t)v169, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v76, 0x34u);
      OUTLINED_FUNCTION_103();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      goto LABEL_49;
    }
    uint64_t v106 = *(void (**)(void))(v36 + 8);
    OUTLINED_FUNCTION_9_10();
    v106();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_10();
    v106();
    outlined destroy of UUID?(v73);
LABEL_37:

    goto LABEL_50;
  }
  uint64_t v55 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  objc_msgSend(v55, sel_setResponseGenerated_, v54);
  if (!v55)
  {
    os_log_t v89 = v171;
    int v90 = v172;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v91 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_17_10(v91, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_13_6();
    v92();
    uint64_t v93 = v165;
    outlined init with copy of UUID?((uint64_t)v169, v165);
    swift_bridgeObjectRetain_n();
    uint64_t v94 = (os_log_t)Logger.logObject.getter();
    unint64_t v95 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1(v95))
    {
      uint64_t v167 = v54;
      OUTLINED_FUNCTION_33_3();
      os_log_t v170 = (os_log_t)OUTLINED_FUNCTION_11_15();
      v174[0] = (uint64_t)v170;
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      uint64_t v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v96 = String.init<A>(describing:)();
      uint64_t v98 = (void (*)(void))v97;
      uint64_t v99 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v174);
      OUTLINED_FUNCTION_61(v99);
      swift_bridgeObjectRelease();
      uint64_t v100 = OUTLINED_FUNCTION_37_2();
      uint64_t v102 = OUTLINED_FUNCTION_20_9(v100, v101);
      OUTLINED_FUNCTION_78(v102);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_9_10();
      v98();
      *(_WORD *)(v89 + 22) = v93;
      swift_bridgeObjectRetain();
      uint64_t v103 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v90, v174);
      OUTLINED_FUNCTION_115(v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v89 + 32) = v93;
      uint64_t v104 = v165;
      uint64_t v105 = v156;
      outlined init with copy of UUID?(v165, v156);
      OUTLINED_FUNCTION_3_19(v105);
      if (v70)
      {
        outlined destroy of UUID?(v105);
        OUTLINED_FUNCTION_113();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v145 = OUTLINED_FUNCTION_55_0();
        ((void (*)(uint64_t))v98)(v145);
      }
      uint64_t v146 = OUTLINED_FUNCTION_95();
      OUTLINED_FUNCTION_53_0(v146);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v104);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v147, v95, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      uint64_t v148 = v167;
      goto LABEL_48;
    }

    outlined destroy of UUID?(v93);
    swift_bridgeObjectRelease_n();
    unint64_t v125 = OUTLINED_FUNCTION_107();
    v126(v125);
    goto LABEL_37;
  }
  uint64_t v167 = v54;
  id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
  char v57 = v171;
  if (v56)
  {
    uint64_t v58 = v56;
    unint64_t v59 = type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    uint64_t v60 = *(void (**)(void))(v36 + 16);
    OUTLINED_FUNCTION_29_4();
    v60();
    char v61 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v58, sel_setCamId_, v61);

    uint64_t v62 = (void *)MEMORY[0x1CB78D210](v168, v172);
    objc_msgSend(v58, sel_setResultCandidateId_, v62);

    OUTLINED_FUNCTION_94(v63, sel_setRequestId_);
    if (AFDeviceSupportsSAE())
    {
      OUTLINED_FUNCTION_29_4();
      v60();
      uint64_t v64 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v58, sel_setSubRequestId_, v64);
    }
    uint64_t v165 = v59;
    uint64_t v166 = v36;
    if (one-time initialization token for kLoggingFeatureName != -1) {
      swift_once();
    }
    uint64_t v65 = v60;
    unint64_t v66 = specialized Dictionary.subscript.getter(v162, (uint64_t)kLoggingFeatureName._rawValue);
    uint64_t v67 = v55;
    if ((v66 & 0x100000000) == 0) {
      objc_msgSend(v58, sel_setFeature_, v66);
    }
    int v68 = v161;
    outlined init with copy of UUID?((uint64_t)v169, (uint64_t)v161);
    OUTLINED_FUNCTION_3_19((uint64_t)v68);
    uint64_t v69 = (uint64_t)v163;
    if (v70)
    {
      outlined destroy of UUID?((uint64_t)v68);
      UUID.init(uuidString:)();
      OUTLINED_FUNCTION_3_19(v69);
      if (v70)
      {
        outlined destroy of UUID?(v69);
        int v68 = v65;
      }
      else
      {
        id v130 = v166;
        OUTLINED_FUNCTION_81();
        unint64_t v169 = v55;
        uint64_t v131 = v154;
        OUTLINED_FUNCTION_46_0();
        v132();
        uint64_t v133 = OUTLINED_FUNCTION_50_0();
        ((void (*)(uint64_t))v65)(v133);
        uint64_t v134 = SISchemaUUID.__allocating_init(nsuuid:)();
        OUTLINED_FUNCTION_26_7((uint64_t)v134, sel_setTrpId_);

        uint64_t v67 = v169;
        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v57);
      }
    }
    else
    {
      OUTLINED_FUNCTION_81();
      OUTLINED_FUNCTION_46_0();
      v121();
      uint64_t v122 = OUTLINED_FUNCTION_50_0();
      ((void (*)(uint64_t))v65)(v122);
      id v123 = SISchemaUUID.__allocating_init(nsuuid:)();
      OUTLINED_FUNCTION_26_7((uint64_t)v123, sel_setTrpId_);

      OUTLINED_FUNCTION_9_10();
      v124();
    }
    objc_msgSend(v67, sel_setEventMetadata_, v58);
    objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v67);
    swift_unknownObjectRelease();
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    os_log_type_t v135 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v135, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_29_4();
    v68();
    swift_bridgeObjectRetain_n();
    uint64_t v94 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.debug.getter();
    uint64_t v137 = v136;
    if (os_log_type_enabled(v94, v136))
    {
      OUTLINED_FUNCTION_7_1();
      unint64_t v169 = v67;
      os_log_t v170 = (os_log_t)OUTLINED_FUNCTION_48_1();
      v174[0] = (uint64_t)v170;
      *(_DWORD *)uint64_t v67 = 136315650;
      LODWORD(v165) = v137;
      uint64_t v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      unint64_t v138 = OUTLINED_FUNCTION_39_1();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v138, v139, v174);
      OUTLINED_FUNCTION_31_4();
      swift_bridgeObjectRelease();
      v67[6] = 2080;
      uint64_t v140 = UUID.uuidString.getter();
      uint64_t v142 = OUTLINED_FUNCTION_20_9(v140, v141);
      OUTLINED_FUNCTION_77(v142);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_10();
      v143();
      OUTLINED_FUNCTION_98();
      uint64_t v173 = OUTLINED_FUNCTION_74();
      OUTLINED_FUNCTION_31_4();
      OUTLINED_FUNCTION_20_0();
      _os_log_impl(&dword_1C9CFE000, v94, (os_log_type_t)v165, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v67, 0x20u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

LABEL_47:
      uint64_t v148 = v169;
LABEL_48:

LABEL_49:
      goto LABEL_50;
    }
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_18_1();
    v144();
  }
  else
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    unint64_t v107 = type metadata accessor for Logger();
    __swift_project_value_buffer(v107, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_13_6();
    v108();
    int v109 = v160;
    outlined init with copy of UUID?((uint64_t)v169, v160);
    swift_bridgeObjectRetain_n();
    uint64_t v94 = (os_log_t)Logger.logObject.getter();
    uint64_t v110 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1((os_log_type_t)v110))
    {
      LODWORD(v170) = v110;
      unint64_t v169 = v55;
      OUTLINED_FUNCTION_33_3();
      uint64_t v111 = OUTLINED_FUNCTION_11_15();
      OUTLINED_FUNCTION_111(v111);
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      uint64_t v173 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      unint64_t v112 = v172;
      uint64_t v113 = String.init<A>(describing:)();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v174);
      OUTLINED_FUNCTION_13_12();
      swift_bridgeObjectRelease();
      unint64_t v115 = OUTLINED_FUNCTION_37_2();
      BOOL v117 = OUTLINED_FUNCTION_20_9(v115, v116);
      OUTLINED_FUNCTION_117(v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v118 = *(void (**)(void))(v36 + 8);
      OUTLINED_FUNCTION_9_10();
      v118();
      *(_WORD *)(v52 + 22) = v0;
      swift_bridgeObjectRetain();
      uint64_t v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v168, v112, v174);
      OUTLINED_FUNCTION_13_12();
      uint64_t v119 = v160;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v52 + 32) = v0;
      uint64_t v120 = v155;
      outlined init with copy of UUID?(v119, v155);
      OUTLINED_FUNCTION_3_19(v120);
      if (v70)
      {
        outlined destroy of UUID?(v120);
        OUTLINED_FUNCTION_112();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v149 = ((uint64_t (*)(uint64_t, uint64_t))v118)(v120, v57);
      }
      uint64_t v151 = OUTLINED_FUNCTION_90(v149, v150, v174);
      OUTLINED_FUNCTION_54_0(v151);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v119);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v152, (os_log_type_t)v170, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      goto LABEL_47;
    }

    outlined destroy of UUID?(v109);
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_10();
    v129();
  }
LABEL_50:
  OUTLINED_FUNCTION_17_9();
}

{
  uint64_t v0;
  __int16 v1;
  __int16 v2;
  int v3;
  unint64_t v4;
  void *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  void *rawValue;
  unint64_t v49;
  NSObject *v50;
  NSObject *v51;
  NSObject *v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void (*v57)(void);
  id v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  void (*v62)(void);
  id v63;
  unint64_t v64;
  NSObject *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(void);
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  void (*v81)(void);
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(void);
  uint64_t v90;
  os_log_t v91;
  os_log_type_t v92;
  uint64_t v93;
  unint64_t v94;
  void (*v95)(void);
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  void (*v103)(void);
  unint64_t v104;
  uint64_t v105;
  void (*v106)(void);
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  void (*v115)(void);
  uint64_t v116;
  void (*v117)(void);
  void (*v118)(void);
  id v119;
  void (*v120)(void);
  uint64_t v121;
  void (*v122)(uint64_t);
  uint64_t v123;
  uint64_t v124;
  void (*v125)(void);
  char *v126;
  void (*v127)(void);
  void (*v128)(void);
  id v129;
  uint64_t v130;
  void (*v131)(void);
  os_log_type_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  void (*v138)(void);
  uint64_t v139;
  uint64_t v140;
  os_log_t v141;
  void (*v142)(void);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  os_log_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  NSObject *v163;
  uint64_t v164;
  id v165;
  unint64_t v166;
  os_log_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170[6];

  OUTLINED_FUNCTION_18_11();
  os_log_t v158 = v3;
  uint64_t v165 = v5;
  uint64_t v166 = v4;
  uint64_t v164 = v6;
  uint64_t v167 = v7;
  uint64_t v162 = v8;
  uint64_t v10 = v9;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v12 = OUTLINED_FUNCTION_11_1(v11);
  MEMORY[0x1F4188790](v12);
  OUTLINED_FUNCTION_5_2();
  uint64_t v157 = v13;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v14);
  uint64_t v154 = (uint64_t)&v151 - v15;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v16);
  uint64_t v153 = (uint64_t)&v151 - v17;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v18);
  uint64_t v156 = (char *)&v151 - v19;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_106();
  MEMORY[0x1F4188790](v21);
  uint64_t v159 = (uint64_t)&v151 - v22;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v23);
  os_log_type_t v160 = (uint64_t)&v151 - v24;
  OUTLINED_FUNCTION_2_5();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v168 = OUTLINED_FUNCTION_71(v26, v27, v28, v29, v30, v31, v32, v33, v151);
  OUTLINED_FUNCTION_1_2();
  uint64_t v35 = v34;
  MEMORY[0x1F4188790](v36);
  OUTLINED_FUNCTION_5_2();
  int v161 = v37;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v38);
  uint64_t v152 = (char *)&v151 - v39;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v40);
  OUTLINED_FUNCTION_10_0();
  uint64_t v155 = v41;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v42);
  OUTLINED_FUNCTION_105();
  MEMORY[0x1F4188790](v43);
  OUTLINED_FUNCTION_18_12();
  MEMORY[0x1F4188790](v44);
  OUTLINED_FUNCTION_19_10();
  MEMORY[0x1F4188790](v45);
  OUTLINED_FUNCTION_43_1();
  MEMORY[0x1F4188790](v46);
  if (one-time initialization token for kCamActionMap != -1) {
    swift_once();
  }
  id v47 = HIBYTE(v10);
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v169) = v10;
  lazy protocol witness table accessor for type AutoConfirmAction and conformance AutoConfirmAction();
  AnyHashable.init<A>(_:)();
  uint64_t v49 = specialized Dictionary.subscript.getter((uint64_t)v170, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v170);
  unint64_t v50 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v49 | ((HIDWORD(v49) & 1) << 32), v47, 0, 0);
  if (!v50)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    int v68 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v68, (uint64_t)static Logger.common);
    uint64_t v69 = v35;
    uint64_t v70 = *(void (**)(void))(v35 + 16);
    OUTLINED_FUNCTION_30_5();
    v70();
    OUTLINED_FUNCTION_30_5();
    v70();
    unint64_t v71 = (uint64_t)v163;
    outlined init with copy of UUID?((uint64_t)v165, (uint64_t)v163);
    uint64_t v72 = v166;
    swift_bridgeObjectRetain_n();
    uint64_t v51 = Logger.logObject.getter();
    unint64_t v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v73))
    {
      LODWORD(v165) = v73;
      uint64_t v167 = v51;
      uint64_t v74 = OUTLINED_FUNCTION_88();
      unint64_t v75 = OUTLINED_FUNCTION_86();
      OUTLINED_FUNCTION_111(v75);
      OUTLINED_FUNCTION_12_11(4.8154e-34);
      unint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      id v76 = OUTLINED_FUNCTION_39_1();
      unint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v170);
      OUTLINED_FUNCTION_46_1();
      swift_bridgeObjectRelease();
      uint64_t v78 = OUTLINED_FUNCTION_108();
      unint64_t v80 = OUTLINED_FUNCTION_20_9(v78, v79);
      OUTLINED_FUNCTION_79(v80);
      swift_bridgeObjectRelease();
      uint64_t v81 = *(void (**)(void))(v69 + 8);
      OUTLINED_FUNCTION_9_10();
      v81();
      *(_WORD *)(v74 + 22) = v2;
      swift_bridgeObjectRetain();
      unint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v72, v170);
      OUTLINED_FUNCTION_46_1();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v74 + 32) = v2;
      uint64_t v82 = UUID.uuidString.getter();
      uint64_t v84 = OUTLINED_FUNCTION_20_9(v82, v83);
      OUTLINED_FUNCTION_65(v84);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_10();
      v81();
      *(_WORD *)(v74 + 42) = v2;
      uint64_t v85 = (uint64_t)v163;
      uint64_t v86 = v157;
      outlined init with copy of UUID?((uint64_t)v163, v157);
      OUTLINED_FUNCTION_3_19(v86);
      if (v66)
      {
        outlined destroy of UUID?(v86);
      }
      else
      {
        UUID.uuidString.getter();
        id v123 = OUTLINED_FUNCTION_69();
        ((void (*)(uint64_t))v81)(v123);
      }
      uint64_t v124 = OUTLINED_FUNCTION_100();
      OUTLINED_FUNCTION_57(v124);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v85);
      uint64_t v91 = v167;
      _os_log_impl(&dword_1C9CFE000, v167, (os_log_type_t)v165, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v74, 0x34u);
      OUTLINED_FUNCTION_103();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      goto LABEL_48;
    }
    uint64_t v103 = *(void (**)(void))(v69 + 8);
    OUTLINED_FUNCTION_9_10();
    v103();
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_10();
    v103();
    outlined destroy of UUID?(v71);
LABEL_37:

    goto LABEL_49;
  }
  uint64_t v51 = v50;
  id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  [v52 setResponseGenerated:v51];
  if (!v52)
  {
    uint64_t v87 = v168;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    unint64_t v88 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_17_10(v88, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_13_6();
    v89();
    int v90 = v160;
    outlined init with copy of UUID?((uint64_t)v165, v160);
    swift_bridgeObjectRetain_n();
    uint64_t v91 = (os_log_t)Logger.logObject.getter();
    unint64_t v92 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1(v92))
    {
      uint64_t v163 = v51;
      OUTLINED_FUNCTION_33_3();
      uint64_t v167 = (os_log_t)OUTLINED_FUNCTION_11_15();
      v170[0] = (uint64_t)v167;
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      unint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v93 = String.init<A>(describing:)();
      unint64_t v95 = (void (*)(void))v94;
      uint64_t v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v170);
      OUTLINED_FUNCTION_61(v96);
      swift_bridgeObjectRelease();
      uint64_t v97 = OUTLINED_FUNCTION_118();
      uint64_t v99 = OUTLINED_FUNCTION_20_9(v97, v98);
      OUTLINED_FUNCTION_78(v99);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_116();
      OUTLINED_FUNCTION_9_10();
      v95();
      *(_WORD *)(v87 + 22) = 0;
      swift_bridgeObjectRetain();
      uint64_t v100 = OUTLINED_FUNCTION_74();
      OUTLINED_FUNCTION_115(v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_20_0();
      *(_WORD *)(v87 + 32) = 0;
      uint64_t v101 = v160;
      uint64_t v102 = v154;
      outlined init with copy of UUID?(v160, v154);
      OUTLINED_FUNCTION_3_19(v102);
      if (v66)
      {
        outlined destroy of UUID?(v102);
        OUTLINED_FUNCTION_113();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v143 = OUTLINED_FUNCTION_55_0();
        ((void (*)(uint64_t))v95)(v143);
      }
      int v144 = OUTLINED_FUNCTION_95();
      OUTLINED_FUNCTION_53_0(v144);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v101);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v145, v92, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
      unint64_t v141 = v163;
      goto LABEL_46;
    }

    outlined destroy of UUID?(v90);
    swift_bridgeObjectRelease_n();
    uint64_t v121 = OUTLINED_FUNCTION_107();
    v122(v121);
    goto LABEL_37;
  }
  uint64_t v163 = v51;
  unint64_t v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
  int v54 = v35;
  uint64_t v55 = v168;
  if (v53)
  {
    id v56 = v53;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    os_log_type_t v160 = *(void *)(v35 + 16);
    OUTLINED_FUNCTION_16_9();
    v57();
    uint64_t v58 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v56, sel_setCamId_, v58);

    unint64_t v59 = v166;
    uint64_t v60 = (void *)MEMORY[0x1CB78D210](v164, v166);
    objc_msgSend(v56, sel_setResultCandidateId_, v60);

    OUTLINED_FUNCTION_94(v61, sel_setRequestId_);
    if (AFDeviceSupportsSAE())
    {
      OUTLINED_FUNCTION_16_9();
      v62();
      uint64_t v63 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v56, sel_setSubRequestId_, v63);
    }
    if (one-time initialization token for kLoggingFeatureName != -1) {
      swift_once();
    }
    uint64_t v64 = specialized Dictionary.subscript.getter(v158, (uint64_t)kLoggingFeatureName._rawValue);
    uint64_t v65 = v52;
    if ((v64 & 0x100000000) == 0) {
      objc_msgSend(v56, sel_setFeature_, v64);
    }
    outlined init with copy of UUID?((uint64_t)v165, v0);
    OUTLINED_FUNCTION_3_19(v0);
    uint64_t v151 = v54;
    if (v66)
    {
      outlined destroy of UUID?(v0);
      uint64_t v67 = (uint64_t)v156;
      UUID.init(uuidString:)();
      OUTLINED_FUNCTION_3_19(v67);
      if (v66)
      {
        outlined destroy of UUID?(v67);
      }
      else
      {
        OUTLINED_FUNCTION_81();
        uint64_t v165 = v56;
        uint64_t v126 = v152;
        OUTLINED_FUNCTION_46_0();
        v127();
        OUTLINED_FUNCTION_16_9();
        v128();
        uint64_t v129 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v165, sel_setTrpId_, v129);

        id v56 = v165;
        (*(void (**)(char *, uint64_t))(v54 + 8))(v126, v55);
      }
    }
    else
    {
      OUTLINED_FUNCTION_81();
      OUTLINED_FUNCTION_46_0();
      v117();
      OUTLINED_FUNCTION_16_9();
      v118();
      uint64_t v119 = SISchemaUUID.__allocating_init(nsuuid:)();
      OUTLINED_FUNCTION_26_7((uint64_t)v119, sel_setTrpId_);

      OUTLINED_FUNCTION_9_10();
      v120();
    }
    -[NSObject setEventMetadata:](v65, sel_setEventMetadata_, v56, v151);
    objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v65);
    swift_unknownObjectRelease();
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    id v130 = type metadata accessor for Logger();
    OUTLINED_FUNCTION_41_1(v130, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_16_9();
    v131();
    swift_bridgeObjectRetain_n();
    uint64_t v91 = (os_log_t)Logger.logObject.getter();
    uint64_t v132 = static os_log_type_t.debug.getter();
    if (OUTLINED_FUNCTION_67(v132))
    {
      OUTLINED_FUNCTION_7_1();
      uint64_t v167 = v65;
      uint64_t v165 = (id)OUTLINED_FUNCTION_48_1();
      v170[0] = (uint64_t)v165;
      OUTLINED_FUNCTION_12_11(4.8152e-34);
      unint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v133 = OUTLINED_FUNCTION_39_1();
      unint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, v170);
      OUTLINED_FUNCTION_31_4();
      swift_bridgeObjectRelease();
      *(_WORD *)(v59 + 12) = 2080;
      os_log_type_t v135 = UUID.uuidString.getter();
      uint64_t v137 = OUTLINED_FUNCTION_20_9(v135, v136);
      OUTLINED_FUNCTION_77(v137);
      swift_bridgeObjectRelease();
      OUTLINED_FUNCTION_9_10();
      v138();
      *(_WORD *)(v59 + 22) = 2080;
      swift_bridgeObjectRetain();
      unint64_t v169 = OUTLINED_FUNCTION_74();
      OUTLINED_FUNCTION_31_4();
      OUTLINED_FUNCTION_20_0();
      OUTLINED_FUNCTION_47_0(&dword_1C9CFE000, v139, v140, "Successfully emitted log message : %s for camId : %s, rcId: %s");
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      unint64_t v141 = v167;
LABEL_46:

LABEL_48:
      goto LABEL_49;
    }
    swift_bridgeObjectRelease_n();

    OUTLINED_FUNCTION_9_10();
    v142();
  }
  else
  {
    uint64_t v104 = v166;
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v105 = type metadata accessor for Logger();
    __swift_project_value_buffer(v105, (uint64_t)static Logger.common);
    OUTLINED_FUNCTION_110();
    OUTLINED_FUNCTION_13_6();
    v106();
    unint64_t v107 = v159;
    outlined init with copy of UUID?((uint64_t)v165, v159);
    swift_bridgeObjectRetain_n();
    uint64_t v91 = (os_log_t)Logger.logObject.getter();
    uint64_t v108 = static os_log_type_t.error.getter();
    if (OUTLINED_FUNCTION_40_1((os_log_type_t)v108))
    {
      LODWORD(v165) = v108;
      uint64_t v167 = v52;
      OUTLINED_FUNCTION_33_3();
      int v109 = OUTLINED_FUNCTION_11_15();
      OUTLINED_FUNCTION_111(v109);
      OUTLINED_FUNCTION_12_11(4.8153e-34);
      unint64_t v169 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v110 = String.init<A>(describing:)();
      unint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v170);
      OUTLINED_FUNCTION_13_12();
      swift_bridgeObjectRelease();
      unint64_t v112 = OUTLINED_FUNCTION_84();
      uint64_t v114 = OUTLINED_FUNCTION_20_9(v112, v113);
      OUTLINED_FUNCTION_117(v114);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v115 = *(void (**)(void))(v54 + 8);
      OUTLINED_FUNCTION_9_10();
      v115();
      *(_WORD *)(v107 + 22) = v1;
      swift_bridgeObjectRetain();
      unint64_t v169 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v164, v104, v170);
      OUTLINED_FUNCTION_13_12();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v107 + 32) = v1;
      uint64_t v116 = v153;
      outlined init with copy of UUID?(v159, v153);
      OUTLINED_FUNCTION_3_19(v116);
      if (v66)
      {
        outlined destroy of UUID?(v116);
        OUTLINED_FUNCTION_112();
      }
      else
      {
        UUID.uuidString.getter();
        uint64_t v146 = ((uint64_t (*)(uint64_t, uint64_t))v115)(v116, v55);
      }
      uint64_t v148 = v167;
      uint64_t v149 = OUTLINED_FUNCTION_90(v146, v147, v170);
      OUTLINED_FUNCTION_54_0(v149);
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v159);
      OUTLINED_FUNCTION_10_11(&dword_1C9CFE000, v150, (os_log_type_t)v165, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s");
      OUTLINED_FUNCTION_36_2();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();

      goto LABEL_48;
    }

    outlined destroy of UUID?(v107);
    swift_bridgeObjectRelease_n();
    OUTLINED_FUNCTION_9_10();
    v125();
  }
LABEL_49:
  OUTLINED_FUNCTION_17_9();
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(uint64_t a1, NSObject *a2, NSObject *a3, uint64_t a4, unint64_t a5, uint64_t a6, int a7)
{
  int v149 = a7;
  uint64_t v153 = a4;
  uint64_t v154 = a6;
  os_log_t v155 = a3;
  unint64_t v156 = a5;
  uint64_t v152 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v11 = (char *)&v142 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x1F4188790](v9);
  uint64_t v145 = (uint64_t)&v142 - v13;
  uint64_t v14 = MEMORY[0x1F4188790](v12);
  uint64_t v144 = (uint64_t)&v142 - v15;
  uint64_t v16 = MEMORY[0x1F4188790](v14);
  char v147 = (char *)&v142 - v17;
  uint64_t v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v142 - v19;
  uint64_t v21 = MEMORY[0x1F4188790](v18);
  uint64_t v151 = (char *)&v142 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v148 = (uint64_t)&v142 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v142 - v25;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v157 = *(void *)(v27 - 8);
  uint64_t v158 = v27;
  uint64_t v28 = MEMORY[0x1F4188790](v27);
  uint64_t v150 = (char *)&v142 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v143 = (char *)&v142 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v146 = (char *)&v142 - v33;
  uint64_t v34 = MEMORY[0x1F4188790](v32);
  uint64_t v36 = (char *)&v142 - v35;
  uint64_t v37 = MEMORY[0x1F4188790](v34);
  uint64_t v39 = (char *)&v142 - v38;
  uint64_t v40 = MEMORY[0x1F4188790](v37);
  uint64_t v42 = (char *)&v142 - v41;
  uint64_t v43 = MEMORY[0x1F4188790](v40);
  uint64_t v45 = (char *)&v142 - v44;
  MEMORY[0x1F4188790](v43);
  id v47 = (char *)&v142 - v46;
  os_log_type_t v48 = static UncertaintyPromptRequestLogger.map(from:)(a1);
  if (v48)
  {
    uint64_t v49 = v48;
    unint64_t v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
    [v50 setRequestReceived:v49];
    if (v50)
    {
      id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
      uint64_t v52 = v157;
      if (v51)
      {
        unint64_t v53 = v51;
        type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
        int v54 = *(void (**)(char *, os_log_t, uint64_t))(v52 + 16);
        v54(v39, v155, v158);
        id v55 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v53, sel_setCamId_, v55);

        id v56 = (void *)MEMORY[0x1CB78D210](v153, v156);
        objc_msgSend(v53, sel_setResultCandidateId_, v56);

        objc_msgSend(v53, sel_setRequestId_, 0);
        if (AFDeviceSupportsSAE())
        {
          v54(v39, v152, v158);
          id v57 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v53, sel_setSubRequestId_, v57);
        }
        uint64_t v152 = v50;
        uint64_t v142 = v49;
        if (one-time initialization token for kLoggingFeatureName != -1) {
          swift_once();
        }
        unint64_t v58 = v156;
        unint64_t v59 = specialized Dictionary.subscript.getter(v149, (uint64_t)kLoggingFeatureName._rawValue);
        if ((v59 & 0x100000000) == 0) {
          objc_msgSend(v53, sel_setFeature_, v59, v142);
        }
        outlined init with copy of UUID?(v154, (uint64_t)v20);
        uint64_t v60 = v158;
        if (__swift_getEnumTagSinglePayload((uint64_t)v20, 1, v158) == 1)
        {
          outlined destroy of UUID?((uint64_t)v20);
          uint64_t v61 = (uint64_t)v147;
          UUID.init(uuidString:)();
          if (__swift_getEnumTagSinglePayload(v61, 1, v60) == 1)
          {
            outlined destroy of UUID?(v61);
          }
          else
          {
            uint64_t v121 = v157;
            uint64_t v122 = v143;
            (*(void (**)(char *, uint64_t, uint64_t))(v157 + 32))(v143, v61, v60);
            v54(v39, (os_log_t)v122, v60);
            id v123 = SISchemaUUID.__allocating_init(nsuuid:)();
            objc_msgSend(v53, sel_setTrpId_, v123);

            (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v60);
          }
        }
        else
        {
          uint64_t v116 = v157;
          BOOL v117 = v146;
          (*(void (**)(char *, char *, uint64_t))(v157 + 32))(v146, v20, v60);
          v54(v39, (os_log_t)v117, v60);
          id v118 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v53, sel_setTrpId_, v118);

          (*(void (**)(char *, uint64_t))(v116 + 8))(v117, v60);
        }
        uint64_t v124 = v150;
        unint64_t v125 = v152;
        -[NSObject setEventMetadata:](v152, sel_setEventMetadata_, v53, v142);
        objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v125);
        swift_unknownObjectRelease();
        if (one-time initialization token for common != -1) {
          swift_once();
        }
        uint64_t v126 = type metadata accessor for Logger();
        __swift_project_value_buffer(v126, (uint64_t)static Logger.common);
        v54(v124, v155, v60);
        swift_bridgeObjectRetain_n();
        unint64_t v88 = Logger.logObject.getter();
        os_log_type_t v127 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v88, v127))
        {
          swift_bridgeObjectRelease_n();

          (*(void (**)(char *, uint64_t))(v157 + 8))(v124, v60);
          return;
        }
        uint64_t v128 = v124;
        uint64_t v129 = swift_slowAlloc();
        uint64_t v158 = swift_slowAlloc();
        v160[0] = v158;
        *(_DWORD *)uint64_t v129 = 136315650;
        uint64_t v159 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        uint64_t v130 = String.init<A>(describing:)();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v131, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v129 + 12) = 2080;
        uint64_t v132 = UUID.uuidString.getter();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v157 + 8))(v128, v60);
        *(_WORD *)(v129 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v58, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C9CFE000, v88, v127, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v129, 0x20u);
        uint64_t v134 = v158;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v134, -1, -1);
        MEMORY[0x1CB78E290](v129, -1, -1);

        os_log_type_t v135 = v152;
        goto LABEL_44;
      }
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v101 = type metadata accessor for Logger();
      __swift_project_value_buffer(v101, (uint64_t)static Logger.common);
      uint64_t v102 = v158;
      (*(void (**)(char *, os_log_t, uint64_t))(v52 + 16))(v36, v155, v158);
      uint64_t v103 = (uint64_t)v151;
      outlined init with copy of UUID?(v154, (uint64_t)v151);
      unint64_t v104 = v156;
      swift_bridgeObjectRetain_n();
      unint64_t v88 = Logger.logObject.getter();
      os_log_type_t v105 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v105))
      {
        uint64_t v152 = v50;
        uint64_t v142 = v49;
        uint64_t v106 = swift_slowAlloc();
        os_log_t v155 = (os_log_t)swift_slowAlloc();
        v160[0] = (uint64_t)v155;
        *(_DWORD *)uint64_t v106 = 136315906;
        uint64_t v159 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        uint64_t v107 = String.init<A>(describing:)();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v106 + 12) = 2080;
        uint64_t v109 = UUID.uuidString.getter();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v111 = *(void (**)(char *, uint64_t))(v52 + 8);
        v111(v36, v158);
        *(_WORD *)(v106 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v104, v160);
        uint64_t v112 = v158;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v106 + 32) = 2080;
        uint64_t v113 = v144;
        outlined init with copy of UUID?((uint64_t)v151, v144);
        if (__swift_getEnumTagSinglePayload(v113, 1, v112) == 1)
        {
          outlined destroy of UUID?(v113);
          uint64_t v114 = 0;
          unint64_t v115 = 0xE000000000000000;
        }
        else
        {
          uint64_t v114 = UUID.uuidString.getter();
          unint64_t v115 = v138;
          v111((char *)v113, v112);
        }
        uint64_t v139 = v142;
        uint64_t v140 = v152;
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of UUID?((uint64_t)v151);
        _os_log_impl(&dword_1C9CFE000, v88, v105, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v106, 0x2Au);
        os_log_t v141 = v155;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v141, -1, -1);
        MEMORY[0x1CB78E290](v106, -1, -1);

        goto LABEL_47;
      }

      outlined destroy of UUID?(v103);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v52 + 8))(v36, v102);
    }
    else
    {
      uint64_t v83 = v157;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v84 = type metadata accessor for Logger();
      __swift_project_value_buffer(v84, (uint64_t)static Logger.common);
      uint64_t v85 = v158;
      (*(void (**)(char *, os_log_t, uint64_t))(v83 + 16))(v42, v155, v158);
      uint64_t v86 = v148;
      outlined init with copy of UUID?(v154, v148);
      unint64_t v87 = v156;
      swift_bridgeObjectRetain_n();
      unint64_t v88 = Logger.logObject.getter();
      int v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, (os_log_type_t)v89))
      {
        LODWORD(v155) = v89;
        uint64_t v142 = v49;
        uint64_t v90 = swift_slowAlloc();
        uint64_t v154 = swift_slowAlloc();
        v160[0] = v154;
        *(_DWORD *)uint64_t v90 = 136315906;
        uint64_t v159 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
        uint64_t v91 = String.init<A>(describing:)();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v90 + 12) = 2080;
        uint64_t v93 = UUID.uuidString.getter();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        unint64_t v95 = *(void (**)(char *, uint64_t))(v83 + 8);
        v95(v42, v158);
        *(_WORD *)(v90 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v87, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v90 + 32) = 2080;
        uint64_t v96 = v158;
        uint64_t v97 = v145;
        outlined init with copy of UUID?(v86, v145);
        if (__swift_getEnumTagSinglePayload(v97, 1, v96) == 1)
        {
          outlined destroy of UUID?(v97);
          uint64_t v98 = 0;
          unint64_t v99 = 0xE000000000000000;
        }
        else
        {
          uint64_t v98 = UUID.uuidString.getter();
          unint64_t v99 = v136;
          v95((char *)v97, v96);
        }
        uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v99, v160);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of UUID?(v86);
        _os_log_impl(&dword_1C9CFE000, v88, (os_log_type_t)v155, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v90, 0x2Au);
        uint64_t v137 = v154;
        swift_arrayDestroy();
        MEMORY[0x1CB78E290](v137, -1, -1);
        MEMORY[0x1CB78E290](v90, -1, -1);
        os_log_type_t v135 = v142;
LABEL_44:

LABEL_47:
        return;
      }

      outlined destroy of UUID?(v86);
      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v83 + 8))(v42, v85);
    }

    return;
  }
  uint64_t v62 = (uint64_t)v26;
  uint64_t v151 = v11;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v63 = type metadata accessor for Logger();
  __swift_project_value_buffer(v63, (uint64_t)static Logger.common);
  uint64_t v64 = v157;
  uint64_t v65 = v158;
  unint64_t v66 = *(void (**)(char *, os_log_t, uint64_t))(v157 + 16);
  v66(v47, v155, v158);
  v66(v45, v152, v65);
  uint64_t v67 = v62;
  outlined init with copy of UUID?(v154, v62);
  unint64_t v68 = v156;
  swift_bridgeObjectRetain_n();
  uint64_t v69 = Logger.logObject.getter();
  int v70 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v69, (os_log_type_t)v70))
  {
    LODWORD(v154) = v70;
    os_log_t v155 = v69;
    uint64_t v71 = swift_slowAlloc();
    uint64_t v152 = swift_slowAlloc();
    v160[0] = (uint64_t)v152;
    *(_DWORD *)uint64_t v71 = 136316162;
    uint64_t v159 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMRequestReceived);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMRequestReceived.Type);
    uint64_t v72 = String.init<A>(describing:)();
    uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v71 + 12) = 2080;
    uint64_t v74 = UUID.uuidString.getter();
    uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    id v76 = *(void (**)(char *, uint64_t))(v64 + 8);
    v76(v47, v158);
    *(_WORD *)(v71 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v68, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v71 + 32) = 2080;
    uint64_t v77 = UUID.uuidString.getter();
    uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v160);
    uint64_t v79 = v158;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v76(v45, v79);
    *(_WORD *)(v71 + 42) = 2080;
    uint64_t v80 = (uint64_t)v151;
    outlined init with copy of UUID?(v67, (uint64_t)v151);
    if (__swift_getEnumTagSinglePayload(v80, 1, v79) == 1)
    {
      outlined destroy of UUID?(v80);
      uint64_t v81 = 0;
      unint64_t v82 = 0xE000000000000000;
    }
    else
    {
      uint64_t v81 = UUID.uuidString.getter();
      unint64_t v82 = v119;
      v76((char *)v80, v79);
    }
    uint64_t v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v160);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UUID?(v67);
    uint64_t v69 = v155;
    _os_log_impl(&dword_1C9CFE000, v155, (os_log_type_t)v154, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v71, 0x34u);
    uint64_t v120 = v152;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v120, -1, -1);
    MEMORY[0x1CB78E290](v71, -1, -1);
  }
  else
  {
    uint64_t v100 = *(void (**)(char *, uint64_t))(v64 + 8);
    v100(v47, v65);
    swift_bridgeObjectRelease_n();
    v100(v45, v65);
    outlined destroy of UUID?(v62);
  }
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(uint64_t a1, char a2, uint64_t a3, NSObject *a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8)
{
  int v159 = a8;
  uint64_t v165 = a5;
  uint64_t v166 = a7;
  unint64_t v169 = a6;
  os_log_t v167 = a4;
  uint64_t v163 = a3;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v11 = MEMORY[0x1F4188790](v10 - 8);
  uint64_t v156 = (uint64_t)&v150 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v153 = (uint64_t)&v150 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v152 = (uint64_t)&v150 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  os_log_type_t v160 = (char *)&v150 - v18;
  uint64_t v19 = MEMORY[0x1F4188790](v17);
  uint64_t v158 = (uint64_t)&v150 - v20;
  uint64_t v21 = MEMORY[0x1F4188790](v19);
  uint64_t v157 = (uint64_t)&v150 - v22;
  uint64_t v23 = MEMORY[0x1F4188790](v21);
  uint64_t v162 = (uint64_t)&v150 - v24;
  MEMORY[0x1F4188790](v23);
  uint64_t v164 = ((char *)&v150 - v25);
  uint64_t v168 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v168 - 8);
  uint64_t v27 = MEMORY[0x1F4188790](v168);
  int v161 = (char *)&v150 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x1F4188790](v27);
  uint64_t v151 = (char *)&v150 - v30;
  uint64_t v31 = MEMORY[0x1F4188790](v29);
  uint64_t v154 = (char *)&v150 - v32;
  uint64_t v33 = MEMORY[0x1F4188790](v31);
  os_log_t v155 = (char *)&v150 - v34;
  uint64_t v35 = MEMORY[0x1F4188790](v33);
  uint64_t v37 = (char *)&v150 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v150 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v150 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v150 - v44;
  uint64_t v46 = one-time initialization token for kCamActionMap;
  swift_retain();
  if (v46 != -1) {
    swift_once();
  }
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v170) = *(unsigned char *)(a1 + 56);
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  AnyHashable.init<A>(_:)();
  unint64_t v48 = specialized Dictionary.subscript.getter((uint64_t)v171, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v171);
  uint64_t v49 = *(void *)(a1 + 40);
  uint64_t v50 = *(void *)(a1 + 48);
  swift_bridgeObjectRetain();
  id v51 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v48 | ((HIDWORD(v48) & 1) << 32), a2, v49, v50);
  swift_bridgeObjectRelease();
  swift_release();
  if (!v51)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.common);
    uint64_t v69 = *(void (**)(char *, os_log_t, uint64_t))(v26 + 16);
    uint64_t v70 = v168;
    v69(v45, v167, v168);
    v69(v43, (os_log_t)v163, v70);
    uint64_t v71 = (uint64_t)v164;
    outlined init with copy of UUID?((uint64_t)v166, (uint64_t)v164);
    unint64_t v72 = v169;
    swift_bridgeObjectRetain_n();
    id v51 = Logger.logObject.getter();
    int v73 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, (os_log_type_t)v73))
    {
      LODWORD(v166) = v73;
      os_log_t v167 = v51;
      uint64_t v74 = swift_slowAlloc();
      uint64_t v163 = swift_slowAlloc();
      v171[0] = v163;
      *(_DWORD *)uint64_t v74 = 136316162;
      uint64_t v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v75 = String.init<A>(describing:)();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v74 + 12) = 2080;
      uint64_t v77 = UUID.uuidString.getter();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v79 = *(void (**)(char *, uint64_t))(v26 + 8);
      v79(v45, v168);
      *(_WORD *)(v74 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v72, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v74 + 32) = 2080;
      uint64_t v80 = UUID.uuidString.getter();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v81, v171);
      uint64_t v82 = v168;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v79(v43, v82);
      *(_WORD *)(v74 + 42) = 2080;
      uint64_t v83 = (uint64_t)v164;
      uint64_t v84 = v156;
      outlined init with copy of UUID?((uint64_t)v164, v156);
      if (__swift_getEnumTagSinglePayload(v84, 1, v82) == 1)
      {
        outlined destroy of UUID?(v84);
        uint64_t v85 = 0;
        unint64_t v86 = 0xE000000000000000;
      }
      else
      {
        uint64_t v85 = UUID.uuidString.getter();
        unint64_t v86 = v124;
        v79((char *)v84, v82);
      }
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v83);
      os_log_t v91 = v167;
      _os_log_impl(&dword_1C9CFE000, v167, (os_log_type_t)v166, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v74, 0x34u);
      uint64_t v125 = v163;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v125, -1, -1);
      MEMORY[0x1CB78E290](v74, -1, -1);
      goto LABEL_49;
    }
    unint64_t v104 = *(void (**)(char *, uint64_t))(v26 + 8);
    v104(v45, v70);
    swift_bridgeObjectRelease_n();
    v104(v43, v70);
    outlined destroy of UUID?(v71);
LABEL_33:

    return;
  }
  uint64_t v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  [v52 setResponseGenerated:v51];
  if (v52)
  {
    uint64_t v164 = v51;
    id v53 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
    uint64_t v54 = v168;
    if (v53)
    {
      id v55 = v53;
      uint64_t v56 = type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
      id v57 = *(void (**)(char *, os_log_t, uint64_t))(v26 + 16);
      v57(v37, v167, v54);
      id v58 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v55, sel_setCamId_, v58);

      unint64_t v59 = (void *)MEMORY[0x1CB78D210](v165, v169);
      objc_msgSend(v55, sel_setResultCandidateId_, v59);

      objc_msgSend(v55, sel_setRequestId_, 0);
      if (AFDeviceSupportsSAE())
      {
        v57(v37, (os_log_t)v163, v54);
        id v60 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v55, sel_setSubRequestId_, v60);
      }
      uint64_t v162 = v56;
      uint64_t v163 = v26;
      if (one-time initialization token for kLoggingFeatureName != -1) {
        swift_once();
      }
      uint64_t v61 = v57;
      unint64_t v62 = specialized Dictionary.subscript.getter(v159, (uint64_t)kLoggingFeatureName._rawValue);
      uint64_t v63 = v52;
      if ((v62 & 0x100000000) == 0) {
        objc_msgSend(v55, sel_setFeature_, v62);
      }
      uint64_t v64 = v158;
      outlined init with copy of UUID?((uint64_t)v166, v158);
      int EnumTagSinglePayload = __swift_getEnumTagSinglePayload(v64, 1, v54);
      uint64_t v66 = (uint64_t)v160;
      if (EnumTagSinglePayload == 1)
      {
        outlined destroy of UUID?(v64);
        UUID.init(uuidString:)();
        if (__swift_getEnumTagSinglePayload(v66, 1, v54) == 1)
        {
          outlined destroy of UUID?(v66);
          uint64_t v67 = v61;
        }
        else
        {
          uint64_t v126 = v163;
          os_log_type_t v127 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 32);
          uint64_t v166 = v52;
          uint64_t v128 = v151;
          v127(v151, v66, v54);
          uint64_t v67 = v61;
          v61(v37, (os_log_t)v128, v54);
          id v129 = SISchemaUUID.__allocating_init(nsuuid:)();
          objc_msgSend(v55, sel_setTrpId_, v129);

          uint64_t v63 = v166;
          (*(void (**)(char *, uint64_t))(v126 + 8))(v128, v54);
        }
      }
      else
      {
        uint64_t v121 = v163;
        uint64_t v122 = v154;
        (*(void (**)(char *, uint64_t, uint64_t))(v163 + 32))(v154, v64, v54);
        uint64_t v67 = v61;
        v61(v37, (os_log_t)v122, v54);
        id v123 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v55, sel_setTrpId_, v123);

        (*(void (**)(char *, uint64_t))(v121 + 8))(v122, v54);
      }
      [v63 setEventMetadata:v55];
      objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v63);
      swift_unknownObjectRelease();
      uint64_t v130 = v161;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v131 = type metadata accessor for Logger();
      __swift_project_value_buffer(v131, (uint64_t)static Logger.common);
      v67(v130, v167, v54);
      swift_bridgeObjectRetain_n();
      os_log_t v91 = (os_log_t)Logger.logObject.getter();
      os_log_type_t v132 = static os_log_type_t.debug.getter();
      int v133 = v132;
      if (!os_log_type_enabled(v91, v132))
      {
        swift_bridgeObjectRelease_n();

        (*(void (**)(char *, uint64_t))(v163 + 8))(v130, v54);
        return;
      }
      uint64_t v134 = swift_slowAlloc();
      uint64_t v166 = v63;
      uint64_t v135 = v134;
      os_log_t v167 = (os_log_t)swift_slowAlloc();
      v171[0] = (uint64_t)v167;
      *(_DWORD *)uint64_t v135 = 136315650;
      LODWORD(v162) = v133;
      uint64_t v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v136 = String.init<A>(describing:)();
      unint64_t v137 = v169;
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v136, v138, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v139 = v163;
      *(_WORD *)(v135 + 12) = 2080;
      uint64_t v140 = UUID.uuidString.getter();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v139 + 8))(v130, v54);
      *(_WORD *)(v135 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v137, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C9CFE000, v91, (os_log_type_t)v162, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v135, 0x20u);
      os_log_t v142 = v167;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v142, -1, -1);
      MEMORY[0x1CB78E290](v135, -1, -1);
    }
    else
    {
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v105 = type metadata accessor for Logger();
      __swift_project_value_buffer(v105, (uint64_t)static Logger.common);
      uint64_t v106 = v155;
      (*(void (**)(char *, os_log_t, uint64_t))(v26 + 16))(v155, v167, v54);
      uint64_t v107 = v157;
      outlined init with copy of UUID?((uint64_t)v166, v157);
      swift_bridgeObjectRetain_n();
      os_log_t v91 = (os_log_t)Logger.logObject.getter();
      int v108 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v91, (os_log_type_t)v108))
      {

        outlined destroy of UUID?(v107);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v26 + 8))(v106, v54);

        return;
      }
      LODWORD(v167) = v108;
      uint64_t v166 = v52;
      uint64_t v109 = swift_slowAlloc();
      uint64_t v163 = swift_slowAlloc();
      v171[0] = v163;
      *(_DWORD *)uint64_t v109 = 136315906;
      uint64_t v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      unint64_t v110 = v169;
      uint64_t v111 = String.init<A>(describing:)();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v109 + 12) = 2080;
      uint64_t v113 = UUID.uuidString.getter();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v114, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v115 = v106;
      uint64_t v116 = *(void (**)(char *, uint64_t))(v26 + 8);
      v116(v115, v54);
      *(_WORD *)(v109 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v110, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v117 = v157;
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v109 + 32) = 2080;
      uint64_t v118 = v152;
      outlined init with copy of UUID?(v117, v152);
      if (__swift_getEnumTagSinglePayload(v118, 1, v54) == 1)
      {
        outlined destroy of UUID?(v118);
        uint64_t v119 = 0;
        unint64_t v120 = 0xE000000000000000;
      }
      else
      {
        uint64_t v119 = UUID.uuidString.getter();
        unint64_t v120 = v148;
        v116((char *)v118, v54);
      }
      uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v117);
      _os_log_impl(&dword_1C9CFE000, v91, (os_log_type_t)v167, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v109, 0x2Au);
      uint64_t v149 = v163;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v149, -1, -1);
      MEMORY[0x1CB78E290](v109, -1, -1);
    }
    char v147 = v166;
    goto LABEL_48;
  }
  uint64_t v87 = v168;
  unint64_t v88 = v169;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v89 = type metadata accessor for Logger();
  __swift_project_value_buffer(v89, (uint64_t)static Logger.common);
  (*(void (**)(char *, os_log_t, uint64_t))(v26 + 16))(v40, v167, v87);
  uint64_t v90 = v162;
  outlined init with copy of UUID?((uint64_t)v166, v162);
  swift_bridgeObjectRetain_n();
  os_log_t v91 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v92 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v91, v92))
  {

    outlined destroy of UUID?(v90);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v40, v87);
    goto LABEL_33;
  }
  uint64_t v164 = v51;
  uint64_t v93 = swift_slowAlloc();
  os_log_t v167 = (os_log_t)swift_slowAlloc();
  v171[0] = (uint64_t)v167;
  *(_DWORD *)uint64_t v93 = 136315906;
  uint64_t v170 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
  uint64_t v94 = String.init<A>(describing:)();
  uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v93 + 12) = 2080;
  uint64_t v96 = UUID.uuidString.getter();
  uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v98 = *(void (**)(char *, uint64_t))(v26 + 8);
  v98(v40, v168);
  *(_WORD *)(v93 + 22) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v165, v88, v171);
  uint64_t v99 = v168;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v93 + 32) = 2080;
  uint64_t v100 = v162;
  uint64_t v101 = v153;
  outlined init with copy of UUID?(v162, v153);
  if (__swift_getEnumTagSinglePayload(v101, 1, v99) == 1)
  {
    outlined destroy of UUID?(v101);
    uint64_t v102 = 0;
    unint64_t v103 = 0xE000000000000000;
  }
  else
  {
    uint64_t v143 = UUID.uuidString.getter();
    uint64_t v144 = v99;
    uint64_t v102 = v143;
    unint64_t v103 = v145;
    v98((char *)v101, v144);
  }
  uint64_t v170 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v102, v103, v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?(v100);
  _os_log_impl(&dword_1C9CFE000, v91, v92, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v93, 0x2Au);
  os_log_t v146 = v167;
  swift_arrayDestroy();
  MEMORY[0x1CB78E290](v146, -1, -1);
  MEMORY[0x1CB78E290](v93, -1, -1);
  char v147 = v164;
LABEL_48:

LABEL_49:
}

void specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(__int16 a1, uint64_t a2, NSObject *a3, uint64_t a4, unint64_t a5, void *a6, int a7)
{
  int v153 = a7;
  id v160 = a6;
  unint64_t v161 = a5;
  uint64_t v159 = a4;
  os_log_t v162 = a3;
  uint64_t v157 = a2;
  uint64_t v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  uint64_t v9 = MEMORY[0x1F4188790](v8 - 8);
  uint64_t v152 = (uint64_t)&v146 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v149 = (uint64_t)&v146 - v12;
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v148 = (uint64_t)&v146 - v14;
  uint64_t v15 = MEMORY[0x1F4188790](v13);
  uint64_t v151 = (char *)&v146 - v16;
  uint64_t v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v146 - v18;
  uint64_t v20 = MEMORY[0x1F4188790](v17);
  uint64_t v154 = (uint64_t)&v146 - v21;
  uint64_t v22 = MEMORY[0x1F4188790](v20);
  os_log_t v155 = (void (*)(char *, os_log_t, uint64_t))((char *)&v146 - v23);
  MEMORY[0x1F4188790](v22);
  uint64_t v158 = ((char *)&v146 - v24);
  uint64_t v163 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v163 - 8);
  uint64_t v26 = MEMORY[0x1F4188790](v163);
  uint64_t v156 = (char *)&v146 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = MEMORY[0x1F4188790](v26);
  char v147 = ((char *)&v146 - v29);
  uint64_t v30 = MEMORY[0x1F4188790](v28);
  uint64_t v150 = (char *)&v146 - v31;
  uint64_t v32 = MEMORY[0x1F4188790](v30);
  uint64_t v34 = (char *)&v146 - v33;
  uint64_t v35 = MEMORY[0x1F4188790](v32);
  uint64_t v37 = (char *)&v146 - v36;
  uint64_t v38 = MEMORY[0x1F4188790](v35);
  uint64_t v40 = (char *)&v146 - v39;
  uint64_t v41 = MEMORY[0x1F4188790](v38);
  uint64_t v43 = (char *)&v146 - v42;
  MEMORY[0x1F4188790](v41);
  uint64_t v45 = (char *)&v146 - v44;
  if (one-time initialization token for kCamActionMap != -1) {
    swift_once();
  }
  char v46 = HIBYTE(a1);
  rawValue = kCamActionMap._rawValue;
  LOBYTE(v164) = a1;
  lazy protocol witness table accessor for type CamAction and conformance CamAction();
  AnyHashable.init<A>(_:)();
  unint64_t v48 = specialized Dictionary.subscript.getter((uint64_t)v165, (uint64_t)rawValue);
  outlined destroy of AnyHashable((uint64_t)v165);
  uint64_t v49 = specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(v48 | ((HIDWORD(v48) & 1) << 32), v46, 0, 0);
  if (!v49)
  {
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v64 = type metadata accessor for Logger();
    __swift_project_value_buffer(v64, (uint64_t)static Logger.common);
    uint64_t v65 = v25;
    uint64_t v66 = *(void (**)(char *, os_log_t, uint64_t))(v25 + 16);
    uint64_t v67 = v163;
    v66(v45, v162, v163);
    v66(v43, (os_log_t)v157, v67);
    uint64_t v68 = (uint64_t)v158;
    outlined init with copy of UUID?((uint64_t)v160, (uint64_t)v158);
    unint64_t v69 = v161;
    swift_bridgeObjectRetain_n();
    uint64_t v50 = Logger.logObject.getter();
    int v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, (os_log_type_t)v70))
    {
      LODWORD(v160) = v70;
      os_log_t v162 = v50;
      uint64_t v71 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      v165[0] = v157;
      *(_DWORD *)uint64_t v71 = 136316162;
      uint64_t v164 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v72 = String.init<A>(describing:)();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v73, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v71 + 12) = 2080;
      uint64_t v74 = UUID.uuidString.getter();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v76 = *(void (**)(char *, uint64_t))(v65 + 8);
      v76(v45, v163);
      *(_WORD *)(v71 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v69, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v71 + 32) = 2080;
      uint64_t v77 = UUID.uuidString.getter();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v165);
      uint64_t v79 = v163;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v76(v43, v79);
      *(_WORD *)(v71 + 42) = 2080;
      uint64_t v80 = (uint64_t)v158;
      uint64_t v81 = v152;
      outlined init with copy of UUID?((uint64_t)v158, v152);
      if (__swift_getEnumTagSinglePayload(v81, 1, v79) == 1)
      {
        outlined destroy of UUID?(v81);
        uint64_t v82 = 0;
        unint64_t v83 = 0xE000000000000000;
      }
      else
      {
        uint64_t v82 = UUID.uuidString.getter();
        unint64_t v83 = v119;
        v76((char *)v81, v79);
      }
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v82, v83, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v80);
      os_log_t v89 = v162;
      _os_log_impl(&dword_1C9CFE000, v162, (os_log_type_t)v160, "Mapping function to create:  %s  failed for camId : %s, rcId: %s, requestId: %s, trpId: %s", (uint8_t *)v71, 0x34u);
      uint64_t v120 = v157;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v120, -1, -1);
      MEMORY[0x1CB78E290](v71, -1, -1);
      goto LABEL_48;
    }
    uint64_t v102 = *(void (**)(char *, uint64_t))(v65 + 8);
    v102(v45, v67);
    swift_bridgeObjectRelease_n();
    v102(v43, v67);
    outlined destroy of UUID?(v68);
LABEL_33:

    return;
  }
  uint64_t v50 = v49;
  id v51 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E0]), sel_init);
  [v51 setResponseGenerated:v50];
  if (v51)
  {
    uint64_t v158 = v50;
    id v52 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01E8]), sel_init);
    uint64_t v53 = v25;
    uint64_t v54 = v163;
    if (!v52)
    {
      unint64_t v103 = v161;
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v104 = type metadata accessor for Logger();
      __swift_project_value_buffer(v104, (uint64_t)static Logger.common);
      (*(void (**)(char *, os_log_t, uint64_t))(v25 + 16))(v34, v162, v54);
      uint64_t v105 = v154;
      outlined init with copy of UUID?((uint64_t)v160, v154);
      swift_bridgeObjectRetain_n();
      os_log_t v89 = (os_log_t)Logger.logObject.getter();
      int v106 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v89, (os_log_type_t)v106))
      {

        outlined destroy of UUID?(v105);
        swift_bridgeObjectRelease_n();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v34, v54);

        return;
      }
      LODWORD(v160) = v106;
      os_log_t v162 = v51;
      uint64_t v107 = swift_slowAlloc();
      uint64_t v157 = swift_slowAlloc();
      v165[0] = v157;
      *(_DWORD *)uint64_t v107 = 136315906;
      uint64_t v164 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
      uint64_t v108 = String.init<A>(describing:)();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v107 + 12) = 2080;
      uint64_t v110 = UUID.uuidString.getter();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v110, v111, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v112 = *(void (**)(char *, uint64_t))(v53 + 8);
      v112(v34, v54);
      *(_WORD *)(v107 + 22) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v103, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v107 + 32) = 2080;
      uint64_t v113 = v148;
      outlined init with copy of UUID?(v154, v148);
      if (__swift_getEnumTagSinglePayload(v113, 1, v54) == 1)
      {
        outlined destroy of UUID?(v113);
        uint64_t v114 = 0;
        unint64_t v115 = 0xE000000000000000;
      }
      else
      {
        uint64_t v114 = UUID.uuidString.getter();
        unint64_t v115 = v143;
        v112((char *)v113, v54);
      }
      os_log_t v144 = v162;
      uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v114, v115, v165);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of UUID?(v154);
      _os_log_impl(&dword_1C9CFE000, v89, (os_log_type_t)v160, "Failed to create metadata for log event : %s, camId : %s, rcId: %s, trpId: %s", (uint8_t *)v107, 0x2Au);
      uint64_t v145 = v157;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v145, -1, -1);
      MEMORY[0x1CB78E290](v107, -1, -1);

      goto LABEL_48;
    }
    id v55 = v52;
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    os_log_t v155 = *(void (**)(char *, os_log_t, uint64_t))(v25 + 16);
    v155(v37, v162, v54);
    id v56 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v55, sel_setCamId_, v56);

    id v57 = (void *)MEMORY[0x1CB78D210](v159, v161);
    objc_msgSend(v55, sel_setResultCandidateId_, v57);

    objc_msgSend(v55, sel_setRequestId_, 0);
    if (AFDeviceSupportsSAE())
    {
      v155(v37, (os_log_t)v157, v54);
      id v58 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v55, sel_setSubRequestId_, v58);
    }
    if (one-time initialization token for kLoggingFeatureName != -1) {
      swift_once();
    }
    unint64_t v59 = specialized Dictionary.subscript.getter(v153, (uint64_t)kLoggingFeatureName._rawValue);
    id v60 = v51;
    if ((v59 & 0x100000000) == 0) {
      objc_msgSend(v55, sel_setFeature_, v59);
    }
    outlined init with copy of UUID?((uint64_t)v160, (uint64_t)v19);
    int EnumTagSinglePayload = __swift_getEnumTagSinglePayload((uint64_t)v19, 1, v54);
    unint64_t v62 = v156;
    uint64_t v146 = v25;
    if (EnumTagSinglePayload == 1)
    {
      outlined destroy of UUID?((uint64_t)v19);
      uint64_t v63 = (uint64_t)v151;
      UUID.init(uuidString:)();
      if (__swift_getEnumTagSinglePayload(v63, 1, v54) == 1)
      {
        outlined destroy of UUID?(v63);
      }
      else
      {
        uint64_t v121 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 32);
        id v160 = v55;
        uint64_t v122 = v62;
        id v123 = v147;
        v121((char *)v147, v63, v54);
        v155(v37, v123, v54);
        id v124 = SISchemaUUID.__allocating_init(nsuuid:)();
        objc_msgSend(v160, sel_setTrpId_, v124);

        id v55 = v160;
        uint64_t v125 = (char *)v123;
        unint64_t v62 = v122;
        (*(void (**)(char *, uint64_t))(v25 + 8))(v125, v54);
      }
    }
    else
    {
      uint64_t v116 = v150;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v150, v19, v54);
      v155(v37, (os_log_t)v116, v54);
      id v117 = SISchemaUUID.__allocating_init(nsuuid:)();
      objc_msgSend(v55, sel_setTrpId_, v117);

      uint64_t v118 = v116;
      unint64_t v62 = v156;
      (*(void (**)(char *, uint64_t))(v25 + 8))(v118, v54);
    }
    -[NSObject setEventMetadata:](v60, sel_setEventMetadata_, v55, v146);
    objc_msgSend(objc_msgSend(self, sel_sharedStream), sel_emitMessage_, v60);
    swift_unknownObjectRelease();
    if (one-time initialization token for common != -1) {
      swift_once();
    }
    uint64_t v126 = type metadata accessor for Logger();
    __swift_project_value_buffer(v126, (uint64_t)static Logger.common);
    v155(v62, v162, v54);
    swift_bridgeObjectRetain_n();
    os_log_t v89 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.debug.getter();
    BOOL v128 = os_log_type_enabled(v89, v127);
    uint64_t v129 = v146;
    if (!v128)
    {
      swift_bridgeObjectRelease_n();

      (*(void (**)(char *, uint64_t))(v129 + 8))(v62, v54);
      return;
    }
    uint64_t v130 = swift_slowAlloc();
    os_log_t v162 = v60;
    uint64_t v131 = v130;
    id v160 = (id)swift_slowAlloc();
    v165[0] = (uint64_t)v160;
    *(_DWORD *)uint64_t v131 = 136315650;
    uint64_t v164 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
    uint64_t v132 = String.init<A>(describing:)();
    uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v132, v133, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v131 + 12) = 2080;
    uint64_t v134 = UUID.uuidString.getter();
    uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v134, v135, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v62, v54);
    *(_WORD *)(v131 + 22) = 2080;
    unint64_t v136 = v161;
    swift_bridgeObjectRetain();
    uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v136, v165);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C9CFE000, v89, v127, "Successfully emitted log message : %s for camId : %s, rcId: %s", (uint8_t *)v131, 0x20u);
    id v137 = v160;
    swift_arrayDestroy();
    MEMORY[0x1CB78E290](v137, -1, -1);
    MEMORY[0x1CB78E290](v131, -1, -1);

    os_log_t v138 = v162;
    goto LABEL_45;
  }
  uint64_t v84 = v25;
  uint64_t v85 = v163;
  if (one-time initialization token for common != -1) {
    swift_once();
  }
  uint64_t v86 = type metadata accessor for Logger();
  __swift_project_value_buffer(v86, (uint64_t)static Logger.common);
  (*(void (**)(char *, os_log_t, uint64_t))(v84 + 16))(v40, v162, v85);
  uint64_t v87 = v155;
  outlined init with copy of UUID?((uint64_t)v160, (uint64_t)v155);
  unint64_t v88 = v161;
  swift_bridgeObjectRetain_n();
  os_log_t v89 = (os_log_t)Logger.logObject.getter();
  os_log_type_t v90 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v89, v90))
  {

    outlined destroy of UUID?((uint64_t)v87);
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v84 + 8))(v40, v85);
    goto LABEL_33;
  }
  uint64_t v158 = v50;
  uint64_t v91 = swift_slowAlloc();
  os_log_t v162 = (os_log_t)swift_slowAlloc();
  v165[0] = (uint64_t)v162;
  *(_DWORD *)uint64_t v91 = 136315906;
  uint64_t v164 = type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAMSchemaCAMResponseGenerated);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CAMSchemaCAMResponseGenerated.Type);
  uint64_t v92 = String.init<A>(describing:)();
  uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v93, v165);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v91 + 12) = 2080;
  uint64_t v94 = UUID.uuidString.getter();
  uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v94, v95, v165);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  uint64_t v96 = *(void (**)(char *, uint64_t))(v84 + 8);
  v96(v40, v163);
  *(_WORD *)(v91 + 22) = 2080;
  swift_bridgeObjectRetain();
  uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v88, v165);
  uint64_t v97 = v163;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  *(_WORD *)(v91 + 32) = 2080;
  uint64_t v98 = v155;
  uint64_t v99 = v149;
  outlined init with copy of UUID?((uint64_t)v155, v149);
  if (__swift_getEnumTagSinglePayload(v99, 1, v97) == 1)
  {
    outlined destroy of UUID?(v99);
    uint64_t v100 = 0;
    unint64_t v101 = 0xE000000000000000;
  }
  else
  {
    uint64_t v139 = UUID.uuidString.getter();
    uint64_t v140 = v97;
    uint64_t v100 = v139;
    unint64_t v101 = v141;
    v96((char *)v99, v140);
  }
  uint64_t v164 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v165);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of UUID?((uint64_t)v98);
  _os_log_impl(&dword_1C9CFE000, v89, v90, "Couldn't create log event with destination message : %s  for camId : %s, rcId: %s, trpId: %s", (uint8_t *)v91, 0x2Au);
  os_log_t v142 = v162;
  swift_arrayDestroy();
  MEMORY[0x1CB78E290](v142, -1, -1);
  MEMORY[0x1CB78E290](v91, -1, -1);
  os_log_t v138 = v158;
LABEL_45:

LABEL_48:
}

id specialized static CamLoggingProtocol<>.map(action:responseStatusCode:enforcer:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  id v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0208]), sel_init);
  if (v8)
  {
    id v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA0200]), sel_init);
    uint64_t v10 = v9;
    if ((a1 & 0x100000000) != 0)
    {
      if (one-time initialization token for common != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.common);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl(&dword_1C9CFE000, v14, v15, "CAM action for logging is nil", v16, 2u);
        MEMORY[0x1CB78E290](v16, -1, -1);
      }

      if (a4)
      {
LABEL_4:
        if (v10)
        {
          id v11 = v10;
          uint64_t v12 = (void *)MEMORY[0x1CB78D210](a3, a4);
          objc_msgSend(v11, sel_setEnforcer_, v12);

LABEL_12:
          objc_msgSend(v10, sel_setResponseStatusCode_, dword_1C9DA0708[a2]);
        }
LABEL_13:
        objc_msgSend(v8, sel_setResponse_, v10);

        return v8;
      }
    }
    else
    {
      objc_msgSend(v9, sel_setAction_, a1);
      if (a4) {
        goto LABEL_4;
      }
    }
    if (v10) {
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  return v8;
}

BOOL specialized == infix<A>(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t specialized == infix<A>(_:_:)()
{
  OUTLINED_FUNCTION_24_10();
  int v5 = v2;
  if (v2)
  {
    if (v2 == 1) {
      unint64_t v6 = v4;
    }
    else {
      unint64_t v6 = v4 + 7;
    }
    if (v5 == 1) {
      unint64_t v7 = 0x80000001C9DA2600;
    }
    else {
      unint64_t v7 = 0x80000001C9DA2620;
    }
  }
  else
  {
    unint64_t v6 = 0xD000000000000011;
    unint64_t v7 = v0;
  }
  if (v3)
  {
    OUTLINED_FUNCTION_89();
    unint64_t v10 = (v9 - 32) | 0x8000000000000000;
    if (v11 == 1)
    {
      unint64_t v0 = v8;
    }
    else
    {
      v4 += 7;
      unint64_t v0 = v10;
    }
  }
  if (v6 == v4 && v7 == v0) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    char v1 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v7;

  PluginToBundleMap.rawValue.getter();
  char v1 = v0;
  char v3 = v2;
  PluginToBundleMap.rawValue.getter();
  if (v1 == v5 && v3 == v4) {
    unint64_t v7 = 1;
  }
  else {
    unint64_t v7 = OUTLINED_FUNCTION_80();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

{
  unint64_t v0;
  char v1;
  char v2;
  unint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  OUTLINED_FUNCTION_119();
  char v3 = 0x646E6148776F6C66;
  int v5 = v4;
  unint64_t v6 = 0x646E6148776F6C66;
  unint64_t v7 = 0xED0000644972656CLL;
  switch(v5)
  {
    case 1:
      unint64_t v7 = 0xE800000000000000;
      unint64_t v6 = 0x6174614472657375;
      break;
    case 2:
      unint64_t v7 = 0xE500000000000000;
      unint64_t v8 = 1936875888;
      goto LABEL_6;
    case 3:
      unint64_t v6 = 0x74616E7265746C61;
      unint64_t v7 = 0xEC00000073657669;
      break;
    case 4:
      unint64_t v7 = 0xE500000000000000;
      unint64_t v8 = 1919902579;
LABEL_6:
      unint64_t v6 = v8 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
      break;
    default:
      break;
  }
  switch(v2)
  {
    case 1:
      unint64_t v0 = 0xE800000000000000;
      char v3 = 0x6174614472657375;
      break;
    case 2:
      unint64_t v0 = 0xE500000000000000;
      uint64_t v9 = 1936875888;
      goto LABEL_12;
    case 3:
      char v3 = 0x74616E7265746C61;
      unint64_t v0 = 0xEC00000073657669;
      break;
    case 4:
      unint64_t v0 = 0xE500000000000000;
      uint64_t v9 = 1919902579;
LABEL_12:
      char v3 = v9 & 0xFFFF0000FFFFFFFFLL | 0x6500000000;
      break;
    default:
      break;
  }
  if (v6 == v3 && v7 == v0) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    char v1 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  unint64_t v0;
  char v1;
  unsigned __int8 v2;
  char v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  OUTLINED_FUNCTION_24_10();
  int v5 = v2;
  if (v2)
  {
    if (v2 == 1) {
      unint64_t v6 = v4 + 6;
    }
    else {
      unint64_t v6 = v4 + 13;
    }
    if (v5 == 1) {
      unint64_t v7 = 0x80000001C9DA3050;
    }
    else {
      unint64_t v7 = 0x80000001C9DA3010;
    }
  }
  else
  {
    unint64_t v6 = 0xD000000000000026;
    unint64_t v7 = v0;
  }
  if (v3)
  {
    OUTLINED_FUNCTION_89();
    uint64_t v13 = (v12 - 32) | 0x8000000000000000;
    if (v10 == 1) {
      unint64_t v4 = v11;
    }
    else {
      unint64_t v4 = v8 + 13;
    }
    if (v10 == 1) {
      unint64_t v0 = v9;
    }
    else {
      unint64_t v0 = v13;
    }
  }
  if (v6 == v4 && v7 == v0) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    char v1 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

{
  unint64_t v0;
  char v1;
  char v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  OUTLINED_FUNCTION_24_10();
  if (v4)
  {
    OUTLINED_FUNCTION_23_9();
    if (v6 == 1) {
      unint64_t v10 = v7;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v6 == 1) {
      int v11 = v8;
    }
    else {
      int v11 = (v5 - 32) | 0x8000000000000000;
    }
  }
  else
  {
    unint64_t v10 = 0xD000000000000010;
    int v11 = v0;
  }
  if (v2)
  {
    OUTLINED_FUNCTION_23_9();
    uint64_t v17 = (v16 - 32) | 0x8000000000000000;
    if (v12 == 1) {
      char v3 = v13;
    }
    else {
      char v3 = v15;
    }
    if (v12 == 1) {
      unint64_t v0 = v14;
    }
    else {
      unint64_t v0 = v17;
    }
  }
  if (v10 == v3 && v11 == v0) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    char v1 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t specialized == infix<A>(_:_:)(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000021;
  unint64_t v4 = 0x80000001C9DA24B0;
  switch(a1)
  {
    case 1:
      unint64_t v4 = 0x80000001C9DA24E0;
      unint64_t v3 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x534549545F4C4C41;
      break;
    case 3:
      unint64_t v4 = 0xE800000000000000;
      unint64_t v3 = 0x444E45534F545541;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xD000000000000021;
  unint64_t v6 = 0x80000001C9DA24B0;
  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_91();
      unint64_t v5 = 0xD000000000000016;
      break;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x534549545F4C4C41;
      break;
    case 3:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x444E45534F545541;
      break;
    default:
      break;
  }
  if (v3 == v5 && v4 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = OUTLINED_FUNCTION_80();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  unint64_t v3 = 0xEA00000000005441;
  unint64_t v4 = 0x455045525F4B5341;
  if (a1)
  {
    OUTLINED_FUNCTION_42_1();
    if (v6 == 1) {
      uint64_t v9 = v7;
    }
    else {
      uint64_t v9 = 0xD000000000000010;
    }
    if (v6 == 1) {
      unint64_t v10 = v8;
    }
    else {
      unint64_t v10 = (v5 - 32) | 0x8000000000000000;
    }
  }
  else
  {
    uint64_t v9 = 0x455045525F4B5341;
    unint64_t v10 = 0xEA00000000005441;
  }
  if (a2)
  {
    OUTLINED_FUNCTION_42_1();
    os_log_type_t v15 = (v14 - 32) | 0x8000000000000000;
    if (v11 == 1) {
      unint64_t v4 = v12;
    }
    else {
      unint64_t v4 = 0xD000000000000010;
    }
    if (v11 == 1) {
      unint64_t v3 = v13;
    }
    else {
      unint64_t v3 = v15;
    }
  }
  if (v9 == v4 && v10 == v3) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    unsigned __int8 v2 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t specialized == infix<A>(_:_:)(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 7496035;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 7496035;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x646F70656D6F68;
      break;
    case 2:
      uint64_t v5 = 6513005;
      break;
    case 3:
      uint64_t v5 = 6578544;
      break;
    case 4:
      uint64_t v5 = 6582128;
      break;
    case 5:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x656E6F6870;
      break;
    case 6:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746177;
      break;
    case 7:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v5 = 30324;
      break;
    case 8:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x646F70656D6F68;
      break;
    case 2:
      uint64_t v2 = 6513005;
      break;
    case 3:
      uint64_t v2 = 6578544;
      break;
    case 4:
      uint64_t v2 = 6582128;
      break;
    case 5:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x656E6F6870;
      break;
    case 6:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x6863746177;
      break;
    case 7:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v2 = 30324;
      break;
    case 8:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v2 = 0x6E776F6E6B6E75;
      break;
    default:
      break;
  }
  if (v5 == v2 && v3 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = OUTLINED_FUNCTION_80();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

{
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  unint64_t v3 = 0xE900000000000065;
  uint64_t v4 = 0x7372615072657375;
  uint64_t v5 = a1;
  unint64_t v6 = 0x7372615072657375;
  unint64_t v7 = 0xE900000000000065;
  switch(v5)
  {
    case 1:
      unint64_t v7 = 0x80000001C9DA2650;
      unint64_t v6 = 0xD000000000000010;
      break;
    case 2:
      unint64_t v6 = 0x6C646E7542707061;
      unint64_t v7 = 0xEB00000000644965;
      break;
    case 3:
      unint64_t v6 = 0x646E4970756F7267;
      unint64_t v7 = 0xEA00000000007865;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_24_10();
      uint64_t v4 = 0xD000000000000010;
      break;
    case 2:
      uint64_t v4 = 0x6C646E7542707061;
      unint64_t v3 = 0xEB00000000644965;
      break;
    case 3:
      uint64_t v4 = 0x646E4970756F7267;
      unint64_t v3 = 0xEA00000000007865;
      break;
    default:
      break;
  }
  if (v6 == v4 && v7 == v3) {
    OUTLINED_FUNCTION_49_1();
  }
  else {
    uint64_t v2 = OUTLINED_FUNCTION_15_13();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

BOOL specialized == infix<A>(_:_:)(char a1, char a2)
{
  return qword_1C9DA0780[a1] == qword_1C9DA0780[a2];
}

uint64_t specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
  if (a2) {
    OUTLINED_FUNCTION_89();
  }
  else {
    OUTLINED_FUNCTION_24_10();
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_24_10();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  switch(a2)
  {
    case 1:
      OUTLINED_FUNCTION_24_10();
      break;
    default:
      break;
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2)
  {
    OUTLINED_FUNCTION_45_1();
    OUTLINED_FUNCTION_60();
  }
  else
  {
    OUTLINED_FUNCTION_51_1();
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2) {
    OUTLINED_FUNCTION_44_1();
  }
  else {
    OUTLINED_FUNCTION_24_10();
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  if (a2)
  {
    OUTLINED_FUNCTION_32_5();
    OUTLINED_FUNCTION_44_1();
  }
  else
  {
    OUTLINED_FUNCTION_24_10();
  }
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

uint64_t specialized RawRepresentable<>.hash(into:)()
{
  PluginToBundleMap.rawValue.getter();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  OUTLINED_FUNCTION_119();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  uint64_t vars8;

  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

{
  return String.hash(into:)();
}

void specialized RawRepresentable<>.hash(into:)(uint64_t a1, char a2)
{
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, char a2)
{
  if (a2)
  {
    OUTLINED_FUNCTION_32_5();
    OUTLINED_FUNCTION_44_1();
  }
  else
  {
    OUTLINED_FUNCTION_91();
  }
  OUTLINED_FUNCTION_70();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  if (a2) {
    OUTLINED_FUNCTION_44_1();
  }
  else {
    OUTLINED_FUNCTION_91();
  }
  OUTLINED_FUNCTION_70();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_1C9DA0780[a2]);
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  if (a2)
  {
    OUTLINED_FUNCTION_45_1();
    OUTLINED_FUNCTION_60();
  }
  else
  {
    OUTLINED_FUNCTION_51_1();
  }
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  RankedAction.CodingKeys.rawValue.getter(a2);
  OUTLINED_FUNCTION_63();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  if (a2) {
    OUTLINED_FUNCTION_89();
  }
  else {
    OUTLINED_FUNCTION_91();
  }
  OUTLINED_FUNCTION_70();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)()
{
  return Hasher._finalize()();
}

{
  Hasher.init(_seed:)();
  PluginToBundleMap.rawValue.getter();
  OUTLINED_FUNCTION_63();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned __int8 a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, MEMORY[0x1E4FBC3B8]);
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, MEMORY[0x1E4FBC3C0]);
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2)
{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

{
  return specialized RawRepresentable<>._rawHashValue(seed:)(a1, a2, (void (*)(unsigned char *, uint64_t))specialized RawRepresentable<>.hash(into:));
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t))
{
  Hasher.init(_seed:)();
  a3(v6, a2);
  return Hasher._finalize()();
}

Swift::Int specialized RawRepresentable<>._rawHashValue(seed:)(uint64_t a1, unsigned __int8 a2, void (*a3)(void))
{
  return Hasher._finalize()();
}

id SISchemaUUID.__allocating_init(nsuuid:)()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  id v2 = objc_msgSend(v0, sel_initWithNSUUID_, isa);

  type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return v2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CamHandler.update()()
{
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v0 + 16);
  if (v3)
  {
    uint64_t v4 = (void *)(v0 + 32);
    swift_bridgeObjectRetain();
    uint64_t v5 = v3 - 1;
    do
    {
      uint64_t v6 = v5;
      uint64_t v7 = v4[3];
      uint64_t v8 = v4[4];
      __swift_project_boxed_opaque_existential_1(v4, v7);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v8);
      if (v2) {
        break;
      }
      uint64_t v5 = v6 - 1;
      v4 += 5;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
}

uint64_t CamHandler.init(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(uint64_t a1, char a2, char a3)
{
  type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  MEMORY[0x1F4188790](v6);
  OUTLINED_FUNCTION_2_1();
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  id v7 = (id)static Log.ambiguityHandling;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  OUTLINED_FUNCTION_92();
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  type metadata accessor for UncertaintyPromptHandler();
  if (static UncertaintyPromptHandler.register(camEnabledFeatures:allowDefaultAskRepeatModel:asrOnDevice:)(a1, a2 & 1, a3 & 1))
  {
    swift_retain();
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
    uint64_t v8 = v9;
    unint64_t v11 = *(void *)(v9 + 16);
    unint64_t v10 = *(void *)(v9 + 24);
    if (v11 >= v10 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
      uint64_t v8 = v17;
    }
    *(void *)(v8 + 16) = v11 + 1;
    OUTLINED_FUNCTION_87();
  }
  type metadata accessor for ActionAmbiguityHandler();
  if (static ActionAmbiguityHandler.register(camEnabledFeatures:)(a1))
  {
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v8 + 16) + 1, 1, v8);
      uint64_t v8 = v18;
    }
    unint64_t v13 = *(void *)(v8 + 16);
    unint64_t v12 = *(void *)(v8 + 24);
    if (v13 >= v12 >> 1)
    {
      specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1, v8);
      uint64_t v8 = v19;
    }
    *(void *)(v8 + 16) = v13 + 1;
    OUTLINED_FUNCTION_87();
  }
  if (*(void *)(v8 + 16))
  {
    static os_signpost_type_t.end.getter();
    os_signpost(_:dso:log:name:signpostID:)();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    swift_allocError();
    *(void *)uint64_t v15 = 0xD000000000000020;
    *(void *)(v15 + 8) = 0x80000001C9DA4560;
    *(unsigned char *)(v15 + 16) = 0;
    swift_willThrow();
  }
  OUTLINED_FUNCTION_9_10();
  v14();
  return a1;
}

void CamHandler.action(request:)()
{
  OUTLINED_FUNCTION_18_11();
  uint64_t v97 = v0;
  uint64_t v2 = v1;
  os_log_t v89 = v3;
  uint64_t v96 = type metadata accessor for CamInput();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v4);
  OUTLINED_FUNCTION_2_1();
  uint64_t v7 = v6 - v5;
  uint64_t v8 = type metadata accessor for CamRequest(0);
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_9_3();
  uint64_t v12 = v10 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v91 = (uint64_t)v83 - v14;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v83 - v16;
  uint64_t v88 = type metadata accessor for OSSignpostID();
  OUTLINED_FUNCTION_1_2();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v20);
  OUTLINED_FUNCTION_2_1();
  uint64_t v23 = v22 - v21;
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v94 = (int *)v8;
  id v24 = (id)static Log.ambiguityHandling;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  OUTLINED_FUNCTION_92();
  OUTLINED_FUNCTION_64();
  uint64_t v90 = v23;
  os_signpost(_:dso:log:name:signpostID:_:_:)();
  if (one-time initialization token for ambiguityHandling != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  OUTLINED_FUNCTION_41_1(v25, (uint64_t)static Logger.ambiguityHandling);
  outlined init with copy of CamRequest((uint64_t)v2, (uint64_t)v17, (void (*)(void))type metadata accessor for CamRequest);
  uint64_t v93 = v23;
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  BOOL v28 = os_log_type_enabled(v26, v27);
  uint64_t v87 = v19;
  unint64_t v95 = v2;
  uint64_t v92 = v12;
  if (v28)
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = OUTLINED_FUNCTION_7_1();
    v99[0] = (uint64_t)v86;
    uint64_t v30 = v7;
    *(_DWORD *)uint64_t v29 = 136315138;
    outlined init with copy of CamRequest((uint64_t)v17, v91, (void (*)(void))type metadata accessor for CamRequest);
    uint64_t v31 = v94;
    uint64_t v32 = String.init<A>(describing:)();
    uint64_t v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v32, v33, v99);
    OUTLINED_FUNCTION_93(v34);
    uint64_t v2 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamRequest((uint64_t)v17, (void (*)(void))type metadata accessor for CamRequest);
    _os_log_impl(&dword_1C9CFE000, v26, v27, "Handling CAM request : %s", v29, 0xCu);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    outlined destroy of CamRequest((uint64_t)v17, (void (*)(void))type metadata accessor for CamRequest);

    uint64_t v31 = v94;
    uint64_t v30 = v7;
  }
  uint64_t v35 = ((char *)v2 + v31[5]);
  uint64_t v36 = (uint64_t *)((char *)v2 + v31[6]);
  unint64_t v37 = v36[1];
  uint64_t v91 = *v36;
  uint64_t v84 = v36;
  uint64_t v38 = (uint64_t)v2 + v31[7];
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)((uint64_t)v2, v2, v35, v91, v37, v38, 2);
  uint64_t v39 = type metadata accessor for UUID();
  OUTLINED_FUNCTION_1_3();
  uint64_t v41 = *(void (**)(void))(v40 + 16);
  LOBYTE(v42) = v40 + 16;
  OUTLINED_FUNCTION_29_4();
  v41();
  uint64_t v43 = (int *)v96;
  uint64_t v86 = v35;
  v83[1] = v39;
  OUTLINED_FUNCTION_29_4();
  v41();
  uint64_t v44 = v30 + v43[7];
  uint64_t v85 = v38;
  outlined init with copy of UUID?(v38, v44);
  uint64_t v45 = *(Class *)((char *)&v2->isa + v31[8]);
  uint64_t v46 = *(uint64_t *)((char *)&v2->isa + v31[9]);
  uint64_t v47 = *(uint64_t *)((char *)&v2->isa + v31[10]);
  uint64_t v48 = v31[12];
  uint64_t v49 = *(uint64_t *)((char *)&v2->isa + v31[13]);
  char v50 = *((unsigned char *)&v2->isa + v48);
  id v51 = (void *)(v30 + v43[6]);
  *id v51 = v91;
  v51[1] = v37;
  *(void *)(v30 + v43[8]) = v45;
  *(void *)(v30 + v43[10]) = v46;
  *(void *)(v30 + v43[11]) = v47;
  *(void *)(v30 + v43[12]) = v49;
  uint64_t v52 = v43[9];
  uint64_t v96 = v30;
  *(unsigned char *)(v30 + v52) = v50;
  type metadata accessor for CamOutput();
  *(unsigned char *)(swift_initStackObject() + 56) = 1;
  uint64_t v53 = CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
  uint64_t v54 = *(void *)(v97 + 16);
  if (v54)
  {
    uint64_t v42 = (void *)(v97 + 32);
    id v55 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v56 = v96;
    uint64_t v57 = v92;
    do
    {
      uint64_t v58 = v42[3];
      uint64_t v59 = v42[4];
      __swift_project_boxed_opaque_existential_1(v42, v58);
      uint64_t v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v59 + 16))(v56, v58, v59);
      swift_release();
      if (*(unsigned char *)(v60 + 56) != 1) {
        break;
      }
      v42 += 5;
      --v54;
    }
    while (v54);
    swift_bridgeObjectRelease();
    uint64_t v53 = v60;
  }
  else
  {
    id v61 = v45;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v56 = v96;
    uint64_t v57 = v92;
  }
  unint64_t v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.debug.getter();
  BOOL v64 = OUTLINED_FUNCTION_68(v63);
  uint64_t v65 = (uint64_t)v95;
  if (v64)
  {
    uint64_t v66 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v66 = 0;
    _os_log_impl(&dword_1C9CFE000, v62, (os_log_type_t)v42, "Logging successful CAM response", v66, 2u);
    OUTLINED_FUNCTION_2_2();
  }

  char v67 = *(unsigned char *)(v53 + 56);
  uint64_t v68 = *v84;
  unint64_t v69 = v84[1];
  uint64_t v70 = swift_retain();
  specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)(v70, 0, v65, v86, v68, v69, v85, 2);
  swift_release();
  outlined init with copy of CamRequest(v65, v57, (void (*)(void))type metadata accessor for CamRequest);
  swift_retain_n();
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  if (OUTLINED_FUNCTION_68(v72))
  {
    uint64_t v73 = swift_slowAlloc();
    v99[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 136315394;
    _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v99);
    OUTLINED_FUNCTION_93(v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of CamRequest(v57, (void (*)(void))type metadata accessor for CamRequest);
    *(_WORD *)(v73 + 12) = 2080;
    LOBYTE(v98) = *(unsigned char *)(v53 + 56);
    uint64_t v77 = String.init<A>(describing:)();
    uint64_t v98 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, v99);
    uint64_t v56 = v96;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C9CFE000, v71, (os_log_type_t)v42, "%s: Returning successful CAM Action: %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();
  }
  else
  {
    outlined destroy of CamRequest(v57, (void (*)(void))type metadata accessor for CamRequest);

    swift_release_n();
  }
  uint64_t v80 = v89;
  uint64_t v79 = v90;
  uint64_t v81 = v87;
  static os_signpost_type_t.end.getter();
  OUTLINED_FUNCTION_64();
  os_signpost(_:dso:log:name:signpostID:)();
  swift_release();
  uint64_t v82 = v88;
  outlined destroy of CamRequest(v56, (void (*)(void))type metadata accessor for CamInput);
  (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v79, v82);
  unsigned char *v80 = v67;
  v80[1] = 0;
  OUTLINED_FUNCTION_17_9();
}

void protocol witness for Cam.action(request:) in conformance CamHandler()
{
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  OUTLINED_FUNCTION_62();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(unsigned __int8 a1)
{
  OUTLINED_FUNCTION_62();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(void *a1)
{
  OUTLINED_FUNCTION_62();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  type metadata accessor for AffinityRankKey();
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

void specialized __RawDictionaryStorage.find<A>(_:)()
{
}

{
  type metadata accessor for UUID();
  _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  dispatch thunk of Hashable._rawHashValue(seed:)();
  specialized __RawDictionaryStorage.find<A>(_:hashValue:)();
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  uint64_t vars8;

  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v3 = specialized RawRepresentable<>._rawHashValue(seed:)(*(void *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

{
  uint64_t v1;
  Swift::Int v3;
  uint64_t vars8;

  Swift::Int v3 = specialized RawRepresentable<>._rawHashValue(seed:)(*(void *)(v1 + 40), a1);
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)()
{
  OUTLINED_FUNCTION_62();
  OUTLINED_FUNCTION_27_6();
  Swift::Int v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

{
  Swift::Int v0;

  OUTLINED_FUNCTION_62();
  Hasher._combine(_:)(0);
  Swift::Int v0 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(void *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for AffinityRankKey();
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      outlined init with copy of CamRequest(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, (void (*)(void))type metadata accessor for AffinityRankKey);
      BOOL v13 = *v8 == *a1 && v8[1] == a1[1];
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)()) && (static UUID.== infix(_:_:)()) {
        break;
      }
      outlined destroy of CamRequest((uint64_t)v8, (void (*)(void))type metadata accessor for AffinityRankKey);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    outlined destroy of CamRequest((uint64_t)v8, (void (*)(void))type metadata accessor for AffinityRankKey);
  }
  return v10;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  unsigned char v9[40];

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  uint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      uint64_t v7 = MEMORY[0x1CB78D730](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if (v7) {
        break;
      }
      uint64_t v4 = (v4 + 1) & v6;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v6 = ~v3;
    while (1)
    {
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
        {
          unint64_t v7 = 0x4F5455415F534D53;
          unint64_t v8 = 0xEC000000444E4553;
        }
        else
        {
          unint64_t v8 = 0x80000001C9DA2710;
          unint64_t v7 = 0xD000000000000010;
        }
      }
      else
      {
        unint64_t v7 = 0x455045525F4B5341;
        unint64_t v8 = 0xEA00000000005441;
      }
      if (a1)
      {
        unint64_t v9 = a1 == 1 ? 0x4F5455415F534D53 : 0xD000000000000010;
        unint64_t v10 = a1 == 1 ? 0xEC000000444E4553 : 0x80000001C9DA2710;
      }
      else
      {
        unint64_t v9 = 0x455045525F4B5341;
        unint64_t v10 = 0xEA00000000005441;
      }
      if (v7 == v9 && v8 == v10) {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v6;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v12;
  uint64_t v14;

  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    BOOL v14 = ~v3;
    while (1)
    {
      uint64_t v5 = 0xD00000000000002CLL;
      if (*(unsigned char *)(*(void *)(v2 + 48) + v4) == 1)
      {
        uint64_t v6 = 0x80000001C9DA3050;
      }
      else
      {
        uint64_t v5 = 0xD000000000000033;
        uint64_t v6 = 0x80000001C9DA3010;
      }
      unint64_t v7 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? v5 : 0xD000000000000026;
      unint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? v6 : 0x80000001C9DA3080;
      if (a1)
      {
        unint64_t v9 = a1 == 1 ? 0xD00000000000002CLL : 0xD000000000000033;
        unint64_t v10 = a1 == 1 ? 0x80000001C9DA3050 : 0x80000001C9DA3010;
      }
      else
      {
        unint64_t v10 = 0x80000001C9DA3080;
        unint64_t v9 = 0xD000000000000026;
      }
      if (v7 == v9 && v8 == v10) {
        break;
      }
      char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v14;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of CamRequest(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of CamRequest(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  OUTLINED_FUNCTION_18_1();
  v3();
  return a1;
}

void specialized __RawDictionaryStorage.find<A>(_:hashValue:)()
{
  OUTLINED_FUNCTION_18_11();
  uint64_t v23 = v1;
  uint64_t v24 = v2;
  uint64_t v22 = v3;
  uint64_t v5 = v4;
  v20[1] = v6;
  uint64_t v8 = v7(0);
  OUTLINED_FUNCTION_1_2();
  uint64_t v10 = v9;
  MEMORY[0x1F4188790]();
  char v12 = (char *)v20 - v11;
  uint64_t v21 = v0;
  uint64_t v13 = -1 << *(unsigned char *)(v0 + 32);
  unint64_t v14 = v5 & ~v13;
  v20[0] = v0 + 64;
  if ((*(void *)(v0 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    uint64_t v17 = *(void *)(v10 + 72);
    do
    {
      v16(v12, *(void *)(v21 + 48) + v17 * v14, v8);
      _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(v22, v23);
      char v18 = dispatch thunk of static Equatable.== infix(_:_:)();
      OUTLINED_FUNCTION_22_8();
      v19();
      if (v18) {
        break;
      }
      unint64_t v14 = (v14 + 1) & v15;
    }
    while (((*(void *)(v20[0] + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  OUTLINED_FUNCTION_17_9();
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1)
{
  return a1 & ~(-1 << *(unsigned char *)(v1 + 32));
}

uint64_t _s10Foundation4UUIDVACs23CustomStringConvertibleAAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_3_19(uint64_t a1)
{
  return __swift_getEnumTagSinglePayload(a1, 1, v1);
}

uint64_t OUTLINED_FUNCTION_7_18()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_8_14(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_9_15(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_10_11(void *a1, uint64_t a2, os_log_type_t a3, const char *a4)
{
  _os_log_impl(a1, v4, a3, a4, v5, 0x2Au);
}

uint64_t OUTLINED_FUNCTION_11_15()
{
  return swift_slowAlloc();
}

void OUTLINED_FUNCTION_12_11(float a1)
{
  float *v1 = a1;
}

uint64_t OUTLINED_FUNCTION_13_12()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_15_13()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_17_10(uint64_t a1, uint64_t a2)
{
  __swift_project_value_buffer(a1, a2);
  return v2;
}

uint64_t OUTLINED_FUNCTION_20_9(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_21_8(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

id OUTLINED_FUNCTION_26_7(uint64_t a1, const char *a2)
{
  return objc_msgSend(v3, a2, v2);
}

uint64_t OUTLINED_FUNCTION_27_6()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_31_4()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_33_3()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_36_2()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_37_2()
{
  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_38_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_39_1()
{
  return String.init<A>(describing:)();
}

BOOL OUTLINED_FUNCTION_40_1(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_41_1(uint64_t a1, uint64_t a2)
{
  return __swift_project_value_buffer(a1, a2);
}

uint64_t OUTLINED_FUNCTION_46_1()
{
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

void OUTLINED_FUNCTION_47_0(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v6, a4, v5, 0x20u);
}

uint64_t OUTLINED_FUNCTION_48_1()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_50_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_52_0(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_53_0(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_54_0(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_55_0()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_57(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_61(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_62()
{
  return Hasher.init(_seed:)();
}

uint64_t OUTLINED_FUNCTION_63()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_65(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

BOOL OUTLINED_FUNCTION_67(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

BOOL OUTLINED_FUNCTION_68(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

uint64_t OUTLINED_FUNCTION_69()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_70()
{
  return String.hash(into:)();
}

uint64_t OUTLINED_FUNCTION_71(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  *(void *)(v10 - 192) = (char *)&a9 - v9;
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_74()
{
  uint64_t v3 = *(void *)(v1 - 184);
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v3, v0, (uint64_t *)(v1 - 128));
}

uint64_t OUTLINED_FUNCTION_75(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_76(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_77(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_78(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_79(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return UnsafeMutableRawBufferPointer.copyMemory(from:)();
}

uint64_t OUTLINED_FUNCTION_80()
{
  return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t OUTLINED_FUNCTION_82()
{
  return *(void *)(v0 - 136);
}

uint64_t OUTLINED_FUNCTION_83(uint64_t a1, unint64_t a2)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_84()
{
  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_85(uint64_t a1)
{
  *(void *)(v1 - 104) = a1;
  return v1 - 104;
}

uint64_t OUTLINED_FUNCTION_86()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_87()
{
  outlined init with take of AppSelectionSignalComponent((long long *)(v2 - 120), v1 + 40 * v0 + 32);
  return swift_release();
}

uint64_t OUTLINED_FUNCTION_88()
{
  return swift_slowAlloc();
}

uint64_t OUTLINED_FUNCTION_90(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v4, v3, a3);
}

uint64_t OUTLINED_FUNCTION_93(uint64_t a1)
{
  *(void *)(v1 - 176) = a1;
  return v1 - 176;
}

id OUTLINED_FUNCTION_94(uint64_t a1, const char *a2)
{
  return objc_msgSend(v2, a2, 0);
}

uint64_t OUTLINED_FUNCTION_95()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_96()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_98()
{
  *(_WORD *)(v0 + 22) = 2080;
  return swift_bridgeObjectRetain();
}

uint64_t OUTLINED_FUNCTION_99()
{
  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_100()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 128));
}

uint64_t OUTLINED_FUNCTION_101()
{
  return type metadata accessor for UUID();
}

uint64_t OUTLINED_FUNCTION_102()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_103()
{
  return swift_arrayDestroy();
}

uint64_t OUTLINED_FUNCTION_104()
{
  return getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v1, v0, (uint64_t *)(v2 - 96));
}

uint64_t OUTLINED_FUNCTION_107()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_108()
{
  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t OUTLINED_FUNCTION_110()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_111(uint64_t result)
{
  *(void *)(v1 - 200) = result;
  *(void *)(v1 - 128) = result;
  return result;
}

uint64_t OUTLINED_FUNCTION_114()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_115(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t OUTLINED_FUNCTION_116()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_117(uint64_t a1)
{
  *(void *)(v1 - 144) = a1;
  return v1 - 144;
}

uint64_t OUTLINED_FUNCTION_118()
{
  *(_WORD *)(v0 + 12) = 2080;
  return UUID.uuidString.getter();
}

uint64_t static ActionAmbiguityHandler.register(camEnabledFeatures:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    goto LABEL_11;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = 0;
  while (!*(unsigned char *)(a1 + v3 + 32) || *(unsigned char *)(a1 + v3 + 32) == 1)
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v4) {
      goto LABEL_9;
    }
    if (v1 == ++v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
LABEL_9:
  swift_bridgeObjectRelease();
  void v14[3] = (uint64_t)&type metadata for CamFeatureFlag;
  v14[4] = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
  LOBYTE(v14[0]) = 2;
  char v5 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  if (v5)
  {
    type metadata accessor for ActionAmbiguityHandler();
    uint64_t v6 = swift_allocObject();
    ActionAmbiguityHandler.init()();
  }
  else
  {
LABEL_11:
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      v14[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136315394;
      uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C9DA2710, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2080;
      uint64_t v11 = StaticString.description.getter();
      uint64_t v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v8, v9, "[ActionAmbiguityHandler] Not registering as %s or %s is disabled", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }

    return 0;
  }
  return v6;
}

uint64_t ActionAmbiguityHandler.init()()
{
  uint64_t v2 = v0;
  uint64_t v3 = Dictionary.init(dictionaryLiteral:)();
  *(void *)(v0 + 16) = 0xD000000000000021;
  *(void *)(v0 + 24) = 0x80000001C9DA37B0;
  *(void *)(v0 + 32) = 0xD000000000000025;
  *(void *)(v0 + 40) = 0x80000001C9DA3780;
  *(void *)(v0 + 48) = 0xD000000000000024;
  *(void *)(v0 + 56) = 0x80000001C9DA37E0;
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = type metadata accessor for ActionAmbiguityHeuristicHandler();
  swift_allocObject();
  uint64_t v5 = ActionAmbiguityHeuristicHandler.init(forModelWithName:)(0xD00000000000002DLL, 0x80000001C9DA4600);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    type metadata accessor for ActionAmbiguityHandler();
    swift_deallocPartialClassInstance();
  }
  else
  {
    uint64_t v12 = v4;
    uint64_t v13 = &protocol witness table for ActionAmbiguityHeuristicHandler;
    *(void *)&long long v11 = v5;
    outlined init with take of AppSelectionSignalComponent(&v11, v0 + 72);
    if (CamFeatureFlag.isEnabled.getter(7u))
    {
      if (one-time initialization token for ambiguityHandling != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      __swift_project_value_buffer(v6, (uint64_t)static Logger.ambiguityHandling);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v9 = 0;
        _os_log_impl(&dword_1C9CFE000, v7, v8, "[ActionAmbiguityHandler] disambiguate_for_ranking_evaluation FF enabled, adding corresponding enforcer", v9, 2u);
        OUTLINED_FUNCTION_2_2();
      }

      *(void *)(v2 + 136) = &type metadata for ForcedDisambiguationForRankingEvaluationActionEnforcer;
      *(void *)(v2 + 144) = &protocol witness table for ForcedDisambiguationForRankingEvaluationActionEnforcer;
    }
    else
    {
      *(void *)(v0 + 144) = 0;
      *(_OWORD *)(v0 + 112) = 0u;
      *(_OWORD *)(v0 + 128) = 0u;
    }
  }
  return v2;
}

unsigned char *ActionAmbiguityHandler.handle(camInput:)(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = &v76[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = type metadata accessor for CamModelMetadata();
  uint64_t v6 = MEMORY[0x1F4188790](v5 - 8);
  os_log_type_t v8 = &v76[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v6);
  uint64_t v10 = &v76[-v9];
  uint64_t v11 = type metadata accessor for OSSignpostID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = &v76[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  uint64_t v17 = &v76[-v16];
  uint64_t v96 = static ActionAmbiguityHandler.preExecutionOverride(camInput:)(a1);
  if (v96)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v17 = (unsigned char *)v96;
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v100[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136315138;
      swift_retain();
      uint64_t v22 = specialized ReflectedStringConvertible.description.getter();
      unint64_t v24 = v23;
      swift_release();
      uint64_t v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, v100);
      OUTLINED_FUNCTION_10_12(v25);
      uint64_t v17 = (unsigned char *)v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      OUTLINED_FUNCTION_5_14();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C9CFE000, v19, v20, "[ActionAmbiguityHandler] Using override before executing model %s", v21, 0xCu);
      swift_arrayDestroy();
      OUTLINED_FUNCTION_2_2();
      OUTLINED_FUNCTION_2_2();
    }
    else
    {

      OUTLINED_FUNCTION_5_14();
    }
  }
  else
  {
    uint64_t v93 = v11;
    uint64_t v86 = v8;
    uint64_t v90 = v15;
    uint64_t v92 = (uint8_t *)a1;
    uint64_t v87 = v2;
    os_log_t v89 = v10;
    uint64_t v88 = v4;
    uint64_t v91 = v12;
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    id v26 = (id)static Log.ambiguityHandling;
    OSSignpostID.init(log:)();
    static os_signpost_type_t.begin.getter();
    OUTLINED_FUNCTION_6_15();
    uint64_t v27 = type metadata accessor for CamInput();
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v29 = v95;
    uint64_t v30 = specialized FeatureExtracting.extract(from:)(v28);
    uint64_t v31 = v93;
    if (v29)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v91 + 8))(v17, v31);
    }
    else
    {
      uint64_t v84 = v27;
      uint64_t v32 = v30;
      swift_bridgeObjectRelease();
      unint64_t v33 = (void *)static Log.ambiguityHandling;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_6_15();
      id v34 = v33;
      OSSignpostID.init(log:)();
      static os_signpost_type_t.begin.getter();
      OUTLINED_FUNCTION_7_19();
      uint64_t v35 = v94;
      uint64_t v85 = v17;
      uint64_t v36 = v94[12];
      uint64_t v37 = v94[13];
      __swift_project_boxed_opaque_existential_1(v94 + 9, v36);
      uint64_t v38 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v32, v36, v37);
      unint64_t v83 = v35 + 9;
      static os_signpost_type_t.end.getter();
      OUTLINED_FUNCTION_7_19();
      long long v39 = *((_OWORD *)v35 + 2);
      long long v101 = *((_OWORD *)v35 + 1);
      long long v102 = v39;
      long long v103 = *((_OWORD *)v35 + 3);
      uint64_t v104 = v35[8];
      CamOutputProvider.toCamOutput(from:)(v38);
      id v82 = v38;
      uint64_t v95 = 0;
      uint64_t v96 = v40;
      uint64_t v42 = v35[12];
      uint64_t v43 = v35[13];
      __swift_project_boxed_opaque_existential_1(v83, v42);
      (*(void (**)(uint64_t, uint64_t))(v43 + 24))(v42, v43);
      outlined init with copy of ActionAmbiguityActionEnforcer?((uint64_t)(v35 + 14), (uint64_t)&v97);
      uint64_t v44 = v91;
      if (v99)
      {
        outlined init with take of AppSelectionSignalComponent(&v97, (uint64_t)v100);
        __swift_project_boxed_opaque_existential_1(v100, v100[3]);
        uint64_t v17 = (unsigned char *)v96;
        ForcedDisambiguationForRankingEvaluationActionEnforcer.enforce(inputFeatures:camOutput:camInput:modelMetadata:)(&v97);
        swift_bridgeObjectRelease();
        uint64_t v45 = v98;
        if (v98)
        {
          uint64_t v46 = *((void *)&v97 + 1);
          int v80 = v97;
          if (one-time initialization token for ambiguityHandling != -1) {
            swift_once();
          }
          uint64_t v47 = type metadata accessor for Logger();
          __swift_project_value_buffer(v47, (uint64_t)static Logger.ambiguityHandling);
          swift_retain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v48 = Logger.logObject.getter();
          os_log_type_t v49 = static os_log_type_t.debug.getter();
          int v50 = v49;
          os_log_t v81 = v48;
          if (os_log_type_enabled(v48, v49))
          {
            uint64_t v51 = swift_slowAlloc();
            uint64_t v79 = v46;
            uint64_t v52 = v51;
            uint64_t v78 = swift_slowAlloc();
            *(void *)&long long v97 = v78;
            *(_DWORD *)uint64_t v52 = 136315650;
            LOBYTE(v105) = v17[56];
            int v77 = v50;
            uint64_t v53 = String.init<A>(describing:)();
            uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2080;
            char v55 = v80;
            LOBYTE(v105) = v80;
            uint64_t v56 = String.init<A>(describing:)();
            uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            uint64_t v17 = (unsigned char *)v96;
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 22) = 2080;
            swift_bridgeObjectRetain();
            uint64_t v105 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, (unint64_t)v45, (uint64_t *)&v97);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            os_log_t v58 = v81;
            _os_log_impl(&dword_1C9CFE000, v81, (os_log_type_t)v77, "[ActionAmbiguityHandler] Overriding %s with %s due to %s", (uint8_t *)v52, 0x20u);
            swift_arrayDestroy();
            OUTLINED_FUNCTION_2_2();
            uint64_t v46 = v79;
            OUTLINED_FUNCTION_2_2();
          }
          else
          {

            swift_bridgeObjectRelease_n();
            OUTLINED_FUNCTION_5_14();
            char v55 = v80;
          }
          LOBYTE(v97) = v55;
          v59._uint64_t countAndFlagsBits = v46;
          v59._object = v45;
          CamOutput.overrideAction(action:enforcer:)((SiriCam::CamAction)&v97, v59);
          swift_bridgeObjectRelease();
        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v100);
      }
      else
      {
        swift_bridgeObjectRelease();
        outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)&v97, &demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
        uint64_t v17 = (unsigned char *)v96;
      }
      uint64_t v60 = (uint64_t)v86;
      if (one-time initialization token for ambiguityHandling != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.ambiguityHandling);
      swift_retain_n();
      unint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        BOOL v64 = (uint8_t *)swift_slowAlloc();
        v100[0] = swift_slowAlloc();
        *(_DWORD *)BOOL v64 = 136315138;
        uint64_t v92 = v64 + 4;
        swift_retain();
        uint64_t v65 = specialized ReflectedStringConvertible.description.getter();
        unint64_t v67 = v66;
        swift_release();
        uint64_t v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v67, v100);
        OUTLINED_FUNCTION_10_12(v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        uint64_t v17 = (unsigned char *)v96;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C9CFE000, v62, v63, "[ActionAmbiguityHandler] handle will return output %s", v64, 0xCu);
        swift_arrayDestroy();
        uint64_t v44 = v91;
        OUTLINED_FUNCTION_2_2();
        OUTLINED_FUNCTION_2_2();
      }
      else
      {

        OUTLINED_FUNCTION_5_14();
      }
      uint64_t v69 = v94[12];
      uint64_t v70 = v94[13];
      __swift_project_boxed_opaque_existential_1(v83, v69);
      (*(void (**)(uint64_t, uint64_t))(v70 + 24))(v69, v70);
      uint64_t v71 = v60;
      uint64_t v72 = (uint64_t)v88;
      uint64_t v73 = (uint64_t)v88 + *(int *)(v87 + 48);
      *uint64_t v88 = v17;
      outlined init with take of CamModelMetadata(v71, v73);
      swift_retain();
      specialized static CamLoggingProtocol.log(from:forRequestId:forCamId:forRcId:forTrpId:forFeature:)();

      outlined destroy of (CamLogOutput, CamModelMetadata)(v72, &demangling cache variable for type metadata for (CamLogOutput, CamModelMetadata));
      outlined destroy of CamModelMetadata((uint64_t)v89);
      uint64_t v74 = *(void (**)(unsigned char *, uint64_t))(v44 + 8);
      uint64_t v75 = v93;
      v74(v90, v93);
      v74(v85, v75);
    }
  }
  return v17;
}

uint64_t static ActionAmbiguityHandler.preExecutionOverride(camInput:)(uint64_t a1)
{
  if (*(void *)(*(void *)(a1 + *(int *)(type metadata accessor for CamInput() + 44)) + 16) < 2uLL)
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    __swift_project_value_buffer(v1, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v2 = (void *)Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.info.getter();
    if (OUTLINED_FUNCTION_3_20(v3))
    {
      *(_WORD *)OUTLINED_FUNCTION_20_2() = 0;
      OUTLINED_FUNCTION_4_16(&dword_1C9CFE000, v4, v5, "[ActionAmbiguityHandler] Skipping due to lack of ranked actions in input");
      OUTLINED_FUNCTION_2_2();
    }

    goto LABEL_20;
  }
  if (SiriKitRuntimeAmbiguityFeatureFlags.isEnabled.getter())
  {
    if (one-time initialization token for ambiguityHandling != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.ambiguityHandling);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)OUTLINED_FUNCTION_20_2();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl(&dword_1C9CFE000, v7, v8, "[ActionAmbiguityHandler] input_paraphrasing_flows feature flag is enabled", v9, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    if (CamFeatureFlag.isEnabled.getter(6u))
    {
      uint64_t v10 = (void *)Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_3_20(v11))
      {
        *(_WORD *)OUTLINED_FUNCTION_20_2() = 0;
        uint64_t v14 = "[ActionAmbiguityHandler] disambiguate_all_ties feature flag is enabled, CAM can return a disambiguate acti"
              "on without constraints on the type of the action";
LABEL_18:
        OUTLINED_FUNCTION_4_16(&dword_1C9CFE000, v12, v13, v14);
        OUTLINED_FUNCTION_2_2();
        goto LABEL_19;
      }
      goto LABEL_19;
    }
    if (CamFeatureFlag.isEnabled.getter(7u))
    {
      uint64_t v10 = (void *)Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.info.getter();
      if (OUTLINED_FUNCTION_3_20(v15))
      {
        *(_WORD *)OUTLINED_FUNCTION_20_2() = 0;
        uint64_t v14 = "[ActionAmbiguityHandler] disambiguate_for_ranking_evaluation feature flag is enabled, CAM can return a dis"
              "ambiguate action without constraints on the type of the action";
        goto LABEL_18;
      }
LABEL_19:

      return 0;
    }
  }
LABEL_20:
  type metadata accessor for CamOutput();
  *(unsigned char *)(swift_allocObject() + 56) = 1;
  return CamLogOutput.init(prediction:score:threshold:)(0, 0.0, 0.0);
}

uint64_t ActionAmbiguityHandler.deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  outlined destroy of (CamLogOutput, CamModelMetadata)(v0 + 112, &demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
  return v0;
}

uint64_t ActionAmbiguityHandler.__deallocating_deinit()
{
  ActionAmbiguityHandler.deinit();
  return MEMORY[0x1F4186488](v0, 152, 7);
}

uint64_t type metadata accessor for ActionAmbiguityHandler()
{
  return self;
}

unsigned char *protocol witness for ActionHandler.handle(camInput:) in conformance ActionAmbiguityHandler(uint64_t a1)
{
  return ActionAmbiguityHandler.handle(camInput:)(a1);
}

uint64_t outlined init with copy of ActionAmbiguityActionEnforcer?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ActionAmbiguityActionEnforcer?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

BOOL OUTLINED_FUNCTION_3_20(os_log_type_t a1)
{
  return os_log_type_enabled(v1, a1);
}

void OUTLINED_FUNCTION_4_16(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_impl(a1, v4, v5, a4, v6, 2u);
}

uint64_t OUTLINED_FUNCTION_5_14()
{
  return swift_release_n();
}

uint64_t OUTLINED_FUNCTION_6_15()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_7_19()
{
  return os_signpost(_:dso:log:name:signpostID:)();
}

uint64_t OUTLINED_FUNCTION_9_16()
{
  return v0;
}

uint64_t OUTLINED_FUNCTION_10_12(uint64_t a1)
{
  *(void *)(v1 - 224) = a1;
  return v1 - 224;
}

uint64_t static AutoConfirmAction.action(from:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4 = result;
  unint64_t v5 = 0;
  while (1)
  {
    if (v5 > 2)
    {
      char v6 = 3;
      goto LABEL_11;
    }
    char v6 = v5;
    _print_unlocked<A, B>(_:_:)();
    if (!v4 && a2 == 0xE000000000000000) {
      break;
    }
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    ++v5;
    if (v8) {
      goto LABEL_11;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
LABEL_11:
  *a3 = v6;
  return result;
}

SiriCam::AutoConfirmAction_optional __swiftcall AutoConfirmAction.init(rawValue:)(Swift::Int rawValue)
{
  char v2 = 3;
  if ((unint64_t)rawValue < 3) {
    char v2 = rawValue;
  }
  char *v1 = v2;
  return (SiriCam::AutoConfirmAction_optional)rawValue;
}

uint64_t AutoConfirmAction.rawValue.getter()
{
  return *v0;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AutoConfirmAction(uint64_t a1)
{
  return specialized RawRepresentable<>.hash(into:)(a1, *v1);
}

SiriCam::AutoConfirmAction_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AutoConfirmAction(Swift::Int *a1)
{
  return AutoConfirmAction.init(rawValue:)(*a1);
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AutoConfirmAction@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AutoConfirmAction.rawValue.getter();
  *a1 = result;
  return result;
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:from:withRequestId:recipientCrrSignals:resultCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 8))();
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:from:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  return (*(uint64_t (**)(void))(a10 + 16))();
}

uint64_t dispatch thunk of AutoConfirming.inferConfirmation(for:withRequestId:resultCandidateId:recipientCrrSignals:featureOptInStatus:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return (*(uint64_t (**)(void))(a9 + 24))();
}

uint64_t dispatch thunk of AutoConfirming.update()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

unsigned char *storeEnumTagSinglePayload for AutoConfirmAction(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D80430);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoConfirmAction()
{
  return &type metadata for AutoConfirmAction;
}

uint64_t outlined copy of AutoConfirmError(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 5u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AutoConfirmError(uint64_t a1)
{
  return outlined consume of AutoConfirmError(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t initializeBufferWithCopyOfBuffer for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AutoConfirmError(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of AutoConfirmError(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of AutoConfirmError(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for AutoConfirmError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of AutoConfirmError(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AutoConfirmError(uint64_t a1, unsigned int a2)
{
  if (a2)
  {
    if (a2 >= 0xFB && *(unsigned char *)(a1 + 17))
    {
      int v2 = *(_DWORD *)a1 + 250;
    }
    else
    {
      unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
      if (v3 <= 5) {
        int v2 = -1;
      }
      else {
        int v2 = v3 ^ 0xFF;
      }
    }
  }
  else
  {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AutoConfirmError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AutoConfirmError()
{
  return &type metadata for AutoConfirmError;
}

uint64_t dispatch thunk of static LoggingProtocol.map(from:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of static CamLoggingProtocol.wrapIntoLogEvent(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of static CaarLoggingProtocol.wrapIntoLogEvent(message:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

void *one-time initialization function for kLoggingFeatureName()
{
  type metadata accessor for CAMSchemaCAMFeature(0);
  lazy protocol witness table accessor for type CamFeature and conformance CamFeature();
  uint64_t result = (void *)Dictionary.init(dictionaryLiteral:)();
  kLoggingFeatureName._rawValue = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type CamFeature and conformance CamFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type CamFeature and conformance CamFeature;
  if (!lazy protocol witness table cache variable for type CamFeature and conformance CamFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CamFeature and conformance CamFeature;
  if (!lazy protocol witness table cache variable for type CamFeature and conformance CamFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CamFeature and conformance CamFeature);
  }
  return result;
}

uint64_t CamUSOParse.getFirstUserDialogActAsTask()()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1F4188790](v0 - 8);
  int v2 = &v14[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v3 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1CB78CBB0](v5);
  specialized Collection.first.getter();
  swift_bridgeObjectRelease();
  if (__swift_getEnumTagSinglePayload((uint64_t)v2, 1, v3) != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v4 + 32))(v7, v2, v3);
    unint64_t v8 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    unint64_t v11 = v8;
    if (v8 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v9)
      {
LABEL_7:
        specialized Array._checkSubscript(_:wasNativeTypeChecked:)(0, (v11 & 0xC000000000000001) == 0, v11);
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v9 = MEMORY[0x1CB78D7C0](0, v11);
        }
        else
        {
          uint64_t v9 = *(void *)(v11 + 32);
          swift_retain();
        }
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v9) {
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v12 = OUTLINED_FUNCTION_0_22();
    v13(v12);
    return v9;
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?((uint64_t)v2);
  return 0;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t OUTLINED_FUNCTION_0_22()
{
  return v0;
}

uint64_t *CRRFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static CRRFeatureExtractor.extractedFeatures;
}

uint64_t CRRFeatureExtractor.extractImpl(from:)(uint64_t a1)
{
  uint64_t v2 = (void *)a1;
  uint64_t v54 = a1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v56 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  int64_t v6 = 0;
  uint64_t v7 = v2;
  uint64_t v53 = v2;
  while (1)
  {
    if (v5)
    {
      unint64_t v8 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v9 = v8 | (v6 << 6);
      goto LABEL_20;
    }
    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_43;
    }
    if (v10 >= v56) {
      goto LABEL_38;
    }
    unint64_t v11 = *(void *)(v54 + 8 * v10);
    ++v6;
    if (!v11)
    {
      int64_t v6 = v10 + 1;
      if (v10 + 1 >= v56) {
        goto LABEL_38;
      }
      unint64_t v11 = *(void *)(v54 + 8 * v6);
      if (!v11)
      {
        int64_t v6 = v10 + 2;
        if (v10 + 2 >= v56) {
          goto LABEL_38;
        }
        unint64_t v11 = *(void *)(v54 + 8 * v6);
        if (!v11) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v5 = (v11 - 1) & v11;
    unint64_t v9 = __clz(__rbit64(v11)) + (v6 << 6);
LABEL_20:
    uint64_t v13 = (uint64_t *)(v2[6] + 16 * v9);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    uint64_t v16 = *(void *)(v2[7] + 8 * v9);
    swift_bridgeObjectRetain();
    v17._uint64_t countAndFlagsBits = 0x47796E4171657266;
    v17._object = (void *)0xEC00000070756F72;
    if (!String.hasPrefix(_:)(v17)) {
      goto LABEL_24;
    }
    OUTLINED_FUNCTION_0_23();
    lazy protocol witness table accessor for type String and conformance String();
    uint64_t v1 = v7;
    uint64_t v18 = OUTLINED_FUNCTION_1_24();
    if (v7[2] && (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v18, v19), (v21 & 1) != 0))
    {
      uint64_t v22 = *(void *)(v7[7] + 8 * v20);
      swift_bridgeObjectRelease();
      if (__OFSUB__(v16, v22)) {
        goto LABEL_44;
      }
      uint64_t v51 = v16 - v22;
      OUTLINED_FUNCTION_0_23();
      uint64_t v23 = OUTLINED_FUNCTION_1_24();
      uint64_t v25 = v24;
      char isUnique = swift_isUniquelyReferenced_nonNull_native();
      char v55 = v1;
      uint64_t v50 = v23;
      uint64_t v26 = v23;
      uint64_t v27 = v1;
      uint64_t v1 = (void *)v25;
      unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25);
      uint64_t v30 = v27[2];
      BOOL v31 = (v29 & 1) == 0;
      Swift::Int v32 = v30 + v31;
      if (__OFADD__(v30, v31)) {
        goto LABEL_45;
      }
      unint64_t v33 = v28;
      char v34 = v29;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
      uint64_t v35 = v1;
      if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v32))
      {
        unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v50, (uint64_t)v1);
        if ((v34 & 1) != (v37 & 1)) {
          goto LABEL_47;
        }
        unint64_t v33 = v36;
        uint64_t v35 = v1;
      }
      if (v34)
      {
        *(void *)(v55[7] + 8 * v33) = v51;
      }
      else
      {
        v55[(v33 >> 6) + 8] |= 1 << v33;
        uint64_t v38 = (uint64_t *)(v55[6] + 16 * v33);
        *uint64_t v38 = v50;
        v38[1] = (uint64_t)v35;
        *(void *)(v55[7] + 8 * v33) = v51;
        uint64_t v39 = v55[2];
        BOOL v40 = __OFADD__(v39, 1);
        uint64_t v41 = v39 + 1;
        if (v40) {
          goto LABEL_46;
        }
        v55[2] = v41;
        swift_bridgeObjectRetain();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      specialized __RawDictionaryStorage.find<A>(_:)(v14, v15);
      char v43 = v42;
      swift_bridgeObjectRelease();
      if (v43)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v55[3]);
        uint64_t v7 = v55;
        swift_bridgeObjectRelease();
        _NativeDictionary._delete(at:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v7 = v55;
      }
      uint64_t v2 = v53;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v2 = v53;
LABEL_24:
      swift_bridgeObjectRelease();
    }
  }
  int64_t v12 = v10 + 3;
  if (v12 < v56)
  {
    unint64_t v11 = *(void *)(v54 + 8 * v12);
    if (!v11)
    {
      while (1)
      {
        int64_t v6 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          break;
        }
        if (v6 >= v56) {
          goto LABEL_38;
        }
        unint64_t v11 = *(void *)(v54 + 8 * v6);
        ++v12;
        if (v11) {
          goto LABEL_19;
        }
      }
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    int64_t v6 = v12;
    goto LABEL_19;
  }
LABEL_38:
  swift_release();
  uint64_t v45 = swift_bridgeObjectRetain();
  uint64_t v46 = specialized _NativeDictionary.mapValues<A>(_:)(v45);
  if (v52)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v47 = v46;
    swift_bridgeObjectRelease();
    uint64_t v1 = specialized _NativeDictionary.filter(_:)(v47);
    swift_bridgeObjectRelease();
    swift_release();
  }
  return (uint64_t)v1;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance CRRFeatureExtractor()
{
  CRRFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance CRRFeatureExtractor(uint64_t *a1)
{
  return CRRFeatureExtractor.extractImpl(from:)(*a1);
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  a5[(result >> 6) + 8] |= 1 << result;
  unint64_t v5 = (void *)(a5[6] + 16 * result);
  *unint64_t v5 = a2;
  v5[1] = a3;
  *(void *)(a5[7] + 8 * result) = a4;
  uint64_t v6 = a5[2];
  BOOL v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a5[2] = v8;
  }
  return result;
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void *a5)
{
  a5[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v6 = (void *)(a5[6] + 16 * a1);
  *uint64_t v6 = a2;
  v6[1] = a3;
  uint64_t result = outlined init with take of Any(a4, (_OWORD *)(a5[7] + 32 * a1));
  uint64_t v8 = a5[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a5[2] = v10;
  }
  return result;
}

void specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease();
  if (a1)
  {
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_2_25();
    int v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
    OUTLINED_FUNCTION_4_17(v7, v8, v9, v10, v11, v12, v13, v14, v15, v16);
    swift_bridgeObjectRelease();
    _NativeDictionary._delete(at:)();
    *uint64_t v3 = v17;
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_6_16();
}

{
  uint64_t *v2;
  uint64_t *v3;
  char v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  Swift::Int v9;
  uint64_t v10;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v6;
  swift_bridgeObjectRelease();
  if (a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    int v10 = *v3;
    int v8 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    int v9 = *(void *)(v8 + 24);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
    _NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v9);
    swift_bridgeObjectRelease();
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for MLFeatureValue);
    _NativeDictionary._delete(at:)();
    *uint64_t v3 = v10;
    swift_bridgeObjectRelease();
  }
  OUTLINED_FUNCTION_6_16();
}

void specialized Dictionary._Variant.removeValue(forKey:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v4 = v3;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  LOBYTE(a2) = v9;
  swift_bridgeObjectRelease();
  if (a2)
  {
    swift_isUniquelyReferenced_nonNull_native();
    OUTLINED_FUNCTION_2_25();
    int v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
    OUTLINED_FUNCTION_4_17(v10, v11, v12, v13, v14, v15, v16, v17, v19, v20);
    swift_bridgeObjectRelease();
    outlined init with take of Any((_OWORD *)(*(void *)(v21 + 56) + 32 * v8), a3);
    _NativeDictionary._delete(at:)();
    *uint64_t v4 = v21;
    OUTLINED_FUNCTION_6_16();
    swift_bridgeObjectRelease();
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    OUTLINED_FUNCTION_6_16();
  }
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

{
  return specialized Dictionary._Variant.setValue(_:forKey:)(a1, a2, a3, specialized _NativeDictionary.setValue(_:forKey:isUnique:));
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_3_21();
  a4(a1, a2, a3);
  *uint64_t v4 = v11;
  OUTLINED_FUNCTION_6_16();
  return swift_bridgeObjectRelease();
}

uint64_t specialized Dictionary._Variant.setValue(_:forKey:)(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  swift_isUniquelyReferenced_nonNull_native();
  OUTLINED_FUNCTION_3_21();
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, v7);
  *uint64_t v3 = v10;
  OUTLINED_FUNCTION_6_16();
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_7_20();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Int>);
  uint64_t result = OUTLINED_FUNCTION_5_15();
  if ((result & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v10 = result;
LABEL_5:
  int v14 = *v3;
  if (v11)
  {
    *(void *)(v14[7] + 8 * v10) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v14);
    return swift_bridgeObjectRetain();
  }
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  OUTLINED_FUNCTION_7_20();
  if (v9)
  {
    __break(1u);
    goto LABEL_11;
  }
  unint64_t v10 = v7;
  char v11 = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, MLFeatureValue>);
  if (!OUTLINED_FUNCTION_5_15()) {
    goto LABEL_5;
  }
  unint64_t v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v11 & 1) != (v13 & 1))
  {
LABEL_11:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v12;
LABEL_5:
  int v14 = *v3;
  if (v11)
  {
    uint64_t v15 = v14[7];

    *(void *)(v15 + 8 * v10) = a1;
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a3, a1, v14);
    swift_bridgeObjectRetain();
  }
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5 = (void **)v4;
  unint64_t v10 = (void *)*v4;
  unint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  uint64_t v13 = v10[2];
  BOOL v14 = (v12 & 1) == 0;
  Swift::Int v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_13;
  }
  unint64_t v16 = v11;
  char v17 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _NativeDictionary<String, Any>);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(a4 & 1, v15)) {
    goto LABEL_5;
  }
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v17 & 1) != (v19 & 1))
  {
LABEL_13:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  unint64_t v16 = v18;
LABEL_5:
  char v20 = *v5;
  if (v17)
  {
    uint64_t v21 = (_OWORD *)(v20[7] + 32 * v16);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
    return outlined init with take of Any(a1, v21);
  }
  else
  {
    specialized _NativeDictionary._insert(at:key:value:)(v16, a2, a3, a1, v20);
    return (_OWORD *)swift_bridgeObjectRetain();
  }
}

void *specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = (void *)isStackAllocationSafe;
  v10[1] = *MEMORY[0x1E4F143B8];
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1F4188790](isStackAllocationSafe);
    unint64_t v5 = (void *)((char *)v10 - ((8 * v4 + 15) & 0x3FFFFFFFFFFFFFF0));
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v5);
    specialized closure #1 in _NativeDictionary.filter(_:)(v5, v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return (void *)v6;
    }
  }
  else
  {
    unint64_t v7 = (unint64_t *)swift_slowAlloc();
    specialized UnsafeMutablePointer.assign(repeating:count:)(0, v4, v7);
    specialized closure #1 in _NativeDictionary.filter(_:)(v7, v4, v2);
    uint64_t v2 = v8;
    MEMORY[0x1CB78E290](v7, -1, -1);
  }
  return v2;
}

void specialized closure #1 in _NativeDictionary.filter(_:)(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v33 = 0;
  int64_t v3 = 0;
  uint64_t v6 = a3[8];
  unint64_t v4 = a3 + 8;
  uint64_t v5 = v6;
  uint64_t v7 = 1 << *((unsigned char *)v4 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v5;
  char v34 = v4;
  int64_t v35 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      unint64_t v10 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v37 = v3;
      unint64_t v11 = v10 | (v3 << 6);
      goto LABEL_20;
    }
    int64_t v12 = v3 + 1;
    if (__OFADD__(v3, 1)) {
      goto LABEL_49;
    }
    if (v12 >= v35)
    {
LABEL_47:
      specialized _NativeDictionary.extractDictionary(using:count:)(a1, a2, v33, (uint64_t)a3);
      return;
    }
    unint64_t v13 = v34[v12];
    int64_t v14 = v3 + 1;
    if (!v13)
    {
      int64_t v14 = v3 + 2;
      if (v3 + 2 >= v35) {
        goto LABEL_47;
      }
      unint64_t v13 = v34[v14];
      if (!v13)
      {
        int64_t v14 = v3 + 3;
        if (v3 + 3 >= v35) {
          goto LABEL_47;
        }
        unint64_t v13 = v34[v14];
        if (!v13) {
          break;
        }
      }
    }
LABEL_19:
    unint64_t v9 = (v13 - 1) & v13;
    int64_t v37 = v14;
    unint64_t v11 = __clz(__rbit64(v13)) + (v14 << 6);
LABEL_20:
    unint64_t v16 = (uint64_t *)(a3[6] + 16 * v11);
    uint64_t v18 = *v16;
    uint64_t v17 = v16[1];
    char v19 = *(void **)(a3[7] + 8 * v11);
    uint64_t v20 = one-time initialization token for CRR_FEATURES;
    swift_bridgeObjectRetain();
    id v21 = v19;
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v22 = static PersonalInputFeatureNames.CRR_FEATURES;
    uint64_t v23 = *(void *)(static PersonalInputFeatureNames.CRR_FEATURES + 16);
    if (!v23) {
      goto LABEL_43;
    }
    BOOL v24 = *(void *)(static PersonalInputFeatureNames.CRR_FEATURES + 32) == v18
       && *(void *)(static PersonalInputFeatureNames.CRR_FEATURES + 40) == v17;
    if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
      goto LABEL_44;
    }
    if (v23 == 1) {
      goto LABEL_43;
    }
    BOOL v25 = *(void *)(v22 + 48) == v18 && *(void *)(v22 + 56) == v17;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_44:
      swift_bridgeObjectRelease();

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v11;
      BOOL v30 = __OFADD__(v33++, 1);
      int64_t v3 = v37;
      if (v30) {
        goto LABEL_50;
      }
    }
    else
    {
      if (v23 != 2)
      {
        uint64_t v26 = (void *)(v22 + 72);
        uint64_t v27 = 2;
        while (1)
        {
          uint64_t v28 = v27 + 1;
          if (__OFADD__(v27, 1)) {
            break;
          }
          BOOL v29 = *(v26 - 1) == v18 && *v26 == v17;
          if (v29 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
            goto LABEL_44;
          }
          v26 += 2;
          ++v27;
          if (v28 == v23) {
            goto LABEL_43;
          }
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }
LABEL_43:
      swift_bridgeObjectRelease();

      int64_t v3 = v37;
    }
  }
  uint64_t v15 = v3 + 4;
  if (v3 + 4 >= v35) {
    goto LABEL_47;
  }
  unint64_t v13 = v34[v15];
  if (v13)
  {
    int64_t v14 = v3 + 4;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v14 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v14 >= v35) {
      goto LABEL_47;
    }
    unint64_t v13 = v34[v14];
    ++v15;
    if (v13) {
      goto LABEL_19;
    }
  }
LABEL_51:
  __break(1u);
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a3) {
    return MEMORY[0x1E4FBC868];
  }
  uint64_t v4 = a4;
  uint64_t v5 = a3;
  if (*(void *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLMultiArray>);
  uint64_t result = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v9 = result;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  if (a2 < 1) {
    unint64_t v10 = 0;
  }
  else {
    unint64_t v10 = *a1;
  }
  uint64_t v11 = 0;
  uint64_t v12 = result + 64;
  while (1)
  {
    if (v10)
    {
      unint64_t v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v14 = v13 | (v11 << 6);
    }
    else
    {
      uint64_t v15 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        goto LABEL_40;
      }
      if (v15 >= v34) {
        return v9;
      }
      unint64_t v16 = v33[v15];
      ++v11;
      if (!v16)
      {
        uint64_t v11 = v15 + 1;
        if (v15 + 1 >= v34) {
          return v9;
        }
        unint64_t v16 = v33[v11];
        if (!v16)
        {
          uint64_t v11 = v15 + 2;
          if (v15 + 2 >= v34) {
            return v9;
          }
          unint64_t v16 = v33[v11];
          if (!v16)
          {
            uint64_t v17 = v15 + 3;
            if (v17 >= v34) {
              return v9;
            }
            unint64_t v16 = v33[v17];
            if (!v16)
            {
              while (1)
              {
                uint64_t v11 = v17 + 1;
                if (__OFADD__(v17, 1)) {
                  goto LABEL_41;
                }
                if (v11 >= v34) {
                  return v9;
                }
                unint64_t v16 = v33[v11];
                ++v17;
                if (v16) {
                  goto LABEL_24;
                }
              }
            }
            uint64_t v11 = v17;
          }
        }
      }
LABEL_24:
      unint64_t v10 = (v16 - 1) & v16;
      unint64_t v14 = __clz(__rbit64(v16)) + (v11 << 6);
    }
    uint64_t v18 = (uint64_t *)(*(void *)(v4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    id v21 = *(void **)(*(void *)(v4 + 56) + 8 * v14);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    id v22 = v21;
    String.hash(into:)();
    uint64_t result = Hasher._finalize()();
    uint64_t v23 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v24 = result & ~v23;
    unint64_t v25 = v24 >> 6;
    if (((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6))) == 0) {
      break;
    }
    unint64_t v26 = __clz(__rbit64((-1 << v24) & ~*(void *)(v12 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
LABEL_34:
    *(void *)(v12 + ((v26 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v26;
    BOOL v31 = (void *)(*(void *)(v9 + 48) + 16 * v26);
    void *v31 = v20;
    v31[1] = v19;
    *(void *)(*(void *)(v9 + 56) + 8 * v26) = v22;
    ++*(void *)(v9 + 16);
    if (__OFSUB__(v5--, 1)) {
      goto LABEL_39;
    }
    if (!v5) {
      return v9;
    }
  }
  char v27 = 0;
  unint64_t v28 = (unint64_t)(63 - v23) >> 6;
  while (++v25 != v28 || (v27 & 1) == 0)
  {
    BOOL v29 = v25 == v28;
    if (v25 == v28) {
      unint64_t v25 = 0;
    }
    v27 |= v29;
    uint64_t v30 = *(void *)(v12 + 8 * v25);
    if (v30 != -1)
    {
      unint64_t v26 = __clz(__rbit64(~v30)) + (v25 << 6);
      goto LABEL_34;
    }
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for CRRFeatureExtractor()
{
  return &type metadata for CRRFeatureExtractor;
}

void OUTLINED_FUNCTION_0_23()
{
  *(void *)(v2 - 96) = v0;
  *(void *)(v2 - 88) = v1;
}

uint64_t OUTLINED_FUNCTION_1_24()
{
  return StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
}

void OUTLINED_FUNCTION_2_25()
{
  *uint64_t v0 = 0x8000000000000000;
}

void OUTLINED_FUNCTION_3_21()
{
  *uint64_t v0 = 0x8000000000000000;
}

BOOL OUTLINED_FUNCTION_4_17(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v10, v11);
}

BOOL OUTLINED_FUNCTION_5_15()
{
  return _NativeDictionary.ensureUnique(isUnique:capacity:)(v1 & 1, v0);
}

void one-time initialization function for CLIENT_TIME_RANGE()
{
  static PersonalInputFeatureNames.CLIENT_TIME_RANGE = (uint64_t)&outlined read-only object #0 of one-time initialization function for CLIENT_TIME_RANGE;
}

void one-time initialization function for CRR_FEATURES()
{
  static PersonalInputFeatureNames.CRR_FEATURES = (uint64_t)&outlined read-only object #0 of one-time initialization function for CRR_FEATURES;
}

uint64_t *ConstantStepFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static ConstantStepFeatureExtractor.extractedFeatures;
}

uint64_t ConstantStepFeatureExtractor.extractImpl(from:)(double a1)
{
  type metadata accessor for MLMultiArray();
  uint64_t result = static MLMultiArray.makeScalar(from:)(a1);
  uint64_t v4 = result;
  if (!v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, MLMultiArray)>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C9D9D280;
    strcpy((char *)(inited + 32), "constant_step");
    *(_WORD *)(inited + 46) = -4864;
    *(void *)(inited + 48) = v4;
    return Dictionary.init(dictionaryLiteral:)();
  }
  return result;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance ConstantStepFeatureExtractor()
{
  ConstantStepFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for FeatureExtracting.extractImpl(from:) in conformance ConstantStepFeatureExtractor()
{
  return ConstantStepFeatureExtractor.extractImpl(from:)(*v0);
}

ValueMetadata *type metadata accessor for ConstantStepFeatureExtractor()
{
  return &type metadata for ConstantStepFeatureExtractor;
}

SiriCam::PluginToBundleMap_optional __swiftcall PluginToBundleMap.init(rawValue:)(Swift::String rawValue)
{
  uint64_t v2 = v1;
  uint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  result.value = swift_bridgeObjectRelease();
  char v5 = 0;
  char v6 = 14;
  switch(v3)
  {
    case 0:
      goto LABEL_16;
    case 1:
      char v5 = 1;
      goto LABEL_16;
    case 2:
      char v5 = 2;
      goto LABEL_16;
    case 3:
      char v5 = 3;
      goto LABEL_16;
    case 4:
      char v5 = 4;
      goto LABEL_16;
    case 5:
      char v5 = 5;
      goto LABEL_16;
    case 6:
      char v5 = 6;
      goto LABEL_16;
    case 7:
      char v5 = 7;
      goto LABEL_16;
    case 8:
      char v5 = 8;
      goto LABEL_16;
    case 9:
      char v5 = 9;
      goto LABEL_16;
    case 10:
      char v5 = 10;
      goto LABEL_16;
    case 11:
      char v5 = 11;
      goto LABEL_16;
    case 12:
      char v5 = 12;
      goto LABEL_16;
    case 13:
      char v5 = 13;
LABEL_16:
      char v6 = v5;
      break;
    case 14:
      break;
    case 15:
      char v6 = 15;
      break;
    case 16:
      char v6 = 16;
      break;
    case 17:
      char v6 = 17;
      break;
    case 18:
      char v6 = 18;
      break;
    case 19:
      char v6 = 19;
      break;
    case 20:
      char v6 = 20;
      break;
    case 21:
      char v6 = 21;
      break;
    case 22:
      char v6 = 22;
      break;
    case 23:
      char v6 = 23;
      break;
    case 24:
      char v6 = 24;
      break;
    case 25:
      char v6 = 25;
      break;
    case 26:
      char v6 = 26;
      break;
    case 27:
      char v6 = 27;
      break;
    case 28:
      char v6 = 28;
      break;
    case 29:
      char v6 = 29;
      break;
    case 30:
      char v6 = 30;
      break;
    case 31:
      char v6 = 31;
      break;
    default:
      char v6 = 32;
      break;
  }
  *uint64_t v2 = v6;
  return result;
}

void PluginToBundleMap.associatedAppBundleId.getter()
{
  switch(*v0)
  {
    case 4:
    case 7:
    case 0xC:
    case 0xE:
    case 0x13:
    case 0x18:
    case 0x1D:
    case 0x1F:
      OUTLINED_FUNCTION_2_4();
      break;
    default:
      return;
  }
}

void PluginToBundleMap.rawValue.getter()
{
  switch(*v0)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0xF:
    case 0x10:
    case 0x12:
    case 0x13:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x19:
    case 0x1A:
    case 0x1B:
    case 0x1C:
    case 0x1D:
    case 0x1E:
      OUTLINED_FUNCTION_2_4();
      break;
    default:
      return;
  }
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PluginToBundleMap()
{
  return specialized == infix<A>(_:_:)();
}

unint64_t lazy protocol witness table accessor for type PluginToBundleMap and conformance PluginToBundleMap()
{
  unint64_t result = lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap;
  if (!lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PluginToBundleMap and conformance PluginToBundleMap);
  }
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PluginToBundleMap()
{
  return specialized RawRepresentable<>.hashValue.getter();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PluginToBundleMap()
{
  return specialized RawRepresentable<>.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PluginToBundleMap()
{
  return specialized RawRepresentable<>._rawHashValue(seed:)();
}

SiriCam::PluginToBundleMap_optional protocol witness for RawRepresentable.init(rawValue:) in conformance PluginToBundleMap(Swift::String *a1)
{
  return PluginToBundleMap.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance PluginToBundleMap(void *a1@<X8>)
{
  PluginToBundleMap.rawValue.getter();
  *a1 = v2;
  a1[1] = v3;
}

uint64_t getEnumTagSinglePayload for PluginToBundleMap(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xE1)
  {
    if (a2 + 31 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 31) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 32;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x20;
  int v5 = v6 - 32;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for PluginToBundleMap(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 31 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 31) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE0)
  {
    unsigned int v6 = ((a2 - 225) >> 8) + 1;
    *unint64_t result = a2 + 31;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D82BDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 31;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PluginToBundleMap()
{
  return &type metadata for PluginToBundleMap;
}

uint64_t _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_n(uint64_t a1, void (*a2)(void, char *), uint64_t a3)
{
  BOOL v31 = a2;
  uint64_t v32 = a3;
  uint64_t v4 = type metadata accessor for RankedAction();
  uint64_t v30 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4 - 8);
  unsigned int v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
  uint64_t v8 = MEMORY[0x1F4188790](v7);
  BOOL v29 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1F4188790](v8);
  uint64_t v12 = (void *)((char *)v25 - v11);
  MEMORY[0x1F4188790](v10);
  unint64_t v14 = (char *)v25 - v13;
  uint64_t v33 = MEMORY[0x1E4FBC860];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, 0, 0);
  uint64_t v15 = v33;
  uint64_t v16 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  uint64_t v28 = v16;
  v25[1] = a1;
  if (v16)
  {
    uint64_t v17 = 0;
    uint64_t v18 = *(void *)(type metadata accessor for ActionCandidate() - 8);
    uint64_t v19 = a1 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
    uint64_t v26 = *(void *)(v18 + 72);
    char v27 = v6;
    do
    {
      uint64_t v20 = (uint64_t)&v29[*(int *)(v7 + 48)];
      outlined init with copy of ActionCandidate(v19, v20, (void (*)(void))type metadata accessor for ActionCandidate);
      uint64_t v21 = (uint64_t)v12 + *(int *)(v7 + 48);
      *uint64_t v12 = v17;
      outlined init with take of ActionCandidate(v20, v21, (void (*)(void))type metadata accessor for ActionCandidate);
      outlined init with take of (offset: Int, element: ActionCandidate)((uint64_t)v12, (uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      v31(*(void *)v14, &v14[*(int *)(v7 + 48)]);
      outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v14, &demangling cache variable for type metadata for (offset: Int, element: ActionCandidate));
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v15 + 16) + 1, 1);
        uint64_t v15 = v33;
      }
      unint64_t v23 = *(void *)(v15 + 16);
      unint64_t v22 = *(void *)(v15 + 24);
      if (v23 >= v22 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
        uint64_t v15 = v33;
      }
      ++v17;
      *(void *)(v15 + 16) = v23 + 1;
      outlined init with take of ActionCandidate((uint64_t)v27, v15+ ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80))+ *(void *)(v30 + 72) * v23, (void (*)(void))type metadata accessor for RankedAction);
      v19 += v26;
    }
    while (v28 != v17);
  }
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v9[2] = a6;
  swift_bridgeObjectRetain();
  uint64_t v7 = _sSTsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs18EnumeratedSequenceVySay7SiriCam15ActionCandidateVGG_AH06RankedH0Vs5NeverOTg505_sSi7f5Cam15hi5VAA06j34C0VIgynr_Si6offset_AC7elementtAEs5K11OIegnrzr_TRSiAjNIgynr_Tf1cn_n(a6, (void (*)(void, char *))partial apply for closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:), (uint64_t)v9);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v7 = type metadata accessor for CamParse(0);
  uint64_t v8 = MEMORY[0x1F4188790](v7 - 8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v12 = (char *)&v15 - v11;
  uint64_t v13 = type metadata accessor for ActionCandidate();
  uint64_t result = outlined init with copy of ActionCandidate(a2 + *(int *)(v13 + 20), (uint64_t)v12, (void (*)(void))type metadata accessor for CamParse);
  if (__OFSUB__(*(void *)(a3 + 16), a1))
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of ActionCandidate((uint64_t)v12, (uint64_t)v10, (void (*)(void))type metadata accessor for CamParse);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    UUID.init()();
    RankedAction.init(flowHandlerId:parse:score:loggingId:alternatives:userData:)();
    return outlined destroy of CamParse((uint64_t)v12);
  }
  return result;
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:actions:rankerContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = __swift_storeEnumTagSinglePayload((uint64_t)v8, 1, 1, v9);
  uint64_t v15 = FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(v10, v11, v12, v13, v14, a5);
  outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  return v15;
}

uint64_t FallbackRanker.rank(requestId:caarId:rcId:trpId:parses:rankerContext:)()
{
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:actions:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, a3, a4, a5, a6);
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:actions:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return FallbackRanker.rank(requestId:caarId:rcId:actions:rankerContext:)(a1, a2, a3, a4, a5);
}

uint64_t protocol witness for Caar.rank(requestId:caarId:rcId:trpId:parses:rankerContext:) in conformance FallbackRanker(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a6;
}

uint64_t one-time initialization function for caarProvider()
{
  type metadata accessor for CaarProvider();
  swift_allocObject();
  uint64_t result = CaarProvider.().init()();
  static CaarProvider.caarProvider = result;
  return result;
}

uint64_t CaarProvider.().init()()
{
  uint64_t v1 = v0;
  if (one-time initialization token for kLogger != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)kLogger);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C9CFE000, v3, v4, "Initialising Caar Provider", v5, 2u);
    MEMORY[0x1CB78E290](v5, -1, -1);
  }

  if (CamFeatureFlag.isEnabled.getter(4u))
  {
    uint64_t v6 = type metadata accessor for DawnHeuristicScorer();
    uint64_t v7 = &protocol witness table for DawnHeuristicScorer;
  }
  else
  {
    uint64_t v6 = type metadata accessor for HeuristicScorer();
    uint64_t v7 = &protocol witness table for HeuristicScorer;
  }
  v17[3] = v6;
  v17[4] = v7;
  v17[0] = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<TieBreaking.Type>);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C9D9D120;
  *(void *)(v8 + 32) = type metadata accessor for AppLaunchTieBreaker();
  *(void *)(v8 + 40) = &protocol witness table for AppLaunchTieBreaker;
  *(void *)(v8 + 48) = type metadata accessor for DisabledAppShortcutTieBreaker();
  *(void *)(v8 + 56) = &protocol witness table for DisabledAppShortcutTieBreaker;
  *(void *)(v8 + 64) = type metadata accessor for TrialOverridesTieBreaker();
  *(void *)(v8 + 72) = &protocol witness table for TrialOverridesTieBreaker;
  *(void *)(v8 + 80) = type metadata accessor for UserHistoryTieBreaker();
  *(void *)(v8 + 88) = &protocol witness table for UserHistoryTieBreaker;
  outlined init with copy of SignalProviding((uint64_t)v17, (uint64_t)v15);
  uint64_t v9 = type metadata accessor for CodeBasedRankerHandler();
  swift_allocObject();
  uint64_t v10 = CodeBasedRankerHandler.init(scorer:tieBreakerChain:)((uint64_t)v15, v8);
  v16[3] = v9;
  v16[4] = &protocol witness table for CodeBasedRankerHandler;
  v16[0] = v10;
  outlined init with take of (offset: Int, element: ActionCandidate)((uint64_t)v16, v1 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  uint64_t v11 = Logger.logObject.getter();
  uint64_t v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, (os_log_type_t)v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_1C9CFE000, v11, (os_log_type_t)v12, "CAAR Handler created successfully", v13, 2u);
    MEMORY[0x1CB78E290](v13, -1, -1);
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return v1;
}

uint64_t static CaarProvider.caar()@<X0>(uint64_t *a1@<X8>)
{
  return static CaarProvider._caar()(a1);
}

uint64_t static CaarProvider._caar()@<X0>(uint64_t *a1@<X8>)
{
  if (one-time initialization token for caarProvider != -1) {
    swift_once();
  }
  outlined init with copy of CaarHandler?(static CaarProvider.caarProvider + 16, (uint64_t)&v12);
  if (v13)
  {
    outlined init with take of AppSelectionSignalComponent(&v12, (uint64_t)v14);
    if (one-time initialization token for kLogger != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)kLogger);
    int v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_1C9CFE000, v3, v4, "Found existing Caar Handler, updating it.", v5, 2u);
      MEMORY[0x1CB78E290](v5, -1, -1);
    }

    uint64_t v6 = v15;
    uint64_t v7 = v16;
    uint64_t v8 = __swift_project_boxed_opaque_existential_1(v14, v15);
    a1[3] = v6;
    a1[4] = *(void *)(v7 + 8);
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(boxed_opaque_existential_1, v8, v6);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    outlined destroy of (CamLogOutput, CamModelMetadata)((uint64_t)&v12, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
    lazy protocol witness table accessor for type CaarError and conformance CaarError();
    swift_allocError();
    *(void *)uint64_t v11 = 0xD000000000000019;
    *(void *)(v11 + 8) = 0x80000001C9DA4800;
    *(unsigned char *)(v11 + 16) = 0;
    return swift_willThrow();
  }
}

uint64_t type metadata accessor for FallbackRanker()
{
  return self;
}

uint64_t static CaarProvider.getCaar()@<X0>(uint64_t *a1@<X8>)
{
  return static CaarProvider._caar()(a1);
}

uint64_t CaarProvider.deinit()
{
  outlined destroy of (CamLogOutput, CamModelMetadata)(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  return v0;
}

uint64_t CaarProvider.__deallocating_deinit()
{
  outlined destroy of (CamLogOutput, CamModelMetadata)(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  return MEMORY[0x1F4186488](v0, 56, 7);
}

uint64_t type metadata accessor for CaarProvider()
{
  return self;
}

uint64_t method lookup function for CaarProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for CaarProvider);
}

uint64_t partial apply for closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(uint64_t a1, uint64_t a2)
{
  return closure #1 in FallbackRanker.rank(requestId:caarId:rcId:trpId:actions:rankerContext:)(a1, a2, *(void *)(v2 + 16));
}

uint64_t outlined init with take of ActionCandidate(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0_13();
  uint64_t v4 = OUTLINED_FUNCTION_35();
  v5(v4);
  return a2;
}

uint64_t outlined init with copy of ActionCandidate(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_0_13();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined init with copy of CaarHandler?(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CaarHandler?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of (offset: Int, element: ActionCandidate)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  __swift_instantiateConcreteTypeFromMangledName(a3);
  OUTLINED_FUNCTION_0_13();
  uint64_t v4 = OUTLINED_FUNCTION_35();
  v5(v4);
  return a2;
}

uint64_t dispatch thunk of TieBreaking.enabled.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of TieBreaking.forcedDisambiguation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of TieBreaking.init(tie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of TieBreaking.supportedTie()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of TieBreaking.actionBoost(features:loggingId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 40))();
}

uint64_t specialized MutableCollection.subscript.getter(uint64_t result, uint64_t a2)
{
  if (*(void *)(a2 + 16) < result)
  {
    __break(1u);
  }
  else if ((result & 0x8000000000000000) == 0)
  {
    type metadata accessor for RankedAction();
    return swift_bridgeObjectRetain();
  }
  __break(1u);
  return result;
}

uint64_t specialized Array.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((a4 & 1) == 0) {
    goto LABEL_2;
  }
  type metadata accessor for __ContiguousArrayStorageBase();
  swift_unknownObjectRetain_n();
  uint64_t v10 = swift_dynamicCastClass();
  if (!v10)
  {
    swift_unknownObjectRelease();
    uint64_t v10 = MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = *(void *)(v10 + 16);
  swift_release();
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v11 != (a4 >> 1) - a3)
  {
LABEL_11:
    swift_unknownObjectRelease();
LABEL_2:
    specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2, a3, a4);
    uint64_t v9 = v8;
    goto LABEL_9;
  }
  uint64_t v9 = swift_dynamicCastClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
  }
LABEL_9:
  swift_unknownObjectRelease();
  return v9;
}

uint64_t Array<A>.execute(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TopTwo();
  OUTLINED_FUNCTION_1_3();
  uint64_t v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v28 - v12;
  Array<A>.topTwo.getter(a1, (uint64_t)v6);
  if (__swift_getEnumTagSinglePayload((uint64_t)v6, 1, v7) == 1)
  {
    outlined destroy of TopTwo?((uint64_t)v6);
    if (one-time initialization token for ranker != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.ranker);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl(&dword_1C9CFE000, v15, v16, "Fewer than 2 actions, won't tie break.", v17, 2u);
      OUTLINED_FUNCTION_2_2();
    }

    swift_bridgeObjectRetain();
  }
  else
  {
    outlined init with take of TopTwo((uint64_t)v6, (uint64_t)v13, (void (*)(void))type metadata accessor for TopTwo);
    Array<A>.tieBreakScores(tie:)((uint64_t)v11, (uint64_t)v13, a2);
    if (*(void *)(a1 + 16) >= 3uLL)
    {
      uint64_t v18 = specialized MutableCollection.subscript.getter(2, a1);
      specialized Array.init<A>(_:)(v18, v19, v20, v21);
    }
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RankedAction>);
    uint64_t v22 = *(void *)(type metadata accessor for RankedAction() - 8);
    uint64_t v23 = *(void *)(v22 + 72);
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = swift_allocObject();
    *(_OWORD *)(v25 + 16) = xmmword_1C9D9D130;
    uint64_t v26 = v25 + v24;
    _s7SiriCam12RankedActionVWOcTm_1((uint64_t)v11, v26, (void (*)(void))type metadata accessor for RankedAction);
    _s7SiriCam12RankedActionVWOcTm_1((uint64_t)&v11[*(int *)(v7 + 20)], v26 + v23, (void (*)(void))type metadata accessor for RankedAction);
    uint64_t v29 = v25;
    specialized Array.append<A>(contentsOf:)();
    a1 = v29;
    outlined destroy of TopTwo((uint64_t)v11, (void (*)(void))type metadata accessor for TopTwo);
    outlined destroy of TopTwo((uint64_t)v13, (void (*)(void))type metadata accessor for TopTwo);
  }
  return a1;
}

id ScoreBoost.loggingInfo.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01C0]), sel_init);
  if (v6)
  {
    type metadata accessor for MLMultiArray(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaUUID);
    uint64_t v7 = type metadata accessor for ScoreBoost();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1 + *(int *)(v7 + 24), v2);
    id v8 = SISchemaUUID.__allocating_init(nsuuid:)();
    objc_msgSend(v6, sel_setActionCandidateId_, v8);

    objc_msgSend(v6, sel_setBoost_, *(double *)v1);
    if (*(void *)(v1 + 16)) {
      uint64_t v9 = (void *)MEMORY[0x1CB78D210](*(void *)(v1 + 8));
    }
    else {
      uint64_t v9 = 0;
    }
    objc_msgSend(v6, sel_setReason_, v9);
  }
  return v6;
}

uint64_t Array<A>.tieBreakScores(tie:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TopTwo();
  uint64_t v7 = MEMORY[0x1F4188790](v6 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v59 - v9;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  uint64_t v75 = MEMORY[0x1E4FBC860];
  uint64_t v67 = *(void *)(a3 + 16);
  if (v67)
  {
    uint64_t v61 = a1;
    uint64_t v60 = v8;
    swift_bridgeObjectRetain();
    uint64_t v12 = 0;
    *(void *)&long long v13 = 136315650;
    long long v63 = v13;
    uint64_t v62 = MEMORY[0x1E4FBC840] + 8;
    *(void *)&long long v13 = 136315138;
    long long v64 = v13;
    uint64_t v65 = a2;
    unint64_t v66 = v10;
    while (1)
    {
      long long v68 = *(_OWORD *)(a3 + 16 * v12 + 32);
      _s7SiriCam12RankedActionVWOcTm_1(a2, (uint64_t)v10, (void (*)(void))type metadata accessor for TopTwo);
      uint64_t v14 = *((void *)&v68 + 1);
      uint64_t v15 = *(void (**)(char *, void, uint64_t))(*((void *)&v68 + 1) + 24);
      long long v74 = v68;
      __swift_allocate_boxed_opaque_existential_1(v73);
      uint64_t v16 = v68;
      v15(v10, v68, v14);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v16, v14))
      {
        Swift::Bool v17 = TieBreaking.shouldForceSkip()();
        int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v16, v14);
        LODWORD(v68) = v18;
        if (!v17 && (v18 & 1) != 0)
        {
          if (one-time initialization token for ranker != -1) {
            swift_once();
          }
          uint64_t v44 = type metadata accessor for Logger();
          __swift_project_value_buffer(v44, (uint64_t)static Logger.ranker);
          outlined init with copy of SignalProviding((uint64_t)v73, (uint64_t)v71);
          uint64_t v45 = Logger.logObject.getter();
          os_log_type_t v46 = static os_log_type_t.info.getter();
          BOOL v47 = os_log_type_enabled(v45, v46);
          uint64_t v59 = a3;
          if (v47)
          {
            uint64_t v48 = (uint8_t *)swift_slowAlloc();
            uint64_t v49 = swift_slowAlloc();
            uint64_t v70 = v49;
            *(_DWORD *)uint64_t v48 = v64;
            __swift_project_boxed_opaque_existential_1(v71, v72);
            uint64_t v50 = TieBreaking.name.getter();
            uint64_t v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v70);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
            _os_log_impl(&dword_1C9CFE000, v45, v46, "%s supports this tie.", v48, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1CB78E290](v49, -1, -1);
            MEMORY[0x1CB78E290](v48, -1, -1);
          }
          else
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          }

          uint64_t v52 = v60;
          TieBreaking.boostTopTwo(tie:)(v60, v65, v16, v14);
          TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(v68 & 1, 0);
          uint64_t v53 = swift_bridgeObjectRelease();
          MEMORY[0x1CB78D3D0](v53);
          if (*(void *)(v75 + 16) >= *(void *)(v75 + 24) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          _s7SiriCam12RankedActionVWOcTm_1(v52, v61, (void (*)(void))type metadata accessor for TopTwo);
          uint64_t v54 = v75;
          v71[0] = MEMORY[0x1E4FBC860];
          uint64_t v55 = *(void *)(v75 + 16);
          if (v55)
          {
            swift_bridgeObjectRetain_n();
            for (uint64_t i = 0; i != v55; ++i)
            {
              unint64_t v57 = *(void **)(v54 + 8 * i + 32);
              if (v57)
              {
                MEMORY[0x1CB78D3D0](v57);
                if (*(void *)((v71[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v71[0] & 0xFFFFFFFFFFFFFF8)
                                                                                     + 0x18) >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                specialized Array._endMutation()();
              }
            }
            swift_bridgeObjectRelease();
            uint64_t v43 = v71[0];
          }
          else
          {
            swift_bridgeObjectRetain();
            uint64_t v43 = MEMORY[0x1E4FBC860];
          }
          swift_bridgeObjectRelease();
          outlined destroy of TopTwo(v52, (void (*)(void))type metadata accessor for TopTwo);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
          return v43;
        }
        if (one-time initialization token for ranker != -1) {
          swift_once();
        }
        uint64_t v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Logger.ranker);
        outlined init with copy of SignalProviding((uint64_t)v73, (uint64_t)v71);
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = swift_slowAlloc();
          uint64_t v23 = a3;
          uint64_t v24 = swift_slowAlloc();
          uint64_t v70 = v24;
          *(_DWORD *)uint64_t v22 = v63;
          __swift_project_boxed_opaque_existential_1(v71, v72);
          uint64_t v25 = TieBreaking.name.getter();
          *(void *)(v22 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v70);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          *(_WORD *)(v22 + 12) = 1024;
          char v27 = v68;
          *(_DWORD *)(v22 + 14) = v68 & 1;
          *(_WORD *)(v22 + 18) = 1024;
          *(_DWORD *)(v22 + 20) = v17;
          _os_log_impl(&dword_1C9CFE000, v20, v21, "Skipping %s (supported=%{BOOL}d, forceSkipped=%{BOOL}d).", (uint8_t *)v22, 0x18u);
          swift_arrayDestroy();
          uint64_t v28 = v24;
          a3 = v23;
          uint64_t v10 = v66;
          MEMORY[0x1CB78E290](v28, -1, -1);
          uint64_t v29 = v22;
          a2 = v65;
          MEMORY[0x1CB78E290](v29, -1, -1);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);

          char v27 = v68;
        }
        TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(v27 & 1, v17);
        MEMORY[0x1CB78D3D0]();
        if (*(void *)(v75 + 16) >= *(void *)(v75 + 24) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        if (one-time initialization token for ranker != -1) {
          swift_once();
        }
        uint64_t v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.ranker);
        outlined init with copy of SignalProviding((uint64_t)v73, (uint64_t)v71);
        BOOL v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = swift_slowAlloc();
          uint64_t v34 = swift_slowAlloc();
          uint64_t v70 = v34;
          *(_DWORD *)uint64_t v33 = v64;
          __swift_project_boxed_opaque_existential_1(v71, v72);
          uint64_t v35 = TieBreaking.name.getter();
          *(void *)(v33 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v70);
          swift_bridgeObjectRelease();
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
          _os_log_impl(&dword_1C9CFE000, v31, v32, "%s is not enabled.", (uint8_t *)v33, 0xCu);
          swift_arrayDestroy();
          uint64_t v37 = v34;
          uint64_t v10 = v66;
          MEMORY[0x1CB78E290](v37, -1, -1);
          MEMORY[0x1CB78E290](v33, -1, -1);
        }
        else
        {
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v71);
        }
      }
      ++v12;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      if (v67 == v12)
      {
        swift_bridgeObjectRelease();
        uint64_t v38 = v75;
        a1 = v61;
        uint64_t v11 = MEMORY[0x1E4FBC860];
        goto LABEL_23;
      }
    }
  }
  uint64_t v38 = MEMORY[0x1E4FBC860];
LABEL_23:
  _s7SiriCam12RankedActionVWOcTm_1(a2, a1, (void (*)(void))type metadata accessor for TopTwo);
  v73[0] = v11;
  uint64_t v39 = *(void *)(v38 + 16);
  if (v39)
  {
    swift_bridgeObjectRetain_n();
    for (uint64_t j = 0; j != v39; ++j)
    {
      uint64_t v41 = *(void **)(v38 + 8 * j + 32);
      if (v41)
      {
        id v42 = v41;
        MEMORY[0x1CB78D3D0]();
        if (*(void *)((v73[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v73[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v43 = v73[0];
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v43 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v43;
}

uint64_t TieBreaking.name.getter()
{
  return String.init<A>(describing:)();
}

Swift::Bool __swiftcall TieBreaking.shouldForceSkip()()
{
  if ((*(unsigned __int8 (**)(void))(v0 + 16))() == 4) {
    return 0;
  }
  return ForcedDisambiguation.decision()();
}

id TieBreaking.executionMetadata(supported:forceSkipped:boostInfo:)(char a1, char a2)
{
  id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FA01C8]), sel_init);
  if (v4)
  {
    type metadata accessor for MLMultiArray(0, &lazy cache variable for type metadata for CAARSchemaCAARScoreBoost);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v4, sel_setActionCandidateBoosts_, isa);

    uint64_t v6 = TieBreaking.name.getter();
    uint64_t v7 = (void *)MEMORY[0x1CB78D210](v6);
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setTieBreakerName_, v7);

    objc_msgSend(v4, sel_setIsTieBreakerSupported_, a1 & 1);
    objc_msgSend(v4, sel_setWasTieBreakerForcedSkipped_, a2 & 1);
  }
  return v4;
}

uint64_t TieBreaking.boostTopTwo(tie:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v85 = a1;
  uint64_t v8 = type metadata accessor for RankedAction();
  OUTLINED_FUNCTION_1_3();
  MEMORY[0x1F4188790](v9);
  OUTLINED_FUNCTION_5_2();
  os_log_t v81 = (uint64_t *)v10;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v11);
  uint64_t v87 = (char *)&v72 - v12;
  OUTLINED_FUNCTION_2_5();
  uint64_t v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (uint64_t *)((char *)&v72 - v15);
  MEMORY[0x1F4188790](v14);
  int v18 = (char *)&v72 - v17;
  uint64_t v19 = type metadata accessor for ScoreBoost();
  MEMORY[0x1F4188790](v19 - 8);
  OUTLINED_FUNCTION_5_2();
  uint64_t v86 = v20;
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v21);
  int v80 = (uint64_t *)((char *)&v72 - v22);
  OUTLINED_FUNCTION_2_5();
  MEMORY[0x1F4188790](v23);
  unint64_t v83 = (char *)&v72 - v24;
  OUTLINED_FUNCTION_2_5();
  uint64_t v26 = MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v72 - v27;
  uint64_t v29 = MEMORY[0x1F4188790](v26);
  BOOL v31 = (uint64_t *)((char *)&v72 - v30);
  MEMORY[0x1F4188790](v29);
  uint64_t v33 = (char *)&v72 - v32;
  uint64_t v34 = *(void *)(a2 + *(int *)(v8 + 44));
  uint64_t v35 = a2 + *(int *)(v8 + 36);
  unint64_t v36 = *(void (**)(void, uint64_t, uint64_t, uint64_t))(a4 + 40);
  uint64_t v77 = a3;
  uint64_t v78 = v4;
  uint64_t v79 = a4;
  uint64_t v75 = v36;
  uint64_t v76 = a4 + 40;
  v36(v34, v35, a3, a4);
  RankedAction.with(score:)();
  if (one-time initialization token for ranker != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  uint64_t v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.ranker);
  uint64_t v84 = v18;
  _s7SiriCam12RankedActionVWOcTm_1((uint64_t)v18, (uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
  _s7SiriCam12RankedActionVWOcTm_1((uint64_t)v33, (uint64_t)v31, (void (*)(void))type metadata accessor for ScoreBoost);
  id v82 = v33;
  _s7SiriCam12RankedActionVWOcTm_1((uint64_t)v33, (uint64_t)v28, (void (*)(void))type metadata accessor for ScoreBoost);
  uint64_t v74 = v38;
  uint64_t v39 = Logger.logObject.getter();
  int v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, (os_log_type_t)v40))
  {
    int v73 = v40;
    uint64_t v41 = swift_slowAlloc();
    uint64_t v72 = swift_slowAlloc();
    uint64_t v89 = v72;
    *(_DWORD *)uint64_t v41 = 136315650;
    uint64_t v43 = *v16;
    unint64_t v42 = v16[1];
    swift_bridgeObjectRetain();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v43, v42, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TopTwo((uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
    *(_WORD *)(v41 + 12) = 2048;
    uint64_t v88 = *v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of TopTwo((uint64_t)v31, (void (*)(void))type metadata accessor for ScoreBoost);
    *(_WORD *)(v41 + 22) = 2080;
    if (*((void *)v28 + 2))
    {
      uint64_t v44 = *((void *)v28 + 1);
      unint64_t v45 = *((void *)v28 + 2);
    }
    else
    {
      uint64_t v44 = 7104878;
      unint64_t v45 = 0xE300000000000000;
    }
    uint64_t v46 = v86;
    uint64_t v48 = (uint64_t)v87;
    swift_bridgeObjectRetain();
    uint64_t v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v89);
    OUTLINED_FUNCTION_4_18(v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TopTwo((uint64_t)v28, (void (*)(void))type metadata accessor for ScoreBoost);
    _os_log_impl(&dword_1C9CFE000, v39, (os_log_type_t)v73, "Boosted %s by %f, reason: %s", (uint8_t *)v41, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    uint64_t v47 = v85;
  }
  else
  {
    outlined destroy of TopTwo((uint64_t)v16, (void (*)(void))type metadata accessor for RankedAction);
    outlined destroy of TopTwo((uint64_t)v31, (void (*)(void))type metadata accessor for ScoreBoost);
    outlined destroy of TopTwo((uint64_t)v28, (void (*)(void))type metadata accessor for ScoreBoost);

    uint64_t v47 = v85;
    uint64_t v46 = v86;
    uint64_t v48 = (uint64_t)v87;
  }
  uint64_t v50 = type metadata accessor for TopTwo();
  uint64_t v51 = (uint64_t)v83;
  v75(*(void *)(a2 + *(int *)(v50 + 20) + *(int *)(v8 + 44)), a2 + *(int *)(v50 + 20) + *(int *)(v8 + 36), v77, v79);
  RankedAction.with(score:)();
  uint64_t v52 = v81;
  _s7SiriCam12RankedActionVWOcTm_1(v48, (uint64_t)v81, (void (*)(void))type metadata accessor for RankedAction);
  uint64_t v53 = v80;
  _s7SiriCam12RankedActionVWOcTm_1(v51, (uint64_t)v80, (void (*)(void))type metadata accessor for ScoreBoost);
  _s7SiriCam12RankedActionVWOcTm_1(v51, v46, (void (*)(void))type metadata accessor for ScoreBoost);
  uint64_t v54 = Logger.logObject.getter();
  os_log_type_t v55 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v79 = v50;
    uint64_t v56 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    uint64_t v89 = v78;
    *(_DWORD *)uint64_t v56 = 136315650;
    uint64_t v57 = (uint64_t)v52;
    uint64_t v58 = *v52;
    unint64_t v59 = v52[1];
    swift_bridgeObjectRetain();
    uint64_t v88 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, &v89);
    uint64_t v60 = v86;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TopTwo(v57, (void (*)(void))type metadata accessor for RankedAction);
    *(_WORD *)(v56 + 12) = 2048;
    uint64_t v88 = *v53;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of TopTwo((uint64_t)v53, (void (*)(void))type metadata accessor for ScoreBoost);
    *(_WORD *)(v56 + 22) = 2080;
    if (*(void *)(v60 + 16))
    {
      uint64_t v61 = *(void *)(v60 + 8);
      unint64_t v62 = *(void *)(v60 + 16);
    }
    else
    {
      uint64_t v61 = 7104878;
      unint64_t v62 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    uint64_t v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v89);
    OUTLINED_FUNCTION_4_18(v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of TopTwo(v60, (void (*)(void))type metadata accessor for ScoreBoost);
    _os_log_impl(&dword_1C9CFE000, v54, v55, "Boosted %s by %f, reason: %s", (uint8_t *)v56, 0x20u);
    swift_arrayDestroy();
    OUTLINED_FUNCTION_2_2();
    OUTLINED_FUNCTION_2_2();

    uint64_t v48 = (uint64_t)v87;
    uint64_t v63 = (uint64_t)v82;
    uint64_t v47 = v85;
    uint64_t v50 = v79;
  }
  else
  {
    outlined destroy of TopTwo((uint64_t)v52, (void (*)(void))type metadata accessor for RankedAction);
    outlined destroy of TopTwo((uint64_t)v53, (void (*)(void))type metadata accessor for ScoreBoost);
    outlined destroy of TopTwo(v46, (void (*)(void))type metadata accessor for ScoreBoost);

    uint64_t v63 = (uint64_t)v82;
  }
  id v65 = ScoreBoost.loggingInfo.getter();
  id v66 = ScoreBoost.loggingInfo.getter();
  uint64_t v89 = MEMORY[0x1E4FBC860];
  if (v65)
  {
    id v67 = v65;
    MEMORY[0x1CB78D3D0]();
    OUTLINED_FUNCTION_3_22();
    if (v68) {
      OUTLINED_FUNCTION_6_17();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (v66)
  {
    id v69 = v66;
    MEMORY[0x1CB78D3D0]();
    OUTLINED_FUNCTION_3_22();
    if (v68) {
      OUTLINED_FUNCTION_6_17();
    }
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  uint64_t v70 = v89;

  outlined destroy of TopTwo(v51, (void (*)(void))type metadata accessor for ScoreBoost);
  outlined destroy of TopTwo(v63, (void (*)(void))type metadata accessor for ScoreBoost);
  outlined init with take of TopTwo((uint64_t)v84, v47, (void (*)(void))type metadata accessor for RankedAction);
  outlined init with take of TopTwo(v48, v47 + *(int *)(v50 + 20), (void (*)(void))type metadata accessor for RankedAction);
  return v70;
}

uint64_t outlined destroy of TopTwo?(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TopTwo?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for ScoreBoost()
{
  uint64_t result = type metadata singleton initialization cache for ScoreBoost;
  if (!type metadata singleton initialization cache for ScoreBoost) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t _s7SiriCam12RankedActionVWOcTm_1(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of TopTwo(uint64_t a1, void (*a2)(void))
{
  a2(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t))(v3 + 8))(a1);
  return a1;
}

uint64_t outlined init with take of TopTwo(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  a3(0);
  OUTLINED_FUNCTION_1_3();
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(a2, a1);
  return a2;
}

uint64_t *initializeBufferWithCopyOfBuffer for ScoreBoost(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v5 = *(int *)(a3 + 24);
    uint64_t v6 = (char *)a1 + v5;
    uint64_t v7 = (char *)a2 + v5;
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
    swift_bridgeObjectRetain();
    v9(v6, v7, v8);
  }
  return v3;
}

uint64_t destroy for ScoreBoost(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  return v6(v4, v5);
}

uint64_t initializeWithCopy for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *assignWithCopy for ScoreBoost(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t initializeWithTake for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *assignWithTake for ScoreBoost(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1C9D85E44);
}

uint64_t sub_1C9D85E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = a1 + *(int *)(a3 + 24);
    return __swift_getEnumTagSinglePayload(v10, a2, v9);
  }
}

uint64_t storeEnumTagSinglePayload for ScoreBoost(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1C9D85EEC);
}

uint64_t sub_1C9D85EEC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 16) = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = v5 + *(int *)(a4 + 24);
    return __swift_storeEnumTagSinglePayload(v8, a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for ScoreBoost()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t OUTLINED_FUNCTION_4_18(uint64_t a1)
{
  *(void *)(v1 - 96) = a1;
  return v1 - 96;
}

uint64_t OUTLINED_FUNCTION_6_17()
{
  return specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
}

uint64_t CamFeatureFlag.isEnabled.getter(unsigned __int8 a1)
{
  if (one-time initialization token for forceEnabled != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v2 = static CamFeatureFlag.forceEnabled;
  if (*(void *)(static CamFeatureFlag.forceEnabled + 16)
    && (unint64_t v3 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v4 & 1) != 0))
  {
    char v5 = *(unsigned char *)(*(void *)(v2 + 56) + v3);
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    uint64_t v8 = &type metadata for CamFeatureFlag;
    unint64_t v9 = lazy protocol witness table accessor for type CamFeatureFlag and conformance CamFeatureFlag();
    v7[0] = a1;
    char v5 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v5 & 1;
}

const char *CamFeatureFlag.feature.getter(char a1)
{
  uint64_t result = "verbose_logging";
  switch(a1)
  {
    case 1:
      uint64_t result = "word_embeddings";
      break;
    case 2:
      uint64_t result = "intent_disambiguation";
      break;
    case 3:
      uint64_t result = "personal_auto_send";
      break;
    case 4:
      uint64_t result = "cdm_refactor";
      break;
    case 5:
      uint64_t result = "smart_disambiguation";
      break;
    case 6:
      uint64_t result = "disambiguate_all_ranking_ties";
      break;
    case 7:
      uint64_t result = "disambiguate_for_ranking_evaluation";
      break;
    default:
      return result;
  }
  return result;
}

const char *CamFeatureFlag.domain.getter()
{
  return "SiriCam";
}

const char *protocol witness for FeatureFlagsKey.feature.getter in conformance CamFeatureFlag()
{
  return CamFeatureFlag.feature.getter(*v0);
}

uint64_t getEnumTagSinglePayload for CamFeatureFlag(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2)
  {
    int v5 = -1;
    return (v5 + 1);
  }
  if (a2 >= 0xF9)
  {
    if (a2 + 7 >= 0xFFFF00) {
      int v2 = 4;
    }
    else {
      int v2 = 2;
    }
    if ((a2 + 7) >> 8 < 0xFF) {
      int v3 = 1;
    }
    else {
      int v3 = v2;
    }
    if (v3 == 4)
    {
      int v4 = *(_DWORD *)(a1 + 1);
      if (!v4) {
        goto LABEL_17;
      }
    }
    else if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
    }
    else
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
    }
    int v5 = (*a1 | (v4 << 8)) - 8;
    return (v5 + 1);
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v5 = v6 - 8;
  if (!v7) {
    int v5 = -1;
  }
  return (v5 + 1);
}

unsigned char *storeEnumTagSinglePayload for CamFeatureFlag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1C9D86394);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CamFeatureFlag()
{
  return &type metadata for CamFeatureFlag;
}

uint64_t static RankedAction.< infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  double v5 = *(double *)((char *)a1 + v4);
  double v6 = *(double *)((char *)a2 + v4);
  if (v5 < v6) {
    return 1;
  }
  if (v6 < v5) {
    return 0;
  }
  uint64_t v8 = *a1;
  uint64_t v9 = a1[1];
  if (v8 == 0xD000000000000021 && v9 == 0x80000001C9DA20E0) {
    return 0;
  }
  char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
  uint64_t result = 0;
  if ((v10 & 1) == 0)
  {
    uint64_t v12 = *a2;
    uint64_t v11 = a2[1];
    if (v12 == 0xD000000000000021 && v11 == 0x80000001C9DA20E0
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      return 1;
    }
    if (v8 == v12 && v9 == v11) {
      return 0;
    }
    OUTLINED_FUNCTION_34();
    char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = 0;
    if ((v14 & 1) == 0)
    {
      OUTLINED_FUNCTION_34();
      return _stringCompareWithSmolCheck(_:_:expecting:)();
    }
  }
  return result;
}

uint64_t static RankedAction.== infix(_:_:)()
{
  type metadata accessor for RankedAction();
  return static UUID.== infix(_:_:)();
}

unint64_t lazy protocol witness table accessor for type RankedAction and conformance RankedAction()
{
  unint64_t result = lazy protocol witness table cache variable for type RankedAction and conformance RankedAction;
  if (!lazy protocol witness table cache variable for type RankedAction and conformance RankedAction)
  {
    type metadata accessor for RankedAction();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RankedAction and conformance RankedAction);
  }
  return result;
}

uint64_t specialized static Comparable.<= infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  double v5 = *(double *)((char *)a2 + v4);
  double v6 = *(double *)((char *)a1 + v4);
  if (v5 < v6) {
    goto LABEL_2;
  }
  if (v6 < v5
    || (uint64_t v8 = *a2, v9 = a2[1], v8 == 0xD000000000000021) && v9 == 0x80000001C9DA20E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    char v7 = 1;
    return v7 & 1;
  }
  uint64_t v11 = *a1;
  uint64_t v12 = a1[1];
  if (v11 != 0xD000000000000021 || v12 != 0x80000001C9DA20E0)
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v7 = 0;
    if (v13) {
      return v7 & 1;
    }
    BOOL v14 = v8 == v11 && v9 == v12;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      return v7 & 1;
    }
    goto LABEL_7;
  }
LABEL_2:
  char v7 = 0;
  return v7 & 1;
}

uint64_t specialized static Comparable.>= infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for RankedAction() + 28);
  double v5 = *(double *)((char *)a1 + v4);
  double v6 = *(double *)((char *)a2 + v4);
  if (v5 < v6) {
    goto LABEL_2;
  }
  if (v6 < v5
    || (uint64_t v8 = *a1, v9 = a1[1], v8 == 0xD000000000000021) && v9 == 0x80000001C9DA20E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
LABEL_7:
    char v7 = 1;
    return v7 & 1;
  }
  uint64_t v11 = *a2;
  uint64_t v12 = a2[1];
  if (v11 != 0xD000000000000021 || v12 != 0x80000001C9DA20E0)
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)();
    char v7 = 0;
    if (v13) {
      return v7 & 1;
    }
    BOOL v14 = v8 == v11 && v9 == v12;
    if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      char v7 = _stringCompareWithSmolCheck(_:_:expecting:)() ^ 1;
      return v7 & 1;
    }
    goto LABEL_7;
  }
LABEL_2:
  char v7 = 0;
  return v7 & 1;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t one-time initialization function for dispatchQueue()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  int v3 = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1F4188790](v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1F4188790](v5 - 8);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  v7[1] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, MEMORY[0x1E4FBCC10]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E4FBCC58], v0);
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static AutoConfirmProvider.dispatchQueue = result;
  return result;
}

void *one-time initialization function for autoConfirmProvider()
{
  type metadata accessor for AutoConfirmProvider();
  swift_allocObject();
  uint64_t result = (void *)AutoConfirmProvider.().init()();
  static AutoConfirmProvider.autoConfirmProvider = result;
  return result;
}

uint64_t AutoConfirmProvider.autoSendHandler.setter(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_release();
}

uint64_t AutoConfirmProvider.().init()()
{
  uint64_t v1 = v0;
  *(void *)(v0 + 16) = 0;
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.autoSend);
  int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_1C9CFE000, v3, v4, "Initialising AutoConfirmProvider", v5, 2u);
    MEMORY[0x1CB78E290](v5, -1, -1);
  }

  type metadata accessor for AutoSendHandler();
  swift_allocObject();
  *(void *)(v1 + 16) = AutoSendHandler.init()();
  swift_release();
  double v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl(&dword_1C9CFE000, v6, v7, "Successfully initialised AutoConfirmProvider", v8, 2u);
    MEMORY[0x1CB78E290](v8, -1, -1);
  }

  return v1;
}

uint64_t static AutoConfirmProvider.autoSendProvider(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  OUTLINED_FUNCTION_1_2();
  uint64_t v8 = v7;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for DispatchQoS();
  OUTLINED_FUNCTION_1_2();
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for autoSend != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.autoSend);
  int v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v34 = v16;
    uint64_t v21 = v11;
    uint64_t v22 = v6;
    uint64_t v23 = v13;
    uint64_t v24 = a2;
    uint64_t v25 = a1;
    uint64_t v26 = v3;
    uint64_t v27 = v8;
    uint64_t v28 = v20;
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl(&dword_1C9CFE000, v18, v19, "In AutoSend provider", v20, 2u);
    uint64_t v29 = v28;
    uint64_t v8 = v27;
    uint64_t v3 = v26;
    a1 = v25;
    a2 = v24;
    uint64_t v13 = v23;
    uint64_t v6 = v22;
    uint64_t v11 = v21;
    uint64_t v16 = v34;
    MEMORY[0x1CB78E290](v29, -1, -1);
  }

  if (one-time initialization token for dispatchQueue != -1) {
    swift_once();
  }
  uint64_t v30 = (void *)swift_allocObject();
  v30[2] = v3;
  v30[3] = a1;
  void v30[4] = a2;
  aBlock[4] = partial apply for closure #1 in static AutoConfirmProvider.autoSendProvider(completion:);
  aBlock[5] = v30;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_2;
  BOOL v31 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v36 = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, MEMORY[0x1E4FBCB00]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], &demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1CB78D610](0, v16, v11, v31);
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v35);
  return swift_release();
}

uint64_t closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)(uint64_t a1, void (*a2)(void))
{
  if (one-time initialization token for autoConfirmProvider != -1) {
    swift_once();
  }
  if (!*((void *)static AutoConfirmProvider.autoConfirmProvider + 2))
  {
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    __swift_project_value_buffer(v3, (uint64_t)static Logger.autoSend);
    os_log_type_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl(&dword_1C9CFE000, v4, v5, "AutoSend handler is nil. Trying to instantiate again in warmup", v6, 2u);
      MEMORY[0x1CB78E290](v6, -1, -1);
    }

    type metadata accessor for AutoSendHandler();
    swift_allocObject();
    uint64_t v7 = AutoSendHandler.init()();
    AutoConfirmProvider.autoSendHandler.setter(v7);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl(&dword_1C9CFE000, v8, v9, "Successfully instantiated AutoSendHandler", v10, 2u);
      MEMORY[0x1CB78E290](v10, -1, -1);
    }
  }
  uint64_t v11 = *((void *)static AutoConfirmProvider.autoConfirmProvider + 2);
  if (v11)
  {
    swift_retain();
    AutoSendHandler.update()();
    if (v12)
    {
      if (one-time initialization token for autoSend != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      __swift_project_value_buffer(v13, (uint64_t)static Logger.autoSend);
      id v14 = v12;
      id v15 = v12;
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v16, v17))
      {
        int v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v35 = a2;
        uint64_t v19 = swift_slowAlloc();
        uint64_t v36 = v19;
        *(_DWORD *)int v18 = 136315138;
        id v20 = v12;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        uint64_t v21 = String.init<A>(reflecting:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v36);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C9CFE000, v16, v17, "Autosend handler warmup failed with error: %s", v18, 0xCu);
        swift_arrayDestroy();
        uint64_t v23 = v19;
        a2 = v35;
        MEMORY[0x1CB78E290](v23, -1, -1);
        MEMORY[0x1CB78E290](v18, -1, -1);
      }
      else
      {
      }
      uint64_t v36 = 0;
      unint64_t v37 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease();
      uint64_t v36 = 0xD000000000000026;
      unint64_t v37 = 0x80000001C9DA4980;
      id v32 = v12;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v33._uint64_t countAndFlagsBits = String.init<A>(reflecting:)();
      String.append(_:)(v33);
      swift_bridgeObjectRelease();
      char v38 = 0;
      char v41 = 1;
      a2(&v36);
      swift_release();
    }
    else
    {
      if (one-time initialization token for autoSend != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      __swift_project_value_buffer(v28, (uint64_t)static Logger.autoSend);
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v29, v30))
      {
        BOOL v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v31 = 0;
        _os_log_impl(&dword_1C9CFE000, v29, v30, "Successfully warmed up AutoSend handler. Invoking the callback function", v31, 2u);
        MEMORY[0x1CB78E290](v31, -1, -1);
      }

      uint64_t v39 = type metadata accessor for AutoSendHandler();
      int v40 = &protocol witness table for AutoSendHandler;
      uint64_t v36 = v11;
      char v41 = 0;
      swift_retain();
      a2(&v36);
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.autoSend);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl(&dword_1C9CFE000, v25, v26, "Autosend handler warmup failed: cannot warm up nil currentAutoSendHandler", v27, 2u);
      MEMORY[0x1CB78E290](v27, -1, -1);
    }

    uint64_t v36 = 0xD000000000000049;
    unint64_t v37 = 0x80000001C9DA4930;
    char v38 = 0;
    char v41 = 1;
    a2(&v36);
  }
  return outlined destroy of Result<AutoConfirming, AutoConfirmError>((uint64_t)&v36);
}

uint64_t sub_1C9D879D0()
{
  swift_release();
  return MEMORY[0x1F4186498](v0, 40, 7);
}

uint64_t partial apply for closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)()
{
  return closure #1 in static AutoConfirmProvider.autoSendProvider(completion:)(*(void *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t AutoConfirmProvider.deinit()
{
  swift_release();
  return v0;
}

uint64_t AutoConfirmProvider.__deallocating_deinit()
{
  swift_release();
  return MEMORY[0x1F4186488](v0, 24, 7);
}

uint64_t type metadata accessor for AutoConfirmProvider()
{
  return self;
}

uint64_t method lookup function for AutoConfirmProvider(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for AutoConfirmProvider);
}

uint64_t outlined destroy of Result<AutoConfirming, AutoConfirmError>(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<AutoConfirming, AutoConfirmError>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *PersonalContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor()
{
  if (one-time initialization token for extractedFeatures != -1) {
    swift_once();
  }
  return &static PersonalContextFeatureExtractor.extractedFeatures;
}

uint64_t specialized OptionSet.intersection(_:)(uint64_t a1, uint64_t a2)
{
  return a2 & a1;
}

uint64_t specialized OptionSet<>.formIntersection(_:)(uint64_t result)
{
  *v1 &= result;
  return result;
}

BOOL specialized SetAlgebra.isSubset(of:)(uint64_t a1, uint64_t a2)
{
  return (a2 & ~a1) == 0;
}

BOOL specialized SetAlgebra.isSuperset(of:)(uint64_t a1, uint64_t a2)
{
  return (a1 & ~a2) == 0;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, uint64_t, char *))
{
  uint64_t v24 = a2;
  uint64_t v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: SignalValue));
  MEMORY[0x1F4188790](v3);
  os_log_type_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  specialized _NativeDictionary.makeIterator()(v25, a1);
  uint64_t v6 = v25[0];
  int64_t v26 = v25[3];
  unint64_t v7 = v25[4];
  uint64_t v22 = v25[1];
  int64_t v23 = (unint64_t)(v25[2] + 64) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  if (!v7) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v9 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v10 = v9 | (v26 << 6);
  while (1)
  {
    uint64_t v15 = *(void *)(v6 + 56);
    uint64_t v16 = (uint64_t *)(*(void *)(v6 + 48) + 16 * v10);
    uint64_t v17 = *v16;
    uint64_t v18 = v16[1];
    uint64_t v19 = type metadata accessor for SignalValue();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(&v5[*(int *)(v3 + 48)], v15 + *(void *)(*(void *)(v19 - 8) + 72) * v10, v19);
    *(void *)os_log_type_t v5 = v17;
    *((void *)v5 + 1) = v18;
    id v20 = &v5[*(int *)(v3 + 48)];
    swift_bridgeObjectRetain();
    v24(v17, v18, v20);
    uint64_t result = outlined destroy of (key: String, value: SignalValue)((uint64_t)v5);
    if (v7) {
      goto LABEL_2;
    }
LABEL_3:
    int64_t v11 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v11 >= v23) {
      return swift_release();
    }
    unint64_t v12 = *(void *)(v22 + 8 * v11);
    int64_t v13 = v26 + 1;
    if (!v12)
    {
      int64_t v13 = v26 + 2;
      if (v26 + 2 >= v23) {
        return swift_release();
      }
      unint64_t v12 = *(void *)(v22 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v26 + 3;
        if (v26 + 3 >= v23) {
          return swift_release();
        }
        unint64_t v12 = *(void *)(v22 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v26 + 4;
          if (v26 + 4 >= v23) {
            return swift_release();
          }
          unint64_t v12 = *(void *)(v22 + 8 * v13);
          if (!v12)
          {
            int64_t v13 = v26 + 5;
            if (v26 + 5 >= v23) {
              return swift_release();
            }
            unint64_t v12 = *(void *)(v22 + 8 * v13);
            if (!v12)
            {
              int64_t v14 = v26 + 6;
              while (v14 < v23)
              {
                unint64_t v12 = *(void *)(v22 + 8 * v14++);
                if (v12)
                {
                  int64_t v13 = v14 - 1;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v7 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
    int64_t v26 = v13;
  }
  __break(1u);
  return result;
}

unint64_t PersonalContextFeatureExtractor.transformCategorical(_:_:)(uint64_t a1, void *a2, uint64_t a3)
{
  if (!*(void *)(a3 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, (uint64_t)a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    v9._uint64_t countAndFlagsBits = a1;
    v9._object = a2;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = 46;
    v10._object = (void *)0xE100000000000000;
    String.append(_:)(v10);
    unint64_t v8 = 0x80000001C9DA4AA0;
    lazy protocol witness table accessor for type CamError and conformance CamError();
    uint64_t v11 = OUTLINED_FUNCTION_3();
    *unint64_t v12 = 0xD000000000000018;
    v12[1] = 0x80000001C9DA4AA0;
    OUTLINED_FUNCTION_22_9(v11, (uint64_t)v12);
    return v8;
  }
  unint64_t v8 = *(void *)(*(void *)(a3 + 56) + 8 * v6);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t *PersonalContextFeatureExtractor.transformTimeRange(_:)(unint64_t a1, char a2)
{
  if (a2)
  {
    lazy protocol witness table accessor for type CamError and conformance CamError();
    uint64_t v25 = OUTLINED_FUNCTION_3();
    *int64_t v26 = 0xD000000000000019;
    v26[1] = 0x80000001C9DA4A80;
    OUTLINED_FUNCTION_22_9(v25, (uint64_t)v26);
  }
  else
  {
    Dictionary.init(dictionaryLiteral:)();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v4 = OUTLINED_FUNCTION_18_13();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v4, v5 | 0x7361666B61650000, 0xED0000656D695474);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((a1 >> 2) & 1, 0x6F6F6E7265746661, 0xE90000000000006ELL);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v6 = OUTLINED_FUNCTION_18_13();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v6, v7 | 0x695468636E750000, 0xEA0000000000656DLL);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8, 1853317476, 0xE400000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, 0x656D6974796164, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v10, 0x695472656E6E6964, 0xEA0000000000656DLL);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v11 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v11, 1802728804, 0xE400000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v12, 0x676E696E657665, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v13, 0x6D695468636E756CLL, 0xE900000000000065);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, 0x676E696E726F6DLL, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v15, 0x746867696ELL, 0xE500000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = (uint64_t)&v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((a1 >> 12) & 1, 0x756F487970706168, 0xE900000000000072);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v16, 0x656D6954646562, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v17 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v17, 0x746867696E6F74, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v18 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0x646E656B656577, 0xE700000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, 0x6B6565776B726F77, 0xE800000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v20 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v20, 0x6E6974617265706FLL, 0xEE007372756F4867);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, 0x676E696863746977, 0xED00007372756F48);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x676E69727073, 0xE600000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v23 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v23, 0x72656D6D7573, 0xE600000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v24 = OUTLINED_FUNCTION_1_25();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, 0x6E6D75747561, 0xE600000000000000);
    OUTLINED_FUNCTION_2_26();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v28 = (uint64_t)&v28;
    uint64_t v2 = &v28;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((a1 >> 22) & 1, 0x7265746E6977, 0xE600000000000000);
    OUTLINED_FUNCTION_2_26();
  }
  return v2;
}

uint64_t PersonalContextFeatureExtractor.gatherCommonSignals()()
{
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = Dictionary.init(dictionaryLiteral:)();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppSelectionSignalComponent>);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_1C9DA0E60;
  uint64_t v2 = type metadata accessor for DeviceClassSignal();
  uint64_t v3 = MEMORY[0x1E4FA40B8];
  *(void *)(v1 + 56) = v2;
  *(void *)(v1 + 64) = v3;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 32));
  DeviceClassSignal.init()();
  uint64_t v4 = type metadata accessor for ClientHourOfDaySignal();
  uint64_t v5 = MEMORY[0x1E4FA4128];
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 104) = v5;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 72));
  ClientHourOfDaySignal.init()();
  uint64_t v6 = type metadata accessor for ClientTimeRangeSignal();
  uint64_t v7 = MEMORY[0x1E4FA4130];
  *(void *)(v1 + 136) = v6;
  *(void *)(v1 + 144) = v7;
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)(v1 + 112));
  ClientTimeRangeSignal.init()();
  uint64_t v8 = type metadata accessor for ClientDaylightSignal();
  swift_allocObject();
  uint64_t v9 = ClientDaylightSignal.init()();
  uint64_t v10 = MEMORY[0x1E4FA40E8];
  *(void *)(v1 + 176) = v8;
  *(void *)(v1 + 184) = v10;
  *(void *)(v1 + 152) = v9;
  uint64_t v11 = type metadata accessor for ClientCarplaySignal();
  swift_allocObject();
  uint64_t v12 = ClientCarplaySignal.init()();
  uint64_t v13 = MEMORY[0x1E4FA40D0];
  *(void *)(v1 + 216) = v11;
  *(void *)(v1 + 224) = v13;
  *(void *)(v1 + 192) = v12;
  type metadata accessor for SignalGatherer();
  swift_allocObject();
  SignalGatherer.init(signals:candidateAppBundleIds:)();
  swift_retain();
  dispatch thunk of SignalGatherer.gatherValuesAndTimings(completion:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  uint64_t v14 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  return v14;
}

uint64_t closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1, char *a2)
{
  unint64_t v37 = a2;
  uint64_t v3 = type metadata accessor for SignalGatherer.ValuesWithTimings();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SignalGathererError();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x1F4188790](v7);
  uint64_t v36 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v34 - v12;
  MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)v34 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<SignalGatherer.ValuesWithTimings, SignalGathererError>);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Result<SignalGatherer.ValuesWithTimings, SignalGathererError>(a1, (uint64_t)v18);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v18, v7);
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.autoSend);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v20(v13, v15, v7);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      unint64_t v37 = v15;
      uint64_t v24 = (uint8_t *)v23;
      uint64_t v35 = swift_slowAlloc();
      uint64_t v39 = v35;
      *(_DWORD *)uint64_t v24 = 136315138;
      v34[1] = v24 + 4;
      v20(v36, v13, v7);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v27 = *(void (**)(char *, uint64_t))(v8 + 8);
      v27(v13, v7);
      _os_log_impl(&dword_1C9CFE000, v21, v22, "PersonalContextFeatureExtractor: signal gatherer error: %s", v24, 0xCu);
      uint64_t v28 = v35;
      swift_arrayDestroy();
      MEMORY[0x1CB78E290](v28, -1, -1);
      MEMORY[0x1CB78E290](v24, -1, -1);

      return ((uint64_t (*)(char *, uint64_t))v27)(v37, v7);
    }
    else
    {

      Swift::String v33 = *(void (**)(char *, uint64_t))(v8 + 8);
      v33(v13, v7);
      return ((uint64_t (*)(char *, uint64_t))v33)(v15, v7);
    }
  }
  else
  {
    os_log_type_t v30 = v37 + 16;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v18, v3);
    uint64_t v31 = SignalGatherer.ValuesWithTimings.values.getter();
    uint64_t v32 = MEMORY[0x1F4188790](v31);
    v34[-2] = v30;
    specialized Sequence.forEach(_:)(v32, (void (*)(uint64_t, uint64_t, char *))partial apply for closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals());
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void closure #1 in closure #1 in PersonalContextFeatureExtractor.gatherCommonSignals()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SignalValue();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(v7 + 88))(v9, v6) == *MEMORY[0x1E4FA4070])
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 96))(v9, v6);
    uint64_t v10 = *v9;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.setValue(_:forKey:)(v10, a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t))(v7 + 8))(v9, v6);
    if (one-time initialization token for autoSend != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.autoSend);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl(&dword_1C9CFE000, v12, v13, "PersonalContextFeatureExtractor: Ignoring bundle-dependent signal; can only use independent signals in this context",
        v14,
        2u);
      MEMORY[0x1CB78E290](v14, -1, -1);
    }
  }
}

char *PersonalContextFeatureExtractor.extractImpl(from:)()
{
  uint64_t v1 = type metadata accessor for Locale();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = MEMORY[0x1F4188790](v1);
  uint64_t v4 = MEMORY[0x1F4188790](v3);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v46 - v5;
  uint64_t v50 = Dictionary.init(dictionaryLiteral:)();
  static Locale.current.getter();
  uint64_t v7 = Locale.regionCode.getter();
  uint64_t v9 = v8;
  uint64_t v10 = *(void (**)(void))(v2 + 8);
  OUTLINED_FUNCTION_20_10();
  v10();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    uint64_t v16 = OUTLINED_FUNCTION_3();
    *(_OWORD *)uint64_t v17 = xmmword_1C9DA0E70;
LABEL_9:
    OUTLINED_FUNCTION_22_9(v16, v17);
    return v6;
  }
  uint64_t v48 = v7;
  static Locale.current.getter();
  uint64_t v6 = (char *)Locale.languageCode.getter();
  uint64_t v12 = v11;
  OUTLINED_FUNCTION_20_10();
  v10();
  if (!v12)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type CamError and conformance CamError();
    uint64_t v16 = OUTLINED_FUNCTION_3();
    *(void *)uint64_t v17 = 0xD000000000000010;
    *(void *)(v17 + 8) = 0x80000001C9DA49E0;
    goto LABEL_9;
  }
  uint64_t v47 = v6;
  static Locale.current.getter();
  uint64_t v13 = Locale.identifier.getter();
  uint64_t v6 = v14;
  OUTLINED_FUNCTION_20_10();
  v10();
  if (one-time initialization token for top13LocaleMap != -1) {
    swift_once();
  }
  unint64_t v15 = PersonalContextFeatureExtractor.transformCategorical(_:_:)(v13, v6, (uint64_t)top13LocaleMap._rawValue);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v18 = v15;
    swift_bridgeObjectRelease();
    uint64_t v19 = v50;
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v19;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v18, 0x656C61636F6CLL, 0xE600000000000000);
    uint64_t v20 = v49;
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    if (one-time initialization token for top13RegionMap != -1) {
      swift_once();
    }
    unint64_t v21 = PersonalContextFeatureExtractor.transformCategorical(_:_:)(v48, v9, (uint64_t)top13RegionMap._rawValue);
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v49 = v20;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v21, 0x6E6F69676572, 0xE600000000000000);
    swift_bridgeObjectRelease();
    if (one-time initialization token for top13LanguageMap != -1) {
      swift_once();
    }
    PersonalContextFeatureExtractor.transformCategorical(_:_:)((uint64_t)v47, v12, (uint64_t)top13LanguageMap._rawValue);
    swift_bridgeObjectRelease();
    swift_isUniquelyReferenced_nonNull_native();
    uint64_t v22 = OUTLINED_FUNCTION_30_6();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, 0x65676175676E616CLL, 0xE800000000000000);
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v23 = PersonalContextFeatureExtractor.gatherCommonSignals()();
    specialized Dictionary.subscript.getter(0xD000000000000011, 0x80000001C9DA4A00, v23);
    if (v24)
    {
      uint64_t v27 = OUTLINED_FUNCTION_13_13();
      specialized Dictionary._Variant.removeValue(forKey:)(v27 & 0xFFFFFFFFFFFFLL | 0x6143000000000000, 0xED000079616C7072);
    }
    else
    {
      swift_isUniquelyReferenced_nonNull_native();
      uint64_t v25 = OUTLINED_FUNCTION_8_15();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v25, v26 & 0xFFFFFFFFFFFFLL | 0x6143000000000000, 0xED000079616C7072);
      OUTLINED_FUNCTION_14_14();
    }
    specialized Dictionary.subscript.getter(0xD000000000000012, 0x80000001C9DA4A20, v23);
    if (v28)
    {
      uint64_t v31 = OUTLINED_FUNCTION_13_13();
      specialized Dictionary._Variant.removeValue(forKey:)(v31 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 0xEE00746867696C79);
    }
    else
    {
      OUTLINED_FUNCTION_23_10();
      uint64_t v29 = OUTLINED_FUNCTION_8_15();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v30 & 0xFFFFFFFFFFFFLL | 0x6144000000000000, 0xEE00746867696C79);
      OUTLINED_FUNCTION_14_14();
    }
    OUTLINED_FUNCTION_21_9((uint64_t)"raw.clientHourOfDay");
    if (v32)
    {
      uint64_t v35 = OUTLINED_FUNCTION_13_13();
      specialized Dictionary._Variant.removeValue(forKey:)(v35 & 0xFFFFFFFFFFFFLL | 0x6F48000000000000, 0xEF796144664F7275);
    }
    else
    {
      OUTLINED_FUNCTION_23_10();
      uint64_t v33 = OUTLINED_FUNCTION_8_15();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v33, v34 & 0xFFFFFFFFFFFFLL | 0x6F48000000000000, 0xEF796144664F7275);
      OUTLINED_FUNCTION_14_14();
    }
    specialized Dictionary.subscript.getter(0x697665442E776172, 0xEF7373616C436563, v23);
    if (v36)
    {
      specialized Dictionary._Variant.removeValue(forKey:)(0x6C43656369766564, 0xEB00000000737361);
    }
    else
    {
      OUTLINED_FUNCTION_23_10();
      uint64_t v37 = OUTLINED_FUNCTION_30_6();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, 0x6C43656369766564, 0xEB00000000737361);
      OUTLINED_FUNCTION_14_14();
    }
    unint64_t v38 = OUTLINED_FUNCTION_21_9((uint64_t)"raw.clientTimeRange");
    char v40 = v39;
    swift_bridgeObjectRelease();
    char v41 = PersonalContextFeatureExtractor.transformTimeRange(_:)(v38, v40 & 1);
    uint64_t v42 = v50;
    uint64_t v44 = (uint64_t)v41;
    swift_bridgeObjectRetain();
    uint64_t v45 = specialized Dictionary.merging(_:uniquingKeysWith:)(v44, v42);
    swift_bridgeObjectRelease();
    uint64_t v6 = (char *)specialized _NativeDictionary.mapValues<A>(_:)(v45);
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t specialized Dictionary.merging(_:uniquingKeysWith:)(uint64_t a1, uint64_t a2)
{
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = a2;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a1, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v8);
  uint64_t v6 = v8;
  swift_bridgeObjectRelease();
  if (v2) {
    swift_bridgeObjectRelease();
  }
  return v6;
}

uint64_t type metadata accessor for PersonalContextFeatureExtractor()
{
  return self;
}

uint64_t protocol witness for static FeatureExtracting.extractedFeatures.getter in conformance PersonalContextFeatureExtractor()
{
  PersonalContextFeatureExtractor.extractedFeatures.unsafeMutableAddressor();
  return swift_bridgeObjectRetain();
}

char *protocol witness for FeatureExtracting.extractImpl(from:) in conformance PersonalContextFeatureExtractor()
{
  return PersonalContextFeatureExtractor.extractImpl(from:)();
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  if (a3 + 16 * a2 > a1 && a1 + 16 * a2 > a3)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  return swift_arrayInitWithCopy();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_25_7();
  if (!v8 & v7) {
    BOOL v9 = v6 > v3;
  }
  else {
    BOOL v9 = 0;
  }
  if (v9)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  return memcpy(v5, v4, 8 * v2);
}

uint64_t specialized UnsafeMutablePointer.initialize(from:count:)(uint64_t a1, uint64_t a2)
{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  if (v4 + 16 * v3 > v2 && v2 + 16 * v3 > v4)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  if (v4 + 8 * v3 > v2 && v2 + 8 * v3 > v4)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  if (v4 + 40 * v3 > v2 && v2 + 40 * v3 > v4)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(v5);
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  if (v4 + 24 * v3 > v2 && v2 + 24 * v3 > v4)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, MLFeatureValue));
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

{
  unint64_t v2;
  unint64_t v3;
  char v4;
  char v5;
  BOOL v6;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID, [String : MLFeatureValue]));
  OUTLINED_FUNCTION_29_5();
  if (!v5 & v4) {
    unint64_t v6 = v3 > v2;
  }
  else {
    unint64_t v6 = 0;
  }
  if (v6)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

{
  return specialized UnsafeMutablePointer.initialize(from:count:)(a1, a2);
}

{
  unint64_t v2;
  void (*v3)(void);
  unint64_t v4;
  char v5;
  char v6;
  BOOL v7;
  uint64_t result;
  uint64_t vars8;

  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  OUTLINED_FUNCTION_9_17();
  v3(0);
  OUTLINED_FUNCTION_29_5();
  if (!v6 & v5) {
    char v7 = v4 > v2;
  }
  else {
    char v7 = 0;
  }
  if (v7)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  OUTLINED_FUNCTION_6_18();
  return swift_arrayInitWithCopy();
}

void *specialized UnsafeMutablePointer.initialize(from:count:)(char *__src, uint64_t a2, char *__dst)
{
  if (a2 < 0)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_4_19();
LABEL_11:
    uint64_t result = (void *)OUTLINED_FUNCTION_10_13();
    __break(1u);
    return result;
  }
  if (&__dst[16 * a2] > __src && &__src[16 * a2] > __dst)
  {
    OUTLINED_FUNCTION_1_0();
    OUTLINED_FUNCTION_3_23();
    goto LABEL_11;
  }
  return memcpy(__dst, __src, 16 * a2);
}

void specialized Array.append<A>(contentsOf:)()
{
  OUTLINED_FUNCTION_11_16();
  if (v5)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v6 = v4;
  if (!swift_isUniquelyReferenced_nonNull_native() || v3 > *(void *)(v1 + 24) >> 1)
  {
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    uint64_t v1 = v7;
  }
  if (!*(void *)(v6 + 16))
  {
    if (!v2) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  OUTLINED_FUNCTION_32_6();
  if (v9 != v5)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v6 + 32, v2, v1 + 16 * v8 + 32);
  if (!v2)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v10 = *(void *)(v1 + 16);
  BOOL v5 = __OFADD__(v10, v2);
  uint64_t v11 = v10 + v2;
  if (!v5)
  {
    *(void *)(v1 + 16) = v11;
    goto LABEL_11;
  }
LABEL_15:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_11_16();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      char v9 = v4;
    }
    else {
      char v9 = v3;
    }
    specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
    uint64_t v1 = v10;
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  OUTLINED_FUNCTION_32_6();
  if (v11 != v6)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v7 + 32, v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v6 = __OFADD__(v12, v2);
  uint64_t v13 = v12 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  OUTLINED_FUNCTION_11_16();
  if (v6)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v7 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v4 > *(void *)(v1 + 24) >> 1)
  {
    if (v3 <= v4) {
      char v9 = v4;
    }
    else {
      char v9 = v3;
    }
    uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v9, 1, v1);
  }
  if (!*(void *)(v7 + 16))
  {
    if (!v2) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  uint64_t v10 = (*(void *)(v1 + 24) >> 1) - *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(type metadata accessor for RankedAction() - 8);
  if (v10 < v2)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  specialized UnsafeMutablePointer.initialize(from:count:)(v7 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80)), v2);
  if (!v2)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    *uint64_t v0 = v1;
    return;
  }
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v6 = __OFADD__(v12, v2);
  uint64_t v13 = v12 + v2;
  if (!v6)
  {
    *(void *)(v1 + 16) = v13;
    goto LABEL_14;
  }
LABEL_18:
  __break(1u);
}

void specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)()
{
  OUTLINED_FUNCTION_15_14();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Int>);
  uint64_t v4 = OUTLINED_FUNCTION_16_10();
  if (!*(void *)(v1 + 16)) {
    goto LABEL_36;
  }
  OUTLINED_FUNCTION_5_16();
  uint64_t v5 = 0;
  if (!v2) {
    goto LABEL_4;
  }
LABEL_3:
  OUTLINED_FUNCTION_24_11();
  while (1)
  {
    OUTLINED_FUNCTION_17_11();
    if ((v9 & 1) == 0) {
      swift_bridgeObjectRetain();
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_12_12();
    if (v10)
    {
      OUTLINED_FUNCTION_26_8();
      while (++v13 != v14 || (v12 & 1) == 0)
      {
        BOOL v15 = v13 == v14;
        if (v13 == v14) {
          uint64_t v13 = 0;
        }
        v12 |= v15;
        if (*(void *)(v3 + 8 * v13) != -1)
        {
          OUTLINED_FUNCTION_34_3();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_28_6();
LABEL_27:
    OUTLINED_FUNCTION_7_21(v11);
    if (v2) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_38;
    }
    if (v6 >= v20)
    {
      swift_release();
      uint64_t v0 = v19;
      uint64_t v7 = v21;
      goto LABEL_31;
    }
    uint64_t v7 = v21;
    ++v5;
    if (!v21[v6])
    {
      uint64_t v5 = v6 + 1;
      if (v6 + 1 >= v20) {
        goto LABEL_29;
      }
      if (!v21[v5]) {
        break;
      }
    }
LABEL_15:
    OUTLINED_FUNCTION_19_11();
  }
  uint64_t v8 = v6 + 2;
  if (v8 < v20)
  {
    if (!v21[v8])
    {
      while (1)
      {
        uint64_t v5 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_39;
        }
        if (v5 >= v20) {
          goto LABEL_29;
        }
        ++v8;
        if (v21[v5]) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v5 = v8;
    goto LABEL_15;
  }
LABEL_29:
  swift_release();
  uint64_t v0 = v19;
LABEL_31:
  if (v22)
  {
    OUTLINED_FUNCTION_27_7();
    if (v17 != v18) {
      *uint64_t v7 = -1 << v16;
    }
    else {
      OUTLINED_FUNCTION_33_4(v16);
    }
    *(void *)(v1 + 16) = 0;
  }
LABEL_36:
  swift_release();
  *uint64_t v0 = v4;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  char v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  void *v22;
  char v23;

  OUTLINED_FUNCTION_15_14();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, MLFeatureValue>);
  uint64_t v4 = OUTLINED_FUNCTION_16_10();
  if (!*(void *)(v1 + 16)) {
    goto LABEL_36;
  }
  OUTLINED_FUNCTION_5_16();
  uint64_t v5 = 0;
  if (!v2) {
    goto LABEL_4;
  }
LABEL_3:
  OUTLINED_FUNCTION_24_11();
  while (1)
  {
    OUTLINED_FUNCTION_17_11();
    if ((v9 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      char v10 = v0;
    }
    Hasher.init(_seed:)();
    String.hash(into:)();
    Hasher._finalize()();
    OUTLINED_FUNCTION_12_12();
    if (v11)
    {
      OUTLINED_FUNCTION_26_8();
      while (++v14 != v15 || (v13 & 1) == 0)
      {
        uint64_t v16 = v14 == v15;
        if (v14 == v15) {
          uint64_t v14 = 0;
        }
        v13 |= v16;
        if (*(void *)(v3 + 8 * v14) != -1)
        {
          OUTLINED_FUNCTION_34_3();
          goto LABEL_27;
        }
      }
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    OUTLINED_FUNCTION_28_6();
LABEL_27:
    OUTLINED_FUNCTION_7_21(v12);
    if (v2) {
      goto LABEL_3;
    }
LABEL_4:
    uint64_t v6 = v5 + 1;
    if (__OFADD__(v5, 1)) {
      goto LABEL_38;
    }
    if (v6 >= v21)
    {
      swift_release();
      uint64_t v0 = v20;
      uint64_t v7 = v22;
      goto LABEL_31;
    }
    uint64_t v7 = v22;
    ++v5;
    if (!v22[v6])
    {
      uint64_t v5 = v6 + 1;
      if (v6 + 1 >= v21) {
        goto LABEL_29;
      }
      if (!v22[v5]) {
        break;
      }
    }
LABEL_15:
    OUTLINED_FUNCTION_19_11();
  }
  uint64_t v8 = v6 + 2;
  if (v8 < v21)
  {
    if (!v22[v8])
    {
      while (1)
      {
        uint64_t v5 = v8 + 1;
        if (__OFADD__(v8, 1)) {
          goto LABEL_39;
        }
        if (v5 >= v21) {
          goto LABEL_29;
        }
        ++v8;
        if (v22[v5]) {
          goto LABEL_15;
        }
      }
    }
    uint64_t v5 = v8;
    goto LABEL_15;
  }
LABEL_29:
  swift_release();
  uint64_t v0 = v20;
LABEL_31:
  if (v23)
  {
    OUTLINED_FUNCTION_27_7();
    if (v18 != v19) {
      *uint64_t v7 = -1 << v17;
    }
    else {
      OUTLINED_FUNCTION_33_4(v17);
    }
    *(void *)(v1 + 16) = 0;
  }
LABEL_36:
  swift_release();
  *uint64_t v0 = v4;
}