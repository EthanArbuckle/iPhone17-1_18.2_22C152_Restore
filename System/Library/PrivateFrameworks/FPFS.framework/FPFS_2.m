uint64_t sub_24D5203A8(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((a2 >> 62) <= 1) {
    return swift_retain();
  }
  return result;
}

void sub_24D5203C8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v619 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = *(void *)(v619 + 64);
  uint64_t v605 = *(void *)(a2 + 24);
  uint64_t v584 = swift_getAssociatedTypeWitness();
  uint64_t v618 = *(void *)(v584 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v618 + 80);
  uint64_t v560 = v4 + v5;
  uint64_t v622 = v5;
  unint64_t v599 = (v4 + v5) & ~v5;
  unint64_t v609 = *(void *)(v618 + 64);
  unint64_t v603 = v599 + v609;
  if (v609 <= v4) {
    unint64_t v6 = v4;
  }
  else {
    unint64_t v6 = *(void *)(*(void *)(v584 - 8) + 64);
  }
  unint64_t v625 = v6;
  unint64_t v612 = v6 + 1;
  uint64_t v7 = *(unsigned __int8 *)(v619 + 80);
  uint64_t v604 = v7 | v5;
  uint64_t v580 = (v7 | v5) + v6 + 1;
  unint64_t v601 = (v580 & ~(v7 | v5)) + v6 + 1;
  unsigned int v624 = *(_DWORD *)(v619 + 84);
  uint64_t v606 = v3;
  uint64_t v569 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v569 - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v565 = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(v565 - 8);
  uint64_t v11 = v10;
  unsigned int v12 = *(_DWORD *)(v10 + 84);
  unsigned int v558 = v9;
  if (v9 > v12) {
    unsigned int v12 = v9;
  }
  unsigned int v549 = v12;
  if (v12 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  unsigned int v562 = v12;
  if (v12 <= v624) {
    unsigned int v13 = v624;
  }
  else {
    unsigned int v13 = v12;
  }
  uint64_t v582 = sub_24DCC8CE8();
  uint64_t v14 = *(void *)(v582 - 8);
  unsigned int v15 = *(_DWORD *)(v14 + 84);
  if (v15 <= 0x7FFFFFFE) {
    unsigned int v16 = 2147483646;
  }
  else {
    unsigned int v16 = *(_DWORD *)(v14 + 84);
  }
  unsigned int v592 = v16;
  if (v13 > v16) {
    unsigned int v16 = v13;
  }
  unsigned int v548 = v16;
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  unsigned int v557 = v16;
  unsigned int v545 = *(_DWORD *)(v14 + 84);
  unint64_t v610 = v4;
  uint64_t v567 = v4 + v7;
  uint64_t v620 = v7;
  uint64_t v570 = v8;
  uint64_t v566 = v10;
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = *(_DWORD *)(v8 + 80) & 0xF8 | v17 | 7;
  uint64_t v555 = v4 + v18;
  uint64_t v596 = v18;
  uint64_t v568 = *(void *)(v8 + 64) + 7;
  uint64_t v564 = v17 + 8;
  uint64_t v586 = v17;
  unint64_t v616 = ((((*(void *)(v10 + 64) + 7 + ((v17 + 8 + (v568 & 0xFFFFFFFFFFFFFFF8)) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  uint64_t v579 = *(void *)(v582 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v617 = (v19 | 7) + 16;
  uint64_t v581 = v19 + 12;
  uint64_t v20 = *(void *)(v579 + 64);
  uint64_t v577 = v20 + v19;
  uint64_t v578 = v20 + 12;
  unint64_t v21 = (v19
       + 10
       + ((((((v20 + 12 + ((v20 + v19 + ((v19 + 12) & ~v19)) & ~v19)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v19;
  if (!v15) {
    ++v20;
  }
  uint64_t v575 = v20 + 7;
  uint64_t v576 = v19 + 10;
  unint64_t v585 = (((((((((v20 + 7 + v21) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (((v585 + 327 + ((v617 + v616 + ((v4 + v18 + ((v4 + v7) & ~v7)) & ~v18)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v607 = v22 + 16;
  uint64_t v23 = *(_DWORD *)(v8 + 80) & 0xF8 | v17 | 7 | v7 | v19;
  unint64_t v551 = v22 + 16 + v23;
  unint64_t v597 = ((v22 + (v551 & ~v23) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v24 = *(_DWORD *)(v618 + 84);
  uint64_t v571 = swift_getAssociatedTypeWitness();
  uint64_t v25 = *(void *)(v571 - 8);
  uint64_t v26 = v25;
  unsigned int v27 = *(_DWORD *)(v25 + 84);
  uint64_t v574 = swift_getAssociatedTypeWitness();
  uint64_t v28 = *(void *)(v574 - 8);
  uint64_t v29 = v25;
  unsigned int v30 = *(_DWORD *)(v28 + 84);
  unsigned int v546 = v30;
  unsigned int v559 = v27;
  if (v27 > v30) {
    unsigned int v30 = v27;
  }
  uint64_t v31 = v19 | 7;
  uint64_t v32 = v19;
  unsigned int v550 = v30;
  if (v30 <= 0x7FFFFFFE) {
    unsigned int v30 = 2147483646;
  }
  unsigned int v563 = v30;
  if (v30 <= v24) {
    unsigned int v30 = v24;
  }
  if (v30 <= v592) {
    unsigned int v30 = v592;
  }
  unsigned int v547 = v30;
  if (v30 <= 0x7FFFFFFF) {
    unsigned int v30 = 0x7FFFFFFF;
  }
  unsigned int v561 = v30;
  uint64_t v572 = v25;
  uint64_t v33 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v34 = *(_DWORD *)(v25 + 80) & 0xF8 | v33 | 7;
  uint64_t v573 = *(void *)(v29 + 64) + 7;
  uint64_t v593 = v33 + 8;
  unint64_t v35 = ((((*(void *)(*(void *)(v574 - 8) + 64) + 7 + ((v33 + 8 + (v573 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v36 = v4;
  unint64_t v543 = v23 + v4;
  uint64_t v37 = v23;
  unint64_t v38 = v607 + ((v23 + v4) & ~v23);
  unint64_t v39 = (v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v40 = ((v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v41 = (v38 + v622) & ~v622;
  unsigned int v556 = v24;
  if (v24) {
    unint64_t v42 = v609;
  }
  else {
    unint64_t v42 = v609 + 1;
  }
  unint64_t v43 = ((((((v42 + v34 + v41) & ~v34) + v35 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v541 = v42 + v34;
  unint64_t v44 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v45 = *(void *)(v606 - 8);
  uint64_t v46 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v537 = v4 + v46;
  uint64_t v539 = v45;
  uint64_t v47 = *(void *)(v45 + 64);
  if (!*(_DWORD *)(v45 + 84)) {
    ++v47;
  }
  unint64_t v48 = v47 + ((v4 + v46) & ~v46);
  if (v4 > v40) {
    unint64_t v40 = v4;
  }
  if (v43 <= v35 + ((v42 + v34 + v599) & ~v34) + 16) {
    unint64_t v43 = v35 + ((v42 + v34 + v599) & ~v34) + 16;
  }
  if (v44 > v48) {
    unint64_t v48 = v44;
  }
  if (v40 <= v43) {
    unint64_t v40 = v43;
  }
  if (v40 <= v48) {
    unint64_t v40 = v48;
  }
  if (!v624) {
    unint64_t v36 = v4 + 1;
  }
  uint64_t v49 = *(void *)(v605 - 8);
  uint64_t v50 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v538 = v49;
  int v51 = *(_DWORD *)(v49 + 84);
  uint64_t v52 = *(void *)(v49 + 64);
  uint64_t v600 = v609 + v622;
  uint64_t v554 = v609 + v34;
  unint64_t v53 = (((v585 + 327 + ((v617 + v35 + ((v609 + v34 + ((v609 + v622) & ~v622)) & ~v34)) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8)
       + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v54 = v53 + 16;
  uint64_t v55 = v34 | v622;
  uint64_t v56 = v34 | v622 | v32;
  unint64_t v595 = v53 + 16 + v56;
  unint64_t v57 = v53 + (v595 & ~v56);
  if (!v51) {
    ++v52;
  }
  uint64_t v536 = v609 + v50;
  unint64_t v58 = v52 + ((v609 + v50) & ~v50);
  unint64_t v542 = v56 + v609;
  unint64_t v59 = v54 + ((v56 + v609) & ~v56);
  unint64_t v60 = (v59 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v61 = ((v60 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v62 = v620;
  uint64_t v63 = v596;
  unint64_t v64 = ((((((v36 + v63 + ((v59 + v62) & ~v62)) & ~v63) + v616 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v540 = v36 + v596;
  unint64_t v65 = v616 + ((v36 + v63 + ((v609 + v62) & ~v62)) & ~v63) + 16;
  if (v609 > v61) {
    unint64_t v61 = v609;
  }
  if (v64 <= v65) {
    unint64_t v64 = v65;
  }
  unint64_t v66 = ((v60 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v66 > v58) {
    unint64_t v58 = v66;
  }
  if (v61 > v64) {
    unint64_t v64 = v61;
  }
  if (v64 > v58) {
    unint64_t v58 = v64;
  }
  if (v58 + 1 <= v40 + 1) {
    unint64_t v67 = v40 + 1;
  }
  else {
    unint64_t v67 = v58 + 1;
  }
  if (v612 > v625 + 2) {
    unint64_t v68 = v625 + 1;
  }
  else {
    unint64_t v68 = v625 + 2;
  }
  if (v68 <= v603) {
    unint64_t v68 = v603;
  }
  if (v68 <= v601) {
    unint64_t v68 = v601;
  }
  if (v68 <= v597) {
    unint64_t v68 = v597;
  }
  unint64_t v69 = ((v57 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v68 > v69) {
    unint64_t v69 = v68;
  }
  if (v69 <= v607) {
    unint64_t v69 = v607;
  }
  unint64_t v544 = v54;
  if (v69 <= v54) {
    unint64_t v69 = v54;
  }
  if (v69 <= v601 + 2) {
    unint64_t v69 = v601 + 2;
  }
  if (v69 <= ((v625 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v69 = ((v625 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v69 <= (v625 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v69 = (v625 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  uint64_t v70 = v604;
  if (v69 <= ((v604 + 1) & ~v604) + v612) {
    unint64_t v69 = ((v604 + 1) & ~v604) + v612;
  }
  unint64_t v552 = v36;
  unint64_t v598 = v42 + 7;
  unint64_t v594 = ((((*(void *)(*(void *)(v574 - 8) + 64) + 7 + ((v33 + 8 + (v573 & 0xFFFFFFFFFFFFFFF8)) & ~v33)) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16;
  v71 = a1;
  unint64_t v553 = ((((((((v596 + ((((v36 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v596) + v616 + 34) & 0xFFFFFFFFFFFFFFF8)
           + 63) & 0xFFFFFFFFFFFFFFF8)
         + 15) & 0xFFFFFFFFFFFFFFF8)
       + v55
       + 8;
  unint64_t v72 = ((((((((((((v34 + 9 + ((((v42 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v34) + v35 + 34) & 0xFFFFFFFFFFFFFFF8)
              + 63) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 8
          + (v553 & ~v55)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 39) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v69 <= v67 + 1) {
    unint64_t v69 = v67 + 1;
  }
  if (v69 > v72) {
    unint64_t v72 = v69;
  }
  if (v72 <= 0x38) {
    uint64_t v73 = 56;
  }
  else {
    uint64_t v73 = v72;
  }
  uint64_t v602 = v34 + 9;
  if (v73 > 3) {
    goto LABEL_95;
  }
  unsigned int v74 = ((1 << (8 * v73)) + 5) >> (8 * v73);
  if (v74 > 0xFFD6)
  {
    unsigned int v75 = *(_DWORD *)&a1[v73];
    unsigned int v76 = v75 - 41;
    if (v75 < 0x29) {
      goto LABEL_113;
    }
    goto LABEL_100;
  }
  if (v74 <= 0xD6)
  {
LABEL_95:
    unsigned int v75 = a1[v73];
    unsigned int v76 = v75 - 41;
    if (v75 < 0x29) {
      goto LABEL_113;
    }
LABEL_100:
    if (v73 <= 3) {
      uint64_t v77 = v73;
    }
    else {
      uint64_t v77 = 4;
    }
    switch(v77)
    {
      case 1:
        int v78 = *a1;
        if (v73 < 4) {
          goto LABEL_111;
        }
        goto LABEL_112;
      case 2:
        int v78 = *(unsigned __int16 *)a1;
        if (v73 >= 4) {
          goto LABEL_112;
        }
        goto LABEL_111;
      case 3:
        int v78 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v73 >= 4) {
          goto LABEL_112;
        }
        goto LABEL_111;
      case 4:
        int v78 = *(_DWORD *)a1;
        if (v73 < 4) {
LABEL_111:
        }
          v78 |= v76 << (8 * v73);
LABEL_112:
        unsigned int v75 = v78 + 41;
        break;
      default:
        goto LABEL_113;
    }
    goto LABEL_113;
  }
  unsigned int v75 = *(unsigned __int16 *)&a1[v73];
  unsigned int v76 = v75 - 41;
  if (v75 >= 0x29) {
    goto LABEL_100;
  }
LABEL_113:
  uint64_t v79 = ~v622;
  uint64_t v80 = ~v620;
  uint64_t v81 = ~v596;
  uint64_t v82 = ~v586;
  uint64_t v83 = ~v31;
  uint64_t v84 = ~v32;
  uint64_t v85 = ~v37;
  uint64_t v86 = ~v34;
  uint64_t v87 = ~v33;
  uint64_t v88 = ~v56;
  switch(v75)
  {
    case 0u:
    case 0x12u:
      (*(void (**)(unsigned __int8 *, uint64_t))(v619 + 8))(a1, AssociatedTypeWitness);
      v89 = (unsigned __int8 *)((unint64_t)&a1[v560] & v79);
      goto LABEL_469;
    case 1u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v92 = v625;
        }
        else {
          uint64_t v92 = 4;
        }
        switch(v92)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 2u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v93 = v625;
        }
        else {
          uint64_t v93 = 4;
        }
        switch(v93)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 3u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v94 = v625;
        }
        else {
          uint64_t v94 = 4;
        }
        switch(v94)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 4u:
      unsigned int v95 = a1[v625];
      unsigned int v96 = v95 - 2;
      if (v95 < 2)
      {
        uint64_t v99 = AssociatedTypeWitness;
        uint64_t v98 = v584;
        uint64_t v100 = ~v604;
      }
      else
      {
        if (v625 <= 3) {
          uint64_t v97 = v625;
        }
        else {
          uint64_t v97 = 4;
        }
        uint64_t v99 = AssociatedTypeWitness;
        uint64_t v98 = v584;
        uint64_t v100 = ~v604;
        switch(v97)
        {
          case 1:
            int v101 = *a1;
            goto LABEL_395;
          case 2:
            int v101 = *(unsigned __int16 *)a1;
            goto LABEL_395;
          case 3:
            int v101 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_395;
          case 4:
            int v101 = *(_DWORD *)a1;
LABEL_395:
            if (v625 < 4) {
              unsigned int v95 = (v101 | (v96 << (8 * v625))) + 2;
            }
            else {
              unsigned int v95 = v101 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v95 == 1) {
        uint64_t v240 = v618;
      }
      else {
        uint64_t v240 = v619;
      }
      if (v95 == 1) {
        uint64_t v241 = v98;
      }
      else {
        uint64_t v241 = v99;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v240 + 8))(a1, v241, v604, v82);
      v89 = (unsigned __int8 *)((unint64_t)&a1[v580] & v100);
      unsigned int v162 = v89[v625];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v242 = v625;
        }
        else {
          uint64_t v242 = 4;
        }
        switch(v242)
        {
          case 1:
            goto LABEL_461;
          case 2:
            goto LABEL_462;
          case 3:
            goto LABEL_463;
          case 4:
            goto LABEL_464;
          default:
            goto LABEL_468;
        }
      }
      goto LABEL_468;
    case 5u:
      uint64_t v621 = ~v37;
      uint64_t v623 = v80;
      uint64_t v626 = ~v596;
      uint64_t v102 = v624;
      unsigned int v103 = v557;
      uint64_t v525 = ~v586;
      uint64_t v527 = v84;
      unint64_t v587 = v585 + 16;
      if (v624 != v557)
      {
        unint64_t v202 = (unint64_t)&a1[v567] & v80;
        unint64_t v203 = (v202 + v610 + v596) & v626;
        if (v562 == v557)
        {
          uint64_t v106 = v582;
          if (v558 == v562)
          {
            int v104 = (*(uint64_t (**)(unint64_t))(v570 + 48))((v202 + v610 + v596) & v626);
LABEL_479:
            uint64_t v105 = v83;
            goto LABEL_480;
          }
          v235 = (unint64_t *)((v568 + v203) & 0xFFFFFFFFFFFFFFF8);
          if (v549 > 0x7FFFFFFE)
          {
            int v104 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v235 + v564) & v82);
            goto LABEL_479;
          }
          unint64_t v236 = *v235;
          if (v236 >= 0xFFFFFFFF) {
            LODWORD(v236) = -1;
          }
          uint64_t v237 = v619;
          unint64_t v214 = v551;
          uint64_t v105 = v83;
          if ((v236 + 1) < 2) {
            goto LABEL_483;
          }
        }
        else
        {
          unint64_t v212 = v616 + v203;
          uint64_t v106 = v582;
          if ((v548 & 0x80000000) == 0)
          {
            unint64_t v213 = *(void *)(v212 + 8);
            if (v213 >= 0xFFFFFFFF) {
              LODWORD(v213) = -1;
            }
            int v104 = v213 + 1;
            unint64_t v214 = v551;
            uint64_t v105 = v83;
            goto LABEL_481;
          }
          uint64_t v105 = v83;
          uint64_t v258 = (v581 + ((v617 + v212) & v83)) & v84;
          if (v545 > 0x7FFFFFFD)
          {
            int v104 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v258);
            uint64_t v105 = v83;
            goto LABEL_480;
          }
          unint64_t v371 = *(void *)(((v578 + ((v577 + v258) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v371 >= 0xFFFFFFFF) {
            LODWORD(v371) = -1;
          }
          uint64_t v237 = v619;
          unint64_t v214 = v551;
          if ((v371 + 1) < 2) {
            goto LABEL_483;
          }
        }
        unint64_t v271 = (unint64_t)&a1[v214] & v621;
        goto LABEL_582;
      }
      int v104 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v619 + 48))(a1, v624, AssociatedTypeWitness, v82);
      uint64_t v105 = v83;
      uint64_t v106 = v582;
LABEL_480:
      unint64_t v214 = v551;
LABEL_481:
      uint64_t v237 = v619;
      uint64_t v259 = v621;
      if (v104) {
        goto LABEL_494;
      }
      unint64_t v202 = (unint64_t)&a1[v567] & v623;
      unint64_t v203 = (v202 + v610 + v596) & v626;
LABEL_483:
      v260 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v237 + 8);
      uint64_t v261 = v105;
      v260(a1, AssociatedTypeWitness, v70, v82);
      ((void (*)(unint64_t, uint64_t))v260)(v202, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v203, v569);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v203) & 0xFFFFFFFFFFFFFFF8)) & v525, v565);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v611 = v261;
      unint64_t v262 = (v617 + v616 + v203) & v261;
      v263 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
      v263((v581 + v262) & v527, v106);
      unint64_t v264 = (v577 + ((v581 + v262) & v527)) & v527;
      v263(v264, v106);
      swift_bridgeObjectRelease();
      unint64_t v265 = (v576
            + ((((((v578 + v264) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v527;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v265, 1, v106)) {
        v263(v265, v106);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v266 = (uint64_t *)((((((v575 + v265) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v267 = v266[1];
      if ((v267 & 0x3000000000000000) == 0) {
        sub_24D400DCC(*v266, v267);
      }
      swift_bridgeObjectRelease();
      unint64_t v268 = v587 + v262;
      v269 = *(void **)(v587 + v262 + 16);
      LODWORD(v270) = -1;
      if ((unint64_t)v269 < 0xFFFFFFFF) {
        uint64_t v270 = *(void *)(v587 + v262 + 16);
      }
      v71 = a1;
      uint64_t v102 = v624;
      unsigned int v103 = v557;
      if ((int)v270 - 1 < 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v268 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_24D466534(*(void *)((((v268 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v268 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      uint64_t v237 = v619;
      uint64_t v259 = v621;
      uint64_t v105 = v611;
LABEL_494:
      unint64_t v271 = (unint64_t)&v71[v214] & v259;
      if (v102 == v103)
      {
        uint64_t v272 = v105;
        int v273 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v237 + 48))(v271, v102, AssociatedTypeWitness, v82);
        uint64_t v274 = v525;
        uint64_t v275 = v527;
        unint64_t v276 = v585 + 16;
LABEL_597:
        if (v273) {
          return;
        }
        uint64_t v381 = v272;
        unint64_t v372 = (v567 + v271) & v623;
        unint64_t v373 = (v555 + v372) & v626;
        goto LABEL_600;
      }
LABEL_582:
      unint64_t v276 = v585 + 16;
      unint64_t v372 = (v567 + v271) & v623;
      unint64_t v373 = (v555 + v372) & v626;
      BOOL v374 = v562 == v103;
      uint64_t v274 = v525;
      uint64_t v275 = v527;
      if (!v374)
      {
        unint64_t v377 = v373 + v616;
        if ((v548 & 0x80000000) == 0)
        {
          uint64_t v272 = v105;
          unint64_t v378 = *(void *)(v377 + 8);
          if (v378 >= 0xFFFFFFFF) {
            LODWORD(v378) = -1;
          }
          int v273 = v378 + 1;
          goto LABEL_597;
        }
        unint64_t v376 = (v581 + ((v617 + v377) & v105)) & v527;
        if (v545 > 0x7FFFFFFD)
        {
          v375 = *(uint64_t (**)(unint64_t))(v579 + 48);
          uint64_t v272 = v105;
LABEL_596:
          int v273 = v375(v376);
          uint64_t v274 = v525;
          goto LABEL_597;
        }
        unint64_t v380 = *(void *)(((v578 + ((v577 + v376) & v527)) & 0xFFFFFFFFFFFFFFF8) + 8);
        goto LABEL_615;
      }
      if (v558 == v562)
      {
        v375 = *(uint64_t (**)(unint64_t))(v570 + 48);
        unint64_t v376 = (v555 + v372) & v626;
LABEL_595:
        uint64_t v272 = v105;
        goto LABEL_596;
      }
      v379 = (unint64_t *)((v568 + v373) & 0xFFFFFFFFFFFFFFF8);
      if (v549 > 0x7FFFFFFE)
      {
        unint64_t v376 = ((unint64_t)v379 + v564) & v525;
        v375 = *(uint64_t (**)(unint64_t))(v566 + 48);
        goto LABEL_595;
      }
      unint64_t v380 = *v379;
LABEL_615:
      if (v380 >= 0xFFFFFFFF) {
        LODWORD(v380) = -1;
      }
      uint64_t v381 = v105;
      if ((v380 + 1) < 2)
      {
LABEL_600:
        v382 = *(void (**)(unint64_t, uint64_t))(v619 + 8);
        uint64_t v383 = v274;
        v382(v271, AssociatedTypeWitness);
        v382(v372, AssociatedTypeWitness);
        (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v373, v569);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v373) & 0xFFFFFFFFFFFFFFF8)) & v383, v565);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v384 = (v617 + v373 + v616) & v381;
        v385 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
        v385((v581 + v384) & v275, v582);
        unint64_t v386 = (v577 + ((v581 + v384) & v275)) & v275;
        v385(v386, v582);
        swift_bridgeObjectRelease();
        unint64_t v387 = (v576
              + ((((((v578 + v386) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v275;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v387, 1, v582)) {
          v385(v387, v582);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v388 = (uint64_t *)((((((v575 + v387) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v389 = v388[1];
        if ((v389 & 0x3000000000000000) == 0) {
          sub_24D400DCC(*v388, v389);
        }
        swift_bridgeObjectRelease();
        unint64_t v125 = v384 + v276;
        goto LABEL_605;
      }
      return;
    case 6u:
      uint64_t v107 = v83;
      uint64_t v627 = ~v622;
      unint64_t v588 = v585 + 16;
      uint64_t v530 = *(void *)(v574 - 8);
      if (v556 == v561)
      {
        v108 = a1;
        uint64_t v109 = v84;
        uint64_t v110 = v107;
        uint64_t v111 = ~v56;
        int v112 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v618 + 48))(a1, v556, v584, v82);
        uint64_t v88 = v111;
        uint64_t v86 = ~v34;
        uint64_t v107 = v110;
        uint64_t v84 = v109;
        uint64_t v113 = v582;
LABEL_498:
        uint64_t v278 = ~v622;
        if (v112)
        {
LABEL_511:
          unint64_t v292 = (unint64_t)&v108[v595] & v88;
          unsigned int v293 = v561;
          if (v556 == v561)
          {
            uint64_t v294 = v86;
            uint64_t v295 = v84;
            uint64_t v296 = v107;
            int v297 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v618 + 48))((unint64_t)&v108[v595] & v88, v556, v584);
            uint64_t v107 = v296;
            uint64_t v278 = ~v622;
            uint64_t v84 = v295;
            uint64_t v298 = v530;
            uint64_t v299 = v574;
            uint64_t v300 = v593;
LABEL_527:
            if (v297) {
              return;
            }
            unint64_t v302 = (v600 + v292) & v278;
            unint64_t v303 = (v554 + v302) & v294;
            goto LABEL_529;
          }
          uint64_t v300 = v593;
          unint64_t v301 = v594;
          uint64_t v298 = v530;
          uint64_t v299 = v574;
LABEL_514:
          unint64_t v302 = (v600 + v292) & v278;
          uint64_t v294 = v86;
          unint64_t v303 = (v554 + v302) & v86;
          uint64_t v304 = v559;
          if (v563 == v293)
          {
            if (v559 == v563)
            {
              uint64_t v305 = v571;
              v306 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v572 + 48);
              unint64_t v307 = v303;
              uint64_t v528 = v84;
              uint64_t v308 = v107;
LABEL_526:
              uint64_t v313 = v300;
              int v297 = v306(v307, v304, v305);
              uint64_t v300 = v313;
              uint64_t v107 = v308;
              uint64_t v278 = ~v622;
              uint64_t v84 = v528;
              goto LABEL_527;
            }
            v311 = (unint64_t *)((v573 + v303) & 0xFFFFFFFFFFFFFFF8);
            if (v550 > 0x7FFFFFFE)
            {
              unint64_t v307 = ((unint64_t)v311 + v300) & v87;
              v306 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v298 + 48);
              uint64_t v528 = v84;
              uint64_t v304 = v546;
              uint64_t v308 = v107;
              uint64_t v305 = v299;
              goto LABEL_526;
            }
            unint64_t v312 = *v311;
          }
          else
          {
            unint64_t v309 = v303 + v301;
            if ((v547 & 0x80000000) == 0)
            {
              unint64_t v310 = *(void *)(v309 + 8);
              if (v310 >= 0xFFFFFFFF) {
                LODWORD(v310) = -1;
              }
              int v297 = v310 + 1;
              goto LABEL_527;
            }
            unint64_t v307 = (v581 + ((v617 + v309) & v107)) & v84;
            uint64_t v304 = v545;
            if (v545 > 0x7FFFFFFD)
            {
              v306 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v579 + 48);
              uint64_t v528 = v84;
              uint64_t v308 = v107;
              uint64_t v305 = v582;
              goto LABEL_526;
            }
            unint64_t v312 = *(void *)(((v578 + ((v577 + v307) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v312 >= 0xFFFFFFFF) {
            LODWORD(v312) = -1;
          }
          if ((v312 + 1) >= 2) {
            return;
          }
LABEL_529:
          v314 = *(void (**)(unint64_t, uint64_t))(v618 + 8);
          uint64_t v315 = v84;
          uint64_t v316 = v107;
          uint64_t v317 = v300;
          v314(v292, v584);
          v314(v302, v584);
          (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v303, v571);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v298 + 8))((v317 + ((v573 + v303) & 0xFFFFFFFFFFFFFFF8)) & v87, v299);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v119 = (v617 + v303 + v594) & v316;
          uint64_t v131 = v582;
          uint64_t v132 = v579;
          v133 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
          v133((v581 + v119) & v315, v582);
          unint64_t v318 = (v577 + ((v581 + v119) & v315)) & v315;
          v133(v318, v582);
          swift_bridgeObjectRelease();
          unint64_t v135 = (v576
                + ((((((v578 + v318) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v315;
LABEL_530:
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v132 + 48))(v135, 1, v131)) {
            v133(v135, v131);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v319 = (uint64_t *)((((((v575 + v135) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v320 = v319[1];
          if ((v320 & 0x3000000000000000) == 0) {
            sub_24D400DCC(*v319, v320);
          }
LABEL_147:
          swift_bridgeObjectRelease();
          unint64_t v125 = v588 + v119;
LABEL_605:
          v390 = *(void **)(v125 + 16);
          LODWORD(v391) = -1;
          if ((unint64_t)v390 < 0xFFFFFFFF) {
            uint64_t v391 = *(void *)(v125 + 16);
          }
          if ((int)v391 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v125 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          v392 = (uint64_t *)((((v125 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v393 = *v392;
          unint64_t v394 = v392[1];
          sub_24D466534(v393, v394);
          return;
        }
        v279 = v108;
        unint64_t v204 = (unint64_t)&v108[v600] & v627;
        uint64_t v613 = v86;
        unint64_t v205 = (v204 + v609 + v34) & v86;
LABEL_500:
        uint64_t v524 = v88;
        v280 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
        uint64_t v281 = v84;
        uint64_t v282 = v107;
        v280(v279, v584);
        v280((unsigned __int8 *)v204, v584);
        (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v205, v571);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v530 + 8))((v593 + ((v573 + v205) & 0xFFFFFFFFFFFFFFF8)) & v87, v574);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v283 = (v617 + v594 + v205) & v282;
        v284 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
        v284((v581 + v283) & v281, v113);
        unint64_t v285 = (v577 + ((v581 + v283) & v281)) & v281;
        v284(v285, v113);
        swift_bridgeObjectRelease();
        unint64_t v286 = (v576
              + ((((((v578 + v285) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v281;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v286, 1, v113)) {
          v284(v286, v113);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v287 = (uint64_t *)((((((v575 + v286) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v288 = v287[1];
        if ((v288 & 0x3000000000000000) == 0) {
          sub_24D400DCC(*v287, v288);
        }
        swift_bridgeObjectRelease();
        unint64_t v289 = v283 + v588;
        v290 = *(void **)(v283 + v588 + 16);
        LODWORD(v291) = -1;
        if ((unint64_t)v290 < 0xFFFFFFFF) {
          uint64_t v291 = *(void *)(v283 + v588 + 16);
        }
        v108 = a1;
        uint64_t v278 = ~v622;
        if ((int)v291 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v289 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_24D466534(*(void *)((((v289 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v289 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        uint64_t v84 = v281;
        uint64_t v107 = v282;
        uint64_t v86 = v613;
        uint64_t v88 = v524;
        goto LABEL_511;
      }
      unint64_t v204 = (unint64_t)&a1[v600] & v627;
      unint64_t v205 = (v204 + v609 + v34) & v86;
      if (v563 == v561)
      {
        uint64_t v613 = ~v34;
        uint64_t v113 = v582;
        if (v559 == v563)
        {
          v206 = *(uint64_t (**)(unint64_t))(v26 + 48);
          unint64_t v207 = (v204 + v609 + v34) & v86;
          uint64_t v208 = v84;
          uint64_t v209 = v107;
LABEL_497:
          uint64_t v277 = ~v56;
          int v112 = v206(v207);
          uint64_t v88 = v277;
          uint64_t v107 = v209;
          uint64_t v84 = v208;
          v108 = a1;
          uint64_t v86 = v613;
          goto LABEL_498;
        }
        v238 = (unint64_t *)((v573 + v205) & 0xFFFFFFFFFFFFFFF8);
        if (v550 > 0x7FFFFFFE)
        {
          unint64_t v207 = ((unint64_t)v238 + v593) & v87;
          v206 = *(uint64_t (**)(unint64_t))(v28 + 48);
          uint64_t v208 = v84;
          uint64_t v209 = v107;
          goto LABEL_497;
        }
        unint64_t v239 = *v238;
      }
      else
      {
        unint64_t v215 = v594 + v205;
        uint64_t v113 = v582;
        if ((v547 & 0x80000000) == 0)
        {
          unint64_t v216 = *(void *)(v215 + 8);
          if (v216 >= 0xFFFFFFFF) {
            LODWORD(v216) = -1;
          }
          int v112 = v216 + 1;
          v108 = a1;
          goto LABEL_498;
        }
        uint64_t v613 = ~v34;
        unint64_t v207 = (v581 + ((v617 + v215) & v107)) & v84;
        if (v545 > 0x7FFFFFFD)
        {
          v206 = *(uint64_t (**)(unint64_t))(v579 + 48);
          uint64_t v208 = v84;
          uint64_t v209 = v107;
          goto LABEL_497;
        }
        unint64_t v239 = *(void *)(((v578 + ((v577 + v207) & v84)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v239 >= 0xFFFFFFFF) {
        LODWORD(v239) = -1;
      }
      v279 = a1;
      if ((v239 + 1) >= 2)
      {
        unint64_t v301 = v594;
        unint64_t v292 = (unint64_t)&a1[v595] & v88;
        uint64_t v298 = *(void *)(v574 - 8);
        uint64_t v299 = v574;
        uint64_t v300 = v593;
        uint64_t v86 = v613;
        uint64_t v278 = ~v622;
        unsigned int v293 = v561;
        goto LABEL_514;
      }
      goto LABEL_500;
    case 7u:
      unint64_t v588 = v585 + 16;
      v114 = *(void (**)(unsigned __int8 *, uint64_t))(v619 + 8);
      uint64_t v115 = v84;
      uint64_t v116 = v82;
      v114(a1, AssociatedTypeWitness);
      unint64_t v117 = (unint64_t)&a1[v567] & v80;
      v114((unsigned __int8 *)v117, AssociatedTypeWitness);
      unint64_t v118 = (v117 + v610 + v596) & v81;
      (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v118, v569);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v118) & 0xFFFFFFFFFFFFFFF8)) & v116, v565);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v119 = (v617 + v616 + v118) & v83;
      v120 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
      v120((v581 + v119) & v115, v582);
      unint64_t v121 = (v577 + ((v581 + v119) & v115)) & v115;
      v120(v121, v582);
      swift_bridgeObjectRelease();
      unint64_t v122 = (v576
            + ((((((v578 + v121) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v115;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v122, 1, v582)) {
        v120(v122, v582);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v123 = (uint64_t *)((((((v575 + v122) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v124 = v123[1];
      if ((v124 & 0x3000000000000000) == 0) {
        sub_24D400DCC(*v123, v124);
      }
      goto LABEL_147;
    case 8u:
      unint64_t v588 = v585 + 16;
      v126 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
      uint64_t v127 = v84;
      uint64_t v128 = *(void *)(v574 - 8);
      v126(a1, v584);
      unint64_t v129 = (unint64_t)&a1[v600] & v79;
      v126((unsigned __int8 *)v129, v584);
      unint64_t v130 = (v129 + v609 + v34) & ~v34;
      (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v130, v571);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v128 + 8))((v593 + ((v573 + v130) & 0xFFFFFFFFFFFFFFF8)) & v87, v574);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v119 = (v617 + v594 + v130) & v83;
      uint64_t v131 = v582;
      uint64_t v132 = v579;
      v133 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
      v133((v581 + v119) & v127, v582);
      unint64_t v134 = (v577 + ((v581 + v119) & v127)) & v127;
      v133(v134, v582);
      swift_bridgeObjectRelease();
      unint64_t v135 = (v576
            + ((((((v578 + v134) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v127;
      goto LABEL_530;
    case 9u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v136 = v625;
        }
        else {
          uint64_t v136 = 4;
        }
        switch(v136)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0xAu:
      unsigned int v137 = a1[v625];
      unsigned int v138 = v137 - 2;
      if (v137 < 2) {
        goto LABEL_300;
      }
      if (v625 <= 3) {
        uint64_t v139 = v625;
      }
      else {
        uint64_t v139 = 4;
      }
      uint64_t v141 = AssociatedTypeWitness;
      uint64_t v140 = v584;
      uint64_t v142 = ~v604;
      switch(v139)
      {
        case 1:
          goto LABEL_164;
        case 2:
          goto LABEL_357;
        case 3:
          goto LABEL_358;
        case 4:
          goto LABEL_359;
        default:
          goto LABEL_363;
      }
      goto LABEL_363;
    case 0xBu:
      unsigned int v137 = a1[v625];
      unsigned int v138 = v137 - 2;
      if (v137 < 2)
      {
LABEL_300:
        uint64_t v141 = AssociatedTypeWitness;
        uint64_t v140 = v584;
        uint64_t v142 = ~v604;
      }
      else
      {
        if (v625 <= 3) {
          uint64_t v143 = v625;
        }
        else {
          uint64_t v143 = 4;
        }
        uint64_t v141 = AssociatedTypeWitness;
        uint64_t v140 = v584;
        uint64_t v142 = ~v604;
        switch(v143)
        {
          case 1:
LABEL_164:
            int v144 = *a1;
            goto LABEL_360;
          case 2:
LABEL_357:
            int v144 = *(unsigned __int16 *)a1;
            goto LABEL_360;
          case 3:
LABEL_358:
            int v144 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_360;
          case 4:
LABEL_359:
            int v144 = *(_DWORD *)a1;
LABEL_360:
            if (v625 < 4) {
              unsigned int v137 = (v144 | (v138 << (8 * v625))) + 2;
            }
            else {
              unsigned int v137 = v144 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_363:
      if (v137 == 1) {
        uint64_t v229 = v618;
      }
      else {
        uint64_t v229 = v619;
      }
      if (v137 == 1) {
        uint64_t v230 = v140;
      }
      else {
        uint64_t v230 = v141;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v229 + 8))(a1, v230, v604, v82);
      v89 = (unsigned __int8 *)((unint64_t)&a1[v580] & v142);
      unsigned int v231 = v89[v625];
      if (v231 > 1) {
        return;
      }
      if (v231 != 1) {
        goto LABEL_371;
      }
      goto LABEL_469;
    case 0xCu:
      unsigned int v145 = a1[v625];
      unsigned int v146 = v145 - 2;
      if (v145 < 2)
      {
        uint64_t v149 = AssociatedTypeWitness;
        uint64_t v148 = v584;
      }
      else
      {
        if (v625 <= 3) {
          uint64_t v147 = v625;
        }
        else {
          uint64_t v147 = 4;
        }
        uint64_t v149 = AssociatedTypeWitness;
        uint64_t v148 = v584;
        switch(v147)
        {
          case 1:
            int v150 = *a1;
            goto LABEL_412;
          case 2:
            int v150 = *(unsigned __int16 *)a1;
            goto LABEL_412;
          case 3:
            int v150 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_412;
          case 4:
            int v150 = *(_DWORD *)a1;
LABEL_412:
            if (v625 < 4) {
              unsigned int v145 = (v150 | (v146 << (8 * v625))) + 2;
            }
            else {
              unsigned int v145 = v150 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v145 == 1) {
        uint64_t v243 = v618;
      }
      else {
        uint64_t v243 = v619;
      }
      if (v145 == 1) {
        uint64_t v244 = v148;
      }
      else {
        uint64_t v244 = v149;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v243 + 8))(a1, v244, v604, v82);
      v234 = &a1[v625 + 2];
      goto LABEL_422;
    case 0xDu:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v151 = v625;
        }
        else {
          uint64_t v151 = 4;
        }
        switch(v151)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0xEu:
      unsigned int v152 = a1[v625];
      unsigned int v153 = v152 - 2;
      if (v152 < 2) {
        goto LABEL_301;
      }
      if (v625 <= 3) {
        uint64_t v154 = v625;
      }
      else {
        uint64_t v154 = 4;
      }
      uint64_t v156 = AssociatedTypeWitness;
      uint64_t v155 = v584;
      switch(v154)
      {
        case 1:
          goto LABEL_186;
        case 2:
          goto LABEL_372;
        case 3:
          goto LABEL_373;
        case 4:
          goto LABEL_374;
        default:
          goto LABEL_378;
      }
      goto LABEL_378;
    case 0xFu:
      unsigned int v152 = a1[v625];
      unsigned int v153 = v152 - 2;
      if (v152 < 2)
      {
LABEL_301:
        uint64_t v156 = AssociatedTypeWitness;
        uint64_t v155 = v584;
      }
      else
      {
        if (v625 <= 3) {
          uint64_t v157 = v625;
        }
        else {
          uint64_t v157 = 4;
        }
        uint64_t v156 = AssociatedTypeWitness;
        uint64_t v155 = v584;
        switch(v157)
        {
          case 1:
LABEL_186:
            int v158 = *a1;
            goto LABEL_375;
          case 2:
LABEL_372:
            int v158 = *(unsigned __int16 *)a1;
            goto LABEL_375;
          case 3:
LABEL_373:
            int v158 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_375;
          case 4:
LABEL_374:
            int v158 = *(_DWORD *)a1;
LABEL_375:
            if (v625 < 4) {
              unsigned int v152 = (v158 | (v153 << (8 * v625))) + 2;
            }
            else {
              unsigned int v152 = v158 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_378:
      if (v152 == 1) {
        uint64_t v232 = v618;
      }
      else {
        uint64_t v232 = v619;
      }
      if (v152 == 1) {
        uint64_t v233 = v155;
      }
      else {
        uint64_t v233 = v156;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v232 + 8))(a1, v233, v604, v82);
      v234 = &a1[v612];
LABEL_422:
      v245 = *(void **)((unint64_t)(v234 + 7) & 0xFFFFFFFFFFFFFFF8);
      goto LABEL_424;
    case 0x10u:
      unint64_t v159 = *((void *)a1 + 2);
      if (v159 >> 60 != 15)
      {
        uint64_t v160 = *((void *)a1 + 1);
        sub_24D400DCC(v160, v159);
      }
      return;
    case 0x11u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v161 = v625;
        }
        else {
          uint64_t v161 = 4;
        }
        switch(v161)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x13u:
      v89 = (unsigned __int8 *)((unint64_t)&a1[v604 + 1] & ~v604);
      unsigned int v162 = v89[v625];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v164 = v625;
        }
        else {
          uint64_t v164 = 4;
        }
        switch(v164)
        {
          case 1:
            goto LABEL_461;
          case 2:
            goto LABEL_462;
          case 3:
            goto LABEL_463;
          case 4:
            goto LABEL_464;
          default:
            goto LABEL_468;
        }
      }
      goto LABEL_468;
    case 0x14u:
    case 0x15u:
      swift_release();
      return;
    case 0x18u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v165 = v625;
        }
        else {
          uint64_t v165 = 4;
        }
        switch(v165)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x19u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v166 = v625;
        }
        else {
          uint64_t v166 = 4;
        }
        switch(v166)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Au:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v167 = v625;
        }
        else {
          uint64_t v167 = 4;
        }
        switch(v167)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Bu:
      uint64_t v168 = ~v622;
      uint64_t v169 = ~v56;
      uint64_t v170 = ~v620;
      unsigned int v171 = a1[v67];
      unsigned int v172 = v171 - 2;
      if (v171 >= 2)
      {
        if (v67 <= 3) {
          uint64_t v173 = v67;
        }
        else {
          uint64_t v173 = 4;
        }
        switch(v173)
        {
          case 1:
            int v174 = *a1;
            goto LABEL_428;
          case 2:
            int v174 = *(unsigned __int16 *)a1;
            goto LABEL_428;
          case 3:
            int v174 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_428;
          case 4:
            int v174 = *(_DWORD *)a1;
LABEL_428:
            if (v67 < 4) {
              unsigned int v171 = (v174 | (v172 << (8 * v67))) + 2;
            }
            else {
              unsigned int v171 = v174 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v526 = ~v586;
      if (v171 == 1)
      {
        unsigned int v246 = a1[v58];
        unsigned int v247 = v246 - 8;
        if (v246 >= 8)
        {
          if (v58 <= 3) {
            uint64_t v248 = v58;
          }
          else {
            uint64_t v248 = 4;
          }
          switch(v248)
          {
            case 1:
              int v249 = *a1;
              goto LABEL_538;
            case 2:
              int v249 = *(unsigned __int16 *)a1;
              goto LABEL_538;
            case 3:
              int v249 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_538;
            case 4:
              int v249 = *(_DWORD *)a1;
LABEL_538:
              if (v58 < 4) {
                unsigned int v246 = (v249 | (v247 << (8 * v58))) + 8;
              }
              else {
                unsigned int v246 = v249 + 8;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v321 = ~v50;
        uint64_t v198 = v618;
        switch(v246)
        {
          case 1u:
            uint64_t v629 = ~v622;
            uint64_t v614 = ~v34;
            uint64_t v529 = v84;
            uint64_t v533 = *(void *)(v574 - 8);
            uint64_t v330 = v83;
            v331 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
            v331(a1, v584);
            unint64_t v332 = (unint64_t)&a1[v542] & v169;
            if (v556 == v561)
            {
              int v333 = (*(uint64_t (**)(unint64_t))(v618 + 48))(v332);
LABEL_729:
              uint64_t v399 = v330;
LABEL_730:
              uint64_t v457 = v619;
              if (v333) {
                goto LABEL_743;
              }
              unint64_t v397 = (v600 + v332) & v629;
              unint64_t v398 = (v554 + v397) & v614;
              goto LABEL_732;
            }
            unint64_t v397 = (v600 + v332) & v629;
            unint64_t v398 = (v554 + v397) & v614;
            uint64_t v399 = v330;
            if (v563 == v561)
            {
              if (v559 == v563)
              {
                int v333 = (*(uint64_t (**)(unint64_t))(v572 + 48))((v554 + v397) & v614);
                goto LABEL_729;
              }
              v429 = (unint64_t *)((v573 + v398) & 0xFFFFFFFFFFFFFFF8);
              if (v550 > 0x7FFFFFFE)
              {
                int v333 = (*(uint64_t (**)(unint64_t))(v533 + 48))(((unint64_t)v429 + v593) & v87);
                goto LABEL_729;
              }
              unint64_t v430 = *v429;
            }
            else
            {
              unint64_t v415 = v398 + v594;
              if ((v547 & 0x80000000) == 0)
              {
                unint64_t v416 = *(void *)(v415 + 8);
                if (v416 >= 0xFFFFFFFF) {
                  LODWORD(v416) = -1;
                }
                int v333 = v416 + 1;
                goto LABEL_730;
              }
              uint64_t v440 = (v581 + ((v617 + v415) & v330)) & v529;
              if (v545 > 0x7FFFFFFD)
              {
                int v333 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v440);
                goto LABEL_729;
              }
              unint64_t v430 = *(void *)(((v578 + ((v577 + v440) & v529)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v430 >= 0xFFFFFFFF) {
              LODWORD(v430) = -1;
            }
            uint64_t v457 = v619;
            if ((v430 + 1) < 2)
            {
LABEL_732:
              uint64_t v458 = v399;
              v331((unsigned __int8 *)v332, v584);
              v331((unsigned __int8 *)v397, v584);
              (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v398, v571);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v533 + 8))((v593 + ((v573 + v398) & 0xFFFFFFFFFFFFFFF8)) & v87, v574);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v459 = (v617 + v398 + v594) & v458;
              v460 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
              v460((v581 + v459) & v529, v582);
              unint64_t v461 = (v577 + ((v581 + v459) & v529)) & v529;
              v460(v461, v582);
              swift_bridgeObjectRelease();
              unint64_t v462 = (v576
                    + ((((((v578 + v461) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v529;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v462, 1, v582)) {
                v460(v462, v582);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v463 = (uint64_t *)((((((v575 + v462) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v464 = v463[1];
              if ((v464 & 0x3000000000000000) == 0) {
                sub_24D400DCC(*v463, v464);
              }
              swift_bridgeObjectRelease();
              unint64_t v465 = v459 + v585 + 16;
              v466 = *(void **)(v465 + 16);
              LODWORD(v467) = -1;
              if ((unint64_t)v466 < 0xFFFFFFFF) {
                uint64_t v467 = *(void *)(v465 + 16);
              }
              if ((int)v467 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v465 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_24D466534(*(void *)((((v465 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v465 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              uint64_t v457 = v619;
            }
LABEL_743:
            unint64_t v468 = (v332 + v620 + v544) & v170;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v457 + 48))(v468, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v619 + 8))(v468, AssociatedTypeWitness); {
            unint64_t v469 = (v540 + v468) & v81;
            }
            if (v558 == v562)
            {
              int v470 = (*(uint64_t (**)(unint64_t))(v570 + 48))(v469);
            }
            else
            {
              v471 = (uint64_t *)((v568 + v469) & 0xFFFFFFFFFFFFFFF8);
              if (v549 <= 0x7FFFFFFE)
              {
                uint64_t v472 = *v471;
                if ((unint64_t)*v471 >= 0xFFFFFFFF) {
                  LODWORD(v472) = -1;
                }
                if ((v472 + 1) >= 2) {
                  goto LABEL_756;
                }
                goto LABEL_755;
              }
              int v470 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v471 + v564) & v526);
            }
            if (v470)
            {
LABEL_756:
              unint64_t v473 = v469 + v616;
LABEL_820:
              unint64_t v496 = v473 + 15;
              goto LABEL_821;
            }
            v471 = (uint64_t *)((v568 + v469) & 0xFFFFFFFFFFFFFFF8);
LABEL_755:
            (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v469, v569);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v566 + 8))(((unint64_t)v471 + v564) & v526, v565);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_756;
          case 2u:
            (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v618 + 8))(a1, v584, v168);
            unint64_t v334 = (unint64_t)&a1[v609 + v620] & v80;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v619 + 48))(v334, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v619 + 8))(v334, AssociatedTypeWitness); {
            unint64_t v335 = (v540 + v334) & v81;
            }
            if (v558 == v562)
            {
              int v336 = (*(uint64_t (**)(unint64_t))(v570 + 48))(v335);
LABEL_661:
              if (v336) {
                goto LABEL_664;
              }
              v400 = (uint64_t *)((v568 + v335) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_663;
            }
            v400 = (uint64_t *)((v568 + v335) & 0xFFFFFFFFFFFFFFF8);
            if (v549 > 0x7FFFFFFE)
            {
              int v336 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v400 + v564) & v526);
              goto LABEL_661;
            }
            uint64_t v401 = *v400;
            if ((unint64_t)*v400 >= 0xFFFFFFFF) {
              LODWORD(v401) = -1;
            }
            if ((v401 + 1) < 2)
            {
LABEL_663:
              (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v335, v569);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v566 + 8))(((unint64_t)v400 + v564) & v526, v565);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
LABEL_664:
            unint64_t v417 = v616;
            goto LABEL_682;
          case 3u:
            uint64_t v630 = ~v622;
            uint64_t v337 = ~v34;
            uint64_t v534 = *(void *)(v574 - 8);
            uint64_t v338 = v83;
            uint64_t v339 = v84;
            v340 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
            v340(a1, v584);
            unint64_t v341 = (unint64_t)&a1[v542] & v169;
            if (v556 == v561)
            {
              int v342 = (*(uint64_t (**)(unint64_t))(v618 + 48))(v341);
              uint64_t v343 = v339;
              uint64_t v344 = v83;
LABEL_759:
              uint64_t v419 = v337;
LABEL_760:
              if (v342) {
                goto LABEL_354;
              }
              unint64_t v402 = (v600 + v341) & v630;
              unint64_t v403 = (v554 + v402) & v419;
              goto LABEL_762;
            }
            unint64_t v402 = (v600 + v341) & v630;
            unint64_t v403 = (v554 + v402) & v337;
            uint64_t v343 = v339;
            uint64_t v344 = v338;
            if (v563 == v561)
            {
              if (v559 == v563)
              {
                int v342 = (*(uint64_t (**)(unint64_t))(v572 + 48))((v554 + v402) & v337);
LABEL_758:
                uint64_t v344 = v338;
                uint64_t v343 = v339;
                goto LABEL_759;
              }
              v431 = (unint64_t *)((v573 + v403) & 0xFFFFFFFFFFFFFFF8);
              if (v550 > 0x7FFFFFFE)
              {
                int v342 = (*(uint64_t (**)(unint64_t))(v534 + 48))(((unint64_t)v431 + v593) & v87);
                goto LABEL_758;
              }
              unint64_t v432 = *v431;
            }
            else
            {
              unint64_t v418 = v403 + v594;
              if ((v547 & 0x80000000) == 0)
              {
                uint64_t v419 = v337;
                unint64_t v420 = *(void *)(v418 + 8);
                if (v420 >= 0xFFFFFFFF) {
                  LODWORD(v420) = -1;
                }
                int v342 = v420 + 1;
                goto LABEL_760;
              }
              uint64_t v441 = (v581 + ((v617 + v418) & v338)) & v339;
              if (v545 > 0x7FFFFFFD)
              {
                int v342 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v441);
                goto LABEL_758;
              }
              unint64_t v432 = *(void *)(((v578 + ((v577 + v441) & v339)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v432 >= 0xFFFFFFFF) {
              LODWORD(v432) = -1;
            }
            if ((v432 + 1) < 2)
            {
LABEL_762:
              uint64_t v474 = v343;
              uint64_t v475 = v344;
              v340((unsigned __int8 *)v341, v584);
              v340((unsigned __int8 *)v402, v584);
              (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v403, v571);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v534 + 8))((v593 + ((v573 + v403) & 0xFFFFFFFFFFFFFFF8)) & v87, v574);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v476 = (v617 + v403 + v594) & v475;
              v477 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
              v477((v581 + v476) & v474, v582);
              unint64_t v478 = (v577 + ((v581 + v476) & v474)) & v474;
              v477(v478, v582);
              swift_bridgeObjectRelease();
              unint64_t v479 = (v576
                    + ((((((v578 + v478) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v474;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v479, 1, v582)) {
                v477(v479, v582);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v480 = (uint64_t *)((((((v575 + v479) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v481 = v480[1];
              if ((v481 & 0x3000000000000000) == 0) {
                sub_24D400DCC(*v480, v481);
              }
              swift_bridgeObjectRelease();
              unint64_t v482 = v476 + v585 + 16;
              v483 = *(void **)(v482 + 16);
              LODWORD(v484) = -1;
              if ((unint64_t)v483 < 0xFFFFFFFF) {
                uint64_t v484 = *(void *)(v482 + 16);
              }
              if ((int)v484 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v482 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_24D466534(*(void *)((((v482 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v482 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
              goto LABEL_354;
            }
            goto LABEL_354;
          case 4u:
          case 5u:
          case 7u:
            goto LABEL_295;
          case 6u:
            (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v618 + 8))(a1, v584, v168);
            v345 = (unsigned __int8 *)((unint64_t)&a1[v536] & v321);
            if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v538 + 48))(v345, 1, v605)) {
              return;
            }
            v199 = *(void (**)(unsigned __int8 *, uint64_t))(v538 + 8);
            v89 = v345;
            uint64_t v201 = v605;
            goto LABEL_471;
          default:
            uint64_t v628 = ~v622;
            uint64_t v322 = ~v34;
            uint64_t v532 = *(void *)(v574 - 8);
            uint64_t v323 = v83;
            uint64_t v324 = v84;
            v325 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
            v325(a1, v584);
            unint64_t v326 = (unint64_t)&a1[v542] & v169;
            if (v556 == v561)
            {
              int v327 = (*(uint64_t (**)(unint64_t))(v618 + 48))(v326);
              uint64_t v328 = v324;
              uint64_t v329 = v83;
LABEL_713:
              uint64_t v413 = v322;
LABEL_714:
              if (v327) {
                goto LABEL_727;
              }
              unint64_t v395 = (v600 + v326) & v628;
              unint64_t v396 = (v554 + v395) & v413;
              goto LABEL_716;
            }
            unint64_t v395 = (v600 + v326) & v628;
            unint64_t v396 = (v554 + v395) & v322;
            uint64_t v328 = v324;
            uint64_t v329 = v323;
            if (v563 == v561)
            {
              if (v559 == v563)
              {
                int v327 = (*(uint64_t (**)(unint64_t))(v572 + 48))((v554 + v395) & v322);
LABEL_712:
                uint64_t v329 = v323;
                uint64_t v328 = v324;
                goto LABEL_713;
              }
              v427 = (unint64_t *)((v573 + v396) & 0xFFFFFFFFFFFFFFF8);
              if (v550 > 0x7FFFFFFE)
              {
                int v327 = (*(uint64_t (**)(unint64_t))(v532 + 48))(((unint64_t)v427 + v593) & v87);
                goto LABEL_712;
              }
              unint64_t v428 = *v427;
            }
            else
            {
              unint64_t v412 = v396 + v594;
              if ((v547 & 0x80000000) == 0)
              {
                uint64_t v413 = v322;
                unint64_t v414 = *(void *)(v412 + 8);
                if (v414 >= 0xFFFFFFFF) {
                  LODWORD(v414) = -1;
                }
                int v327 = v414 + 1;
                goto LABEL_714;
              }
              uint64_t v439 = (v581 + ((v617 + v412) & v323)) & v324;
              if (v545 > 0x7FFFFFFD)
              {
                int v327 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v439);
                goto LABEL_712;
              }
              unint64_t v428 = *(void *)(((v578 + ((v577 + v439) & v324)) & 0xFFFFFFFFFFFFFFF8) + 8);
            }
            if (v428 >= 0xFFFFFFFF) {
              LODWORD(v428) = -1;
            }
            if ((v428 + 1) < 2)
            {
LABEL_716:
              uint64_t v445 = v328;
              uint64_t v446 = v329;
              v325((unsigned __int8 *)v326, v584);
              v325((unsigned __int8 *)v395, v584);
              (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v396, v571);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v532 + 8))((v593 + ((v573 + v396) & 0xFFFFFFFFFFFFFFF8)) & v87, v574);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              unint64_t v447 = (v617 + v396 + v594) & v446;
              v448 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
              v448((v581 + v447) & v445, v582);
              unint64_t v449 = (v577 + ((v581 + v447) & v445)) & v445;
              v448(v449, v582);
              swift_bridgeObjectRelease();
              unint64_t v450 = (v576
                    + ((((((v578 + v449) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v445;
              if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v450, 1, v582)) {
                v448(v450, v582);
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v451 = (uint64_t *)((((((v575 + v450) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v452 = v451[1];
              if ((v452 & 0x3000000000000000) == 0) {
                sub_24D400DCC(*v451, v452);
              }
              swift_bridgeObjectRelease();
              unint64_t v453 = v447 + v585 + 16;
              v454 = *(void **)(v453 + 16);
              LODWORD(v455) = -1;
              if ((unint64_t)v454 < 0xFFFFFFFF) {
                uint64_t v455 = *(void *)(v453 + 16);
              }
              if ((int)v455 - 1 < 0)
              {

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if (*(void *)(v453 + 192))
                {
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                }
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              sub_24D466534(*(void *)((((v453 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v453 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            }
LABEL_727:
            unint64_t v456 = v544;
            break;
        }
LABEL_790:
        unint64_t v496 = v326 + v456;
LABEL_821:
        v245 = *(void **)(((v496 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_822;
      }
      unsigned int v250 = a1[v40];
      unsigned int v251 = v250 - 8;
      if (v250 >= 8)
      {
        if (v40 <= 3) {
          uint64_t v252 = v40;
        }
        else {
          uint64_t v252 = 4;
        }
        switch(v252)
        {
          case 1:
            int v253 = *a1;
            goto LABEL_557;
          case 2:
            int v253 = *(unsigned __int16 *)a1;
            goto LABEL_557;
          case 3:
            int v253 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_557;
          case 4:
            int v253 = *(_DWORD *)a1;
LABEL_557:
            if (v40 < 4) {
              unsigned int v250 = (v253 | (v251 << (8 * v40))) + 8;
            }
            else {
              unsigned int v250 = v253 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v346 = ~v46;
      uint64_t v200 = v619;
      switch(v250)
      {
        case 1u:
          uint64_t v615 = ~v34;
          unint64_t v590 = v585 + 16;
          uint64_t v535 = *(void *)(v574 - 8);
          uint64_t v353 = v83;
          uint64_t v354 = v84;
          v355 = *(void (**)(unsigned __int8 *, uint64_t))(v619 + 8);
          v355(a1, AssociatedTypeWitness);
          unint64_t v356 = (unint64_t)&a1[v543] & v85;
          if (v624 == v557)
          {
            int v357 = (*(uint64_t (**)(unint64_t))(v619 + 48))(v356);
            uint64_t v358 = v354;
            uint64_t v359 = v353;
LABEL_793:
            if (v357) {
              goto LABEL_806;
            }
            unint64_t v406 = (v567 + v356) & v170;
            unint64_t v407 = (v555 + v406) & v81;
            goto LABEL_795;
          }
          unint64_t v406 = (v567 + v356) & v170;
          unint64_t v407 = (v555 + v406) & v81;
          uint64_t v358 = v354;
          uint64_t v359 = v353;
          if (v562 == v557)
          {
            if (v558 == v562)
            {
              int v357 = (*(uint64_t (**)(unint64_t))(v570 + 48))((v555 + v406) & v81);
LABEL_792:
              uint64_t v359 = v353;
              uint64_t v358 = v354;
              goto LABEL_793;
            }
            v435 = (unint64_t *)((v568 + v407) & 0xFFFFFFFFFFFFFFF8);
            if (v549 > 0x7FFFFFFE)
            {
              int v357 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v435 + v564) & v526);
              goto LABEL_792;
            }
            unint64_t v436 = *v435;
          }
          else
          {
            unint64_t v423 = v407 + v616;
            if ((v548 & 0x80000000) == 0)
            {
              unint64_t v424 = *(void *)(v423 + 8);
              if (v424 >= 0xFFFFFFFF) {
                LODWORD(v424) = -1;
              }
              int v357 = v424 + 1;
              goto LABEL_793;
            }
            uint64_t v443 = (v581 + ((v617 + v423) & v353)) & v354;
            if (v545 > 0x7FFFFFFD)
            {
              int v357 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v443);
              goto LABEL_792;
            }
            unint64_t v436 = *(void *)(((v578 + ((v577 + v443) & v354)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v436 >= 0xFFFFFFFF) {
            LODWORD(v436) = -1;
          }
          if ((v436 + 1) < 2)
          {
LABEL_795:
            uint64_t v497 = v358;
            uint64_t v498 = v359;
            v355((unsigned __int8 *)v356, AssociatedTypeWitness);
            v355((unsigned __int8 *)v406, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v407, v569);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v407) & 0xFFFFFFFFFFFFFFF8)) & v526, v565);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v499 = (v617 + v407 + v616) & v498;
            v500 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
            v500((v581 + v499) & v497, v582);
            unint64_t v501 = (v577 + ((v581 + v499) & v497)) & v497;
            v500(v501, v582);
            swift_bridgeObjectRelease();
            unint64_t v502 = (v576
                  + ((((((v578 + v501) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v497;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v502, 1, v582)) {
              v500(v502, v582);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v503 = (uint64_t *)((((((v575 + v502) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v504 = v503[1];
            if ((v504 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v503, v504);
            }
            swift_bridgeObjectRelease();
            unint64_t v505 = v590 + v499;
            v506 = *(void **)(v590 + v499 + 16);
            LODWORD(v507) = -1;
            if ((unint64_t)v506 < 0xFFFFFFFF) {
              uint64_t v507 = *(void *)(v590 + v499 + 16);
            }
            if ((int)v507 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v505 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v505 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v505 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          }
LABEL_806:
          unint64_t v508 = (v356 + v622 + v607) & ~v622;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v618 + 48))(v508, 1, v584)) {
            (*(void (**)(unint64_t, uint64_t))(v618 + 8))(v508, v584);
          }
          unint64_t v509 = (v541 + v508) & v615;
          if (v559 == v563)
          {
            int v510 = (*(uint64_t (**)(unint64_t))(v572 + 48))(v509);
          }
          else
          {
            v511 = (uint64_t *)((v573 + v509) & 0xFFFFFFFFFFFFFFF8);
            if (v550 <= 0x7FFFFFFE)
            {
              uint64_t v512 = *v511;
              if ((unint64_t)*v511 >= 0xFFFFFFFF) {
                LODWORD(v512) = -1;
              }
              if ((v512 + 1) >= 2) {
                goto LABEL_819;
              }
              goto LABEL_818;
            }
            int v510 = (*(uint64_t (**)(unint64_t))(v535 + 48))(((unint64_t)v511 + v593) & v87);
          }
          if (v510)
          {
LABEL_819:
            unint64_t v473 = v509 + v594;
            goto LABEL_820;
          }
          v511 = (uint64_t *)((v573 + v509) & 0xFFFFFFFFFFFFFFF8);
LABEL_818:
          (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v509, v571);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v535 + 8))(((unint64_t)v511 + v593) & v87, v574);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_819;
        case 2u:
          uint64_t v360 = *(void *)(v574 - 8);
          (*(void (**)(unsigned __int8 *, uint64_t))(v619 + 8))(a1, AssociatedTypeWitness);
          unint64_t v361 = (unint64_t)&a1[v560] & ~v622;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v618 + 48))(v361, 1, v584)) {
            (*(void (**)(unint64_t, uint64_t))(v618 + 8))(v361, v584);
          }
          unint64_t v335 = (v541 + v361) & ~v34;
          if (v559 == v563)
          {
            int v362 = (*(uint64_t (**)(unint64_t))(v572 + 48))(v335);
          }
          else
          {
            v408 = (uint64_t *)((v573 + v335) & 0xFFFFFFFFFFFFFFF8);
            if (v550 <= 0x7FFFFFFE)
            {
              uint64_t v409 = *v408;
              if ((unint64_t)*v408 >= 0xFFFFFFFF) {
                LODWORD(v409) = -1;
              }
              if ((v409 + 1) >= 2)
              {
LABEL_681:
                unint64_t v417 = v594;
LABEL_682:
                v245 = *(void **)(v417 + v335 + 8);
LABEL_822:
LABEL_424:

                return;
              }
LABEL_680:
              (*(void (**)(unint64_t, uint64_t))(v572 + 8))(v335, v571);
              swift_bridgeObjectRelease();
              (*(void (**)(unint64_t, uint64_t))(v360 + 8))(((unint64_t)v408 + v593) & v87, v574);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_681;
            }
            int v362 = (*(uint64_t (**)(unint64_t))(v360 + 48))(((unint64_t)v408 + v593) & v87);
          }
          if (v362) {
            goto LABEL_681;
          }
          v408 = (uint64_t *)((v573 + v335) & 0xFFFFFFFFFFFFFFF8);
          goto LABEL_680;
        case 3u:
          unint64_t v591 = v585 + 16;
          uint64_t v363 = v83;
          uint64_t v364 = v84;
          v365 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v619 + 8);
          v365(a1, AssociatedTypeWitness, v168);
          unint64_t v366 = (unint64_t)&a1[v543] & v85;
          if (v624 == v557)
          {
            int v367 = (*(uint64_t (**)(unint64_t))(v619 + 48))((unint64_t)&a1[v543] & v85);
            uint64_t v368 = v364;
            uint64_t v369 = v363;
LABEL_827:
            if (v367) {
              goto LABEL_354;
            }
            unint64_t v410 = (v567 + v366) & v170;
            unint64_t v411 = (v555 + v410) & v81;
            goto LABEL_829;
          }
          unint64_t v410 = (v567 + v366) & v170;
          unint64_t v411 = (v555 + v410) & v81;
          uint64_t v368 = v364;
          uint64_t v369 = v363;
          if (v562 == v557)
          {
            if (v558 == v562)
            {
              int v367 = (*(uint64_t (**)(unint64_t))(v570 + 48))((v555 + v410) & v81);
LABEL_826:
              uint64_t v369 = v363;
              uint64_t v368 = v364;
              goto LABEL_827;
            }
            v437 = (unint64_t *)((v568 + v411) & 0xFFFFFFFFFFFFFFF8);
            if (v549 > 0x7FFFFFFE)
            {
              int v367 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v437 + v564) & v526);
              goto LABEL_826;
            }
            unint64_t v438 = *v437;
          }
          else
          {
            unint64_t v425 = v411 + v616;
            if ((v548 & 0x80000000) == 0)
            {
              unint64_t v426 = *(void *)(v425 + 8);
              if (v426 >= 0xFFFFFFFF) {
                LODWORD(v426) = -1;
              }
              int v367 = v426 + 1;
              goto LABEL_827;
            }
            uint64_t v444 = (v581 + ((v617 + v425) & v363)) & v364;
            if (v545 > 0x7FFFFFFD)
            {
              int v367 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v444);
              goto LABEL_826;
            }
            unint64_t v438 = *(void *)(((v578 + ((v577 + v444) & v364)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v438 >= 0xFFFFFFFF) {
            LODWORD(v438) = -1;
          }
          if ((v438 + 1) < 2)
          {
LABEL_829:
            uint64_t v513 = v368;
            uint64_t v514 = v369;
            ((void (*)(unint64_t, uint64_t))v365)(v366, AssociatedTypeWitness);
            ((void (*)(unint64_t, uint64_t))v365)(v410, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v411, v569);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v411) & 0xFFFFFFFFFFFFFFF8)) & v526, v565);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v515 = (v617 + v411 + v616) & v514;
            v516 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
            v516((v581 + v515) & v513, v582);
            unint64_t v517 = (v577 + ((v581 + v515) & v513)) & v513;
            v516(v517, v582);
            swift_bridgeObjectRelease();
            unint64_t v518 = (v576
                  + ((((((v578 + v517) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v513;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v518, 1, v582)) {
              v516(v518, v582);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v519 = (uint64_t *)((((((v575 + v518) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v520 = v519[1];
            if ((v520 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v519, v520);
            }
            swift_bridgeObjectRelease();
            unint64_t v521 = v591 + v515;
            v522 = *(void **)(v591 + v515 + 16);
            LODWORD(v523) = -1;
            if ((unint64_t)v522 < 0xFFFFFFFF) {
              uint64_t v523 = *(void *)(v591 + v515 + 16);
            }
            if ((int)v523 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v521 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v521 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v521 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_354;
          }
          goto LABEL_354;
        case 4u:
        case 5u:
        case 7u:
          goto LABEL_298;
        case 6u:
          (*(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v619 + 8))(a1, AssociatedTypeWitness, v168);
          v370 = (unsigned __int8 *)((unint64_t)&a1[v537] & v346);
          if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v539 + 48))(v370, 1, v606)) {
            return;
          }
          v199 = *(void (**)(unsigned __int8 *, uint64_t))(v539 + 8);
          v89 = v370;
          uint64_t v201 = v606;
          goto LABEL_471;
        default:
          unint64_t v589 = v585 + 16;
          uint64_t v347 = v83;
          uint64_t v348 = v84;
          v349 = *(void (**)(unsigned __int8 *, uint64_t, uint64_t))(v619 + 8);
          v349(a1, AssociatedTypeWitness, v168);
          unint64_t v326 = (unint64_t)&a1[v543] & v85;
          if (v624 == v557)
          {
            int v350 = (*(uint64_t (**)(unint64_t))(v619 + 48))((unint64_t)&a1[v543] & v85);
            uint64_t v351 = v348;
            uint64_t v352 = v347;
LABEL_776:
            if (v350) {
              goto LABEL_789;
            }
            unint64_t v404 = (v567 + v326) & v170;
            unint64_t v405 = (v555 + v404) & v81;
            goto LABEL_778;
          }
          unint64_t v404 = (v567 + v326) & v170;
          unint64_t v405 = (v555 + v404) & v81;
          uint64_t v351 = v348;
          uint64_t v352 = v347;
          if (v562 == v557)
          {
            if (v558 == v562)
            {
              int v350 = (*(uint64_t (**)(unint64_t))(v570 + 48))((v555 + v404) & v81);
LABEL_775:
              uint64_t v352 = v347;
              uint64_t v351 = v348;
              goto LABEL_776;
            }
            v433 = (unint64_t *)((v568 + v405) & 0xFFFFFFFFFFFFFFF8);
            if (v549 > 0x7FFFFFFE)
            {
              int v350 = (*(uint64_t (**)(unint64_t))(v566 + 48))(((unint64_t)v433 + v564) & v526);
              goto LABEL_775;
            }
            unint64_t v434 = *v433;
          }
          else
          {
            unint64_t v421 = v405 + v616;
            if ((v548 & 0x80000000) == 0)
            {
              unint64_t v422 = *(void *)(v421 + 8);
              if (v422 >= 0xFFFFFFFF) {
                LODWORD(v422) = -1;
              }
              int v350 = v422 + 1;
              goto LABEL_776;
            }
            uint64_t v442 = (v581 + ((v617 + v421) & v347)) & v348;
            if (v545 > 0x7FFFFFFD)
            {
              int v350 = (*(uint64_t (**)(uint64_t))(v579 + 48))(v442);
              goto LABEL_775;
            }
            unint64_t v434 = *(void *)(((v578 + ((v577 + v442) & v348)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v434 >= 0xFFFFFFFF) {
            LODWORD(v434) = -1;
          }
          if ((v434 + 1) >= 2)
          {
LABEL_789:
            unint64_t v456 = v607;
            goto LABEL_790;
          }
LABEL_778:
          uint64_t v485 = v351;
          uint64_t v486 = v352;
          ((void (*)(unint64_t, uint64_t))v349)(v326, AssociatedTypeWitness);
          ((void (*)(unint64_t, uint64_t))v349)(v404, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v405, v569);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v566 + 8))((v564 + ((v568 + v405) & 0xFFFFFFFFFFFFFFF8)) & v526, v565);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v487 = (v617 + v405 + v616) & v486;
          v488 = *(void (**)(unint64_t, uint64_t))(v579 + 8);
          v488((v581 + v487) & v485, v582);
          unint64_t v489 = (v577 + ((v581 + v487) & v485)) & v485;
          v488(v489, v582);
          swift_bridgeObjectRelease();
          unint64_t v490 = (v576
                + ((((((v578 + v489) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v485;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v579 + 48))(v490, 1, v582)) {
            v488(v490, v582);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v491 = (uint64_t *)((((((v575 + v490) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v492 = v491[1];
          if ((v492 & 0x3000000000000000) == 0) {
            sub_24D400DCC(*v491, v492);
          }
          swift_bridgeObjectRelease();
          unint64_t v493 = v589 + v487;
          v494 = *(void **)(v589 + v487 + 16);
          LODWORD(v495) = -1;
          if ((unint64_t)v494 < 0xFFFFFFFF) {
            uint64_t v495 = *(void *)(v589 + v487 + 16);
          }
          if ((int)v495 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v493 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_24D466534(*(void *)((((v493 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v493 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          goto LABEL_789;
      }
    case 0x1Cu:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v175 = v625;
        }
        else {
          uint64_t v175 = 4;
        }
        switch(v175)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Du:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v176 = v625;
        }
        else {
          uint64_t v176 = 4;
        }
        switch(v176)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Eu:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v177 = v625;
        }
        else {
          uint64_t v177 = 4;
        }
        switch(v177)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x1Fu:
      unsigned int v178 = a1[v625];
      unsigned int v179 = v178 - 2;
      if (v178 < 2)
      {
        uint64_t v182 = AssociatedTypeWitness;
        uint64_t v181 = v584;
        uint64_t v183 = ~v604;
      }
      else
      {
        if (v625 <= 3) {
          uint64_t v180 = v625;
        }
        else {
          uint64_t v180 = 4;
        }
        uint64_t v182 = AssociatedTypeWitness;
        uint64_t v181 = v584;
        uint64_t v183 = ~v604;
        switch(v180)
        {
          case 1:
            int v184 = *a1;
            goto LABEL_447;
          case 2:
            int v184 = *(unsigned __int16 *)a1;
            goto LABEL_447;
          case 3:
            int v184 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_447;
          case 4:
            int v184 = *(_DWORD *)a1;
LABEL_447:
            if (v625 < 4) {
              unsigned int v178 = (v184 | (v179 << (8 * v625))) + 2;
            }
            else {
              unsigned int v178 = v184 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v178 == 1) {
        uint64_t v254 = v618;
      }
      else {
        uint64_t v254 = v619;
      }
      if (v178 == 1) {
        uint64_t v255 = v181;
      }
      else {
        uint64_t v255 = v182;
      }
      (*(void (**)(unsigned __int8 *, uint64_t, uint64_t, uint64_t))(v254 + 8))(a1, v255, v604, v82);
      v89 = (unsigned __int8 *)((unint64_t)&a1[v580] & v183);
      unsigned int v162 = v89[v625];
      unsigned int v163 = v162 - 2;
      if (v162 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v256 = v625;
        }
        else {
          uint64_t v256 = 4;
        }
        switch(v256)
        {
          case 1:
LABEL_461:
            int v257 = *v89;
            goto LABEL_465;
          case 2:
LABEL_462:
            int v257 = *(unsigned __int16 *)v89;
            goto LABEL_465;
          case 3:
LABEL_463:
            int v257 = *(unsigned __int16 *)v89 | (v89[2] << 16);
            goto LABEL_465;
          case 4:
LABEL_464:
            int v257 = *(_DWORD *)v89;
LABEL_465:
            if (v625 < 4) {
              unsigned int v162 = (v257 | (v163 << (8 * v625))) + 2;
            }
            else {
              unsigned int v162 = v257 + 2;
            }
            break;
          default:
            break;
        }
      }
LABEL_468:
      if (v162 != 1)
      {
LABEL_371:
        v199 = *(void (**)(unsigned __int8 *, uint64_t))(v619 + 8);
        goto LABEL_299;
      }
LABEL_469:
      v199 = *(void (**)(unsigned __int8 *, uint64_t))(v618 + 8);
      goto LABEL_470;
    case 0x20u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v185 = v625;
        }
        else {
          uint64_t v185 = 4;
        }
        switch(v185)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x21u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v186 = v625;
        }
        else {
          uint64_t v186 = 4;
        }
        switch(v186)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x22u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v187 = v625;
        }
        else {
          uint64_t v187 = 4;
        }
        switch(v187)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x23u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v188 = v625;
        }
        else {
          uint64_t v188 = 4;
        }
        switch(v188)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x24u:
      uint64_t v189 = ~v34;
      uint64_t v190 = ~v586;
      uint64_t v531 = *(void *)(v574 - 8);
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v619 + 48))(a1, 1, AssociatedTypeWitness))(*(void (**)(unsigned __int8 *, uint64_t))(v619 + 8))(a1, AssociatedTypeWitness); {
      unint64_t v191 = (((((unint64_t)&a1[v552 + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v596 + 9) & v81;
      }
      if (v558 == v562)
      {
        int v192 = (*(uint64_t (**)(unint64_t))(v570 + 48))((((((unint64_t)&a1[v552 + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                          + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                        + v596
                                                                        + 9) & v81);
LABEL_325:
        if (v192) {
          goto LABEL_328;
        }
        v210 = (uint64_t *)((v568 + v191) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_327;
      }
      v210 = (uint64_t *)((v568 + v191) & 0xFFFFFFFFFFFFFFF8);
      if (v549 > 0x7FFFFFFE)
      {
        int v192 = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v210 + v564) & v190);
        goto LABEL_325;
      }
      uint64_t v211 = *v210;
      if ((unint64_t)*v210 >= 0xFFFFFFFF) {
        LODWORD(v211) = -1;
      }
      if ((v211 + 1) < 2)
      {
LABEL_327:
        (*(void (**)(unint64_t, uint64_t))(v570 + 8))(v191, v569);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v11 + 8))(((unint64_t)v210 + v564) & v190, v565);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_328:
      unint64_t v217 = v616 + v191;
      sub_24D3E380C(*(void **)((v217 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v217 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v217 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      unint64_t v218 = (v217 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v219 = *(void *)(v218 + 16);
      BOOL v220 = ((4 * (v219 >> 60)) & 0xC | ((v219 >> 60) >> 2)) != 0xF && ((4 * (v219 >> 60)) & 0xC) != 0;
      if (v219 >> 60 != 15 && !v220) {
        sub_24D400DCC(*(void *)(v218 + 8), v219);
      }

      unint64_t v221 = (unint64_t)&a1[v553] & ~v55;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v618 + 48))(v221, 1, v584)) {
        (*(void (**)(unint64_t, uint64_t))(v618 + 8))(v221, v584);
      }
      unint64_t v222 = (v602 + ((((v598 + v221) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v189;
      if (v559 == v563)
      {
        int v223 = (*(uint64_t (**)(unint64_t))(v26 + 48))((v602
                                                                       + ((((v598 + v221) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v189);
      }
      else
      {
        v224 = (uint64_t *)((v573 + v222) & 0xFFFFFFFFFFFFFFF8);
        if (v550 <= 0x7FFFFFFE)
        {
          uint64_t v225 = *v224;
          if ((unint64_t)*v224 >= 0xFFFFFFFF) {
            LODWORD(v225) = -1;
          }
          if ((v225 + 1) >= 2) {
            goto LABEL_347;
          }
          goto LABEL_346;
        }
        int v223 = (*(uint64_t (**)(unint64_t))(v531 + 48))(((unint64_t)v224 + v593) & v87);
      }
      if (v223)
      {
LABEL_347:
        sub_24D3E380C(*(void **)((v222 + v594 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v222 + v594 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v222 + v594 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        unint64_t v226 = (v222 + v594 + 34) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v227 = *(void *)(v226 + 16);
        BOOL v228 = ((4 * (v227 >> 60)) & 0xC | ((v227 >> 60) >> 2)) != 0xF && ((4 * (v227 >> 60)) & 0xC) != 0;
        if (v227 >> 60 != 15 && !v228) {
          sub_24D400DCC(*(void *)(v226 + 8), v227);
        }

LABEL_354:
        swift_bridgeObjectRelease();
        return;
      }
      v224 = (uint64_t *)((v573 + v222) & 0xFFFFFFFFFFFFFFF8);
LABEL_346:
      (*(void (**)(unint64_t, uint64_t))(v26 + 8))(v222, v571);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v531 + 8))(((unint64_t)v224 + v593) & v87, v574);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_347;
    case 0x25u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v193 = v625;
        }
        else {
          uint64_t v193 = 4;
        }
        switch(v193)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x26u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v194 = v625;
        }
        else {
          uint64_t v194 = 4;
        }
        switch(v194)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x27u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 >= 2)
      {
        if (v625 <= 3) {
          uint64_t v195 = v625;
        }
        else {
          uint64_t v195 = 4;
        }
        switch(v195)
        {
          case 1:
            goto LABEL_287;
          case 2:
            goto LABEL_288;
          case 3:
            goto LABEL_289;
          case 4:
            goto LABEL_290;
          default:
            goto LABEL_293;
        }
      }
      goto LABEL_293;
    case 0x28u:
      unsigned int v90 = a1[v625];
      unsigned int v91 = v90 - 2;
      if (v90 < 2) {
        goto LABEL_293;
      }
      if (v625 <= 3) {
        uint64_t v196 = v625;
      }
      else {
        uint64_t v196 = 4;
      }
      switch(v196)
      {
        case 1:
LABEL_287:
          int v197 = *a1;
          break;
        case 2:
LABEL_288:
          int v197 = *(unsigned __int16 *)a1;
          break;
        case 3:
LABEL_289:
          int v197 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          break;
        case 4:
LABEL_290:
          int v197 = *(_DWORD *)a1;
          break;
        default:
          goto LABEL_293;
      }
      if (v625 < 4)
      {
        if ((v197 | (v91 << (8 * v625))) == 0xFFFFFFFF)
        {
LABEL_294:
          uint64_t v198 = v618;
LABEL_295:
          v199 = *(void (**)(unsigned __int8 *, uint64_t))(v198 + 8);
          v89 = a1;
LABEL_470:
          uint64_t v201 = v584;
LABEL_471:
          v199(v89, v201);
          return;
        }
      }
      else
      {
        unsigned int v90 = v197 + 2;
LABEL_293:
        if (v90 == 1) {
          goto LABEL_294;
        }
      }
      uint64_t v200 = v619;
LABEL_298:
      v199 = *(void (**)(unsigned __int8 *, uint64_t))(v200 + 8);
      v89 = a1;
LABEL_299:
      uint64_t v201 = AssociatedTypeWitness;
      goto LABEL_471;
    default:
      return;
  }
}

void *sub_24D525B08(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v2015 = *(void *)(a3 + 24);
  uint64_t v1996 = swift_getAssociatedTypeWitness();
  uint64_t v2054 = *(void *)(v1996 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v2054 + 80);
  uint64_t v1963 = v6 + v7;
  uint64_t v2017 = v7;
  unint64_t v2062 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v2054 + 64);
  unint64_t v2025 = v8;
  unint64_t v9 = v2062 + v8;
  unint64_t v2020 = v2062 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v2009 = v8;
  unint64_t v11 = v8 + 1;
  size_t v2047 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | *(unsigned __int8 *)(v2054 + 80);
  uint64_t v2010 = v13;
  unint64_t v1991 = v13 + v11;
  unint64_t v2022 = ((v13 + v11) & ~v13) + v11;
  if (v2022 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v2019 = v9;
  uint64_t v1997 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v2016 = v4;
  uint64_t v1976 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1976 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1973 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1973 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1940 = v18;
  unsigned int v1958 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1944 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v2018 = v14;
  unsigned int v1966 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v1989 = sub_24DCC8CE8();
  uint64_t v19 = *(void *)(v1989 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v2002 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1942 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1965 = v21;
  unsigned int v1971 = *(_DWORD *)(v19 + 84);
  unint64_t v2028 = v10;
  uint64_t v1984 = v10 + v12;
  uint64_t v2077 = v12;
  uint64_t v1977 = v15;
  uint64_t v1974 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1954 = v10 + v23;
  uint64_t v2087 = v23;
  uint64_t v1982 = *(void *)(v15 + 64) + 7;
  uint64_t v1972 = v22 + 8;
  uint64_t v1998 = v22;
  uint64_t v1968 = *(void *)(v17 + 64) + 7;
  size_t v2040 = ((((v1968 + ((v22 + 8 + (v1982 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1990 = *(void *)(v1989 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v2066 = v24 | 7;
  uint64_t v2045 = (v24 | 7) + 16;
  uint64_t v1992 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v1988 = v25 + v24;
  size_t v1939 = v25 + 12;
  uint64_t v1985 = v24 + 10;
  size_t v1993 = v25;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t __n = v26;
  unint64_t v1970 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  size_t v1986 = v26 + 7;
  unint64_t v2044 = ((((((((((v26 + 7 + v1970) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1964 = (v2045 + v2040 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v1964 + v2044 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v2037 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1962 = v27 + 23;
  unint64_t v2007 = ((v27 + 23 + ((v27 + 16 + v28) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v2054 + 84);
  uint64_t v1978 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1978 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v32 = swift_getAssociatedTypeWitness();
  uint64_t v33 = v28;
  uint64_t v1975 = v32;
  uint64_t v34 = *(void *)(v32 - 8);
  unsigned int v35 = *(_DWORD *)(v34 + 84);
  unsigned int v1959 = v31;
  if (v31 > v35) {
    unsigned int v35 = v31;
  }
  unsigned int v1951 = v35;
  if (v35 <= 0x7FFFFFFE) {
    unsigned int v35 = 2147483646;
  }
  unsigned int v1967 = v35;
  if (v35 <= v29) {
    unsigned int v35 = v29;
  }
  if (v35 <= v2002) {
    unsigned int v35 = v2002;
  }
  unsigned int v1941 = v35;
  if (v35 <= 0x7FFFFFFF) {
    unsigned int v35 = 0x7FFFFFFF;
  }
  unsigned int v1956 = v35;
  uint64_t v1983 = v2025 + v2017;
  uint64_t v1979 = v30;
  v1980 = *(void **)(v32 - 8);
  uint64_t v36 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v37 = *(_DWORD *)(v30 + 80) & 0xF8 | v36 | 7;
  uint64_t v1955 = v2025 + v37;
  uint64_t v1987 = *(void *)(v30 + 64) + 7;
  uint64_t v1981 = v36 + 8;
  uint64_t v1969 = v1980[8] + 7;
  unint64_t v38 = ((((v1969 + ((v36 + 8 + (v1987 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1953 = (v2045 + v38 + ((v2025 + v37 + ((v2025 + v2017) & ~v2017)) & ~v37)) & ~v2066;
  unint64_t v39 = (((v1953 + v2044 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v40 = v39 + 16;
  uint64_t v41 = v37 | v2017;
  uint64_t v2003 = v24;
  uint64_t v42 = v37 | v2017 | v24;
  unint64_t v43 = v39 + ((v39 + 16 + v42) & ~v42);
  unint64_t v1938 = v28 + v10;
  size_t v44 = v2037 + ((v28 + v10) & ~v28);
  unint64_t v45 = (v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v1957 = v29;
  if (v29) {
    size_t v46 = v2025;
  }
  else {
    size_t v46 = v2025 + 1;
  }
  uint64_t v47 = *(void *)(v2016 - 8);
  uint64_t v48 = *(unsigned __int8 *)(v47 + 80);
  uint64_t v1934 = v47;
  unint64_t v49 = ((v45 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v50 = ((((((v46 + v37 + ((v44 + v2017) & ~v2017)) & ~v37) + v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v51 = ((v45 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_DWORD *)(v47 + 84)) {
    uint64_t v52 = *(void *)(*(void *)(v2016 - 8) + 64);
  }
  else {
    uint64_t v52 = *(void *)(*(void *)(v2016 - 8) + 64) + 1;
  }
  if (v10 <= v49) {
    unint64_t v53 = v49;
  }
  else {
    unint64_t v53 = v10;
  }
  if (v50 <= v38 + ((v46 + v37 + v2062) & ~v37) + 16) {
    unint64_t v50 = v38 + ((v46 + v37 + v2062) & ~v37) + 16;
  }
  uint64_t v1933 = v10 + v48;
  size_t v1929 = v52;
  if (v51 <= ((v10 + v48) & ~v48) + v52) {
    unint64_t v51 = ((v10 + v48) & ~v48) + v52;
  }
  if (v53 <= v50) {
    unint64_t v53 = v50;
  }
  if (v53 <= v51) {
    unint64_t v54 = v51;
  }
  else {
    unint64_t v54 = v53;
  }
  if (v2018) {
    size_t v55 = v10;
  }
  else {
    size_t v55 = v10 + 1;
  }
  uint64_t v56 = *(void *)(v2015 - 8);
  uint64_t v57 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v1932 = v56;
  uint64_t v2014 = v37 | v2017 | v24;
  unint64_t v1937 = v42 + v2025;
  size_t v58 = v40 + ((v42 + v2025) & ~v42);
  unint64_t v59 = (v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v60 = ((((((v55 + v2087 + ((v58 + v2077) & ~v2077)) & ~v2087) + v2040 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1931 = v2025 + v2077;
  size_t v1935 = v55 + v2087;
  if (*(_DWORD *)(v56 + 84)) {
    uint64_t v61 = *(void *)(*(void *)(v2015 - 8) + 64);
  }
  else {
    uint64_t v61 = *(void *)(*(void *)(v2015 - 8) + 64) + 1;
  }
  if (v2025 <= ((v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v62 = ((v59 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v62 = v2025;
  }
  if (v60 <= v2040 + ((v55 + v2087 + ((v2025 + v2077) & ~v2077)) & ~v2087) + 16) {
    unint64_t v60 = v2040 + ((v55 + v2087 + ((v2025 + v2077) & ~v2077)) & ~v2087) + 16;
  }
  unint64_t v63 = ((v59 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1930 = v2025 + v57;
  size_t v1928 = v61;
  if (v63 <= ((v2025 + v57) & ~v57) + v61) {
    unint64_t v63 = ((v2025 + v57) & ~v57) + v61;
  }
  if (v62 <= v60) {
    unint64_t v62 = v60;
  }
  if (v62 <= v63) {
    unint64_t v64 = v63;
  }
  else {
    unint64_t v64 = v62;
  }
  unint64_t v1943 = v64;
  unint64_t v65 = v64 + 1;
  unint64_t v1945 = v54;
  if (v65 <= v54 + 1) {
    unint64_t v66 = v54 + 1;
  }
  else {
    unint64_t v66 = v65;
  }
  if (v2047 > v2009 + 2) {
    unint64_t v67 = v2009 + 1;
  }
  else {
    unint64_t v67 = v2009 + 2;
  }
  if (v67 <= v2007) {
    unint64_t v67 = v2007;
  }
  unint64_t v68 = ((v43 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  size_t v1952 = v55;
  unint64_t v1946 = ((((((((v2087 + ((((v55 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2087) + v2040 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v41
        + 8;
  if (v67 <= v68) {
    unint64_t v67 = ((v43 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v67 <= v2037) {
    unint64_t v67 = v2037;
  }
  if (v67 <= v40) {
    unint64_t v67 = v40;
  }
  if (v67 <= v2022 + 2) {
    unint64_t v67 = v2022 + 2;
  }
  if (v67 <= ((v2009 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v67 = ((v2009 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v67 <= (v2009 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v67 = (v2009 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v67 <= v2020) {
    unint64_t v67 = v2020;
  }
  if (v67 <= ((v2010 + 1) & ~v2010) + v2047) {
    unint64_t v67 = ((v2010 + 1) & ~v2010) + v2047;
  }
  unint64_t v69 = v66;
  if (v67 <= v66 + 1) {
    unint64_t v67 = v66 + 1;
  }
  if (v67 <= v2022) {
    unint64_t v67 = v2022;
  }
  if (v67 <= ((((((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37)
                      + v38
                      + 34) & 0xFFFFFFFFFFFFFFF8)
                    + 63) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 8
                + (v1946 & ~v41)
                + 23) & 0xFFFFFFFFFFFFFFF8)
              + 39) & 0xFFFFFFFFFFFFFFF8)
            + 8)
    unint64_t v67 = ((((((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
                + 63) & 0xFFFFFFFFFFFFFFF8)
              + 15) & 0xFFFFFFFFFFFFFFF8)
            + 8
            + (v1946 & ~v41)
            + 23) & 0xFFFFFFFFFFFFFFF8)
          + 39) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  if (v67 <= v2019) {
    unint64_t v67 = v2019;
  }
  if (v67 <= 0x38) {
    uint64_t v70 = 56;
  }
  else {
    uint64_t v70 = v67;
  }
  uint64_t v2063 = v70;
  size_t v1950 = v46 + 7;
  if (v70 > 3) {
    goto LABEL_105;
  }
  unsigned int v73 = ((1 << (8 * v70)) + 5) >> (8 * v70);
  if (v73 > 0xFFD6)
  {
    unint64_t v72 = a2;
    unsigned int v71 = *(_DWORD *)&a2[v70];
  }
  else
  {
    if (v73 <= 0xD6)
    {
LABEL_105:
      unsigned int v71 = a2[v70];
      unint64_t v72 = a2;
      goto LABEL_110;
    }
    unsigned int v71 = *(unsigned __int16 *)&a2[v70];
    unint64_t v72 = a2;
  }
LABEL_110:
  unsigned int v74 = v71 - 41;
  unint64_t v2008 = ((v2009 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v1960 = v68;
  unint64_t v1961 = v66 + 1;
  if (v71 >= 0x29)
  {
    if (v70 <= 3) {
      uint64_t v75 = v70;
    }
    else {
      uint64_t v75 = 4;
    }
    switch(v75)
    {
      case 1:
        int v76 = *v72;
        goto LABEL_119;
      case 2:
        int v76 = *(unsigned __int16 *)v72;
        goto LABEL_119;
      case 3:
        int v76 = *(unsigned __int16 *)v72 | (v72[2] << 16);
        goto LABEL_119;
      case 4:
        int v76 = *(_DWORD *)v72;
LABEL_119:
        if (v70 < 4) {
          v76 |= v74 << (8 * v70);
        }
        unsigned int v71 = v76 + 41;
        break;
      default:
        break;
    }
  }
  uint64_t v1926 = v37 + 9;
  unint64_t v1927 = ((((((((v37 + 9 + ((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v37) + v38 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  uint64_t v1925 = v46 + v37;
  size_t v1936 = v46;
  unint64_t v1947 = (v2009 & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v1948 = ((v2010 + 1) & ~v2010) + v2047;
  unint64_t v1949 = ((((v1927 + (v1946 & ~v41) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v77 = ~v2017;
  uint64_t v78 = ~v2010;
  uint64_t v79 = ~v2077;
  uint64_t v80 = ~v2087;
  uint64_t v81 = ~v1998;
  uint64_t v82 = ~v2066;
  uint64_t v83 = ~v2003;
  uint64_t v84 = ~v33;
  uint64_t v85 = ~v37;
  uint64_t v86 = ~v36;
  switch(v71)
  {
    case 0u:
      uint64_t v87 = v72;
      (*(void (**)(void *))(v1997 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16))(((unint64_t)a1 + v1963) & v77, (unint64_t)&v87[v1963] & v77, v1996);
      if (v2063 > 3) {
        goto LABEL_124;
      }
      unsigned int v388 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v388 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2063) = 0;
      }
      else if (v388 <= 0xD6)
      {
LABEL_124:
        *((unsigned char *)a1 + v2063) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v2063) = 0;
      }
      return a1;
    case 1u:
      unsigned int v90 = v72[v2009];
      unsigned int v91 = v90 - 2;
      if (v90 < 2)
      {
        uint64_t v93 = v2054;
        uint64_t v94 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v92 = v2009;
        }
        else {
          uint64_t v92 = 4;
        }
        uint64_t v93 = v2054;
        uint64_t v94 = v1997;
        switch(v92)
        {
          case 1:
            int v95 = *v72;
            goto LABEL_495;
          case 2:
            int v95 = *(unsigned __int16 *)v72;
            goto LABEL_495;
          case 3:
            int v95 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_495;
          case 4:
            int v95 = *(_DWORD *)v72;
LABEL_495:
            if (v2009 < 4) {
              unsigned int v90 = (v95 | (v91 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v90 = v95 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v625 = v90 == 1;
      if (v90 == 1) {
        uint64_t v626 = v93;
      }
      else {
        uint64_t v626 = v94;
      }
      (*(void (**)(void *))(v626 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v625;
      if (v2063 > 3) {
        goto LABEL_502;
      }
      unsigned int v627 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v627 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2063) = 1;
      }
      else if (v627 <= 0xD6)
      {
LABEL_502:
        *((unsigned char *)a1 + v2063) = 1;
      }
      else
      {
        *(_WORD *)((char *)a1 + v2063) = 1;
      }
      return a1;
    case 2u:
      unsigned int v96 = v72[v2009];
      unsigned int v97 = v96 - 2;
      if (v96 < 2)
      {
        uint64_t v99 = v2054;
        uint64_t v100 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v98 = v2009;
        }
        else {
          uint64_t v98 = 4;
        }
        uint64_t v99 = v2054;
        uint64_t v100 = v1997;
        switch(v98)
        {
          case 1:
            int v101 = *v72;
            goto LABEL_510;
          case 2:
            int v101 = *(unsigned __int16 *)v72;
            goto LABEL_510;
          case 3:
            int v101 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_510;
          case 4:
            int v101 = *(_DWORD *)v72;
LABEL_510:
            if (v2009 < 4) {
              unsigned int v96 = (v101 | (v97 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v96 = v101 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v628 = v96 == 1;
      if (v96 == 1) {
        uint64_t v629 = v99;
      }
      else {
        uint64_t v629 = v100;
      }
      (*(void (**)(void *))(v629 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v628;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_517;
      }
      unsigned int v630 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v630 > 0xFFD6)
      {
        int v502 = 2;
        goto LABEL_975;
      }
      if (v630 <= 0xD6)
      {
LABEL_517:
        char v274 = 2;
        goto LABEL_969;
      }
      __int16 v399 = 2;
      goto LABEL_973;
    case 3u:
      unsigned int v102 = v72[v2009];
      unsigned int v103 = v102 - 2;
      if (v102 < 2)
      {
        uint64_t v105 = v2054;
        uint64_t v106 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v104 = v2009;
        }
        else {
          uint64_t v104 = 4;
        }
        uint64_t v105 = v2054;
        uint64_t v106 = v1997;
        switch(v104)
        {
          case 1:
            int v107 = *v72;
            goto LABEL_525;
          case 2:
            int v107 = *(unsigned __int16 *)v72;
            goto LABEL_525;
          case 3:
            int v107 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_525;
          case 4:
            int v107 = *(_DWORD *)v72;
LABEL_525:
            if (v2009 < 4) {
              unsigned int v102 = (v107 | (v103 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v102 = v107 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v631 = v102 == 1;
      if (v102 == 1) {
        uint64_t v632 = v105;
      }
      else {
        uint64_t v632 = v106;
      }
      (*(void (**)(void *))(v632 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v631;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_532;
      }
      unsigned int v633 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v633 > 0xFFD6)
      {
        int v502 = 3;
        goto LABEL_975;
      }
      if (v633 <= 0xD6)
      {
LABEL_532:
        char v274 = 3;
        goto LABEL_969;
      }
      __int16 v399 = 3;
      goto LABEL_973;
    case 4u:
      unsigned int v108 = v72[v2009];
      unsigned int v109 = v108 - 2;
      if (v108 < 2)
      {
        uint64_t v111 = ~v2010;
        uint64_t v112 = v2054;
        uint64_t v113 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v110 = v2009;
        }
        else {
          uint64_t v110 = 4;
        }
        uint64_t v111 = ~v2010;
        uint64_t v112 = v2054;
        uint64_t v113 = v1997;
        switch(v110)
        {
          case 1:
            int v114 = *v72;
            goto LABEL_540;
          case 2:
            int v114 = *(unsigned __int16 *)v72;
            goto LABEL_540;
          case 3:
            int v114 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_540;
          case 4:
            int v114 = *(_DWORD *)v72;
LABEL_540:
            if (v2009 < 4) {
              unsigned int v108 = (v114 | (v109 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v108 = v114 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v634 = v108 == 1;
      if (v108 == 1) {
        uint64_t v635 = v112;
      }
      else {
        uint64_t v635 = v113;
      }
      v636 = v72;
      (*(void (**)(void *))(v635 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v634;
      v637 = (unsigned __int8 *)((unint64_t)&v636[v1991] & v111);
      unsigned int v638 = v637[v2009];
      unsigned int v639 = v638 - 2;
      if (v638 >= 2)
      {
        if (v2009 <= 3) {
          uint64_t v640 = v2009;
        }
        else {
          uint64_t v640 = 4;
        }
        switch(v640)
        {
          case 1:
            int v641 = *v637;
            goto LABEL_946;
          case 2:
            int v641 = *(unsigned __int16 *)v637;
            goto LABEL_946;
          case 3:
            int v641 = *(unsigned __int16 *)v637 | (*(unsigned __int8 *)(((unint64_t)&v636[v1991] & v111) + 2) << 16);
            goto LABEL_946;
          case 4:
            int v641 = *(_DWORD *)v637;
LABEL_946:
            if (v2009 < 4) {
              unsigned int v638 = (v641 | (v639 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v638 = v641 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v753 = v638 == 1;
      if (v638 == 1) {
        uint64_t v754 = v112;
      }
      else {
        uint64_t v754 = v113;
      }
      (*(void (**)(unint64_t))(v754 + 16))(((unint64_t)a1 + v1991) & v111);
      *(unsigned char *)((((unint64_t)a1 + v1991) & v111) + v2009) = v753;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_953;
      }
      unsigned int v755 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v755 > 0xFFD6)
      {
        int v502 = 4;
        goto LABEL_975;
      }
      if (v755 <= 0xD6)
      {
LABEL_953:
        char v274 = 4;
        goto LABEL_969;
      }
      __int16 v399 = 4;
      goto LABEL_973;
    case 5u:
      uint64_t v115 = ~v2087;
      uint64_t v2078 = ~v2077;
      uint64_t v2011 = ~v2066;
      uint64_t v116 = v2018;
      uint64_t v2067 = ~v2003;
      size_t v1920 = v40;
      uint64_t v1923 = v33;
      uint64_t v1916 = ~v1998;
      unint64_t v1918 = v2009 + 2;
      uint64_t v1999 = ~v33;
      if (v2018 == v1965)
      {
        uint64_t v117 = v1997;
        uint64_t v118 = AssociatedTypeWitness;
        unint64_t v119 = v72;
        int v120 = (*(uint64_t (**)(void))(v1997 + 48))();
        unint64_t v121 = v119;
        size_t v122 = __n;
        uint64_t v123 = v2087;
LABEL_983:
        if (v120)
        {
LABEL_984:
          size_t v761 = v2037;
          memcpy(a1, v121, v2037);
          uint64_t v762 = v1971;
LABEL_985:
          size_t v763 = v122;
          goto LABEL_1020;
        }
        unint64_t v389 = (unint64_t)&v121[v1984] & v2078;
        unint64_t v390 = (v389 + v2028 + v123) & v115;
LABEL_987:
        v764 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v117 + 16);
        uint64_t v765 = v123;
        v764(a1, v121, v118);
        unint64_t v766 = ((unint64_t)a1 + v1984) & v2078;
        v764((void *)v766, (unsigned __int8 *)v389, v118);
        uint64_t v2027 = ~v2087;
        unint64_t v767 = (v766 + v2028 + v765) & v115;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v767, v390, v1976);
        v768 = (void *)((v1982 + v767) & 0xFFFFFFFFFFFFFFF8);
        v769 = (void *)((v1982 + v390) & 0xFFFFFFFFFFFFFFF8);
        void *v768 = *v769;
        unint64_t v770 = ((unint64_t)v768 + v1972) & v1916;
        unint64_t v771 = ((unint64_t)v769 + v1972) & v1916;
        v772 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
        swift_bridgeObjectRetain();
        v772(v770, v771, v1973);
        v773 = (void *)((v1968 + v771) & 0xFFFFFFFFFFFFFFF8);
        v774 = (void *)((v1968 + v770) & 0xFFFFFFFFFFFFFFF8);
        void *v774 = *v773;
        v775 = (void *)(((unint64_t)v774 + 15) & 0xFFFFFFFFFFFFFFF8);
        v776 = (void *)(((unint64_t)v773 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v775 = *v776;
        v775[1] = v776[1];
        v777 = (void *)(v2040 + v767);
        void *v777 = *(void *)(v2040 + v390);
        v777[1] = *(void *)(v2040 + v390 + 8);
        size_t v778 = (v2045 + v2040 + v767) & v2011;
        size_t v779 = (v2045 + v2040 + v390) & v2011;
        *(unsigned char *)size_t v778 = *(unsigned char *)v779;
        uint64_t v780 = v778 | 4;
        int v781 = *(_DWORD *)(v779 | 4);
        *(unsigned char *)(v780 + 4) = *(unsigned char *)((v779 | 4) + 4);
        *(_DWORD *)uint64_t v780 = v781;
        *(_WORD *)(v778 + 10) = *(_WORD *)(v779 + 0xA);
        size_t v2094 = v778;
        size_t v782 = (v1992 + v778) & ~v2003;
        size_t v2064 = v779;
        size_t v783 = (v1992 + v779) & ~v2003;
        v784 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v784(v782, v783, v1989);
        size_t v785 = (v1988 + v782) & ~v2003;
        size_t v786 = (v1988 + v783) & ~v2003;
        v784(v785, v786, v1989);
        v787 = (unsigned char *)(v785 + v1993);
        unsigned char *v787 = *(unsigned char *)(v786 + v1993);
        v787[1] = *(unsigned char *)(v786 + v1993 + 1);
        v787[2] = *(unsigned char *)(v786 + v1993 + 2);
        v787[3] = *(unsigned char *)(v786 + v1993 + 3);
        v787[4] = *(unsigned char *)(v786 + v1993 + 4);
        unint64_t v788 = (v785 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v789 = (v786 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v788 = *(void *)v789;
        *(void *)(v788 + 8) = *(void *)(v789 + 8);
        *(unsigned char *)(v788 + 16) = *(unsigned char *)(v789 + 16);
        *(unsigned char *)(v788 + 17) = *(unsigned char *)(v789 + 17);
        *(unsigned char *)(v788 + 18) = *(unsigned char *)(v789 + 18);
        *(unsigned char *)(v788 + 19) = *(unsigned char *)(v789 + 19);
        unint64_t v790 = (v788 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v791 = (v789 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v790 = *(void *)v791;
        *(unsigned char *)(v790 + 8) = *(unsigned char *)(v791 + 8);
        *(unsigned char *)(v790 + 9) = *(unsigned char *)(v791 + 9);
        *(unsigned char *)(v790 + 10) = *(unsigned char *)(v791 + 10);
        *(unsigned char *)(v790 + 11) = *(unsigned char *)(v791 + 11);
        *(unsigned char *)(v790 + 12) = *(unsigned char *)(v791 + 12);
        v792 = (void *)((v789 + 47) & 0xFFFFFFFFFFFFFFF8);
        v793 = (void *)((v788 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v793 = *v792;
        unint64_t v794 = ((unint64_t)v793 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v795 = ((unint64_t)v792 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v794 = *(void *)v795;
        *(unsigned char *)(v794 + 8) = *(unsigned char *)(v795 + 8);
        *(unsigned char *)(v794 + 9) = *(unsigned char *)(v795 + 9);
        v796 = (void *)((v1985 + v794) & ~v2003);
        v797 = (const void *)((v1985 + v795) & ~v2003);
        v798 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
        swift_bridgeObjectRetain();
        if (v798(v797, 1, v1989))
        {
          memcpy(v796, v797, __n);
        }
        else
        {
          v784((size_t)v796, (size_t)v797, v1989);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v796, 0, 1, v1989);
        }
        v799 = (void *)(((unint64_t)v796 + v1986) & 0xFFFFFFFFFFFFFFF8);
        v800 = (void *)(((unint64_t)v797 + v1986) & 0xFFFFFFFFFFFFFFF8);
        void *v799 = *v800;
        unint64_t v801 = ((unint64_t)v799 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v802 = ((unint64_t)v800 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v803 = *(void *)v802;
        *(unsigned char *)(v801 + 8) = *(unsigned char *)(v802 + 8);
        *(void *)unint64_t v801 = v803;
        v804 = (void *)(((unint64_t)v799 + 31) & 0xFFFFFFFFFFFFFFF8);
        v805 = (void *)(((unint64_t)v800 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v804 = *v805;
        unint64_t v806 = ((unint64_t)v804 + 15) & 0xFFFFFFFFFFFFFFF8;
        v807 = (uint64_t *)(((unint64_t)v805 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v808 = v807[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v115 = v2027;
        if ((v808 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v806 = *(_OWORD *)v807;
        }
        else
        {
          uint64_t v809 = *v807;
          sub_24D3F9C18(*v807, v808);
          *(void *)unint64_t v806 = v809;
          *(void *)(v806 + 8) = v808;
        }
        unint64_t v810 = (v806 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v811 = ((unint64_t)v807 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v812 = *(void *)v811;
        *(unsigned char *)(v810 + 8) = *(unsigned char *)(v811 + 8);
        *(void *)unint64_t v810 = v812;
        *(unsigned char *)(v810 + 9) = *(unsigned char *)(v811 + 9);
        unint64_t v813 = (v810 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v814 = (v811 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v815 = *(_DWORD *)v814;
        *(unsigned char *)(v813 + 4) = *(unsigned char *)(v814 + 4);
        *(_DWORD *)unint64_t v813 = v815;
        v816 = (void *)((v810 + 25) & 0xFFFFFFFFFFFFFFF8);
        v817 = (void *)((v811 + 25) & 0xFFFFFFFFFFFFFFF8);
        void *v816 = *v817;
        v816[1] = v817[1];
        unint64_t v818 = v2044 + v2094;
        v819 = (long long *)(v2044 + v2064);
        unint64_t v820 = *(void *)(v2044 + v2064 + 16);
        if (v820 >= 0xFFFFFFFF) {
          LODWORD(v820) = -1;
        }
        int v821 = v820 - 1;
        swift_bridgeObjectRetain();
        if (v821 < 0)
        {
          *(void *)unint64_t v818 = *(void *)v819;
          *(unsigned char *)(v818 + 8) = *((unsigned char *)v819 + 8);
          *(unsigned char *)(v818 + 9) = *((unsigned char *)v819 + 9);
          v834 = (void *)*((void *)v819 + 2);
          id v835 = v834;
          *(void *)(v818 + 16) = v834;
          v836 = (void *)*((void *)v819 + 3);
          id v837 = v836;
          *(void *)(v818 + 24) = v836;
          *(unsigned char *)(v818 + 32) = *((unsigned char *)v819 + 32);
          *(unsigned char *)(v818 + 33) = *((unsigned char *)v819 + 33);
          *(unsigned char *)(v818 + 34) = *((unsigned char *)v819 + 34);
          *(void *)(v818 + 40) = *((void *)v819 + 5);
          *(void *)(v818 + 48) = *((void *)v819 + 6);
          *(void *)(v818 + 56) = *((void *)v819 + 7);
          *(void *)(v818 + 64) = *((void *)v819 + 8);
          *(unsigned char *)(v818 + 72) = *((unsigned char *)v819 + 72);
          *(void *)(v818 + 80) = *((void *)v819 + 10);
          *(void *)(v818 + 88) = *((void *)v819 + 11);
          v2095 = (void *)*((void *)v819 + 12);
          *(void *)(v818 + 96) = v2095;
          *(unsigned char *)(v818 + 104) = *((unsigned char *)v819 + 104);
          *(unsigned char *)(v818 + 105) = *((unsigned char *)v819 + 105);
          *(void *)(v818 + 112) = *((void *)v819 + 14);
          *(void *)(v818 + 120) = *((void *)v819 + 15);
          *(void *)(v818 + 128) = *((void *)v819 + 16);
          *(void *)(v818 + 136) = *((void *)v819 + 17);
          *(void *)(v818 + 144) = *((void *)v819 + 18);
          *(void *)(v818 + 152) = *((void *)v819 + 19);
          *(void *)(v818 + 160) = *((void *)v819 + 20);
          *(void *)(v818 + 168) = *((void *)v819 + 21);
          *(unsigned char *)(v818 + 176) = *((unsigned char *)v819 + 176);
          *(void *)(v818 + 184) = *((void *)v819 + 23);
          uint64_t v838 = *((void *)v819 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v839 = v2095;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v838)
          {
            *(void *)(v818 + 192) = v838;
            *(void *)(v818 + 200) = *((void *)v819 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v818 + 192) = v819[12];
          }
          size_t v122 = __n;
          uint64_t v84 = v1999;
          uint64_t v115 = v2027;
          *(void *)(v818 + 208) = *((void *)v819 + 26);
          *(void *)(v818 + 216) = *((void *)v819 + 27);
          *(void *)(v818 + 224) = *((void *)v819 + 28);
          *(void *)(v818 + 232) = *((void *)v819 + 29);
          *(void *)(v818 + 240) = *((void *)v819 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v822 = *v819;
          long long v823 = v819[1];
          long long v824 = v819[3];
          *(_OWORD *)(v818 + 32) = v819[2];
          *(_OWORD *)(v818 + 48) = v824;
          *(_OWORD *)unint64_t v818 = v822;
          *(_OWORD *)(v818 + 16) = v823;
          long long v825 = v819[4];
          long long v826 = v819[5];
          long long v827 = v819[7];
          *(_OWORD *)(v818 + 96) = v819[6];
          *(_OWORD *)(v818 + 112) = v827;
          *(_OWORD *)(v818 + 64) = v825;
          *(_OWORD *)(v818 + 80) = v826;
          long long v828 = v819[8];
          long long v829 = v819[9];
          long long v830 = v819[11];
          *(_OWORD *)(v818 + 160) = v819[10];
          *(_OWORD *)(v818 + 176) = v830;
          *(_OWORD *)(v818 + 128) = v828;
          *(_OWORD *)(v818 + 144) = v829;
          long long v831 = v819[12];
          long long v832 = v819[13];
          long long v833 = v819[14];
          *(void *)(v818 + 240) = *((void *)v819 + 30);
          *(_OWORD *)(v818 + 208) = v832;
          *(_OWORD *)(v818 + 224) = v833;
          *(_OWORD *)(v818 + 192) = v831;
          uint64_t v84 = v1999;
          size_t v122 = __n;
        }
        v921 = (_OWORD *)((v818 + 255) & 0xFFFFFFFFFFFFFFF8);
        v922 = (long long *)(((unint64_t)v819 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v923 = *v922;
        *(_OWORD *)((char *)v921 + 9) = *(long long *)((char *)v922 + 9);
        _OWORD *v921 = v923;
        unint64_t v924 = (v818 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v925 = ((unint64_t)v819 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v926 = *(_OWORD *)v925;
        *(unsigned char *)(v924 + 16) = *(unsigned char *)(v925 + 16);
        *(_OWORD *)unint64_t v924 = v926;
        v927 = (void *)((v818 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v928 = ((unint64_t)v819 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v929 = *(void *)v928;
        v928 += 15;
        void *v927 = v929;
        v930 = (void *)(((unint64_t)v927 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v931 = *(void *)(v928 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v932 = *(void *)((v928 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_24D5203A8(v931, v932);
        void *v930 = v931;
        v930[1] = v932;
        size_t v763 = v1993;
        uint64_t v762 = v1971;
        uint64_t v118 = AssociatedTypeWitness;
        size_t v761 = v2037;
        uint64_t v116 = v2018;
        if (!v1971) {
          goto LABEL_985;
        }
LABEL_1020:
        unint64_t v933 = ((((v1964
                 + 327
                 + ((((((((((v1970 + 7 + v763) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v934 = (void *)(((unint64_t)a1 + v1923 + v933) & v84);
        v935 = (const void *)((unint64_t)&a2[v1923 + v933] & v84);
        unint64_t v2096 = v1970 + 7;
        v2055 = v934;
        uint64_t v2065 = v1964 + 327;
        if (v116 == v1965)
        {
          int v936 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1997 + 48))(v935, v116, v118);
          goto LABEL_1022;
        }
        unint64_t v942 = ((unint64_t)v935 + v1984) & v2078;
        unint64_t v943 = (v1954 + v942) & v115;
        if (v1966 == v1965)
        {
          if (v1958 == v1966)
          {
            int v936 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1977 + 48))((v1954 + v942) & v115, v1958, v1976);
            goto LABEL_1022;
          }
          v1020 = (unint64_t *)((v1982 + v943) & 0xFFFFFFFFFFFFFFF8);
          if (v1944 <= 0x7FFFFFFE)
          {
            unint64_t v1021 = *v1020;
            goto LABEL_1246;
          }
          int v936 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1974 + 48))(((unint64_t)v1020 + v1972) & v1916, v1940, v1973);
        }
        else
        {
          size_t v944 = v943 + v2040;
          if ((v1942 & 0x80000000) == 0)
          {
            unint64_t v945 = *(void *)(v944 + 8);
            if (v945 >= 0xFFFFFFFF) {
              LODWORD(v945) = -1;
            }
            if (v945 != -1) {
              goto LABEL_1023;
            }
LABEL_1032:
            unint64_t v942 = ((unint64_t)v935 + v1984) & v2078;
            unint64_t v943 = (v1954 + v942) & v115;
            goto LABEL_1033;
          }
          uint64_t v1022 = (v1992 + ((v2045 + v944) & v2011)) & v2067;
          if (v762 <= 0x7FFFFFFD)
          {
            unint64_t v1021 = *(void *)(((v1939 + ((v1988 + v1022) & v2067)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1246:
            if (v1021 >= 0xFFFFFFFF) {
              LODWORD(v1021) = -1;
            }
            if ((v1021 + 1) >= 2) {
              goto LABEL_1023;
            }
LABEL_1033:
            v946 = *(void (**)(void *, const void *, uint64_t))(v1997 + 16);
            v2031 = v935;
            v946(v934, v935, v118);
            v946((void *)(((unint64_t)v934 + v1984) & v2078), (const void *)v942, v118);
            unint64_t v947 = (v1954 + (((unint64_t)v934 + v1984) & v2078)) & v115;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v947, v943, v1976);
            v948 = (void *)((v1982 + v947) & 0xFFFFFFFFFFFFFFF8);
            v949 = (void *)((v1982 + v943) & 0xFFFFFFFFFFFFFFF8);
            void *v948 = *v949;
            unint64_t v950 = ((unint64_t)v948 + v1972) & v1916;
            unint64_t v951 = ((unint64_t)v949 + v1972) & v1916;
            v952 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
            swift_bridgeObjectRetain();
            v952(v950, v951, v1973);
            v953 = (void *)((v1968 + v951) & 0xFFFFFFFFFFFFFFF8);
            v954 = (void *)((v1968 + v950) & 0xFFFFFFFFFFFFFFF8);
            void *v954 = *v953;
            v955 = (void *)(((unint64_t)v954 + 15) & 0xFFFFFFFFFFFFFFF8);
            v956 = (void *)(((unint64_t)v953 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v955 = *v956;
            v955[1] = v956[1];
            v957 = (void *)(v947 + v2040);
            void *v957 = *(void *)(v943 + v2040);
            v957[1] = *(void *)(v943 + v2040 + 8);
            size_t v958 = (v2045 + v947 + v2040) & v2011;
            size_t v959 = (v2045 + v943 + v2040) & v2011;
            *(unsigned char *)size_t v958 = *(unsigned char *)v959;
            uint64_t v960 = v958 | 4;
            int v961 = *(_DWORD *)(v959 | 4);
            *(unsigned char *)(v960 + 4) = *(unsigned char *)((v959 | 4) + 4);
            *(_DWORD *)uint64_t v960 = v961;
            *(_WORD *)(v958 + 10) = *(_WORD *)(v959 + 0xA);
            size_t v962 = (v1992 + v958) & v2067;
            size_t v2081 = v959;
            size_t v963 = (v1992 + v959) & v2067;
            v964 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v964(v962, v963, v1989);
            size_t v965 = (v1988 + v962) & v2067;
            size_t v966 = (v1988 + v963) & v2067;
            v964(v965, v966, v1989);
            v967 = (unsigned char *)(v965 + v1993);
            unsigned char *v967 = *(unsigned char *)(v966 + v1993);
            v967[1] = *(unsigned char *)(v966 + v1993 + 1);
            v967[2] = *(unsigned char *)(v966 + v1993 + 2);
            v967[3] = *(unsigned char *)(v966 + v1993 + 3);
            v967[4] = *(unsigned char *)(v966 + v1993 + 4);
            unint64_t v968 = (v965 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v969 = (v966 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v968 = *(void *)v969;
            *(void *)(v968 + 8) = *(void *)(v969 + 8);
            *(unsigned char *)(v968 + 16) = *(unsigned char *)(v969 + 16);
            *(unsigned char *)(v968 + 17) = *(unsigned char *)(v969 + 17);
            *(unsigned char *)(v968 + 18) = *(unsigned char *)(v969 + 18);
            *(unsigned char *)(v968 + 19) = *(unsigned char *)(v969 + 19);
            unint64_t v970 = (v968 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v971 = (v969 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v970 = *(void *)v971;
            *(unsigned char *)(v970 + 8) = *(unsigned char *)(v971 + 8);
            *(unsigned char *)(v970 + 9) = *(unsigned char *)(v971 + 9);
            *(unsigned char *)(v970 + 10) = *(unsigned char *)(v971 + 10);
            *(unsigned char *)(v970 + 11) = *(unsigned char *)(v971 + 11);
            *(unsigned char *)(v970 + 12) = *(unsigned char *)(v971 + 12);
            v972 = (void *)((v969 + 47) & 0xFFFFFFFFFFFFFFF8);
            v973 = (void *)((v968 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v973 = *v972;
            unint64_t v974 = ((unint64_t)v973 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v975 = ((unint64_t)v972 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v974 = *(void *)v975;
            *(unsigned char *)(v974 + 8) = *(unsigned char *)(v975 + 8);
            *(unsigned char *)(v974 + 9) = *(unsigned char *)(v975 + 9);
            v976 = (void *)((v1985 + v974) & v2067);
            v977 = (const void *)((v1985 + v975) & v2067);
            v978 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
            swift_bridgeObjectRetain();
            if (v978(v977, 1, v1989))
            {
              size_t v940 = __n;
              memcpy(v976, v977, __n);
            }
            else
            {
              v964((size_t)v976, (size_t)v977, v1989);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v976, 0, 1, v1989);
              size_t v940 = __n;
            }
            v979 = (void *)(((unint64_t)v976 + v1986) & 0xFFFFFFFFFFFFFFF8);
            v980 = (void *)(((unint64_t)v977 + v1986) & 0xFFFFFFFFFFFFFFF8);
            void *v979 = *v980;
            unint64_t v981 = ((unint64_t)v979 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v982 = ((unint64_t)v980 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v983 = *(void *)v982;
            *(unsigned char *)(v981 + 8) = *(unsigned char *)(v982 + 8);
            *(void *)unint64_t v981 = v983;
            v984 = (void *)(((unint64_t)v979 + 31) & 0xFFFFFFFFFFFFFFF8);
            v985 = (void *)(((unint64_t)v980 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v984 = *v985;
            unint64_t v986 = ((unint64_t)v984 + 15) & 0xFFFFFFFFFFFFFFF8;
            v987 = (uint64_t *)(((unint64_t)v985 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v988 = v987[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            size_t v937 = v2047;
            if ((v988 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v986 = *(_OWORD *)v987;
            }
            else
            {
              uint64_t v989 = *v987;
              sub_24D3F9C18(*v987, v988);
              *(void *)unint64_t v986 = v989;
              *(void *)(v986 + 8) = v988;
            }
            unint64_t v990 = (v986 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v991 = ((unint64_t)v987 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v992 = *(void *)v991;
            *(unsigned char *)(v990 + 8) = *(unsigned char *)(v991 + 8);
            *(void *)unint64_t v990 = v992;
            *(unsigned char *)(v990 + 9) = *(unsigned char *)(v991 + 9);
            unint64_t v993 = (v990 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v994 = (v991 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v995 = *(_DWORD *)v994;
            *(unsigned char *)(v993 + 4) = *(unsigned char *)(v994 + 4);
            *(_DWORD *)unint64_t v993 = v995;
            v996 = (void *)((v990 + 25) & 0xFFFFFFFFFFFFFFF8);
            v997 = (void *)((v991 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v996 = *v997;
            v996[1] = v997[1];
            size_t v998 = v958 + v2044;
            v999 = (long long *)(v2081 + v2044);
            unint64_t v1000 = *(void *)(v2081 + v2044 + 16);
            if (v1000 >= 0xFFFFFFFF) {
              LODWORD(v1000) = -1;
            }
            int v1001 = v1000 - 1;
            swift_bridgeObjectRetain();
            if (v1001 < 0)
            {
              *(void *)size_t v998 = *(void *)v999;
              *(unsigned char *)(v998 + 8) = *((unsigned char *)v999 + 8);
              *(unsigned char *)(v998 + 9) = *((unsigned char *)v999 + 9);
              v1014 = (void *)*((void *)v999 + 2);
              id v1015 = v1014;
              *(void *)(v998 + 16) = v1014;
              v1016 = (void *)*((void *)v999 + 3);
              id v1017 = v1016;
              *(void *)(v998 + 24) = v1016;
              *(unsigned char *)(v998 + 32) = *((unsigned char *)v999 + 32);
              *(unsigned char *)(v998 + 33) = *((unsigned char *)v999 + 33);
              *(unsigned char *)(v998 + 34) = *((unsigned char *)v999 + 34);
              *(void *)(v998 + 40) = *((void *)v999 + 5);
              *(void *)(v998 + 48) = *((void *)v999 + 6);
              *(void *)(v998 + 56) = *((void *)v999 + 7);
              *(void *)(v998 + 64) = *((void *)v999 + 8);
              *(unsigned char *)(v998 + 72) = *((unsigned char *)v999 + 72);
              *(void *)(v998 + 80) = *((void *)v999 + 10);
              *(void *)(v998 + 88) = *((void *)v999 + 11);
              v2082 = (void *)*((void *)v999 + 12);
              *(void *)(v998 + 96) = v2082;
              *(unsigned char *)(v998 + 104) = *((unsigned char *)v999 + 104);
              *(unsigned char *)(v998 + 105) = *((unsigned char *)v999 + 105);
              *(void *)(v998 + 112) = *((void *)v999 + 14);
              *(void *)(v998 + 120) = *((void *)v999 + 15);
              *(void *)(v998 + 128) = *((void *)v999 + 16);
              *(void *)(v998 + 136) = *((void *)v999 + 17);
              *(void *)(v998 + 144) = *((void *)v999 + 18);
              *(void *)(v998 + 152) = *((void *)v999 + 19);
              *(void *)(v998 + 160) = *((void *)v999 + 20);
              *(void *)(v998 + 168) = *((void *)v999 + 21);
              *(unsigned char *)(v998 + 176) = *((unsigned char *)v999 + 176);
              *(void *)(v998 + 184) = *((void *)v999 + 23);
              uint64_t v1018 = *((void *)v999 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1019 = v2082;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1018)
              {
                *(void *)(v998 + 192) = v1018;
                *(void *)(v998 + 200) = *((void *)v999 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v998 + 192) = v999[12];
              }
              size_t v940 = __n;
              size_t v937 = v2047;
              uint64_t v938 = v1999;
              unint64_t v939 = v2022 + 2;
              *(void *)(v998 + 208) = *((void *)v999 + 26);
              *(void *)(v998 + 216) = *((void *)v999 + 27);
              *(void *)(v998 + 224) = *((void *)v999 + 28);
              *(void *)(v998 + 232) = *((void *)v999 + 29);
              *(void *)(v998 + 240) = *((void *)v999 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1002 = *v999;
              long long v1003 = v999[1];
              long long v1004 = v999[3];
              *(_OWORD *)(v998 + 32) = v999[2];
              *(_OWORD *)(v998 + 48) = v1004;
              *(_OWORD *)size_t v998 = v1002;
              *(_OWORD *)(v998 + 16) = v1003;
              long long v1005 = v999[4];
              long long v1006 = v999[5];
              long long v1007 = v999[7];
              *(_OWORD *)(v998 + 96) = v999[6];
              *(_OWORD *)(v998 + 112) = v1007;
              *(_OWORD *)(v998 + 64) = v1005;
              *(_OWORD *)(v998 + 80) = v1006;
              long long v1008 = v999[8];
              long long v1009 = v999[9];
              long long v1010 = v999[11];
              *(_OWORD *)(v998 + 160) = v999[10];
              *(_OWORD *)(v998 + 176) = v1010;
              *(_OWORD *)(v998 + 128) = v1008;
              *(_OWORD *)(v998 + 144) = v1009;
              long long v1011 = v999[12];
              long long v1012 = v999[13];
              long long v1013 = v999[14];
              *(void *)(v998 + 240) = *((void *)v999 + 30);
              *(_OWORD *)(v998 + 208) = v1012;
              *(_OWORD *)(v998 + 224) = v1013;
              *(_OWORD *)(v998 + 192) = v1011;
              uint64_t v938 = v1999;
              unint64_t v939 = v2022 + 2;
            }
            v1129 = (_OWORD *)((v998 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1130 = (long long *)(((unint64_t)v999 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1131 = *v1130;
            *(_OWORD *)((char *)v1129 + 9) = *(long long *)((char *)v1130 + 9);
            _OWORD *v1129 = v1131;
            unint64_t v1132 = (v998 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1133 = ((unint64_t)v999 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1134 = *(_OWORD *)v1133;
            *(unsigned char *)(v1132 + 16) = *(unsigned char *)(v1133 + 16);
            *(_OWORD *)unint64_t v1132 = v1134;
            v1135 = (void *)((v998 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1136 = ((unint64_t)v999 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1137 = *(void *)v1136;
            v1136 += 15;
            void *v1135 = v1137;
            v1138 = (void *)(((unint64_t)v1135 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1139 = *(void *)(v1136 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1140 = *(void *)((v1136 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_24D5203A8(v1139, v1140);
            void *v1138 = v1139;
            v1138[1] = v1140;
            size_t v941 = v1993;
            v935 = v2031;
            size_t v761 = v2037;
            if (v1971) {
              goto LABEL_1087;
            }
            goto LABEL_1024;
          }
          int v936 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1990 + 48))(v1022, v762, v1989);
        }
LABEL_1022:
        if (v936)
        {
LABEL_1023:
          memcpy(v934, v935, v761);
          size_t v937 = v2047;
          uint64_t v938 = v1999;
          unint64_t v939 = v2022 + 2;
          size_t v940 = __n;
LABEL_1024:
          size_t v941 = v940;
LABEL_1087:
          unint64_t v1141 = ((((v2065
                    + ((((((((((v2096 + v941) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          *(void *)(((unint64_t)v2055 + v1141) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v935
                                                                                             + v1141) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1142 = ((v1962
                  + ((v1923
                    + ((((v2065
                        + ((((((((((v2096 + v940) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16) & v938)) & 0xFFFFFFFFFFFFFFF8)
                + 8;
          if (v1142 <= v2019) {
            unint64_t v1142 = v2019;
          }
          if (v1960 > v1142) {
            unint64_t v1142 = v1960;
          }
          if (v761 > v1142) {
            unint64_t v1142 = v761;
          }
          if (v1920 > v1142) {
            unint64_t v1142 = v1920;
          }
          if (v937 > v1142) {
            unint64_t v1142 = v937;
          }
          if (v939 > v1142) {
            unint64_t v1142 = v939;
          }
          if (v2008 > v1142) {
            unint64_t v1142 = ((v2009 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          }
          if (v1918 > v1142) {
            unint64_t v1142 = v2009 + 2;
          }
          if (v1947 > v1142) {
            unint64_t v1142 = (v2009 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          if (v1142 <= v937) {
            unint64_t v1142 = v937;
          }
          if (v1142 <= v2020) {
            unint64_t v1142 = v2020;
          }
          if (v1142 <= v1948) {
            unint64_t v1142 = v1948;
          }
          if (v1142 <= v937) {
            unint64_t v1142 = v937;
          }
          if (v1142 <= v1961) {
            unint64_t v1142 = v1961;
          }
          if (v1142 <= v1918) {
            unint64_t v1142 = v2009 + 2;
          }
          if (v1142 <= v937) {
            unint64_t v1142 = v937;
          }
          if (v1142 <= v2022) {
            unint64_t v1142 = v2022;
          }
          if (v1142 <= v937) {
            unint64_t v1142 = v937;
          }
          if (v1142 <= v1949) {
            unint64_t v1142 = v1949;
          }
          if (v1142 <= v1918) {
            unint64_t v1142 = v2009 + 2;
          }
          if (v1142 <= v937) {
            unint64_t v1142 = v937;
          }
          if (v1142 <= 0x38) {
            unint64_t v1142 = 56;
          }
          if (v1142 > 3) {
            goto LABEL_1132;
          }
          unsigned int v1144 = ((1 << (8 * v1142)) + 5) >> (8 * v1142);
          if (v1144 <= 0xFFD6)
          {
            if (v1144 <= 0xD6)
            {
LABEL_1132:
              char v1143 = 5;
LABEL_1186:
              *((unsigned char *)a1 + v1142) = v1143;
              return a1;
            }
            __int16 v1145 = 5;
LABEL_1190:
            *(_WORD *)((char *)a1 + v1142) = v1145;
            return a1;
          }
          int v1146 = 5;
LABEL_1192:
          *(_DWORD *)((char *)a1 + v1142) = v1146;
          return a1;
        }
        goto LABEL_1032;
      }
      unint64_t v121 = v72;
      uint64_t v123 = v2087;
      unint64_t v389 = (unint64_t)&v72[v1984] & v2078;
      unint64_t v390 = (v389 + v2028 + v2087) & v80;
      uint64_t v118 = AssociatedTypeWitness;
      uint64_t v117 = v1997;
      if (v1966 == v1965)
      {
        size_t v122 = __n;
        if (v1958 == v1966)
        {
          uint64_t v391 = *(uint64_t (**)(unint64_t))(v1977 + 48);
          unint64_t v392 = (v389 + v2028 + v2087) & v115;
LABEL_982:
          v760 = v72;
          int v120 = v391(v392);
          uint64_t v123 = v2087;
          unint64_t v121 = v760;
          goto LABEL_983;
        }
        uint64_t v621 = (unint64_t *)((v1982 + v390) & 0xFFFFFFFFFFFFFFF8);
        if (v1944 > 0x7FFFFFFE)
        {
          unint64_t v392 = ((unint64_t)v621 + v1972) & v81;
          uint64_t v391 = *(uint64_t (**)(unint64_t))(v1974 + 48);
          goto LABEL_982;
        }
        unint64_t v622 = *v621;
      }
      else
      {
        size_t v498 = v2040 + v390;
        size_t v122 = __n;
        if ((v1942 & 0x80000000) == 0)
        {
          unint64_t v499 = *(void *)(v498 + 8);
          if (v499 >= 0xFFFFFFFF) {
            LODWORD(v499) = -1;
          }
          int v120 = v499 + 1;
          goto LABEL_983;
        }
        unint64_t v392 = (v1992 + ((v2045 + v498) & v2011)) & v83;
        if (v1971 > 0x7FFFFFFD)
        {
          uint64_t v391 = *(uint64_t (**)(unint64_t))(v1990 + 48);
          goto LABEL_982;
        }
        unint64_t v622 = *(void *)(((v1939 + ((v1988 + v392) & v83)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v622 >= 0xFFFFFFFF) {
        LODWORD(v622) = -1;
      }
      if ((v622 + 1) >= 2) {
        goto LABEL_984;
      }
      goto LABEL_987;
    case 6u:
      uint64_t v124 = ~v2003;
      uint64_t v125 = ~v33;
      uint64_t v2088 = ~v2017;
      uint64_t v2012 = ~v2066;
      unint64_t v2029 = ((((v1969 + ((v36 + 8 + (v1987 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      size_t v1921 = v40;
      uint64_t v1924 = v33;
      unsigned int v126 = v1957;
      unsigned int v127 = v1956;
      unint64_t v1919 = v2009 + 2;
      uint64_t v2004 = ~v36;
      uint64_t v1913 = ~v2014;
      uint64_t v1914 = ~v37;
      if (v1957 == v1956)
      {
        uint64_t v128 = v2054;
        unint64_t v129 = v72;
        int v130 = (*(uint64_t (**)(void))(v2054 + 48))();
        uint64_t v85 = ~v37;
        uint64_t v131 = v129;
        uint64_t v132 = v125;
        uint64_t v133 = v124;
LABEL_1001:
        if (v130)
        {
LABEL_1002:
          memcpy(a1, v131, v1921);
          size_t v841 = __n;
LABEL_1003:
          size_t v842 = v841;
          goto LABEL_1053;
        }
        unint64_t v393 = (unint64_t)&v131[v1983] & v2088;
        unint64_t v394 = (v393 + v2025 + v37) & v85;
LABEL_1005:
        uint64_t v2000 = v132;
        v843 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v128 + 16);
        uint64_t v844 = v85;
        v843(a1, v131, v1996);
        unint64_t v845 = ((unint64_t)a1 + v1983) & v2088;
        v843((void *)v845, (unsigned __int8 *)v393, v1996);
        unint64_t v846 = (v845 + v2025 + v37) & v844;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 16))(v846, v394, v1978);
        v847 = (void *)((v1987 + v846) & 0xFFFFFFFFFFFFFFF8);
        v848 = (void *)((v1987 + v394) & 0xFFFFFFFFFFFFFFF8);
        void *v847 = *v848;
        unint64_t v849 = ((unint64_t)v847 + v1981) & v2004;
        unint64_t v850 = ((unint64_t)v848 + v1981) & v2004;
        v851 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
        swift_bridgeObjectRetain();
        v851(v849, v850, v1975);
        v852 = (void *)((v1969 + v850) & 0xFFFFFFFFFFFFFFF8);
        v853 = (void *)((v1969 + v849) & 0xFFFFFFFFFFFFFFF8);
        void *v853 = *v852;
        v854 = (void *)(((unint64_t)v853 + 15) & 0xFFFFFFFFFFFFFFF8);
        v855 = (void *)(((unint64_t)v852 + 15) & 0xFFFFFFFFFFFFFFF8);
        void *v854 = *v855;
        v854[1] = v855[1];
        v856 = (void *)(v2029 + v846);
        void *v856 = *(void *)(v2029 + v394);
        v856[1] = *(void *)(v2029 + v394 + 8);
        unint64_t v857 = (v2045 + v2029 + v846) & v2012;
        unint64_t v858 = (v2045 + v2029 + v394) & v2012;
        *(unsigned char *)unint64_t v857 = *(unsigned char *)v858;
        uint64_t v859 = v857 | 4;
        int v860 = *(_DWORD *)(v858 | 4);
        *(unsigned char *)(v859 + 4) = *(unsigned char *)((v858 | 4) + 4);
        *(_DWORD *)uint64_t v859 = v860;
        *(_WORD *)(v857 + 10) = *(_WORD *)(v858 + 0xA);
        unint64_t v861 = (v1992 + v857) & v133;
        unint64_t v2079 = v858;
        unint64_t v862 = (v1992 + v858) & v133;
        v863 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1990 + 16);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v863(v861, v862, v1989);
        unint64_t v864 = (v1988 + v861) & v133;
        unint64_t v865 = (v1988 + v862) & v133;
        v863(v864, v865, v1989);
        v866 = (unsigned char *)(v864 + v1993);
        unsigned char *v866 = *(unsigned char *)(v865 + v1993);
        v866[1] = *(unsigned char *)(v865 + v1993 + 1);
        v866[2] = *(unsigned char *)(v865 + v1993 + 2);
        v866[3] = *(unsigned char *)(v865 + v1993 + 3);
        v866[4] = *(unsigned char *)(v865 + v1993 + 4);
        unint64_t v867 = (v864 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v868 = (v865 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v867 = *(void *)v868;
        *(void *)(v867 + 8) = *(void *)(v868 + 8);
        *(unsigned char *)(v867 + 16) = *(unsigned char *)(v868 + 16);
        *(unsigned char *)(v867 + 17) = *(unsigned char *)(v868 + 17);
        *(unsigned char *)(v867 + 18) = *(unsigned char *)(v868 + 18);
        *(unsigned char *)(v867 + 19) = *(unsigned char *)(v868 + 19);
        unint64_t v869 = (v867 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v870 = (v868 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v869 = *(void *)v870;
        *(unsigned char *)(v869 + 8) = *(unsigned char *)(v870 + 8);
        *(unsigned char *)(v869 + 9) = *(unsigned char *)(v870 + 9);
        *(unsigned char *)(v869 + 10) = *(unsigned char *)(v870 + 10);
        *(unsigned char *)(v869 + 11) = *(unsigned char *)(v870 + 11);
        *(unsigned char *)(v869 + 12) = *(unsigned char *)(v870 + 12);
        v871 = (void *)((v868 + 47) & 0xFFFFFFFFFFFFFFF8);
        v872 = (void *)((v867 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v872 = *v871;
        unint64_t v873 = ((unint64_t)v872 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v874 = ((unint64_t)v871 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v873 = *(void *)v874;
        *(unsigned char *)(v873 + 8) = *(unsigned char *)(v874 + 8);
        *(unsigned char *)(v873 + 9) = *(unsigned char *)(v874 + 9);
        v875 = (void *)((v1985 + v873) & v133);
        uint64_t v2070 = v133;
        v876 = (const void *)((v1985 + v874) & v133);
        v877 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
        swift_bridgeObjectRetain();
        unint64_t v878 = v857;
        if (v877(v876, 1, v1989))
        {
          size_t v841 = __n;
          memcpy(v875, v876, __n);
        }
        else
        {
          v863((unint64_t)v875, (unint64_t)v876, v1989);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v875, 0, 1, v1989);
          size_t v841 = __n;
        }
        v879 = (void *)(((unint64_t)v875 + v1986) & 0xFFFFFFFFFFFFFFF8);
        v880 = (void *)(((unint64_t)v876 + v1986) & 0xFFFFFFFFFFFFFFF8);
        void *v879 = *v880;
        unint64_t v881 = ((unint64_t)v879 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v882 = ((unint64_t)v880 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v883 = *(void *)v882;
        *(unsigned char *)(v881 + 8) = *(unsigned char *)(v882 + 8);
        *(void *)unint64_t v881 = v883;
        v884 = (void *)(((unint64_t)v879 + 31) & 0xFFFFFFFFFFFFFFF8);
        v885 = (void *)(((unint64_t)v880 + 31) & 0xFFFFFFFFFFFFFFF8);
        void *v884 = *v885;
        unint64_t v886 = ((unint64_t)v884 + 15) & 0xFFFFFFFFFFFFFFF8;
        v887 = (uint64_t *)(((unint64_t)v885 + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v888 = v887[1];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v889 = v133;
        if ((v888 & 0x3000000000000000) != 0)
        {
          *(_OWORD *)unint64_t v886 = *(_OWORD *)v887;
        }
        else
        {
          uint64_t v890 = *v887;
          sub_24D3F9C18(*v887, v888);
          *(void *)unint64_t v886 = v890;
          *(void *)(v886 + 8) = v888;
        }
        unint64_t v891 = (v886 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v892 = ((unint64_t)v887 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v893 = *(void *)v892;
        *(unsigned char *)(v891 + 8) = *(unsigned char *)(v892 + 8);
        *(void *)unint64_t v891 = v893;
        *(unsigned char *)(v891 + 9) = *(unsigned char *)(v892 + 9);
        unint64_t v894 = (v891 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v895 = (v892 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        int v896 = *(_DWORD *)v895;
        *(unsigned char *)(v894 + 4) = *(unsigned char *)(v895 + 4);
        *(_DWORD *)unint64_t v894 = v896;
        v897 = (void *)((v891 + 25) & 0xFFFFFFFFFFFFFFF8);
        v898 = (void *)((v892 + 25) & 0xFFFFFFFFFFFFFFF8);
        void *v897 = *v898;
        v897[1] = v898[1];
        unint64_t v899 = v878 + v2044;
        v900 = (long long *)(v2079 + v2044);
        unint64_t v901 = *(void *)(v2079 + v2044 + 16);
        if (v901 >= 0xFFFFFFFF) {
          LODWORD(v901) = -1;
        }
        int v902 = v901 - 1;
        swift_bridgeObjectRetain();
        if (v902 < 0)
        {
          *(void *)unint64_t v899 = *(void *)v900;
          *(unsigned char *)(v899 + 8) = *((unsigned char *)v900 + 8);
          *(unsigned char *)(v899 + 9) = *((unsigned char *)v900 + 9);
          v915 = (void *)*((void *)v900 + 2);
          id v916 = v915;
          *(void *)(v899 + 16) = v915;
          v917 = (void *)*((void *)v900 + 3);
          id v918 = v917;
          *(void *)(v899 + 24) = v917;
          *(unsigned char *)(v899 + 32) = *((unsigned char *)v900 + 32);
          *(unsigned char *)(v899 + 33) = *((unsigned char *)v900 + 33);
          *(unsigned char *)(v899 + 34) = *((unsigned char *)v900 + 34);
          *(void *)(v899 + 40) = *((void *)v900 + 5);
          *(void *)(v899 + 48) = *((void *)v900 + 6);
          *(void *)(v899 + 56) = *((void *)v900 + 7);
          *(void *)(v899 + 64) = *((void *)v900 + 8);
          *(unsigned char *)(v899 + 72) = *((unsigned char *)v900 + 72);
          *(void *)(v899 + 80) = *((void *)v900 + 10);
          *(void *)(v899 + 88) = *((void *)v900 + 11);
          v2080 = (void *)*((void *)v900 + 12);
          *(void *)(v899 + 96) = v2080;
          *(unsigned char *)(v899 + 104) = *((unsigned char *)v900 + 104);
          *(unsigned char *)(v899 + 105) = *((unsigned char *)v900 + 105);
          *(void *)(v899 + 112) = *((void *)v900 + 14);
          *(void *)(v899 + 120) = *((void *)v900 + 15);
          *(void *)(v899 + 128) = *((void *)v900 + 16);
          *(void *)(v899 + 136) = *((void *)v900 + 17);
          *(void *)(v899 + 144) = *((void *)v900 + 18);
          *(void *)(v899 + 152) = *((void *)v900 + 19);
          *(void *)(v899 + 160) = *((void *)v900 + 20);
          *(void *)(v899 + 168) = *((void *)v900 + 21);
          *(unsigned char *)(v899 + 176) = *((unsigned char *)v900 + 176);
          *(void *)(v899 + 184) = *((void *)v900 + 23);
          uint64_t v919 = *((void *)v900 + 24);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          id v920 = v2080;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v919)
          {
            *(void *)(v899 + 192) = v919;
            *(void *)(v899 + 200) = *((void *)v900 + 25);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            *(_OWORD *)(v899 + 192) = v900[12];
          }
          size_t v841 = __n;
          uint64_t v889 = v2070;
          *(void *)(v899 + 208) = *((void *)v900 + 26);
          *(void *)(v899 + 216) = *((void *)v900 + 27);
          *(void *)(v899 + 224) = *((void *)v900 + 28);
          *(void *)(v899 + 232) = *((void *)v900 + 29);
          *(void *)(v899 + 240) = *((void *)v900 + 30);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v903 = *v900;
          long long v904 = v900[1];
          long long v905 = v900[3];
          *(_OWORD *)(v899 + 32) = v900[2];
          *(_OWORD *)(v899 + 48) = v905;
          *(_OWORD *)unint64_t v899 = v903;
          *(_OWORD *)(v899 + 16) = v904;
          long long v906 = v900[4];
          long long v907 = v900[5];
          long long v908 = v900[7];
          *(_OWORD *)(v899 + 96) = v900[6];
          *(_OWORD *)(v899 + 112) = v908;
          *(_OWORD *)(v899 + 64) = v906;
          *(_OWORD *)(v899 + 80) = v907;
          long long v909 = v900[8];
          long long v910 = v900[9];
          long long v911 = v900[11];
          *(_OWORD *)(v899 + 160) = v900[10];
          *(_OWORD *)(v899 + 176) = v911;
          *(_OWORD *)(v899 + 128) = v909;
          *(_OWORD *)(v899 + 144) = v910;
          long long v912 = v900[12];
          long long v913 = v900[13];
          long long v914 = v900[14];
          *(void *)(v899 + 240) = *((void *)v900 + 30);
          *(_OWORD *)(v899 + 208) = v913;
          *(_OWORD *)(v899 + 224) = v914;
          *(_OWORD *)(v899 + 192) = v912;
        }
        v1023 = (_OWORD *)((v899 + 255) & 0xFFFFFFFFFFFFFFF8);
        v1024 = (long long *)(((unint64_t)v900 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v1025 = *v1024;
        *(_OWORD *)((char *)v1023 + 9) = *(long long *)((char *)v1024 + 9);
        _OWORD *v1023 = v1025;
        unint64_t v1026 = (v899 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v1027 = ((unint64_t)v900 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v1028 = *(_OWORD *)v1027;
        *(unsigned char *)(v1026 + 16) = *(unsigned char *)(v1027 + 16);
        *(_OWORD *)unint64_t v1026 = v1028;
        v1029 = (void *)((v899 + 311) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1030 = ((unint64_t)v900 + 311) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v1031 = *(void *)v1030;
        v1030 += 15;
        void *v1029 = v1031;
        v1032 = (void *)(((unint64_t)v1029 + 15) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v1033 = *(void *)(v1030 & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1034 = *(void *)((v1030 & 0xFFFFFFFFFFFFFFF8) + 8);
        sub_24D5203A8(v1033, v1034);
        void *v1032 = v1033;
        v1032[1] = v1034;
        size_t v842 = v1993;
        uint64_t v128 = v2054;
        uint64_t v133 = v889;
        uint64_t v132 = v2000;
        unsigned int v126 = v1957;
        unsigned int v127 = v1956;
        if (!v1971) {
          goto LABEL_1003;
        }
LABEL_1053:
        unint64_t v1035 = v1970 + 7;
        unint64_t v1036 = ((((v1953
                  + 327
                  + ((((((((((v1970 + 7 + v842) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 19) & 0xFFFFFFFFFFFFFFF8)
                    + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                + 15) & 0xFFFFFFFFFFFFFFF8)
              + 16;
        v1037 = (void *)(((unint64_t)a1 + v2014 + v1036) & v1913);
        v2041 = v1037;
        v2083 = (const void *)((unint64_t)&a2[v2014 + v1036] & v1913);
        if (v126 == v127)
        {
          int v1038 = (*(uint64_t (**)(void))(v128 + 48))();
          uint64_t v1039 = v1914;
LABEL_1068:
          if (v1038)
          {
LABEL_1069:
            v1048 = v2083;
            size_t v1049 = v1921;
            memcpy(v1037, v2083, v1921);
            uint64_t v1050 = v1964;
            size_t v1051 = v2047;
            goto LABEL_1070;
          }
          unint64_t v1040 = ((unint64_t)v2083 + v1983) & v2088;
          unint64_t v1041 = (v1955 + v1040) & v1039;
LABEL_1072:
          uint64_t v2001 = v132;
          v1053 = *(void (**)(void *, const void *, uint64_t))(v128 + 16);
          uint64_t v1054 = v1039;
          v1053(v1037, v2083, v1996);
          uint64_t v1055 = v133;
          v1053((void *)(((unint64_t)v1037 + v1983) & v2088), (const void *)v1040, v1996);
          unint64_t v1056 = (v1955 + (((unint64_t)v1037 + v1983) & v2088)) & v1054;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 16))(v1056, v1041, v1978);
          v1057 = (void *)((v1987 + v1056) & 0xFFFFFFFFFFFFFFF8);
          v1058 = (void *)((v1987 + v1041) & 0xFFFFFFFFFFFFFFF8);
          void *v1057 = *v1058;
          unint64_t v1059 = ((unint64_t)v1057 + v1981) & v2004;
          unint64_t v1060 = ((unint64_t)v1058 + v1981) & v2004;
          v1061 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
          swift_bridgeObjectRetain();
          v1061(v1059, v1060, v1975);
          v1062 = (void *)((v1969 + v1060) & 0xFFFFFFFFFFFFFFF8);
          v1063 = (void *)((v1969 + v1059) & 0xFFFFFFFFFFFFFFF8);
          void *v1063 = *v1062;
          v1064 = (void *)(((unint64_t)v1063 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1065 = (void *)(((unint64_t)v1062 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1064 = *v1065;
          v1064[1] = v1065[1];
          v1066 = (void *)(v1056 + v2029);
          void *v1066 = *(void *)(v1041 + v2029);
          v1066[1] = *(void *)(v1041 + v2029 + 8);
          unint64_t v1067 = (v2045 + v1056 + v2029) & v2012;
          unint64_t v1068 = (v2045 + v1041 + v2029) & v2012;
          *(unsigned char *)unint64_t v1067 = *(unsigned char *)v1068;
          uint64_t v1069 = v1067 | 4;
          int v1070 = *(_DWORD *)(v1068 | 4);
          *(unsigned char *)(v1069 + 4) = *(unsigned char *)((v1068 | 4) + 4);
          *(_DWORD *)uint64_t v1069 = v1070;
          *(_WORD *)(v1067 + 10) = *(_WORD *)(v1068 + 0xA);
          unint64_t v1071 = (v1992 + v1067) & v1055;
          unint64_t v2097 = v1068;
          unint64_t v1072 = (v1992 + v1068) & v1055;
          v1073 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1990 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1073(v1071, v1072, v1989);
          unint64_t v1074 = (v1988 + v1071) & v1055;
          unint64_t v1075 = (v1988 + v1072) & v1055;
          v1073(v1074, v1075, v1989);
          v1076 = (unsigned char *)(v1074 + v1993);
          unsigned char *v1076 = *(unsigned char *)(v1075 + v1993);
          v1076[1] = *(unsigned char *)(v1075 + v1993 + 1);
          v1076[2] = *(unsigned char *)(v1075 + v1993 + 2);
          v1076[3] = *(unsigned char *)(v1075 + v1993 + 3);
          v1076[4] = *(unsigned char *)(v1075 + v1993 + 4);
          unint64_t v1077 = (v1074 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1078 = (v1075 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1077 = *(void *)v1078;
          *(void *)(v1077 + 8) = *(void *)(v1078 + 8);
          *(unsigned char *)(v1077 + 16) = *(unsigned char *)(v1078 + 16);
          *(unsigned char *)(v1077 + 17) = *(unsigned char *)(v1078 + 17);
          *(unsigned char *)(v1077 + 18) = *(unsigned char *)(v1078 + 18);
          *(unsigned char *)(v1077 + 19) = *(unsigned char *)(v1078 + 19);
          unint64_t v1079 = (v1077 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1080 = (v1078 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1079 = *(void *)v1080;
          *(unsigned char *)(v1079 + 8) = *(unsigned char *)(v1080 + 8);
          *(unsigned char *)(v1079 + 9) = *(unsigned char *)(v1080 + 9);
          *(unsigned char *)(v1079 + 10) = *(unsigned char *)(v1080 + 10);
          *(unsigned char *)(v1079 + 11) = *(unsigned char *)(v1080 + 11);
          *(unsigned char *)(v1079 + 12) = *(unsigned char *)(v1080 + 12);
          v1081 = (void *)((v1078 + 47) & 0xFFFFFFFFFFFFFFF8);
          v1082 = (void *)((v1077 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v1082 = *v1081;
          unint64_t v1083 = ((unint64_t)v1082 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1084 = ((unint64_t)v1081 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1083 = *(void *)v1084;
          *(unsigned char *)(v1083 + 8) = *(unsigned char *)(v1084 + 8);
          *(unsigned char *)(v1083 + 9) = *(unsigned char *)(v1084 + 9);
          v1085 = (void *)((v1985 + v1083) & v1055);
          v1086 = (const void *)((v1985 + v1084) & v1055);
          v1087 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
          swift_bridgeObjectRetain();
          if (v1087(v1086, 1, v1989))
          {
            size_t v841 = __n;
            memcpy(v1085, v1086, __n);
          }
          else
          {
            v1073((unint64_t)v1085, (unint64_t)v1086, v1989);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1085, 0, 1, v1989);
            size_t v841 = __n;
          }
          v1088 = (void *)(((unint64_t)v1085 + v1986) & 0xFFFFFFFFFFFFFFF8);
          v1089 = (void *)(((unint64_t)v1086 + v1986) & 0xFFFFFFFFFFFFFFF8);
          void *v1088 = *v1089;
          unint64_t v1090 = ((unint64_t)v1088 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1091 = ((unint64_t)v1089 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1092 = *(void *)v1091;
          *(unsigned char *)(v1090 + 8) = *(unsigned char *)(v1091 + 8);
          *(void *)unint64_t v1090 = v1092;
          v1093 = (void *)(((unint64_t)v1088 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1094 = (void *)(((unint64_t)v1089 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1093 = *v1094;
          unint64_t v1095 = ((unint64_t)v1093 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1096 = (uint64_t *)(((unint64_t)v1094 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1097 = v1096[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          size_t v1051 = v2047;
          if ((v1097 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1095 = *(_OWORD *)v1096;
          }
          else
          {
            uint64_t v1098 = *v1096;
            sub_24D3F9C18(*v1096, v1097);
            *(void *)unint64_t v1095 = v1098;
            *(void *)(v1095 + 8) = v1097;
          }
          unint64_t v1099 = (v1095 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1100 = ((unint64_t)v1096 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1101 = *(void *)v1100;
          *(unsigned char *)(v1099 + 8) = *(unsigned char *)(v1100 + 8);
          *(void *)unint64_t v1099 = v1101;
          *(unsigned char *)(v1099 + 9) = *(unsigned char *)(v1100 + 9);
          unint64_t v1102 = (v1099 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1103 = (v1100 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1104 = *(_DWORD *)v1103;
          *(unsigned char *)(v1102 + 4) = *(unsigned char *)(v1103 + 4);
          *(_DWORD *)unint64_t v1102 = v1104;
          v1105 = (void *)((v1099 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1106 = (void *)((v1100 + 25) & 0xFFFFFFFFFFFFFFF8);
          void *v1105 = *v1106;
          v1105[1] = v1106[1];
          unint64_t v1107 = v1067 + v2044;
          v1108 = (long long *)(v2097 + v2044);
          unint64_t v1109 = *(void *)(v2097 + v2044 + 16);
          if (v1109 >= 0xFFFFFFFF) {
            LODWORD(v1109) = -1;
          }
          int v1110 = v1109 - 1;
          swift_bridgeObjectRetain();
          if (v1110 < 0)
          {
            *(void *)unint64_t v1107 = *(void *)v1108;
            *(unsigned char *)(v1107 + 8) = *((unsigned char *)v1108 + 8);
            *(unsigned char *)(v1107 + 9) = *((unsigned char *)v1108 + 9);
            v1123 = (void *)*((void *)v1108 + 2);
            id v1124 = v1123;
            *(void *)(v1107 + 16) = v1123;
            v1125 = (void *)*((void *)v1108 + 3);
            id v1126 = v1125;
            *(void *)(v1107 + 24) = v1125;
            *(unsigned char *)(v1107 + 32) = *((unsigned char *)v1108 + 32);
            *(unsigned char *)(v1107 + 33) = *((unsigned char *)v1108 + 33);
            *(unsigned char *)(v1107 + 34) = *((unsigned char *)v1108 + 34);
            *(void *)(v1107 + 40) = *((void *)v1108 + 5);
            *(void *)(v1107 + 48) = *((void *)v1108 + 6);
            *(void *)(v1107 + 56) = *((void *)v1108 + 7);
            *(void *)(v1107 + 64) = *((void *)v1108 + 8);
            *(unsigned char *)(v1107 + 72) = *((unsigned char *)v1108 + 72);
            *(void *)(v1107 + 80) = *((void *)v1108 + 10);
            *(void *)(v1107 + 88) = *((void *)v1108 + 11);
            v2098 = (void *)*((void *)v1108 + 12);
            *(void *)(v1107 + 96) = v2098;
            *(unsigned char *)(v1107 + 104) = *((unsigned char *)v1108 + 104);
            *(unsigned char *)(v1107 + 105) = *((unsigned char *)v1108 + 105);
            *(void *)(v1107 + 112) = *((void *)v1108 + 14);
            *(void *)(v1107 + 120) = *((void *)v1108 + 15);
            *(void *)(v1107 + 128) = *((void *)v1108 + 16);
            *(void *)(v1107 + 136) = *((void *)v1108 + 17);
            *(void *)(v1107 + 144) = *((void *)v1108 + 18);
            *(void *)(v1107 + 152) = *((void *)v1108 + 19);
            *(void *)(v1107 + 160) = *((void *)v1108 + 20);
            *(void *)(v1107 + 168) = *((void *)v1108 + 21);
            *(unsigned char *)(v1107 + 176) = *((unsigned char *)v1108 + 176);
            *(void *)(v1107 + 184) = *((void *)v1108 + 23);
            uint64_t v1127 = *((void *)v1108 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1128 = v2098;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1127)
            {
              *(void *)(v1107 + 192) = v1127;
              *(void *)(v1107 + 200) = *((void *)v1108 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1107 + 192) = v1108[12];
            }
            size_t v841 = __n;
            uint64_t v1050 = v1964;
            size_t v1051 = v2047;
            uint64_t v132 = v2001;
            *(void *)(v1107 + 208) = *((void *)v1108 + 26);
            *(void *)(v1107 + 216) = *((void *)v1108 + 27);
            *(void *)(v1107 + 224) = *((void *)v1108 + 28);
            *(void *)(v1107 + 232) = *((void *)v1108 + 29);
            *(void *)(v1107 + 240) = *((void *)v1108 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1111 = *v1108;
            long long v1112 = v1108[1];
            long long v1113 = v1108[3];
            *(_OWORD *)(v1107 + 32) = v1108[2];
            *(_OWORD *)(v1107 + 48) = v1113;
            *(_OWORD *)unint64_t v1107 = v1111;
            *(_OWORD *)(v1107 + 16) = v1112;
            long long v1114 = v1108[4];
            long long v1115 = v1108[5];
            long long v1116 = v1108[7];
            *(_OWORD *)(v1107 + 96) = v1108[6];
            *(_OWORD *)(v1107 + 112) = v1116;
            *(_OWORD *)(v1107 + 64) = v1114;
            *(_OWORD *)(v1107 + 80) = v1115;
            long long v1117 = v1108[8];
            long long v1118 = v1108[9];
            long long v1119 = v1108[11];
            *(_OWORD *)(v1107 + 160) = v1108[10];
            *(_OWORD *)(v1107 + 176) = v1119;
            *(_OWORD *)(v1107 + 128) = v1117;
            *(_OWORD *)(v1107 + 144) = v1118;
            long long v1120 = v1108[12];
            long long v1121 = v1108[13];
            long long v1122 = v1108[14];
            *(void *)(v1107 + 240) = *((void *)v1108 + 30);
            *(_OWORD *)(v1107 + 208) = v1121;
            *(_OWORD *)(v1107 + 224) = v1122;
            *(_OWORD *)(v1107 + 192) = v1120;
            uint64_t v1050 = v1964;
            uint64_t v132 = v2001;
          }
          v1147 = (_OWORD *)((v1107 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1148 = (long long *)(((unint64_t)v1108 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1149 = *v1148;
          *(_OWORD *)((char *)v1147 + 9) = *(long long *)((char *)v1148 + 9);
          _OWORD *v1147 = v1149;
          unint64_t v1150 = (v1107 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1151 = ((unint64_t)v1108 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1152 = *(_OWORD *)v1151;
          *(unsigned char *)(v1150 + 16) = *(unsigned char *)(v1151 + 16);
          *(_OWORD *)unint64_t v1150 = v1152;
          v1153 = (void *)((v1107 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1154 = ((unint64_t)v1108 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1155 = *(void *)v1154;
          v1154 += 15;
          void *v1153 = v1155;
          v1156 = (void *)(((unint64_t)v1153 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1157 = *(void *)(v1154 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1158 = *(void *)((v1154 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_24D5203A8(v1157, v1158);
          void *v1156 = v1157;
          v1156[1] = v1158;
          size_t v1052 = v1993;
          size_t v1049 = v1921;
          unint64_t v1035 = v1970 + 7;
          v1048 = v2083;
          if (v1971)
          {
LABEL_1140:
            unint64_t v1159 = ((((v1953
                      + 327
                      + ((((((((((v1035 + v1052) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            *(void *)(((unint64_t)v2041 + v1159) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1048
                                                                                               + v1159) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1142 = ((v1962
                    + ((v1924
                      + ((((v1050
                          + ((((((((((v1035 + v841) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)
                          + 327) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16) & v132)) & 0xFFFFFFFFFFFFFFF8)
                  + 8;
            if (v1142 <= v2019) {
              unint64_t v1142 = v2019;
            }
            if (v1960 > v1142) {
              unint64_t v1142 = v1960;
            }
            if (v2037 > v1142) {
              unint64_t v1142 = v2037;
            }
            if (v1049 > v1142) {
              unint64_t v1142 = v1049;
            }
            if (v1051 > v1142) {
              unint64_t v1142 = v1051;
            }
            if (v2022 + 2 > v1142) {
              unint64_t v1142 = v2022 + 2;
            }
            if (v2008 > v1142) {
              unint64_t v1142 = ((v2009 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
            }
            if (v1919 > v1142) {
              unint64_t v1142 = v2009 + 2;
            }
            if (v1947 > v1142) {
              unint64_t v1142 = (v2009 & 0xFFFFFFFFFFFFFFF8) + 16;
            }
            if (v1142 <= v1051) {
              unint64_t v1142 = v1051;
            }
            if (v1142 <= v2020) {
              unint64_t v1142 = v2020;
            }
            if (v1142 <= v1948) {
              unint64_t v1142 = v1948;
            }
            if (v1142 <= v1051) {
              unint64_t v1142 = v1051;
            }
            if (v1142 <= v1961) {
              unint64_t v1142 = v1961;
            }
            if (v1142 <= v1919) {
              unint64_t v1142 = v2009 + 2;
            }
            if (v1142 <= v1051) {
              unint64_t v1142 = v1051;
            }
            if (v1142 <= v2022) {
              unint64_t v1142 = v2022;
            }
            if (v1142 <= v1051) {
              unint64_t v1142 = v1051;
            }
            if (v1142 <= v1949) {
              unint64_t v1142 = v1949;
            }
            if (v1142 <= v1919) {
              unint64_t v1142 = v2009 + 2;
            }
            if (v1142 <= v1051) {
              unint64_t v1142 = v1051;
            }
            if (v1142 <= 0x38) {
              unint64_t v1142 = 56;
            }
            if (v1142 <= 3)
            {
              unsigned int v1160 = ((1 << (8 * v1142)) + 5) >> (8 * v1142);
              if (v1160 > 0xFFD6)
              {
                int v1146 = 6;
                goto LABEL_1192;
              }
              if (v1160 > 0xD6)
              {
                __int16 v1145 = 6;
                goto LABEL_1190;
              }
            }
            char v1143 = 6;
            goto LABEL_1186;
          }
LABEL_1070:
          size_t v1052 = v841;
          goto LABEL_1140;
        }
        unint64_t v1040 = (v1983 + ((unint64_t)&a2[v2014 + v1036] & v1913)) & v2088;
        uint64_t v1039 = v1914;
        unint64_t v1041 = (v1955 + v1040) & v1914;
        if (v1967 == v127)
        {
          if (v1959 == v1967)
          {
            v1042 = *(uint64_t (**)(unint64_t))(v1979 + 48);
            unint64_t v1043 = (v1955 + v1040) & v1914;
LABEL_1067:
            int v1038 = v1042(v1043);
            uint64_t v1039 = v1914;
            goto LABEL_1068;
          }
          v1046 = (unint64_t *)((v1987 + v1041) & 0xFFFFFFFFFFFFFFF8);
          if (v1951 > 0x7FFFFFFE)
          {
            unint64_t v1043 = ((unint64_t)v1046 + v1981) & v2004;
            v1042 = (uint64_t (*)(unint64_t))v1980[6];
            goto LABEL_1067;
          }
          unint64_t v1047 = *v1046;
        }
        else
        {
          unint64_t v1044 = v1041 + v2029;
          if ((v1941 & 0x80000000) == 0)
          {
            unint64_t v1045 = *(void *)(v1044 + 8);
            if (v1045 >= 0xFFFFFFFF) {
              LODWORD(v1045) = -1;
            }
            int v1038 = v1045 + 1;
            goto LABEL_1068;
          }
          unint64_t v1043 = (v1992 + ((v2045 + v1044) & v2012)) & v133;
          if (v1971 > 0x7FFFFFFD)
          {
            v1042 = *(uint64_t (**)(unint64_t))(v1990 + 48);
            goto LABEL_1067;
          }
          unint64_t v1047 = *(void *)(((v1939 + ((v1988 + v1043) & v133)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v1047 >= 0xFFFFFFFF) {
          LODWORD(v1047) = -1;
        }
        if ((v1047 + 1) >= 2) {
          goto LABEL_1069;
        }
        goto LABEL_1072;
      }
      uint64_t v131 = v72;
      unint64_t v393 = (unint64_t)&v72[v1983] & v2088;
      unint64_t v394 = (v393 + v2025 + v37) & v85;
      uint64_t v128 = v2054;
      uint64_t v132 = ~v33;
      uint64_t v133 = v83;
      if (v1967 == v1956)
      {
        if (v1959 == v1967)
        {
          unint64_t v395 = *(uint64_t (**)(unint64_t))(v1979 + 48);
          unint64_t v396 = (v393 + v2025 + v37) & v85;
LABEL_1000:
          v840 = v72;
          int v130 = v395(v396);
          uint64_t v85 = ~v37;
          uint64_t v131 = v840;
          goto LABEL_1001;
        }
        uint64_t v623 = (unint64_t *)((v1987 + v394) & 0xFFFFFFFFFFFFFFF8);
        if (v1951 > 0x7FFFFFFE)
        {
          unint64_t v396 = ((unint64_t)v623 + v1981) & v86;
          unint64_t v395 = (uint64_t (*)(unint64_t))v1980[6];
          goto LABEL_1000;
        }
        unint64_t v624 = *v623;
      }
      else
      {
        unint64_t v500 = v2029 + v394;
        if ((v1941 & 0x80000000) == 0)
        {
          unint64_t v501 = *(void *)(v500 + 8);
          if (v501 >= 0xFFFFFFFF) {
            LODWORD(v501) = -1;
          }
          int v130 = v501 + 1;
          goto LABEL_1001;
        }
        unint64_t v396 = (v1992 + ((v2045 + v500) & v2012)) & v124;
        if (v1971 > 0x7FFFFFFD)
        {
          unint64_t v395 = *(uint64_t (**)(unint64_t))(v1990 + 48);
          goto LABEL_1000;
        }
        unint64_t v624 = *(void *)(((v1939 + ((v1988 + v396) & v124)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v624 >= 0xFFFFFFFF) {
        LODWORD(v624) = -1;
      }
      if ((v624 + 1) >= 2) {
        goto LABEL_1002;
      }
      goto LABEL_1005;
    case 7u:
      unint64_t v134 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1997 + 16);
      unint64_t v135 = v72;
      ((void (*)(void *))v134)(a1);
      unint64_t v136 = ((unint64_t)a1 + v1984) & v79;
      unint64_t v137 = (unint64_t)&v135[v1984] & v79;
      v134(v136, v137, AssociatedTypeWitness);
      unint64_t v138 = (v136 + v2028 + v2087) & v80;
      unint64_t v139 = (v137 + v2028 + v2087) & v80;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v138, v139, v1976);
      uint64_t v140 = (void *)((v1982 + v138) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v141 = (void *)((v1982 + v139) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v140 = *v141;
      unint64_t v142 = ((unint64_t)v140 + v1972) & ~v1998;
      unint64_t v143 = ((unint64_t)v141 + v1972) & ~v1998;
      int v144 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
      swift_bridgeObjectRetain();
      v144(v142, v143, v1973);
      unsigned int v145 = (void *)((v1968 + v143) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v146 = (void *)((v1968 + v142) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v146 = *v145;
      uint64_t v147 = (void *)(((unint64_t)v146 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v148 = (void *)(((unint64_t)v145 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v147 = *v148;
      v147[1] = v148[1];
      uint64_t v149 = (void *)(v2040 + v138);
      *uint64_t v149 = *(void *)(v2040 + v139);
      v149[1] = *(void *)(v2040 + v139 + 8);
      size_t v150 = (v2045 + v2040 + v138) & v82;
      size_t v151 = (v2045 + v2040 + v139) & v82;
      *(unsigned char *)size_t v150 = *(unsigned char *)v151;
      uint64_t v152 = v150 | 4;
      int v153 = *(_DWORD *)(v151 | 4);
      *(unsigned char *)(v152 + 4) = *(unsigned char *)((v151 | 4) + 4);
      *(_DWORD *)uint64_t v152 = v153;
      *(_WORD *)(v150 + 10) = *(_WORD *)(v151 + 0xA);
      size_t v2089 = v150;
      size_t v154 = (v1992 + v150) & ~v2003;
      size_t v155 = (v1992 + v151) & ~v2003;
      uint64_t v156 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v156(v154, v155, v1989);
      size_t v157 = (v1988 + v154) & ~v2003;
      size_t v158 = (v1988 + v155) & ~v2003;
      v156(v157, v158, v1989);
      unint64_t v159 = (unsigned char *)(v157 + v1993);
      *unint64_t v159 = *(unsigned char *)(v158 + v1993);
      v159[1] = *(unsigned char *)(v158 + v1993 + 1);
      v159[2] = *(unsigned char *)(v158 + v1993 + 2);
      v159[3] = *(unsigned char *)(v158 + v1993 + 3);
      v159[4] = *(unsigned char *)(v158 + v1993 + 4);
      unint64_t v160 = (v157 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v161 = (v158 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v160 = *(void *)v161;
      *(void *)(v160 + 8) = *(void *)(v161 + 8);
      *(unsigned char *)(v160 + 16) = *(unsigned char *)(v161 + 16);
      *(unsigned char *)(v160 + 17) = *(unsigned char *)(v161 + 17);
      *(unsigned char *)(v160 + 18) = *(unsigned char *)(v161 + 18);
      *(unsigned char *)(v160 + 19) = *(unsigned char *)(v161 + 19);
      unint64_t v162 = (v160 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v163 = (v161 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v162 = *(void *)v163;
      *(unsigned char *)(v162 + 8) = *(unsigned char *)(v163 + 8);
      *(unsigned char *)(v162 + 9) = *(unsigned char *)(v163 + 9);
      *(unsigned char *)(v162 + 10) = *(unsigned char *)(v163 + 10);
      *(unsigned char *)(v162 + 11) = *(unsigned char *)(v163 + 11);
      *(unsigned char *)(v162 + 12) = *(unsigned char *)(v163 + 12);
      uint64_t v164 = (void *)((v161 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v165 = (void *)((v160 + 47) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v165 = *v164;
      unint64_t v166 = ((unint64_t)v165 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v167 = ((unint64_t)v164 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v166 = *(void *)v167;
      *(unsigned char *)(v166 + 8) = *(unsigned char *)(v167 + 8);
      *(unsigned char *)(v166 + 9) = *(unsigned char *)(v167 + 9);
      uint64_t v168 = (void *)((v1985 + v166) & ~v2003);
      uint64_t v169 = (const void *)((v1985 + v167) & ~v2003);
      uint64_t v170 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
      swift_bridgeObjectRetain();
      if (v170(v169, 1, v1989))
      {
        memcpy(v168, v169, __n);
      }
      else
      {
        v156((size_t)v168, (size_t)v169, v1989);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v168, 0, 1, v1989);
      }
      unint64_t v415 = (void *)(((unint64_t)v168 + v1986) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v416 = (void *)(((unint64_t)v169 + v1986) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v415 = *v416;
      unint64_t v417 = ((unint64_t)v415 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v418 = ((unint64_t)v416 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v419 = *(void *)v418;
      *(unsigned char *)(v417 + 8) = *(unsigned char *)(v418 + 8);
      *(void *)unint64_t v417 = v419;
      unint64_t v420 = (void *)(((unint64_t)v415 + 31) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v421 = (void *)(((unint64_t)v416 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v420 = *v421;
      unint64_t v422 = ((unint64_t)v420 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v423 = (uint64_t *)(((unint64_t)v421 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v424 = v423[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v424 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v422 = *(_OWORD *)v423;
      }
      else
      {
        uint64_t v435 = *v423;
        sub_24D3F9C18(*v423, v424);
        *(void *)unint64_t v422 = v435;
        *(void *)(v422 + 8) = v424;
      }
      unint64_t v436 = (v422 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v437 = ((unint64_t)v423 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v438 = *(void *)v437;
      *(unsigned char *)(v436 + 8) = *(unsigned char *)(v437 + 8);
      *(void *)unint64_t v436 = v438;
      *(unsigned char *)(v436 + 9) = *(unsigned char *)(v437 + 9);
      unint64_t v439 = (v436 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v440 = (v437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v441 = *(_DWORD *)v440;
      *(unsigned char *)(v439 + 4) = *(unsigned char *)(v440 + 4);
      *(_DWORD *)unint64_t v439 = v441;
      uint64_t v442 = (void *)((v436 + 25) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v443 = (void *)((v437 + 25) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v442 = *v443;
      v442[1] = v443[1];
      unint64_t v444 = v2044 + v2089;
      unint64_t v445 = v2044 + v151;
      unint64_t v446 = *(void *)(v2044 + v151 + 16);
      if (v446 >= 0xFFFFFFFF) {
        LODWORD(v446) = -1;
      }
      int v447 = v446 - 1;
      swift_bridgeObjectRetain();
      if (v447 < 0)
      {
        *(void *)unint64_t v444 = *(void *)v445;
        *(unsigned char *)(v444 + 8) = *(unsigned char *)(v445 + 8);
        *(unsigned char *)(v444 + 9) = *(unsigned char *)(v445 + 9);
        uint64_t v486 = *(void **)(v445 + 16);
        id v487 = v486;
        *(void *)(v444 + 16) = v486;
        v488 = *(void **)(v445 + 24);
        id v489 = v488;
        *(void *)(v444 + 24) = v488;
        *(unsigned char *)(v444 + 32) = *(unsigned char *)(v445 + 32);
        *(unsigned char *)(v444 + 33) = *(unsigned char *)(v445 + 33);
        *(unsigned char *)(v444 + 34) = *(unsigned char *)(v445 + 34);
        *(void *)(v444 + 40) = *(void *)(v445 + 40);
        *(void *)(v444 + 48) = *(void *)(v445 + 48);
        *(void *)(v444 + 56) = *(void *)(v445 + 56);
        *(void *)(v444 + 64) = *(void *)(v445 + 64);
        *(unsigned char *)(v444 + 72) = *(unsigned char *)(v445 + 72);
        *(void *)(v444 + 80) = *(void *)(v445 + 80);
        *(void *)(v444 + 88) = *(void *)(v445 + 88);
        v2092 = *(void **)(v445 + 96);
        *(void *)(v444 + 96) = v2092;
        *(unsigned char *)(v444 + 104) = *(unsigned char *)(v445 + 104);
        *(unsigned char *)(v444 + 105) = *(unsigned char *)(v445 + 105);
        *(void *)(v444 + 112) = *(void *)(v445 + 112);
        *(void *)(v444 + 120) = *(void *)(v445 + 120);
        *(void *)(v444 + 128) = *(void *)(v445 + 128);
        *(void *)(v444 + 136) = *(void *)(v445 + 136);
        *(void *)(v444 + 144) = *(void *)(v445 + 144);
        *(void *)(v444 + 152) = *(void *)(v445 + 152);
        *(void *)(v444 + 160) = *(void *)(v445 + 160);
        *(void *)(v444 + 168) = *(void *)(v445 + 168);
        *(unsigned char *)(v444 + 176) = *(unsigned char *)(v445 + 176);
        *(void *)(v444 + 184) = *(void *)(v445 + 184);
        uint64_t v490 = *(void *)(v445 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v491 = v2092;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v490)
        {
          *(void *)(v444 + 192) = v490;
          *(void *)(v444 + 200) = *(void *)(v445 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v444 + 192) = *(_OWORD *)(v445 + 192);
        }
        uint64_t v460 = v2063;
        *(void *)(v444 + 208) = *(void *)(v445 + 208);
        *(void *)(v444 + 216) = *(void *)(v445 + 216);
        *(void *)(v444 + 224) = *(void *)(v445 + 224);
        *(void *)(v444 + 232) = *(void *)(v445 + 232);
        *(void *)(v444 + 240) = *(void *)(v445 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v448 = *(_OWORD *)v445;
        long long v449 = *(_OWORD *)(v445 + 16);
        long long v450 = *(_OWORD *)(v445 + 48);
        *(_OWORD *)(v444 + 32) = *(_OWORD *)(v445 + 32);
        *(_OWORD *)(v444 + 48) = v450;
        *(_OWORD *)unint64_t v444 = v448;
        *(_OWORD *)(v444 + 16) = v449;
        long long v451 = *(_OWORD *)(v445 + 64);
        long long v452 = *(_OWORD *)(v445 + 80);
        long long v453 = *(_OWORD *)(v445 + 112);
        *(_OWORD *)(v444 + 96) = *(_OWORD *)(v445 + 96);
        *(_OWORD *)(v444 + 112) = v453;
        *(_OWORD *)(v444 + 64) = v451;
        *(_OWORD *)(v444 + 80) = v452;
        long long v454 = *(_OWORD *)(v445 + 128);
        long long v455 = *(_OWORD *)(v445 + 144);
        long long v456 = *(_OWORD *)(v445 + 176);
        *(_OWORD *)(v444 + 160) = *(_OWORD *)(v445 + 160);
        *(_OWORD *)(v444 + 176) = v456;
        *(_OWORD *)(v444 + 128) = v454;
        *(_OWORD *)(v444 + 144) = v455;
        long long v457 = *(_OWORD *)(v445 + 192);
        long long v458 = *(_OWORD *)(v445 + 208);
        long long v459 = *(_OWORD *)(v445 + 224);
        *(void *)(v444 + 240) = *(void *)(v445 + 240);
        *(_OWORD *)(v444 + 208) = v458;
        *(_OWORD *)(v444 + 224) = v459;
        *(_OWORD *)(v444 + 192) = v457;
        uint64_t v460 = v2063;
      }
      unsigned int v592 = (_OWORD *)((v444 + 255) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v593 = (long long *)((v445 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v594 = *v593;
      *(_OWORD *)((char *)v592 + 9) = *(long long *)((char *)v593 + 9);
      *unsigned int v592 = v594;
      unint64_t v595 = (v444 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v596 = (v445 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v597 = *(_OWORD *)v596;
      *(unsigned char *)(v595 + 16) = *(unsigned char *)(v596 + 16);
      *(_OWORD *)unint64_t v595 = v597;
      unint64_t v598 = (void *)((v444 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v599 = (v445 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v600 = *(void *)v599;
      v599 += 15;
      *unint64_t v598 = v600;
      unint64_t v601 = (void *)(((unint64_t)v598 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v602 = *(void *)(v599 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v603 = *(void *)((v599 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_24D5203A8(v602, v603);
      *unint64_t v601 = v602;
      v601[1] = v603;
      if (v460 > 3) {
        goto LABEL_472;
      }
      unsigned int v605 = ((1 << (8 * v460)) + 5) >> (8 * v460);
      if (v605 > 0xFFD6)
      {
        int v607 = 7;
        goto LABEL_487;
      }
      if (v605 <= 0xD6)
      {
LABEL_472:
        char v604 = 7;
        goto LABEL_481;
      }
      __int16 v606 = 7;
      goto LABEL_485;
    case 8u:
      unsigned int v171 = *(void (**)(void))(v2054 + 16);
      uint64_t v2068 = ~v2003;
      unsigned int v172 = v72;
      uint64_t v2005 = ~v36;
      v171();
      uint64_t v173 = v82;
      unint64_t v174 = v38;
      unint64_t v175 = ((unint64_t)a1 + v1983) & v77;
      unint64_t v176 = (unint64_t)&v172[v1983] & v77;
      ((void (*)(unint64_t, unint64_t, uint64_t))v171)(v175, v176, v1996);
      unint64_t v177 = (v175 + v2025 + v37) & ~v37;
      unint64_t v178 = (v176 + v2025 + v37) & ~v37;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v30 + 16))(v177, v178, v1978);
      unsigned int v179 = (void *)((v1987 + v177) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v180 = (void *)((v1987 + v178) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v179 = *v180;
      unint64_t v181 = ((unint64_t)v179 + v1981) & v2005;
      unint64_t v182 = ((unint64_t)v180 + v1981) & v2005;
      uint64_t v183 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
      swift_bridgeObjectRetain();
      v183(v181, v182, v1975);
      int v184 = (void *)((v1969 + v182) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v185 = (void *)((v1969 + v181) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v185 = *v184;
      uint64_t v186 = (void *)(((unint64_t)v185 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v187 = (void *)(((unint64_t)v184 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v186 = *v187;
      v186[1] = v187[1];
      uint64_t v188 = (void *)(v174 + v177);
      *uint64_t v188 = *(void *)(v174 + v178);
      v188[1] = *(void *)(v174 + v178 + 8);
      uint64_t v189 = (v2045 + v174 + v177) & v173;
      uint64_t v190 = (v2045 + v174 + v178) & v173;
      *(unsigned char *)uint64_t v189 = *(unsigned char *)v190;
      uint64_t v191 = v189 | 4;
      int v192 = *(_DWORD *)(v190 | 4);
      *(unsigned char *)(v191 + 4) = *(unsigned char *)((v190 | 4) + 4);
      *(_DWORD *)uint64_t v191 = v192;
      *(_WORD *)(v189 + 10) = *(_WORD *)(v190 + 0xA);
      uint64_t v2090 = v189;
      uint64_t v193 = (v1992 + v189) & v2068;
      uint64_t v194 = (v1992 + v190) & v2068;
      uint64_t v195 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1990 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v195(v193, v194, v1989);
      uint64_t v196 = (v1988 + v193) & v2068;
      uint64_t v197 = (v1988 + v194) & v2068;
      v195(v196, v197, v1989);
      uint64_t v198 = (unsigned char *)(v196 + v1993);
      *uint64_t v198 = *(unsigned char *)(v197 + v1993);
      v198[1] = *(unsigned char *)(v197 + v1993 + 1);
      v198[2] = *(unsigned char *)(v197 + v1993 + 2);
      v198[3] = *(unsigned char *)(v197 + v1993 + 3);
      v198[4] = *(unsigned char *)(v197 + v1993 + 4);
      unint64_t v199 = (v196 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v200 = (v197 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v199 = *(void *)v200;
      *(void *)(v199 + 8) = *(void *)(v200 + 8);
      *(unsigned char *)(v199 + 16) = *(unsigned char *)(v200 + 16);
      *(unsigned char *)(v199 + 17) = *(unsigned char *)(v200 + 17);
      *(unsigned char *)(v199 + 18) = *(unsigned char *)(v200 + 18);
      *(unsigned char *)(v199 + 19) = *(unsigned char *)(v200 + 19);
      unint64_t v201 = (v199 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v202 = (v200 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v201 = *(void *)v202;
      *(unsigned char *)(v201 + 8) = *(unsigned char *)(v202 + 8);
      *(unsigned char *)(v201 + 9) = *(unsigned char *)(v202 + 9);
      *(unsigned char *)(v201 + 10) = *(unsigned char *)(v202 + 10);
      *(unsigned char *)(v201 + 11) = *(unsigned char *)(v202 + 11);
      *(unsigned char *)(v201 + 12) = *(unsigned char *)(v202 + 12);
      unint64_t v203 = (void *)((v200 + 47) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v204 = (void *)((v199 + 47) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v204 = *v203;
      unint64_t v205 = ((unint64_t)v204 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v206 = ((unint64_t)v203 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v205 = *(void *)v206;
      *(unsigned char *)(v205 + 8) = *(unsigned char *)(v206 + 8);
      *(unsigned char *)(v205 + 9) = *(unsigned char *)(v206 + 9);
      unint64_t v207 = (void *)((v1985 + v205) & v2068);
      uint64_t v208 = (const void *)((v1985 + v206) & v2068);
      uint64_t v209 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
      swift_bridgeObjectRetain();
      if (v209(v208, 1, v1989))
      {
        memcpy(v207, v208, __n);
      }
      else
      {
        v195((uint64_t)v207, (uint64_t)v208, v1989);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v207, 0, 1, v1989);
      }
      unint64_t v425 = (void *)(((unint64_t)v207 + v1986) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v426 = (void *)(((unint64_t)v208 + v1986) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v425 = *v426;
      unint64_t v427 = ((unint64_t)v425 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v428 = ((unint64_t)v426 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v429 = *(void *)v428;
      *(unsigned char *)(v427 + 8) = *(unsigned char *)(v428 + 8);
      *(void *)unint64_t v427 = v429;
      unint64_t v430 = (void *)(((unint64_t)v425 + 31) & 0xFFFFFFFFFFFFFFF8);
      v431 = (void *)(((unint64_t)v426 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v430 = *v431;
      unint64_t v432 = ((unint64_t)v430 + 15) & 0xFFFFFFFFFFFFFFF8;
      v433 = (uint64_t *)(((unint64_t)v431 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v434 = v433[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if ((v434 & 0x3000000000000000) != 0)
      {
        *(_OWORD *)unint64_t v432 = *(_OWORD *)v433;
      }
      else
      {
        uint64_t v461 = *v433;
        sub_24D3F9C18(*v433, v434);
        *(void *)unint64_t v432 = v461;
        *(void *)(v432 + 8) = v434;
      }
      unint64_t v462 = (v432 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v463 = ((unint64_t)v433 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v464 = *(void *)v463;
      *(unsigned char *)(v462 + 8) = *(unsigned char *)(v463 + 8);
      *(void *)unint64_t v462 = v464;
      *(unsigned char *)(v462 + 9) = *(unsigned char *)(v463 + 9);
      unint64_t v465 = (v462 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v466 = (v463 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      int v467 = *(_DWORD *)v466;
      *(unsigned char *)(v465 + 4) = *(unsigned char *)(v466 + 4);
      *(_DWORD *)unint64_t v465 = v467;
      unint64_t v468 = (void *)((v462 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v469 = (void *)((v463 + 25) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v468 = *v469;
      v468[1] = v469[1];
      unint64_t v470 = v2090 + v2044;
      unint64_t v471 = v190 + v2044;
      unint64_t v472 = *(void *)(v190 + v2044 + 16);
      if (v472 >= 0xFFFFFFFF) {
        LODWORD(v472) = -1;
      }
      int v473 = v472 - 1;
      swift_bridgeObjectRetain();
      if (v473 < 0)
      {
        *(void *)unint64_t v470 = *(void *)v471;
        *(unsigned char *)(v470 + 8) = *(unsigned char *)(v471 + 8);
        *(unsigned char *)(v470 + 9) = *(unsigned char *)(v471 + 9);
        unint64_t v492 = *(void **)(v471 + 16);
        id v493 = v492;
        *(void *)(v470 + 16) = v492;
        v494 = *(void **)(v471 + 24);
        id v495 = v494;
        *(void *)(v470 + 24) = v494;
        *(unsigned char *)(v470 + 32) = *(unsigned char *)(v471 + 32);
        *(unsigned char *)(v470 + 33) = *(unsigned char *)(v471 + 33);
        *(unsigned char *)(v470 + 34) = *(unsigned char *)(v471 + 34);
        *(void *)(v470 + 40) = *(void *)(v471 + 40);
        *(void *)(v470 + 48) = *(void *)(v471 + 48);
        *(void *)(v470 + 56) = *(void *)(v471 + 56);
        *(void *)(v470 + 64) = *(void *)(v471 + 64);
        *(unsigned char *)(v470 + 72) = *(unsigned char *)(v471 + 72);
        *(void *)(v470 + 80) = *(void *)(v471 + 80);
        *(void *)(v470 + 88) = *(void *)(v471 + 88);
        v2093 = *(void **)(v471 + 96);
        *(void *)(v470 + 96) = v2093;
        *(unsigned char *)(v470 + 104) = *(unsigned char *)(v471 + 104);
        *(unsigned char *)(v470 + 105) = *(unsigned char *)(v471 + 105);
        *(void *)(v470 + 112) = *(void *)(v471 + 112);
        *(void *)(v470 + 120) = *(void *)(v471 + 120);
        *(void *)(v470 + 128) = *(void *)(v471 + 128);
        *(void *)(v470 + 136) = *(void *)(v471 + 136);
        *(void *)(v470 + 144) = *(void *)(v471 + 144);
        *(void *)(v470 + 152) = *(void *)(v471 + 152);
        *(void *)(v470 + 160) = *(void *)(v471 + 160);
        *(void *)(v470 + 168) = *(void *)(v471 + 168);
        *(unsigned char *)(v470 + 176) = *(unsigned char *)(v471 + 176);
        *(void *)(v470 + 184) = *(void *)(v471 + 184);
        uint64_t v496 = *(void *)(v471 + 192);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        id v497 = v2093;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v496)
        {
          *(void *)(v470 + 192) = v496;
          *(void *)(v470 + 200) = *(void *)(v471 + 200);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
        }
        else
        {
          *(_OWORD *)(v470 + 192) = *(_OWORD *)(v471 + 192);
        }
        uint64_t v460 = v2063;
        *(void *)(v470 + 208) = *(void *)(v471 + 208);
        *(void *)(v470 + 216) = *(void *)(v471 + 216);
        *(void *)(v470 + 224) = *(void *)(v471 + 224);
        *(void *)(v470 + 232) = *(void *)(v471 + 232);
        *(void *)(v470 + 240) = *(void *)(v471 + 240);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v474 = *(_OWORD *)v471;
        long long v475 = *(_OWORD *)(v471 + 16);
        long long v476 = *(_OWORD *)(v471 + 48);
        *(_OWORD *)(v470 + 32) = *(_OWORD *)(v471 + 32);
        *(_OWORD *)(v470 + 48) = v476;
        *(_OWORD *)unint64_t v470 = v474;
        *(_OWORD *)(v470 + 16) = v475;
        long long v477 = *(_OWORD *)(v471 + 64);
        long long v478 = *(_OWORD *)(v471 + 80);
        long long v479 = *(_OWORD *)(v471 + 112);
        *(_OWORD *)(v470 + 96) = *(_OWORD *)(v471 + 96);
        *(_OWORD *)(v470 + 112) = v479;
        *(_OWORD *)(v470 + 64) = v477;
        *(_OWORD *)(v470 + 80) = v478;
        long long v480 = *(_OWORD *)(v471 + 128);
        long long v481 = *(_OWORD *)(v471 + 144);
        long long v482 = *(_OWORD *)(v471 + 176);
        *(_OWORD *)(v470 + 160) = *(_OWORD *)(v471 + 160);
        *(_OWORD *)(v470 + 176) = v482;
        *(_OWORD *)(v470 + 128) = v480;
        *(_OWORD *)(v470 + 144) = v481;
        long long v483 = *(_OWORD *)(v471 + 192);
        long long v484 = *(_OWORD *)(v471 + 208);
        long long v485 = *(_OWORD *)(v471 + 224);
        *(void *)(v470 + 240) = *(void *)(v471 + 240);
        *(_OWORD *)(v470 + 208) = v484;
        *(_OWORD *)(v470 + 224) = v485;
        *(_OWORD *)(v470 + 192) = v483;
        uint64_t v460 = v2063;
      }
      v608 = (_OWORD *)((v470 + 255) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v609 = (long long *)((v471 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v610 = *v609;
      *(_OWORD *)((char *)v608 + 9) = *(long long *)((char *)v609 + 9);
      _OWORD *v608 = v610;
      unint64_t v611 = (v470 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v612 = (v471 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v613 = *(_OWORD *)v612;
      *(unsigned char *)(v611 + 16) = *(unsigned char *)(v612 + 16);
      *(_OWORD *)unint64_t v611 = v613;
      uint64_t v614 = (void *)((v470 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v615 = (v471 + 311) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v616 = *(void *)v615;
      v615 += 15;
      *uint64_t v614 = v616;
      uint64_t v617 = (void *)(((unint64_t)v614 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v618 = *(void *)(v615 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v619 = *(void *)((v615 & 0xFFFFFFFFFFFFFFF8) + 8);
      sub_24D5203A8(v618, v619);
      *uint64_t v617 = v618;
      v617[1] = v619;
      if (v460 > 3) {
        goto LABEL_480;
      }
      unsigned int v620 = ((1 << (8 * v460)) + 5) >> (8 * v460);
      if (v620 > 0xFFD6)
      {
        int v607 = 8;
LABEL_487:
        *(_DWORD *)((char *)a1 + v460) = v607;
      }
      else if (v620 <= 0xD6)
      {
LABEL_480:
        char v604 = 8;
LABEL_481:
        *((unsigned char *)a1 + v460) = v604;
      }
      else
      {
        __int16 v606 = 8;
LABEL_485:
        *(_WORD *)((char *)a1 + v460) = v606;
      }
      return a1;
    case 9u:
      unsigned int v210 = v72[v2009];
      unsigned int v211 = v210 - 2;
      if (v210 < 2)
      {
        uint64_t v213 = v2054;
        uint64_t v214 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v212 = v2009;
        }
        else {
          uint64_t v212 = 4;
        }
        uint64_t v213 = v2054;
        uint64_t v214 = v1997;
        switch(v212)
        {
          case 1:
            int v215 = *v72;
            goto LABEL_555;
          case 2:
            int v215 = *(unsigned __int16 *)v72;
            goto LABEL_555;
          case 3:
            int v215 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_555;
          case 4:
            int v215 = *(_DWORD *)v72;
LABEL_555:
            if (v2009 < 4) {
              unsigned int v210 = (v215 | (v211 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v210 = v215 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v642 = v210 == 1;
      if (v210 == 1) {
        uint64_t v643 = v213;
      }
      else {
        uint64_t v643 = v214;
      }
      (*(void (**)(void *))(v643 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v642;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_562;
      }
      unsigned int v644 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v644 > 0xFFD6)
      {
        int v502 = 9;
        goto LABEL_975;
      }
      if (v644 <= 0xD6)
      {
LABEL_562:
        char v274 = 9;
        goto LABEL_969;
      }
      __int16 v399 = 9;
      goto LABEL_973;
    case 0xAu:
      unsigned int v216 = v72[v2009];
      unsigned int v217 = v216 - 2;
      if (v216 < 2)
      {
        uint64_t v219 = ~v2010;
        uint64_t v220 = v1996;
        uint64_t v221 = AssociatedTypeWitness;
        uint64_t v222 = v2054;
        uint64_t v223 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v218 = v2009;
        }
        else {
          uint64_t v218 = 4;
        }
        uint64_t v219 = ~v2010;
        uint64_t v220 = v1996;
        uint64_t v221 = AssociatedTypeWitness;
        uint64_t v222 = v2054;
        uint64_t v223 = v1997;
        switch(v218)
        {
          case 1:
            int v224 = *v72;
            goto LABEL_570;
          case 2:
            int v224 = *(unsigned __int16 *)v72;
            goto LABEL_570;
          case 3:
            int v224 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_570;
          case 4:
            int v224 = *(_DWORD *)v72;
LABEL_570:
            if (v2009 < 4) {
              unsigned int v216 = (v224 | (v217 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v216 = v224 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v645 = v216 == 1;
      if (v216 == 1) {
        uint64_t v646 = v222;
      }
      else {
        uint64_t v646 = v223;
      }
      v647 = v72;
      (*(void (**)(void *))(v646 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v645;
      unint64_t v648 = ((unint64_t)a1 + v1991) & v219;
      v649 = (unsigned __int8 *)((unint64_t)&v647[v1991] & v219);
      unsigned int v650 = v649[v2009];
      if (v650 > 1)
      {
        size_t v651 = v2047;
        memcpy((void *)(((unint64_t)a1 + v1991) & v219), v649, v2047);
      }
      else
      {
        if (v650 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v222 + 16))(((unint64_t)a1 + v1991) & v219, v649, v220);
          *(unsigned char *)(v648 + v2009) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v223 + 16))(((unint64_t)a1 + v1991) & v219, v649, v221);
          *(unsigned char *)(v648 + v2009) = 0;
        }
        size_t v651 = v2047;
      }
      v652 = (unsigned char *)(v648 + v651);
      unsigned char *v652 = v649[v651];
      v652[1] = v649[v651 + 1];
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_583;
      }
      unsigned int v653 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v653 > 0xFFD6)
      {
        int v502 = 10;
        goto LABEL_975;
      }
      if (v653 <= 0xD6)
      {
LABEL_583:
        char v274 = 10;
        goto LABEL_969;
      }
      __int16 v399 = 10;
      goto LABEL_973;
    case 0xBu:
      unsigned int v225 = v72[v2009];
      unsigned int v226 = v225 - 2;
      if (v225 < 2)
      {
        uint64_t v228 = ~v2010;
        uint64_t v229 = v1996;
        uint64_t v230 = AssociatedTypeWitness;
        uint64_t v231 = v2054;
        uint64_t v232 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v227 = v2009;
        }
        else {
          uint64_t v227 = 4;
        }
        uint64_t v228 = ~v2010;
        uint64_t v229 = v1996;
        uint64_t v230 = AssociatedTypeWitness;
        uint64_t v231 = v2054;
        uint64_t v232 = v1997;
        switch(v227)
        {
          case 1:
            int v233 = *v72;
            goto LABEL_591;
          case 2:
            int v233 = *(unsigned __int16 *)v72;
            goto LABEL_591;
          case 3:
            int v233 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_591;
          case 4:
            int v233 = *(_DWORD *)v72;
LABEL_591:
            if (v2009 < 4) {
              unsigned int v225 = (v233 | (v226 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v225 = v233 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v654 = v225 == 1;
      if (v225 == 1) {
        uint64_t v655 = v231;
      }
      else {
        uint64_t v655 = v232;
      }
      v656 = v72;
      (*(void (**)(void *))(v655 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v654;
      unint64_t v657 = ((unint64_t)a1 + v1991) & v228;
      v658 = (unsigned __int8 *)((unint64_t)&v656[v1991] & v228);
      unsigned int v659 = v658[v2009];
      if (v659 > 1)
      {
        size_t v660 = v2047;
        memcpy((void *)(((unint64_t)a1 + v1991) & v228), v658, v2047);
      }
      else
      {
        if (v659 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v231 + 16))(((unint64_t)a1 + v1991) & v228, v658, v229);
          *(unsigned char *)(v657 + v2009) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v232 + 16))(((unint64_t)a1 + v1991) & v228, v658, v230);
          *(unsigned char *)(v657 + v2009) = 0;
        }
        size_t v660 = v2047;
      }
      v661 = (unsigned char *)(v657 + v660);
      unsigned char *v661 = v658[v660];
      v661[1] = v658[v660 + 1];
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_604;
      }
      unsigned int v662 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v662 > 0xFFD6)
      {
        int v502 = 11;
        goto LABEL_975;
      }
      if (v662 <= 0xD6)
      {
LABEL_604:
        char v274 = 11;
        goto LABEL_969;
      }
      __int16 v399 = 11;
      goto LABEL_973;
    case 0xCu:
      unsigned int v234 = v72[v2009];
      unsigned int v235 = v234 - 2;
      if (v234 < 2)
      {
        unint64_t v239 = v2009 + 2;
        size_t v238 = v2047;
        uint64_t v237 = v2054;
        uint64_t v240 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v236 = v2009;
        }
        else {
          uint64_t v236 = 4;
        }
        size_t v238 = v2047;
        uint64_t v237 = v2054;
        unint64_t v239 = v2009 + 2;
        uint64_t v240 = v1997;
        switch(v236)
        {
          case 1:
            int v241 = *v72;
            goto LABEL_612;
          case 2:
            int v241 = *(unsigned __int16 *)v72;
            goto LABEL_612;
          case 3:
            int v241 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_612;
          case 4:
            int v241 = *(_DWORD *)v72;
LABEL_612:
            if (v2009 < 4) {
              unsigned int v234 = (v241 | (v235 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v234 = v241 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v663 = v234 == 1;
      if (v234 == 1) {
        uint64_t v664 = v237;
      }
      else {
        uint64_t v664 = v240;
      }
      v665 = v72;
      (*(void (**)(void *))(v664 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v663;
      *((unsigned char *)a1 + v238) = v665[v238];
      v666 = *(void **)((unint64_t)&v665[v239 + 7] & 0xFFFFFFFFFFFFFFF8);
      id v667 = v666;
      *(void *)(((unint64_t)a1 + v239 + 7) & 0xFFFFFFFFFFFFFFF8) = v666;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_619;
      }
      unsigned int v668 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v668 > 0xFFD6)
      {
        int v502 = 12;
        goto LABEL_975;
      }
      if (v668 <= 0xD6)
      {
LABEL_619:
        char v274 = 12;
        goto LABEL_969;
      }
      __int16 v399 = 12;
      goto LABEL_973;
    case 0xDu:
      unsigned int v242 = v72[v2009];
      unsigned int v243 = v242 - 2;
      if (v242 < 2)
      {
        size_t v246 = v2047;
        uint64_t v245 = v2054;
        uint64_t v247 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v244 = v2009;
        }
        else {
          uint64_t v244 = 4;
        }
        size_t v246 = v2047;
        uint64_t v245 = v2054;
        uint64_t v247 = v1997;
        switch(v244)
        {
          case 1:
            int v248 = *v72;
            goto LABEL_627;
          case 2:
            int v248 = *(unsigned __int16 *)v72;
            goto LABEL_627;
          case 3:
            int v248 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_627;
          case 4:
            int v248 = *(_DWORD *)v72;
LABEL_627:
            if (v2009 < 4) {
              unsigned int v242 = (v248 | (v243 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v242 = v248 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v669 = v242 == 1;
      if (v242 == 1) {
        uint64_t v670 = v245;
      }
      else {
        uint64_t v670 = v247;
      }
      v671 = v72;
      (*(void (**)(void *))(v670 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v669;
      *((unsigned char *)a1 + v246) = v671[v246];
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_634;
      }
      unsigned int v672 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v672 > 0xFFD6)
      {
        int v502 = 13;
        goto LABEL_975;
      }
      if (v672 <= 0xD6)
      {
LABEL_634:
        char v274 = 13;
        goto LABEL_969;
      }
      __int16 v399 = 13;
      goto LABEL_973;
    case 0xEu:
      unsigned int v249 = v72[v2009];
      unsigned int v250 = v249 - 2;
      if (v249 < 2)
      {
        size_t v253 = v2047;
        uint64_t v252 = v2054;
        uint64_t v254 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v251 = v2009;
        }
        else {
          uint64_t v251 = 4;
        }
        size_t v253 = v2047;
        uint64_t v252 = v2054;
        uint64_t v254 = v1997;
        switch(v251)
        {
          case 1:
            int v255 = *v72;
            goto LABEL_642;
          case 2:
            int v255 = *(unsigned __int16 *)v72;
            goto LABEL_642;
          case 3:
            int v255 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_642;
          case 4:
            int v255 = *(_DWORD *)v72;
LABEL_642:
            if (v2009 < 4) {
              unsigned int v249 = (v255 | (v250 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v249 = v255 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v673 = v249 == 1;
      if (v249 == 1) {
        uint64_t v674 = v252;
      }
      else {
        uint64_t v674 = v254;
      }
      v675 = v72;
      (*(void (**)(void *))(v674 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v673;
      v676 = *(void **)((unint64_t)&v675[v253 + 7] & 0xFFFFFFFFFFFFFFF8);
      id v677 = v676;
      *(void *)(((unint64_t)a1 + v253 + 7) & 0xFFFFFFFFFFFFFFF8) = v676;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_649;
      }
      unsigned int v678 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v678 > 0xFFD6)
      {
        int v502 = 14;
        goto LABEL_975;
      }
      if (v678 <= 0xD6)
      {
LABEL_649:
        char v274 = 14;
        goto LABEL_969;
      }
      __int16 v399 = 14;
      goto LABEL_973;
    case 0xFu:
      unsigned int v256 = v72[v2009];
      unsigned int v257 = v256 - 2;
      if (v256 < 2)
      {
        size_t v260 = v2047;
        uint64_t v259 = v2054;
        uint64_t v261 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v258 = v2009;
        }
        else {
          uint64_t v258 = 4;
        }
        size_t v260 = v2047;
        uint64_t v259 = v2054;
        uint64_t v261 = v1997;
        switch(v258)
        {
          case 1:
            int v262 = *v72;
            goto LABEL_657;
          case 2:
            int v262 = *(unsigned __int16 *)v72;
            goto LABEL_657;
          case 3:
            int v262 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_657;
          case 4:
            int v262 = *(_DWORD *)v72;
LABEL_657:
            if (v2009 < 4) {
              unsigned int v256 = (v262 | (v257 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v256 = v262 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v679 = v256 == 1;
      if (v256 == 1) {
        uint64_t v680 = v259;
      }
      else {
        uint64_t v680 = v261;
      }
      v681 = v72;
      (*(void (**)(void *))(v680 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v679;
      v682 = *(void **)((unint64_t)&v681[v260 + 7] & 0xFFFFFFFFFFFFFFF8);
      id v683 = v682;
      *(void *)(((unint64_t)a1 + v260 + 7) & 0xFFFFFFFFFFFFFFF8) = v682;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_664;
      }
      unsigned int v684 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v684 > 0xFFD6)
      {
        int v502 = 15;
        goto LABEL_975;
      }
      if (v684 <= 0xD6)
      {
LABEL_664:
        char v274 = 15;
        goto LABEL_969;
      }
      __int16 v399 = 15;
      goto LABEL_973;
    case 0x10u:
      v263 = v72;
      *a1 = *(void *)v72;
      unint64_t v264 = (uint64_t *)(v72 + 8);
      unint64_t v265 = *((void *)v72 + 2);
      if (v265 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 1) = *(_OWORD *)v264;
      }
      else
      {
        uint64_t v397 = *v264;
        sub_24D3F9C18(*v264, *((void *)v72 + 2));
        a1[1] = v397;
        a1[2] = v265;
      }
      uint64_t v273 = v2063;
      *(_OWORD *)(a1 + 3) = *(_OWORD *)(v263 + 24);
      *((unsigned char *)a1 + 40) = v263[40];
      a1[6] = *((void *)v263 + 6);
      if (v2063 > 3) {
        goto LABEL_349;
      }
      unsigned int v404 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v404 > 0xFFD6)
      {
        int v502 = 16;
        goto LABEL_975;
      }
      if (v404 <= 0xD6)
      {
LABEL_349:
        char v274 = 16;
        goto LABEL_969;
      }
      __int16 v399 = 16;
      goto LABEL_973;
    case 0x11u:
      unsigned int v266 = v72[v2009];
      unsigned int v267 = v266 - 2;
      if (v266 < 2)
      {
        uint64_t v269 = v2054;
        uint64_t v270 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v268 = v2009;
        }
        else {
          uint64_t v268 = 4;
        }
        uint64_t v269 = v2054;
        uint64_t v270 = v1997;
        switch(v268)
        {
          case 1:
            int v271 = *v72;
            goto LABEL_672;
          case 2:
            int v271 = *(unsigned __int16 *)v72;
            goto LABEL_672;
          case 3:
            int v271 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_672;
          case 4:
            int v271 = *(_DWORD *)v72;
LABEL_672:
            if (v2009 < 4) {
              unsigned int v266 = (v271 | (v267 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v266 = v271 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v685 = v266 == 1;
      if (v266 == 1) {
        uint64_t v686 = v269;
      }
      else {
        uint64_t v686 = v270;
      }
      (*(void (**)(void *))(v686 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v685;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_679;
      }
      unsigned int v687 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v687 > 0xFFD6)
      {
        int v502 = 17;
        goto LABEL_975;
      }
      if (v687 <= 0xD6)
      {
LABEL_679:
        char v274 = 17;
        goto LABEL_969;
      }
      __int16 v399 = 17;
      goto LABEL_973;
    case 0x12u:
      uint64_t v272 = v72;
      (*(void (**)(void *))(v1997 + 16))(a1);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v2054 + 16))(((unint64_t)a1 + v1963) & v77, (unint64_t)&v272[v1963] & v77, v1996);
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_214;
      }
      unsigned int v398 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v398 > 0xFFD6)
      {
        int v502 = 18;
        goto LABEL_975;
      }
      if (v398 <= 0xD6)
      {
LABEL_214:
        char v274 = 18;
        goto LABEL_969;
      }
      __int16 v399 = 18;
      goto LABEL_973;
    case 0x13u:
      *(unsigned char *)a1 = *v72;
      uint64_t v275 = ((unint64_t)a1 + v2010 + 1) & v78;
      unint64_t v276 = (unsigned __int8 *)((unint64_t)&v72[v2010 + 1] & v78);
      unsigned int v277 = v276[v2009];
      unsigned int v278 = v277 - 2;
      if (v277 < 2)
      {
        uint64_t v280 = v2054;
        uint64_t v281 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v279 = v2009;
        }
        else {
          uint64_t v279 = 4;
        }
        uint64_t v280 = v2054;
        uint64_t v281 = v1997;
        switch(v279)
        {
          case 1:
            int v282 = *v276;
            goto LABEL_687;
          case 2:
            int v282 = *(unsigned __int16 *)v276;
            goto LABEL_687;
          case 3:
            int v282 = *(unsigned __int16 *)v276 | (v276[2] << 16);
            goto LABEL_687;
          case 4:
            int v282 = *(_DWORD *)v276;
LABEL_687:
            if (v2009 < 4) {
              unsigned int v277 = (v282 | (v278 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v277 = v282 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v688 = v277 == 1;
      if (v277 == 1) {
        uint64_t v689 = v280;
      }
      else {
        uint64_t v689 = v281;
      }
      (*(void (**)(uint64_t))(v689 + 16))(v275);
      *(unsigned char *)(v275 + v2009) = v688;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_694;
      }
      unsigned int v690 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v690 > 0xFFD6)
      {
        int v502 = 19;
        goto LABEL_975;
      }
      if (v690 <= 0xD6)
      {
LABEL_694:
        char v274 = 19;
        goto LABEL_969;
      }
      __int16 v399 = 19;
      goto LABEL_973;
    case 0x14u:
      *a1 = *(void *)v72;
      swift_retain();
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_222;
      }
      unsigned int v400 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v400 > 0xFFD6)
      {
        int v502 = 20;
        goto LABEL_975;
      }
      if (v400 <= 0xD6)
      {
LABEL_222:
        char v274 = 20;
        goto LABEL_969;
      }
      __int16 v399 = 20;
      goto LABEL_973;
    case 0x15u:
      *a1 = *(void *)v72;
      swift_retain();
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_224;
      }
      unsigned int v401 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v401 > 0xFFD6)
      {
        int v502 = 21;
        goto LABEL_975;
      }
      if (v401 <= 0xD6)
      {
LABEL_224:
        char v274 = 21;
        goto LABEL_969;
      }
      __int16 v399 = 21;
      goto LABEL_973;
    case 0x16u:
      *(unsigned char *)a1 = *v72;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_226;
      }
      unsigned int v402 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v402 > 0xFFD6)
      {
        int v502 = 22;
        goto LABEL_975;
      }
      if (v402 <= 0xD6)
      {
LABEL_226:
        char v274 = 22;
        goto LABEL_969;
      }
      __int16 v399 = 22;
      goto LABEL_973;
    case 0x17u:
      *(unsigned char *)a1 = *v72;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_228;
      }
      unsigned int v403 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v403 > 0xFFD6)
      {
        int v502 = 23;
        goto LABEL_975;
      }
      if (v403 <= 0xD6)
      {
LABEL_228:
        char v274 = 23;
        goto LABEL_969;
      }
      __int16 v399 = 23;
      goto LABEL_973;
    case 0x18u:
      unsigned int v283 = v72[v2009];
      unsigned int v284 = v283 - 2;
      if (v283 < 2)
      {
        uint64_t v286 = v2054;
        uint64_t v287 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v285 = v2009;
        }
        else {
          uint64_t v285 = 4;
        }
        uint64_t v286 = v2054;
        uint64_t v287 = v1997;
        switch(v285)
        {
          case 1:
            int v288 = *v72;
            goto LABEL_702;
          case 2:
            int v288 = *(unsigned __int16 *)v72;
            goto LABEL_702;
          case 3:
            int v288 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_702;
          case 4:
            int v288 = *(_DWORD *)v72;
LABEL_702:
            if (v2009 < 4) {
              unsigned int v283 = (v288 | (v284 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v283 = v288 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v691 = v283 == 1;
      if (v283 == 1) {
        uint64_t v692 = v286;
      }
      else {
        uint64_t v692 = v287;
      }
      (*(void (**)(void *))(v692 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v691;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_709;
      }
      unsigned int v693 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v693 > 0xFFD6)
      {
        int v502 = 24;
        goto LABEL_975;
      }
      if (v693 <= 0xD6)
      {
LABEL_709:
        char v274 = 24;
        goto LABEL_969;
      }
      __int16 v399 = 24;
      goto LABEL_973;
    case 0x19u:
      unsigned int v289 = v72[v2009];
      unsigned int v290 = v289 - 2;
      if (v289 < 2)
      {
        uint64_t v292 = v2054;
        uint64_t v293 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v291 = v2009;
        }
        else {
          uint64_t v291 = 4;
        }
        uint64_t v292 = v2054;
        uint64_t v293 = v1997;
        switch(v291)
        {
          case 1:
            int v294 = *v72;
            goto LABEL_717;
          case 2:
            int v294 = *(unsigned __int16 *)v72;
            goto LABEL_717;
          case 3:
            int v294 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_717;
          case 4:
            int v294 = *(_DWORD *)v72;
LABEL_717:
            if (v2009 < 4) {
              unsigned int v289 = (v294 | (v290 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v289 = v294 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v694 = v289 == 1;
      if (v289 == 1) {
        uint64_t v695 = v292;
      }
      else {
        uint64_t v695 = v293;
      }
      (*(void (**)(void *))(v695 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v694;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_724;
      }
      unsigned int v696 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v696 > 0xFFD6)
      {
        int v502 = 25;
        goto LABEL_975;
      }
      if (v696 <= 0xD6)
      {
LABEL_724:
        char v274 = 25;
        goto LABEL_969;
      }
      __int16 v399 = 25;
      goto LABEL_973;
    case 0x1Au:
      unsigned int v295 = v72[v2009];
      unsigned int v296 = v295 - 2;
      if (v295 < 2)
      {
        uint64_t v298 = v2054;
        uint64_t v299 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v297 = v2009;
        }
        else {
          uint64_t v297 = 4;
        }
        uint64_t v298 = v2054;
        uint64_t v299 = v1997;
        switch(v297)
        {
          case 1:
            int v300 = *v72;
            goto LABEL_732;
          case 2:
            int v300 = *(unsigned __int16 *)v72;
            goto LABEL_732;
          case 3:
            int v300 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_732;
          case 4:
            int v300 = *(_DWORD *)v72;
LABEL_732:
            if (v2009 < 4) {
              unsigned int v295 = (v300 | (v296 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v295 = v300 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v697 = v295 == 1;
      if (v295 == 1) {
        uint64_t v698 = v298;
      }
      else {
        uint64_t v698 = v299;
      }
      (*(void (**)(void *))(v698 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v697;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_739;
      }
      unsigned int v699 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v699 > 0xFFD6)
      {
        int v502 = 26;
        goto LABEL_975;
      }
      if (v699 <= 0xD6)
      {
LABEL_739:
        char v274 = 26;
        goto LABEL_969;
      }
      __int16 v399 = 26;
      goto LABEL_973;
    case 0x1Bu:
      uint64_t v301 = ~v2014;
      uint64_t v2026 = ~v2087;
      uint64_t v2091 = ~v2017;
      uint64_t v1915 = ~v37;
      uint64_t v1917 = ~v1998;
      unint64_t v302 = v69;
      unsigned int v303 = v72[v69];
      unsigned int v304 = v303 - 2;
      if (v303 < 2)
      {
        uint64_t v306 = ~v2077;
      }
      else
      {
        if (v69 <= 3) {
          uint64_t v305 = v69;
        }
        else {
          uint64_t v305 = 4;
        }
        uint64_t v306 = ~v2077;
        switch(v305)
        {
          case 1:
            int v307 = *v72;
            goto LABEL_747;
          case 2:
            int v307 = *(unsigned __int16 *)v72;
            goto LABEL_747;
          case 3:
            int v307 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_747;
          case 4:
            int v307 = *(_DWORD *)v72;
LABEL_747:
            if (v69 < 4) {
              unsigned int v303 = (v307 | (v304 << (8 * v69))) + 2;
            }
            else {
              unsigned int v303 = v307 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v2013 = ~v2066;
      if (v303 == 1)
      {
        uint64_t v2069 = ~v2003;
        unsigned int v700 = v72[v1943];
        unsigned int v701 = v700 - 8;
        uint64_t v702 = v1997;
        if (v700 >= 8)
        {
          if (v1943 <= 3) {
            uint64_t v703 = v1943;
          }
          else {
            uint64_t v703 = 4;
          }
          switch(v703)
          {
            case 1:
              int v704 = *v72;
              goto LABEL_1196;
            case 2:
              int v704 = *(unsigned __int16 *)v72;
              goto LABEL_1196;
            case 3:
              int v704 = *(unsigned __int16 *)v72 | (v72[2] << 16);
              goto LABEL_1196;
            case 4:
              int v704 = *(_DWORD *)v72;
LABEL_1196:
              if (v1943 < 4) {
                unsigned int v700 = (v704 | (v701 << (8 * v1943))) + 8;
              }
              else {
                unsigned int v700 = v704 + 8;
              }
              break;
            default:
              break;
          }
        }
        uint64_t v1161 = ~v57;
        switch(v700)
        {
          case 1u:
            unint64_t v1169 = v69;
            unint64_t v2033 = v38;
            size_t v1922 = v40;
            v1170 = v72;
            v2021 = *(void (**)(void *, const void *, uint64_t))(v2054 + 16);
            ((void (*)(void *))v2021)(a1);
            v2023 = (void *)(((unint64_t)a1 + v1937) & v301);
            v1171 = (const void *)((unint64_t)&v1170[v1937] & v301);
            v2038 = v1171;
            if (v1957 == v1956)
            {
              int v1172 = (*(uint64_t (**)(unint64_t))(v2054 + 48))((unint64_t)&v1170[v1937] & v301);
              v1171 = (const void *)((unint64_t)&v1170[v1937] & v301);
              unint64_t v1173 = v1943;
              uint64_t v1174 = v1915;
              unint64_t v1175 = v1169;
              uint64_t v1176 = v2077;
              v1177 = (void *)(((unint64_t)a1 + v1937) & v301);
              goto LABEL_1384;
            }
            uint64_t v1176 = v2077;
            unint64_t v1231 = ((unint64_t)v1171 + v1983) & v2091;
            uint64_t v1174 = v1915;
            unint64_t v1232 = (v1955 + v1231) & v1915;
            if (v1967 == v1956)
            {
              unint64_t v1173 = v1943;
              v1177 = v2023;
              if (v1959 == v1967)
              {
                int v1172 = (*(uint64_t (**)(unint64_t))(v1979 + 48))((v1955 + v1231) & v1915);
              }
              else
              {
                v1295 = (unint64_t *)((v1987 + v1232) & 0xFFFFFFFFFFFFFFF8);
                if (v1951 <= 0x7FFFFFFE)
                {
                  unint64_t v1296 = *v1295;
                  if (v1296 >= 0xFFFFFFFF) {
                    LODWORD(v1296) = -1;
                  }
                  unint64_t v1175 = v1169;
                  if ((v1296 + 1) >= 2) {
                    goto LABEL_1385;
                  }
                  goto LABEL_1388;
                }
                int v1172 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v1295 + v1981) & v86);
              }
              v1171 = v2038;
              uint64_t v1174 = v1915;
              goto LABEL_1383;
            }
            unint64_t v1259 = v1232 + v38;
            unint64_t v1173 = v1943;
            v1177 = v2023;
            if ((v1941 & 0x80000000) == 0)
            {
              unint64_t v1260 = *(void *)(v1259 + 8);
              if (v1260 >= 0xFFFFFFFF) {
                LODWORD(v1260) = -1;
              }
              int v1172 = v1260 + 1;
LABEL_1383:
              unint64_t v1175 = v1169;
              goto LABEL_1384;
            }
            uint64_t v1306 = (v1992 + ((v2045 + v1259) & v2013)) & v2069;
            unint64_t v1175 = v1169;
            if (v1971 <= 0x7FFFFFFD)
            {
              unint64_t v1911 = *(void *)(((v1939 + ((v1988 + v1306) & v2069)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1911 >= 0xFFFFFFFF) {
                LODWORD(v1911) = -1;
              }
              if ((v1911 + 1) >= 2) {
                goto LABEL_1385;
              }
              goto LABEL_1388;
            }
            int v1172 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1990 + 48))(v1306, v1971, v1989);
            v1171 = v2038;
            uint64_t v1174 = v1915;
LABEL_1384:
            if (v1172)
            {
LABEL_1385:
              memcpy(v1177, v1171, v1922);
              size_t v1391 = v2040;
LABEL_1386:
              size_t v1392 = __n;
              goto LABEL_1477;
            }
            unint64_t v1231 = ((unint64_t)v1171 + v1983) & v2091;
            unint64_t v1232 = (v1955 + v1231) & v1174;
LABEL_1388:
            unint64_t v2049 = v1175;
            uint64_t v1393 = v1174;
            v2021(v1177, v1171, v1996);
            v2021((void *)(((unint64_t)v1177 + v1983) & v2091), (const void *)v1231, v1996);
            unint64_t v1394 = (v1955 + (((unint64_t)v1177 + v1983) & v2091)) & v1393;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 16))(v1394, v1232, v1978);
            v1395 = (void *)((v1987 + v1394) & 0xFFFFFFFFFFFFFFF8);
            v1396 = (void *)((v1987 + v1232) & 0xFFFFFFFFFFFFFFF8);
            void *v1395 = *v1396;
            unint64_t v1397 = ((unint64_t)v1395 + v1981) & v86;
            unint64_t v1398 = ((unint64_t)v1396 + v1981) & v86;
            v1399 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
            swift_bridgeObjectRetain();
            v1399(v1397, v1398, v1975);
            v1400 = (void *)((v1969 + v1398) & 0xFFFFFFFFFFFFFFF8);
            v1401 = (void *)((v1969 + v1397) & 0xFFFFFFFFFFFFFFF8);
            void *v1401 = *v1400;
            v1402 = (void *)(((unint64_t)v1401 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1403 = (void *)(((unint64_t)v1400 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1402 = *v1403;
            v1402[1] = v1403[1];
            v1404 = (void *)(v1394 + v2033);
            void *v1404 = *(void *)(v1232 + v2033);
            v1404[1] = *(void *)(v1232 + v2033 + 8);
            uint64_t v1405 = (v2045 + v1394 + v2033) & v2013;
            uint64_t v1406 = (v2045 + v1232 + v2033) & v2013;
            *(unsigned char *)uint64_t v1405 = *(unsigned char *)v1406;
            uint64_t v1407 = v1405 | 4;
            int v1408 = *(_DWORD *)(v1406 | 4);
            *(unsigned char *)(v1407 + 4) = *(unsigned char *)((v1406 | 4) + 4);
            *(_DWORD *)uint64_t v1407 = v1408;
            *(_WORD *)(v1405 + 10) = *(_WORD *)(v1406 + 0xA);
            uint64_t v2101 = v1405;
            uint64_t v1409 = (v1992 + v1405) & v2069;
            uint64_t v2057 = v1406;
            uint64_t v1410 = (v1992 + v1406) & v2069;
            v1411 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1990 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1411(v1409, v1410, v1989);
            uint64_t v1412 = (v1988 + v1409) & v2069;
            uint64_t v1413 = (v1988 + v1410) & v2069;
            v1411(v1412, v1413, v1989);
            v1414 = (unsigned char *)(v1412 + v1993);
            unsigned char *v1414 = *(unsigned char *)(v1413 + v1993);
            v1414[1] = *(unsigned char *)(v1413 + v1993 + 1);
            v1414[2] = *(unsigned char *)(v1413 + v1993 + 2);
            v1414[3] = *(unsigned char *)(v1413 + v1993 + 3);
            v1414[4] = *(unsigned char *)(v1413 + v1993 + 4);
            unint64_t v1415 = (v1412 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1416 = (v1413 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1415 = *(void *)v1416;
            *(void *)(v1415 + 8) = *(void *)(v1416 + 8);
            *(unsigned char *)(v1415 + 16) = *(unsigned char *)(v1416 + 16);
            *(unsigned char *)(v1415 + 17) = *(unsigned char *)(v1416 + 17);
            *(unsigned char *)(v1415 + 18) = *(unsigned char *)(v1416 + 18);
            *(unsigned char *)(v1415 + 19) = *(unsigned char *)(v1416 + 19);
            unint64_t v1417 = (v1415 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1418 = (v1416 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1417 = *(void *)v1418;
            *(unsigned char *)(v1417 + 8) = *(unsigned char *)(v1418 + 8);
            *(unsigned char *)(v1417 + 9) = *(unsigned char *)(v1418 + 9);
            *(unsigned char *)(v1417 + 10) = *(unsigned char *)(v1418 + 10);
            *(unsigned char *)(v1417 + 11) = *(unsigned char *)(v1418 + 11);
            *(unsigned char *)(v1417 + 12) = *(unsigned char *)(v1418 + 12);
            v1419 = (void *)((v1416 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1420 = (void *)((v1415 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1420 = *v1419;
            unint64_t v1421 = ((unint64_t)v1420 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1422 = ((unint64_t)v1419 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1421 = *(void *)v1422;
            *(unsigned char *)(v1421 + 8) = *(unsigned char *)(v1422 + 8);
            *(unsigned char *)(v1421 + 9) = *(unsigned char *)(v1422 + 9);
            v1423 = (void *)((v1985 + v1421) & v2069);
            v1424 = (const void *)((v1985 + v1422) & v2069);
            v1425 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
            swift_bridgeObjectRetain();
            if (v1425(v1424, 1, v1989))
            {
              memcpy(v1423, v1424, __n);
            }
            else
            {
              v1411((uint64_t)v1423, (uint64_t)v1424, v1989);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1423, 0, 1, v1989);
            }
            v1426 = (void *)(((unint64_t)v1423 + v1986) & 0xFFFFFFFFFFFFFFF8);
            v1427 = (void *)(((unint64_t)v1424 + v1986) & 0xFFFFFFFFFFFFFFF8);
            void *v1426 = *v1427;
            unint64_t v1428 = ((unint64_t)v1426 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1429 = ((unint64_t)v1427 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1430 = *(void *)v1429;
            *(unsigned char *)(v1428 + 8) = *(unsigned char *)(v1429 + 8);
            *(void *)unint64_t v1428 = v1430;
            v1431 = (void *)(((unint64_t)v1426 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1432 = (void *)(((unint64_t)v1427 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1431 = *v1432;
            unint64_t v1433 = ((unint64_t)v1431 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1434 = (uint64_t *)(((unint64_t)v1432 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1435 = v1434[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v702 = v1997;
            size_t v1391 = v2040;
            unint64_t v1173 = v1943;
            if ((v1435 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1433 = *(_OWORD *)v1434;
            }
            else
            {
              uint64_t v1436 = *v1434;
              sub_24D3F9C18(*v1434, v1435);
              *(void *)unint64_t v1433 = v1436;
              *(void *)(v1433 + 8) = v1435;
            }
            unint64_t v1437 = (v1433 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1438 = ((unint64_t)v1434 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1439 = *(void *)v1438;
            *(unsigned char *)(v1437 + 8) = *(unsigned char *)(v1438 + 8);
            *(void *)unint64_t v1437 = v1439;
            *(unsigned char *)(v1437 + 9) = *(unsigned char *)(v1438 + 9);
            unint64_t v1440 = (v1437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1441 = (v1438 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1442 = *(_DWORD *)v1441;
            *(unsigned char *)(v1440 + 4) = *(unsigned char *)(v1441 + 4);
            *(_DWORD *)unint64_t v1440 = v1442;
            v1443 = (void *)((v1437 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1444 = (void *)((v1438 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1443 = *v1444;
            v1443[1] = v1444[1];
            unint64_t v1445 = v2101 + v2044;
            v1446 = (long long *)(v2057 + v2044);
            unint64_t v1447 = *(void *)(v2057 + v2044 + 16);
            if (v1447 >= 0xFFFFFFFF) {
              LODWORD(v1447) = -1;
            }
            int v1448 = v1447 - 1;
            swift_bridgeObjectRetain();
            unint64_t v1449 = v2049;
            if (v1448 < 0)
            {
              *(void *)unint64_t v1445 = *(void *)v1446;
              *(unsigned char *)(v1445 + 8) = *((unsigned char *)v1446 + 8);
              *(unsigned char *)(v1445 + 9) = *((unsigned char *)v1446 + 9);
              v1462 = (void *)*((void *)v1446 + 2);
              id v1463 = v1462;
              *(void *)(v1445 + 16) = v1462;
              v1464 = (void *)*((void *)v1446 + 3);
              id v1465 = v1464;
              *(void *)(v1445 + 24) = v1464;
              *(unsigned char *)(v1445 + 32) = *((unsigned char *)v1446 + 32);
              *(unsigned char *)(v1445 + 33) = *((unsigned char *)v1446 + 33);
              *(unsigned char *)(v1445 + 34) = *((unsigned char *)v1446 + 34);
              *(void *)(v1445 + 40) = *((void *)v1446 + 5);
              *(void *)(v1445 + 48) = *((void *)v1446 + 6);
              *(void *)(v1445 + 56) = *((void *)v1446 + 7);
              *(void *)(v1445 + 64) = *((void *)v1446 + 8);
              *(unsigned char *)(v1445 + 72) = *((unsigned char *)v1446 + 72);
              *(void *)(v1445 + 80) = *((void *)v1446 + 10);
              *(void *)(v1445 + 88) = *((void *)v1446 + 11);
              v2102 = (void *)*((void *)v1446 + 12);
              *(void *)(v1445 + 96) = v2102;
              *(unsigned char *)(v1445 + 104) = *((unsigned char *)v1446 + 104);
              *(unsigned char *)(v1445 + 105) = *((unsigned char *)v1446 + 105);
              *(void *)(v1445 + 112) = *((void *)v1446 + 14);
              *(void *)(v1445 + 120) = *((void *)v1446 + 15);
              *(void *)(v1445 + 128) = *((void *)v1446 + 16);
              *(void *)(v1445 + 136) = *((void *)v1446 + 17);
              *(void *)(v1445 + 144) = *((void *)v1446 + 18);
              *(void *)(v1445 + 152) = *((void *)v1446 + 19);
              *(void *)(v1445 + 160) = *((void *)v1446 + 20);
              *(void *)(v1445 + 168) = *((void *)v1446 + 21);
              *(unsigned char *)(v1445 + 176) = *((unsigned char *)v1446 + 176);
              *(void *)(v1445 + 184) = *((void *)v1446 + 23);
              uint64_t v2058 = *((void *)v1446 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1466 = v2102;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v2058)
              {
                *(void *)(v1445 + 192) = v2058;
                *(void *)(v1445 + 200) = *((void *)v1446 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1445 + 192) = v1446[12];
              }
              unint64_t v1449 = v2049;
              uint64_t v702 = v1997;
              size_t v1391 = v2040;
              unint64_t v1173 = v1943;
              uint64_t v1176 = v2077;
              *(void *)(v1445 + 208) = *((void *)v1446 + 26);
              *(void *)(v1445 + 216) = *((void *)v1446 + 27);
              *(void *)(v1445 + 224) = *((void *)v1446 + 28);
              *(void *)(v1445 + 232) = *((void *)v1446 + 29);
              *(void *)(v1445 + 240) = *((void *)v1446 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1450 = *v1446;
              long long v1451 = v1446[1];
              long long v1452 = v1446[3];
              *(_OWORD *)(v1445 + 32) = v1446[2];
              *(_OWORD *)(v1445 + 48) = v1452;
              *(_OWORD *)unint64_t v1445 = v1450;
              *(_OWORD *)(v1445 + 16) = v1451;
              long long v1453 = v1446[4];
              long long v1454 = v1446[5];
              long long v1455 = v1446[7];
              *(_OWORD *)(v1445 + 96) = v1446[6];
              *(_OWORD *)(v1445 + 112) = v1455;
              *(_OWORD *)(v1445 + 64) = v1453;
              *(_OWORD *)(v1445 + 80) = v1454;
              long long v1456 = v1446[8];
              long long v1457 = v1446[9];
              long long v1458 = v1446[11];
              *(_OWORD *)(v1445 + 160) = v1446[10];
              *(_OWORD *)(v1445 + 176) = v1458;
              *(_OWORD *)(v1445 + 128) = v1456;
              *(_OWORD *)(v1445 + 144) = v1457;
              long long v1459 = v1446[12];
              long long v1460 = v1446[13];
              long long v1461 = v1446[14];
              *(void *)(v1445 + 240) = *((void *)v1446 + 30);
              *(_OWORD *)(v1445 + 208) = v1460;
              *(_OWORD *)(v1445 + 224) = v1461;
              *(_OWORD *)(v1445 + 192) = v1459;
              uint64_t v1176 = v2077;
            }
            v1794 = (_OWORD *)((v1445 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1795 = (long long *)(((unint64_t)v1446 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1796 = *v1795;
            *(_OWORD *)((char *)v1794 + 9) = *(long long *)((char *)v1795 + 9);
            _OWORD *v1794 = v1796;
            unint64_t v1797 = (v1445 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1798 = ((unint64_t)v1446 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1799 = *(_OWORD *)v1798;
            *(unsigned char *)(v1797 + 16) = *(unsigned char *)(v1798 + 16);
            *(_OWORD *)unint64_t v1797 = v1799;
            v1800 = (void *)((v1445 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1801 = ((unint64_t)v1446 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1802 = *(void *)v1801;
            v1801 += 15;
            void *v1800 = v1802;
            v1803 = (void *)(((unint64_t)v1800 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1804 = *(void *)(v1801 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1805 = *(void *)((v1801 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_24D5203A8(v1804, v1805);
            void *v1803 = v1804;
            v1803[1] = v1805;
            size_t v1392 = v1993;
            unint64_t v1175 = v1449;
            v1177 = v2023;
            if (!v1971) {
              goto LABEL_1386;
            }
LABEL_1477:
            unint64_t v1806 = ((((v1953
                      + ((((((((((v1970 + v1392 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1807 = (void *)(((unint64_t)v1177 + v1176 + v1806) & v79);
            v1808 = (const void *)(((unint64_t)v2038 + v1176 + v1806) & v79);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v702 + 48))(v1808, 1, AssociatedTypeWitness))
            {
              memcpy(v1807, v1808, v1952);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v702 + 16))(v1807, v1808, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v702 + 56))(v1807, 0, 1, AssociatedTypeWitness);
            }
            unint64_t v1809 = v1175;
            uint64_t v1244 = v2063;
            v1810 = (char *)(((unint64_t)v1807 + v1935) & v2026);
            v1811 = (char *)(((unint64_t)v1808 + v1935) & v2026);
            if (v1958 == v1966)
            {
              int v1812 = (*(uint64_t (**)(unint64_t))(v1977 + 48))(((unint64_t)v1808 + v1935) & v2026);
            }
            else
            {
              v1813 = (uint64_t *)((unint64_t)&v1811[v1982] & 0xFFFFFFFFFFFFFFF8);
              if (v1944 <= 0x7FFFFFFE)
              {
                uint64_t v1814 = *v1813;
                if ((unint64_t)*v1813 >= 0xFFFFFFFF) {
                  LODWORD(v1814) = -1;
                }
                if ((v1814 + 1) >= 2) {
                  goto LABEL_1489;
                }
                goto LABEL_1491;
              }
              int v1812 = (*(uint64_t (**)(unint64_t))(v1974 + 48))(((unint64_t)v1813 + v1972) & v1917);
            }
            if (v1812)
            {
LABEL_1489:
              memcpy(v1810, v1811, v1391);
              goto LABEL_1492;
            }
            v1813 = (uint64_t *)((unint64_t)&v1811[v1982] & 0xFFFFFFFFFFFFFFF8);
LABEL_1491:
            (*(void (**)(char *, char *, uint64_t))(v1977 + 16))(v1810, v1811, v1976);
            v1815 = (void *)((unint64_t)&v1810[v1982] & 0xFFFFFFFFFFFFFFF8);
            void *v1815 = *v1813;
            unint64_t v1816 = ((unint64_t)v1815 + v1972) & v1917;
            unint64_t v1817 = ((unint64_t)v1813 + v1972) & v1917;
            v1818 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
            swift_bridgeObjectRetain();
            v1818(v1816, v1817, v1973);
            v1819 = (void *)((v1968 + v1816) & 0xFFFFFFFFFFFFFFF8);
            v1820 = (void *)((v1968 + v1817) & 0xFFFFFFFFFFFFFFF8);
            void *v1819 = *v1820;
            v1821 = (void *)(((unint64_t)v1819 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1822 = (void *)(((unint64_t)v1820 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1821 = *v1822;
            v1821[1] = v1822[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_1492:
            unint64_t v302 = v1809;
            *(void *)&v1810[v1391] = *(void *)&v1811[v1391];
            v1823 = (void *)((unint64_t)&v1810[v1391 + 15] & 0xFFFFFFFFFFFFFFF8);
            v1824 = (void *)((unint64_t)&v1811[v1391 + 15] & 0xFFFFFFFFFFFFFFF8);
            void *v1823 = *v1824;
            v1825 = *(void **)(((unint64_t)v1824 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(void *)(((unint64_t)v1823 + 15) & 0xFFFFFFFFFFFFFFF8) = v1825;
            char v1223 = 1;
            *((unsigned char *)a1 + v1173) = 1;
            id v1826 = v1825;
            goto LABEL_1499;
          case 2u:
            v1178 = v72;
            (*(void (**)(void *))(v2054 + 16))(a1);
            v1179 = (void *)(((unint64_t)a1 + v1931) & v306);
            v1180 = (const void *)((unint64_t)&v1178[v1931] & v306);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1997 + 48))(v1180, 1, AssociatedTypeWitness))
            {
              memcpy(v1179, v1180, v1952);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1997 + 16))(v1179, v1180, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1997 + 56))(v1179, 0, 1, AssociatedTypeWitness);
            }
            size_t v1242 = v2040;
            unint64_t v1243 = v302;
            uint64_t v1244 = v2063;
            v1245 = (char *)(((unint64_t)v1179 + v1935) & v2026);
            v1246 = (char *)(((unint64_t)v1180 + v1935) & v2026);
            if (v1958 == v1966)
            {
              int v1247 = (*(uint64_t (**)(char *))(v1977 + 48))(v1246);
            }
            else
            {
              v1248 = (uint64_t *)((unint64_t)&v1246[v1982] & 0xFFFFFFFFFFFFFFF8);
              if (v1944 <= 0x7FFFFFFE)
              {
                uint64_t v1249 = *v1248;
                if ((unint64_t)*v1248 >= 0xFFFFFFFF) {
                  LODWORD(v1249) = -1;
                }
                if ((v1249 + 1) >= 2) {
                  goto LABEL_1319;
                }
                goto LABEL_1321;
              }
              int v1247 = (*(uint64_t (**)(unint64_t))(v1974 + 48))(((unint64_t)v1248 + v1972) & v1917);
            }
            if (v1247)
            {
LABEL_1319:
              memcpy(v1245, v1246, v2040);
              goto LABEL_1322;
            }
            v1248 = (uint64_t *)((unint64_t)&v1246[v1982] & 0xFFFFFFFFFFFFFFF8);
LABEL_1321:
            (*(void (**)(char *, char *, uint64_t))(v1977 + 16))(v1245, v1246, v1976);
            v1269 = (void *)((unint64_t)&v1245[v1982] & 0xFFFFFFFFFFFFFFF8);
            void *v1269 = *v1248;
            unint64_t v1270 = ((unint64_t)v1269 + v1972) & v1917;
            unint64_t v1271 = ((unint64_t)v1248 + v1972) & v1917;
            v1272 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
            swift_bridgeObjectRetain();
            v1272(v1270, v1271, v1973);
            size_t v1242 = v2040;
            v1273 = (void *)((v1968 + v1270) & 0xFFFFFFFFFFFFFFF8);
            v1274 = (void *)((v1968 + v1271) & 0xFFFFFFFFFFFFFFF8);
            void *v1273 = *v1274;
            v1275 = (void *)(((unint64_t)v1273 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1276 = (void *)(((unint64_t)v1274 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1275 = *v1276;
            v1275[1] = v1276[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
LABEL_1322:
            unint64_t v302 = v1243;
            v1277 = &v1245[v1242];
            char *v1277 = v1246[v1242];
            v1278 = *(void **)&v1246[v1242 + 8];
            *((void *)v1277 + 1) = v1278;
            *((unsigned char *)a1 + v1943) = 2;
            id v1279 = v1278;
            char v1223 = 1;
            goto LABEL_1499;
          case 3u:
            unint64_t v1181 = v69;
            unint64_t v2034 = v38;
            size_t v1182 = v40;
            v1183 = *(void (**)(void *, const void *, uint64_t))(v2054 + 16);
            v1184 = v72;
            ((void (*)(void *))v1183)(a1);
            v2043 = (void *)(((unint64_t)a1 + v1937) & v301);
            v2085 = (const void *)((unint64_t)&v1184[v1937] & v301);
            if (v1957 == v1956)
            {
              int v1185 = (*(uint64_t (**)(void))(v2054 + 48))();
              uint64_t v1186 = ~v2003;
              unint64_t v1187 = v1943;
            }
            else
            {
              unint64_t v1233 = (v1983 + ((unint64_t)&v1184[v1937] & v301)) & v2091;
              uint64_t v1234 = v1915;
              unint64_t v1235 = (v1955 + v1233) & v1915;
              uint64_t v1186 = ~v2003;
              if (v1967 != v1956)
              {
                unint64_t v1261 = v1235 + v38;
                unint64_t v1187 = v1943;
                if ((v1941 & 0x80000000) != 0)
                {
                  uint64_t v1307 = (v1992 + ((v2045 + v1261) & v2013)) & v2069;
                  unint64_t v302 = v1181;
                  if (v1971 <= 0x7FFFFFFD)
                  {
                    unint64_t v1912 = *(void *)(((v1939 + ((v1988 + v1307) & v2069)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1912 >= 0xFFFFFFFF) {
                      LODWORD(v1912) = -1;
                    }
                    if ((v1912 + 1) >= 2) {
                      goto LABEL_1404;
                    }
                    goto LABEL_1407;
                  }
                  int v1185 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1990 + 48))(v1307, v1971, v1989);
                  uint64_t v1234 = v1915;
                  goto LABEL_1403;
                }
                unint64_t v1262 = *(void *)(v1261 + 8);
                if (v1262 >= 0xFFFFFFFF) {
                  LODWORD(v1262) = -1;
                }
                int v1185 = v1262 + 1;
LABEL_1402:
                unint64_t v302 = v1181;
LABEL_1403:
                if (v1185)
                {
LABEL_1404:
                  v1467 = v2043;
                  v1468 = v2085;
                  memcpy(v2043, v2085, v1182);
LABEL_1405:
                  size_t v1469 = __n;
LABEL_1496:
                  unint64_t v1839 = ((((v1953
                            + ((((((((((v1970 + v1469 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)
                            + 327) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  v1840 = (void *)(((unint64_t)v1467 + v1839) & 0xFFFFFFFFFFFFFFF8);
                  v1841 = (void *)(((unint64_t)v1468 + v1839) & 0xFFFFFFFFFFFFFFF8);
                  void *v1840 = *v1841;
                  v1840[1] = v1841[1];
                  *(void *)(((unint64_t)v1840 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1841
                                                                                                  + 23) & 0xFFFFFFFFFFFFFFF8);
                  *((unsigned char *)a1 + v1187) = 3;
                  swift_bridgeObjectRetain();
                  goto LABEL_1497;
                }
                unint64_t v1233 = ((unint64_t)v2085 + v1983) & v2091;
                unint64_t v1235 = (v1955 + v1233) & v1234;
LABEL_1407:
                unint64_t v2050 = v302;
                uint64_t v1470 = v1234;
                v1183(v2043, v2085, v1996);
                uint64_t v1471 = v1186;
                unint64_t v1472 = ((unint64_t)v2043 + v1983) & v2091;
                v1183((void *)v1472, (const void *)v1233, v1996);
                unint64_t v1473 = (v1955 + v1472) & v1470;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 16))(v1473, v1235, v1978);
                v1474 = (void *)((v1987 + v1473) & 0xFFFFFFFFFFFFFFF8);
                v1475 = (void *)((v1987 + v1235) & 0xFFFFFFFFFFFFFFF8);
                void *v1474 = *v1475;
                unint64_t v1476 = ((unint64_t)v1474 + v1981) & v86;
                unint64_t v1477 = ((unint64_t)v1475 + v1981) & v86;
                v1478 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
                swift_bridgeObjectRetain();
                v1478(v1476, v1477, v1975);
                v1479 = (void *)((v1969 + v1477) & 0xFFFFFFFFFFFFFFF8);
                v1480 = (void *)((v1969 + v1476) & 0xFFFFFFFFFFFFFFF8);
                void *v1480 = *v1479;
                v1481 = (void *)(((unint64_t)v1480 + 15) & 0xFFFFFFFFFFFFFFF8);
                v1482 = (void *)(((unint64_t)v1479 + 15) & 0xFFFFFFFFFFFFFFF8);
                void *v1481 = *v1482;
                v1481[1] = v1482[1];
                v1483 = (void *)(v1473 + v2034);
                void *v1483 = *(void *)(v1235 + v2034);
                v1483[1] = *(void *)(v1235 + v2034 + 8);
                uint64_t v1484 = (v2045 + v1473 + v2034) & v2013;
                uint64_t v1485 = (v2045 + v1235 + v2034) & v2013;
                *(unsigned char *)uint64_t v1484 = *(unsigned char *)v1485;
                uint64_t v1486 = v1484 | 4;
                int v1487 = *(_DWORD *)(v1485 | 4);
                *(unsigned char *)(v1486 + 4) = *(unsigned char *)((v1485 | 4) + 4);
                *(_DWORD *)uint64_t v1486 = v1487;
                *(_WORD *)(v1484 + 10) = *(_WORD *)(v1485 + 0xA);
                uint64_t v2103 = v1484;
                uint64_t v1488 = (v1992 + v1484) & v1471;
                uint64_t v2059 = v1485;
                uint64_t v1489 = (v1992 + v1485) & v1471;
                v1490 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1990 + 16);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                v1490(v1488, v1489, v1989);
                uint64_t v1491 = (v1988 + v1488) & v1471;
                uint64_t v1492 = (v1988 + v1489) & v1471;
                v1490(v1491, v1492, v1989);
                v1493 = (unsigned char *)(v1491 + v1993);
                unsigned char *v1493 = *(unsigned char *)(v1492 + v1993);
                v1493[1] = *(unsigned char *)(v1492 + v1993 + 1);
                v1493[2] = *(unsigned char *)(v1492 + v1993 + 2);
                v1493[3] = *(unsigned char *)(v1492 + v1993 + 3);
                v1493[4] = *(unsigned char *)(v1492 + v1993 + 4);
                unint64_t v1494 = (v1491 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1495 = (v1492 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1494 = *(void *)v1495;
                *(void *)(v1494 + 8) = *(void *)(v1495 + 8);
                *(unsigned char *)(v1494 + 16) = *(unsigned char *)(v1495 + 16);
                *(unsigned char *)(v1494 + 17) = *(unsigned char *)(v1495 + 17);
                *(unsigned char *)(v1494 + 18) = *(unsigned char *)(v1495 + 18);
                *(unsigned char *)(v1494 + 19) = *(unsigned char *)(v1495 + 19);
                unint64_t v1496 = (v1494 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1497 = (v1495 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1496 = *(void *)v1497;
                *(unsigned char *)(v1496 + 8) = *(unsigned char *)(v1497 + 8);
                *(unsigned char *)(v1496 + 9) = *(unsigned char *)(v1497 + 9);
                *(unsigned char *)(v1496 + 10) = *(unsigned char *)(v1497 + 10);
                *(unsigned char *)(v1496 + 11) = *(unsigned char *)(v1497 + 11);
                *(unsigned char *)(v1496 + 12) = *(unsigned char *)(v1497 + 12);
                v1498 = (void *)((v1495 + 47) & 0xFFFFFFFFFFFFFFF8);
                v1499 = (void *)((v1494 + 47) & 0xFFFFFFFFFFFFFFF8);
                void *v1499 = *v1498;
                unint64_t v1500 = ((unint64_t)v1499 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1501 = ((unint64_t)v1498 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1500 = *(void *)v1501;
                *(unsigned char *)(v1500 + 8) = *(unsigned char *)(v1501 + 8);
                *(unsigned char *)(v1500 + 9) = *(unsigned char *)(v1501 + 9);
                v1502 = (void *)((v1985 + v1500) & v1471);
                v1503 = (const void *)((v1985 + v1501) & v1471);
                v1504 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
                swift_bridgeObjectRetain();
                if (v1504(v1503, 1, v1989))
                {
                  memcpy(v1502, v1503, __n);
                }
                else
                {
                  v1490((uint64_t)v1502, (uint64_t)v1503, v1989);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1502, 0, 1, v1989);
                }
                v1505 = (void *)(((unint64_t)v1502 + v1986) & 0xFFFFFFFFFFFFFFF8);
                v1506 = (void *)(((unint64_t)v1503 + v1986) & 0xFFFFFFFFFFFFFFF8);
                void *v1505 = *v1506;
                unint64_t v1507 = ((unint64_t)v1505 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1508 = ((unint64_t)v1506 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1509 = *(void *)v1508;
                *(unsigned char *)(v1507 + 8) = *(unsigned char *)(v1508 + 8);
                *(void *)unint64_t v1507 = v1509;
                v1510 = (void *)(((unint64_t)v1505 + 31) & 0xFFFFFFFFFFFFFFF8);
                v1511 = (void *)(((unint64_t)v1506 + 31) & 0xFFFFFFFFFFFFFFF8);
                void *v1510 = *v1511;
                unint64_t v1512 = ((unint64_t)v1510 + 15) & 0xFFFFFFFFFFFFFFF8;
                v1513 = (uint64_t *)(((unint64_t)v1511 + 15) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1514 = v1513[1];
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if ((v1514 & 0x3000000000000000) != 0)
                {
                  *(_OWORD *)unint64_t v1512 = *(_OWORD *)v1513;
                }
                else
                {
                  uint64_t v1515 = *v1513;
                  sub_24D3F9C18(*v1513, v1514);
                  *(void *)unint64_t v1512 = v1515;
                  *(void *)(v1512 + 8) = v1514;
                }
                unint64_t v1516 = (v1512 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1517 = ((unint64_t)v1513 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1518 = *(void *)v1517;
                *(unsigned char *)(v1516 + 8) = *(unsigned char *)(v1517 + 8);
                *(void *)unint64_t v1516 = v1518;
                *(unsigned char *)(v1516 + 9) = *(unsigned char *)(v1517 + 9);
                unint64_t v1519 = (v1516 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1520 = (v1517 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                int v1521 = *(_DWORD *)v1520;
                *(unsigned char *)(v1519 + 4) = *(unsigned char *)(v1520 + 4);
                *(_DWORD *)unint64_t v1519 = v1521;
                v1522 = (void *)((v1516 + 25) & 0xFFFFFFFFFFFFFFF8);
                v1523 = (void *)((v1517 + 25) & 0xFFFFFFFFFFFFFFF8);
                void *v1522 = *v1523;
                v1522[1] = v1523[1];
                unint64_t v1524 = v2103 + v2044;
                v1525 = (long long *)(v2059 + v2044);
                unint64_t v1526 = *(void *)(v2059 + v2044 + 16);
                if (v1526 >= 0xFFFFFFFF) {
                  LODWORD(v1526) = -1;
                }
                int v1527 = v1526 - 1;
                swift_bridgeObjectRetain();
                if (v1527 < 0)
                {
                  *(void *)unint64_t v1524 = *(void *)v1525;
                  *(unsigned char *)(v1524 + 8) = *((unsigned char *)v1525 + 8);
                  *(unsigned char *)(v1524 + 9) = *((unsigned char *)v1525 + 9);
                  v1541 = (void *)*((void *)v1525 + 2);
                  id v1542 = v1541;
                  *(void *)(v1524 + 16) = v1541;
                  v1543 = (void *)*((void *)v1525 + 3);
                  id v1544 = v1543;
                  *(void *)(v1524 + 24) = v1543;
                  *(unsigned char *)(v1524 + 32) = *((unsigned char *)v1525 + 32);
                  *(unsigned char *)(v1524 + 33) = *((unsigned char *)v1525 + 33);
                  *(unsigned char *)(v1524 + 34) = *((unsigned char *)v1525 + 34);
                  *(void *)(v1524 + 40) = *((void *)v1525 + 5);
                  *(void *)(v1524 + 48) = *((void *)v1525 + 6);
                  *(void *)(v1524 + 56) = *((void *)v1525 + 7);
                  *(void *)(v1524 + 64) = *((void *)v1525 + 8);
                  *(unsigned char *)(v1524 + 72) = *((unsigned char *)v1525 + 72);
                  *(void *)(v1524 + 80) = *((void *)v1525 + 10);
                  *(void *)(v1524 + 88) = *((void *)v1525 + 11);
                  v2104 = (void *)*((void *)v1525 + 12);
                  *(void *)(v1524 + 96) = v2104;
                  *(unsigned char *)(v1524 + 104) = *((unsigned char *)v1525 + 104);
                  *(unsigned char *)(v1524 + 105) = *((unsigned char *)v1525 + 105);
                  *(void *)(v1524 + 112) = *((void *)v1525 + 14);
                  *(void *)(v1524 + 120) = *((void *)v1525 + 15);
                  *(void *)(v1524 + 128) = *((void *)v1525 + 16);
                  *(void *)(v1524 + 136) = *((void *)v1525 + 17);
                  *(void *)(v1524 + 144) = *((void *)v1525 + 18);
                  *(void *)(v1524 + 152) = *((void *)v1525 + 19);
                  *(void *)(v1524 + 160) = *((void *)v1525 + 20);
                  *(void *)(v1524 + 168) = *((void *)v1525 + 21);
                  *(unsigned char *)(v1524 + 176) = *((unsigned char *)v1525 + 176);
                  *(void *)(v1524 + 184) = *((void *)v1525 + 23);
                  uint64_t v1545 = *((void *)v1525 + 24);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  id v1546 = v2104;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v1545)
                  {
                    *(void *)(v1524 + 192) = v1545;
                    *(void *)(v1524 + 200) = *((void *)v1525 + 25);
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                  }
                  else
                  {
                    *(_OWORD *)(v1524 + 192) = v1525[12];
                  }
                  unint64_t v1540 = v2050;
                  unint64_t v1187 = v1943;
                  *(void *)(v1524 + 208) = *((void *)v1525 + 26);
                  *(void *)(v1524 + 216) = *((void *)v1525 + 27);
                  *(void *)(v1524 + 224) = *((void *)v1525 + 28);
                  *(void *)(v1524 + 232) = *((void *)v1525 + 29);
                  *(void *)(v1524 + 240) = *((void *)v1525 + 30);
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                }
                else
                {
                  long long v1528 = *v1525;
                  long long v1529 = v1525[1];
                  long long v1530 = v1525[3];
                  *(_OWORD *)(v1524 + 32) = v1525[2];
                  *(_OWORD *)(v1524 + 48) = v1530;
                  *(_OWORD *)unint64_t v1524 = v1528;
                  *(_OWORD *)(v1524 + 16) = v1529;
                  long long v1531 = v1525[4];
                  long long v1532 = v1525[5];
                  long long v1533 = v1525[7];
                  *(_OWORD *)(v1524 + 96) = v1525[6];
                  *(_OWORD *)(v1524 + 112) = v1533;
                  *(_OWORD *)(v1524 + 64) = v1531;
                  *(_OWORD *)(v1524 + 80) = v1532;
                  long long v1534 = v1525[8];
                  long long v1535 = v1525[9];
                  long long v1536 = v1525[11];
                  *(_OWORD *)(v1524 + 160) = v1525[10];
                  *(_OWORD *)(v1524 + 176) = v1536;
                  *(_OWORD *)(v1524 + 128) = v1534;
                  *(_OWORD *)(v1524 + 144) = v1535;
                  long long v1537 = v1525[12];
                  long long v1538 = v1525[13];
                  long long v1539 = v1525[14];
                  *(void *)(v1524 + 240) = *((void *)v1525 + 30);
                  *(_OWORD *)(v1524 + 208) = v1538;
                  *(_OWORD *)(v1524 + 224) = v1539;
                  *(_OWORD *)(v1524 + 192) = v1537;
                  unint64_t v1540 = v2050;
                }
                v1827 = (_OWORD *)((v1524 + 255) & 0xFFFFFFFFFFFFFFF8);
                v1828 = (long long *)(((unint64_t)v1525 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1829 = *v1828;
                *(_OWORD *)((char *)v1827 + 9) = *(long long *)((char *)v1828 + 9);
                _OWORD *v1827 = v1829;
                unint64_t v1830 = (v1524 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1831 = ((unint64_t)v1525 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1832 = *(_OWORD *)v1831;
                *(unsigned char *)(v1830 + 16) = *(unsigned char *)(v1831 + 16);
                *(_OWORD *)unint64_t v1830 = v1832;
                v1833 = (void *)((v1524 + 311) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1834 = ((unint64_t)v1525 + 311) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1835 = *(void *)v1834;
                v1834 += 15;
                void *v1833 = v1835;
                v1836 = (void *)(((unint64_t)v1833 + 15) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1837 = *(void *)(v1834 & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1838 = *(void *)((v1834 & 0xFFFFFFFFFFFFFFF8) + 8);
                sub_24D5203A8(v1837, v1838);
                void *v1836 = v1837;
                v1836[1] = v1838;
                size_t v1469 = v1993;
                unint64_t v302 = v1540;
                v1467 = v2043;
                v1468 = v2085;
                if (v1971) {
                  goto LABEL_1496;
                }
                goto LABEL_1405;
              }
              unint64_t v1187 = v1943;
              if (v1959 == v1967)
              {
                int v1185 = (*(uint64_t (**)(unint64_t))(v1979 + 48))((v1955 + v1233) & v1915);
              }
              else
              {
                v1297 = (unint64_t *)((v1987 + v1235) & 0xFFFFFFFFFFFFFFF8);
                if (v1951 <= 0x7FFFFFFE)
                {
                  unint64_t v1298 = *v1297;
                  if (v1298 >= 0xFFFFFFFF) {
                    LODWORD(v1298) = -1;
                  }
                  unint64_t v302 = v1181;
                  if ((v1298 + 1) >= 2) {
                    goto LABEL_1404;
                  }
                  goto LABEL_1407;
                }
                int v1185 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v1297 + v1981) & v86);
              }
            }
            uint64_t v1234 = v1915;
            goto LABEL_1402;
          case 4u:
            v1188 = a1;
            (*(void (**)(void *))(v2054 + 16))(a1);
            char v1189 = 4;
            goto LABEL_1213;
          case 5u:
            v1188 = a1;
            (*(void (**)(void *))(v2054 + 16))(a1);
            char v1189 = 5;
            goto LABEL_1213;
          case 6u:
            v1190 = v72;
            (*(void (**)(void *))(v2054 + 16))(a1);
            v1191 = (void *)(((unint64_t)a1 + v1930) & v1161);
            v1192 = (const void *)((unint64_t)&v1190[v1930] & v1161);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1932 + 48))(v1192, 1, v2015))
            {
              memcpy(v1191, v1192, v1928);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1932 + 16))(v1191, v1192, v2015);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1932 + 56))(v1191, 0, 1, v2015);
            }
            *((unsigned char *)a1 + v1943) = 6;
            goto LABEL_1497;
          case 7u:
            v1188 = a1;
            (*(void (**)(void *))(v2054 + 16))(a1);
            char v1189 = 7;
LABEL_1213:
            *((unsigned char *)v1188 + v1943) = v1189;
            goto LABEL_1497;
          default:
            unint64_t v1162 = v69;
            unint64_t v2032 = v38;
            size_t v1163 = v40;
            v1164 = *(void (**)(void *, const void *, uint64_t))(v2054 + 16);
            v1165 = v72;
            ((void (*)(void *))v1164)(a1);
            v2042 = (void *)(((unint64_t)a1 + v1937) & v301);
            v2084 = (const void *)((unint64_t)&v1165[v1937] & v301);
            if (v1957 == v1956)
            {
              int v1166 = (*(uint64_t (**)(void))(v2054 + 48))();
              uint64_t v1167 = ~v2003;
              unint64_t v1168 = v1943;
LABEL_1363:
              uint64_t v1229 = v1915;
LABEL_1364:
              unint64_t v302 = v1162;
              goto LABEL_1365;
            }
            unint64_t v1228 = (v1983 + ((unint64_t)&v1165[v1937] & v301)) & v2091;
            uint64_t v1229 = v1915;
            unint64_t v1230 = (v1955 + v1228) & v1915;
            uint64_t v1167 = ~v2003;
            if (v1967 == v1956)
            {
              unint64_t v1168 = v1943;
              if (v1959 == v1967)
              {
                int v1166 = (*(uint64_t (**)(unint64_t))(v1979 + 48))((v1955 + v1228) & v1915);
              }
              else
              {
                v1293 = (unint64_t *)((v1987 + v1230) & 0xFFFFFFFFFFFFFFF8);
                if (v1951 <= 0x7FFFFFFE)
                {
                  unint64_t v1294 = *v1293;
                  if (v1294 >= 0xFFFFFFFF) {
                    LODWORD(v1294) = -1;
                  }
                  unint64_t v302 = v1162;
                  if ((v1294 + 1) >= 2) {
                    goto LABEL_1366;
                  }
                  goto LABEL_1369;
                }
                int v1166 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v1293 + v1981) & v86);
              }
              goto LABEL_1363;
            }
            unint64_t v1257 = v1230 + v38;
            unint64_t v1168 = v1943;
            if ((v1941 & 0x80000000) == 0)
            {
              unint64_t v1258 = *(void *)(v1257 + 8);
              if (v1258 >= 0xFFFFFFFF) {
                LODWORD(v1258) = -1;
              }
              int v1166 = v1258 + 1;
              goto LABEL_1364;
            }
            uint64_t v1305 = (v1992 + ((v2045 + v1257) & v2013)) & v2069;
            unint64_t v302 = v1162;
            if (v1971 <= 0x7FFFFFFD)
            {
              unint64_t v1910 = *(void *)(((v1939 + ((v1988 + v1305) & v2069)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1910 >= 0xFFFFFFFF) {
                LODWORD(v1910) = -1;
              }
              if ((v1910 + 1) >= 2) {
                goto LABEL_1366;
              }
              goto LABEL_1369;
            }
            int v1166 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1990 + 48))(v1305, v1971, v1989);
            uint64_t v1229 = v1915;
LABEL_1365:
            if (v1166)
            {
LABEL_1366:
              v1311 = v2042;
              v1312 = v2084;
              memcpy(v2042, v2084, v1163);
LABEL_1367:
              size_t v1313 = __n;
              goto LABEL_1473;
            }
            unint64_t v1228 = ((unint64_t)v2084 + v1983) & v2091;
            unint64_t v1230 = (v1955 + v1228) & v1229;
LABEL_1369:
            unint64_t v2048 = v302;
            uint64_t v1314 = v1229;
            v1164(v2042, v2084, v1996);
            uint64_t v1315 = v1167;
            unint64_t v1316 = ((unint64_t)v2042 + v1983) & v2091;
            v1164((void *)v1316, (const void *)v1228, v1996);
            unint64_t v1317 = (v1955 + v1316) & v1314;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1979 + 16))(v1317, v1230, v1978);
            v1318 = (void *)((v1987 + v1317) & 0xFFFFFFFFFFFFFFF8);
            v1319 = (void *)((v1987 + v1230) & 0xFFFFFFFFFFFFFFF8);
            void *v1318 = *v1319;
            unint64_t v1320 = ((unint64_t)v1318 + v1981) & v86;
            unint64_t v1321 = ((unint64_t)v1319 + v1981) & v86;
            v1322 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
            swift_bridgeObjectRetain();
            v1322(v1320, v1321, v1975);
            v1323 = (void *)((v1969 + v1321) & 0xFFFFFFFFFFFFFFF8);
            v1324 = (void *)((v1969 + v1320) & 0xFFFFFFFFFFFFFFF8);
            void *v1324 = *v1323;
            v1325 = (void *)(((unint64_t)v1324 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1326 = (void *)(((unint64_t)v1323 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1325 = *v1326;
            v1325[1] = v1326[1];
            v1327 = (void *)(v1317 + v2032);
            void *v1327 = *(void *)(v1230 + v2032);
            v1327[1] = *(void *)(v1230 + v2032 + 8);
            uint64_t v1328 = (v2045 + v1317 + v2032) & v2013;
            uint64_t v1329 = (v2045 + v1230 + v2032) & v2013;
            *(unsigned char *)uint64_t v1328 = *(unsigned char *)v1329;
            uint64_t v1330 = v1328 | 4;
            int v1331 = *(_DWORD *)(v1329 | 4);
            *(unsigned char *)(v1330 + 4) = *(unsigned char *)((v1329 | 4) + 4);
            *(_DWORD *)uint64_t v1330 = v1331;
            *(_WORD *)(v1328 + 10) = *(_WORD *)(v1329 + 0xA);
            uint64_t v2099 = v1328;
            uint64_t v1332 = (v1992 + v1328) & v1315;
            uint64_t v2056 = v1329;
            uint64_t v1333 = (v1992 + v1329) & v1315;
            v1334 = *(void (**)(uint64_t, uint64_t, uint64_t))(v1990 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1334(v1332, v1333, v1989);
            uint64_t v1335 = (v1988 + v1332) & v1315;
            uint64_t v1336 = (v1988 + v1333) & v1315;
            v1334(v1335, v1336, v1989);
            v1337 = (unsigned char *)(v1335 + v1993);
            unsigned char *v1337 = *(unsigned char *)(v1336 + v1993);
            v1337[1] = *(unsigned char *)(v1336 + v1993 + 1);
            v1337[2] = *(unsigned char *)(v1336 + v1993 + 2);
            v1337[3] = *(unsigned char *)(v1336 + v1993 + 3);
            v1337[4] = *(unsigned char *)(v1336 + v1993 + 4);
            unint64_t v1338 = (v1335 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1339 = (v1336 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1338 = *(void *)v1339;
            *(void *)(v1338 + 8) = *(void *)(v1339 + 8);
            *(unsigned char *)(v1338 + 16) = *(unsigned char *)(v1339 + 16);
            *(unsigned char *)(v1338 + 17) = *(unsigned char *)(v1339 + 17);
            *(unsigned char *)(v1338 + 18) = *(unsigned char *)(v1339 + 18);
            *(unsigned char *)(v1338 + 19) = *(unsigned char *)(v1339 + 19);
            unint64_t v1340 = (v1338 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1341 = (v1339 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1340 = *(void *)v1341;
            *(unsigned char *)(v1340 + 8) = *(unsigned char *)(v1341 + 8);
            *(unsigned char *)(v1340 + 9) = *(unsigned char *)(v1341 + 9);
            *(unsigned char *)(v1340 + 10) = *(unsigned char *)(v1341 + 10);
            *(unsigned char *)(v1340 + 11) = *(unsigned char *)(v1341 + 11);
            *(unsigned char *)(v1340 + 12) = *(unsigned char *)(v1341 + 12);
            v1342 = (void *)((v1339 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1343 = (void *)((v1338 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1343 = *v1342;
            unint64_t v1344 = ((unint64_t)v1343 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1345 = ((unint64_t)v1342 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1344 = *(void *)v1345;
            *(unsigned char *)(v1344 + 8) = *(unsigned char *)(v1345 + 8);
            *(unsigned char *)(v1344 + 9) = *(unsigned char *)(v1345 + 9);
            v1346 = (void *)((v1985 + v1344) & v1315);
            v1347 = (const void *)((v1985 + v1345) & v1315);
            v1348 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
            swift_bridgeObjectRetain();
            if (v1348(v1347, 1, v1989))
            {
              memcpy(v1346, v1347, __n);
            }
            else
            {
              v1334((uint64_t)v1346, (uint64_t)v1347, v1989);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1346, 0, 1, v1989);
            }
            v1349 = (void *)(((unint64_t)v1346 + v1986) & 0xFFFFFFFFFFFFFFF8);
            v1350 = (void *)(((unint64_t)v1347 + v1986) & 0xFFFFFFFFFFFFFFF8);
            void *v1349 = *v1350;
            unint64_t v1351 = ((unint64_t)v1349 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1352 = ((unint64_t)v1350 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1353 = *(void *)v1352;
            *(unsigned char *)(v1351 + 8) = *(unsigned char *)(v1352 + 8);
            *(void *)unint64_t v1351 = v1353;
            v1354 = (void *)(((unint64_t)v1349 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1355 = (void *)(((unint64_t)v1350 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1354 = *v1355;
            unint64_t v1356 = ((unint64_t)v1354 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1357 = (uint64_t *)(((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1358 = v1357[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if ((v1358 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1356 = *(_OWORD *)v1357;
            }
            else
            {
              uint64_t v1359 = *v1357;
              sub_24D3F9C18(*v1357, v1358);
              *(void *)unint64_t v1356 = v1359;
              *(void *)(v1356 + 8) = v1358;
            }
            unint64_t v1360 = (v1356 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1361 = ((unint64_t)v1357 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1362 = *(void *)v1361;
            *(unsigned char *)(v1360 + 8) = *(unsigned char *)(v1361 + 8);
            *(void *)unint64_t v1360 = v1362;
            *(unsigned char *)(v1360 + 9) = *(unsigned char *)(v1361 + 9);
            unint64_t v1363 = (v1360 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1364 = (v1361 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1365 = *(_DWORD *)v1364;
            *(unsigned char *)(v1363 + 4) = *(unsigned char *)(v1364 + 4);
            *(_DWORD *)unint64_t v1363 = v1365;
            v1366 = (void *)((v1360 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1367 = (void *)((v1361 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1366 = *v1367;
            v1366[1] = v1367[1];
            unint64_t v1368 = v2099 + v2044;
            v1369 = (long long *)(v2056 + v2044);
            unint64_t v1370 = *(void *)(v2056 + v2044 + 16);
            if (v1370 >= 0xFFFFFFFF) {
              LODWORD(v1370) = -1;
            }
            int v1371 = v1370 - 1;
            swift_bridgeObjectRetain();
            if (v1371 < 0)
            {
              *(void *)unint64_t v1368 = *(void *)v1369;
              *(unsigned char *)(v1368 + 8) = *((unsigned char *)v1369 + 8);
              *(unsigned char *)(v1368 + 9) = *((unsigned char *)v1369 + 9);
              v1385 = (void *)*((void *)v1369 + 2);
              id v1386 = v1385;
              *(void *)(v1368 + 16) = v1385;
              v1387 = (void *)*((void *)v1369 + 3);
              id v1388 = v1387;
              *(void *)(v1368 + 24) = v1387;
              *(unsigned char *)(v1368 + 32) = *((unsigned char *)v1369 + 32);
              *(unsigned char *)(v1368 + 33) = *((unsigned char *)v1369 + 33);
              *(unsigned char *)(v1368 + 34) = *((unsigned char *)v1369 + 34);
              *(void *)(v1368 + 40) = *((void *)v1369 + 5);
              *(void *)(v1368 + 48) = *((void *)v1369 + 6);
              *(void *)(v1368 + 56) = *((void *)v1369 + 7);
              *(void *)(v1368 + 64) = *((void *)v1369 + 8);
              *(unsigned char *)(v1368 + 72) = *((unsigned char *)v1369 + 72);
              *(void *)(v1368 + 80) = *((void *)v1369 + 10);
              *(void *)(v1368 + 88) = *((void *)v1369 + 11);
              v2100 = (void *)*((void *)v1369 + 12);
              *(void *)(v1368 + 96) = v2100;
              *(unsigned char *)(v1368 + 104) = *((unsigned char *)v1369 + 104);
              *(unsigned char *)(v1368 + 105) = *((unsigned char *)v1369 + 105);
              *(void *)(v1368 + 112) = *((void *)v1369 + 14);
              *(void *)(v1368 + 120) = *((void *)v1369 + 15);
              *(void *)(v1368 + 128) = *((void *)v1369 + 16);
              *(void *)(v1368 + 136) = *((void *)v1369 + 17);
              *(void *)(v1368 + 144) = *((void *)v1369 + 18);
              *(void *)(v1368 + 152) = *((void *)v1369 + 19);
              *(void *)(v1368 + 160) = *((void *)v1369 + 20);
              *(void *)(v1368 + 168) = *((void *)v1369 + 21);
              *(unsigned char *)(v1368 + 176) = *((unsigned char *)v1369 + 176);
              *(void *)(v1368 + 184) = *((void *)v1369 + 23);
              uint64_t v1389 = *((void *)v1369 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1390 = v2100;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1389)
              {
                *(void *)(v1368 + 192) = v1389;
                *(void *)(v1368 + 200) = *((void *)v1369 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1368 + 192) = v1369[12];
              }
              unint64_t v1384 = v2048;
              unint64_t v1168 = v1943;
              *(void *)(v1368 + 208) = *((void *)v1369 + 26);
              *(void *)(v1368 + 216) = *((void *)v1369 + 27);
              *(void *)(v1368 + 224) = *((void *)v1369 + 28);
              *(void *)(v1368 + 232) = *((void *)v1369 + 29);
              *(void *)(v1368 + 240) = *((void *)v1369 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1372 = *v1369;
              long long v1373 = v1369[1];
              long long v1374 = v1369[3];
              *(_OWORD *)(v1368 + 32) = v1369[2];
              *(_OWORD *)(v1368 + 48) = v1374;
              *(_OWORD *)unint64_t v1368 = v1372;
              *(_OWORD *)(v1368 + 16) = v1373;
              long long v1375 = v1369[4];
              long long v1376 = v1369[5];
              long long v1377 = v1369[7];
              *(_OWORD *)(v1368 + 96) = v1369[6];
              *(_OWORD *)(v1368 + 112) = v1377;
              *(_OWORD *)(v1368 + 64) = v1375;
              *(_OWORD *)(v1368 + 80) = v1376;
              long long v1378 = v1369[8];
              long long v1379 = v1369[9];
              long long v1380 = v1369[11];
              *(_OWORD *)(v1368 + 160) = v1369[10];
              *(_OWORD *)(v1368 + 176) = v1380;
              *(_OWORD *)(v1368 + 128) = v1378;
              *(_OWORD *)(v1368 + 144) = v1379;
              long long v1381 = v1369[12];
              long long v1382 = v1369[13];
              long long v1383 = v1369[14];
              *(void *)(v1368 + 240) = *((void *)v1369 + 30);
              *(_OWORD *)(v1368 + 208) = v1382;
              *(_OWORD *)(v1368 + 224) = v1383;
              *(_OWORD *)(v1368 + 192) = v1381;
              unint64_t v1384 = v2048;
            }
            v1777 = (_OWORD *)((v1368 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1778 = (long long *)(((unint64_t)v1369 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1779 = *v1778;
            *(_OWORD *)((char *)v1777 + 9) = *(long long *)((char *)v1778 + 9);
            _OWORD *v1777 = v1779;
            unint64_t v1780 = (v1368 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1781 = ((unint64_t)v1369 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1782 = *(_OWORD *)v1781;
            *(unsigned char *)(v1780 + 16) = *(unsigned char *)(v1781 + 16);
            *(_OWORD *)unint64_t v1780 = v1782;
            v1783 = (void *)((v1368 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1784 = ((unint64_t)v1369 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1785 = *(void *)v1784;
            v1784 += 15;
            void *v1783 = v1785;
            v1786 = (void *)(((unint64_t)v1783 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1787 = *(void *)(v1784 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1788 = *(void *)((v1784 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_24D5203A8(v1787, v1788);
            void *v1786 = v1787;
            v1786[1] = v1788;
            size_t v1313 = v1993;
            unint64_t v302 = v1384;
            v1311 = v2042;
            v1312 = v2084;
            if (!v1971) {
              goto LABEL_1367;
            }
LABEL_1473:
            unint64_t v1789 = ((((v1953
                      + ((((((((((v1970 + v1313 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1790 = (void *)(((unint64_t)v1311 + v1789) & 0xFFFFFFFFFFFFFFF8);
            v1791 = (void *)(((unint64_t)v1312 + v1789) & 0xFFFFFFFFFFFFFFF8);
            void *v1790 = *v1791;
            v1792 = *(void **)(((unint64_t)v1791 + 15) & 0xFFFFFFFFFFFFFFF8);
            *(void *)(((unint64_t)v1790 + 15) & 0xFFFFFFFFFFFFFFF8) = v1792;
            *((unsigned char *)a1 + v1168) = 0;
            id v1793 = v1792;
LABEL_1497:
            char v1223 = 1;
            break;
        }
        goto LABEL_1498;
      }
      unsigned int v705 = v72[v1945];
      unsigned int v706 = v705 - 8;
      uint64_t v707 = v2054;
      if (v705 >= 8)
      {
        if (v1945 <= 3) {
          uint64_t v708 = v1945;
        }
        else {
          uint64_t v708 = 4;
        }
        switch(v708)
        {
          case 1:
            int v709 = *v72;
            goto LABEL_1217;
          case 2:
            int v709 = *(unsigned __int16 *)v72;
            goto LABEL_1217;
          case 3:
            int v709 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_1217;
          case 4:
            int v709 = *(_DWORD *)v72;
LABEL_1217:
            if (v1945 < 4) {
              unsigned int v705 = (v709 | (v706 << (8 * v1945))) + 8;
            }
            else {
              unsigned int v705 = v709 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1193 = ~v48;
      switch(v705)
      {
        case 1u:
          unint64_t v1202 = v69;
          uint64_t v2072 = ~v2003;
          size_t v2035 = v38;
          v1203 = *(void (**)(void *, const void *, uint64_t))(v1997 + 16);
          uint64_t v1204 = ~v33;
          v1205 = v72;
          ((void (*)(void *))v1203)(a1);
          v2086 = (void *)(((unint64_t)a1 + v1938) & v1204);
          v1206 = (const void *)((unint64_t)&v1205[v1938] & v1204);
          if (v2018 == v1965)
          {
            int v1207 = (*(uint64_t (**)(const void *))(v1997 + 48))(v1206);
            uint64_t v1208 = v2013;
            unint64_t v1209 = v1202;
            size_t v1210 = v1936;
LABEL_1437:
            if (v1207)
            {
LABEL_1438:
              v1624 = v2086;
              memcpy(v2086, v1206, v2037);
              uint64_t v1625 = v1925;
LABEL_1439:
              size_t v1626 = __n;
              goto LABEL_1512;
            }
            unint64_t v1238 = ((unint64_t)v1206 + v1984) & v306;
            unint64_t v1239 = (v1954 + v1238) & v2026;
LABEL_1441:
            unint64_t v2052 = v1209;
            v2039 = v1206;
            v1203(v2086, v1206, AssociatedTypeWitness);
            v1203((void *)(((unint64_t)v2086 + v1984) & v306), (const void *)v1238, AssociatedTypeWitness);
            unint64_t v1627 = (v1954 + (((unint64_t)v2086 + v1984) & v306)) & v2026;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v1627, v1239, v1976);
            v1628 = (void *)((v1982 + v1627) & 0xFFFFFFFFFFFFFFF8);
            v1629 = (void *)((v1982 + v1239) & 0xFFFFFFFFFFFFFFF8);
            void *v1628 = *v1629;
            unint64_t v1630 = ((unint64_t)v1628 + v1972) & v1917;
            unint64_t v1631 = ((unint64_t)v1629 + v1972) & v1917;
            v1632 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
            swift_bridgeObjectRetain();
            v1632(v1630, v1631, v1973);
            v1633 = (void *)((v1968 + v1631) & 0xFFFFFFFFFFFFFFF8);
            v1634 = (void *)((v1968 + v1630) & 0xFFFFFFFFFFFFFFF8);
            void *v1634 = *v1633;
            v1635 = (void *)(((unint64_t)v1634 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1636 = (void *)(((unint64_t)v1633 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1635 = *v1636;
            v1635[1] = v1636[1];
            v1637 = (void *)(v1627 + v2040);
            void *v1637 = *(void *)(v1239 + v2040);
            v1637[1] = *(void *)(v1239 + v2040 + 8);
            size_t v1638 = (v2045 + v1627 + v2040) & v1208;
            size_t v1639 = (v2045 + v1239 + v2040) & v1208;
            *(unsigned char *)size_t v1638 = *(unsigned char *)v1639;
            uint64_t v1640 = v1638 | 4;
            int v1641 = *(_DWORD *)(v1639 | 4);
            *(unsigned char *)(v1640 + 4) = *(unsigned char *)((v1639 | 4) + 4);
            *(_DWORD *)uint64_t v1640 = v1641;
            *(_WORD *)(v1638 + 10) = *(_WORD *)(v1639 + 0xA);
            size_t v1642 = (v1992 + v1638) & v2072;
            size_t v2046 = v1639;
            size_t v1643 = (v1992 + v1639) & v2072;
            v1644 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1644(v1642, v1643, v1989);
            size_t v1645 = (v1988 + v1642) & v2072;
            size_t v1646 = (v1988 + v1643) & v2072;
            v1644(v1645, v1646, v1989);
            v1647 = (unsigned char *)(v1645 + v1993);
            unsigned char *v1647 = *(unsigned char *)(v1646 + v1993);
            v1647[1] = *(unsigned char *)(v1646 + v1993 + 1);
            v1647[2] = *(unsigned char *)(v1646 + v1993 + 2);
            v1647[3] = *(unsigned char *)(v1646 + v1993 + 3);
            v1647[4] = *(unsigned char *)(v1646 + v1993 + 4);
            unint64_t v1648 = (v1645 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1649 = (v1646 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1648 = *(void *)v1649;
            *(void *)(v1648 + 8) = *(void *)(v1649 + 8);
            *(unsigned char *)(v1648 + 16) = *(unsigned char *)(v1649 + 16);
            *(unsigned char *)(v1648 + 17) = *(unsigned char *)(v1649 + 17);
            *(unsigned char *)(v1648 + 18) = *(unsigned char *)(v1649 + 18);
            *(unsigned char *)(v1648 + 19) = *(unsigned char *)(v1649 + 19);
            unint64_t v1650 = (v1648 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1651 = (v1649 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1650 = *(void *)v1651;
            *(unsigned char *)(v1650 + 8) = *(unsigned char *)(v1651 + 8);
            *(unsigned char *)(v1650 + 9) = *(unsigned char *)(v1651 + 9);
            *(unsigned char *)(v1650 + 10) = *(unsigned char *)(v1651 + 10);
            *(unsigned char *)(v1650 + 11) = *(unsigned char *)(v1651 + 11);
            *(unsigned char *)(v1650 + 12) = *(unsigned char *)(v1651 + 12);
            v1652 = (void *)((v1649 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1653 = (void *)((v1648 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1653 = *v1652;
            unint64_t v1654 = ((unint64_t)v1653 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1655 = ((unint64_t)v1652 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1654 = *(void *)v1655;
            *(unsigned char *)(v1654 + 8) = *(unsigned char *)(v1655 + 8);
            *(unsigned char *)(v1654 + 9) = *(unsigned char *)(v1655 + 9);
            v1656 = (void *)((v1985 + v1654) & v2072);
            v1657 = (const void *)((v1985 + v1655) & v2072);
            v1658 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
            swift_bridgeObjectRetain();
            if (v1658(v1657, 1, v1989))
            {
              memcpy(v1656, v1657, __n);
            }
            else
            {
              v1644((size_t)v1656, (size_t)v1657, v1989);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1656, 0, 1, v1989);
            }
            v1659 = (void *)(((unint64_t)v1656 + v1986) & 0xFFFFFFFFFFFFFFF8);
            v1660 = (void *)(((unint64_t)v1657 + v1986) & 0xFFFFFFFFFFFFFFF8);
            void *v1659 = *v1660;
            unint64_t v1661 = ((unint64_t)v1659 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1662 = ((unint64_t)v1660 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1663 = *(void *)v1662;
            *(unsigned char *)(v1661 + 8) = *(unsigned char *)(v1662 + 8);
            *(void *)unint64_t v1661 = v1663;
            v1664 = (void *)(((unint64_t)v1659 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1665 = (void *)(((unint64_t)v1660 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1664 = *v1665;
            unint64_t v1666 = ((unint64_t)v1664 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1667 = (uint64_t *)(((unint64_t)v1665 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1668 = v1667[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            size_t v1210 = v1936;
            if ((v1668 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1666 = *(_OWORD *)v1667;
            }
            else
            {
              uint64_t v1669 = *v1667;
              sub_24D3F9C18(*v1667, v1668);
              *(void *)unint64_t v1666 = v1669;
              *(void *)(v1666 + 8) = v1668;
            }
            unint64_t v1670 = (v1666 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1671 = ((unint64_t)v1667 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1672 = *(void *)v1671;
            *(unsigned char *)(v1670 + 8) = *(unsigned char *)(v1671 + 8);
            *(void *)unint64_t v1670 = v1672;
            *(unsigned char *)(v1670 + 9) = *(unsigned char *)(v1671 + 9);
            unint64_t v1673 = (v1670 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1674 = (v1671 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1675 = *(_DWORD *)v1674;
            *(unsigned char *)(v1673 + 4) = *(unsigned char *)(v1674 + 4);
            *(_DWORD *)unint64_t v1673 = v1675;
            v1676 = (void *)((v1670 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1677 = (void *)((v1671 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1676 = *v1677;
            v1676[1] = v1677[1];
            unint64_t v1678 = v2044 + v1638;
            v1679 = (long long *)(v2044 + v2046);
            unint64_t v1680 = *(void *)(v2044 + v2046 + 16);
            if (v1680 >= 0xFFFFFFFF) {
              LODWORD(v1680) = -1;
            }
            int v1681 = v1680 - 1;
            swift_bridgeObjectRetain();
            if (v1681 < 0)
            {
              *(void *)unint64_t v1678 = *(void *)v1679;
              *(unsigned char *)(v1678 + 8) = *((unsigned char *)v1679 + 8);
              *(unsigned char *)(v1678 + 9) = *((unsigned char *)v1679 + 9);
              v1694 = (void *)*((void *)v1679 + 2);
              id v1695 = v1694;
              *(void *)(v1678 + 16) = v1694;
              v1696 = (void *)*((void *)v1679 + 3);
              id v1697 = v1696;
              *(void *)(v1678 + 24) = v1696;
              *(unsigned char *)(v1678 + 32) = *((unsigned char *)v1679 + 32);
              *(unsigned char *)(v1678 + 33) = *((unsigned char *)v1679 + 33);
              *(unsigned char *)(v1678 + 34) = *((unsigned char *)v1679 + 34);
              *(void *)(v1678 + 40) = *((void *)v1679 + 5);
              *(void *)(v1678 + 48) = *((void *)v1679 + 6);
              *(void *)(v1678 + 56) = *((void *)v1679 + 7);
              *(void *)(v1678 + 64) = *((void *)v1679 + 8);
              *(unsigned char *)(v1678 + 72) = *((unsigned char *)v1679 + 72);
              *(void *)(v1678 + 80) = *((void *)v1679 + 10);
              *(void *)(v1678 + 88) = *((void *)v1679 + 11);
              v2075 = (void *)*((void *)v1679 + 12);
              *(void *)(v1678 + 96) = v2075;
              *(unsigned char *)(v1678 + 104) = *((unsigned char *)v1679 + 104);
              *(unsigned char *)(v1678 + 105) = *((unsigned char *)v1679 + 105);
              *(void *)(v1678 + 112) = *((void *)v1679 + 14);
              *(void *)(v1678 + 120) = *((void *)v1679 + 15);
              *(void *)(v1678 + 128) = *((void *)v1679 + 16);
              *(void *)(v1678 + 136) = *((void *)v1679 + 17);
              *(void *)(v1678 + 144) = *((void *)v1679 + 18);
              *(void *)(v1678 + 152) = *((void *)v1679 + 19);
              *(void *)(v1678 + 160) = *((void *)v1679 + 20);
              *(void *)(v1678 + 168) = *((void *)v1679 + 21);
              *(unsigned char *)(v1678 + 176) = *((unsigned char *)v1679 + 176);
              *(void *)(v1678 + 184) = *((void *)v1679 + 23);
              uint64_t v1698 = *((void *)v1679 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1699 = v2075;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1698)
              {
                *(void *)(v1678 + 192) = v1698;
                *(void *)(v1678 + 200) = *((void *)v1679 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1678 + 192) = v1679[12];
              }
              size_t v1210 = v1936;
              uint64_t v1625 = v1925;
              *(void *)(v1678 + 208) = *((void *)v1679 + 26);
              *(void *)(v1678 + 216) = *((void *)v1679 + 27);
              *(void *)(v1678 + 224) = *((void *)v1679 + 28);
              *(void *)(v1678 + 232) = *((void *)v1679 + 29);
              *(void *)(v1678 + 240) = *((void *)v1679 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1682 = *v1679;
              long long v1683 = v1679[1];
              long long v1684 = v1679[3];
              *(_OWORD *)(v1678 + 32) = v1679[2];
              *(_OWORD *)(v1678 + 48) = v1684;
              *(_OWORD *)unint64_t v1678 = v1682;
              *(_OWORD *)(v1678 + 16) = v1683;
              long long v1685 = v1679[4];
              long long v1686 = v1679[5];
              long long v1687 = v1679[7];
              *(_OWORD *)(v1678 + 96) = v1679[6];
              *(_OWORD *)(v1678 + 112) = v1687;
              *(_OWORD *)(v1678 + 64) = v1685;
              *(_OWORD *)(v1678 + 80) = v1686;
              long long v1688 = v1679[8];
              long long v1689 = v1679[9];
              long long v1690 = v1679[11];
              *(_OWORD *)(v1678 + 160) = v1679[10];
              *(_OWORD *)(v1678 + 176) = v1690;
              *(_OWORD *)(v1678 + 128) = v1688;
              *(_OWORD *)(v1678 + 144) = v1689;
              long long v1691 = v1679[12];
              long long v1692 = v1679[13];
              long long v1693 = v1679[14];
              *(void *)(v1678 + 240) = *((void *)v1679 + 30);
              *(_OWORD *)(v1678 + 208) = v1692;
              *(_OWORD *)(v1678 + 224) = v1693;
              *(_OWORD *)(v1678 + 192) = v1691;
              uint64_t v1625 = v1925;
            }
            v1860 = (_OWORD *)((v1678 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1861 = (long long *)(((unint64_t)v1679 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1862 = *v1861;
            *(_OWORD *)((char *)v1860 + 9) = *(long long *)((char *)v1861 + 9);
            _OWORD *v1860 = v1862;
            unint64_t v1863 = (v1678 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1864 = ((unint64_t)v1679 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1865 = *(_OWORD *)v1864;
            *(unsigned char *)(v1863 + 16) = *(unsigned char *)(v1864 + 16);
            *(_OWORD *)unint64_t v1863 = v1865;
            v1866 = (void *)((v1678 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1867 = ((unint64_t)v1679 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1868 = *(void *)v1867;
            v1867 += 15;
            void *v1866 = v1868;
            v1869 = (void *)(((unint64_t)v1866 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1870 = *(void *)(v1867 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1871 = *(void *)((v1867 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_24D5203A8(v1870, v1871);
            void *v1869 = v1870;
            v1869[1] = v1871;
            size_t v1626 = v1993;
            unint64_t v1209 = v2052;
            uint64_t v707 = v2054;
            v1206 = v2039;
            v1624 = v2086;
            if (!v1971) {
              goto LABEL_1439;
            }
LABEL_1512:
            unint64_t v1872 = ((((v1964
                      + ((((((((((v1970 + v1626 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            v1873 = (void *)(((unint64_t)v1624 + v2017 + v1872) & v2091);
            v1874 = (const void *)(((unint64_t)v1206 + v2017 + v1872) & v2091);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v707 + 48))(v1874, 1, v1996))
            {
              memcpy(v1873, v1874, v1210);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v707 + 16))(v1873, v1874, v1996);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v707 + 56))(v1873, 0, 1, v1996);
            }
            unint64_t v1875 = v1209;
            v1876 = (char *)(((unint64_t)v1873 + v1625) & v1915);
            v1877 = (char *)(((unint64_t)v1874 + v1625) & v1915);
            if (v1959 == v1967)
            {
              int v1878 = (*(uint64_t (**)(unint64_t))(v1979 + 48))(((unint64_t)v1874 + v1625) & v1915);
            }
            else
            {
              uint64_t v1879 = v1987;
              v1880 = (uint64_t *)((unint64_t)&v1877[v1987] & 0xFFFFFFFFFFFFFFF8);
              if (v1951 <= 0x7FFFFFFE)
              {
                uint64_t v1881 = *v1880;
                if ((unint64_t)*v1880 >= 0xFFFFFFFF) {
                  LODWORD(v1881) = -1;
                }
                if ((v1881 + 1) >= 2) {
                  goto LABEL_1524;
                }
                goto LABEL_1526;
              }
              int v1878 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v1880 + v1981) & v86);
            }
            uint64_t v1879 = v1987;
            if (v1878)
            {
LABEL_1524:
              size_t v1882 = v2035;
              memcpy(v1876, v1877, v2035);
              uint64_t v1244 = v2063;
LABEL_1527:
              unint64_t v302 = v1875;
              *(void *)&v1876[v1882] = *(void *)&v1877[v1882];
              v1892 = (void *)((unint64_t)&v1876[v1882 + 15] & 0xFFFFFFFFFFFFFFF8);
              v1893 = (void *)((unint64_t)&v1877[v1882 + 15] & 0xFFFFFFFFFFFFFFF8);
              void *v1892 = *v1893;
              v1291 = *(void **)(((unint64_t)v1893 + 15) & 0xFFFFFFFFFFFFFFF8);
              *(void *)(((unint64_t)v1892 + 15) & 0xFFFFFFFFFFFFFFF8) = v1291;
              char v1292 = 1;
LABEL_1528:
              *((unsigned char *)a1 + v1945) = v1292;
              id v1894 = v1291;
              char v1223 = 0;
              goto LABEL_1499;
            }
            v1880 = (uint64_t *)((unint64_t)&v1877[v1987] & 0xFFFFFFFFFFFFFFF8);
LABEL_1526:
            uint64_t v1883 = v1879;
            (*(void (**)(char *, char *, uint64_t))(v1979 + 16))(v1876, v1877, v1978);
            v1884 = (void *)((unint64_t)&v1876[v1883] & 0xFFFFFFFFFFFFFFF8);
            void *v1884 = *v1880;
            unint64_t v1885 = ((unint64_t)v1884 + v1981) & v86;
            unint64_t v1886 = ((unint64_t)v1880 + v1981) & v86;
            v1887 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
            swift_bridgeObjectRetain();
            v1887(v1885, v1886, v1975);
            v1888 = (void *)((v1969 + v1885) & 0xFFFFFFFFFFFFFFF8);
            v1889 = (void *)((v1969 + v1886) & 0xFFFFFFFFFFFFFFF8);
            void *v1888 = *v1889;
            v1890 = (void *)(((unint64_t)v1888 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1891 = (void *)(((unint64_t)v1889 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1890 = *v1891;
            v1890[1] = v1891[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v1244 = v2063;
            size_t v1882 = v2035;
            goto LABEL_1527;
          }
          unint64_t v1238 = ((unint64_t)v1206 + v1984) & v306;
          unint64_t v1239 = (v1954 + v1238) & v2026;
          uint64_t v1208 = v2013;
          if (v1966 == v1965)
          {
            unint64_t v1209 = v1202;
            if (v1958 == v1966)
            {
              int v1207 = (*(uint64_t (**)(unint64_t))(v1977 + 48))((v1954 + v1238) & v2026);
              size_t v1210 = v1936;
              goto LABEL_1437;
            }
            v1301 = (unint64_t *)((v1982 + v1239) & 0xFFFFFFFFFFFFFFF8);
            size_t v1210 = v1936;
            if (v1944 > 0x7FFFFFFE)
            {
              int v1207 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1974 + 48))(((unint64_t)v1301 + v1972) & v1917, v1940, v1973);
              goto LABEL_1437;
            }
            unint64_t v1302 = *v1301;
          }
          else
          {
            size_t v1265 = v1239 + v2040;
            unint64_t v1209 = v1202;
            if ((v1942 & 0x80000000) == 0)
            {
              unint64_t v1266 = *(void *)(v1265 + 8);
              if (v1266 >= 0xFFFFFFFF) {
                LODWORD(v1266) = -1;
              }
              int v1207 = v1266 + 1;
              size_t v1210 = v1936;
              goto LABEL_1437;
            }
            uint64_t v1309 = (v1992 + ((v2045 + v1265) & v2013)) & v2072;
            size_t v1210 = v1936;
            if (v1971 > 0x7FFFFFFD)
            {
              int v1207 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1990 + 48))(v1309, v1971, v1989);
              goto LABEL_1437;
            }
            unint64_t v1302 = *(void *)(((v1939 + ((v1988 + v1309) & v2072)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1302 >= 0xFFFFFFFF) {
            LODWORD(v1302) = -1;
          }
          if ((v1302 + 1) >= 2) {
            goto LABEL_1438;
          }
          goto LABEL_1441;
        case 2u:
          size_t v2036 = v38;
          v1211 = v72;
          (*(void (**)(void *))(v1997 + 16))(a1);
          v1212 = (void *)(((unint64_t)a1 + v1963) & v2091);
          v1213 = (const void *)((unint64_t)&v1211[v1963] & v2091);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2054 + 48))(v1213, 1, v1996))
          {
            memcpy(v1212, v1213, v1936);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v2054 + 16))(v1212, v1213, v1996);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v2054 + 56))(v1212, 0, 1, v1996);
          }
          unint64_t v1250 = v302;
          uint64_t v1244 = v2063;
          v1251 = (char *)(((unint64_t)v1212 + v1925) & v1915);
          v1252 = (char *)(((unint64_t)v1213 + v1925) & v1915);
          if (v1959 == v1967)
          {
            int v1253 = (*(uint64_t (**)(char *))(v1979 + 48))(v1252);
          }
          else
          {
            v1254 = (uint64_t *)((unint64_t)&v1252[v1987] & 0xFFFFFFFFFFFFFFF8);
            if (v1951 <= 0x7FFFFFFE)
            {
              uint64_t v1255 = v1987;
              uint64_t v1256 = *v1254;
              if ((unint64_t)*v1254 >= 0xFFFFFFFF) {
                LODWORD(v1256) = -1;
              }
              if ((v1256 + 1) >= 2) {
                goto LABEL_1325;
              }
              goto LABEL_1327;
            }
            int v1253 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v1254 + v1981) & v86);
          }
          if (v1253)
          {
LABEL_1325:
            size_t v1280 = v2036;
            memcpy(v1251, v1252, v2036);
            goto LABEL_1328;
          }
          uint64_t v1255 = v1987;
          v1254 = (uint64_t *)((unint64_t)&v1252[v1987] & 0xFFFFFFFFFFFFFFF8);
LABEL_1327:
          uint64_t v1281 = v1255;
          (*(void (**)(char *, char *, uint64_t))(v1979 + 16))(v1251, v1252, v1978);
          v1282 = (void *)((unint64_t)&v1251[v1281] & 0xFFFFFFFFFFFFFFF8);
          void *v1282 = *v1254;
          unint64_t v1283 = ((unint64_t)v1282 + v1981) & v86;
          unint64_t v1284 = ((unint64_t)v1254 + v1981) & v86;
          v1285 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
          swift_bridgeObjectRetain();
          v1285(v1283, v1284, v1975);
          v1286 = (void *)((v1969 + v1283) & 0xFFFFFFFFFFFFFFF8);
          v1287 = (void *)((v1969 + v1284) & 0xFFFFFFFFFFFFFFF8);
          void *v1286 = *v1287;
          v1288 = (void *)(((unint64_t)v1286 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1289 = (void *)(((unint64_t)v1287 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1288 = *v1289;
          v1288[1] = v1289[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          size_t v1280 = v2036;
LABEL_1328:
          unint64_t v302 = v1250;
          v1290 = &v1251[v1280];
          char *v1290 = v1252[v1280];
          v1291 = *(void **)&v1252[v1280 + 8];
          *((void *)v1290 + 1) = v1291;
          char v1292 = 2;
          goto LABEL_1528;
        case 3u:
          uint64_t v2073 = ~v2003;
          v1214 = *(void (**)(void *, const void *, uint64_t))(v1997 + 16);
          uint64_t v1215 = ~v33;
          v1216 = v72;
          ((void (*)(void *))v1214)(a1);
          v1217 = (void *)(((unint64_t)a1 + v1938) & v1215);
          v1218 = (const void *)((unint64_t)&v1216[v1938] & v1215);
          if (v2018 == v1965)
          {
            int v1219 = (*(uint64_t (**)(unint64_t))(v1997 + 48))((unint64_t)&v1216[v1938] & v1215);
            uint64_t v1220 = v2013;
            uint64_t v1221 = v1954;
LABEL_1454:
            if (v1219)
            {
LABEL_1455:
              memcpy(v1217, v1218, v2037);
LABEL_1456:
              size_t v1700 = __n;
              goto LABEL_1532;
            }
            unint64_t v1240 = ((unint64_t)v1218 + v1984) & v306;
            unint64_t v1241 = (v1221 + v1240) & v2026;
            goto LABEL_1458;
          }
          unint64_t v1240 = ((unint64_t)v1218 + v1984) & v306;
          uint64_t v1221 = v1954;
          unint64_t v1241 = (v1954 + v1240) & v2026;
          uint64_t v1220 = v2013;
          if (v1966 == v1965)
          {
            if (v1958 == v1966)
            {
              int v1219 = (*(uint64_t (**)(unint64_t))(v1977 + 48))((v1954 + v1240) & v2026);
              goto LABEL_1454;
            }
            v1303 = (unint64_t *)((v1982 + v1241) & 0xFFFFFFFFFFFFFFF8);
            if (v1944 > 0x7FFFFFFE)
            {
              int v1219 = (*(uint64_t (**)(unint64_t))(v1974 + 48))(((unint64_t)v1303 + v1972) & v1917);
              goto LABEL_1454;
            }
            unint64_t v1304 = *v1303;
          }
          else
          {
            size_t v1267 = v1241 + v2040;
            if ((v1942 & 0x80000000) == 0)
            {
              unint64_t v1268 = *(void *)(v1267 + 8);
              if (v1268 >= 0xFFFFFFFF) {
                LODWORD(v1268) = -1;
              }
              int v1219 = v1268 + 1;
              goto LABEL_1454;
            }
            uint64_t v1310 = (v1992 + ((v2045 + v1267) & v2013)) & v2073;
            if (v1971 > 0x7FFFFFFD)
            {
              int v1219 = (*(uint64_t (**)(uint64_t))(v1990 + 48))(v1310);
              goto LABEL_1454;
            }
            unint64_t v1304 = *(void *)(((v1939 + ((v1988 + v1310) & v2073)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1304 >= 0xFFFFFFFF) {
            LODWORD(v1304) = -1;
          }
          if ((v1304 + 1) >= 2) {
            goto LABEL_1455;
          }
LABEL_1458:
          unint64_t v2053 = v302;
          v1214(v1217, v1218, AssociatedTypeWitness);
          v2106 = v1217;
          unint64_t v1701 = ((unint64_t)v1217 + v1984) & v306;
          v1214((void *)v1701, (const void *)v1240, AssociatedTypeWitness);
          unint64_t v1702 = (v1221 + v1701) & v2026;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v1702, v1241, v1976);
          v1703 = (void *)((v1982 + v1702) & 0xFFFFFFFFFFFFFFF8);
          v1704 = (void *)((v1982 + v1241) & 0xFFFFFFFFFFFFFFF8);
          void *v1703 = *v1704;
          unint64_t v1705 = ((unint64_t)v1703 + v1972) & v1917;
          uint64_t v1706 = v1220;
          unint64_t v1707 = ((unint64_t)v1704 + v1972) & v1917;
          v1708 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
          swift_bridgeObjectRetain();
          v1708(v1705, v1707, v1973);
          v1709 = (void *)((v1968 + v1707) & 0xFFFFFFFFFFFFFFF8);
          v1710 = (void *)((v1968 + v1705) & 0xFFFFFFFFFFFFFFF8);
          void *v1710 = *v1709;
          v1711 = (void *)(((unint64_t)v1710 + 15) & 0xFFFFFFFFFFFFFFF8);
          v1712 = (void *)(((unint64_t)v1709 + 15) & 0xFFFFFFFFFFFFFFF8);
          void *v1711 = *v1712;
          v1711[1] = v1712[1];
          v1713 = (void *)(v1702 + v2040);
          void *v1713 = *(void *)(v1241 + v2040);
          v1713[1] = *(void *)(v1241 + v2040 + 8);
          size_t v1714 = (v2045 + v1702 + v2040) & v1706;
          size_t v1715 = (v2045 + v1241 + v2040) & v1706;
          *(unsigned char *)size_t v1714 = *(unsigned char *)v1715;
          uint64_t v1716 = v1714 | 4;
          int v1717 = *(_DWORD *)(v1715 | 4);
          *(unsigned char *)(v1716 + 4) = *(unsigned char *)((v1715 | 4) + 4);
          *(_DWORD *)uint64_t v1716 = v1717;
          *(_WORD *)(v1714 + 10) = *(_WORD *)(v1715 + 0xA);
          size_t v1718 = (v1992 + v1714) & v2073;
          size_t v2061 = v1715;
          size_t v1719 = (v1992 + v1715) & v2073;
          v1720 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1720(v1718, v1719, v1989);
          size_t v1721 = (v1988 + v1718) & v2073;
          size_t v1722 = (v1988 + v1719) & v2073;
          v1720(v1721, v1722, v1989);
          v1723 = (unsigned char *)(v1721 + v1993);
          unsigned char *v1723 = *(unsigned char *)(v1722 + v1993);
          v1723[1] = *(unsigned char *)(v1722 + v1993 + 1);
          v1723[2] = *(unsigned char *)(v1722 + v1993 + 2);
          v1723[3] = *(unsigned char *)(v1722 + v1993 + 3);
          v1723[4] = *(unsigned char *)(v1722 + v1993 + 4);
          unint64_t v1724 = (v1721 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1725 = (v1722 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1724 = *(void *)v1725;
          *(void *)(v1724 + 8) = *(void *)(v1725 + 8);
          *(unsigned char *)(v1724 + 16) = *(unsigned char *)(v1725 + 16);
          *(unsigned char *)(v1724 + 17) = *(unsigned char *)(v1725 + 17);
          *(unsigned char *)(v1724 + 18) = *(unsigned char *)(v1725 + 18);
          *(unsigned char *)(v1724 + 19) = *(unsigned char *)(v1725 + 19);
          unint64_t v1726 = (v1724 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1727 = (v1725 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1726 = *(void *)v1727;
          *(unsigned char *)(v1726 + 8) = *(unsigned char *)(v1727 + 8);
          *(unsigned char *)(v1726 + 9) = *(unsigned char *)(v1727 + 9);
          *(unsigned char *)(v1726 + 10) = *(unsigned char *)(v1727 + 10);
          *(unsigned char *)(v1726 + 11) = *(unsigned char *)(v1727 + 11);
          *(unsigned char *)(v1726 + 12) = *(unsigned char *)(v1727 + 12);
          v1728 = (void *)((v1725 + 47) & 0xFFFFFFFFFFFFFFF8);
          v1729 = (void *)((v1724 + 47) & 0xFFFFFFFFFFFFFFF8);
          void *v1729 = *v1728;
          unint64_t v1730 = ((unint64_t)v1729 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1731 = ((unint64_t)v1728 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v1730 = *(void *)v1731;
          *(unsigned char *)(v1730 + 8) = *(unsigned char *)(v1731 + 8);
          *(unsigned char *)(v1730 + 9) = *(unsigned char *)(v1731 + 9);
          v1732 = (void *)((v1985 + v1730) & v2073);
          v1733 = (const void *)((v1985 + v1731) & v2073);
          v1734 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
          swift_bridgeObjectRetain();
          if (v1734(v1733, 1, v1989))
          {
            memcpy(v1732, v1733, __n);
          }
          else
          {
            v1720((size_t)v1732, (size_t)v1733, v1989);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1732, 0, 1, v1989);
          }
          v1735 = (void *)(((unint64_t)v1732 + v1986) & 0xFFFFFFFFFFFFFFF8);
          v1736 = (void *)(((unint64_t)v1733 + v1986) & 0xFFFFFFFFFFFFFFF8);
          void *v1735 = *v1736;
          unint64_t v1737 = ((unint64_t)v1735 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1738 = ((unint64_t)v1736 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1739 = *(void *)v1738;
          *(unsigned char *)(v1737 + 8) = *(unsigned char *)(v1738 + 8);
          *(void *)unint64_t v1737 = v1739;
          v1740 = (void *)(((unint64_t)v1735 + 31) & 0xFFFFFFFFFFFFFFF8);
          v1741 = (void *)(((unint64_t)v1736 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v1740 = *v1741;
          unint64_t v1742 = ((unint64_t)v1740 + 15) & 0xFFFFFFFFFFFFFFF8;
          v1743 = (uint64_t *)(((unint64_t)v1741 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1744 = v1743[1];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v1217 = v2106;
          if ((v1744 & 0x3000000000000000) != 0)
          {
            *(_OWORD *)unint64_t v1742 = *(_OWORD *)v1743;
          }
          else
          {
            uint64_t v1745 = *v1743;
            sub_24D3F9C18(*v1743, v1744);
            *(void *)unint64_t v1742 = v1745;
            *(void *)(v1742 + 8) = v1744;
          }
          unint64_t v1746 = (v1742 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1747 = ((unint64_t)v1743 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1748 = *(void *)v1747;
          *(unsigned char *)(v1746 + 8) = *(unsigned char *)(v1747 + 8);
          *(void *)unint64_t v1746 = v1748;
          *(unsigned char *)(v1746 + 9) = *(unsigned char *)(v1747 + 9);
          unint64_t v1749 = (v1746 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v1750 = (v1747 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          int v1751 = *(_DWORD *)v1750;
          *(unsigned char *)(v1749 + 4) = *(unsigned char *)(v1750 + 4);
          *(_DWORD *)unint64_t v1749 = v1751;
          v1752 = (void *)((v1746 + 25) & 0xFFFFFFFFFFFFFFF8);
          v1753 = (void *)((v1747 + 25) & 0xFFFFFFFFFFFFFFF8);
          void *v1752 = *v1753;
          v1752[1] = v1753[1];
          unint64_t v1754 = v2044 + v1714;
          v1755 = (long long *)(v2044 + v2061);
          unint64_t v1756 = *(void *)(v2044 + v2061 + 16);
          if (v1756 >= 0xFFFFFFFF) {
            LODWORD(v1756) = -1;
          }
          int v1757 = v1756 - 1;
          swift_bridgeObjectRetain();
          if (v1757 < 0)
          {
            *(void *)unint64_t v1754 = *(void *)v1755;
            *(unsigned char *)(v1754 + 8) = *((unsigned char *)v1755 + 8);
            *(unsigned char *)(v1754 + 9) = *((unsigned char *)v1755 + 9);
            v1771 = (void *)*((void *)v1755 + 2);
            id v1772 = v1771;
            *(void *)(v1754 + 16) = v1771;
            v1773 = (void *)*((void *)v1755 + 3);
            id v1774 = v1773;
            *(void *)(v1754 + 24) = v1773;
            *(unsigned char *)(v1754 + 32) = *((unsigned char *)v1755 + 32);
            *(unsigned char *)(v1754 + 33) = *((unsigned char *)v1755 + 33);
            *(unsigned char *)(v1754 + 34) = *((unsigned char *)v1755 + 34);
            *(void *)(v1754 + 40) = *((void *)v1755 + 5);
            *(void *)(v1754 + 48) = *((void *)v1755 + 6);
            *(void *)(v1754 + 56) = *((void *)v1755 + 7);
            *(void *)(v1754 + 64) = *((void *)v1755 + 8);
            *(unsigned char *)(v1754 + 72) = *((unsigned char *)v1755 + 72);
            *(void *)(v1754 + 80) = *((void *)v1755 + 10);
            *(void *)(v1754 + 88) = *((void *)v1755 + 11);
            v2076 = (void *)*((void *)v1755 + 12);
            *(void *)(v1754 + 96) = v2076;
            *(unsigned char *)(v1754 + 104) = *((unsigned char *)v1755 + 104);
            *(unsigned char *)(v1754 + 105) = *((unsigned char *)v1755 + 105);
            *(void *)(v1754 + 112) = *((void *)v1755 + 14);
            *(void *)(v1754 + 120) = *((void *)v1755 + 15);
            *(void *)(v1754 + 128) = *((void *)v1755 + 16);
            *(void *)(v1754 + 136) = *((void *)v1755 + 17);
            *(void *)(v1754 + 144) = *((void *)v1755 + 18);
            *(void *)(v1754 + 152) = *((void *)v1755 + 19);
            *(void *)(v1754 + 160) = *((void *)v1755 + 20);
            *(void *)(v1754 + 168) = *((void *)v1755 + 21);
            *(unsigned char *)(v1754 + 176) = *((unsigned char *)v1755 + 176);
            *(void *)(v1754 + 184) = *((void *)v1755 + 23);
            uint64_t v1775 = *((void *)v1755 + 24);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v1776 = v2076;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            if (v1775)
            {
              *(void *)(v1754 + 192) = v1775;
              *(void *)(v1754 + 200) = *((void *)v1755 + 25);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              *(_OWORD *)(v1754 + 192) = v1755[12];
            }
            unint64_t v1770 = v2053;
            v1217 = v2106;
            *(void *)(v1754 + 208) = *((void *)v1755 + 26);
            *(void *)(v1754 + 216) = *((void *)v1755 + 27);
            *(void *)(v1754 + 224) = *((void *)v1755 + 28);
            *(void *)(v1754 + 232) = *((void *)v1755 + 29);
            *(void *)(v1754 + 240) = *((void *)v1755 + 30);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
          }
          else
          {
            long long v1758 = *v1755;
            long long v1759 = v1755[1];
            long long v1760 = v1755[3];
            *(_OWORD *)(v1754 + 32) = v1755[2];
            *(_OWORD *)(v1754 + 48) = v1760;
            *(_OWORD *)unint64_t v1754 = v1758;
            *(_OWORD *)(v1754 + 16) = v1759;
            long long v1761 = v1755[4];
            long long v1762 = v1755[5];
            long long v1763 = v1755[7];
            *(_OWORD *)(v1754 + 96) = v1755[6];
            *(_OWORD *)(v1754 + 112) = v1763;
            *(_OWORD *)(v1754 + 64) = v1761;
            *(_OWORD *)(v1754 + 80) = v1762;
            long long v1764 = v1755[8];
            long long v1765 = v1755[9];
            long long v1766 = v1755[11];
            *(_OWORD *)(v1754 + 160) = v1755[10];
            *(_OWORD *)(v1754 + 176) = v1766;
            *(_OWORD *)(v1754 + 128) = v1764;
            *(_OWORD *)(v1754 + 144) = v1765;
            long long v1767 = v1755[12];
            long long v1768 = v1755[13];
            long long v1769 = v1755[14];
            *(void *)(v1754 + 240) = *((void *)v1755 + 30);
            *(_OWORD *)(v1754 + 208) = v1768;
            *(_OWORD *)(v1754 + 224) = v1769;
            *(_OWORD *)(v1754 + 192) = v1767;
            unint64_t v1770 = v2053;
          }
          v1895 = (_OWORD *)((v1754 + 255) & 0xFFFFFFFFFFFFFFF8);
          v1896 = (long long *)(((unint64_t)v1755 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v1897 = *v1896;
          *(_OWORD *)((char *)v1895 + 9) = *(long long *)((char *)v1896 + 9);
          _OWORD *v1895 = v1897;
          unint64_t v1898 = (v1754 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v1899 = ((unint64_t)v1755 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v1900 = *(_OWORD *)v1899;
          *(unsigned char *)(v1898 + 16) = *(unsigned char *)(v1899 + 16);
          *(_OWORD *)unint64_t v1898 = v1900;
          v1901 = (void *)((v1754 + 311) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1902 = ((unint64_t)v1755 + 311) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v1903 = *(void *)v1902;
          v1902 += 15;
          void *v1901 = v1903;
          v1904 = (void *)(((unint64_t)v1901 + 15) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v1905 = *(void *)(v1902 & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1906 = *(void *)((v1902 & 0xFFFFFFFFFFFFFFF8) + 8);
          sub_24D5203A8(v1905, v1906);
          void *v1904 = v1905;
          v1904[1] = v1906;
          size_t v1700 = v1993;
          unint64_t v302 = v1770;
          if (!v1971) {
            goto LABEL_1456;
          }
LABEL_1532:
          unint64_t v1907 = ((((v1964
                    + ((((((((((v1970 + v1700 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 19) & 0xFFFFFFFFFFFFFFF8)
                      + 25) & 0xFFFFFFFFFFFFFFF8)
                    + 327) & 0xFFFFFFFFFFFFFFF8)
                  + 15) & 0xFFFFFFFFFFFFFFF8)
                + 16;
          v1908 = (void *)(((unint64_t)v1217 + v1907) & 0xFFFFFFFFFFFFFFF8);
          v1909 = (void *)(((unint64_t)v1218 + v1907) & 0xFFFFFFFFFFFFFFF8);
          void *v1908 = *v1909;
          v1908[1] = v1909[1];
          *(void *)(((unint64_t)v1908 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1909 + 23) & 0xFFFFFFFFFFFFFFF8);
          *((unsigned char *)a1 + v1945) = 3;
          swift_bridgeObjectRetain();
          char v1223 = 0;
LABEL_1498:
          uint64_t v1244 = v2063;
LABEL_1499:
          *((unsigned char *)a1 + v302) = v1223;
          if (v1244 > 3) {
            goto LABEL_1500;
          }
          unsigned int v1842 = ((1 << (8 * v1244)) + 5) >> (8 * v1244);
          if (v1842 > 0xFFD6)
          {
            *(_DWORD *)((char *)a1 + v1244) = 27;
            return a1;
          }
          if (v1842 <= 0xD6) {
LABEL_1500:
          }
            *((unsigned char *)a1 + v1244) = 27;
          else {
            *(_WORD *)((char *)a1 + v1244) = 27;
          }
          return a1;
        case 4u:
          v1222 = a1;
          (*(void (**)(void *))(v1997 + 16))(a1);
          char v1223 = 0;
          char v1224 = 4;
          goto LABEL_1234;
        case 5u:
          v1222 = a1;
          (*(void (**)(void *))(v1997 + 16))(a1);
          char v1223 = 0;
          char v1224 = 5;
          goto LABEL_1234;
        case 6u:
          v1225 = v72;
          (*(void (**)(void *))(v1997 + 16))(a1);
          v1226 = (void *)(((unint64_t)a1 + v1933) & v1193);
          v1227 = (const void *)((unint64_t)&v1225[v1933] & v1193);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1934 + 48))(v1227, 1, v2016))
          {
            memcpy(v1226, v1227, v1929);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1934 + 16))(v1226, v1227, v2016);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1934 + 56))(v1226, 0, 1, v2016);
          }
          char v1223 = 0;
          *((unsigned char *)a1 + v1945) = 6;
          goto LABEL_1498;
        case 7u:
          v1222 = a1;
          (*(void (**)(void *))(v1997 + 16))(a1);
          char v1223 = 0;
          char v1224 = 7;
LABEL_1234:
          *((unsigned char *)v1222 + v1945) = v1224;
          goto LABEL_1498;
        default:
          uint64_t v2071 = ~v2003;
          v1194 = *(void (**)(void *, const void *, uint64_t))(v1997 + 16);
          uint64_t v1195 = ~v33;
          v1196 = v72;
          ((void (*)(void *))v1194)(a1);
          v1197 = (void *)(((unint64_t)a1 + v1938) & v1195);
          v1198 = (const void *)((unint64_t)&v1196[v1938] & v1195);
          if (v2018 == v1965)
          {
            int v1199 = (*(uint64_t (**)(unint64_t))(v1997 + 48))((unint64_t)&v1196[v1938] & v1195);
            uint64_t v1200 = v2013;
            uint64_t v1201 = v1954;
LABEL_1420:
            if (v1199)
            {
LABEL_1421:
              memcpy(v1197, v1198, v2037);
              goto LABEL_1422;
            }
            unint64_t v1236 = ((unint64_t)v1198 + v1984) & v306;
            unint64_t v1237 = (v1201 + v1236) & v2026;
LABEL_1424:
            unint64_t v2051 = v302;
            v1194(v1197, v1198, AssociatedTypeWitness);
            v2105 = v1197;
            unint64_t v1548 = ((unint64_t)v1197 + v1984) & v306;
            v1194((void *)v1548, (const void *)v1236, AssociatedTypeWitness);
            unint64_t v1549 = (v1201 + v1548) & v2026;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1977 + 16))(v1549, v1237, v1976);
            v1550 = (void *)((v1982 + v1549) & 0xFFFFFFFFFFFFFFF8);
            v1551 = (void *)((v1982 + v1237) & 0xFFFFFFFFFFFFFFF8);
            void *v1550 = *v1551;
            unint64_t v1552 = ((unint64_t)v1550 + v1972) & v1917;
            uint64_t v1553 = v1200;
            unint64_t v1554 = ((unint64_t)v1551 + v1972) & v1917;
            v1555 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
            swift_bridgeObjectRetain();
            v1555(v1552, v1554, v1973);
            v1556 = (void *)((v1968 + v1554) & 0xFFFFFFFFFFFFFFF8);
            v1557 = (void *)((v1968 + v1552) & 0xFFFFFFFFFFFFFFF8);
            void *v1557 = *v1556;
            v1558 = (void *)(((unint64_t)v1557 + 15) & 0xFFFFFFFFFFFFFFF8);
            v1559 = (void *)(((unint64_t)v1556 + 15) & 0xFFFFFFFFFFFFFFF8);
            void *v1558 = *v1559;
            v1558[1] = v1559[1];
            v1560 = (void *)(v1549 + v2040);
            void *v1560 = *(void *)(v1237 + v2040);
            v1560[1] = *(void *)(v1237 + v2040 + 8);
            size_t v1561 = (v2045 + v1549 + v2040) & v1553;
            size_t v1562 = (v2045 + v1237 + v2040) & v1553;
            *(unsigned char *)size_t v1561 = *(unsigned char *)v1562;
            uint64_t v1563 = v1561 | 4;
            int v1564 = *(_DWORD *)(v1562 | 4);
            *(unsigned char *)(v1563 + 4) = *(unsigned char *)((v1562 | 4) + 4);
            *(_DWORD *)uint64_t v1563 = v1564;
            *(_WORD *)(v1561 + 10) = *(_WORD *)(v1562 + 0xA);
            size_t v1565 = (v1992 + v1561) & v2071;
            size_t v2060 = v1562;
            size_t v1566 = (v1992 + v1562) & v2071;
            v1567 = *(void (**)(size_t, size_t, uint64_t))(v1990 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1567(v1565, v1566, v1989);
            size_t v1568 = (v1988 + v1565) & v2071;
            size_t v1569 = (v1988 + v1566) & v2071;
            v1567(v1568, v1569, v1989);
            v1570 = (unsigned char *)(v1568 + v1993);
            unsigned char *v1570 = *(unsigned char *)(v1569 + v1993);
            v1570[1] = *(unsigned char *)(v1569 + v1993 + 1);
            v1570[2] = *(unsigned char *)(v1569 + v1993 + 2);
            v1570[3] = *(unsigned char *)(v1569 + v1993 + 3);
            v1570[4] = *(unsigned char *)(v1569 + v1993 + 4);
            unint64_t v1571 = (v1568 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1572 = (v1569 + v1993 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1571 = *(void *)v1572;
            *(void *)(v1571 + 8) = *(void *)(v1572 + 8);
            *(unsigned char *)(v1571 + 16) = *(unsigned char *)(v1572 + 16);
            *(unsigned char *)(v1571 + 17) = *(unsigned char *)(v1572 + 17);
            *(unsigned char *)(v1571 + 18) = *(unsigned char *)(v1572 + 18);
            *(unsigned char *)(v1571 + 19) = *(unsigned char *)(v1572 + 19);
            unint64_t v1573 = (v1571 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1574 = (v1572 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1573 = *(void *)v1574;
            *(unsigned char *)(v1573 + 8) = *(unsigned char *)(v1574 + 8);
            *(unsigned char *)(v1573 + 9) = *(unsigned char *)(v1574 + 9);
            *(unsigned char *)(v1573 + 10) = *(unsigned char *)(v1574 + 10);
            *(unsigned char *)(v1573 + 11) = *(unsigned char *)(v1574 + 11);
            *(unsigned char *)(v1573 + 12) = *(unsigned char *)(v1574 + 12);
            v1575 = (void *)((v1572 + 47) & 0xFFFFFFFFFFFFFFF8);
            v1576 = (void *)((v1571 + 47) & 0xFFFFFFFFFFFFFFF8);
            void *v1576 = *v1575;
            unint64_t v1577 = ((unint64_t)v1576 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1578 = ((unint64_t)v1575 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1577 = *(void *)v1578;
            *(unsigned char *)(v1577 + 8) = *(unsigned char *)(v1578 + 8);
            *(unsigned char *)(v1577 + 9) = *(unsigned char *)(v1578 + 9);
            v1579 = (void *)((v1985 + v1577) & v2071);
            v1580 = (const void *)((v1985 + v1578) & v2071);
            v1581 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v1990 + 48);
            swift_bridgeObjectRetain();
            if (v1581(v1580, 1, v1989))
            {
              memcpy(v1579, v1580, __n);
            }
            else
            {
              v1567((size_t)v1579, (size_t)v1580, v1989);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1990 + 56))(v1579, 0, 1, v1989);
            }
            v1582 = (void *)(((unint64_t)v1579 + v1986) & 0xFFFFFFFFFFFFFFF8);
            v1583 = (void *)(((unint64_t)v1580 + v1986) & 0xFFFFFFFFFFFFFFF8);
            void *v1582 = *v1583;
            unint64_t v1584 = ((unint64_t)v1582 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1585 = ((unint64_t)v1583 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1586 = *(void *)v1585;
            *(unsigned char *)(v1584 + 8) = *(unsigned char *)(v1585 + 8);
            *(void *)unint64_t v1584 = v1586;
            v1587 = (void *)(((unint64_t)v1582 + 31) & 0xFFFFFFFFFFFFFFF8);
            v1588 = (void *)(((unint64_t)v1583 + 31) & 0xFFFFFFFFFFFFFFF8);
            void *v1587 = *v1588;
            unint64_t v1589 = ((unint64_t)v1587 + 15) & 0xFFFFFFFFFFFFFFF8;
            v1590 = (uint64_t *)(((unint64_t)v1588 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1591 = v1590[1];
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v1197 = v2105;
            if ((v1591 & 0x3000000000000000) != 0)
            {
              *(_OWORD *)unint64_t v1589 = *(_OWORD *)v1590;
            }
            else
            {
              uint64_t v1592 = *v1590;
              sub_24D3F9C18(*v1590, v1591);
              *(void *)unint64_t v1589 = v1592;
              *(void *)(v1589 + 8) = v1591;
            }
            unint64_t v1593 = (v1589 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1594 = ((unint64_t)v1590 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1595 = *(void *)v1594;
            *(unsigned char *)(v1593 + 8) = *(unsigned char *)(v1594 + 8);
            *(void *)unint64_t v1593 = v1595;
            *(unsigned char *)(v1593 + 9) = *(unsigned char *)(v1594 + 9);
            unint64_t v1596 = (v1593 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1597 = (v1594 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            int v1598 = *(_DWORD *)v1597;
            *(unsigned char *)(v1596 + 4) = *(unsigned char *)(v1597 + 4);
            *(_DWORD *)unint64_t v1596 = v1598;
            v1599 = (void *)((v1593 + 25) & 0xFFFFFFFFFFFFFFF8);
            v1600 = (void *)((v1594 + 25) & 0xFFFFFFFFFFFFFFF8);
            void *v1599 = *v1600;
            v1599[1] = v1600[1];
            unint64_t v1601 = v2044 + v1561;
            v1602 = (long long *)(v2044 + v2060);
            unint64_t v1603 = *(void *)(v2044 + v2060 + 16);
            if (v1603 >= 0xFFFFFFFF) {
              LODWORD(v1603) = -1;
            }
            int v1604 = v1603 - 1;
            swift_bridgeObjectRetain();
            if (v1604 < 0)
            {
              *(void *)unint64_t v1601 = *(void *)v1602;
              *(unsigned char *)(v1601 + 8) = *((unsigned char *)v1602 + 8);
              *(unsigned char *)(v1601 + 9) = *((unsigned char *)v1602 + 9);
              v1618 = (void *)*((void *)v1602 + 2);
              id v1619 = v1618;
              *(void *)(v1601 + 16) = v1618;
              v1620 = (void *)*((void *)v1602 + 3);
              id v1621 = v1620;
              *(void *)(v1601 + 24) = v1620;
              *(unsigned char *)(v1601 + 32) = *((unsigned char *)v1602 + 32);
              *(unsigned char *)(v1601 + 33) = *((unsigned char *)v1602 + 33);
              *(unsigned char *)(v1601 + 34) = *((unsigned char *)v1602 + 34);
              *(void *)(v1601 + 40) = *((void *)v1602 + 5);
              *(void *)(v1601 + 48) = *((void *)v1602 + 6);
              *(void *)(v1601 + 56) = *((void *)v1602 + 7);
              *(void *)(v1601 + 64) = *((void *)v1602 + 8);
              *(unsigned char *)(v1601 + 72) = *((unsigned char *)v1602 + 72);
              *(void *)(v1601 + 80) = *((void *)v1602 + 10);
              *(void *)(v1601 + 88) = *((void *)v1602 + 11);
              v2074 = (void *)*((void *)v1602 + 12);
              *(void *)(v1601 + 96) = v2074;
              *(unsigned char *)(v1601 + 104) = *((unsigned char *)v1602 + 104);
              *(unsigned char *)(v1601 + 105) = *((unsigned char *)v1602 + 105);
              *(void *)(v1601 + 112) = *((void *)v1602 + 14);
              *(void *)(v1601 + 120) = *((void *)v1602 + 15);
              *(void *)(v1601 + 128) = *((void *)v1602 + 16);
              *(void *)(v1601 + 136) = *((void *)v1602 + 17);
              *(void *)(v1601 + 144) = *((void *)v1602 + 18);
              *(void *)(v1601 + 152) = *((void *)v1602 + 19);
              *(void *)(v1601 + 160) = *((void *)v1602 + 20);
              *(void *)(v1601 + 168) = *((void *)v1602 + 21);
              *(unsigned char *)(v1601 + 176) = *((unsigned char *)v1602 + 176);
              *(void *)(v1601 + 184) = *((void *)v1602 + 23);
              uint64_t v1622 = *((void *)v1602 + 24);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              id v1623 = v2074;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              if (v1622)
              {
                *(void *)(v1601 + 192) = v1622;
                *(void *)(v1601 + 200) = *((void *)v1602 + 25);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                *(_OWORD *)(v1601 + 192) = v1602[12];
              }
              unint64_t v1617 = v2051;
              v1197 = v2105;
              *(void *)(v1601 + 208) = *((void *)v1602 + 26);
              *(void *)(v1601 + 216) = *((void *)v1602 + 27);
              *(void *)(v1601 + 224) = *((void *)v1602 + 28);
              *(void *)(v1601 + 232) = *((void *)v1602 + 29);
              *(void *)(v1601 + 240) = *((void *)v1602 + 30);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
            }
            else
            {
              long long v1605 = *v1602;
              long long v1606 = v1602[1];
              long long v1607 = v1602[3];
              *(_OWORD *)(v1601 + 32) = v1602[2];
              *(_OWORD *)(v1601 + 48) = v1607;
              *(_OWORD *)unint64_t v1601 = v1605;
              *(_OWORD *)(v1601 + 16) = v1606;
              long long v1608 = v1602[4];
              long long v1609 = v1602[5];
              long long v1610 = v1602[7];
              *(_OWORD *)(v1601 + 96) = v1602[6];
              *(_OWORD *)(v1601 + 112) = v1610;
              *(_OWORD *)(v1601 + 64) = v1608;
              *(_OWORD *)(v1601 + 80) = v1609;
              long long v1611 = v1602[8];
              long long v1612 = v1602[9];
              long long v1613 = v1602[11];
              *(_OWORD *)(v1601 + 160) = v1602[10];
              *(_OWORD *)(v1601 + 176) = v1613;
              *(_OWORD *)(v1601 + 128) = v1611;
              *(_OWORD *)(v1601 + 144) = v1612;
              long long v1614 = v1602[12];
              long long v1615 = v1602[13];
              long long v1616 = v1602[14];
              *(void *)(v1601 + 240) = *((void *)v1602 + 30);
              *(_OWORD *)(v1601 + 208) = v1615;
              *(_OWORD *)(v1601 + 224) = v1616;
              *(_OWORD *)(v1601 + 192) = v1614;
              unint64_t v1617 = v2051;
            }
            v1843 = (_OWORD *)((v1601 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1844 = (long long *)(((unint64_t)v1602 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1845 = *v1844;
            *(_OWORD *)((char *)v1843 + 9) = *(long long *)((char *)v1844 + 9);
            _OWORD *v1843 = v1845;
            unint64_t v1846 = (v1601 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1847 = ((unint64_t)v1602 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1848 = *(_OWORD *)v1847;
            *(unsigned char *)(v1846 + 16) = *(unsigned char *)(v1847 + 16);
            *(_OWORD *)unint64_t v1846 = v1848;
            v1849 = (void *)((v1601 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1850 = ((unint64_t)v1602 + 311) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1851 = *(void *)v1850;
            v1850 += 15;
            void *v1849 = v1851;
            v1852 = (void *)(((unint64_t)v1849 + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1853 = *(void *)(v1850 & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1854 = *(void *)((v1850 & 0xFFFFFFFFFFFFFFF8) + 8);
            sub_24D5203A8(v1853, v1854);
            void *v1852 = v1853;
            v1852[1] = v1854;
            size_t v1547 = v1993;
            unint64_t v302 = v1617;
            if (v1971)
            {
LABEL_1508:
              unint64_t v1855 = ((((v1964
                        + ((((((((((v1970 + v1547 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1856 = (void *)(((unint64_t)v1197 + v1855) & 0xFFFFFFFFFFFFFFF8);
              v1857 = (void *)(((unint64_t)v1198 + v1855) & 0xFFFFFFFFFFFFFFF8);
              void *v1856 = *v1857;
              v1858 = *(void **)(((unint64_t)v1857 + 15) & 0xFFFFFFFFFFFFFFF8);
              *(void *)(((unint64_t)v1856 + 15) & 0xFFFFFFFFFFFFFFF8) = v1858;
              *((unsigned char *)a1 + v1945) = 0;
              id v1859 = v1858;
              char v1223 = 0;
              goto LABEL_1498;
            }
LABEL_1422:
            size_t v1547 = __n;
            goto LABEL_1508;
          }
          unint64_t v1236 = ((unint64_t)v1198 + v1984) & v306;
          uint64_t v1201 = v1954;
          unint64_t v1237 = (v1954 + v1236) & v2026;
          uint64_t v1200 = v2013;
          if (v1966 == v1965)
          {
            if (v1958 == v1966)
            {
              int v1199 = (*(uint64_t (**)(unint64_t))(v1977 + 48))((v1954 + v1236) & v2026);
              goto LABEL_1420;
            }
            v1299 = (unint64_t *)((v1982 + v1237) & 0xFFFFFFFFFFFFFFF8);
            if (v1944 > 0x7FFFFFFE)
            {
              int v1199 = (*(uint64_t (**)(unint64_t))(v1974 + 48))(((unint64_t)v1299 + v1972) & v1917);
              goto LABEL_1420;
            }
            unint64_t v1300 = *v1299;
          }
          else
          {
            size_t v1263 = v1237 + v2040;
            if ((v1942 & 0x80000000) == 0)
            {
              unint64_t v1264 = *(void *)(v1263 + 8);
              if (v1264 >= 0xFFFFFFFF) {
                LODWORD(v1264) = -1;
              }
              int v1199 = v1264 + 1;
              goto LABEL_1420;
            }
            uint64_t v1308 = (v1992 + ((v2045 + v1263) & v2013)) & v2071;
            if (v1971 > 0x7FFFFFFD)
            {
              int v1199 = (*(uint64_t (**)(uint64_t))(v1990 + 48))(v1308);
              goto LABEL_1420;
            }
            unint64_t v1300 = *(void *)(((v1939 + ((v1988 + v1308) & v2071)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1300 >= 0xFFFFFFFF) {
            LODWORD(v1300) = -1;
          }
          if ((v1300 + 1) >= 2) {
            goto LABEL_1421;
          }
          goto LABEL_1424;
      }
    case 0x1Cu:
      unsigned int v308 = v72[v2009];
      unsigned int v309 = v308 - 2;
      if (v308 < 2)
      {
        size_t v312 = v2047;
        uint64_t v311 = v2054;
        uint64_t v313 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v310 = v2009;
        }
        else {
          uint64_t v310 = 4;
        }
        size_t v312 = v2047;
        uint64_t v311 = v2054;
        uint64_t v313 = v1997;
        switch(v310)
        {
          case 1:
            int v314 = *v72;
            goto LABEL_766;
          case 2:
            int v314 = *(unsigned __int16 *)v72;
            goto LABEL_766;
          case 3:
            int v314 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_766;
          case 4:
            int v314 = *(_DWORD *)v72;
LABEL_766:
            if (v2009 < 4) {
              unsigned int v308 = (v314 | (v309 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v308 = v314 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v710 = v308 == 1;
      if (v308 == 1) {
        uint64_t v711 = v311;
      }
      else {
        uint64_t v711 = v313;
      }
      v712 = v72;
      (*(void (**)(void *))(v711 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v710;
      *((unsigned char *)a1 + v312) = v712[v312];
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_773;
      }
      unsigned int v713 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v713 > 0xFFD6)
      {
        int v502 = 28;
        goto LABEL_975;
      }
      if (v713 <= 0xD6)
      {
LABEL_773:
        char v274 = 28;
        goto LABEL_969;
      }
      __int16 v399 = 28;
      goto LABEL_973;
    case 0x1Du:
      unsigned int v315 = v72[v2009];
      unsigned int v316 = v315 - 2;
      if (v315 < 2)
      {
        uint64_t v318 = v2054;
        uint64_t v319 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v317 = v2009;
        }
        else {
          uint64_t v317 = 4;
        }
        uint64_t v318 = v2054;
        uint64_t v319 = v1997;
        switch(v317)
        {
          case 1:
            int v320 = *v72;
            goto LABEL_781;
          case 2:
            int v320 = *(unsigned __int16 *)v72;
            goto LABEL_781;
          case 3:
            int v320 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_781;
          case 4:
            int v320 = *(_DWORD *)v72;
LABEL_781:
            if (v2009 < 4) {
              unsigned int v315 = (v320 | (v316 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v315 = v320 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v714 = v315 == 1;
      if (v315 == 1) {
        uint64_t v715 = v318;
      }
      else {
        uint64_t v715 = v319;
      }
      (*(void (**)(void *))(v715 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v714;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_788;
      }
      unsigned int v716 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v716 > 0xFFD6)
      {
        int v502 = 29;
        goto LABEL_975;
      }
      if (v716 <= 0xD6)
      {
LABEL_788:
        char v274 = 29;
        goto LABEL_969;
      }
      __int16 v399 = 29;
      goto LABEL_973;
    case 0x1Eu:
      unsigned int v321 = v72[v2009];
      unsigned int v322 = v321 - 2;
      if (v321 < 2)
      {
        uint64_t v324 = v2054;
        uint64_t v325 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v323 = v2009;
        }
        else {
          uint64_t v323 = 4;
        }
        uint64_t v324 = v2054;
        uint64_t v325 = v1997;
        switch(v323)
        {
          case 1:
            int v326 = *v72;
            goto LABEL_796;
          case 2:
            int v326 = *(unsigned __int16 *)v72;
            goto LABEL_796;
          case 3:
            int v326 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_796;
          case 4:
            int v326 = *(_DWORD *)v72;
LABEL_796:
            if (v2009 < 4) {
              unsigned int v321 = (v326 | (v322 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v321 = v326 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v717 = v321 == 1;
      if (v321 == 1) {
        uint64_t v718 = v324;
      }
      else {
        uint64_t v718 = v325;
      }
      (*(void (**)(void *))(v718 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v717;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_803;
      }
      unsigned int v719 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v719 > 0xFFD6)
      {
        int v502 = 30;
        goto LABEL_975;
      }
      if (v719 <= 0xD6)
      {
LABEL_803:
        char v274 = 30;
        goto LABEL_969;
      }
      __int16 v399 = 30;
      goto LABEL_973;
    case 0x1Fu:
      unsigned int v327 = v72[v2009];
      unsigned int v328 = v327 - 2;
      if (v327 < 2)
      {
        uint64_t v330 = ~v2010;
        uint64_t v331 = v2054;
        uint64_t v332 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v329 = v2009;
        }
        else {
          uint64_t v329 = 4;
        }
        uint64_t v330 = ~v2010;
        uint64_t v331 = v2054;
        uint64_t v332 = v1997;
        switch(v329)
        {
          case 1:
            int v333 = *v72;
            goto LABEL_811;
          case 2:
            int v333 = *(unsigned __int16 *)v72;
            goto LABEL_811;
          case 3:
            int v333 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_811;
          case 4:
            int v333 = *(_DWORD *)v72;
LABEL_811:
            if (v2009 < 4) {
              unsigned int v327 = (v333 | (v328 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v327 = v333 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v720 = v327 == 1;
      if (v327 == 1) {
        uint64_t v721 = v331;
      }
      else {
        uint64_t v721 = v332;
      }
      v722 = v72;
      (*(void (**)(void *))(v721 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v720;
      v723 = (unsigned __int8 *)((unint64_t)&v722[v1991] & v330);
      unsigned int v724 = v723[v2009];
      unsigned int v725 = v724 - 2;
      if (v724 >= 2)
      {
        if (v2009 <= 3) {
          uint64_t v726 = v2009;
        }
        else {
          uint64_t v726 = 4;
        }
        switch(v726)
        {
          case 1:
            int v727 = *v723;
            goto LABEL_961;
          case 2:
            int v727 = *(unsigned __int16 *)v723;
            goto LABEL_961;
          case 3:
            int v727 = *(unsigned __int16 *)v723 | (*(unsigned __int8 *)(((unint64_t)&v722[v1991] & v330) + 2) << 16);
            goto LABEL_961;
          case 4:
            int v727 = *(_DWORD *)v723;
LABEL_961:
            if (v2009 < 4) {
              unsigned int v724 = (v727 | (v725 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v724 = v727 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v756 = v724 == 1;
      if (v724 == 1) {
        uint64_t v757 = v331;
      }
      else {
        uint64_t v757 = v332;
      }
      (*(void (**)(unint64_t))(v757 + 16))(((unint64_t)a1 + v1991) & v330);
      *(unsigned char *)((((unint64_t)a1 + v1991) & v330) + v2009) = v756;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_968;
      }
      unsigned int v758 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v758 > 0xFFD6)
      {
        int v502 = 31;
        goto LABEL_975;
      }
      if (v758 <= 0xD6)
      {
LABEL_968:
        char v274 = 31;
        goto LABEL_969;
      }
      __int16 v399 = 31;
      goto LABEL_973;
    case 0x20u:
      unsigned int v334 = v72[v2009];
      unsigned int v335 = v334 - 2;
      if (v334 < 2)
      {
        uint64_t v337 = v2054;
        uint64_t v338 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v336 = v2009;
        }
        else {
          uint64_t v336 = 4;
        }
        uint64_t v337 = v2054;
        uint64_t v338 = v1997;
        switch(v336)
        {
          case 1:
            int v339 = *v72;
            goto LABEL_826;
          case 2:
            int v339 = *(unsigned __int16 *)v72;
            goto LABEL_826;
          case 3:
            int v339 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_826;
          case 4:
            int v339 = *(_DWORD *)v72;
LABEL_826:
            if (v2009 < 4) {
              unsigned int v334 = (v339 | (v335 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v334 = v339 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v728 = v334 == 1;
      if (v334 == 1) {
        uint64_t v729 = v337;
      }
      else {
        uint64_t v729 = v338;
      }
      (*(void (**)(void *))(v729 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v728;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_833;
      }
      unsigned int v730 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v730 > 0xFFD6)
      {
        int v502 = 32;
        goto LABEL_975;
      }
      if (v730 <= 0xD6)
      {
LABEL_833:
        char v274 = 32;
        goto LABEL_969;
      }
      __int16 v399 = 32;
      goto LABEL_973;
    case 0x21u:
      unsigned int v340 = v72[v2009];
      unsigned int v341 = v340 - 2;
      if (v340 < 2)
      {
        uint64_t v343 = v2054;
        uint64_t v344 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v342 = v2009;
        }
        else {
          uint64_t v342 = 4;
        }
        uint64_t v343 = v2054;
        uint64_t v344 = v1997;
        switch(v342)
        {
          case 1:
            int v345 = *v72;
            goto LABEL_841;
          case 2:
            int v345 = *(unsigned __int16 *)v72;
            goto LABEL_841;
          case 3:
            int v345 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_841;
          case 4:
            int v345 = *(_DWORD *)v72;
LABEL_841:
            if (v2009 < 4) {
              unsigned int v340 = (v345 | (v341 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v340 = v345 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v731 = v340 == 1;
      if (v340 == 1) {
        uint64_t v732 = v343;
      }
      else {
        uint64_t v732 = v344;
      }
      (*(void (**)(void *))(v732 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v731;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_848;
      }
      unsigned int v733 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v733 > 0xFFD6)
      {
        int v502 = 33;
        goto LABEL_975;
      }
      if (v733 <= 0xD6)
      {
LABEL_848:
        char v274 = 33;
        goto LABEL_969;
      }
      __int16 v399 = 33;
      goto LABEL_973;
    case 0x22u:
      unsigned int v346 = v72[v2009];
      unsigned int v347 = v346 - 2;
      if (v346 < 2)
      {
        uint64_t v349 = v2054;
        uint64_t v350 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v348 = v2009;
        }
        else {
          uint64_t v348 = 4;
        }
        uint64_t v349 = v2054;
        uint64_t v350 = v1997;
        switch(v348)
        {
          case 1:
            int v351 = *v72;
            goto LABEL_856;
          case 2:
            int v351 = *(unsigned __int16 *)v72;
            goto LABEL_856;
          case 3:
            int v351 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_856;
          case 4:
            int v351 = *(_DWORD *)v72;
LABEL_856:
            if (v2009 < 4) {
              unsigned int v346 = (v351 | (v347 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v346 = v351 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v734 = v346 == 1;
      if (v346 == 1) {
        uint64_t v735 = v349;
      }
      else {
        uint64_t v735 = v350;
      }
      (*(void (**)(void *))(v735 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v734;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_863;
      }
      unsigned int v736 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v736 > 0xFFD6)
      {
        int v502 = 34;
        goto LABEL_975;
      }
      if (v736 <= 0xD6)
      {
LABEL_863:
        char v274 = 34;
        goto LABEL_969;
      }
      __int16 v399 = 34;
      goto LABEL_973;
    case 0x23u:
      unsigned int v352 = v72[v2009];
      unsigned int v353 = v352 - 2;
      if (v352 < 2)
      {
        uint64_t v355 = v2054;
        uint64_t v356 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v354 = v2009;
        }
        else {
          uint64_t v354 = 4;
        }
        uint64_t v355 = v2054;
        uint64_t v356 = v1997;
        switch(v354)
        {
          case 1:
            int v357 = *v72;
            goto LABEL_871;
          case 2:
            int v357 = *(unsigned __int16 *)v72;
            goto LABEL_871;
          case 3:
            int v357 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_871;
          case 4:
            int v357 = *(_DWORD *)v72;
LABEL_871:
            if (v2009 < 4) {
              unsigned int v352 = (v357 | (v353 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v352 = v357 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v737 = v352 == 1;
      if (v352 == 1) {
        uint64_t v738 = v355;
      }
      else {
        uint64_t v738 = v356;
      }
      (*(void (**)(void *))(v738 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v737;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_878;
      }
      unsigned int v739 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v739 > 0xFFD6)
      {
        int v502 = 35;
        goto LABEL_975;
      }
      if (v739 <= 0xD6)
      {
LABEL_878:
        char v274 = 35;
        goto LABEL_969;
      }
      __int16 v399 = 35;
      goto LABEL_973;
    case 0x24u:
      uint64_t v358 = ~v2087;
      uint64_t v359 = ~v37;
      uint64_t v360 = ~v1998;
      uint64_t v2006 = ~v36;
      size_t v2030 = ((((v1969 + ((v36 + 8 + (v1987 & 0xFFFFFFFFFFFFFFF8)) & ~v36)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      unint64_t v361 = v72;
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t))(v1997 + 48))(v72, 1, AssociatedTypeWitness, v2009, v69, v2010, v78))
      {
        size_t v362 = v1952;
        memcpy(a1, v361, v1952);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v1997 + 16))(a1, v361, AssociatedTypeWitness);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1997 + 56))(a1, 0, 1, AssociatedTypeWitness);
        size_t v362 = v1952;
      }
      unint64_t v405 = (void *)(((unint64_t)a1 + v362 + 7) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v406 = (void *)((unint64_t)&v361[v362 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v405 = *v406;
      unint64_t v407 = ((unint64_t)v405 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v408 = ((unint64_t)v406 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v407 = *(void *)v408;
      *(unsigned char *)(v407 + 8) = *(unsigned char *)(v408 + 8);
      uint64_t v409 = (void *)((v407 + v2087 + 9) & v358);
      unint64_t v410 = (const void *)((v408 + v2087 + 9) & v358);
      unint64_t v411 = v361;
      if (v1958 == v1966)
      {
        int v412 = (*(uint64_t (**)(const void *))(v1977 + 48))(v410);
      }
      else
      {
        uint64_t v413 = (uint64_t *)(((unint64_t)v410 + v1982) & 0xFFFFFFFFFFFFFFF8);
        if (v1944 <= 0x7FFFFFFE)
        {
          uint64_t v414 = *v413;
          if ((unint64_t)*v413 >= 0xFFFFFFFF) {
            LODWORD(v414) = -1;
          }
          if ((v414 + 1) >= 2) {
            goto LABEL_431;
          }
          goto LABEL_433;
        }
        int v412 = (*(uint64_t (**)(unint64_t))(v1974 + 48))(((unint64_t)v413 + v1972) & v360);
      }
      if (v412)
      {
LABEL_431:
        size_t v503 = v2040;
        memcpy(v409, v410, v2040);
        goto LABEL_434;
      }
      uint64_t v413 = (uint64_t *)(((unint64_t)v410 + v1982) & 0xFFFFFFFFFFFFFFF8);
LABEL_433:
      (*(void (**)(void *, const void *, uint64_t))(v1977 + 16))(v409, v410, v1976);
      unint64_t v504 = (void *)(((unint64_t)v409 + v1982) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v504 = *v413;
      unint64_t v505 = ((unint64_t)v504 + v1972) & v360;
      unint64_t v506 = ((unint64_t)v413 + v1972) & v360;
      uint64_t v507 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1974 + 16);
      swift_bridgeObjectRetain();
      v507(v505, v506, v1973);
      unint64_t v508 = (void *)((v1968 + v505) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v509 = (void *)((v1968 + v506) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v508 = *v509;
      int v510 = (void *)(((unint64_t)v508 + 15) & 0xFFFFFFFFFFFFFFF8);
      v511 = (void *)(((unint64_t)v509 + 15) & 0xFFFFFFFFFFFFFFF8);
      *int v510 = *v511;
      v510[1] = v511[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v503 = v2040;
LABEL_434:
      uint64_t v512 = (uint64_t)v410 + v503 + 10;
      uint64_t v513 = (uint64_t)v410 + v503 + 34;
      *((unsigned char *)v409 + v503) = *((unsigned char *)v410 + v503);
      uint64_t v514 = (uint64_t)v409 + v503 + 34;
      *(unsigned char *)(((unint64_t)v409 + v503) | 1) = *(unsigned char *)(((unint64_t)v410 + v503) | 1);
      uint64_t v515 = ~v41;
      *(unsigned char *)(((unint64_t)v409 + v503) | 2) = *(unsigned char *)(((unint64_t)v410 + v503) | 2);
      unint64_t v516 = ((unint64_t)v409 + v503 + 10) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v517 = *(void **)(v512 & 0xFFFFFFFFFFFFFFF8);
      unint64_t v518 = *(void **)((v512 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v519 = *(unsigned char *)((v512 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_24D3F1C98(v517, v518, v519);
      *(void *)unint64_t v516 = v517;
      *(void *)(v516 + 8) = v518;
      *(unsigned char *)(v516 + 16) = v519;
      unint64_t v520 = v514 & 0xFFFFFFFFFFFFFFF8;
      unint64_t v521 = v513 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v522 = *(void *)(v521 + 16) >> 60;
      if (!(4 * (v522 & 3)) || ((v522 >> 2) & 0xFFFFFFF3 | (4 * (v522 & 3))) == 0xF)
      {
        uint64_t v528 = (uint64_t *)(v521 + 8);
        *(void *)unint64_t v520 = *(void *)v521;
        unint64_t v529 = *(void *)(v521 + 16);
        uint64_t v526 = v1996;
        if (v529 >> 60 == 15)
        {
          *(_OWORD *)(v520 + 8) = *(_OWORD *)v528;
        }
        else
        {
          uint64_t v530 = *v528;
          sub_24D3F9C18(*v528, *(void *)(v521 + 16));
          *(void *)(v520 + 8) = v530;
          *(void *)(v520 + 16) = v529;
        }
        unint64_t v527 = v1946;
        long long v531 = *(_OWORD *)(v521 + 24);
        *(unsigned char *)(v520 + 40) = *(unsigned char *)(v521 + 40);
        *(_OWORD *)(v520 + 24) = v531;
        *(void *)(v520 + 48) = *(void *)(v521 + 48);
      }
      else
      {
        long long v523 = *(_OWORD *)v521;
        long long v524 = *(_OWORD *)(v521 + 16);
        long long v525 = *(_OWORD *)(v521 + 32);
        *(void *)(v520 + 48) = *(void *)(v521 + 48);
        *(_OWORD *)(v520 + 16) = v524;
        *(_OWORD *)(v520 + 32) = v525;
        *(_OWORD *)unint64_t v520 = v523;
        uint64_t v526 = v1996;
        unint64_t v527 = v1946;
      }
      uint64_t v532 = (void *)((v520 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v533 = (void **)((v521 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v534 = *v533;
      *uint64_t v532 = *v533;
      *(void *)(((unint64_t)v532 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v533 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v535 = (void *)(((unint64_t)a1 + v527) & v515);
      uint64_t v536 = (const void *)((unint64_t)&v411[v527] & v515);
      uint64_t v537 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v2054 + 48);
      id v538 = v534;
      if (v537(v536, 1, v526))
      {
        memcpy(v535, v536, v1936);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v2054 + 16))(v535, v536, v526);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v2054 + 56))(v535, 0, 1, v526);
      }
      uint64_t v539 = (void *)(((unint64_t)v535 + v1950) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v540 = (void *)(((unint64_t)v536 + v1950) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v539 = *v540;
      unint64_t v541 = ((unint64_t)v539 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v542 = ((unint64_t)v540 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v541 = *(void *)v542;
      *(unsigned char *)(v541 + 8) = *(unsigned char *)(v542 + 8);
      unint64_t v543 = (char *)((v1926 + v541) & v359);
      unint64_t v544 = (char *)((v1926 + v542) & v359);
      if (v1959 == v1967)
      {
        int v545 = (*(uint64_t (**)(char *))(v1979 + 48))(v544);
      }
      else
      {
        uint64_t v546 = v1987;
        unsigned int v547 = (uint64_t *)((unint64_t)&v544[v1987] & 0xFFFFFFFFFFFFFFF8);
        if (v1951 <= 0x7FFFFFFE)
        {
          uint64_t v548 = *v547;
          if ((unint64_t)*v547 >= 0xFFFFFFFF) {
            LODWORD(v548) = -1;
          }
          if ((v548 + 1) >= 2) {
            goto LABEL_453;
          }
          goto LABEL_455;
        }
        int v545 = ((uint64_t (*)(unint64_t))v1980[6])(((unint64_t)v547 + v1981) & v2006);
      }
      uint64_t v546 = v1987;
      if (v545)
      {
LABEL_453:
        size_t v549 = v2030;
        memcpy(v543, v544, v2030);
        goto LABEL_456;
      }
      unsigned int v547 = (uint64_t *)((unint64_t)&v544[v1987] & 0xFFFFFFFFFFFFFFF8);
LABEL_455:
      uint64_t v550 = v546;
      (*(void (**)(char *, char *, uint64_t))(v1979 + 16))(v543, v544, v1978);
      unint64_t v551 = (void *)((unint64_t)&v543[v550] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v551 = *v547;
      unint64_t v552 = ((unint64_t)v551 + v1981) & v2006;
      unint64_t v553 = ((unint64_t)v547 + v1981) & v2006;
      uint64_t v554 = (void (*)(unint64_t, unint64_t, uint64_t))v1980[2];
      swift_bridgeObjectRetain();
      v554(v552, v553, v1975);
      uint64_t v555 = (void *)((v1969 + v552) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v556 = (void *)((v1969 + v553) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v555 = *v556;
      unsigned int v557 = (void *)(((unint64_t)v555 + 15) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v558 = (void *)(((unint64_t)v556 + 15) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v557 = *v558;
      v557[1] = v558[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      size_t v549 = v2030;
LABEL_456:
      unsigned int v559 = (unsigned char *)((unint64_t)&v544[v549] | 1);
      uint64_t v560 = (unsigned char *)((unint64_t)&v544[v549] | 2);
      uint64_t v561 = (uint64_t)&v544[v549 + 10];
      unsigned int v562 = &v544[v549];
      unsigned int v563 = (unsigned char *)((unint64_t)&v543[v549] | 1);
      uint64_t v564 = (unsigned char *)((unint64_t)&v543[v549] | 2);
      uint64_t v565 = (uint64_t)&v543[v549 + 10];
      uint64_t v566 = &v543[v549];
      *uint64_t v566 = *v562;
      *unsigned int v563 = *v559;
      *uint64_t v564 = *v560;
      unint64_t v567 = v565 & 0xFFFFFFFFFFFFFFF8;
      uint64_t v568 = *(void **)(v561 & 0xFFFFFFFFFFFFFFF8);
      uint64_t v569 = *(void **)((v561 & 0xFFFFFFFFFFFFFFF8) + 8);
      char v570 = *(unsigned char *)((v561 & 0xFFFFFFFFFFFFFFF8) + 16);
      sub_24D3F1C98(v568, v569, v570);
      *(void *)unint64_t v567 = v568;
      *(void *)(v567 + 8) = v569;
      *(unsigned char *)(v567 + 16) = v570;
      unint64_t v571 = (unint64_t)(v566 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v572 = (unint64_t)(v562 + 34) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v573 = *(void *)(v572 + 16) >> 60;
      if (!(4 * (v573 & 3)) || ((v573 >> 2) & 0xFFFFFFF3 | (4 * (v573 & 3))) == 0xF)
      {
        uint64_t v577 = (uint64_t *)(v572 + 8);
        *(void *)unint64_t v571 = *(void *)v572;
        unint64_t v578 = *(void *)(v572 + 16);
        if (v578 >> 60 == 15)
        {
          *(_OWORD *)(v571 + 8) = *(_OWORD *)v577;
        }
        else
        {
          uint64_t v579 = *v577;
          sub_24D3F9C18(*v577, *(void *)(v572 + 16));
          *(void *)(v571 + 8) = v579;
          *(void *)(v571 + 16) = v578;
        }
        long long v580 = *(_OWORD *)(v572 + 24);
        *(unsigned char *)(v571 + 40) = *(unsigned char *)(v572 + 40);
        *(_OWORD *)(v571 + 24) = v580;
        *(void *)(v571 + 48) = *(void *)(v572 + 48);
      }
      else
      {
        long long v574 = *(_OWORD *)v572;
        long long v575 = *(_OWORD *)(v572 + 16);
        long long v576 = *(_OWORD *)(v572 + 32);
        *(void *)(v571 + 48) = *(void *)(v572 + 48);
        *(_OWORD *)(v571 + 16) = v575;
        *(_OWORD *)(v571 + 32) = v576;
        *(_OWORD *)unint64_t v571 = v574;
      }
      uint64_t v581 = (void *)((v571 + 63) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v582 = (void **)((v572 + 63) & 0xFFFFFFFFFFFFFFF8);
      v583 = *v582;
      *uint64_t v581 = *v582;
      *(void *)(((unint64_t)v581 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v582 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v535 + v1927) = *((unsigned char *)v536 + v1927);
      unint64_t v584 = ((unint64_t)v535 + v1927) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v585 = ((unint64_t)v536 + v1927) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v584 + 8) = *(void *)(v585 + 8);
      uint64_t v586 = (_OWORD *)((v584 + 23) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v587 = (_OWORD *)((v585 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v586 = *v587;
      unint64_t v588 = ((unint64_t)v586 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v589 = ((unint64_t)v587 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v588 = *(void *)v589;
      *(unsigned char *)(v588 + 8) = *(unsigned char *)(v589 + 8);
      *(void *)(((unint64_t)v586 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v587 + 39) & 0xFFFFFFFFFFFFFFF8);
      id v590 = v583;
      swift_bridgeObjectRetain();
      if (v2063 > 3) {
        goto LABEL_464;
      }
      unsigned int v591 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v591 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v2063) = 36;
        return a1;
      }
      if (v591 <= 0xD6) {
LABEL_464:
      }
        *((unsigned char *)a1 + v2063) = 36;
      else {
        *(_WORD *)((char *)a1 + v2063) = 36;
      }
      return a1;
    case 0x25u:
      unsigned int v363 = v72[v2009];
      unsigned int v364 = v363 - 2;
      if (v363 < 2)
      {
        size_t v367 = v2047;
        uint64_t v366 = v2054;
        uint64_t v368 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v365 = v2009;
        }
        else {
          uint64_t v365 = 4;
        }
        size_t v367 = v2047;
        uint64_t v366 = v2054;
        uint64_t v368 = v1997;
        switch(v365)
        {
          case 1:
            int v369 = *v72;
            goto LABEL_886;
          case 2:
            int v369 = *(unsigned __int16 *)v72;
            goto LABEL_886;
          case 3:
            int v369 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_886;
          case 4:
            int v369 = *(_DWORD *)v72;
LABEL_886:
            if (v2009 < 4) {
              unsigned int v363 = (v369 | (v364 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v363 = v369 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v740 = v363 == 1;
      if (v363 == 1) {
        uint64_t v741 = v366;
      }
      else {
        uint64_t v741 = v368;
      }
      v742 = v72;
      (*(void (**)(void *))(v741 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v740;
      *((unsigned char *)a1 + v367) = v742[v367];
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_893;
      }
      unsigned int v743 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v743 > 0xFFD6)
      {
        int v502 = 37;
        goto LABEL_975;
      }
      if (v743 <= 0xD6)
      {
LABEL_893:
        char v274 = 37;
        goto LABEL_969;
      }
      __int16 v399 = 37;
      goto LABEL_973;
    case 0x26u:
      unsigned int v370 = v72[v2009];
      unsigned int v371 = v370 - 2;
      if (v370 < 2)
      {
        uint64_t v373 = v2054;
        uint64_t v374 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v372 = v2009;
        }
        else {
          uint64_t v372 = 4;
        }
        uint64_t v373 = v2054;
        uint64_t v374 = v1997;
        switch(v372)
        {
          case 1:
            int v375 = *v72;
            goto LABEL_901;
          case 2:
            int v375 = *(unsigned __int16 *)v72;
            goto LABEL_901;
          case 3:
            int v375 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_901;
          case 4:
            int v375 = *(_DWORD *)v72;
LABEL_901:
            if (v2009 < 4) {
              unsigned int v370 = (v375 | (v371 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v370 = v375 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v744 = v370 == 1;
      if (v370 == 1) {
        uint64_t v745 = v373;
      }
      else {
        uint64_t v745 = v374;
      }
      (*(void (**)(void *))(v745 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v744;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_908;
      }
      unsigned int v746 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v746 > 0xFFD6)
      {
        int v502 = 38;
        goto LABEL_975;
      }
      if (v746 <= 0xD6)
      {
LABEL_908:
        char v274 = 38;
        goto LABEL_969;
      }
      __int16 v399 = 38;
      goto LABEL_973;
    case 0x27u:
      unsigned int v376 = v72[v2009];
      unsigned int v377 = v376 - 2;
      if (v376 < 2)
      {
        uint64_t v379 = v2054;
        uint64_t v380 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v378 = v2009;
        }
        else {
          uint64_t v378 = 4;
        }
        uint64_t v379 = v2054;
        uint64_t v380 = v1997;
        switch(v378)
        {
          case 1:
            int v381 = *v72;
            goto LABEL_916;
          case 2:
            int v381 = *(unsigned __int16 *)v72;
            goto LABEL_916;
          case 3:
            int v381 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_916;
          case 4:
            int v381 = *(_DWORD *)v72;
LABEL_916:
            if (v2009 < 4) {
              unsigned int v376 = (v381 | (v377 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v376 = v381 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v747 = v376 == 1;
      if (v376 == 1) {
        uint64_t v748 = v379;
      }
      else {
        uint64_t v748 = v380;
      }
      (*(void (**)(void *))(v748 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v747;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_923;
      }
      unsigned int v749 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v749 > 0xFFD6)
      {
        int v502 = 39;
        goto LABEL_975;
      }
      if (v749 <= 0xD6)
      {
LABEL_923:
        char v274 = 39;
        goto LABEL_969;
      }
      __int16 v399 = 39;
      goto LABEL_973;
    case 0x28u:
      unsigned int v382 = v72[v2009];
      unsigned int v383 = v382 - 2;
      if (v382 < 2)
      {
        uint64_t v385 = v2054;
        uint64_t v386 = v1997;
      }
      else
      {
        if (v2009 <= 3) {
          uint64_t v384 = v2009;
        }
        else {
          uint64_t v384 = 4;
        }
        uint64_t v385 = v2054;
        uint64_t v386 = v1997;
        switch(v384)
        {
          case 1:
            int v387 = *v72;
            goto LABEL_931;
          case 2:
            int v387 = *(unsigned __int16 *)v72;
            goto LABEL_931;
          case 3:
            int v387 = *(unsigned __int16 *)v72 | (v72[2] << 16);
            goto LABEL_931;
          case 4:
            int v387 = *(_DWORD *)v72;
LABEL_931:
            if (v2009 < 4) {
              unsigned int v382 = (v387 | (v383 << (8 * v2009))) + 2;
            }
            else {
              unsigned int v382 = v387 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v750 = v382 == 1;
      if (v382 == 1) {
        uint64_t v751 = v385;
      }
      else {
        uint64_t v751 = v386;
      }
      (*(void (**)(void *))(v751 + 16))(a1);
      *((unsigned char *)a1 + v2009) = v750;
      uint64_t v273 = v2063;
      if (v2063 > 3) {
        goto LABEL_938;
      }
      unsigned int v752 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      if (v752 > 0xFFD6)
      {
        int v502 = 40;
LABEL_975:
        *(_DWORD *)((char *)a1 + v273) = v502;
      }
      else if (v752 <= 0xD6)
      {
LABEL_938:
        char v274 = 40;
LABEL_969:
        *((unsigned char *)a1 + v273) = v274;
      }
      else
      {
        __int16 v399 = 40;
LABEL_973:
        *(_WORD *)((char *)a1 + v273) = v399;
      }
      return a1;
    default:
      if (v2063 > 3) {
        goto LABEL_129;
      }
      unsigned int v88 = ((1 << (8 * v2063)) + 5) >> (8 * v2063);
      uint64_t v89 = 2;
      if (v88 > 0xFFD6) {
        uint64_t v89 = 4;
      }
      if (v88 <= 0xD6) {
LABEL_129:
      }
        uint64_t v89 = 1;
      memcpy(a1, v72, v89 + v2063);
      return a1;
  }
}

#error "24D5318F0: too big function (funcsize=0)"

unsigned char *sub_24D5421E0(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v1673 = *(void *)(a3 + 24);
  uint64_t v1660 = swift_getAssociatedTypeWitness();
  uint64_t v1705 = *(void *)(v1660 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v1705 + 80);
  uint64_t v1627 = v6 + v7;
  uint64_t v1712 = v7;
  unint64_t v1671 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v1705 + 64);
  unint64_t v1687 = v8;
  unint64_t v9 = v1671 + v8;
  unint64_t v1683 = v1671 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v1669 = v8;
  unint64_t v11 = v8 + 1;
  size_t v1700 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | v7;
  uint64_t v1670 = v13;
  unint64_t v1654 = v13 + v11;
  unint64_t v1684 = ((v13 + v11) & ~v13) + v11;
  if (v1684 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v1682 = v9;
  uint64_t v1658 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v1674 = v4;
  uint64_t v1640 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1640 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1636 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1636 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1604 = v18;
  unsigned int v1623 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1608 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v1680 = v14;
  unsigned int v1630 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v1652 = sub_24DCC8CE8();
  uint64_t v19 = *(void *)(v1652 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v1665 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1607 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1622 = v21;
  unsigned int v1639 = *(_DWORD *)(v19 + 84);
  unint64_t v1690 = v10;
  uint64_t v1648 = v10 + v12;
  uint64_t v1721 = v12;
  uint64_t v1641 = v15;
  uint64_t v1637 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1620 = v10 + v23;
  uint64_t v1679 = v23;
  uint64_t v1646 = *(void *)(v15 + 64) + 7;
  uint64_t v1635 = v22 + 8;
  uint64_t v1661 = v22;
  uint64_t v1631 = *(void *)(v17 + 64) + 7;
  size_t v1697 = ((((v1631 + ((v22 + 8 + (v1646 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1653 = *(void *)(v1652 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v1707 = v24 | 7;
  uint64_t v1699 = (v24 | 7) + 16;
  uint64_t v1655 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v1651 = v25 + v24;
  size_t v1603 = v25 + 12;
  uint64_t v1649 = v24 + 10;
  size_t v1657 = v25;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t __n = v26;
  size_t v1650 = v26 + 7;
  unint64_t v1633 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  unint64_t v1696 = ((((((((((v26 + 7 + v1633) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1628 = (v1699 + v1697 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v1628 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v1694 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1626 = v27 + 23;
  unint64_t v1667 = ((v27 + 23 + ((v27 + 16 + v28) & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v1705 + 84);
  uint64_t v1642 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1642 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v1638 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v1638 - 8);
  unsigned int v33 = *(_DWORD *)(v32 + 84);
  unsigned int v1605 = v33;
  unsigned int v1624 = v31;
  if (v31 > v33) {
    unsigned int v33 = v31;
  }
  unsigned int v1618 = v33;
  if (v33 <= 0x7FFFFFFE) {
    unsigned int v33 = 2147483646;
  }
  unsigned int v1634 = v33;
  if (v33 <= v29) {
    unsigned int v33 = v29;
  }
  if (v33 <= v1665) {
    unsigned int v33 = v1665;
  }
  unsigned int v1606 = v33;
  if (v33 <= 0x7FFFFFFF) {
    unsigned int v33 = 0x7FFFFFFF;
  }
  unsigned int v1629 = v33;
  uint64_t v1647 = v1687 + v1712;
  uint64_t v1643 = v30;
  uint64_t v1645 = *(void *)(v1638 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = *(_DWORD *)(v30 + 80) & 0xF8 | v34 | 7;
  uint64_t v1619 = v1687 + v35;
  uint64_t v1666 = *(void *)(v30 + 64) + 7;
  uint64_t v1644 = v34 + 8;
  uint64_t v1632 = *(void *)(v1645 + 64) + 7;
  unint64_t v36 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v1617 = (v1699 + v36 + ((v1687 + v35 + ((v1687 + v1712) & ~v1712)) & ~v35)) & ~v1707;
  unint64_t v37 = (((v1617 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v38 = v37 + 16;
  uint64_t v39 = v35 | v1712;
  uint64_t v40 = v24;
  uint64_t v41 = v35 | v1712 | v24;
  unint64_t v42 = v37 + ((v37 + 16 + v41) & ~v41);
  uint64_t v1681 = v28;
  unint64_t v1602 = v28 + v10;
  size_t v43 = v1694 + ((v28 + v10) & ~v28);
  unint64_t v44 = (v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v1621 = v29;
  if (v29) {
    size_t v45 = v1687;
  }
  else {
    size_t v45 = v1687 + 1;
  }
  uint64_t v46 = *(void *)(v1674 - 8);
  uint64_t v47 = *(unsigned __int8 *)(v46 + 80);
  uint64_t v1599 = v46;
  unint64_t v48 = ((v44 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v49 = ((((((v45 + v35 + ((v43 + v1712) & ~v1712)) & ~v35) + v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v50 = ((v44 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (*(_DWORD *)(v46 + 84)) {
    uint64_t v51 = *(void *)(*(void *)(v1674 - 8) + 64);
  }
  else {
    uint64_t v51 = *(void *)(*(void *)(v1674 - 8) + 64) + 1;
  }
  if (v10 <= v48) {
    unint64_t v52 = v48;
  }
  else {
    unint64_t v52 = v10;
  }
  if (v49 <= v36 + ((v45 + v35 + v1671) & ~v35) + 16) {
    unint64_t v49 = v36 + ((v45 + v35 + v1671) & ~v35) + 16;
  }
  uint64_t v1598 = v10 + v47;
  size_t v1595 = v51;
  if (v50 <= ((v10 + v47) & ~v47) + v51) {
    unint64_t v50 = ((v10 + v47) & ~v47) + v51;
  }
  if (v52 <= v49) {
    unint64_t v52 = v49;
  }
  if (v52 <= v50) {
    unint64_t v53 = v50;
  }
  else {
    unint64_t v53 = v52;
  }
  if (v1680) {
    size_t v54 = v10;
  }
  else {
    size_t v54 = v10 + 1;
  }
  uint64_t v55 = *(void *)(v1673 - 8);
  uint64_t v56 = *(unsigned __int8 *)(v55 + 80);
  uint64_t v1672 = v41;
  unint64_t v1601 = v41 + v1687;
  size_t v57 = v38 + ((v41 + v1687) & ~v41);
  unint64_t v58 = (v57 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v59 = ((((((v54 + v1679 + ((v57 + v1721) & ~v1721)) & ~v1679) + v1697 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1597 = v1687 + v1721;
  size_t v1600 = v54 + v1679;
  if (*(_DWORD *)(v55 + 84)) {
    uint64_t v60 = *(void *)(*(void *)(v1673 - 8) + 64);
  }
  else {
    uint64_t v60 = *(void *)(*(void *)(v1673 - 8) + 64) + 1;
  }
  if (v1687 <= ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v61 = ((v58 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v61 = v1687;
  }
  if (v59 <= v1697 + ((v54 + v1679 + ((v1687 + v1721) & ~v1721)) & ~v1679) + 16) {
    unint64_t v59 = v1697 + ((v54 + v1679 + ((v1687 + v1721) & ~v1721)) & ~v1679) + 16;
  }
  unint64_t v62 = ((v58 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1596 = v1687 + v56;
  size_t v1594 = v60;
  if (v62 <= ((v1687 + v56) & ~v56) + v60) {
    unint64_t v62 = ((v1687 + v56) & ~v56) + v60;
  }
  if (v61 <= v59) {
    unint64_t v61 = v59;
  }
  if (v61 <= v62) {
    unint64_t v63 = v62;
  }
  else {
    unint64_t v63 = v61;
  }
  unint64_t v1609 = v63;
  unint64_t v64 = v63 + 1;
  if (v64 <= v53 + 1) {
    unint64_t v65 = v53 + 1;
  }
  else {
    unint64_t v65 = v64;
  }
  if (v1700 > v1669 + 2) {
    unint64_t v66 = v1669 + 1;
  }
  else {
    unint64_t v66 = v1669 + 2;
  }
  if (v66 <= v1667) {
    unint64_t v66 = v1667;
  }
  size_t v1616 = v54;
  unint64_t v1612 = ((((((((v1679 + ((((v54 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v1679) + v1697 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v39
        + 8;
  size_t v1613 = v45 + 7;
  uint64_t v1614 = v35 + 9;
  unint64_t v1615 = ((((((((v35 + 9 + ((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v35) + v36 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  unint64_t v1625 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v66 <= v1625) {
    unint64_t v66 = ((v42 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unint64_t v67 = (unint64_t)a2;
  if (v66 <= v1694) {
    unint64_t v66 = v1694;
  }
  if (v66 <= v38) {
    unint64_t v66 = v38;
  }
  if (v66 <= v1684 + 2) {
    unint64_t v66 = v1684 + 2;
  }
  if (v66 <= ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v66 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v66 <= (v1669 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v66 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v66 <= v1683) {
    unint64_t v66 = v1683;
  }
  if (v66 <= ((v1670 + 1) & ~v1670) + v1700) {
    unint64_t v66 = ((v1670 + 1) & ~v1670) + v1700;
  }
  unint64_t v68 = v65 + 1;
  unint64_t v69 = v65;
  if (v66 <= v65 + 1) {
    unint64_t v66 = v65 + 1;
  }
  if (v66 <= v1684) {
    unint64_t v66 = v1684;
  }
  if (v66 <= ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v66 = ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v66 <= v1682) {
    unint64_t v66 = v1682;
  }
  if (v66 <= 0x38) {
    uint64_t v70 = 56;
  }
  else {
    uint64_t v70 = v66;
  }
  if (v70 > 3)
  {
LABEL_105:
    unsigned int v71 = a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29)
    {
LABEL_106:
      if (v70 <= 3) {
        uint64_t v73 = v70;
      }
      else {
        uint64_t v73 = 4;
      }
      uint64_t v74 = v1670;
      switch(v73)
      {
        case 1:
          int v75 = *a2;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 2:
          int v75 = *(unsigned __int16 *)a2;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 3:
          int v75 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          uint64_t v74 = v1670;
          if (v70 >= 4) {
            goto LABEL_127;
          }
          goto LABEL_126;
        case 4:
          int v75 = *(_DWORD *)a2;
          if (v70 < 4)
          {
LABEL_126:
            uint64_t v74 = v1670;
            v75 |= v72 << (8 * v70);
          }
LABEL_127:
          unsigned int v71 = v75 + 41;
          if (v71 <= 0x28) {
            goto LABEL_118;
          }
LABEL_128:
          if (v70 > 3) {
            goto LABEL_132;
          }
          unsigned int v87 = ((1 << (8 * v70)) + 5) >> (8 * v70);
          uint64_t v88 = 2;
          if (v87 > 0xFFD6) {
            uint64_t v88 = 4;
          }
          if (v87 <= 0xD6) {
LABEL_132:
          }
            uint64_t v88 = 1;
          uint64_t v86 = a1;
          memcpy(a1, (const void *)v67, v88 + v70);
          break;
        default:
          goto LABEL_118;
      }
      return v86;
    }
    goto LABEL_117;
  }
  unsigned int v76 = ((1 << (8 * v70)) + 5) >> (8 * v70);
  if (v76 > 0xFFD6)
  {
    unsigned int v71 = *(_DWORD *)&a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29) {
      goto LABEL_106;
    }
  }
  else
  {
    if (v76 <= 0xD6) {
      goto LABEL_105;
    }
    unsigned int v71 = *(unsigned __int16 *)&a2[v70];
    unsigned int v72 = v71 - 41;
    if (v71 >= 0x29) {
      goto LABEL_106;
    }
  }
LABEL_117:
  uint64_t v74 = v1670;
LABEL_118:
  size_t v1592 = v45 + v35;
  size_t v1593 = v45;
  uint64_t v1668 = v70;
  unint64_t v1610 = ((((v1615 + (v1612 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v1611 = v68;
  uint64_t v77 = ~v1712;
  uint64_t v78 = ~v74;
  uint64_t v70 = ~v1721;
  uint64_t v79 = ~v1679;
  unint64_t v67 = ~v1661;
  uint64_t v80 = ~v1707;
  uint64_t v81 = ~v40;
  uint64_t v82 = ~v1681;
  uint64_t v83 = ~v35;
  uint64_t v84 = v74;
  uint64_t v85 = ~v34;
  switch(v71)
  {
    case 0u:
      uint64_t v86 = a1;
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness, v69);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32))(((unint64_t)a1 + v1627) & v77, (unint64_t)&a2[v1627] & v77, v1660);
      if (v1668 > 3) {
        goto LABEL_120;
      }
      unsigned int v405 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v405 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 0;
      }
      else if (v405 <= 0xD6)
      {
LABEL_120:
        *((unsigned char *)a1 + v1668) = 0;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 0;
      }
      return v86;
    case 1u:
      unsigned int v89 = a2[v1669];
      unsigned int v90 = v89 - 2;
      if (v89 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v92 = v1705;
        uint64_t v94 = v1658;
        uint64_t v93 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v91 = v1669;
        }
        else {
          uint64_t v91 = 4;
        }
        uint64_t v92 = v1705;
        uint64_t v93 = v1668;
        uint64_t v86 = a1;
        uint64_t v94 = v1658;
        switch(v91)
        {
          case 1:
            int v95 = *a2;
            goto LABEL_456;
          case 2:
            int v95 = *(unsigned __int16 *)a2;
            goto LABEL_456;
          case 3:
            int v95 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_456;
          case 4:
            int v95 = *(_DWORD *)a2;
LABEL_456:
            if (v1669 < 4) {
              unsigned int v89 = (v95 | (v90 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v89 = v95 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v560 = v89 == 1;
      if (v89 == 1) {
        uint64_t v561 = v92;
      }
      else {
        uint64_t v561 = v94;
      }
      (*(void (**)(unsigned char *))(v561 + 32))(v86);
      v86[v1669] = v560;
      if (v93 > 3) {
        goto LABEL_463;
      }
      unsigned int v562 = ((1 << (8 * v93)) + 5) >> (8 * v93);
      if (v562 > 0xFFD6)
      {
        *(_DWORD *)&v86[v93] = 1;
      }
      else if (v562 <= 0xD6)
      {
LABEL_463:
        v86[v93] = 1;
      }
      else
      {
        *(_WORD *)&v86[v93] = 1;
      }
      return v86;
    case 2u:
      unsigned int v96 = a2[v1669];
      unsigned int v97 = v96 - 2;
      if (v96 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v99 = v1705;
        uint64_t v101 = v1658;
        uint64_t v100 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v98 = v1669;
        }
        else {
          uint64_t v98 = 4;
        }
        uint64_t v99 = v1705;
        uint64_t v100 = v1668;
        uint64_t v86 = a1;
        uint64_t v101 = v1658;
        switch(v98)
        {
          case 1:
            int v102 = *a2;
            goto LABEL_471;
          case 2:
            int v102 = *(unsigned __int16 *)a2;
            goto LABEL_471;
          case 3:
            int v102 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_471;
          case 4:
            int v102 = *(_DWORD *)a2;
LABEL_471:
            if (v1669 < 4) {
              unsigned int v96 = (v102 | (v97 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v96 = v102 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v563 = v96 == 1;
      if (v96 == 1) {
        uint64_t v564 = v99;
      }
      else {
        uint64_t v564 = v101;
      }
      (*(void (**)(unsigned char *))(v564 + 32))(v86);
      v86[v1669] = v563;
      if (v100 > 3) {
        goto LABEL_478;
      }
      unsigned int v565 = ((1 << (8 * v100)) + 5) >> (8 * v100);
      if (v565 > 0xFFD6)
      {
        *(_DWORD *)&v86[v100] = 2;
      }
      else if (v565 <= 0xD6)
      {
LABEL_478:
        v86[v100] = 2;
      }
      else
      {
        *(_WORD *)&v86[v100] = 2;
      }
      return v86;
    case 3u:
      unsigned int v103 = a2[v1669];
      unsigned int v104 = v103 - 2;
      if (v103 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v106 = v1705;
        uint64_t v108 = v1658;
        uint64_t v107 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v105 = v1669;
        }
        else {
          uint64_t v105 = 4;
        }
        uint64_t v106 = v1705;
        uint64_t v107 = v1668;
        uint64_t v86 = a1;
        uint64_t v108 = v1658;
        switch(v105)
        {
          case 1:
            int v109 = *a2;
            goto LABEL_486;
          case 2:
            int v109 = *(unsigned __int16 *)a2;
            goto LABEL_486;
          case 3:
            int v109 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_486;
          case 4:
            int v109 = *(_DWORD *)a2;
LABEL_486:
            if (v1669 < 4) {
              unsigned int v103 = (v109 | (v104 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v103 = v109 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v566 = v103 == 1;
      if (v103 == 1) {
        uint64_t v567 = v106;
      }
      else {
        uint64_t v567 = v108;
      }
      (*(void (**)(unsigned char *))(v567 + 32))(v86);
      v86[v1669] = v566;
      if (v107 > 3) {
        goto LABEL_493;
      }
      unsigned int v568 = ((1 << (8 * v107)) + 5) >> (8 * v107);
      if (v568 > 0xFFD6)
      {
        *(_DWORD *)&v86[v107] = 3;
      }
      else if (v568 <= 0xD6)
      {
LABEL_493:
        v86[v107] = 3;
      }
      else
      {
        *(_WORD *)&v86[v107] = 3;
      }
      return v86;
    case 4u:
      unsigned int v110 = a2[v1669];
      unsigned int v111 = v110 - 2;
      if (v110 < 2)
      {
        uint64_t v116 = v78;
        uint64_t v112 = v1668;
        uint64_t v86 = a1;
        uint64_t v114 = v1660;
        uint64_t v117 = AssociatedTypeWitness;
        uint64_t v115 = v1705;
        uint64_t v118 = v1658;
      }
      else
      {
        uint64_t v112 = v1668;
        if (v1669 <= 3) {
          uint64_t v113 = v1669;
        }
        else {
          uint64_t v113 = 4;
        }
        uint64_t v114 = v1660;
        uint64_t v115 = v1705;
        uint64_t v116 = v78;
        uint64_t v86 = a1;
        uint64_t v117 = AssociatedTypeWitness;
        uint64_t v118 = v1658;
        switch(v113)
        {
          case 1:
            int v119 = *a2;
            goto LABEL_501;
          case 2:
            int v119 = *(unsigned __int16 *)a2;
            goto LABEL_501;
          case 3:
            int v119 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_501;
          case 4:
            int v119 = *(_DWORD *)a2;
LABEL_501:
            if (v1669 < 4) {
              unsigned int v110 = (v119 | (v111 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v110 = v119 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v569 = v110 == 1;
      if (v110 == 1) {
        uint64_t v570 = v115;
      }
      else {
        uint64_t v570 = v118;
      }
      if (v110 == 1) {
        uint64_t v571 = v114;
      }
      else {
        uint64_t v571 = v117;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v570 + 32))(v86, a2, v571, v69);
      v86[v1669] = v569;
      unint64_t v572 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v116);
      unsigned int v573 = v572[v1669];
      unsigned int v574 = v573 - 2;
      if (v573 >= 2)
      {
        if (v1669 <= 3) {
          uint64_t v575 = v1669;
        }
        else {
          uint64_t v575 = 4;
        }
        switch(v575)
        {
          case 1:
            int v576 = *v572;
            goto LABEL_937;
          case 2:
            int v576 = *(unsigned __int16 *)v572;
            goto LABEL_937;
          case 3:
            int v576 = *(unsigned __int16 *)v572 | (*(unsigned __int8 *)(((unint64_t)&a2[v1654] & v116) + 2) << 16);
            goto LABEL_937;
          case 4:
            int v576 = *(_DWORD *)v572;
LABEL_937:
            if (v1669 < 4) {
              unsigned int v573 = (v576 | (v574 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v573 = v576 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v680 = v573 == 1;
      if (v573 == 1) {
        uint64_t v681 = v115;
      }
      else {
        uint64_t v681 = v118;
      }
      (*(void (**)(unint64_t))(v681 + 32))((unint64_t)&v86[v1654] & v116);
      *(unsigned char *)(((unint64_t)&v86[v1654] & v116) + v1669) = v680;
      if (v112 > 3) {
        goto LABEL_944;
      }
      unsigned int v682 = ((1 << (8 * v112)) + 5) >> (8 * v112);
      if (v682 > 0xFFD6)
      {
        *(_DWORD *)&v86[v112] = 4;
      }
      else if (v682 <= 0xD6)
      {
LABEL_944:
        v86[v112] = 4;
      }
      else
      {
        *(_WORD *)&v86[v112] = 4;
      }
      return v86;
    case 5u:
      uint64_t v1675 = ~v1661;
      uint64_t v120 = ~v40;
      uint64_t v1569 = ~v1721;
      uint64_t v1688 = ~v1679;
      uint64_t v1713 = ~v1707;
      uint64_t v121 = v1680;
      unsigned int v122 = v1622;
      size_t v1571 = v38;
      uint64_t v1576 = ~v1681;
      if (v1680 != v1622)
      {
        uint64_t v126 = ~v1721;
        unint64_t v406 = (unint64_t)&a2[v1648] & v1569;
        uint64_t v125 = ~v1679;
        unint64_t v407 = (v406 + v1690 + v1679) & v1688;
        if (v1630 == v1622)
        {
          size_t v124 = __n;
          if (v1623 == v1630)
          {
            int v123 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v406 + v1690 + v1679) & v1688);
            uint64_t v86 = a1;
            goto LABEL_969;
          }
          unsigned int v556 = (unint64_t *)((v1646 + v407) & 0xFFFFFFFFFFFFFFF8);
          uint64_t v86 = a1;
          if (v1608 > 0x7FFFFFFE)
          {
            int v123 = (*(uint64_t (**)(unint64_t, void, uint64_t, unint64_t))(v1637 + 48))(((unint64_t)v556 + v1635) & v1675, v1604, v1636, v69);
            goto LABEL_969;
          }
          unint64_t v557 = *v556;
        }
        else
        {
          size_t v500 = v1697 + v407;
          size_t v124 = __n;
          if ((v1607 & 0x80000000) == 0)
          {
            unint64_t v501 = *(void *)(v500 + 8);
            if (v501 >= 0xFFFFFFFF) {
              LODWORD(v501) = -1;
            }
            int v123 = v501 + 1;
            uint64_t v86 = a1;
            goto LABEL_969;
          }
          uint64_t v686 = (v1655 + ((v1699 + v500) & v1713)) & v81;
          uint64_t v86 = a1;
          if (v1639 > 0x7FFFFFFD)
          {
            int v123 = (*(uint64_t (**)(uint64_t, void, uint64_t, unint64_t))(v1653 + 48))(v686, v1639, v1652, v69);
            goto LABEL_969;
          }
          unint64_t v557 = *(void *)(((v1603 + ((v1651 + v686) & v81)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v557 >= 0xFFFFFFFF) {
          LODWORD(v557) = -1;
        }
        if ((v557 + 1) >= 2) {
          goto LABEL_970;
        }
        goto LABEL_973;
      }
      int v123 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, unint64_t))(v1658 + 48))(a2, v1680, AssociatedTypeWitness, v69);
      uint64_t v86 = a1;
      size_t v124 = __n;
      uint64_t v125 = ~v1679;
      uint64_t v126 = ~v1721;
LABEL_969:
      if (v123)
      {
LABEL_970:
        memcpy(v86, a2, v1694);
LABEL_971:
        size_t v691 = v124;
        goto LABEL_977;
      }
      unint64_t v406 = (unint64_t)&a2[v1648] & v126;
      unint64_t v407 = (v406 + v1690 + v1679) & v125;
LABEL_973:
      uint64_t v692 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1658 + 32);
      v692(v86, a2, AssociatedTypeWitness);
      unint64_t v693 = (unint64_t)&v86[v1648] & v126;
      v692((unsigned char *)v693, (unsigned __int8 *)v406, AssociatedTypeWitness);
      unint64_t v694 = (v693 + v1690 + v1679) & v125;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v694, v407, v1640);
      uint64_t v695 = (void *)((v1646 + v694) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v696 = (void *)((v1646 + v407) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v695 = *v696;
      unint64_t v697 = ((unint64_t)v695 + v1635) & v1675;
      unint64_t v698 = ((unint64_t)v696 + v1635) & v1675;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v697, v698, v1636);
      unsigned int v699 = (void *)((v1631 + v697) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v700 = (void *)((v1631 + v698) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v699 = *v700;
      *(_OWORD *)(((unint64_t)v699 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v700 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1697 + v694) = *(_OWORD *)(v1697 + v407);
      size_t v701 = (v1699 + v1697 + v694) & v1713;
      size_t v702 = (v1699 + v1697 + v407) & v1713;
      *(unsigned char *)size_t v701 = *(unsigned char *)v702;
      uint64_t v703 = v701 | 4;
      int v704 = *(_DWORD *)(v702 | 4);
      *(unsigned char *)(v703 + 4) = *(unsigned char *)((v702 | 4) + 4);
      *(_DWORD *)uint64_t v703 = v704;
      *(_WORD *)(v701 + 10) = *(_WORD *)(v702 + 0xA);
      unsigned int v705 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v705((v1655 + v701) & v120, (v1655 + v702) & v120, v1652);
      size_t v706 = (v1651 + ((v1655 + v701) & v120)) & v120;
      size_t v707 = (v1651 + ((v1655 + v702) & v120)) & v120;
      v705(v706, v707, v1652);
      uint64_t v708 = (unsigned char *)(v706 + v1657);
      *uint64_t v708 = *(unsigned char *)(v707 + v1657);
      v708[1] = *(unsigned char *)(v707 + v1657 + 1);
      v708[2] = *(unsigned char *)(v707 + v1657 + 2);
      v708[3] = *(unsigned char *)(v707 + v1657 + 3);
      v708[4] = *(unsigned char *)(v707 + v1657 + 4);
      unint64_t v709 = (v706 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v710 = (v707 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v709 = *(_OWORD *)v710;
      *(unsigned char *)(v709 + 16) = *(unsigned char *)(v710 + 16);
      *(unsigned char *)(v709 + 17) = *(unsigned char *)(v710 + 17);
      *(unsigned char *)(v709 + 18) = *(unsigned char *)(v710 + 18);
      *(unsigned char *)(v709 + 19) = *(unsigned char *)(v710 + 19);
      unint64_t v711 = (v709 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v712 = (v710 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v711 = *(void *)v712;
      *(unsigned char *)(v711 + 8) = *(unsigned char *)(v712 + 8);
      *(unsigned char *)(v711 + 9) = *(unsigned char *)(v712 + 9);
      *(unsigned char *)(v711 + 10) = *(unsigned char *)(v712 + 10);
      *(unsigned char *)(v711 + 11) = *(unsigned char *)(v712 + 11);
      *(unsigned char *)(v711 + 12) = *(unsigned char *)(v712 + 12);
      unsigned int v713 = (void *)((v710 + 47) & 0xFFFFFFFFFFFFFFF8);
      BOOL v714 = (void *)((v709 + 47) & 0xFFFFFFFFFFFFFFF8);
      *BOOL v714 = *v713;
      unint64_t v715 = ((unint64_t)v714 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v716 = ((unint64_t)v713 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v715 = *(void *)v716;
      *(unsigned char *)(v715 + 8) = *(unsigned char *)(v716 + 8);
      *(unsigned char *)(v715 + 9) = *(unsigned char *)(v716 + 9);
      BOOL v717 = (void *)((v1649 + v715) & v120);
      uint64_t v718 = (const void *)((v1649 + v716) & v120);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v718, 1, v1652))
      {
        memcpy(v717, v718, v124);
      }
      else
      {
        v705((size_t)v717, (size_t)v718, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v717, 0, 1, v1652);
      }
      unsigned int v122 = v1622;
      unsigned int v719 = (void *)(((unint64_t)v718 + v1650) & 0xFFFFFFFFFFFFFFF8);
      BOOL v720 = (void *)(((unint64_t)v717 + v1650) & 0xFFFFFFFFFFFFFFF8);
      *BOOL v720 = *v719;
      unint64_t v721 = ((unint64_t)v720 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v722 = ((unint64_t)v719 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v723 = *(void *)v722;
      *(unsigned char *)(v721 + 8) = *(unsigned char *)(v722 + 8);
      *(void *)unint64_t v721 = v723;
      unsigned int v724 = (void *)(((unint64_t)v720 + 31) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v725 = (void *)(((unint64_t)v719 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v724 = *v725;
      uint64_t v726 = (_OWORD *)(((unint64_t)v724 + 15) & 0xFFFFFFFFFFFFFFF8);
      int v727 = (_OWORD *)(((unint64_t)v725 + 15) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v726 = *v727;
      unint64_t v728 = ((unint64_t)v726 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v729 = ((unint64_t)v727 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v730 = *(void *)v729;
      *(unsigned char *)(v728 + 8) = *(unsigned char *)(v729 + 8);
      *(void *)unint64_t v728 = v730;
      *(unsigned char *)(v728 + 9) = *(unsigned char *)(v729 + 9);
      unint64_t v731 = (v728 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v732 = (v729 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v723) = *(_DWORD *)v732;
      *(unsigned char *)(v731 + 4) = *(unsigned char *)(v732 + 4);
      *(_DWORD *)unint64_t v731 = v723;
      *(_OWORD *)((v728 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v729 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v733 = v1696 + v701;
      long long v734 = *(_OWORD *)(v1696 + v702 + 112);
      long long v736 = *(_OWORD *)(v1696 + v702 + 64);
      long long v735 = *(_OWORD *)(v1696 + v702 + 80);
      *(_OWORD *)(v733 + 96) = *(_OWORD *)(v1696 + v702 + 96);
      *(_OWORD *)(v733 + 112) = v734;
      *(_OWORD *)(v733 + 64) = v736;
      *(_OWORD *)(v733 + 80) = v735;
      long long v737 = *(_OWORD *)(v1696 + v702 + 176);
      long long v739 = *(_OWORD *)(v1696 + v702 + 128);
      long long v738 = *(_OWORD *)(v1696 + v702 + 144);
      *(_OWORD *)(v733 + 160) = *(_OWORD *)(v1696 + v702 + 160);
      *(_OWORD *)(v733 + 176) = v737;
      *(_OWORD *)(v733 + 128) = v739;
      *(_OWORD *)(v733 + 144) = v738;
      long long v741 = *(_OWORD *)(v1696 + v702 + 208);
      long long v740 = *(_OWORD *)(v1696 + v702 + 224);
      long long v742 = *(_OWORD *)(v1696 + v702 + 192);
      *(void *)(v733 + 240) = *(void *)(v1696 + v702 + 240);
      *(_OWORD *)(v733 + 208) = v741;
      *(_OWORD *)(v733 + 224) = v740;
      *(_OWORD *)(v733 + 192) = v742;
      long long v743 = *(_OWORD *)(v1696 + v702);
      long long v744 = *(_OWORD *)(v1696 + v702 + 16);
      long long v745 = *(_OWORD *)(v1696 + v702 + 48);
      *(_OWORD *)(v733 + 32) = *(_OWORD *)(v1696 + v702 + 32);
      *(_OWORD *)(v733 + 48) = v745;
      *(_OWORD *)unint64_t v733 = v743;
      *(_OWORD *)(v733 + 16) = v744;
      unsigned int v746 = (_OWORD *)((v1696 + v701 + 255) & 0xFFFFFFFFFFFFFFF8);
      BOOL v747 = (long long *)((v1696 + v702 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v748 = *v747;
      *(_OWORD *)((char *)v746 + 9) = *(long long *)((char *)v747 + 9);
      *unsigned int v746 = v748;
      unint64_t v749 = (v1696 + v701 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v750 = (v1696 + v702 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v751 = *(_OWORD *)v750;
      *(unsigned char *)(v749 + 16) = *(unsigned char *)(v750 + 16);
      *(_OWORD *)unint64_t v749 = v751;
      unsigned int v752 = (void *)((v1696 + v701 + 311) & 0xFFFFFFFFFFFFFFF8);
      BOOL v753 = (void *)((v1696 + v702 + 311) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v752 = *v753;
      *(_OWORD *)(((unint64_t)v752 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v753 + 15) & 0xFFFFFFFFFFFFFFF8);
      size_t v691 = v1657;
      uint64_t v86 = a1;
      uint64_t v125 = ~v1679;
      uint64_t v121 = v1680;
      if (!v1639) {
        goto LABEL_971;
      }
LABEL_977:
      unint64_t v754 = ((((v1628
               + 327
               + ((((((((((v1633 + 7 + v691) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      size_t v1722 = (void *)((unint64_t)&v86[v1681 + v754] & v1576);
      unsigned int v755 = (const void *)((unint64_t)&a2[v1681 + v754] & v1576);
      uint64_t v1706 = v1628 + 327;
      unint64_t v1711 = v1633 + 7;
      if (v121 == v122)
      {
        int v756 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v755, v121, AssociatedTypeWitness);
        goto LABEL_979;
      }
      unint64_t v768 = ((unint64_t)v755 + v1648) & v1569;
      unint64_t v769 = (v1620 + v768) & v125;
      if (v1630 == v122)
      {
        if (v1623 == v1630)
        {
          int v756 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1641 + 48))((v1620 + v768) & v125, v1623, v1640);
          goto LABEL_979;
        }
        uint64_t v838 = (unint64_t *)((v1646 + v769) & 0xFFFFFFFFFFFFFFF8);
        if (v1608 <= 0x7FFFFFFE)
        {
          unint64_t v839 = *v838;
          goto LABEL_1186;
        }
        int v756 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v838 + v1635) & v1675, v1604, v1636);
      }
      else
      {
        size_t v770 = v769 + v1697;
        if ((v1607 & 0x80000000) == 0)
        {
          unint64_t v771 = *(void *)(v770 + 8);
          if (v771 >= 0xFFFFFFFF) {
            LODWORD(v771) = -1;
          }
          if (v771 != -1) {
            goto LABEL_980;
          }
          goto LABEL_989;
        }
        uint64_t v840 = (v1655 + ((v1699 + v770) & v1713)) & v120;
        if (v1639 <= 0x7FFFFFFD)
        {
          unint64_t v839 = *(void *)(((v1603 + ((v1651 + v840) & v120)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1186:
          if (v839 >= 0xFFFFFFFF) {
            LODWORD(v839) = -1;
          }
          if ((v839 + 1) >= 2) {
            goto LABEL_980;
          }
LABEL_990:
          uint64_t v772 = v120;
          v773 = *(void (**)(void *))(v1658 + 32);
          v1728 = v755;
          v773(v1722);
          unint64_t v774 = ((unint64_t)v1722 + v1648) & v1569;
          ((void (*)(unint64_t, unint64_t, uint64_t))v773)(v774, v768, AssociatedTypeWitness);
          unint64_t v775 = (v1620 + v774) & v125;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v775, v769, v1640);
          v776 = (void *)((v1646 + v775) & 0xFFFFFFFFFFFFFFF8);
          v777 = (void *)((v1646 + v769) & 0xFFFFFFFFFFFFFFF8);
          void *v776 = *v777;
          unint64_t v778 = ((unint64_t)v776 + v1635) & v1675;
          unint64_t v779 = ((unint64_t)v777 + v1635) & v1675;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v778, v779, v1636);
          uint64_t v780 = (void *)((v1631 + v778) & 0xFFFFFFFFFFFFFFF8);
          int v781 = (void *)((v1631 + v779) & 0xFFFFFFFFFFFFFFF8);
          *uint64_t v780 = *v781;
          *(_OWORD *)(((unint64_t)v780 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v781 + 15) & 0xFFFFFFFFFFFFFFF8);
          *(_OWORD *)(v775 + v1697) = *(_OWORD *)(v769 + v1697);
          size_t v782 = (v1699 + v775 + v1697) & v1713;
          size_t v783 = (v1699 + v769 + v1697) & v1713;
          *(unsigned char *)size_t v782 = *(unsigned char *)v783;
          uint64_t v784 = v782 | 4;
          int v785 = *(_DWORD *)(v783 | 4);
          *(unsigned char *)(v784 + 4) = *(unsigned char *)((v783 | 4) + 4);
          *(_DWORD *)uint64_t v784 = v785;
          *(_WORD *)(v782 + 10) = *(_WORD *)(v783 + 0xA);
          size_t v786 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
          v786((v1655 + v782) & v772, (v1655 + v783) & v772, v1652);
          size_t v787 = (v1651 + ((v1655 + v782) & v772)) & v772;
          size_t v788 = (v1651 + ((v1655 + v783) & v772)) & v772;
          v786(v787, v788, v1652);
          unint64_t v789 = (unsigned char *)(v787 + v1657);
          *unint64_t v789 = *(unsigned char *)(v788 + v1657);
          v789[1] = *(unsigned char *)(v788 + v1657 + 1);
          v789[2] = *(unsigned char *)(v788 + v1657 + 2);
          v789[3] = *(unsigned char *)(v788 + v1657 + 3);
          v789[4] = *(unsigned char *)(v788 + v1657 + 4);
          unint64_t v790 = (v787 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v791 = (v788 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
          *(_OWORD *)unint64_t v790 = *(_OWORD *)v791;
          *(unsigned char *)(v790 + 16) = *(unsigned char *)(v791 + 16);
          *(unsigned char *)(v790 + 17) = *(unsigned char *)(v791 + 17);
          *(unsigned char *)(v790 + 18) = *(unsigned char *)(v791 + 18);
          *(unsigned char *)(v790 + 19) = *(unsigned char *)(v791 + 19);
          unint64_t v792 = (v790 + 27) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v793 = (v791 + 27) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v792 = *(void *)v793;
          *(unsigned char *)(v792 + 8) = *(unsigned char *)(v793 + 8);
          *(unsigned char *)(v792 + 9) = *(unsigned char *)(v793 + 9);
          *(unsigned char *)(v792 + 10) = *(unsigned char *)(v793 + 10);
          *(unsigned char *)(v792 + 11) = *(unsigned char *)(v793 + 11);
          *(unsigned char *)(v792 + 12) = *(unsigned char *)(v793 + 12);
          unint64_t v794 = (void *)((v791 + 47) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v795 = (void *)((v790 + 47) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v795 = *v794;
          unint64_t v796 = ((unint64_t)v795 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v797 = ((unint64_t)v794 + 15) & 0xFFFFFFFFFFFFFFF8;
          *(void *)unint64_t v796 = *(void *)v797;
          *(unsigned char *)(v796 + 8) = *(unsigned char *)(v797 + 8);
          *(unsigned char *)(v796 + 9) = *(unsigned char *)(v797 + 9);
          v798 = (void *)((v1649 + v796) & v772);
          v799 = (const void *)((v1649 + v797) & v772);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v799, 1, v1652))
          {
            size_t v124 = __n;
            memcpy(v798, v799, __n);
            uint64_t v86 = a1;
          }
          else
          {
            v786((size_t)v798, (size_t)v799, v1652);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v798, 0, 1, v1652);
            uint64_t v86 = a1;
            size_t v124 = __n;
          }
          unint64_t v760 = ((v1670 + 1) & ~v1670) + v1700;
          unint64_t v759 = v1626;
          unint64_t v762 = v1610;
          unint64_t v764 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          unint64_t v763 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
          unint64_t v766 = v1684 + 2;
          unint64_t v765 = v1625;
          v800 = (void *)(((unint64_t)v798 + v1650) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v801 = (void *)(((unint64_t)v799 + v1650) & 0xFFFFFFFFFFFFFFF8);
          void *v800 = *v801;
          unint64_t v802 = ((unint64_t)v800 + 15) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v803 = ((unint64_t)v801 + 15) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v804 = *(void *)v803;
          *(unsigned char *)(v802 + 8) = *(unsigned char *)(v803 + 8);
          *(void *)unint64_t v802 = v804;
          v805 = (void *)(((unint64_t)v800 + 31) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v806 = (void *)(((unint64_t)v801 + 31) & 0xFFFFFFFFFFFFFFF8);
          void *v805 = *v806;
          v807 = (_OWORD *)(((unint64_t)v805 + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v808 = (_OWORD *)(((unint64_t)v806 + 15) & 0xFFFFFFFFFFFFFFF8);
          _OWORD *v807 = *v808;
          unint64_t v809 = ((unint64_t)v807 + 19) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v810 = ((unint64_t)v808 + 19) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v811 = *(void *)v810;
          *(unsigned char *)(v809 + 8) = *(unsigned char *)(v810 + 8);
          *(void *)unint64_t v809 = v811;
          *(unsigned char *)(v809 + 9) = *(unsigned char *)(v810 + 9);
          unint64_t v812 = (v809 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          unint64_t v813 = (v810 + 13) & 0xFFFFFFFFFFFFFFFCLL;
          LODWORD(v804) = *(_DWORD *)v813;
          *(unsigned char *)(v812 + 4) = *(unsigned char *)(v813 + 4);
          *(_DWORD *)unint64_t v812 = v804;
          *(_OWORD *)((v809 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v810 + 25) & 0xFFFFFFFFFFFFFFF8);
          size_t v814 = v782 + v1696;
          long long v815 = *(_OWORD *)(v783 + v1696 + 112);
          long long v817 = *(_OWORD *)(v783 + v1696 + 64);
          long long v816 = *(_OWORD *)(v783 + v1696 + 80);
          *(_OWORD *)(v814 + 96) = *(_OWORD *)(v783 + v1696 + 96);
          *(_OWORD *)(v814 + 112) = v815;
          *(_OWORD *)(v814 + 64) = v817;
          *(_OWORD *)(v814 + 80) = v816;
          long long v818 = *(_OWORD *)(v783 + v1696 + 176);
          long long v820 = *(_OWORD *)(v783 + v1696 + 128);
          long long v819 = *(_OWORD *)(v783 + v1696 + 144);
          *(_OWORD *)(v814 + 160) = *(_OWORD *)(v783 + v1696 + 160);
          *(_OWORD *)(v814 + 176) = v818;
          *(_OWORD *)(v814 + 128) = v820;
          *(_OWORD *)(v814 + 144) = v819;
          long long v822 = *(_OWORD *)(v783 + v1696 + 208);
          long long v821 = *(_OWORD *)(v783 + v1696 + 224);
          long long v823 = *(_OWORD *)(v783 + v1696 + 192);
          *(void *)(v814 + 240) = *(void *)(v783 + v1696 + 240);
          *(_OWORD *)(v814 + 208) = v822;
          *(_OWORD *)(v814 + 224) = v821;
          *(_OWORD *)(v814 + 192) = v823;
          long long v824 = *(_OWORD *)(v783 + v1696);
          long long v825 = *(_OWORD *)(v783 + v1696 + 16);
          long long v826 = *(_OWORD *)(v783 + v1696 + 48);
          *(_OWORD *)(v814 + 32) = *(_OWORD *)(v783 + v1696 + 32);
          *(_OWORD *)(v814 + 48) = v826;
          *(_OWORD *)size_t v814 = v824;
          *(_OWORD *)(v814 + 16) = v825;
          long long v827 = (_OWORD *)((v782 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v828 = (long long *)((v783 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
          long long v829 = *v828;
          *(_OWORD *)((char *)v827 + 9) = *(long long *)((char *)v828 + 9);
          *long long v827 = v829;
          unint64_t v830 = (v782 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
          unint64_t v831 = (v783 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
          long long v832 = *(_OWORD *)v831;
          *(unsigned char *)(v830 + 16) = *(unsigned char *)(v831 + 16);
          *(_OWORD *)unint64_t v830 = v832;
          long long v833 = (void *)((v782 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
          v834 = (void *)((v783 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
          *long long v833 = *v834;
          *(_OWORD *)(((unint64_t)v833 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v834 + 15) & 0xFFFFFFFFFFFFFFF8);
          size_t v767 = v1657;
          size_t v758 = v1571;
          unint64_t v761 = v1669 + 2;
          uint64_t v757 = v1722;
          unsigned int v755 = v1728;
          if (v1639) {
            goto LABEL_994;
          }
          goto LABEL_981;
        }
        int v756 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v840, v1639, v1652);
      }
LABEL_979:
      if (!v756)
      {
LABEL_989:
        unint64_t v768 = ((unint64_t)v755 + v1648) & v1569;
        unint64_t v769 = (v1620 + v768) & v125;
        goto LABEL_990;
      }
LABEL_980:
      uint64_t v757 = v1722;
      memcpy(v1722, v755, v1694);
      size_t v758 = v1571;
      unint64_t v760 = ((v1670 + 1) & ~v1670) + v1700;
      unint64_t v759 = v1626;
      unint64_t v761 = v1669 + 2;
      unint64_t v762 = v1610;
      unint64_t v764 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
      unint64_t v763 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
      unint64_t v766 = v1684 + 2;
      unint64_t v765 = v1625;
LABEL_981:
      size_t v767 = v124;
LABEL_994:
      unint64_t v835 = ((((v1706
               + ((((((((((v1711 + v767) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                   + 19) & 0xFFFFFFFFFFFFFFF8)
                 + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
             + 15) & 0xFFFFFFFFFFFFFFF8)
           + 16;
      *(void *)(((unint64_t)v757 + v835) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v755 + v835) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v836 = ((v759
             + ((v1681
               + ((((v1706
                   + ((((((((((v1711 + v124) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16) & v1576)) & 0xFFFFFFFFFFFFFFF8)
           + 8;
      if (v836 <= v1682) {
        unint64_t v836 = v1682;
      }
      if (v765 > v836) {
        unint64_t v836 = v765;
      }
      if (v1694 > v836) {
        unint64_t v836 = v1694;
      }
      if (v758 > v836) {
        unint64_t v836 = v758;
      }
      if (v1700 > v836) {
        unint64_t v836 = v1700;
      }
      if (v766 > v836) {
        unint64_t v836 = v766;
      }
      if (v764 > v836) {
        unint64_t v836 = v764;
      }
      if (v761 > v836) {
        unint64_t v836 = v761;
      }
      if (v763 > v836) {
        unint64_t v836 = v763;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1683) {
        unint64_t v836 = v1683;
      }
      if (v836 <= v760) {
        unint64_t v836 = v760;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1611) {
        unint64_t v836 = v1611;
      }
      if (v836 <= v761) {
        unint64_t v836 = v761;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v1684) {
        unint64_t v836 = v1684;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= v762) {
        unint64_t v836 = v762;
      }
      if (v836 <= v761) {
        unint64_t v836 = v761;
      }
      if (v836 <= v1700) {
        unint64_t v836 = v1700;
      }
      if (v836 <= 0x38) {
        unint64_t v836 = 56;
      }
      if (v836 > 3) {
        goto LABEL_1039;
      }
      unsigned int v837 = ((1 << (8 * v836)) + 5) >> (8 * v836);
      if (v837 > 0xFFD6)
      {
        *(_DWORD *)&v86[v836] = 5;
        return v86;
      }
      if (v837 <= 0xD6) {
LABEL_1039:
      }
        v86[v836] = 5;
      else {
        *(_WORD *)&v86[v836] = 5;
      }
      return v86;
    case 6u:
      uint64_t v1698 = ~v1672;
      uint64_t v1691 = ~v1712;
      uint64_t v1708 = ~v40;
      uint64_t v127 = v1621;
      uint64_t v1577 = ~v34;
      size_t v1585 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      size_t v1572 = v38;
      uint64_t v1662 = ~v35;
      if (v1621 == v1629)
      {
        size_t v128 = v38;
        int v129 = (*(uint64_t (**)(unsigned __int8 *, void, uint64_t, unint64_t))(v1705 + 48))(a2, v1621, v1660, v69);
        size_t v38 = v128;
        uint64_t v130 = ~v1712;
        uint64_t v86 = a1;
        unsigned int v131 = v1634;
LABEL_1050:
        if (v129)
        {
LABEL_1051:
          unsigned int v842 = v131;
          memcpy(v86, a2, v38);
          unsigned int v843 = v842;
          size_t v844 = __n;
          unint64_t v845 = v1617;
LABEL_1052:
          size_t v846 = v844;
          goto LABEL_1058;
        }
        unint64_t v408 = (unint64_t)&a2[v1647] & v130;
        unint64_t v409 = (v408 + v1687 + v35) & v1662;
LABEL_1054:
        uint64_t v847 = v130;
        v848 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v1705 + 32);
        uint64_t v849 = v80;
        v848(v86, a2, v1660);
        unint64_t v850 = (unint64_t)&v86[v1647] & v847;
        v848((unsigned char *)v850, (unsigned __int8 *)v408, v1660);
        unint64_t v851 = (v850 + v1687 + v35) & v1662;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v851, v409, v1642);
        v852 = (void *)((v1666 + v851) & 0xFFFFFFFFFFFFFFF8);
        v853 = (void *)((v1666 + v409) & 0xFFFFFFFFFFFFFFF8);
        void *v852 = *v853;
        unint64_t v854 = ((unint64_t)v852 + v1644) & v1577;
        unint64_t v855 = ((unint64_t)v853 + v1644) & v1577;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v854, v855, v1638);
        v856 = (void *)((v1632 + v854) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v857 = (void *)((v1632 + v855) & 0xFFFFFFFFFFFFFFF8);
        void *v856 = *v857;
        *(_OWORD *)(((unint64_t)v856 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v857 + 15) & 0xFFFFFFFFFFFFFFF8);
        *(_OWORD *)(v1585 + v851) = *(_OWORD *)(v1585 + v409);
        size_t v858 = (v1699 + v1585 + v851) & v849;
        uint64_t v1714 = v849;
        size_t v859 = (v1699 + v1585 + v409) & v849;
        *(unsigned char *)size_t v858 = *(unsigned char *)v859;
        uint64_t v860 = v858 | 4;
        int v861 = *(_DWORD *)(v859 | 4);
        *(unsigned char *)(v860 + 4) = *(unsigned char *)((v859 | 4) + 4);
        *(_DWORD *)uint64_t v860 = v861;
        *(_WORD *)(v858 + 10) = *(_WORD *)(v859 + 0xA);
        unint64_t v862 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
        v862((v1655 + v858) & v1708, (v1655 + v859) & v1708, v1652);
        size_t v863 = (v1651 + ((v1655 + v858) & v1708)) & v1708;
        size_t v864 = (v1651 + ((v1655 + v859) & v1708)) & v1708;
        v862(v863, v864, v1652);
        unint64_t v865 = (unsigned char *)(v863 + v1657);
        *unint64_t v865 = *(unsigned char *)(v864 + v1657);
        v865[1] = *(unsigned char *)(v864 + v1657 + 1);
        v865[2] = *(unsigned char *)(v864 + v1657 + 2);
        v865[3] = *(unsigned char *)(v864 + v1657 + 3);
        v865[4] = *(unsigned char *)(v864 + v1657 + 4);
        unint64_t v866 = (v863 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v867 = (v864 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v866 = *(_OWORD *)v867;
        *(unsigned char *)(v866 + 16) = *(unsigned char *)(v867 + 16);
        *(unsigned char *)(v866 + 17) = *(unsigned char *)(v867 + 17);
        *(unsigned char *)(v866 + 18) = *(unsigned char *)(v867 + 18);
        *(unsigned char *)(v866 + 19) = *(unsigned char *)(v867 + 19);
        unint64_t v868 = (v866 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v869 = (v867 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v868 = *(void *)v869;
        *(unsigned char *)(v868 + 8) = *(unsigned char *)(v869 + 8);
        *(unsigned char *)(v868 + 9) = *(unsigned char *)(v869 + 9);
        *(unsigned char *)(v868 + 10) = *(unsigned char *)(v869 + 10);
        *(unsigned char *)(v868 + 11) = *(unsigned char *)(v869 + 11);
        *(unsigned char *)(v868 + 12) = *(unsigned char *)(v869 + 12);
        unint64_t v870 = (void *)((v867 + 47) & 0xFFFFFFFFFFFFFFF8);
        v871 = (void *)((v866 + 47) & 0xFFFFFFFFFFFFFFF8);
        void *v871 = *v870;
        unint64_t v872 = ((unint64_t)v871 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v873 = ((unint64_t)v870 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v872 = *(void *)v873;
        *(unsigned char *)(v872 + 8) = *(unsigned char *)(v873 + 8);
        *(unsigned char *)(v872 + 9) = *(unsigned char *)(v873 + 9);
        unint64_t v874 = (void *)((v1649 + v872) & v1708);
        v875 = (const void *)((v1649 + v873) & v1708);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v875, 1, v1652))
        {
          size_t v844 = __n;
          memcpy(v874, v875, __n);
        }
        else
        {
          v862((size_t)v874, (size_t)v875, v1652);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v874, 0, 1, v1652);
          size_t v844 = __n;
        }
        unsigned int v843 = v1634;
        uint64_t v127 = v1621;
        v876 = (void *)(((unint64_t)v875 + v1650) & 0xFFFFFFFFFFFFFFF8);
        v877 = (void *)(((unint64_t)v874 + v1650) & 0xFFFFFFFFFFFFFFF8);
        void *v877 = *v876;
        unint64_t v878 = ((unint64_t)v877 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v879 = ((unint64_t)v876 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v880 = *(void *)v879;
        *(unsigned char *)(v878 + 8) = *(unsigned char *)(v879 + 8);
        *(void *)unint64_t v878 = v880;
        unint64_t v881 = (void *)(((unint64_t)v877 + 31) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v882 = (void *)(((unint64_t)v876 + 31) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v881 = *v882;
        uint64_t v883 = (_OWORD *)(((unint64_t)v881 + 15) & 0xFFFFFFFFFFFFFFF8);
        v884 = (_OWORD *)(((unint64_t)v882 + 15) & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v883 = *v884;
        unint64_t v885 = ((unint64_t)v883 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v886 = ((unint64_t)v884 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v887 = *(void *)v886;
        *(unsigned char *)(v885 + 8) = *(unsigned char *)(v886 + 8);
        *(void *)unint64_t v885 = v887;
        *(unsigned char *)(v885 + 9) = *(unsigned char *)(v886 + 9);
        unint64_t v888 = (v885 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v889 = (v886 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v880) = *(_DWORD *)v889;
        *(unsigned char *)(v888 + 4) = *(unsigned char *)(v889 + 4);
        *(_DWORD *)unint64_t v888 = v880;
        *(_OWORD *)((v885 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v886 + 25) & 0xFFFFFFFFFFFFFFF8);
        size_t v890 = v858 + v1696;
        long long v891 = *(_OWORD *)(v859 + v1696 + 112);
        long long v893 = *(_OWORD *)(v859 + v1696 + 64);
        long long v892 = *(_OWORD *)(v859 + v1696 + 80);
        *(_OWORD *)(v890 + 96) = *(_OWORD *)(v859 + v1696 + 96);
        *(_OWORD *)(v890 + 112) = v891;
        *(_OWORD *)(v890 + 64) = v893;
        *(_OWORD *)(v890 + 80) = v892;
        long long v894 = *(_OWORD *)(v859 + v1696 + 176);
        long long v896 = *(_OWORD *)(v859 + v1696 + 128);
        long long v895 = *(_OWORD *)(v859 + v1696 + 144);
        *(_OWORD *)(v890 + 160) = *(_OWORD *)(v859 + v1696 + 160);
        *(_OWORD *)(v890 + 176) = v894;
        *(_OWORD *)(v890 + 128) = v896;
        *(_OWORD *)(v890 + 144) = v895;
        long long v898 = *(_OWORD *)(v859 + v1696 + 208);
        long long v897 = *(_OWORD *)(v859 + v1696 + 224);
        long long v899 = *(_OWORD *)(v859 + v1696 + 192);
        *(void *)(v890 + 240) = *(void *)(v859 + v1696 + 240);
        *(_OWORD *)(v890 + 208) = v898;
        *(_OWORD *)(v890 + 224) = v897;
        *(_OWORD *)(v890 + 192) = v899;
        long long v900 = *(_OWORD *)(v859 + v1696);
        long long v901 = *(_OWORD *)(v859 + v1696 + 16);
        long long v902 = *(_OWORD *)(v859 + v1696 + 48);
        *(_OWORD *)(v890 + 32) = *(_OWORD *)(v859 + v1696 + 32);
        *(_OWORD *)(v890 + 48) = v902;
        *(_OWORD *)size_t v890 = v900;
        *(_OWORD *)(v890 + 16) = v901;
        long long v903 = (_OWORD *)((v858 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v904 = (long long *)((v859 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v905 = *v904;
        *(_OWORD *)((char *)v903 + 9) = *(long long *)((char *)v904 + 9);
        *long long v903 = v905;
        unint64_t v906 = (v858 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v907 = (v859 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v908 = *(_OWORD *)v907;
        *(unsigned char *)(v906 + 16) = *(unsigned char *)(v907 + 16);
        *(_OWORD *)unint64_t v906 = v908;
        long long v909 = (void *)((v858 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        long long v910 = (void *)((v859 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        *long long v909 = *v910;
        *(_OWORD *)(((unint64_t)v909 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v910 + 15) & 0xFFFFFFFFFFFFFFF8);
        size_t v846 = v1657;
        uint64_t v80 = v1714;
        unint64_t v845 = v1617;
        uint64_t v130 = v1691;
        if (!v1639) {
          goto LABEL_1052;
        }
LABEL_1058:
        unint64_t v911 = v1633 + 7;
        unint64_t v912 = ((((v845
                 + 327
                 + ((((((((((v1633 + 7 + v846) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 19) & 0xFFFFFFFFFFFFFFF8)
                   + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
               + 15) & 0xFFFFFFFFFFFFFFF8)
             + 16;
        v1723 = (void *)((unint64_t)&v86[v1672 + v912] & v1698);
        long long v913 = (const void *)((unint64_t)&a2[v1672 + v912] & v1698);
        unint64_t v1715 = v845 + 327;
        if (v127 == v1629)
        {
          int v914 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v913, v127, v1660);
          uint64_t v915 = v1708;
        }
        else
        {
          unint64_t v916 = ((unint64_t)v913 + v1647) & v130;
          unint64_t v917 = (v1619 + v916) & v1662;
          uint64_t v915 = v1708;
          if (v843 != v1629)
          {
            size_t v918 = v917 + v1585;
            size_t v919 = v1572;
            if ((v1606 & 0x80000000) != 0)
            {
              uint64_t v923 = (v1655 + ((v1699 + v918) & v80)) & v1708;
              if (v1639 <= 0x7FFFFFFD)
              {
                unint64_t v1056 = *(void *)(((v1603 + ((v1651 + v923) & v1708)) & 0xFFFFFFFFFFFFFFF8) + 8);
                if (v1056 >= 0xFFFFFFFF) {
                  LODWORD(v1056) = -1;
                }
                if ((v1056 + 1) >= 2) {
                  goto LABEL_1078;
                }
                goto LABEL_1081;
              }
              int v914 = (*(uint64_t (**)(uint64_t))(v1653 + 48))(v923);
              size_t v919 = v1572;
            }
            else
            {
              unint64_t v920 = *(void *)(v918 + 8);
              if (v920 >= 0xFFFFFFFF) {
                LODWORD(v920) = -1;
              }
              int v914 = v920 + 1;
            }
            goto LABEL_1077;
          }
          if (v1624 == v843)
          {
            int v914 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v916) & v1662);
          }
          else
          {
            v921 = (unint64_t *)((v1666 + v917) & 0xFFFFFFFFFFFFFFF8);
            if (v1618 <= 0x7FFFFFFE)
            {
              unint64_t v922 = *v921;
              if (v922 >= 0xFFFFFFFF) {
                LODWORD(v922) = -1;
              }
              size_t v919 = v1572;
              if ((v922 + 1) >= 2) {
                goto LABEL_1078;
              }
              goto LABEL_1081;
            }
            int v914 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v921 + v1644) & v1577);
          }
        }
        size_t v919 = v1572;
LABEL_1077:
        if (v914)
        {
LABEL_1078:
          unint64_t v924 = v1723;
          size_t v925 = v919;
          memcpy(v1723, v913, v919);
          size_t v926 = v925;
          unint64_t v928 = ((v1670 + 1) & ~v1670) + v1700;
          unint64_t v927 = v1626;
          unint64_t v929 = v1669 + 2;
          unint64_t v930 = v1610;
          unint64_t v932 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          unint64_t v931 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
          unint64_t v934 = v1684 + 2;
          unint64_t v933 = v1625;
LABEL_1079:
          size_t v935 = v844;
LABEL_1085:
          unint64_t v999 = ((((v1715
                   + ((((((((((v911 + v935) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                       + 19) & 0xFFFFFFFFFFFFFFF8)
                     + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                 + 15) & 0xFFFFFFFFFFFFFFF8)
               + 16;
          *(void *)(((unint64_t)v924 + v999) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v913
                                                                                           + v999) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1000 = ((v927
                  + ((v1681
                    + ((((v1628
                        + ((((((((((v911 + v844) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16) & ~v1681)) & 0xFFFFFFFFFFFFFFF8)
                + 8;
          if (v1000 <= v1682) {
            unint64_t v1000 = v1682;
          }
          if (v933 > v1000) {
            unint64_t v1000 = v933;
          }
          if (v1694 > v1000) {
            unint64_t v1000 = v1694;
          }
          if (v926 > v1000) {
            unint64_t v1000 = v926;
          }
          if (v1700 > v1000) {
            unint64_t v1000 = v1700;
          }
          if (v934 > v1000) {
            unint64_t v1000 = v934;
          }
          if (v932 > v1000) {
            unint64_t v1000 = v932;
          }
          if (v929 > v1000) {
            unint64_t v1000 = v929;
          }
          if (v931 > v1000) {
            unint64_t v1000 = v931;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1683) {
            unint64_t v1000 = v1683;
          }
          if (v1000 <= v928) {
            unint64_t v1000 = v928;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1611) {
            unint64_t v1000 = v1611;
          }
          if (v1000 <= v929) {
            unint64_t v1000 = v929;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v1684) {
            unint64_t v1000 = v1684;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= v930) {
            unint64_t v1000 = v930;
          }
          if (v1000 <= v929) {
            unint64_t v1000 = v929;
          }
          if (v1000 <= v1700) {
            unint64_t v1000 = v1700;
          }
          if (v1000 <= 0x38) {
            unint64_t v1000 = 56;
          }
          if (v1000 > 3) {
            goto LABEL_1130;
          }
          unsigned int v1001 = ((1 << (8 * v1000)) + 5) >> (8 * v1000);
          if (v1001 > 0xFFD6)
          {
            *(_DWORD *)&v86[v1000] = 6;
            return v86;
          }
          if (v1001 <= 0xD6) {
LABEL_1130:
          }
            v86[v1000] = 6;
          else {
            *(_WORD *)&v86[v1000] = 6;
          }
          return v86;
        }
        unint64_t v916 = ((unint64_t)v913 + v1647) & v130;
        unint64_t v917 = (v1619 + v916) & v1662;
LABEL_1081:
        uint64_t v936 = v915;
        size_t v937 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
        v937(v1723, v913, v1660);
        unint64_t v938 = ((unint64_t)v1723 + v1647) & v130;
        v937((void *)v938, (const void *)v916, v1660);
        unint64_t v939 = (v1619 + v938) & v1662;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v939, v917, v1642);
        size_t v940 = (void *)((v1666 + v939) & 0xFFFFFFFFFFFFFFF8);
        size_t v941 = (void *)((v1666 + v917) & 0xFFFFFFFFFFFFFFF8);
        *size_t v940 = *v941;
        unint64_t v942 = ((unint64_t)v940 + v1644) & v1577;
        unint64_t v943 = ((unint64_t)v941 + v1644) & v1577;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v942, v943, v1638);
        size_t v944 = (void *)((v1632 + v942) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v945 = (void *)((v1632 + v943) & 0xFFFFFFFFFFFFFFF8);
        *size_t v944 = *v945;
        *(_OWORD *)(((unint64_t)v944 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v945 + 15) & 0xFFFFFFFFFFFFFFF8);
        *(_OWORD *)(v939 + v1585) = *(_OWORD *)(v917 + v1585);
        size_t v946 = (v1699 + v939 + v1585) & v80;
        size_t v947 = (v1699 + v917 + v1585) & v80;
        *(unsigned char *)size_t v946 = *(unsigned char *)v947;
        uint64_t v948 = v946 | 4;
        int v949 = *(_DWORD *)(v947 | 4);
        *(unsigned char *)(v948 + 4) = *(unsigned char *)((v947 | 4) + 4);
        *(_DWORD *)uint64_t v948 = v949;
        *(_WORD *)(v946 + 10) = *(_WORD *)(v947 + 0xA);
        unint64_t v950 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
        v950((v1655 + v946) & v936, (v1655 + v947) & v936, v1652);
        size_t v951 = (v1651 + ((v1655 + v946) & v936)) & v936;
        size_t v952 = (v1651 + ((v1655 + v947) & v936)) & v936;
        v950(v951, v952, v1652);
        v953 = (unsigned char *)(v951 + v1657);
        unsigned char *v953 = *(unsigned char *)(v952 + v1657);
        v953[1] = *(unsigned char *)(v952 + v1657 + 1);
        v953[2] = *(unsigned char *)(v952 + v1657 + 2);
        v953[3] = *(unsigned char *)(v952 + v1657 + 3);
        v953[4] = *(unsigned char *)(v952 + v1657 + 4);
        unint64_t v954 = (v951 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v955 = (v952 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
        *(_OWORD *)unint64_t v954 = *(_OWORD *)v955;
        *(unsigned char *)(v954 + 16) = *(unsigned char *)(v955 + 16);
        *(unsigned char *)(v954 + 17) = *(unsigned char *)(v955 + 17);
        *(unsigned char *)(v954 + 18) = *(unsigned char *)(v955 + 18);
        *(unsigned char *)(v954 + 19) = *(unsigned char *)(v955 + 19);
        unint64_t v956 = (v954 + 27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v957 = (v955 + 27) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v956 = *(void *)v957;
        *(unsigned char *)(v956 + 8) = *(unsigned char *)(v957 + 8);
        *(unsigned char *)(v956 + 9) = *(unsigned char *)(v957 + 9);
        *(unsigned char *)(v956 + 10) = *(unsigned char *)(v957 + 10);
        *(unsigned char *)(v956 + 11) = *(unsigned char *)(v957 + 11);
        *(unsigned char *)(v956 + 12) = *(unsigned char *)(v957 + 12);
        size_t v958 = (void *)((v955 + 47) & 0xFFFFFFFFFFFFFFF8);
        size_t v959 = (void *)((v954 + 47) & 0xFFFFFFFFFFFFFFF8);
        *size_t v959 = *v958;
        unint64_t v960 = ((unint64_t)v959 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v961 = ((unint64_t)v958 + 15) & 0xFFFFFFFFFFFFFFF8;
        *(void *)unint64_t v960 = *(void *)v961;
        *(unsigned char *)(v960 + 8) = *(unsigned char *)(v961 + 8);
        *(unsigned char *)(v960 + 9) = *(unsigned char *)(v961 + 9);
        size_t v962 = (void *)((v1649 + v960) & v936);
        size_t v963 = (const void *)((v1649 + v961) & v936);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v963, 1, v1652))
        {
          size_t v844 = __n;
          memcpy(v962, v963, __n);
          uint64_t v86 = a1;
        }
        else
        {
          v950((size_t)v962, (size_t)v963, v1652);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v962, 0, 1, v1652);
          uint64_t v86 = a1;
          size_t v844 = __n;
        }
        unint64_t v928 = ((v1670 + 1) & ~v1670) + v1700;
        unint64_t v927 = v1626;
        unint64_t v930 = v1610;
        unint64_t v932 = ((v1669 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
        unint64_t v931 = (v1669 & 0xFFFFFFFFFFFFFFF8) + 16;
        unint64_t v934 = v1684 + 2;
        unint64_t v933 = v1625;
        unint64_t v911 = v1633 + 7;
        v964 = (void *)(((unint64_t)v962 + v1650) & 0xFFFFFFFFFFFFFFF8);
        size_t v965 = (void *)(((unint64_t)v963 + v1650) & 0xFFFFFFFFFFFFFFF8);
        void *v964 = *v965;
        unint64_t v966 = ((unint64_t)v964 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v967 = ((unint64_t)v965 + 15) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v968 = *(void *)v967;
        *(unsigned char *)(v966 + 8) = *(unsigned char *)(v967 + 8);
        *(void *)unint64_t v966 = v968;
        unint64_t v969 = (void *)(((unint64_t)v964 + 31) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v970 = (void *)(((unint64_t)v965 + 31) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v969 = *v970;
        unint64_t v971 = (_OWORD *)(((unint64_t)v969 + 15) & 0xFFFFFFFFFFFFFFF8);
        v972 = (_OWORD *)(((unint64_t)v970 + 15) & 0xFFFFFFFFFFFFFFF8);
        *unint64_t v971 = *v972;
        unint64_t v973 = ((unint64_t)v971 + 19) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v974 = ((unint64_t)v972 + 19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v975 = *(void *)v974;
        *(unsigned char *)(v973 + 8) = *(unsigned char *)(v974 + 8);
        *(void *)unint64_t v973 = v975;
        *(unsigned char *)(v973 + 9) = *(unsigned char *)(v974 + 9);
        unint64_t v976 = (v973 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        unint64_t v977 = (v974 + 13) & 0xFFFFFFFFFFFFFFFCLL;
        LODWORD(v968) = *(_DWORD *)v977;
        *(unsigned char *)(v976 + 4) = *(unsigned char *)(v977 + 4);
        *(_DWORD *)unint64_t v976 = v968;
        *(_OWORD *)((v973 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v974 + 25) & 0xFFFFFFFFFFFFFFF8);
        size_t v978 = v946 + v1696;
        long long v979 = *(_OWORD *)(v947 + v1696 + 112);
        long long v981 = *(_OWORD *)(v947 + v1696 + 64);
        long long v980 = *(_OWORD *)(v947 + v1696 + 80);
        *(_OWORD *)(v978 + 96) = *(_OWORD *)(v947 + v1696 + 96);
        *(_OWORD *)(v978 + 112) = v979;
        *(_OWORD *)(v978 + 64) = v981;
        *(_OWORD *)(v978 + 80) = v980;
        long long v982 = *(_OWORD *)(v947 + v1696 + 176);
        long long v984 = *(_OWORD *)(v947 + v1696 + 128);
        long long v983 = *(_OWORD *)(v947 + v1696 + 144);
        *(_OWORD *)(v978 + 160) = *(_OWORD *)(v947 + v1696 + 160);
        *(_OWORD *)(v978 + 176) = v982;
        *(_OWORD *)(v978 + 128) = v984;
        *(_OWORD *)(v978 + 144) = v983;
        long long v986 = *(_OWORD *)(v947 + v1696 + 208);
        long long v985 = *(_OWORD *)(v947 + v1696 + 224);
        long long v987 = *(_OWORD *)(v947 + v1696 + 192);
        *(void *)(v978 + 240) = *(void *)(v947 + v1696 + 240);
        *(_OWORD *)(v978 + 208) = v986;
        *(_OWORD *)(v978 + 224) = v985;
        *(_OWORD *)(v978 + 192) = v987;
        long long v988 = *(_OWORD *)(v947 + v1696);
        long long v989 = *(_OWORD *)(v947 + v1696 + 16);
        long long v990 = *(_OWORD *)(v947 + v1696 + 48);
        *(_OWORD *)(v978 + 32) = *(_OWORD *)(v947 + v1696 + 32);
        *(_OWORD *)(v978 + 48) = v990;
        *(_OWORD *)size_t v978 = v988;
        *(_OWORD *)(v978 + 16) = v989;
        unint64_t v991 = (_OWORD *)((v946 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v992 = (long long *)((v947 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
        long long v993 = *v992;
        *(_OWORD *)((char *)v991 + 9) = *(long long *)((char *)v992 + 9);
        *unint64_t v991 = v993;
        unint64_t v994 = (v946 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v995 = (v947 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
        long long v996 = *(_OWORD *)v995;
        *(unsigned char *)(v994 + 16) = *(unsigned char *)(v995 + 16);
        *(_OWORD *)unint64_t v994 = v996;
        v997 = (void *)((v946 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        size_t v998 = (void *)((v947 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
        void *v997 = *v998;
        *(_OWORD *)(((unint64_t)v997 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v998 + 15) & 0xFFFFFFFFFFFFFFF8);
        size_t v935 = v1657;
        size_t v926 = v1572;
        unint64_t v929 = v1669 + 2;
        unint64_t v924 = v1723;
        if (v1639) {
          goto LABEL_1085;
        }
        goto LABEL_1079;
      }
      uint64_t v130 = ~v1712;
      unint64_t v408 = (unint64_t)&a2[v1647] & v1691;
      unint64_t v409 = (v408 + v1687 + v35) & v83;
      unsigned int v131 = v1634;
      if (v1634 == v1629)
      {
        if (v1624 == v1634)
        {
          size_t v410 = v38;
          int v129 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v408 + v1687 + v35) & v83);
          unsigned int v131 = v1634;
          size_t v38 = v410;
          uint64_t v86 = a1;
          goto LABEL_1050;
        }
        unsigned int v558 = (unint64_t *)((v1666 + v409) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v86 = a1;
        if (v1618 <= 0x7FFFFFFE)
        {
          unint64_t v559 = *v558;
          goto LABEL_1181;
        }
        unint64_t v687 = ((unint64_t)v558 + v1644) & v85;
        BOOL v688 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v1645 + 48);
        uint64_t v689 = v1605;
        uint64_t v690 = v1638;
      }
      else
      {
        unint64_t v502 = v36 + v409;
        if ((v1606 & 0x80000000) == 0)
        {
          unint64_t v503 = *(void *)(v502 + 8);
          if (v503 >= 0xFFFFFFFF) {
            LODWORD(v503) = -1;
          }
          int v129 = v503 + 1;
          uint64_t v86 = a1;
          goto LABEL_1050;
        }
        unint64_t v687 = (v1655 + ((v1699 + v502) & v80)) & v1708;
        uint64_t v86 = a1;
        if (v1639 <= 0x7FFFFFFD)
        {
          unint64_t v559 = *(void *)(((v1603 + ((v1651 + v687) & v1708)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1181:
          if (v559 >= 0xFFFFFFFF) {
            LODWORD(v559) = -1;
          }
          if ((v559 + 1) >= 2) {
            goto LABEL_1051;
          }
          goto LABEL_1054;
        }
        BOOL v688 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, unint64_t))(v1653 + 48);
        uint64_t v689 = v1639;
        uint64_t v690 = v1652;
      }
      size_t v841 = v38;
      int v129 = v688(v687, v689, v690, v69);
      unsigned int v131 = v1634;
      size_t v38 = v841;
      goto LABEL_1050;
    case 7u:
      uint64_t v132 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1658 + 32);
      uint64_t v133 = ~v40;
      ((void (*)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))v132)(a1, a2, AssociatedTypeWitness, v69);
      unint64_t v134 = ((unint64_t)a1 + v1648) & v70;
      unint64_t v135 = (unint64_t)&a2[v1648] & v70;
      v132(v134, v135, AssociatedTypeWitness);
      unint64_t v136 = (v134 + v10 + v1679) & v79;
      unint64_t v137 = (v135 + v10 + v1679) & v79;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v136, v137, v1640);
      unint64_t v138 = (void *)((v1646 + v136) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v139 = (void *)((v1646 + v137) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v138 = *v139;
      unint64_t v140 = ((unint64_t)v138 + v1635) & v67;
      unint64_t v141 = ((unint64_t)v139 + v1635) & v67;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v140, v141, v1636);
      unint64_t v142 = (void *)((v1631 + v140) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v143 = (void *)((v1631 + v141) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v142 = *v143;
      *(_OWORD *)(((unint64_t)v142 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v143 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1697 + v136) = *(_OWORD *)(v1697 + v137);
      size_t v144 = (v1699 + v1697 + v136) & ~v1707;
      size_t v145 = (v1699 + v1697 + v137) & ~v1707;
      *(unsigned char *)size_t v144 = *(unsigned char *)v145;
      uint64_t v146 = v144 | 4;
      int v147 = *(_DWORD *)(v145 | 4);
      *(unsigned char *)(v146 + 4) = *(unsigned char *)((v145 | 4) + 4);
      *(_DWORD *)uint64_t v146 = v147;
      *(_WORD *)(v144 + 10) = *(_WORD *)(v145 + 0xA);
      uint64_t v148 = v133;
      uint64_t v149 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v149((v1655 + v144) & v133, (v1655 + v145) & v133, v1652);
      size_t v150 = (v1651 + ((v1655 + v144) & v133)) & v133;
      size_t v151 = (v1651 + ((v1655 + v145) & v133)) & v133;
      v149(v150, v151, v1652);
      uint64_t v152 = (unsigned char *)(v150 + v1657);
      *uint64_t v152 = *(unsigned char *)(v151 + v1657);
      v152[1] = *(unsigned char *)(v151 + v1657 + 1);
      v152[2] = *(unsigned char *)(v151 + v1657 + 2);
      v152[3] = *(unsigned char *)(v151 + v1657 + 3);
      v152[4] = *(unsigned char *)(v151 + v1657 + 4);
      unint64_t v153 = (v150 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v154 = (v151 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v153 = *(_OWORD *)v154;
      *(unsigned char *)(v153 + 16) = *(unsigned char *)(v154 + 16);
      *(unsigned char *)(v153 + 17) = *(unsigned char *)(v154 + 17);
      *(unsigned char *)(v153 + 18) = *(unsigned char *)(v154 + 18);
      *(unsigned char *)(v153 + 19) = *(unsigned char *)(v154 + 19);
      unint64_t v155 = (v153 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v156 = (v154 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v155 = *(void *)v156;
      *(unsigned char *)(v155 + 8) = *(unsigned char *)(v156 + 8);
      *(unsigned char *)(v155 + 9) = *(unsigned char *)(v156 + 9);
      *(unsigned char *)(v155 + 10) = *(unsigned char *)(v156 + 10);
      *(unsigned char *)(v155 + 11) = *(unsigned char *)(v156 + 11);
      *(unsigned char *)(v155 + 12) = *(unsigned char *)(v156 + 12);
      size_t v157 = (void *)((v154 + 47) & 0xFFFFFFFFFFFFFFF8);
      size_t v158 = (void *)((v153 + 47) & 0xFFFFFFFFFFFFFFF8);
      *size_t v158 = *v157;
      unint64_t v159 = ((unint64_t)v158 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v160 = ((unint64_t)v157 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v159 = *(void *)v160;
      *(unsigned char *)(v159 + 8) = *(unsigned char *)(v160 + 8);
      *(unsigned char *)(v159 + 9) = *(unsigned char *)(v160 + 9);
      unint64_t v161 = (void *)((v1649 + v159) & v148);
      unint64_t v162 = (const void *)((v1649 + v160) & v148);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v162, 1, v1652))
      {
        memcpy(v161, v162, __n);
      }
      else
      {
        v149((size_t)v161, (size_t)v162, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v161, 0, 1, v1652);
      }
      unint64_t v428 = (void *)(((unint64_t)v162 + v1650) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v429 = (void *)(((unint64_t)v161 + v1650) & 0xFFFFFFFFFFFFFFF8);
      void *v429 = *v428;
      unint64_t v430 = ((unint64_t)v429 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v431 = ((unint64_t)v428 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v432 = *(void *)v431;
      *(unsigned char *)(v430 + 8) = *(unsigned char *)(v431 + 8);
      *(void *)unint64_t v430 = v432;
      v433 = (void *)(((unint64_t)v429 + 31) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v434 = (void *)(((unint64_t)v428 + 31) & 0xFFFFFFFFFFFFFFF8);
      void *v433 = *v434;
      uint64_t v435 = (_OWORD *)(((unint64_t)v433 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v436 = (_OWORD *)(((unint64_t)v434 + 15) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v435 = *v436;
      unint64_t v437 = ((unint64_t)v435 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v438 = ((unint64_t)v436 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v439 = *(void *)v438;
      *(unsigned char *)(v437 + 8) = *(unsigned char *)(v438 + 8);
      *(void *)unint64_t v437 = v439;
      *(unsigned char *)(v437 + 9) = *(unsigned char *)(v438 + 9);
      unint64_t v440 = (v437 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v441 = (v438 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v432) = *(_DWORD *)v441;
      *(unsigned char *)(v440 + 4) = *(unsigned char *)(v441 + 4);
      *(_DWORD *)unint64_t v440 = v432;
      *(_OWORD *)((v437 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v438 + 25) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v442 = v1696 + v144;
      long long v443 = *(_OWORD *)(v1696 + v145 + 112);
      long long v445 = *(_OWORD *)(v1696 + v145 + 64);
      long long v444 = *(_OWORD *)(v1696 + v145 + 80);
      *(_OWORD *)(v442 + 96) = *(_OWORD *)(v1696 + v145 + 96);
      *(_OWORD *)(v442 + 112) = v443;
      *(_OWORD *)(v442 + 64) = v445;
      *(_OWORD *)(v442 + 80) = v444;
      long long v446 = *(_OWORD *)(v1696 + v145 + 176);
      long long v448 = *(_OWORD *)(v1696 + v145 + 128);
      long long v447 = *(_OWORD *)(v1696 + v145 + 144);
      *(_OWORD *)(v442 + 160) = *(_OWORD *)(v1696 + v145 + 160);
      *(_OWORD *)(v442 + 176) = v446;
      *(_OWORD *)(v442 + 128) = v448;
      *(_OWORD *)(v442 + 144) = v447;
      long long v450 = *(_OWORD *)(v1696 + v145 + 208);
      long long v449 = *(_OWORD *)(v1696 + v145 + 224);
      long long v451 = *(_OWORD *)(v1696 + v145 + 192);
      *(void *)(v442 + 240) = *(void *)(v1696 + v145 + 240);
      *(_OWORD *)(v442 + 208) = v450;
      *(_OWORD *)(v442 + 224) = v449;
      *(_OWORD *)(v442 + 192) = v451;
      long long v452 = *(_OWORD *)(v1696 + v145);
      long long v453 = *(_OWORD *)(v1696 + v145 + 16);
      long long v454 = *(_OWORD *)(v1696 + v145 + 48);
      *(_OWORD *)(v442 + 32) = *(_OWORD *)(v1696 + v145 + 32);
      *(_OWORD *)(v442 + 48) = v454;
      *(_OWORD *)unint64_t v442 = v452;
      *(_OWORD *)(v442 + 16) = v453;
      long long v455 = (_OWORD *)((v1696 + v144 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v456 = (long long *)((v1696 + v145 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v457 = *v456;
      *(_OWORD *)((char *)v455 + 9) = *(long long *)((char *)v456 + 9);
      *long long v455 = v457;
      unint64_t v458 = (v1696 + v144 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v459 = (v1696 + v145 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v460 = *(_OWORD *)v459;
      *(unsigned char *)(v458 + 16) = *(unsigned char *)(v459 + 16);
      *(_OWORD *)unint64_t v458 = v460;
      uint64_t v461 = (void *)((v1696 + v144 + 311) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v462 = (void *)((v1696 + v145 + 311) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v461 = *v462;
      *(_OWORD *)(((unint64_t)v461 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v462 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v86 = a1;
      if (v1668 > 3) {
        goto LABEL_396;
      }
      unsigned int v463 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v463 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 7;
      }
      else if (v463 <= 0xD6)
      {
LABEL_396:
        *((unsigned char *)a1 + v1668) = 7;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 7;
      }
      return v86;
    case 8u:
      unint64_t v163 = *(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32);
      size_t v1586 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v1709 = ~v40;
      uint64_t v1578 = ~v34;
      ((void (*)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))v163)(a1, a2, v1660, v69);
      unint64_t v164 = ((unint64_t)a1 + v1647) & v77;
      unint64_t v165 = (unint64_t)&a2[v1647] & v77;
      v163(v164, v165, v1660);
      unint64_t v166 = (v164 + v1687 + v35) & v83;
      unint64_t v167 = (v165 + v1687 + v35) & v83;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v166, v167, v1642);
      uint64_t v168 = (void *)((v1666 + v166) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v169 = (void *)((v1666 + v167) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v168 = *v169;
      unint64_t v170 = ((unint64_t)v168 + v1644) & v1578;
      unint64_t v171 = ((unint64_t)v169 + v1644) & v1578;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v170, v171, v1638);
      unsigned int v172 = (void *)((v1632 + v170) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v173 = (void *)((v1632 + v171) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v172 = *v173;
      *(_OWORD *)(((unint64_t)v172 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v173 + 15) & 0xFFFFFFFFFFFFFFF8);
      *(_OWORD *)(v1586 + v166) = *(_OWORD *)(v1586 + v167);
      size_t v174 = (v1699 + v1586 + v166) & v80;
      size_t v175 = (v1699 + v1586 + v167) & v80;
      *(unsigned char *)size_t v174 = *(unsigned char *)v175;
      uint64_t v176 = v174 | 4;
      int v177 = *(_DWORD *)(v175 | 4);
      *(unsigned char *)(v176 + 4) = *(unsigned char *)((v175 | 4) + 4);
      *(_DWORD *)uint64_t v176 = v177;
      *(_WORD *)(v174 + 10) = *(_WORD *)(v175 + 0xA);
      unint64_t v178 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
      v178((v1655 + v174) & v1709, (v1655 + v175) & v1709, v1652);
      size_t v179 = (v1651 + ((v1655 + v174) & v1709)) & v1709;
      size_t v180 = (v1651 + ((v1655 + v175) & v1709)) & v1709;
      v178(v179, v180, v1652);
      unint64_t v181 = (unsigned char *)(v179 + v1657);
      *unint64_t v181 = *(unsigned char *)(v180 + v1657);
      v181[1] = *(unsigned char *)(v180 + v1657 + 1);
      v181[2] = *(unsigned char *)(v180 + v1657 + 2);
      v181[3] = *(unsigned char *)(v180 + v1657 + 3);
      v181[4] = *(unsigned char *)(v180 + v1657 + 4);
      unint64_t v182 = (v179 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v183 = (v180 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
      *(_OWORD *)unint64_t v182 = *(_OWORD *)v183;
      *(unsigned char *)(v182 + 16) = *(unsigned char *)(v183 + 16);
      *(unsigned char *)(v182 + 17) = *(unsigned char *)(v183 + 17);
      *(unsigned char *)(v182 + 18) = *(unsigned char *)(v183 + 18);
      *(unsigned char *)(v182 + 19) = *(unsigned char *)(v183 + 19);
      unint64_t v184 = (v182 + 27) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v185 = (v183 + 27) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v184 = *(void *)v185;
      *(unsigned char *)(v184 + 8) = *(unsigned char *)(v185 + 8);
      *(unsigned char *)(v184 + 9) = *(unsigned char *)(v185 + 9);
      *(unsigned char *)(v184 + 10) = *(unsigned char *)(v185 + 10);
      *(unsigned char *)(v184 + 11) = *(unsigned char *)(v185 + 11);
      *(unsigned char *)(v184 + 12) = *(unsigned char *)(v185 + 12);
      uint64_t v186 = (void *)((v183 + 47) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v187 = (void *)((v182 + 47) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v187 = *v186;
      unint64_t v188 = ((unint64_t)v187 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v189 = ((unint64_t)v186 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v188 = *(void *)v189;
      *(unsigned char *)(v188 + 8) = *(unsigned char *)(v189 + 8);
      *(unsigned char *)(v188 + 9) = *(unsigned char *)(v189 + 9);
      uint64_t v190 = (void *)((v1649 + v188) & v1709);
      uint64_t v191 = (const void *)((v1649 + v189) & v1709);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v191, 1, v1652))
      {
        memcpy(v190, v191, __n);
      }
      else
      {
        v178((size_t)v190, (size_t)v191, v1652);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v190, 0, 1, v1652);
      }
      uint64_t v464 = (void *)(((unint64_t)v191 + v1650) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v465 = (void *)(((unint64_t)v190 + v1650) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v465 = *v464;
      unint64_t v466 = ((unint64_t)v465 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v467 = ((unint64_t)v464 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v468 = *(void *)v467;
      *(unsigned char *)(v466 + 8) = *(unsigned char *)(v467 + 8);
      *(void *)unint64_t v466 = v468;
      unint64_t v469 = (void *)(((unint64_t)v465 + 31) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v470 = (void *)(((unint64_t)v464 + 31) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v469 = *v470;
      unint64_t v471 = (_OWORD *)(((unint64_t)v469 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v472 = (_OWORD *)(((unint64_t)v470 + 15) & 0xFFFFFFFFFFFFFFF8);
      _OWORD *v471 = *v472;
      unint64_t v473 = ((unint64_t)v471 + 19) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v474 = ((unint64_t)v472 + 19) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v475 = *(void *)v474;
      *(unsigned char *)(v473 + 8) = *(unsigned char *)(v474 + 8);
      *(void *)unint64_t v473 = v475;
      *(unsigned char *)(v473 + 9) = *(unsigned char *)(v474 + 9);
      unint64_t v476 = (v473 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      unint64_t v477 = (v474 + 13) & 0xFFFFFFFFFFFFFFFCLL;
      LODWORD(v468) = *(_DWORD *)v477;
      *(unsigned char *)(v476 + 4) = *(unsigned char *)(v477 + 4);
      *(_DWORD *)unint64_t v476 = v468;
      *(_OWORD *)((v473 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v474 + 25) & 0xFFFFFFFFFFFFFFF8);
      size_t v478 = v174 + v1696;
      long long v479 = *(_OWORD *)(v175 + v1696 + 112);
      long long v481 = *(_OWORD *)(v175 + v1696 + 64);
      long long v480 = *(_OWORD *)(v175 + v1696 + 80);
      *(_OWORD *)(v478 + 96) = *(_OWORD *)(v175 + v1696 + 96);
      *(_OWORD *)(v478 + 112) = v479;
      *(_OWORD *)(v478 + 64) = v481;
      *(_OWORD *)(v478 + 80) = v480;
      long long v482 = *(_OWORD *)(v175 + v1696 + 176);
      long long v484 = *(_OWORD *)(v175 + v1696 + 128);
      long long v483 = *(_OWORD *)(v175 + v1696 + 144);
      *(_OWORD *)(v478 + 160) = *(_OWORD *)(v175 + v1696 + 160);
      *(_OWORD *)(v478 + 176) = v482;
      *(_OWORD *)(v478 + 128) = v484;
      *(_OWORD *)(v478 + 144) = v483;
      long long v486 = *(_OWORD *)(v175 + v1696 + 208);
      long long v485 = *(_OWORD *)(v175 + v1696 + 224);
      long long v487 = *(_OWORD *)(v175 + v1696 + 192);
      *(void *)(v478 + 240) = *(void *)(v175 + v1696 + 240);
      *(_OWORD *)(v478 + 208) = v486;
      *(_OWORD *)(v478 + 224) = v485;
      *(_OWORD *)(v478 + 192) = v487;
      long long v488 = *(_OWORD *)(v175 + v1696);
      long long v489 = *(_OWORD *)(v175 + v1696 + 16);
      long long v490 = *(_OWORD *)(v175 + v1696 + 48);
      *(_OWORD *)(v478 + 32) = *(_OWORD *)(v175 + v1696 + 32);
      *(_OWORD *)(v478 + 48) = v490;
      *(_OWORD *)size_t v478 = v488;
      *(_OWORD *)(v478 + 16) = v489;
      id v491 = (_OWORD *)((v174 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v492 = (long long *)((v175 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
      long long v493 = *v492;
      *(_OWORD *)((char *)v491 + 9) = *(long long *)((char *)v492 + 9);
      _OWORD *v491 = v493;
      unint64_t v494 = (v174 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v495 = (v175 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
      long long v496 = *(_OWORD *)v495;
      *(unsigned char *)(v494 + 16) = *(unsigned char *)(v495 + 16);
      *(_OWORD *)unint64_t v494 = v496;
      id v497 = (void *)((v174 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
      size_t v498 = (void *)((v175 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
      *id v497 = *v498;
      *(_OWORD *)(((unint64_t)v497 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v498 + 15) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v86 = a1;
      if (v1668 > 3) {
        goto LABEL_402;
      }
      unsigned int v499 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v499 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 8;
      }
      else if (v499 <= 0xD6)
      {
LABEL_402:
        *((unsigned char *)a1 + v1668) = 8;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 8;
      }
      return v86;
    case 9u:
      unsigned int v192 = a2[v1669];
      unsigned int v193 = v192 - 2;
      if (v192 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v195 = v1705;
        uint64_t v197 = v1658;
        uint64_t v196 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v194 = v1669;
        }
        else {
          uint64_t v194 = 4;
        }
        uint64_t v195 = v1705;
        uint64_t v196 = v1668;
        uint64_t v86 = a1;
        uint64_t v197 = v1658;
        switch(v194)
        {
          case 1:
            int v198 = *a2;
            goto LABEL_519;
          case 2:
            int v198 = *(unsigned __int16 *)a2;
            goto LABEL_519;
          case 3:
            int v198 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_519;
          case 4:
            int v198 = *(_DWORD *)a2;
LABEL_519:
            if (v1669 < 4) {
              unsigned int v192 = (v198 | (v193 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v192 = v198 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v577 = v192 == 1;
      if (v192 == 1) {
        uint64_t v578 = v195;
      }
      else {
        uint64_t v578 = v197;
      }
      (*(void (**)(unsigned char *))(v578 + 32))(v86);
      v86[v1669] = v577;
      if (v196 > 3) {
        goto LABEL_526;
      }
      unsigned int v579 = ((1 << (8 * v196)) + 5) >> (8 * v196);
      if (v579 > 0xFFD6)
      {
        *(_DWORD *)&v86[v196] = 9;
      }
      else if (v579 <= 0xD6)
      {
LABEL_526:
        v86[v196] = 9;
      }
      else
      {
        *(_WORD *)&v86[v196] = 9;
      }
      return v86;
    case 0xAu:
      unsigned int v199 = a2[v1669];
      unsigned int v200 = v199 - 2;
      if (v199 < 2)
      {
        uint64_t v205 = v78;
        uint64_t v201 = v1668;
        uint64_t v86 = a1;
        uint64_t v203 = v1660;
        uint64_t v206 = AssociatedTypeWitness;
        uint64_t v204 = v1705;
        uint64_t v207 = v1658;
      }
      else
      {
        uint64_t v201 = v1668;
        if (v1669 <= 3) {
          uint64_t v202 = v1669;
        }
        else {
          uint64_t v202 = 4;
        }
        uint64_t v203 = v1660;
        uint64_t v204 = v1705;
        uint64_t v205 = v78;
        uint64_t v86 = a1;
        uint64_t v206 = AssociatedTypeWitness;
        uint64_t v207 = v1658;
        switch(v202)
        {
          case 1:
            int v208 = *a2;
            goto LABEL_534;
          case 2:
            int v208 = *(unsigned __int16 *)a2;
            goto LABEL_534;
          case 3:
            int v208 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_534;
          case 4:
            int v208 = *(_DWORD *)a2;
LABEL_534:
            if (v1669 < 4) {
              unsigned int v199 = (v208 | (v200 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v199 = v208 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v580 = v199 == 1;
      if (v199 == 1) {
        uint64_t v581 = v204;
      }
      else {
        uint64_t v581 = v207;
      }
      if (v199 == 1) {
        uint64_t v582 = v203;
      }
      else {
        uint64_t v582 = v206;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v581 + 32))(v86, a2, v582, v69);
      v86[v1669] = v580;
      unint64_t v583 = (unint64_t)&v86[v1654] & v205;
      unint64_t v584 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v205);
      unsigned int v585 = v584[v1669];
      if (v585 > 1)
      {
        size_t v586 = v1700;
        memcpy((void *)((unint64_t)&v86[v1654] & v205), v584, v1700);
      }
      else
      {
        if (v585 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v204 + 32))((unint64_t)&v86[v1654] & v205, v584, v203);
          *(unsigned char *)(v583 + v1669) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v207 + 32))((unint64_t)&v86[v1654] & v205, v584, v206);
          *(unsigned char *)(v583 + v1669) = 0;
        }
        size_t v586 = v1700;
      }
      unint64_t v587 = (unsigned char *)(v583 + v586);
      *unint64_t v587 = v584[v586];
      v587[1] = v584[v586 + 1];
      if (v201 > 3) {
        goto LABEL_550;
      }
      unsigned int v588 = ((1 << (8 * v201)) + 5) >> (8 * v201);
      if (v588 > 0xFFD6)
      {
        *(_DWORD *)&v86[v201] = 10;
      }
      else if (v588 <= 0xD6)
      {
LABEL_550:
        v86[v201] = 10;
      }
      else
      {
        *(_WORD *)&v86[v201] = 10;
      }
      return v86;
    case 0xBu:
      unsigned int v209 = a2[v1669];
      unsigned int v210 = v209 - 2;
      if (v209 < 2)
      {
        uint64_t v215 = v78;
        uint64_t v211 = v1668;
        uint64_t v86 = a1;
        uint64_t v213 = v1660;
        uint64_t v216 = AssociatedTypeWitness;
        uint64_t v214 = v1705;
        uint64_t v217 = v1658;
      }
      else
      {
        uint64_t v211 = v1668;
        if (v1669 <= 3) {
          uint64_t v212 = v1669;
        }
        else {
          uint64_t v212 = 4;
        }
        uint64_t v213 = v1660;
        uint64_t v214 = v1705;
        uint64_t v215 = v78;
        uint64_t v86 = a1;
        uint64_t v216 = AssociatedTypeWitness;
        uint64_t v217 = v1658;
        switch(v212)
        {
          case 1:
            int v218 = *a2;
            goto LABEL_558;
          case 2:
            int v218 = *(unsigned __int16 *)a2;
            goto LABEL_558;
          case 3:
            int v218 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_558;
          case 4:
            int v218 = *(_DWORD *)a2;
LABEL_558:
            if (v1669 < 4) {
              unsigned int v209 = (v218 | (v210 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v209 = v218 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v589 = v209 == 1;
      if (v209 == 1) {
        uint64_t v590 = v214;
      }
      else {
        uint64_t v590 = v217;
      }
      if (v209 == 1) {
        uint64_t v591 = v213;
      }
      else {
        uint64_t v591 = v216;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v590 + 32))(v86, a2, v591, v69);
      v86[v1669] = v589;
      unint64_t v592 = (unint64_t)&v86[v1654] & v215;
      uint64_t v593 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v215);
      unsigned int v594 = v593[v1669];
      if (v594 > 1)
      {
        size_t v595 = v1700;
        memcpy((void *)((unint64_t)&v86[v1654] & v215), v593, v1700);
      }
      else
      {
        if (v594 == 1)
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v214 + 32))((unint64_t)&v86[v1654] & v215, v593, v213);
          *(unsigned char *)(v592 + v1669) = 1;
        }
        else
        {
          (*(void (**)(unint64_t, unsigned __int8 *, uint64_t))(v217 + 32))((unint64_t)&v86[v1654] & v215, v593, v216);
          *(unsigned char *)(v592 + v1669) = 0;
        }
        size_t v595 = v1700;
      }
      unint64_t v596 = (unsigned char *)(v592 + v595);
      *unint64_t v596 = v593[v595];
      v596[1] = v593[v595 + 1];
      if (v211 > 3) {
        goto LABEL_574;
      }
      unsigned int v597 = ((1 << (8 * v211)) + 5) >> (8 * v211);
      if (v597 > 0xFFD6)
      {
        *(_DWORD *)&v86[v211] = 11;
      }
      else if (v597 <= 0xD6)
      {
LABEL_574:
        v86[v211] = 11;
      }
      else
      {
        *(_WORD *)&v86[v211] = 11;
      }
      return v86;
    case 0xCu:
      unsigned int v219 = a2[v1669];
      unsigned int v220 = v219 - 2;
      if (v219 < 2)
      {
        unint64_t v226 = v1669 + 2;
        uint64_t v86 = a1;
        uint64_t v222 = v1660;
        uint64_t v227 = AssociatedTypeWitness;
        size_t v224 = v1700;
        uint64_t v223 = v1705;
        uint64_t v228 = v1658;
        uint64_t v225 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v221 = v1669;
        }
        else {
          uint64_t v221 = 4;
        }
        uint64_t v222 = v1660;
        size_t v224 = v1700;
        uint64_t v223 = v1705;
        uint64_t v225 = v1668;
        unint64_t v226 = v1669 + 2;
        uint64_t v86 = a1;
        uint64_t v227 = AssociatedTypeWitness;
        uint64_t v228 = v1658;
        switch(v221)
        {
          case 1:
            int v229 = *a2;
            goto LABEL_582;
          case 2:
            int v229 = *(unsigned __int16 *)a2;
            goto LABEL_582;
          case 3:
            int v229 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_582;
          case 4:
            int v229 = *(_DWORD *)a2;
LABEL_582:
            if (v1669 < 4) {
              unsigned int v219 = (v229 | (v220 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v219 = v229 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v598 = v219 == 1;
      if (v219 == 1) {
        uint64_t v599 = v223;
      }
      else {
        uint64_t v599 = v228;
      }
      if (v219 == 1) {
        uint64_t v600 = v222;
      }
      else {
        uint64_t v600 = v227;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v599 + 32))(v86, a2, v600, v69);
      v86[v1669] = v598;
      v86[v224] = a2[v224];
      *(void *)((unint64_t)&v86[v226 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v226 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v225 > 3) {
        goto LABEL_592;
      }
      unsigned int v601 = ((1 << (8 * v225)) + 5) >> (8 * v225);
      if (v601 > 0xFFD6)
      {
        *(_DWORD *)&v86[v225] = 12;
      }
      else if (v601 <= 0xD6)
      {
LABEL_592:
        v86[v225] = 12;
      }
      else
      {
        *(_WORD *)&v86[v225] = 12;
      }
      return v86;
    case 0xDu:
      unsigned int v230 = a2[v1669];
      unsigned int v231 = v230 - 2;
      if (v230 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v233 = v1660;
        uint64_t v237 = AssociatedTypeWitness;
        size_t v235 = v1700;
        uint64_t v234 = v1705;
        uint64_t v238 = v1658;
        uint64_t v236 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v232 = v1669;
        }
        else {
          uint64_t v232 = 4;
        }
        uint64_t v233 = v1660;
        size_t v235 = v1700;
        uint64_t v234 = v1705;
        uint64_t v236 = v1668;
        uint64_t v86 = a1;
        uint64_t v237 = AssociatedTypeWitness;
        uint64_t v238 = v1658;
        switch(v232)
        {
          case 1:
            int v239 = *a2;
            goto LABEL_600;
          case 2:
            int v239 = *(unsigned __int16 *)a2;
            goto LABEL_600;
          case 3:
            int v239 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_600;
          case 4:
            int v239 = *(_DWORD *)a2;
LABEL_600:
            if (v1669 < 4) {
              unsigned int v230 = (v239 | (v231 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v230 = v239 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v602 = v230 == 1;
      if (v230 == 1) {
        uint64_t v603 = v234;
      }
      else {
        uint64_t v603 = v238;
      }
      if (v230 == 1) {
        uint64_t v604 = v233;
      }
      else {
        uint64_t v604 = v237;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v603 + 32))(v86, a2, v604, v69);
      v86[v1669] = v602;
      v86[v235] = a2[v235];
      if (v236 > 3) {
        goto LABEL_610;
      }
      unsigned int v605 = ((1 << (8 * v236)) + 5) >> (8 * v236);
      if (v605 > 0xFFD6)
      {
        *(_DWORD *)&v86[v236] = 13;
      }
      else if (v605 <= 0xD6)
      {
LABEL_610:
        v86[v236] = 13;
      }
      else
      {
        *(_WORD *)&v86[v236] = 13;
      }
      return v86;
    case 0xEu:
      unsigned int v240 = a2[v1669];
      unsigned int v241 = v240 - 2;
      if (v240 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v243 = v1660;
        uint64_t v247 = AssociatedTypeWitness;
        size_t v245 = v1700;
        uint64_t v244 = v1705;
        uint64_t v248 = v1658;
        uint64_t v246 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v242 = v1669;
        }
        else {
          uint64_t v242 = 4;
        }
        uint64_t v243 = v1660;
        size_t v245 = v1700;
        uint64_t v244 = v1705;
        uint64_t v246 = v1668;
        uint64_t v86 = a1;
        uint64_t v247 = AssociatedTypeWitness;
        uint64_t v248 = v1658;
        switch(v242)
        {
          case 1:
            int v249 = *a2;
            goto LABEL_618;
          case 2:
            int v249 = *(unsigned __int16 *)a2;
            goto LABEL_618;
          case 3:
            int v249 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_618;
          case 4:
            int v249 = *(_DWORD *)a2;
LABEL_618:
            if (v1669 < 4) {
              unsigned int v240 = (v249 | (v241 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v240 = v249 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v606 = v240 == 1;
      if (v240 == 1) {
        uint64_t v607 = v244;
      }
      else {
        uint64_t v607 = v248;
      }
      if (v240 == 1) {
        uint64_t v608 = v243;
      }
      else {
        uint64_t v608 = v247;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v607 + 32))(v86, a2, v608, v69);
      v86[v1669] = v606;
      *(void *)((unint64_t)&v86[v245 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v245 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v246 > 3) {
        goto LABEL_628;
      }
      unsigned int v609 = ((1 << (8 * v246)) + 5) >> (8 * v246);
      if (v609 > 0xFFD6)
      {
        *(_DWORD *)&v86[v246] = 14;
      }
      else if (v609 <= 0xD6)
      {
LABEL_628:
        v86[v246] = 14;
      }
      else
      {
        *(_WORD *)&v86[v246] = 14;
      }
      return v86;
    case 0xFu:
      unsigned int v250 = a2[v1669];
      unsigned int v251 = v250 - 2;
      if (v250 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v253 = v1660;
        uint64_t v257 = AssociatedTypeWitness;
        size_t v255 = v1700;
        uint64_t v254 = v1705;
        uint64_t v258 = v1658;
        uint64_t v256 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v252 = v1669;
        }
        else {
          uint64_t v252 = 4;
        }
        uint64_t v253 = v1660;
        size_t v255 = v1700;
        uint64_t v254 = v1705;
        uint64_t v256 = v1668;
        uint64_t v86 = a1;
        uint64_t v257 = AssociatedTypeWitness;
        uint64_t v258 = v1658;
        switch(v252)
        {
          case 1:
            int v259 = *a2;
            goto LABEL_636;
          case 2:
            int v259 = *(unsigned __int16 *)a2;
            goto LABEL_636;
          case 3:
            int v259 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_636;
          case 4:
            int v259 = *(_DWORD *)a2;
LABEL_636:
            if (v1669 < 4) {
              unsigned int v250 = (v259 | (v251 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v250 = v259 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v610 = v250 == 1;
      if (v250 == 1) {
        uint64_t v611 = v254;
      }
      else {
        uint64_t v611 = v258;
      }
      if (v250 == 1) {
        uint64_t v612 = v253;
      }
      else {
        uint64_t v612 = v257;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v611 + 32))(v86, a2, v612, v69);
      v86[v1669] = v610;
      *(void *)((unint64_t)&v86[v255 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v255 + 7] & 0xFFFFFFFFFFFFFFF8);
      if (v256 > 3) {
        goto LABEL_646;
      }
      unsigned int v613 = ((1 << (8 * v256)) + 5) >> (8 * v256);
      if (v613 > 0xFFD6)
      {
        *(_DWORD *)&v86[v256] = 15;
      }
      else if (v613 <= 0xD6)
      {
LABEL_646:
        v86[v256] = 15;
      }
      else
      {
        *(_WORD *)&v86[v256] = 15;
      }
      return v86;
    case 0x10u:
      long long v260 = *((_OWORD *)a2 + 1);
      uint64_t v86 = a1;
      *a1 = *(_OWORD *)a2;
      a1[1] = v260;
      a1[2] = *((_OWORD *)a2 + 2);
      *((void *)a1 + 6) = *((void *)a2 + 6);
      if (v1668 > 3) {
        goto LABEL_209;
      }
      unsigned int v411 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v411 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 16;
      }
      else if (v411 <= 0xD6)
      {
LABEL_209:
        *((unsigned char *)a1 + v1668) = 16;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 16;
      }
      return v86;
    case 0x11u:
      unsigned int v261 = a2[v1669];
      unsigned int v262 = v261 - 2;
      if (v261 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v264 = v1705;
        uint64_t v266 = v1658;
        uint64_t v265 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v263 = v1669;
        }
        else {
          uint64_t v263 = 4;
        }
        uint64_t v264 = v1705;
        uint64_t v265 = v1668;
        uint64_t v86 = a1;
        uint64_t v266 = v1658;
        switch(v263)
        {
          case 1:
            int v267 = *a2;
            goto LABEL_654;
          case 2:
            int v267 = *(unsigned __int16 *)a2;
            goto LABEL_654;
          case 3:
            int v267 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_654;
          case 4:
            int v267 = *(_DWORD *)a2;
LABEL_654:
            if (v1669 < 4) {
              unsigned int v261 = (v267 | (v262 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v261 = v267 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v614 = v261 == 1;
      if (v261 == 1) {
        uint64_t v615 = v264;
      }
      else {
        uint64_t v615 = v266;
      }
      (*(void (**)(unsigned char *))(v615 + 32))(v86);
      v86[v1669] = v614;
      if (v265 > 3) {
        goto LABEL_661;
      }
      unsigned int v616 = ((1 << (8 * v265)) + 5) >> (8 * v265);
      if (v616 > 0xFFD6)
      {
        *(_DWORD *)&v86[v265] = 17;
      }
      else if (v616 <= 0xD6)
      {
LABEL_661:
        v86[v265] = 17;
      }
      else
      {
        *(_WORD *)&v86[v265] = 17;
      }
      return v86;
    case 0x12u:
      uint64_t v86 = a1;
      (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t, unint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness, v69);
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1705 + 32))(((unint64_t)a1 + v1627) & v77, (unint64_t)&a2[v1627] & v77, v1660);
      if (v1668 > 3) {
        goto LABEL_217;
      }
      unsigned int v412 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v412 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 18;
      }
      else if (v412 <= 0xD6)
      {
LABEL_217:
        *((unsigned char *)a1 + v1668) = 18;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 18;
      }
      return v86;
    case 0x13u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      uint64_t v268 = ((unint64_t)a1 + v84 + 1) & v78;
      uint64_t v269 = (unsigned __int8 *)((unint64_t)&a2[v84 + 1] & v78);
      unsigned int v270 = v269[v1669];
      unsigned int v271 = v270 - 2;
      if (v270 < 2)
      {
        uint64_t v273 = v1705;
        uint64_t v275 = v1658;
        uint64_t v274 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v272 = v1669;
        }
        else {
          uint64_t v272 = 4;
        }
        uint64_t v273 = v1705;
        uint64_t v274 = v1668;
        uint64_t v275 = v1658;
        switch(v272)
        {
          case 1:
            int v276 = *v269;
            goto LABEL_669;
          case 2:
            int v276 = *(unsigned __int16 *)v269;
            goto LABEL_669;
          case 3:
            int v276 = *(unsigned __int16 *)((unint64_t)&a2[v84 + 1] & v78) | (*(unsigned __int8 *)(((unint64_t)&a2[v84 + 1] & v78) + 2) << 16);
            goto LABEL_669;
          case 4:
            int v276 = *(_DWORD *)v269;
LABEL_669:
            if (v1669 < 4) {
              unsigned int v270 = (v276 | (v271 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v270 = v276 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v617 = v270 == 1;
      if (v270 == 1) {
        uint64_t v618 = v273;
      }
      else {
        uint64_t v618 = v275;
      }
      (*(void (**)(uint64_t))(v618 + 32))(v268);
      *(unsigned char *)(v268 + v1669) = v617;
      if (v274 > 3) {
        goto LABEL_676;
      }
      unsigned int v619 = ((1 << (8 * v274)) + 5) >> (8 * v274);
      if (v619 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v274) = 19;
      }
      else if (v619 <= 0xD6)
      {
LABEL_676:
        *((unsigned char *)a1 + v274) = 19;
      }
      else
      {
        *(_WORD *)((char *)a1 + v274) = 19;
      }
      return v86;
    case 0x14u:
      uint64_t v86 = a1;
      *(void *)a1 = *(void *)a2;
      if (v1668 > 3) {
        goto LABEL_225;
      }
      unsigned int v413 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v413 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 20;
      }
      else if (v413 <= 0xD6)
      {
LABEL_225:
        *((unsigned char *)a1 + v1668) = 20;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 20;
      }
      return v86;
    case 0x15u:
      uint64_t v86 = a1;
      *(void *)a1 = *(void *)a2;
      if (v1668 > 3) {
        goto LABEL_227;
      }
      unsigned int v414 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v414 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 21;
      }
      else if (v414 <= 0xD6)
      {
LABEL_227:
        *((unsigned char *)a1 + v1668) = 21;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 21;
      }
      return v86;
    case 0x16u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1668 > 3) {
        goto LABEL_229;
      }
      unsigned int v415 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v415 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 22;
      }
      else if (v415 <= 0xD6)
      {
LABEL_229:
        *((unsigned char *)a1 + v1668) = 22;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 22;
      }
      return v86;
    case 0x17u:
      uint64_t v86 = a1;
      *(unsigned char *)a1 = *a2;
      if (v1668 > 3) {
        goto LABEL_231;
      }
      unsigned int v416 = ((1 << (8 * v1668)) + 5) >> (8 * v1668);
      if (v416 > 0xFFD6)
      {
        *(_DWORD *)((char *)a1 + v1668) = 23;
      }
      else if (v416 <= 0xD6)
      {
LABEL_231:
        *((unsigned char *)a1 + v1668) = 23;
      }
      else
      {
        *(_WORD *)((char *)a1 + v1668) = 23;
      }
      return v86;
    case 0x18u:
      unsigned int v277 = a2[v1669];
      unsigned int v278 = v277 - 2;
      if (v277 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v280 = v1705;
        uint64_t v282 = v1658;
        uint64_t v281 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v279 = v1669;
        }
        else {
          uint64_t v279 = 4;
        }
        uint64_t v280 = v1705;
        uint64_t v281 = v1668;
        uint64_t v86 = a1;
        uint64_t v282 = v1658;
        switch(v279)
        {
          case 1:
            int v283 = *a2;
            goto LABEL_684;
          case 2:
            int v283 = *(unsigned __int16 *)a2;
            goto LABEL_684;
          case 3:
            int v283 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_684;
          case 4:
            int v283 = *(_DWORD *)a2;
LABEL_684:
            if (v1669 < 4) {
              unsigned int v277 = (v283 | (v278 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v277 = v283 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v620 = v277 == 1;
      if (v277 == 1) {
        uint64_t v621 = v280;
      }
      else {
        uint64_t v621 = v282;
      }
      (*(void (**)(unsigned char *))(v621 + 32))(v86);
      v86[v1669] = v620;
      if (v281 > 3) {
        goto LABEL_691;
      }
      unsigned int v622 = ((1 << (8 * v281)) + 5) >> (8 * v281);
      if (v622 > 0xFFD6)
      {
        *(_DWORD *)&v86[v281] = 24;
      }
      else if (v622 <= 0xD6)
      {
LABEL_691:
        v86[v281] = 24;
      }
      else
      {
        *(_WORD *)&v86[v281] = 24;
      }
      return v86;
    case 0x19u:
      unsigned int v284 = a2[v1669];
      unsigned int v285 = v284 - 2;
      if (v284 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v287 = v1705;
        uint64_t v289 = v1658;
        uint64_t v288 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v286 = v1669;
        }
        else {
          uint64_t v286 = 4;
        }
        uint64_t v287 = v1705;
        uint64_t v288 = v1668;
        uint64_t v86 = a1;
        uint64_t v289 = v1658;
        switch(v286)
        {
          case 1:
            int v290 = *a2;
            goto LABEL_699;
          case 2:
            int v290 = *(unsigned __int16 *)a2;
            goto LABEL_699;
          case 3:
            int v290 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_699;
          case 4:
            int v290 = *(_DWORD *)a2;
LABEL_699:
            if (v1669 < 4) {
              unsigned int v284 = (v290 | (v285 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v284 = v290 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v623 = v284 == 1;
      if (v284 == 1) {
        uint64_t v624 = v287;
      }
      else {
        uint64_t v624 = v289;
      }
      (*(void (**)(unsigned char *))(v624 + 32))(v86);
      v86[v1669] = v623;
      if (v288 > 3) {
        goto LABEL_706;
      }
      unsigned int v625 = ((1 << (8 * v288)) + 5) >> (8 * v288);
      if (v625 > 0xFFD6)
      {
        *(_DWORD *)&v86[v288] = 25;
      }
      else if (v625 <= 0xD6)
      {
LABEL_706:
        v86[v288] = 25;
      }
      else
      {
        *(_WORD *)&v86[v288] = 25;
      }
      return v86;
    case 0x1Au:
      unsigned int v291 = a2[v1669];
      unsigned int v292 = v291 - 2;
      if (v291 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v294 = v1705;
        uint64_t v296 = v1658;
        uint64_t v295 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v293 = v1669;
        }
        else {
          uint64_t v293 = 4;
        }
        uint64_t v294 = v1705;
        uint64_t v295 = v1668;
        uint64_t v86 = a1;
        uint64_t v296 = v1658;
        switch(v293)
        {
          case 1:
            int v297 = *a2;
            goto LABEL_714;
          case 2:
            int v297 = *(unsigned __int16 *)a2;
            goto LABEL_714;
          case 3:
            int v297 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_714;
          case 4:
            int v297 = *(_DWORD *)a2;
LABEL_714:
            if (v1669 < 4) {
              unsigned int v291 = (v297 | (v292 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v291 = v297 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v626 = v291 == 1;
      if (v291 == 1) {
        uint64_t v627 = v294;
      }
      else {
        uint64_t v627 = v296;
      }
      (*(void (**)(unsigned char *))(v627 + 32))(v86);
      v86[v1669] = v626;
      if (v295 > 3) {
        goto LABEL_721;
      }
      unsigned int v628 = ((1 << (8 * v295)) + 5) >> (8 * v295);
      if (v628 > 0xFFD6)
      {
        *(_DWORD *)&v86[v295] = 26;
      }
      else if (v628 <= 0xD6)
      {
LABEL_721:
        v86[v295] = 26;
      }
      else
      {
        *(_WORD *)&v86[v295] = 26;
      }
      return v86;
    case 0x1Bu:
      uint64_t v298 = ~v1707;
      uint64_t v299 = ~v1672;
      uint64_t v300 = ~v1661;
      uint64_t v1710 = ~v40;
      uint64_t v1570 = ~v1721;
      uint64_t v1689 = ~v1679;
      uint64_t v1692 = ~v1712;
      unint64_t v301 = v69;
      unint64_t v302 = a2;
      unsigned int v303 = a2[v69];
      unsigned int v304 = v303 - 2;
      if (v303 < 2)
      {
        size_t v306 = __n;
        uint64_t v307 = v1668;
      }
      else
      {
        if (v69 <= 3) {
          uint64_t v305 = v69;
        }
        else {
          uint64_t v305 = 4;
        }
        size_t v306 = __n;
        uint64_t v307 = v1668;
        uint64_t v82 = ~v1681;
        switch(v305)
        {
          case 1:
            int v308 = *a2;
            goto LABEL_729;
          case 2:
            int v308 = *(unsigned __int16 *)a2;
            goto LABEL_729;
          case 3:
            int v308 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            uint64_t v82 = ~v1681;
            goto LABEL_729;
          case 4:
            int v308 = *(_DWORD *)a2;
LABEL_729:
            if (v69 < 4)
            {
              uint64_t v82 = ~v1681;
              unsigned int v303 = (v308 | (v304 << (8 * v69))) + 2;
            }
            else
            {
              unsigned int v303 = v308 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1664 = ~v35;
      if (v303 == 1)
      {
        unsigned int v629 = a2[v1609];
        unsigned int v630 = v629 - 8;
        uint64_t v86 = a1;
        if (v629 >= 8)
        {
          if (v1609 <= 3) {
            uint64_t v631 = v1609;
          }
          else {
            uint64_t v631 = 4;
          }
          switch(v631)
          {
            case 1:
              int v632 = *a2;
              goto LABEL_1138;
            case 2:
              int v632 = *(unsigned __int16 *)a2;
              goto LABEL_1138;
            case 3:
              int v632 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_1138;
            case 4:
              int v632 = *(_DWORD *)a2;
LABEL_1138:
              if (v1609 < 4) {
                unsigned int v629 = (v632 | (v630 << (8 * v1609))) + 8;
              }
              else {
                unsigned int v629 = v632 + 8;
              }
              break;
            default:
              break;
          }
        }
        unint64_t v1701 = v69;
        uint64_t v1002 = ~v56;
        switch(v629)
        {
          case 1u:
            uint64_t v1581 = v85;
            size_t v1574 = v38;
            uint64_t v1717 = v298;
            size_t v1589 = v36;
            long long v1685 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1685)(a1);
            id v1695 = (void *)(((unint64_t)a1 + v1601) & v299);
            long long v1007 = (const void *)((unint64_t)&a2[v1601] & v299);
            unint64_t v1730 = v1007;
            if (v1621 == v1629)
            {
              int v1008 = (*(uint64_t (**)(void))(v1705 + 48))();
            }
            else
            {
              unint64_t v1059 = ((unint64_t)v1007 + v1647) & v1692;
              unint64_t v1060 = (v1619 + v1059) & v1664;
              if (v1634 != v1629)
              {
                size_t v1083 = v1060 + v1589;
                uint64_t v1084 = v300;
                v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
                if ((v1606 & 0x80000000) != 0)
                {
                  uint64_t v1126 = (v1655 + ((v1699 + v1083) & v1717)) & v1710;
                  if (v1639 <= 0x7FFFFFFD)
                  {
                    unint64_t v1567 = *(void *)(((v1603 + ((v1651 + v1126) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1567 >= 0xFFFFFFFF) {
                      LODWORD(v1567) = -1;
                    }
                    size_t v1115 = v1574;
                    if ((v1567 + 1) >= 2) {
                      goto LABEL_1319;
                    }
                    goto LABEL_1322;
                  }
                  int v1008 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1126, v1639, v1652);
                }
                else
                {
                  unint64_t v1086 = *(void *)(v1083 + 8);
                  if (v1086 >= 0xFFFFFFFF) {
                    LODWORD(v1086) = -1;
                  }
                  int v1008 = v1086 + 1;
                }
                size_t v1115 = v1574;
                goto LABEL_1318;
              }
              if (v1624 == v1634)
              {
                int v1008 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1059) & v1664);
              }
              else
              {
                long long v1113 = (unint64_t *)((v1666 + v1060) & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  unint64_t v1114 = *v1113;
                  if (v1114 >= 0xFFFFFFFF) {
                    LODWORD(v1114) = -1;
                  }
                  size_t v1115 = v1574;
                  uint64_t v1084 = v300;
                  v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
                  if ((v1114 + 1) >= 2) {
                    goto LABEL_1319;
                  }
                  goto LABEL_1322;
                }
                int v1008 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1113 + v1644) & v1581);
              }
            }
            size_t v1115 = v1574;
            uint64_t v1084 = v300;
            v1085 = (void *)(((unint64_t)a1 + v1601) & v299);
LABEL_1318:
            if (v1008)
            {
LABEL_1319:
              int v1199 = v1730;
              memcpy(v1085, v1730, v1115);
              uint64_t v307 = v1668;
              unint64_t v1200 = v1617;
              uint64_t v1201 = v1721;
LABEL_1320:
              size_t v1202 = v306;
              goto LABEL_1326;
            }
            unint64_t v1059 = ((unint64_t)v1730 + v1647) & v1692;
            unint64_t v1060 = (v1619 + v1059) & v1664;
LABEL_1322:
            v1685(v1085, v1730, v1660);
            v1685((void *)(((unint64_t)v1085 + v1647) & v1692), (const void *)v1059, v1660);
            unint64_t v1203 = (v1619 + (((unint64_t)v1085 + v1647) & v1692)) & v1664;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1203, v1060, v1642);
            uint64_t v1204 = (void *)((v1666 + v1203) & 0xFFFFFFFFFFFFFFF8);
            v1205 = (void *)((v1666 + v1060) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1204 = *v1205;
            unint64_t v1206 = ((unint64_t)v1204 + v1644) & v1581;
            unint64_t v1207 = ((unint64_t)v1205 + v1644) & v1581;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1206, v1207, v1638);
            uint64_t v1208 = (void *)((v1632 + v1206) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1209 = (void *)((v1632 + v1207) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1208 = *v1209;
            *(_OWORD *)(((unint64_t)v1208 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1209
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1203 + v1589) = *(_OWORD *)(v1060 + v1589);
            size_t v1210 = (v1699 + v1203 + v1589) & v1717;
            size_t v1211 = (v1699 + v1060 + v1589) & v1717;
            *(unsigned char *)size_t v1210 = *(unsigned char *)v1211;
            uint64_t v1212 = v1210 | 4;
            int v1213 = *(_DWORD *)(v1211 | 4);
            *(unsigned char *)(v1212 + 4) = *(unsigned char *)((v1211 | 4) + 4);
            *(_DWORD *)uint64_t v1212 = v1213;
            *(_WORD *)(v1210 + 10) = *(_WORD *)(v1211 + 0xA);
            v1214 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1214((v1655 + v1210) & v1710, (v1655 + v1211) & v1710, v1652);
            size_t v1215 = (v1651 + ((v1655 + v1210) & v1710)) & v1710;
            size_t v1216 = (v1651 + ((v1655 + v1211) & v1710)) & v1710;
            v1214(v1215, v1216, v1652);
            v1217 = (unsigned char *)(v1215 + v1657);
            unsigned char *v1217 = *(unsigned char *)(v1216 + v1657);
            v1217[1] = *(unsigned char *)(v1216 + v1657 + 1);
            v1217[2] = *(unsigned char *)(v1216 + v1657 + 2);
            v1217[3] = *(unsigned char *)(v1216 + v1657 + 3);
            v1217[4] = *(unsigned char *)(v1216 + v1657 + 4);
            unint64_t v1218 = (v1215 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1219 = (v1216 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1218 = *(_OWORD *)v1219;
            *(unsigned char *)(v1218 + 16) = *(unsigned char *)(v1219 + 16);
            *(unsigned char *)(v1218 + 17) = *(unsigned char *)(v1219 + 17);
            *(unsigned char *)(v1218 + 18) = *(unsigned char *)(v1219 + 18);
            *(unsigned char *)(v1218 + 19) = *(unsigned char *)(v1219 + 19);
            unint64_t v1220 = (v1218 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1221 = (v1219 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1220 = *(void *)v1221;
            *(unsigned char *)(v1220 + 8) = *(unsigned char *)(v1221 + 8);
            *(unsigned char *)(v1220 + 9) = *(unsigned char *)(v1221 + 9);
            *(unsigned char *)(v1220 + 10) = *(unsigned char *)(v1221 + 10);
            *(unsigned char *)(v1220 + 11) = *(unsigned char *)(v1221 + 11);
            *(unsigned char *)(v1220 + 12) = *(unsigned char *)(v1221 + 12);
            v1222 = (void *)((v1219 + 47) & 0xFFFFFFFFFFFFFFF8);
            char v1223 = (void *)((v1218 + 47) & 0xFFFFFFFFFFFFFFF8);
            *char v1223 = *v1222;
            unint64_t v1224 = ((unint64_t)v1223 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1225 = ((unint64_t)v1222 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1224 = *(void *)v1225;
            *(unsigned char *)(v1224 + 8) = *(unsigned char *)(v1225 + 8);
            *(unsigned char *)(v1224 + 9) = *(unsigned char *)(v1225 + 9);
            v1226 = (void *)((v1649 + v1224) & v1710);
            v1227 = (const void *)((v1649 + v1225) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1227, 1, v1652))
            {
              size_t v306 = __n;
              memcpy(v1226, v1227, __n);
            }
            else
            {
              v1214((size_t)v1226, (size_t)v1227, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1226, 0, 1, v1652);
              size_t v306 = __n;
            }
            unint64_t v1228 = (void *)(((unint64_t)v1226 + v1650) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1229 = (void *)(((unint64_t)v1227 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1228 = *v1229;
            unint64_t v1230 = ((unint64_t)v1228 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1231 = ((unint64_t)v1229 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1232 = *(void *)v1231;
            *(unsigned char *)(v1230 + 8) = *(unsigned char *)(v1231 + 8);
            *(void *)unint64_t v1230 = v1232;
            unint64_t v1233 = (void *)(((unint64_t)v1228 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1234 = (void *)(((unint64_t)v1229 + 31) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1233 = *v1234;
            unint64_t v1235 = (_OWORD *)(((unint64_t)v1233 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1236 = (_OWORD *)(((unint64_t)v1234 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1235 = *v1236;
            unint64_t v1237 = ((unint64_t)v1235 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1238 = ((unint64_t)v1236 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1239 = *(void *)v1238;
            *(unsigned char *)(v1237 + 8) = *(unsigned char *)(v1238 + 8);
            *(void *)unint64_t v1237 = v1239;
            *(unsigned char *)(v1237 + 9) = *(unsigned char *)(v1238 + 9);
            unint64_t v1240 = (v1237 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1241 = (v1238 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1232) = *(_DWORD *)v1241;
            *(unsigned char *)(v1240 + 4) = *(unsigned char *)(v1241 + 4);
            *(_DWORD *)unint64_t v1240 = v1232;
            *(_OWORD *)((v1237 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1238 + 25) & 0xFFFFFFFFFFFFFFF8);
            size_t v1242 = v1210 + v1696;
            long long v1243 = *(_OWORD *)(v1211 + v1696 + 112);
            long long v1245 = *(_OWORD *)(v1211 + v1696 + 64);
            long long v1244 = *(_OWORD *)(v1211 + v1696 + 80);
            *(_OWORD *)(v1242 + 96) = *(_OWORD *)(v1211 + v1696 + 96);
            *(_OWORD *)(v1242 + 112) = v1243;
            *(_OWORD *)(v1242 + 64) = v1245;
            *(_OWORD *)(v1242 + 80) = v1244;
            long long v1246 = *(_OWORD *)(v1211 + v1696 + 176);
            long long v1248 = *(_OWORD *)(v1211 + v1696 + 128);
            long long v1247 = *(_OWORD *)(v1211 + v1696 + 144);
            *(_OWORD *)(v1242 + 160) = *(_OWORD *)(v1211 + v1696 + 160);
            *(_OWORD *)(v1242 + 176) = v1246;
            *(_OWORD *)(v1242 + 128) = v1248;
            *(_OWORD *)(v1242 + 144) = v1247;
            long long v1250 = *(_OWORD *)(v1211 + v1696 + 208);
            long long v1249 = *(_OWORD *)(v1211 + v1696 + 224);
            long long v1251 = *(_OWORD *)(v1211 + v1696 + 192);
            *(void *)(v1242 + 240) = *(void *)(v1211 + v1696 + 240);
            *(_OWORD *)(v1242 + 208) = v1250;
            *(_OWORD *)(v1242 + 224) = v1249;
            *(_OWORD *)(v1242 + 192) = v1251;
            long long v1252 = *(_OWORD *)(v1211 + v1696);
            long long v1253 = *(_OWORD *)(v1211 + v1696 + 16);
            long long v1254 = *(_OWORD *)(v1211 + v1696 + 48);
            *(_OWORD *)(v1242 + 32) = *(_OWORD *)(v1211 + v1696 + 32);
            *(_OWORD *)(v1242 + 48) = v1254;
            *(_OWORD *)size_t v1242 = v1252;
            *(_OWORD *)(v1242 + 16) = v1253;
            uint64_t v1255 = (_OWORD *)((v1210 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1256 = (long long *)((v1211 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1257 = *v1256;
            *(_OWORD *)((char *)v1255 + 9) = *(long long *)((char *)v1256 + 9);
            *uint64_t v1255 = v1257;
            unint64_t v1258 = (v1210 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1259 = (v1211 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1260 = *(_OWORD *)v1259;
            *(unsigned char *)(v1258 + 16) = *(unsigned char *)(v1259 + 16);
            *(_OWORD *)unint64_t v1258 = v1260;
            unint64_t v1261 = (void *)((v1210 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1262 = (void *)((v1211 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1261 = *v1262;
            *(_OWORD *)(((unint64_t)v1261 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1262
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v307 = v1668;
            size_t v1202 = v1657;
            unint64_t v1200 = v1617;
            uint64_t v1201 = v1721;
            int v1199 = v1730;
            v1085 = v1695;
            if (!v1639) {
              goto LABEL_1320;
            }
LABEL_1326:
            uint64_t v1263 = v1084;
            unint64_t v1264 = ((((v1200
                      + ((((((((((v1633 + v1202 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 19) & 0xFFFFFFFFFFFFFFF8)
                        + 25) & 0xFFFFFFFFFFFFFFF8)
                      + 327) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 16;
            size_t v1265 = (void *)(((unint64_t)v1085 + v1201 + v1264) & v1570);
            unint64_t v1266 = (const void *)(((unint64_t)v1199 + v1201 + v1264) & v1570);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v1266, 1, AssociatedTypeWitness))
            {
              memcpy(v1265, v1266, v1616);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1658 + 32))(v1265, v1266, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1658 + 56))(v1265, 0, 1, AssociatedTypeWitness);
            }
            size_t v1267 = (char *)(((unint64_t)v1265 + v1600) & v1689);
            unint64_t v1268 = (char *)(((unint64_t)v1266 + v1600) & v1689);
            if (v1623 == v1630)
            {
              int v1269 = (*(uint64_t (**)(unint64_t))(v1641 + 48))(((unint64_t)v1266 + v1600) & v1689);
              unint64_t v301 = v1701;
            }
            else
            {
              unint64_t v1270 = (uint64_t *)((unint64_t)&v1268[v1646] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v301 = v1701;
              if (v1608 <= 0x7FFFFFFE)
              {
                uint64_t v1271 = *v1270;
                if ((unint64_t)*v1270 >= 0xFFFFFFFF) {
                  LODWORD(v1271) = -1;
                }
                if ((v1271 + 1) >= 2) {
                  goto LABEL_1338;
                }
                goto LABEL_1340;
              }
              int v1269 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1270 + v1635) & v1263, v1604, v1636);
            }
            if (v1269)
            {
LABEL_1338:
              memcpy(v1267, v1268, v1697);
LABEL_1341:
              *(void *)&v1267[v1697] = *(void *)&v1268[v1697];
              v1277 = (void *)((unint64_t)&v1267[v1697 + 15] & 0xFFFFFFFFFFFFFFF8);
              v1278 = (void *)((unint64_t)&v1268[v1697 + 15] & 0xFFFFFFFFFFFFFFF8);
              void *v1277 = *v1278;
              *(void *)(((unint64_t)v1277 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1278
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              char v1017 = 1;
              unint64_t v1053 = v1609;
              char v1016 = 1;
LABEL_1403:
              v86[v1053] = v1017;
              v86[v301] = v1016;
              if (v307 > 3)
              {
LABEL_1404:
                v86[v307] = 27;
                return v86;
              }
              unsigned int v1564 = ((1 << (8 * v307)) + 5) >> (8 * v307);
              if (v1564 <= 0xFFD6)
              {
                if (v1564 > 0xD6)
                {
                  *(_WORD *)&v86[v307] = 27;
                  return v86;
                }
                goto LABEL_1404;
              }
              int v555 = 27;
LABEL_1409:
              *(_DWORD *)&v86[v307] = v555;
              return v86;
            }
            unint64_t v1270 = (uint64_t *)((unint64_t)&v1268[v1646] & 0xFFFFFFFFFFFFFFF8);
LABEL_1340:
            (*(void (**)(char *, char *, uint64_t))(v1641 + 32))(v1267, v1268, v1640);
            v1272 = (void *)((unint64_t)&v1267[v1646] & 0xFFFFFFFFFFFFFFF8);
            void *v1272 = *v1270;
            unint64_t v1273 = ((unint64_t)v1272 + v1635) & v1263;
            unint64_t v1274 = ((unint64_t)v1270 + v1635) & v1263;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1273, v1274, v1636);
            unint64_t v1275 = v1631 + v1273;
            unint64_t v301 = v1701;
            v1275 &= 0xFFFFFFFFFFFFFFF8;
            v1276 = (void *)((v1631 + v1274) & 0xFFFFFFFFFFFFFFF8);
            *(void *)unint64_t v1275 = *v1276;
            *(_OWORD *)((v1275 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1276 + 15) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1341;
          case 2u:
            uint64_t v1009 = v300;
            (*(void (**)(_OWORD *))(v1705 + 32))(a1);
            long long v1010 = (void *)(((unint64_t)a1 + v1597) & v1570);
            long long v1011 = (const void *)((unint64_t)&a2[v1597] & v1570);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1658 + 48))(v1011, 1, AssociatedTypeWitness))
            {
              memcpy(v1010, v1011, v1616);
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v1658 + 32))(v1010, v1011, AssociatedTypeWitness);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1658 + 56))(v1010, 0, 1, AssociatedTypeWitness);
            }
            uint64_t v1069 = (char *)(((unint64_t)v1010 + v1600) & v1689);
            int v1070 = (char *)(((unint64_t)v1011 + v1600) & v1689);
            if (v1623 == v1630)
            {
              int v1071 = (*(uint64_t (**)(unint64_t))(v1641 + 48))(((unint64_t)v1011 + v1600) & v1689);
              unint64_t v301 = v1701;
            }
            else
            {
              unint64_t v1072 = (uint64_t *)((unint64_t)&v1070[v1646] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v301 = v1701;
              if (v1608 <= 0x7FFFFFFE)
              {
                uint64_t v1073 = *v1072;
                if ((unint64_t)*v1072 >= 0xFFFFFFFF) {
                  LODWORD(v1073) = -1;
                }
                if ((v1073 + 1) >= 2) {
                  goto LABEL_1259;
                }
                goto LABEL_1261;
              }
              int v1071 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1072 + v1635) & v1009, v1604, v1636);
            }
            if (v1071)
            {
LABEL_1259:
              memcpy(v1069, v1070, v1697);
              goto LABEL_1262;
            }
            unint64_t v1072 = (uint64_t *)((unint64_t)&v1070[v1646] & 0xFFFFFFFFFFFFFFF8);
LABEL_1261:
            (*(void (**)(char *, char *, uint64_t))(v1641 + 32))(v1069, v1070, v1640);
            v1096 = (void *)((unint64_t)&v1069[v1646] & 0xFFFFFFFFFFFFFFF8);
            void *v1096 = *v1072;
            unint64_t v1097 = ((unint64_t)v1096 + v1635) & v1009;
            unint64_t v1098 = ((unint64_t)v1072 + v1635) & v1009;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1097, v1098, v1636);
            unint64_t v1099 = v1631 + v1097;
            unint64_t v301 = v1701;
            v1099 &= 0xFFFFFFFFFFFFFFF8;
            unint64_t v1100 = (void *)((v1631 + v1098) & 0xFFFFFFFFFFFFFFF8);
            *(void *)unint64_t v1099 = *v1100;
            *(_OWORD *)((v1099 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1100 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_1262:
            uint64_t v1101 = &v1069[v1697];
            *uint64_t v1101 = v1070[v1697];
            *((void *)v1101 + 1) = *(void *)&v1070[v1697 + 8];
            char v1016 = 1;
            char v1017 = 2;
            unint64_t v1053 = v1609;
            goto LABEL_1403;
          case 3u:
            uint64_t v1582 = v85;
            size_t v1590 = v36;
            size_t v1575 = v38;
            uint64_t v1012 = v298;
            size_t v1718 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1718)(a1);
            unint64_t v1725 = (void *)(((unint64_t)a1 + v1601) & v299);
            long long v1013 = (const void *)((unint64_t)&a2[v1601] & v299);
            unint64_t v1731 = v1013;
            if (v1621 == v1629)
            {
              int v1014 = (*(uint64_t (**)(void))(v1705 + 48))();
              uint64_t v1015 = v1012;
            }
            else
            {
              unint64_t v1061 = ((unint64_t)v1013 + v1647) & v1692;
              unint64_t v1062 = (v1619 + v1061) & v1664;
              uint64_t v1015 = v1012;
              if (v1634 != v1629)
              {
                size_t v1087 = v1062 + v1590;
                v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
                if ((v1606 & 0x80000000) != 0)
                {
                  uint64_t v1127 = (v1655 + ((v1699 + v1087) & v1012)) & v1710;
                  if (v1639 <= 0x7FFFFFFD)
                  {
                    unint64_t v1568 = *(void *)(((v1603 + ((v1651 + v1127) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                    if (v1568 >= 0xFFFFFFFF) {
                      LODWORD(v1568) = -1;
                    }
                    size_t v1118 = v1575;
                    if ((v1568 + 1) >= 2) {
                      goto LABEL_1345;
                    }
                    goto LABEL_1348;
                  }
                  int v1014 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1127, v1639, v1652);
                }
                else
                {
                  unint64_t v1089 = *(void *)(v1087 + 8);
                  if (v1089 >= 0xFFFFFFFF) {
                    LODWORD(v1089) = -1;
                  }
                  int v1014 = v1089 + 1;
                }
                size_t v1118 = v1575;
                goto LABEL_1344;
              }
              if (v1624 == v1634)
              {
                int v1014 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1061) & v1664);
              }
              else
              {
                long long v1116 = (unint64_t *)((v1666 + v1062) & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  unint64_t v1117 = *v1116;
                  if (v1117 >= 0xFFFFFFFF) {
                    LODWORD(v1117) = -1;
                  }
                  size_t v1118 = v1575;
                  v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
                  if ((v1117 + 1) >= 2) {
                    goto LABEL_1345;
                  }
                  goto LABEL_1348;
                }
                int v1014 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1116 + v1644) & v1582);
              }
            }
            size_t v1118 = v1575;
            v1088 = (void *)(((unint64_t)a1 + v1601) & v299);
LABEL_1344:
            if (v1014)
            {
LABEL_1345:
              id v1279 = v1731;
              memcpy(v1088, v1731, v1118);
              unint64_t v1280 = v1617;
              unint64_t v1053 = v1609;
              size_t v1281 = __n;
              unint64_t v301 = v1701;
LABEL_1346:
              size_t v1282 = v1281;
LABEL_1352:
              unint64_t v1344 = ((((v1280
                        + ((((((((((v1633 + v1282 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              unint64_t v1345 = (_OWORD *)(((unint64_t)v1088 + v1344) & 0xFFFFFFFFFFFFFFF8);
              v1346 = (_OWORD *)(((unint64_t)v1279 + v1344) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1345 = *v1346;
              *(void *)(((unint64_t)v1345 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1346
                                                                                              + 23) & 0xFFFFFFFFFFFFFFF8);
              char v1016 = 1;
              goto LABEL_1401;
            }
            unint64_t v1061 = ((unint64_t)v1731 + v1647) & v1692;
            unint64_t v1062 = (v1619 + v1061) & v1664;
LABEL_1348:
            v1718(v1088, v1731, v1660);
            unint64_t v1283 = ((unint64_t)v1088 + v1647) & v1692;
            v1718((void *)v1283, (const void *)v1061, v1660);
            unint64_t v1284 = (v1619 + v1283) & v1664;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1284, v1062, v1642);
            v1285 = (void *)((v1666 + v1284) & 0xFFFFFFFFFFFFFFF8);
            v1286 = (void *)((v1666 + v1062) & 0xFFFFFFFFFFFFFFF8);
            void *v1285 = *v1286;
            unint64_t v1287 = ((unint64_t)v1285 + v1644) & v1582;
            unint64_t v1288 = ((unint64_t)v1286 + v1644) & v1582;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1287, v1288, v1638);
            v1289 = (void *)((v1632 + v1287) & 0xFFFFFFFFFFFFFFF8);
            v1290 = (void *)((v1632 + v1288) & 0xFFFFFFFFFFFFFFF8);
            void *v1289 = *v1290;
            *(_OWORD *)(((unint64_t)v1289 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1290
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1284 + v1590) = *(_OWORD *)(v1062 + v1590);
            size_t v1291 = (v1699 + v1284 + v1590) & v1015;
            size_t v1292 = (v1699 + v1062 + v1590) & v1015;
            *(unsigned char *)size_t v1291 = *(unsigned char *)v1292;
            uint64_t v1293 = v1291 | 4;
            int v1294 = *(_DWORD *)(v1292 | 4);
            *(unsigned char *)(v1293 + 4) = *(unsigned char *)((v1292 | 4) + 4);
            *(_DWORD *)uint64_t v1293 = v1294;
            *(_WORD *)(v1291 + 10) = *(_WORD *)(v1292 + 0xA);
            v1295 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1295((v1655 + v1291) & v1710, (v1655 + v1292) & v1710, v1652);
            size_t v1296 = (v1651 + ((v1655 + v1291) & v1710)) & v1710;
            size_t v1297 = (v1651 + ((v1655 + v1292) & v1710)) & v1710;
            v1295(v1296, v1297, v1652);
            unint64_t v1298 = (unsigned char *)(v1296 + v1657);
            *unint64_t v1298 = *(unsigned char *)(v1297 + v1657);
            v1298[1] = *(unsigned char *)(v1297 + v1657 + 1);
            v1298[2] = *(unsigned char *)(v1297 + v1657 + 2);
            v1298[3] = *(unsigned char *)(v1297 + v1657 + 3);
            v1298[4] = *(unsigned char *)(v1297 + v1657 + 4);
            unint64_t v1299 = (v1296 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1300 = (v1297 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1299 = *(_OWORD *)v1300;
            *(unsigned char *)(v1299 + 16) = *(unsigned char *)(v1300 + 16);
            *(unsigned char *)(v1299 + 17) = *(unsigned char *)(v1300 + 17);
            *(unsigned char *)(v1299 + 18) = *(unsigned char *)(v1300 + 18);
            *(unsigned char *)(v1299 + 19) = *(unsigned char *)(v1300 + 19);
            unint64_t v1301 = (v1299 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1302 = (v1300 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1301 = *(void *)v1302;
            *(unsigned char *)(v1301 + 8) = *(unsigned char *)(v1302 + 8);
            *(unsigned char *)(v1301 + 9) = *(unsigned char *)(v1302 + 9);
            *(unsigned char *)(v1301 + 10) = *(unsigned char *)(v1302 + 10);
            *(unsigned char *)(v1301 + 11) = *(unsigned char *)(v1302 + 11);
            *(unsigned char *)(v1301 + 12) = *(unsigned char *)(v1302 + 12);
            v1303 = (void *)((v1300 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1304 = (void *)((v1299 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1304 = *v1303;
            unint64_t v1305 = ((unint64_t)v1304 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1306 = ((unint64_t)v1303 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1305 = *(void *)v1306;
            *(unsigned char *)(v1305 + 8) = *(unsigned char *)(v1306 + 8);
            *(unsigned char *)(v1305 + 9) = *(unsigned char *)(v1306 + 9);
            uint64_t v1307 = (void *)((v1649 + v1305) & v1710);
            uint64_t v1308 = (const void *)((v1649 + v1306) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1308, 1, v1652))
            {
              memcpy(v1307, v1308, __n);
            }
            else
            {
              v1295((size_t)v1307, (size_t)v1308, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1307, 0, 1, v1652);
            }
            uint64_t v1309 = (void *)(((unint64_t)v1307 + v1650) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1310 = (void *)(((unint64_t)v1308 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1309 = *v1310;
            unint64_t v1311 = ((unint64_t)v1309 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1312 = ((unint64_t)v1310 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1313 = *(void *)v1312;
            *(unsigned char *)(v1311 + 8) = *(unsigned char *)(v1312 + 8);
            *(void *)unint64_t v1311 = v1313;
            uint64_t v1314 = (void *)(((unint64_t)v1309 + 31) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1315 = (void *)(((unint64_t)v1310 + 31) & 0xFFFFFFFFFFFFFFF8);
            *uint64_t v1314 = *v1315;
            unint64_t v1316 = (_OWORD *)(((unint64_t)v1314 + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1317 = (_OWORD *)(((unint64_t)v1315 + 15) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1316 = *v1317;
            unint64_t v1318 = ((unint64_t)v1316 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1319 = ((unint64_t)v1317 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1320 = *(void *)v1319;
            *(unsigned char *)(v1318 + 8) = *(unsigned char *)(v1319 + 8);
            *(void *)unint64_t v1318 = v1320;
            *(unsigned char *)(v1318 + 9) = *(unsigned char *)(v1319 + 9);
            unint64_t v1321 = (v1318 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1322 = (v1319 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1313) = *(_DWORD *)v1322;
            *(unsigned char *)(v1321 + 4) = *(unsigned char *)(v1322 + 4);
            *(_DWORD *)unint64_t v1321 = v1313;
            *(_OWORD *)((v1318 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1319 + 25) & 0xFFFFFFFFFFFFFFF8);
            size_t v1323 = v1291 + v1696;
            long long v1324 = *(_OWORD *)(v1292 + v1696 + 112);
            long long v1326 = *(_OWORD *)(v1292 + v1696 + 64);
            long long v1325 = *(_OWORD *)(v1292 + v1696 + 80);
            *(_OWORD *)(v1323 + 96) = *(_OWORD *)(v1292 + v1696 + 96);
            *(_OWORD *)(v1323 + 112) = v1324;
            *(_OWORD *)(v1323 + 64) = v1326;
            *(_OWORD *)(v1323 + 80) = v1325;
            long long v1327 = *(_OWORD *)(v1292 + v1696 + 176);
            long long v1329 = *(_OWORD *)(v1292 + v1696 + 128);
            long long v1328 = *(_OWORD *)(v1292 + v1696 + 144);
            *(_OWORD *)(v1323 + 160) = *(_OWORD *)(v1292 + v1696 + 160);
            *(_OWORD *)(v1323 + 176) = v1327;
            *(_OWORD *)(v1323 + 128) = v1329;
            *(_OWORD *)(v1323 + 144) = v1328;
            long long v1331 = *(_OWORD *)(v1292 + v1696 + 208);
            long long v1330 = *(_OWORD *)(v1292 + v1696 + 224);
            long long v1332 = *(_OWORD *)(v1292 + v1696 + 192);
            *(void *)(v1323 + 240) = *(void *)(v1292 + v1696 + 240);
            *(_OWORD *)(v1323 + 208) = v1331;
            *(_OWORD *)(v1323 + 224) = v1330;
            *(_OWORD *)(v1323 + 192) = v1332;
            long long v1333 = *(_OWORD *)(v1292 + v1696);
            long long v1334 = *(_OWORD *)(v1292 + v1696 + 16);
            long long v1335 = *(_OWORD *)(v1292 + v1696 + 48);
            *(_OWORD *)(v1323 + 32) = *(_OWORD *)(v1292 + v1696 + 32);
            *(_OWORD *)(v1323 + 48) = v1335;
            *(_OWORD *)size_t v1323 = v1333;
            *(_OWORD *)(v1323 + 16) = v1334;
            uint64_t v1336 = (_OWORD *)((v1291 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1337 = (long long *)((v1292 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1338 = *v1337;
            *(_OWORD *)((char *)v1336 + 9) = *(long long *)((char *)v1337 + 9);
            *uint64_t v1336 = v1338;
            unint64_t v1339 = (v1291 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1340 = (v1292 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1341 = *(_OWORD *)v1340;
            *(unsigned char *)(v1339 + 16) = *(unsigned char *)(v1340 + 16);
            *(_OWORD *)unint64_t v1339 = v1341;
            v1342 = (void *)((v1291 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1343 = (void *)((v1292 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
            void *v1342 = *v1343;
            *(_OWORD *)(((unint64_t)v1342 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1343
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1281 = __n;
            size_t v1282 = v1657;
            unint64_t v301 = v1701;
            unint64_t v1280 = v1617;
            unint64_t v1053 = v1609;
            v1088 = v1725;
            id v1279 = v1731;
            if (v1639) {
              goto LABEL_1352;
            }
            goto LABEL_1346;
          case 4u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 4;
            goto LABEL_1230;
          case 5u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 5;
            goto LABEL_1230;
          case 6u:
            (*(void (**)(_OWORD *))(v1705 + 32))(a1);
            uint64_t v1018 = (void *)(((unint64_t)a1 + v1596) & v1002);
            id v1019 = (const void *)((unint64_t)&a2[v1596] & v1002);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v55 + 48))(v1019, 1, v1673))
            {
              memcpy(v1018, v1019, v1594);
              char v1016 = 1;
            }
            else
            {
              (*(void (**)(void *, const void *, uint64_t))(v55 + 32))(v1018, v1019, v1673);
              char v1016 = 1;
              (*(void (**)(void *, void, uint64_t, uint64_t))(v55 + 56))(v1018, 0, 1, v1673);
            }
            char v1017 = 6;
            goto LABEL_1230;
          case 7u:
            (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1705 + 32))(a1, a2, v1660);
            char v1016 = 1;
            char v1017 = 7;
LABEL_1230:
            unint64_t v1053 = v1609;
            unint64_t v301 = v1701;
            goto LABEL_1403;
          default:
            uint64_t v1580 = v85;
            size_t v1588 = v36;
            size_t v1573 = v38;
            uint64_t v1003 = v298;
            uint64_t v1716 = *(void (**)(void *, const void *, uint64_t))(v1705 + 32);
            ((void (*)(_OWORD *))v1716)(a1);
            unint64_t v1724 = (void *)(((unint64_t)a1 + v1601) & v299);
            long long v1004 = (const void *)((unint64_t)&a2[v1601] & v299);
            v1729 = v1004;
            if (v1621 == v1629)
            {
              int v1005 = (*(uint64_t (**)(void))(v1705 + 48))();
              uint64_t v1006 = v1003;
LABEL_1306:
              size_t v1112 = v1573;
              v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
              goto LABEL_1307;
            }
            unint64_t v1057 = ((unint64_t)v1004 + v1647) & v1692;
            unint64_t v1058 = (v1619 + v1057) & v1664;
            uint64_t v1006 = v1003;
            if (v1634 == v1629)
            {
              if (v1624 == v1634)
              {
                int v1005 = (*(uint64_t (**)(unint64_t))(v1643 + 48))((v1619 + v1057) & v1664);
                goto LABEL_1306;
              }
              int v1110 = (unint64_t *)((v1666 + v1058) & 0xFFFFFFFFFFFFFFF8);
              if (v1618 > 0x7FFFFFFE)
              {
                int v1005 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1110 + v1644) & v1580);
                goto LABEL_1306;
              }
              unint64_t v1111 = *v1110;
              if (v1111 >= 0xFFFFFFFF) {
                LODWORD(v1111) = -1;
              }
              size_t v1112 = v1573;
              v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
              if ((v1111 + 1) >= 2) {
                goto LABEL_1308;
              }
LABEL_1311:
              v1716(v1081, v1729, v1660);
              unint64_t v1135 = ((unint64_t)v1081 + v1647) & v1692;
              v1716((void *)v1135, (const void *)v1057, v1660);
              unint64_t v1136 = (v1619 + v1135) & v1664;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1643 + 32))(v1136, v1058, v1642);
              uint64_t v1137 = (void *)((v1666 + v1136) & 0xFFFFFFFFFFFFFFF8);
              v1138 = (void *)((v1666 + v1058) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v1137 = *v1138;
              unint64_t v1139 = ((unint64_t)v1137 + v1644) & v1580;
              unint64_t v1140 = ((unint64_t)v1138 + v1644) & v1580;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1139, v1140, v1638);
              unint64_t v1141 = (void *)((v1632 + v1139) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1142 = (void *)((v1632 + v1140) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1141 = *v1142;
              *(_OWORD *)(((unint64_t)v1141 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1142
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v1136 + v1588) = *(_OWORD *)(v1058 + v1588);
              size_t v1143 = (v1699 + v1136 + v1588) & v1006;
              size_t v1144 = (v1699 + v1058 + v1588) & v1006;
              *(unsigned char *)size_t v1143 = *(unsigned char *)v1144;
              uint64_t v1145 = v1143 | 4;
              int v1146 = *(_DWORD *)(v1144 | 4);
              *(unsigned char *)(v1145 + 4) = *(unsigned char *)((v1144 | 4) + 4);
              *(_DWORD *)uint64_t v1145 = v1146;
              *(_WORD *)(v1143 + 10) = *(_WORD *)(v1144 + 0xA);
              v1147 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
              v1147((v1655 + v1143) & v1710, (v1655 + v1144) & v1710, v1652);
              size_t v1148 = (v1651 + ((v1655 + v1143) & v1710)) & v1710;
              size_t v1149 = (v1651 + ((v1655 + v1144) & v1710)) & v1710;
              v1147(v1148, v1149, v1652);
              unint64_t v1150 = (unsigned char *)(v1148 + v1657);
              *unint64_t v1150 = *(unsigned char *)(v1149 + v1657);
              v1150[1] = *(unsigned char *)(v1149 + v1657 + 1);
              v1150[2] = *(unsigned char *)(v1149 + v1657 + 2);
              v1150[3] = *(unsigned char *)(v1149 + v1657 + 3);
              v1150[4] = *(unsigned char *)(v1149 + v1657 + 4);
              unint64_t v1151 = (v1148 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1152 = (v1149 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v1151 = *(_OWORD *)v1152;
              *(unsigned char *)(v1151 + 16) = *(unsigned char *)(v1152 + 16);
              *(unsigned char *)(v1151 + 17) = *(unsigned char *)(v1152 + 17);
              *(unsigned char *)(v1151 + 18) = *(unsigned char *)(v1152 + 18);
              *(unsigned char *)(v1151 + 19) = *(unsigned char *)(v1152 + 19);
              unint64_t v1153 = (v1151 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1154 = (v1152 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1153 = *(void *)v1154;
              *(unsigned char *)(v1153 + 8) = *(unsigned char *)(v1154 + 8);
              *(unsigned char *)(v1153 + 9) = *(unsigned char *)(v1154 + 9);
              *(unsigned char *)(v1153 + 10) = *(unsigned char *)(v1154 + 10);
              *(unsigned char *)(v1153 + 11) = *(unsigned char *)(v1154 + 11);
              *(unsigned char *)(v1153 + 12) = *(unsigned char *)(v1154 + 12);
              uint64_t v1155 = (void *)((v1152 + 47) & 0xFFFFFFFFFFFFFFF8);
              v1156 = (void *)((v1151 + 47) & 0xFFFFFFFFFFFFFFF8);
              void *v1156 = *v1155;
              unint64_t v1157 = ((unint64_t)v1156 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1158 = ((unint64_t)v1155 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v1157 = *(void *)v1158;
              *(unsigned char *)(v1157 + 8) = *(unsigned char *)(v1158 + 8);
              *(unsigned char *)(v1157 + 9) = *(unsigned char *)(v1158 + 9);
              unint64_t v1159 = (void *)((v1649 + v1157) & v1710);
              unsigned int v1160 = (const void *)((v1649 + v1158) & v1710);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1160, 1, v1652))
              {
                memcpy(v1159, v1160, __n);
              }
              else
              {
                v1147((size_t)v1159, (size_t)v1160, v1652);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1159, 0, 1, v1652);
              }
              uint64_t v1161 = (void *)(((unint64_t)v1159 + v1650) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1162 = (void *)(((unint64_t)v1160 + v1650) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v1161 = *v1162;
              unint64_t v1163 = ((unint64_t)v1161 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1164 = ((unint64_t)v1162 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1165 = *(void *)v1164;
              *(unsigned char *)(v1163 + 8) = *(unsigned char *)(v1164 + 8);
              *(void *)unint64_t v1163 = v1165;
              int v1166 = (void *)(((unint64_t)v1161 + 31) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1167 = (void *)(((unint64_t)v1162 + 31) & 0xFFFFFFFFFFFFFFF8);
              *int v1166 = *v1167;
              unint64_t v1168 = (_OWORD *)(((unint64_t)v1166 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1169 = (_OWORD *)(((unint64_t)v1167 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1168 = *v1169;
              unint64_t v1170 = ((unint64_t)v1168 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1171 = ((unint64_t)v1169 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v1172 = *(void *)v1171;
              *(unsigned char *)(v1170 + 8) = *(unsigned char *)(v1171 + 8);
              *(void *)unint64_t v1170 = v1172;
              *(unsigned char *)(v1170 + 9) = *(unsigned char *)(v1171 + 9);
              unint64_t v1173 = (v1170 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v1174 = (v1171 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v1165) = *(_DWORD *)v1174;
              *(unsigned char *)(v1173 + 4) = *(unsigned char *)(v1174 + 4);
              *(_DWORD *)unint64_t v1173 = v1165;
              *(_OWORD *)((v1170 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1171 + 25) & 0xFFFFFFFFFFFFFFF8);
              size_t v1175 = v1143 + v1696;
              long long v1176 = *(_OWORD *)(v1144 + v1696 + 112);
              long long v1178 = *(_OWORD *)(v1144 + v1696 + 64);
              long long v1177 = *(_OWORD *)(v1144 + v1696 + 80);
              *(_OWORD *)(v1175 + 96) = *(_OWORD *)(v1144 + v1696 + 96);
              *(_OWORD *)(v1175 + 112) = v1176;
              *(_OWORD *)(v1175 + 64) = v1178;
              *(_OWORD *)(v1175 + 80) = v1177;
              long long v1179 = *(_OWORD *)(v1144 + v1696 + 176);
              long long v1181 = *(_OWORD *)(v1144 + v1696 + 128);
              long long v1180 = *(_OWORD *)(v1144 + v1696 + 144);
              *(_OWORD *)(v1175 + 160) = *(_OWORD *)(v1144 + v1696 + 160);
              *(_OWORD *)(v1175 + 176) = v1179;
              *(_OWORD *)(v1175 + 128) = v1181;
              *(_OWORD *)(v1175 + 144) = v1180;
              long long v1183 = *(_OWORD *)(v1144 + v1696 + 208);
              long long v1182 = *(_OWORD *)(v1144 + v1696 + 224);
              long long v1184 = *(_OWORD *)(v1144 + v1696 + 192);
              *(void *)(v1175 + 240) = *(void *)(v1144 + v1696 + 240);
              *(_OWORD *)(v1175 + 208) = v1183;
              *(_OWORD *)(v1175 + 224) = v1182;
              *(_OWORD *)(v1175 + 192) = v1184;
              long long v1185 = *(_OWORD *)(v1144 + v1696);
              long long v1186 = *(_OWORD *)(v1144 + v1696 + 16);
              long long v1187 = *(_OWORD *)(v1144 + v1696 + 48);
              *(_OWORD *)(v1175 + 32) = *(_OWORD *)(v1144 + v1696 + 32);
              *(_OWORD *)(v1175 + 48) = v1187;
              *(_OWORD *)size_t v1175 = v1185;
              *(_OWORD *)(v1175 + 16) = v1186;
              v1188 = (_OWORD *)((v1143 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
              char v1189 = (long long *)((v1144 + v1696 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v1190 = *v1189;
              *(_OWORD *)((char *)v1188 + 9) = *(long long *)((char *)v1189 + 9);
              _OWORD *v1188 = v1190;
              unint64_t v1191 = (v1143 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v1192 = (v1144 + v1696 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v1193 = *(_OWORD *)v1192;
              *(unsigned char *)(v1191 + 16) = *(unsigned char *)(v1192 + 16);
              *(_OWORD *)unint64_t v1191 = v1193;
              v1194 = (void *)((v1143 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1195 = (void *)((v1144 + v1696 + 311) & 0xFFFFFFFFFFFFFFF8);
              void *v1194 = *v1195;
              *(_OWORD *)(((unint64_t)v1194 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1195
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              size_t v1133 = __n;
              size_t v1134 = v1657;
              unint64_t v301 = v1701;
              unint64_t v1132 = v1617;
              unint64_t v1053 = v1609;
              v1081 = v1724;
              long long v1131 = v1729;
              if (!v1639) {
                goto LABEL_1309;
              }
LABEL_1315:
              char v1017 = 0;
              unint64_t v1196 = ((((v1132
                        + ((((((((((v1633 + v1134 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1197 = (void *)(((unint64_t)v1081 + v1196) & 0xFFFFFFFFFFFFFFF8);
              v1198 = (void *)(((unint64_t)v1131 + v1196) & 0xFFFFFFFFFFFFFFF8);
              void *v1197 = *v1198;
              *(void *)(((unint64_t)v1197 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1198
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              char v1016 = 1;
LABEL_1402:
              uint64_t v307 = v1668;
              goto LABEL_1403;
            }
            size_t v1080 = v1058 + v1588;
            v1081 = (void *)(((unint64_t)a1 + v1601) & v299);
            if ((v1606 & 0x80000000) != 0)
            {
              uint64_t v1125 = (v1655 + ((v1699 + v1080) & v1003)) & v1710;
              if (v1639 <= 0x7FFFFFFD)
              {
                unint64_t v1566 = *(void *)(((v1603 + ((v1651 + v1125) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
                if (v1566 >= 0xFFFFFFFF) {
                  LODWORD(v1566) = -1;
                }
                size_t v1112 = v1573;
                if ((v1566 + 1) >= 2) {
                  goto LABEL_1308;
                }
                goto LABEL_1311;
              }
              int v1005 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1125, v1639, v1652);
            }
            else
            {
              unint64_t v1082 = *(void *)(v1080 + 8);
              if (v1082 >= 0xFFFFFFFF) {
                LODWORD(v1082) = -1;
              }
              int v1005 = v1082 + 1;
            }
            size_t v1112 = v1573;
LABEL_1307:
            if (v1005)
            {
LABEL_1308:
              long long v1131 = v1729;
              memcpy(v1081, v1729, v1112);
              unint64_t v1132 = v1617;
              unint64_t v1053 = v1609;
              size_t v1133 = __n;
              unint64_t v301 = v1701;
LABEL_1309:
              size_t v1134 = v1133;
              goto LABEL_1315;
            }
            unint64_t v1057 = ((unint64_t)v1729 + v1647) & v1692;
            unint64_t v1058 = (v1619 + v1057) & v1664;
            goto LABEL_1311;
        }
      }
      unsigned int v633 = a2[v53];
      unsigned int v634 = v633 - 8;
      uint64_t v86 = a1;
      if (v633 >= 8)
      {
        if (v53 <= 3) {
          uint64_t v635 = v53;
        }
        else {
          uint64_t v635 = 4;
        }
        switch(v635)
        {
          case 1:
            int v636 = *a2;
            goto LABEL_1158;
          case 2:
            int v636 = *(unsigned __int16 *)a2;
            goto LABEL_1158;
          case 3:
            int v636 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_1158;
          case 4:
            int v636 = *(_DWORD *)a2;
LABEL_1158:
            if (v53 < 4) {
              unsigned int v633 = (v636 | (v634 << (8 * v53))) + 8;
            }
            else {
              unsigned int v633 = v636 + 8;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v1020 = ~v47;
      unint64_t v1726 = v53;
      switch(v633)
      {
        case 1u:
          uint64_t v1677 = v300;
          uint64_t v1583 = v85;
          size_t v1591 = v36;
          uint64_t v1031 = v298;
          unint64_t v1702 = v69;
          v1032 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1033 = v82;
          v1032(a1, a2, AssociatedTypeWitness);
          long long v1686 = (_OWORD *)(((unint64_t)a1 + v1602) & v1033);
          unint64_t v1034 = (void *)((unint64_t)&a2[v1602] & v1033);
          v1733 = v1034;
          if (v1680 == v1622)
          {
            int v1035 = (*(uint64_t (**)(void))(v1658 + 48))();
            uint64_t v1036 = v1031;
            uint64_t v1037 = ~v1679;
            size_t v1038 = v1593;
LABEL_1365:
            if (v1035)
            {
LABEL_1366:
              uint64_t v1413 = v1686;
              v1414 = v1733;
              memcpy(v1686, v1733, v1694);
              uint64_t v1415 = v1628;
              size_t v1416 = __n;
              uint64_t v1417 = v1712;
              goto LABEL_1367;
            }
            unint64_t v1065 = ((unint64_t)v1733 + v1648) & v1570;
            unint64_t v1066 = (v1620 + v1065) & v1037;
LABEL_1369:
            v1032(v1686, (unsigned __int8 *)v1733, AssociatedTypeWitness);
            unint64_t v1419 = ((unint64_t)v1686 + v1648) & v1570;
            v1032((_OWORD *)v1419, (unsigned __int8 *)v1065, AssociatedTypeWitness);
            unint64_t v1420 = (v1620 + v1419) & v1037;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1420, v1066, v1640);
            unint64_t v1421 = (void *)((v1646 + v1420) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1422 = (void *)((v1646 + v1066) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1421 = *v1422;
            unint64_t v1423 = ((unint64_t)v1421 + v1635) & v1677;
            unint64_t v1424 = ((unint64_t)v1422 + v1635) & v1677;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1423, v1424, v1636);
            v1425 = (void *)((v1631 + v1423) & 0xFFFFFFFFFFFFFFF8);
            v1426 = (void *)((v1631 + v1424) & 0xFFFFFFFFFFFFFFF8);
            void *v1425 = *v1426;
            *(_OWORD *)(((unint64_t)v1425 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1426
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1420 + v1697) = *(_OWORD *)(v1066 + v1697);
            size_t v1427 = (v1699 + v1420 + v1697) & v1036;
            size_t v1428 = (v1699 + v1066 + v1697) & v1036;
            *(unsigned char *)size_t v1427 = *(unsigned char *)v1428;
            uint64_t v1429 = v1427 | 4;
            int v1430 = *(_DWORD *)(v1428 | 4);
            *(unsigned char *)(v1429 + 4) = *(unsigned char *)((v1428 | 4) + 4);
            *(_DWORD *)uint64_t v1429 = v1430;
            *(_WORD *)(v1427 + 10) = *(_WORD *)(v1428 + 0xA);
            v1431 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1431((v1655 + v1427) & v1710, (v1655 + v1428) & v1710, v1652);
            size_t v1432 = (v1651 + ((v1655 + v1427) & v1710)) & v1710;
            size_t v1433 = (v1651 + ((v1655 + v1428) & v1710)) & v1710;
            v1431(v1432, v1433, v1652);
            v1434 = (unsigned char *)(v1432 + v1657);
            unsigned char *v1434 = *(unsigned char *)(v1433 + v1657);
            v1434[1] = *(unsigned char *)(v1433 + v1657 + 1);
            v1434[2] = *(unsigned char *)(v1433 + v1657 + 2);
            v1434[3] = *(unsigned char *)(v1433 + v1657 + 3);
            v1434[4] = *(unsigned char *)(v1433 + v1657 + 4);
            unint64_t v1435 = (v1432 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1436 = (v1433 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1435 = *(_OWORD *)v1436;
            *(unsigned char *)(v1435 + 16) = *(unsigned char *)(v1436 + 16);
            *(unsigned char *)(v1435 + 17) = *(unsigned char *)(v1436 + 17);
            *(unsigned char *)(v1435 + 18) = *(unsigned char *)(v1436 + 18);
            *(unsigned char *)(v1435 + 19) = *(unsigned char *)(v1436 + 19);
            unint64_t v1437 = (v1435 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1438 = (v1436 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1437 = *(void *)v1438;
            *(unsigned char *)(v1437 + 8) = *(unsigned char *)(v1438 + 8);
            *(unsigned char *)(v1437 + 9) = *(unsigned char *)(v1438 + 9);
            *(unsigned char *)(v1437 + 10) = *(unsigned char *)(v1438 + 10);
            *(unsigned char *)(v1437 + 11) = *(unsigned char *)(v1438 + 11);
            *(unsigned char *)(v1437 + 12) = *(unsigned char *)(v1438 + 12);
            uint64_t v1439 = (void *)((v1436 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1440 = (void *)((v1435 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1440 = *v1439;
            unint64_t v1441 = ((unint64_t)v1440 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1442 = ((unint64_t)v1439 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1441 = *(void *)v1442;
            *(unsigned char *)(v1441 + 8) = *(unsigned char *)(v1442 + 8);
            *(unsigned char *)(v1441 + 9) = *(unsigned char *)(v1442 + 9);
            v1443 = (void *)((v1649 + v1441) & v1710);
            v1444 = (const void *)((v1649 + v1442) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1444, 1, v1652))
            {
              memcpy(v1443, v1444, __n);
            }
            else
            {
              v1431((size_t)v1443, (size_t)v1444, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1443, 0, 1, v1652);
            }
            uint64_t v1415 = v1628;
            size_t v1038 = v1593;
            uint64_t v1417 = v1712;
            unint64_t v1445 = (void *)(((unint64_t)v1443 + v1650) & 0xFFFFFFFFFFFFFFF8);
            v1446 = (void *)(((unint64_t)v1444 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1445 = *v1446;
            unint64_t v1447 = ((unint64_t)v1445 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1448 = ((unint64_t)v1446 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1449 = *(void *)v1448;
            *(unsigned char *)(v1447 + 8) = *(unsigned char *)(v1448 + 8);
            *(void *)unint64_t v1447 = v1449;
            long long v1450 = (void *)(((unint64_t)v1445 + 31) & 0xFFFFFFFFFFFFFFF8);
            long long v1451 = (void *)(((unint64_t)v1446 + 31) & 0xFFFFFFFFFFFFFFF8);
            *long long v1450 = *v1451;
            long long v1452 = (_OWORD *)(((unint64_t)v1450 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v1453 = (_OWORD *)(((unint64_t)v1451 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v1452 = *v1453;
            unint64_t v1454 = ((unint64_t)v1452 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1455 = ((unint64_t)v1453 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1456 = *(void *)v1455;
            *(unsigned char *)(v1454 + 8) = *(unsigned char *)(v1455 + 8);
            *(void *)unint64_t v1454 = v1456;
            *(unsigned char *)(v1454 + 9) = *(unsigned char *)(v1455 + 9);
            unint64_t v1457 = (v1454 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1458 = (v1455 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1449) = *(_DWORD *)v1458;
            *(unsigned char *)(v1457 + 4) = *(unsigned char *)(v1458 + 4);
            *(_DWORD *)unint64_t v1457 = v1449;
            *(_OWORD *)((v1454 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1455 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1459 = v1696 + v1427;
            long long v1460 = *(_OWORD *)(v1696 + v1428 + 112);
            long long v1462 = *(_OWORD *)(v1696 + v1428 + 64);
            long long v1461 = *(_OWORD *)(v1696 + v1428 + 80);
            *(_OWORD *)(v1459 + 96) = *(_OWORD *)(v1696 + v1428 + 96);
            *(_OWORD *)(v1459 + 112) = v1460;
            *(_OWORD *)(v1459 + 64) = v1462;
            *(_OWORD *)(v1459 + 80) = v1461;
            long long v1463 = *(_OWORD *)(v1696 + v1428 + 176);
            long long v1465 = *(_OWORD *)(v1696 + v1428 + 128);
            long long v1464 = *(_OWORD *)(v1696 + v1428 + 144);
            *(_OWORD *)(v1459 + 160) = *(_OWORD *)(v1696 + v1428 + 160);
            *(_OWORD *)(v1459 + 176) = v1463;
            *(_OWORD *)(v1459 + 128) = v1465;
            *(_OWORD *)(v1459 + 144) = v1464;
            long long v1467 = *(_OWORD *)(v1696 + v1428 + 208);
            long long v1466 = *(_OWORD *)(v1696 + v1428 + 224);
            long long v1468 = *(_OWORD *)(v1696 + v1428 + 192);
            *(void *)(v1459 + 240) = *(void *)(v1696 + v1428 + 240);
            *(_OWORD *)(v1459 + 208) = v1467;
            *(_OWORD *)(v1459 + 224) = v1466;
            *(_OWORD *)(v1459 + 192) = v1468;
            long long v1469 = *(_OWORD *)(v1696 + v1428);
            long long v1470 = *(_OWORD *)(v1696 + v1428 + 16);
            long long v1471 = *(_OWORD *)(v1696 + v1428 + 48);
            *(_OWORD *)(v1459 + 32) = *(_OWORD *)(v1696 + v1428 + 32);
            *(_OWORD *)(v1459 + 48) = v1471;
            *(_OWORD *)unint64_t v1459 = v1469;
            *(_OWORD *)(v1459 + 16) = v1470;
            unint64_t v1472 = (_OWORD *)((v1696 + v1427 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1473 = (long long *)((v1696 + v1428 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1474 = *v1473;
            *(_OWORD *)((char *)v1472 + 9) = *(long long *)((char *)v1473 + 9);
            *unint64_t v1472 = v1474;
            unint64_t v1475 = (v1696 + v1427 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1476 = (v1696 + v1428 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1477 = *(_OWORD *)v1476;
            *(unsigned char *)(v1475 + 16) = *(unsigned char *)(v1476 + 16);
            *(_OWORD *)unint64_t v1475 = v1477;
            v1478 = (void *)((v1696 + v1427 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1479 = (void *)((v1696 + v1428 + 311) & 0xFFFFFFFFFFFFFFF8);
            void *v1478 = *v1479;
            *(_OWORD *)(((unint64_t)v1478 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1479
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v307 = v1668;
            size_t v1416 = __n;
            size_t v1418 = v1657;
            v1414 = v1733;
            uint64_t v1413 = v1686;
            if (v1639)
            {
LABEL_1373:
              unint64_t v1480 = ((((v1415
                        + ((((((((((v1633 + v1418 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1481 = (void *)(((unint64_t)v1413 + v1417 + v1480) & v1692);
              v1482 = (const void *)(((unint64_t)v1414 + v1417 + v1480) & v1692);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v1482, 1, v1660))
              {
                memcpy(v1481, v1482, v1038);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v1705 + 32))(v1481, v1482, v1660);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v1705 + 56))(v1481, 0, 1, v1660);
              }
              unint64_t v1039 = v1702;
              v1483 = (char *)(((unint64_t)v1481 + v1592) & v1664);
              uint64_t v1484 = (char *)(((unint64_t)v1482 + v1592) & v1664);
              if (v1624 == v1634)
              {
                int v1485 = (*(uint64_t (**)(char *))(v1643 + 48))(v1484);
              }
              else
              {
                uint64_t v1486 = v1666;
                int v1487 = (uint64_t *)((unint64_t)&v1484[v1666] & 0xFFFFFFFFFFFFFFF8);
                if (v1618 <= 0x7FFFFFFE)
                {
                  uint64_t v1488 = *v1487;
                  if ((unint64_t)*v1487 >= 0xFFFFFFFF) {
                    LODWORD(v1488) = -1;
                  }
                  if ((v1488 + 1) >= 2) {
                    goto LABEL_1385;
                  }
                  goto LABEL_1387;
                }
                int v1485 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1487 + v1644) & v1583);
              }
              uint64_t v1486 = v1666;
              if (v1485)
              {
LABEL_1385:
                size_t v1489 = v1591;
                memcpy(v1483, v1484, v1591);
LABEL_1388:
                char v1016 = 0;
                *(void *)&v1483[v1489] = *(void *)&v1484[v1489];
                unint64_t v1496 = (void *)((unint64_t)&v1483[v1489 + 15] & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1497 = (void *)((unint64_t)&v1484[v1489 + 15] & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1496 = *v1497;
                *(void *)(((unint64_t)v1496 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1497
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                char v1017 = 1;
                goto LABEL_1389;
              }
              int v1487 = (uint64_t *)((unint64_t)&v1484[v1666] & 0xFFFFFFFFFFFFFFF8);
LABEL_1387:
              uint64_t v1490 = v1486;
              (*(void (**)(char *, char *, uint64_t))(v1643 + 32))(v1483, v1484, v1642);
              uint64_t v1491 = (void *)((unint64_t)&v1483[v1490] & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v1491 = *v1487;
              unint64_t v1492 = ((unint64_t)v1491 + v1644) & v1583;
              unint64_t v1493 = ((unint64_t)v1487 + v1644) & v1583;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1492, v1493, v1638);
              unint64_t v1494 = (void *)((v1632 + v1492) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v1495 = (void *)((v1632 + v1493) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v1494 = *v1495;
              *(_OWORD *)(((unint64_t)v1494 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1495
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              size_t v1489 = v1591;
              goto LABEL_1388;
            }
LABEL_1367:
            size_t v1418 = v1416;
            goto LABEL_1373;
          }
          unint64_t v1065 = ((unint64_t)v1034 + v1648) & v1570;
          unint64_t v1066 = (v1620 + v1065) & v1689;
          uint64_t v1036 = v1031;
          size_t v1038 = v1593;
          if (v1630 == v1622)
          {
            if (v1623 == v1630)
            {
              int v1035 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1065) & v1689);
              uint64_t v1037 = ~v1679;
              goto LABEL_1365;
            }
            long long v1121 = (unint64_t *)((v1646 + v1066) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1037 = ~v1679;
            if (v1608 > 0x7FFFFFFE)
            {
              int v1035 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1121 + v1635) & v1677, v1604, v1636);
              goto LABEL_1365;
            }
            unint64_t v1122 = *v1121;
          }
          else
          {
            size_t v1092 = v1066 + v1697;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1093 = *(void *)(v1092 + 8);
              if (v1093 >= 0xFFFFFFFF) {
                LODWORD(v1093) = -1;
              }
              int v1035 = v1093 + 1;
              uint64_t v1037 = ~v1679;
              goto LABEL_1365;
            }
            uint64_t v1129 = (v1655 + ((v1699 + v1092) & v1031)) & v1710;
            uint64_t v1037 = ~v1679;
            if (v1639 > 0x7FFFFFFD)
            {
              int v1035 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1129, v1639, v1652);
              goto LABEL_1365;
            }
            unint64_t v1122 = *(void *)(((v1603 + ((v1651 + v1129) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1122 >= 0xFFFFFFFF) {
            LODWORD(v1122) = -1;
          }
          if ((v1122 + 1) >= 2) {
            goto LABEL_1366;
          }
          goto LABEL_1369;
        case 2u:
          unint64_t v1039 = v69;
          uint64_t v1584 = v85;
          size_t v1040 = v36;
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          unint64_t v1041 = (void *)(((unint64_t)a1 + v1627) & v1692);
          v1042 = (const void *)((unint64_t)&a2[v1627] & v1692);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1705 + 48))(v1042, 1, v1660))
          {
            memcpy(v1041, v1042, v1593);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1705 + 32))(v1041, v1042, v1660);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1705 + 56))(v1041, 0, 1, v1660);
          }
          unint64_t v1074 = (char *)(((unint64_t)v1041 + v1592) & v1664);
          unint64_t v1075 = (char *)(((unint64_t)v1042 + v1592) & v1664);
          if (v1624 == v1634)
          {
            int v1076 = (*(uint64_t (**)(char *))(v1643 + 48))(v1075);
          }
          else
          {
            unint64_t v1077 = (uint64_t *)((unint64_t)&v1075[v1666] & 0xFFFFFFFFFFFFFFF8);
            if (v1618 <= 0x7FFFFFFE)
            {
              uint64_t v1078 = v1666;
              uint64_t v1079 = *v1077;
              if ((unint64_t)*v1077 >= 0xFFFFFFFF) {
                LODWORD(v1079) = -1;
              }
              if ((v1079 + 1) >= 2) {
                goto LABEL_1265;
              }
              goto LABEL_1267;
            }
            int v1076 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v1077 + v1644) & v1584);
          }
          if (v1076)
          {
LABEL_1265:
            size_t v1102 = v1040;
            memcpy(v1074, v1075, v1040);
            goto LABEL_1268;
          }
          uint64_t v1078 = v1666;
          unint64_t v1077 = (uint64_t *)((unint64_t)&v1075[v1666] & 0xFFFFFFFFFFFFFFF8);
LABEL_1267:
          uint64_t v1103 = v1078;
          (*(void (**)(char *, char *, uint64_t))(v1643 + 32))(v1074, v1075, v1642);
          int v1104 = (void *)((unint64_t)&v1074[v1103] & 0xFFFFFFFFFFFFFFF8);
          *int v1104 = *v1077;
          unint64_t v1105 = ((unint64_t)v1104 + v1644) & v1584;
          unint64_t v1106 = ((unint64_t)v1077 + v1644) & v1584;
          (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v1105, v1106, v1638);
          unint64_t v1107 = (void *)((v1632 + v1105) & 0xFFFFFFFFFFFFFFF8);
          v1108 = (void *)((v1632 + v1106) & 0xFFFFFFFFFFFFFFF8);
          *unint64_t v1107 = *v1108;
          *(_OWORD *)(((unint64_t)v1107 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1108 + 15) & 0xFFFFFFFFFFFFFFF8);
          size_t v1102 = v1040;
LABEL_1268:
          char v1016 = 0;
          unint64_t v1109 = &v1074[v1102];
          *unint64_t v1109 = v1075[v1102];
          *((void *)v1109 + 1) = *(void *)&v1075[v1102 + 8];
          char v1017 = 2;
LABEL_1389:
          unint64_t v1053 = v1726;
          unint64_t v301 = v1039;
          goto LABEL_1403;
        case 3u:
          unint64_t v1043 = v69;
          size_t v1044 = v306;
          uint64_t v1678 = v300;
          uint64_t v1045 = v298;
          v1046 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1047 = v82;
          v1046(a1, a2, AssociatedTypeWitness);
          v1720 = (_OWORD *)(((unint64_t)a1 + v1602) & v1047);
          v1048 = (void *)((unint64_t)&a2[v1602] & v1047);
          v1734 = v1048;
          if (v1680 == v1622)
          {
            int v1049 = (*(uint64_t (**)(unint64_t))(v1658 + 48))((unint64_t)&v302[v1602] & v1047);
            v1048 = v1734;
            uint64_t v1050 = v1045;
            uint64_t v1051 = ~v1679;
            size_t v1052 = (_OWORD *)(((unint64_t)a1 + v1602) & v1047);
LABEL_1392:
            if (v1049)
            {
LABEL_1393:
              memcpy(v1052, v1048, v1694);
              uint64_t v1498 = v1628;
              unint64_t v1053 = v1726;
              size_t v1499 = v1044;
              unint64_t v301 = v1043;
              goto LABEL_1394;
            }
            unint64_t v1067 = ((unint64_t)v1048 + v1648) & v1570;
            unint64_t v1068 = (v1620 + v1067) & v1051;
LABEL_1396:
            unint64_t v1704 = v1043;
            v1046(v1052, (unsigned __int8 *)v1048, AssociatedTypeWitness);
            v1046((_OWORD *)(((unint64_t)v1052 + v1648) & v1570), (unsigned __int8 *)v1067, AssociatedTypeWitness);
            unint64_t v1501 = (v1620 + (((unint64_t)v1052 + v1648) & v1570)) & v1051;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1501, v1068, v1640);
            v1502 = (void *)((v1646 + v1501) & 0xFFFFFFFFFFFFFFF8);
            v1503 = (void *)((v1646 + v1068) & 0xFFFFFFFFFFFFFFF8);
            void *v1502 = *v1503;
            unint64_t v1504 = ((unint64_t)v1502 + v1635) & v1678;
            unint64_t v1505 = ((unint64_t)v1503 + v1635) & v1678;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1504, v1505, v1636);
            v1506 = (void *)((v1631 + v1504) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1507 = (void *)((v1631 + v1505) & 0xFFFFFFFFFFFFFFF8);
            void *v1506 = *v1507;
            *(_OWORD *)(((unint64_t)v1506 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1507
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1501 + v1697) = *(_OWORD *)(v1068 + v1697);
            size_t v1508 = (v1699 + v1501 + v1697) & v1050;
            size_t v1509 = (v1699 + v1068 + v1697) & v1050;
            *(unsigned char *)size_t v1508 = *(unsigned char *)v1509;
            uint64_t v1510 = v1508 | 4;
            int v1511 = *(_DWORD *)(v1509 | 4);
            *(unsigned char *)(v1510 + 4) = *(unsigned char *)((v1509 | 4) + 4);
            *(_DWORD *)uint64_t v1510 = v1511;
            *(_WORD *)(v1508 + 10) = *(_WORD *)(v1509 + 0xA);
            unint64_t v1512 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1512((v1655 + v1508) & v1710, (v1655 + v1509) & v1710, v1652);
            size_t v1513 = (v1651 + ((v1655 + v1508) & v1710)) & v1710;
            size_t v1514 = (v1651 + ((v1655 + v1509) & v1710)) & v1710;
            v1512(v1513, v1514, v1652);
            uint64_t v1515 = (unsigned char *)(v1513 + v1657);
            *uint64_t v1515 = *(unsigned char *)(v1514 + v1657);
            v1515[1] = *(unsigned char *)(v1514 + v1657 + 1);
            v1515[2] = *(unsigned char *)(v1514 + v1657 + 2);
            v1515[3] = *(unsigned char *)(v1514 + v1657 + 3);
            v1515[4] = *(unsigned char *)(v1514 + v1657 + 4);
            unint64_t v1516 = (v1513 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1517 = (v1514 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1516 = *(_OWORD *)v1517;
            *(unsigned char *)(v1516 + 16) = *(unsigned char *)(v1517 + 16);
            *(unsigned char *)(v1516 + 17) = *(unsigned char *)(v1517 + 17);
            *(unsigned char *)(v1516 + 18) = *(unsigned char *)(v1517 + 18);
            *(unsigned char *)(v1516 + 19) = *(unsigned char *)(v1517 + 19);
            unint64_t v1518 = (v1516 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1519 = (v1517 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1518 = *(void *)v1519;
            *(unsigned char *)(v1518 + 8) = *(unsigned char *)(v1519 + 8);
            *(unsigned char *)(v1518 + 9) = *(unsigned char *)(v1519 + 9);
            *(unsigned char *)(v1518 + 10) = *(unsigned char *)(v1519 + 10);
            *(unsigned char *)(v1518 + 11) = *(unsigned char *)(v1519 + 11);
            *(unsigned char *)(v1518 + 12) = *(unsigned char *)(v1519 + 12);
            unint64_t v1520 = (void *)((v1517 + 47) & 0xFFFFFFFFFFFFFFF8);
            int v1521 = (void *)((v1516 + 47) & 0xFFFFFFFFFFFFFFF8);
            *int v1521 = *v1520;
            unint64_t v1522 = ((unint64_t)v1521 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1523 = ((unint64_t)v1520 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1522 = *(void *)v1523;
            *(unsigned char *)(v1522 + 8) = *(unsigned char *)(v1523 + 8);
            *(unsigned char *)(v1522 + 9) = *(unsigned char *)(v1523 + 9);
            unint64_t v1524 = (void *)((v1649 + v1522) & v1710);
            v1525 = (const void *)((v1649 + v1523) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1525, 1, v1652))
            {
              memcpy(v1524, v1525, __n);
            }
            else
            {
              v1512((size_t)v1524, (size_t)v1525, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1524, 0, 1, v1652);
            }
            uint64_t v1498 = v1628;
            unint64_t v1526 = (void *)(((unint64_t)v1524 + v1650) & 0xFFFFFFFFFFFFFFF8);
            int v1527 = (void *)(((unint64_t)v1525 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1526 = *v1527;
            unint64_t v1528 = ((unint64_t)v1526 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1529 = ((unint64_t)v1527 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1530 = *(void *)v1529;
            *(unsigned char *)(v1528 + 8) = *(unsigned char *)(v1529 + 8);
            *(void *)unint64_t v1528 = v1530;
            long long v1531 = (void *)(((unint64_t)v1526 + 31) & 0xFFFFFFFFFFFFFFF8);
            long long v1532 = (void *)(((unint64_t)v1527 + 31) & 0xFFFFFFFFFFFFFFF8);
            *long long v1531 = *v1532;
            long long v1533 = (_OWORD *)(((unint64_t)v1531 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v1534 = (_OWORD *)(((unint64_t)v1532 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v1533 = *v1534;
            unint64_t v1535 = ((unint64_t)v1533 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1536 = ((unint64_t)v1534 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1537 = *(void *)v1536;
            *(unsigned char *)(v1535 + 8) = *(unsigned char *)(v1536 + 8);
            *(void *)unint64_t v1535 = v1537;
            *(unsigned char *)(v1535 + 9) = *(unsigned char *)(v1536 + 9);
            unint64_t v1538 = (v1535 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1539 = (v1536 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1530) = *(_DWORD *)v1539;
            *(unsigned char *)(v1538 + 4) = *(unsigned char *)(v1539 + 4);
            *(_DWORD *)unint64_t v1538 = v1530;
            *(_OWORD *)((v1535 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1536 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1540 = v1696 + v1508;
            long long v1541 = *(_OWORD *)(v1696 + v1509 + 112);
            long long v1543 = *(_OWORD *)(v1696 + v1509 + 64);
            long long v1542 = *(_OWORD *)(v1696 + v1509 + 80);
            *(_OWORD *)(v1540 + 96) = *(_OWORD *)(v1696 + v1509 + 96);
            *(_OWORD *)(v1540 + 112) = v1541;
            *(_OWORD *)(v1540 + 64) = v1543;
            *(_OWORD *)(v1540 + 80) = v1542;
            long long v1544 = *(_OWORD *)(v1696 + v1509 + 176);
            long long v1546 = *(_OWORD *)(v1696 + v1509 + 128);
            long long v1545 = *(_OWORD *)(v1696 + v1509 + 144);
            *(_OWORD *)(v1540 + 160) = *(_OWORD *)(v1696 + v1509 + 160);
            *(_OWORD *)(v1540 + 176) = v1544;
            *(_OWORD *)(v1540 + 128) = v1546;
            *(_OWORD *)(v1540 + 144) = v1545;
            long long v1548 = *(_OWORD *)(v1696 + v1509 + 208);
            long long v1547 = *(_OWORD *)(v1696 + v1509 + 224);
            long long v1549 = *(_OWORD *)(v1696 + v1509 + 192);
            *(void *)(v1540 + 240) = *(void *)(v1696 + v1509 + 240);
            *(_OWORD *)(v1540 + 208) = v1548;
            *(_OWORD *)(v1540 + 224) = v1547;
            *(_OWORD *)(v1540 + 192) = v1549;
            long long v1550 = *(_OWORD *)(v1696 + v1509);
            long long v1551 = *(_OWORD *)(v1696 + v1509 + 16);
            long long v1552 = *(_OWORD *)(v1696 + v1509 + 48);
            *(_OWORD *)(v1540 + 32) = *(_OWORD *)(v1696 + v1509 + 32);
            *(_OWORD *)(v1540 + 48) = v1552;
            *(_OWORD *)unint64_t v1540 = v1550;
            *(_OWORD *)(v1540 + 16) = v1551;
            uint64_t v1553 = (_OWORD *)((v1696 + v1508 + 255) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1554 = (long long *)((v1696 + v1509 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1555 = *v1554;
            *(_OWORD *)((char *)v1553 + 9) = *(long long *)((char *)v1554 + 9);
            *uint64_t v1553 = v1555;
            unint64_t v1556 = (v1696 + v1508 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1557 = (v1696 + v1509 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1558 = *(_OWORD *)v1557;
            *(unsigned char *)(v1556 + 16) = *(unsigned char *)(v1557 + 16);
            *(_OWORD *)unint64_t v1556 = v1558;
            v1559 = (void *)((v1696 + v1508 + 311) & 0xFFFFFFFFFFFFFFF8);
            v1560 = (void *)((v1696 + v1509 + 311) & 0xFFFFFFFFFFFFFFF8);
            void *v1559 = *v1560;
            *(_OWORD *)(((unint64_t)v1559 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1560
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1499 = __n;
            size_t v1500 = v1657;
            unint64_t v301 = v1704;
            size_t v1052 = v1720;
            unint64_t v1053 = v1726;
            if (v1639)
            {
LABEL_1400:
              char v1016 = 0;
              unint64_t v1561 = ((((v1498
                        + ((((((((((v1633 + v1500 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              size_t v1562 = (_OWORD *)(((unint64_t)v1052 + v1561) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1563 = (_OWORD *)(((unint64_t)v1734 + v1561) & 0xFFFFFFFFFFFFFFF8);
              *size_t v1562 = *v1563;
              *(void *)(((unint64_t)v1562 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1563
                                                                                              + 23) & 0xFFFFFFFFFFFFFFF8);
LABEL_1401:
              char v1017 = 3;
              goto LABEL_1402;
            }
LABEL_1394:
            size_t v1500 = v1499;
            goto LABEL_1400;
          }
          unint64_t v1067 = ((unint64_t)v1048 + v1648) & v1570;
          unint64_t v1068 = (v1620 + v1067) & v1689;
          uint64_t v1050 = v1045;
          if (v1630 == v1622)
          {
            size_t v1052 = v1720;
            if (v1623 == v1630)
            {
              int v1049 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1067) & v1689);
              v1048 = v1734;
              uint64_t v1051 = ~v1679;
              goto LABEL_1392;
            }
            v1123 = (unint64_t *)((v1646 + v1068) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1051 = ~v1679;
            if (v1608 <= 0x7FFFFFFE)
            {
              unint64_t v1124 = *v1123;
              goto LABEL_1434;
            }
            int v1049 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1123 + v1635) & v1678, v1604, v1636);
          }
          else
          {
            size_t v1094 = v1068 + v1697;
            size_t v1052 = v1720;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1095 = *(void *)(v1094 + 8);
              if (v1095 >= 0xFFFFFFFF) {
                LODWORD(v1095) = -1;
              }
              int v1049 = v1095 + 1;
              uint64_t v1051 = ~v1679;
              goto LABEL_1392;
            }
            uint64_t v1130 = (v1655 + ((v1699 + v1094) & v1045)) & v1710;
            uint64_t v1051 = ~v1679;
            if (v1639 <= 0x7FFFFFFD)
            {
              unint64_t v1124 = *(void *)(((v1603 + ((v1651 + v1130) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1434:
              if (v1124 >= 0xFFFFFFFF) {
                LODWORD(v1124) = -1;
              }
              if ((v1124 + 1) >= 2) {
                goto LABEL_1393;
              }
              goto LABEL_1396;
            }
            int v1049 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1130, v1639, v1652);
          }
          v1048 = v1734;
          goto LABEL_1392;
        case 4u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 4;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        case 5u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 5;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        case 6u:
          unint64_t v1039 = v69;
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          uint64_t v1054 = (void *)(((unint64_t)a1 + v1598) & v1020);
          uint64_t v1055 = (const void *)((unint64_t)&a2[v1598] & v1020);
          if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1599 + 48))(v1055, 1, v1674))
          {
            memcpy(v1054, v1055, v1595);
          }
          else
          {
            (*(void (**)(void *, const void *, uint64_t))(v1599 + 32))(v1054, v1055, v1674);
            (*(void (**)(void *, void, uint64_t, uint64_t))(v1599 + 56))(v1054, 0, 1, v1674);
          }
          char v1016 = 0;
          char v1017 = 6;
          goto LABEL_1389;
        case 7u:
          (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
          char v1016 = 0;
          char v1017 = 7;
          unint64_t v1053 = v1726;
          goto LABEL_1403;
        default:
          unint64_t v1021 = v69;
          size_t v1022 = v306;
          uint64_t v1676 = v300;
          uint64_t v1023 = v298;
          v1024 = *(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32);
          uint64_t v1025 = v82;
          v1024(a1, a2, AssociatedTypeWitness);
          size_t v1719 = (_OWORD *)(((unint64_t)a1 + v1602) & v1025);
          unint64_t v1026 = (void *)((unint64_t)&a2[v1602] & v1025);
          v1732 = v1026;
          if (v1680 == v1622)
          {
            int v1027 = (*(uint64_t (**)(unint64_t))(v1658 + 48))((unint64_t)&v302[v1602] & v1025);
            unint64_t v1026 = v1732;
            uint64_t v1028 = v1023;
            uint64_t v1029 = ~v1679;
            unint64_t v1030 = (_OWORD *)(((unint64_t)a1 + v1602) & v1025);
LABEL_1355:
            if (v1027)
            {
LABEL_1356:
              memcpy(v1030, v1026, v1694);
              uint64_t v1347 = v1628;
              unint64_t v1053 = v1726;
              size_t v1348 = v1022;
              unint64_t v301 = v1021;
              goto LABEL_1357;
            }
            unint64_t v1063 = ((unint64_t)v1026 + v1648) & v1570;
            unint64_t v1064 = (v1620 + v1063) & v1029;
LABEL_1359:
            unint64_t v1703 = v1021;
            v1024(v1030, (unsigned __int8 *)v1026, AssociatedTypeWitness);
            v1024((_OWORD *)(((unint64_t)v1030 + v1648) & v1570), (unsigned __int8 *)v1063, AssociatedTypeWitness);
            unint64_t v1350 = (v1620 + (((unint64_t)v1030 + v1648) & v1570)) & v1029;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1641 + 32))(v1350, v1064, v1640);
            unint64_t v1351 = (void *)((v1646 + v1350) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1352 = (void *)((v1646 + v1064) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1351 = *v1352;
            unint64_t v1353 = ((unint64_t)v1351 + v1635) & v1676;
            unint64_t v1354 = ((unint64_t)v1352 + v1635) & v1676;
            (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v1353, v1354, v1636);
            v1355 = (void *)((v1631 + v1353) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1356 = (void *)((v1631 + v1354) & 0xFFFFFFFFFFFFFFF8);
            void *v1355 = *v1356;
            *(_OWORD *)(((unint64_t)v1355 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1356
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            *(_OWORD *)(v1350 + v1697) = *(_OWORD *)(v1064 + v1697);
            size_t v1357 = (v1699 + v1350 + v1697) & v1028;
            size_t v1358 = (v1699 + v1064 + v1697) & v1028;
            *(unsigned char *)size_t v1357 = *(unsigned char *)v1358;
            uint64_t v1359 = v1357 | 4;
            int v1360 = *(_DWORD *)(v1358 | 4);
            *(unsigned char *)(v1359 + 4) = *(unsigned char *)((v1358 | 4) + 4);
            *(_DWORD *)uint64_t v1359 = v1360;
            *(_WORD *)(v1357 + 10) = *(_WORD *)(v1358 + 0xA);
            unint64_t v1361 = *(void (**)(size_t, size_t, uint64_t))(v1653 + 32);
            v1361((v1655 + v1357) & v1710, (v1655 + v1358) & v1710, v1652);
            size_t v1362 = (v1651 + ((v1655 + v1357) & v1710)) & v1710;
            size_t v1363 = (v1651 + ((v1655 + v1358) & v1710)) & v1710;
            v1361(v1362, v1363, v1652);
            unint64_t v1364 = (unsigned char *)(v1362 + v1657);
            *unint64_t v1364 = *(unsigned char *)(v1363 + v1657);
            v1364[1] = *(unsigned char *)(v1363 + v1657 + 1);
            v1364[2] = *(unsigned char *)(v1363 + v1657 + 2);
            v1364[3] = *(unsigned char *)(v1363 + v1657 + 3);
            v1364[4] = *(unsigned char *)(v1363 + v1657 + 4);
            unint64_t v1365 = (v1362 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1366 = (v1363 + v1657 + 12) & 0xFFFFFFFFFFFFFFF8;
            *(_OWORD *)unint64_t v1365 = *(_OWORD *)v1366;
            *(unsigned char *)(v1365 + 16) = *(unsigned char *)(v1366 + 16);
            *(unsigned char *)(v1365 + 17) = *(unsigned char *)(v1366 + 17);
            *(unsigned char *)(v1365 + 18) = *(unsigned char *)(v1366 + 18);
            *(unsigned char *)(v1365 + 19) = *(unsigned char *)(v1366 + 19);
            unint64_t v1367 = (v1365 + 27) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1368 = (v1366 + 27) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1367 = *(void *)v1368;
            *(unsigned char *)(v1367 + 8) = *(unsigned char *)(v1368 + 8);
            *(unsigned char *)(v1367 + 9) = *(unsigned char *)(v1368 + 9);
            *(unsigned char *)(v1367 + 10) = *(unsigned char *)(v1368 + 10);
            *(unsigned char *)(v1367 + 11) = *(unsigned char *)(v1368 + 11);
            *(unsigned char *)(v1367 + 12) = *(unsigned char *)(v1368 + 12);
            v1369 = (void *)((v1366 + 47) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1370 = (void *)((v1365 + 47) & 0xFFFFFFFFFFFFFFF8);
            *unint64_t v1370 = *v1369;
            unint64_t v1371 = ((unint64_t)v1370 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1372 = ((unint64_t)v1369 + 15) & 0xFFFFFFFFFFFFFFF8;
            *(void *)unint64_t v1371 = *(void *)v1372;
            *(unsigned char *)(v1371 + 8) = *(unsigned char *)(v1372 + 8);
            *(unsigned char *)(v1371 + 9) = *(unsigned char *)(v1372 + 9);
            long long v1373 = (void *)((v1649 + v1371) & v1710);
            long long v1374 = (const void *)((v1649 + v1372) & v1710);
            if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1653 + 48))(v1374, 1, v1652))
            {
              memcpy(v1373, v1374, __n);
            }
            else
            {
              v1361((size_t)v1373, (size_t)v1374, v1652);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v1653 + 56))(v1373, 0, 1, v1652);
            }
            uint64_t v1347 = v1628;
            long long v1375 = (void *)(((unint64_t)v1373 + v1650) & 0xFFFFFFFFFFFFFFF8);
            long long v1376 = (void *)(((unint64_t)v1374 + v1650) & 0xFFFFFFFFFFFFFFF8);
            *long long v1375 = *v1376;
            unint64_t v1377 = ((unint64_t)v1375 + 15) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1378 = ((unint64_t)v1376 + 15) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1379 = *(void *)v1378;
            *(unsigned char *)(v1377 + 8) = *(unsigned char *)(v1378 + 8);
            *(void *)unint64_t v1377 = v1379;
            long long v1380 = (void *)(((unint64_t)v1375 + 31) & 0xFFFFFFFFFFFFFFF8);
            long long v1381 = (void *)(((unint64_t)v1376 + 31) & 0xFFFFFFFFFFFFFFF8);
            *long long v1380 = *v1381;
            long long v1382 = (_OWORD *)(((unint64_t)v1380 + 15) & 0xFFFFFFFFFFFFFFF8);
            long long v1383 = (_OWORD *)(((unint64_t)v1381 + 15) & 0xFFFFFFFFFFFFFFF8);
            *long long v1382 = *v1383;
            unint64_t v1384 = ((unint64_t)v1382 + 19) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1385 = ((unint64_t)v1383 + 19) & 0xFFFFFFFFFFFFFFF8;
            uint64_t v1386 = *(void *)v1385;
            *(unsigned char *)(v1384 + 8) = *(unsigned char *)(v1385 + 8);
            *(void *)unint64_t v1384 = v1386;
            *(unsigned char *)(v1384 + 9) = *(unsigned char *)(v1385 + 9);
            unint64_t v1387 = (v1384 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            unint64_t v1388 = (v1385 + 13) & 0xFFFFFFFFFFFFFFFCLL;
            LODWORD(v1379) = *(_DWORD *)v1388;
            *(unsigned char *)(v1387 + 4) = *(unsigned char *)(v1388 + 4);
            *(_DWORD *)unint64_t v1387 = v1379;
            *(_OWORD *)((v1384 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1385 + 25) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1389 = v1696 + v1357;
            long long v1390 = *(_OWORD *)(v1696 + v1358 + 112);
            long long v1392 = *(_OWORD *)(v1696 + v1358 + 64);
            long long v1391 = *(_OWORD *)(v1696 + v1358 + 80);
            *(_OWORD *)(v1389 + 96) = *(_OWORD *)(v1696 + v1358 + 96);
            *(_OWORD *)(v1389 + 112) = v1390;
            *(_OWORD *)(v1389 + 64) = v1392;
            *(_OWORD *)(v1389 + 80) = v1391;
            long long v1393 = *(_OWORD *)(v1696 + v1358 + 176);
            long long v1395 = *(_OWORD *)(v1696 + v1358 + 128);
            long long v1394 = *(_OWORD *)(v1696 + v1358 + 144);
            *(_OWORD *)(v1389 + 160) = *(_OWORD *)(v1696 + v1358 + 160);
            *(_OWORD *)(v1389 + 176) = v1393;
            *(_OWORD *)(v1389 + 128) = v1395;
            *(_OWORD *)(v1389 + 144) = v1394;
            long long v1397 = *(_OWORD *)(v1696 + v1358 + 208);
            long long v1396 = *(_OWORD *)(v1696 + v1358 + 224);
            long long v1398 = *(_OWORD *)(v1696 + v1358 + 192);
            *(void *)(v1389 + 240) = *(void *)(v1696 + v1358 + 240);
            *(_OWORD *)(v1389 + 208) = v1397;
            *(_OWORD *)(v1389 + 224) = v1396;
            *(_OWORD *)(v1389 + 192) = v1398;
            long long v1399 = *(_OWORD *)(v1696 + v1358);
            long long v1400 = *(_OWORD *)(v1696 + v1358 + 16);
            long long v1401 = *(_OWORD *)(v1696 + v1358 + 48);
            *(_OWORD *)(v1389 + 32) = *(_OWORD *)(v1696 + v1358 + 32);
            *(_OWORD *)(v1389 + 48) = v1401;
            *(_OWORD *)unint64_t v1389 = v1399;
            *(_OWORD *)(v1389 + 16) = v1400;
            v1402 = (_OWORD *)((v1696 + v1357 + 255) & 0xFFFFFFFFFFFFFFF8);
            v1403 = (long long *)((v1696 + v1358 + 255) & 0xFFFFFFFFFFFFFFF8);
            long long v1404 = *v1403;
            *(_OWORD *)((char *)v1402 + 9) = *(long long *)((char *)v1403 + 9);
            _OWORD *v1402 = v1404;
            unint64_t v1405 = (v1696 + v1357 + 287) & 0xFFFFFFFFFFFFFFF8;
            unint64_t v1406 = (v1696 + v1358 + 287) & 0xFFFFFFFFFFFFFFF8;
            long long v1407 = *(_OWORD *)v1406;
            *(unsigned char *)(v1405 + 16) = *(unsigned char *)(v1406 + 16);
            *(_OWORD *)unint64_t v1405 = v1407;
            int v1408 = (void *)((v1696 + v1357 + 311) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1409 = (void *)((v1696 + v1358 + 311) & 0xFFFFFFFFFFFFFFF8);
            *int v1408 = *v1409;
            *(_OWORD *)(((unint64_t)v1408 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1409
                                                                                            + 15) & 0xFFFFFFFFFFFFFFF8);
            size_t v1348 = __n;
            size_t v1349 = v1657;
            unint64_t v301 = v1703;
            unint64_t v1030 = v1719;
            unint64_t v1053 = v1726;
            if (v1639)
            {
LABEL_1363:
              char v1017 = 0;
              char v1016 = 0;
              unint64_t v1410 = ((((v1347
                        + ((((((((((v1633 + v1349 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 19) & 0xFFFFFFFFFFFFFFF8)
                          + 25) & 0xFFFFFFFFFFFFFFF8)
                        + 327) & 0xFFFFFFFFFFFFFFF8)
                      + 15) & 0xFFFFFFFFFFFFFFF8)
                    + 16;
              v1411 = (void *)(((unint64_t)v1030 + v1410) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v1412 = (void *)(((unint64_t)v1732 + v1410) & 0xFFFFFFFFFFFFFFF8);
              void *v1411 = *v1412;
              *(void *)(((unint64_t)v1411 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1412
                                                                                              + 15) & 0xFFFFFFFFFFFFFFF8);
              goto LABEL_1402;
            }
LABEL_1357:
            size_t v1349 = v1348;
            goto LABEL_1363;
          }
          unint64_t v1063 = ((unint64_t)v1026 + v1648) & v1570;
          unint64_t v1064 = (v1620 + v1063) & v1689;
          uint64_t v1028 = v1023;
          if (v1630 == v1622)
          {
            unint64_t v1030 = v1719;
            if (v1623 == v1630)
            {
              int v1027 = (*(uint64_t (**)(unint64_t))(v1641 + 48))((v1620 + v1063) & v1689);
              unint64_t v1026 = v1732;
              uint64_t v1029 = ~v1679;
              goto LABEL_1355;
            }
            long long v1119 = (unint64_t *)((v1646 + v1064) & 0xFFFFFFFFFFFFFFF8);
            uint64_t v1029 = ~v1679;
            if (v1608 <= 0x7FFFFFFE)
            {
              unint64_t v1120 = *v1119;
              goto LABEL_1424;
            }
            int v1027 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v1119 + v1635) & v1676, v1604, v1636);
          }
          else
          {
            size_t v1090 = v1064 + v1697;
            unint64_t v1030 = v1719;
            if ((v1607 & 0x80000000) == 0)
            {
              unint64_t v1091 = *(void *)(v1090 + 8);
              if (v1091 >= 0xFFFFFFFF) {
                LODWORD(v1091) = -1;
              }
              int v1027 = v1091 + 1;
              uint64_t v1029 = ~v1679;
              goto LABEL_1355;
            }
            uint64_t v1128 = (v1655 + ((v1699 + v1090) & v1023)) & v1710;
            uint64_t v1029 = ~v1679;
            if (v1639 <= 0x7FFFFFFD)
            {
              unint64_t v1120 = *(void *)(((v1603 + ((v1651 + v1128) & v1710)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1424:
              if (v1120 >= 0xFFFFFFFF) {
                LODWORD(v1120) = -1;
              }
              if ((v1120 + 1) >= 2) {
                goto LABEL_1356;
              }
              goto LABEL_1359;
            }
            int v1027 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v1653 + 48))(v1128, v1639, v1652);
          }
          unint64_t v1026 = v1732;
          goto LABEL_1355;
      }
    case 0x1Cu:
      unsigned int v309 = a2[v1669];
      unsigned int v310 = v309 - 2;
      if (v309 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v312 = v1660;
        uint64_t v316 = AssociatedTypeWitness;
        size_t v314 = v1700;
        uint64_t v313 = v1705;
        uint64_t v317 = v1658;
        uint64_t v315 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v311 = v1669;
        }
        else {
          uint64_t v311 = 4;
        }
        uint64_t v312 = v1660;
        size_t v314 = v1700;
        uint64_t v313 = v1705;
        uint64_t v315 = v1668;
        uint64_t v86 = a1;
        uint64_t v316 = AssociatedTypeWitness;
        uint64_t v317 = v1658;
        switch(v311)
        {
          case 1:
            int v318 = *a2;
            goto LABEL_748;
          case 2:
            int v318 = *(unsigned __int16 *)a2;
            goto LABEL_748;
          case 3:
            int v318 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_748;
          case 4:
            int v318 = *(_DWORD *)a2;
LABEL_748:
            if (v1669 < 4) {
              unsigned int v309 = (v318 | (v310 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v309 = v318 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v637 = v309 == 1;
      if (v309 == 1) {
        uint64_t v638 = v313;
      }
      else {
        uint64_t v638 = v317;
      }
      if (v309 == 1) {
        uint64_t v639 = v312;
      }
      else {
        uint64_t v639 = v316;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v638 + 32))(v86, a2, v639, v69);
      v86[v1669] = v637;
      v86[v314] = a2[v314];
      if (v315 > 3) {
        goto LABEL_758;
      }
      unsigned int v640 = ((1 << (8 * v315)) + 5) >> (8 * v315);
      if (v640 > 0xFFD6)
      {
        *(_DWORD *)&v86[v315] = 28;
      }
      else if (v640 <= 0xD6)
      {
LABEL_758:
        v86[v315] = 28;
      }
      else
      {
        *(_WORD *)&v86[v315] = 28;
      }
      return v86;
    case 0x1Du:
      unsigned int v319 = a2[v1669];
      unsigned int v320 = v319 - 2;
      if (v319 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v322 = v1705;
        uint64_t v324 = v1658;
        uint64_t v323 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v321 = v1669;
        }
        else {
          uint64_t v321 = 4;
        }
        uint64_t v322 = v1705;
        uint64_t v323 = v1668;
        uint64_t v86 = a1;
        uint64_t v324 = v1658;
        switch(v321)
        {
          case 1:
            int v325 = *a2;
            goto LABEL_766;
          case 2:
            int v325 = *(unsigned __int16 *)a2;
            goto LABEL_766;
          case 3:
            int v325 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_766;
          case 4:
            int v325 = *(_DWORD *)a2;
LABEL_766:
            if (v1669 < 4) {
              unsigned int v319 = (v325 | (v320 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v319 = v325 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v641 = v319 == 1;
      if (v319 == 1) {
        uint64_t v642 = v322;
      }
      else {
        uint64_t v642 = v324;
      }
      (*(void (**)(unsigned char *))(v642 + 32))(v86);
      v86[v1669] = v641;
      if (v323 > 3) {
        goto LABEL_773;
      }
      unsigned int v643 = ((1 << (8 * v323)) + 5) >> (8 * v323);
      if (v643 > 0xFFD6)
      {
        *(_DWORD *)&v86[v323] = 29;
      }
      else if (v643 <= 0xD6)
      {
LABEL_773:
        v86[v323] = 29;
      }
      else
      {
        *(_WORD *)&v86[v323] = 29;
      }
      return v86;
    case 0x1Eu:
      unsigned int v326 = a2[v1669];
      unsigned int v327 = v326 - 2;
      if (v326 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v329 = v1705;
        uint64_t v331 = v1658;
        uint64_t v330 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v328 = v1669;
        }
        else {
          uint64_t v328 = 4;
        }
        uint64_t v329 = v1705;
        uint64_t v330 = v1668;
        uint64_t v86 = a1;
        uint64_t v331 = v1658;
        switch(v328)
        {
          case 1:
            int v332 = *a2;
            goto LABEL_781;
          case 2:
            int v332 = *(unsigned __int16 *)a2;
            goto LABEL_781;
          case 3:
            int v332 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_781;
          case 4:
            int v332 = *(_DWORD *)a2;
LABEL_781:
            if (v1669 < 4) {
              unsigned int v326 = (v332 | (v327 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v326 = v332 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v644 = v326 == 1;
      if (v326 == 1) {
        uint64_t v645 = v329;
      }
      else {
        uint64_t v645 = v331;
      }
      (*(void (**)(unsigned char *))(v645 + 32))(v86);
      v86[v1669] = v644;
      if (v330 > 3) {
        goto LABEL_788;
      }
      unsigned int v646 = ((1 << (8 * v330)) + 5) >> (8 * v330);
      if (v646 > 0xFFD6)
      {
        *(_DWORD *)&v86[v330] = 30;
      }
      else if (v646 <= 0xD6)
      {
LABEL_788:
        v86[v330] = 30;
      }
      else
      {
        *(_WORD *)&v86[v330] = 30;
      }
      return v86;
    case 0x1Fu:
      unsigned int v333 = a2[v1669];
      unsigned int v334 = v333 - 2;
      if (v333 < 2)
      {
        uint64_t v339 = v78;
        uint64_t v335 = v1668;
        uint64_t v86 = a1;
        uint64_t v337 = v1660;
        uint64_t v340 = AssociatedTypeWitness;
        uint64_t v338 = v1705;
        uint64_t v341 = v1658;
      }
      else
      {
        uint64_t v335 = v1668;
        if (v1669 <= 3) {
          uint64_t v336 = v1669;
        }
        else {
          uint64_t v336 = 4;
        }
        uint64_t v337 = v1660;
        uint64_t v338 = v1705;
        uint64_t v339 = v78;
        uint64_t v86 = a1;
        uint64_t v340 = AssociatedTypeWitness;
        uint64_t v341 = v1658;
        switch(v336)
        {
          case 1:
            int v342 = *a2;
            goto LABEL_796;
          case 2:
            int v342 = *(unsigned __int16 *)a2;
            goto LABEL_796;
          case 3:
            int v342 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_796;
          case 4:
            int v342 = *(_DWORD *)a2;
LABEL_796:
            if (v1669 < 4) {
              unsigned int v333 = (v342 | (v334 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v333 = v342 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v647 = v333 == 1;
      if (v333 == 1) {
        uint64_t v648 = v338;
      }
      else {
        uint64_t v648 = v341;
      }
      if (v333 == 1) {
        uint64_t v649 = v337;
      }
      else {
        uint64_t v649 = v340;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v648 + 32))(v86, a2, v649, v69);
      v86[v1669] = v647;
      unsigned int v650 = (unsigned __int8 *)((unint64_t)&a2[v1654] & v339);
      unsigned int v651 = v650[v1669];
      unsigned int v652 = v651 - 2;
      if (v651 >= 2)
      {
        if (v1669 <= 3) {
          uint64_t v653 = v1669;
        }
        else {
          uint64_t v653 = 4;
        }
        switch(v653)
        {
          case 1:
            int v654 = *v650;
            goto LABEL_952;
          case 2:
            int v654 = *(unsigned __int16 *)v650;
            goto LABEL_952;
          case 3:
            int v654 = *(unsigned __int16 *)v650 | (*(unsigned __int8 *)(((unint64_t)&a2[v1654] & v339) + 2) << 16);
            goto LABEL_952;
          case 4:
            int v654 = *(_DWORD *)v650;
LABEL_952:
            if (v1669 < 4) {
              unsigned int v651 = (v654 | (v652 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v651 = v654 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v683 = v651 == 1;
      if (v651 == 1) {
        uint64_t v684 = v338;
      }
      else {
        uint64_t v684 = v341;
      }
      (*(void (**)(unint64_t))(v684 + 32))((unint64_t)&v86[v1654] & v339);
      *(unsigned char *)(((unint64_t)&v86[v1654] & v339) + v1669) = v683;
      if (v335 > 3) {
        goto LABEL_959;
      }
      unsigned int v685 = ((1 << (8 * v335)) + 5) >> (8 * v335);
      if (v685 > 0xFFD6)
      {
        *(_DWORD *)&v86[v335] = 31;
      }
      else if (v685 <= 0xD6)
      {
LABEL_959:
        v86[v335] = 31;
      }
      else
      {
        *(_WORD *)&v86[v335] = 31;
      }
      return v86;
    case 0x20u:
      unsigned int v343 = a2[v1669];
      unsigned int v344 = v343 - 2;
      if (v343 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v346 = v1705;
        uint64_t v348 = v1658;
        uint64_t v347 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v345 = v1669;
        }
        else {
          uint64_t v345 = 4;
        }
        uint64_t v346 = v1705;
        uint64_t v347 = v1668;
        uint64_t v86 = a1;
        uint64_t v348 = v1658;
        switch(v345)
        {
          case 1:
            int v349 = *a2;
            goto LABEL_814;
          case 2:
            int v349 = *(unsigned __int16 *)a2;
            goto LABEL_814;
          case 3:
            int v349 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_814;
          case 4:
            int v349 = *(_DWORD *)a2;
LABEL_814:
            if (v1669 < 4) {
              unsigned int v343 = (v349 | (v344 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v343 = v349 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v655 = v343 == 1;
      if (v343 == 1) {
        uint64_t v656 = v346;
      }
      else {
        uint64_t v656 = v348;
      }
      (*(void (**)(unsigned char *))(v656 + 32))(v86);
      v86[v1669] = v655;
      if (v347 > 3) {
        goto LABEL_821;
      }
      unsigned int v657 = ((1 << (8 * v347)) + 5) >> (8 * v347);
      if (v657 > 0xFFD6)
      {
        *(_DWORD *)&v86[v347] = 32;
      }
      else if (v657 <= 0xD6)
      {
LABEL_821:
        v86[v347] = 32;
      }
      else
      {
        *(_WORD *)&v86[v347] = 32;
      }
      return v86;
    case 0x21u:
      unsigned int v350 = a2[v1669];
      unsigned int v351 = v350 - 2;
      if (v350 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v353 = v1705;
        uint64_t v355 = v1658;
        uint64_t v354 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v352 = v1669;
        }
        else {
          uint64_t v352 = 4;
        }
        uint64_t v353 = v1705;
        uint64_t v354 = v1668;
        uint64_t v86 = a1;
        uint64_t v355 = v1658;
        switch(v352)
        {
          case 1:
            int v356 = *a2;
            goto LABEL_829;
          case 2:
            int v356 = *(unsigned __int16 *)a2;
            goto LABEL_829;
          case 3:
            int v356 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_829;
          case 4:
            int v356 = *(_DWORD *)a2;
LABEL_829:
            if (v1669 < 4) {
              unsigned int v350 = (v356 | (v351 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v350 = v356 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v658 = v350 == 1;
      if (v350 == 1) {
        uint64_t v659 = v353;
      }
      else {
        uint64_t v659 = v355;
      }
      (*(void (**)(unsigned char *))(v659 + 32))(v86);
      v86[v1669] = v658;
      if (v354 > 3) {
        goto LABEL_836;
      }
      unsigned int v660 = ((1 << (8 * v354)) + 5) >> (8 * v354);
      if (v660 > 0xFFD6)
      {
        *(_DWORD *)&v86[v354] = 33;
      }
      else if (v660 <= 0xD6)
      {
LABEL_836:
        v86[v354] = 33;
      }
      else
      {
        *(_WORD *)&v86[v354] = 33;
      }
      return v86;
    case 0x22u:
      unsigned int v357 = a2[v1669];
      unsigned int v358 = v357 - 2;
      if (v357 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v360 = v1705;
        uint64_t v362 = v1658;
        uint64_t v361 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v359 = v1669;
        }
        else {
          uint64_t v359 = 4;
        }
        uint64_t v360 = v1705;
        uint64_t v361 = v1668;
        uint64_t v86 = a1;
        uint64_t v362 = v1658;
        switch(v359)
        {
          case 1:
            int v363 = *a2;
            goto LABEL_844;
          case 2:
            int v363 = *(unsigned __int16 *)a2;
            goto LABEL_844;
          case 3:
            int v363 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_844;
          case 4:
            int v363 = *(_DWORD *)a2;
LABEL_844:
            if (v1669 < 4) {
              unsigned int v357 = (v363 | (v358 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v357 = v363 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v661 = v357 == 1;
      if (v357 == 1) {
        uint64_t v662 = v360;
      }
      else {
        uint64_t v662 = v362;
      }
      (*(void (**)(unsigned char *))(v662 + 32))(v86);
      v86[v1669] = v661;
      if (v361 > 3) {
        goto LABEL_851;
      }
      unsigned int v663 = ((1 << (8 * v361)) + 5) >> (8 * v361);
      if (v663 > 0xFFD6)
      {
        *(_DWORD *)&v86[v361] = 34;
      }
      else if (v663 <= 0xD6)
      {
LABEL_851:
        v86[v361] = 34;
      }
      else
      {
        *(_WORD *)&v86[v361] = 34;
      }
      return v86;
    case 0x23u:
      unsigned int v364 = a2[v1669];
      unsigned int v365 = v364 - 2;
      if (v364 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v367 = v1705;
        uint64_t v369 = v1658;
        uint64_t v368 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v366 = v1669;
        }
        else {
          uint64_t v366 = 4;
        }
        uint64_t v367 = v1705;
        uint64_t v368 = v1668;
        uint64_t v86 = a1;
        uint64_t v369 = v1658;
        switch(v366)
        {
          case 1:
            int v370 = *a2;
            goto LABEL_859;
          case 2:
            int v370 = *(unsigned __int16 *)a2;
            goto LABEL_859;
          case 3:
            int v370 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_859;
          case 4:
            int v370 = *(_DWORD *)a2;
LABEL_859:
            if (v1669 < 4) {
              unsigned int v364 = (v370 | (v365 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v364 = v370 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v664 = v364 == 1;
      if (v364 == 1) {
        uint64_t v665 = v367;
      }
      else {
        uint64_t v665 = v369;
      }
      (*(void (**)(unsigned char *))(v665 + 32))(v86);
      v86[v1669] = v664;
      if (v368 > 3) {
        goto LABEL_866;
      }
      unsigned int v666 = ((1 << (8 * v368)) + 5) >> (8 * v368);
      if (v666 > 0xFFD6)
      {
        *(_DWORD *)&v86[v368] = 35;
      }
      else if (v666 <= 0xD6)
      {
LABEL_866:
        v86[v368] = 35;
      }
      else
      {
        *(_WORD *)&v86[v368] = 35;
      }
      return v86;
    case 0x24u:
      uint64_t v1663 = ~v35;
      unint64_t v371 = v67;
      uint64_t v1579 = ~v34;
      unint64_t v1587 = ((((v1632 + ((v34 + 8 + (v1666 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 16;
      uint64_t v86 = a1;
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t, unint64_t))(v1658 + 48))(a2, 1, AssociatedTypeWitness, v69))
      {
        size_t v372 = v1616;
        memcpy(a1, a2, v1616);
        uint64_t v373 = v1705;
      }
      else
      {
        (*(void (**)(_OWORD *, unsigned __int8 *, uint64_t))(v1658 + 32))(a1, a2, AssociatedTypeWitness);
        (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v1658 + 56))(a1, 0, 1, AssociatedTypeWitness);
        uint64_t v373 = v1705;
        size_t v372 = v1616;
      }
      uint64_t v417 = ~v39;
      unint64_t v418 = (void *)(((unint64_t)a1 + v372 + 7) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v419 = (void *)((unint64_t)&a2[v372 + 7] & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v418 = *v419;
      unint64_t v420 = ((unint64_t)v418 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v421 = ((unint64_t)v419 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v420 = *(void *)v421;
      *(unsigned char *)(v420 + 8) = *(unsigned char *)(v421 + 8);
      unint64_t v422 = (void *)((v420 + v1679 + 9) & v79);
      unint64_t v423 = (const void *)((v421 + v1679 + 9) & v79);
      if (v1623 == v1630)
      {
        int v424 = (*(uint64_t (**)(const void *))(v1641 + 48))(v423);
        size_t v425 = v1697;
      }
      else
      {
        unint64_t v426 = (uint64_t *)(((unint64_t)v423 + v1646) & 0xFFFFFFFFFFFFFFF8);
        size_t v425 = v1697;
        if (v1608 <= 0x7FFFFFFE)
        {
          uint64_t v427 = *v426;
          if ((unint64_t)*v426 >= 0xFFFFFFFF) {
            LODWORD(v427) = -1;
          }
          if ((v427 + 1) >= 2) {
            goto LABEL_423;
          }
          goto LABEL_425;
        }
        int v424 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1637 + 48))(((unint64_t)v426 + v1635) & v67, v1604, v1636);
      }
      if (v424)
      {
LABEL_423:
        memcpy(v422, v423, v425);
        unint64_t v504 = a2;
        goto LABEL_426;
      }
      unint64_t v426 = (uint64_t *)(((unint64_t)v423 + v1646) & 0xFFFFFFFFFFFFFFF8);
LABEL_425:
      (*(void (**)(void *, const void *, uint64_t))(v1641 + 32))(v422, v423, v1640);
      unint64_t v505 = (void *)(((unint64_t)v422 + v1646) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v505 = *v426;
      unint64_t v506 = ((unint64_t)v505 + v1635) & v67;
      unint64_t v507 = ((unint64_t)v426 + v1635) & v371;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1637 + 32))(v506, v507, v1636);
      unint64_t v504 = a2;
      size_t v425 = v1697;
      unint64_t v508 = (void *)((v1631 + v506) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v509 = (void *)((v1631 + v507) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v508 = *v509;
      *(_OWORD *)(((unint64_t)v508 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v509 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_426:
      uint64_t v510 = (uint64_t)v423 + v425 + 10;
      *((unsigned char *)v422 + v425) = *((unsigned char *)v423 + v425);
      *(unsigned char *)(((unint64_t)v422 + v425) | 1) = *(unsigned char *)(((unint64_t)v423 + v425) | 1);
      *(unsigned char *)(((unint64_t)v422 + v425) | 2) = *(unsigned char *)(((unint64_t)v423 + v425) | 2);
      unint64_t v511 = ((unint64_t)v422 + v425 + 10) & 0xFFFFFFFFFFFFFFF8;
      long long v512 = *(_OWORD *)(v510 & 0xFFFFFFFFFFFFFFF8);
      *(unsigned char *)(v511 + 16) = *(unsigned char *)((v510 & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_OWORD *)unint64_t v511 = v512;
      unint64_t v513 = ((unint64_t)v422 + v425 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v514 = ((unint64_t)v423 + v425 + 34) & 0xFFFFFFFFFFFFFFF8;
      long long v515 = *(_OWORD *)v514;
      long long v516 = *(_OWORD *)(v514 + 16);
      long long v517 = *(_OWORD *)(v514 + 32);
      *(void *)(v513 + 48) = *(void *)(v514 + 48);
      *(_OWORD *)(v513 + 16) = v516;
      *(_OWORD *)(v513 + 32) = v517;
      *(_OWORD *)unint64_t v513 = v515;
      unint64_t v518 = (void *)((v513 + 63) & 0xFFFFFFFFFFFFFFF8);
      char v519 = (void *)((v514 + 63) & 0xFFFFFFFFFFFFFFF8);
      *unint64_t v518 = *v519;
      *(void *)(((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v519 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v520 = (void *)(((unint64_t)a1 + v1612) & v417);
      unint64_t v521 = (const void *)((unint64_t)&v504[v1612] & v417);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v373 + 48))(v521, 1, v1660))
      {
        memcpy(v520, v521, v1593);
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v373 + 32))(v520, v521, v1660);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v373 + 56))(v520, 0, 1, v1660);
      }
      uint64_t v307 = v1668;
      uint64_t v522 = (void *)(((unint64_t)v520 + v1613) & 0xFFFFFFFFFFFFFFF8);
      long long v523 = (void *)(((unint64_t)v521 + v1613) & 0xFFFFFFFFFFFFFFF8);
      void *v522 = *v523;
      unint64_t v524 = ((unint64_t)v522 + 15) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v525 = ((unint64_t)v523 + 15) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v524 = *(void *)v525;
      *(unsigned char *)(v524 + 8) = *(unsigned char *)(v525 + 8);
      uint64_t v526 = (void *)((v1614 + v524) & v1663);
      unint64_t v527 = (const void *)((v1614 + v525) & v1663);
      if (v1624 == v1634)
      {
        int v528 = (*(uint64_t (**)(const void *))(v1643 + 48))(v527);
      }
      else
      {
        uint64_t v529 = v1666;
        uint64_t v530 = (uint64_t *)(((unint64_t)v527 + v1666) & 0xFFFFFFFFFFFFFFF8);
        if (v1618 <= 0x7FFFFFFE)
        {
          uint64_t v531 = *v530;
          if ((unint64_t)*v530 >= 0xFFFFFFFF) {
            LODWORD(v531) = -1;
          }
          if ((v531 + 1) >= 2) {
            goto LABEL_440;
          }
          goto LABEL_442;
        }
        int v528 = (*(uint64_t (**)(unint64_t))(v1645 + 48))(((unint64_t)v530 + v1644) & v1579);
      }
      uint64_t v529 = v1666;
      if (v528)
      {
LABEL_440:
        unint64_t v532 = v1587;
        memcpy(v526, v527, v1587);
        goto LABEL_443;
      }
      uint64_t v530 = (uint64_t *)(((unint64_t)v527 + v1666) & 0xFFFFFFFFFFFFFFF8);
LABEL_442:
      uint64_t v533 = v529;
      (*(void (**)(void *, const void *, uint64_t))(v1643 + 32))(v526, v527, v1642);
      uint64_t v534 = (void *)(((unint64_t)v526 + v533) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v534 = *v530;
      unint64_t v535 = ((unint64_t)v534 + v1644) & v1579;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v1645 + 32))(v535, ((unint64_t)v530 + v1644) & v1579, v1638);
      uint64_t v536 = (void *)((v1632 + v535) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v307 = v1668;
      uint64_t v537 = (void *)((v1632 + (((unint64_t)v530 + v1644) & v1579)) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v536 = *v537;
      *(_OWORD *)(((unint64_t)v536 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v537 + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v532 = v1587;
LABEL_443:
      *((unsigned char *)v526 + v532) = *((unsigned char *)v527 + v532);
      *(unsigned char *)(((unint64_t)v526 + v532) | 1) = *(unsigned char *)(((unint64_t)v527 + v532) | 1);
      *(unsigned char *)(((unint64_t)v526 + v532) | 2) = *(unsigned char *)(((unint64_t)v527 + v532) | 2);
      unint64_t v538 = ((unint64_t)v526 + v532 + 10) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v539 = ((unint64_t)v527 + v532 + 10) & 0xFFFFFFFFFFFFFFF8;
      long long v540 = *(_OWORD *)v539;
      *(unsigned char *)(v538 + 16) = *(unsigned char *)(v539 + 16);
      *(_OWORD *)unint64_t v538 = v540;
      unint64_t v541 = ((unint64_t)v526 + v532 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v542 = ((unint64_t)v527 + v532 + 34) & 0xFFFFFFFFFFFFFFF8;
      long long v543 = *(_OWORD *)v542;
      long long v544 = *(_OWORD *)(v542 + 16);
      long long v545 = *(_OWORD *)(v542 + 32);
      *(void *)(v541 + 48) = *(void *)(v542 + 48);
      *(_OWORD *)(v541 + 16) = v544;
      *(_OWORD *)(v541 + 32) = v545;
      *(_OWORD *)unint64_t v541 = v543;
      uint64_t v546 = (void *)((v542 + 63) & 0xFFFFFFFFFFFFFFF8);
      unsigned int v547 = (void *)((v541 + 63) & 0xFFFFFFFFFFFFFFF8);
      *unsigned int v547 = *v546;
      *(void *)(((unint64_t)v547 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v546 + 15) & 0xFFFFFFFFFFFFFFF8);
      *((unsigned char *)v520 + v1615) = *((unsigned char *)v521 + v1615);
      unint64_t v548 = ((unint64_t)v520 + v1615) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v549 = ((unint64_t)v521 + v1615) & 0xFFFFFFFFFFFFFFF8;
      *(void *)(v548 + 8) = *(void *)(v549 + 8);
      uint64_t v550 = (_OWORD *)((v548 + 23) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v551 = (_OWORD *)((v549 + 23) & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v550 = *v551;
      unint64_t v552 = ((unint64_t)v550 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v553 = ((unint64_t)v551 + 23) & 0xFFFFFFFFFFFFFFF8;
      *(void *)unint64_t v552 = *(void *)v553;
      *(unsigned char *)(v552 + 8) = *(unsigned char *)(v553 + 8);
      *(void *)(((unint64_t)v550 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v551 + 39) & 0xFFFFFFFFFFFFFFF8);
      if (v307 <= 3)
      {
        unsigned int v554 = ((1 << (8 * v307)) + 5) >> (8 * v307);
        if (v554 > 0xFFD6)
        {
          int v555 = 36;
          goto LABEL_1409;
        }
        if (v554 > 0xD6)
        {
          *(_WORD *)((char *)a1 + v307) = 36;
          return v86;
        }
      }
      *((unsigned char *)a1 + v307) = 36;
      return v86;
    case 0x25u:
      unsigned int v374 = a2[v1669];
      unsigned int v375 = v374 - 2;
      if (v374 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v377 = v1660;
        uint64_t v381 = AssociatedTypeWitness;
        size_t v379 = v1700;
        uint64_t v378 = v1705;
        uint64_t v382 = v1658;
        uint64_t v380 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v376 = v1669;
        }
        else {
          uint64_t v376 = 4;
        }
        uint64_t v377 = v1660;
        size_t v379 = v1700;
        uint64_t v378 = v1705;
        uint64_t v380 = v1668;
        uint64_t v86 = a1;
        uint64_t v381 = AssociatedTypeWitness;
        uint64_t v382 = v1658;
        switch(v376)
        {
          case 1:
            int v383 = *a2;
            goto LABEL_874;
          case 2:
            int v383 = *(unsigned __int16 *)a2;
            goto LABEL_874;
          case 3:
            int v383 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_874;
          case 4:
            int v383 = *(_DWORD *)a2;
LABEL_874:
            if (v1669 < 4) {
              unsigned int v374 = (v383 | (v375 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v374 = v383 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v667 = v374 == 1;
      if (v374 == 1) {
        uint64_t v668 = v378;
      }
      else {
        uint64_t v668 = v382;
      }
      if (v374 == 1) {
        uint64_t v669 = v377;
      }
      else {
        uint64_t v669 = v381;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t, unint64_t))(v668 + 32))(v86, a2, v669, v69);
      v86[v1669] = v667;
      v86[v379] = a2[v379];
      if (v380 > 3) {
        goto LABEL_884;
      }
      unsigned int v670 = ((1 << (8 * v380)) + 5) >> (8 * v380);
      if (v670 > 0xFFD6)
      {
        *(_DWORD *)&v86[v380] = 37;
      }
      else if (v670 <= 0xD6)
      {
LABEL_884:
        v86[v380] = 37;
      }
      else
      {
        *(_WORD *)&v86[v380] = 37;
      }
      return v86;
    case 0x26u:
      unsigned int v384 = a2[v1669];
      unsigned int v385 = v384 - 2;
      if (v384 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v387 = v1705;
        uint64_t v389 = v1658;
        uint64_t v388 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v386 = v1669;
        }
        else {
          uint64_t v386 = 4;
        }
        uint64_t v387 = v1705;
        uint64_t v388 = v1668;
        uint64_t v86 = a1;
        uint64_t v389 = v1658;
        switch(v386)
        {
          case 1:
            int v390 = *a2;
            goto LABEL_892;
          case 2:
            int v390 = *(unsigned __int16 *)a2;
            goto LABEL_892;
          case 3:
            int v390 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_892;
          case 4:
            int v390 = *(_DWORD *)a2;
LABEL_892:
            if (v1669 < 4) {
              unsigned int v384 = (v390 | (v385 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v384 = v390 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v671 = v384 == 1;
      if (v384 == 1) {
        uint64_t v672 = v387;
      }
      else {
        uint64_t v672 = v389;
      }
      (*(void (**)(unsigned char *))(v672 + 32))(v86);
      v86[v1669] = v671;
      if (v388 > 3) {
        goto LABEL_899;
      }
      unsigned int v673 = ((1 << (8 * v388)) + 5) >> (8 * v388);
      if (v673 > 0xFFD6)
      {
        *(_DWORD *)&v86[v388] = 38;
      }
      else if (v673 <= 0xD6)
      {
LABEL_899:
        v86[v388] = 38;
      }
      else
      {
        *(_WORD *)&v86[v388] = 38;
      }
      return v86;
    case 0x27u:
      unsigned int v391 = a2[v1669];
      unsigned int v392 = v391 - 2;
      if (v391 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v394 = v1705;
        uint64_t v396 = v1658;
        uint64_t v395 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v393 = v1669;
        }
        else {
          uint64_t v393 = 4;
        }
        uint64_t v394 = v1705;
        uint64_t v395 = v1668;
        uint64_t v86 = a1;
        uint64_t v396 = v1658;
        switch(v393)
        {
          case 1:
            int v397 = *a2;
            goto LABEL_907;
          case 2:
            int v397 = *(unsigned __int16 *)a2;
            goto LABEL_907;
          case 3:
            int v397 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_907;
          case 4:
            int v397 = *(_DWORD *)a2;
LABEL_907:
            if (v1669 < 4) {
              unsigned int v391 = (v397 | (v392 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v391 = v397 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v674 = v391 == 1;
      if (v391 == 1) {
        uint64_t v675 = v394;
      }
      else {
        uint64_t v675 = v396;
      }
      (*(void (**)(unsigned char *))(v675 + 32))(v86);
      v86[v1669] = v674;
      if (v395 > 3) {
        goto LABEL_914;
      }
      unsigned int v676 = ((1 << (8 * v395)) + 5) >> (8 * v395);
      if (v676 > 0xFFD6)
      {
        *(_DWORD *)&v86[v395] = 39;
      }
      else if (v676 <= 0xD6)
      {
LABEL_914:
        v86[v395] = 39;
      }
      else
      {
        *(_WORD *)&v86[v395] = 39;
      }
      return v86;
    case 0x28u:
      unsigned int v398 = a2[v1669];
      unsigned int v399 = v398 - 2;
      if (v398 < 2)
      {
        uint64_t v86 = a1;
        uint64_t v401 = v1705;
        uint64_t v403 = v1658;
        uint64_t v402 = v1668;
      }
      else
      {
        if (v1669 <= 3) {
          uint64_t v400 = v1669;
        }
        else {
          uint64_t v400 = 4;
        }
        uint64_t v401 = v1705;
        uint64_t v402 = v1668;
        uint64_t v86 = a1;
        uint64_t v403 = v1658;
        switch(v400)
        {
          case 1:
            int v404 = *a2;
            goto LABEL_922;
          case 2:
            int v404 = *(unsigned __int16 *)a2;
            goto LABEL_922;
          case 3:
            int v404 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_922;
          case 4:
            int v404 = *(_DWORD *)a2;
LABEL_922:
            if (v1669 < 4) {
              unsigned int v398 = (v404 | (v399 << (8 * v1669))) + 2;
            }
            else {
              unsigned int v398 = v404 + 2;
            }
            break;
          default:
            break;
        }
      }
      BOOL v677 = v398 == 1;
      if (v398 == 1) {
        uint64_t v678 = v401;
      }
      else {
        uint64_t v678 = v403;
      }
      (*(void (**)(unsigned char *))(v678 + 32))(v86);
      v86[v1669] = v677;
      if (v402 > 3) {
        goto LABEL_929;
      }
      unsigned int v679 = ((1 << (8 * v402)) + 5) >> (8 * v402);
      if (v679 > 0xFFD6)
      {
        *(_DWORD *)&v86[v402] = 40;
      }
      else if (v679 <= 0xD6)
      {
LABEL_929:
        v86[v402] = 40;
      }
      else
      {
        *(_WORD *)&v86[v402] = 40;
      }
      return v86;
    default:
      goto LABEL_128;
  }
}

unsigned __int8 *sub_24D54C4EC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v2028 = *(void *)(a3 + 24);
  uint64_t v2047 = swift_getAssociatedTypeWitness();
  uint64_t v2074 = *(void *)(v2047 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v2074 + 80);
  uint64_t v1977 = v6 + v7;
  uint64_t v2056 = v7;
  unint64_t v2040 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v2074 + 64);
  unint64_t v2042 = v8;
  unint64_t v9 = v2040 + v8;
  unint64_t v2059 = v2040 + v8;
  if (v8 <= v6) {
    unint64_t v8 = v6;
  }
  unint64_t v10 = v6;
  unint64_t v11 = v8 + 1;
  unint64_t v2070 = v8;
  size_t v2071 = v8 + 1;
  if (v8 + 1 > v9) {
    unint64_t v9 = v8 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | *(unsigned __int8 *)(v2074 + 80);
  uint64_t v2061 = v13;
  unint64_t v2011 = v13 + v11;
  unint64_t v2060 = ((v13 + v11) & ~v13) + v11;
  if (v2060 > v9) {
    unint64_t v9 = ((v13 + v11) & ~v13) + v11;
  }
  unint64_t v2058 = v9;
  uint64_t v2054 = v5;
  unsigned int v14 = *(_DWORD *)(v5 + 84);
  uint64_t v2029 = v4;
  uint64_t v1997 = swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(v1997 - 8);
  unsigned int v16 = *(_DWORD *)(v15 + 84);
  uint64_t v1992 = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(v1992 - 8);
  unsigned int v18 = *(_DWORD *)(v17 + 84);
  unsigned int v1952 = v18;
  unsigned int v1980 = v16;
  if (v16 > v18) {
    unsigned int v18 = v16;
  }
  unsigned int v1965 = v18;
  if (v18 <= 0x7FFFFFFE) {
    unsigned int v18 = 2147483646;
  }
  unsigned int v2044 = v14;
  unsigned int v1982 = v18;
  if (v18 > v14) {
    unsigned int v14 = v18;
  }
  uint64_t v2017 = sub_24DCC8CE8();
  uint64_t v19 = *(void *)(v2017 - 8);
  unsigned int v20 = *(_DWORD *)(v19 + 84);
  if (v20 <= 0x7FFFFFFE) {
    unsigned int v21 = 2147483646;
  }
  else {
    unsigned int v21 = *(_DWORD *)(v19 + 84);
  }
  unsigned int v2035 = v21;
  if (v14 > v21) {
    unsigned int v21 = v14;
  }
  unsigned int v1962 = v21;
  if (v21 <= 0x7FFFFFFF) {
    unsigned int v21 = 0x7FFFFFFF;
  }
  unsigned int v1985 = v21;
  unsigned int v1996 = *(_DWORD *)(v19 + 84);
  unint64_t v2043 = v10;
  uint64_t v2004 = v10 + v12;
  uint64_t v2055 = v12;
  uint64_t v1998 = v15;
  uint64_t v1993 = v17;
  uint64_t v22 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7;
  uint64_t v1976 = v10 + v23;
  uint64_t v2064 = v23;
  uint64_t v2001 = *(void *)(v15 + 64) + 7;
  uint64_t v1990 = v22 + 8;
  uint64_t v2045 = v22;
  uint64_t v1986 = *(void *)(v17 + 64) + 7;
  size_t v2048 = ((((v1986 + ((v22 + 8 + (v2001 & 0xFFFFFFFFFFFFFFF8)) & ~v22)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v2015 = *(void *)(v2017 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v2050 = (v24 | 7) + 16;
  uint64_t v2013 = v24 + 12;
  size_t v25 = *(void *)(v19 + 64);
  uint64_t v2010 = v25 + v24;
  size_t v1978 = v25 + 12;
  size_t v2006 = v25;
  uint64_t v2007 = v24 + 10;
  if (v20) {
    size_t v26 = *(void *)(v19 + 64);
  }
  else {
    size_t v26 = v25 + 1;
  }
  size_t v2053 = v26;
  size_t v2008 = v26 + 7;
  unint64_t v2021 = (v24
         + 10
         + ((((((v25 + 12 + ((v25 + v24 + ((v24 + 12) & ~v24)) & ~v24)) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
           + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v24;
  unint64_t v2049 = ((((((((((v26 + 7 + v2021) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
            + 19) & 0xFFFFFFFFFFFFFFF8)
          + 25) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v2022 = (v2050 + v2048 + ((v10 + v23 + ((v10 + v12) & ~v12)) & ~v23)) & ~(v24 | 7);
  unint64_t v27 = (((v2022 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v2063 = v27 + 16;
  uint64_t v28 = *(_DWORD *)(v15 + 80) & 0xF8 | v22 | 7 | v12 | v24;
  unint64_t v1956 = v27 + 16 + v28;
  unint64_t v2039 = v27 + 23;
  unint64_t v2037 = ((v27 + 23 + (v1956 & ~v28)) & 0xFFFFFFFFFFFFFFF8) + 8;
  unsigned int v29 = *(_DWORD *)(v2074 + 84);
  uint64_t v1999 = swift_getAssociatedTypeWitness();
  uint64_t v30 = *(void *)(v1999 - 8);
  unsigned int v31 = *(_DWORD *)(v30 + 84);
  uint64_t v1994 = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(v1994 - 8);
  unsigned int v33 = *(_DWORD *)(v32 + 84);
  unsigned int v1953 = v33;
  unsigned int v1981 = v31;
  if (v31 > v33) {
    unsigned int v33 = v31;
  }
  unsigned int v1966 = v33;
  if (v33 <= 0x7FFFFFFE) {
    unsigned int v33 = 2147483646;
  }
  unsigned int v1983 = v33;
  if (v33 <= v29) {
    unsigned int v33 = v29;
  }
  if (v33 <= v2035) {
    unsigned int v33 = v2035;
  }
  unsigned int v1961 = v33;
  if (v33 <= 0x7FFFFFFF) {
    unsigned int v33 = 0x7FFFFFFF;
  }
  unsigned int v1984 = v33;
  uint64_t v2003 = v2042 + v2056;
  uint64_t v2000 = v30;
  uint64_t v1995 = *(void *)(v1994 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = *(_DWORD *)(v30 + 80) & 0xF8 | v34 | 7;
  uint64_t v1975 = v2042 + v35;
  uint64_t v2002 = *(void *)(v30 + 64) + 7;
  uint64_t v1991 = v34 + 8;
  uint64_t v1987 = *(void *)(v1995 + 64) + 7;
  unint64_t v36 = ((((v1987 + ((v34 + 8 + (v2002 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v1963 = (v2050 + v36 + ((v2042 + v35 + ((v2042 + v2056) & ~v2056)) & ~v35)) & ~(v24 | 7);
  unint64_t v37 = (((v1963 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  size_t v38 = v37 + 16;
  uint64_t v39 = v35 | v2056;
  uint64_t v40 = v35 | v2056 | v24;
  unint64_t v1955 = v37 + 16 + v40;
  unint64_t v41 = v37 + (v1955 & ~v40);
  uint64_t v2057 = v28;
  unint64_t v1950 = v28 + v10;
  size_t v42 = v2063 + ((v28 + v10) & ~v28);
  unsigned int v1979 = v29;
  if (v29) {
    size_t v43 = v2042;
  }
  else {
    size_t v43 = v2042 + 1;
  }
  uint64_t v44 = *(void *)(v2029 - 8);
  uint64_t v45 = *(unsigned __int8 *)(v44 + 80);
  unint64_t v46 = (v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = ((((((v43 + v35 + ((v42 + v2056) & ~v2056)) & ~v35) + v36 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  size_t v1948 = v43 + v35;
  if (*(_DWORD *)(v44 + 84)) {
    uint64_t v48 = *(void *)(*(void *)(v2029 - 8) + 64);
  }
  else {
    uint64_t v48 = *(void *)(*(void *)(v2029 - 8) + 64) + 1;
  }
  if (v10 <= ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v49 = ((v46 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v49 = v10;
  }
  if (v47 <= v36 + ((v43 + v35 + v2040) & ~v35) + 16) {
    unint64_t v47 = v36 + ((v43 + v35 + v2040) & ~v35) + 16;
  }
  unint64_t v50 = ((v46 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1944 = v10 + v45;
  if (v50 <= ((v10 + v45) & ~v45) + v48) {
    unint64_t v50 = ((v10 + v45) & ~v45) + v48;
  }
  if (v49 <= v47) {
    unint64_t v49 = v47;
  }
  if (v49 <= v50) {
    unint64_t v51 = v50;
  }
  else {
    unint64_t v51 = v49;
  }
  if (v2044) {
    size_t v52 = v10;
  }
  else {
    size_t v52 = v10 + 1;
  }
  uint64_t v53 = *(void *)(v2028 - 8);
  uint64_t v54 = *(unsigned __int8 *)(v53 + 80);
  unint64_t v1949 = v40 + v2042;
  size_t v55 = v38 + ((v40 + v2042) & ~v40);
  unint64_t v56 = (v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v57 = ((((((v52 + v2064 + ((v55 + v2055) & ~v2055)) & ~v2064) + v2048 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v1943 = v2042 + v2055;
  size_t v1947 = v52 + v2064;
  if (*(_DWORD *)(v53 + 84)) {
    uint64_t v58 = *(void *)(*(void *)(v2028 - 8) + 64);
  }
  else {
    uint64_t v58 = *(void *)(*(void *)(v2028 - 8) + 64) + 1;
  }
  uint64_t v59 = v35;
  if (v2042 <= ((v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v60 = ((v56 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  else {
    unint64_t v60 = v2042;
  }
  if (v57 <= v2048 + ((v52 + v2064 + ((v2042 + v2055) & ~v2055)) & ~v2064) + 16) {
    unint64_t v57 = v2048 + ((v52 + v2064 + ((v2042 + v2055) & ~v2055)) & ~v2064) + 16;
  }
  unint64_t v61 = ((v56 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  uint64_t v1942 = v2042 + v54;
  size_t v1938 = v58;
  if (v61 <= ((v2042 + v54) & ~v54) + v58) {
    unint64_t v61 = ((v2042 + v54) & ~v54) + v58;
  }
  if (v60 <= v57) {
    unint64_t v60 = v57;
  }
  if (v60 <= v61) {
    unint64_t v62 = v61;
  }
  else {
    unint64_t v62 = v60;
  }
  unint64_t v63 = v2070;
  unint64_t v1964 = v51;
  if (v62 + 1 <= v51 + 1) {
    unint64_t v64 = v51 + 1;
  }
  else {
    unint64_t v64 = v62 + 1;
  }
  unint64_t v65 = v2070 + 2;
  unint64_t v2041 = v2070 + 2;
  if (v2071 > v2070 + 2) {
    unint64_t v65 = v2070 + 1;
  }
  if (v65 <= v2037) {
    unint64_t v65 = v2037;
  }
  size_t __n = v52;
  unint64_t v1969 = ((((((((v2064 + ((((v52 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9) & ~v2064) + v2048 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + v39
        + 8;
  size_t v1970 = v43 + 7;
  unint64_t v2009 = ((((v1987 + ((v34 + 8 + (v2002 & 0xFFFFFFFFFFFFFFF8)) & ~v34)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
        + 16;
  uint64_t v1971 = v35 + 9;
  unint64_t v1972 = ((((((((v35 + 9 + ((((v43 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & ~v35) + v36 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + 8;
  unint64_t v2031 = ((v41 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2031) {
    unint64_t v65 = ((v41 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v65 <= v2063) {
    unint64_t v65 = v2063;
  }
  size_t v66 = v38;
  if (v65 <= v38) {
    unint64_t v65 = v38;
  }
  unint64_t v2030 = v2060 + 2;
  if (v65 <= v2060 + 2) {
    unint64_t v65 = v2060 + 2;
  }
  unint64_t v2033 = ((v2070 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2033) {
    unint64_t v65 = ((v2070 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  unint64_t v2034 = (v2070 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v65 <= v2034) {
    unint64_t v65 = (v2070 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v65 <= v2059) {
    unint64_t v65 = v2059;
  }
  unint64_t v2036 = ((v2061 + 1) & ~v2061) + v2071;
  if (v65 <= v2036) {
    unint64_t v65 = ((v2061 + 1) & ~v2061) + v2071;
  }
  unint64_t v2032 = v64 + 1;
  if (v65 <= v64 + 1) {
    unint64_t v65 = v64 + 1;
  }
  if (v65 <= v2060) {
    unint64_t v65 = v2060;
  }
  unint64_t v2038 = ((((v1972 + (v1969 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v65 <= v2038) {
    unint64_t v65 = ((((v1972 + (v1969 & ~v39) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v65 <= v2058) {
    unint64_t v65 = v2058;
  }
  if (v65 <= 0x38) {
    uint64_t v67 = 56;
  }
  else {
    uint64_t v67 = v65;
  }
  unint64_t v68 = &a1[v67];
  size_t v1951 = v43;
  uint64_t v1945 = *(void *)(v2028 - 8);
  uint64_t v1946 = *(void *)(v2029 - 8);
  size_t v1939 = v48;
  if (v67 > 3) {
    goto LABEL_105;
  }
  unsigned int v70 = ((1 << (8 * v67)) + 5) >> (8 * v67);
  if (v70 > 0xFFD6)
  {
    unsigned int v69 = *(_DWORD *)v68;
  }
  else
  {
    if (v70 <= 0xD6)
    {
LABEL_105:
      unsigned int v69 = *v68;
      goto LABEL_110;
    }
    unsigned int v69 = *(unsigned __int16 *)v68;
  }
LABEL_110:
  unsigned int v71 = v69 - 41;
  uint64_t v72 = v2047;
  uint64_t v73 = AssociatedTypeWitness;
  unint64_t v1967 = v62;
  if (v69 >= 0x29)
  {
    if (v67 <= 3) {
      uint64_t v74 = v67;
    }
    else {
      uint64_t v74 = 4;
    }
    switch(v74)
    {
      case 1:
        int v75 = *a1;
        if (v67 < 4) {
          goto LABEL_122;
        }
        goto LABEL_123;
      case 2:
        int v75 = *(unsigned __int16 *)a1;
        if (v67 >= 4) {
          goto LABEL_123;
        }
        goto LABEL_122;
      case 3:
        int v75 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v67 >= 4) {
          goto LABEL_123;
        }
        goto LABEL_122;
      case 4:
        int v75 = *(_DWORD *)a1;
        if (v67 < 4) {
LABEL_122:
        }
          v75 |= v71 << (8 * v67);
LABEL_123:
        unsigned int v69 = v75 + 41;
        break;
      default:
        break;
    }
  }
  uint64_t v2019 = ~v2056;
  uint64_t v2018 = ~v2061;
  uint64_t v2005 = ~v2055;
  uint64_t v2016 = ~v2064;
  uint64_t v1988 = ~v2045;
  uint64_t v2012 = ~(v24 | 7);
  uint64_t v2014 = ~v24;
  uint64_t v2046 = ~v2057;
  uint64_t v2020 = ~v35;
  uint64_t v1989 = ~v34;
  uint64_t v1954 = v35 | v2056 | v24;
  uint64_t v1974 = ~v40;
  uint64_t v1941 = ~v45;
  uint64_t v1940 = ~v54;
  uint64_t v1968 = ~v39;
  size_t v76 = v2053;
  uint64_t v77 = a2;
  switch(v69)
  {
    case 0u:
    case 0x12u:
      uint64_t v78 = v67;
      (*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(a1, AssociatedTypeWitness);
      (*(void (**)(unint64_t, uint64_t))(v2074 + 8))((unint64_t)&a1[v1977] & v2019, v2047);
      uint64_t v67 = v78;
      size_t v76 = v2053;
      unint64_t v63 = v2070;
      goto LABEL_321;
    case 1u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v83 = v2070;
        }
        else {
          uint64_t v83 = 4;
        }
        switch(v83)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 2u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v84 = v2070;
        }
        else {
          uint64_t v84 = 4;
        }
        switch(v84)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 3u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v85 = v2070;
        }
        else {
          uint64_t v85 = 4;
        }
        switch(v85)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 4u:
      unsigned int v86 = a1[v2070];
      unsigned int v87 = v86 - 2;
      if (v86 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v88 = v2070;
        }
        else {
          uint64_t v88 = 4;
        }
        switch(v88)
        {
          case 1:
            int v89 = *a1;
            goto LABEL_773;
          case 2:
            int v89 = *(unsigned __int16 *)a1;
            goto LABEL_773;
          case 3:
            int v89 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_773;
          case 4:
            int v89 = *(_DWORD *)a1;
LABEL_773:
            if (v2070 < 4) {
              unsigned int v86 = (v89 | (v87 << (8 * v2070))) + 2;
            }
            else {
              unsigned int v86 = v89 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v126 = v67;
      size_t v127 = v2053;
      uint64_t v629 = v2074;
      if (v86 == 1)
      {
        uint64_t v630 = v2047;
      }
      else
      {
        uint64_t v629 = v2054;
        uint64_t v630 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v629 + 8))(a1, v630);
      char v631 = v2070;
      int v632 = (unsigned __int8 *)((unint64_t)&a1[v2011] & v2018);
      unsigned int v633 = v632[v2070];
      unsigned int v634 = v633 - 2;
      if (v633 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v635 = v2070;
        }
        else {
          uint64_t v635 = 4;
        }
        switch(v635)
        {
          case 1:
            int v636 = *v632;
            goto LABEL_871;
          case 2:
            int v636 = *(unsigned __int16 *)v632;
            goto LABEL_871;
          case 3:
            int v636 = *(unsigned __int16 *)v632 | (*(unsigned __int8 *)(((unint64_t)&a1[v2011] & v2018) + 2) << 16);
            goto LABEL_871;
          case 4:
            int v636 = *(_DWORD *)v632;
LABEL_871:
            if (v2070 >= 4) {
              goto LABEL_872;
            }
            goto LABEL_877;
          default:
            goto LABEL_878;
        }
      }
      goto LABEL_878;
    case 5u:
      unsigned int v90 = v1985;
      uint64_t v1925 = v67;
      if (v2044 == v1985)
      {
        int v91 = (*(uint64_t (**)(unsigned __int8 *))(v2054 + 48))(a1);
        unsigned int v90 = v1985;
        goto LABEL_1452;
      }
      unint64_t v454 = (unint64_t)&a1[v2004] & v2005;
      unint64_t v455 = (v454 + v2043 + v2064) & v2016;
      if (v1982 == v1985)
      {
        if (v1980 == v1982)
        {
          int v91 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((v454 + v2043 + v2064) & v2016);
LABEL_1451:
          unsigned int v90 = v1985;
          goto LABEL_1452;
        }
        uint64_t v621 = (unint64_t *)((v2001 + v455) & 0xFFFFFFFFFFFFFFF8);
        if (v1965 > 0x7FFFFFFE)
        {
          int v91 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v621 + v1990) & v1988);
          goto LABEL_1451;
        }
        unint64_t v622 = *v621;
      }
      else
      {
        size_t v553 = v2048 + v455;
        if ((v1962 & 0x80000000) == 0)
        {
          unint64_t v554 = *(void *)(v553 + 8);
          if (v554 >= 0xFFFFFFFF) {
            LODWORD(v554) = -1;
          }
          int v91 = v554 + 1;
LABEL_1452:
          if (v91) {
            goto LABEL_1465;
          }
          unint64_t v454 = (unint64_t)&a1[v2004] & v2005;
          unint64_t v455 = (v454 + v2043 + v2064) & v2016;
LABEL_1454:
          unint64_t v1933 = v64;
          unsigned int v837 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
          v837(a1, AssociatedTypeWitness);
          v837((unsigned __int8 *)v454, AssociatedTypeWitness);
          (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v455, v1997);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v455) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          size_t v838 = (v2050 + v2048 + v455) & v2012;
          unint64_t v839 = *(void (**)(size_t, uint64_t))(v2015 + 8);
          v839((v2013 + v838) & v2014, v2017);
          size_t v840 = (v2010 + ((v2013 + v838) & v2014)) & v2014;
          v839(v840, v2017);
          swift_bridgeObjectRelease();
          unint64_t v841 = (v2007
                + ((((((v1978 + v840) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v841, 1, v2017)) {
            v839(v841, v2017);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unsigned int v842 = (uint64_t *)((((((v2008 + v841) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v843 = v842[1];
          if ((v843 & 0x3000000000000000) == 0) {
            sub_24D400DCC(*v842, v843);
          }
          swift_bridgeObjectRelease();
          unint64_t v844 = v2049 + v838;
          unint64_t v845 = *(void **)(v844 + 16);
          LODWORD(v846) = -1;
          if ((unint64_t)v845 < 0xFFFFFFFF) {
            uint64_t v846 = *(void *)(v844 + 16);
          }
          uint64_t v72 = v2047;
          uint64_t v77 = a2;
          if ((int)v846 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v844 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_24D466534(*(void *)((((v844 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v844 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          unint64_t v64 = v1933;
          unsigned int v90 = v1985;
LABEL_1465:
          unint64_t v847 = (unint64_t)&a1[v1956] & v2046;
          if (v2044 == v90)
          {
            int v848 = (*(uint64_t (**)(unint64_t))(v2054 + 48))((unint64_t)&a1[v1956] & v2046);
LABEL_1753:
            unint64_t v63 = v2070;
LABEL_1754:
            if (v848) {
              goto LABEL_1801;
            }
            unint64_t v1256 = (v2004 + v847) & v2005;
            unint64_t v1257 = (v1976 + v1256) & v2016;
            goto LABEL_1756;
          }
LABEL_1741:
          unint64_t v63 = v2070;
          unint64_t v1256 = (v2004 + v847) & v2005;
          unint64_t v1257 = (v1976 + v1256) & v2016;
          if (v1982 == v90)
          {
            if (v1980 == v1982)
            {
              int v848 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((v1976 + v1256) & v2016);
              goto LABEL_1753;
            }
            long long v1260 = (unint64_t *)((v2001 + v1257) & 0xFFFFFFFFFFFFFFF8);
            if (v1965 > 0x7FFFFFFE)
            {
              int v848 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1260 + v1990) & v1988);
              goto LABEL_1753;
            }
            unint64_t v1261 = *v1260;
          }
          else
          {
            size_t v1258 = v1257 + v2048;
            if ((v1962 & 0x80000000) == 0)
            {
              unint64_t v1259 = *(void *)(v1258 + 8);
              if (v1259 >= 0xFFFFFFFF) {
                LODWORD(v1259) = -1;
              }
              int v848 = v1259 + 1;
              goto LABEL_1754;
            }
            uint64_t v1262 = (v2013 + ((v2050 + v1258) & v2012)) & v2014;
            if (v1996 > 0x7FFFFFFD)
            {
              int v848 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v1262);
              goto LABEL_1753;
            }
            unint64_t v1261 = *(void *)(((v1978 + ((v2010 + v1262) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
          }
          if (v1261 >= 0xFFFFFFFF) {
            LODWORD(v1261) = -1;
          }
          if ((v1261 + 1) < 2)
          {
LABEL_1756:
            unint64_t v1937 = v64;
            uint64_t v1263 = *(void (**)(unint64_t, uint64_t))(v2054 + 8);
            v1263(v847, AssociatedTypeWitness);
            v1263(v1256, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v1257, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v1257) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1264 = (v2050 + v1257 + v2048) & v2012;
            size_t v1265 = *(void (**)(size_t, uint64_t))(v2015 + 8);
            v1265((v2013 + v1264) & v2014, v2017);
            size_t v1266 = (v2010 + ((v2013 + v1264) & v2014)) & v2014;
            v1265(v1266, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1267 = (v2007
                   + ((((((v1978 + v1266) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1267, 1, v2017)) {
              v1265(v1267, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1268 = (uint64_t *)((((((v2008 + v1267) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1269 = v1268[1];
            if ((v1269 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1268, v1269);
            }
            swift_bridgeObjectRelease();
            unint64_t v1270 = v1264 + v2049;
            uint64_t v1271 = *(void **)(v1270 + 16);
            LODWORD(v1272) = -1;
            if ((unint64_t)v1271 < 0xFFFFFFFF) {
              uint64_t v1272 = *(void *)(v1270 + 16);
            }
            BOOL v1273 = (int)v1272 - 1 < 0;
            uint64_t v72 = v2047;
            goto LABEL_1795;
          }
LABEL_1801:
          size_t v171 = v2006;
          uint64_t v67 = v1925;
          uint64_t v73 = AssociatedTypeWitness;
          size_t v76 = v2053;
          if (v1996) {
            goto LABEL_322;
          }
          goto LABEL_321;
        }
        uint64_t v833 = (v2013 + ((v2050 + v553) & v2012)) & v2014;
        if (v1996 > 0x7FFFFFFD)
        {
          int v91 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v833);
          goto LABEL_1451;
        }
        unint64_t v622 = *(void *)(((v1978 + ((v2010 + v833) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v622 >= 0xFFFFFFFF) {
        LODWORD(v622) = -1;
      }
      if ((v622 + 1) >= 2)
      {
        unint64_t v847 = (unint64_t)&a1[v1956] & v2046;
        goto LABEL_1741;
      }
      goto LABEL_1454;
    case 6u:
      unsigned int v92 = v1984;
      uint64_t v1925 = v67;
      if (v1979 == v1984)
      {
        int v93 = (*(uint64_t (**)(unsigned __int8 *))(v2074 + 48))(a1);
LABEL_1468:
        unsigned int v92 = v1984;
LABEL_1469:
        if (v93) {
          goto LABEL_1482;
        }
        unint64_t v456 = (unint64_t)&a1[v2003] & v2019;
        unint64_t v457 = (v456 + v2042 + v59) & v2020;
LABEL_1471:
        unint64_t v1934 = v64;
        uint64_t v849 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
        v849(a1, v2047);
        v849((unsigned __int8 *)v456, v2047);
        (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v457, v1999);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v457) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v850 = (v2050 + v2009 + v457) & v2012;
        unint64_t v851 = *(void (**)(unint64_t, uint64_t))(v2015 + 8);
        v851((v2013 + v850) & v2014, v2017);
        unint64_t v852 = (v2010 + ((v2013 + v850) & v2014)) & v2014;
        v851(v852, v2017);
        swift_bridgeObjectRelease();
        unint64_t v853 = (v2007
              + ((((((v1978 + v852) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v853, 1, v2017)) {
          v851(v853, v2017);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v854 = (uint64_t *)((((((v2008 + v853) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v855 = v854[1];
        if ((v855 & 0x3000000000000000) == 0) {
          sub_24D400DCC(*v854, v855);
        }
        swift_bridgeObjectRelease();
        unint64_t v856 = v850 + v2049;
        unint64_t v857 = *(void **)(v856 + 16);
        LODWORD(v858) = -1;
        if ((unint64_t)v857 < 0xFFFFFFFF) {
          uint64_t v858 = *(void *)(v856 + 16);
        }
        uint64_t v72 = v2047;
        uint64_t v77 = a2;
        if ((int)v858 - 1 < 0)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v856 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_24D466534(*(void *)((((v856 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v856 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        unint64_t v64 = v1934;
        unsigned int v92 = v1984;
LABEL_1482:
        unint64_t v859 = (unint64_t)&a1[v1955] & v1974;
        if (v1979 == v92)
        {
          int v860 = (*(uint64_t (**)(unint64_t))(v2074 + 48))((unint64_t)&a1[v1955] & v1974);
LABEL_1785:
          unint64_t v63 = v2070;
LABEL_1786:
          if (v860) {
            goto LABEL_1801;
          }
          unint64_t v1274 = (v2003 + v859) & v2019;
          unint64_t v1275 = (v1975 + v1274) & v2020;
          goto LABEL_1788;
        }
LABEL_1773:
        unint64_t v63 = v2070;
        unint64_t v1274 = (v2003 + v859) & v2019;
        unint64_t v1275 = (v1975 + v1274) & v2020;
        if (v1983 == v92)
        {
          if (v1981 == v1983)
          {
            int v860 = (*(uint64_t (**)(unint64_t))(v2000 + 48))((v1975 + v1274) & v2020);
            goto LABEL_1785;
          }
          v1278 = (unint64_t *)((v2002 + v1275) & 0xFFFFFFFFFFFFFFF8);
          if (v1966 > 0x7FFFFFFE)
          {
            int v860 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1278 + v1991) & v1989);
            goto LABEL_1785;
          }
          unint64_t v1279 = *v1278;
        }
        else
        {
          unint64_t v1276 = v1275 + v2009;
          if ((v1961 & 0x80000000) == 0)
          {
            unint64_t v1277 = *(void *)(v1276 + 8);
            if (v1277 >= 0xFFFFFFFF) {
              LODWORD(v1277) = -1;
            }
            int v860 = v1277 + 1;
            goto LABEL_1786;
          }
          uint64_t v1280 = (v2013 + ((v2050 + v1276) & v2012)) & v2014;
          if (v1996 > 0x7FFFFFFD)
          {
            int v860 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v1280);
            goto LABEL_1785;
          }
          unint64_t v1279 = *(void *)(((v1978 + ((v2010 + v1280) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
        }
        if (v1279 >= 0xFFFFFFFF) {
          LODWORD(v1279) = -1;
        }
        if ((v1279 + 1) >= 2) {
          goto LABEL_1801;
        }
LABEL_1788:
        unint64_t v1937 = v64;
        size_t v1281 = *(void (**)(unint64_t, uint64_t))(v2074 + 8);
        v1281(v859, v72);
        v1281(v1274, v72);
        (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v1275, v1999);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v1275) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        unint64_t v1282 = (v2050 + v1275 + v2009) & v2012;
        unint64_t v1283 = *(void (**)(unint64_t, uint64_t))(v2015 + 8);
        v1283((v2013 + v1282) & v2014, v2017);
        unint64_t v1284 = (v2010 + ((v2013 + v1282) & v2014)) & v2014;
        v1283(v1284, v2017);
        swift_bridgeObjectRelease();
        unint64_t v1285 = (v2007
               + ((((((v1978 + v1284) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1285, 1, v2017)) {
          v1283(v1285, v2017);
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v1286 = (uint64_t *)((((((v2008 + v1285) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
        unint64_t v1287 = v1286[1];
        if ((v1287 & 0x3000000000000000) == 0) {
          sub_24D400DCC(*v1286, v1287);
        }
        swift_bridgeObjectRelease();
        unint64_t v1270 = v1282 + v2049;
        uint64_t v1271 = *(void **)(v1270 + 16);
        LODWORD(v1288) = -1;
        if ((unint64_t)v1271 < 0xFFFFFFFF) {
          uint64_t v1288 = *(void *)(v1270 + 16);
        }
        BOOL v1273 = (int)v1288 - 1 < 0;
        uint64_t v72 = v2047;
LABEL_1795:
        uint64_t v77 = a2;
        if (v1273)
        {

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(void *)(v1270 + 192))
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        sub_24D466534(*(void *)((((v1270 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1270 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
        unint64_t v64 = v1937;
        unint64_t v63 = v2070;
        goto LABEL_1801;
      }
      unint64_t v456 = (unint64_t)&a1[v2003] & v2019;
      unint64_t v457 = (v456 + v2042 + v59) & v2020;
      if (v1983 == v1984)
      {
        if (v1981 == v1983)
        {
          int v93 = (*(uint64_t (**)(unint64_t))(v2000 + 48))((v456 + v2042 + v59) & v2020);
          goto LABEL_1468;
        }
        BOOL v623 = (unint64_t *)((v2002 + v457) & 0xFFFFFFFFFFFFFFF8);
        if (v1966 > 0x7FFFFFFE)
        {
          int v93 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v623 + v1991) & v1989);
          goto LABEL_1468;
        }
        unint64_t v624 = *v623;
      }
      else
      {
        unint64_t v555 = v36 + v457;
        if ((v1961 & 0x80000000) == 0)
        {
          unint64_t v556 = *(void *)(v555 + 8);
          if (v556 >= 0xFFFFFFFF) {
            LODWORD(v556) = -1;
          }
          int v93 = v556 + 1;
          goto LABEL_1469;
        }
        uint64_t v834 = (v2013 + ((v2050 + v555) & v2012)) & v2014;
        if (v1996 > 0x7FFFFFFD)
        {
          int v93 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v834);
          goto LABEL_1468;
        }
        unint64_t v624 = *(void *)(((v1978 + ((v2010 + v834) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
      }
      if (v624 >= 0xFFFFFFFF) {
        LODWORD(v624) = -1;
      }
      if ((v624 + 1) >= 2)
      {
        unint64_t v859 = (unint64_t)&a1[v1955] & v1974;
        goto LABEL_1773;
      }
      goto LABEL_1471;
    case 7u:
      uint64_t v94 = v67;
      uint64_t v1926 = &a1[v67];
      unint64_t v1930 = v64;
      int v95 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
      v95(a1, AssociatedTypeWitness);
      unint64_t v96 = (unint64_t)&a1[v2004] & v2005;
      v95((unsigned __int8 *)v96, AssociatedTypeWitness);
      unint64_t v97 = (v96 + v2043 + v2064) & v2016;
      (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v97, v1997);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v97) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      size_t v98 = (v2050 + v2048 + v97) & v2012;
      uint64_t v99 = *(void (**)(size_t, uint64_t))(v2015 + 8);
      v99((v2013 + v98) & v2014, v2017);
      size_t v100 = (v2010 + ((v2013 + v98) & v2014)) & v2014;
      v99(v100, v2017);
      swift_bridgeObjectRelease();
      unint64_t v101 = (v2007
            + ((((((v1978 + v100) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v101, 1, v2017)) {
        v99(v101, v2017);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v102 = (uint64_t *)((((((v2008 + v101) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v103 = v102[1];
      if ((v103 & 0x3000000000000000) == 0) {
        sub_24D400DCC(*v102, v103);
      }
      goto LABEL_161;
    case 8u:
      uint64_t v94 = v67;
      uint64_t v1926 = &a1[v67];
      unint64_t v1930 = v64;
      unsigned int v104 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
      v104(a1, v2047);
      unint64_t v105 = (unint64_t)&a1[v2003] & v2019;
      v104((unsigned __int8 *)v105, v2047);
      unint64_t v106 = (v105 + v2042 + v59) & v2020;
      (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v106, v1999);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v106) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      size_t v98 = (v2050 + v2009 + v106) & v2012;
      uint64_t v107 = *(void (**)(size_t, uint64_t))(v2015 + 8);
      v107((v2013 + v98) & v2014, v2017);
      size_t v108 = (v2010 + ((v2013 + v98) & v2014)) & v2014;
      v107(v108, v2017);
      swift_bridgeObjectRelease();
      unint64_t v109 = (v2007
            + ((((((v1978 + v108) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v109, 1, v2017)) {
        v107(v109, v2017);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unsigned int v110 = (uint64_t *)((((((v2008 + v109) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
      unint64_t v111 = v110[1];
      if ((v111 & 0x3000000000000000) == 0) {
        sub_24D400DCC(*v110, v111);
      }
LABEL_161:
      swift_bridgeObjectRelease();
      size_t v112 = v98 + v2049;
      uint64_t v113 = *(void **)(v112 + 16);
      LODWORD(v114) = -1;
      if ((unint64_t)v113 < 0xFFFFFFFF) {
        uint64_t v114 = *(void *)(v112 + 16);
      }
      unint64_t v68 = v1926;
      uint64_t v72 = v2047;
      uint64_t v77 = a2;
      uint64_t v73 = AssociatedTypeWitness;
      if ((int)v114 - 1 < 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(void *)(v112 + 192))
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      sub_24D466534(*(void *)((((v112 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v112 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
      unint64_t v64 = v1930;
      goto LABEL_168;
    case 9u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v115 = v2070;
        }
        else {
          uint64_t v115 = 4;
        }
        switch(v115)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0xAu:
      unsigned int v116 = a1[v2070];
      unsigned int v117 = v116 - 2;
      if (v116 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v118 = v2070;
        }
        else {
          uint64_t v118 = 4;
        }
        uint64_t v119 = v67;
        size_t v120 = v2053;
        switch(v118)
        {
          case 1:
            int v121 = *a1;
            goto LABEL_788;
          case 2:
            int v121 = *(unsigned __int16 *)a1;
            goto LABEL_788;
          case 3:
            int v121 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_788;
          case 4:
            int v121 = *(_DWORD *)a1;
LABEL_788:
            if (v2070 >= 4) {
              goto LABEL_789;
            }
            goto LABEL_794;
          default:
            goto LABEL_795;
        }
      }
      goto LABEL_389;
    case 0xBu:
      unsigned int v116 = a1[v2070];
      unsigned int v117 = v116 - 2;
      if (v116 < 2)
      {
LABEL_389:
        uint64_t v119 = v67;
        size_t v120 = v2053;
      }
      else
      {
        if (v2070 <= 3) {
          uint64_t v122 = v2070;
        }
        else {
          uint64_t v122 = 4;
        }
        uint64_t v119 = v67;
        size_t v120 = v2053;
        switch(v122)
        {
          case 1:
            int v121 = *a1;
            goto LABEL_793;
          case 2:
            int v121 = *(unsigned __int16 *)a1;
            goto LABEL_793;
          case 3:
            int v121 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_793;
          case 4:
            int v121 = *(_DWORD *)a1;
LABEL_793:
            if (v2070 >= 4) {
LABEL_789:
            }
              unsigned int v116 = v121 + 2;
            else {
LABEL_794:
            }
              unsigned int v116 = (v121 | (v117 << (8 * v2070))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_795:
      uint64_t v637 = v2074;
      if (v116 == 1)
      {
        uint64_t v638 = v2047;
      }
      else
      {
        uint64_t v637 = v2054;
        uint64_t v638 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v637 + 8))(a1, v638);
      unint64_t v63 = v2070;
      unint64_t v137 = (unsigned __int8 *)((unint64_t)&a1[v2011] & v2018);
      unsigned int v639 = v137[v2070];
      size_t v76 = v120;
      uint64_t v67 = v119;
      if (v639 > 1) {
        goto LABEL_321;
      }
      uint64_t v168 = v119;
      size_t v169 = v76;
      if (v639 == 1) {
        goto LABEL_800;
      }
      goto LABEL_833;
    case 0xCu:
      unsigned int v123 = a1[v2070];
      unsigned int v124 = v123 - 2;
      if (v123 < 2)
      {
        uint64_t v126 = v67;
        size_t v127 = v2053;
      }
      else
      {
        if (v2070 <= 3) {
          uint64_t v125 = v2070;
        }
        else {
          uint64_t v125 = 4;
        }
        uint64_t v126 = v67;
        size_t v127 = v2053;
        switch(v125)
        {
          case 1:
            int v128 = *a1;
            goto LABEL_804;
          case 2:
            int v128 = *(unsigned __int16 *)a1;
            goto LABEL_804;
          case 3:
            int v128 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_804;
          case 4:
            int v128 = *(_DWORD *)a1;
LABEL_804:
            if (v2070 < 4) {
              unsigned int v123 = (v128 | (v124 << (8 * v2070))) + 2;
            }
            else {
              unsigned int v123 = v128 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v640 = v2074;
      BOOL v641 = a1;
      if (v123 == 1)
      {
        uint64_t v642 = v2047;
      }
      else
      {
        uint64_t v640 = v2054;
        uint64_t v642 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v640 + 8))(a1, v642);
      size_t v643 = v2070 + 2;
      goto LABEL_825;
    case 0xDu:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v129 = v2070;
        }
        else {
          uint64_t v129 = 4;
        }
        switch(v129)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0xEu:
      unsigned int v130 = a1[v2070];
      unsigned int v131 = v130 - 2;
      if (v130 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v132 = v2070;
        }
        else {
          uint64_t v132 = 4;
        }
        uint64_t v126 = v67;
        size_t v127 = v2053;
        switch(v132)
        {
          case 1:
            int v133 = *a1;
            goto LABEL_814;
          case 2:
            int v133 = *(unsigned __int16 *)a1;
            goto LABEL_814;
          case 3:
            int v133 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_814;
          case 4:
            int v133 = *(_DWORD *)a1;
LABEL_814:
            if (v2070 >= 4) {
              goto LABEL_815;
            }
            goto LABEL_820;
          default:
            goto LABEL_821;
        }
      }
      goto LABEL_390;
    case 0xFu:
      unsigned int v130 = a1[v2070];
      unsigned int v131 = v130 - 2;
      if (v130 < 2)
      {
LABEL_390:
        uint64_t v126 = v67;
        size_t v127 = v2053;
      }
      else
      {
        if (v2070 <= 3) {
          uint64_t v134 = v2070;
        }
        else {
          uint64_t v134 = 4;
        }
        uint64_t v126 = v67;
        size_t v127 = v2053;
        switch(v134)
        {
          case 1:
            int v133 = *a1;
            goto LABEL_819;
          case 2:
            int v133 = *(unsigned __int16 *)a1;
            goto LABEL_819;
          case 3:
            int v133 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_819;
          case 4:
            int v133 = *(_DWORD *)a1;
LABEL_819:
            if (v2070 >= 4) {
LABEL_815:
            }
              unsigned int v130 = v133 + 2;
            else {
LABEL_820:
            }
              unsigned int v130 = (v133 | (v131 << (8 * v2070))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_821:
      uint64_t v644 = v2074;
      BOOL v641 = a1;
      if (v130 == 1)
      {
        uint64_t v645 = v2047;
      }
      else
      {
        uint64_t v644 = v2054;
        uint64_t v645 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v644 + 8))(a1, v645);
      size_t v643 = v2071;
LABEL_825:

      goto LABEL_882;
    case 0x10u:
      unint64_t v135 = *((void *)a1 + 2);
      if (v135 >> 60 == 15) {
        goto LABEL_321;
      }
      size_t v79 = v2053;
      uint64_t v80 = v67;
      sub_24D400DCC(*((void *)a1 + 1), v135);
      goto LABEL_1681;
    case 0x11u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v136 = v2070;
        }
        else {
          uint64_t v136 = 4;
        }
        switch(v136)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x13u:
      unint64_t v137 = (unsigned __int8 *)((unint64_t)&a1[v2061 + 1] & v2018);
      unsigned int v138 = v137[v2070];
      unsigned int v139 = v138 - 2;
      if (v138 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v140 = v2070;
        }
        else {
          uint64_t v140 = 4;
        }
        switch(v140)
        {
          case 1:
            int v141 = *v137;
            goto LABEL_829;
          case 2:
            int v141 = *(unsigned __int16 *)v137;
            goto LABEL_829;
          case 3:
            int v141 = *(unsigned __int16 *)v137 | (*(unsigned __int8 *)(((unint64_t)&a1[v2061 + 1] & v2018) + 2) << 16);
            goto LABEL_829;
          case 4:
            int v141 = *(_DWORD *)v137;
LABEL_829:
            if (v2070 < 4) {
              unsigned int v138 = (v141 | (v139 << (8 * v2070))) + 2;
            }
            else {
              unsigned int v138 = v141 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v168 = v67;
      size_t v169 = v2053;
      if (v138 == 1)
      {
LABEL_800:
        uint64_t v170 = v2074;
        goto LABEL_318;
      }
LABEL_833:
      (*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(v137, AssociatedTypeWitness);
      goto LABEL_320;
    case 0x14u:
    case 0x15u:
      size_t v79 = v2053;
      uint64_t v80 = v67;
      swift_release();
LABEL_1681:
      uint64_t v67 = v80;
      size_t v76 = v79;
      unint64_t v63 = v2070;
      goto LABEL_321;
    case 0x18u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v142 = v2070;
        }
        else {
          uint64_t v142 = 4;
        }
        switch(v142)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x19u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v143 = v2070;
        }
        else {
          uint64_t v143 = 4;
        }
        switch(v143)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Au:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v144 = v2070;
        }
        else {
          uint64_t v144 = 4;
        }
        switch(v144)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Bu:
      unsigned int v145 = a1[v64];
      unsigned int v146 = v145 - 2;
      if (v145 >= 2)
      {
        if (v64 <= 3) {
          uint64_t v147 = v64;
        }
        else {
          uint64_t v147 = 4;
        }
        switch(v147)
        {
          case 1:
            int v148 = *a1;
            goto LABEL_837;
          case 2:
            int v148 = *(unsigned __int16 *)a1;
            goto LABEL_837;
          case 3:
            int v148 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_837;
          case 4:
            int v148 = *(_DWORD *)a1;
LABEL_837:
            if (v64 < 4) {
              unsigned int v145 = (v148 | (v146 << (8 * v64))) + 2;
            }
            else {
              unsigned int v145 = v148 + 2;
            }
            break;
          default:
            break;
        }
      }
      if (v145 != 1)
      {
        unsigned int v650 = a1[v51];
        unsigned int v651 = v650 - 8;
        if (v650 >= 8)
        {
          if (v51 <= 3) {
            uint64_t v652 = v51;
          }
          else {
            uint64_t v652 = 4;
          }
          switch(v652)
          {
            case 1:
              int v653 = *a1;
              goto LABEL_1675;
            case 2:
              int v653 = *(unsigned __int16 *)a1;
              goto LABEL_1675;
            case 3:
              int v653 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_1675;
            case 4:
              int v653 = *(_DWORD *)a1;
LABEL_1675:
              if (v51 < 4) {
                unsigned int v650 = (v653 | (v651 << (8 * v51))) + 8;
              }
              else {
                unsigned int v650 = v653 + 8;
              }
              break;
            default:
              break;
          }
        }
        switch(v650)
        {
          case 1u:
            unint64_t v1936 = v64;
            uint64_t v1200 = v67;
            uint64_t v1201 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
            v1201(a1, AssociatedTypeWitness);
            unint64_t v1202 = (unint64_t)&a1[v1950] & v2046;
            uint64_t v1203 = v2044;
            if (v2044 == v1985)
            {
              uint64_t v1204 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2054 + 48);
              unint64_t v1205 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1206 = AssociatedTypeWitness;
LABEL_2125:
              unint64_t v1408 = (unint64_t)&a1[v1950] & v2046;
              int v1343 = v1204(v1205, v1203, v1206);
              goto LABEL_2126;
            }
            unint64_t v1300 = (v2004 + v1202) & v2005;
            unint64_t v1301 = (v1976 + v1300) & v2016;
            if (v1982 == v1985)
            {
              uint64_t v1203 = v1980;
              if (v1980 == v1982)
              {
                uint64_t v1206 = v1997;
                uint64_t v1204 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1998 + 48);
                unint64_t v1205 = (v1976 + v1300) & v2016;
                goto LABEL_2125;
              }
              unint64_t v1384 = (unint64_t *)((v2001 + v1301) & 0xFFFFFFFFFFFFFFF8);
              if (v1965 > 0x7FFFFFFE)
              {
                unint64_t v1205 = ((unint64_t)v1384 + v1990) & v1988;
                uint64_t v1206 = v1992;
                uint64_t v1204 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1993 + 48);
                uint64_t v1203 = v1952;
                goto LABEL_2125;
              }
              unint64_t v1385 = *v1384;
              if (v1385 >= 0xFFFFFFFF) {
                LODWORD(v1385) = -1;
              }
              if ((v1385 + 1) >= 2)
              {
LABEL_2140:
                size_t v1472 = (v1202 + v2056 + v2063) & v2019;
                if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v2074 + 48))(v1472, 1, v72)) {
                  (*(void (**)(size_t, uint64_t))(v2074 + 8))(v1472, v72);
                }
                size_t v1438 = (v1948 + v1472) & v2020;
                uint64_t v1439 = v1200;
                if (v1981 == v1983)
                {
                  int v1473 = (*(uint64_t (**)(size_t))(v2000 + 48))((v1948 + v1472) & v2020);
                  size_t v1441 = v2053;
                  uint64_t v77 = a2;
                }
                else
                {
                  long long v1474 = (uint64_t *)((v2002 + v1438) & 0xFFFFFFFFFFFFFFF8);
                  size_t v1441 = v2053;
                  uint64_t v77 = a2;
                  if (v1966 <= 0x7FFFFFFE)
                  {
                    uint64_t v1475 = *v1474;
                    if ((unint64_t)*v1474 >= 0xFFFFFFFF) {
                      LODWORD(v1475) = -1;
                    }
                    if ((v1475 + 1) >= 2) {
                      goto LABEL_2153;
                    }
                    goto LABEL_2152;
                  }
                  int v1473 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1995 + 48))(((unint64_t)v1474 + v1991) & v1989, v1953, v1994);
                }
                if (v1473)
                {
LABEL_2153:
                  unint64_t v1444 = v2009;
                  goto LABEL_2154;
                }
                long long v1474 = (uint64_t *)((v2002 + v1438) & 0xFFFFFFFFFFFFFFF8);
LABEL_2152:
                (*(void (**)(size_t, uint64_t))(v2000 + 8))(v1438, v1999);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v1995 + 8))(((unint64_t)v1474 + v1991) & v1989, v1994);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_2153;
              }
            }
            else
            {
              size_t v1341 = v1301 + v2048;
              if ((v1962 & 0x80000000) == 0)
              {
                unint64_t v1342 = *(void *)(v1341 + 8);
                if (v1342 >= 0xFFFFFFFF) {
                  LODWORD(v1342) = -1;
                }
                int v1343 = v1342 + 1;
                goto LABEL_2127;
              }
              unint64_t v1408 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1409 = (v2013 + ((v2050 + v1341) & v2012)) & v2014;
              if (v1996 > 0x7FFFFFFD)
              {
                int v1343 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1409, v1996, v2017);
LABEL_2126:
                unint64_t v1202 = v1408;
LABEL_2127:
                if (v1343) {
                  goto LABEL_2140;
                }
                unint64_t v1300 = (v2004 + v1202) & v2005;
                unint64_t v1301 = (v1976 + v1300) & v2016;
                goto LABEL_2129;
              }
              unint64_t v1919 = *(void *)(((v1978 + ((v2010 + v1409) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1919 >= 0xFFFFFFFF) {
                LODWORD(v1919) = -1;
              }
              if ((v1919 + 1) >= 2) {
                goto LABEL_2140;
              }
            }
LABEL_2129:
            unint64_t v1960 = v1202;
            v1201((unsigned __int8 *)v1202, AssociatedTypeWitness);
            v1201((unsigned __int8 *)v1300, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v1301, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v1301) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1463 = (v2050 + v1301 + v2048) & v2012;
            long long v1464 = *(void (**)(size_t, uint64_t))(v2015 + 8);
            v1464((v2013 + v1463) & v2014, v2017);
            size_t v1465 = (v2010 + ((v2013 + v1463) & v2014)) & v2014;
            v1464(v1465, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1466 = (v2007
                   + ((((((v1978 + v1465) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1466, 1, v2017)) {
              v1464(v1466, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            long long v1467 = (uint64_t *)((((((v2008 + v1466) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1468 = v1467[1];
            if ((v1468 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1467, v1468);
            }
            swift_bridgeObjectRelease();
            unint64_t v1469 = v2049 + v1463;
            long long v1470 = *(void **)(v1469 + 16);
            LODWORD(v1471) = -1;
            if ((unint64_t)v1470 < 0xFFFFFFFF) {
              uint64_t v1471 = *(void *)(v1469 + 16);
            }
            uint64_t v72 = v2047;
            if ((int)v1471 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1469 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v1469 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1469 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1202 = v1960;
            goto LABEL_2140;
          case 2u:
            uint64_t v94 = v67;
            (*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(a1, AssociatedTypeWitness);
            unint64_t v1207 = (unint64_t)&a1[v1977] & v2019;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2074 + 48))(v1207, 1, v2047)) {
              (*(void (**)(unint64_t, uint64_t))(v2074 + 8))(v1207, v2047);
            }
            unint64_t v1182 = v64;
            unint64_t v1183 = (v1948 + v1207) & v2020;
            if (v1981 == v1983)
            {
              int v1208 = (*(uint64_t (**)(size_t))(v2000 + 48))((v1948 + v1207) & v2020);
            }
            else
            {
              unint64_t v1302 = (uint64_t *)((v2002 + v1183) & 0xFFFFFFFFFFFFFFF8);
              if (v1966 <= 0x7FFFFFFE)
              {
                uint64_t v1303 = *v1302;
                if ((unint64_t)*v1302 >= 0xFFFFFFFF) {
                  LODWORD(v1303) = -1;
                }
                if ((v1303 + 1) >= 2)
                {
LABEL_1921:
                  unint64_t v1334 = v2009;
LABEL_1922:

                  uint64_t v73 = AssociatedTypeWitness;
                  unint64_t v64 = v1182;
LABEL_168:
                  unint64_t v63 = v2070;
                  size_t v76 = v2053;
                  uint64_t v67 = v94;
                  goto LABEL_321;
                }
LABEL_1920:
                (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v1183, v1999);
                swift_bridgeObjectRelease();
                (*(void (**)(unint64_t, uint64_t))(v1995 + 8))(((unint64_t)v1302 + v1991) & v1989, v1994);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                goto LABEL_1921;
              }
              int v1208 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1302 + v1991) & v1989);
            }
            if (v1208) {
              goto LABEL_1921;
            }
            unint64_t v1302 = (uint64_t *)((v2002 + v1183) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1920;
          case 3u:
            unint64_t v1935 = v64;
            uint64_t v1167 = v67;
            unint64_t v1209 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
            v1209(a1, AssociatedTypeWitness);
            unint64_t v1210 = (unint64_t)&a1[v1950] & v2046;
            uint64_t v1211 = v2044;
            if (v2044 == v1985)
            {
              uint64_t v1212 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2054 + 48);
              unint64_t v1213 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1214 = AssociatedTypeWitness;
LABEL_2156:
              unint64_t v1410 = (unint64_t)&a1[v1950] & v2046;
              int v1346 = v1212(v1213, v1211, v1214);
              goto LABEL_2157;
            }
            unint64_t v1304 = (v2004 + v1210) & v2005;
            unint64_t v1305 = (v1976 + v1304) & v2016;
            if (v1982 == v1985)
            {
              uint64_t v1211 = v1980;
              if (v1980 == v1982)
              {
                uint64_t v1214 = v1997;
                uint64_t v1212 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1998 + 48);
                unint64_t v1213 = (v1976 + v1304) & v2016;
                goto LABEL_2156;
              }
              uint64_t v1386 = (unint64_t *)((v2001 + v1305) & 0xFFFFFFFFFFFFFFF8);
              if (v1965 > 0x7FFFFFFE)
              {
                unint64_t v1213 = ((unint64_t)v1386 + v1990) & v1988;
                uint64_t v1214 = v1992;
                uint64_t v1212 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1993 + 48);
                uint64_t v1211 = v1952;
                goto LABEL_2156;
              }
              unint64_t v1387 = *v1386;
              if (v1387 >= 0xFFFFFFFF) {
                LODWORD(v1387) = -1;
              }
              if ((v1387 + 1) >= 2)
              {
LABEL_2171:
                swift_bridgeObjectRelease();
                goto LABEL_2172;
              }
            }
            else
            {
              size_t v1344 = v1305 + v2048;
              if ((v1962 & 0x80000000) == 0)
              {
                unint64_t v1345 = *(void *)(v1344 + 8);
                if (v1345 >= 0xFFFFFFFF) {
                  LODWORD(v1345) = -1;
                }
                int v1346 = v1345 + 1;
                goto LABEL_2158;
              }
              unint64_t v1410 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1411 = (v2013 + ((v2050 + v1344) & v2012)) & v2014;
              if (v1996 > 0x7FFFFFFD)
              {
                int v1346 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1411, v1996, v2017);
LABEL_2157:
                unint64_t v1210 = v1410;
LABEL_2158:
                if (v1346) {
                  goto LABEL_2171;
                }
                unint64_t v1304 = (v2004 + v1210) & v2005;
                unint64_t v1305 = (v1976 + v1304) & v2016;
                goto LABEL_2160;
              }
              unint64_t v1920 = *(void *)(((v1978 + ((v2010 + v1411) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1920 >= 0xFFFFFFFF) {
                LODWORD(v1920) = -1;
              }
              if ((v1920 + 1) >= 2) {
                goto LABEL_2171;
              }
            }
LABEL_2160:
            v1209((unsigned __int8 *)v1210, AssociatedTypeWitness);
            v1209((unsigned __int8 *)v1304, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v1305, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v1305) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1476 = (v2050 + v1305 + v2048) & v2012;
            long long v1477 = *(void (**)(size_t, uint64_t))(v2015 + 8);
            v1477((v2013 + v1476) & v2014, v2017);
            size_t v1478 = (v2010 + ((v2013 + v1476) & v2014)) & v2014;
            v1477(v1478, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1479 = (v2007
                   + ((((((v1978 + v1478) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1479, 1, v2017)) {
              v1477(v1479, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1480 = (uint64_t *)((((((v2008 + v1479) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1481 = v1480[1];
            if ((v1481 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1480, v1481);
            }
            swift_bridgeObjectRelease();
            unint64_t v1482 = v2049 + v1476;
            v1483 = *(void **)(v1482 + 16);
            LODWORD(v1484) = -1;
            if ((unint64_t)v1483 < 0xFFFFFFFF) {
              uint64_t v1484 = *(void *)(v1482 + 16);
            }
            uint64_t v72 = v2047;
            if ((int)v1484 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1482 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v1482 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1482 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_2171;
          case 4u:
          case 5u:
          case 7u:
            uint64_t v1165 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
            unint64_t v1164 = a1;
            uint64_t v1166 = AssociatedTypeWitness;
LABEL_1680:
            size_t v79 = v2053;
            uint64_t v80 = v67;
            v1165(v1164, v1166);
            goto LABEL_1681;
          case 6u:
            uint64_t v1191 = v67;
            (*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(a1, AssociatedTypeWitness);
            unint64_t v1215 = (unint64_t)&a1[v1944] & v1941;
            int v1216 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1946 + 48))(v1215, 1, v2029);
            uint64_t v67 = v1191;
            size_t v76 = v2053;
            unint64_t v63 = v2070;
            if (!v1216)
            {
              (*(void (**)(unint64_t, uint64_t, uint64_t))(v1946 + 8))(v1215, v2029, v1191);
LABEL_1694:
              uint64_t v67 = v1191;
              size_t v76 = v2053;
              unint64_t v63 = v2070;
            }
            goto LABEL_321;
          default:
            unint64_t v1935 = v64;
            uint64_t v1167 = v67;
            v1194 = *(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8);
            v1194(a1, AssociatedTypeWitness);
            unint64_t v1195 = (unint64_t)&a1[v1950] & v2046;
            uint64_t v1196 = v2044;
            if (v2044 == v1985)
            {
              v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2054 + 48);
              unint64_t v1198 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1199 = AssociatedTypeWitness;
LABEL_2107:
              unint64_t v1406 = (unint64_t)&a1[v1950] & v2046;
              int v1340 = v1197(v1198, v1196, v1199);
              goto LABEL_2108;
            }
            unint64_t v1298 = (v2004 + v1195) & v2005;
            unint64_t v1299 = (v1976 + v1298) & v2016;
            if (v1982 == v1985)
            {
              uint64_t v1196 = v1980;
              if (v1980 == v1982)
              {
                uint64_t v1199 = v1997;
                v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1998 + 48);
                unint64_t v1198 = (v1976 + v1298) & v2016;
                goto LABEL_2107;
              }
              long long v1382 = (unint64_t *)((v2001 + v1299) & 0xFFFFFFFFFFFFFFF8);
              if (v1965 > 0x7FFFFFFE)
              {
                unint64_t v1198 = ((unint64_t)v1382 + v1990) & v1988;
                uint64_t v1199 = v1992;
                v1197 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1993 + 48);
                uint64_t v1196 = v1952;
                goto LABEL_2107;
              }
              unint64_t v1383 = *v1382;
              if (v1383 >= 0xFFFFFFFF) {
                LODWORD(v1383) = -1;
              }
              if ((v1383 + 1) >= 2)
              {
LABEL_2122:
                unint64_t v1427 = v1195 + v2063;
                goto LABEL_2123;
              }
            }
            else
            {
              size_t v1338 = v1299 + v2048;
              if ((v1962 & 0x80000000) == 0)
              {
                unint64_t v1339 = *(void *)(v1338 + 8);
                if (v1339 >= 0xFFFFFFFF) {
                  LODWORD(v1339) = -1;
                }
                int v1340 = v1339 + 1;
                goto LABEL_2109;
              }
              unint64_t v1406 = (unint64_t)&a1[v1950] & v2046;
              uint64_t v1407 = (v2013 + ((v2050 + v1338) & v2012)) & v2014;
              if (v1996 > 0x7FFFFFFD)
              {
                int v1340 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1407, v1996, v2017);
LABEL_2108:
                unint64_t v1195 = v1406;
LABEL_2109:
                if (v1340) {
                  goto LABEL_2122;
                }
                unint64_t v1298 = (v2004 + v1195) & v2005;
                unint64_t v1299 = (v1976 + v1298) & v2016;
                goto LABEL_2111;
              }
              unint64_t v1918 = *(void *)(((v1978 + ((v2010 + v1407) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
              if (v1918 >= 0xFFFFFFFF) {
                LODWORD(v1918) = -1;
              }
              if ((v1918 + 1) >= 2) {
                goto LABEL_2122;
              }
            }
LABEL_2111:
            unint64_t v1959 = v1195;
            v1194((unsigned __int8 *)v1195, AssociatedTypeWitness);
            v1194((unsigned __int8 *)v1298, AssociatedTypeWitness);
            (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v1299, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))((v1990 + ((v2001 + v1299) & 0xFFFFFFFFFFFFFFF8)) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1454 = (v2050 + v1299 + v2048) & v2012;
            unint64_t v1455 = *(void (**)(size_t, uint64_t))(v2015 + 8);
            v1455((v2013 + v1454) & v2014, v2017);
            size_t v1456 = (v2010 + ((v2013 + v1454) & v2014)) & v2014;
            v1455(v1456, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1457 = (v2007
                   + ((((((v1978 + v1456) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1457, 1, v2017)) {
              v1455(v1457, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1458 = (uint64_t *)((((((v2008 + v1457) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1459 = v1458[1];
            if ((v1459 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1458, v1459);
            }
            swift_bridgeObjectRelease();
            unint64_t v1460 = v2049 + v1454;
            long long v1461 = *(void **)(v1460 + 16);
            LODWORD(v1462) = -1;
            if ((unint64_t)v1461 < 0xFFFFFFFF) {
              uint64_t v1462 = *(void *)(v1460 + 16);
            }
            uint64_t v72 = v2047;
            if ((int)v1462 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1460 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v1460 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1460 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1195 = v1959;
            goto LABEL_2122;
        }
      }
      unsigned int v646 = a1[v1967];
      unsigned int v647 = v646 - 8;
      if (v646 >= 8)
      {
        if (v1967 <= 3) {
          uint64_t v648 = v1967;
        }
        else {
          uint64_t v648 = 4;
        }
        switch(v648)
        {
          case 1:
            int v649 = *a1;
            goto LABEL_1655;
          case 2:
            int v649 = *(unsigned __int16 *)a1;
            goto LABEL_1655;
          case 3:
            int v649 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_1655;
          case 4:
            int v649 = *(_DWORD *)a1;
LABEL_1655:
            if (v1967 < 4) {
              unsigned int v646 = (v649 | (v647 << (8 * v1967))) + 8;
            }
            else {
              unsigned int v646 = v649 + 8;
            }
            break;
          default:
            break;
        }
      }
      switch(v646)
      {
        case 1u:
          unint64_t v1936 = v64;
          uint64_t v1174 = v67;
          size_t v1175 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
          v1175(a1, v2047);
          unint64_t v1176 = (unint64_t)&a1[v1949] & v1974;
          uint64_t v1177 = v1979;
          if (v1979 == v1984)
          {
            long long v1178 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2074 + 48);
            unint64_t v1179 = (unint64_t)&a1[v1949] & v1974;
            uint64_t v1180 = v2047;
LABEL_2060:
            unint64_t v1402 = (unint64_t)&a1[v1949] & v1974;
            int v1333 = v1178(v1179, v1177, v1180);
            goto LABEL_2061;
          }
          unint64_t v1292 = (v2003 + v1176) & v2019;
          unint64_t v1293 = (v1975 + v1292) & v2020;
          if (v1983 != v1984)
          {
            unint64_t v1331 = v1293 + v2009;
            if ((v1961 & 0x80000000) == 0)
            {
              unint64_t v1332 = *(void *)(v1331 + 8);
              if (v1332 >= 0xFFFFFFFF) {
                LODWORD(v1332) = -1;
              }
              int v1333 = v1332 + 1;
              goto LABEL_2062;
            }
            unint64_t v1402 = (unint64_t)&a1[v1949] & v1974;
            uint64_t v1403 = (v2013 + ((v2050 + v1331) & v2012)) & v2014;
            if (v1996 > 0x7FFFFFFD)
            {
              int v1333 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1403, v1996, v2017);
LABEL_2061:
              unint64_t v1176 = v1402;
LABEL_2062:
              if (v1333) {
                goto LABEL_2075;
              }
              unint64_t v1292 = (v2003 + v1176) & v2019;
              unint64_t v1293 = (v1975 + v1292) & v2020;
              goto LABEL_2064;
            }
            unint64_t v1916 = *(void *)(((v1978 + ((v2010 + v1403) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v1916 >= 0xFFFFFFFF) {
              LODWORD(v1916) = -1;
            }
            if ((v1916 + 1) >= 2) {
              goto LABEL_2075;
            }
LABEL_2064:
            unint64_t v1958 = v1176;
            v1175((unsigned __int8 *)v1176, v2047);
            v1175((unsigned __int8 *)v1292, v2047);
            (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v1293, v1999);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v1293) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1428 = (v2050 + v1293 + v2009) & v2012;
            uint64_t v1429 = *(void (**)(unint64_t, uint64_t))(v2015 + 8);
            v1429((v2013 + v1428) & v2014, v2017);
            unint64_t v1430 = (v2010 + ((v2013 + v1428) & v2014)) & v2014;
            v1429(v1430, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1431 = (v2007
                   + ((((((v1978 + v1430) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1431, 1, v2017)) {
              v1429(v1431, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            size_t v1432 = (uint64_t *)((((((v2008 + v1431) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1433 = v1432[1];
            if ((v1433 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1432, v1433);
            }
            swift_bridgeObjectRelease();
            unint64_t v1434 = v1428 + v2049;
            unint64_t v1435 = *(void **)(v1434 + 16);
            LODWORD(v1436) = -1;
            if ((unint64_t)v1435 < 0xFFFFFFFF) {
              uint64_t v1436 = *(void *)(v1434 + 16);
            }
            uint64_t v72 = v2047;
            if ((int)v1436 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1434 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v1434 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1434 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            unint64_t v1176 = v1958;
            goto LABEL_2075;
          }
          uint64_t v1177 = v1981;
          if (v1981 == v1983)
          {
            uint64_t v1180 = v1999;
            long long v1178 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2000 + 48);
            unint64_t v1179 = (v1975 + v1292) & v2020;
            goto LABEL_2060;
          }
          unint64_t v1378 = (unint64_t *)((v2002 + v1293) & 0xFFFFFFFFFFFFFFF8);
          if (v1966 > 0x7FFFFFFE)
          {
            unint64_t v1179 = ((unint64_t)v1378 + v1991) & v1989;
            uint64_t v1180 = v1994;
            long long v1178 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1995 + 48);
            uint64_t v1177 = v1953;
            goto LABEL_2060;
          }
          unint64_t v1379 = *v1378;
          if (v1379 >= 0xFFFFFFFF) {
            LODWORD(v1379) = -1;
          }
          if ((v1379 + 1) < 2) {
            goto LABEL_2064;
          }
LABEL_2075:
          size_t v1437 = (v1176 + v2055 + v66) & v2005;
          if (!(*(unsigned int (**)(size_t, uint64_t, uint64_t))(v2054 + 48))(v1437, 1, AssociatedTypeWitness))(*(void (**)(size_t, uint64_t))(v2054 + 8))(v1437, AssociatedTypeWitness); {
          size_t v1438 = (v1947 + v1437) & v2016;
          }
          uint64_t v1439 = v1174;
          if (v1980 == v1982)
          {
            int v1440 = (*(uint64_t (**)(size_t))(v1998 + 48))((v1947 + v1437) & v2016);
            size_t v1441 = v2053;
            uint64_t v77 = a2;
          }
          else
          {
            unint64_t v1442 = (uint64_t *)((v2001 + v1438) & 0xFFFFFFFFFFFFFFF8);
            size_t v1441 = v2053;
            uint64_t v77 = a2;
            if (v1965 <= 0x7FFFFFFE)
            {
              uint64_t v1443 = *v1442;
              if ((unint64_t)*v1442 >= 0xFFFFFFFF) {
                LODWORD(v1443) = -1;
              }
              if ((v1443 + 1) >= 2) {
                goto LABEL_2088;
              }
              goto LABEL_2087;
            }
            int v1440 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1993 + 48))(((unint64_t)v1442 + v1990) & v1988, v1952, v1992);
          }
          if (!v1440)
          {
            unint64_t v1442 = (uint64_t *)((v2001 + v1438) & 0xFFFFFFFFFFFFFFF8);
LABEL_2087:
            (*(void (**)(size_t, uint64_t))(v1998 + 8))(v1438, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))(((unint64_t)v1442 + v1990) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_2088:
          unint64_t v1444 = v2048;
LABEL_2154:

          uint64_t v73 = AssociatedTypeWitness;
          unint64_t v64 = v1936;
          unint64_t v63 = v2070;
          size_t v76 = v1441;
          uint64_t v67 = v1439;
LABEL_321:
          size_t v171 = v76;
LABEL_322:
          uint64_t v172 = v2057 + 16;
          unint64_t v173 = ((v2039
                 + ((v2057
                   + 16
                   + ((((v2022
                       + 327
                       + ((((((((((v2021 + 7 + v171) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                           + 19) & 0xFFFFFFFFFFFFFFF8)
                         + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                     + 15) & 0xFFFFFFFFFFFFFFF8)) & v2046)) & 0xFFFFFFFFFFFFFFF8)
               + 8;
          if (v173 <= v2058) {
            unint64_t v173 = v2058;
          }
          if (v2031 > v173) {
            unint64_t v173 = v2031;
          }
          if (v2063 > v173) {
            unint64_t v173 = v2063;
          }
          if (v66 > v173) {
            unint64_t v173 = v66;
          }
          if (v2071 > v173) {
            unint64_t v173 = v2071;
          }
          if (v2030 > v173) {
            unint64_t v173 = v2060 + 2;
          }
          if (v2033 > v173) {
            unint64_t v173 = ((v2070 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
          }
          if (v2041 > v173) {
            unint64_t v173 = v2070 + 2;
          }
          if (v2034 > v173) {
            unint64_t v173 = (v2070 & 0xFFFFFFFFFFFFFFF8) + 16;
          }
          if (v173 <= v2071) {
            unint64_t v173 = v2071;
          }
          if (v173 <= v2059) {
            unint64_t v173 = v2059;
          }
          if (v173 <= v2036) {
            unint64_t v173 = ((v2061 + 1) & ~v2061) + v2071;
          }
          if (v173 <= v2071) {
            unint64_t v173 = v2071;
          }
          if (v173 <= v2032) {
            unint64_t v173 = v2032;
          }
          if (v173 <= v2041) {
            unint64_t v173 = v2070 + 2;
          }
          if (v173 <= v2071) {
            unint64_t v173 = v2071;
          }
          if (v173 <= v2060) {
            unint64_t v173 = v2060;
          }
          if (v173 <= v2071) {
            unint64_t v173 = v2071;
          }
          if (v173 <= v2038) {
            unint64_t v173 = v2038;
          }
          if (v173 <= v2041) {
            unint64_t v173 = v2070 + 2;
          }
          if (v173 <= v2071) {
            unint64_t v173 = v2071;
          }
          if (v173 <= 0x38) {
            unint64_t v173 = 56;
          }
          if (v173 > 3) {
            goto LABEL_367;
          }
          unsigned int v175 = ((1 << (8 * v173)) + 5) >> (8 * v173);
          if (v175 > 0xFFD6)
          {
            unsigned int v174 = *(_DWORD *)&v77[v173];
            goto LABEL_372;
          }
          if (v175 <= 0xD6) {
LABEL_367:
          }
            unsigned int v174 = v77[v173];
          else {
            unsigned int v174 = *(unsigned __int16 *)&v77[v173];
          }
LABEL_372:
          unsigned int v176 = v174 - 41;
          if (v174 >= 0x29)
          {
            if (v67 <= 3) {
              uint64_t v177 = v67;
            }
            else {
              uint64_t v177 = 4;
            }
            switch(v177)
            {
              case 1:
                int v178 = *v77;
                if (v67 < 4) {
                  goto LABEL_384;
                }
                goto LABEL_385;
              case 2:
                int v178 = *(unsigned __int16 *)v77;
                if (v67 >= 4) {
                  goto LABEL_385;
                }
                goto LABEL_384;
              case 3:
                int v178 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                if (v67 >= 4) {
                  goto LABEL_385;
                }
                goto LABEL_384;
              case 4:
                int v178 = *(_DWORD *)v77;
                if (v67 < 4) {
LABEL_384:
                }
                  v178 |= v176 << (8 * v67);
LABEL_385:
                unsigned int v174 = v178 + 41;
                break;
              default:
                break;
            }
          }
          switch(v174)
          {
            case 0u:
              unsigned int v179 = v67;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2074 + 32))((unint64_t)&a1[v1977] & v2019, (unint64_t)&v77[v1977] & v2019, v72);
              if (v179 > 3) {
                goto LABEL_388;
              }
              unsigned int v460 = ((1 << (8 * v179)) + 5) >> (8 * v179);
              if (v460 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 0;
              }
              else if (v460 <= 0xD6)
              {
LABEL_388:
                *unint64_t v68 = 0;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 0;
              }
              return a1;
            case 1u:
              unsigned int v182 = v77[v63];
              unsigned int v183 = v182 - 2;
              if (v182 < 2)
              {
                unsigned int v186 = v67;
                uint64_t v185 = v2074;
                uint64_t v187 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v184 = v63;
                }
                else {
                  uint64_t v184 = 4;
                }
                uint64_t v185 = v2074;
                unsigned int v186 = v67;
                uint64_t v187 = v2054;
                switch(v184)
                {
                  case 1:
                    int v188 = *v77;
                    goto LABEL_886;
                  case 2:
                    int v188 = *(unsigned __int16 *)v77;
                    goto LABEL_886;
                  case 3:
                    int v188 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_886;
                  case 4:
                    int v188 = *(_DWORD *)v77;
LABEL_886:
                    if (v63 < 4) {
                      unsigned int v182 = (v188 | (v183 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v182 = v188 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v659 = v182 == 1;
              if (v182 == 1) {
                uint64_t v660 = v185;
              }
              else {
                uint64_t v660 = v187;
              }
              if (v182 == 1) {
                uint64_t v661 = v72;
              }
              else {
                uint64_t v661 = v73;
              }
              unint64_t v662 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v660 + 32))(a1, v77, v661);
              a1[v662] = v659;
              if (v186 > 3) {
                goto LABEL_896;
              }
              int v572 = 1;
              unsigned int v663 = ((1 << (8 * v186)) + 5) >> (8 * v186);
              if (v663 > 0xFFD6) {
                goto LABEL_2275;
              }
              if (v663 <= 0xD6) {
LABEL_896:
              }
                *unint64_t v68 = 1;
              else {
                *(_WORD *)unint64_t v68 = 1;
              }
              return a1;
            case 2u:
              unsigned int v189 = v77[v63];
              unsigned int v190 = v189 - 2;
              if (v189 < 2)
              {
                unsigned int v193 = v67;
                uint64_t v192 = v2074;
                uint64_t v194 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v191 = v63;
                }
                else {
                  uint64_t v191 = 4;
                }
                uint64_t v192 = v2074;
                unsigned int v193 = v67;
                uint64_t v194 = v2054;
                switch(v191)
                {
                  case 1:
                    int v195 = *v77;
                    goto LABEL_903;
                  case 2:
                    int v195 = *(unsigned __int16 *)v77;
                    goto LABEL_903;
                  case 3:
                    int v195 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_903;
                  case 4:
                    int v195 = *(_DWORD *)v77;
LABEL_903:
                    if (v63 < 4) {
                      unsigned int v189 = (v195 | (v190 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v189 = v195 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v664 = v189 == 1;
              if (v189 == 1) {
                uint64_t v665 = v192;
              }
              else {
                uint64_t v665 = v194;
              }
              if (v189 == 1) {
                uint64_t v666 = v72;
              }
              else {
                uint64_t v666 = v73;
              }
              unint64_t v667 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v665 + 32))(a1, v77, v666);
              a1[v667] = v664;
              if (v193 > 3) {
                goto LABEL_913;
              }
              unsigned int v668 = ((1 << (8 * v193)) + 5) >> (8 * v193);
              if (v668 > 0xFFD6)
              {
                int v572 = 2;
                goto LABEL_2275;
              }
              if (v668 <= 0xD6) {
LABEL_913:
              }
                *unint64_t v68 = 2;
              else {
                *(_WORD *)unint64_t v68 = 2;
              }
              return a1;
            case 3u:
              unsigned int v196 = v77[v63];
              unsigned int v197 = v196 - 2;
              if (v196 < 2)
              {
                unsigned int v200 = v67;
                uint64_t v199 = v2074;
                uint64_t v201 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v198 = v63;
                }
                else {
                  uint64_t v198 = 4;
                }
                uint64_t v199 = v2074;
                unsigned int v200 = v67;
                uint64_t v201 = v2054;
                switch(v198)
                {
                  case 1:
                    int v202 = *v77;
                    goto LABEL_921;
                  case 2:
                    int v202 = *(unsigned __int16 *)v77;
                    goto LABEL_921;
                  case 3:
                    int v202 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_921;
                  case 4:
                    int v202 = *(_DWORD *)v77;
LABEL_921:
                    if (v63 < 4) {
                      unsigned int v196 = (v202 | (v197 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v196 = v202 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v669 = v196 == 1;
              if (v196 == 1) {
                uint64_t v670 = v199;
              }
              else {
                uint64_t v670 = v201;
              }
              if (v196 == 1) {
                uint64_t v671 = v72;
              }
              else {
                uint64_t v671 = v73;
              }
              unint64_t v672 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v670 + 32))(a1, v77, v671);
              a1[v672] = v669;
              if (v200 > 3) {
                goto LABEL_931;
              }
              unsigned int v673 = ((1 << (8 * v200)) + 5) >> (8 * v200);
              if (v673 > 0xFFD6)
              {
                int v572 = 3;
                goto LABEL_2275;
              }
              if (v673 <= 0xD6) {
LABEL_931:
              }
                *unint64_t v68 = 3;
              else {
                *(_WORD *)unint64_t v68 = 3;
              }
              return a1;
            case 4u:
              unsigned int v203 = v77[v63];
              unsigned int v204 = v203 - 2;
              if (v203 < 2)
              {
                uint64_t v206 = v2074;
                uint64_t v207 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v205 = v63;
                }
                else {
                  uint64_t v205 = 4;
                }
                uint64_t v206 = v2074;
                uint64_t v207 = v2054;
                switch(v205)
                {
                  case 1:
                    int v208 = *v77;
                    goto LABEL_939;
                  case 2:
                    int v208 = *(unsigned __int16 *)v77;
                    goto LABEL_939;
                  case 3:
                    int v208 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_939;
                  case 4:
                    int v208 = *(_DWORD *)v77;
LABEL_939:
                    if (v63 < 4) {
                      unsigned int v203 = (v208 | (v204 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v203 = v208 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v674 = v67;
              BOOL v675 = v203 == 1;
              if (v203 == 1) {
                uint64_t v676 = v206;
              }
              else {
                uint64_t v676 = v207;
              }
              if (v203 == 1) {
                uint64_t v677 = v72;
              }
              else {
                uint64_t v677 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v676 + 32))(a1, v77, v677);
              a1[v2070] = v675;
              unint64_t v678 = (unint64_t)&a1[v2011] & v2018;
              unsigned int v679 = (unsigned __int8 *)((unint64_t)&v77[v2011] & v2018);
              unsigned int v680 = v679[v2070];
              unsigned int v681 = v680 - 2;
              if (v680 >= 2)
              {
                if (v2070 <= 3) {
                  uint64_t v682 = v2070;
                }
                else {
                  uint64_t v682 = 4;
                }
                switch(v682)
                {
                  case 1:
                    int v683 = *v679;
                    goto LABEL_1415;
                  case 2:
                    int v683 = *(unsigned __int16 *)v679;
                    goto LABEL_1415;
                  case 3:
                    int v683 = *(unsigned __int16 *)v679 | (*(unsigned __int8 *)(((unint64_t)&v77[v2011] & v2018) + 2) << 16);
                    goto LABEL_1415;
                  case 4:
                    int v683 = *(_DWORD *)v679;
LABEL_1415:
                    if (v2070 < 4) {
                      unsigned int v680 = (v683 | (v681 << (8 * v2070))) + 2;
                    }
                    else {
                      unsigned int v680 = v683 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v827 = v680 == 1;
              if (v680 == 1) {
                uint64_t v828 = v206;
              }
              else {
                uint64_t v828 = v207;
              }
              (*(void (**)(unint64_t))(v828 + 32))(v678);
              *(unsigned char *)(v678 + v2070) = v827;
              if (v674 > 3) {
                goto LABEL_1422;
              }
              unsigned int v829 = ((1 << (8 * v674)) + 5) >> (8 * v674);
              if (v829 > 0xFFD6)
              {
                int v572 = 4;
                goto LABEL_2275;
              }
              if (v829 <= 0xD6) {
LABEL_1422:
              }
                *unint64_t v68 = 4;
              else {
                *(_WORD *)unint64_t v68 = 4;
              }
              return a1;
            case 5u:
              uint64_t v2023 = v2022 + 327;
              if (v2044 == v1985)
              {
                size_t v209 = v76;
                uint64_t v210 = v2054;
                int v211 = (*(uint64_t (**)(unsigned __int8 *))(v2054 + 48))(v77);
                uint64_t v212 = v1996;
                uint64_t v213 = v2015;
                uint64_t v214 = v2014;
LABEL_1485:
                if (v211)
                {
LABEL_1486:
                  memcpy(a1, v77, v2063);
                  uint64_t v861 = v1980;
                  uint64_t v862 = v2044;
                  unsigned int v863 = v1985;
                  uint64_t v864 = v2023;
LABEL_1487:
                  size_t v865 = v209;
                  goto LABEL_1493;
                }
                unint64_t v461 = (unint64_t)&v77[v2004] & v2005;
                unint64_t v462 = (v461 + v2043 + v2064) & v2016;
LABEL_1489:
                unint64_t v866 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v210 + 32);
                v866(a1, v77, AssociatedTypeWitness);
                unint64_t v867 = (unint64_t)&a1[v2004] & v2005;
                v866((unsigned __int8 *)v867, (unsigned __int8 *)v461, AssociatedTypeWitness);
                unint64_t v868 = (v867 + v2043 + v2064) & v2016;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v868, v462, v1997);
                unint64_t v869 = (void *)((v2001 + v868) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v870 = (void *)((v2001 + v462) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v869 = *v870;
                unint64_t v871 = ((unint64_t)v869 + v1990) & v1988;
                unint64_t v872 = ((unint64_t)v870 + v1990) & v1988;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v871, v872, v1992);
                unint64_t v873 = (void *)((v1986 + v871) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v874 = (void *)((v1986 + v872) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v873 = *v874;
                *(_OWORD *)(((unint64_t)v873 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v874
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v2048 + v868) = *(_OWORD *)(v2048 + v462);
                size_t v875 = (v2050 + v2048 + v868) & v2012;
                size_t v876 = (v2050 + v2048 + v462) & v2012;
                *(unsigned char *)size_t v875 = *(unsigned char *)v876;
                uint64_t v877 = v875 | 4;
                int v878 = *(_DWORD *)(v876 | 4);
                *(unsigned char *)(v877 + 4) = *(unsigned char *)((v876 | 4) + 4);
                *(_DWORD *)uint64_t v877 = v878;
                *(_WORD *)(v875 + 10) = *(_WORD *)(v876 + 0xA);
                size_t v2075 = v875;
                size_t v879 = (v2013 + v875) & v214;
                uint64_t v880 = *(void (**)(size_t, size_t, uint64_t))(v2015 + 32);
                v880(v879, (v2013 + v876) & v214, v2017);
                size_t v881 = (v2010 + v879) & v214;
                size_t v882 = (v2010 + ((v2013 + v876) & v214)) & v214;
                v880(v881, v882, v2017);
                uint64_t v883 = (unsigned char *)(v881 + v2006);
                *uint64_t v883 = *(unsigned char *)(v882 + v2006);
                v883[1] = *(unsigned char *)(v882 + v2006 + 1);
                v883[2] = *(unsigned char *)(v882 + v2006 + 2);
                v883[3] = *(unsigned char *)(v882 + v2006 + 3);
                v883[4] = *(unsigned char *)(v882 + v2006 + 4);
                unint64_t v884 = (v881 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v885 = (v882 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v884 = *(_OWORD *)v885;
                *(unsigned char *)(v884 + 16) = *(unsigned char *)(v885 + 16);
                *(unsigned char *)(v884 + 17) = *(unsigned char *)(v885 + 17);
                *(unsigned char *)(v884 + 18) = *(unsigned char *)(v885 + 18);
                *(unsigned char *)(v884 + 19) = *(unsigned char *)(v885 + 19);
                unint64_t v886 = (v884 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v887 = (v885 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v886 = *(void *)v887;
                *(unsigned char *)(v886 + 8) = *(unsigned char *)(v887 + 8);
                *(unsigned char *)(v886 + 9) = *(unsigned char *)(v887 + 9);
                *(unsigned char *)(v886 + 10) = *(unsigned char *)(v887 + 10);
                *(unsigned char *)(v886 + 11) = *(unsigned char *)(v887 + 11);
                *(unsigned char *)(v886 + 12) = *(unsigned char *)(v887 + 12);
                unint64_t v888 = (void *)((v885 + 47) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v889 = (void *)((v884 + 47) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v889 = *v888;
                unint64_t v890 = ((unint64_t)v889 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v891 = ((unint64_t)v888 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v890 = *(void *)v891;
                *(unsigned char *)(v890 + 8) = *(unsigned char *)(v891 + 8);
                *(unsigned char *)(v890 + 9) = *(unsigned char *)(v891 + 9);
                long long v892 = (void *)((v2007 + v890) & v214);
                long long v893 = (const void *)((v2007 + v891) & v214);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v893, 1, v2017))
                {
                  size_t v209 = v2053;
                  memcpy(v892, v893, v2053);
                }
                else
                {
                  v880((size_t)v892, (size_t)v893, v2017);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v892, 0, 1, v2017);
                  size_t v209 = v2053;
                }
                long long v894 = (void *)(((unint64_t)v893 + v2008) & 0xFFFFFFFFFFFFFFF8);
                long long v895 = (void *)(((unint64_t)v892 + v2008) & 0xFFFFFFFFFFFFFFF8);
                *long long v895 = *v894;
                unint64_t v896 = ((unint64_t)v895 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v897 = ((unint64_t)v894 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v898 = *(void *)v897;
                *(unsigned char *)(v896 + 8) = *(unsigned char *)(v897 + 8);
                *(void *)unint64_t v896 = v898;
                long long v899 = (void *)(((unint64_t)v895 + 31) & 0xFFFFFFFFFFFFFFF8);
                long long v900 = (void *)(((unint64_t)v894 + 31) & 0xFFFFFFFFFFFFFFF8);
                *long long v899 = *v900;
                long long v901 = (_OWORD *)(((unint64_t)v899 + 15) & 0xFFFFFFFFFFFFFFF8);
                long long v902 = (_OWORD *)(((unint64_t)v900 + 15) & 0xFFFFFFFFFFFFFFF8);
                *long long v901 = *v902;
                unint64_t v903 = ((unint64_t)v901 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v904 = ((unint64_t)v902 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v905 = *(void *)v904;
                *(unsigned char *)(v903 + 8) = *(unsigned char *)(v904 + 8);
                *(void *)unint64_t v903 = v905;
                *(unsigned char *)(v903 + 9) = *(unsigned char *)(v904 + 9);
                unint64_t v906 = (v903 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v907 = (v904 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v898) = *(_DWORD *)v907;
                *(unsigned char *)(v906 + 4) = *(unsigned char *)(v907 + 4);
                *(_DWORD *)unint64_t v906 = v898;
                *(_OWORD *)((v903 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v904 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v908 = v2049 + v2075;
                long long v909 = *(_OWORD *)(v2049 + v876 + 112);
                long long v911 = *(_OWORD *)(v2049 + v876 + 64);
                long long v910 = *(_OWORD *)(v2049 + v876 + 80);
                *(_OWORD *)(v908 + 96) = *(_OWORD *)(v2049 + v876 + 96);
                *(_OWORD *)(v908 + 112) = v909;
                *(_OWORD *)(v908 + 64) = v911;
                *(_OWORD *)(v908 + 80) = v910;
                long long v912 = *(_OWORD *)(v2049 + v876 + 176);
                long long v914 = *(_OWORD *)(v2049 + v876 + 128);
                long long v913 = *(_OWORD *)(v2049 + v876 + 144);
                *(_OWORD *)(v908 + 160) = *(_OWORD *)(v2049 + v876 + 160);
                *(_OWORD *)(v908 + 176) = v912;
                *(_OWORD *)(v908 + 128) = v914;
                *(_OWORD *)(v908 + 144) = v913;
                long long v916 = *(_OWORD *)(v2049 + v876 + 208);
                long long v915 = *(_OWORD *)(v2049 + v876 + 224);
                long long v917 = *(_OWORD *)(v2049 + v876 + 192);
                *(void *)(v908 + 240) = *(void *)(v2049 + v876 + 240);
                *(_OWORD *)(v908 + 208) = v916;
                *(_OWORD *)(v908 + 224) = v915;
                *(_OWORD *)(v908 + 192) = v917;
                long long v918 = *(_OWORD *)(v2049 + v876);
                long long v919 = *(_OWORD *)(v2049 + v876 + 16);
                long long v920 = *(_OWORD *)(v2049 + v876 + 48);
                *(_OWORD *)(v908 + 32) = *(_OWORD *)(v2049 + v876 + 32);
                *(_OWORD *)(v908 + 48) = v920;
                *(_OWORD *)unint64_t v908 = v918;
                *(_OWORD *)(v908 + 16) = v919;
                v921 = (_OWORD *)((v2049 + v2075 + 255) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v922 = (long long *)((v2049 + v876 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v923 = *v922;
                *(_OWORD *)((char *)v921 + 9) = *(long long *)((char *)v922 + 9);
                _OWORD *v921 = v923;
                unint64_t v924 = (v2049 + v2075 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v925 = (v2049 + v876 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v926 = *(_OWORD *)v925;
                *(unsigned char *)(v924 + 16) = *(unsigned char *)(v925 + 16);
                *(_OWORD *)unint64_t v924 = v926;
                unint64_t v927 = (void *)((v2049 + v2075 + 311) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v928 = (void *)((v2049 + v876 + 311) & 0xFFFFFFFFFFFFFFF8);
                void *v927 = *v928;
                *(_OWORD *)(((unint64_t)v927 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v928
                                                                                               + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v865 = v2006;
                uint64_t v214 = v2014;
                uint64_t v77 = a2;
                uint64_t v210 = v2054;
                uint64_t v861 = v1980;
                uint64_t v862 = v2044;
                unsigned int v863 = v1985;
                uint64_t v864 = v2023;
                uint64_t v213 = v2015;
                uint64_t v212 = v1996;
                if (!v1996) {
                  goto LABEL_1487;
                }
LABEL_1493:
                unint64_t v929 = v2021 + 7;
                unint64_t v930 = ((((v864
                         + ((((((((((v2021 + 7 + v865) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                             + 19) & 0xFFFFFFFFFFFFFFF8)
                           + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                       + 15) & 0xFFFFFFFFFFFFFFF8)
                     + 16;
                v2076 = (void *)((unint64_t)&a1[v2057 + v930] & v2046);
                unint64_t v931 = (const void *)((unint64_t)&v77[v2057 + v930] & v2046);
                if (v862 == v863)
                {
                  int v932 = (*(uint64_t (**)(const void *, uint64_t, uint64_t))(v210 + 48))(v931, v862, AssociatedTypeWitness);
                  goto LABEL_1495;
                }
                unint64_t v937 = ((unint64_t)v931 + v2004) & v2005;
                unint64_t v938 = (v1976 + v937) & v2016;
                if (v1982 == v863)
                {
                  if (v861 == v1982)
                  {
                    int v932 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1998 + 48))((v1976 + v937) & v2016, v861, v1997);
                    goto LABEL_1495;
                  }
                  uint64_t v1012 = (unint64_t *)((v2001 + v938) & 0xFFFFFFFFFFFFFFF8);
                  if (v1965 <= 0x7FFFFFFE)
                  {
                    unint64_t v1013 = *v1012;
                    goto LABEL_1819;
                  }
                  int v932 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1993 + 48))(((unint64_t)v1012 + v1990) & v1988, v1952, v1992);
                }
                else
                {
                  size_t v939 = v938 + v2048;
                  if ((v1962 & 0x80000000) == 0)
                  {
                    unint64_t v940 = *(void *)(v939 + 8);
                    if (v940 >= 0xFFFFFFFF) {
                      LODWORD(v940) = -1;
                    }
                    if (v940 != -1) {
                      goto LABEL_1496;
                    }
LABEL_1505:
                    unint64_t v937 = ((unint64_t)v931 + v2004) & v2005;
                    unint64_t v938 = (v1976 + v937) & v2016;
                    goto LABEL_1506;
                  }
                  uint64_t v1014 = (v2013 + ((v2050 + v939) & v2012)) & v214;
                  if (v212 <= 0x7FFFFFFD)
                  {
                    unint64_t v1013 = *(void *)(((v1978 + ((v2010 + v1014) & v214)) & 0xFFFFFFFFFFFFFFF8) + 8);
LABEL_1819:
                    if (v1013 >= 0xFFFFFFFF) {
                      LODWORD(v1013) = -1;
                    }
                    if ((v1013 + 1) >= 2) {
                      goto LABEL_1496;
                    }
LABEL_1506:
                    uint64_t v941 = v213;
                    unint64_t v942 = *(void (**)(void *, const void *, uint64_t))(v210 + 32);
                    uint64_t v2065 = v931;
                    v942(v2076, v931, AssociatedTypeWitness);
                    uint64_t v943 = v941;
                    unint64_t v944 = ((unint64_t)v2076 + v2004) & v2005;
                    v942((void *)v944, (const void *)v937, AssociatedTypeWitness);
                    unint64_t v945 = (v1976 + v944) & v2016;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v945, v938, v1997);
                    size_t v946 = (void *)((v2001 + v945) & 0xFFFFFFFFFFFFFFF8);
                    size_t v947 = (void *)((v2001 + v938) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v946 = *v947;
                    unint64_t v948 = ((unint64_t)v946 + v1990) & v1988;
                    uint64_t v949 = v214;
                    unint64_t v950 = ((unint64_t)v947 + v1990) & v1988;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v948, v950, v1992);
                    size_t v951 = (void *)((v1986 + v948) & 0xFFFFFFFFFFFFFFF8);
                    size_t v952 = (void *)((v1986 + v950) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v951 = *v952;
                    *(_OWORD *)(((unint64_t)v951 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v952 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v945 + v2048) = *(_OWORD *)(v938 + v2048);
                    size_t v953 = (v2050 + v945 + v2048) & v2012;
                    size_t v954 = (v2050 + v938 + v2048) & v2012;
                    *(unsigned char *)size_t v953 = *(unsigned char *)v954;
                    uint64_t v955 = v953 | 4;
                    int v956 = *(_DWORD *)(v954 | 4);
                    *(unsigned char *)(v955 + 4) = *(unsigned char *)((v954 | 4) + 4);
                    *(_DWORD *)uint64_t v955 = v956;
                    *(_WORD *)(v953 + 10) = *(_WORD *)(v954 + 0xA);
                    unint64_t v957 = *(void (**)(size_t, size_t, uint64_t))(v943 + 32);
                    v957((v2013 + v953) & v949, (v2013 + v954) & v949, v2017);
                    size_t v958 = (v2010 + ((v2013 + v953) & v949)) & v949;
                    size_t v959 = (v2010 + ((v2013 + v954) & v949)) & v949;
                    v957(v958, v959, v2017);
                    unint64_t v960 = (unsigned char *)(v958 + v2006);
                    *unint64_t v960 = *(unsigned char *)(v959 + v2006);
                    v960[1] = *(unsigned char *)(v959 + v2006 + 1);
                    v960[2] = *(unsigned char *)(v959 + v2006 + 2);
                    v960[3] = *(unsigned char *)(v959 + v2006 + 3);
                    v960[4] = *(unsigned char *)(v959 + v2006 + 4);
                    unint64_t v961 = (v958 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v962 = (v959 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v961 = *(_OWORD *)v962;
                    *(unsigned char *)(v961 + 16) = *(unsigned char *)(v962 + 16);
                    *(unsigned char *)(v961 + 17) = *(unsigned char *)(v962 + 17);
                    *(unsigned char *)(v961 + 18) = *(unsigned char *)(v962 + 18);
                    *(unsigned char *)(v961 + 19) = *(unsigned char *)(v962 + 19);
                    unint64_t v963 = (v961 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v964 = (v962 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v963 = *(void *)v964;
                    *(unsigned char *)(v963 + 8) = *(unsigned char *)(v964 + 8);
                    *(unsigned char *)(v963 + 9) = *(unsigned char *)(v964 + 9);
                    *(unsigned char *)(v963 + 10) = *(unsigned char *)(v964 + 10);
                    *(unsigned char *)(v963 + 11) = *(unsigned char *)(v964 + 11);
                    *(unsigned char *)(v963 + 12) = *(unsigned char *)(v964 + 12);
                    size_t v965 = (void *)((v962 + 47) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v966 = (void *)((v961 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v966 = *v965;
                    unint64_t v967 = ((unint64_t)v966 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v968 = ((unint64_t)v965 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v967 = *(void *)v968;
                    *(unsigned char *)(v967 + 8) = *(unsigned char *)(v968 + 8);
                    *(unsigned char *)(v967 + 9) = *(unsigned char *)(v968 + 9);
                    unint64_t v969 = (void *)((v2007 + v967) & v949);
                    unint64_t v970 = (const void *)((v2007 + v968) & v949);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v943 + 48))(v970, 1, v2017))
                    {
                      memcpy(v969, v970, v2053);
                    }
                    else
                    {
                      v957((size_t)v969, (size_t)v970, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v943 + 56))(v969, 0, 1, v2017);
                    }
                    unint64_t v929 = v2021 + 7;
                    unint64_t v971 = (void *)(((unint64_t)v969 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    v972 = (void *)(((unint64_t)v970 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v971 = *v972;
                    unint64_t v973 = ((unint64_t)v971 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v974 = ((unint64_t)v972 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v975 = *(void *)v974;
                    *(unsigned char *)(v973 + 8) = *(unsigned char *)(v974 + 8);
                    *(void *)unint64_t v973 = v975;
                    unint64_t v976 = (void *)(((unint64_t)v971 + 31) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v977 = (void *)(((unint64_t)v972 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v976 = *v977;
                    size_t v978 = (_OWORD *)(((unint64_t)v976 + 15) & 0xFFFFFFFFFFFFFFF8);
                    long long v979 = (_OWORD *)(((unint64_t)v977 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v978 = *v979;
                    unint64_t v980 = ((unint64_t)v978 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v981 = ((unint64_t)v979 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v982 = *(void *)v981;
                    *(unsigned char *)(v980 + 8) = *(unsigned char *)(v981 + 8);
                    *(void *)unint64_t v980 = v982;
                    *(unsigned char *)(v980 + 9) = *(unsigned char *)(v981 + 9);
                    unint64_t v983 = (v980 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v984 = (v981 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v975) = *(_DWORD *)v984;
                    *(unsigned char *)(v983 + 4) = *(unsigned char *)(v984 + 4);
                    *(_DWORD *)unint64_t v983 = v975;
                    *(_OWORD *)((v980 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v981 + 25) & 0xFFFFFFFFFFFFFFF8);
                    size_t v985 = v953 + v2049;
                    long long v986 = *(_OWORD *)(v954 + v2049 + 112);
                    long long v988 = *(_OWORD *)(v954 + v2049 + 64);
                    long long v987 = *(_OWORD *)(v954 + v2049 + 80);
                    *(_OWORD *)(v985 + 96) = *(_OWORD *)(v954 + v2049 + 96);
                    *(_OWORD *)(v985 + 112) = v986;
                    *(_OWORD *)(v985 + 64) = v988;
                    *(_OWORD *)(v985 + 80) = v987;
                    long long v989 = *(_OWORD *)(v954 + v2049 + 176);
                    long long v991 = *(_OWORD *)(v954 + v2049 + 128);
                    long long v990 = *(_OWORD *)(v954 + v2049 + 144);
                    *(_OWORD *)(v985 + 160) = *(_OWORD *)(v954 + v2049 + 160);
                    *(_OWORD *)(v985 + 176) = v989;
                    *(_OWORD *)(v985 + 128) = v991;
                    *(_OWORD *)(v985 + 144) = v990;
                    long long v993 = *(_OWORD *)(v954 + v2049 + 208);
                    long long v992 = *(_OWORD *)(v954 + v2049 + 224);
                    long long v994 = *(_OWORD *)(v954 + v2049 + 192);
                    *(void *)(v985 + 240) = *(void *)(v954 + v2049 + 240);
                    *(_OWORD *)(v985 + 208) = v993;
                    *(_OWORD *)(v985 + 224) = v992;
                    *(_OWORD *)(v985 + 192) = v994;
                    long long v995 = *(_OWORD *)(v954 + v2049);
                    long long v996 = *(_OWORD *)(v954 + v2049 + 16);
                    long long v997 = *(_OWORD *)(v954 + v2049 + 48);
                    *(_OWORD *)(v985 + 32) = *(_OWORD *)(v954 + v2049 + 32);
                    *(_OWORD *)(v985 + 48) = v997;
                    *(_OWORD *)size_t v985 = v995;
                    *(_OWORD *)(v985 + 16) = v996;
                    size_t v998 = (_OWORD *)((v953 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v999 = (long long *)((v954 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1000 = *v999;
                    *(_OWORD *)((char *)v998 + 9) = *(long long *)((char *)v999 + 9);
                    *size_t v998 = v1000;
                    unint64_t v1001 = (v953 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1002 = (v954 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1003 = *(_OWORD *)v1002;
                    *(unsigned char *)(v1001 + 16) = *(unsigned char *)(v1002 + 16);
                    *(_OWORD *)unint64_t v1001 = v1003;
                    long long v1004 = (void *)((v953 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    int v1005 = (void *)((v954 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *long long v1004 = *v1005;
                    *(_OWORD *)(((unint64_t)v1004 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1005 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v934 = v2053;
                    size_t v936 = v2006;
                    uint64_t v935 = v2023;
                    unint64_t v933 = v2076;
                    unint64_t v931 = v2065;
                    if (v1996) {
                      goto LABEL_1510;
                    }
                    goto LABEL_1497;
                  }
                  int v932 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v213 + 48))(v1014, v212, v2017);
                }
LABEL_1495:
                if (v932)
                {
LABEL_1496:
                  unint64_t v933 = v2076;
                  memcpy(v2076, v931, v2063);
                  size_t v934 = v2053;
                  uint64_t v935 = v2023;
LABEL_1497:
                  size_t v936 = v934;
LABEL_1510:
                  unint64_t v1006 = ((((v935
                            + ((((((((((v929 + v936) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  *(void *)(((unint64_t)v933 + v1006) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v931 + v1006) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1007 = ((v2039
                          + ((v172
                            + ((((v935
                                + ((((((((((v929 + v934) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)) & v2046)) & 0xFFFFFFFFFFFFFFF8)
                        + 8;
                  if (v1007 <= v2058) {
                    unint64_t v1007 = v2058;
                  }
                  if (v2031 > v1007) {
                    unint64_t v1007 = v2031;
                  }
                  if (v2063 > v1007) {
                    unint64_t v1007 = v2063;
                  }
                  if (v66 > v1007) {
                    unint64_t v1007 = v66;
                  }
                  if (v2071 > v1007) {
                    unint64_t v1007 = v2071;
                  }
                  if (v2030 > v1007) {
                    unint64_t v1007 = v2060 + 2;
                  }
                  if (v2033 > v1007) {
                    unint64_t v1007 = ((v2070 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
                  }
                  if (v2041 > v1007) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v2034 > v1007) {
                    unint64_t v1007 = (v2070 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2059) {
                    unint64_t v1007 = v2059;
                  }
                  if (v1007 <= v2036) {
                    unint64_t v1007 = ((v2061 + 1) & ~v2061) + v2071;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2032) {
                    unint64_t v1007 = v2032;
                  }
                  if (v1007 <= v2041) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2060) {
                    unint64_t v1007 = v2060;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2038) {
                    unint64_t v1007 = v2038;
                  }
                  if (v1007 <= v2041) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= 0x38) {
                    unint64_t v1007 = 56;
                  }
                  if (v1007 > 3) {
                    goto LABEL_1555;
                  }
                  unsigned int v1009 = ((1 << (8 * v1007)) + 5) >> (8 * v1007);
                  if (v1009 <= 0xFFD6)
                  {
                    if (v1009 <= 0xD6)
                    {
LABEL_1555:
                      char v1008 = 5;
LABEL_1645:
                      a1[v1007] = v1008;
                      return a1;
                    }
                    __int16 v1010 = 5;
LABEL_1649:
                    *(_WORD *)&a1[v1007] = v1010;
                    return a1;
                  }
                  int v1011 = 5;
LABEL_1651:
                  *(_DWORD *)&a1[v1007] = v1011;
                  return a1;
                }
                goto LABEL_1505;
              }
              unint64_t v461 = (unint64_t)&v77[v2004] & v2005;
              unint64_t v462 = (v461 + v2043 + v2064) & v2016;
              uint64_t v212 = v1996;
              uint64_t v214 = v2014;
              uint64_t v210 = v2054;
              if (v1982 == v1985)
              {
                uint64_t v213 = v2015;
                size_t v209 = v76;
                if (v1980 == v1982)
                {
                  int v211 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1998 + 48))((v461 + v2043 + v2064) & v2016, v1980, v1997);
                  goto LABEL_1485;
                }
                unsigned int v625 = (unint64_t *)((v2001 + v462) & 0xFFFFFFFFFFFFFFF8);
                if (v1965 > 0x7FFFFFFE)
                {
                  int v211 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1993 + 48))(((unint64_t)v625 + v1990) & v1988, v1952, v1992);
                  goto LABEL_1485;
                }
                unint64_t v626 = *v625;
              }
              else
              {
                size_t v568 = v2048 + v462;
                uint64_t v213 = v2015;
                if ((v1962 & 0x80000000) == 0)
                {
                  size_t v209 = v76;
                  unint64_t v569 = *(void *)(v568 + 8);
                  if (v569 >= 0xFFFFFFFF) {
                    LODWORD(v569) = -1;
                  }
                  int v211 = v569 + 1;
                  goto LABEL_1485;
                }
                size_t v209 = v76;
                uint64_t v835 = (v2013 + ((v2050 + v568) & v2012)) & v2014;
                if (v1996 > 0x7FFFFFFD)
                {
                  int v211 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v835, v1996, v2017);
                  goto LABEL_1485;
                }
                unint64_t v626 = *(void *)(((v1978 + ((v2010 + v835) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              if (v626 >= 0xFFFFFFFF) {
                LODWORD(v626) = -1;
              }
              if ((v626 + 1) >= 2) {
                goto LABEL_1486;
              }
              goto LABEL_1489;
            case 6u:
              uint64_t v2024 = v2022 + 327;
              if (v1979 == v1984)
              {
                size_t v215 = v76;
                int v216 = (*(uint64_t (**)(unsigned __int8 *))(v2074 + 48))(v77);
                uint64_t v217 = v1996;
LABEL_1565:
                if (v216)
                {
LABEL_1566:
                  memcpy(a1, v77, v66);
                  uint64_t v1015 = v1981;
                  unsigned int v1016 = v1979;
                  unsigned int v1017 = v1984;
LABEL_1567:
                  size_t v1018 = v215;
                  goto LABEL_1573;
                }
                unint64_t v463 = (unint64_t)&v77[v2003] & v2019;
                unint64_t v464 = (v463 + v2042 + v59) & v2020;
LABEL_1569:
                id v1019 = v77;
                uint64_t v1020 = v72;
                unint64_t v1021 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2074 + 32);
                v1021(a1, v1019, v1020);
                unint64_t v1022 = (unint64_t)&a1[v2003] & v2019;
                v1021((unsigned __int8 *)v1022, (unsigned __int8 *)v463, v1020);
                unint64_t v1023 = (v1022 + v2042 + v59) & v2020;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v1023, v464, v1999);
                v1024 = (void *)((v2002 + v1023) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1025 = (void *)((v2002 + v464) & 0xFFFFFFFFFFFFFFF8);
                void *v1024 = *v1025;
                unint64_t v1026 = ((unint64_t)v1024 + v1991) & v1989;
                unint64_t v1027 = ((unint64_t)v1025 + v1991) & v1989;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1026, v1027, v1994);
                uint64_t v1028 = (void *)((v1987 + v1026) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1029 = (void *)((v1987 + v1027) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1028 = *v1029;
                *(_OWORD *)(((unint64_t)v1028 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1029
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v2009 + v1023) = *(_OWORD *)(v2009 + v464);
                unint64_t v1030 = (v2050 + v2009 + v1023) & v2012;
                unint64_t v1031 = (v2050 + v2009 + v464) & v2012;
                *(unsigned char *)unint64_t v1030 = *(unsigned char *)v1031;
                uint64_t v1032 = v1030 | 4;
                int v1033 = *(_DWORD *)(v1031 | 4);
                *(unsigned char *)(v1032 + 4) = *(unsigned char *)((v1031 | 4) + 4);
                *(_DWORD *)uint64_t v1032 = v1033;
                *(_WORD *)(v1030 + 10) = *(_WORD *)(v1031 + 0xA);
                unint64_t v2066 = v1030;
                unint64_t v1034 = (v2013 + v1030) & v2014;
                int v1035 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
                v1035(v1034, (v2013 + v1031) & v2014, v2017);
                unint64_t v1036 = (v2010 + v1034) & v2014;
                unint64_t v1037 = (v2010 + ((v2013 + v1031) & v2014)) & v2014;
                v1035(v1036, v1037, v2017);
                size_t v1038 = (unsigned char *)(v1036 + v2006);
                *size_t v1038 = *(unsigned char *)(v1037 + v2006);
                v1038[1] = *(unsigned char *)(v1037 + v2006 + 1);
                v1038[2] = *(unsigned char *)(v1037 + v2006 + 2);
                v1038[3] = *(unsigned char *)(v1037 + v2006 + 3);
                v1038[4] = *(unsigned char *)(v1037 + v2006 + 4);
                unint64_t v1039 = (v1036 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1040 = (v1037 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v1039 = *(_OWORD *)v1040;
                *(unsigned char *)(v1039 + 16) = *(unsigned char *)(v1040 + 16);
                *(unsigned char *)(v1039 + 17) = *(unsigned char *)(v1040 + 17);
                *(unsigned char *)(v1039 + 18) = *(unsigned char *)(v1040 + 18);
                *(unsigned char *)(v1039 + 19) = *(unsigned char *)(v1040 + 19);
                unint64_t v1041 = (v1039 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1042 = (v1040 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1041 = *(void *)v1042;
                *(unsigned char *)(v1041 + 8) = *(unsigned char *)(v1042 + 8);
                *(unsigned char *)(v1041 + 9) = *(unsigned char *)(v1042 + 9);
                *(unsigned char *)(v1041 + 10) = *(unsigned char *)(v1042 + 10);
                *(unsigned char *)(v1041 + 11) = *(unsigned char *)(v1042 + 11);
                *(unsigned char *)(v1041 + 12) = *(unsigned char *)(v1042 + 12);
                unint64_t v1043 = (void *)((v1040 + 47) & 0xFFFFFFFFFFFFFFF8);
                size_t v1044 = (void *)((v1039 + 47) & 0xFFFFFFFFFFFFFFF8);
                *size_t v1044 = *v1043;
                unint64_t v1045 = ((unint64_t)v1044 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1046 = ((unint64_t)v1043 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1045 = *(void *)v1046;
                *(unsigned char *)(v1045 + 8) = *(unsigned char *)(v1046 + 8);
                *(unsigned char *)(v1045 + 9) = *(unsigned char *)(v1046 + 9);
                uint64_t v1047 = (void *)((v2007 + v1045) & v2014);
                v1048 = (const void *)((v2007 + v1046) & v2014);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1048, 1, v2017))
                {
                  size_t v215 = v2053;
                  memcpy(v1047, v1048, v2053);
                }
                else
                {
                  v1035((unint64_t)v1047, (unint64_t)v1048, v2017);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1047, 0, 1, v2017);
                  size_t v215 = v2053;
                }
                uint64_t v217 = v1996;
                int v1049 = (void *)(((unint64_t)v1048 + v2008) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1050 = (void *)(((unint64_t)v1047 + v2008) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1050 = *v1049;
                unint64_t v1051 = ((unint64_t)v1050 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1052 = ((unint64_t)v1049 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1053 = *(void *)v1052;
                *(unsigned char *)(v1051 + 8) = *(unsigned char *)(v1052 + 8);
                *(void *)unint64_t v1051 = v1053;
                uint64_t v1054 = (void *)(((unint64_t)v1050 + 31) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1055 = (void *)(((unint64_t)v1049 + 31) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1054 = *v1055;
                unint64_t v1056 = (_OWORD *)(((unint64_t)v1054 + 15) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1057 = (_OWORD *)(((unint64_t)v1055 + 15) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1056 = *v1057;
                unint64_t v1058 = ((unint64_t)v1056 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1059 = ((unint64_t)v1057 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1060 = *(void *)v1059;
                *(unsigned char *)(v1058 + 8) = *(unsigned char *)(v1059 + 8);
                *(void *)unint64_t v1058 = v1060;
                *(unsigned char *)(v1058 + 9) = *(unsigned char *)(v1059 + 9);
                unint64_t v1061 = (v1058 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1062 = (v1059 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v1053) = *(_DWORD *)v1062;
                *(unsigned char *)(v1061 + 4) = *(unsigned char *)(v1062 + 4);
                *(_DWORD *)unint64_t v1061 = v1053;
                *(_OWORD *)((v1058 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1059 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1063 = v2066 + v2049;
                long long v1064 = *(_OWORD *)(v1031 + v2049 + 112);
                long long v1066 = *(_OWORD *)(v1031 + v2049 + 64);
                long long v1065 = *(_OWORD *)(v1031 + v2049 + 80);
                *(_OWORD *)(v1063 + 96) = *(_OWORD *)(v1031 + v2049 + 96);
                *(_OWORD *)(v1063 + 112) = v1064;
                *(_OWORD *)(v1063 + 64) = v1066;
                *(_OWORD *)(v1063 + 80) = v1065;
                long long v1067 = *(_OWORD *)(v1031 + v2049 + 176);
                long long v1069 = *(_OWORD *)(v1031 + v2049 + 128);
                long long v1068 = *(_OWORD *)(v1031 + v2049 + 144);
                *(_OWORD *)(v1063 + 160) = *(_OWORD *)(v1031 + v2049 + 160);
                *(_OWORD *)(v1063 + 176) = v1067;
                *(_OWORD *)(v1063 + 128) = v1069;
                *(_OWORD *)(v1063 + 144) = v1068;
                long long v1071 = *(_OWORD *)(v1031 + v2049 + 208);
                long long v1070 = *(_OWORD *)(v1031 + v2049 + 224);
                long long v1072 = *(_OWORD *)(v1031 + v2049 + 192);
                *(void *)(v1063 + 240) = *(void *)(v1031 + v2049 + 240);
                *(_OWORD *)(v1063 + 208) = v1071;
                *(_OWORD *)(v1063 + 224) = v1070;
                *(_OWORD *)(v1063 + 192) = v1072;
                long long v1073 = *(_OWORD *)(v1031 + v2049);
                long long v1074 = *(_OWORD *)(v1031 + v2049 + 16);
                long long v1075 = *(_OWORD *)(v1031 + v2049 + 48);
                *(_OWORD *)(v1063 + 32) = *(_OWORD *)(v1031 + v2049 + 32);
                *(_OWORD *)(v1063 + 48) = v1075;
                *(_OWORD *)unint64_t v1063 = v1073;
                *(_OWORD *)(v1063 + 16) = v1074;
                int v1076 = (_OWORD *)((v2066 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1077 = (long long *)((v1031 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1078 = *v1077;
                *(_OWORD *)((char *)v1076 + 9) = *(long long *)((char *)v1077 + 9);
                _OWORD *v1076 = v1078;
                unint64_t v1079 = (v2066 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1080 = (v1031 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1081 = *(_OWORD *)v1080;
                *(unsigned char *)(v1079 + 16) = *(unsigned char *)(v1080 + 16);
                *(_OWORD *)unint64_t v1079 = v1081;
                unint64_t v1082 = (void *)((v2066 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                size_t v1083 = (void *)((v1031 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                void *v1082 = *v1083;
                *(_OWORD *)(((unint64_t)v1082 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1083
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v1018 = v2006;
                uint64_t v72 = v2047;
                uint64_t v77 = a2;
                uint64_t v1015 = v1981;
                unsigned int v1016 = v1979;
                unsigned int v1017 = v1984;
                if (!v1996) {
                  goto LABEL_1567;
                }
LABEL_1573:
                unint64_t v1084 = v2021 + 7;
                uint64_t v1085 = v1963 + 327;
                unint64_t v1086 = ((((v1963
                          + 327
                          + ((((((((((v2021 + 7 + v1018) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                              + 19) & 0xFFFFFFFFFFFFFFF8)
                            + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                        + 15) & 0xFFFFFFFFFFFFFFF8)
                      + 16;
                size_t v1087 = (void *)((unint64_t)&a1[v1954 + v1086] & v1974);
                uint64_t v2067 = (const void *)((unint64_t)&v77[v1954 + v1086] & v1974);
                if (v1016 == v1017)
                {
                  int v1088 = (*(uint64_t (**)(void))(v2074 + 48))();
                  uint64_t v1089 = v2017;
                }
                else
                {
                  unint64_t v1090 = (v2003 + ((unint64_t)&v77[v1954 + v1086] & v1974)) & v2019;
                  unint64_t v1091 = (v1975 + v1090) & v2020;
                  if (v1983 == v1017)
                  {
                    uint64_t v1089 = v2017;
                    if (v1015 == v1983)
                    {
                      int v1088 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2000 + 48))((v1975 + v1090) & v2020, v1015, v1999);
                    }
                    else
                    {
                      size_t v1094 = (unint64_t *)((v2002 + v1091) & 0xFFFFFFFFFFFFFFF8);
                      if (v1966 <= 0x7FFFFFFE)
                      {
                        unint64_t v1095 = *v1094;
                        if (v1095 >= 0xFFFFFFFF) {
                          LODWORD(v1095) = -1;
                        }
                        if ((v1095 + 1) >= 2) {
                          goto LABEL_1592;
                        }
                        goto LABEL_1595;
                      }
                      int v1088 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1995 + 48))(((unint64_t)v1094 + v1991) & v1989, v1953, v1994);
                    }
                  }
                  else
                  {
                    unint64_t v1092 = v1091 + v2009;
                    if ((v1961 & 0x80000000) != 0)
                    {
                      uint64_t v1096 = (v2013 + ((v2050 + v1092) & v2012)) & v2014;
                      if (v217 <= 0x7FFFFFFD)
                      {
                        unint64_t v1289 = *(void *)(((v1978 + ((v2010 + v1096) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                        if (v1289 >= 0xFFFFFFFF) {
                          LODWORD(v1289) = -1;
                        }
                        uint64_t v1089 = v2017;
                        if ((v1289 + 1) >= 2) {
                          goto LABEL_1592;
                        }
                        goto LABEL_1595;
                      }
                      uint64_t v1089 = v2017;
                      int v1088 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2015 + 48))(v1096, v217, v2017);
                    }
                    else
                    {
                      unint64_t v1093 = *(void *)(v1092 + 8);
                      if (v1093 >= 0xFFFFFFFF) {
                        LODWORD(v1093) = -1;
                      }
                      int v1088 = v1093 + 1;
                      uint64_t v1089 = v2017;
                    }
                  }
                }
                if (v1088)
                {
LABEL_1592:
                  unint64_t v1097 = v2067;
                  memcpy(v1087, v2067, v66);
                  size_t v1098 = v2053;
                  uint64_t v1099 = v2024;
                  goto LABEL_1593;
                }
                unint64_t v1090 = ((unint64_t)v2067 + v2003) & v2019;
                unint64_t v1091 = (v1975 + v1090) & v2020;
LABEL_1595:
                size_t v2062 = v66;
                uint64_t v1101 = *(void (**)(void *, const void *, uint64_t))(v2074 + 32);
                v1101(v1087, v2067, v72);
                v1101((void *)(((unint64_t)v1087 + v2003) & v2019), (const void *)v1090, v72);
                unint64_t v1102 = (v1975 + (((unint64_t)v1087 + v2003) & v2019)) & v2020;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v1102, v1091, v1999);
                uint64_t v1103 = (void *)((v2002 + v1102) & 0xFFFFFFFFFFFFFFF8);
                int v1104 = (void *)((v2002 + v1091) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1103 = *v1104;
                unint64_t v1105 = ((unint64_t)v1103 + v1991) & v1989;
                unint64_t v1106 = ((unint64_t)v1104 + v1991) & v1989;
                (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1105, v1106, v1994);
                unint64_t v1107 = (void *)((v1987 + v1105) & 0xFFFFFFFFFFFFFFF8);
                v1108 = (void *)((v1987 + v1106) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1107 = *v1108;
                *(_OWORD *)(((unint64_t)v1107 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1108
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                *(_OWORD *)(v1102 + v2009) = *(_OWORD *)(v1091 + v2009);
                unint64_t v1109 = (v2050 + v1102 + v2009) & v2012;
                unint64_t v1110 = (v2050 + v1091 + v2009) & v2012;
                *(unsigned char *)unint64_t v1109 = *(unsigned char *)v1110;
                uint64_t v1111 = v1109 | 4;
                int v1112 = *(_DWORD *)(v1110 | 4);
                *(unsigned char *)(v1111 + 4) = *(unsigned char *)((v1110 | 4) + 4);
                *(_DWORD *)uint64_t v1111 = v1112;
                *(_WORD *)(v1109 + 10) = *(_WORD *)(v1110 + 0xA);
                long long v1113 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
                v1113((v2013 + v1109) & v2014, (v2013 + v1110) & v2014, v1089);
                unint64_t v1114 = (v2010 + ((v2013 + v1109) & v2014)) & v2014;
                unint64_t v1115 = (v2010 + ((v2013 + v1110) & v2014)) & v2014;
                v1113(v1114, v1115, v1089);
                long long v1116 = (unsigned char *)(v1114 + v2006);
                *long long v1116 = *(unsigned char *)(v1115 + v2006);
                v1116[1] = *(unsigned char *)(v1115 + v2006 + 1);
                v1116[2] = *(unsigned char *)(v1115 + v2006 + 2);
                v1116[3] = *(unsigned char *)(v1115 + v2006 + 3);
                v1116[4] = *(unsigned char *)(v1115 + v2006 + 4);
                unint64_t v1117 = (v1114 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1118 = (v1115 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                *(_OWORD *)unint64_t v1117 = *(_OWORD *)v1118;
                *(unsigned char *)(v1117 + 16) = *(unsigned char *)(v1118 + 16);
                *(unsigned char *)(v1117 + 17) = *(unsigned char *)(v1118 + 17);
                *(unsigned char *)(v1117 + 18) = *(unsigned char *)(v1118 + 18);
                *(unsigned char *)(v1117 + 19) = *(unsigned char *)(v1118 + 19);
                unint64_t v1119 = (v1117 + 27) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1120 = (v1118 + 27) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1119 = *(void *)v1120;
                *(unsigned char *)(v1119 + 8) = *(unsigned char *)(v1120 + 8);
                *(unsigned char *)(v1119 + 9) = *(unsigned char *)(v1120 + 9);
                *(unsigned char *)(v1119 + 10) = *(unsigned char *)(v1120 + 10);
                *(unsigned char *)(v1119 + 11) = *(unsigned char *)(v1120 + 11);
                *(unsigned char *)(v1119 + 12) = *(unsigned char *)(v1120 + 12);
                long long v1121 = (void *)((v1118 + 47) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1122 = (void *)((v1117 + 47) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1122 = *v1121;
                unint64_t v1123 = ((unint64_t)v1122 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1124 = ((unint64_t)v1121 + 15) & 0xFFFFFFFFFFFFFFF8;
                *(void *)unint64_t v1123 = *(void *)v1124;
                *(unsigned char *)(v1123 + 8) = *(unsigned char *)(v1124 + 8);
                *(unsigned char *)(v1123 + 9) = *(unsigned char *)(v1124 + 9);
                uint64_t v1125 = (void *)((v2007 + v1123) & v2014);
                uint64_t v1126 = (const void *)((v2007 + v1124) & v2014);
                if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1126, 1, v1089))
                {
                  memcpy(v1125, v1126, v2053);
                }
                else
                {
                  v1113((unint64_t)v1125, (unint64_t)v1126, v1089);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1125, 0, 1, v1089);
                }
                unint64_t v1084 = v2021 + 7;
                uint64_t v1085 = v1963 + 327;
                uint64_t v1127 = (void *)(((unint64_t)v1125 + v2008) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1128 = (void *)(((unint64_t)v1126 + v2008) & 0xFFFFFFFFFFFFFFF8);
                *uint64_t v1127 = *v1128;
                unint64_t v1129 = ((unint64_t)v1127 + 15) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1130 = ((unint64_t)v1128 + 15) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1131 = *(void *)v1130;
                *(unsigned char *)(v1129 + 8) = *(unsigned char *)(v1130 + 8);
                *(void *)unint64_t v1129 = v1131;
                unint64_t v1132 = (void *)(((unint64_t)v1127 + 31) & 0xFFFFFFFFFFFFFFF8);
                size_t v1133 = (void *)(((unint64_t)v1128 + 31) & 0xFFFFFFFFFFFFFFF8);
                *unint64_t v1132 = *v1133;
                size_t v1134 = (_OWORD *)(((unint64_t)v1132 + 15) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1135 = (_OWORD *)(((unint64_t)v1133 + 15) & 0xFFFFFFFFFFFFFFF8);
                *size_t v1134 = *v1135;
                unint64_t v1136 = ((unint64_t)v1134 + 19) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1137 = ((unint64_t)v1135 + 19) & 0xFFFFFFFFFFFFFFF8;
                uint64_t v1138 = *(void *)v1137;
                *(unsigned char *)(v1136 + 8) = *(unsigned char *)(v1137 + 8);
                *(void *)unint64_t v1136 = v1138;
                *(unsigned char *)(v1136 + 9) = *(unsigned char *)(v1137 + 9);
                unint64_t v1139 = (v1136 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                unint64_t v1140 = (v1137 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                LODWORD(v1131) = *(_DWORD *)v1140;
                *(unsigned char *)(v1139 + 4) = *(unsigned char *)(v1140 + 4);
                *(_DWORD *)unint64_t v1139 = v1131;
                *(_OWORD *)((v1136 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1137 + 25) & 0xFFFFFFFFFFFFFFF8);
                unint64_t v1141 = v1109 + v2049;
                long long v1142 = *(_OWORD *)(v1110 + v2049 + 112);
                long long v1144 = *(_OWORD *)(v1110 + v2049 + 64);
                long long v1143 = *(_OWORD *)(v1110 + v2049 + 80);
                *(_OWORD *)(v1141 + 96) = *(_OWORD *)(v1110 + v2049 + 96);
                *(_OWORD *)(v1141 + 112) = v1142;
                *(_OWORD *)(v1141 + 64) = v1144;
                *(_OWORD *)(v1141 + 80) = v1143;
                long long v1145 = *(_OWORD *)(v1110 + v2049 + 176);
                long long v1147 = *(_OWORD *)(v1110 + v2049 + 128);
                long long v1146 = *(_OWORD *)(v1110 + v2049 + 144);
                *(_OWORD *)(v1141 + 160) = *(_OWORD *)(v1110 + v2049 + 160);
                *(_OWORD *)(v1141 + 176) = v1145;
                *(_OWORD *)(v1141 + 128) = v1147;
                *(_OWORD *)(v1141 + 144) = v1146;
                long long v1149 = *(_OWORD *)(v1110 + v2049 + 208);
                long long v1148 = *(_OWORD *)(v1110 + v2049 + 224);
                long long v1150 = *(_OWORD *)(v1110 + v2049 + 192);
                *(void *)(v1141 + 240) = *(void *)(v1110 + v2049 + 240);
                *(_OWORD *)(v1141 + 208) = v1149;
                *(_OWORD *)(v1141 + 224) = v1148;
                *(_OWORD *)(v1141 + 192) = v1150;
                long long v1151 = *(_OWORD *)(v1110 + v2049);
                long long v1152 = *(_OWORD *)(v1110 + v2049 + 16);
                long long v1153 = *(_OWORD *)(v1110 + v2049 + 48);
                *(_OWORD *)(v1141 + 32) = *(_OWORD *)(v1110 + v2049 + 32);
                *(_OWORD *)(v1141 + 48) = v1153;
                *(_OWORD *)unint64_t v1141 = v1151;
                *(_OWORD *)(v1141 + 16) = v1152;
                unint64_t v1154 = (_OWORD *)((v1109 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1155 = (long long *)((v1110 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                long long v1156 = *v1155;
                *(_OWORD *)((char *)v1154 + 9) = *(long long *)((char *)v1155 + 9);
                *unint64_t v1154 = v1156;
                unint64_t v1157 = (v1109 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                unint64_t v1158 = (v1110 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                long long v1159 = *(_OWORD *)v1158;
                *(unsigned char *)(v1157 + 16) = *(unsigned char *)(v1158 + 16);
                *(_OWORD *)unint64_t v1157 = v1159;
                unsigned int v1160 = (void *)((v1109 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                uint64_t v1161 = (void *)((v1110 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                *unsigned int v1160 = *v1161;
                *(_OWORD *)(((unint64_t)v1160 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1161
                                                                                                + 15) & 0xFFFFFFFFFFFFFFF8);
                size_t v1098 = v2053;
                size_t v1100 = v2006;
                size_t v66 = v2062;
                uint64_t v1099 = v2024;
                unint64_t v1097 = v2067;
                if (v1996)
                {
LABEL_1599:
                  unint64_t v1162 = ((((v1085
                            + ((((((((((v1084 + v1100) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  *(void *)(((unint64_t)v1087 + v1162) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1097 + v1162) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1007 = ((v2039
                          + ((v172
                            + ((((v1099
                                + ((((((((((v1084 + v1098) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)) & v2046)) & 0xFFFFFFFFFFFFFFF8)
                        + 8;
                  if (v1007 <= v2058) {
                    unint64_t v1007 = v2058;
                  }
                  if (v2031 > v1007) {
                    unint64_t v1007 = v2031;
                  }
                  if (v2063 > v1007) {
                    unint64_t v1007 = v2063;
                  }
                  if (v66 > v1007) {
                    unint64_t v1007 = v66;
                  }
                  if (v2071 > v1007) {
                    unint64_t v1007 = v2071;
                  }
                  if (v2030 > v1007) {
                    unint64_t v1007 = v2060 + 2;
                  }
                  if (v2033 > v1007) {
                    unint64_t v1007 = ((v2070 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
                  }
                  if (v2041 > v1007) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v2034 > v1007) {
                    unint64_t v1007 = (v2070 & 0xFFFFFFFFFFFFFFF8) + 16;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2059) {
                    unint64_t v1007 = v2059;
                  }
                  if (v1007 <= v2036) {
                    unint64_t v1007 = v2036;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2032) {
                    unint64_t v1007 = v2032;
                  }
                  if (v1007 <= v2041) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2060) {
                    unint64_t v1007 = v2060;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= v2038) {
                    unint64_t v1007 = v2038;
                  }
                  if (v1007 <= v2041) {
                    unint64_t v1007 = v2070 + 2;
                  }
                  if (v1007 <= v2071) {
                    unint64_t v1007 = v2071;
                  }
                  if (v1007 <= 0x38) {
                    unint64_t v1007 = 56;
                  }
                  if (v1007 <= 3)
                  {
                    unsigned int v1163 = ((1 << (8 * v1007)) + 5) >> (8 * v1007);
                    if (v1163 > 0xFFD6)
                    {
                      int v1011 = 6;
                      goto LABEL_1651;
                    }
                    if (v1163 > 0xD6)
                    {
                      __int16 v1010 = 6;
                      goto LABEL_1649;
                    }
                  }
                  char v1008 = 6;
                  goto LABEL_1645;
                }
LABEL_1593:
                size_t v1100 = v1098;
                goto LABEL_1599;
              }
              unint64_t v463 = (unint64_t)&v77[v2003] & v2019;
              unint64_t v464 = (v463 + v2042 + v59) & v2020;
              uint64_t v217 = v1996;
              if (v1983 == v1984)
              {
                size_t v215 = v76;
                if (v1981 == v1983)
                {
                  int v216 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v2000 + 48))((v463 + v2042 + v59) & v2020, v1981, v1999);
                  goto LABEL_1565;
                }
                uint64_t v627 = (unint64_t *)((v2002 + v464) & 0xFFFFFFFFFFFFFFF8);
                if (v1966 > 0x7FFFFFFE)
                {
                  int v216 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1995 + 48))(((unint64_t)v627 + v1991) & v1989, v1953, v1994);
                  goto LABEL_1565;
                }
                unint64_t v628 = *v627;
              }
              else
              {
                unint64_t v570 = v2009 + v464;
                if ((v1961 & 0x80000000) == 0)
                {
                  size_t v215 = v76;
                  unint64_t v571 = *(void *)(v570 + 8);
                  if (v571 >= 0xFFFFFFFF) {
                    LODWORD(v571) = -1;
                  }
                  int v216 = v571 + 1;
                  goto LABEL_1565;
                }
                size_t v215 = v76;
                uint64_t v836 = (v2013 + ((v2050 + v570) & v2012)) & v2014;
                if (v1996 > 0x7FFFFFFD)
                {
                  int v216 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v836, v1996, v2017);
                  goto LABEL_1565;
                }
                unint64_t v628 = *(void *)(((v1978 + ((v2010 + v836) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
              }
              if (v628 >= 0xFFFFFFFF) {
                LODWORD(v628) = -1;
              }
              if ((v628 + 1) >= 2) {
                goto LABEL_1566;
              }
              goto LABEL_1569;
            case 7u:
              unsigned int v218 = v67;
              unsigned int v219 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32);
              v219(a1, v77, v73);
              unint64_t v220 = (unint64_t)&a1[v2004] & v2005;
              v219((unsigned __int8 *)v220, (unsigned __int8 *)((unint64_t)&v77[v2004] & v2005), v73);
              unint64_t v221 = (v220 + v2043 + v2064) & v2016;
              unint64_t v222 = (((unint64_t)&v77[v2004] & v2005) + v2043 + v2064) & v2016;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v221, v222, v1997);
              uint64_t v223 = (void *)((v2001 + v221) & 0xFFFFFFFFFFFFFFF8);
              size_t v224 = (void *)((v2001 + v222) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v223 = *v224;
              unint64_t v225 = ((unint64_t)v223 + v1990) & v1988;
              unint64_t v226 = ((unint64_t)v224 + v1990) & v1988;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v225, v226, v1992);
              uint64_t v227 = (void *)((v1986 + v225) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v228 = (void *)((v1986 + v226) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v227 = *v228;
              *(_OWORD *)(((unint64_t)v227 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v228
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v2048 + v221) = *(_OWORD *)(v2048 + v222);
              size_t v229 = (v2050 + v2048 + v221) & v2012;
              size_t v230 = (v2050 + v2048 + v222) & v2012;
              *(unsigned char *)size_t v229 = *(unsigned char *)v230;
              uint64_t v231 = v229 | 4;
              int v232 = *(_DWORD *)(v230 | 4);
              *(unsigned char *)(v231 + 4) = *(unsigned char *)((v230 | 4) + 4);
              *(_DWORD *)uint64_t v231 = v232;
              *(_WORD *)(v229 + 10) = *(_WORD *)(v230 + 0xA);
              uint64_t v233 = *(void (**)(size_t, size_t, uint64_t))(v2015 + 32);
              v233((v2013 + v229) & v2014, (v2013 + v230) & v2014, v2017);
              size_t v234 = (v2010 + ((v2013 + v229) & v2014)) & v2014;
              size_t v235 = (v2010 + ((v2013 + v230) & v2014)) & v2014;
              v233(v234, v235, v2017);
              uint64_t v236 = (unsigned char *)(v234 + v2006);
              *uint64_t v236 = *(unsigned char *)(v235 + v2006);
              v236[1] = *(unsigned char *)(v235 + v2006 + 1);
              v236[2] = *(unsigned char *)(v235 + v2006 + 2);
              v236[3] = *(unsigned char *)(v235 + v2006 + 3);
              v236[4] = *(unsigned char *)(v235 + v2006 + 4);
              unint64_t v237 = (v234 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v238 = (v235 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v237 = *(_OWORD *)v238;
              *(unsigned char *)(v237 + 16) = *(unsigned char *)(v238 + 16);
              *(unsigned char *)(v237 + 17) = *(unsigned char *)(v238 + 17);
              *(unsigned char *)(v237 + 18) = *(unsigned char *)(v238 + 18);
              *(unsigned char *)(v237 + 19) = *(unsigned char *)(v238 + 19);
              unint64_t v239 = (v237 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v240 = (v238 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v239 = *(void *)v240;
              *(unsigned char *)(v239 + 8) = *(unsigned char *)(v240 + 8);
              *(unsigned char *)(v239 + 9) = *(unsigned char *)(v240 + 9);
              *(unsigned char *)(v239 + 10) = *(unsigned char *)(v240 + 10);
              *(unsigned char *)(v239 + 11) = *(unsigned char *)(v240 + 11);
              *(unsigned char *)(v239 + 12) = *(unsigned char *)(v240 + 12);
              unsigned int v241 = (void *)((v238 + 47) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v242 = (void *)((v237 + 47) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v242 = *v241;
              unint64_t v243 = ((unint64_t)v242 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v244 = ((unint64_t)v241 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v243 = *(void *)v244;
              *(unsigned char *)(v243 + 8) = *(unsigned char *)(v244 + 8);
              *(unsigned char *)(v243 + 9) = *(unsigned char *)(v244 + 9);
              size_t v245 = (void *)((v2007 + v243) & v2014);
              uint64_t v246 = (const void *)((v2007 + v244) & v2014);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v246, 1, v2017))
              {
                memcpy(v245, v246, v2053);
              }
              else
              {
                v233((size_t)v245, (size_t)v246, v2017);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v245, 0, 1, v2017);
              }
              long long v481 = (void *)(((unint64_t)v246 + v2008) & 0xFFFFFFFFFFFFFFF8);
              long long v482 = (void *)(((unint64_t)v245 + v2008) & 0xFFFFFFFFFFFFFFF8);
              *long long v482 = *v481;
              unint64_t v483 = ((unint64_t)v482 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v484 = ((unint64_t)v481 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v485 = *(void *)v484;
              *(unsigned char *)(v483 + 8) = *(unsigned char *)(v484 + 8);
              *(void *)unint64_t v483 = v485;
              long long v486 = (void *)(((unint64_t)v482 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v487 = (void *)(((unint64_t)v481 + 31) & 0xFFFFFFFFFFFFFFF8);
              *long long v486 = *v487;
              long long v488 = (_OWORD *)(((unint64_t)v486 + 15) & 0xFFFFFFFFFFFFFFF8);
              long long v489 = (_OWORD *)(((unint64_t)v487 + 15) & 0xFFFFFFFFFFFFFFF8);
              _OWORD *v488 = *v489;
              unint64_t v490 = ((unint64_t)v488 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v491 = ((unint64_t)v489 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v492 = *(void *)v491;
              *(unsigned char *)(v490 + 8) = *(unsigned char *)(v491 + 8);
              *(void *)unint64_t v490 = v492;
              *(unsigned char *)(v490 + 9) = *(unsigned char *)(v491 + 9);
              unint64_t v493 = (v490 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v494 = (v491 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v485) = *(_DWORD *)v494;
              *(unsigned char *)(v493 + 4) = *(unsigned char *)(v494 + 4);
              *(_DWORD *)unint64_t v493 = v485;
              *(_OWORD *)((v490 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v491 + 25) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v495 = v2049 + v229;
              long long v496 = *(_OWORD *)(v2049 + v230 + 112);
              long long v498 = *(_OWORD *)(v2049 + v230 + 64);
              long long v497 = *(_OWORD *)(v2049 + v230 + 80);
              *(_OWORD *)(v495 + 96) = *(_OWORD *)(v2049 + v230 + 96);
              *(_OWORD *)(v495 + 112) = v496;
              *(_OWORD *)(v495 + 64) = v498;
              *(_OWORD *)(v495 + 80) = v497;
              long long v499 = *(_OWORD *)(v2049 + v230 + 176);
              long long v501 = *(_OWORD *)(v2049 + v230 + 128);
              long long v500 = *(_OWORD *)(v2049 + v230 + 144);
              *(_OWORD *)(v495 + 160) = *(_OWORD *)(v2049 + v230 + 160);
              *(_OWORD *)(v495 + 176) = v499;
              *(_OWORD *)(v495 + 128) = v501;
              *(_OWORD *)(v495 + 144) = v500;
              long long v503 = *(_OWORD *)(v2049 + v230 + 208);
              long long v502 = *(_OWORD *)(v2049 + v230 + 224);
              long long v504 = *(_OWORD *)(v2049 + v230 + 192);
              *(void *)(v495 + 240) = *(void *)(v2049 + v230 + 240);
              *(_OWORD *)(v495 + 208) = v503;
              *(_OWORD *)(v495 + 224) = v502;
              *(_OWORD *)(v495 + 192) = v504;
              long long v505 = *(_OWORD *)(v2049 + v230);
              long long v506 = *(_OWORD *)(v2049 + v230 + 16);
              long long v507 = *(_OWORD *)(v2049 + v230 + 48);
              *(_OWORD *)(v495 + 32) = *(_OWORD *)(v2049 + v230 + 32);
              *(_OWORD *)(v495 + 48) = v507;
              *(_OWORD *)unint64_t v495 = v505;
              *(_OWORD *)(v495 + 16) = v506;
              unint64_t v508 = (_OWORD *)((v2049 + v229 + 255) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v509 = (long long *)((v2049 + v230 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v510 = *v509;
              *(_OWORD *)((char *)v508 + 9) = *(long long *)((char *)v509 + 9);
              *unint64_t v508 = v510;
              unint64_t v511 = (v2049 + v229 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v512 = (v2049 + v230 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v513 = *(_OWORD *)v512;
              *(unsigned char *)(v511 + 16) = *(unsigned char *)(v512 + 16);
              *(_OWORD *)unint64_t v511 = v513;
              unint64_t v514 = (void *)((v2049 + v229 + 311) & 0xFFFFFFFFFFFFFFF8);
              long long v515 = (void *)((v2049 + v230 + 311) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v514 = *v515;
              *(_OWORD *)(((unint64_t)v514 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v515
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              if (v218 > 3) {
                goto LABEL_671;
              }
              unsigned int v516 = ((1 << (8 * v218)) + 5) >> (8 * v218);
              if (v516 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 7;
              }
              else if (v516 <= 0xD6)
              {
LABEL_671:
                *unint64_t v68 = 7;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 7;
              }
              return a1;
            case 8u:
              unsigned int v247 = v67;
              uint64_t v248 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2074 + 32);
              v248(a1, v77, v72);
              unint64_t v249 = (unint64_t)&a1[v2003] & v2019;
              v248((unsigned __int8 *)v249, (unsigned __int8 *)((unint64_t)&v77[v2003] & v2019), v72);
              unint64_t v250 = (v249 + v2042 + v59) & v2020;
              unint64_t v251 = (((unint64_t)&v77[v2003] & v2019) + v2042 + v59) & v2020;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v250, v251, v1999);
              uint64_t v252 = (void *)((v2002 + v250) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v253 = (void *)((v2002 + v251) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v252 = *v253;
              unint64_t v254 = ((unint64_t)v252 + v1991) & v1989;
              unint64_t v255 = ((unint64_t)v253 + v1991) & v1989;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v254, v255, v1994);
              uint64_t v256 = (void *)((v1987 + v254) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v257 = (void *)((v1987 + v255) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v256 = *v257;
              *(_OWORD *)(((unint64_t)v256 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v257
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *(_OWORD *)(v2009 + v250) = *(_OWORD *)(v2009 + v251);
              unint64_t v258 = (v2050 + v2009 + v250) & v2012;
              unint64_t v259 = (v2050 + v2009 + v251) & v2012;
              *(unsigned char *)unint64_t v258 = *(unsigned char *)v259;
              uint64_t v260 = v258 | 4;
              int v261 = *(_DWORD *)(v259 | 4);
              *(unsigned char *)(v260 + 4) = *(unsigned char *)((v259 | 4) + 4);
              *(_DWORD *)uint64_t v260 = v261;
              *(_WORD *)(v258 + 10) = *(_WORD *)(v259 + 0xA);
              unsigned int v262 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
              v262((v2013 + v258) & v2014, (v2013 + v259) & v2014, v2017);
              unint64_t v263 = (v2010 + ((v2013 + v258) & v2014)) & v2014;
              unint64_t v264 = (v2010 + ((v2013 + v259) & v2014)) & v2014;
              v262(v263, v264, v2017);
              uint64_t v265 = (unsigned char *)(v263 + v2006);
              *uint64_t v265 = *(unsigned char *)(v264 + v2006);
              v265[1] = *(unsigned char *)(v264 + v2006 + 1);
              v265[2] = *(unsigned char *)(v264 + v2006 + 2);
              v265[3] = *(unsigned char *)(v264 + v2006 + 3);
              v265[4] = *(unsigned char *)(v264 + v2006 + 4);
              unint64_t v266 = (v263 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v267 = (v264 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
              *(_OWORD *)unint64_t v266 = *(_OWORD *)v267;
              *(unsigned char *)(v266 + 16) = *(unsigned char *)(v267 + 16);
              *(unsigned char *)(v266 + 17) = *(unsigned char *)(v267 + 17);
              *(unsigned char *)(v266 + 18) = *(unsigned char *)(v267 + 18);
              *(unsigned char *)(v266 + 19) = *(unsigned char *)(v267 + 19);
              unint64_t v268 = (v266 + 27) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v269 = (v267 + 27) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v268 = *(void *)v269;
              *(unsigned char *)(v268 + 8) = *(unsigned char *)(v269 + 8);
              *(unsigned char *)(v268 + 9) = *(unsigned char *)(v269 + 9);
              *(unsigned char *)(v268 + 10) = *(unsigned char *)(v269 + 10);
              *(unsigned char *)(v268 + 11) = *(unsigned char *)(v269 + 11);
              *(unsigned char *)(v268 + 12) = *(unsigned char *)(v269 + 12);
              unsigned int v270 = (void *)((v267 + 47) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v271 = (void *)((v266 + 47) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v271 = *v270;
              unint64_t v272 = ((unint64_t)v271 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v273 = ((unint64_t)v270 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v272 = *(void *)v273;
              *(unsigned char *)(v272 + 8) = *(unsigned char *)(v273 + 8);
              *(unsigned char *)(v272 + 9) = *(unsigned char *)(v273 + 9);
              uint64_t v274 = (void *)((v2007 + v272) & v2014);
              uint64_t v275 = (const void *)((v2007 + v273) & v2014);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v275, 1, v2017))
              {
                memcpy(v274, v275, v2053);
              }
              else
              {
                v262((unint64_t)v274, (unint64_t)v275, v2017);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v274, 0, 1, v2017);
              }
              long long v517 = (void *)(((unint64_t)v275 + v2008) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v518 = (void *)(((unint64_t)v274 + v2008) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v518 = *v517;
              unint64_t v519 = ((unint64_t)v518 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v520 = ((unint64_t)v517 + 15) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v521 = *(void *)v520;
              *(unsigned char *)(v519 + 8) = *(unsigned char *)(v520 + 8);
              *(void *)unint64_t v519 = v521;
              uint64_t v522 = (void *)(((unint64_t)v518 + 31) & 0xFFFFFFFFFFFFFFF8);
              long long v523 = (void *)(((unint64_t)v517 + 31) & 0xFFFFFFFFFFFFFFF8);
              void *v522 = *v523;
              unint64_t v524 = (_OWORD *)(((unint64_t)v522 + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v525 = (_OWORD *)(((unint64_t)v523 + 15) & 0xFFFFFFFFFFFFFFF8);
              *unint64_t v524 = *v525;
              unint64_t v526 = ((unint64_t)v524 + 19) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v527 = ((unint64_t)v525 + 19) & 0xFFFFFFFFFFFFFFF8;
              uint64_t v528 = *(void *)v527;
              *(unsigned char *)(v526 + 8) = *(unsigned char *)(v527 + 8);
              *(void *)unint64_t v526 = v528;
              *(unsigned char *)(v526 + 9) = *(unsigned char *)(v527 + 9);
              unint64_t v529 = (v526 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              unint64_t v530 = (v527 + 13) & 0xFFFFFFFFFFFFFFFCLL;
              LODWORD(v521) = *(_DWORD *)v530;
              *(unsigned char *)(v529 + 4) = *(unsigned char *)(v530 + 4);
              *(_DWORD *)unint64_t v529 = v521;
              *(_OWORD *)((v526 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v527 + 25) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v531 = v258 + v2049;
              long long v532 = *(_OWORD *)(v259 + v2049 + 112);
              long long v534 = *(_OWORD *)(v259 + v2049 + 64);
              long long v533 = *(_OWORD *)(v259 + v2049 + 80);
              *(_OWORD *)(v531 + 96) = *(_OWORD *)(v259 + v2049 + 96);
              *(_OWORD *)(v531 + 112) = v532;
              *(_OWORD *)(v531 + 64) = v534;
              *(_OWORD *)(v531 + 80) = v533;
              long long v535 = *(_OWORD *)(v259 + v2049 + 176);
              long long v537 = *(_OWORD *)(v259 + v2049 + 128);
              long long v536 = *(_OWORD *)(v259 + v2049 + 144);
              *(_OWORD *)(v531 + 160) = *(_OWORD *)(v259 + v2049 + 160);
              *(_OWORD *)(v531 + 176) = v535;
              *(_OWORD *)(v531 + 128) = v537;
              *(_OWORD *)(v531 + 144) = v536;
              long long v539 = *(_OWORD *)(v259 + v2049 + 208);
              long long v538 = *(_OWORD *)(v259 + v2049 + 224);
              long long v540 = *(_OWORD *)(v259 + v2049 + 192);
              *(void *)(v531 + 240) = *(void *)(v259 + v2049 + 240);
              *(_OWORD *)(v531 + 208) = v539;
              *(_OWORD *)(v531 + 224) = v538;
              *(_OWORD *)(v531 + 192) = v540;
              long long v541 = *(_OWORD *)(v259 + v2049);
              long long v542 = *(_OWORD *)(v259 + v2049 + 16);
              long long v543 = *(_OWORD *)(v259 + v2049 + 48);
              *(_OWORD *)(v531 + 32) = *(_OWORD *)(v259 + v2049 + 32);
              *(_OWORD *)(v531 + 48) = v543;
              *(_OWORD *)unint64_t v531 = v541;
              *(_OWORD *)(v531 + 16) = v542;
              long long v544 = (_OWORD *)((v258 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v545 = (long long *)((v259 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
              long long v546 = *v545;
              *(_OWORD *)((char *)v544 + 9) = *(long long *)((char *)v545 + 9);
              *long long v544 = v546;
              unint64_t v547 = (v258 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v548 = (v259 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
              long long v549 = *(_OWORD *)v548;
              *(unsigned char *)(v547 + 16) = *(unsigned char *)(v548 + 16);
              *(_OWORD *)unint64_t v547 = v549;
              uint64_t v550 = (void *)((v258 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v551 = (void *)((v259 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v550 = *v551;
              *(_OWORD *)(((unint64_t)v550 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v551
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              if (v247 > 3) {
                goto LABEL_677;
              }
              unsigned int v552 = ((1 << (8 * v247)) + 5) >> (8 * v247);
              if (v552 > 0xFFD6)
              {
                *(_DWORD *)unint64_t v68 = 8;
              }
              else if (v552 <= 0xD6)
              {
LABEL_677:
                *unint64_t v68 = 8;
              }
              else
              {
                *(_WORD *)unint64_t v68 = 8;
              }
              return a1;
            case 9u:
              unsigned int v276 = v77[v63];
              unsigned int v277 = v276 - 2;
              if (v276 < 2)
              {
                unsigned int v280 = v67;
                uint64_t v279 = v2074;
                uint64_t v281 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v278 = v63;
                }
                else {
                  uint64_t v278 = 4;
                }
                uint64_t v279 = v2074;
                unsigned int v280 = v67;
                uint64_t v281 = v2054;
                switch(v278)
                {
                  case 1:
                    int v282 = *v77;
                    goto LABEL_957;
                  case 2:
                    int v282 = *(unsigned __int16 *)v77;
                    goto LABEL_957;
                  case 3:
                    int v282 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_957;
                  case 4:
                    int v282 = *(_DWORD *)v77;
LABEL_957:
                    if (v63 < 4) {
                      unsigned int v276 = (v282 | (v277 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v276 = v282 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v684 = v276 == 1;
              if (v276 == 1) {
                uint64_t v685 = v279;
              }
              else {
                uint64_t v685 = v281;
              }
              if (v276 == 1) {
                uint64_t v686 = v72;
              }
              else {
                uint64_t v686 = v73;
              }
              unint64_t v687 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v685 + 32))(a1, v77, v686);
              a1[v687] = v684;
              if (v280 > 3) {
                goto LABEL_967;
              }
              unsigned int v688 = ((1 << (8 * v280)) + 5) >> (8 * v280);
              if (v688 > 0xFFD6)
              {
                int v572 = 9;
                goto LABEL_2275;
              }
              if (v688 <= 0xD6) {
LABEL_967:
              }
                *unint64_t v68 = 9;
              else {
                *(_WORD *)unint64_t v68 = 9;
              }
              return a1;
            case 0xAu:
              unsigned int v283 = v77[v63];
              unsigned int v284 = v283 - 2;
              if (v283 < 2)
              {
                uint64_t v286 = v2074;
                uint64_t v287 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v285 = v63;
                }
                else {
                  uint64_t v285 = 4;
                }
                uint64_t v286 = v2074;
                uint64_t v287 = v2054;
                switch(v285)
                {
                  case 1:
                    int v288 = *a2;
                    goto LABEL_975;
                  case 2:
                    int v288 = *(unsigned __int16 *)a2;
                    goto LABEL_975;
                  case 3:
                    int v288 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    goto LABEL_975;
                  case 4:
                    int v288 = *(_DWORD *)a2;
LABEL_975:
                    if (v63 < 4) {
                      unsigned int v283 = (v288 | (v284 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v283 = v288 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v689 = v67;
              BOOL v690 = v283 == 1;
              if (v283 == 1) {
                uint64_t v691 = v286;
              }
              else {
                uint64_t v691 = v287;
              }
              if (v283 == 1) {
                uint64_t v692 = v72;
              }
              else {
                uint64_t v692 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v691 + 32))(a1, a2, v692);
              a1[v2070] = v690;
              unint64_t v693 = (char *)((unint64_t)&a1[v2011] & v2018);
              unint64_t v694 = (unsigned __int8 *)((unint64_t)&a2[v2011] & v2018);
              unsigned int v695 = v694[v2070];
              if (v695 > 1)
              {
                size_t v696 = v2071;
                memcpy(v693, v694, v2071);
              }
              else if (v695 == 1)
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v286 + 32))(v693, v694, v72);
                size_t v696 = v2071;
                v693[v2070] = 1;
              }
              else
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v287 + 32))(v693, v694, v73);
                size_t v696 = v2071;
                v693[v2070] = 0;
              }
              unint64_t v697 = &v693[v696];
              *unint64_t v697 = v694[v696];
              v697[1] = v694[v696 + 1];
              if (v689 > 3) {
                goto LABEL_990;
              }
              unsigned int v698 = ((1 << (8 * v689)) + 5) >> (8 * v689);
              if (v698 > 0xFFD6)
              {
                int v572 = 10;
                goto LABEL_2275;
              }
              if (v698 <= 0xD6) {
LABEL_990:
              }
                *unint64_t v68 = 10;
              else {
                *(_WORD *)unint64_t v68 = 10;
              }
              return a1;
            case 0xBu:
              unsigned int v289 = v77[v63];
              unsigned int v290 = v289 - 2;
              if (v289 < 2)
              {
                uint64_t v292 = v2074;
                uint64_t v293 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v291 = v63;
                }
                else {
                  uint64_t v291 = 4;
                }
                uint64_t v292 = v2074;
                uint64_t v293 = v2054;
                switch(v291)
                {
                  case 1:
                    int v294 = *a2;
                    goto LABEL_998;
                  case 2:
                    int v294 = *(unsigned __int16 *)a2;
                    goto LABEL_998;
                  case 3:
                    int v294 = *(unsigned __int16 *)a2 | (a2[2] << 16);
                    goto LABEL_998;
                  case 4:
                    int v294 = *(_DWORD *)a2;
LABEL_998:
                    if (v63 < 4) {
                      unsigned int v289 = (v294 | (v290 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v289 = v294 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v699 = v67;
              BOOL v700 = v289 == 1;
              if (v289 == 1) {
                uint64_t v701 = v292;
              }
              else {
                uint64_t v701 = v293;
              }
              if (v289 == 1) {
                uint64_t v702 = v72;
              }
              else {
                uint64_t v702 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v701 + 32))(a1, a2, v702);
              a1[v2070] = v700;
              uint64_t v703 = (char *)((unint64_t)&a1[v2011] & v2018);
              int v704 = (unsigned __int8 *)((unint64_t)&a2[v2011] & v2018);
              unsigned int v705 = v704[v2070];
              if (v705 > 1)
              {
                size_t v706 = v2071;
                memcpy(v703, v704, v2071);
              }
              else if (v705 == 1)
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v292 + 32))(v703, v704, v72);
                size_t v706 = v2071;
                v703[v2070] = 1;
              }
              else
              {
                (*(void (**)(char *, unsigned __int8 *, uint64_t))(v293 + 32))(v703, v704, v73);
                size_t v706 = v2071;
                v703[v2070] = 0;
              }
              size_t v707 = &v703[v706];
              *size_t v707 = v704[v706];
              v707[1] = v704[v706 + 1];
              if (v699 > 3) {
                goto LABEL_1013;
              }
              unsigned int v708 = ((1 << (8 * v699)) + 5) >> (8 * v699);
              if (v708 > 0xFFD6)
              {
                int v572 = 11;
                goto LABEL_2275;
              }
              if (v708 <= 0xD6) {
LABEL_1013:
              }
                *unint64_t v68 = 11;
              else {
                *(_WORD *)unint64_t v68 = 11;
              }
              return a1;
            case 0xCu:
              unsigned int v295 = v77[v63];
              unsigned int v296 = v295 - 2;
              if (v295 < 2)
              {
                unsigned int v299 = v67;
                uint64_t v298 = v2074;
                uint64_t v300 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v297 = v63;
                }
                else {
                  uint64_t v297 = 4;
                }
                uint64_t v298 = v2074;
                unsigned int v299 = v67;
                uint64_t v300 = v2054;
                switch(v297)
                {
                  case 1:
                    int v301 = *v77;
                    goto LABEL_1021;
                  case 2:
                    int v301 = *(unsigned __int16 *)v77;
                    goto LABEL_1021;
                  case 3:
                    int v301 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1021;
                  case 4:
                    int v301 = *(_DWORD *)v77;
LABEL_1021:
                    if (v63 < 4) {
                      unsigned int v295 = (v301 | (v296 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v295 = v301 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v709 = v295 == 1;
              if (v295 == 1) {
                uint64_t v710 = v298;
              }
              else {
                uint64_t v710 = v300;
              }
              if (v295 == 1) {
                uint64_t v711 = v72;
              }
              else {
                uint64_t v711 = v73;
              }
              unint64_t v712 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v710 + 32))(a1, v77, v711);
              a1[v712] = v709;
              a1[v2071] = v77[v2071];
              *(void *)((unint64_t)&a1[v2041 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2041 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v299 > 3) {
                goto LABEL_1031;
              }
              unsigned int v713 = ((1 << (8 * v299)) + 5) >> (8 * v299);
              if (v713 > 0xFFD6)
              {
                int v572 = 12;
                goto LABEL_2275;
              }
              if (v713 <= 0xD6) {
LABEL_1031:
              }
                *unint64_t v68 = 12;
              else {
                *(_WORD *)unint64_t v68 = 12;
              }
              return a1;
            case 0xDu:
              unsigned int v302 = v77[v63];
              unsigned int v303 = v302 - 2;
              if (v302 < 2)
              {
                unsigned int v306 = v67;
                uint64_t v305 = v2074;
                uint64_t v307 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v304 = v63;
                }
                else {
                  uint64_t v304 = 4;
                }
                uint64_t v305 = v2074;
                unsigned int v306 = v67;
                uint64_t v307 = v2054;
                switch(v304)
                {
                  case 1:
                    int v308 = *v77;
                    goto LABEL_1039;
                  case 2:
                    int v308 = *(unsigned __int16 *)v77;
                    goto LABEL_1039;
                  case 3:
                    int v308 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1039;
                  case 4:
                    int v308 = *(_DWORD *)v77;
LABEL_1039:
                    if (v63 < 4) {
                      unsigned int v302 = (v308 | (v303 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v302 = v308 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v714 = v302 == 1;
              if (v302 == 1) {
                uint64_t v715 = v305;
              }
              else {
                uint64_t v715 = v307;
              }
              if (v302 == 1) {
                uint64_t v716 = v72;
              }
              else {
                uint64_t v716 = v73;
              }
              unint64_t v717 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v715 + 32))(a1, v77, v716);
              a1[v717] = v714;
              a1[v2071] = v77[v2071];
              if (v306 > 3) {
                goto LABEL_1049;
              }
              unsigned int v718 = ((1 << (8 * v306)) + 5) >> (8 * v306);
              if (v718 > 0xFFD6)
              {
                int v572 = 13;
                goto LABEL_2275;
              }
              if (v718 <= 0xD6) {
LABEL_1049:
              }
                *unint64_t v68 = 13;
              else {
                *(_WORD *)unint64_t v68 = 13;
              }
              return a1;
            case 0xEu:
              unsigned int v309 = v77[v63];
              unsigned int v310 = v309 - 2;
              if (v309 < 2)
              {
                unsigned int v313 = v67;
                uint64_t v312 = v2074;
                uint64_t v314 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v311 = v63;
                }
                else {
                  uint64_t v311 = 4;
                }
                uint64_t v312 = v2074;
                unsigned int v313 = v67;
                uint64_t v314 = v2054;
                switch(v311)
                {
                  case 1:
                    int v315 = *v77;
                    goto LABEL_1057;
                  case 2:
                    int v315 = *(unsigned __int16 *)v77;
                    goto LABEL_1057;
                  case 3:
                    int v315 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1057;
                  case 4:
                    int v315 = *(_DWORD *)v77;
LABEL_1057:
                    if (v63 < 4) {
                      unsigned int v309 = (v315 | (v310 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v309 = v315 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v719 = v309 == 1;
              if (v309 == 1) {
                uint64_t v720 = v312;
              }
              else {
                uint64_t v720 = v314;
              }
              if (v309 == 1) {
                uint64_t v721 = v72;
              }
              else {
                uint64_t v721 = v73;
              }
              unint64_t v722 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v720 + 32))(a1, v77, v721);
              a1[v722] = v719;
              *(void *)((unint64_t)&a1[v2071 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2071 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v313 > 3) {
                goto LABEL_1067;
              }
              unsigned int v723 = ((1 << (8 * v313)) + 5) >> (8 * v313);
              if (v723 > 0xFFD6)
              {
                int v572 = 14;
                goto LABEL_2275;
              }
              if (v723 <= 0xD6) {
LABEL_1067:
              }
                *unint64_t v68 = 14;
              else {
                *(_WORD *)unint64_t v68 = 14;
              }
              return a1;
            case 0xFu:
              unsigned int v316 = v77[v63];
              unsigned int v317 = v316 - 2;
              if (v316 < 2)
              {
                unsigned int v320 = v67;
                uint64_t v319 = v2074;
                uint64_t v321 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v318 = v63;
                }
                else {
                  uint64_t v318 = 4;
                }
                uint64_t v319 = v2074;
                unsigned int v320 = v67;
                uint64_t v321 = v2054;
                switch(v318)
                {
                  case 1:
                    int v322 = *v77;
                    goto LABEL_1075;
                  case 2:
                    int v322 = *(unsigned __int16 *)v77;
                    goto LABEL_1075;
                  case 3:
                    int v322 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1075;
                  case 4:
                    int v322 = *(_DWORD *)v77;
LABEL_1075:
                    if (v63 < 4) {
                      unsigned int v316 = (v322 | (v317 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v316 = v322 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v724 = v316 == 1;
              if (v316 == 1) {
                uint64_t v725 = v319;
              }
              else {
                uint64_t v725 = v321;
              }
              if (v316 == 1) {
                uint64_t v726 = v72;
              }
              else {
                uint64_t v726 = v73;
              }
              unint64_t v727 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v725 + 32))(a1, v77, v726);
              a1[v727] = v724;
              *(void *)((unint64_t)&a1[v2071 + 7] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&v77[v2071 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (v320 > 3) {
                goto LABEL_1085;
              }
              unsigned int v728 = ((1 << (8 * v320)) + 5) >> (8 * v320);
              if (v728 > 0xFFD6)
              {
                int v572 = 15;
                goto LABEL_2275;
              }
              if (v728 <= 0xD6) {
LABEL_1085:
              }
                *unint64_t v68 = 15;
              else {
                *(_WORD *)unint64_t v68 = 15;
              }
              return a1;
            case 0x10u:
              long long v323 = *((_OWORD *)v77 + 1);
              *(_OWORD *)a1 = *(_OWORD *)v77;
              *((_OWORD *)a1 + 1) = v323;
              *((_OWORD *)a1 + 2) = *((_OWORD *)v77 + 2);
              *((void *)a1 + 6) = *((void *)v77 + 6);
              if (v67 > 3) {
                goto LABEL_472;
              }
              unsigned int v465 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v465 > 0xFFD6)
              {
                int v572 = 16;
                goto LABEL_2275;
              }
              if (v465 <= 0xD6) {
LABEL_472:
              }
                *unint64_t v68 = 16;
              else {
                *(_WORD *)unint64_t v68 = 16;
              }
              return a1;
            case 0x11u:
              unsigned int v324 = v77[v63];
              unsigned int v325 = v324 - 2;
              if (v324 < 2)
              {
                unsigned int v328 = v67;
                uint64_t v327 = v2074;
                uint64_t v329 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v326 = v63;
                }
                else {
                  uint64_t v326 = 4;
                }
                uint64_t v327 = v2074;
                unsigned int v328 = v67;
                uint64_t v329 = v2054;
                switch(v326)
                {
                  case 1:
                    int v330 = *v77;
                    goto LABEL_1093;
                  case 2:
                    int v330 = *(unsigned __int16 *)v77;
                    goto LABEL_1093;
                  case 3:
                    int v330 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1093;
                  case 4:
                    int v330 = *(_DWORD *)v77;
LABEL_1093:
                    if (v63 < 4) {
                      unsigned int v324 = (v330 | (v325 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v324 = v330 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v729 = v324 == 1;
              if (v324 == 1) {
                uint64_t v730 = v327;
              }
              else {
                uint64_t v730 = v329;
              }
              if (v324 == 1) {
                uint64_t v731 = v72;
              }
              else {
                uint64_t v731 = v73;
              }
              unint64_t v732 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v730 + 32))(a1, v77, v731);
              a1[v732] = v729;
              if (v328 > 3) {
                goto LABEL_1103;
              }
              unsigned int v733 = ((1 << (8 * v328)) + 5) >> (8 * v328);
              if (v733 > 0xFFD6)
              {
                int v572 = 17;
                goto LABEL_2275;
              }
              if (v733 <= 0xD6) {
LABEL_1103:
              }
                *unint64_t v68 = 17;
              else {
                *(_WORD *)unint64_t v68 = 17;
              }
              return a1;
            case 0x12u:
              unsigned int v331 = v67;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v2074 + 32))((unint64_t)&a1[v1977] & v2019, (unint64_t)&v77[v1977] & v2019, v72);
              if (v331 > 3) {
                goto LABEL_480;
              }
              unsigned int v466 = ((1 << (8 * v331)) + 5) >> (8 * v331);
              if (v466 > 0xFFD6)
              {
                int v572 = 18;
                goto LABEL_2275;
              }
              if (v466 <= 0xD6) {
LABEL_480:
              }
                *unint64_t v68 = 18;
              else {
                *(_WORD *)unint64_t v68 = 18;
              }
              return a1;
            case 0x13u:
              *a1 = *v77;
              uint64_t v332 = (unint64_t)&a1[v2061 + 1] & v2018;
              unsigned int v333 = (unsigned __int8 *)((unint64_t)&v77[v2061 + 1] & v2018);
              unsigned int v334 = v333[v63];
              unsigned int v335 = v334 - 2;
              if (v334 < 2)
              {
                unsigned int v338 = v67;
                uint64_t v337 = v2074;
                uint64_t v339 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v336 = v63;
                }
                else {
                  uint64_t v336 = 4;
                }
                uint64_t v337 = v2074;
                unsigned int v338 = v67;
                uint64_t v339 = v2054;
                switch(v336)
                {
                  case 1:
                    int v340 = *v333;
                    goto LABEL_1111;
                  case 2:
                    int v340 = *(unsigned __int16 *)v333;
                    goto LABEL_1111;
                  case 3:
                    int v340 = *(unsigned __int16 *)v333 | (v333[2] << 16);
                    goto LABEL_1111;
                  case 4:
                    int v340 = *(_DWORD *)v333;
LABEL_1111:
                    if (v63 < 4) {
                      unsigned int v334 = (v340 | (v335 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v334 = v340 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v734 = v334 == 1;
              if (v334 == 1) {
                uint64_t v735 = v337;
              }
              else {
                uint64_t v735 = v339;
              }
              unint64_t v736 = v63;
              (*(void (**)(uint64_t))(v735 + 32))(v332);
              *(unsigned char *)(v332 + v736) = v734;
              if (v338 > 3) {
                goto LABEL_1118;
              }
              unsigned int v737 = ((1 << (8 * v338)) + 5) >> (8 * v338);
              if (v737 > 0xFFD6)
              {
                int v572 = 19;
                goto LABEL_2275;
              }
              if (v737 <= 0xD6) {
LABEL_1118:
              }
                *unint64_t v68 = 19;
              else {
                *(_WORD *)unint64_t v68 = 19;
              }
              return a1;
            case 0x14u:
              *(void *)a1 = *(void *)v77;
              if (v67 > 3) {
                goto LABEL_488;
              }
              unsigned int v467 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v467 > 0xFFD6)
              {
                int v572 = 20;
                goto LABEL_2275;
              }
              if (v467 <= 0xD6) {
LABEL_488:
              }
                *unint64_t v68 = 20;
              else {
                *(_WORD *)unint64_t v68 = 20;
              }
              return a1;
            case 0x15u:
              *(void *)a1 = *(void *)v77;
              if (v67 > 3) {
                goto LABEL_490;
              }
              unsigned int v468 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v468 > 0xFFD6)
              {
                int v572 = 21;
                goto LABEL_2275;
              }
              if (v468 <= 0xD6) {
LABEL_490:
              }
                *unint64_t v68 = 21;
              else {
                *(_WORD *)unint64_t v68 = 21;
              }
              return a1;
            case 0x16u:
              *a1 = *v77;
              if (v67 > 3) {
                goto LABEL_492;
              }
              unsigned int v469 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v469 > 0xFFD6)
              {
                int v572 = 22;
                goto LABEL_2275;
              }
              if (v469 <= 0xD6) {
LABEL_492:
              }
                *unint64_t v68 = 22;
              else {
                *(_WORD *)unint64_t v68 = 22;
              }
              return a1;
            case 0x17u:
              *a1 = *v77;
              if (v67 > 3) {
                goto LABEL_494;
              }
              unsigned int v470 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              if (v470 > 0xFFD6)
              {
                int v572 = 23;
                goto LABEL_2275;
              }
              if (v470 <= 0xD6) {
LABEL_494:
              }
                *unint64_t v68 = 23;
              else {
                *(_WORD *)unint64_t v68 = 23;
              }
              return a1;
            case 0x18u:
              unsigned int v341 = v77[v63];
              unsigned int v342 = v341 - 2;
              if (v341 < 2)
              {
                unsigned int v345 = v67;
                uint64_t v344 = v2074;
                uint64_t v346 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v343 = v63;
                }
                else {
                  uint64_t v343 = 4;
                }
                uint64_t v344 = v2074;
                unsigned int v345 = v67;
                uint64_t v346 = v2054;
                switch(v343)
                {
                  case 1:
                    int v347 = *v77;
                    goto LABEL_1126;
                  case 2:
                    int v347 = *(unsigned __int16 *)v77;
                    goto LABEL_1126;
                  case 3:
                    int v347 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1126;
                  case 4:
                    int v347 = *(_DWORD *)v77;
LABEL_1126:
                    if (v63 < 4) {
                      unsigned int v341 = (v347 | (v342 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v341 = v347 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v738 = v341 == 1;
              if (v341 == 1) {
                uint64_t v739 = v344;
              }
              else {
                uint64_t v739 = v346;
              }
              if (v341 == 1) {
                uint64_t v740 = v72;
              }
              else {
                uint64_t v740 = v73;
              }
              unint64_t v741 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v739 + 32))(a1, v77, v740);
              a1[v741] = v738;
              if (v345 > 3) {
                goto LABEL_1136;
              }
              unsigned int v742 = ((1 << (8 * v345)) + 5) >> (8 * v345);
              if (v742 > 0xFFD6)
              {
                int v572 = 24;
                goto LABEL_2275;
              }
              if (v742 <= 0xD6) {
LABEL_1136:
              }
                *unint64_t v68 = 24;
              else {
                *(_WORD *)unint64_t v68 = 24;
              }
              return a1;
            case 0x19u:
              unsigned int v348 = v77[v63];
              unsigned int v349 = v348 - 2;
              if (v348 < 2)
              {
                unsigned int v352 = v67;
                uint64_t v351 = v2074;
                uint64_t v353 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v350 = v63;
                }
                else {
                  uint64_t v350 = 4;
                }
                uint64_t v351 = v2074;
                unsigned int v352 = v67;
                uint64_t v353 = v2054;
                switch(v350)
                {
                  case 1:
                    int v354 = *v77;
                    goto LABEL_1144;
                  case 2:
                    int v354 = *(unsigned __int16 *)v77;
                    goto LABEL_1144;
                  case 3:
                    int v354 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1144;
                  case 4:
                    int v354 = *(_DWORD *)v77;
LABEL_1144:
                    if (v63 < 4) {
                      unsigned int v348 = (v354 | (v349 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v348 = v354 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v743 = v348 == 1;
              if (v348 == 1) {
                uint64_t v744 = v351;
              }
              else {
                uint64_t v744 = v353;
              }
              if (v348 == 1) {
                uint64_t v745 = v72;
              }
              else {
                uint64_t v745 = v73;
              }
              unint64_t v746 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v744 + 32))(a1, v77, v745);
              a1[v746] = v743;
              if (v352 > 3) {
                goto LABEL_1154;
              }
              unsigned int v747 = ((1 << (8 * v352)) + 5) >> (8 * v352);
              if (v747 > 0xFFD6)
              {
                int v572 = 25;
                goto LABEL_2275;
              }
              if (v747 <= 0xD6) {
LABEL_1154:
              }
                *unint64_t v68 = 25;
              else {
                *(_WORD *)unint64_t v68 = 25;
              }
              return a1;
            case 0x1Au:
              unsigned int v355 = v77[v63];
              unsigned int v356 = v355 - 2;
              if (v355 < 2)
              {
                unsigned int v359 = v67;
                uint64_t v358 = v2074;
                uint64_t v360 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v357 = v63;
                }
                else {
                  uint64_t v357 = 4;
                }
                uint64_t v358 = v2074;
                unsigned int v359 = v67;
                uint64_t v360 = v2054;
                switch(v357)
                {
                  case 1:
                    int v361 = *v77;
                    goto LABEL_1162;
                  case 2:
                    int v361 = *(unsigned __int16 *)v77;
                    goto LABEL_1162;
                  case 3:
                    int v361 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1162;
                  case 4:
                    int v361 = *(_DWORD *)v77;
LABEL_1162:
                    if (v63 < 4) {
                      unsigned int v355 = (v361 | (v356 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v355 = v361 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v748 = v355 == 1;
              if (v355 == 1) {
                uint64_t v749 = v358;
              }
              else {
                uint64_t v749 = v360;
              }
              if (v355 == 1) {
                uint64_t v750 = v72;
              }
              else {
                uint64_t v750 = v73;
              }
              unint64_t v751 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v749 + 32))(a1, v77, v750);
              a1[v751] = v748;
              if (v359 > 3) {
                goto LABEL_1172;
              }
              unsigned int v752 = ((1 << (8 * v359)) + 5) >> (8 * v359);
              if (v752 > 0xFFD6)
              {
                int v572 = 26;
                goto LABEL_2275;
              }
              if (v752 <= 0xD6) {
LABEL_1172:
              }
                *unint64_t v68 = 26;
              else {
                *(_WORD *)unint64_t v68 = 26;
              }
              return a1;
            case 0x1Bu:
              unsigned int v362 = v77[v64];
              unsigned int v363 = v362 - 2;
              if (v362 < 2)
              {
                uint64_t v365 = v2074;
              }
              else
              {
                if (v64 <= 3) {
                  uint64_t v364 = v64;
                }
                else {
                  uint64_t v364 = 4;
                }
                uint64_t v365 = v2074;
                switch(v364)
                {
                  case 1:
                    int v366 = *v77;
                    goto LABEL_1180;
                  case 2:
                    int v366 = *(unsigned __int16 *)v77;
                    goto LABEL_1180;
                  case 3:
                    int v366 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1180;
                  case 4:
                    int v366 = *(_DWORD *)v77;
LABEL_1180:
                    if (v64 < 4) {
                      unsigned int v362 = (v366 | (v363 << (8 * v64))) + 2;
                    }
                    else {
                      unsigned int v362 = v366 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unint64_t v1932 = v64;
              if (v362 == 1)
              {
                unsigned int v753 = v77[v1967];
                unsigned int v754 = v753 - 8;
                if (v753 >= 8)
                {
                  if (v1967 <= 3) {
                    uint64_t v755 = v1967;
                  }
                  else {
                    uint64_t v755 = 4;
                  }
                  switch(v755)
                  {
                    case 1:
                      int v756 = *v77;
                      goto LABEL_1698;
                    case 2:
                      int v756 = *(unsigned __int16 *)v77;
                      goto LABEL_1698;
                    case 3:
                      int v756 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                      goto LABEL_1698;
                    case 4:
                      int v756 = *(_DWORD *)v77;
LABEL_1698:
                      if (v1967 < 4) {
                        unsigned int v753 = (v756 | (v754 << (8 * v1967))) + 8;
                      }
                      else {
                        unsigned int v753 = v756 + 8;
                      }
                      break;
                    default:
                      break;
                  }
                }
                unsigned int v1217 = v67;
                switch(v753)
                {
                  case 1u:
                    size_t v1928 = v68;
                    v1222 = v77;
                    char v1223 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32);
                    v1223(a1, v1222, v72);
                    uint64_t v2072 = (void *)((unint64_t)&a1[v1949] & v1974);
                    unint64_t v1224 = (void *)((unint64_t)&v1222[v1949] & v1974);
                    uint64_t v2068 = v1224;
                    if (v1979 == v1984)
                    {
                      int v1225 = (*(uint64_t (**)(void *))(v365 + 48))(v1224);
                    }
                    else
                    {
                      unint64_t v1308 = ((unint64_t)v1224 + v2003) & v2019;
                      unint64_t v1309 = (v1975 + v1308) & v2020;
                      if (v1983 != v1984)
                      {
                        unint64_t v1351 = v1309 + v2009;
                        uint64_t v1352 = v2054;
                        unint64_t v1353 = v2021 + 7;
                        if ((v1961 & 0x80000000) != 0)
                        {
                          uint64_t v1413 = (v2013 + ((v2050 + v1351) & v2012)) & v2014;
                          if (v1996 <= 0x7FFFFFFD)
                          {
                            unint64_t v1922 = *(void *)(((v1978 + ((v2010 + v1413) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v1922 >= 0xFFFFFFFF) {
                              LODWORD(v1922) = -1;
                            }
                            if ((v1922 + 1) >= 2) {
                              goto LABEL_2187;
                            }
                            goto LABEL_2190;
                          }
                          int v1225 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1413, v1996, v2017);
                        }
                        else
                        {
                          unint64_t v1354 = *(void *)(v1351 + 8);
                          if (v1354 >= 0xFFFFFFFF) {
                            LODWORD(v1354) = -1;
                          }
                          int v1225 = v1354 + 1;
                        }
                        goto LABEL_2186;
                      }
                      if (v1981 == v1983)
                      {
                        int v1225 = (*(uint64_t (**)(unint64_t))(v2000 + 48))((v1975 + v1308) & v2020);
                      }
                      else
                      {
                        long long v1390 = (unint64_t *)((v2002 + v1309) & 0xFFFFFFFFFFFFFFF8);
                        if (v1966 <= 0x7FFFFFFE)
                        {
                          unint64_t v1391 = *v1390;
                          if (v1391 >= 0xFFFFFFFF) {
                            LODWORD(v1391) = -1;
                          }
                          uint64_t v1352 = v2054;
                          unint64_t v1353 = v2021 + 7;
                          if ((v1391 + 1) >= 2) {
                            goto LABEL_2187;
                          }
                          goto LABEL_2190;
                        }
                        int v1225 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1390
                                                                                          + v1991) & v1989);
                      }
                    }
                    uint64_t v1352 = v2054;
                    unint64_t v1353 = v2021 + 7;
LABEL_2186:
                    if (v1225)
                    {
LABEL_2187:
                      unint64_t v1552 = (unint64_t)&a1[v1949] & v1974;
                      memcpy(v2072, v1224, v66);
                      size_t v1553 = v2053;
                      uint64_t v1554 = v1963;
LABEL_2188:
                      size_t v1555 = v1553;
                      goto LABEL_2194;
                    }
                    unint64_t v1308 = ((unint64_t)v1224 + v2003) & v2019;
                    unint64_t v1309 = (v1975 + v1308) & v2020;
LABEL_2190:
                    v1223((unsigned __int8 *)v2072, (unsigned __int8 *)v1224, v72);
                    unint64_t v1556 = ((unint64_t)v2072 + v2003) & v2019;
                    v1223((unsigned __int8 *)v1556, (unsigned __int8 *)v1308, v72);
                    unint64_t v1557 = (v1975 + v1556) & v2020;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v1557, v1309, v1999);
                    long long v1558 = (void *)((v2002 + v1557) & 0xFFFFFFFFFFFFFFF8);
                    v1559 = (void *)((v2002 + v1309) & 0xFFFFFFFFFFFFFFF8);
                    void *v1558 = *v1559;
                    unint64_t v1560 = ((unint64_t)v1558 + v1991) & v1989;
                    unint64_t v1561 = ((unint64_t)v1559 + v1991) & v1989;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1560, v1561, v1994);
                    size_t v1562 = (void *)((v1987 + v1560) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1563 = (void *)((v1987 + v1561) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1562 = *v1563;
                    *(_OWORD *)(((unint64_t)v1562 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1563 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1557 + v2009) = *(_OWORD *)(v1309 + v2009);
                    unint64_t v1564 = (v2050 + v1557 + v2009) & v2012;
                    unint64_t v1565 = (v2050 + v1309 + v2009) & v2012;
                    *(unsigned char *)unint64_t v1564 = *(unsigned char *)v1565;
                    uint64_t v1566 = v1564 | 4;
                    int v1567 = *(_DWORD *)(v1565 | 4);
                    *(unsigned char *)(v1566 + 4) = *(unsigned char *)((v1565 | 4) + 4);
                    *(_DWORD *)uint64_t v1566 = v1567;
                    *(_WORD *)(v1564 + 10) = *(_WORD *)(v1565 + 0xA);
                    unint64_t v1568 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
                    v1568((v2013 + v1564) & v2014, (v2013 + v1565) & v2014, v2017);
                    unint64_t v1569 = (v2010 + ((v2013 + v1564) & v2014)) & v2014;
                    unint64_t v1570 = (v2010 + ((v2013 + v1565) & v2014)) & v2014;
                    v1568(v1569, v1570, v2017);
                    size_t v1571 = (unsigned char *)(v1569 + v2006);
                    *size_t v1571 = *(unsigned char *)(v1570 + v2006);
                    v1571[1] = *(unsigned char *)(v1570 + v2006 + 1);
                    v1571[2] = *(unsigned char *)(v1570 + v2006 + 2);
                    v1571[3] = *(unsigned char *)(v1570 + v2006 + 3);
                    v1571[4] = *(unsigned char *)(v1570 + v2006 + 4);
                    unint64_t v1572 = (v1569 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1573 = (v1570 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1572 = *(_OWORD *)v1573;
                    *(unsigned char *)(v1572 + 16) = *(unsigned char *)(v1573 + 16);
                    *(unsigned char *)(v1572 + 17) = *(unsigned char *)(v1573 + 17);
                    *(unsigned char *)(v1572 + 18) = *(unsigned char *)(v1573 + 18);
                    *(unsigned char *)(v1572 + 19) = *(unsigned char *)(v1573 + 19);
                    unint64_t v1574 = (v1572 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1575 = (v1573 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1574 = *(void *)v1575;
                    *(unsigned char *)(v1574 + 8) = *(unsigned char *)(v1575 + 8);
                    *(unsigned char *)(v1574 + 9) = *(unsigned char *)(v1575 + 9);
                    *(unsigned char *)(v1574 + 10) = *(unsigned char *)(v1575 + 10);
                    *(unsigned char *)(v1574 + 11) = *(unsigned char *)(v1575 + 11);
                    *(unsigned char *)(v1574 + 12) = *(unsigned char *)(v1575 + 12);
                    uint64_t v1576 = (void *)((v1573 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1577 = (void *)((v1572 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1577 = *v1576;
                    unint64_t v1578 = ((unint64_t)v1577 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1579 = ((unint64_t)v1576 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1578 = *(void *)v1579;
                    *(unsigned char *)(v1578 + 8) = *(unsigned char *)(v1579 + 8);
                    *(unsigned char *)(v1578 + 9) = *(unsigned char *)(v1579 + 9);
                    uint64_t v1580 = (void *)((v2007 + v1578) & v2014);
                    uint64_t v1581 = (const void *)((v2007 + v1579) & v2014);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1581, 1, v2017))
                    {
                      size_t v1553 = v2053;
                      memcpy(v1580, v1581, v2053);
                    }
                    else
                    {
                      v1568((unint64_t)v1580, (unint64_t)v1581, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1580, 0, 1, v2017);
                      size_t v1553 = v2053;
                    }
                    uint64_t v1352 = v2054;
                    uint64_t v1554 = v1963;
                    unint64_t v1353 = v2021 + 7;
                    uint64_t v1582 = (void *)(((unint64_t)v1580 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1583 = (void *)(((unint64_t)v1581 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    void *v1582 = *v1583;
                    unint64_t v1584 = ((unint64_t)v1582 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1585 = ((unint64_t)v1583 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1586 = *(void *)v1585;
                    *(unsigned char *)(v1584 + 8) = *(unsigned char *)(v1585 + 8);
                    *(void *)unint64_t v1584 = v1586;
                    unint64_t v1587 = (void *)(((unint64_t)v1582 + 31) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1588 = (void *)(((unint64_t)v1583 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1587 = *v1588;
                    size_t v1589 = (_OWORD *)(((unint64_t)v1587 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1590 = (_OWORD *)(((unint64_t)v1588 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1589 = *v1590;
                    unint64_t v1591 = ((unint64_t)v1589 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1592 = ((unint64_t)v1590 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1593 = *(void *)v1592;
                    *(unsigned char *)(v1591 + 8) = *(unsigned char *)(v1592 + 8);
                    *(void *)unint64_t v1591 = v1593;
                    *(unsigned char *)(v1591 + 9) = *(unsigned char *)(v1592 + 9);
                    unint64_t v1594 = (v1591 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1595 = (v1592 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1586) = *(_DWORD *)v1595;
                    *(unsigned char *)(v1594 + 4) = *(unsigned char *)(v1595 + 4);
                    *(_DWORD *)unint64_t v1594 = v1586;
                    *(_OWORD *)((v1591 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1592 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1596 = v1564 + v2049;
                    long long v1597 = *(_OWORD *)(v1565 + v2049 + 112);
                    long long v1599 = *(_OWORD *)(v1565 + v2049 + 64);
                    long long v1598 = *(_OWORD *)(v1565 + v2049 + 80);
                    *(_OWORD *)(v1596 + 96) = *(_OWORD *)(v1565 + v2049 + 96);
                    *(_OWORD *)(v1596 + 112) = v1597;
                    *(_OWORD *)(v1596 + 64) = v1599;
                    *(_OWORD *)(v1596 + 80) = v1598;
                    long long v1600 = *(_OWORD *)(v1565 + v2049 + 176);
                    long long v1602 = *(_OWORD *)(v1565 + v2049 + 128);
                    long long v1601 = *(_OWORD *)(v1565 + v2049 + 144);
                    *(_OWORD *)(v1596 + 160) = *(_OWORD *)(v1565 + v2049 + 160);
                    *(_OWORD *)(v1596 + 176) = v1600;
                    *(_OWORD *)(v1596 + 128) = v1602;
                    *(_OWORD *)(v1596 + 144) = v1601;
                    long long v1604 = *(_OWORD *)(v1565 + v2049 + 208);
                    long long v1603 = *(_OWORD *)(v1565 + v2049 + 224);
                    long long v1605 = *(_OWORD *)(v1565 + v2049 + 192);
                    *(void *)(v1596 + 240) = *(void *)(v1565 + v2049 + 240);
                    *(_OWORD *)(v1596 + 208) = v1604;
                    *(_OWORD *)(v1596 + 224) = v1603;
                    *(_OWORD *)(v1596 + 192) = v1605;
                    long long v1606 = *(_OWORD *)(v1565 + v2049);
                    long long v1607 = *(_OWORD *)(v1565 + v2049 + 16);
                    long long v1608 = *(_OWORD *)(v1565 + v2049 + 48);
                    *(_OWORD *)(v1596 + 32) = *(_OWORD *)(v1565 + v2049 + 32);
                    *(_OWORD *)(v1596 + 48) = v1608;
                    *(_OWORD *)unint64_t v1596 = v1606;
                    *(_OWORD *)(v1596 + 16) = v1607;
                    unint64_t v1609 = (_OWORD *)((v1564 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1610 = (long long *)((v1565 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1611 = *v1610;
                    *(_OWORD *)((char *)v1609 + 9) = *(long long *)((char *)v1610 + 9);
                    *unint64_t v1609 = v1611;
                    unint64_t v1612 = (v1564 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1613 = (v1565 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1614 = *(_OWORD *)v1613;
                    *(unsigned char *)(v1612 + 16) = *(unsigned char *)(v1613 + 16);
                    *(_OWORD *)unint64_t v1612 = v1614;
                    unint64_t v1615 = (void *)((v1564 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1616 = (void *)((v1565 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1615 = *v1616;
                    *(_OWORD *)(((unint64_t)v1615 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1616 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1555 = v2006;
                    unint64_t v1552 = (unint64_t)&a1[v1949] & v1974;
                    if (!v1996) {
                      goto LABEL_2188;
                    }
LABEL_2194:
                    unint64_t v1617 = ((((v1554
                              + ((((((((((v1353 + v1555) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    unsigned int v1618 = (void *)((v1552 + v2055 + v1617) & v2005);
                    uint64_t v1619 = (const void *)(((unint64_t)v2068 + v2055 + v1617) & v2005);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1352 + 48))(v1619, 1, AssociatedTypeWitness))
                    {
                      memcpy(v1618, v1619, __n);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1352 + 32))(v1618, v1619, AssociatedTypeWitness);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1352 + 56))(v1618, 0, 1, AssociatedTypeWitness);
                    }
                    unint64_t v68 = v1928;
                    uint64_t v1620 = (char *)(((unint64_t)v1618 + v1947) & v2016);
                    unsigned int v1621 = (char *)(((unint64_t)v1619 + v1947) & v2016);
                    if (v1980 == v1982)
                    {
                      int v1622 = (*(uint64_t (**)(char *))(v1998 + 48))(v1621);
                    }
                    else
                    {
                      unsigned int v1623 = (uint64_t *)((unint64_t)&v1621[v2001] & 0xFFFFFFFFFFFFFFF8);
                      if (v1965 <= 0x7FFFFFFE)
                      {
                        uint64_t v1624 = *v1623;
                        if ((unint64_t)*v1623 >= 0xFFFFFFFF) {
                          LODWORD(v1624) = -1;
                        }
                        if ((v1624 + 1) >= 2) {
                          goto LABEL_2206;
                        }
                        goto LABEL_2208;
                      }
                      int v1622 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1623 + v1990) & v1988);
                    }
                    if (v1622)
                    {
LABEL_2206:
                      memcpy(v1620, v1621, v2048);
LABEL_2209:
                      *(void *)&v1620[v2048] = *(void *)&v1621[v2048];
                      unsigned int v1629 = (void *)((unint64_t)&v1620[v2048 + 15] & 0xFFFFFFFFFFFFFFF8);
                      unsigned int v1630 = (void *)((unint64_t)&v1621[v2048 + 15] & 0xFFFFFFFFFFFFFFF8);
                      void *v1629 = *v1630;
                      *(void *)(((unint64_t)v1629 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1630 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1233 = 1;
                      unint64_t v757 = v1967;
                      char v1232 = 1;
LABEL_2269:
                      a1[v757] = v1233;
                      a1[v1932] = v1232;
                      if (v1217 > 3)
                      {
LABEL_2270:
                        *unint64_t v68 = 27;
                        return a1;
                      }
                      unsigned int v1913 = ((1 << (8 * v1217)) + 5) >> (8 * v1217);
                      if (v1913 <= 0xFFD6)
                      {
                        if (v1913 > 0xD6)
                        {
                          *(_WORD *)unint64_t v68 = 27;
                          return a1;
                        }
                        goto LABEL_2270;
                      }
                      int v572 = 27;
LABEL_2275:
                      *(_DWORD *)unint64_t v68 = v572;
                      return a1;
                    }
                    unsigned int v1623 = (uint64_t *)((unint64_t)&v1621[v2001] & 0xFFFFFFFFFFFFFFF8);
LABEL_2208:
                    (*(void (**)(char *, char *, uint64_t))(v1998 + 32))(v1620, v1621, v1997);
                    unint64_t v1625 = (void *)((unint64_t)&v1620[v2001] & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1625 = *v1623;
                    unint64_t v1626 = ((unint64_t)v1625 + v1990) & v1988;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v1626, ((unint64_t)v1623 + v1990) & v1988, v1992);
                    uint64_t v1627 = (void *)((v1986 + v1626) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1628 = (void *)((v1986 + (((unint64_t)v1623 + v1990) & v1988)) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1627 = *v1628;
                    *(_OWORD *)(((unint64_t)v1627 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1628 + 15) & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_2209;
                  case 2u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32))(a1, v77, v72);
                    v1226 = (void *)((unint64_t)&a1[v1943] & v2005);
                    v1227 = (const void *)((unint64_t)&v77[v1943] & v2005);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2054 + 48))(v1227, 1, v73))
                    {
                      memcpy(v1226, v1227, __n);
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v2054 + 32))(v1226, v1227, v73);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2054 + 56))(v1226, 0, 1, v73);
                    }
                    unint64_t v1318 = (char *)(((unint64_t)v1226 + v1947) & v2016);
                    unint64_t v1319 = (char *)(((unint64_t)v1227 + v1947) & v2016);
                    if (v1980 == v1982)
                    {
                      int v1320 = (*(uint64_t (**)(char *))(v1998 + 48))(v1319);
                    }
                    else
                    {
                      unint64_t v1321 = (uint64_t *)((unint64_t)&v1319[v2001] & 0xFFFFFFFFFFFFFFF8);
                      if (v1965 <= 0x7FFFFFFE)
                      {
                        uint64_t v1322 = *v1321;
                        if ((unint64_t)*v1321 >= 0xFFFFFFFF) {
                          LODWORD(v1322) = -1;
                        }
                        if ((v1322 + 1) >= 2) {
                          goto LABEL_1953;
                        }
                        goto LABEL_1955;
                      }
                      int v1320 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1321 + v1990) & v1988);
                    }
                    if (v1320)
                    {
LABEL_1953:
                      memcpy(v1318, v1319, v2048);
LABEL_1956:
                      unint64_t v1370 = &v1318[v2048];
                      *unint64_t v1370 = v1319[v2048];
                      *((void *)v1370 + 1) = *(void *)&v1319[v2048 + 8];
                      char v1232 = 1;
                      char v1233 = 2;
                      goto LABEL_1957;
                    }
                    unint64_t v1321 = (uint64_t *)((unint64_t)&v1319[v2001] & 0xFFFFFFFFFFFFFFF8);
LABEL_1955:
                    (*(void (**)(char *, char *, uint64_t))(v1998 + 32))(v1318, v1319, v1997);
                    unint64_t v1366 = (void *)((unint64_t)&v1318[v2001] & 0xFFFFFFFFFFFFFFF8);
                    void *v1366 = *v1321;
                    unint64_t v1367 = ((unint64_t)v1366 + v1990) & v1988;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v1367, ((unint64_t)v1321 + v1990) & v1988, v1992);
                    unint64_t v1368 = (void *)((v1986 + v1367) & 0xFFFFFFFFFFFFFFF8);
                    v1369 = (void *)((v1986 + (((unint64_t)v1321 + v1990) & v1988)) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1368 = *v1369;
                    *(_OWORD *)(((unint64_t)v1368 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1369 + 15) & 0xFFFFFFFFFFFFFFF8);
                    goto LABEL_1956;
                  case 3u:
                    unint64_t v1927 = v68;
                    unint64_t v1228 = v77;
                    uint64_t v1229 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32);
                    v1229(a1, v1228, v72);
                    unint64_t v1230 = (void *)((unint64_t)&v1228[v1949] & v1974);
                    if (v1979 == v1984)
                    {
                      int v1231 = (*(uint64_t (**)(unint64_t))(v365 + 48))((unint64_t)&v1228[v1949] & v1974);
LABEL_2211:
                      unint64_t v1357 = v2021 + 7;
                      unint64_t v1356 = (void *)((unint64_t)&a1[v1949] & v1974);
                      goto LABEL_2212;
                    }
                    unint64_t v1310 = ((unint64_t)v1230 + v2003) & v2019;
                    unint64_t v1311 = (v1975 + v1310) & v2020;
                    if (v1983 == v1984)
                    {
                      if (v1981 == v1983)
                      {
                        int v1231 = (*(uint64_t (**)(unint64_t))(v2000 + 48))((v1975 + v1310) & v2020);
                        goto LABEL_2211;
                      }
                      long long v1392 = (unint64_t *)((v2002 + v1311) & 0xFFFFFFFFFFFFFFF8);
                      if (v1966 > 0x7FFFFFFE)
                      {
                        int v1231 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1392
                                                                                          + v1991) & v1989);
                        goto LABEL_2211;
                      }
                      unint64_t v1393 = *v1392;
                      if (v1393 >= 0xFFFFFFFF) {
                        LODWORD(v1393) = -1;
                      }
                      unint64_t v1357 = v2021 + 7;
                      unint64_t v1356 = (void *)((unint64_t)&a1[v1949] & v1974);
                      if ((v1393 + 1) >= 2) {
                        goto LABEL_2213;
                      }
                    }
                    else
                    {
                      unint64_t v1355 = v1311 + v2009;
                      unint64_t v1357 = v2021 + 7;
                      unint64_t v1356 = (void *)((unint64_t)&a1[v1949] & v1974);
                      if ((v1961 & 0x80000000) == 0)
                      {
                        unint64_t v1358 = *(void *)(v1355 + 8);
                        if (v1358 >= 0xFFFFFFFF) {
                          LODWORD(v1358) = -1;
                        }
                        int v1231 = v1358 + 1;
                        goto LABEL_2212;
                      }
                      uint64_t v1414 = (v2013 + ((v2050 + v1355) & v2012)) & v2014;
                      if (v1996 > 0x7FFFFFFD)
                      {
                        int v1231 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1414, v1996, v2017);
LABEL_2212:
                        if (v1231)
                        {
LABEL_2213:
                          memcpy(v1356, v1230, v66);
                          size_t v1631 = v2053;
                          uint64_t v1632 = v1963;
                          unint64_t v757 = v1967;
LABEL_2214:
                          size_t v1633 = v1631;
                          goto LABEL_2220;
                        }
                        unint64_t v1310 = ((unint64_t)v1230 + v2003) & v2019;
                        unint64_t v1311 = (v1975 + v1310) & v2020;
                        goto LABEL_2216;
                      }
                      unint64_t v1923 = *(void *)(((v1978 + ((v2010 + v1414) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                      if (v1923 >= 0xFFFFFFFF) {
                        LODWORD(v1923) = -1;
                      }
                      if ((v1923 + 1) >= 2) {
                        goto LABEL_2213;
                      }
                    }
LABEL_2216:
                    v1229((unsigned __int8 *)v1356, (unsigned __int8 *)v1230, v2047);
                    unint64_t v1634 = ((unint64_t)v1356 + v2003) & v2019;
                    v1229((unsigned __int8 *)v1634, (unsigned __int8 *)v1310, v2047);
                    unint64_t v1635 = (v1975 + v1634) & v2020;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v1635, v1311, v1999);
                    uint64_t v1636 = (void *)((v2002 + v1635) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1637 = (void *)((v2002 + v1311) & 0xFFFFFFFFFFFFFFF8);
                    void *v1636 = *v1637;
                    unint64_t v1638 = ((unint64_t)v1636 + v1991) & v1989;
                    unint64_t v1639 = ((unint64_t)v1637 + v1991) & v1989;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1638, v1639, v1994);
                    uint64_t v1640 = (void *)((v1987 + v1638) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1641 = (void *)((v1987 + v1639) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1640 = *v1641;
                    *(_OWORD *)(((unint64_t)v1640 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1641 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1635 + v2009) = *(_OWORD *)(v1311 + v2009);
                    unint64_t v1642 = (v2050 + v1635 + v2009) & v2012;
                    unint64_t v1643 = (v2050 + v1311 + v2009) & v2012;
                    *(unsigned char *)unint64_t v1642 = *(unsigned char *)v1643;
                    uint64_t v1644 = v1642 | 4;
                    int v1645 = *(_DWORD *)(v1643 | 4);
                    *(unsigned char *)(v1644 + 4) = *(unsigned char *)((v1643 | 4) + 4);
                    *(_DWORD *)uint64_t v1644 = v1645;
                    *(_WORD *)(v1642 + 10) = *(_WORD *)(v1643 + 0xA);
                    uint64_t v1646 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
                    v1646((v2013 + v1642) & v2014, (v2013 + v1643) & v2014, v2017);
                    unint64_t v1647 = (v2010 + ((v2013 + v1642) & v2014)) & v2014;
                    unint64_t v1648 = (v2010 + ((v2013 + v1643) & v2014)) & v2014;
                    v1646(v1647, v1648, v2017);
                    uint64_t v1649 = (unsigned char *)(v1647 + v2006);
                    *uint64_t v1649 = *(unsigned char *)(v1648 + v2006);
                    v1649[1] = *(unsigned char *)(v1648 + v2006 + 1);
                    v1649[2] = *(unsigned char *)(v1648 + v2006 + 2);
                    v1649[3] = *(unsigned char *)(v1648 + v2006 + 3);
                    v1649[4] = *(unsigned char *)(v1648 + v2006 + 4);
                    unint64_t v1650 = (v1647 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1651 = (v1648 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1650 = *(_OWORD *)v1651;
                    *(unsigned char *)(v1650 + 16) = *(unsigned char *)(v1651 + 16);
                    *(unsigned char *)(v1650 + 17) = *(unsigned char *)(v1651 + 17);
                    *(unsigned char *)(v1650 + 18) = *(unsigned char *)(v1651 + 18);
                    *(unsigned char *)(v1650 + 19) = *(unsigned char *)(v1651 + 19);
                    unint64_t v1652 = (v1650 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1653 = (v1651 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1652 = *(void *)v1653;
                    *(unsigned char *)(v1652 + 8) = *(unsigned char *)(v1653 + 8);
                    *(unsigned char *)(v1652 + 9) = *(unsigned char *)(v1653 + 9);
                    *(unsigned char *)(v1652 + 10) = *(unsigned char *)(v1653 + 10);
                    *(unsigned char *)(v1652 + 11) = *(unsigned char *)(v1653 + 11);
                    *(unsigned char *)(v1652 + 12) = *(unsigned char *)(v1653 + 12);
                    unint64_t v1654 = (void *)((v1651 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1655 = (void *)((v1650 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1655 = *v1654;
                    unint64_t v1656 = ((unint64_t)v1655 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1657 = ((unint64_t)v1654 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1656 = *(void *)v1657;
                    *(unsigned char *)(v1656 + 8) = *(unsigned char *)(v1657 + 8);
                    *(unsigned char *)(v1656 + 9) = *(unsigned char *)(v1657 + 9);
                    uint64_t v1658 = (void *)((v2007 + v1656) & v2014);
                    v1659 = (const void *)((v2007 + v1657) & v2014);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1659, 1, v2017))
                    {
                      size_t v1631 = v2053;
                      memcpy(v1658, v1659, v2053);
                    }
                    else
                    {
                      v1646((unint64_t)v1658, (unint64_t)v1659, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1658, 0, 1, v2017);
                      size_t v1631 = v2053;
                    }
                    uint64_t v1632 = v1963;
                    unint64_t v1357 = v2021 + 7;
                    uint64_t v1660 = (void *)(((unint64_t)v1658 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1661 = (void *)(((unint64_t)v1659 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    void *v1660 = *v1661;
                    unint64_t v1662 = ((unint64_t)v1660 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1663 = ((unint64_t)v1661 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1664 = *(void *)v1663;
                    *(unsigned char *)(v1662 + 8) = *(unsigned char *)(v1663 + 8);
                    *(void *)unint64_t v1662 = v1664;
                    unsigned int v1665 = (void *)(((unint64_t)v1660 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1666 = (void *)(((unint64_t)v1661 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1665 = *v1666;
                    unint64_t v1667 = (_OWORD *)(((unint64_t)v1665 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1668 = (_OWORD *)(((unint64_t)v1666 + 15) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v1667 = *v1668;
                    unint64_t v1669 = ((unint64_t)v1667 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1670 = ((unint64_t)v1668 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1671 = *(void *)v1670;
                    *(unsigned char *)(v1669 + 8) = *(unsigned char *)(v1670 + 8);
                    *(void *)unint64_t v1669 = v1671;
                    *(unsigned char *)(v1669 + 9) = *(unsigned char *)(v1670 + 9);
                    unint64_t v1672 = (v1669 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1673 = (v1670 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1664) = *(_DWORD *)v1673;
                    *(unsigned char *)(v1672 + 4) = *(unsigned char *)(v1673 + 4);
                    *(_DWORD *)unint64_t v1672 = v1664;
                    *(_OWORD *)((v1669 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1670 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1674 = v1642 + v2049;
                    long long v1675 = *(_OWORD *)(v1643 + v2049 + 112);
                    long long v1677 = *(_OWORD *)(v1643 + v2049 + 64);
                    long long v1676 = *(_OWORD *)(v1643 + v2049 + 80);
                    *(_OWORD *)(v1674 + 96) = *(_OWORD *)(v1643 + v2049 + 96);
                    *(_OWORD *)(v1674 + 112) = v1675;
                    *(_OWORD *)(v1674 + 64) = v1677;
                    *(_OWORD *)(v1674 + 80) = v1676;
                    long long v1678 = *(_OWORD *)(v1643 + v2049 + 176);
                    long long v1680 = *(_OWORD *)(v1643 + v2049 + 128);
                    long long v1679 = *(_OWORD *)(v1643 + v2049 + 144);
                    *(_OWORD *)(v1674 + 160) = *(_OWORD *)(v1643 + v2049 + 160);
                    *(_OWORD *)(v1674 + 176) = v1678;
                    *(_OWORD *)(v1674 + 128) = v1680;
                    *(_OWORD *)(v1674 + 144) = v1679;
                    long long v1682 = *(_OWORD *)(v1643 + v2049 + 208);
                    long long v1681 = *(_OWORD *)(v1643 + v2049 + 224);
                    long long v1683 = *(_OWORD *)(v1643 + v2049 + 192);
                    *(void *)(v1674 + 240) = *(void *)(v1643 + v2049 + 240);
                    *(_OWORD *)(v1674 + 208) = v1682;
                    *(_OWORD *)(v1674 + 224) = v1681;
                    *(_OWORD *)(v1674 + 192) = v1683;
                    long long v1684 = *(_OWORD *)(v1643 + v2049);
                    long long v1685 = *(_OWORD *)(v1643 + v2049 + 16);
                    long long v1686 = *(_OWORD *)(v1643 + v2049 + 48);
                    *(_OWORD *)(v1674 + 32) = *(_OWORD *)(v1643 + v2049 + 32);
                    *(_OWORD *)(v1674 + 48) = v1686;
                    *(_OWORD *)unint64_t v1674 = v1684;
                    *(_OWORD *)(v1674 + 16) = v1685;
                    unint64_t v1687 = (_OWORD *)((v1642 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1688 = (long long *)((v1643 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1689 = *v1688;
                    *(_OWORD *)((char *)v1687 + 9) = *(long long *)((char *)v1688 + 9);
                    *unint64_t v1687 = v1689;
                    unint64_t v1690 = (v1642 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1691 = (v1643 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1692 = *(_OWORD *)v1691;
                    *(unsigned char *)(v1690 + 16) = *(unsigned char *)(v1691 + 16);
                    *(_OWORD *)unint64_t v1690 = v1692;
                    long long v1693 = (void *)((v1642 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1694 = (void *)((v1643 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *long long v1693 = *v1694;
                    *(_OWORD *)(((unint64_t)v1693 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1694 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1633 = v2006;
                    unint64_t v757 = v1967;
                    unint64_t v1356 = (void *)((unint64_t)&a1[v1949] & v1974);
                    if (!v1996) {
                      goto LABEL_2214;
                    }
LABEL_2220:
                    unint64_t v1695 = ((((v1632
                              + ((((((((((v1357 + v1633) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                  + 19) & 0xFFFFFFFFFFFFFFF8)
                                + 25) & 0xFFFFFFFFFFFFFFF8)
                              + 327) & 0xFFFFFFFFFFFFFFF8)
                            + 15) & 0xFFFFFFFFFFFFFFF8)
                          + 16;
                    unint64_t v1696 = (_OWORD *)(((unint64_t)v1356 + v1695) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1697 = (_OWORD *)(((unint64_t)v1230 + v1695) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v1696 = *v1697;
                    *(void *)(((unint64_t)v1696 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1697 + 23) & 0xFFFFFFFFFFFFFFF8);
                    char v1232 = 1;
LABEL_2267:
                    char v1233 = 3;
LABEL_2268:
                    unint64_t v68 = v1927;
                    goto LABEL_2269;
                  case 4u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32))(a1, v77, v72);
                    char v1232 = 1;
                    char v1233 = 4;
                    goto LABEL_1957;
                  case 5u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32))(a1, v77, v72);
                    char v1232 = 1;
                    char v1233 = 5;
                    goto LABEL_1957;
                  case 6u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32))(a1, v77, v72);
                    uint64_t v1234 = (void *)((unint64_t)&a1[v1942] & v1940);
                    unint64_t v1235 = (const void *)((unint64_t)&v77[v1942] & v1940);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1945 + 48))(v1235, 1, v2028))
                    {
                      memcpy(v1234, v1235, v1938);
                      char v1232 = 1;
                    }
                    else
                    {
                      (*(void (**)(void *, const void *, uint64_t))(v1945 + 32))(v1234, v1235, v2028);
                      char v1232 = 1;
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v1945 + 56))(v1234, 0, 1, v2028);
                    }
                    char v1233 = 6;
                    goto LABEL_1957;
                  case 7u:
                    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32))(a1, v77, v72);
                    char v1232 = 1;
                    char v1233 = 7;
LABEL_1957:
                    unint64_t v757 = v1967;
                    goto LABEL_2269;
                  default:
                    unint64_t v1218 = v77;
                    unint64_t v1219 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v365 + 32);
                    v1219(a1, v1218, v72);
                    unint64_t v1220 = (void *)((unint64_t)&v1218[v1949] & v1974);
                    unint64_t v1927 = v68;
                    if (v1979 == v1984)
                    {
                      int v1221 = (*(uint64_t (**)(unint64_t))(v365 + 48))((unint64_t)&v1218[v1949] & v1974);
                    }
                    else
                    {
                      unint64_t v1306 = ((unint64_t)v1220 + v2003) & v2019;
                      unint64_t v1307 = (v1975 + v1306) & v2020;
                      if (v1983 != v1984)
                      {
                        unint64_t v1347 = v1307 + v2009;
                        unint64_t v1349 = v2021 + 7;
                        size_t v1348 = (void *)((unint64_t)&a1[v1949] & v1974);
                        if ((v1961 & 0x80000000) != 0)
                        {
                          uint64_t v1412 = (v2013 + ((v2050 + v1347) & v2012)) & v2014;
                          if (v1996 <= 0x7FFFFFFD)
                          {
                            unint64_t v1921 = *(void *)(((v1978 + ((v2010 + v1412) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                            if (v1921 >= 0xFFFFFFFF) {
                              LODWORD(v1921) = -1;
                            }
                            if ((v1921 + 1) >= 2) {
                              goto LABEL_2176;
                            }
                            goto LABEL_2179;
                          }
                          int v1221 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1412, v1996, v2017);
                        }
                        else
                        {
                          unint64_t v1350 = *(void *)(v1347 + 8);
                          if (v1350 >= 0xFFFFFFFF) {
                            LODWORD(v1350) = -1;
                          }
                          int v1221 = v1350 + 1;
                        }
                        goto LABEL_2175;
                      }
                      if (v1981 == v1983)
                      {
                        int v1221 = (*(uint64_t (**)(unint64_t))(v2000 + 48))((v1975 + v1306) & v2020);
                      }
                      else
                      {
                        unint64_t v1388 = (unint64_t *)((v2002 + v1307) & 0xFFFFFFFFFFFFFFF8);
                        if (v1966 <= 0x7FFFFFFE)
                        {
                          unint64_t v1389 = *v1388;
                          if (v1389 >= 0xFFFFFFFF) {
                            LODWORD(v1389) = -1;
                          }
                          unint64_t v1349 = v2021 + 7;
                          size_t v1348 = (void *)((unint64_t)&a1[v1949] & v1974);
                          if ((v1389 + 1) >= 2) {
                            goto LABEL_2176;
                          }
                          goto LABEL_2179;
                        }
                        int v1221 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1388
                                                                                          + v1991) & v1989);
                      }
                    }
                    unint64_t v1349 = v2021 + 7;
                    size_t v1348 = (void *)((unint64_t)&a1[v1949] & v1974);
LABEL_2175:
                    if (v1221)
                    {
LABEL_2176:
                      memcpy(v1348, v1220, v66);
                      size_t v1485 = v2053;
                      uint64_t v1486 = v1963;
                      unint64_t v757 = v1967;
                      goto LABEL_2177;
                    }
                    unint64_t v1306 = ((unint64_t)v1220 + v2003) & v2019;
                    unint64_t v1307 = (v1975 + v1306) & v2020;
LABEL_2179:
                    v1219((unsigned __int8 *)v1348, (unsigned __int8 *)v1220, v2047);
                    unint64_t v1488 = ((unint64_t)v1348 + v2003) & v2019;
                    v1219((unsigned __int8 *)v1488, (unsigned __int8 *)v1306, v2047);
                    unint64_t v1489 = (v1975 + v1488) & v2020;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v2000 + 32))(v1489, v1307, v1999);
                    uint64_t v1490 = (void *)((v2002 + v1489) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1491 = (void *)((v2002 + v1307) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1490 = *v1491;
                    unint64_t v1492 = ((unint64_t)v1490 + v1991) & v1989;
                    unint64_t v1493 = ((unint64_t)v1491 + v1991) & v1989;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1492, v1493, v1994);
                    unint64_t v1494 = (void *)((v1987 + v1492) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1495 = (void *)((v1987 + v1493) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1494 = *v1495;
                    *(_OWORD *)(((unint64_t)v1494 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1495 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1489 + v2009) = *(_OWORD *)(v1307 + v2009);
                    unint64_t v1496 = (v2050 + v1489 + v2009) & v2012;
                    unint64_t v1497 = (v2050 + v1307 + v2009) & v2012;
                    *(unsigned char *)unint64_t v1496 = *(unsigned char *)v1497;
                    uint64_t v1498 = v1496 | 4;
                    int v1499 = *(_DWORD *)(v1497 | 4);
                    *(unsigned char *)(v1498 + 4) = *(unsigned char *)((v1497 | 4) + 4);
                    *(_DWORD *)uint64_t v1498 = v1499;
                    *(_WORD *)(v1496 + 10) = *(_WORD *)(v1497 + 0xA);
                    size_t v1500 = *(void (**)(unint64_t, unint64_t, uint64_t))(v2015 + 32);
                    v1500((v2013 + v1496) & v2014, (v2013 + v1497) & v2014, v2017);
                    unint64_t v1501 = (v2010 + ((v2013 + v1496) & v2014)) & v2014;
                    unint64_t v1502 = (v2010 + ((v2013 + v1497) & v2014)) & v2014;
                    v1500(v1501, v1502, v2017);
                    v1503 = (unsigned char *)(v1501 + v2006);
                    unsigned char *v1503 = *(unsigned char *)(v1502 + v2006);
                    v1503[1] = *(unsigned char *)(v1502 + v2006 + 1);
                    v1503[2] = *(unsigned char *)(v1502 + v2006 + 2);
                    v1503[3] = *(unsigned char *)(v1502 + v2006 + 3);
                    v1503[4] = *(unsigned char *)(v1502 + v2006 + 4);
                    unint64_t v1504 = (v1501 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1505 = (v1502 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1504 = *(_OWORD *)v1505;
                    *(unsigned char *)(v1504 + 16) = *(unsigned char *)(v1505 + 16);
                    *(unsigned char *)(v1504 + 17) = *(unsigned char *)(v1505 + 17);
                    *(unsigned char *)(v1504 + 18) = *(unsigned char *)(v1505 + 18);
                    *(unsigned char *)(v1504 + 19) = *(unsigned char *)(v1505 + 19);
                    unint64_t v1506 = (v1504 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1507 = (v1505 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1506 = *(void *)v1507;
                    *(unsigned char *)(v1506 + 8) = *(unsigned char *)(v1507 + 8);
                    *(unsigned char *)(v1506 + 9) = *(unsigned char *)(v1507 + 9);
                    *(unsigned char *)(v1506 + 10) = *(unsigned char *)(v1507 + 10);
                    *(unsigned char *)(v1506 + 11) = *(unsigned char *)(v1507 + 11);
                    *(unsigned char *)(v1506 + 12) = *(unsigned char *)(v1507 + 12);
                    size_t v1508 = (void *)((v1505 + 47) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1509 = (void *)((v1504 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1509 = *v1508;
                    unint64_t v1510 = ((unint64_t)v1509 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1511 = ((unint64_t)v1508 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1510 = *(void *)v1511;
                    *(unsigned char *)(v1510 + 8) = *(unsigned char *)(v1511 + 8);
                    *(unsigned char *)(v1510 + 9) = *(unsigned char *)(v1511 + 9);
                    unint64_t v1512 = (void *)((v2007 + v1510) & v2014);
                    size_t v1513 = (const void *)((v2007 + v1511) & v2014);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1513, 1, v2017))
                    {
                      size_t v1485 = v2053;
                      memcpy(v1512, v1513, v2053);
                    }
                    else
                    {
                      v1500((unint64_t)v1512, (unint64_t)v1513, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1512, 0, 1, v2017);
                      size_t v1485 = v2053;
                    }
                    uint64_t v1486 = v1963;
                    unint64_t v1349 = v2021 + 7;
                    size_t v1514 = (void *)(((unint64_t)v1512 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1515 = (void *)(((unint64_t)v1513 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1514 = *v1515;
                    unint64_t v1516 = ((unint64_t)v1514 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1517 = ((unint64_t)v1515 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1518 = *(void *)v1517;
                    *(unsigned char *)(v1516 + 8) = *(unsigned char *)(v1517 + 8);
                    *(void *)unint64_t v1516 = v1518;
                    unint64_t v1519 = (void *)(((unint64_t)v1514 + 31) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1520 = (void *)(((unint64_t)v1515 + 31) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1519 = *v1520;
                    int v1521 = (_OWORD *)(((unint64_t)v1519 + 15) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1522 = (_OWORD *)(((unint64_t)v1520 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *int v1521 = *v1522;
                    unint64_t v1523 = ((unint64_t)v1521 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1524 = ((unint64_t)v1522 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1525 = *(void *)v1524;
                    *(unsigned char *)(v1523 + 8) = *(unsigned char *)(v1524 + 8);
                    *(void *)unint64_t v1523 = v1525;
                    *(unsigned char *)(v1523 + 9) = *(unsigned char *)(v1524 + 9);
                    unint64_t v1526 = (v1523 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1527 = (v1524 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1518) = *(_DWORD *)v1527;
                    *(unsigned char *)(v1526 + 4) = *(unsigned char *)(v1527 + 4);
                    *(_DWORD *)unint64_t v1526 = v1518;
                    *(_OWORD *)((v1523 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1524 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1528 = v1496 + v2049;
                    long long v1529 = *(_OWORD *)(v1497 + v2049 + 112);
                    long long v1531 = *(_OWORD *)(v1497 + v2049 + 64);
                    long long v1530 = *(_OWORD *)(v1497 + v2049 + 80);
                    *(_OWORD *)(v1528 + 96) = *(_OWORD *)(v1497 + v2049 + 96);
                    *(_OWORD *)(v1528 + 112) = v1529;
                    *(_OWORD *)(v1528 + 64) = v1531;
                    *(_OWORD *)(v1528 + 80) = v1530;
                    long long v1532 = *(_OWORD *)(v1497 + v2049 + 176);
                    long long v1534 = *(_OWORD *)(v1497 + v2049 + 128);
                    long long v1533 = *(_OWORD *)(v1497 + v2049 + 144);
                    *(_OWORD *)(v1528 + 160) = *(_OWORD *)(v1497 + v2049 + 160);
                    *(_OWORD *)(v1528 + 176) = v1532;
                    *(_OWORD *)(v1528 + 128) = v1534;
                    *(_OWORD *)(v1528 + 144) = v1533;
                    long long v1536 = *(_OWORD *)(v1497 + v2049 + 208);
                    long long v1535 = *(_OWORD *)(v1497 + v2049 + 224);
                    long long v1537 = *(_OWORD *)(v1497 + v2049 + 192);
                    *(void *)(v1528 + 240) = *(void *)(v1497 + v2049 + 240);
                    *(_OWORD *)(v1528 + 208) = v1536;
                    *(_OWORD *)(v1528 + 224) = v1535;
                    *(_OWORD *)(v1528 + 192) = v1537;
                    long long v1538 = *(_OWORD *)(v1497 + v2049);
                    long long v1539 = *(_OWORD *)(v1497 + v2049 + 16);
                    long long v1540 = *(_OWORD *)(v1497 + v2049 + 48);
                    *(_OWORD *)(v1528 + 32) = *(_OWORD *)(v1497 + v2049 + 32);
                    *(_OWORD *)(v1528 + 48) = v1540;
                    *(_OWORD *)unint64_t v1528 = v1538;
                    *(_OWORD *)(v1528 + 16) = v1539;
                    long long v1541 = (_OWORD *)((v1496 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1542 = (long long *)((v1497 + v2049 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1543 = *v1542;
                    *(_OWORD *)((char *)v1541 + 9) = *(long long *)((char *)v1542 + 9);
                    _OWORD *v1541 = v1543;
                    unint64_t v1544 = (v1496 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1545 = (v1497 + v2049 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1546 = *(_OWORD *)v1545;
                    *(unsigned char *)(v1544 + 16) = *(unsigned char *)(v1545 + 16);
                    *(_OWORD *)unint64_t v1544 = v1546;
                    long long v1547 = (void *)((v1496 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    long long v1548 = (void *)((v1497 + v2049 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *long long v1547 = *v1548;
                    *(_OWORD *)(((unint64_t)v1547 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1548 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1487 = v2006;
                    unint64_t v757 = v1967;
                    size_t v1348 = (void *)((unint64_t)&a1[v1949] & v1974);
                    if (v1996)
                    {
LABEL_2183:
                      char v1233 = 0;
                      unint64_t v1549 = ((((v1486
                                + ((((((((((v1349 + v1487) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)
                                + 327) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      long long v1550 = (void *)(((unint64_t)v1348 + v1549) & 0xFFFFFFFFFFFFFFF8);
                      long long v1551 = (void *)(((unint64_t)v1220 + v1549) & 0xFFFFFFFFFFFFFFF8);
                      void *v1550 = *v1551;
                      *(void *)(((unint64_t)v1550 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1551 + 15) & 0xFFFFFFFFFFFFFFF8);
                      char v1232 = 1;
                      goto LABEL_2268;
                    }
LABEL_2177:
                    size_t v1487 = v1485;
                    goto LABEL_2183;
                }
              }
              unint64_t v757 = v1964;
              unsigned int v758 = v77[v1964];
              unsigned int v759 = v758 - 8;
              if (v758 >= 8)
              {
                if (v1964 <= 3) {
                  uint64_t v760 = v1964;
                }
                else {
                  uint64_t v760 = 4;
                }
                switch(v760)
                {
                  case 1:
                    int v761 = *v77;
                    goto LABEL_1719;
                  case 2:
                    int v761 = *(unsigned __int16 *)v77;
                    goto LABEL_1719;
                  case 3:
                    int v761 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1719;
                  case 4:
                    int v761 = *(_DWORD *)v77;
LABEL_1719:
                    if (v1964 < 4) {
                      unsigned int v758 = (v761 | (v759 << (8 * v1964))) + 8;
                    }
                    else {
                      unsigned int v758 = v761 + 8;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v1217 = v67;
              switch(v758)
              {
                case 1u:
                  uint64_t v2026 = v2022 + 327;
                  size_t v1929 = v68;
                  size_t v1242 = v77;
                  long long v1243 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32);
                  v1243(a1, v1242, v73);
                  uint64_t v2073 = (void *)((unint64_t)&a1[v1950] & v2046);
                  long long v1244 = (void *)((unint64_t)&v1242[v1950] & v2046);
                  if (v2044 == v1985)
                  {
                    int v1245 = (*(uint64_t (**)(unint64_t))(v2054 + 48))((unint64_t)&v1242[v1950] & v2046);
                  }
                  else
                  {
                    unint64_t v1314 = ((unint64_t)v1244 + v2004) & v2005;
                    unint64_t v1315 = (v1976 + v1314) & v2016;
                    if (v1982 != v1985)
                    {
                      size_t v1361 = v1315 + v2048;
                      unint64_t v1362 = v2021 + 7;
                      if ((v1962 & 0x80000000) != 0)
                      {
                        uint64_t v1416 = (v2013 + ((v2050 + v1361) & v2012)) & v2014;
                        if (v1996 <= 0x7FFFFFFD)
                        {
                          unint64_t v1924 = *(void *)(((v1978 + ((v2010 + v1416) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                          if (v1924 >= 0xFFFFFFFF) {
                            LODWORD(v1924) = -1;
                          }
                          if ((v1924 + 1) >= 2) {
                            goto LABEL_2234;
                          }
                          goto LABEL_2237;
                        }
                        int v1245 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1416, v1996, v2017);
                      }
                      else
                      {
                        unint64_t v1363 = *(void *)(v1361 + 8);
                        if (v1363 >= 0xFFFFFFFF) {
                          LODWORD(v1363) = -1;
                        }
                        int v1245 = v1363 + 1;
                      }
                      goto LABEL_2233;
                    }
                    if (v1980 == v1982)
                    {
                      int v1245 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((v1976 + v1314) & v2016);
                    }
                    else
                    {
                      long long v1396 = (unint64_t *)((v2001 + v1315) & 0xFFFFFFFFFFFFFFF8);
                      if (v1965 <= 0x7FFFFFFE)
                      {
                        unint64_t v1397 = *v1396;
                        if (v1397 >= 0xFFFFFFFF) {
                          LODWORD(v1397) = -1;
                        }
                        unint64_t v1362 = v2021 + 7;
                        if ((v1397 + 1) >= 2) {
                          goto LABEL_2234;
                        }
                        goto LABEL_2237;
                      }
                      int v1245 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1396 + v1990) & v1988);
                    }
                  }
                  unint64_t v1362 = v2021 + 7;
LABEL_2233:
                  if (v1245)
                  {
LABEL_2234:
                    unint64_t v1766 = (unint64_t)&a1[v1950] & v2046;
                    memcpy(v2073, v1244, v2063);
                    size_t v1767 = v2053;
                    uint64_t v1768 = v2026;
LABEL_2235:
                    size_t v1769 = v1767;
                    goto LABEL_2241;
                  }
                  unint64_t v1314 = ((unint64_t)v1244 + v2004) & v2005;
                  unint64_t v1315 = (v1976 + v1314) & v2016;
LABEL_2237:
                  uint64_t v2069 = v1244;
                  v1243((unsigned __int8 *)v2073, (unsigned __int8 *)v1244, AssociatedTypeWitness);
                  unint64_t v1770 = ((unint64_t)v2073 + v2004) & v2005;
                  v1243((unsigned __int8 *)v1770, (unsigned __int8 *)v1314, AssociatedTypeWitness);
                  unint64_t v1771 = (v1976 + v1770) & v2016;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v1771, v1315, v1997);
                  id v1772 = (void *)((v2001 + v1771) & 0xFFFFFFFFFFFFFFF8);
                  v1773 = (void *)((v2001 + v1315) & 0xFFFFFFFFFFFFFFF8);
                  *id v1772 = *v1773;
                  unint64_t v1774 = ((unint64_t)v1772 + v1990) & v1988;
                  unint64_t v1775 = ((unint64_t)v1773 + v1990) & v1988;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v1774, v1775, v1992);
                  id v1776 = (void *)((v1986 + v1774) & 0xFFFFFFFFFFFFFFF8);
                  v1777 = (void *)((v1986 + v1775) & 0xFFFFFFFFFFFFFFF8);
                  *id v1776 = *v1777;
                  *(_OWORD *)(((unint64_t)v1776 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1777
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  *(_OWORD *)(v1771 + v2048) = *(_OWORD *)(v1315 + v2048);
                  size_t v1778 = (v2050 + v1771 + v2048) & v2012;
                  size_t v1779 = (v2050 + v1315 + v2048) & v2012;
                  *(unsigned char *)size_t v1778 = *(unsigned char *)v1779;
                  uint64_t v1780 = v1778 | 4;
                  int v1781 = *(_DWORD *)(v1779 | 4);
                  *(unsigned char *)(v1780 + 4) = *(unsigned char *)((v1779 | 4) + 4);
                  *(_DWORD *)uint64_t v1780 = v1781;
                  *(_WORD *)(v1778 + 10) = *(_WORD *)(v1779 + 0xA);
                  long long v1782 = *(void (**)(size_t, size_t, uint64_t))(v2015 + 32);
                  v1782((v2013 + v1778) & v2014, (v2013 + v1779) & v2014, v2017);
                  size_t v1783 = (v2010 + ((v2013 + v1778) & v2014)) & v2014;
                  size_t v1784 = (v2010 + ((v2013 + v1779) & v2014)) & v2014;
                  v1782(v1783, v1784, v2017);
                  uint64_t v1785 = (unsigned char *)(v1783 + v2006);
                  *uint64_t v1785 = *(unsigned char *)(v1784 + v2006);
                  v1785[1] = *(unsigned char *)(v1784 + v2006 + 1);
                  v1785[2] = *(unsigned char *)(v1784 + v2006 + 2);
                  v1785[3] = *(unsigned char *)(v1784 + v2006 + 3);
                  v1785[4] = *(unsigned char *)(v1784 + v2006 + 4);
                  unint64_t v1786 = (v1783 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1787 = (v1784 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                  *(_OWORD *)unint64_t v1786 = *(_OWORD *)v1787;
                  *(unsigned char *)(v1786 + 16) = *(unsigned char *)(v1787 + 16);
                  *(unsigned char *)(v1786 + 17) = *(unsigned char *)(v1787 + 17);
                  *(unsigned char *)(v1786 + 18) = *(unsigned char *)(v1787 + 18);
                  *(unsigned char *)(v1786 + 19) = *(unsigned char *)(v1787 + 19);
                  unint64_t v1788 = (v1786 + 27) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1789 = (v1787 + 27) & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v1788 = *(void *)v1789;
                  *(unsigned char *)(v1788 + 8) = *(unsigned char *)(v1789 + 8);
                  *(unsigned char *)(v1788 + 9) = *(unsigned char *)(v1789 + 9);
                  *(unsigned char *)(v1788 + 10) = *(unsigned char *)(v1789 + 10);
                  *(unsigned char *)(v1788 + 11) = *(unsigned char *)(v1789 + 11);
                  *(unsigned char *)(v1788 + 12) = *(unsigned char *)(v1789 + 12);
                  v1790 = (void *)((v1787 + 47) & 0xFFFFFFFFFFFFFFF8);
                  v1791 = (void *)((v1786 + 47) & 0xFFFFFFFFFFFFFFF8);
                  void *v1791 = *v1790;
                  unint64_t v1792 = ((unint64_t)v1791 + 15) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1793 = ((unint64_t)v1790 + 15) & 0xFFFFFFFFFFFFFFF8;
                  *(void *)unint64_t v1792 = *(void *)v1793;
                  *(unsigned char *)(v1792 + 8) = *(unsigned char *)(v1793 + 8);
                  *(unsigned char *)(v1792 + 9) = *(unsigned char *)(v1793 + 9);
                  v1794 = (void *)((v2007 + v1792) & v2014);
                  v1795 = (const void *)((v2007 + v1793) & v2014);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1795, 1, v2017))
                  {
                    size_t v1767 = v2053;
                    memcpy(v1794, v1795, v2053);
                  }
                  else
                  {
                    v1782((size_t)v1794, (size_t)v1795, v2017);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1794, 0, 1, v2017);
                    size_t v1767 = v2053;
                  }
                  uint64_t v365 = v2074;
                  unint64_t v1362 = v2021 + 7;
                  long long v1796 = (void *)(((unint64_t)v1794 + v2008) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1797 = (void *)(((unint64_t)v1795 + v2008) & 0xFFFFFFFFFFFFFFF8);
                  *long long v1796 = *v1797;
                  unint64_t v1798 = ((unint64_t)v1796 + 15) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1799 = ((unint64_t)v1797 + 15) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v1800 = *(void *)v1799;
                  *(unsigned char *)(v1798 + 8) = *(unsigned char *)(v1799 + 8);
                  *(void *)unint64_t v1798 = v1800;
                  unint64_t v1801 = (void *)(((unint64_t)v1796 + 31) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1802 = (void *)(((unint64_t)v1797 + 31) & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1801 = *v1802;
                  v1803 = (_OWORD *)(((unint64_t)v1801 + 15) & 0xFFFFFFFFFFFFFFF8);
                  uint64_t v1804 = (_OWORD *)(((unint64_t)v1802 + 15) & 0xFFFFFFFFFFFFFFF8);
                  _OWORD *v1803 = *v1804;
                  unint64_t v1805 = ((unint64_t)v1803 + 19) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1806 = ((unint64_t)v1804 + 19) & 0xFFFFFFFFFFFFFFF8;
                  uint64_t v1807 = *(void *)v1806;
                  *(unsigned char *)(v1805 + 8) = *(unsigned char *)(v1806 + 8);
                  *(void *)unint64_t v1805 = v1807;
                  *(unsigned char *)(v1805 + 9) = *(unsigned char *)(v1806 + 9);
                  unint64_t v1808 = (v1805 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  unint64_t v1809 = (v1806 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                  LODWORD(v1800) = *(_DWORD *)v1809;
                  *(unsigned char *)(v1808 + 4) = *(unsigned char *)(v1809 + 4);
                  *(_DWORD *)unint64_t v1808 = v1800;
                  *(_OWORD *)((v1805 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1806 + 25) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1810 = v2049 + v1778;
                  long long v1811 = *(_OWORD *)(v2049 + v1779 + 112);
                  long long v1813 = *(_OWORD *)(v2049 + v1779 + 64);
                  long long v1812 = *(_OWORD *)(v2049 + v1779 + 80);
                  *(_OWORD *)(v1810 + 96) = *(_OWORD *)(v2049 + v1779 + 96);
                  *(_OWORD *)(v1810 + 112) = v1811;
                  *(_OWORD *)(v1810 + 64) = v1813;
                  *(_OWORD *)(v1810 + 80) = v1812;
                  long long v1814 = *(_OWORD *)(v2049 + v1779 + 176);
                  long long v1816 = *(_OWORD *)(v2049 + v1779 + 128);
                  long long v1815 = *(_OWORD *)(v2049 + v1779 + 144);
                  *(_OWORD *)(v1810 + 160) = *(_OWORD *)(v2049 + v1779 + 160);
                  *(_OWORD *)(v1810 + 176) = v1814;
                  *(_OWORD *)(v1810 + 128) = v1816;
                  *(_OWORD *)(v1810 + 144) = v1815;
                  long long v1818 = *(_OWORD *)(v2049 + v1779 + 208);
                  long long v1817 = *(_OWORD *)(v2049 + v1779 + 224);
                  long long v1819 = *(_OWORD *)(v2049 + v1779 + 192);
                  *(void *)(v1810 + 240) = *(void *)(v2049 + v1779 + 240);
                  *(_OWORD *)(v1810 + 208) = v1818;
                  *(_OWORD *)(v1810 + 224) = v1817;
                  *(_OWORD *)(v1810 + 192) = v1819;
                  long long v1820 = *(_OWORD *)(v2049 + v1779);
                  long long v1821 = *(_OWORD *)(v2049 + v1779 + 16);
                  long long v1822 = *(_OWORD *)(v2049 + v1779 + 48);
                  *(_OWORD *)(v1810 + 32) = *(_OWORD *)(v2049 + v1779 + 32);
                  *(_OWORD *)(v1810 + 48) = v1822;
                  *(_OWORD *)unint64_t v1810 = v1820;
                  *(_OWORD *)(v1810 + 16) = v1821;
                  v1823 = (_OWORD *)((v2049 + v1778 + 255) & 0xFFFFFFFFFFFFFFF8);
                  v1824 = (long long *)((v2049 + v1779 + 255) & 0xFFFFFFFFFFFFFFF8);
                  long long v1825 = *v1824;
                  *(_OWORD *)((char *)v1823 + 9) = *(long long *)((char *)v1824 + 9);
                  _OWORD *v1823 = v1825;
                  unint64_t v1826 = (v2049 + v1778 + 287) & 0xFFFFFFFFFFFFFFF8;
                  unint64_t v1827 = (v2049 + v1779 + 287) & 0xFFFFFFFFFFFFFFF8;
                  long long v1828 = *(_OWORD *)v1827;
                  *(unsigned char *)(v1826 + 16) = *(unsigned char *)(v1827 + 16);
                  *(_OWORD *)unint64_t v1826 = v1828;
                  long long v1829 = (void *)((v2049 + v1778 + 311) & 0xFFFFFFFFFFFFFFF8);
                  unint64_t v1830 = (void *)((v2049 + v1779 + 311) & 0xFFFFFFFFFFFFFFF8);
                  *long long v1829 = *v1830;
                  *(_OWORD *)(((unint64_t)v1829 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1830
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  size_t v1769 = v2006;
                  unint64_t v757 = v1964;
                  uint64_t v1768 = v2026;
                  long long v1244 = v2069;
                  unint64_t v1766 = (unint64_t)&a1[v1950] & v2046;
                  if (!v1996) {
                    goto LABEL_2235;
                  }
LABEL_2241:
                  unint64_t v1831 = ((((v1768
                            + ((((((((((v1362 + v1769) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                + 19) & 0xFFFFFFFFFFFFFFF8)
                              + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                          + 15) & 0xFFFFFFFFFFFFFFF8)
                        + 16;
                  long long v1832 = (void *)((v1766 + v2056 + v1831) & v2019);
                  v1833 = (const void *)(((unint64_t)v1244 + v2056 + v1831) & v2019);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v365 + 48))(v1833, 1, v2047))
                  {
                    memcpy(v1832, v1833, v1951);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v365 + 32))(v1832, v1833, v2047);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v365 + 56))(v1832, 0, 1, v2047);
                  }
                  unint64_t v68 = v1929;
                  unint64_t v1834 = (char *)(((unint64_t)v1832 + v1948) & v2020);
                  uint64_t v1835 = (char *)(((unint64_t)v1833 + v1948) & v2020);
                  if (v1981 == v1983)
                  {
                    int v1836 = (*(uint64_t (**)(unint64_t))(v2000 + 48))(((unint64_t)v1833 + v1948) & v2020);
                  }
                  else
                  {
                    uint64_t v1837 = (uint64_t *)((unint64_t)&v1835[v2002] & 0xFFFFFFFFFFFFFFF8);
                    if (v1966 <= 0x7FFFFFFE)
                    {
                      uint64_t v1838 = *v1837;
                      if ((unint64_t)*v1837 >= 0xFFFFFFFF) {
                        LODWORD(v1838) = -1;
                      }
                      if ((v1838 + 1) >= 2) {
                        goto LABEL_2253;
                      }
                      goto LABEL_2255;
                    }
                    int v1836 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1837 + v1991) & v1989);
                  }
                  if (v1836)
                  {
LABEL_2253:
                    memcpy(v1834, v1835, v2009);
LABEL_2256:
                    char v1232 = 0;
                    *(void *)&v1834[v2009] = *(void *)&v1835[v2009];
                    v1843 = (void *)((unint64_t)&v1834[v2009 + 15] & 0xFFFFFFFFFFFFFFF8);
                    v1844 = (void *)((unint64_t)&v1835[v2009 + 15] & 0xFFFFFFFFFFFFFFF8);
                    void *v1843 = *v1844;
                    *(void *)(((unint64_t)v1843 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1844 + 15) & 0xFFFFFFFFFFFFFFF8);
                    char v1233 = 1;
                    goto LABEL_2269;
                  }
                  uint64_t v1837 = (uint64_t *)((unint64_t)&v1835[v2002] & 0xFFFFFFFFFFFFFFF8);
LABEL_2255:
                  (*(void (**)(char *, char *, uint64_t))(v2000 + 32))(v1834, v1835, v1999);
                  unint64_t v1839 = (void *)((unint64_t)&v1834[v2002] & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1839 = *v1837;
                  unint64_t v1840 = ((unint64_t)v1839 + v1991) & v1989;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1840, ((unint64_t)v1837 + v1991) & v1989, v1994);
                  v1841 = (void *)((v1987 + v1840) & 0xFFFFFFFFFFFFFFF8);
                  unsigned int v1842 = (void *)((v1987 + (((unint64_t)v1837 + v1991) & v1989)) & 0xFFFFFFFFFFFFFFF8);
                  void *v1841 = *v1842;
                  *(_OWORD *)(((unint64_t)v1841 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1842
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
                  goto LABEL_2256;
                case 2u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                  long long v1246 = (void *)((unint64_t)&a1[v1977] & v2019);
                  long long v1247 = (const void *)((unint64_t)&v77[v1977] & v2019);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v365 + 48))(v1247, 1, v72))
                  {
                    memcpy(v1246, v1247, v1951);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v365 + 32))(v1246, v1247, v72);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v365 + 56))(v1246, 0, 1, v72);
                  }
                  size_t v1323 = (char *)(((unint64_t)v1246 + v1948) & v2020);
                  long long v1324 = (char *)(((unint64_t)v1247 + v1948) & v2020);
                  if (v1981 == v1983)
                  {
                    int v1325 = (*(uint64_t (**)(char *))(v2000 + 48))(v1324);
                  }
                  else
                  {
                    long long v1326 = (uint64_t *)((unint64_t)&v1324[v2002] & 0xFFFFFFFFFFFFFFF8);
                    if (v1966 <= 0x7FFFFFFE)
                    {
                      uint64_t v1327 = *v1326;
                      if ((unint64_t)*v1326 >= 0xFFFFFFFF) {
                        LODWORD(v1327) = -1;
                      }
                      if ((v1327 + 1) >= 2) {
                        goto LABEL_1960;
                      }
                      goto LABEL_1962;
                    }
                    int v1325 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v1326 + v1991) & v1989);
                  }
                  if (v1325)
                  {
LABEL_1960:
                    memcpy(v1323, v1324, v2009);
                    goto LABEL_1963;
                  }
                  long long v1326 = (uint64_t *)((unint64_t)&v1324[v2002] & 0xFFFFFFFFFFFFFFF8);
LABEL_1962:
                  (*(void (**)(char *, char *, uint64_t))(v2000 + 32))(v1323, v1324, v1999);
                  unint64_t v1371 = (void *)((unint64_t)&v1323[v2002] & 0xFFFFFFFFFFFFFFF8);
                  *unint64_t v1371 = *v1326;
                  unint64_t v1372 = ((unint64_t)v1371 + v1991) & v1989;
                  (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v1372, ((unint64_t)v1326 + v1991) & v1989, v1994);
                  long long v1373 = (void *)((v1987 + v1372) & 0xFFFFFFFFFFFFFFF8);
                  long long v1374 = (void *)((v1987 + (((unint64_t)v1326 + v1991) & v1989)) & 0xFFFFFFFFFFFFFFF8);
                  *long long v1373 = *v1374;
                  *(_OWORD *)(((unint64_t)v1373 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1374
                                                                                                  + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_1963:
                  char v1232 = 0;
                  long long v1375 = &v1323[v2009];
                  *long long v1375 = v1324[v2009];
                  *((void *)v1375 + 1) = *(void *)&v1324[v2009 + 8];
                  char v1233 = 2;
                  goto LABEL_2269;
                case 3u:
                  uint64_t v2027 = v2022 + 327;
                  unint64_t v1927 = v68;
                  long long v1248 = v77;
                  long long v1249 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32);
                  v1249(a1, v1248, v73);
                  long long v1250 = (void *)((unint64_t)&a1[v1950] & v2046);
                  long long v1251 = (void *)((unint64_t)&v1248[v1950] & v2046);
                  if (v2044 == v1985)
                  {
                    int v1252 = (*(uint64_t (**)(void *))(v2054 + 48))(v1251);
                    size_t v1253 = v2048;
LABEL_2258:
                    if (v1252)
                    {
LABEL_2259:
                      memcpy(v1250, v1251, v2063);
                      size_t v1845 = v2053;
                      unint64_t v1846 = v2021 + 7;
                      uint64_t v1847 = v2027;
LABEL_2260:
                      size_t v1848 = v1845;
LABEL_2266:
                      char v1232 = 0;
                      unint64_t v1910 = ((((v1847
                                + ((((((((((v1846 + v1848) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      unint64_t v1911 = (_OWORD *)(((unint64_t)v1250 + v1910) & 0xFFFFFFFFFFFFFFF8);
                      unint64_t v1912 = (_OWORD *)(((unint64_t)v1251 + v1910) & 0xFFFFFFFFFFFFFFF8);
                      *unint64_t v1911 = *v1912;
                      *(void *)(((unint64_t)v1911 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1912 + 23) & 0xFFFFFFFFFFFFFFF8);
                      goto LABEL_2267;
                    }
                    unint64_t v1316 = ((unint64_t)v1251 + v2004) & v2005;
                    unint64_t v1317 = (v1976 + v1316) & v2016;
LABEL_2262:
                    v1249((unsigned __int8 *)v1250, (unsigned __int8 *)v1251, AssociatedTypeWitness);
                    unint64_t v1849 = ((unint64_t)v1250 + v2004) & v2005;
                    v1249((unsigned __int8 *)v1849, (unsigned __int8 *)v1316, AssociatedTypeWitness);
                    unint64_t v1850 = (v1976 + v1849) & v2016;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v1850, v1317, v1997);
                    uint64_t v1851 = (void *)((v2001 + v1850) & 0xFFFFFFFFFFFFFFF8);
                    v1852 = (void *)((v2001 + v1317) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1851 = *v1852;
                    unint64_t v1853 = ((unint64_t)v1851 + v1990) & v1988;
                    unint64_t v1854 = ((unint64_t)v1852 + v1990) & v1988;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v1853, v1854, v1992);
                    unint64_t v1855 = (void *)((v1986 + v1853) & 0xFFFFFFFFFFFFFFF8);
                    v1856 = (void *)((v1986 + v1854) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1855 = *v1856;
                    *(_OWORD *)(((unint64_t)v1855 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1856 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1850 + v1253) = *(_OWORD *)(v1317 + v1253);
                    uint64_t v1857 = (v2050 + v1850 + v1253) & v2012;
                    uint64_t v1858 = (v2050 + v1317 + v1253) & v2012;
                    *(unsigned char *)uint64_t v1857 = *(unsigned char *)v1858;
                    uint64_t v1859 = v1857 | 4;
                    int v1860 = *(_DWORD *)(v1858 | 4);
                    *(unsigned char *)(v1859 + 4) = *(unsigned char *)((v1858 | 4) + 4);
                    *(_DWORD *)uint64_t v1859 = v1860;
                    *(_WORD *)(v1857 + 10) = *(_WORD *)(v1858 + 0xA);
                    v1861 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2015 + 32);
                    v1861((v2013 + v1857) & v2014, (v2013 + v1858) & v2014, v2017);
                    uint64_t v1862 = (v2010 + ((v2013 + v1857) & v2014)) & v2014;
                    uint64_t v1863 = (v2010 + ((v2013 + v1858) & v2014)) & v2014;
                    v1861(v1862, v1863, v2017);
                    unint64_t v1864 = (unsigned char *)(v1862 + v2006);
                    *unint64_t v1864 = *(unsigned char *)(v1863 + v2006);
                    v1864[1] = *(unsigned char *)(v1863 + v2006 + 1);
                    v1864[2] = *(unsigned char *)(v1863 + v2006 + 2);
                    v1864[3] = *(unsigned char *)(v1863 + v2006 + 3);
                    v1864[4] = *(unsigned char *)(v1863 + v2006 + 4);
                    unint64_t v1865 = (v1862 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1866 = (v1863 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1865 = *(_OWORD *)v1866;
                    *(unsigned char *)(v1865 + 16) = *(unsigned char *)(v1866 + 16);
                    *(unsigned char *)(v1865 + 17) = *(unsigned char *)(v1866 + 17);
                    *(unsigned char *)(v1865 + 18) = *(unsigned char *)(v1866 + 18);
                    *(unsigned char *)(v1865 + 19) = *(unsigned char *)(v1866 + 19);
                    unint64_t v1867 = (v1865 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1868 = (v1866 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1867 = *(void *)v1868;
                    *(unsigned char *)(v1867 + 8) = *(unsigned char *)(v1868 + 8);
                    *(unsigned char *)(v1867 + 9) = *(unsigned char *)(v1868 + 9);
                    *(unsigned char *)(v1867 + 10) = *(unsigned char *)(v1868 + 10);
                    *(unsigned char *)(v1867 + 11) = *(unsigned char *)(v1868 + 11);
                    *(unsigned char *)(v1867 + 12) = *(unsigned char *)(v1868 + 12);
                    v1869 = (void *)((v1866 + 47) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1870 = (void *)((v1865 + 47) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1870 = *v1869;
                    unint64_t v1871 = ((unint64_t)v1870 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1872 = ((unint64_t)v1869 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1871 = *(void *)v1872;
                    *(unsigned char *)(v1871 + 8) = *(unsigned char *)(v1872 + 8);
                    *(unsigned char *)(v1871 + 9) = *(unsigned char *)(v1872 + 9);
                    v1873 = (void *)((v2007 + v1871) & v2014);
                    v1874 = (const void *)((v2007 + v1872) & v2014);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1874, 1, v2017))
                    {
                      size_t v1845 = v2053;
                      memcpy(v1873, v1874, v2053);
                    }
                    else
                    {
                      v1861((uint64_t)v1873, (uint64_t)v1874, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1873, 0, 1, v2017);
                      size_t v1845 = v2053;
                    }
                    unint64_t v757 = v1964;
                    unint64_t v1846 = v2021 + 7;
                    unint64_t v1875 = (void *)(((unint64_t)v1873 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    v1876 = (void *)(((unint64_t)v1874 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    *unint64_t v1875 = *v1876;
                    unint64_t v1877 = ((unint64_t)v1875 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1878 = ((unint64_t)v1876 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1879 = *(void *)v1878;
                    *(unsigned char *)(v1877 + 8) = *(unsigned char *)(v1878 + 8);
                    *(void *)unint64_t v1877 = v1879;
                    v1880 = (void *)(((unint64_t)v1875 + 31) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1881 = (void *)(((unint64_t)v1876 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1880 = *v1881;
                    size_t v1882 = (_OWORD *)(((unint64_t)v1880 + 15) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1883 = (_OWORD *)(((unint64_t)v1881 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *size_t v1882 = *v1883;
                    unint64_t v1884 = ((unint64_t)v1882 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1885 = ((unint64_t)v1883 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1886 = *(void *)v1885;
                    *(unsigned char *)(v1884 + 8) = *(unsigned char *)(v1885 + 8);
                    *(void *)unint64_t v1884 = v1886;
                    *(unsigned char *)(v1884 + 9) = *(unsigned char *)(v1885 + 9);
                    unint64_t v1887 = (v1884 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1888 = (v1885 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1879) = *(_DWORD *)v1888;
                    *(unsigned char *)(v1887 + 4) = *(unsigned char *)(v1888 + 4);
                    *(_DWORD *)unint64_t v1887 = v1879;
                    *(_OWORD *)((v1884 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1885 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1889 = v2049 + v1857;
                    long long v1890 = *(_OWORD *)(v2049 + v1858 + 112);
                    long long v1892 = *(_OWORD *)(v2049 + v1858 + 64);
                    long long v1891 = *(_OWORD *)(v2049 + v1858 + 80);
                    *(_OWORD *)(v1889 + 96) = *(_OWORD *)(v2049 + v1858 + 96);
                    *(_OWORD *)(v1889 + 112) = v1890;
                    *(_OWORD *)(v1889 + 64) = v1892;
                    *(_OWORD *)(v1889 + 80) = v1891;
                    long long v1893 = *(_OWORD *)(v2049 + v1858 + 176);
                    long long v1895 = *(_OWORD *)(v2049 + v1858 + 128);
                    long long v1894 = *(_OWORD *)(v2049 + v1858 + 144);
                    *(_OWORD *)(v1889 + 160) = *(_OWORD *)(v2049 + v1858 + 160);
                    *(_OWORD *)(v1889 + 176) = v1893;
                    *(_OWORD *)(v1889 + 128) = v1895;
                    *(_OWORD *)(v1889 + 144) = v1894;
                    long long v1897 = *(_OWORD *)(v2049 + v1858 + 208);
                    long long v1896 = *(_OWORD *)(v2049 + v1858 + 224);
                    long long v1898 = *(_OWORD *)(v2049 + v1858 + 192);
                    *(void *)(v1889 + 240) = *(void *)(v2049 + v1858 + 240);
                    *(_OWORD *)(v1889 + 208) = v1897;
                    *(_OWORD *)(v1889 + 224) = v1896;
                    *(_OWORD *)(v1889 + 192) = v1898;
                    long long v1899 = *(_OWORD *)(v2049 + v1858);
                    long long v1900 = *(_OWORD *)(v2049 + v1858 + 16);
                    long long v1901 = *(_OWORD *)(v2049 + v1858 + 48);
                    *(_OWORD *)(v1889 + 32) = *(_OWORD *)(v2049 + v1858 + 32);
                    *(_OWORD *)(v1889 + 48) = v1901;
                    *(_OWORD *)unint64_t v1889 = v1899;
                    *(_OWORD *)(v1889 + 16) = v1900;
                    unint64_t v1902 = (_OWORD *)((v2049 + v1857 + 255) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1903 = (long long *)((v2049 + v1858 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1904 = *v1903;
                    *(_OWORD *)((char *)v1902 + 9) = *(long long *)((char *)v1903 + 9);
                    *unint64_t v1902 = v1904;
                    unint64_t v1905 = (v2049 + v1857 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1906 = (v2049 + v1858 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1907 = *(_OWORD *)v1906;
                    *(unsigned char *)(v1905 + 16) = *(unsigned char *)(v1906 + 16);
                    *(_OWORD *)unint64_t v1905 = v1907;
                    v1908 = (void *)((v2049 + v1857 + 311) & 0xFFFFFFFFFFFFFFF8);
                    v1909 = (void *)((v2049 + v1858 + 311) & 0xFFFFFFFFFFFFFFF8);
                    void *v1908 = *v1909;
                    *(_OWORD *)(((unint64_t)v1908 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1909 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1848 = v2006;
                    uint64_t v1847 = v2027;
                    long long v1250 = (void *)((unint64_t)&a1[v1950] & v2046);
                    if (v1996) {
                      goto LABEL_2266;
                    }
                    goto LABEL_2260;
                  }
                  unint64_t v1316 = ((unint64_t)v1251 + v2004) & v2005;
                  unint64_t v1317 = (v1976 + v1316) & v2016;
                  size_t v1253 = v2048;
                  if (v1982 == v1985)
                  {
                    if (v1980 == v1982)
                    {
                      int v1252 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((v1976 + v1316) & v2016);
                      goto LABEL_2258;
                    }
                    long long v1398 = (unint64_t *)((v2001 + v1317) & 0xFFFFFFFFFFFFFFF8);
                    if (v1965 > 0x7FFFFFFE)
                    {
                      int v1252 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1398 + v1990) & v1988);
                      goto LABEL_2258;
                    }
                    unint64_t v1399 = *v1398;
                  }
                  else
                  {
                    size_t v1364 = v1317 + v2048;
                    if ((v1962 & 0x80000000) == 0)
                    {
                      unint64_t v1365 = *(void *)(v1364 + 8);
                      if (v1365 >= 0xFFFFFFFF) {
                        LODWORD(v1365) = -1;
                      }
                      int v1252 = v1365 + 1;
                      goto LABEL_2258;
                    }
                    uint64_t v1417 = (v2013 + ((v2050 + v1364) & v2012)) & v2014;
                    if (v1996 > 0x7FFFFFFD)
                    {
                      int v1252 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v1417);
                      goto LABEL_2258;
                    }
                    unint64_t v1399 = *(void *)(((v1978 + ((v2010 + v1417) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  if (v1399 >= 0xFFFFFFFF) {
                    LODWORD(v1399) = -1;
                  }
                  if ((v1399 + 1) >= 2) {
                    goto LABEL_2259;
                  }
                  goto LABEL_2262;
                case 4u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                  char v1232 = 0;
                  char v1233 = 4;
                  goto LABEL_2269;
                case 5u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                  char v1232 = 0;
                  char v1233 = 5;
                  goto LABEL_2269;
                case 6u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                  long long v1254 = (void *)((unint64_t)&a1[v1944] & v1941);
                  uint64_t v1255 = (const void *)((unint64_t)&v77[v1944] & v1941);
                  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v1946 + 48))(v1255, 1, v2029))
                  {
                    memcpy(v1254, v1255, v1939);
                  }
                  else
                  {
                    (*(void (**)(void *, const void *, uint64_t))(v1946 + 32))(v1254, v1255, v2029);
                    (*(void (**)(void *, void, uint64_t, uint64_t))(v1946 + 56))(v1254, 0, 1, v2029);
                  }
                  char v1232 = 0;
                  char v1233 = 6;
                  goto LABEL_2269;
                case 7u:
                  (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                  char v1232 = 0;
                  char v1233 = 7;
                  goto LABEL_2269;
                default:
                  uint64_t v2025 = v2022 + 327;
                  unint64_t v1236 = v77;
                  unint64_t v1237 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32);
                  v1237(a1, v1236, v73);
                  unint64_t v1238 = (void *)((unint64_t)&a1[v1950] & v2046);
                  uint64_t v1239 = (void *)((unint64_t)&v1236[v1950] & v2046);
                  unint64_t v1927 = v68;
                  if (v2044 == v1985)
                  {
                    int v1240 = (*(uint64_t (**)(void *))(v2054 + 48))(v1239);
                    size_t v1241 = v2048;
LABEL_2222:
                    if (v1240)
                    {
LABEL_2223:
                      memcpy(v1238, v1239, v2063);
                      size_t v1698 = v2053;
                      unint64_t v1699 = v2021 + 7;
                      uint64_t v1700 = v2025;
                      goto LABEL_2224;
                    }
                    unint64_t v1312 = ((unint64_t)v1239 + v2004) & v2005;
                    unint64_t v1313 = (v1976 + v1312) & v2016;
LABEL_2226:
                    v1237((unsigned __int8 *)v1238, (unsigned __int8 *)v1239, AssociatedTypeWitness);
                    unint64_t v1702 = ((unint64_t)v1238 + v2004) & v2005;
                    v1237((unsigned __int8 *)v1702, (unsigned __int8 *)v1312, AssociatedTypeWitness);
                    unint64_t v1703 = (v1976 + v1702) & v2016;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1998 + 32))(v1703, v1313, v1997);
                    unint64_t v1704 = (void *)((v2001 + v1703) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1705 = (void *)((v2001 + v1313) & 0xFFFFFFFFFFFFFFF8);
                    void *v1704 = *v1705;
                    unint64_t v1706 = ((unint64_t)v1704 + v1990) & v1988;
                    unint64_t v1707 = ((unint64_t)v1705 + v1990) & v1988;
                    (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v1706, v1707, v1992);
                    uint64_t v1708 = (void *)((v1986 + v1706) & 0xFFFFFFFFFFFFFFF8);
                    uint64_t v1709 = (void *)((v1986 + v1707) & 0xFFFFFFFFFFFFFFF8);
                    *uint64_t v1708 = *v1709;
                    *(_OWORD *)(((unint64_t)v1708 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1709 + 15) & 0xFFFFFFFFFFFFFFF8);
                    *(_OWORD *)(v1703 + v1241) = *(_OWORD *)(v1313 + v1241);
                    uint64_t v1710 = (v2050 + v1703 + v1241) & v2012;
                    uint64_t v1711 = (v2050 + v1313 + v1241) & v2012;
                    *(unsigned char *)uint64_t v1710 = *(unsigned char *)v1711;
                    uint64_t v1712 = v1710 | 4;
                    int v1713 = *(_DWORD *)(v1711 | 4);
                    *(unsigned char *)(v1712 + 4) = *(unsigned char *)((v1711 | 4) + 4);
                    *(_DWORD *)uint64_t v1712 = v1713;
                    *(_WORD *)(v1710 + 10) = *(_WORD *)(v1711 + 0xA);
                    uint64_t v1714 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2015 + 32);
                    v1714((v2013 + v1710) & v2014, (v2013 + v1711) & v2014, v2017);
                    uint64_t v1715 = (v2010 + ((v2013 + v1710) & v2014)) & v2014;
                    uint64_t v1716 = (v2010 + ((v2013 + v1711) & v2014)) & v2014;
                    v1714(v1715, v1716, v2017);
                    uint64_t v1717 = (unsigned char *)(v1715 + v2006);
                    *uint64_t v1717 = *(unsigned char *)(v1716 + v2006);
                    v1717[1] = *(unsigned char *)(v1716 + v2006 + 1);
                    v1717[2] = *(unsigned char *)(v1716 + v2006 + 2);
                    v1717[3] = *(unsigned char *)(v1716 + v2006 + 3);
                    v1717[4] = *(unsigned char *)(v1716 + v2006 + 4);
                    unint64_t v1718 = (v1715 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1719 = (v1716 + v2006 + 12) & 0xFFFFFFFFFFFFFFF8;
                    *(_OWORD *)unint64_t v1718 = *(_OWORD *)v1719;
                    *(unsigned char *)(v1718 + 16) = *(unsigned char *)(v1719 + 16);
                    *(unsigned char *)(v1718 + 17) = *(unsigned char *)(v1719 + 17);
                    *(unsigned char *)(v1718 + 18) = *(unsigned char *)(v1719 + 18);
                    *(unsigned char *)(v1718 + 19) = *(unsigned char *)(v1719 + 19);
                    unint64_t v1720 = (v1718 + 27) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1721 = (v1719 + 27) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1720 = *(void *)v1721;
                    *(unsigned char *)(v1720 + 8) = *(unsigned char *)(v1721 + 8);
                    *(unsigned char *)(v1720 + 9) = *(unsigned char *)(v1721 + 9);
                    *(unsigned char *)(v1720 + 10) = *(unsigned char *)(v1721 + 10);
                    *(unsigned char *)(v1720 + 11) = *(unsigned char *)(v1721 + 11);
                    *(unsigned char *)(v1720 + 12) = *(unsigned char *)(v1721 + 12);
                    size_t v1722 = (void *)((v1719 + 47) & 0xFFFFFFFFFFFFFFF8);
                    v1723 = (void *)((v1718 + 47) & 0xFFFFFFFFFFFFFFF8);
                    void *v1723 = *v1722;
                    unint64_t v1724 = ((unint64_t)v1723 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1725 = ((unint64_t)v1722 + 15) & 0xFFFFFFFFFFFFFFF8;
                    *(void *)unint64_t v1724 = *(void *)v1725;
                    *(unsigned char *)(v1724 + 8) = *(unsigned char *)(v1725 + 8);
                    *(unsigned char *)(v1724 + 9) = *(unsigned char *)(v1725 + 9);
                    unint64_t v1726 = (void *)((v2007 + v1724) & v2014);
                    unint64_t v1727 = (const void *)((v2007 + v1725) & v2014);
                    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v2015 + 48))(v1727, 1, v2017))
                    {
                      size_t v1698 = v2053;
                      memcpy(v1726, v1727, v2053);
                    }
                    else
                    {
                      v1714((uint64_t)v1726, (uint64_t)v1727, v2017);
                      (*(void (**)(void *, void, uint64_t, uint64_t))(v2015 + 56))(v1726, 0, 1, v2017);
                      size_t v1698 = v2053;
                    }
                    unint64_t v757 = v1964;
                    unint64_t v1699 = v2021 + 7;
                    v1728 = (void *)(((unint64_t)v1726 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    v1729 = (void *)(((unint64_t)v1727 + v2008) & 0xFFFFFFFFFFFFFFF8);
                    void *v1728 = *v1729;
                    unint64_t v1730 = ((unint64_t)v1728 + 15) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1731 = ((unint64_t)v1729 + 15) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1732 = *(void *)v1731;
                    *(unsigned char *)(v1730 + 8) = *(unsigned char *)(v1731 + 8);
                    *(void *)unint64_t v1730 = v1732;
                    v1733 = (void *)(((unint64_t)v1728 + 31) & 0xFFFFFFFFFFFFFFF8);
                    v1734 = (void *)(((unint64_t)v1729 + 31) & 0xFFFFFFFFFFFFFFF8);
                    void *v1733 = *v1734;
                    v1735 = (_OWORD *)(((unint64_t)v1733 + 15) & 0xFFFFFFFFFFFFFFF8);
                    v1736 = (_OWORD *)(((unint64_t)v1734 + 15) & 0xFFFFFFFFFFFFFFF8);
                    _OWORD *v1735 = *v1736;
                    unint64_t v1737 = ((unint64_t)v1735 + 19) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1738 = ((unint64_t)v1736 + 19) & 0xFFFFFFFFFFFFFFF8;
                    uint64_t v1739 = *(void *)v1738;
                    *(unsigned char *)(v1737 + 8) = *(unsigned char *)(v1738 + 8);
                    *(void *)unint64_t v1737 = v1739;
                    *(unsigned char *)(v1737 + 9) = *(unsigned char *)(v1738 + 9);
                    unint64_t v1740 = (v1737 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    unint64_t v1741 = (v1738 + 13) & 0xFFFFFFFFFFFFFFFCLL;
                    LODWORD(v1732) = *(_DWORD *)v1741;
                    *(unsigned char *)(v1740 + 4) = *(unsigned char *)(v1741 + 4);
                    *(_DWORD *)unint64_t v1740 = v1732;
                    *(_OWORD *)((v1737 + 25) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v1738 + 25) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1742 = v2049 + v1710;
                    long long v1743 = *(_OWORD *)(v2049 + v1711 + 112);
                    long long v1745 = *(_OWORD *)(v2049 + v1711 + 64);
                    long long v1744 = *(_OWORD *)(v2049 + v1711 + 80);
                    *(_OWORD *)(v1742 + 96) = *(_OWORD *)(v2049 + v1711 + 96);
                    *(_OWORD *)(v1742 + 112) = v1743;
                    *(_OWORD *)(v1742 + 64) = v1745;
                    *(_OWORD *)(v1742 + 80) = v1744;
                    long long v1746 = *(_OWORD *)(v2049 + v1711 + 176);
                    long long v1748 = *(_OWORD *)(v2049 + v1711 + 128);
                    long long v1747 = *(_OWORD *)(v2049 + v1711 + 144);
                    *(_OWORD *)(v1742 + 160) = *(_OWORD *)(v2049 + v1711 + 160);
                    *(_OWORD *)(v1742 + 176) = v1746;
                    *(_OWORD *)(v1742 + 128) = v1748;
                    *(_OWORD *)(v1742 + 144) = v1747;
                    long long v1750 = *(_OWORD *)(v2049 + v1711 + 208);
                    long long v1749 = *(_OWORD *)(v2049 + v1711 + 224);
                    long long v1751 = *(_OWORD *)(v2049 + v1711 + 192);
                    *(void *)(v1742 + 240) = *(void *)(v2049 + v1711 + 240);
                    *(_OWORD *)(v1742 + 208) = v1750;
                    *(_OWORD *)(v1742 + 224) = v1749;
                    *(_OWORD *)(v1742 + 192) = v1751;
                    long long v1752 = *(_OWORD *)(v2049 + v1711);
                    long long v1753 = *(_OWORD *)(v2049 + v1711 + 16);
                    long long v1754 = *(_OWORD *)(v2049 + v1711 + 48);
                    *(_OWORD *)(v1742 + 32) = *(_OWORD *)(v2049 + v1711 + 32);
                    *(_OWORD *)(v1742 + 48) = v1754;
                    *(_OWORD *)unint64_t v1742 = v1752;
                    *(_OWORD *)(v1742 + 16) = v1753;
                    v1755 = (_OWORD *)((v2049 + v1710 + 255) & 0xFFFFFFFFFFFFFFF8);
                    unint64_t v1756 = (long long *)((v2049 + v1711 + 255) & 0xFFFFFFFFFFFFFFF8);
                    long long v1757 = *v1756;
                    *(_OWORD *)((char *)v1755 + 9) = *(long long *)((char *)v1756 + 9);
                    _OWORD *v1755 = v1757;
                    unint64_t v1758 = (v2049 + v1710 + 287) & 0xFFFFFFFFFFFFFFF8;
                    unint64_t v1759 = (v2049 + v1711 + 287) & 0xFFFFFFFFFFFFFFF8;
                    long long v1760 = *(_OWORD *)v1759;
                    *(unsigned char *)(v1758 + 16) = *(unsigned char *)(v1759 + 16);
                    *(_OWORD *)unint64_t v1758 = v1760;
                    long long v1761 = (void *)((v2049 + v1710 + 311) & 0xFFFFFFFFFFFFFFF8);
                    long long v1762 = (void *)((v2049 + v1711 + 311) & 0xFFFFFFFFFFFFFFF8);
                    *long long v1761 = *v1762;
                    *(_OWORD *)(((unint64_t)v1761 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v1762 + 15) & 0xFFFFFFFFFFFFFFF8);
                    size_t v1701 = v2006;
                    uint64_t v1700 = v2025;
                    unint64_t v1238 = (void *)((unint64_t)&a1[v1950] & v2046);
                    if (v1996)
                    {
LABEL_2230:
                      char v1233 = 0;
                      char v1232 = 0;
                      unint64_t v1763 = ((((v1700
                                + ((((((((((v1699 + v1701) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
                                    + 19) & 0xFFFFFFFFFFFFFFF8)
                                  + 25) & 0xFFFFFFFFFFFFFFF8)) & 0xFFFFFFFFFFFFFFF8)
                              + 15) & 0xFFFFFFFFFFFFFFF8)
                            + 16;
                      long long v1764 = (void *)(((unint64_t)v1238 + v1763) & 0xFFFFFFFFFFFFFFF8);
                      long long v1765 = (void *)(((unint64_t)v1239 + v1763) & 0xFFFFFFFFFFFFFFF8);
                      *long long v1764 = *v1765;
                      *(void *)(((unint64_t)v1764 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v1765 + 15) & 0xFFFFFFFFFFFFFFF8);
                      goto LABEL_2268;
                    }
LABEL_2224:
                    size_t v1701 = v1698;
                    goto LABEL_2230;
                  }
                  unint64_t v1312 = ((unint64_t)v1239 + v2004) & v2005;
                  unint64_t v1313 = (v1976 + v1312) & v2016;
                  size_t v1241 = v2048;
                  if (v1982 == v1985)
                  {
                    if (v1980 == v1982)
                    {
                      int v1240 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((v1976 + v1312) & v2016);
                      goto LABEL_2222;
                    }
                    long long v1394 = (unint64_t *)((v2001 + v1313) & 0xFFFFFFFFFFFFFFF8);
                    if (v1965 > 0x7FFFFFFE)
                    {
                      int v1240 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1394 + v1990) & v1988);
                      goto LABEL_2222;
                    }
                    unint64_t v1395 = *v1394;
                  }
                  else
                  {
                    size_t v1359 = v1313 + v2048;
                    if ((v1962 & 0x80000000) == 0)
                    {
                      unint64_t v1360 = *(void *)(v1359 + 8);
                      if (v1360 >= 0xFFFFFFFF) {
                        LODWORD(v1360) = -1;
                      }
                      int v1240 = v1360 + 1;
                      goto LABEL_2222;
                    }
                    uint64_t v1415 = (v2013 + ((v2050 + v1359) & v2012)) & v2014;
                    if (v1996 > 0x7FFFFFFD)
                    {
                      int v1240 = (*(uint64_t (**)(uint64_t))(v2015 + 48))(v1415);
                      goto LABEL_2222;
                    }
                    unint64_t v1395 = *(void *)(((v1978 + ((v2010 + v1415) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
                  }
                  if (v1395 >= 0xFFFFFFFF) {
                    LODWORD(v1395) = -1;
                  }
                  if ((v1395 + 1) >= 2) {
                    goto LABEL_2223;
                  }
                  goto LABEL_2226;
              }
            case 0x1Cu:
              unsigned int v367 = v77[v63];
              unsigned int v368 = v367 - 2;
              if (v367 < 2)
              {
                unsigned int v371 = v67;
                uint64_t v370 = v2074;
                uint64_t v372 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v369 = v63;
                }
                else {
                  uint64_t v369 = 4;
                }
                uint64_t v370 = v2074;
                unsigned int v371 = v67;
                uint64_t v372 = v2054;
                switch(v369)
                {
                  case 1:
                    int v373 = *v77;
                    goto LABEL_1199;
                  case 2:
                    int v373 = *(unsigned __int16 *)v77;
                    goto LABEL_1199;
                  case 3:
                    int v373 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1199;
                  case 4:
                    int v373 = *(_DWORD *)v77;
LABEL_1199:
                    if (v63 < 4) {
                      unsigned int v367 = (v373 | (v368 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v367 = v373 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v762 = v367 == 1;
              if (v367 == 1) {
                uint64_t v763 = v370;
              }
              else {
                uint64_t v763 = v372;
              }
              if (v367 == 1) {
                uint64_t v764 = v72;
              }
              else {
                uint64_t v764 = v73;
              }
              unint64_t v765 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v763 + 32))(a1, v77, v764);
              a1[v765] = v762;
              a1[v2071] = v77[v2071];
              if (v371 > 3) {
                goto LABEL_1209;
              }
              unsigned int v766 = ((1 << (8 * v371)) + 5) >> (8 * v371);
              if (v766 > 0xFFD6)
              {
                int v572 = 28;
                goto LABEL_2275;
              }
              if (v766 <= 0xD6) {
LABEL_1209:
              }
                *unint64_t v68 = 28;
              else {
                *(_WORD *)unint64_t v68 = 28;
              }
              return a1;
            case 0x1Du:
              unsigned int v374 = v77[v63];
              unsigned int v375 = v374 - 2;
              if (v374 < 2)
              {
                unsigned int v378 = v67;
                uint64_t v377 = v2074;
                uint64_t v379 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v376 = v63;
                }
                else {
                  uint64_t v376 = 4;
                }
                uint64_t v377 = v2074;
                unsigned int v378 = v67;
                uint64_t v379 = v2054;
                switch(v376)
                {
                  case 1:
                    int v380 = *v77;
                    goto LABEL_1217;
                  case 2:
                    int v380 = *(unsigned __int16 *)v77;
                    goto LABEL_1217;
                  case 3:
                    int v380 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1217;
                  case 4:
                    int v380 = *(_DWORD *)v77;
LABEL_1217:
                    if (v63 < 4) {
                      unsigned int v374 = (v380 | (v375 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v374 = v380 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v767 = v374 == 1;
              if (v374 == 1) {
                uint64_t v768 = v377;
              }
              else {
                uint64_t v768 = v379;
              }
              if (v374 == 1) {
                uint64_t v769 = v72;
              }
              else {
                uint64_t v769 = v73;
              }
              unint64_t v770 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v768 + 32))(a1, v77, v769);
              a1[v770] = v767;
              if (v378 > 3) {
                goto LABEL_1227;
              }
              unsigned int v771 = ((1 << (8 * v378)) + 5) >> (8 * v378);
              if (v771 > 0xFFD6)
              {
                int v572 = 29;
                goto LABEL_2275;
              }
              if (v771 <= 0xD6) {
LABEL_1227:
              }
                *unint64_t v68 = 29;
              else {
                *(_WORD *)unint64_t v68 = 29;
              }
              return a1;
            case 0x1Eu:
              unsigned int v381 = v77[v63];
              unsigned int v382 = v381 - 2;
              if (v381 < 2)
              {
                unsigned int v385 = v67;
                uint64_t v384 = v2074;
                uint64_t v386 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v383 = v63;
                }
                else {
                  uint64_t v383 = 4;
                }
                uint64_t v384 = v2074;
                unsigned int v385 = v67;
                uint64_t v386 = v2054;
                switch(v383)
                {
                  case 1:
                    int v387 = *v77;
                    goto LABEL_1235;
                  case 2:
                    int v387 = *(unsigned __int16 *)v77;
                    goto LABEL_1235;
                  case 3:
                    int v387 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1235;
                  case 4:
                    int v387 = *(_DWORD *)v77;
LABEL_1235:
                    if (v63 < 4) {
                      unsigned int v381 = (v387 | (v382 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v381 = v387 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v772 = v381 == 1;
              if (v381 == 1) {
                uint64_t v773 = v384;
              }
              else {
                uint64_t v773 = v386;
              }
              if (v381 == 1) {
                uint64_t v774 = v72;
              }
              else {
                uint64_t v774 = v73;
              }
              unint64_t v775 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v773 + 32))(a1, v77, v774);
              a1[v775] = v772;
              if (v385 > 3) {
                goto LABEL_1245;
              }
              unsigned int v776 = ((1 << (8 * v385)) + 5) >> (8 * v385);
              if (v776 > 0xFFD6)
              {
                int v572 = 30;
                goto LABEL_2275;
              }
              if (v776 <= 0xD6) {
LABEL_1245:
              }
                *unint64_t v68 = 30;
              else {
                *(_WORD *)unint64_t v68 = 30;
              }
              return a1;
            case 0x1Fu:
              unsigned int v388 = v77[v63];
              unsigned int v389 = v388 - 2;
              if (v388 < 2)
              {
                uint64_t v391 = v2074;
                uint64_t v392 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v390 = v63;
                }
                else {
                  uint64_t v390 = 4;
                }
                uint64_t v391 = v2074;
                uint64_t v392 = v2054;
                switch(v390)
                {
                  case 1:
                    int v393 = *v77;
                    goto LABEL_1253;
                  case 2:
                    int v393 = *(unsigned __int16 *)v77;
                    goto LABEL_1253;
                  case 3:
                    int v393 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1253;
                  case 4:
                    int v393 = *(_DWORD *)v77;
LABEL_1253:
                    if (v63 < 4) {
                      unsigned int v388 = (v393 | (v389 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v388 = v393 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              unsigned int v777 = v67;
              BOOL v778 = v388 == 1;
              if (v388 == 1) {
                uint64_t v779 = v391;
              }
              else {
                uint64_t v779 = v392;
              }
              if (v388 == 1) {
                uint64_t v780 = v72;
              }
              else {
                uint64_t v780 = v73;
              }
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v779 + 32))(a1, v77, v780);
              a1[v2070] = v778;
              unint64_t v781 = (unint64_t)&a1[v2011] & v2018;
              size_t v782 = (unsigned __int8 *)((unint64_t)&v77[v2011] & v2018);
              unsigned int v783 = v782[v2070];
              unsigned int v784 = v783 - 2;
              if (v783 >= 2)
              {
                if (v2070 <= 3) {
                  uint64_t v785 = v2070;
                }
                else {
                  uint64_t v785 = 4;
                }
                switch(v785)
                {
                  case 1:
                    int v786 = *v782;
                    goto LABEL_1430;
                  case 2:
                    int v786 = *(unsigned __int16 *)v782;
                    goto LABEL_1430;
                  case 3:
                    int v786 = *(unsigned __int16 *)v782 | (*(unsigned __int8 *)(((unint64_t)&v77[v2011] & v2018) + 2) << 16);
                    goto LABEL_1430;
                  case 4:
                    int v786 = *(_DWORD *)v782;
LABEL_1430:
                    if (v2070 < 4) {
                      unsigned int v783 = (v786 | (v784 << (8 * v2070))) + 2;
                    }
                    else {
                      unsigned int v783 = v786 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v830 = v783 == 1;
              if (v783 == 1) {
                uint64_t v831 = v391;
              }
              else {
                uint64_t v831 = v392;
              }
              (*(void (**)(unint64_t))(v831 + 32))(v781);
              *(unsigned char *)(v781 + v2070) = v830;
              if (v777 > 3) {
                goto LABEL_1437;
              }
              unsigned int v832 = ((1 << (8 * v777)) + 5) >> (8 * v777);
              if (v832 > 0xFFD6)
              {
                int v572 = 31;
                goto LABEL_2275;
              }
              if (v832 <= 0xD6) {
LABEL_1437:
              }
                *unint64_t v68 = 31;
              else {
                *(_WORD *)unint64_t v68 = 31;
              }
              return a1;
            case 0x20u:
              unsigned int v394 = v77[v63];
              unsigned int v395 = v394 - 2;
              if (v394 < 2)
              {
                unsigned int v398 = v67;
                uint64_t v397 = v2074;
                uint64_t v399 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v396 = v63;
                }
                else {
                  uint64_t v396 = 4;
                }
                uint64_t v397 = v2074;
                unsigned int v398 = v67;
                uint64_t v399 = v2054;
                switch(v396)
                {
                  case 1:
                    int v400 = *v77;
                    goto LABEL_1271;
                  case 2:
                    int v400 = *(unsigned __int16 *)v77;
                    goto LABEL_1271;
                  case 3:
                    int v400 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1271;
                  case 4:
                    int v400 = *(_DWORD *)v77;
LABEL_1271:
                    if (v63 < 4) {
                      unsigned int v394 = (v400 | (v395 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v394 = v400 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v787 = v394 == 1;
              if (v394 == 1) {
                uint64_t v788 = v397;
              }
              else {
                uint64_t v788 = v399;
              }
              if (v394 == 1) {
                uint64_t v789 = v72;
              }
              else {
                uint64_t v789 = v73;
              }
              unint64_t v790 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v788 + 32))(a1, v77, v789);
              a1[v790] = v787;
              if (v398 > 3) {
                goto LABEL_1281;
              }
              unsigned int v791 = ((1 << (8 * v398)) + 5) >> (8 * v398);
              if (v791 > 0xFFD6)
              {
                int v572 = 32;
                goto LABEL_2275;
              }
              if (v791 <= 0xD6) {
LABEL_1281:
              }
                *unint64_t v68 = 32;
              else {
                *(_WORD *)unint64_t v68 = 32;
              }
              return a1;
            case 0x21u:
              unsigned int v401 = v77[v63];
              unsigned int v402 = v401 - 2;
              if (v401 < 2)
              {
                unsigned int v405 = v67;
                uint64_t v404 = v2074;
                uint64_t v406 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v403 = v63;
                }
                else {
                  uint64_t v403 = 4;
                }
                uint64_t v404 = v2074;
                unsigned int v405 = v67;
                uint64_t v406 = v2054;
                switch(v403)
                {
                  case 1:
                    int v407 = *v77;
                    goto LABEL_1289;
                  case 2:
                    int v407 = *(unsigned __int16 *)v77;
                    goto LABEL_1289;
                  case 3:
                    int v407 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1289;
                  case 4:
                    int v407 = *(_DWORD *)v77;
LABEL_1289:
                    if (v63 < 4) {
                      unsigned int v401 = (v407 | (v402 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v401 = v407 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v792 = v401 == 1;
              if (v401 == 1) {
                uint64_t v793 = v404;
              }
              else {
                uint64_t v793 = v406;
              }
              if (v401 == 1) {
                uint64_t v794 = v72;
              }
              else {
                uint64_t v794 = v73;
              }
              unint64_t v795 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v793 + 32))(a1, v77, v794);
              a1[v795] = v792;
              if (v405 > 3) {
                goto LABEL_1299;
              }
              unsigned int v796 = ((1 << (8 * v405)) + 5) >> (8 * v405);
              if (v796 > 0xFFD6)
              {
                int v572 = 33;
                goto LABEL_2275;
              }
              if (v796 <= 0xD6) {
LABEL_1299:
              }
                *unint64_t v68 = 33;
              else {
                *(_WORD *)unint64_t v68 = 33;
              }
              return a1;
            case 0x22u:
              unsigned int v408 = v77[v63];
              unsigned int v409 = v408 - 2;
              if (v408 < 2)
              {
                unsigned int v412 = v67;
                uint64_t v411 = v2074;
                uint64_t v413 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v410 = v63;
                }
                else {
                  uint64_t v410 = 4;
                }
                uint64_t v411 = v2074;
                unsigned int v412 = v67;
                uint64_t v413 = v2054;
                switch(v410)
                {
                  case 1:
                    int v414 = *v77;
                    goto LABEL_1307;
                  case 2:
                    int v414 = *(unsigned __int16 *)v77;
                    goto LABEL_1307;
                  case 3:
                    int v414 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1307;
                  case 4:
                    int v414 = *(_DWORD *)v77;
LABEL_1307:
                    if (v63 < 4) {
                      unsigned int v408 = (v414 | (v409 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v408 = v414 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v797 = v408 == 1;
              if (v408 == 1) {
                uint64_t v798 = v411;
              }
              else {
                uint64_t v798 = v413;
              }
              if (v408 == 1) {
                uint64_t v799 = v72;
              }
              else {
                uint64_t v799 = v73;
              }
              unint64_t v800 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v798 + 32))(a1, v77, v799);
              a1[v800] = v797;
              if (v412 > 3) {
                goto LABEL_1317;
              }
              unsigned int v801 = ((1 << (8 * v412)) + 5) >> (8 * v412);
              if (v801 > 0xFFD6)
              {
                int v572 = 34;
                goto LABEL_2275;
              }
              if (v801 <= 0xD6) {
LABEL_1317:
              }
                *unint64_t v68 = 34;
              else {
                *(_WORD *)unint64_t v68 = 34;
              }
              return a1;
            case 0x23u:
              unsigned int v415 = v77[v63];
              unsigned int v416 = v415 - 2;
              if (v415 < 2)
              {
                unsigned int v419 = v67;
                uint64_t v418 = v2074;
                uint64_t v420 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v417 = v63;
                }
                else {
                  uint64_t v417 = 4;
                }
                uint64_t v418 = v2074;
                unsigned int v419 = v67;
                uint64_t v420 = v2054;
                switch(v417)
                {
                  case 1:
                    int v421 = *v77;
                    goto LABEL_1325;
                  case 2:
                    int v421 = *(unsigned __int16 *)v77;
                    goto LABEL_1325;
                  case 3:
                    int v421 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1325;
                  case 4:
                    int v421 = *(_DWORD *)v77;
LABEL_1325:
                    if (v63 < 4) {
                      unsigned int v415 = (v421 | (v416 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v415 = v421 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v802 = v415 == 1;
              if (v415 == 1) {
                uint64_t v803 = v418;
              }
              else {
                uint64_t v803 = v420;
              }
              if (v415 == 1) {
                uint64_t v804 = v72;
              }
              else {
                uint64_t v804 = v73;
              }
              unint64_t v805 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v803 + 32))(a1, v77, v804);
              a1[v805] = v802;
              if (v419 > 3) {
                goto LABEL_1335;
              }
              unsigned int v806 = ((1 << (8 * v419)) + 5) >> (8 * v419);
              if (v806 > 0xFFD6)
              {
                int v572 = 35;
                goto LABEL_2275;
              }
              if (v806 <= 0xD6) {
LABEL_1335:
              }
                *unint64_t v68 = 35;
              else {
                *(_WORD *)unint64_t v68 = 35;
              }
              return a1;
            case 0x24u:
              unsigned int v422 = v67;
              if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v2054 + 48))(v77, 1, v73))
              {
                size_t v423 = __n;
                memcpy(a1, v77, __n);
                int v424 = v77;
                uint64_t v425 = v2074;
              }
              else
              {
                (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v2054 + 32))(a1, v77, v73);
                (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v2054 + 56))(a1, 0, 1, v73);
                int v424 = v77;
                uint64_t v425 = v2074;
                size_t v423 = __n;
              }
              unint64_t v471 = (void *)((unint64_t)&a1[v423 + 7] & 0xFFFFFFFFFFFFFFF8);
              unint64_t v472 = (void *)((unint64_t)&v424[v423 + 7] & 0xFFFFFFFFFFFFFFF8);
              void *v471 = *v472;
              unint64_t v473 = ((unint64_t)v471 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v474 = ((unint64_t)v472 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v473 = *(void *)v474;
              *(unsigned char *)(v473 + 8) = *(unsigned char *)(v474 + 8);
              uint64_t v475 = (void *)((v473 + v2064 + 9) & v2016);
              unint64_t v476 = (const void *)((v474 + v2064 + 9) & v2016);
              if (v1980 == v1982)
              {
                int v477 = (*(uint64_t (**)(const void *))(v1998 + 48))(v476);
                size_t v478 = v2048;
              }
              else
              {
                long long v479 = (uint64_t *)(((unint64_t)v476 + v2001) & 0xFFFFFFFFFFFFFFF8);
                size_t v478 = v2048;
                if (v1965 <= 0x7FFFFFFE)
                {
                  uint64_t v480 = *v479;
                  if ((unint64_t)*v479 >= 0xFFFFFFFF) {
                    LODWORD(v480) = -1;
                  }
                  if ((v480 + 1) >= 2) {
                    goto LABEL_736;
                  }
                  goto LABEL_738;
                }
                int v477 = (*(uint64_t (**)(unint64_t, void, uint64_t))(v1993 + 48))(((unint64_t)v479 + v1990) & v1988, v1952, v1992);
              }
              if (v477)
              {
LABEL_736:
                memcpy(v475, v476, v478);
                goto LABEL_739;
              }
              long long v479 = (uint64_t *)(((unint64_t)v476 + v2001) & 0xFFFFFFFFFFFFFFF8);
LABEL_738:
              (*(void (**)(void *, const void *, uint64_t))(v1998 + 32))(v475, v476, v1997);
              unsigned int v573 = (void *)(((unint64_t)v475 + v2001) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v573 = *v479;
              unint64_t v574 = ((unint64_t)v573 + v1990) & v1988;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1993 + 32))(v574, ((unint64_t)v479 + v1990) & v1988, v1992);
              unint64_t v575 = v1986 + v574;
              uint64_t v72 = v2047;
              v575 &= 0xFFFFFFFFFFFFFFF8;
              int v576 = (void *)((v1986 + (((unint64_t)v479 + v1990) & v1988)) & 0xFFFFFFFFFFFFFFF8);
              *(void *)unint64_t v575 = *v576;
              *(_OWORD *)((v575 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v576 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_739:
              uint64_t v577 = (uint64_t)v476 + v478 + 10;
              *((unsigned char *)v475 + v478) = *((unsigned char *)v476 + v478);
              *(unsigned char *)(((unint64_t)v475 + v478) | 1) = *(unsigned char *)(((unint64_t)v476 + v478) | 1);
              *(unsigned char *)(((unint64_t)v475 + v478) | 2) = *(unsigned char *)(((unint64_t)v476 + v478) | 2);
              unint64_t v578 = ((unint64_t)v475 + v478 + 10) & 0xFFFFFFFFFFFFFFF8;
              long long v579 = *(_OWORD *)(v577 & 0xFFFFFFFFFFFFFFF8);
              *(unsigned char *)(v578 + 16) = *(unsigned char *)((v577 & 0xFFFFFFFFFFFFFFF8) + 16);
              *(_OWORD *)unint64_t v578 = v579;
              unint64_t v580 = ((unint64_t)v475 + v478 + 34) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v581 = ((unint64_t)v476 + v478 + 34) & 0xFFFFFFFFFFFFFFF8;
              long long v582 = *(_OWORD *)v581;
              long long v583 = *(_OWORD *)(v581 + 16);
              long long v584 = *(_OWORD *)(v581 + 32);
              *(void *)(v580 + 48) = *(void *)(v581 + 48);
              *(_OWORD *)(v580 + 16) = v583;
              *(_OWORD *)(v580 + 32) = v584;
              *(_OWORD *)unint64_t v580 = v582;
              unsigned int v585 = (void *)((v580 + 63) & 0xFFFFFFFFFFFFFFF8);
              size_t v586 = (void *)((v581 + 63) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v585 = *v586;
              *(void *)(((unint64_t)v585 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v586
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              unint64_t v587 = (void *)((unint64_t)&a1[v1969] & v1968);
              unsigned int v588 = (const void *)((unint64_t)&a2[v1969] & v1968);
              if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v425 + 48))(v588, 1, v72))
              {
                memcpy(v587, v588, v1951);
              }
              else
              {
                (*(void (**)(void *, const void *, uint64_t))(v425 + 32))(v587, v588, v72);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v425 + 56))(v587, 0, 1, v72);
              }
              unint64_t v589 = v2009;
              uint64_t v590 = (void *)(((unint64_t)v587 + v1970) & 0xFFFFFFFFFFFFFFF8);
              uint64_t v591 = (void *)(((unint64_t)v588 + v1970) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v590 = *v591;
              unint64_t v592 = ((unint64_t)v590 + 15) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v593 = ((unint64_t)v591 + 15) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v592 = *(void *)v593;
              *(unsigned char *)(v592 + 8) = *(unsigned char *)(v593 + 8);
              unsigned int v594 = (void *)((v1971 + v592) & v2020);
              size_t v595 = (const void *)((v1971 + v593) & v2020);
              if (v1981 == v1983)
              {
                int v596 = (*(uint64_t (**)(const void *))(v2000 + 48))(v595);
              }
              else
              {
                unsigned int v597 = (uint64_t *)(((unint64_t)v595 + v2002) & 0xFFFFFFFFFFFFFFF8);
                if (v1966 <= 0x7FFFFFFE)
                {
                  uint64_t v598 = *v597;
                  if ((unint64_t)*v597 >= 0xFFFFFFFF) {
                    LODWORD(v598) = -1;
                  }
                  if ((v598 + 1) >= 2) {
                    goto LABEL_753;
                  }
                  goto LABEL_755;
                }
                int v596 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v597 + v1991) & v1989);
              }
              if (v596)
              {
LABEL_753:
                memcpy(v594, v595, v2009);
                goto LABEL_756;
              }
              unsigned int v597 = (uint64_t *)(((unint64_t)v595 + v2002) & 0xFFFFFFFFFFFFFFF8);
LABEL_755:
              (*(void (**)(void *, const void *, uint64_t))(v2000 + 32))(v594, v595, v1999);
              uint64_t v599 = (void *)(((unint64_t)v594 + v2002) & 0xFFFFFFFFFFFFFFF8);
              *uint64_t v599 = *v597;
              uint64_t v600 = v68;
              unint64_t v601 = ((unint64_t)v599 + v1991) & v1989;
              (*(void (**)(unint64_t, unint64_t, uint64_t))(v1995 + 32))(v601, ((unint64_t)v597 + v1991) & v1989, v1994);
              unint64_t v602 = v1987 + v601;
              unint64_t v68 = v600;
              v602 &= 0xFFFFFFFFFFFFFFF8;
              unint64_t v589 = v2009;
              uint64_t v603 = (void *)((v1987 + (((unint64_t)v597 + v1991) & v1989)) & 0xFFFFFFFFFFFFFFF8);
              *(void *)unint64_t v602 = *v603;
              *(_OWORD *)((v602 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((unint64_t)v603 + 15) & 0xFFFFFFFFFFFFFFF8);
LABEL_756:
              *((unsigned char *)v594 + v589) = *((unsigned char *)v595 + v589);
              *(unsigned char *)(((unint64_t)v594 + v589) | 1) = *(unsigned char *)(((unint64_t)v595 + v589) | 1);
              *(unsigned char *)(((unint64_t)v594 + v589) | 2) = *(unsigned char *)(((unint64_t)v595 + v589) | 2);
              unint64_t v604 = ((unint64_t)v594 + v589 + 10) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v605 = ((unint64_t)v595 + v589 + 10) & 0xFFFFFFFFFFFFFFF8;
              long long v606 = *(_OWORD *)v605;
              *(unsigned char *)(v604 + 16) = *(unsigned char *)(v605 + 16);
              *(_OWORD *)unint64_t v604 = v606;
              unint64_t v607 = ((unint64_t)v594 + v589 + 34) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v608 = ((unint64_t)v595 + v589 + 34) & 0xFFFFFFFFFFFFFFF8;
              long long v609 = *(_OWORD *)v608;
              long long v610 = *(_OWORD *)(v608 + 16);
              long long v611 = *(_OWORD *)(v608 + 32);
              *(void *)(v607 + 48) = *(void *)(v608 + 48);
              *(_OWORD *)(v607 + 16) = v610;
              *(_OWORD *)(v607 + 32) = v611;
              *(_OWORD *)unint64_t v607 = v609;
              uint64_t v612 = (void *)((v608 + 63) & 0xFFFFFFFFFFFFFFF8);
              unsigned int v613 = (void *)((v607 + 63) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v613 = *v612;
              *(void *)(((unint64_t)v613 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v612
                                                                                             + 15) & 0xFFFFFFFFFFFFFFF8);
              *((unsigned char *)v587 + v1972) = *((unsigned char *)v588 + v1972);
              unint64_t v614 = ((unint64_t)v587 + v1972) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v615 = ((unint64_t)v588 + v1972) & 0xFFFFFFFFFFFFFFF8;
              *(void *)(v614 + 8) = *(void *)(v615 + 8);
              unsigned int v616 = (_OWORD *)((v614 + 23) & 0xFFFFFFFFFFFFFFF8);
              BOOL v617 = (_OWORD *)((v615 + 23) & 0xFFFFFFFFFFFFFFF8);
              *unsigned int v616 = *v617;
              unint64_t v618 = ((unint64_t)v616 + 23) & 0xFFFFFFFFFFFFFFF8;
              unint64_t v619 = ((unint64_t)v617 + 23) & 0xFFFFFFFFFFFFFFF8;
              *(void *)unint64_t v618 = *(void *)v619;
              *(unsigned char *)(v618 + 8) = *(unsigned char *)(v619 + 8);
              *(void *)(((unint64_t)v616 + 39) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v617
                                                                                             + 39) & 0xFFFFFFFFFFFFFFF8);
              if (v422 > 3) {
                goto LABEL_757;
              }
              unsigned int v620 = ((1 << (8 * v422)) + 5) >> (8 * v422);
              if (v620 > 0xFFD6)
              {
                int v572 = 36;
                goto LABEL_2275;
              }
              if (v620 <= 0xD6) {
LABEL_757:
              }
                *unint64_t v68 = 36;
              else {
                *(_WORD *)unint64_t v68 = 36;
              }
              break;
            case 0x25u:
              unsigned int v426 = v77[v63];
              unsigned int v427 = v426 - 2;
              if (v426 < 2)
              {
                unsigned int v430 = v67;
                uint64_t v429 = v2074;
                uint64_t v431 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v428 = v63;
                }
                else {
                  uint64_t v428 = 4;
                }
                uint64_t v429 = v2074;
                unsigned int v430 = v67;
                uint64_t v431 = v2054;
                switch(v428)
                {
                  case 1:
                    int v432 = *v77;
                    goto LABEL_1343;
                  case 2:
                    int v432 = *(unsigned __int16 *)v77;
                    goto LABEL_1343;
                  case 3:
                    int v432 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1343;
                  case 4:
                    int v432 = *(_DWORD *)v77;
LABEL_1343:
                    if (v63 < 4) {
                      unsigned int v426 = (v432 | (v427 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v426 = v432 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v807 = v426 == 1;
              if (v426 == 1) {
                uint64_t v808 = v429;
              }
              else {
                uint64_t v808 = v431;
              }
              if (v426 == 1) {
                uint64_t v809 = v72;
              }
              else {
                uint64_t v809 = v73;
              }
              unint64_t v810 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v808 + 32))(a1, v77, v809);
              a1[v810] = v807;
              a1[v2071] = v77[v2071];
              if (v430 > 3) {
                goto LABEL_1353;
              }
              unsigned int v811 = ((1 << (8 * v430)) + 5) >> (8 * v430);
              if (v811 > 0xFFD6)
              {
                int v572 = 37;
                goto LABEL_2275;
              }
              if (v811 <= 0xD6) {
LABEL_1353:
              }
                *unint64_t v68 = 37;
              else {
                *(_WORD *)unint64_t v68 = 37;
              }
              return a1;
            case 0x26u:
              unsigned int v433 = v77[v63];
              unsigned int v434 = v433 - 2;
              if (v433 < 2)
              {
                unsigned int v437 = v67;
                uint64_t v436 = v2074;
                uint64_t v438 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v435 = v63;
                }
                else {
                  uint64_t v435 = 4;
                }
                uint64_t v436 = v2074;
                unsigned int v437 = v67;
                uint64_t v438 = v2054;
                switch(v435)
                {
                  case 1:
                    int v439 = *v77;
                    goto LABEL_1361;
                  case 2:
                    int v439 = *(unsigned __int16 *)v77;
                    goto LABEL_1361;
                  case 3:
                    int v439 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1361;
                  case 4:
                    int v439 = *(_DWORD *)v77;
LABEL_1361:
                    if (v63 < 4) {
                      unsigned int v433 = (v439 | (v434 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v433 = v439 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v812 = v433 == 1;
              if (v433 == 1) {
                uint64_t v813 = v436;
              }
              else {
                uint64_t v813 = v438;
              }
              if (v433 == 1) {
                uint64_t v814 = v72;
              }
              else {
                uint64_t v814 = v73;
              }
              unint64_t v815 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v813 + 32))(a1, v77, v814);
              a1[v815] = v812;
              if (v437 > 3) {
                goto LABEL_1371;
              }
              unsigned int v816 = ((1 << (8 * v437)) + 5) >> (8 * v437);
              if (v816 > 0xFFD6)
              {
                int v572 = 38;
                goto LABEL_2275;
              }
              if (v816 <= 0xD6) {
LABEL_1371:
              }
                *unint64_t v68 = 38;
              else {
                *(_WORD *)unint64_t v68 = 38;
              }
              return a1;
            case 0x27u:
              unsigned int v440 = v77[v63];
              unsigned int v441 = v440 - 2;
              if (v440 < 2)
              {
                unsigned int v444 = v67;
                uint64_t v443 = v2074;
                uint64_t v445 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v442 = v63;
                }
                else {
                  uint64_t v442 = 4;
                }
                uint64_t v443 = v2074;
                unsigned int v444 = v67;
                uint64_t v445 = v2054;
                switch(v442)
                {
                  case 1:
                    int v446 = *v77;
                    goto LABEL_1379;
                  case 2:
                    int v446 = *(unsigned __int16 *)v77;
                    goto LABEL_1379;
                  case 3:
                    int v446 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1379;
                  case 4:
                    int v446 = *(_DWORD *)v77;
LABEL_1379:
                    if (v63 < 4) {
                      unsigned int v440 = (v446 | (v441 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v440 = v446 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v817 = v440 == 1;
              if (v440 == 1) {
                uint64_t v818 = v443;
              }
              else {
                uint64_t v818 = v445;
              }
              if (v440 == 1) {
                uint64_t v819 = v72;
              }
              else {
                uint64_t v819 = v73;
              }
              unint64_t v820 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v818 + 32))(a1, v77, v819);
              a1[v820] = v817;
              if (v444 > 3) {
                goto LABEL_1389;
              }
              unsigned int v821 = ((1 << (8 * v444)) + 5) >> (8 * v444);
              if (v821 > 0xFFD6)
              {
                int v572 = 39;
                goto LABEL_2275;
              }
              if (v821 <= 0xD6) {
LABEL_1389:
              }
                *unint64_t v68 = 39;
              else {
                *(_WORD *)unint64_t v68 = 39;
              }
              return a1;
            case 0x28u:
              unsigned int v447 = v77[v63];
              unsigned int v448 = v447 - 2;
              if (v447 < 2)
              {
                unsigned int v451 = v67;
                uint64_t v450 = v2074;
                uint64_t v452 = v2054;
              }
              else
              {
                if (v63 <= 3) {
                  uint64_t v449 = v63;
                }
                else {
                  uint64_t v449 = 4;
                }
                uint64_t v450 = v2074;
                unsigned int v451 = v67;
                uint64_t v452 = v2054;
                switch(v449)
                {
                  case 1:
                    int v453 = *v77;
                    goto LABEL_1397;
                  case 2:
                    int v453 = *(unsigned __int16 *)v77;
                    goto LABEL_1397;
                  case 3:
                    int v453 = *(unsigned __int16 *)v77 | (v77[2] << 16);
                    goto LABEL_1397;
                  case 4:
                    int v453 = *(_DWORD *)v77;
LABEL_1397:
                    if (v63 < 4) {
                      unsigned int v447 = (v453 | (v448 << (8 * v63))) + 2;
                    }
                    else {
                      unsigned int v447 = v453 + 2;
                    }
                    break;
                  default:
                    break;
                }
              }
              BOOL v822 = v447 == 1;
              if (v447 == 1) {
                uint64_t v823 = v450;
              }
              else {
                uint64_t v823 = v452;
              }
              if (v447 == 1) {
                uint64_t v824 = v72;
              }
              else {
                uint64_t v824 = v73;
              }
              unint64_t v825 = v63;
              (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v823 + 32))(a1, v77, v824);
              a1[v825] = v822;
              if (v451 > 3) {
                goto LABEL_1407;
              }
              unsigned int v826 = ((1 << (8 * v451)) + 5) >> (8 * v451);
              if (v826 > 0xFFD6)
              {
                int v572 = 40;
                goto LABEL_2275;
              }
              if (v826 <= 0xD6) {
LABEL_1407:
              }
                *unint64_t v68 = 40;
              else {
                *(_WORD *)unint64_t v68 = 40;
              }
              return a1;
            default:
              if (v67 > 3) {
                goto LABEL_395;
              }
              unsigned int v180 = ((1 << (8 * v67)) + 5) >> (8 * v67);
              uint64_t v181 = 2;
              if (v180 > 0xFFD6) {
                uint64_t v181 = 4;
              }
              if (v180 <= 0xD6) {
LABEL_395:
              }
                uint64_t v181 = 1;
              memcpy(a1, v77, v181 + v67);
              return a1;
          }
          return a1;
        case 2u:
          uint64_t v94 = v67;
          (*(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8))(a1, v2047);
          unint64_t v1181 = (unint64_t)&a1[v1943] & v2005;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2054 + 48))(v1181, 1, AssociatedTypeWitness))(*(void (**)(unint64_t, uint64_t))(v2054 + 8))(v1181, AssociatedTypeWitness); {
          unint64_t v1182 = v64;
          }
          unint64_t v1183 = (v1947 + v1181) & v2016;
          if (v1980 == v1982)
          {
            int v1184 = (*(uint64_t (**)(size_t))(v1998 + 48))((v1947 + v1181) & v2016);
LABEL_1901:
            if (v1184) {
              goto LABEL_1904;
            }
            int v1294 = (uint64_t *)((v2001 + v1183) & 0xFFFFFFFFFFFFFFF8);
            goto LABEL_1903;
          }
          int v1294 = (uint64_t *)((v2001 + v1183) & 0xFFFFFFFFFFFFFFF8);
          if (v1965 > 0x7FFFFFFE)
          {
            int v1184 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v1294 + v1990) & v1988);
            goto LABEL_1901;
          }
          uint64_t v1295 = *v1294;
          if ((unint64_t)*v1294 >= 0xFFFFFFFF) {
            LODWORD(v1295) = -1;
          }
          if ((v1295 + 1) < 2)
          {
LABEL_1903:
            (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v1183, v1997);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1993 + 8))(((unint64_t)v1294 + v1990) & v1988, v1992);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
LABEL_1904:
          unint64_t v1334 = v2048;
          goto LABEL_1922;
        case 3u:
          unint64_t v1935 = v64;
          uint64_t v1167 = v67;
          long long v1185 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
          v1185(a1, v2047);
          unint64_t v1186 = (unint64_t)&a1[v1949] & v1974;
          uint64_t v1187 = v1979;
          if (v1979 == v1984)
          {
            v1188 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2074 + 48);
            unint64_t v1189 = (unint64_t)&a1[v1949] & v1974;
            uint64_t v1190 = v2047;
LABEL_2090:
            unint64_t v1404 = (unint64_t)&a1[v1949] & v1974;
            int v1337 = v1188(v1189, v1187, v1190);
            goto LABEL_2091;
          }
          unint64_t v1296 = (v2003 + v1186) & v2019;
          unint64_t v1297 = (v1975 + v1296) & v2020;
          if (v1983 == v1984)
          {
            uint64_t v1187 = v1981;
            if (v1981 == v1983)
            {
              uint64_t v1190 = v1999;
              v1188 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2000 + 48);
              unint64_t v1189 = (v1975 + v1296) & v2020;
              goto LABEL_2090;
            }
            long long v1380 = (unint64_t *)((v2002 + v1297) & 0xFFFFFFFFFFFFFFF8);
            if (v1966 > 0x7FFFFFFE)
            {
              unint64_t v1189 = ((unint64_t)v1380 + v1991) & v1989;
              uint64_t v1190 = v1994;
              v1188 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1995 + 48);
              uint64_t v1187 = v1953;
              goto LABEL_2090;
            }
            unint64_t v1381 = *v1380;
            if (v1381 >= 0xFFFFFFFF) {
              LODWORD(v1381) = -1;
            }
            if ((v1381 + 1) >= 2) {
              goto LABEL_2171;
            }
LABEL_2094:
            v1185((unsigned __int8 *)v1186, v2047);
            v1185((unsigned __int8 *)v1296, v2047);
            (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v1297, v1999);
            swift_bridgeObjectRelease();
            (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v1297) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            unint64_t v1445 = (v2050 + v1297 + v2009) & v2012;
            v1446 = *(void (**)(unint64_t, uint64_t))(v2015 + 8);
            v1446((v2013 + v1445) & v2014, v2017);
            unint64_t v1447 = (v2010 + ((v2013 + v1445) & v2014)) & v2014;
            v1446(v1447, v2017);
            swift_bridgeObjectRelease();
            unint64_t v1448 = (v2007
                   + ((((((v1978 + v1447) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
            if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1448, 1, v2017)) {
              v1446(v1448, v2017);
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v1449 = (uint64_t *)((((((v2008 + v1448) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
            unint64_t v1450 = v1449[1];
            if ((v1450 & 0x3000000000000000) == 0) {
              sub_24D400DCC(*v1449, v1450);
            }
            swift_bridgeObjectRelease();
            unint64_t v1451 = v1445 + v2049;
            long long v1452 = *(void **)(v1451 + 16);
            LODWORD(v1453) = -1;
            if ((unint64_t)v1452 < 0xFFFFFFFF) {
              uint64_t v1453 = *(void *)(v1451 + 16);
            }
            uint64_t v72 = v2047;
            if ((int)v1453 - 1 < 0)
            {

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (*(void *)(v1451 + 192))
              {
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
              }
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            sub_24D466534(*(void *)((((v1451 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1451 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
            goto LABEL_2171;
          }
          unint64_t v1335 = v1297 + v2009;
          if ((v1961 & 0x80000000) == 0)
          {
            unint64_t v1336 = *(void *)(v1335 + 8);
            if (v1336 >= 0xFFFFFFFF) {
              LODWORD(v1336) = -1;
            }
            int v1337 = v1336 + 1;
            goto LABEL_2092;
          }
          unint64_t v1404 = (unint64_t)&a1[v1949] & v1974;
          uint64_t v1405 = (v2013 + ((v2050 + v1335) & v2012)) & v2014;
          if (v1996 > 0x7FFFFFFD)
          {
            int v1337 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1405, v1996, v2017);
LABEL_2091:
            unint64_t v1186 = v1404;
LABEL_2092:
            if (v1337) {
              goto LABEL_2171;
            }
            unint64_t v1296 = (v2003 + v1186) & v2019;
            unint64_t v1297 = (v1975 + v1296) & v2020;
            goto LABEL_2094;
          }
          unint64_t v1917 = *(void *)(((v1978 + ((v2010 + v1405) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
          if (v1917 >= 0xFFFFFFFF) {
            LODWORD(v1917) = -1;
          }
          if ((v1917 + 1) < 2) {
            goto LABEL_2094;
          }
          goto LABEL_2171;
        case 4u:
        case 5u:
        case 7u:
          unint64_t v1164 = a1;
          uint64_t v1165 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
          uint64_t v1166 = v2047;
          goto LABEL_1680;
        case 6u:
          uint64_t v1191 = v67;
          (*(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8))(a1, v2047);
          unint64_t v1192 = (unint64_t)&a1[v1942] & v1940;
          int v1193 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1945 + 48))(v1192, 1, v2028);
          uint64_t v67 = v1191;
          size_t v76 = v2053;
          unint64_t v63 = v2070;
          if (v1193) {
            goto LABEL_321;
          }
          (*(void (**)(unint64_t, uint64_t, uint64_t))(v1945 + 8))(v1192, v2028, v1191);
          goto LABEL_1694;
        default:
          unint64_t v1935 = v64;
          uint64_t v1167 = v67;
          unint64_t v1168 = *(void (**)(unsigned __int8 *, uint64_t))(v2074 + 8);
          v1168(a1, v2047);
          unint64_t v1169 = (unint64_t)&a1[v1949] & v1974;
          uint64_t v1170 = v1979;
          if (v1979 == v1984)
          {
            unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2074 + 48);
            unint64_t v1172 = (unint64_t)&a1[v1949] & v1974;
            uint64_t v1173 = v2047;
LABEL_2043:
            unint64_t v1400 = (unint64_t)&a1[v1949] & v1974;
            int v1330 = v1171(v1172, v1170, v1173);
            goto LABEL_2044;
          }
          unint64_t v1290 = (v2003 + v1169) & v2019;
          unint64_t v1291 = (v1975 + v1290) & v2020;
          if (v1983 == v1984)
          {
            uint64_t v1170 = v1981;
            if (v1981 == v1983)
            {
              uint64_t v1173 = v1999;
              unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v2000 + 48);
              unint64_t v1172 = (v1975 + v1290) & v2020;
              goto LABEL_2043;
            }
            long long v1376 = (unint64_t *)((v2002 + v1291) & 0xFFFFFFFFFFFFFFF8);
            if (v1966 > 0x7FFFFFFE)
            {
              unint64_t v1172 = ((unint64_t)v1376 + v1991) & v1989;
              uint64_t v1173 = v1994;
              unint64_t v1171 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v1995 + 48);
              uint64_t v1170 = v1953;
              goto LABEL_2043;
            }
            unint64_t v1377 = *v1376;
            if (v1377 >= 0xFFFFFFFF) {
              LODWORD(v1377) = -1;
            }
            if ((v1377 + 1) >= 2) {
              goto LABEL_2058;
            }
          }
          else
          {
            unint64_t v1328 = v1291 + v2009;
            if ((v1961 & 0x80000000) == 0)
            {
              unint64_t v1329 = *(void *)(v1328 + 8);
              if (v1329 >= 0xFFFFFFFF) {
                LODWORD(v1329) = -1;
              }
              int v1330 = v1329 + 1;
              goto LABEL_2045;
            }
            unint64_t v1400 = (unint64_t)&a1[v1949] & v1974;
            uint64_t v1401 = (v2013 + ((v2050 + v1328) & v2012)) & v2014;
            if (v1996 > 0x7FFFFFFD)
            {
              int v1330 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v2015 + 48))(v1401, v1996, v2017);
LABEL_2044:
              unint64_t v1169 = v1400;
LABEL_2045:
              if (v1330) {
                goto LABEL_2058;
              }
              unint64_t v1290 = (v2003 + v1169) & v2019;
              unint64_t v1291 = (v1975 + v1290) & v2020;
              goto LABEL_2047;
            }
            unint64_t v1915 = *(void *)(((v1978 + ((v2010 + v1401) & v2014)) & 0xFFFFFFFFFFFFFFF8) + 8);
            if (v1915 >= 0xFFFFFFFF) {
              LODWORD(v1915) = -1;
            }
            if ((v1915 + 1) >= 2)
            {
LABEL_2058:
              unint64_t v1427 = v1169 + v66;
LABEL_2123:

LABEL_2172:
              uint64_t v67 = v1167;
              uint64_t v73 = AssociatedTypeWitness;
              size_t v76 = v2053;
              unint64_t v64 = v1935;
              uint64_t v77 = a2;
              unint64_t v63 = v2070;
              goto LABEL_321;
            }
          }
LABEL_2047:
          unint64_t v1957 = v1169;
          v1168((unsigned __int8 *)v1169, v2047);
          v1168((unsigned __int8 *)v1290, v2047);
          (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v1291, v1999);
          swift_bridgeObjectRelease();
          (*(void (**)(unint64_t, uint64_t))(v1995 + 8))((v1991 + ((v2002 + v1291) & 0xFFFFFFFFFFFFFFF8)) & v1989, v1994);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v1418 = (v2050 + v1291 + v2009) & v2012;
          unint64_t v1419 = *(void (**)(unint64_t, uint64_t))(v2015 + 8);
          v1419((v2013 + v1418) & v2014, v2017);
          unint64_t v1420 = (v2010 + ((v2013 + v1418) & v2014)) & v2014;
          v1419(v1420, v2017);
          swift_bridgeObjectRelease();
          unint64_t v1421 = (v2007
                 + ((((((v1978 + v1420) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2014;
          if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2015 + 48))(v1421, 1, v2017)) {
            v1419(v1421, v2017);
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          unint64_t v1422 = (uint64_t *)((((((v2008 + v1421) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8);
          unint64_t v1423 = v1422[1];
          if ((v1423 & 0x3000000000000000) == 0) {
            sub_24D400DCC(*v1422, v1423);
          }
          swift_bridgeObjectRelease();
          unint64_t v1424 = v1418 + v2049;
          v1425 = *(void **)(v1424 + 16);
          LODWORD(v1426) = -1;
          if ((unint64_t)v1425 < 0xFFFFFFFF) {
            uint64_t v1426 = *(void *)(v1424 + 16);
          }
          uint64_t v72 = v2047;
          if ((int)v1426 - 1 < 0)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if (*(void *)(v1424 + 192))
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          sub_24D466534(*(void *)((((v1424 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8), *(void *)(((((v1424 + 311) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
          unint64_t v1169 = v1957;
          goto LABEL_2058;
      }
    case 0x1Cu:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v149 = v2070;
        }
        else {
          uint64_t v149 = 4;
        }
        switch(v149)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Du:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v150 = v2070;
        }
        else {
          uint64_t v150 = 4;
        }
        switch(v150)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Eu:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v151 = v2070;
        }
        else {
          uint64_t v151 = 4;
        }
        switch(v151)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x1Fu:
      unsigned int v152 = a1[v2070];
      unsigned int v153 = v152 - 2;
      if (v152 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v154 = v2070;
        }
        else {
          uint64_t v154 = 4;
        }
        switch(v154)
        {
          case 1:
            int v155 = *a1;
            goto LABEL_856;
          case 2:
            int v155 = *(unsigned __int16 *)a1;
            goto LABEL_856;
          case 3:
            int v155 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_856;
          case 4:
            int v155 = *(_DWORD *)a1;
LABEL_856:
            if (v2070 < 4) {
              unsigned int v152 = (v155 | (v153 << (8 * v2070))) + 2;
            }
            else {
              unsigned int v152 = v155 + 2;
            }
            break;
          default:
            break;
        }
      }
      uint64_t v126 = v67;
      size_t v127 = v2053;
      uint64_t v654 = v2074;
      if (v152 == 1)
      {
        uint64_t v655 = v2047;
      }
      else
      {
        uint64_t v654 = v2054;
        uint64_t v655 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v654 + 8))(a1, v655);
      char v631 = v2070;
      uint64_t v656 = (unsigned __int8 *)((unint64_t)&a1[v2011] & v2018);
      unsigned int v633 = v656[v2070];
      unsigned int v634 = v633 - 2;
      if (v633 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v657 = v2070;
        }
        else {
          uint64_t v657 = 4;
        }
        switch(v657)
        {
          case 1:
            int v636 = *v656;
            goto LABEL_876;
          case 2:
            int v636 = *(unsigned __int16 *)v656;
            goto LABEL_876;
          case 3:
            int v636 = *(unsigned __int16 *)v656 | (*(unsigned __int8 *)(((unint64_t)&a1[v2011] & v2018) + 2) << 16);
            goto LABEL_876;
          case 4:
            int v636 = *(_DWORD *)v656;
LABEL_876:
            if (v2070 >= 4) {
LABEL_872:
            }
              unsigned int v633 = v636 + 2;
            else {
LABEL_877:
            }
              unsigned int v633 = (v636 | (v634 << (8 * v631))) + 2;
            break;
          default:
            break;
        }
      }
LABEL_878:
      if (v633 == 1) {
        BOOL v658 = *(void (**)(void))(v2074 + 8);
      }
      else {
        BOOL v658 = *(void (**)(void))(v2054 + 8);
      }
      v658();
LABEL_882:
      unint64_t v63 = v2070;
      size_t v76 = v127;
      uint64_t v67 = v126;
      goto LABEL_321;
    case 0x20u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v156 = v2070;
        }
        else {
          uint64_t v156 = 4;
        }
        switch(v156)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x21u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v157 = v2070;
        }
        else {
          uint64_t v157 = 4;
        }
        switch(v157)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x22u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v158 = v2070;
        }
        else {
          uint64_t v158 = 4;
        }
        switch(v158)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x23u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v159 = v2070;
        }
        else {
          uint64_t v159 = 4;
        }
        switch(v159)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x24u:
      uint64_t v160 = v67;
      if (!(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v2054 + 48))(a1, 1, AssociatedTypeWitness))(*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(a1, AssociatedTypeWitness); {
      unint64_t v1931 = v64;
      }
      unint64_t v161 = (((((unint64_t)&a1[__n + 7] & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v2064 + 9) & v2016;
      if (v1980 == v1982)
      {
        int v162 = (*(uint64_t (**)(unint64_t))(v1998 + 48))((((((unint64_t)&a1[__n + 7] & 0xFFFFFFFFFFFFFFF8)
                                                                           + 15) & 0xFFFFFFFFFFFFFFF8)
                                                                         + v2064
                                                                         + 9) & v2016);
LABEL_690:
        if (v162) {
          goto LABEL_693;
        }
        unint64_t v458 = (uint64_t *)((v2001 + v161) & 0xFFFFFFFFFFFFFFF8);
        goto LABEL_692;
      }
      unint64_t v458 = (uint64_t *)((v2001 + v161) & 0xFFFFFFFFFFFFFFF8);
      if (v1965 > 0x7FFFFFFE)
      {
        int v162 = (*(uint64_t (**)(unint64_t))(v1993 + 48))(((unint64_t)v458 + v1990) & v1988);
        goto LABEL_690;
      }
      uint64_t v459 = *v458;
      if ((unint64_t)*v458 >= 0xFFFFFFFF) {
        LODWORD(v459) = -1;
      }
      if ((v459 + 1) < 2)
      {
LABEL_692:
        (*(void (**)(unint64_t, uint64_t))(v1998 + 8))(v161, v1997);
        swift_bridgeObjectRelease();
        (*(void (**)(unint64_t, uint64_t))(v1993 + 8))(((unint64_t)v458 + v1990) & v1988, v1992);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
LABEL_693:
      sub_24D3E380C(*(void **)((v2048 + v161 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v2048 + v161 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v2048 + v161 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
      unint64_t v557 = (v2048 + v161 + 34) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v558 = *(void *)(v557 + 16);
      BOOL v559 = ((4 * (v558 >> 60)) & 0xC | ((v558 >> 60) >> 2)) != 0xF && ((4 * (v558 >> 60)) & 0xC) != 0;
      if (v558 >> 60 != 15 && !v559) {
        sub_24D400DCC(*(void *)(v557 + 8), v558);
      }

      unint64_t v560 = (unint64_t)&a1[v1969] & v1968;
      if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2074 + 48))(v560, 1, v2047)) {
        (*(void (**)(unint64_t, uint64_t))(v2074 + 8))(v560, v2047);
      }
      unint64_t v561 = (v1971 + ((((v1970 + v560) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2020;
      if (v1981 == v1983)
      {
        int v562 = (*(uint64_t (**)(size_t))(v2000 + 48))((v1971
                                                               + ((((v1970 + v560) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)) & v2020);
      }
      else
      {
        BOOL v563 = (uint64_t *)((v2002 + v561) & 0xFFFFFFFFFFFFFFF8);
        if (v1966 <= 0x7FFFFFFE)
        {
          uint64_t v564 = *v563;
          if ((unint64_t)*v563 >= 0xFFFFFFFF) {
            LODWORD(v564) = -1;
          }
          if ((v564 + 1) >= 2) {
            goto LABEL_712;
          }
          goto LABEL_711;
        }
        int v562 = (*(uint64_t (**)(unint64_t))(v1995 + 48))(((unint64_t)v563 + v1991) & v1989);
      }
      if (v562)
      {
LABEL_712:
        sub_24D3E380C(*(void **)((v561 + v2009 + 10) & 0xFFFFFFFFFFFFFFF8), *(id *)(((v561 + v2009 + 10) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned char *)(((v561 + v2009 + 10) & 0xFFFFFFFFFFFFFFF8) + 16));
        unint64_t v565 = (v561 + v2009 + 34) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v566 = *(void *)(v565 + 16);
        BOOL v567 = ((4 * (v566 >> 60)) & 0xC | ((v566 >> 60) >> 2)) != 0xF && ((4 * (v566 >> 60)) & 0xC) != 0;
        if (v566 >> 60 != 15 && !v567) {
          sub_24D400DCC(*(void *)(v565 + 8), v566);
        }

        swift_bridgeObjectRelease();
        uint64_t v67 = v160;
        uint64_t v73 = AssociatedTypeWitness;
        size_t v76 = v2053;
        unint64_t v64 = v1931;
        unint64_t v63 = v2070;
        goto LABEL_321;
      }
      BOOL v563 = (uint64_t *)((v2002 + v561) & 0xFFFFFFFFFFFFFFF8);
LABEL_711:
      (*(void (**)(unint64_t, uint64_t))(v2000 + 8))(v561, v1999);
      swift_bridgeObjectRelease();
      (*(void (**)(unint64_t, uint64_t))(v1995 + 8))(((unint64_t)v563 + v1991) & v1989, v1994);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_712;
    case 0x25u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v163 = v2070;
        }
        else {
          uint64_t v163 = 4;
        }
        switch(v163)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x26u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v164 = v2070;
        }
        else {
          uint64_t v164 = 4;
        }
        switch(v164)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x27u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v165 = v2070;
        }
        else {
          uint64_t v165 = 4;
        }
        switch(v165)
        {
          case 1:
            goto LABEL_308;
          case 2:
            goto LABEL_310;
          case 3:
            goto LABEL_312;
          case 4:
            goto LABEL_314;
          default:
            goto LABEL_316;
        }
      }
      goto LABEL_316;
    case 0x28u:
      unsigned int v81 = a1[v2070];
      unsigned int v82 = v81 - 2;
      if (v81 >= 2)
      {
        if (v2070 <= 3) {
          uint64_t v166 = v2070;
        }
        else {
          uint64_t v166 = 4;
        }
        switch(v166)
        {
          case 1:
LABEL_308:
            int v167 = *a1;
            if (v2070 < 4) {
              goto LABEL_313;
            }
            goto LABEL_315;
          case 2:
LABEL_310:
            int v167 = *(unsigned __int16 *)a1;
            if (v2070 >= 4) {
              goto LABEL_315;
            }
            goto LABEL_313;
          case 3:
LABEL_312:
            int v167 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            if (v2070 < 4) {
              goto LABEL_313;
            }
            goto LABEL_315;
          case 4:
LABEL_314:
            int v167 = *(_DWORD *)a1;
            if (v2070 < 4) {
LABEL_313:
            }
              unsigned int v81 = (v167 | (v82 << (8 * v2070))) + 2;
            else {
LABEL_315:
            }
              unsigned int v81 = v167 + 2;
            break;
          default:
            break;
        }
      }
LABEL_316:
      uint64_t v168 = v67;
      size_t v169 = v2053;
      if (v81 == 1)
      {
        uint64_t v170 = v2074;
        unint64_t v137 = a1;
LABEL_318:
        (*(void (**)(unsigned __int8 *, uint64_t))(v170 + 8))(v137, v2047);
      }
      else
      {
        (*(void (**)(unsigned __int8 *, uint64_t))(v2054 + 8))(a1, AssociatedTypeWitness);
      }
LABEL_320:
      unint64_t v63 = v2070;
      size_t v76 = v169;
      uint64_t v67 = v168;
      goto LABEL_321;
    default:
      goto LABEL_321;
  }
}

uint64_t sub_24D55B424(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v89 = *(void *)(a3 + 24);
  uint64_t v87 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v87 + 80);
  unint64_t v93 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v87 + 64);
  if (v8 <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(v87 + 64);
  }
  unint64_t v95 = v9 + 1;
  unint64_t v96 = v9;
  uint64_t v10 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v97 = (((v10 | v7) + v9 + 1) & ~(v10 | v7)) + v9 + 1;
  int v94 = *(_DWORD *)(v5 + 84);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = *(void *)(sub_24DCC8CE8() - 8);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v90 = *(_DWORD *)(v11 + 80) & 0xF8 | v14 | 7;
  unint64_t v91 = ((((*(void *)(v12 + 64) + ((v14 + ((*(void *)(v11 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v14) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v86 = (v16 | 7) + 16;
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v18 = 7;
  if (!*(_DWORD *)(v13 + 84)) {
    uint64_t v18 = 8;
  }
  unint64_t v84 = ((((((((((v18
                + v17
                + ((v16
                  + ((((((v17 + ((v17 + v16 + ((v16 + 12) & ~v16)) & ~v16) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  uint64_t v15 = *(_DWORD *)(v11 + 80) & 0xF8 | v14 | 7;
  unint64_t v19 = (((v84 + ((v86 + ((((v6 + v10) & ~v10) + v6 + v15) & ~v15) + v91) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v85 = v19 + 16;
  uint64_t v20 = v15 | v10 | v16;
  unint64_t v92 = ((v19 + ((v19 + 16 + v20) & ~v20) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v88 = *(_DWORD *)(v87 + 84);
  uint64_t v21 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v22 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = *(_DWORD *)(v21 + 80) & 0xF8 | v23 | 7;
  unint64_t v25 = ((((*(void *)(v22 + 64) + ((v23 + ((*(void *)(v21 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v23) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v26 = (((v84 + ((v86 + ((((v8 + v7) & ~v7) + v8 + v24) & ~v24) + v25) & ~(v16 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = v26 + 16;
  uint64_t v28 = v24 | v7 | v16;
  unint64_t v29 = v26 + ((v26 + 16 + v28) & ~v28);
  unint64_t v31 = v85 + ((v20 + v6) & ~v20);
  if (v88) {
    unint64_t v32 = v8;
  }
  else {
    unint64_t v32 = v8 + 1;
  }
  uint64_t v34 = *(void *)(v4 - 8);
  unint64_t v35 = (v6 + *(unsigned __int8 *)(v34 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  int v36 = *(_DWORD *)(v34 + 84);
  uint64_t v37 = *(void *)(v34 + 64);
  unint64_t v38 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v36) {
    ++v37;
  }
  unint64_t v39 = v37 + v35;
  unint64_t v40 = ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v41 = ((((((v32 + v24 + ((v31 + v7) & ~v7)) & ~v24) + v25 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v33 = v32 + v24 + v93;
  unint64_t v42 = ((v38 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v6 > v40) {
    unint64_t v40 = v6;
  }
  if (v41 <= v25 + (v33 & ~v24) + 16) {
    unint64_t v41 = v25 + (v33 & ~v24) + 16;
  }
  if (v42 > v39) {
    unint64_t v39 = v42;
  }
  if (v40 <= v41) {
    unint64_t v43 = v41;
  }
  else {
    unint64_t v43 = v40;
  }
  if (v43 <= v39) {
    unint64_t v44 = v39;
  }
  else {
    unint64_t v44 = v43;
  }
  unint64_t v45 = v27 + ((v28 + v8) & ~v28);
  if (v94) {
    unint64_t v46 = v6;
  }
  else {
    unint64_t v46 = v6 + 1;
  }
  uint64_t v47 = *(void *)(v89 - 8);
  unint64_t v48 = v46 + v90 + ((v8 + v10) & ~v10);
  unint64_t v49 = (v8 + *(unsigned __int8 *)(v47 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
  uint64_t v50 = *(void *)(v47 + 64);
  unint64_t v51 = (v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v47 + 84)) {
    ++v50;
  }
  unint64_t v52 = v50 + v49;
  unint64_t v53 = ((v51 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v8 > v53) {
    unint64_t v53 = v8;
  }
  unint64_t v54 = ((((((v46 + v90 + ((v45 + v10) & ~v10)) & ~v90) + v91 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v54 <= v91 + (v48 & ~v90) + 16) {
    unint64_t v54 = v91 + (v48 & ~v90) + 16;
  }
  unint64_t v55 = ((v51 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v55 > v52) {
    unint64_t v52 = v55;
  }
  if (v53 <= v54) {
    unint64_t v56 = v54;
  }
  else {
    unint64_t v56 = v53;
  }
  if (v56 > v52) {
    unint64_t v52 = v56;
  }
  unint64_t v57 = v52 + 1;
  if (v57 <= v44 + 1) {
    unint64_t v57 = v44 + 1;
  }
  unint64_t v58 = ((((((((((((((v46 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v90 + 9) & ~v90) + v91 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v24 | v7)
        + 8) & ~(v24 | v7))
      + ((((((((((((v32 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v24 + 9) & ~v24) + v25 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v59 = v96 + 2;
  uint64_t v30 = ((v10 | v7) + 1) & ~(v10 | v7);
  if (v95 > v96 + 2) {
    unint64_t v59 = v96 + 1;
  }
  if (v59 <= v93 + v8) {
    unint64_t v59 = v93 + v8;
  }
  if (v59 <= v97) {
    unint64_t v59 = v97;
  }
  if (v59 <= v92) {
    unint64_t v59 = v92;
  }
  unint64_t v60 = ((v29 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v59 > v60) {
    unint64_t v60 = v59;
  }
  if (v60 <= v85) {
    unint64_t v60 = v85;
  }
  if (v60 > v27) {
    unint64_t v27 = v60;
  }
  if (v27 <= v97 + 2) {
    unint64_t v27 = v97 + 2;
  }
  if (v27 <= ((v96 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v27 = ((v96 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v27 <= (v96 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v27 = (v96 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v27 <= v30 + v95) {
    unint64_t v27 = v30 + v95;
  }
  if (v27 <= v57 + 1) {
    unint64_t v61 = v57 + 1;
  }
  else {
    unint64_t v61 = v27;
  }
  if (v61 <= ((((((v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v61 = ((((((v58 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v61 <= 0x38) {
    unint64_t v61 = 56;
  }
  if (v61 > 3)
  {
    int v62 = 42;
    goto LABEL_74;
  }
  unsigned int v63 = ((1 << (8 * v61)) + 5) >> (8 * v61);
  if (v63 <= 0xFFD6)
  {
    int v62 = v63 + 41;
    if (v63 > 0xD6)
    {
      char v65 = 16;
      unsigned int v64 = a2;
LABEL_75:
      unsigned int v66 = (1 << v65) - v62;
      if ((v66 & 0x80000000) != 0) {
        unsigned int v66 = 0x7FFFFFFF;
      }
      if (v61 > 3) {
        goto LABEL_83;
      }
LABEL_80:
      unsigned int v67 = ((1 << (8 * v61)) + 5) >> (8 * v61);
      uint64_t v68 = 2;
      if (v67 > 0xFFD6) {
        uint64_t v68 = 4;
      }
      if (v67 > 0xD6) {
        goto LABEL_84;
      }
      goto LABEL_83;
    }
LABEL_74:
    unsigned int v64 = a2;
    char v65 = 8;
    goto LABEL_75;
  }
  unsigned int v66 = 0x7FFFFFFF;
  unsigned int v64 = a2;
  if (v61 <= 3) {
    goto LABEL_80;
  }
LABEL_83:
  uint64_t v68 = 1;
LABEL_84:
  if (!v64) {
    return 0;
  }
  if (v64 <= v66) {
    goto LABEL_103;
  }
  unint64_t v69 = v68 + v61;
  char v70 = 8 * v69;
  if (v69 <= 3)
  {
    unsigned int v72 = ((v64 - v66 + ~(-1 << v70)) >> v70) + 1;
    if (HIWORD(v72))
    {
      int v71 = *(_DWORD *)((char *)a1 + v69);
      if (!v71) {
        goto LABEL_103;
      }
      goto LABEL_95;
    }
    if (v72 > 0xFF)
    {
      int v71 = *(unsigned __int16 *)((char *)a1 + v69);
      if (!*(unsigned __int16 *)((char *)a1 + v69)) {
        goto LABEL_103;
      }
      goto LABEL_95;
    }
    if (v72 < 2)
    {
LABEL_103:
      if (v66)
      {
        if (v61 < 4)
        {
          unsigned int v79 = ((1 << (8 * v61)) + 5) >> (8 * v61);
          if (v79 > 0xFFD6)
          {
            unsigned int v75 = *(_DWORD *)((char *)a1 + v61);
          }
          else if (v79 >= 0xD7)
          {
            unsigned int v75 = *(unsigned __int16 *)((char *)a1 + v61) | 0xFFFF0000;
          }
          else
          {
            unsigned int v75 = *((unsigned __int8 *)a1 + v61) | 0xFFFFFF00;
          }
          unsigned int v76 = ~v75;
          if (v79 > 0xFFD6)
          {
LABEL_116:
            unsigned int v81 = 0x7FFFFFFF;
LABEL_117:
            if (v81 > v76) {
              return -v75;
            }
            else {
              return 0;
            }
          }
          int v77 = v79 + 41;
          if (v79 > 0xD6)
          {
            char v80 = 16;
LABEL_115:
            unsigned int v81 = (1 << v80) - v77;
            if ((v81 & 0x80000000) == 0) {
              goto LABEL_117;
            }
            goto LABEL_116;
          }
        }
        else
        {
          int v74 = *((unsigned __int8 *)a1 + v61);
          unsigned int v75 = v74 | 0xFFFFFF00;
          unsigned int v76 = v74 ^ 0xFF;
          int v77 = 42;
        }
        char v80 = 8;
        goto LABEL_115;
      }
      return 0;
    }
  }
  int v71 = *((unsigned __int8 *)a1 + v69);
  if (!*((unsigned char *)a1 + v69)) {
    goto LABEL_103;
  }
LABEL_95:
  int v73 = (v71 - 1) << v70;
  if (v69 > 3) {
    int v73 = 0;
  }
  if (v69)
  {
    if (v69 > 3) {
      LODWORD(v69) = 4;
    }
    switch((int)v69)
    {
      case 2:
        LODWORD(v69) = *a1;
        break;
      case 3:
        LODWORD(v69) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v69) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v69) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v66 + (v69 | v73) + 1;
}

void sub_24D55BF50(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v86 = *(void *)(a4 + 24);
  uint64_t v84 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v84 + 80);
  unint64_t v89 = (v7 + v8) & ~v8;
  unint64_t v9 = *(void *)(v84 + 64);
  if (v9 <= v7) {
    unint64_t v10 = v7;
  }
  else {
    unint64_t v10 = *(void *)(v84 + 64);
  }
  unint64_t v92 = v10 + 1;
  unint64_t v93 = v10;
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v94 = (((v11 | v8) + v10 + 1) & ~(v11 | v8)) + v10 + 1;
  int v91 = *(_DWORD *)(v6 + 84);
  uint64_t v12 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v13 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v14 = *(void *)(sub_24DCC8CE8() - 8);
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = *(_DWORD *)(v12 + 80) & 0xF8 | v15 | 7;
  uint64_t v87 = v16;
  unint64_t v88 = ((((*(void *)(v13 + 64) + ((v15 + ((*(void *)(v12 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v15) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v83 = (v17 | 7) + 16;
  uint64_t v18 = *(void *)(v14 + 64);
  uint64_t v19 = 7;
  if (!*(_DWORD *)(v14 + 84)) {
    uint64_t v19 = 8;
  }
  unint64_t v81 = ((((((((((v19
                + v18
                + ((v17
                  + ((((((v18 + ((v18 + v17 + ((v17 + 12) & ~v17)) & ~v17) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v17)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  unint64_t v20 = (((v81 + ((v83 + ((((v7 + v11) & ~v11) + v7 + v16) & ~v16) + v88) & ~(v17 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v82 = v20 + 16;
  uint64_t v21 = v16 | v11 | v17;
  unint64_t v90 = ((v20 + ((v20 + 16 + v21) & ~v21) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v85 = *(_DWORD *)(v84 + 84);
  uint64_t v22 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v23 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v24 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v25 = *(_DWORD *)(v22 + 80) & 0xF8 | v24 | 7;
  unint64_t v26 = ((((*(void *)(v23 + 64) + ((v24 + ((*(void *)(v22 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v24) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v27 = (((v81 + ((v83 + ((((v9 + v8) & ~v8) + v9 + v25) & ~v25) + v26) & ~(v17 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = v27 + 16;
  uint64_t v29 = v25 | v8 | v17;
  unint64_t v30 = v27 + ((v27 + 16 + v29) & ~v29);
  unint64_t v32 = v82 + ((v21 + v7) & ~v21);
  if (v85) {
    unint64_t v33 = v9;
  }
  else {
    unint64_t v33 = v9 + 1;
  }
  uint64_t v35 = *(void *)(v5 - 8);
  unint64_t v36 = (v7 + *(unsigned __int8 *)(v35 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
  int v37 = *(_DWORD *)(v35 + 84);
  uint64_t v38 = *(void *)(v35 + 64);
  unint64_t v39 = (v32 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v37) {
    ++v38;
  }
  unint64_t v40 = v38 + v36;
  unint64_t v41 = ((v39 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v42 = ((((((v33 + v25 + ((v32 + v8) & ~v8)) & ~v25) + v26 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v34 = v33 + v25 + v89;
  unint64_t v43 = ((v39 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 > v41) {
    unint64_t v41 = v7;
  }
  if (v42 <= v26 + (v34 & ~v25) + 16) {
    unint64_t v42 = v26 + (v34 & ~v25) + 16;
  }
  if (v43 > v40) {
    unint64_t v40 = v43;
  }
  if (v41 <= v42) {
    unint64_t v44 = v42;
  }
  else {
    unint64_t v44 = v41;
  }
  if (v44 <= v40) {
    unint64_t v45 = v40;
  }
  else {
    unint64_t v45 = v44;
  }
  unint64_t v46 = v28 + ((v29 + v9) & ~v29);
  if (v91) {
    unint64_t v47 = v7;
  }
  else {
    unint64_t v47 = v7 + 1;
  }
  unint64_t v48 = v47 + v87 + ((v9 + v11) & ~v11);
  uint64_t v49 = *(void *)(v86 - 8);
  unint64_t v50 = (v9 + *(unsigned __int8 *)(v49 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = *(void *)(v49 + 64);
  unint64_t v52 = (v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v49 + 84)) {
    ++v51;
  }
  unint64_t v53 = v51 + v50;
  unint64_t v54 = ((v52 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v9 > v54) {
    unint64_t v54 = v9;
  }
  unint64_t v55 = ((((((v47 + v87 + ((v46 + v11) & ~v11)) & ~v87) + v88 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v55 <= v88 + (v48 & ~v87) + 16) {
    unint64_t v55 = v88 + (v48 & ~v87) + 16;
  }
  unint64_t v56 = ((v52 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v56 > v53) {
    unint64_t v53 = v56;
  }
  if (v54 <= v55) {
    unint64_t v57 = v55;
  }
  else {
    unint64_t v57 = v54;
  }
  if (v57 > v53) {
    unint64_t v53 = v57;
  }
  unint64_t v58 = v53 + 1;
  if (v58 <= v45 + 1) {
    unint64_t v58 = v45 + 1;
  }
  unint64_t v59 = ((((((((((((((v47 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v87 + 9) & ~v87) + v88 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v25 | v8)
        + 8) & ~(v25 | v8))
      + ((((((((((((v33 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v25 + 9) & ~v25) + v26 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v60 = v93 + 2;
  uint64_t v31 = ((v11 | v8) + 1) & ~(v11 | v8);
  if (v92 > v93 + 2) {
    unint64_t v60 = v93 + 1;
  }
  if (v60 <= v89 + v9) {
    unint64_t v60 = v89 + v9;
  }
  if (v60 <= v94) {
    unint64_t v60 = v94;
  }
  if (v60 <= v90) {
    unint64_t v60 = v90;
  }
  unint64_t v61 = ((v30 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v60 > v61) {
    unint64_t v61 = v60;
  }
  if (v61 <= v82) {
    unint64_t v61 = v82;
  }
  if (v61 > v28) {
    unint64_t v28 = v61;
  }
  if (v28 <= v94 + 2) {
    unint64_t v28 = v94 + 2;
  }
  if (v28 <= ((v93 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v28 = ((v93 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v28 <= (v93 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v28 = (v93 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v28 <= v31 + v92) {
    unint64_t v28 = v31 + v92;
  }
  if (v28 <= v58 + 1) {
    unint64_t v62 = v58 + 1;
  }
  else {
    unint64_t v62 = v28;
  }
  if (v62 <= ((((((v59 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v62 = ((((((v59 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v62 <= 0x38) {
    unint64_t v62 = 56;
  }
  char v63 = 8 * v62;
  if (v62 > 3)
  {
    int v64 = 42;
    goto LABEL_72;
  }
  unsigned int v72 = ((1 << v63) + 5) >> v63;
  if (v72 <= 0xFFD6)
  {
    int v64 = v72 + 41;
    if (v72 > 0xD6)
    {
      char v68 = 16;
      char v65 = a1;
      unsigned int v67 = a3;
      unsigned int v66 = a2;
LABEL_73:
      unsigned int v69 = (1 << v68) - v64;
      if ((v69 & 0x80000000) != 0) {
        unsigned int v69 = 0x7FFFFFFF;
      }
      if (v62 > 3) {
        goto LABEL_84;
      }
      goto LABEL_76;
    }
LABEL_72:
    char v65 = a1;
    unsigned int v67 = a3;
    unsigned int v66 = a2;
    char v68 = 8;
    goto LABEL_73;
  }
  unsigned int v69 = 0x7FFFFFFF;
  char v65 = a1;
  unsigned int v67 = a3;
  unsigned int v66 = a2;
  if (v62 > 3)
  {
LABEL_84:
    uint64_t v71 = 1;
    goto LABEL_85;
  }
LABEL_76:
  unsigned int v70 = ((1 << v63) + 5) >> v63;
  uint64_t v71 = 2;
  if (v70 > 0xFFD6) {
    uint64_t v71 = 4;
  }
  if (v70 <= 0xD6) {
    goto LABEL_84;
  }
LABEL_85:
  size_t v73 = v71 + v62;
  if (v67 <= v69)
  {
    int v74 = 0;
  }
  else if (v73 <= 3)
  {
    unsigned int v77 = ((v67 - v69 + ~(-1 << (8 * v73))) >> (8 * v73)) + 1;
    if (HIWORD(v77))
    {
      int v74 = 4;
    }
    else if (v77 >= 0x100)
    {
      int v74 = 2;
    }
    else
    {
      int v74 = v77 > 1;
    }
  }
  else
  {
    int v74 = 1;
  }
  if (v69 < v66)
  {
    unsigned int v75 = ~v69 + v66;
    if (v73 < 4)
    {
      int v76 = (v75 >> (8 * v73)) + 1;
      if (v73)
      {
        int v78 = v75 & ~(-1 << (8 * v73));
        bzero(v65, v73);
        if (v73 == 3)
        {
          *(_WORD *)char v65 = v78;
          v65[2] = BYTE2(v78);
        }
        else if (v73 == 2)
        {
          *(_WORD *)char v65 = v78;
        }
        else
        {
          *char v65 = v78;
        }
      }
    }
    else
    {
      bzero(v65, v73);
      *(_DWORD *)char v65 = v75;
      int v76 = 1;
    }
    switch(v74)
    {
      case 1:
        v65[v73] = v76;
        return;
      case 2:
        *(_WORD *)&v65[v73] = v76;
        return;
      case 3:
        goto LABEL_121;
      case 4:
        *(_DWORD *)&v65[v73] = v76;
        return;
      default:
        return;
    }
  }
  switch(v74)
  {
    case 1:
      v65[v73] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_105;
    case 2:
      *(_WORD *)&v65[v73] = 0;
      if (!v66) {
        return;
      }
      goto LABEL_105;
    case 3:
LABEL_121:
      __break(1u);
      JUMPOUT(0x24D55CA60);
    case 4:
      *(_DWORD *)&v65[v73] = 0;
      goto LABEL_104;
    default:
LABEL_104:
      if (!v66) {
        return;
      }
LABEL_105:
      int v79 = -v66;
      if (v62 > 3) {
        goto LABEL_106;
      }
      unsigned int v80 = ((1 << v63) + 5) >> v63;
      if (v80 > 0xFFD6)
      {
        *(_DWORD *)&v65[v62] = v79;
      }
      else if (v80 <= 0xD6)
      {
LABEL_106:
        v65[v62] = v79;
      }
      else
      {
        *(_WORD *)&v65[v62] = v79;
      }
      return;
  }
}

uint64_t sub_24D55CA88(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v71 = *(void *)(a2 + 24);
  uint64_t v68 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v6 = *(unsigned __int8 *)(v68 + 80);
  unint64_t v77 = (v5 + v6) & ~v6;
  unint64_t v7 = *(void *)(v68 + 64);
  if (v7 <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = *(void *)(v68 + 64);
  }
  unint64_t v80 = v8;
  unint64_t v79 = v8 + 1;
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v73 = v9 | v6;
  unint64_t v81 = (((v9 | v6) + v8 + 1) & ~(v9 | v6)) + v8 + 1;
  int v78 = *(_DWORD *)(v4 + 84);
  uint64_t v74 = v3;
  uint64_t v10 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = *(void *)(sub_24DCC8CE8() - 8);
  uint64_t v70 = v9;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v72 = *(_DWORD *)(v10 + 80) & 0xF8 | v13 | 7;
  unint64_t v75 = ((((*(void *)(v11 + 64) + ((v13 + ((*(void *)(v10 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v13) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v67 = (v15 | 7) + 16;
  uint64_t v16 = *(void *)(v12 + 64);
  uint64_t v17 = 7;
  if (!*(_DWORD *)(v12 + 84)) {
    uint64_t v17 = 8;
  }
  unint64_t v65 = ((((((((((v17
                + v16
                + ((v15
                  + ((((((v16 + ((v16 + v15 + ((v15 + 12) & ~v15)) & ~v15) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v15)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  uint64_t v14 = *(_DWORD *)(v10 + 80) & 0xF8 | v13 | 7;
  unint64_t v18 = (((v65 + ((v67 + ((((v5 + v9) & ~v9) + v5 + v14) & ~v14) + v75) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v66 = v18 + 16;
  uint64_t v19 = v14 | v9 | v15;
  unint64_t v76 = ((v18 + ((v18 + 16 + v19) & ~v19) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  int v69 = *(_DWORD *)(v68 + 84);
  uint64_t v20 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v21 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = *(_DWORD *)(v20 + 80) & 0xF8 | v22 | 7;
  unint64_t v24 = ((((*(void *)(v21 + 64) + ((v22 + ((*(void *)(v20 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v22) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  unint64_t v25 = (((v65 + ((v67 + ((((v7 + v6) & ~v6) + v7 + v23) & ~v23) + v24) & ~(v15 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = v25 + 16;
  uint64_t v27 = v23 | v6 | v15;
  unint64_t v28 = v25 + ((v25 + 16 + v27) & ~v27);
  unint64_t v30 = v66 + ((v19 + v5) & ~v19);
  if (v69) {
    unint64_t v31 = v7;
  }
  else {
    unint64_t v31 = v7 + 1;
  }
  uint64_t v33 = *(void *)(v74 - 8);
  unint64_t v34 = (v5 + *(unsigned __int8 *)(v33 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  int v35 = *(_DWORD *)(v33 + 84);
  uint64_t v36 = *(void *)(v33 + 64);
  unint64_t v37 = (v30 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!v35) {
    ++v36;
  }
  unint64_t v38 = v36 + v34;
  unint64_t v39 = ((v37 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  unint64_t v40 = ((((((v31 + v23 + ((v30 + v6) & ~v6)) & ~v23) + v24 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  unint64_t v32 = v31 + v23 + v77;
  unint64_t v41 = ((v37 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v5 > v39) {
    unint64_t v39 = v5;
  }
  if (v40 <= v24 + (v32 & ~v23) + 16) {
    unint64_t v40 = v24 + (v32 & ~v23) + 16;
  }
  if (v41 > v38) {
    unint64_t v38 = v41;
  }
  if (v39 <= v40) {
    unint64_t v42 = v40;
  }
  else {
    unint64_t v42 = v39;
  }
  if (v42 <= v38) {
    unint64_t v43 = v38;
  }
  else {
    unint64_t v43 = v42;
  }
  unint64_t v44 = v26 + ((v27 + v7) & ~v27);
  if (v78) {
    unint64_t v45 = v5;
  }
  else {
    unint64_t v45 = v5 + 1;
  }
  uint64_t v46 = *(void *)(v71 - 8);
  unint64_t v47 = v45 + v72 + ((v7 + v70) & ~v70);
  unint64_t v48 = (v7 + *(unsigned __int8 *)(v46 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
  uint64_t v49 = *(void *)(v46 + 64);
  unint64_t v50 = (v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (!*(_DWORD *)(v46 + 84)) {
    ++v49;
  }
  unint64_t v51 = v49 + v48;
  unint64_t v52 = ((v50 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v7 > v52) {
    unint64_t v52 = v7;
  }
  unint64_t v53 = ((((((v45 + v72 + ((v44 + v70) & ~v70)) & ~v72) + v75 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v53 <= v75 + (v47 & ~v72) + 16) {
    unint64_t v53 = v75 + (v47 & ~v72) + 16;
  }
  unint64_t v54 = ((v50 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v54 > v51) {
    unint64_t v51 = v54;
  }
  if (v52 <= v53) {
    unint64_t v55 = v53;
  }
  else {
    unint64_t v55 = v52;
  }
  if (v55 > v51) {
    unint64_t v51 = v55;
  }
  unint64_t v56 = v51 + 1;
  if (v56 <= v43 + 1) {
    unint64_t v56 = v43 + 1;
  }
  unint64_t v57 = ((((((((((((((v45 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v72 + 9) & ~v72) + v75 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v23 | v6)
        + 8) & ~(v23 | v6))
      + ((((((((((((v31 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v23 + 9) & ~v23) + v24 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v58 = v80 + 2;
  uint64_t v29 = (v73 + 1) & ~v73;
  if (v79 > v80 + 2) {
    unint64_t v58 = v80 + 1;
  }
  if (v58 <= v77 + v7) {
    unint64_t v58 = v77 + v7;
  }
  if (v58 <= v81) {
    unint64_t v58 = v81;
  }
  if (v58 <= v76) {
    unint64_t v58 = v76;
  }
  unint64_t v59 = ((v28 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v58 > v59) {
    unint64_t v59 = v58;
  }
  if (v59 <= v66) {
    unint64_t v59 = v66;
  }
  if (v59 > v26) {
    unint64_t v26 = v59;
  }
  if (v26 <= v81 + 2) {
    unint64_t v26 = v81 + 2;
  }
  if (v26 <= ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v26 = ((v80 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v26 <= (v80 & 0xFFFFFFFFFFFFFFF8) + 16) {
    unint64_t v26 = (v80 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v26 <= v29 + v79) {
    unint64_t v26 = v29 + v79;
  }
  if (v26 <= v56 + 1) {
    unint64_t v60 = v56 + 1;
  }
  else {
    unint64_t v60 = v26;
  }
  if (v60 <= ((((((v57 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v60 = ((((((v57 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v60 <= 0x38) {
    unint64_t v60 = 56;
  }
  if (v60 > 3) {
    goto LABEL_71;
  }
  unsigned int v62 = ((1 << (8 * v60)) + 5) >> (8 * v60);
  if (v62 > 0xFFD6)
  {
    uint64_t result = *(unsigned int *)&a1[v60];
  }
  else
  {
    if (v62 <= 0xD6)
    {
LABEL_71:
      uint64_t result = a1[v60];
      goto LABEL_76;
    }
    uint64_t result = *(unsigned __int16 *)&a1[v60];
  }
LABEL_76:
  if (result >= 0x29)
  {
    if (v60 <= 3) {
      uint64_t v63 = v60;
    }
    else {
      uint64_t v63 = 4;
    }
    switch(v63)
    {
      case 1:
        int v64 = *a1;
        if (v60 < 4) {
          goto LABEL_86;
        }
        goto LABEL_88;
      case 2:
        int v64 = *(unsigned __int16 *)a1;
        if (v60 >= 4) {
          goto LABEL_88;
        }
        goto LABEL_86;
      case 3:
        int v64 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        if (v60 < 4) {
          goto LABEL_86;
        }
        goto LABEL_88;
      case 4:
        int v64 = *(_DWORD *)a1;
        if (v60 < 4) {
LABEL_86:
        }
          uint64_t result = (v64 | ((result - 41) << (8 * v60))) + 41;
        else {
LABEL_88:
        }
          uint64_t result = (v64 + 41);
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_24D55D410(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v78 = *(void *)(a3 + 24);
  uint64_t v76 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v79 = v7;
  unint64_t v87 = (v6 + v7) & ~v7;
  unint64_t v8 = *(void *)(v76 + 64);
  unint64_t v9 = v87 + v8;
  if (v8 <= v6) {
    unint64_t v10 = v6;
  }
  else {
    unint64_t v10 = *(void *)(v76 + 64);
  }
  unint64_t v82 = v10 + 1;
  unint64_t v83 = v10;
  if (v10 + 1 > v9) {
    unint64_t v9 = v10 + 1;
  }
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = v12 | v7;
  uint64_t v85 = v13;
  unint64_t v11 = v10 + 1;
  unint64_t v81 = ((v13 + v11) & ~v13) + v11;
  if (v81 <= v9) {
    unint64_t v14 = v9;
  }
  else {
    unint64_t v14 = ((v13 + v11) & ~v13) + v11;
  }
  int v88 = *(_DWORD *)(v5 + 84);
  uint64_t v86 = v4;
  uint64_t v15 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v16 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v17 = *(void *)(sub_24DCC8CE8() - 8);
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v80 = *(_DWORD *)(v15 + 80) & 0xF8 | v18 | 7;
  unint64_t v84 = ((((*(void *)(v16 + 64) + ((v18 + ((*(void *)(v15 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v18) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v75 = (v19 | 7) + 16;
  uint64_t v20 = *(void *)(v17 + 64);
  uint64_t v21 = 7;
  if (!*(_DWORD *)(v17 + 84)) {
    uint64_t v21 = 8;
  }
  unint64_t v73 = ((((((((((v21
                + v20
                + ((v19
                  + ((((((v20 + ((v20 + v19 + ((v19 + 12) & ~v19)) & ~v19) + 12) & 0xFFFFFFFFFFFFFFF8) + 47) & 0xFFFFFFFFFFFFFFF8)
                    + 15) & 0xFFFFFFFFFFFFFFF8)
                  + 10) & ~v19)) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 15) & 0xFFFFFFFFFFFFFFF8)
          + 19) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 327;
  unint64_t v22 = (((v73 + ((v75 + ((((v6 + v12) & ~v12) + v6 + v80) & ~v80) + v84) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v74 = v22 + 16;
  uint64_t v23 = *(_DWORD *)(v15 + 80) & 0xF8 | v18 | 7 | v12 | v19;
  unint64_t v24 = ((v22 + ((v22 + 16 + v23) & ~v23) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v24 <= v14) {
    unint64_t v24 = v14;
  }
  unint64_t v72 = v24;
  int v77 = *(_DWORD *)(v76 + 84);
  uint64_t v25 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v26 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  unint64_t v28 = *(void *)(v26 + 64) + ((v27 + ((*(void *)(v25 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v27);
  uint64_t v29 = *(_DWORD *)(v25 + 80) & 0xF8 | v27 | 7;
  unint64_t v30 = ((((v28 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  unint64_t v31 = (((v73 + ((v75 + ((((v8 + v79) & ~v79) + v8 + v29) & ~v29) + v30) & ~(v19 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v32 = v31 + 16;
  uint64_t v33 = v29 | v79 | v19;
  unint64_t v34 = ((v31 + ((v31 + 16 + v33) & ~v33) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v34 <= v72) {
    unint64_t v34 = v72;
  }
  if (v74 > v34) {
    unint64_t v34 = v74;
  }
  if (v32 > v34) {
    unint64_t v34 = v32;
  }
  if (v82 > v34) {
    unint64_t v34 = v83 + 1;
  }
  if (v81 + 2 > v34) {
    unint64_t v34 = v81 + 2;
  }
  unint64_t v35 = v83 + 2;
  if (((v83 + 9) & 0xFFFFFFFFFFFFFFF8) + 8 > v34) {
    unint64_t v34 = ((v83 + 9) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v35 > v34) {
    unint64_t v34 = v83 + 2;
  }
  if ((v83 & 0xFFFFFFFFFFFFFFF8) + 16 > v34) {
    unint64_t v34 = (v83 & 0xFFFFFFFFFFFFFFF8) + 16;
  }
  if (v34 <= v82) {
    unint64_t v34 = v83 + 1;
  }
  if (v34 <= v87 + v8) {
    unint64_t v34 = v87 + v8;
  }
  if (v34 <= ((v85 + 1) & ~v85) + v82) {
    unint64_t v34 = ((v85 + 1) & ~v85) + v82;
  }
  if (v34 <= v82) {
    unint64_t v36 = v83 + 1;
  }
  else {
    unint64_t v36 = v34;
  }
  unint64_t v37 = v74 + ((v23 + v6) & ~v23);
  unint64_t v38 = (v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v39 = (v37 + v79) & ~v79;
  if (v77) {
    unint64_t v40 = v8;
  }
  else {
    unint64_t v40 = v8 + 1;
  }
  unint64_t v41 = ((((((v40 + v29 + v39) & ~v29) + v30 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v41 <= ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v41 = ((v38 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v30 + ((v40 + v29 + v87) & ~v29) + 16 > v41) {
    unint64_t v41 = v30 + ((v40 + v29 + v87) & ~v29) + 16;
  }
  unint64_t v42 = ((v38 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v42 > v41) {
    unint64_t v41 = v42;
  }
  if (v6 <= v41) {
    unint64_t v43 = v41;
  }
  else {
    unint64_t v43 = v6;
  }
  uint64_t v44 = *(void *)(v86 - 8);
  uint64_t v45 = *(void *)(v44 + 64);
  if (!*(_DWORD *)(v44 + 84)) {
    ++v45;
  }
  unint64_t v46 = v45 + ((v6 + *(unsigned __int8 *)(v44 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80));
  if (v46 <= v43) {
    unint64_t v46 = v43;
  }
  if (v6 <= v46) {
    unint64_t v47 = v46;
  }
  else {
    unint64_t v47 = v6;
  }
  unint64_t v48 = v32 + ((v33 + v8) & ~v33);
  unint64_t v49 = (v48 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v50 = (v48 + v12) & ~v12;
  if (v88) {
    unint64_t v51 = v6;
  }
  else {
    unint64_t v51 = v6 + 1;
  }
  unint64_t v52 = ((((((v51 + v80 + v50) & ~v80) + v84 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v52 <= ((v49 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) {
    unint64_t v52 = ((v49 + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  }
  if (v84 + ((v51 + v80 + ((v8 + v12) & ~v12)) & ~v80) + 16 > v52) {
    unint64_t v52 = v84 + ((v51 + v80 + ((v8 + v12) & ~v12)) & ~v80) + 16;
  }
  unint64_t v53 = ((v49 + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v53 > v52) {
    unint64_t v52 = v53;
  }
  if (v8 <= v52) {
    unint64_t v54 = v52;
  }
  else {
    unint64_t v54 = v8;
  }
  uint64_t v55 = *(void *)(v78 - 8);
  unint64_t v56 = (v8 + *(unsigned __int8 *)(v55 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  uint64_t v57 = *(void *)(v55 + 64);
  if (!*(_DWORD *)(v55 + 84)) {
    ++v57;
  }
  unint64_t v58 = v57 + v56;
  if (v58 <= v54) {
    unint64_t v58 = v54;
  }
  if (v8 > v58) {
    unint64_t v58 = v8;
  }
  unint64_t v59 = v58 + 1;
  if (v59 <= v47 + 1) {
    unint64_t v59 = v47 + 1;
  }
  if (v36 <= v59 + 1) {
    unint64_t v60 = v59 + 1;
  }
  else {
    unint64_t v60 = v36;
  }
  if (v60 <= v35) {
    unint64_t v60 = v83 + 2;
  }
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  if (v60 <= v81) {
    unint64_t v60 = v81;
  }
  unint64_t v61 = ((((((((((((((v51 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v80 + 9) & ~v80) + v84 + 34) & 0xFFFFFFFFFFFFFFF8)
            + 63) & 0xFFFFFFFFFFFFFFF8)
          + 15) & 0xFFFFFFFFFFFFFFF8)
        + (v29 | v79)
        + 8) & ~(v29 | v79))
      + ((((((((((((v40 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + v29 + 9) & ~v29) + v30 + 34) & 0xFFFFFFFFFFFFFFF8)
          + 63) & 0xFFFFFFFFFFFFFFF8)
        + 15) & 0xFFFFFFFFFFFFFFF8);
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  unint64_t v62 = ((((((v61 + 8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 39) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (v60 <= v62) {
    unint64_t v60 = v62;
  }
  if (v60 <= v35) {
    unint64_t v60 = v83 + 2;
  }
  if (v60 <= v82) {
    unint64_t v60 = v83 + 1;
  }
  if (v60 <= 0x38) {
    size_t v63 = 56;
  }
  else {
    size_t v63 = v60;
  }
  if (a2 > 0x28)
  {
    unsigned int v64 = a2 - 41;
    if (v63 < 4)
    {
      int v67 = (v64 >> (8 * v63)) + 41;
      v64 &= ~(-1 << (8 * v63));
      unint64_t v65 = a1;
      uint64_t v68 = (int *)&a1[v63];
      unsigned int v69 = ((1 << (8 * v63)) + 5) >> (8 * v63);
      if (v69 > 0xFFD6)
      {
        *uint64_t v68 = v67;
      }
      else if (v69 > 0xD6)
      {
        *(_WORD *)uint64_t v68 = v67;
      }
      else
      {
        *(unsigned char *)uint64_t v68 = v67;
      }
    }
    else
    {
      unint64_t v65 = a1;
      a1[v63] = 41;
    }
    if (v63 >= 4) {
      int v70 = 4;
    }
    else {
      int v70 = v63;
    }
    bzero(v65, v63);
    switch(v70)
    {
      case 2:
        *(_WORD *)unint64_t v65 = v64;
        break;
      case 3:
        *(_WORD *)unint64_t v65 = v64;
        v65[2] = BYTE2(v64);
        break;
      case 4:
        *(_DWORD *)unint64_t v65 = v64;
        break;
      default:
        *unint64_t v65 = v64;
        break;
    }
  }
  else
  {
    if (v63 > 3)
    {
LABEL_99:
      a1[v63] = a2;
      return;
    }
    unsigned int v66 = ((1 << (8 * v63)) + 5) >> (8 * v63);
    if (v66 > 0xFFD6)
    {
      *(_DWORD *)&a1[v63] = a2;
    }
    else
    {
      if (v66 <= 0xD6) {
        goto LABEL_99;
      }
      *(_WORD *)&a1[v63] = a2;
    }
  }
}

uint64_t type metadata accessor for PersistenceTrigger()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D55DE68@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v192 = a2;
  uint64_t v4 = a1[3];
  uint64_t v5 = (ValueMetadata *)a1[4];
  unint64_t v6 = (ValueMetadata *)a1[5];
  uint64_t v193 = a1[2];
  uint64_t v3 = v193;
  uint64_t v194 = v4;
  int v195 = v5;
  unsigned int v196 = v6;
  uint64_t v176 = type metadata accessor for ItemReconciliation();
  uint64_t v175 = *(void *)(v176 - 8);
  MEMORY[0x270FA5388](v176);
  unint64_t v173 = (char *)&v170 - v7;
  uint64_t v194 = v4;
  int v195 = v5;
  unsigned int v196 = v6;
  uint64_t v172 = type metadata accessor for TestingOperation();
  uint64_t v171 = *(void *)(v172 - 8);
  MEMORY[0x270FA5388](v172);
  unint64_t v9 = (char *)&v170 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  unsigned int v190 = v5;
  uint64_t v188 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  unsigned int v189 = v6;
  uint64_t v187 = v4;
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v194 = v11;
  int v195 = (ValueMetadata *)AssociatedConformanceWitness;
  unsigned int v196 = (ValueMetadata *)v13;
  unint64_t v14 = (void *)type metadata accessor for ThrottlingKey();
  uint64_t v177 = *(v14 - 1);
  MEMORY[0x270FA5388](v14);
  uint64_t v16 = (char *)&v170 - v15;
  uint64_t v182 = v11;
  uint64_t v183 = AssociatedTypeWitness;
  uint64_t v193 = AssociatedTypeWitness;
  uint64_t v194 = v11;
  unsigned int v180 = (ValueMetadata *)v13;
  uint64_t v181 = (ValueMetadata *)AssociatedConformanceWitness;
  int v195 = (ValueMetadata *)AssociatedConformanceWitness;
  unsigned int v196 = (ValueMetadata *)v13;
  uint64_t v17 = type metadata accessor for ReconciliationID();
  uint64_t v18 = sub_24DCCA3F8();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v178 = v18;
  uint64_t v179 = v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unsigned int v174 = (char *)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v170 = (char *)&v170 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v26 = (char *)&v170 - v25;
  uint64_t v27 = MEMORY[0x270FA5388](v24);
  uint64_t v29 = (char *)&v170 - v28;
  unsigned int v186 = (int8x16_t *)v17;
  uint64_t v185 = *(void *)(v17 - 8);
  uint64_t v30 = MEMORY[0x270FA5388](v27);
  unint64_t v32 = (char *)&v170 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = MEMORY[0x270FA5388](v30);
  unint64_t v35 = (char *)&v170 - v34;
  uint64_t v36 = MEMORY[0x270FA5388](v33);
  unint64_t v38 = (char *)&v170 - v37;
  uint64_t v39 = MEMORY[0x270FA5388](v36);
  uint64_t v184 = (char *)&v170 - v40;
  MEMORY[0x270FA5388](v39);
  unint64_t v42 = (char *)&v170 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v43 + 16))(v42, v191, a1);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch((int)EnumCaseMultiPayload)
  {
    case 1:
    case 2:
    case 3:
    case 9:
    case 17:
    case 24:
    case 25:
    case 26:
    case 29:
    case 30:
    case 32:
    case 33:
    case 34:
    case 35:
    case 38:
    case 39:
    case 40:
      int v121 = v184;
      uint64_t v122 = v185;
      unsigned int v123 = v42;
      unsigned int v124 = v186;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v123, v186);
      sub_24D95FD44(v124, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v122 + 8))(v121, v124);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 4:
      unint64_t v50 = v186;
      unint64_t v51 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unint64_t v53 = v184;
      uint64_t v52 = v185;
      unint64_t v54 = *(void (**)(char *, char *, int8x16_t *))(v185 + 32);
      v54(v184, v42, v50);
      v54(v38, v51, v50);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v55 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_24D95FD44(v50, (uint64_t)v192);
      unint64_t v56 = *(void (**)(char *, int8x16_t *))(v52 + 8);
      v56(v53, v50);
      sub_24D95FD44(v50, v55);
      v56(v38, v50);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 5:
      uint64_t v57 = v188;
      unint64_t v58 = v190;
      type metadata accessor for SnapshotItem();
      uint64_t v59 = sub_24DCCA3F8();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      unint64_t v61 = &v42[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v62 = *(void *)&v42[*(int *)(TupleTypeMetadata3 + 64)];
      size_t v63 = *(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v59 - 8) + 32);
      unsigned int v64 = v192;
      v63(v192, v42, v59);
      v63((_OWORD *)((char *)v64 + *(int *)(TupleTypeMetadata3 + 48)), v61, v59);
      *(void *)((char *)v64 + *(int *)(TupleTypeMetadata3 + 64)) = v62;
      uint64_t v193 = v187;
      uint64_t v194 = v57;
      int v195 = v189;
      unsigned int v196 = v58;
      type metadata accessor for PersistenceTrigger();
      break;
    case 6:
      uint64_t v65 = v187;
      unsigned int v66 = v189;
      type metadata accessor for SnapshotItem();
      uint64_t v67 = sub_24DCCA3F8();
      uint64_t v68 = swift_getTupleTypeMetadata3();
      unsigned int v69 = &v42[*(int *)(v68 + 48)];
      uint64_t v70 = *(void *)&v42[*(int *)(v68 + 64)];
      uint64_t v71 = *(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v67 - 8) + 32);
      unint64_t v72 = v192;
      v71(v192, v42, v67);
      v71((_OWORD *)((char *)v72 + *(int *)(v68 + 48)), v69, v67);
      *(void *)((char *)v72 + *(int *)(v68 + 64)) = v70;
      uint64_t v193 = v65;
      uint64_t v194 = v188;
      int v195 = v66;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 7:
      uint64_t v73 = v188;
      unint64_t v74 = v190;
      uint64_t v75 = type metadata accessor for SnapshotItem();
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v75 - 8) + 32))(v192, v42, v75);
      uint64_t v193 = v187;
      uint64_t v194 = v73;
      int v195 = v189;
      unsigned int v196 = v74;
      type metadata accessor for PersistenceTrigger();
      break;
    case 8:
      uint64_t v145 = v187;
      unsigned int v146 = v189;
      uint64_t v147 = type metadata accessor for SnapshotItem();
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v147 - 8) + 32))(v192, v42, v147);
      uint64_t v193 = v145;
      uint64_t v194 = v188;
      int v195 = v146;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 10:
      uint64_t v76 = v186;
      uint64_t v77 = v178;
      uint64_t v193 = (uint64_t)v186;
      uint64_t v194 = v178;
      int v195 = &type metadata for ContentStatus;
      unsigned int v196 = &type metadata for ContentStatus;
      TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
      uint64_t v79 = &v42[TupleTypeMetadata[12]];
      LODWORD(v191) = v42[TupleTypeMetadata[16]];
      LODWORD(v184) = v42[TupleTypeMetadata[20]];
      uint64_t v80 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v35, v42, v76);
      unint64_t v81 = *(void (**)(char *, char *, uint64_t))(v179 + 32);
      v81(v29, v79, v77);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      uint64_t v193 = type metadata accessor for ReconciliationID();
      uint64_t v194 = sub_24DCCA3F8();
      int v195 = &type metadata for ContentStatus;
      unsigned int v196 = &type metadata for ContentStatus;
      unint64_t v82 = (int *)swift_getTupleTypeMetadata();
      uint64_t v177 = (uint64_t)v192 + v82[12];
      sub_24D95FD44(v76, (uint64_t)v192);
      unint64_t v83 = *(void (**)(char *, int8x16_t *))(v80 + 8);
      unint64_t v84 = v35;
      uint64_t v85 = v178;
      v83(v84, v76);
      v81(v26, v29, v85);
      if ((*(unsigned int (**)(char *, uint64_t, int8x16_t *))(v80 + 48))(v26, 1, v76) == 1)
      {
        (*(void (**)(char *, uint64_t))(v179 + 8))(v26, v85);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v86 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56))(v177, 1, 1, v86);
      }
      else
      {
        uint64_t v160 = v177;
        sub_24D95FD44(v76, v177);
        v83(v26, v76);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v161 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v161 - 8) + 56))(v160, 0, 1, v161);
      }
      uint64_t v162 = v82[20];
      uint64_t v163 = v192;
      *((unsigned char *)v192 + v82[16]) = v191;
      *((unsigned char *)v163 + v162) = (_BYTE)v184;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 11:
      MEMORY[0x270FA5388](EnumCaseMultiPayload);
      strcpy((char *)&v170 - 32, " otherID from to ");
      unint64_t v87 = v186;
      uint64_t v88 = v178;
      uint64_t v193 = (uint64_t)v186;
      uint64_t v194 = v178;
      int v195 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B1995E0);
      unsigned int v196 = v195;
      unint64_t v89 = (int *)swift_getTupleTypeMetadata();
      unint64_t v90 = &v42[v89[12]];
      LODWORD(v191) = v42[v89[16]];
      LODWORD(v184) = v42[v89[20]];
      uint64_t v91 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v32, v42, v87);
      unint64_t v92 = *(uint64_t (**)(char *, char *, uint64_t))(v179 + 32);
      unint64_t v93 = v170;
      uint64_t v94 = v92(v170, v90, v88);
      MEMORY[0x270FA5388](v94);
      strcpy((char *)&v170 - 32, " otherID from to ");
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      uint64_t v193 = type metadata accessor for ReconciliationID();
      uint64_t v194 = sub_24DCCA3F8();
      int v195 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B1995E0);
      unsigned int v196 = v195;
      unint64_t v95 = (int *)swift_getTupleTypeMetadata();
      uint64_t v177 = (uint64_t)v192 + v95[12];
      sub_24D95FD44(v87, (uint64_t)v192);
      unint64_t v96 = *(void (**)(char *, int8x16_t *))(v91 + 8);
      v96(v32, v87);
      unint64_t v97 = v174;
      v92(v174, v93, v88);
      if ((*(unsigned int (**)(char *, uint64_t, int8x16_t *))(v91 + 48))(v97, 1, v87) == 1)
      {
        (*(void (**)(char *, uint64_t))(v179 + 8))(v97, v88);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v98 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v177, 1, 1, v98);
      }
      else
      {
        uint64_t v164 = v177;
        sub_24D95FD44(v87, v177);
        v96(v97, v87);
        uint64_t v193 = v182;
        uint64_t v194 = v183;
        int v195 = v180;
        unsigned int v196 = v181;
        uint64_t v165 = type metadata accessor for ReconciliationID();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v165 - 8) + 56))(v164, 0, 1, v165);
      }
      uint64_t v166 = v95[16];
      uint64_t v167 = v95[20];
      uint64_t v168 = v192;
      *((unsigned char *)v192 + v166) = v191;
      *((unsigned char *)v168 + v167) = (_BYTE)v184;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 12:
      __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
      uint64_t v99 = *(void *)&v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v100 = v177;
      (*(void (**)(char *, char *, void *))(v177 + 32))(v16, v42, v14);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ThrottlingKey();
      uint64_t v101 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      int v102 = v192;
      sub_24DA7D1A4(v14, (uint64_t)v192);
      (*(void (**)(char *, void *))(v100 + 8))(v16, v14);
      *(void *)((char *)v102 + v101) = v99;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 13:
      uint64_t v103 = v177;
      (*(void (**)(char *, char *, void *))(v177 + 32))(v16, v42, v14);
      sub_24DA7D1A4(v14, (uint64_t)v192);
      (*(void (**)(char *, void *))(v103 + 8))(v16, v14);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 14:
    case 15:
      __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
      unsigned int v104 = v186;
      uint64_t v105 = *(void *)&v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unint64_t v106 = v184;
      uint64_t v107 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v104);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v108 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      unint64_t v109 = v192;
      sub_24D95FD44(v104, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v107 + 8))(v106, v104);
      *(void *)((char *)v109 + v108) = v105;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 16:
      uint64_t v110 = *((void *)v42 + 4);
      char v111 = v42[40];
      uint64_t v112 = *((void *)v42 + 6);
      long long v113 = *((_OWORD *)v42 + 1);
      uint64_t v114 = v192;
      *uint64_t v192 = *(_OWORD *)v42;
      v114[1] = v113;
      *((void *)v114 + 4) = v110;
      *((unsigned char *)v114 + 40) = v111;
      *((void *)v114 + 6) = v112;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 19:
      char v148 = *v42;
      uint64_t v149 = v186;
      uint64_t v150 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v152 = v184;
      uint64_t v151 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v150, v149);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v153 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      *(unsigned char *)uint64_t v192 = v148;
      sub_24D95FD44(v149, v153);
      (*(void (**)(char *, int8x16_t *))(v151 + 8))(v152, v149);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 20:
    case 21:
      uint64_t v115 = *(void *)v42;
      uint64_t v117 = v187;
      uint64_t v116 = v188;
      uint64_t v119 = v189;
      uint64_t v118 = v190;
      unint64_t v120 = sub_24D9882B4(v115);
      swift_retain();
      swift_release();
      *(void *)uint64_t v192 = v120;
      uint64_t v193 = v117;
      uint64_t v194 = v116;
      int v195 = v119;
      unsigned int v196 = v118;
      type metadata accessor for PersistenceTrigger();
      break;
    case 22:
    case 23:
      *(unsigned char *)uint64_t v192 = (*v42 & 1) == 0;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 27:
      uint64_t v125 = v171;
      uint64_t v126 = v42;
      size_t v127 = (void *)v172;
      (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v9, v126, v172);
      sub_24DA02614(v127, (uint64_t)v192);
      (*(void (**)(char *, void *))(v125 + 8))(v9, v127);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 28:
      uint64_t v154 = v186;
      char v155 = v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v157 = v184;
      uint64_t v156 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v154);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v158 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v159 = v192;
      sub_24D95FD44(v154, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v156 + 8))(v157, v154);
      *((unsigned char *)v159 + v158) = v155;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 31:
      int v128 = v186;
      uint64_t v129 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      unsigned int v131 = v184;
      uint64_t v130 = v185;
      uint64_t v132 = *(void (**)(char *, char *, int8x16_t *))(v185 + 32);
      v132(v184, v42, v128);
      v132(v38, v129, v128);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v133 = (uint64_t)v192 + *(int *)(swift_getTupleTypeMetadata2() + 48);
      sub_24D95FD44(v128, (uint64_t)v192);
      uint64_t v134 = *(void (**)(char *, int8x16_t *))(v130 + 8);
      v134(v131, v128);
      sub_24D95FD44(v128, v133);
      v134(v38, v128);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 36:
      uint64_t v135 = v175;
      uint64_t v136 = v173;
      unint64_t v137 = v42;
      uint64_t v138 = v176;
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v173, v137, v176);
      sub_24DB864D4(v138, (uint64_t)v192);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v136, v138);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 37:
      unsigned int v139 = v186;
      char v140 = v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v141 = v184;
      uint64_t v142 = v185;
      (*(void (**)(char *, char *, int8x16_t *))(v185 + 32))(v184, v42, v139);
      uint64_t v193 = v182;
      uint64_t v194 = v183;
      int v195 = v180;
      unsigned int v196 = v181;
      type metadata accessor for ReconciliationID();
      uint64_t v143 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      uint64_t v144 = v192;
      sub_24D95FD44(v139, (uint64_t)v192);
      (*(void (**)(char *, int8x16_t *))(v142 + 8))(v141, v139);
      *((unsigned char *)v144 + v143) = v140;
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
    default:
      uint64_t v46 = v182;
      uint64_t v45 = v183;
      unint64_t v47 = &v42[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      unint64_t v49 = v192;
      (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v45 - 8) + 32))((uint64_t)v192 + *(int *)(TupleTypeMetadata2 + 48), v42, v45);
      (*(void (**)(_OWORD *, char *, uint64_t))(*(void *)(v46 - 8) + 32))(v49, v47, v46);
      uint64_t v193 = v187;
      uint64_t v194 = v188;
      int v195 = v189;
      unsigned int v196 = v190;
      type metadata accessor for PersistenceTrigger();
      break;
  }
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_24D56046C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = a1[5];
  uint64_t v7 = a1[3];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v29 = v4;
  uint64_t v30 = v3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v27 = v7;
  uint64_t v28 = v6;
  uint64_t v10 = swift_getAssociatedConformanceWitness();
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v33 = v8;
  uint64_t v34 = AssociatedConformanceWitness;
  uint64_t v35 = v10;
  uint64_t v11 = (int8x16_t *)type metadata accessor for ReconciliationID();
  uint64_t v12 = v11[-1].i64[1];
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v24 - v14;
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, void *))(v18 + 16))(v17, v26, a1);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  switch(EnumCaseMultiPayload)
  {
    case 1:
    case 2:
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      uint64_t v20 = &v17[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      LODWORD(v26) = EnumCaseMultiPayload;
      uint64_t v21 = *(void *)v20;
      uint64_t v25 = *((void *)v20 + 1);
      (*(void (**)(char *, char *, int8x16_t *))(v12 + 32))(v15, v17, v11);
      uint64_t v32 = v8;
      uint64_t v33 = AssociatedTypeWitness;
      uint64_t v34 = v10;
      uint64_t v35 = AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      uint64_t v22 = (void *)(v31 + *(int *)(swift_getTupleTypeMetadata2() + 48));
      sub_24D95FD44(v11, v31);
      (*(void (**)(char *, int8x16_t *))(v12 + 8))(v15, v11);
      *uint64_t v22 = v21;
      v22[1] = v25;
      break;
    case 8:
      break;
    default:
      (*(void (**)(char *, char *, int8x16_t *))(v12 + 32))(v15, v17, v11);
      sub_24D95FD44(v11, v31);
      (*(void (**)(char *, int8x16_t *))(v12 + 8))(v15, v11);
      break;
  }
  uint64_t v32 = v27;
  uint64_t v33 = v29;
  uint64_t v34 = v28;
  uint64_t v35 = v30;
  type metadata accessor for PersistenceTrigger.AffectedReconciliation();
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedReconciliation()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D560854(int a1, uint64_t a2, void (*a3)(char *, char *, uint64_t))
{
  uint64_t v599 = a2;
  LODWORD(v654) = a1;
  uint64_t v4 = (ValueMetadata *)*((void *)a3 + 5);
  uint64_t v5 = (ValueMetadata *)*((void *)a3 + 3);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v7 = type metadata accessor for ItemState();
  uint64_t v605 = sub_24DCCA3F8();
  uint64_t v604 = *(void *)(v605 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v605);
  unint64_t v587 = (char *)&v571 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  int v596 = (char *)&v571 - v11;
  uint64_t v608 = v7;
  uint64_t v607 = *(void *)(v7 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  size_t v586 = (char *)&v571 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  size_t v595 = (char *)&v571 - v14;
  uint64_t v15 = *((void *)a3 + 2);
  uint64_t v16 = (ValueMetadata *)*((void *)a3 + 4);
  uint64_t v17 = type metadata accessor for FileTreeError();
  uint64_t v575 = sub_24DCCA3F8();
  uint64_t v574 = *(void *)(v575 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v575);
  uint64_t v577 = (char *)&v571 - v19;
  uint64_t v579 = v17;
  uint64_t v578 = *(void *)(v17 - 8);
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unsigned int v573 = (char *)&v571 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v20);
  int v576 = (char *)&v571 - v22;
  uint64_t v23 = swift_getAssociatedTypeWitness();
  uint64_t v650 = swift_getAssociatedConformanceWitness();
  uint64_t v24 = type metadata accessor for ItemState();
  uint64_t v582 = sub_24DCCA3F8();
  uint64_t v581 = *(void *)(v582 - 8);
  uint64_t v25 = MEMORY[0x270FA5388](v582);
  unint64_t v580 = (char *)&v571 - v26;
  uint64_t v585 = v24;
  uint64_t v584 = *(void *)(v24 - 8);
  MEMORY[0x270FA5388](v25);
  long long v583 = (char *)&v571 - v27;
  uint64_t v643 = type metadata accessor for SnapshotItem();
  uint64_t v634 = *(void *)(v643 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v643);
  BOOL v623 = (char *)&v571 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  unint64_t v626 = (char *)&v571 - v30;
  uint64_t v635 = v15;
  uint64_t v659 = v15;
  uint64_t v660 = v5;
  int v636 = v16;
  uint64_t v661 = v16;
  unint64_t v662 = v4;
  uint64_t v31 = type metadata accessor for PersistenceTrigger.AffectedReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v648 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v632 = (uint64_t *)((char *)&v571 - v33);
  uint64_t v649 = v31;
  uint64_t v639 = *(void *)(v31 - 8);
  MEMORY[0x270FA5388](v32);
  char v631 = (char *)&v571 - v34;
  uint64_t v637 = v5;
  uint64_t v638 = v4;
  uint64_t v35 = type metadata accessor for SnapshotItem();
  uint64_t v644 = *(void *)(v35 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v35);
  uint64_t v630 = (char *)&v571 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v591 = (char *)&v571 - v39;
  uint64_t v40 = MEMORY[0x270FA5388](v38);
  uint64_t v603 = (char *)&v571 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  uint64_t v590 = (char *)&v571 - v43;
  MEMORY[0x270FA5388](v42);
  unint64_t v592 = (char *)&v571 - v44;
  uint64_t v641 = v45;
  uint64_t v633 = sub_24DCCA3F8();
  uint64_t v629 = *(void *)(v633 - 8);
  uint64_t v46 = MEMORY[0x270FA5388](v633);
  unint64_t v601 = (char *)&v571 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  unint64_t v602 = (char *)&v571 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v600 = (char *)&v571 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  long long v606 = (char *)&v571 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v642 = (char *)&v571 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v640 = (char *)&v571 - v57;
  uint64_t v652 = (ValueMetadata *)AssociatedTypeWitness;
  uint64_t v646 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v627 = (char *)&v571 - v59;
  uint64_t v60 = *((void *)a3 - 1);
  uint64_t v61 = MEMORY[0x270FA5388](v58);
  unint64_t v622 = (char *)&v571 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = MEMORY[0x270FA5388](v61);
  unsigned int v620 = (char *)&v571 - v64;
  uint64_t v65 = MEMORY[0x270FA5388](v63);
  unint64_t v619 = (char *)&v571 - v66;
  uint64_t v67 = MEMORY[0x270FA5388](v65);
  BOOL v617 = (char *)&v571 - v68;
  uint64_t v69 = MEMORY[0x270FA5388](v67);
  unsigned int v625 = (char *)&v571 - v70;
  uint64_t v71 = MEMORY[0x270FA5388](v69);
  unsigned int v613 = (char *)&v571 - v72;
  uint64_t v73 = MEMORY[0x270FA5388](v71);
  uint64_t v612 = (char *)&v571 - v74;
  uint64_t v75 = MEMORY[0x270FA5388](v73);
  unint64_t v615 = (char *)&v571 - v76;
  uint64_t v77 = MEMORY[0x270FA5388](v75);
  long long v610 = (char *)&v571 - v78;
  uint64_t v79 = MEMORY[0x270FA5388](v77);
  unint64_t v614 = (char *)&v571 - v80;
  uint64_t v81 = MEMORY[0x270FA5388](v79);
  unint64_t v624 = (char *)&v571 - v82;
  uint64_t v83 = MEMORY[0x270FA5388](v81);
  uint64_t v85 = (char *)&v571 - v84;
  uint64_t v86 = MEMORY[0x270FA5388](v83);
  long long v611 = (char *)&v571 - v87;
  uint64_t v88 = MEMORY[0x270FA5388](v86);
  long long v609 = (char *)&v571 - v89;
  uint64_t v90 = MEMORY[0x270FA5388](v88);
  unint64_t v618 = (char *)&v571 - v91;
  uint64_t v92 = MEMORY[0x270FA5388](v90);
  uint64_t v621 = (char *)&v571 - v93;
  uint64_t v94 = MEMORY[0x270FA5388](v92);
  unint64_t v96 = (char *)&v571 - v95;
  uint64_t v97 = MEMORY[0x270FA5388](v94);
  unsigned int v616 = (char *)&v571 - v98;
  uint64_t v99 = MEMORY[0x270FA5388](v97);
  uint64_t v101 = (char *)&v571 - v100;
  uint64_t v102 = MEMORY[0x270FA5388](v99);
  unsigned int v104 = (char *)&v571 - v103;
  uint64_t v105 = MEMORY[0x270FA5388](v102);
  uint64_t v107 = (char *)&v571 - v106;
  uint64_t v108 = MEMORY[0x270FA5388](v105);
  uint64_t v110 = (char *)&v571 - v109;
  uint64_t v111 = MEMORY[0x270FA5388](v108);
  long long v113 = (char *)&v571 - v112;
  int v653 = (ValueMetadata *)v23;
  uint64_t v647 = *(void *)(v23 - 8);
  uint64_t v114 = MEMORY[0x270FA5388](v111);
  unint64_t v628 = (char *)&v571 - ((v115 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = MEMORY[0x270FA5388](v114);
  uint64_t v598 = (char *)&v571 - v117;
  uint64_t v118 = MEMORY[0x270FA5388](v116);
  int v572 = (char *)&v571 - v119;
  uint64_t v120 = MEMORY[0x270FA5388](v118);
  unsigned int v597 = (char *)&v571 - v121;
  uint64_t v122 = MEMORY[0x270FA5388](v120);
  uint64_t v645 = (char *)&v571 - v123;
  uint64_t v124 = MEMORY[0x270FA5388](v122);
  unsigned int v594 = (char *)&v571 - v125;
  uint64_t v126 = MEMORY[0x270FA5388](v124);
  unint64_t v593 = (char *)&v571 - v127;
  uint64_t v128 = MEMORY[0x270FA5388](v126);
  unint64_t v589 = (char *)&v571 - v129;
  MEMORY[0x270FA5388](v128);
  unsigned int v588 = (char *)&v571 - v130;
  uint64_t v655 = v60;
  unsigned int v131 = *(void (**)(char *, char *, void *))(v60 + 16);
  v131(v113, v656, a3);
  BOOL v658 = a3;
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  char v133 = v654;
  switch(EnumCaseMultiPayload)
  {
    case 0:
      v131(v110, v113, v658);
      uint64_t v134 = v652;
      uint64_t v135 = (uint64_t)v653;
      uint64_t v656 = &v110[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v136 = v647;
      unint64_t v137 = v645;
      (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v645, v110, v135);
      uint64_t v138 = v113;
      uint64_t v139 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v140 = sub_24DCC9C58();
      uint64_t v141 = *(int *)(v139 + 48);
      *uint64_t v142 = 2;
      uint64_t v143 = (char *)v142 + v141;
      uint64_t v659 = v135;
      uint64_t v660 = v134;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      uint64_t v144 = &v143[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v136 + 16))(v143, v137, v135);
      swift_storeEnumTagMultiPayload();
      *(void *)uint64_t v144 = 0;
      *((void *)v144 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v140);
      (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v135);
      (*(void (**)(char *, ValueMetadata *))(v646 + 8))(v656, v134);
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v138, v658);
      return v145;
    case 2:
      unsigned int v146 = v113;
      uint64_t v147 = v113;
      char v148 = v658;
      v131(v107, v146, v658);
      uint64_t v149 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v150 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v150 - 8) + 8))(v107, v150);
        long long v113 = v147;
        goto LABEL_56;
      }
      uint64_t v151 = v646;
      unsigned int v152 = v627;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v107, v149);
      uint64_t v153 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v154 = v147;
      uint64_t v155 = sub_24DCC9C58();
      uint64_t v157 = (char *)v156 + *(int *)(v153 + 48);
      *uint64_t v156 = 2;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      uint64_t v158 = &v157[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, ValueMetadata *))(v151 + 16))(v157, v152, v149);
      swift_storeEnumTagMultiPayload();
      *(void *)uint64_t v158 = 0;
      *((void *)v158 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v155);
      (*(void (**)(char *, ValueMetadata *))(v151 + 8))(v152, v149);
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v154, v148);
      return v145;
    case 4:
      uint64_t v159 = v621;
      uint64_t v160 = v658;
      v131(v621, v113, v658);
      uint64_t v161 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v162 = type metadata accessor for ReconciliationID();
      uint64_t v163 = &v159[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v164 = v646;
        uint64_t v165 = v627;
        (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v163, v161);
        uint64_t v166 = TupleTypeMetadata2;
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v167 = sub_24DCC9C58();
        size_t v169 = (char *)v168 + *(int *)(v166 + 48);
        *uint64_t v168 = 16;
        (*(void (**)(char *, char *, ValueMetadata *))(v164 + 16))(v169, v165, v161);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v145 = sub_24D785484(v167);
        (*(void (**)(char *, ValueMetadata *))(v164 + 8))(v165, v161);
        (*(void (**)(char *, uint64_t))(*(void *)(v162 - 8) + 8))(v159, v162);
        goto LABEL_79;
      }
      uint64_t v311 = *(void (**)(char *, uint64_t))(*(void *)(v162 - 8) + 8);
      v311(v163, v162);
      v311(v159, v162);
      goto LABEL_56;
    case 5:
      v131(v101, v113, v658);
      uint64_t v170 = v643;
      uint64_t v171 = sub_24DCCA3F8();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v173 = (uint64_t)&v101[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v174 = *(void *)&v101[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v175 = v634;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v634 + 48))(v101, 1, v170) == 1)
      {
        uint64_t v176 = *(void (**)(uint64_t, uint64_t))(*(void *)(v171 - 8) + 8);
        v176(v173, v171);
        v176((uint64_t)v101, v171);
        goto LABEL_56;
      }
      uint64_t v654 = v173;
      uint64_t v312 = v626;
      (*(void (**)(char *, char *, uint64_t))(v175 + 32))(v626, v101, v170);
      uint64_t v313 = TupleTypeMetadata2;
      uint64_t v666 = sub_24DCC9C98();
      uint64_t v314 = v631;
      if ((v174 & 2) != 0)
      {
        uint64_t v315 = (uint64_t)v653;
        (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v631, &v312[*(int *)(v170 + 36)], v653);
        uint64_t v659 = v315;
        uint64_t v660 = v652;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v316 = v649;
        swift_storeEnumTagMultiPayload();
        unsigned int v317 = (char *)v632 + *(int *)(v313 + 48);
        *int v632 = 4;
        (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v317, v314, v316);
        sub_24DCC9D48();
        sub_24DCC9D08();
      }
      if ((v174 & 3) != 0)
      {
        uint64_t v648 = *(void *)(v647 + 16);
        uint64_t v318 = (uint64_t)v653;
        ((void (*)(char *, char *, ValueMetadata *))v648)(v314, v626, v653);
        uint64_t v659 = v318;
        uint64_t v660 = v652;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v319 = v649;
        swift_storeEnumTagMultiPayload();
        unsigned int v320 = v632;
        uint64_t v321 = (char *)v632 + *(int *)(v313 + 48);
        *int v632 = 1024;
        uint64_t v656 = v113;
        uint64_t v652 = *(ValueMetadata **)(v639 + 32);
        ((void (*)(char *, char *, uint64_t))v652)(v321, v314, v319);
        uint64_t AssociatedConformanceWitness = sub_24DCC9D48();
        sub_24DCC9D08();
        __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
        int v322 = &v314[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v323 = v318;
        uint64_t v170 = v643;
        ((void (*)(char *, char *, uint64_t))v648)(v314, &v626[*(int *)(v643 + 36)], v323);
        uint64_t v312 = v626;
        uint64_t v175 = v634;
        swift_storeEnumTagMultiPayload();
        unsigned int v324 = &v312[*(int *)(v170 + 44)];
        uint64_t v325 = *((void *)v324 + 1);
        *(void *)int v322 = *(void *)v324;
        *((void *)v322 + 1) = v325;
        swift_storeEnumTagMultiPayload();
        uint64_t v326 = (char *)v320 + *(int *)(TupleTypeMetadata2 + 48);
        *unsigned int v320 = 1024;
        ((void (*)(char *, char *, uint64_t))v652)(v326, v314, v319);
        long long v113 = v656;
        swift_bridgeObjectRetain();
        sub_24DCC9D08();
      }
      (*(void (**)(char *, uint64_t))(v175 + 8))(v312, v170);
      uint64_t v145 = v666;
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v171 - 8) + 8))(v654, v171);
      goto LABEL_58;
    case 6:
      LODWORD(v648) = v654;
      v131(v104, v113, v658);
      uint64_t v177 = v633;
      uint64_t v178 = swift_getTupleTypeMetadata3();
      uint64_t v179 = &v104[*(int *)(v178 + 48)];
      uint64_t v180 = *(void *)&v104[*(int *)(v178 + 64)];
      uint64_t v181 = v629;
      uint64_t v182 = *(void (**)(char *, char *, uint64_t))(v629 + 32);
      uint64_t v183 = v104;
      uint64_t v184 = v177;
      v182(v640, v183, v177);
      v182(v642, v179, v177);
      uint64_t v185 = v181;
      uint64_t v666 = sub_24DCC9C98();
      uint64_t v186 = v641;
      uint64_t v187 = v644;
      if ((v180 & 3) != 0)
      {
        uint64_t v188 = v606;
        (*(void (**)(char *, char *, uint64_t))(v181 + 16))(v606, v640, v184);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v188, 1, v186) == 1)
        {
          (*(void (**)(char *, uint64_t))(v181 + 8))(v188, v184);
        }
        else
        {
          uint64_t v654 = v180;
          uint64_t v656 = v113;
          uint64_t v379 = v592;
          (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v592, v188, v186);
          uint64_t WitnessTable = swift_getWitnessTable();
          char v381 = sub_24D98BCC4(v186, WitnessTable);
          unsigned int v382 = v652;
          uint64_t v383 = v632;
          uint64_t v384 = v631;
          if (v381 == 1)
          {
            uint64_t v659 = (uint64_t)v653;
            uint64_t v660 = v652;
            uint64_t v661 = (ValueMetadata *)v650;
            unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
            type metadata accessor for ReconciliationID();
            __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
            unsigned int v385 = &v384[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v647 = *(void *)(v646 + 16);
            ((void (*)(char *, char *, ValueMetadata *))v647)(v384, v379, v382);
            swift_storeEnumTagMultiPayload();
            *(void *)unsigned int v385 = 0;
            *((void *)v385 + 1) = 0;
            uint64_t v386 = v649;
            swift_storeEnumTagMultiPayload();
            int v387 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
            *uint64_t v383 = 2;
            uint64_t v388 = v386;
            unsigned int v389 = *(void (**)(char *, char *, uint64_t))(v639 + 32);
            v389(v387, v384, v388);
            sub_24DCC9D48();
            sub_24DCC9D08();
            if (v648)
            {
              ((void (*)(char *, char *, ValueMetadata *))v647)(v384, &v379[*(int *)(v641 + 36)], v382);
              swift_storeEnumTagMultiPayload();
              uint64_t v390 = v649;
              swift_storeEnumTagMultiPayload();
              uint64_t v391 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
              *uint64_t v383 = 2;
              v389(v391, v384, v390);
              sub_24DCC9D08();
            }
          }
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = v382;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
          uint64_t v392 = &v384[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          uint64_t v393 = v641;
          (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v384, &v379[*(int *)(v641 + 36)], v382);
          swift_storeEnumTagMultiPayload();
          unsigned int v394 = &v379[*(int *)(v393 + 44)];
          uint64_t v395 = *((void *)v394 + 1);
          *(void *)uint64_t v392 = *(void *)v394;
          *((void *)v392 + 1) = v395;
          uint64_t v396 = v649;
          swift_storeEnumTagMultiPayload();
          uint64_t v397 = (char *)v383 + *(int *)(TupleTypeMetadata2 + 48);
          *uint64_t v383 = 1024;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v397, v384, v396);
          sub_24DCC9D48();
          swift_bridgeObjectRetain();
          sub_24DCC9D08();
          uint64_t v187 = v644;
          (*(void (**)(char *, uint64_t))(v644 + 8))(v379, v393);
          long long v113 = v656;
          uint64_t v186 = v393;
          uint64_t v185 = v629;
          uint64_t v180 = v654;
        }
      }
      unsigned int v398 = *(void (**)(char *, char *, uint64_t))(v185 + 16);
      uint64_t v399 = (char **)(v187 + 48);
      if ((v180 & 2) == 0)
      {
        uint64_t v654 = v180;
        int v400 = v601;
        unsigned int v401 = v642;
        uint64_t v402 = v633;
        v398(v601, v642, v633);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))*v399)(v400, 1, v186) != 1)
        {
          int v424 = v591;
          (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v591, v400, v186);
          uint64_t v425 = swift_getWitnessTable();
          int v426 = sub_24D98BCC4(v186, v425);
          BOOL v427 = (v654 & 0x4000) != 0 && v426 == 1;
          unint64_t v428 = v654 & 0xFFFFFFFFFFFEB7FFLL;
          if (!v427) {
            unint64_t v428 = v654;
          }
          uint64_t v429 = v640;
          if ((v428 & 0xFFFFFFFFFFFEF7FFLL) != 0)
          {
            unsigned int v430 = v631;
            uint64_t v431 = v652;
            (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, &v424[*(int *)(v186 + 36)], v652);
            uint64_t v659 = (uint64_t)v653;
            uint64_t v660 = v431;
            uint64_t v661 = (ValueMetadata *)v650;
            unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
            type metadata accessor for ReconciliationID();
            swift_storeEnumTagMultiPayload();
            uint64_t v432 = v649;
            swift_storeEnumTagMultiPayload();
            unsigned int v433 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
            *int v632 = 8;
            (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v433, v430, v432);
            sub_24DCC9D48();
            sub_24DCC9D08();
          }
          (*(void (**)(char *, uint64_t))(v187 + 8))(v424, v186);
          uint64_t v403 = *(void (**)(char *, uint64_t))(v629 + 8);
          uint64_t v434 = v633;
          v403(v642, v633);
          uint64_t v435 = v429;
          uint64_t v436 = v434;
          goto LABEL_122;
        }
        uint64_t v403 = *(void (**)(char *, uint64_t))(v185 + 8);
        v403(v401, v402);
        uint64_t v404 = v640;
LABEL_121:
        v403(v404, v402);
        uint64_t v435 = v400;
        uint64_t v436 = v402;
LABEL_122:
        v403(v435, v436);
        goto LABEL_124;
      }
      unsigned int v405 = v600;
      uint64_t v402 = v633;
      v398(v600, v642, v633);
      uint64_t v656 = *v399;
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v656)(v405, 1, v186) == 1)
      {
        (*(void (**)(char *, uint64_t))(v185 + 8))(v405, v402);
      }
      else
      {
        unsigned int v437 = v590;
        (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v590, v405, v186);
        uint64_t v438 = &v437[*(int *)(v186 + 36)];
        int v439 = v631;
        unsigned int v440 = v652;
        (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v438, v652);
        uint64_t v659 = (uint64_t)v653;
        uint64_t v660 = v440;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v441 = v649;
        swift_storeEnumTagMultiPayload();
        uint64_t v442 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
        *int v632 = 12;
        uint64_t v443 = v439;
        uint64_t v186 = v641;
        (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v442, v443, v441);
        sub_24DCC9D48();
        uint64_t v187 = v644;
        sub_24DCC9D08();
        uint64_t v185 = v629;
        (*(void (**)(char *, uint64_t))(v187 + 8))(v437, v186);
      }
      int v400 = v602;
      unsigned int v444 = v640;
      v398(v602, v640, v402);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v656)(v400, 1, v186) == 1)
      {
        uint64_t v403 = *(void (**)(char *, uint64_t))(v185 + 8);
        v403(v642, v402);
        uint64_t v404 = v444;
        goto LABEL_121;
      }
      uint64_t v445 = v603;
      (*(void (**)(char *, char *, uint64_t))(v187 + 32))(v603, v400, v186);
      int v446 = &v445[*(int *)(v186 + 36)];
      uint64_t v447 = v185;
      unsigned int v448 = v631;
      uint64_t v449 = v652;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v446, v652);
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v449;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      swift_storeEnumTagMultiPayload();
      uint64_t v450 = v649;
      swift_storeEnumTagMultiPayload();
      unsigned int v451 = (char *)v632 + *(int *)(TupleTypeMetadata2 + 48);
      *int v632 = 8;
      (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v451, v448, v450);
      sub_24DCC9D48();
      sub_24DCC9D08();
      (*(void (**)(char *, uint64_t))(v187 + 8))(v603, v186);
      uint64_t v452 = *(void (**)(char *, uint64_t))(v447 + 8);
      v452(v642, v402);
      v452(v444, v402);
LABEL_124:
      uint64_t v145 = v666;
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      return v145;
    case 7:
      v131(v110, v113, v658);
      uint64_t v656 = v113;
      uint64_t v189 = v634;
      unsigned int v190 = v623;
      uint64_t v191 = v643;
      (*(void (**)(char *, char *, uint64_t))(v634 + 32))(v623, v110, v643);
      uint64_t v192 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v193 = sub_24DCC9C58();
      uint64_t v194 = *(int *)(v192 + 48);
      *int v195 = 2;
      unsigned int v196 = (char *)v195 + v194;
      unsigned int v197 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      uint64_t v198 = &v196[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v196, v190, v197);
      swift_storeEnumTagMultiPayload();
      *(void *)uint64_t v198 = 0;
      *((void *)v198 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v193);
      (*(void (**)(char *, uint64_t))(v189 + 8))(v190, v191);
      goto LABEL_14;
    case 8:
      v131(v110, v113, v658);
      uint64_t v199 = v630;
      uint64_t v200 = v641;
      (*(void (**)(void))(v644 + 32))();
      uint64_t v201 = TupleTypeMetadata2;
      sub_24DCCAD88();
      uint64_t v656 = v113;
      uint64_t v647 = *(void *)(v648 + 72);
      swift_allocObject();
      uint64_t v654 = sub_24DCC9C58();
      unsigned int v203 = v202;
      uint64_t v204 = *(int *)(v201 + 48);
      *int v202 = 1024;
      uint64_t v205 = (char *)v202 + v204;
      uint64_t v206 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ReconciliationID();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      uint64_t v207 = &v205[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v208 = v199;
      size_t v209 = &v199[*(int *)(v200 + 36)];
      uint64_t v210 = *(void (**)(char *, char *, ValueMetadata *))(v646 + 16);
      v210(v205, v209, v206);
      swift_storeEnumTagMultiPayload();
      int v211 = &v208[*(int *)(v200 + 44)];
      uint64_t v212 = *((void *)v211 + 1);
      *(void *)uint64_t v207 = *(void *)v211;
      *((void *)v207 + 1) = v212;
      swift_storeEnumTagMultiPayload();
      uint64_t v213 = (void *)((char *)v203 + v647);
      uint64_t v214 = (char *)v203 + v647 + *(int *)(TupleTypeMetadata2 + 48);
      *uint64_t v213 = 8;
      v210(v214, v209, v206);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v654);
      size_t v215 = *(void (**)(char *, uint64_t))(v644 + 8);
      swift_bridgeObjectRetain();
      v215(v630, v200);
      goto LABEL_14;
    case 10:
      char v216 = v654;
      uint64_t v217 = v625;
      v131(v625, v113, v658);
      unsigned int v218 = v652;
      uint64_t v219 = (uint64_t)v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      unint64_t v221 = (ValueMetadata *)v650;
      unint64_t v220 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v659 = type metadata accessor for ReconciliationID();
      uint64_t v660 = (ValueMetadata *)sub_24DCCA3F8();
      uint64_t v661 = &type metadata for ContentStatus;
      unint64_t v662 = &type metadata for ContentStatus;
      TupleTypeMetadata = (int *)swift_getTupleTypeMetadata();
      uint64_t v223 = &v217[TupleTypeMetadata[12]];
      int v224 = v217[TupleTypeMetadata[16]];
      int v225 = v217[TupleTypeMetadata[20]];
      uint64_t v659 = v219;
      uint64_t v660 = v218;
      uint64_t v661 = v221;
      unint64_t v662 = v220;
      uint64_t v226 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v656 = v223;
        uint64_t v327 = v647;
        (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v628, v217, v219);
        uint64_t v328 = TupleTypeMetadata2;
        uint64_t v659 = sub_24DCC9C98();
        uint64_t v329 = v649;
        if ((v216 & 1) != 0 && v225 == 2)
        {
          __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
          uint64_t v330 = swift_getTupleTypeMetadata2();
          unsigned int v331 = v631;
          uint64_t v332 = &v631[*(int *)(v330 + 48)];
          (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v631, v628, v219);
          swift_storeEnumTagMultiPayload();
          *(void *)uint64_t v332 = 0;
          *((void *)v332 + 1) = 0;
          swift_storeEnumTagMultiPayload();
          unsigned int v333 = (char *)v632 + *(int *)(v328 + 48);
          *int v632 = 2;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v333, v331, v329);
          sub_24DCC9D48();
          sub_24DCC9D08();
        }
        if (v224 == 1)
        {
          __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
          uint64_t v334 = swift_getTupleTypeMetadata2();
          unsigned int v335 = v631;
          uint64_t v336 = &v631[*(int *)(v334 + 48)];
          (*(void (**)(char *, char *, uint64_t))(v327 + 16))(v631, v628, v219);
          swift_storeEnumTagMultiPayload();
          *(void *)uint64_t v336 = 0;
          *((void *)v336 + 1) = 0;
          swift_storeEnumTagMultiPayload();
          uint64_t v337 = (char *)v632 + *(int *)(v328 + 48);
          *int v632 = 0x100000;
          (*(void (**)(char *, char *, uint64_t))(v639 + 32))(v337, v335, v329);
          sub_24DCC9D48();
          sub_24DCC9D08();
        }
        (*(void (**)(char *, uint64_t))(v327 + 8))(v628, v219);
        uint64_t v145 = v659;
        uint64_t v338 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v338 - 8) + 8))(v656, v338);
        goto LABEL_58;
      }
      uint64_t v227 = *(void *)(v226 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v227 + 48))(v223, 1, v226) == 1)
      {
        (*(void (**)(char *, uint64_t))(v227 + 8))(v217, v226);
        uint64_t v228 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v228 - 8) + 8))(v223, v228);
        goto LABEL_56;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        size_t v423 = *(void (**)(char *, uint64_t))(v227 + 8);
        v423(v223, v226);
        v423(v217, v226);
        goto LABEL_56;
      }
      if (v224 != 1)
      {
        (*(void (**)(char *, uint64_t))(v647 + 8))(v223, v219);
        (*(void (**)(char *, uint64_t))(v227 + 8))(v217, v226);
        goto LABEL_56;
      }
      uint64_t v482 = v647;
      unint64_t v483 = v645;
      (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v645, v223, v219);
      uint64_t v656 = v113;
      uint64_t v484 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v485 = sub_24DCC9C58();
      long long v487 = (char *)v486 + *(int *)(v484 + 48);
      *long long v486 = 0x100000;
      __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
      long long v488 = &v487[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v482 + 16))(v487, v483, v219);
      swift_storeEnumTagMultiPayload();
      *(void *)long long v488 = 0;
      *((void *)v488 + 1) = 0;
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v485);
      (*(void (**)(char *, uint64_t))(v482 + 8))(v483, v219);
      (*(void (**)(char *, uint64_t))(v227 + 8))(v625, v226);
LABEL_14:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v656, v658);
      return v145;
    case 12:
      size_t v229 = v616;
      size_t v230 = v658;
      v131(v616, v113, v658);
      uint64_t v231 = v652;
      uint64_t v232 = (uint64_t)v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      size_t v234 = (ValueMetadata *)v650;
      uint64_t v233 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      type metadata accessor for ThrottlingKey();
      __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);

      uint64_t v659 = v232;
      uint64_t v660 = v231;
      uint64_t v661 = v234;
      unint64_t v662 = v233;
      uint64_t v235 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        switch(v229[*(int *)(swift_getTupleTypeMetadata2() + 48)])
        {
          case 0:
          case 23:
            int v477 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
            size_t v478 = v589;
            v477(v589, v229, v232);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v230);
            uint64_t v479 = TupleTypeMetadata2;
            sub_24DCCAD88();
            swift_allocObject();
            uint64_t v239 = sub_24DCC9C58();
            long long v481 = (char *)v480 + *(int *)(v479 + 48);
            void *v480 = 4;
            v477(v481, v478, v232);
            goto LABEL_132;
          case 1:
          case 2:
            uint64_t v236 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
            unint64_t v237 = v588;
            v236(v588, v229, v232);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v230);
            uint64_t v238 = TupleTypeMetadata2;
            sub_24DCCAD88();
            swift_allocObject();
            uint64_t v239 = sub_24DCC9C58();
            unsigned int v241 = (char *)v240 + *(int *)(v238 + 48);
            *unint64_t v240 = 1024;
            v236(v241, v237, v232);
            swift_storeEnumTagMultiPayload();
            goto LABEL_133;
          default:
            (*(void (**)(char *, uint64_t))(v647 + 8))(v229, v232);
            goto LABEL_56;
        }
      }
      goto LABEL_43;
    case 13:
      uint64_t v242 = v618;
      unint64_t v243 = v658;
      v131(v618, v113, v658);
      unint64_t v244 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        switch(v242[*(int *)(swift_getTupleTypeMetadata2() + 48)])
        {
          case 0:
          case 1:
          case 3:
          case 6:
          case 12:
          case 23:
            uint64_t v246 = *(void (**)(char *, char *, ValueMetadata *))(v647 + 32);
            unsigned int v247 = v593;
            v246(v593, v242, v244);
            (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v243);
            uint64_t v248 = TupleTypeMetadata2;
            sub_24DCCAD88();
            swift_allocObject();
            uint64_t v239 = sub_24DCC9C58();
            unint64_t v250 = (char *)v249 + *(int *)(v248 + 48);
            *unint64_t v249 = 262400;
            v246(v250, v247, v244);
            swift_storeEnumTagMultiPayload();
            goto LABEL_133;
          case 2:
            uint64_t v536 = v647;
            long long v537 = v645;
            (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v244);
            uint64_t v538 = TupleTypeMetadata2;
            sub_24DCCAD88();
            swift_allocObject();
            uint64_t v539 = sub_24DCC9C58();
            long long v541 = (char *)v540 + *(int *)(v538 + 48);
            *long long v540 = 262912;
            (*(void (**)(char *, char *, ValueMetadata *))(v536 + 16))(v541, v537, v244);
            swift_storeEnumTagMultiPayload();
            swift_storeEnumTagMultiPayload();
            uint64_t v145 = sub_24D785484(v539);
            (*(void (**)(char *, ValueMetadata *))(v536 + 8))(v537, v244);
            goto LABEL_109;
          default:
            (*(void (**)(char *, ValueMetadata *))(v647 + 8))(v242, v244);
            goto LABEL_56;
        }
      }
      goto LABEL_55;
    case 20:
      unint64_t v251 = v610;
      uint64_t v252 = v658;
      v131(v610, v113, v658);
      if ((*v251 & 0x8000000000000000) == 0) {
        goto LABEL_25;
      }
      goto LABEL_87;
    case 21:
      uint64_t v252 = v658;
      v131(v85, v113, v658);
      if ((*(void *)v85 & 0x8000000000000000) == 0)
      {
        uint64_t v253 = (ValueMetadata *)v635;
        unint64_t v254 = v637;
        uint64_t v659 = v635;
        uint64_t v660 = v637;
        unint64_t v255 = v636;
        uint64_t v256 = v638;
        uint64_t v661 = v636;
        unint64_t v662 = v638;
        type metadata accessor for Materialization.MaterializeIgnoredItem();
        uint64_t v257 = swift_dynamicCastClass();
        uint64_t v258 = TupleTypeMetadata2;
        if (v257)
        {
          uint64_t v259 = v257;
          sub_24DCCAD88();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_24DCC9C58();
          unsigned int v262 = (char *)v260 + *(int *)(v258 + 48);
          uint64_t v263 = 0x4000;
LABEL_29:
          *uint64_t v260 = v263;
          uint64_t v264 = v259 + *(void *)(*(void *)v259 + 576);
          uint64_t v265 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v262, v264, v653);
          uint64_t v659 = v265;
          uint64_t v660 = v652;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
LABEL_30:
          swift_storeEnumTagMultiPayload();
          uint64_t v266 = sub_24D785484(v261);
LABEL_146:
          uint64_t v145 = v266;
          swift_release_n();
LABEL_147:
          (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
          return v145;
        }
        uint64_t v659 = (uint64_t)v254;
        uint64_t v660 = v253;
        uint64_t v661 = v256;
        unint64_t v662 = v255;
        type metadata accessor for Propagation.CreateItem();
        int v453 = (unsigned char *)swift_dynamicCastClass();
        if (v453)
        {
          if (v133)
          {
            unint64_t v454 = v453;
            if (v453[112] == 3)
            {
              unint64_t v455 = &v453[*(void *)(*(void *)v453 + 656)];
              swift_beginAccess();
              uint64_t v456 = v581;
              unint64_t v457 = v580;
              uint64_t v458 = v582;
              (*(void (**)(char *, unsigned char *, uint64_t))(v581 + 16))(v580, v455, v582);
              uint64_t v459 = v584;
              uint64_t v460 = v585;
              if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v584 + 48))(v457, 1, v585) != 1)
              {
                unint64_t v558 = v583;
                (*(void (**)(char *, char *, uint64_t))(v459 + 32))(v583, v457, v460);
                sub_24DCCAD88();
                uint64_t v656 = v113;
                uint64_t v559 = *(void *)(v648 + 72);
                swift_allocObject();
                swift_retain();
                uint64_t v654 = sub_24DCC9C58();
                uint64_t v560 = v459;
                int v562 = v561;
                BOOL v563 = (char *)v561 + *(int *)(v258 + 48);
                *unint64_t v561 = 8;
                uint64_t v564 = v558;
                uint64_t v565 = (uint64_t)v653;
                (*(void (**)(char *, char *, ValueMetadata *))(v647 + 16))(v563, v564, v653);
                unint64_t v566 = v652;
                uint64_t v659 = v565;
                uint64_t v660 = v652;
                uint64_t v661 = (ValueMetadata *)v650;
                unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
                type metadata accessor for ReconciliationID();
                swift_storeEnumTagMultiPayload();
                swift_storeEnumTagMultiPayload();
                BOOL v567 = (void *)((char *)v562 + v559);
                size_t v568 = (char *)v562 + v559 + *(int *)(v258 + 48);
                *BOOL v567 = 8;
                (*(void (**)(char *, unsigned char *, ValueMetadata *))(v646 + 16))(v568, &v454[*(void *)(*(void *)v454 + 576)], v566);
                swift_storeEnumTagMultiPayload();
                swift_storeEnumTagMultiPayload();
                uint64_t v145 = sub_24D785484(v654);
                swift_release_n();
                (*(void (**)(char *, uint64_t))(v560 + 8))(v583, v585);
                (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v656, v252);
                return v145;
              }
              unint64_t v461 = *(void (**)(char *, uint64_t))(v456 + 8);
              swift_retain();
              v461(v457, v458);
              goto LABEL_145;
            }
          }
LABEL_144:
          swift_retain();
LABEL_145:
          uint64_t v266 = sub_24DCC9C98();
          goto LABEL_146;
        }
        uint64_t v659 = (uint64_t)v254;
        uint64_t v660 = v253;
        uint64_t v661 = v256;
        unint64_t v662 = v255;
        type metadata accessor for Propagation.UpdateItem();
        uint64_t v489 = swift_dynamicCastClass();
        if (v489)
        {
          uint64_t v490 = v489;
          if (*(unsigned char *)(v489 + 112) == 3)
          {
            unint64_t v491 = *(void **)(v489 + 104);
            uint64_t v659 = *(void *)(v489 + 96);
            uint64_t v492 = (void *)v659;
            swift_retain();
            sub_24D3F1C98(v492, v491, 3);
            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
            unint64_t v493 = v577;
            uint64_t v494 = v579;
            char v495 = swift_dynamicCast();
            uint64_t v496 = v578;
            long long v497 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v578 + 56);
            if (v495)
            {
              v497(v493, 0, 1, v494);
              long long v498 = v576;
              (*(void (**)(char *, char *, uint64_t))(v496 + 32))(v576, v493, v494);
              if ((*(unsigned char *)(v490 + *(void *)(*(void *)v490 + 640)) & 3) != 0)
              {
                long long v499 = v573;
                (*(void (**)(char *, char *, uint64_t))(v496 + 16))(v573, v498, v494);
                uint64_t v500 = swift_getEnumCaseMultiPayload();
                if (v500 == 1)
                {
                  MEMORY[0x270FA5388](v500);
                  strcpy((char *)&v571 - 48, " filename below syncability originalError ");
                  uint64_t v501 = (uint64_t)v653;
                  uint64_t v659 = (uint64_t)v653;
                  uint64_t v660 = &type metadata for Filename;
                  uint64_t v661 = v653;
                  unint64_t v662 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26986BB30);
                  unsigned int v663 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B19A060);
                  long long v502 = (int *)swift_getTupleTypeMetadata();
                  swift_bridgeObjectRelease();
                  long long v503 = &v499[v502[16]];
                  sub_24D4A479C(*(void *)&v499[v502[20]], *(void *)&v499[v502[20] + 8]);

                  long long v504 = v499;
                  uint64_t v505 = v647;
                  long long v506 = v572;
                  (*(void (**)(char *, char *, uint64_t))(v647 + 32))(v572, v504, v501);
                  uint64_t v656 = *(char **)(v505 + 8);
                  ((void (*)(char *, uint64_t))v656)(v503, v501);
                  sub_24DCCAD88();
                  swift_allocObject();
                  uint64_t v654 = sub_24DCC9C58();
                  unint64_t v508 = (char *)v507 + *(int *)(v258 + 48);
                  *long long v507 = 1024;
                  (*(void (**)(char *, char *, uint64_t))(v505 + 16))(v508, v506, v501);
                  uint64_t v659 = v501;
                  uint64_t v660 = v652;
                  uint64_t v661 = (ValueMetadata *)v650;
                  unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
                  type metadata accessor for ReconciliationID();
                  swift_storeEnumTagMultiPayload();
                  swift_storeEnumTagMultiPayload();
                  uint64_t v145 = sub_24D785484(v654);
                  swift_release_n();
                  ((void (*)(char *, uint64_t))v656)(v506, v501);
                  (*(void (**)(char *, uint64_t))(v496 + 8))(v576, v579);
                }
                else
                {
                  unint64_t v570 = *(void (**)(char *, uint64_t))(v496 + 8);
                  v570(v499, v494);
                  uint64_t v145 = sub_24DCC9C98();
                  swift_release_n();
                  v570(v498, v494);
                }
              }
              else
              {
                uint64_t v145 = sub_24DCC9C98();
                swift_release_n();
                (*(void (**)(char *, uint64_t))(v496 + 8))(v498, v494);
              }
              goto LABEL_147;
            }
            v497(v493, 1, 1, v494);
            (*(void (**)(char *, uint64_t))(v574 + 8))(v493, v575);
            goto LABEL_145;
          }
          goto LABEL_144;
        }
        uint64_t v659 = (uint64_t)v253;
        uint64_t v660 = v254;
        uint64_t v661 = v255;
        unint64_t v662 = v256;
        type metadata accessor for Ingestion.DeleteFolderFromSnapshotIfEmpty();
        uint64_t v552 = swift_dynamicCastClass();
        if (v552)
        {
          uint64_t v553 = v552;
          sub_24DCCAD88();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_24DCC9C58();
          unint64_t v555 = (char *)v554 + *(int *)(v258 + 48);
          *unint64_t v554 = 1024;
          uint64_t v556 = v553 + *(void *)(*(void *)v553 + 576);
          uint64_t v557 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v555, v556, v653);
          uint64_t v659 = v557;
          uint64_t v660 = v652;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
          goto LABEL_30;
        }
        uint64_t v659 = (uint64_t)v253;
        uint64_t v660 = v254;
        uint64_t v661 = v255;
        unint64_t v662 = v256;
        type metadata accessor for Ingestion.FaultDirectoryInTree();
        uint64_t v569 = swift_dynamicCastClass();
        if (v569)
        {
          uint64_t v259 = v569;
          sub_24DCCAD88();
          swift_allocObject();
          swift_retain();
          uint64_t v261 = sub_24DCC9C58();
          unsigned int v262 = (char *)v260 + *(int *)(v258 + 48);
          uint64_t v263 = 256;
          goto LABEL_29;
        }
LABEL_25:
        swift_release();
        goto LABEL_56;
      }
LABEL_87:
      uint64_t v362 = v635;
      unsigned int v363 = v637;
      uint64_t v659 = v635;
      uint64_t v660 = v637;
      uint64_t v364 = v636;
      uint64_t v365 = v638;
      uint64_t v661 = v636;
      unint64_t v662 = v638;
      type metadata accessor for Propagation.CreateItem();
      uint64_t v366 = swift_dynamicCastClass();
      uint64_t v367 = TupleTypeMetadata2;
      if (v366)
      {
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
        uint64_t v368 = v366 + *(void *)(*(void *)v366 + 656);
        swift_beginAccess();
        uint64_t v369 = v604;
        uint64_t v370 = v596;
        uint64_t v371 = v605;
        (*(void (**)(char *, uint64_t, uint64_t))(v604 + 16))(v596, v368, v605);
        uint64_t v372 = v607;
        uint64_t v373 = v608;
        int v374 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v607 + 48))(v370, 1, v608);
        unsigned int v375 = v652;
        if (v374 == 1)
        {
          (*(void (**)(char *, uint64_t))(v369 + 8))(v370, v371);
          sub_24DCCAD88();
          swift_allocObject();
          uint64_t v239 = sub_24DCC9C58();
          uint64_t v377 = (char *)v376 + *(int *)(v367 + 48);
          *uint64_t v376 = 8;
          uint64_t v378 = (uint64_t)v653;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v377, v366 + *(void *)(*(void *)v366 + 576), v653);
          swift_release();
          uint64_t v659 = v378;
          uint64_t v660 = v375;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
LABEL_132:
          swift_storeEnumTagMultiPayload();
LABEL_133:
          swift_storeEnumTagMultiPayload();
          uint64_t v274 = v239;
          return sub_24D785484(v274);
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v372 + 32))(v595, v370, v373);
          sub_24DCCAD88();
          uint64_t v655 = *(void *)(v648 + 72);
          uint64_t v656 = (char *)(2 * v655);
          swift_allocObject();
          unint64_t v462 = (void (*)(char *, char *, uint64_t))sub_24DCC9C58();
          unint64_t v464 = v463;
          uint64_t v465 = *(int *)(v367 + 48);
          void *v463 = 1024;
          unsigned int v466 = (char *)v463 + v465;
          BOOL v658 = v462;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = v375;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
          unsigned int v467 = &v466[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          unsigned int v468 = *(void (**)(char *, char *, ValueMetadata *))(v646 + 16);
          unsigned int v469 = v595;
          v468(v466, v595, v375);
          swift_storeEnumTagMultiPayload();
          unsigned int v470 = &v469[*(int *)(v373 + 36)];
          uint64_t v472 = *(void *)v470;
          uint64_t v471 = *((void *)v470 + 1);
          uint64_t v654 = v471;
          *(void *)unsigned int v467 = v472;
          *((void *)v467 + 1) = v471;
          swift_storeEnumTagMultiPayload();
          uint64_t v473 = TupleTypeMetadata2;
          unint64_t v474 = (char *)v464 + v655 + *(int *)(TupleTypeMetadata2 + 48);
          *(void *)((char *)v464 + v655) = 8;
          v468(v474, v469, v375);
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v475 = &v656[(void)v464];
          unint64_t v476 = &v656[(void)v464 + *(int *)(v473 + 48)];
          *(void *)uint64_t v475 = 8;
          (*(void (**)(char *, uint64_t, ValueMetadata *))(v647 + 16))(v476, v366 + *(void *)(*(void *)v366 + 576), v653);
          swift_bridgeObjectRetain();
          swift_release();
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v145 = sub_24D785484((uint64_t)v658);
          (*(void (**)(char *, uint64_t))(v607 + 8))(v469, v608);
        }
      }
      else
      {
        uint64_t v659 = v362;
        uint64_t v660 = v363;
        uint64_t v661 = v364;
        unint64_t v662 = v365;
        type metadata accessor for Propagation.UpdateItem();
        uint64_t v406 = swift_dynamicCastClass();
        int v407 = v652;
        uint64_t v408 = v647;
        if (!v406) {
          goto LABEL_25;
        }
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v252);
        uint64_t v666 = sub_24DCC9C98();
        unsigned int v409 = v631;
        uint64_t v410 = (uint64_t)v653;
        (*(void (**)(char *, uint64_t, ValueMetadata *))(v408 + 16))(v631, v406 + *(void *)(*(void *)v406 + 576), v653);
        uint64_t v659 = v410;
        uint64_t v660 = v407;
        uint64_t v661 = (ValueMetadata *)v650;
        unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
        type metadata accessor for ReconciliationID();
        swift_storeEnumTagMultiPayload();
        uint64_t v411 = v649;
        swift_storeEnumTagMultiPayload();
        unsigned int v412 = v632;
        uint64_t v413 = (char *)v632 + *(int *)(v367 + 48);
        *int v632 = 8;
        int v414 = *(void (**)(char *, char *, uint64_t))(v639 + 32);
        v639 += 32;
        v414(v413, v409, v411);
        uint64_t v415 = sub_24DCC9D48();
        sub_24DCC9D08();
        uint64_t v416 = *(void *)v406;
        if ((*(unsigned char *)(v406 + *(void *)(*(void *)v406 + 640)) & 3) != 0)
        {
          uint64_t v656 = (char *)v415;
          BOOL v658 = v414;
          uint64_t v417 = v406 + *(void *)(v416 + 664);
          swift_beginAccess();
          uint64_t v418 = v604;
          unsigned int v419 = v587;
          uint64_t v420 = v605;
          (*(void (**)(char *, uint64_t, uint64_t))(v604 + 16))(v587, v417, v605);
          swift_release();
          uint64_t v421 = v607;
          uint64_t v422 = v608;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v607 + 48))(v419, 1, v608) == 1)
          {
            (*(void (**)(char *, uint64_t))(v418 + 8))(v419, v420);
          }
          else
          {
            long long v542 = v419;
            long long v543 = v586;
            (*(void (**)(char *, char *, uint64_t))(v421 + 32))(v586, v542, v422);
            __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
            uint64_t v544 = swift_getTupleTypeMetadata2();
            long long v545 = v631;
            uint64_t v546 = v421;
            unint64_t v547 = &v631[*(int *)(v544 + 48)];
            (*(void (**)(char *, char *, ValueMetadata *))(v646 + 16))(v631, v543, v407);
            swift_storeEnumTagMultiPayload();
            unint64_t v548 = &v543[*(int *)(v422 + 36)];
            uint64_t v549 = v422;
            uint64_t v550 = *((void *)v548 + 1);
            *(void *)unint64_t v547 = *(void *)v548;
            *((void *)v547 + 1) = v550;
            swift_storeEnumTagMultiPayload();
            unint64_t v551 = (char *)v412 + *(int *)(v367 + 48);
            *unsigned int v412 = 1024;
            v658(v551, v545, v411);
            swift_bridgeObjectRetain();
            sub_24DCC9D08();
            (*(void (**)(char *, uint64_t))(v546 + 8))(v543, v549);
          }
          return v666;
        }
        else
        {
          swift_release();
          return v666;
        }
      }
      return v145;
    case 22:
      unint64_t v267 = v612;
      v131(v612, v113, v658);
      if (*v267 != 1) {
        goto LABEL_35;
      }
      if ((v599 & 0x4000) == 0) {
        goto LABEL_56;
      }
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v268 = sub_24DCC9C58();
      void *v269 = 512;
      swift_storeEnumTagMultiPayload();
      uint64_t v270 = sub_24D785484(v268);
      goto LABEL_57;
    case 23:
      unsigned int v271 = v613;
      v131(v613, v113, v658);
      if (*v271) {
        goto LABEL_56;
      }
LABEL_35:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v272 = sub_24DCC9C58();
      *unint64_t v273 = 512;
      swift_storeEnumTagMultiPayload();
      uint64_t v274 = v272;
      return sub_24D785484(v274);
    case 24:
      uint64_t v275 = v614;
      uint64_t v160 = v658;
      v131(v614, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v277 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v277 - 8) + 8))(v275, v277);
        goto LABEL_56;
      }
      char v339 = v133;
      uint64_t v278 = v647;
      uint64_t v279 = v598;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v598, v275, v276);
      if (v339)
      {
        uint64_t v341 = sub_24DCC9C98();
      }
      else
      {
        uint64_t v340 = TupleTypeMetadata2;
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v281 = sub_24DCC9C58();
        uint64_t v307 = (char *)v306 + *(int *)(v340 + 48);
        uint64_t v308 = 0x4000;
LABEL_75:
        *unsigned int v306 = v308;
        (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v307, v279, v276);
LABEL_76:
        swift_storeEnumTagMultiPayload();
LABEL_77:
        swift_storeEnumTagMultiPayload();
        uint64_t v341 = sub_24D785484(v281);
      }
      uint64_t v145 = v341;
      (*(void (**)(char *, ValueMetadata *))(v278 + 8))(v279, v276);
      goto LABEL_79;
    case 25:
      uint64_t v242 = v609;
      uint64_t v160 = v658;
      v131(v609, v113, v658);
      unsigned int v276 = v652;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v646;
      uint64_t v279 = v627;
      (*(void (**)(char *, char *, ValueMetadata *))(v646 + 32))(v627, v242, v276);
      uint64_t v280 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v281 = sub_24DCC9C58();
      unsigned int v283 = (char *)v282 + *(int *)(v280 + 48);
      *int v282 = 4096;
      (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v283, v279, v276);
      goto LABEL_76;
    case 26:
      unsigned int v284 = v611;
      unint64_t v243 = v658;
      v131(v611, v113, v658);
      uint64_t v285 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v286 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v286 - 8) + 8))(v284, v286);
        goto LABEL_56;
      }
      char v342 = v133;
      uint64_t v343 = v647;
      uint64_t v344 = v597;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v597, v284, v285);
      if (v342)
      {
        uint64_t v349 = sub_24DCC9C98();
      }
      else
      {
        uint64_t v345 = TupleTypeMetadata2;
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v346 = sub_24DCC9C58();
        unsigned int v348 = (char *)v347 + *(int *)(v345 + 48);
        *int v347 = 2;
        (*(void (**)(char *, char *, ValueMetadata *))(v343 + 16))(v348, v344, v285);
        swift_storeEnumTagMultiPayload();
        swift_storeEnumTagMultiPayload();
        uint64_t v349 = sub_24D785484(v346);
      }
      uint64_t v145 = v349;
      (*(void (**)(char *, ValueMetadata *))(v343 + 8))(v344, v285);
      goto LABEL_109;
    case 27:
      size_t v229 = v624;
      uint64_t v287 = v658;
      v131(v624, v113, v658);
      uint64_t v288 = v635;
      unsigned int v289 = v637;
      uint64_t v659 = v635;
      uint64_t v660 = v637;
      unsigned int v290 = v636;
      uint64_t v291 = v638;
      uint64_t v661 = v636;
      unint64_t v662 = v638;
      uint64_t v235 = type metadata accessor for TestingOperation();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_43:
        (*(void (**)(char *, uint64_t))(*(void *)(v235 - 8) + 8))(v229, v235);
        goto LABEL_56;
      }
      uint64_t v659 = v288;
      uint64_t v660 = v289;
      uint64_t v661 = v290;
      unint64_t v662 = v291;
      uint64_t v235 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v350 = swift_getEnumCaseMultiPayload();
      switch((int)v350)
      {
        case 0:
          MEMORY[0x270FA5388](v350);
          strcpy((char *)&v571 - 48, " item version domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_24DCCA3F8();
          uint64_t v661 = (ValueMetadata *)MEMORY[0x263F8D9D0];
          unint64_t v662 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B197E20);
          uint64_t v509 = swift_getTupleTypeMetadata();
          long long v510 = &v229[*(int *)(v509 + 48)];

          uint64_t v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          unsigned int v352 = v594;
          v351(v594, v229, v353);
          uint64_t v511 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v511 - 8) + 8))(v510, v511);
          goto LABEL_149;
        case 1:
          uint64_t v656 = (char *)&v571;
          MEMORY[0x270FA5388](v350);
          uint64_t v654 = (uint64_t)(&v571 - 10);
          strcpy((char *)&v571 - 80, " item destinationItemID baseVersion fields version domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_24DCCA3F8();
          uint64_t v661 = (ValueMetadata *)sub_24DCCA3F8();
          uint64_t v513 = swift_getAssociatedTypeWitness();
          uint64_t v514 = swift_getAssociatedTypeWitness();
          uint64_t v515 = swift_getAssociatedConformanceWitness();
          uint64_t v646 = swift_getAssociatedConformanceWitness();
          uint64_t v666 = v513;
          uint64_t v667 = v514;
          uint64_t v668 = v515;
          uint64_t v669 = v646;
          type metadata accessor for FileItemVersion();
          unint64_t v662 = (ValueMetadata *)sub_24DCCA3F8();
          unsigned int v663 = &type metadata for Fields;
          uint64_t v664 = MEMORY[0x263F8D9D0];
          uint64_t v665 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B197E20);
          unsigned int v516 = (int *)swift_getTupleTypeMetadata();
          uint64_t v654 = (uint64_t)&v229[v516[12]];
          uint64_t v645 = &v229[v516[16]];
          uint64_t v517 = v516[20];
          uint64_t v656 = v113;
          unint64_t v518 = &v229[v517];

          uint64_t v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          unsigned int v352 = v594;
          unint64_t v519 = v229;
          unint64_t v512 = v652;
          v351(v594, v519, v353);
          uint64_t v659 = v513;
          uint64_t v660 = (ValueMetadata *)v514;
          uint64_t v661 = (ValueMetadata *)v515;
          unint64_t v662 = (ValueMetadata *)v646;
          type metadata accessor for FileItemVersion();
          uint64_t v520 = sub_24DCCA3F8();
          uint64_t v521 = v518;
          long long v113 = v656;
          (*(void (**)(char *, uint64_t))(*(void *)(v520 - 8) + 8))(v521, v520);
          uint64_t v522 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v522 - 8) + 8))(v645, v522);
          uint64_t v523 = sub_24DCCA3F8();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v523 - 8) + 8))(v654, v523);
          goto LABEL_152;
        case 2:
          uint64_t v656 = (char *)&v571;
          MEMORY[0x270FA5388](v350);
          uint64_t v654 = (uint64_t)(&v571 - 8);
          strcpy((char *)&v571 - 64, " destinationItemID baseVersion recursive domainVersion ");
          uint64_t v353 = (uint64_t)v653;
          uint64_t v659 = (uint64_t)v653;
          uint64_t v660 = (ValueMetadata *)sub_24DCCA3F8();
          uint64_t v524 = swift_getAssociatedTypeWitness();
          uint64_t v525 = swift_getAssociatedTypeWitness();
          uint64_t v526 = swift_getAssociatedConformanceWitness();
          uint64_t v646 = v526;
          uint64_t v527 = swift_getAssociatedConformanceWitness();
          uint64_t v666 = v524;
          uint64_t v667 = v525;
          uint64_t v668 = v526;
          uint64_t v669 = v527;
          type metadata accessor for FileItemVersion();
          uint64_t v661 = (ValueMetadata *)sub_24DCCA3F8();
          unint64_t v662 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B199DF0);
          unsigned int v663 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B197E20);
          uint64_t v528 = (int *)swift_getTupleTypeMetadata();
          uint64_t v656 = &v229[v528[12]];
          uint64_t v654 = (uint64_t)&v229[v528[16]];

          uint64_t v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          unsigned int v352 = v594;
          unint64_t v529 = v229;
          unint64_t v512 = v652;
          v351(v594, v529, v353);
          uint64_t v659 = v524;
          uint64_t v660 = (ValueMetadata *)v525;
          uint64_t v661 = (ValueMetadata *)v646;
          unint64_t v662 = (ValueMetadata *)v527;
          type metadata accessor for FileItemVersion();
          uint64_t v530 = sub_24DCCA3F8();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v530 - 8) + 8))(v654, v530);
          uint64_t v531 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v531 - 8) + 8))(v656, v531);
          goto LABEL_152;
        case 4:
        case 5:
          uint64_t v351 = *(void (**)(char *, char *, uint64_t))(v647 + 32);
          unsigned int v352 = v594;
          uint64_t v353 = (uint64_t)v653;
          v351(v594, v229, (uint64_t)v653);
LABEL_149:
          unint64_t v512 = v652;
LABEL_152:
          (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v287);
          uint64_t v532 = TupleTypeMetadata2;
          sub_24DCCAD88();
          swift_allocObject();
          uint64_t v533 = sub_24DCC9C58();
          long long v535 = (char *)v534 + *(int *)(v532 + 48);
          *long long v534 = 0x2000;
          v351(v535, v352, v353);
          uint64_t v659 = v353;
          uint64_t v660 = v512;
          uint64_t v661 = (ValueMetadata *)v650;
          unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
          type metadata accessor for ReconciliationID();
          swift_storeEnumTagMultiPayload();
          swift_storeEnumTagMultiPayload();
          uint64_t v274 = v533;
          break;
        default:
          goto LABEL_43;
      }
      return sub_24D785484(v274);
    case 30:
      uint64_t v242 = v619;
      unint64_t v243 = v658;
      v131(v619, v113, v658);
      uint64_t v292 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v293 = v647;
      int v294 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v292);
      uint64_t v295 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v297 = sub_24DCC9C58();
      uint64_t v298 = (char *)v296 + *(int *)(v295 + 48);
      uint64_t v299 = 0x4000;
      goto LABEL_86;
    case 32:
      uint64_t v242 = v615;
      uint64_t v160 = v658;
      v131(v615, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      uint64_t v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v300 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v281 = sub_24DCC9C58();
      unsigned int v302 = (char *)v301 + *(int *)(v300 + 48);
      *int v301 = 8;
      (*(void (**)(char *, char *, ValueMetadata *))(v278 + 16))(v302, v279, v276);
      swift_storeEnumTagMultiPayload();
      goto LABEL_77;
    case 33:
      uint64_t v160 = v658;
      v131(v96, v113, v658);
      unsigned int v303 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v304 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v304 - 8) + 8))(v96, v304);
        goto LABEL_56;
      }
      uint64_t v354 = v647;
      unsigned int v355 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v96, v303);
      uint64_t v356 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v357 = sub_24DCC9C58();
      unsigned int v359 = (char *)v358 + *(int *)(v356 + 48);
      *uint64_t v358 = 1024;
      (*(void (**)(char *, char *, ValueMetadata *))(v354 + 16))(v359, v355, v303);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      uint64_t v145 = sub_24D785484(v357);
      (*(void (**)(char *, ValueMetadata *))(v354 + 8))(v355, v303);
LABEL_79:
      (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v160);
      return v145;
    case 34:
      uint64_t v242 = v617;
      uint64_t v160 = v658;
      v131(v617, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      uint64_t v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v305 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v281 = sub_24DCC9C58();
      uint64_t v307 = (char *)v306 + *(int *)(v305 + 48);
      uint64_t v308 = 0x80000;
      goto LABEL_75;
    case 38:
      uint64_t v242 = v620;
      uint64_t v160 = v658;
      v131(v620, v113, v658);
      unsigned int v276 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_55;
      }
      uint64_t v278 = v647;
      uint64_t v279 = v645;
      (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v276);
      uint64_t v309 = TupleTypeMetadata2;
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v281 = sub_24DCC9C58();
      uint64_t v307 = (char *)v306 + *(int *)(v309 + 48);
      uint64_t v308 = 1024;
      goto LABEL_75;
    case 40:
      uint64_t v242 = v622;
      unint64_t v243 = v658;
      v131(v622, v113, v658);
      uint64_t v292 = v653;
      uint64_t v659 = (uint64_t)v653;
      uint64_t v660 = v652;
      uint64_t v661 = (ValueMetadata *)v650;
      unint64_t v662 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v245 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
LABEL_55:
        (*(void (**)(char *, uint64_t))(*(void *)(v245 - 8) + 8))(v242, v245);
LABEL_56:
        uint64_t v270 = sub_24DCC9C98();
LABEL_57:
        uint64_t v145 = v270;
LABEL_58:
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v658);
      }
      else
      {
        uint64_t v293 = v647;
        int v294 = v645;
        (*(void (**)(char *, char *, ValueMetadata *))(v647 + 32))(v645, v242, v292);
        uint64_t v360 = TupleTypeMetadata2;
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v297 = sub_24DCC9C58();
        uint64_t v298 = (char *)v296 + *(int *)(v360 + 48);
        uint64_t v299 = 512;
LABEL_86:
        *unsigned int v296 = v299;
        __swift_instantiateConcreteTypeFromMangledNameAbstract(qword_26B199BD0);
        int v361 = &v298[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        (*(void (**)(char *, char *, ValueMetadata *))(v293 + 16))(v298, v294, v292);
        swift_storeEnumTagMultiPayload();
        *(void *)int v361 = 0;
        *((void *)v361 + 1) = 0;
        swift_storeEnumTagMultiPayload();
        uint64_t v145 = sub_24D785484(v297);
        (*(void (**)(char *, ValueMetadata *))(v293 + 8))(v294, v292);
LABEL_109:
        (*(void (**)(char *, void (*)(char *, char *, uint64_t)))(v655 + 8))(v113, v243);
      }
      return v145;
    default:
      goto LABEL_56;
  }
}

uint64_t sub_24D566278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  uint64_t v5 = (char *)a4 + *(int *)(type metadata accessor for PersistenceTrigger.AffectedItemJobs() + 56);
  swift_getAssociatedTypeWitness();
  uint64_t v6 = sub_24DCCA3F8();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(v5, a3, v6);
}

uint64_t sub_24D566334(void *a1, uint64_t a2)
{
  uint64_t v421 = a1;
  uint64_t v3 = *(void (**)(void))(a2 + 16);
  uint64_t v4 = *(ValueMetadata **)(a2 + 32);
  uint64_t v418 = type metadata accessor for SnapshotItem();
  uint64_t v416 = *(void *)(v418 - 8);
  MEMORY[0x270FA5388](v418);
  uint64_t v404 = (char *)&v400 - v5;
  unsigned int v430 = v4;
  uint64_t v431 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24DCCA3F8();
  uint64_t v8 = MEMORY[0x270FA5388](v7 - 8);
  int v424 = (char *)&v400 - v9;
  uint64_t v10 = *(void *)(a2 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v408 = (char *)&v400 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v407 = (char *)&v400 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v17 = (char *)&v400 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v406 = (char *)&v400 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)&v400 - v21;
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v411 = (char *)&v400 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  unsigned int v412 = (unsigned __int8 *)&v400 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  unsigned int v409 = (char *)&v400 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v410 = (char *)&v400 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  uint64_t v413 = (char *)&v400 - v32;
  uint64_t v33 = MEMORY[0x270FA5388](v31);
  uint64_t v417 = (char *)&v400 - v34;
  uint64_t v35 = MEMORY[0x270FA5388](v33);
  uint64_t v420 = (char *)&v400 - v36;
  uint64_t v37 = MEMORY[0x270FA5388](v35);
  uint64_t v39 = (char *)&v400 - v38;
  uint64_t v40 = MEMORY[0x270FA5388](v37);
  unsigned int v405 = (char *)&v400 - v41;
  uint64_t v42 = MEMORY[0x270FA5388](v40);
  unsigned int v419 = (char *)&v400 - v43;
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  int v414 = (char *)&v400 - v45;
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v48 = (char *)&v400 - v47;
  uint64_t v49 = MEMORY[0x270FA5388](v46);
  uint64_t v51 = (char *)&v400 - v50;
  uint64_t v52 = MEMORY[0x270FA5388](v49);
  uint64_t v54 = (char *)&v400 - v53;
  uint64_t v432 = (char *)&v400 - v53;
  uint64_t v426 = AssociatedTypeWitness;
  uint64_t v425 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v55 = MEMORY[0x270FA5388](v52);
  uint64_t v57 = (char *)&v400 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = MEMORY[0x270FA5388](v55);
  unsigned int v401 = (char *)&v400 - v59;
  uint64_t v60 = MEMORY[0x270FA5388](v58);
  uint64_t v402 = (char *)&v400 - v61;
  uint64_t v62 = MEMORY[0x270FA5388](v60);
  uint64_t v403 = (void (*)(void))((char *)&v400 - v63);
  uint64_t v64 = MEMORY[0x270FA5388](v62);
  size_t v423 = (void (*)(void))((char *)&v400 - v65);
  uint64_t v66 = MEMORY[0x270FA5388](v64);
  uint64_t v422 = (uint64_t)&v400 - v67;
  MEMORY[0x270FA5388](v66);
  uint64_t v415 = (char *)&v400 - v68;
  uint64_t v427 = v10;
  uint64_t v69 = *(void (**)(char *, ValueMetadata *, uint64_t))(v10 + 16);
  v69(v54, v428, a2);
  uint64_t v429 = a2;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v70 = v410;
      uint64_t v71 = v429;
      v69(v410, (ValueMetadata *)v432, v429);
      uint64_t v72 = *(ValueMetadata **)(v71 + 40);
      uint64_t v73 = *(void (**)(void))(v71 + 24);
      uint64_t v74 = swift_getAssociatedTypeWitness();
      uint64_t v75 = (uint64_t)v431;
      uint64_t v76 = v426;
      uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
      uint64_t v78 = v76;
      uint64_t v79 = v70;
      uint64_t v80 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v78;
      uint64_t v436 = (void (*)(void))v74;
      unsigned int v437 = (ValueMetadata *)AssociatedConformanceWitness;
      uint64_t v438 = (ValueMetadata *)v80;
      uint64_t v81 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(*(void *)(v81 - 8) + 8))(v70, v81);
        goto LABEL_70;
      }
      uint64_t v275 = v425;
      unsigned int v276 = v423;
      (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v79, v78);
      uint64_t v435 = v75;
      uint64_t v436 = v73;
      unsigned int v437 = v430;
      uint64_t v438 = v72;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
      uint64_t v278 = v277;
      uint64_t v279 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v275 + 16))(v424, v276, v78);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v275 + 56))(v279, 0, 1, v78);
      sub_24D566278(8, (uint64_t)&unk_26FFA2FD0, v279, v278);
      uint64_t v171 = sub_24D785484((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v275 + 8))(v276, v78);
      goto LABEL_76;
    case 2u:
      uint64_t v82 = v429;
      v69(v48, (ValueMetadata *)v432, v429);
      uint64_t v83 = *(void *)(v82 + 40);
      uint64_t v84 = *(void (**)(void))(v82 + 24);
      uint64_t v85 = swift_getAssociatedTypeWitness();
      uint64_t v86 = v426;
      uint64_t v87 = swift_getAssociatedConformanceWitness();
      uint64_t v88 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v86;
      uint64_t v436 = (void (*)(void))v85;
      unsigned int v437 = (ValueMetadata *)v87;
      uint64_t v438 = (ValueMetadata *)v88;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v48;
        goto LABEL_48;
      }
      unint64_t v428 = (ValueMetadata *)v87;
      uint64_t v280 = v425;
      uint64_t v281 = v86;
      int v282 = v415;
      size_t v423 = *(void (**)(void))(v425 + 32);
      v423();
      goto LABEL_60;
    case 4u:
      uint64_t v71 = v429;
      v69(v39, (ValueMetadata *)v432, v429);
      uint64_t v92 = *(ValueMetadata **)(v71 + 40);
      uint64_t v93 = *(void (**)(void))(v71 + 24);
      uint64_t v94 = swift_getAssociatedTypeWitness();
      uint64_t v95 = v431;
      uint64_t v96 = v426;
      uint64_t v97 = swift_getAssociatedConformanceWitness();
      uint64_t v98 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v96;
      uint64_t v436 = (void (*)(void))v94;
      unsigned int v437 = (ValueMetadata *)v97;
      uint64_t v438 = (ValueMetadata *)v98;
      uint64_t v99 = type metadata accessor for ReconciliationID();
      uint64_t v100 = (uint64_t)&v39[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(*(void *)(v99 - 8) + 8);
        v101(v100, v99);
        uint64_t v102 = v39;
        uint64_t v103 = v99;
        goto LABEL_39;
      }
      uint64_t v283 = v425;
      uint64_t v284 = (uint64_t)v95;
      uint64_t v285 = v423;
      (*(void (**)(void))(v425 + 32))();
      uint64_t v435 = v284;
      uint64_t v436 = v93;
      unsigned int v437 = v430;
      uint64_t v438 = v92;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v422 = sub_24DCC9C58();
      uint64_t v287 = v286;
      uint64_t v288 = *(void (**)(char *, void (*)(void), uint64_t))(v283 + 16);
      unint64_t v428 = (ValueMetadata *)v100;
      uint64_t v289 = (uint64_t)v424;
      v288(v424, v285, v96);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v283 + 56))(v289, 0, 1, v96);
      sub_24D566278(64, (uint64_t)&unk_26FFA2E90, v289, v287);
      uint64_t v171 = sub_24D785484(v422);
      (*(void (**)(void (*)(void), uint64_t))(v283 + 8))(v285, v96);
      (*(void (**)(ValueMetadata *, uint64_t))(*(void *)(v99 - 8) + 8))(v428, v99);
      goto LABEL_76;
    case 5u:
      unsigned int v104 = v420;
      uint64_t v105 = v429;
      v69(v420, (ValueMetadata *)v432, v429);
      uint64_t v106 = v418;
      uint64_t v107 = sub_24DCCA3F8();
      uint64_t v108 = &v104[*(int *)(swift_getTupleTypeMetadata3() + 48)];
      uint64_t v109 = v416;
      uint64_t v110 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v416 + 48);
      if (v110(v108, 1, v106) == 1)
      {
        if (v110(v104, 1, v106) == 1)
        {
          (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v104, v107);
          goto LABEL_70;
        }
        uint64_t v354 = v404;
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v404, v104, v106);
        size_t v423 = *(void (**)(void))(v105 + 24);
        unint64_t v428 = *(ValueMetadata **)(v105 + 40);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = v423;
        unsigned int v437 = v430;
        uint64_t v438 = v428;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v355 = sub_24DCC9C58();
        uint64_t v357 = v356;
        uint64_t v359 = (uint64_t)v424;
        uint64_t v358 = v425;
        uint64_t v360 = v426;
        (*(void (**)(char *, char *, uint64_t))(v425 + 16))(v424, v354, v426);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v358 + 56))(v359, 0, 1, v360);
        sub_24D566278(96, (uint64_t)&unk_26FFA2EB8, v359, v357);
        uint64_t v171 = sub_24D785484(v355);
        (*(void (**)(char *, uint64_t))(v109 + 8))(v354, v418);
      }
      else
      {
        unsigned int v290 = v404;
        (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v404, v108, v106);
        unint64_t v428 = *(ValueMetadata **)(v105 + 24);
        size_t v423 = *(void (**)(void))(v105 + 40);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = (void (*)(void))v428;
        unsigned int v437 = v430;
        uint64_t v438 = (ValueMetadata *)v423;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v291 = sub_24DCC9C58();
        uint64_t v293 = v292;
        uint64_t v295 = (uint64_t)v424;
        uint64_t v294 = v425;
        uint64_t v296 = v426;
        (*(void (**)(char *, char *, uint64_t))(v425 + 16))(v424, &v290[*(int *)(v106 + 36)], v426);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v294 + 56))(v295, 0, 1, v296);
        sub_24D566278(8, (uint64_t)&unk_26FFA2EE0, v295, v293);
        uint64_t v171 = sub_24D785484(v291);
        (*(void (**)(char *, uint64_t))(v109 + 8))(v290, v106);
        (*(void (**)(char *, uint64_t))(*(void *)(v107 - 8) + 8))(v420, v107);
      }
      goto LABEL_103;
    case 0xAu:
      uint64_t v111 = v417;
      uint64_t v112 = v429;
      v69(v417, (ValueMetadata *)v432, v429);
      long long v113 = *(ValueMetadata **)(v112 + 40);
      uint64_t v114 = *(void (**)(void))(v112 + 24);
      uint64_t v115 = swift_getAssociatedTypeWitness();
      uint64_t v116 = v426;
      uint64_t v117 = swift_getAssociatedConformanceWitness();
      uint64_t v118 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v116;
      uint64_t v436 = (void (*)(void))v115;
      unsigned int v437 = (ValueMetadata *)v117;
      uint64_t v438 = (ValueMetadata *)v118;
      uint64_t v435 = type metadata accessor for ReconciliationID();
      uint64_t v436 = (void (*)(void))sub_24DCCA3F8();
      unsigned int v437 = &type metadata for ContentStatus;
      uint64_t v438 = &type metadata for ContentStatus;
      uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
      uint64_t v120 = &v111[*(int *)(TupleTypeMetadata + 48)];
      int v121 = v111[*(int *)(TupleTypeMetadata + 80)];
      uint64_t v435 = v116;
      uint64_t v436 = (void (*)(void))v115;
      unsigned int v437 = (ValueMetadata *)v117;
      uint64_t v438 = (ValueMetadata *)v118;
      uint64_t v122 = v111;
      uint64_t v123 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v297 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v297 - 8) + 8))(v120, v297);
        (*(void (**)(char *, uint64_t))(*(void *)(v123 - 8) + 8))(v122, v123);
        goto LABEL_70;
      }
      uint64_t v124 = *(void *)(v123 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v120, 1, v123) == 1)
      {
        (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
        uint64_t v125 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v125 - 8) + 8))(v120, v125);
        goto LABEL_70;
      }
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        int v361 = *(void (**)(char *, uint64_t))(v124 + 8);
        v361(v120, v123);
        v361(v122, v123);
        goto LABEL_70;
      }
      switch(v121)
      {
        case 4:
          uint64_t v379 = v425;
          uint64_t v395 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          unsigned int v437 = v430;
          uint64_t v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_24DCCAD88();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
          uint64_t v397 = v396;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v395);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v395);
          unsigned int v385 = &unk_26FFA2F58;
LABEL_101:
          uint64_t v386 = v397;
          uint64_t v387 = 32;
          goto LABEL_102;
        case 2:
          uint64_t v379 = v425;
          uint64_t v398 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          unsigned int v437 = v430;
          uint64_t v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_24DCCAD88();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
          uint64_t v397 = v399;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v398);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v398);
          unsigned int v385 = &unk_26FFA2F30;
          goto LABEL_101;
        case 0:
          uint64_t v379 = v425;
          uint64_t v380 = v426;
          char v381 = v423;
          (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v120, v426);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v114;
          unsigned int v437 = v430;
          uint64_t v438 = v113;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_24DCCAD88();
          swift_allocObject();
          unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
          uint64_t v383 = v382;
          uint64_t v384 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v379 + 16))(v424, v381, v380);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v379 + 56))(v384, 0, 1, v380);
          unsigned int v385 = &unk_26FFA2F08;
          uint64_t v386 = v383;
          uint64_t v387 = 64;
LABEL_102:
          sub_24D566278(v387, (uint64_t)v385, v384, v386);
          uint64_t v171 = sub_24D785484((uint64_t)v428);
          (*(void (**)(void (*)(void), uint64_t))(v379 + 8))(v381, v426);
          (*(void (**)(char *, uint64_t))(v124 + 8))(v417, v123);
          goto LABEL_103;
      }
      (*(void (**)(char *, uint64_t))(v425 + 8))(v120, v426);
      (*(void (**)(char *, uint64_t))(v124 + 8))(v122, v123);
LABEL_70:
      uint64_t v325 = v429;
      uint64_t v326 = *(void (**)(void))(v429 + 24);
      uint64_t v327 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v326;
      unsigned int v437 = v430;
      uint64_t v438 = v327;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      uint64_t v171 = sub_24DCC9C98();
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v325);
      return v171;
    case 0xBu:
      uint64_t v126 = v414;
      uint64_t v82 = v429;
      uint64_t v127 = ((uint64_t (*)(char *, char *, uint64_t))v69)(v414, v432, v429);
      uint64_t v128 = v126;
      unint64_t v428 = (ValueMetadata *)&v400;
      MEMORY[0x270FA5388](v127);
      strcpy((char *)&v400 - 32, " otherID from to ");
      uint64_t v83 = *(void *)(v82 + 40);
      uint64_t v84 = *(void (**)(void))(v82 + 24);
      uint64_t v129 = swift_getAssociatedTypeWitness();
      uint64_t v130 = v426;
      uint64_t v131 = swift_getAssociatedConformanceWitness();
      uint64_t v132 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v130;
      uint64_t v436 = (void (*)(void))v129;
      unsigned int v437 = (ValueMetadata *)v131;
      uint64_t v438 = (ValueMetadata *)v132;
      uint64_t v435 = type metadata accessor for ReconciliationID();
      uint64_t v436 = (void (*)(void))sub_24DCCA3F8();
      unsigned int v437 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B1995E0);
      uint64_t v438 = v437;
      char v133 = &v126[*(int *)(swift_getTupleTypeMetadata() + 48)];
      uint64_t v435 = v130;
      uint64_t v436 = (void (*)(void))v129;
      unint64_t v428 = (ValueMetadata *)v131;
      unsigned int v437 = (ValueMetadata *)v131;
      uint64_t v438 = (ValueMetadata *)v132;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v135 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v135 - 8) + 8))(v133, v135);
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
        uint64_t v91 = v128;
        goto LABEL_68;
      }
      uint64_t v298 = v128;
      uint64_t v280 = v425;
      uint64_t v281 = v130;
      int v282 = v415;
      size_t v423 = *(void (**)(void))(v425 + 32);
      ((void (*)(char *, char *, uint64_t))v423)(v415, v298, v281);
      uint64_t v299 = sub_24DCCA3F8();
      (*(void (**)(char *, uint64_t))(*(void *)(v299 - 8) + 8))(v133, v299);
LABEL_60:
      uint64_t v300 = v430;
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v82);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v84;
      unsigned int v437 = v300;
      uint64_t v438 = (ValueMetadata *)v83;
      uint64_t v301 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      uint64_t v432 = (char *)v301;
      sub_24DCCAD88();
      uint64_t v302 = *(void *)(*(void *)(v301 - 8) + 72);
      swift_allocObject();
      uint64_t v429 = sub_24DCC9C58();
      uint64_t v304 = v303;
      uint64_t v422 = v83;
      uint64_t v305 = (uint64_t)v424;
      ((void (*)(char *, char *, uint64_t))v423)(v424, v282, v281);
      unsigned int v306 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v280 + 56);
      v306(v305, 0, 1, v281);
      sub_24D566278(32, (uint64_t)&unk_26FFA2DF0, v305, v304);
      ((void (*)(uint64_t))v428[3].Kind)(v281);
      v306(v305, 0, 1, v281);
      sub_24D566278(128, (uint64_t)&unk_26FFA2E18, v305, (void *)((char *)v304 + v302));
      uint64_t v307 = v429;
      return sub_24D785484(v307);
    case 0xDu:
      uint64_t v71 = v429;
      v69(v51, (ValueMetadata *)v432, v429);
      uint64_t v136 = *(ValueMetadata **)(v71 + 40);
      unint64_t v137 = *(void (**)(void))(v71 + 24);
      uint64_t v138 = swift_getAssociatedTypeWitness();
      uint64_t v139 = (uint64_t)v431;
      uint64_t v140 = v426;
      uint64_t v141 = swift_getAssociatedConformanceWitness();
      uint64_t v142 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v140;
      uint64_t v436 = (void (*)(void))v138;
      unsigned int v437 = (ValueMetadata *)v141;
      uint64_t v438 = (ValueMetadata *)v142;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
        uint64_t v91 = v51;
        goto LABEL_68;
      }
      char v308 = v51[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      uint64_t v309 = v425;
      (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v51, v140);
      uint64_t v435 = v139;
      uint64_t v436 = v137;
      unsigned int v437 = v430;
      uint64_t v438 = v136;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
      uint64_t v311 = v310;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B197ED0);
      uint64_t v312 = v140;
      uint64_t v313 = swift_allocObject();
      *(_OWORD *)(v313 + 16) = xmmword_24DCCECE0;
      *(unsigned char *)(v313 + 32) = v308;
      uint64_t v315 = v423;
      uint64_t v314 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v309 + 16))(v424, v423, v312);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v309 + 56))(v314, 0, 1, v312);
      sub_24D566278(393472, v313, v314, v311);
      uint64_t v171 = sub_24D785484((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v309 + 8))(v315, v312);
      goto LABEL_76;
    case 0xEu:
      uint64_t v143 = v419;
      uint64_t v144 = v432;
      uint64_t v145 = v429;
      ((void (*)(char *))v69)(v419);
      unsigned int v146 = v143;
      uint64_t v147 = *(void *)(v145 + 40);
      char v148 = *(void (**)(void))(v145 + 24);
      uint64_t v149 = swift_getAssociatedTypeWitness();
      uint64_t v150 = v426;
      uint64_t v151 = swift_getAssociatedConformanceWitness();
      uint64_t v152 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v150;
      uint64_t v436 = (void (*)(void))v149;
      unsigned int v437 = (ValueMetadata *)v151;
      uint64_t v438 = (ValueMetadata *)v152;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
      uint64_t v153 = *(void **)&v146[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {

LABEL_45:
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v146;
        goto LABEL_48;
      }
      id v434 = v153;
      if (swift_dynamicCast())
      {
        uint64_t v316 = v422;
        if (v433 == 3)
        {
          uint64_t v317 = v425;
          uint64_t v318 = *(void (**)(void (*)(void), char *, uint64_t))(v425 + 32);
          uint64_t v319 = (ValueMetadata *)v147;
          unint64_t v428 = (ValueMetadata *)v147;
          unsigned int v320 = v423;
          v318(v423, v146, v150);
          uint64_t v435 = (uint64_t)v431;
          uint64_t v436 = v148;
          unsigned int v437 = v430;
          uint64_t v438 = v319;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_24DCCAD88();
          swift_allocObject();
          uint64_t v321 = sub_24DCC9C58();
          uint64_t v323 = v322;
          uint64_t v324 = (uint64_t)v424;
          (*(void (**)(char *, void (*)(void), uint64_t))(v317 + 16))(v424, v320, v150);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v317 + 56))(v324, 0, 1, v150);
          sub_24D566278(64, (uint64_t)&unk_26FFA2E40, v324, v323);
          uint64_t v171 = sub_24D785484(v321);
          (*(void (**)(void (*)(void), uint64_t))(v317 + 8))(v320, v150);

          (*(void (**)(char *, uint64_t))(v427 + 8))(v144, v145);
          return v171;
        }
        uint64_t v329 = (uint64_t)v148;
      }
      else
      {
        uint64_t v329 = (uint64_t)v148;
        uint64_t v316 = v422;
      }

      uint64_t v330 = v425;
      uint64_t v249 = v426;
      unsigned int v331 = *(void (**)(void))(v425 + 32);
      uint64_t v333 = v316;
      uint64_t v332 = v419;
LABEL_91:
      size_t v423 = v331;
      ((void (*)(uint64_t, char *, uint64_t))v331)(v333, v332, v249);
      (*(void (**)(char *, uint64_t))(v427 + 8))(v144, v145);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v329;
      unint64_t v428 = (ValueMetadata *)v329;
      unsigned int v437 = v430;
      uint64_t v438 = (ValueMetadata *)v147;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v375 = sub_24DCC9C58();
      uint64_t v377 = v376;
      uint64_t v378 = (uint64_t)v424;
      ((void (*)(char *, uint64_t, uint64_t))v423)(v424, v422, v249);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v330 + 56))(v378, 0, 1, v249);
      sub_24D566278(96, (uint64_t)&unk_26FFA2E68, v378, v377);
      uint64_t v307 = v375;
      return sub_24D785484(v307);
    case 0xFu:
      uint64_t v246 = v405;
      uint64_t v144 = v432;
      uint64_t v145 = v429;
      ((void (*)(char *))v69)(v405);
      unsigned int v146 = v246;
      uint64_t v147 = *(void *)(v145 + 40);
      uint64_t v247 = *(void *)(v145 + 24);
      uint64_t v248 = swift_getAssociatedTypeWitness();
      uint64_t v249 = v426;
      uint64_t v250 = swift_getAssociatedConformanceWitness();
      uint64_t v251 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v249;
      uint64_t v436 = (void (*)(void))v248;
      unsigned int v437 = (ValueMetadata *)v250;
      uint64_t v438 = (ValueMetadata *)v251;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);

      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_45;
      }
      uint64_t v329 = v247;
      uint64_t v330 = v425;
      unsigned int v331 = *(void (**)(void))(v425 + 32);
      uint64_t v332 = v146;
      uint64_t v333 = v422;
      goto LABEL_91;
    case 0x13u:
      uint64_t v154 = (unsigned __int8 *)v409;
      uint64_t v155 = v429;
      v69(v409, (ValueMetadata *)v432, v429);
      LODWORD(v428) = *v154;
      uint64_t v156 = *(ValueMetadata **)(v155 + 40);
      uint64_t v157 = *(void (**)(void))(v155 + 24);
      uint64_t v158 = swift_getAssociatedTypeWitness();
      uint64_t v159 = (uint64_t)v431;
      uint64_t v160 = v426;
      uint64_t v161 = swift_getAssociatedConformanceWitness();
      uint64_t v162 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v160;
      uint64_t v436 = (void (*)(void))v158;
      unsigned int v437 = (ValueMetadata *)v161;
      uint64_t v438 = (ValueMetadata *)v162;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      uint64_t v163 = &v154[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v164 = v425;
      (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v163, v160);
      uint64_t v435 = v159;
      uint64_t v436 = v157;
      unsigned int v437 = v430;
      uint64_t v438 = v156;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v165 = sub_24DCC9C58();
      uint64_t v421 = v166;
      uint64_t v422 = v165;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B197ED0);
      uint64_t v167 = v160;
      uint64_t v168 = swift_allocObject();
      *(_OWORD *)(v168 + 16) = xmmword_24DCCECE0;
      *(unsigned char *)(v168 + 32) = (_BYTE)v428;
      uint64_t v170 = v423;
      uint64_t v169 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v164 + 16))(v424, v423, v167);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v169, 0, 1, v167);
      sub_24D566278(2048, v168, v169, v421);
      uint64_t v171 = sub_24D785484(v422);
      (*(void (**)(void (*)(void), uint64_t))(v164 + 8))(v170, v167);
      goto LABEL_98;
    case 0x15u:
      uint64_t v155 = v429;
      v69(v17, (ValueMetadata *)v432, v429);
      if ((*(void *)v17 & 0x8000000000000000) != 0)
      {
        uint64_t v346 = *(void (**)(void))(v155 + 24);
        int v347 = *(ValueMetadata **)(v155 + 40);
        unsigned int v348 = v430;
        uint64_t v349 = (uint64_t)v431;
        uint64_t v435 = (uint64_t)v346;
        uint64_t v436 = v431;
        unsigned int v437 = v347;
        uint64_t v438 = v430;
        type metadata accessor for DiskImport.DiskImportFinished();
        if (swift_dynamicCastClass())
        {
          uint64_t v435 = v349;
          uint64_t v436 = v346;
          unsigned int v437 = v348;
          uint64_t v438 = v347;
          type metadata accessor for PersistenceTrigger.AffectedItemJobs();
          sub_24DCCAD88();
          swift_allocObject();
          uint64_t v350 = sub_24DCC9C58();
          unsigned int v352 = v351;
          uint64_t v353 = (uint64_t)v424;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
          sub_24D566278(0x400000, (uint64_t)&unk_26FFA3160, v353, v352);
          uint64_t v171 = sub_24D785484(v350);
          swift_release();
LABEL_98:
          (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v155);
          return v171;
        }
      }
      else
      {
        uint64_t v172 = *(void (**)(void))(v155 + 24);
        uint64_t v173 = *(ValueMetadata **)(v155 + 40);
        uint64_t v174 = v430;
        uint64_t v435 = (uint64_t)v172;
        uint64_t v436 = v431;
        unsigned int v437 = v173;
        uint64_t v438 = v430;
        type metadata accessor for Propagation.CreateItem();
        uint64_t v175 = (unsigned char *)swift_dynamicCastClass();
        if (v175)
        {
          uint64_t v176 = v426;
          if (v175[112] == 3
            && (uint64_t v177 = &v175[*(void *)(*(void *)v175 + 656)],
                swift_beginAccess(),
                swift_getAssociatedConformanceWitness(),
                uint64_t v178 = type metadata accessor for ItemState(),
                !(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v178 - 8) + 48))(v177, 1, v178)))
          {
            uint64_t v388 = v425;
            unsigned int v389 = *(void (**)(char *, char *, uint64_t))(v425 + 16);
            unint64_t v428 = (ValueMetadata *)(v425 + 16);
            v389(v57, v177, v176);
            (*(void (**)(char *, char *, uint64_t))(v388 + 32))(v401, v57, v176);
            uint64_t v435 = (uint64_t)v431;
            uint64_t v436 = v172;
            unsigned int v437 = v174;
            uint64_t v438 = v173;
            type metadata accessor for PersistenceTrigger.AffectedItemJobs();
            sub_24DCCAD88();
            swift_allocObject();
            swift_retain();
            size_t v423 = (void (*)(void))sub_24DCC9C58();
            uint64_t v391 = v390;
            uint64_t v392 = (uint64_t)v424;
            uint64_t v393 = v401;
            v389(v424, v401, v176);
            uint64_t v394 = v425;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v425 + 56))(v392, 0, 1, v176);
            sub_24D566278(32, (uint64_t)&unk_26FFA3138, v392, v391);
            uint64_t v171 = sub_24D785484((uint64_t)v423);
            swift_release_n();
            (*(void (**)(char *, uint64_t))(v394 + 8))(v393, v176);
          }
          else
          {
            swift_retain();
            uint64_t v435 = (uint64_t)v431;
            uint64_t v436 = v172;
            unsigned int v437 = v174;
            uint64_t v438 = v173;
            type metadata accessor for PersistenceTrigger.AffectedItemJobs();
            uint64_t v171 = sub_24DCC9C98();
            swift_release_n();
          }
          goto LABEL_98;
        }
      }
      swift_release();
      goto LABEL_70;
    case 0x16u:
      uint64_t v179 = v408;
      v69(v408, (ValueMetadata *)v432, v429);
      if (*v179) {
        goto LABEL_70;
      }
      uint64_t v180 = v429;
      uint64_t v181 = *(void (**)(void))(v429 + 24);
      uint64_t v182 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v181;
      unsigned int v437 = v430;
      uint64_t v438 = v182;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      uint64_t v185 = v184;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &unk_26FFA31B0;
      uint64_t v188 = v185;
      uint64_t v189 = 0x2000000;
LABEL_52:
      uint64_t v237 = (uint64_t)v186;
      goto LABEL_53;
    case 0x17u:
      v69(v22, (ValueMetadata *)v432, v429);
      if (*v22) {
        goto LABEL_70;
      }
      uint64_t v180 = v429;
      unint64_t v428 = *(ValueMetadata **)(v429 + 24);
      unsigned int v190 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v428;
      unsigned int v437 = v430;
      uint64_t v438 = v190;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      uint64_t v192 = v191;
      uint64_t v193 = v424;
      uint64_t v194 = v425;
      uint64_t v195 = v426;
      (*(void (**)(char *, void *, uint64_t))(v425 + 16))(v424, v421, v426);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v194 + 56))(v193, 0, 1, v195);
      uint64_t v187 = &unk_26FFA30E8;
      uint64_t v188 = v192;
      uint64_t v189 = 0x20000;
LABEL_41:
      uint64_t v237 = (uint64_t)v193;
LABEL_53:
      sub_24D566278(v189, (uint64_t)v187, v237, v188);
      uint64_t v171 = sub_24D785484(v183);
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v180);
      return v171;
    case 0x1Bu:
      uint64_t v163 = v412;
      uint64_t v196 = v429;
      v69((char *)v412, (ValueMetadata *)v432, v429);
      unsigned int v197 = *(void (**)(void))(v196 + 24);
      uint64_t v198 = *(ValueMetadata **)(v196 + 40);
      uint64_t v199 = v430;
      uint64_t v200 = (uint64_t)v431;
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v197;
      unsigned int v437 = v430;
      uint64_t v438 = v198;
      uint64_t v134 = type metadata accessor for TestingOperation();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v435 = v200;
      uint64_t v436 = v197;
      unsigned int v437 = v199;
      uint64_t v438 = v198;
      uint64_t v134 = type metadata accessor for DirectionalTestingOperation();
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 7)
      {
        uint64_t v202 = v425;
        unsigned int v203 = v423;
        uint64_t v372 = v163;
        uint64_t v373 = v426;
        (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v372, v426);
        uint64_t v435 = v200;
        uint64_t v436 = v197;
        unsigned int v437 = v199;
        uint64_t v438 = v198;
        unint64_t v428 = (ValueMetadata *)type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v422 = sub_24DCC9C58();
        uint64_t v207 = v374;
        uint64_t v208 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v202 + 16))(v424, v203, v373);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v202 + 56))(v208, 0, 1, v373);
        size_t v209 = &unk_26FFA3098;
      }
      else
      {
        if (EnumCaseMultiPayload != 5) {
          goto LABEL_67;
        }
        uint64_t v202 = v425;
        unsigned int v203 = v423;
        uint64_t v204 = v163;
        uint64_t v205 = v426;
        (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v204, v426);
        uint64_t v435 = v200;
        uint64_t v436 = v197;
        unsigned int v437 = v199;
        uint64_t v438 = v198;
        unint64_t v428 = (ValueMetadata *)type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v422 = sub_24DCC9C58();
        uint64_t v207 = v206;
        uint64_t v208 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v202 + 16))(v424, v203, v205);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v202 + 56))(v208, 0, 1, v205);
        size_t v209 = &unk_26FFA3070;
      }
      sub_24D566278(0x2000, (uint64_t)v209, v208, v207);
      uint64_t v171 = sub_24D785484(v422);
      (*(void (**)(void (*)(void), uint64_t))(v202 + 8))(v203, v426);
LABEL_88:
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v196);
      return v171;
    case 0x1Du:
      uint64_t v210 = (unsigned __int8 *)v411;
      uint64_t v196 = v429;
      v69(v411, (ValueMetadata *)v432, v429);
      int v211 = *(ValueMetadata **)(v196 + 40);
      uint64_t v212 = *(void (**)(void))(v196 + 24);
      uint64_t v213 = swift_getAssociatedTypeWitness();
      uint64_t v214 = v430;
      uint64_t v215 = v426;
      uint64_t v216 = swift_getAssociatedConformanceWitness();
      uint64_t v217 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v215;
      uint64_t v436 = (void (*)(void))v213;
      uint64_t v163 = v210;
      unsigned int v437 = (ValueMetadata *)v216;
      uint64_t v438 = (ValueMetadata *)v217;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1) {
        goto LABEL_67;
      }
      uint64_t v218 = v425;
      uint64_t v219 = v423;
      (*(void (**)(void (*)(void), unsigned __int8 *, uint64_t))(v425 + 32))(v423, v163, v215);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v212;
      unsigned int v437 = v214;
      uint64_t v438 = v211;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      unint64_t v428 = (ValueMetadata *)sub_24DCC9C58();
      unint64_t v221 = v220;
      uint64_t v222 = (uint64_t)v424;
      (*(void (**)(char *, void (*)(void), uint64_t))(v218 + 16))(v424, v219, v215);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v218 + 56))(v222, 0, 1, v215);
      sub_24D566278(0x10000, (uint64_t)&unk_26FFA30C0, v222, v221);
      uint64_t v171 = sub_24D785484((uint64_t)v428);
      (*(void (**)(void (*)(void), uint64_t))(v218 + 8))(v219, v215);
      goto LABEL_88;
    case 0x1Fu:
      uint64_t v223 = v413;
      uint64_t v224 = v429;
      v69(v413, (ValueMetadata *)v432, v429);
      int v225 = *(ValueMetadata **)(v224 + 40);
      uint64_t v226 = *(void (**)(void))(v224 + 24);
      uint64_t v227 = swift_getAssociatedTypeWitness();
      uint64_t v228 = v430;
      uint64_t v229 = v426;
      uint64_t v230 = swift_getAssociatedConformanceWitness();
      uint64_t v231 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v229;
      uint64_t v436 = (void (*)(void))v227;
      unsigned int v437 = (ValueMetadata *)v230;
      uint64_t v438 = (ValueMetadata *)v231;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      uint64_t v163 = (unsigned __int8 *)&v223[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v101 = *(void (**)(uint64_t, uint64_t))(*(void *)(v134 - 8) + 8);
        v101((uint64_t)v163, v134);
        uint64_t v102 = v223;
        uint64_t v103 = v134;
LABEL_39:
        v101((uint64_t)v102, v103);
        goto LABEL_70;
      }
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v362 = v426;
        uint64_t v363 = v425;
        uint64_t v364 = *(void (**)(void (*)(void), char *, uint64_t))(v425 + 32);
        v364(v423, v223, v426);
        v364(v403, (char *)v163, v362);
        uint64_t v435 = (uint64_t)v431;
        uint64_t v436 = v226;
        unsigned int v437 = v228;
        uint64_t v438 = v225;
        uint64_t v365 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        unint64_t v428 = (ValueMetadata *)v365;
        sub_24DCCAD88();
        uint64_t v421 = *(void **)(*(void *)(v365 - 8) + 72);
        swift_allocObject();
        uint64_t v422 = sub_24DCC9C58();
        uint64_t v367 = v366;
        uint64_t v420 = *(char **)(v363 + 16);
        uint64_t v368 = (uint64_t)v424;
        ((void (*)(char *, void (*)(void), uint64_t))v420)(v424, v423, v362);
        uint64_t v369 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v363 + 56);
        v369(v368, 0, 1, v362);
        sub_24D566278(96, (uint64_t)&unk_26FFA2F80, v368, v367);
        uint64_t v421 = (void *)((char *)v421 + (void)v367);
        uint64_t v370 = (char *)v403;
        ((void (*)(uint64_t, void (*)(void), uint64_t))v420)(v368, v403, v362);
        v369(v368, 0, 1, v362);
        sub_24D566278(8, (uint64_t)&unk_26FFA2FA8, v368, v421);
        uint64_t v171 = sub_24D785484(v422);
        uint64_t v371 = *(void (**)(char *, uint64_t))(v425 + 8);
        v371(v370, v362);
        v371((char *)v423, v362);
        goto LABEL_103;
      }
      (*(void (**)(char *, uint64_t))(v425 + 8))(v223, v426);
LABEL_67:
      uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
      uint64_t v91 = (char *)v163;
      goto LABEL_68;
    case 0x22u:
      uint64_t v252 = v406;
      uint64_t v253 = v429;
      v69(v406, (ValueMetadata *)v432, v429);
      unint64_t v254 = *(ValueMetadata **)(v253 + 40);
      uint64_t v255 = *(void *)(v253 + 24);
      uint64_t v256 = swift_getAssociatedTypeWitness();
      uint64_t v257 = v430;
      uint64_t v258 = v426;
      uint64_t v259 = swift_getAssociatedConformanceWitness();
      uint64_t v260 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v258;
      uint64_t v436 = (void (*)(void))v256;
      uint64_t v261 = v252;
      unsigned int v437 = (ValueMetadata *)v259;
      uint64_t v438 = (ValueMetadata *)v260;
      uint64_t v89 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v89 - 8) + 8);
        uint64_t v91 = v252;
LABEL_48:
        uint64_t v262 = v89;
        goto LABEL_69;
      }
      uint64_t v334 = v425;
      unsigned int v335 = v402;
      (*(void (**)(char *, char *, uint64_t))(v425 + 32))(v402, v261, v258);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v259 + 64))(v258, v259) & 1) == 0)
      {
        (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v258);
        goto LABEL_70;
      }
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v255;
      unint64_t v428 = (ValueMetadata *)v255;
      unsigned int v437 = v257;
      uint64_t v438 = v254;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v336 = sub_24DCC9C58();
      uint64_t v338 = v337;
      uint64_t v339 = (uint64_t)v424;
      (*(void (**)(char *, char *, uint64_t))(v334 + 16))(v424, v335, v258);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v334 + 56))(v339, 0, 1, v258);
      sub_24D566278(0x80000, (uint64_t)&unk_26FFA3110, v339, v338);
      uint64_t v171 = sub_24D785484(v336);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v258);
LABEL_103:
      (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v429);
      return v171;
    case 0x25u:
      uint64_t v263 = v407;
      uint64_t v71 = v429;
      v69(v407, (ValueMetadata *)v432, v429);
      uint64_t v264 = *(ValueMetadata **)(v71 + 40);
      uint64_t v265 = *(void (**)(void))(v71 + 24);
      uint64_t v266 = swift_getAssociatedTypeWitness();
      uint64_t v267 = (uint64_t)v431;
      uint64_t v268 = v426;
      uint64_t v269 = swift_getAssociatedConformanceWitness();
      uint64_t v270 = swift_getAssociatedConformanceWitness();
      uint64_t v435 = v268;
      uint64_t v436 = (void (*)(void))v266;
      unsigned int v437 = (ValueMetadata *)v269;
      uint64_t v438 = (ValueMetadata *)v270;
      uint64_t v134 = type metadata accessor for ReconciliationID();
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        LODWORD(v428) = v263[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v340 = v425;
        (*(void (**)(void (*)(void), char *, uint64_t))(v425 + 32))(v423, v263, v268);
        uint64_t v435 = v267;
        uint64_t v436 = v265;
        unsigned int v437 = v430;
        uint64_t v438 = v264;
        type metadata accessor for PersistenceTrigger.AffectedItemJobs();
        sub_24DCCAD88();
        swift_allocObject();
        uint64_t v341 = sub_24DCC9C58();
        uint64_t v421 = v342;
        uint64_t v422 = v341;
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B197ED0);
        uint64_t v343 = swift_allocObject();
        *(_OWORD *)(v343 + 16) = xmmword_24DCCECE0;
        *(unsigned char *)(v343 + 32) = (_BYTE)v428;
        uint64_t v345 = v423;
        uint64_t v344 = (uint64_t)v424;
        (*(void (**)(char *, void (*)(void), uint64_t))(v340 + 16))(v424, v423, v268);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v340 + 56))(v344, 0, 1, v268);
        sub_24D566278(0x800000, v343, v344, v421);
        uint64_t v171 = sub_24D785484(v422);
        (*(void (**)(void (*)(void), uint64_t))(v340 + 8))(v345, v268);
LABEL_76:
        (*(void (**)(char *, uint64_t))(v427 + 8))(v432, v71);
        return v171;
      }
      uint64_t v90 = *(void (**)(char *, uint64_t))(*(void *)(v134 - 8) + 8);
      uint64_t v91 = v263;
LABEL_68:
      uint64_t v262 = v134;
LABEL_69:
      v90(v91, v262);
      goto LABEL_70;
    case 0x2Bu:
      uint64_t v180 = v429;
      unint64_t v428 = *(ValueMetadata **)(v429 + 24);
      uint64_t v232 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = (void (*)(void))v428;
      unsigned int v437 = v430;
      uint64_t v438 = v232;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      size_t v234 = v233;
      uint64_t v193 = v424;
      uint64_t v235 = v425;
      uint64_t v236 = v426;
      (*(void (**)(char *, void *, uint64_t))(v425 + 16))(v424, v421, v426);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v235 + 56))(v193, 0, 1, v236);
      uint64_t v187 = &unk_26FFA2FF8;
      uint64_t v188 = v234;
      uint64_t v189 = 128;
      goto LABEL_41;
    case 0x2Cu:
      uint64_t v180 = v429;
      uint64_t v238 = *(void (**)(void))(v429 + 24);
      uint64_t v239 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v238;
      unsigned int v437 = v430;
      uint64_t v438 = v239;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      unsigned int v241 = v240;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &unk_26FFA3020;
      uint64_t v188 = v241;
      uint64_t v189 = 0x200000;
      goto LABEL_52;
    case 0x2Du:
      uint64_t v180 = v429;
      unsigned int v271 = *(void (**)(void))(v429 + 24);
      uint64_t v272 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v271;
      unsigned int v437 = v430;
      uint64_t v438 = v272;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      uint64_t v274 = v273;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &unk_26FFA3048;
      uint64_t v188 = v274;
      uint64_t v189 = 2048;
      goto LABEL_52;
    case 0x2Eu:
      uint64_t v180 = v429;
      uint64_t v242 = *(void (**)(void))(v429 + 24);
      unint64_t v243 = *(ValueMetadata **)(v429 + 40);
      uint64_t v435 = (uint64_t)v431;
      uint64_t v436 = v242;
      unsigned int v437 = v430;
      uint64_t v438 = v243;
      type metadata accessor for PersistenceTrigger.AffectedItemJobs();
      sub_24DCCAD88();
      swift_allocObject();
      uint64_t v183 = sub_24DCC9C58();
      uint64_t v245 = v244;
      uint64_t v186 = v424;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v425 + 56))(v424, 1, 1, v426);
      uint64_t v187 = &unk_26FFA3188;
      uint64_t v188 = v245;
      uint64_t v189 = 0x1000000;
      goto LABEL_52;
    default:
      goto LABEL_70;
  }
}

uint64_t sub_24D56A0EC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v83 = a2;
  uint64_t v3 = (ValueMetadata *)a1[5];
  uint64_t v85 = a1[3];
  uint64_t v86 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v79 = (char *)&v75 - v5;
  uint64_t v6 = (ValueMetadata *)a1[4];
  uint64_t v7 = a1[2];
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v80 = *(void *)(v8 - 8);
  uint64_t v81 = (void (*)(void, void, void))v8;
  uint64_t v9 = MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v75 - v10;
  uint64_t v12 = *(a1 - 1);
  uint64_t v13 = MEMORY[0x270FA5388](v9);
  uint64_t v15 = (char *)&v75 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v75 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v84 = v12;
  uint64_t v19 = *(void (**)(void))(v12 + 16);
  uint64_t v21 = (char *)&v75 - v20;
  v19();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 42)
  {
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    uint64_t v33 = v83;
    *uint64_t v83 = 1;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 56))(v33, 0, 1, TupleTypeMetadata2);
    return (*(uint64_t (**)(char *, void *))(v84 + 8))(v21, a1);
  }
  if (EnumCaseMultiPayload == 27)
  {
    ((void (*)(char *, char *, void *))v19)(v15, v21, a1);
    uint64_t v35 = v85;
    uint64_t v34 = v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for TestingOperation();
    int v36 = swift_getEnumCaseMultiPayload();
    uint64_t v78 = v21;
    if (v36 == 1)
    {
      uint64_t v87 = (void (*)(void, void, void))v35;
      uint64_t v88 = v7;
      uint64_t v89 = v34;
      uint64_t v90 = (uint64_t)v6;
      uint64_t v37 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v38 = swift_getEnumCaseMultiPayload();
      if (v38 == 3)
      {
        MEMORY[0x270FA5388](v38);
        strcpy((char *)&v75 - 32, " item newName version ");
        uint64_t v39 = AssociatedTypeWitness;
        uint64_t v87 = (void (*)(void, void, void))AssociatedTypeWitness;
        uint64_t v81 = (void (*)(void, void, void))type metadata accessor for SnapshotItem();
        uint64_t v88 = sub_24DCCA3F8();
        uint64_t v89 = &type metadata for Filename;
        uint64_t v90 = MEMORY[0x263F8D9D0];
        uint64_t v40 = &v15[*(int *)(swift_getTupleTypeMetadata() + 48)];
        swift_bridgeObjectRelease();
        uint64_t v87 = (void (*)(void, void, void))v7;
        uint64_t v88 = v35;
        uint64_t v89 = v6;
        uint64_t v90 = (uint64_t)v34;
        type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
        uint64_t v41 = swift_getTupleTypeMetadata2();
        uint64_t v42 = v83;
        uint64_t v43 = (char *)v83 + *(int *)(v41 + 48);
        uint64_t v44 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, char *, uint64_t))(v4 + 32))(&v43[*(int *)(v44 + 48)], v15, v39);
        *uint64_t v42 = 0x2000;
        *uint64_t v43 = 10;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v42, 0, 1, v41);
LABEL_15:
        uint64_t v58 = sub_24DCCA3F8();
        (*(void (**)(char *, uint64_t))(*(void *)(v58 - 8) + 8))(v40, v58);
        return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
      }
    }
    else
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v35;
      uint64_t v89 = v6;
      uint64_t v90 = (uint64_t)v34;
      uint64_t v37 = type metadata accessor for DirectionalTestingOperation();
      uint64_t v52 = swift_getEnumCaseMultiPayload();
      if (v52 == 3)
      {
        MEMORY[0x270FA5388](v52);
        strcpy((char *)&v75 - 32, " item newName version ");
        uint64_t v53 = v81;
        uint64_t v87 = v81;
        type metadata accessor for SnapshotItem();
        uint64_t v88 = sub_24DCCA3F8();
        uint64_t v89 = &type metadata for Filename;
        uint64_t v90 = MEMORY[0x263F8D9D0];
        uint64_t v40 = &v15[*(int *)(swift_getTupleTypeMetadata() + 48)];
        swift_bridgeObjectRelease();
        uint64_t v87 = (void (*)(void, void, void))v7;
        uint64_t v88 = v35;
        uint64_t v89 = v6;
        uint64_t v90 = (uint64_t)v34;
        type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
        uint64_t v54 = swift_getTupleTypeMetadata2();
        uint64_t v55 = v83;
        uint64_t v56 = (char *)v83 + *(int *)(v54 + 48);
        uint64_t v57 = swift_getTupleTypeMetadata2();
        (*(void (**)(unsigned char *, char *, void))(v80 + 32))(&v56[*(int *)(v57 + 48)], v15, v53);
        *uint64_t v55 = 0x2000;
        *uint64_t v56 = 10;
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v55, 0, 1, v54);
        goto LABEL_15;
      }
    }
    (*(void (**)(char *, uint64_t))(*(void *)(v37 - 8) + 8))(v15, v37);
    uint64_t v21 = v78;
    goto LABEL_17;
  }
  if (EnumCaseMultiPayload != 13)
  {
LABEL_17:
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v6;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    uint64_t v59 = swift_getTupleTypeMetadata2();
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v83, 1, 1, v59);
    return (*(uint64_t (**)(char *, void *))(v84 + 8))(v21, a1);
  }
  uint64_t v76 = v4;
  ((void (*)(char *, char *, void *))v19)(v18, v21, a1);
  uint64_t v78 = v21;
  uint64_t v23 = v81;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v77 = v6;
  uint64_t v25 = v85;
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = swift_getAssociatedConformanceWitness();
  uint64_t v87 = v23;
  uint64_t v88 = v26;
  uint64_t v89 = (ValueMetadata *)AssociatedConformanceWitness;
  uint64_t v90 = v27;
  uint64_t v28 = type metadata accessor for ReconciliationID();
  uint64_t v29 = swift_getTupleTypeMetadata2();
  if (v18[*(int *)(v29 + 48)] <= 2u)
  {
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v18, v28);
    (*(void (**)(char *, void *))(v84 + 8))(v78, a1);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v25;
    uint64_t v89 = v77;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
    uint64_t v30 = swift_getTupleTypeMetadata2();
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v83, 1, 1, v30);
  }
  char v45 = v18[*(int *)(v29 + 48)];
  uint64_t v46 = v77;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v47 = v76;
    uint64_t v48 = v18;
    uint64_t v49 = AssociatedTypeWitness;
    uint64_t v81 = *(void (**)(void, void, void))(v76 + 32);
    v81(v79, v48, AssociatedTypeWitness);
    uint64_t v51 = v85;
    uint64_t v50 = (uint64_t)v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v46;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for Job();
    sub_24DB16820(v45);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v51;
    uint64_t v89 = v46;
    uint64_t v90 = v50;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v51;
      uint64_t v89 = v46;
      uint64_t v90 = v50;
      type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
      uint64_t v67 = swift_getTupleTypeMetadata2();
      uint64_t v68 = v83;
      uint64_t v69 = (char *)v83 + *(int *)(v67 + 48);
      *uint64_t v83 = 262400;
      uint64_t v70 = &v69[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      *uint64_t v69 = v45;
      v81(v70, v79, v49);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v67 - 8) + 56))(v68, 0, 1, v67);
      return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v79, v49);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v51;
    uint64_t v89 = v46;
    uint64_t v90 = v50;
  }
  else
  {
    uint64_t v60 = v80;
    uint64_t v61 = *(char **)(v80 + 32);
    uint64_t v62 = v18;
    uint64_t v63 = v81;
    uint64_t AssociatedTypeWitness = v80 + 32;
    uint64_t v79 = v61;
    ((void (*)(char *, char *, void))v61)(v11, v62, v81);
    uint64_t v65 = v85;
    uint64_t v64 = (uint64_t)v86;
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v85;
    uint64_t v89 = v46;
    uint64_t v90 = (uint64_t)v86;
    type metadata accessor for Job();
    sub_24DB16820(v45);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v65;
    uint64_t v89 = v46;
    uint64_t v90 = v64;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastMetatype())
    {
      uint64_t v87 = (void (*)(void, void, void))v7;
      uint64_t v88 = v65;
      uint64_t v89 = v46;
      uint64_t v90 = v64;
      type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
      uint64_t v71 = swift_getTupleTypeMetadata2();
      uint64_t v72 = v83;
      uint64_t v73 = (char *)v83 + *(int *)(v71 + 48);
      *uint64_t v83 = 262400;
      uint64_t v74 = &v73[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      *uint64_t v73 = v45;
      ((void (*)(char *, char *, void))v79)(v74, v11, v63);
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v71 - 8) + 56))(v72, 0, 1, v71);
      return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
    }
    (*(void (**)(char *, void (*)(void, void, void)))(v60 + 8))(v11, v63);
    uint64_t v87 = (void (*)(void, void, void))v7;
    uint64_t v88 = v65;
    uint64_t v89 = v46;
    uint64_t v90 = v64;
  }
  type metadata accessor for PersistenceTrigger.AffectedGlobalJobs();
  uint64_t v66 = swift_getTupleTypeMetadata2();
  (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56))(v83, 1, 1, v66);
  return (*(uint64_t (**)(char *, void *))(v84 + 8))(v78, a1);
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedItemJobs()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PersistenceTrigger.AffectedGlobalJobs()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D56ADFC()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_getTupleTypeLayout2();
    uint64_t v5 = &v4;
    uint64_t result = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v6 = &v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *sub_24D56AF18(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~(unint64_t)v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  size_t v13 = v12 + 1;
  if ((v10 | (unint64_t)v6) > 7 || ((*(_DWORD *)(v9 + 80) | v6) & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + (((v10 | v6) + 16) & ~(v10 | v6)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v12];
    unsigned int v18 = v17 - 2;
    if (v17 >= 2)
    {
      if (v12 <= 3) {
        uint64_t v19 = v12;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          if (v12 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_23;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          if (v12 >= 4) {
            goto LABEL_29;
          }
          goto LABEL_23;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v12 < 4) {
            goto LABEL_23;
          }
          goto LABEL_29;
        case 4:
          int v20 = *(_DWORD *)a2;
          if (v12 < 4)
          {
LABEL_23:
            unsigned int v17 = (v20 | (v18 << (8 * v12))) + 2;
            break;
          }
LABEL_29:
          unsigned int v17 = v20 + 2;
          if (v17 == 1) {
            goto LABEL_30;
          }
          goto LABEL_25;
        default:
          break;
      }
    }
    if (v17 == 1)
    {
LABEL_30:
      *(unsigned char *)a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v10 + 1) & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
      *((unsigned char *)a1 + v12) = 1;
    }
    else
    {
LABEL_25:
      if (v17)
      {
        memcpy(a1, a2, v13);
      }
      else
      {
        *(unsigned char *)a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)a1 + v6 + 1) & ~(unint64_t)v6, (unint64_t)&a2[v6 + 1] & ~(unint64_t)v6, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 0;
      }
    }
  }
  return a1;
}

uint64_t sub_24D56B1E4(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v3 = *(unsigned __int8 *)(v16 + 80);
  unint64_t v4 = ((v3 + 1) & ~v3) + *(void *)(v16 + 64);
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(result - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = ((v7 + 1) & ~v7) + *(void *)(v6 + 64);
  if (v8 <= v4) {
    unint64_t v8 = v4;
  }
  unsigned int v9 = a1[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a1;
        goto LABEL_12;
      case 2:
        int v12 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v12 = *(_DWORD *)a1;
LABEL_12:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v6 + 8);
    return v15((unint64_t)&a1[v7 + 1] & ~v7, result);
  }
  else if (!v9)
  {
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14((unint64_t)&a1[v3 + 1] & ~v3, AssociatedTypeWitness);
  }
  return result;
}

unsigned char *sub_24D56B454(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else if (v13)
  {
    memcpy(a1, a2, v12 + 1);
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

unsigned __int8 *sub_24D56B6C0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v6 = ((v5 + 1) & ~v5) + *(void *)(v4 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 64);
    if (((v9 + 1) & (unint64_t)~v9) + v10 <= v6) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = ((v9 + 1) & ~v9) + v10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v5;
    uint64_t v17 = ~v9;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v9 + 1] & v17, v7);
    }
    else if (!v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))((unint64_t)&a1[v5 + 1] & v16, AssociatedTypeWitness);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_32;
          }
          goto LABEL_38;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_32:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_38:
          unsigned int v18 = v21 + 2;
          if (v18 == 1) {
            goto LABEL_39;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_39:
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))((unint64_t)&a1[v9 + 1] & v17, (unint64_t)&a2[v9 + 1] & v17, v7);
      a1[v11] = 1;
    }
    else
    {
LABEL_34:
      if (v18)
      {
        memcpy(a1, a2, v11 + 1);
      }
      else
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 16))((unint64_t)&a1[v5 + 1] & v16, (unint64_t)&a2[v5 + 1] & v16, AssociatedTypeWitness);
        a1[v11] = 0;
      }
    }
  }
  return a1;
}

unsigned char *sub_24D56BA4C(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = ((v6 + 1) & ~v6) + *(void *)(v5 + 64);
  uint64_t v8 = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v10 + 1) & ~v10;
  if (v11 + *(void *)(v9 + 64) <= v7) {
    unint64_t v12 = v7;
  }
  else {
    unint64_t v12 = v11 + *(void *)(v9 + 64);
  }
  unsigned int v13 = a2[v12];
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *a2;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)a2;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 32))((unint64_t)&a1[v10 + 1] & ~v10, (unint64_t)&a2[v10 + 1] & ~v10, v8);
    a1[v12] = 1;
  }
  else if (v13)
  {
    memcpy(a1, a2, v12 + 1);
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((unint64_t)&a1[v6 + 1] & ~v6, (unint64_t)&a2[v6 + 1] & ~v6, AssociatedTypeWitness);
    a1[v12] = 0;
  }
  return a1;
}

unsigned __int8 *sub_24D56BCB8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v4 = *(void *)(AssociatedTypeWitness - 8);
    uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
    unint64_t v6 = ((v5 + 1) & ~v5) + *(void *)(v4 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v10 = *(void *)(v8 + 64);
    if (((v9 + 1) & (unint64_t)~v9) + v10 <= v6) {
      unint64_t v11 = v6;
    }
    else {
      unint64_t v11 = ((v9 + 1) & ~v9) + v10;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 2;
    if (v12 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          if (v11 >= 4) {
            goto LABEL_17;
          }
          goto LABEL_15;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          if (v11 < 4) {
            goto LABEL_15;
          }
          goto LABEL_17;
        case 4:
          int v15 = *(_DWORD *)a1;
          if (v11 < 4) {
LABEL_15:
          }
            unsigned int v12 = (v15 | (v13 << (8 * v11))) + 2;
          else {
LABEL_17:
          }
            unsigned int v12 = v15 + 2;
          break;
        default:
          break;
      }
    }
    uint64_t v16 = ~v5;
    uint64_t v17 = ~v9;
    if (v12 == 1)
    {
      (*(void (**)(unint64_t, uint64_t))(v8 + 8))((unint64_t)&a1[v9 + 1] & v17, v7);
    }
    else if (!v12)
    {
      (*(void (**)(unint64_t, uint64_t))(v4 + 8))((unint64_t)&a1[v5 + 1] & v16, AssociatedTypeWitness);
    }
    unsigned int v18 = a2[v11];
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v11 <= 3) {
        uint64_t v20 = v11;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 2:
          int v21 = *(unsigned __int16 *)a2;
          if (v11 >= 4) {
            goto LABEL_38;
          }
          goto LABEL_32;
        case 3:
          int v21 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          if (v11 < 4) {
            goto LABEL_32;
          }
          goto LABEL_38;
        case 4:
          int v21 = *(_DWORD *)a2;
          if (v11 < 4)
          {
LABEL_32:
            unsigned int v18 = (v21 | (v19 << (8 * v11))) + 2;
            break;
          }
LABEL_38:
          unsigned int v18 = v21 + 2;
          if (v18 == 1) {
            goto LABEL_39;
          }
          goto LABEL_34;
        default:
          break;
      }
    }
    if (v18 == 1)
    {
LABEL_39:
      *a1 = *a2;
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((unint64_t)&a1[v9 + 1] & v17, (unint64_t)&a2[v9 + 1] & v17, v7);
      a1[v11] = 1;
    }
    else
    {
LABEL_34:
      if (v18)
      {
        memcpy(a1, a2, v11 + 1);
      }
      else
      {
        *a1 = *a2;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v4 + 32))((unint64_t)&a1[v5 + 1] & v16, (unint64_t)&a2[v5 + 1] & v16, AssociatedTypeWitness);
        a1[v11] = 0;
      }
    }
  }
  return a1;
}

uint64_t sub_24D56C044(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (v7 <= v5) {
    unint64_t v8 = v5;
  }
  else {
    unint64_t v8 = v7;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_23;
  }
  unint64_t v9 = v8 + 1;
  char v10 = 8 * (v8 + 1);
  if ((v8 + 1) <= 3)
  {
    unsigned int v13 = ((a2 + ~(-1 << v10) - 253) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      unsigned int v15 = *((unsigned __int8 *)a1 + v8);
      if (v15 >= 3) {
        return (v15 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v9 | v14) + 254;
}

void sub_24D56C270(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  uint64_t v8 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v9 = ((*(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + *(void *)(v8 + 64);
  if (v9 <= v7) {
    unint64_t v9 = v7;
  }
  size_t v10 = v9 + 1;
  if (a3 < 0xFE)
  {
    int v11 = 0;
  }
  else if (v10 <= 3)
  {
    unsigned int v14 = ((a3 + ~(-1 << (8 * v10)) - 253) >> (8 * v10)) + 1;
    if (HIWORD(v14))
    {
      int v11 = 4;
    }
    else if (v14 >= 0x100)
    {
      int v11 = 2;
    }
    else
    {
      int v11 = v14 > 1;
    }
  }
  else
  {
    int v11 = 1;
  }
  if (a2 > 0xFD)
  {
    unsigned int v12 = a2 - 254;
    if (v10 < 4)
    {
      int v13 = (v12 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v10] = v13;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v13;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x24D56C510);
      case 4:
        *(_DWORD *)&a1[v10] = v13;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v11)
    {
      case 1:
        a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v9] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24D56C538(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = ((*(unsigned __int8 *)(v2 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80)) + *(void *)(v2 + 64);
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  if (v5 <= v3) {
    unint64_t v5 = v3;
  }
  uint64_t result = a1[v5];
  if (result >= 2)
  {
    if (v5 <= 3) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_12;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_12;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_12;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_12:
        unsigned int v9 = (v8 | ((result - 2) << (8 * v5))) + 2;
        unsigned int v10 = v8 + 2;
        if (v5 >= 4) {
          uint64_t result = v10;
        }
        else {
          uint64_t result = v9;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_24D56C6E0(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = ((*(unsigned __int8 *)(v4 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)) + *(void *)(v4 + 64);
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = ((*(unsigned __int8 *)(v6 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)) + *(void *)(v6 + 64);
  if (v7 <= v5) {
    size_t v8 = v5;
  }
  else {
    size_t v8 = v7;
  }
  if (a2 > 1)
  {
    unsigned int v9 = a2 - 2;
    if (v8 < 4)
    {
      unsigned int v10 = v9 >> (8 * v8);
      int v11 = v9 & ~(-1 << (8 * v8));
      a1[v8] = v10 + 2;
      bzero(a1, v8);
      if (v8 == 3)
      {
        *(_WORD *)a1 = v11;
        a1[2] = BYTE2(v11);
      }
      else if (v8 == 2)
      {
        *(_WORD *)a1 = v11;
      }
      else
      {
        *a1 = v11;
      }
    }
    else
    {
      a1[v8] = 2;
      bzero(a1, v8);
      *(_DWORD *)a1 = v9;
    }
  }
  else
  {
    a1[v8] = a2;
  }
}

uint64_t sub_24D56C88C()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = sub_24DCCA3F8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_24D56C958(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v8 = *(void *)(v5 + 64);
  }
  else {
    size_t v8 = *(void *)(v5 + 64) + 1;
  }
  int v9 = v6 & 0x100000;
  if (v7 > 7 || v9 != 0 || ((v7 + 16) & ~v7) + v8 > 0x18)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    uint64_t v13 = AssociatedTypeWitness;
    *a1 = *a2;
    unsigned int v14 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v15 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    *unsigned int v14 = *v15;
    uint64_t v16 = (void *)(((unint64_t)v14 + v7 + 8) & ~v7);
    uint64_t v17 = (const void *)(((unint64_t)v15 + v7 + 8) & ~v7);
    unsigned int v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_bridgeObjectRetain();
    if (v18(v17, 1, v13))
    {
      memcpy(v16, v17, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v16, v17, v13);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v16, 0, 1, v13);
    }
  }
  return a1;
}

uint64_t sub_24D56CB04(uint64_t a1)
{
  unint64_t v1 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v4 = (v1 + *(unsigned __int8 *)(v3 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = v3;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, AssociatedTypeWitness);
  if (!result)
  {
    int v6 = *(uint64_t (**)(unint64_t, uint64_t))(v7 + 8);
    return v6(v4, AssociatedTypeWitness);
  }
  return result;
}

void *sub_24D56CBF8(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  unsigned int v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48);
  swift_bridgeObjectRetain();
  if (v10(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v11 = *(void *)(v6 + 64);
    }
    else {
      size_t v11 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_24D56CD44(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  unsigned int v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  LODWORD(v4) = v10(v8, 1, AssociatedTypeWitness);
  int v11 = v10(v9, 1, AssociatedTypeWitness);
  if (v4)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v12 = *(_DWORD *)(v6 + 84);
    size_t v13 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    int v15 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v14 = v6 + 8;
    v15(v8, AssociatedTypeWitness);
    int v12 = *(_DWORD *)(v14 + 76);
    size_t v13 = *(void *)(v14 + 56);
  }
  if (v12) {
    size_t v16 = v13;
  }
  else {
    size_t v16 = v13 + 1;
  }
  memcpy(v8, v9, v16);
  return a1;
}

void *sub_24D56CF04(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (const void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(v9, 1, AssociatedTypeWitness))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v10 = *(void *)(v6 + 64);
    }
    else {
      size_t v10 = *(void *)(v6 + 64) + 1;
    }
    memcpy(v8, v9, v10);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
  }
  return a1;
}

void *sub_24D56D040(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v4 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v3 = *v4;
  swift_bridgeObjectRelease();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  size_t v8 = (void *)(((unint64_t)v3 + v7 + 8) & ~v7);
  int v9 = (void *)(((unint64_t)v4 + v7 + 8) & ~v7);
  size_t v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8, 1, AssociatedTypeWitness);
  int v12 = v10(v9, 1, AssociatedTypeWitness);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(v8, v9, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v8, 0, 1, AssociatedTypeWitness);
      return a1;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(v8, v9, AssociatedTypeWitness);
      return a1;
    }
    size_t v16 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v15 = v6 + 8;
    v16(v8, AssociatedTypeWitness);
    int v13 = *(_DWORD *)(v15 + 76);
    size_t v14 = *(void *)(v15 + 56);
  }
  if (v13) {
    size_t v17 = v14;
  }
  else {
    size_t v17 = v14 + 1;
  }
  memcpy(v8, v9, v17);
  return a1;
}

uint64_t sub_24D56D1F8(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  if (!v6) {
    ++v10;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_28;
  }
  uint64_t v11 = v10 + ((v9 + 16) & ~v9);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((a2 - v8 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      size_t v17 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
      if ((v7 & 0x80000000) != 0)
      {
        unsigned int v19 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v17 + v9 + 8) & ~v9);
        if (v19 >= 2) {
          return v19 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        unint64_t v18 = *v17;
        if (v18 >= 0xFFFFFFFF) {
          LODWORD(v18) = -1;
        }
        return (v18 + 1);
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v11 | v16) + 1;
}

void sub_24D56D3FC(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v9;
  }
  if (v8) {
    size_t v12 = *(void *)(v7 + 64);
  }
  else {
    size_t v12 = *(void *)(v7 + 64) + 1;
  }
  size_t v13 = ((v10 + 16) & ~v10) + v12;
  if (a3 <= v11) {
    goto LABEL_17;
  }
  if (v13 <= 3)
  {
    unsigned int v14 = ((a3 - v11 + ~(-1 << (8 * v13))) >> (8 * v13)) + 1;
    if (HIWORD(v14))
    {
      int v6 = 4;
      if (v11 >= a2) {
        goto LABEL_25;
      }
      goto LABEL_18;
    }
    if (v14 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v14 > 1;
    }
LABEL_17:
    if (v11 >= a2) {
      goto LABEL_25;
    }
    goto LABEL_18;
  }
  int v6 = 1;
  if (v11 >= a2)
  {
LABEL_25:
    switch(v6)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_30;
      case 3:
        goto LABEL_60;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        goto LABEL_29;
      default:
LABEL_29:
        if (a2)
        {
LABEL_30:
          unint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
          if ((v9 & 0x80000000) != 0)
          {
            uint64_t v20 = (unsigned char *)(((unint64_t)v18 + v10 + 8) & ~v10);
            if (v9 >= a2)
            {
              uint64_t v24 = *(void (**)(unint64_t, void))(v7 + 56);
              v24(((unint64_t)v18 + v10 + 8) & ~v10, a2 + 1);
            }
            else
            {
              if (v12 <= 3) {
                int v21 = ~(-1 << (8 * v12));
              }
              else {
                int v21 = -1;
              }
              if (v12)
              {
                int v22 = v21 & (~v9 + a2);
                if (v12 <= 3) {
                  int v23 = v12;
                }
                else {
                  int v23 = 4;
                }
                bzero(v20, v12);
                switch(v23)
                {
                  case 2:
                    *(_WORD *)uint64_t v20 = v22;
                    break;
                  case 3:
                    *(_WORD *)uint64_t v20 = v22;
                    v20[2] = BYTE2(v22);
                    break;
                  case 4:
                    *(_DWORD *)uint64_t v20 = v22;
                    break;
                  default:
                    *uint64_t v20 = v22;
                    break;
                }
              }
            }
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v19 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v19 = a2 - 1;
            }
            *unint64_t v18 = v19;
          }
        }
        break;
    }
    return;
  }
LABEL_18:
  unsigned int v15 = ~v11 + a2;
  if (v13 < 4)
  {
    int v16 = (v15 >> (8 * v13)) + 1;
    if (v13)
    {
      int v17 = v15 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v17;
        a1[2] = BYTE2(v17);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v17;
      }
      else
      {
        *a1 = v17;
      }
    }
  }
  else
  {
    bzero(a1, ((v10 + 16) & ~v10) + v12);
    *(_DWORD *)a1 = v15;
    int v16 = 1;
  }
  switch(v6)
  {
    case 1:
      a1[v13] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v16;
      break;
    case 3:
LABEL_60:
      __break(1u);
      JUMPOUT(0x24D56D730);
    case 4:
      *(_DWORD *)&a1[v13] = v16;
      break;
    default:
      return;
  }
}

uint64_t sub_24D56D768()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v8 = swift_getAssociatedConformanceWitness();
  uint64_t result = type metadata accessor for ReconciliationID();
  if (v1 <= 0x3F)
  {
    uint64_t v9 = *(void *)(result - 8) + 64;
    uint64_t v2 = v9;
    swift_getTupleTypeLayout2();
    uint64_t v10 = &v4;
    swift_getTupleTypeLayout2();
    unsigned int v11 = &v3;
    uint64_t v12 = v2;
    uint64_t v13 = v2;
    uint64_t v14 = v2;
    uint64_t v15 = v2;
    uint64_t v16 = v2;
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *sub_24D56D8F0(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  size_t v12 = v11 + 1;
  int v13 = *(_DWORD *)(v8 + 80) | *(_DWORD *)(v5 + 80);
  if ((v13 & 0x1000F8) != 0 || v12 > 0x18)
  {
    uint64_t v15 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v15 + (((v13 & 0xF8 | 7u) + 16) & ~(unint64_t)(v13 & 0xF8 | 7u)));
    swift_retain();
  }
  else
  {
    unsigned int v17 = a2[v11];
    unsigned int v18 = v17 - 8;
    if (v17 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v19 = v11;
      }
      else {
        uint64_t v19 = 4;
      }
      switch(v19)
      {
        case 1:
          int v20 = *a2;
          goto LABEL_23;
        case 2:
          int v20 = *(unsigned __int16 *)a2;
          goto LABEL_23;
        case 3:
          int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_23;
        case 4:
          int v20 = *(_DWORD *)a2;
LABEL_23:
          int v21 = (v20 | (v18 << (8 * v11))) + 8;
          unsigned int v17 = v20 + 8;
          if (v11 < 4) {
            unsigned int v17 = v21;
          }
          break;
        default:
          break;
      }
    }
    switch(v17)
    {
      case 0u:
        unsigned int v22 = a2[v9];
        unsigned int v23 = v22 - 2;
        if (v22 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v24 = v9;
          }
          else {
            uint64_t v24 = 4;
          }
          switch(v24)
          {
            case 1:
              int v25 = *a2;
              goto LABEL_78;
            case 2:
              int v25 = *(unsigned __int16 *)a2;
              goto LABEL_78;
            case 3:
              int v25 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_78;
            case 4:
              int v25 = *(_DWORD *)a2;
LABEL_78:
              int v54 = (v25 | (v23 << (8 * v9))) + 2;
              unsigned int v22 = v25 + 2;
              if (v9 < 4) {
                unsigned int v22 = v54;
              }
              break;
            default:
              break;
          }
        }
        BOOL v55 = v22 == 1;
        if (v22 == 1)
        {
          uint64_t v56 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v56 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v56);
        *((unsigned char *)a1 + v9) = v55;
        *((unsigned char *)a1 + v11) = 0;
        break;
      case 1u:
        unsigned int v26 = a2[v9];
        unsigned int v27 = v26 - 2;
        if (v26 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v28 = v9;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              int v29 = *a2;
              goto LABEL_87;
            case 2:
              int v29 = *(unsigned __int16 *)a2;
              goto LABEL_87;
            case 3:
              int v29 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_87;
            case 4:
              int v29 = *(_DWORD *)a2;
LABEL_87:
              int v57 = (v29 | (v27 << (8 * v9))) + 2;
              unsigned int v26 = v29 + 2;
              if (v9 < 4) {
                unsigned int v26 = v57;
              }
              break;
            default:
              break;
          }
        }
        BOOL v58 = v26 == 1;
        if (v26 == 1)
        {
          uint64_t v59 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v59 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v59);
        *((unsigned char *)a1 + v9) = v58;
        uint64_t v60 = (void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v61 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v60 = *v61;
        v60[1] = v61[1];
        char v62 = 1;
        goto LABEL_102;
      case 2u:
        unsigned int v30 = a2[v9];
        unsigned int v31 = v30 - 2;
        if (v30 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v32 = v9;
          }
          else {
            uint64_t v32 = 4;
          }
          switch(v32)
          {
            case 1:
              int v33 = *a2;
              goto LABEL_96;
            case 2:
              int v33 = *(unsigned __int16 *)a2;
              goto LABEL_96;
            case 3:
              int v33 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_96;
            case 4:
              int v33 = *(_DWORD *)a2;
LABEL_96:
              int v63 = (v33 | (v31 << (8 * v9))) + 2;
              unsigned int v30 = v33 + 2;
              if (v9 < 4) {
                unsigned int v30 = v63;
              }
              break;
            default:
              break;
          }
        }
        BOOL v64 = v30 == 1;
        if (v30 == 1)
        {
          uint64_t v65 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v65 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v65);
        *((unsigned char *)a1 + v9) = v64;
        uint64_t v66 = (void *)(((unint64_t)a1 + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
        uint64_t v67 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v66 = *v67;
        v66[1] = v67[1];
        char v62 = 2;
LABEL_102:
        *((unsigned char *)a1 + v11) = v62;
        swift_bridgeObjectRetain();
        break;
      case 3u:
        unsigned int v34 = a2[v9];
        unsigned int v35 = v34 - 2;
        if (v34 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v36 = v9;
          }
          else {
            uint64_t v36 = 4;
          }
          switch(v36)
          {
            case 1:
              int v37 = *a2;
              goto LABEL_106;
            case 2:
              int v37 = *(unsigned __int16 *)a2;
              goto LABEL_106;
            case 3:
              int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_106;
            case 4:
              int v37 = *(_DWORD *)a2;
LABEL_106:
              int v68 = (v37 | (v35 << (8 * v9))) + 2;
              unsigned int v34 = v37 + 2;
              if (v9 < 4) {
                unsigned int v34 = v68;
              }
              break;
            default:
              break;
          }
        }
        BOOL v69 = v34 == 1;
        if (v34 == 1)
        {
          uint64_t v70 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v70 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v70);
        *((unsigned char *)a1 + v9) = v69;
        *((unsigned char *)a1 + v11) = 3;
        break;
      case 4u:
        unsigned int v38 = a2[v9];
        unsigned int v39 = v38 - 2;
        if (v38 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v40 = v9;
          }
          else {
            uint64_t v40 = 4;
          }
          switch(v40)
          {
            case 1:
              int v41 = *a2;
              goto LABEL_115;
            case 2:
              int v41 = *(unsigned __int16 *)a2;
              goto LABEL_115;
            case 3:
              int v41 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_115;
            case 4:
              int v41 = *(_DWORD *)a2;
LABEL_115:
              int v71 = (v41 | (v39 << (8 * v9))) + 2;
              unsigned int v38 = v41 + 2;
              if (v9 < 4) {
                unsigned int v38 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v38 == 1;
        if (v38 == 1)
        {
          uint64_t v73 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v73 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v73);
        *((unsigned char *)a1 + v9) = v72;
        *((unsigned char *)a1 + v11) = 4;
        break;
      case 5u:
        unsigned int v42 = a2[v9];
        unsigned int v43 = v42 - 2;
        if (v42 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v44 = v9;
          }
          else {
            uint64_t v44 = 4;
          }
          switch(v44)
          {
            case 1:
              int v45 = *a2;
              goto LABEL_124;
            case 2:
              int v45 = *(unsigned __int16 *)a2;
              goto LABEL_124;
            case 3:
              int v45 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_124;
            case 4:
              int v45 = *(_DWORD *)a2;
LABEL_124:
              int v74 = (v45 | (v43 << (8 * v9))) + 2;
              unsigned int v42 = v45 + 2;
              if (v9 < 4) {
                unsigned int v42 = v74;
              }
              break;
            default:
              break;
          }
        }
        BOOL v75 = v42 == 1;
        if (v42 == 1)
        {
          uint64_t v76 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v76 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v76);
        *((unsigned char *)a1 + v9) = v75;
        *((unsigned char *)a1 + v11) = 5;
        break;
      case 6u:
        unsigned int v46 = a2[v9];
        unsigned int v47 = v46 - 2;
        if (v46 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v48 = v9;
          }
          else {
            uint64_t v48 = 4;
          }
          switch(v48)
          {
            case 1:
              int v49 = *a2;
              goto LABEL_133;
            case 2:
              int v49 = *(unsigned __int16 *)a2;
              goto LABEL_133;
            case 3:
              int v49 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_133;
            case 4:
              int v49 = *(_DWORD *)a2;
LABEL_133:
              int v77 = (v49 | (v47 << (8 * v9))) + 2;
              unsigned int v46 = v49 + 2;
              if (v9 < 4) {
                unsigned int v46 = v77;
              }
              break;
            default:
              break;
          }
        }
        BOOL v78 = v46 == 1;
        if (v46 == 1)
        {
          uint64_t v79 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v79 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v79);
        *((unsigned char *)a1 + v9) = v78;
        *((unsigned char *)a1 + v11) = 6;
        break;
      case 7u:
        unsigned int v50 = a2[v9];
        unsigned int v51 = v50 - 2;
        if (v50 >= 2)
        {
          if (v9 <= 3) {
            uint64_t v52 = v9;
          }
          else {
            uint64_t v52 = 4;
          }
          switch(v52)
          {
            case 1:
              int v53 = *a2;
              goto LABEL_142;
            case 2:
              int v53 = *(unsigned __int16 *)a2;
              goto LABEL_142;
            case 3:
              int v53 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_142;
            case 4:
              int v53 = *(_DWORD *)a2;
LABEL_142:
              int v80 = (v53 | (v51 << (8 * v9))) + 2;
              unsigned int v50 = v53 + 2;
              if (v9 < 4) {
                unsigned int v50 = v80;
              }
              break;
            default:
              break;
          }
        }
        BOOL v81 = v50 == 1;
        if (v50 == 1)
        {
          uint64_t v82 = v7;
        }
        else
        {
          uint64_t v8 = v5;
          uint64_t v82 = AssociatedTypeWitness;
        }
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v82);
        *((unsigned char *)a1 + v9) = v81;
        *((unsigned char *)a1 + v11) = 7;
        break;
      default:
        memcpy(a1, a2, v12);
        break;
    }
  }
  return a1;
}

uint64_t sub_24D56E1B4(unsigned __int8 *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v32 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = *(void *)(v32 + 64);
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*(void *)(result - 8) + 64);
  if (v6 <= v3) {
    unint64_t v6 = v3;
  }
  unint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
  if (v7 <= v6 + 1) {
    unint64_t v7 = v6 + 1;
  }
  unsigned int v8 = a1[v7];
  unsigned int v9 = v8 - 8;
  if (v8 >= 8)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *a1;
        goto LABEL_14;
      case 2:
        int v11 = *(unsigned __int16 *)a1;
        goto LABEL_14;
      case 3:
        int v11 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_14;
      case 4:
        int v11 = *(_DWORD *)a1;
LABEL_14:
        int v12 = (v11 | (v9 << (8 * v7))) + 8;
        unsigned int v8 = v11 + 8;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  switch(v8)
  {
    case 0u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v15 = v6;
        }
        else {
          uint64_t v15 = 4;
        }
        switch(v15)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 1u:
      unsigned int v16 = a1[v6];
      unsigned int v17 = v16 - 2;
      if (v16 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v18 = v6;
        }
        else {
          uint64_t v18 = 4;
        }
        switch(v18)
        {
          case 1:
            goto LABEL_32;
          case 2:
            goto LABEL_71;
          case 3:
            goto LABEL_72;
          case 4:
            goto LABEL_73;
          default:
            goto LABEL_76;
        }
      }
      goto LABEL_76;
    case 2u:
      unsigned int v16 = a1[v6];
      unsigned int v17 = v16 - 2;
      if (v16 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v19 = v6;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
LABEL_32:
            int v20 = *a1;
            goto LABEL_74;
          case 2:
LABEL_71:
            int v20 = *(unsigned __int16 *)a1;
            goto LABEL_74;
          case 3:
LABEL_72:
            int v20 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_74;
          case 4:
LABEL_73:
            int v20 = *(_DWORD *)a1;
LABEL_74:
            int v30 = (v20 | (v17 << (8 * v6))) + 2;
            unsigned int v16 = v20 + 2;
            if (v6 < 4) {
              unsigned int v16 = v30;
            }
            break;
          default:
            break;
        }
      }
LABEL_76:
      if (v16 == 1) {
        uint64_t v31 = *(void *)(result - 8);
      }
      else {
        uint64_t v31 = v32;
      }
      if (v16 != 1) {
        uint64_t v5 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned __int8 *, uint64_t))(v31 + 8))(a1, v5);
      return swift_bridgeObjectRelease();
    case 3u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v21 = v6;
        }
        else {
          uint64_t v21 = 4;
        }
        switch(v21)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 4u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v22 = v6;
        }
        else {
          uint64_t v22 = 4;
        }
        switch(v22)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 5u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v23 = v6;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 6u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v24 = v6;
        }
        else {
          uint64_t v24 = 4;
        }
        switch(v24)
        {
          case 1:
            goto LABEL_58;
          case 2:
            goto LABEL_59;
          case 3:
            goto LABEL_60;
          case 4:
            goto LABEL_61;
          default:
            goto LABEL_64;
        }
      }
      goto LABEL_64;
    case 7u:
      unsigned int v13 = a1[v6];
      unsigned int v14 = v13 - 2;
      if (v13 >= 2)
      {
        if (v6 <= 3) {
          uint64_t v25 = v6;
        }
        else {
          uint64_t v25 = 4;
        }
        switch(v25)
        {
          case 1:
LABEL_58:
            int v26 = *a1;
            goto LABEL_62;
          case 2:
LABEL_59:
            int v26 = *(unsigned __int16 *)a1;
            goto LABEL_62;
          case 3:
LABEL_60:
            int v26 = *(unsigned __int16 *)a1 | (a1[2] << 16);
            goto LABEL_62;
          case 4:
LABEL_61:
            int v26 = *(_DWORD *)a1;
LABEL_62:
            int v27 = (v26 | (v14 << (8 * v6))) + 2;
            unsigned int v13 = v26 + 2;
            if (v6 < 4) {
              unsigned int v13 = v27;
            }
            break;
          default:
            break;
        }
      }
LABEL_64:
      if (v13 == 1)
      {
        uint64_t v28 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(*(void *)(result - 8) + 8);
        uint64_t result = v28(a1, result);
      }
      else
      {
        int v29 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v32 + 8);
        uint64_t result = v29(a1, AssociatedTypeWitness);
      }
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_24D56E770(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 8;
  if (v12 >= 8)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | (v13 << (8 * v11))) + 8;
        unsigned int v12 = v15 + 8;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      unsigned int v17 = a2[v9];
      unsigned int v18 = v17 - 2;
      if (v17 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            goto LABEL_71;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            goto LABEL_71;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_71;
          case 4:
            int v20 = *(_DWORD *)a2;
LABEL_71:
            int v49 = (v20 | (v18 << (8 * v9))) + 2;
            unsigned int v17 = v20 + 2;
            if (v9 < 4) {
              unsigned int v17 = v49;
            }
            break;
          default:
            break;
        }
      }
      BOOL v50 = v17 == 1;
      if (v17 == 1)
      {
        uint64_t v51 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v51 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v51);
      a1[v9] = v50;
      a1[v11] = 0;
      return a1;
    case 1u:
      unsigned int v21 = a2[v9];
      unsigned int v22 = v21 - 2;
      if (v21 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v23 = v9;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            int v24 = *a2;
            goto LABEL_80;
          case 2:
            int v24 = *(unsigned __int16 *)a2;
            goto LABEL_80;
          case 3:
            int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_80;
          case 4:
            int v24 = *(_DWORD *)a2;
LABEL_80:
            int v52 = (v24 | (v22 << (8 * v9))) + 2;
            unsigned int v21 = v24 + 2;
            if (v9 < 4) {
              unsigned int v21 = v52;
            }
            break;
          default:
            break;
        }
      }
      BOOL v53 = v21 == 1;
      if (v21 == 1)
      {
        uint64_t v54 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v54 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v54);
      a1[v9] = v53;
      BOOL v55 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      uint64_t v56 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      *BOOL v55 = *v56;
      v55[1] = v56[1];
      char v57 = 1;
      goto LABEL_95;
    case 2u:
      unsigned int v25 = a2[v9];
      unsigned int v26 = v25 - 2;
      if (v25 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v27 = v9;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_89;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_89;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_89;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_89:
            int v58 = (v28 | (v26 << (8 * v9))) + 2;
            unsigned int v25 = v28 + 2;
            if (v9 < 4) {
              unsigned int v25 = v58;
            }
            break;
          default:
            break;
        }
      }
      BOOL v59 = v25 == 1;
      if (v25 == 1)
      {
        uint64_t v60 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v60 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v60);
      a1[v9] = v59;
      uint64_t v61 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v62 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      *uint64_t v61 = *v62;
      v61[1] = v62[1];
      char v57 = 2;
LABEL_95:
      a1[v11] = v57;
      swift_bridgeObjectRetain();
      return a1;
    case 3u:
      unsigned int v29 = a2[v9];
      unsigned int v30 = v29 - 2;
      if (v29 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v31 = v9;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a2;
            goto LABEL_99;
          case 2:
            int v32 = *(unsigned __int16 *)a2;
            goto LABEL_99;
          case 3:
            int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_99;
          case 4:
            int v32 = *(_DWORD *)a2;
LABEL_99:
            int v63 = (v32 | (v30 << (8 * v9))) + 2;
            unsigned int v29 = v32 + 2;
            if (v9 < 4) {
              unsigned int v29 = v63;
            }
            break;
          default:
            break;
        }
      }
      BOOL v64 = v29 == 1;
      if (v29 == 1)
      {
        uint64_t v65 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v65 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v65);
      a1[v9] = v64;
      char v66 = 3;
      goto LABEL_141;
    case 4u:
      unsigned int v33 = a2[v9];
      unsigned int v34 = v33 - 2;
      if (v33 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v35 = v9;
        }
        else {
          uint64_t v35 = 4;
        }
        switch(v35)
        {
          case 1:
            int v36 = *a2;
            goto LABEL_108;
          case 2:
            int v36 = *(unsigned __int16 *)a2;
            goto LABEL_108;
          case 3:
            int v36 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_108;
          case 4:
            int v36 = *(_DWORD *)a2;
LABEL_108:
            int v67 = (v36 | (v34 << (8 * v9))) + 2;
            unsigned int v33 = v36 + 2;
            if (v9 < 4) {
              unsigned int v33 = v67;
            }
            break;
          default:
            break;
        }
      }
      BOOL v68 = v33 == 1;
      if (v33 == 1)
      {
        uint64_t v69 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v69 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v69);
      a1[v9] = v68;
      char v66 = 4;
      goto LABEL_141;
    case 5u:
      unsigned int v37 = a2[v9];
      unsigned int v38 = v37 - 2;
      if (v37 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v39 = v9;
        }
        else {
          uint64_t v39 = 4;
        }
        switch(v39)
        {
          case 1:
            int v40 = *a2;
            goto LABEL_117;
          case 2:
            int v40 = *(unsigned __int16 *)a2;
            goto LABEL_117;
          case 3:
            int v40 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_117;
          case 4:
            int v40 = *(_DWORD *)a2;
LABEL_117:
            int v70 = (v40 | (v38 << (8 * v9))) + 2;
            unsigned int v37 = v40 + 2;
            if (v9 < 4) {
              unsigned int v37 = v70;
            }
            break;
          default:
            break;
        }
      }
      BOOL v71 = v37 == 1;
      if (v37 == 1)
      {
        uint64_t v72 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v72 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v72);
      a1[v9] = v71;
      char v66 = 5;
      goto LABEL_141;
    case 6u:
      unsigned int v41 = a2[v9];
      unsigned int v42 = v41 - 2;
      if (v41 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v43 = v9;
        }
        else {
          uint64_t v43 = 4;
        }
        switch(v43)
        {
          case 1:
            int v44 = *a2;
            goto LABEL_126;
          case 2:
            int v44 = *(unsigned __int16 *)a2;
            goto LABEL_126;
          case 3:
            int v44 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_126;
          case 4:
            int v44 = *(_DWORD *)a2;
LABEL_126:
            int v73 = (v44 | (v42 << (8 * v9))) + 2;
            unsigned int v41 = v44 + 2;
            if (v9 < 4) {
              unsigned int v41 = v73;
            }
            break;
          default:
            break;
        }
      }
      BOOL v74 = v41 == 1;
      if (v41 == 1)
      {
        uint64_t v75 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v75 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v75);
      a1[v9] = v74;
      char v66 = 6;
      goto LABEL_141;
    case 7u:
      unsigned int v45 = a2[v9];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v47 = v9;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            goto LABEL_135;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            goto LABEL_135;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_135;
          case 4:
            int v48 = *(_DWORD *)a2;
LABEL_135:
            int v76 = (v48 | (v46 << (8 * v9))) + 2;
            unsigned int v45 = v48 + 2;
            if (v9 < 4) {
              unsigned int v45 = v76;
            }
            break;
          default:
            break;
        }
      }
      BOOL v77 = v45 == 1;
      if (v45 == 1)
      {
        uint64_t v78 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v78 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 16))(a1, a2, v78);
      a1[v9] = v77;
      char v66 = 7;
LABEL_141:
      a1[v11] = v66;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_24D56EFE0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unint64_t v10 = v6 + 1;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + 24 <= v6 + 1) {
      unint64_t v11 = v6 + 1;
    }
    else {
      unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 8;
    if (v12 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_16;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_16:
          int v16 = (v15 | (v13 << (8 * v11))) + 8;
          unsigned int v12 = v15 + 8;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    switch(v12)
    {
      case 0u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v19 = v6;
          }
          else {
            uint64_t v19 = 4;
          }
          switch(v19)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 1u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v22 = v6;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              goto LABEL_34;
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_72;
            case 4:
              goto LABEL_73;
            default:
              goto LABEL_76;
          }
        }
        goto LABEL_76;
      case 2u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
LABEL_34:
              int v24 = *a1;
              goto LABEL_74;
            case 2:
LABEL_71:
              int v24 = *(unsigned __int16 *)a1;
              goto LABEL_74;
            case 3:
LABEL_72:
              int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_74;
            case 4:
LABEL_73:
              int v24 = *(_DWORD *)a1;
LABEL_74:
              int v31 = (v24 | (v21 << (8 * v6))) + 2;
              unsigned int v20 = v24 + 2;
              if (v6 < 4) {
                unsigned int v20 = v31;
              }
              break;
            default:
              break;
          }
        }
LABEL_76:
        if (v20 == 1) {
          uint64_t v32 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v32 = v5;
        }
        if (v20 == 1) {
          uint64_t v33 = v7;
        }
        else {
          uint64_t v33 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v33);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v25 = v6;
          }
          else {
            uint64_t v25 = 4;
          }
          switch(v25)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 4u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v26 = v6;
          }
          else {
            uint64_t v26 = 4;
          }
          switch(v26)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 5u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v27 = v6;
          }
          else {
            uint64_t v27 = 4;
          }
          switch(v27)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 6u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v28 = v6;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 7u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v29 = v6;
          }
          else {
            uint64_t v29 = 4;
          }
          switch(v29)
          {
            case 1:
LABEL_60:
              int v30 = *a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 2:
LABEL_62:
              int v30 = *(unsigned __int16 *)a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 3:
LABEL_64:
              int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              if (v6 < 4) {
                goto LABEL_65;
              }
              goto LABEL_69;
            case 4:
LABEL_68:
              int v30 = *(_DWORD *)a1;
              if (v6 < 4)
              {
LABEL_65:
                unsigned int v17 = (v30 | (v18 << (8 * v6))) + 2;
                break;
              }
LABEL_69:
              if (v30 != -1) {
                goto LABEL_70;
              }
              goto LABEL_67;
            default:
              break;
          }
        }
LABEL_66:
        if (v17 == 1) {
LABEL_67:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else {
LABEL_70:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    unsigned int v34 = a2[v11];
    unsigned int v35 = v34 - 8;
    if (v34 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v36 = v11;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          goto LABEL_92;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          goto LABEL_92;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_92;
        case 4:
          int v37 = *(_DWORD *)a2;
LABEL_92:
          int v38 = (v37 | (v35 << (8 * v11))) + 8;
          unsigned int v34 = v37 + 8;
          if (v11 < 4) {
            unsigned int v34 = v38;
          }
          break;
        default:
          break;
      }
    }
    switch(v34)
    {
      case 0u:
        unsigned int v39 = a2[v6];
        unsigned int v40 = v39 - 2;
        if (v39 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v41 = v6;
          }
          else {
            uint64_t v41 = 4;
          }
          switch(v41)
          {
            case 1:
              int v42 = *a2;
              goto LABEL_147;
            case 2:
              int v42 = *(unsigned __int16 *)a2;
              goto LABEL_147;
            case 3:
              int v42 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_147;
            case 4:
              int v42 = *(_DWORD *)a2;
LABEL_147:
              int v71 = (v42 | (v40 << (8 * v6))) + 2;
              unsigned int v39 = v42 + 2;
              if (v6 < 4) {
                unsigned int v39 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v39 == 1;
        if (v39 == 1) {
          uint64_t v73 = v9;
        }
        else {
          uint64_t v73 = v5;
        }
        if (v39 == 1) {
          uint64_t v74 = v8;
        }
        else {
          uint64_t v74 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v73 + 16))(a1, a2, v74);
        a1[v6] = v72;
        a1[v11] = 0;
        return a1;
      case 1u:
        unsigned int v43 = a2[v6];
        unsigned int v44 = v43 - 2;
        if (v43 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v45 = v6;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *a2;
              goto LABEL_159;
            case 2:
              int v46 = *(unsigned __int16 *)a2;
              goto LABEL_159;
            case 3:
              int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_159;
            case 4:
              int v46 = *(_DWORD *)a2;
LABEL_159:
              int v75 = (v46 | (v44 << (8 * v6))) + 2;
              unsigned int v43 = v46 + 2;
              if (v6 < 4) {
                unsigned int v43 = v75;
              }
              break;
            default:
              break;
          }
        }
        BOOL v76 = v43 == 1;
        if (v43 == 1) {
          uint64_t v77 = v9;
        }
        else {
          uint64_t v77 = v5;
        }
        if (v43 == 1) {
          uint64_t v78 = v8;
        }
        else {
          uint64_t v78 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v77 + 16))(a1, a2, v78);
        a1[v6] = v76;
        uint64_t v79 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        int v80 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v79 = *v80;
        v79[1] = v80[1];
        char v81 = 1;
        goto LABEL_180;
      case 2u:
        unsigned int v47 = a2[v6];
        unsigned int v48 = v47 - 2;
        if (v47 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v49 = v6;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *a2;
              goto LABEL_171;
            case 2:
              int v50 = *(unsigned __int16 *)a2;
              goto LABEL_171;
            case 3:
              int v50 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_171;
            case 4:
              int v50 = *(_DWORD *)a2;
LABEL_171:
              int v82 = (v50 | (v48 << (8 * v6))) + 2;
              unsigned int v47 = v50 + 2;
              if (v6 < 4) {
                unsigned int v47 = v82;
              }
              break;
            default:
              break;
          }
        }
        BOOL v83 = v47 == 1;
        if (v47 == 1) {
          uint64_t v84 = v9;
        }
        else {
          uint64_t v84 = v5;
        }
        if (v47 == 1) {
          uint64_t v85 = v8;
        }
        else {
          uint64_t v85 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v84 + 16))(a1, a2, v85);
        a1[v6] = v83;
        uint64_t v86 = (void *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        uint64_t v87 = (void *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        *uint64_t v86 = *v87;
        v86[1] = v87[1];
        char v81 = 2;
LABEL_180:
        a1[v11] = v81;
        swift_bridgeObjectRetain();
        return a1;
      case 3u:
        unsigned int v51 = a2[v6];
        unsigned int v52 = v51 - 2;
        if (v51 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v53 = v6;
          }
          else {
            uint64_t v53 = 4;
          }
          switch(v53)
          {
            case 1:
              int v54 = *a2;
              goto LABEL_184;
            case 2:
              int v54 = *(unsigned __int16 *)a2;
              goto LABEL_184;
            case 3:
              int v54 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_184;
            case 4:
              int v54 = *(_DWORD *)a2;
LABEL_184:
              int v88 = (v54 | (v52 << (8 * v6))) + 2;
              unsigned int v51 = v54 + 2;
              if (v6 < 4) {
                unsigned int v51 = v88;
              }
              break;
            default:
              break;
          }
        }
        BOOL v89 = v51 == 1;
        if (v51 == 1) {
          uint64_t v90 = v9;
        }
        else {
          uint64_t v90 = v5;
        }
        if (v51 == 1) {
          uint64_t v91 = v8;
        }
        else {
          uint64_t v91 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v90 + 16))(a1, a2, v91);
        a1[v6] = v89;
        char v92 = 3;
        goto LABEL_241;
      case 4u:
        unsigned int v55 = a2[v6];
        unsigned int v56 = v55 - 2;
        if (v55 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v57 = v6;
          }
          else {
            uint64_t v57 = 4;
          }
          switch(v57)
          {
            case 1:
              int v58 = *a2;
              goto LABEL_196;
            case 2:
              int v58 = *(unsigned __int16 *)a2;
              goto LABEL_196;
            case 3:
              int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_196;
            case 4:
              int v58 = *(_DWORD *)a2;
LABEL_196:
              int v93 = (v58 | (v56 << (8 * v6))) + 2;
              unsigned int v55 = v58 + 2;
              if (v6 < 4) {
                unsigned int v55 = v93;
              }
              break;
            default:
              break;
          }
        }
        BOOL v94 = v55 == 1;
        if (v55 == 1) {
          uint64_t v95 = v9;
        }
        else {
          uint64_t v95 = v5;
        }
        if (v55 == 1) {
          uint64_t v96 = v8;
        }
        else {
          uint64_t v96 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v95 + 16))(a1, a2, v96);
        a1[v6] = v94;
        char v92 = 4;
        goto LABEL_241;
      case 5u:
        unsigned int v59 = a2[v6];
        unsigned int v60 = v59 - 2;
        if (v59 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v61 = v6;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *a2;
              goto LABEL_208;
            case 2:
              int v62 = *(unsigned __int16 *)a2;
              goto LABEL_208;
            case 3:
              int v62 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_208;
            case 4:
              int v62 = *(_DWORD *)a2;
LABEL_208:
              int v97 = (v62 | (v60 << (8 * v6))) + 2;
              unsigned int v59 = v62 + 2;
              if (v6 < 4) {
                unsigned int v59 = v97;
              }
              break;
            default:
              break;
          }
        }
        BOOL v98 = v59 == 1;
        if (v59 == 1) {
          uint64_t v99 = v9;
        }
        else {
          uint64_t v99 = v5;
        }
        if (v59 == 1) {
          uint64_t v100 = v8;
        }
        else {
          uint64_t v100 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v99 + 16))(a1, a2, v100);
        a1[v6] = v98;
        char v92 = 5;
        goto LABEL_241;
      case 6u:
        unsigned int v63 = a2[v6];
        unsigned int v64 = v63 - 2;
        if (v63 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v65 = v6;
          }
          else {
            uint64_t v65 = 4;
          }
          switch(v65)
          {
            case 1:
              int v66 = *a2;
              goto LABEL_220;
            case 2:
              int v66 = *(unsigned __int16 *)a2;
              goto LABEL_220;
            case 3:
              int v66 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_220;
            case 4:
              int v66 = *(_DWORD *)a2;
LABEL_220:
              int v101 = (v66 | (v64 << (8 * v6))) + 2;
              unsigned int v63 = v66 + 2;
              if (v6 < 4) {
                unsigned int v63 = v101;
              }
              break;
            default:
              break;
          }
        }
        BOOL v102 = v63 == 1;
        if (v63 == 1) {
          uint64_t v103 = v9;
        }
        else {
          uint64_t v103 = v5;
        }
        if (v63 == 1) {
          uint64_t v104 = v8;
        }
        else {
          uint64_t v104 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v103 + 16))(a1, a2, v104);
        a1[v6] = v102;
        char v92 = 6;
        goto LABEL_241;
      case 7u:
        unsigned int v67 = a2[v6];
        unsigned int v68 = v67 - 2;
        if (v67 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v69 = v6;
          }
          else {
            uint64_t v69 = 4;
          }
          switch(v69)
          {
            case 1:
              int v70 = *a2;
              goto LABEL_232;
            case 2:
              int v70 = *(unsigned __int16 *)a2;
              goto LABEL_232;
            case 3:
              int v70 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_232;
            case 4:
              int v70 = *(_DWORD *)a2;
LABEL_232:
              int v105 = (v70 | (v68 << (8 * v6))) + 2;
              unsigned int v67 = v70 + 2;
              if (v6 < 4) {
                unsigned int v67 = v105;
              }
              break;
            default:
              break;
          }
        }
        BOOL v106 = v67 == 1;
        if (v67 == 1) {
          uint64_t v107 = v9;
        }
        else {
          uint64_t v107 = v5;
        }
        if (v67 == 1) {
          uint64_t v108 = v8;
        }
        else {
          uint64_t v108 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v107 + 16))(a1, a2, v108);
        a1[v6] = v106;
        char v92 = 7;
LABEL_241:
        a1[v11] = v92;
        break;
      default:
        memcpy(a1, a2, v11 + 1);
        break;
    }
  }
  return a1;
}

unsigned char *sub_24D56FCA8(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v7 - 8);
  if (*(void *)(v8 + 64) <= v6) {
    unint64_t v9 = v6;
  }
  else {
    unint64_t v9 = *(void *)(*(void *)(v7 - 8) + 64);
  }
  unint64_t v10 = v9 + 1;
  if ((v9 & 0xFFFFFFFFFFFFFFF8) + 24 <= v9 + 1) {
    unint64_t v11 = v9 + 1;
  }
  else {
    unint64_t v11 = (v9 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  unsigned int v12 = a2[v11];
  unsigned int v13 = v12 - 8;
  if (v12 >= 8)
  {
    if (v11 <= 3) {
      uint64_t v14 = v11;
    }
    else {
      uint64_t v14 = 4;
    }
    switch(v14)
    {
      case 1:
        int v15 = *a2;
        goto LABEL_16;
      case 2:
        int v15 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v15 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v15 = *(_DWORD *)a2;
LABEL_16:
        int v16 = (v15 | (v13 << (8 * v11))) + 8;
        unsigned int v12 = v15 + 8;
        if (v11 < 4) {
          unsigned int v12 = v16;
        }
        break;
      default:
        break;
    }
  }
  switch(v12)
  {
    case 0u:
      unsigned int v17 = a2[v9];
      unsigned int v18 = v17 - 2;
      if (v17 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v19 = v9;
        }
        else {
          uint64_t v19 = 4;
        }
        switch(v19)
        {
          case 1:
            int v20 = *a2;
            goto LABEL_71;
          case 2:
            int v20 = *(unsigned __int16 *)a2;
            goto LABEL_71;
          case 3:
            int v20 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_71;
          case 4:
            int v20 = *(_DWORD *)a2;
LABEL_71:
            int v49 = (v20 | (v18 << (8 * v9))) + 2;
            unsigned int v17 = v20 + 2;
            if (v9 < 4) {
              unsigned int v17 = v49;
            }
            break;
          default:
            break;
        }
      }
      BOOL v50 = v17 == 1;
      if (v17 == 1)
      {
        uint64_t v51 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v51 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v51);
      a1[v9] = v50;
      a1[v11] = 0;
      return a1;
    case 1u:
      unsigned int v21 = a2[v9];
      unsigned int v22 = v21 - 2;
      if (v21 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v23 = v9;
        }
        else {
          uint64_t v23 = 4;
        }
        switch(v23)
        {
          case 1:
            int v24 = *a2;
            goto LABEL_80;
          case 2:
            int v24 = *(unsigned __int16 *)a2;
            goto LABEL_80;
          case 3:
            int v24 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_80;
          case 4:
            int v24 = *(_DWORD *)a2;
LABEL_80:
            int v52 = (v24 | (v22 << (8 * v9))) + 2;
            unsigned int v21 = v24 + 2;
            if (v9 < 4) {
              unsigned int v21 = v52;
            }
            break;
          default:
            break;
        }
      }
      BOOL v53 = v21 == 1;
      if (v21 == 1)
      {
        uint64_t v54 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v54 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v54);
      a1[v9] = v53;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v55 = 1;
      goto LABEL_140;
    case 2u:
      unsigned int v25 = a2[v9];
      unsigned int v26 = v25 - 2;
      if (v25 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v27 = v9;
        }
        else {
          uint64_t v27 = 4;
        }
        switch(v27)
        {
          case 1:
            int v28 = *a2;
            goto LABEL_89;
          case 2:
            int v28 = *(unsigned __int16 *)a2;
            goto LABEL_89;
          case 3:
            int v28 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_89;
          case 4:
            int v28 = *(_DWORD *)a2;
LABEL_89:
            int v56 = (v28 | (v26 << (8 * v9))) + 2;
            unsigned int v25 = v28 + 2;
            if (v9 < 4) {
              unsigned int v25 = v56;
            }
            break;
          default:
            break;
        }
      }
      BOOL v57 = v25 == 1;
      if (v25 == 1)
      {
        uint64_t v58 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v58 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v58);
      a1[v9] = v57;
      *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
      char v55 = 2;
      goto LABEL_140;
    case 3u:
      unsigned int v29 = a2[v9];
      unsigned int v30 = v29 - 2;
      if (v29 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v31 = v9;
        }
        else {
          uint64_t v31 = 4;
        }
        switch(v31)
        {
          case 1:
            int v32 = *a2;
            goto LABEL_98;
          case 2:
            int v32 = *(unsigned __int16 *)a2;
            goto LABEL_98;
          case 3:
            int v32 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_98;
          case 4:
            int v32 = *(_DWORD *)a2;
LABEL_98:
            int v59 = (v32 | (v30 << (8 * v9))) + 2;
            unsigned int v29 = v32 + 2;
            if (v9 < 4) {
              unsigned int v29 = v59;
            }
            break;
          default:
            break;
        }
      }
      BOOL v60 = v29 == 1;
      if (v29 == 1)
      {
        uint64_t v61 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v61 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v61);
      a1[v9] = v60;
      char v55 = 3;
      goto LABEL_140;
    case 4u:
      unsigned int v33 = a2[v9];
      unsigned int v34 = v33 - 2;
      if (v33 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v35 = v9;
        }
        else {
          uint64_t v35 = 4;
        }
        switch(v35)
        {
          case 1:
            int v36 = *a2;
            goto LABEL_107;
          case 2:
            int v36 = *(unsigned __int16 *)a2;
            goto LABEL_107;
          case 3:
            int v36 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_107;
          case 4:
            int v36 = *(_DWORD *)a2;
LABEL_107:
            int v62 = (v36 | (v34 << (8 * v9))) + 2;
            unsigned int v33 = v36 + 2;
            if (v9 < 4) {
              unsigned int v33 = v62;
            }
            break;
          default:
            break;
        }
      }
      BOOL v63 = v33 == 1;
      if (v33 == 1)
      {
        uint64_t v64 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v64 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v64);
      a1[v9] = v63;
      char v55 = 4;
      goto LABEL_140;
    case 5u:
      unsigned int v37 = a2[v9];
      unsigned int v38 = v37 - 2;
      if (v37 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v39 = v9;
        }
        else {
          uint64_t v39 = 4;
        }
        switch(v39)
        {
          case 1:
            int v40 = *a2;
            goto LABEL_116;
          case 2:
            int v40 = *(unsigned __int16 *)a2;
            goto LABEL_116;
          case 3:
            int v40 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_116;
          case 4:
            int v40 = *(_DWORD *)a2;
LABEL_116:
            int v65 = (v40 | (v38 << (8 * v9))) + 2;
            unsigned int v37 = v40 + 2;
            if (v9 < 4) {
              unsigned int v37 = v65;
            }
            break;
          default:
            break;
        }
      }
      BOOL v66 = v37 == 1;
      if (v37 == 1)
      {
        uint64_t v67 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v67 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v67);
      a1[v9] = v66;
      char v55 = 5;
      goto LABEL_140;
    case 6u:
      unsigned int v41 = a2[v9];
      unsigned int v42 = v41 - 2;
      if (v41 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v43 = v9;
        }
        else {
          uint64_t v43 = 4;
        }
        switch(v43)
        {
          case 1:
            int v44 = *a2;
            goto LABEL_125;
          case 2:
            int v44 = *(unsigned __int16 *)a2;
            goto LABEL_125;
          case 3:
            int v44 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_125;
          case 4:
            int v44 = *(_DWORD *)a2;
LABEL_125:
            int v68 = (v44 | (v42 << (8 * v9))) + 2;
            unsigned int v41 = v44 + 2;
            if (v9 < 4) {
              unsigned int v41 = v68;
            }
            break;
          default:
            break;
        }
      }
      BOOL v69 = v41 == 1;
      if (v41 == 1)
      {
        uint64_t v70 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v70 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v70);
      a1[v9] = v69;
      char v55 = 6;
      goto LABEL_140;
    case 7u:
      unsigned int v45 = a2[v9];
      unsigned int v46 = v45 - 2;
      if (v45 >= 2)
      {
        if (v9 <= 3) {
          uint64_t v47 = v9;
        }
        else {
          uint64_t v47 = 4;
        }
        switch(v47)
        {
          case 1:
            int v48 = *a2;
            goto LABEL_134;
          case 2:
            int v48 = *(unsigned __int16 *)a2;
            goto LABEL_134;
          case 3:
            int v48 = *(unsigned __int16 *)a2 | (a2[2] << 16);
            goto LABEL_134;
          case 4:
            int v48 = *(_DWORD *)a2;
LABEL_134:
            int v71 = (v48 | (v46 << (8 * v9))) + 2;
            unsigned int v45 = v48 + 2;
            if (v9 < 4) {
              unsigned int v45 = v71;
            }
            break;
          default:
            break;
        }
      }
      BOOL v72 = v45 == 1;
      if (v45 == 1)
      {
        uint64_t v73 = v7;
      }
      else
      {
        uint64_t v8 = v5;
        uint64_t v73 = AssociatedTypeWitness;
      }
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v8 + 32))(a1, a2, v73);
      a1[v9] = v72;
      char v55 = 7;
LABEL_140:
      a1[v11] = v55;
      break;
    default:
      memcpy(a1, a2, v11 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_24D570500(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    unint64_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = swift_getAssociatedTypeWitness();
    uint64_t v8 = v7;
    uint64_t v9 = *(void *)(v7 - 8);
    if (*(void *)(v9 + 64) > v6) {
      unint64_t v6 = *(void *)(*(void *)(v7 - 8) + 64);
    }
    unint64_t v10 = v6 + 1;
    if ((v6 & 0xFFFFFFFFFFFFFFF8) + 24 <= v6 + 1) {
      unint64_t v11 = v6 + 1;
    }
    else {
      unint64_t v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 24;
    }
    unsigned int v12 = a1[v11];
    unsigned int v13 = v12 - 8;
    if (v12 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v14 = v11;
      }
      else {
        uint64_t v14 = 4;
      }
      switch(v14)
      {
        case 1:
          int v15 = *a1;
          goto LABEL_16;
        case 2:
          int v15 = *(unsigned __int16 *)a1;
          goto LABEL_16;
        case 3:
          int v15 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_16;
        case 4:
          int v15 = *(_DWORD *)a1;
LABEL_16:
          int v16 = (v15 | (v13 << (8 * v11))) + 8;
          unsigned int v12 = v15 + 8;
          if (v11 < 4) {
            unsigned int v12 = v16;
          }
          break;
        default:
          break;
      }
    }
    switch(v12)
    {
      case 0u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v19 = v6;
          }
          else {
            uint64_t v19 = 4;
          }
          switch(v19)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 1u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v22 = v6;
          }
          else {
            uint64_t v22 = 4;
          }
          switch(v22)
          {
            case 1:
              goto LABEL_34;
            case 2:
              goto LABEL_71;
            case 3:
              goto LABEL_72;
            case 4:
              goto LABEL_73;
            default:
              goto LABEL_76;
          }
        }
        goto LABEL_76;
      case 2u:
        unsigned int v20 = a1[v6];
        unsigned int v21 = v20 - 2;
        if (v20 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v23 = v6;
          }
          else {
            uint64_t v23 = 4;
          }
          switch(v23)
          {
            case 1:
LABEL_34:
              int v24 = *a1;
              goto LABEL_74;
            case 2:
LABEL_71:
              int v24 = *(unsigned __int16 *)a1;
              goto LABEL_74;
            case 3:
LABEL_72:
              int v24 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              goto LABEL_74;
            case 4:
LABEL_73:
              int v24 = *(_DWORD *)a1;
LABEL_74:
              int v31 = (v24 | (v21 << (8 * v6))) + 2;
              unsigned int v20 = v24 + 2;
              if (v6 < 4) {
                unsigned int v20 = v31;
              }
              break;
            default:
              break;
          }
        }
LABEL_76:
        if (v20 == 1) {
          uint64_t v32 = *(void *)(v7 - 8);
        }
        else {
          uint64_t v32 = v5;
        }
        if (v20 == 1) {
          uint64_t v33 = v7;
        }
        else {
          uint64_t v33 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, uint64_t))(v32 + 8))(a1, v33);
        swift_bridgeObjectRelease();
        break;
      case 3u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v25 = v6;
          }
          else {
            uint64_t v25 = 4;
          }
          switch(v25)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 4u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v26 = v6;
          }
          else {
            uint64_t v26 = 4;
          }
          switch(v26)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 5u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v27 = v6;
          }
          else {
            uint64_t v27 = 4;
          }
          switch(v27)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 6u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v28 = v6;
          }
          else {
            uint64_t v28 = 4;
          }
          switch(v28)
          {
            case 1:
              goto LABEL_60;
            case 2:
              goto LABEL_62;
            case 3:
              goto LABEL_64;
            case 4:
              goto LABEL_68;
            default:
              goto LABEL_66;
          }
        }
        goto LABEL_66;
      case 7u:
        unsigned int v17 = a1[v6];
        unsigned int v18 = v17 - 2;
        if (v17 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v29 = v6;
          }
          else {
            uint64_t v29 = 4;
          }
          switch(v29)
          {
            case 1:
LABEL_60:
              int v30 = *a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 2:
LABEL_62:
              int v30 = *(unsigned __int16 *)a1;
              if (v6 >= 4) {
                goto LABEL_69;
              }
              goto LABEL_65;
            case 3:
LABEL_64:
              int v30 = *(unsigned __int16 *)a1 | (a1[2] << 16);
              if (v6 < 4) {
                goto LABEL_65;
              }
              goto LABEL_69;
            case 4:
LABEL_68:
              int v30 = *(_DWORD *)a1;
              if (v6 < 4)
              {
LABEL_65:
                unsigned int v17 = (v30 | (v18 << (8 * v6))) + 2;
                break;
              }
LABEL_69:
              if (v30 != -1) {
                goto LABEL_70;
              }
              goto LABEL_67;
            default:
              break;
          }
        }
LABEL_66:
        if (v17 == 1) {
LABEL_67:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v9 + 8))(a1, v7);
        else {
LABEL_70:
        }
          (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      default:
        break;
    }
    unsigned int v34 = a2[v11];
    unsigned int v35 = v34 - 8;
    if (v34 >= 8)
    {
      if (v11 <= 3) {
        uint64_t v36 = v11;
      }
      else {
        uint64_t v36 = 4;
      }
      switch(v36)
      {
        case 1:
          int v37 = *a2;
          goto LABEL_92;
        case 2:
          int v37 = *(unsigned __int16 *)a2;
          goto LABEL_92;
        case 3:
          int v37 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_92;
        case 4:
          int v37 = *(_DWORD *)a2;
LABEL_92:
          int v38 = (v37 | (v35 << (8 * v11))) + 8;
          unsigned int v34 = v37 + 8;
          if (v11 < 4) {
            unsigned int v34 = v38;
          }
          break;
        default:
          break;
      }
    }
    switch(v34)
    {
      case 0u:
        unsigned int v39 = a2[v6];
        unsigned int v40 = v39 - 2;
        if (v39 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v41 = v6;
          }
          else {
            uint64_t v41 = 4;
          }
          switch(v41)
          {
            case 1:
              int v42 = *a2;
              goto LABEL_147;
            case 2:
              int v42 = *(unsigned __int16 *)a2;
              goto LABEL_147;
            case 3:
              int v42 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_147;
            case 4:
              int v42 = *(_DWORD *)a2;
LABEL_147:
              int v71 = (v42 | (v40 << (8 * v6))) + 2;
              unsigned int v39 = v42 + 2;
              if (v6 < 4) {
                unsigned int v39 = v71;
              }
              break;
            default:
              break;
          }
        }
        BOOL v72 = v39 == 1;
        if (v39 == 1) {
          uint64_t v73 = v9;
        }
        else {
          uint64_t v73 = v5;
        }
        if (v39 == 1) {
          uint64_t v74 = v8;
        }
        else {
          uint64_t v74 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v73 + 32))(a1, a2, v74);
        a1[v6] = v72;
        a1[v11] = 0;
        return a1;
      case 1u:
        unsigned int v43 = a2[v6];
        unsigned int v44 = v43 - 2;
        if (v43 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v45 = v6;
          }
          else {
            uint64_t v45 = 4;
          }
          switch(v45)
          {
            case 1:
              int v46 = *a2;
              goto LABEL_159;
            case 2:
              int v46 = *(unsigned __int16 *)a2;
              goto LABEL_159;
            case 3:
              int v46 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_159;
            case 4:
              int v46 = *(_DWORD *)a2;
LABEL_159:
              int v75 = (v46 | (v44 << (8 * v6))) + 2;
              unsigned int v43 = v46 + 2;
              if (v6 < 4) {
                unsigned int v43 = v75;
              }
              break;
            default:
              break;
          }
        }
        BOOL v76 = v43 == 1;
        if (v43 == 1) {
          uint64_t v77 = v9;
        }
        else {
          uint64_t v77 = v5;
        }
        if (v43 == 1) {
          uint64_t v78 = v8;
        }
        else {
          uint64_t v78 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v77 + 32))(a1, a2, v78);
        a1[v6] = v76;
        *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        char v79 = 1;
        goto LABEL_240;
      case 2u:
        unsigned int v47 = a2[v6];
        unsigned int v48 = v47 - 2;
        if (v47 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v49 = v6;
          }
          else {
            uint64_t v49 = 4;
          }
          switch(v49)
          {
            case 1:
              int v50 = *a2;
              goto LABEL_171;
            case 2:
              int v50 = *(unsigned __int16 *)a2;
              goto LABEL_171;
            case 3:
              int v50 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_171;
            case 4:
              int v50 = *(_DWORD *)a2;
LABEL_171:
              int v80 = (v50 | (v48 << (8 * v6))) + 2;
              unsigned int v47 = v50 + 2;
              if (v6 < 4) {
                unsigned int v47 = v80;
              }
              break;
            default:
              break;
          }
        }
        BOOL v81 = v47 == 1;
        if (v47 == 1) {
          uint64_t v82 = v9;
        }
        else {
          uint64_t v82 = v5;
        }
        if (v47 == 1) {
          uint64_t v83 = v8;
        }
        else {
          uint64_t v83 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v82 + 32))(a1, a2, v83);
        a1[v6] = v81;
        *(_OWORD *)((unint64_t)&a1[v10 + 7] & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((unint64_t)&a2[v10 + 7] & 0xFFFFFFFFFFFFFFF8);
        char v79 = 2;
        goto LABEL_240;
      case 3u:
        unsigned int v51 = a2[v6];
        unsigned int v52 = v51 - 2;
        if (v51 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v53 = v6;
          }
          else {
            uint64_t v53 = 4;
          }
          switch(v53)
          {
            case 1:
              int v54 = *a2;
              goto LABEL_183;
            case 2:
              int v54 = *(unsigned __int16 *)a2;
              goto LABEL_183;
            case 3:
              int v54 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_183;
            case 4:
              int v54 = *(_DWORD *)a2;
LABEL_183:
              int v84 = (v54 | (v52 << (8 * v6))) + 2;
              unsigned int v51 = v54 + 2;
              if (v6 < 4) {
                unsigned int v51 = v84;
              }
              break;
            default:
              break;
          }
        }
        BOOL v85 = v51 == 1;
        if (v51 == 1) {
          uint64_t v86 = v9;
        }
        else {
          uint64_t v86 = v5;
        }
        if (v51 == 1) {
          uint64_t v87 = v8;
        }
        else {
          uint64_t v87 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v86 + 32))(a1, a2, v87);
        a1[v6] = v85;
        char v79 = 3;
        goto LABEL_240;
      case 4u:
        unsigned int v55 = a2[v6];
        unsigned int v56 = v55 - 2;
        if (v55 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v57 = v6;
          }
          else {
            uint64_t v57 = 4;
          }
          switch(v57)
          {
            case 1:
              int v58 = *a2;
              goto LABEL_195;
            case 2:
              int v58 = *(unsigned __int16 *)a2;
              goto LABEL_195;
            case 3:
              int v58 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_195;
            case 4:
              int v58 = *(_DWORD *)a2;
LABEL_195:
              int v88 = (v58 | (v56 << (8 * v6))) + 2;
              unsigned int v55 = v58 + 2;
              if (v6 < 4) {
                unsigned int v55 = v88;
              }
              break;
            default:
              break;
          }
        }
        BOOL v89 = v55 == 1;
        if (v55 == 1) {
          uint64_t v90 = v9;
        }
        else {
          uint64_t v90 = v5;
        }
        if (v55 == 1) {
          uint64_t v91 = v8;
        }
        else {
          uint64_t v91 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v90 + 32))(a1, a2, v91);
        a1[v6] = v89;
        char v79 = 4;
        goto LABEL_240;
      case 5u:
        unsigned int v59 = a2[v6];
        unsigned int v60 = v59 - 2;
        if (v59 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v61 = v6;
          }
          else {
            uint64_t v61 = 4;
          }
          switch(v61)
          {
            case 1:
              int v62 = *a2;
              goto LABEL_207;
            case 2:
              int v62 = *(unsigned __int16 *)a2;
              goto LABEL_207;
            case 3:
              int v62 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_207;
            case 4:
              int v62 = *(_DWORD *)a2;
LABEL_207:
              int v92 = (v62 | (v60 << (8 * v6))) + 2;
              unsigned int v59 = v62 + 2;
              if (v6 < 4) {
                unsigned int v59 = v92;
              }
              break;
            default:
              break;
          }
        }
        BOOL v93 = v59 == 1;
        if (v59 == 1) {
          uint64_t v94 = v9;
        }
        else {
          uint64_t v94 = v5;
        }
        if (v59 == 1) {
          uint64_t v95 = v8;
        }
        else {
          uint64_t v95 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v94 + 32))(a1, a2, v95);
        a1[v6] = v93;
        char v79 = 5;
        goto LABEL_240;
      case 6u:
        unsigned int v63 = a2[v6];
        unsigned int v64 = v63 - 2;
        if (v63 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v65 = v6;
          }
          else {
            uint64_t v65 = 4;
          }
          switch(v65)
          {
            case 1:
              int v66 = *a2;
              goto LABEL_219;
            case 2:
              int v66 = *(unsigned __int16 *)a2;
              goto LABEL_219;
            case 3:
              int v66 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_219;
            case 4:
              int v66 = *(_DWORD *)a2;
LABEL_219:
              int v96 = (v66 | (v64 << (8 * v6))) + 2;
              unsigned int v63 = v66 + 2;
              if (v6 < 4) {
                unsigned int v63 = v96;
              }
              break;
            default:
              break;
          }
        }
        BOOL v97 = v63 == 1;
        if (v63 == 1) {
          uint64_t v98 = v9;
        }
        else {
          uint64_t v98 = v5;
        }
        if (v63 == 1) {
          uint64_t v99 = v8;
        }
        else {
          uint64_t v99 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v98 + 32))(a1, a2, v99);
        a1[v6] = v97;
        char v79 = 6;
        goto LABEL_240;
      case 7u:
        unsigned int v67 = a2[v6];
        unsigned int v68 = v67 - 2;
        if (v67 >= 2)
        {
          if (v6 <= 3) {
            uint64_t v69 = v6;
          }
          else {
            uint64_t v69 = 4;
          }
          switch(v69)
          {
            case 1:
              int v70 = *a2;
              goto LABEL_231;
            case 2:
              int v70 = *(unsigned __int16 *)a2;
              goto LABEL_231;
            case 3:
              int v70 = *(unsigned __int16 *)a2 | (a2[2] << 16);
              goto LABEL_231;
            case 4:
              int v70 = *(_DWORD *)a2;
LABEL_231:
              int v100 = (v70 | (v68 << (8 * v6))) + 2;
              unsigned int v67 = v70 + 2;
              if (v6 < 4) {
                unsigned int v67 = v100;
              }
              break;
            default:
              break;
          }
        }
        BOOL v101 = v67 == 1;
        if (v67 == 1) {
          uint64_t v102 = v9;
        }
        else {
          uint64_t v102 = v5;
        }
        if (v67 == 1) {
          uint64_t v103 = v8;
        }
        else {
          uint64_t v103 = AssociatedTypeWitness;
        }
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v102 + 32))(a1, a2, v103);
        a1[v6] = v101;
        char v79 = 7;
LABEL_240:
        a1[v11] = v79;
        break;
      default:
        memcpy(a1, a2, v11 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_24D5711B0(unsigned __int16 *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1) {
    unint64_t v6 = v5 + 1;
  }
  else {
    unint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF8) {
    goto LABEL_25;
  }
  unint64_t v7 = v6 + 1;
  char v8 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v11 = ((a2 + ~(-1 << v8) - 247) >> v8) + 1;
    if (HIWORD(v11))
    {
      int v9 = *(_DWORD *)((char *)a1 + v7);
      if (!v9) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v11 < 2)
    {
LABEL_25:
      unsigned int v13 = *((unsigned __int8 *)a1 + v6);
      if (v13 >= 9) {
        return (v13 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_25;
  }
LABEL_17:
  int v12 = (v9 - 1) << v8;
  if (v7 > 3) {
    int v12 = 0;
  }
  if (v7)
  {
    if (v7 > 3) {
      LODWORD(v7) = 4;
    }
    switch((int)v7)
    {
      case 2:
        LODWORD(v7) = *a1;
        break;
      case 3:
        LODWORD(v7) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v7) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v7) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v7 | v12) + 248;
}

void sub_24D571378(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  unint64_t v6 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v7 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v7 <= v6) {
    unint64_t v7 = v6;
  }
  if ((v7 & 0xFFFFFFFFFFFFFFF8) + 24 <= v7 + 1) {
    unint64_t v8 = v7 + 1;
  }
  else {
    unint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  size_t v9 = v8 + 1;
  if (a3 < 0xF8)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 + ~(-1 << (8 * v9)) - 247) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (a2 > 0xF7)
  {
    unsigned int v11 = a2 - 248;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v8 != -1)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v8 + 1);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x24D5715B4);
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v10)
    {
      case 1:
        a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v8] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24D5715DC(unsigned __int8 *a1)
{
  unint64_t v2 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v3 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v3 <= v2) {
    unint64_t v3 = v2;
  }
  if ((v3 & 0xFFFFFFFFFFFFFFF8) + 24 <= v3 + 1) {
    unint64_t v4 = v3 + 1;
  }
  else {
    unint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  uint64_t result = a1[v4];
  if (result >= 8)
  {
    if (v4 <= 3) {
      uint64_t v6 = v4;
    }
    else {
      uint64_t v6 = 4;
    }
    switch(v6)
    {
      case 1:
        int v7 = *a1;
        goto LABEL_15;
      case 2:
        int v7 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v7 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v7 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v8 = (v7 | ((result - 8) << (8 * v4))) + 8;
        unsigned int v9 = v7 + 8;
        if (v4 >= 4) {
          uint64_t result = v9;
        }
        else {
          uint64_t result = v8;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_24D571720(unsigned char *a1, unsigned int a2)
{
  unint64_t v4 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  unint64_t v5 = *(void *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 64);
  if (v5 <= v4) {
    unint64_t v5 = v4;
  }
  if ((v5 & 0xFFFFFFFFFFFFFFF8) + 24 <= v5 + 1) {
    size_t v6 = v5 + 1;
  }
  else {
    size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 24;
  }
  if (a2 > 7)
  {
    unsigned int v7 = a2 - 8;
    if (v6 < 4)
    {
      unsigned int v8 = v7 >> (8 * v6);
      int v9 = v7 & ~(-1 << (8 * v6));
      a1[v6] = v8 + 8;
      bzero(a1, v6);
      if (v6 == 3)
      {
        *(_WORD *)a1 = v9;
        a1[2] = BYTE2(v9);
      }
      else if (v6 == 2)
      {
        *(_WORD *)a1 = v9;
      }
      else
      {
        *a1 = v9;
      }
    }
    else
    {
      a1[v6] = 8;
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else
  {
    a1[v6] = a2;
  }
}

uint64_t sub_24D571868()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24D5718B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  MEMORY[0x270FA5388](a1);
  unint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 1;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      int v10 = &v4[*(int *)(TupleTypeMetadata3 + 48)];
      unsigned int v11 = *(void (**)(char *, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);
      v11(&v4[*(int *)(TupleTypeMetadata3 + 64)], AssociatedTypeWitness);
      v11(v10, AssociatedTypeWitness);
      v11(v4, AssociatedTypeWitness);
      goto LABEL_6;
    case 2:
      uint64_t v12 = swift_getAssociatedTypeWitness();
      uint64_t v13 = sub_24DCCA3F8();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(&v4[*(int *)(TupleTypeMetadata2 + 48)], v13);
      (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v4, v12);
      goto LABEL_6;
    case 3:
    case 4:
    case 6:
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
LABEL_6:
      uint64_t result = 1;
      break;
    case 7:
      return result;
    default:
      uint64_t v7 = swift_getAssociatedTypeWitness();
      (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_24D571B94(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v208 = *(void (**)(char *, uint64_t))(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v213 = (char *)&v182 - v6;
  uint64_t v7 = *(void **)(a2 + 16);
  unsigned int v8 = *(char **)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v210 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v211 = AssociatedTypeWitness;
  uint64_t v10 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v193 = (char *)&v182 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  uint64_t v192 = (char *)&v182 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v185 = (char *)&v182 - v15;
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v184 = (char *)&v182 - v17;
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v194 = (char *)&v182 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unsigned int v197 = (char *)&v182 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v189 = (char *)&v182 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v188 = (char *)&v182 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v191 = (char *)&v182 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v212 = (char *)&v182 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v196 = (char *)&v182 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  unsigned int v190 = (char *)&v182 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v195 = (char *)&v182 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v201 = (char *)&v182 - v37;
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  uint64_t v200 = (char *)&v182 - v39;
  uint64_t v40 = *(void *)(a2 - 8);
  uint64_t v41 = MEMORY[0x270FA5388](v38);
  uint64_t v198 = (char *)&v182 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v205 = (char *)&v182 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  unsigned int v47 = (char *)&v182 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v187 = (char *)&v182 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  uint64_t v202 = (char *)&v182 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  uint64_t v186 = (char *)&v182 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  unsigned int v203 = (char *)&v182 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v183 = (char *)&v182 - v57;
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v204 = (char *)&v182 - v59;
  uint64_t v60 = MEMORY[0x270FA5388](v58);
  int v62 = (char *)&v182 - v61;
  uint64_t v63 = MEMORY[0x270FA5388](v60);
  uint64_t v199 = (char *)&v182 - v64;
  MEMORY[0x270FA5388](v63);
  int v66 = (char *)&v182 - v65;
  unsigned int v67 = a1;
  uint64_t v206 = v8;
  uint64_t v207 = v7;
  LOBYTE(a1) = sub_24D5735D0(v3, a1, v7, v8);
  unsigned int v68 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v68(v66, v3, a2);
  uint64_t v209 = v40;
  if (a1)
  {
    char v69 = sub_24D5718B0(a2);
    int v70 = *(void (**)(char *, uint64_t))(v40 + 8);
    v70(v66, a2);
    if (v69)
    {
LABEL_58:
      char v118 = 1;
      return v118 & 1;
    }
  }
  else
  {
    int v70 = *(void (**)(char *, uint64_t))(v40 + 8);
    v70(v66, a2);
  }
  int v71 = v213;
  BOOL v72 = &v213[*(int *)(TupleTypeMetadata2 + 48)];
  v68(v213, v3, a2);
  v68(v72, (uint64_t)v67, a2);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v74 = v212;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      uint64_t v94 = v205;
      v68(v205, (uint64_t)v71, a2);
      uint64_t v77 = v211;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v96 = (uint64_t)&v94[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v97 = *(int *)(TupleTypeMetadata3 + 64);
      uint64_t v98 = v72;
      uint64_t v99 = &v94[v97];
      int v100 = v98;
      int v101 = swift_getEnumCaseMultiPayload();
      if (v101 == 6)
      {
        TupleTypeMetadata2 = v96;
        uint64_t v136 = v210;
        unint64_t v137 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
        v137(v197, v205, v77);
        uint64_t v115 = v194;
        v137(v194, v100, v77);
        uint64_t v116 = *(void (**)(char *, uint64_t))(v136 + 8);
        v116(v99, v77);
        v116((char *)TupleTypeMetadata2, v77);
        uint64_t v117 = v197;
        goto LABEL_39;
      }
      if (v101 == 3)
      {
        uint64_t v124 = v210;
        uint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 32);
        TupleTypeMetadata2 = (v210 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v125(v196, v96, v77);
        v125(v74, (uint64_t)v99, v77);
        uint64_t v126 = v191;
        v125(v191, (uint64_t)v100, v77);
        uint64_t v127 = *(void (**)(char *, uint64_t))(v124 + 8);
        uint64_t v128 = v70;
        v127(v205, v77);
LABEL_43:
        v128(v71, a2);
        swift_getAssociatedConformanceWitness();
        unsigned int v146 = v196;
        char v147 = sub_24DCC9798();
        v127(v146, v77);
        char v148 = v192;
        v125(v192, (uint64_t)v126, v77);
        uint64_t v149 = v193;
        v125(v193, (uint64_t)v212, v77);
        if (v147) {
          char v118 = 1;
        }
        else {
          char v118 = sub_24DCC9798();
        }
        v127(v149, v77);
        v127(v148, v77);
      }
      else
      {
        uint64_t v102 = v210;
        if (v101 != 2)
        {
          uint64_t v139 = *(void (**)(char *, uint64_t))(v210 + 8);
          v139(v99, v77);
          v139((char *)v96, v77);
          v139(v205, v77);
          goto LABEL_28;
        }
        uint64_t v103 = sub_24DCCA3F8();
        uint64_t v212 = &v100[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        TupleTypeMetadata2 = v96;
        uint64_t v208 = v70;
        uint64_t v104 = *(void (**)(char *, char *, uint64_t))(v102 + 32);
        v104(v195, v205, v77);
        int v105 = v190;
        v104(v190, v100, v77);
        BOOL v106 = v208;
        (*(void (**)(char *, uint64_t))(*(void *)(v103 - 8) + 8))(v212, v103);
        uint64_t v107 = *(void (**)(char *, uint64_t))(v102 + 8);
        v107(v99, v77);
        v107((char *)TupleTypeMetadata2, v77);
LABEL_51:
        v106(v71, a2);
        swift_getAssociatedConformanceWitness();
        uint64_t v160 = v195;
        char v118 = sub_24DCC9798();
        v107(v105, v77);
        v107(v160, v77);
      }
      return v118 & 1;
    case 2:
      uint64_t v82 = v199;
      v68(v199, (uint64_t)v71, a2);
      uint64_t v77 = v211;
      uint64_t v83 = sub_24DCCA3F8();
      uint64_t v84 = swift_getTupleTypeMetadata2();
      BOOL v85 = v72;
      uint64_t v86 = v84;
      uint64_t v212 = &v82[*(int *)(v84 + 48)];
      uint64_t v87 = v85;
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          BOOL v72 = v87;
          v68(v62, (uint64_t)v87, a2);
          uint64_t v78 = v210;
          int v88 = v212;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v212, 1, v77) == 1)
          {
            BOOL v89 = *(void (**)(char *, uint64_t))(v78 + 8);
            v89(v62, v77);
            v89(v82, v77);
            int v71 = v213;
            goto LABEL_55;
          }
          uint64_t v182 = v72;
          uint64_t v176 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
          uint64_t v177 = v200;
          v176(v200, v88, v77);
          uint64_t v178 = v82;
          uint64_t v122 = v201;
          v176(v201, v62, v77);
          (*(void (**)(char *, uint64_t))(v78 + 8))(v178, v77);
          BOOL v81 = v177;
          v70(v182, a2);
          int v71 = v213;
          goto LABEL_33;
        case 1u:
          uint64_t v154 = v204;
          uint64_t v182 = v87;
          v68(v204, (uint64_t)v87, a2);
          uint64_t v155 = swift_getTupleTypeMetadata3();
          uint64_t v156 = &v154[*(int *)(v155 + 48)];
          uint64_t v157 = &v154[*(int *)(v155 + 64)];
          uint64_t v208 = v70;
          uint64_t v158 = v210;
          uint64_t v159 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          v159(v195, v82, v77);
          int v105 = v190;
          v159(v190, v154, v77);
          uint64_t v107 = *(void (**)(char *, uint64_t))(v158 + 8);
          v107(v157, v77);
          v107(v156, v77);
          BOOL v106 = v208;
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          v106(v182, a2);
          int v71 = v213;
          goto LABEL_51;
        case 2u:
          uint64_t v161 = v82;
          uint64_t v162 = v204;
          uint64_t v182 = v87;
          v68(v204, (uint64_t)v87, a2);
          TupleTypeMetadata2 = (uint64_t)&v162[*(int *)(v86 + 48)];
          uint64_t v163 = v210;
          uint64_t v164 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          uint64_t v165 = v184;
          v164(v184, v161, v77);
          uint64_t v166 = v185;
          v164(v185, v162, v77);
          swift_getAssociatedConformanceWitness();
          char v118 = sub_24DCC9798();
          uint64_t v167 = *(void (**)(char *, uint64_t))(v163 + 8);
          v167(v166, v77);
          v167(v165, v77);
          uint64_t v168 = *(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8);
          v168(TupleTypeMetadata2, v83);
          v168((uint64_t)v212, v83);
          v70(v182, a2);
          v70(v213, a2);
          return v118 & 1;
        case 3u:
          uint64_t v169 = v183;
          v68(v183, (uint64_t)v87, a2);
          uint64_t v170 = v210;
          uint64_t v171 = v212;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v212, 1, v77) == 1)
          {
            uint64_t v172 = *(void (**)(char *, uint64_t))(v170 + 8);
            v172(v169, v77);
            v172(v82, v77);
            int v71 = v213;
            BOOL v72 = v87;
            goto LABEL_55;
          }
          uint64_t v179 = *(void (**)(char *, char *, uint64_t))(v170 + 32);
          v179(v188, v171, v77);
          v179(v189, v169, v77);
          uint64_t v116 = *(void (**)(char *, uint64_t))(v170 + 8);
          v116(v82, v77);
          int v71 = v213;
          break;
        case 4u:
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          (*(void (**)(char *, uint64_t))(v210 + 8))(v82, v77);
          v70(v87, a2);
          int v71 = v213;
          goto LABEL_57;
        default:
          (*(void (**)(char *, uint64_t))(*(void *)(v83 - 8) + 8))(v212, v83);
          (*(void (**)(char *, uint64_t))(v210 + 8))(v82, v77);
          int v71 = v213;
          goto LABEL_28;
      }
      goto LABEL_65;
    case 3:
      unsigned int v47 = v202;
      v68(v202, (uint64_t)v71, a2);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          char v79 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v78 = v210;
          uint64_t v182 = v72;
          int v80 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
          BOOL v81 = v200;
          uint64_t v108 = v200;
          uint64_t v109 = v47;
          goto LABEL_31;
        case 1u:
          uint64_t v140 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v141 = v47;
          uint64_t v77 = v211;
          uint64_t v142 = swift_getTupleTypeMetadata3();
          uint64_t v143 = &v140[*(int *)(v142 + 48)];
          uint64_t v144 = &v140[*(int *)(v142 + 64)];
          uint64_t v145 = v210;
          uint64_t v182 = v72;
          uint64_t v125 = *(void (**)(char *, uint64_t, uint64_t))(v210 + 32);
          TupleTypeMetadata2 = (v210 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
          v125(v196, (uint64_t)v143, v77);
          v125(v74, (uint64_t)v144, v77);
          uint64_t v126 = v191;
          v125(v191, (uint64_t)v141, v77);
          uint64_t v127 = *(void (**)(char *, uint64_t))(v145 + 8);
          uint64_t v128 = v70;
          v127(v204, v77);
          v70(v182, a2);
          goto LABEL_43;
        case 2u:
          uint64_t v150 = v187;
          v68(v187, (uint64_t)v72, a2);
          uint64_t v77 = v211;
          sub_24DCCA3F8();
          uint64_t v151 = &v150[*(int *)(swift_getTupleTypeMetadata2() + 48)];
          uint64_t v152 = v210;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v151, 1, v77) == 1)
          {
            uint64_t v153 = *(void (**)(char *, uint64_t))(v152 + 8);
            v153(v150, v77);
            v153(v202, v77);
            goto LABEL_55;
          }
          uint64_t v87 = v72;
          uint64_t v175 = *(void (**)(char *, char *, uint64_t))(v152 + 32);
          v175(v188, v151, v77);
          v175(v189, v202, v77);
          uint64_t v116 = *(void (**)(char *, uint64_t))(v152 + 8);
          v116(v187, v77);
          break;
        case 7u:
          (*(void (**)(char *, uint64_t))(v210 + 8))(v47, v211);
          goto LABEL_55;
        default:
          goto LABEL_22;
      }
LABEL_65:
      v70(v87, a2);
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      uint64_t v180 = v188;
      uint64_t v181 = v189;
      char v118 = sub_24DCC9798();
      v116(v181, v77);
      uint64_t v138 = v180;
      goto LABEL_40;
    case 4:
      if (swift_getEnumCaseMultiPayload() != 2) {
        goto LABEL_28;
      }
      uint64_t v90 = v72;
      uint64_t v91 = v211;
      uint64_t v92 = sub_24DCCA3F8();
      uint64_t v93 = swift_getTupleTypeMetadata2();
      (*(void (**)(char *, uint64_t))(*(void *)(v92 - 8) + 8))(&v90[*(int *)(v93 + 48)], v92);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v90, v91);
LABEL_57:
      v70(v71, a2);
      goto LABEL_58;
    case 5:
      v68(v47, (uint64_t)v71, a2);
      if (swift_getEnumCaseMultiPayload())
      {
LABEL_22:
        (*(void (**)(char *, uint64_t))(v210 + 8))(v47, v211);
        goto LABEL_28;
      }
      uint64_t v78 = v210;
      uint64_t v119 = v72;
      uint64_t v120 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      BOOL v81 = v200;
      int v121 = v47;
      uint64_t v77 = v211;
      v120(v200, v121, v211);
      uint64_t v122 = v201;
      v120(v201, v119, v77);
      goto LABEL_33;
    case 6:
      uint64_t v110 = v198;
      v68(v198, (uint64_t)v71, a2);
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        (*(void (**)(char *, uint64_t))(v210 + 8))(v110, v211);
        goto LABEL_28;
      }
      uint64_t v77 = v211;
      uint64_t v111 = swift_getTupleTypeMetadata3();
      TupleTypeMetadata2 = (uint64_t)&v72[*(int *)(v111 + 48)];
      uint64_t v212 = &v72[*(int *)(v111 + 64)];
      uint64_t v112 = v210;
      long long v113 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      uint64_t v114 = v197;
      v113(v197, v110, v77);
      uint64_t v115 = v194;
      v113(v194, v72, v77);
      uint64_t v116 = *(void (**)(char *, uint64_t))(v112 + 8);
      v116(v212, v77);
      v116((char *)TupleTypeMetadata2, v77);
      uint64_t v117 = v114;
LABEL_39:
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      char v118 = sub_24DCC9798();
      v116(v115, v77);
      uint64_t v138 = v117;
LABEL_40:
      v116(v138, v77);
      return v118 & 1;
    case 7:
      if (swift_getEnumCaseMultiPayload() == 3) {
        goto LABEL_55;
      }
      goto LABEL_28;
    default:
      int v75 = v203;
      v68(v203, (uint64_t)v71, a2);
      int v76 = swift_getEnumCaseMultiPayload();
      if (v76 == 2)
      {
        uint64_t v129 = v186;
        v68(v186, (uint64_t)v72, a2);
        uint64_t v130 = v211;
        uint64_t v131 = sub_24DCCA3F8();
        uint64_t v132 = v72;
        char v133 = &v129[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        uint64_t v134 = v210;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v133, 1, v130) == 1)
        {
          uint64_t v135 = *(void (**)(char *, uint64_t))(v134 + 8);
          v135(v129, v130);
          v135(v203, v130);
          BOOL v72 = v132;
LABEL_55:
          v70(v72, a2);
          v70(v71, a2);
          goto LABEL_58;
        }
        (*(void (**)(char *, uint64_t))(*(void *)(v131 - 8) + 8))(v133, v131);
        uint64_t v174 = *(void (**)(char *, uint64_t))(v134 + 8);
        v174(v129, v130);
        v174(v203, v130);
        goto LABEL_28;
      }
      if (v76 != 5)
      {
        uint64_t v78 = v210;
        uint64_t v77 = v211;
        if (v76 == 3)
        {
          char v79 = v204;
          v68(v204, (uint64_t)v72, a2);
          uint64_t v182 = v72;
          int v80 = *(void (**)(char *, char *, uint64_t))(v78 + 32);
          BOOL v81 = v200;
          v80(v200, v75, v77);
          goto LABEL_32;
        }
        (*(void (**)(char *, uint64_t))(v210 + 8))(v75, v211);
LABEL_28:
        (*((void (**)(char *, uint64_t))v208 + 1))(v71, TupleTypeMetadata2);
        char v118 = 0;
        return v118 & 1;
      }
      char v79 = v204;
      v68(v204, (uint64_t)v72, a2);
      uint64_t v78 = v210;
      uint64_t v182 = v72;
      int v80 = *(void (**)(char *, char *, uint64_t))(v210 + 32);
      BOOL v81 = v200;
      uint64_t v108 = v200;
      uint64_t v109 = v75;
LABEL_31:
      uint64_t v77 = v211;
      v80(v108, v109, v211);
LABEL_32:
      uint64_t v122 = v201;
      v80(v201, v79, v77);
      v70(v182, a2);
LABEL_33:
      v70(v71, a2);
      swift_getAssociatedConformanceWitness();
      char v118 = sub_24DCC9798();
      uint64_t v123 = *(void (**)(char *, uint64_t))(v78 + 8);
      v123(v122, v77);
      v123(v81, v77);
      return v118 & 1;
  }
}

uint64_t sub_24D5735D0(uint64_t a1, char *a2, void *a3, char *a4)
{
  uint64_t v165 = a1;
  uint64_t v166 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24DCCA3F8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v138 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  char v147 = (char *)&v136 - v9;
  uint64_t v154 = v7;
  uint64_t v151 = *(void *)(v7 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  unint64_t v137 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = MEMORY[0x270FA5388](v10);
  char v148 = (char *)&v136 - v13;
  uint64_t v14 = MEMORY[0x270FA5388](v12);
  uint64_t v156 = (char *)&v136 - v15;
  uint64_t v163 = AssociatedTypeWitness;
  uint64_t v164 = *(void **)(AssociatedTypeWitness - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v143 = (char *)&v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = MEMORY[0x270FA5388](v16);
  uint64_t v142 = (char *)&v136 - v19;
  uint64_t v20 = MEMORY[0x270FA5388](v18);
  unsigned int v146 = (char *)&v136 - v21;
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v141 = (char *)&v136 - v23;
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v136 = (char *)&v136 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v150 = (char *)&v136 - v27;
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  uint64_t v149 = (char *)&v136 - v29;
  uint64_t v30 = MEMORY[0x270FA5388](v28);
  uint64_t v144 = (char *)&v136 - v31;
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v155 = (char *)&v136 - v33;
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  uint64_t v157 = (char *)&v136 - v35;
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v145 = (char *)&v136 - v37;
  MEMORY[0x270FA5388](v36);
  uint64_t v140 = (char *)&v136 - v38;
  uint64_t v159 = a4;
  uint64_t v160 = a3;
  uint64_t v39 = type metadata accessor for JobLockRule();
  uint64_t v40 = *(void *)(v39 - 8);
  uint64_t v41 = MEMORY[0x270FA5388](v39);
  uint64_t v153 = (char *)&v136 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = MEMORY[0x270FA5388](v41);
  uint64_t v152 = (char *)&v136 - v44;
  uint64_t v45 = MEMORY[0x270FA5388](v43);
  unsigned int v47 = (char *)&v136 - v46;
  uint64_t v48 = MEMORY[0x270FA5388](v45);
  uint64_t v50 = (char *)&v136 - v49;
  uint64_t v51 = MEMORY[0x270FA5388](v48);
  uint64_t v53 = (char *)&v136 - v52;
  uint64_t v54 = MEMORY[0x270FA5388](v51);
  uint64_t v158 = (char *)&v136 - v55;
  MEMORY[0x270FA5388](v54);
  uint64_t v57 = (char *)&v136 - v56;
  uint64_t v58 = swift_getTupleTypeMetadata2();
  uint64_t v162 = *(char **)(v58 - 8);
  uint64_t v59 = MEMORY[0x270FA5388](v58);
  uint64_t v61 = (char *)&v136 - v60;
  int v62 = (char *)&v136 + *(int *)(v59 + 48) - v60;
  uint64_t v161 = (char *)v40;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 16);
  v63((char *)&v136 - v60, v165, v39);
  v63(v62, (uint64_t)v166, v39);
  uint64_t v166 = v61;
  uint64_t v64 = v39;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      char v69 = v158;
      uint64_t v65 = v166;
      v63(v158, (uint64_t)v166, v64);
      uint64_t v70 = v163;
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v72 = *(int *)(TupleTypeMetadata3 + 48);
      uint64_t v73 = &v69[v72];
      uint64_t v74 = *(int *)(TupleTypeMetadata3 + 64);
      int v75 = &v69[v74];
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v117 = (void (*)(char *, uint64_t))v164[1];
        v117(v75, v70);
        v117(v73, v70);
        v117(v69, v70);
        goto LABEL_30;
      }
      uint64_t v165 = v64;
      int v76 = &v62[v72];
      uint64_t v162 = &v62[v74];
      uint64_t v77 = v164;
      uint64_t v78 = (void (*)(char *, char *, uint64_t))v164[4];
      char v79 = v145;
      v78(v145, v62, v70);
      v78(v157, v73, v70);
      v78(v155, v75, v70);
      int v80 = v144;
      v78(v144, v76, v70);
      v78(v149, v162, v70);
      swift_getAssociatedConformanceWitness();
      BOOL v81 = v158;
      LOBYTE(v76) = sub_24DCC9798();
      uint64_t v82 = (void (*)(char *, uint64_t))v77[1];
      v82(v81, v70);
      if (v76 & 1) != 0 && (uint64_t v83 = v80, (sub_24DCC9798()))
      {
        uint64_t v84 = v149;
        char v85 = sub_24DCC9798();
        v82(v84, v70);
        v82(v83, v70);
        v82(v155, v70);
        v82(v157, v70);
        v82(v79, v70);
      }
      else
      {
        v82(v149, v70);
        v82(v80, v70);
        v82(v155, v70);
        v82(v157, v70);
        v82(v79, v70);
        char v85 = 0;
      }
      uint64_t v108 = v161;
      uint64_t v58 = v165;
      goto LABEL_31;
    case 2u:
      v63(v53, (uint64_t)v166, v39);
      uint64_t v86 = v163;
      uint64_t v87 = v154;
      uint64_t v88 = *(int *)(swift_getTupleTypeMetadata2() + 48);
      if (swift_getEnumCaseMultiPayload() != 2)
      {
        (*(void (**)(char *, uint64_t))(v151 + 8))(&v53[v88], v87);
        ((void (*)(char *, uint64_t))v164[1])(v53, v86);
        uint64_t v65 = v166;
        goto LABEL_30;
      }
      uint64_t v165 = v64;
      uint64_t v162 = &v62[v88];
      BOOL v89 = v164;
      uint64_t v90 = (char *)(v164 + 4);
      uint64_t v158 = (char *)v164[4];
      ((void (*)(char *, char *, uint64_t))v158)(v150, v62, v86);
      uint64_t v91 = v151;
      uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
      v92(v156, &v53[v88], v87);
      uint64_t v93 = v148;
      v92(v148, v162, v87);
      uint64_t v94 = *(char **)(*(void *)(swift_getAssociatedConformanceWitness() + 32) + 8);
      char v95 = sub_24DCC9798();
      uint64_t v98 = (char *)v89[1];
      uint64_t v97 = v89 + 1;
      uint64_t v96 = v98;
      ((void (*)(char *, uint64_t))v98)(v53, v86);
      uint64_t v99 = v86;
      if ((v95 & 1) == 0)
      {
        uint64_t v123 = *(void (**)(char *, uint64_t))(v91 + 8);
        v123(v93, v87);
        v123(v156, v87);
        ((void (*)(char *, uint64_t))v96)(v150, v86);
        char v85 = 0;
        uint64_t v108 = v161;
        goto LABEL_35;
      }
      uint64_t v160 = v97;
      uint64_t v155 = v94;
      uint64_t v157 = v90;
      uint64_t v162 = v96;
      int v100 = v147;
      int v101 = &v147[*(int *)(TupleTypeMetadata2 + 48)];
      uint64_t v102 = *(void (**)(char *, char *, uint64_t))(v91 + 16);
      uint64_t v103 = v156;
      v102(v147, v156, v87);
      uint64_t v159 = v101;
      v102(v101, v93, v87);
      uint64_t v104 = (uint64_t (*)(char *, uint64_t, uint64_t))v164[6];
      if (v104(v100, 1, v99) == 1)
      {
        int v105 = *(void (**)(char *, uint64_t))(v91 + 8);
        v105(v93, v87);
        v105(v103, v87);
        ((void (*)(char *, uint64_t))v162)(v150, v99);
        int v106 = v104(v159, 1, v99);
        uint64_t v107 = v161;
        if (v106 == 1)
        {
          v105(v147, v87);
          char v85 = 1;
          uint64_t v108 = v107;
LABEL_35:
          uint64_t v58 = v165;
          uint64_t v65 = v166;
          goto LABEL_31;
        }
        goto LABEL_40;
      }
      uint64_t v124 = v137;
      v102(v137, v147, v87);
      uint64_t v125 = v124;
      uint64_t v126 = v156;
      uint64_t v127 = v159;
      int v128 = v104(v159, 1, v99);
      uint64_t v107 = v161;
      uint64_t v129 = v150;
      if (v128 == 1)
      {
        uint64_t v130 = *(void (**)(char *, uint64_t))(v91 + 8);
        v130(v148, v87);
        v130(v126, v87);
        uint64_t v131 = v162;
        ((void (*)(char *, uint64_t))v162)(v129, v99);
        ((void (*)(char *, uint64_t))v131)(v125, v99);
LABEL_40:
        (*(void (**)(char *, uint64_t))(v138 + 8))(v147, TupleTypeMetadata2);
        uint64_t v58 = v165;
        uint64_t v65 = v166;
        goto LABEL_43;
      }
      uint64_t v132 = v136;
      ((void (*)(char *, char *, uint64_t))v158)(v136, v127, v99);
      LODWORD(v164) = sub_24DCC9798();
      char v133 = v132;
      uint64_t v134 = v162;
      ((void (*)(char *, uint64_t))v162)(v133, v99);
      uint64_t v135 = *(void (**)(char *, uint64_t))(v91 + 8);
      v135(v148, v87);
      v135(v126, v87);
      ((void (*)(char *, uint64_t))v134)(v129, v99);
      ((void (*)(char *, uint64_t))v134)(v125, v99);
      v135(v147, v87);
      uint64_t v58 = v165;
      uint64_t v65 = v166;
      if (v164)
      {
        char v85 = 1;
        uint64_t v108 = v107;
        goto LABEL_31;
      }
LABEL_43:
      char v85 = 0;
      uint64_t v108 = v107;
LABEL_31:
      (*((void (**)(char *, uint64_t))v108 + 1))(v65, v58);
      return v85 & 1;
    case 3u:
      uint64_t v65 = v166;
      v63(v50, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() == 3)
      {
        uint64_t v109 = v163;
        uint64_t v110 = v164;
        uint64_t v111 = v141;
        ((void (*)(char *, char *, uint64_t))v164[4])(v141, v62, v163);
        swift_getAssociatedConformanceWitness();
        char v85 = sub_24DCC9798();
        uint64_t v112 = (void (*)(char *, uint64_t))v110[1];
        v112(v111, v109);
        v112(v50, v109);
        goto LABEL_23;
      }
      ((void (*)(char *, uint64_t))v164[1])(v50, v163);
      goto LABEL_30;
    case 4u:
      uint64_t v65 = v166;
      v63(v47, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 4) {
        goto LABEL_24;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      unsigned int v68 = v146;
      goto LABEL_22;
    case 5u:
      unsigned int v47 = v152;
      uint64_t v65 = v166;
      v63(v152, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 5) {
        goto LABEL_24;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      long long v113 = &v167;
      goto LABEL_21;
    case 6u:
      unsigned int v47 = v153;
      uint64_t v65 = v166;
      v63(v153, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload() != 6)
      {
LABEL_24:
        ((void (*)(char *, uint64_t))v164[1])(v47, v163);
        goto LABEL_30;
      }
      int v66 = v164;
      unsigned int v67 = (void (*)(char *, char *, uint64_t))v164[4];
      long long v113 = &v168;
LABEL_21:
      unsigned int v68 = (char *)*(v113 - 32);
LABEL_22:
      uint64_t v114 = v163;
      v67(v68, v62, v163);
      swift_getAssociatedConformanceWitness();
      char v85 = sub_24DCC9798();
      uint64_t v115 = (void (*)(char *, uint64_t))v66[1];
      v115(v68, v114);
      v115(v47, v114);
      goto LABEL_23;
    case 7u:
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v65 = v166;
      if (EnumCaseMultiPayload != 7) {
        goto LABEL_30;
      }
      char v85 = 1;
      goto LABEL_23;
    default:
      uint64_t v65 = v166;
      v63(v57, (uint64_t)v166, v39);
      if (swift_getEnumCaseMultiPayload())
      {
        ((void (*)(char *, uint64_t))v164[1])(v57, v163);
LABEL_30:
        char v85 = 0;
        uint64_t v108 = v162;
      }
      else
      {
        uint64_t v119 = v163;
        uint64_t v120 = v164;
        int v121 = v140;
        ((void (*)(char *, char *, uint64_t))v164[4])(v140, v62, v163);
        swift_getAssociatedConformanceWitness();
        char v85 = sub_24DCC9798();
        uint64_t v122 = (void (*)(char *, uint64_t))v120[1];
        v122(v121, v119);
        v122(v57, v119);
LABEL_23:
        uint64_t v108 = v161;
        uint64_t v58 = v39;
      }
      goto LABEL_31;
  }
}

unint64_t sub_24D574708(uint64_t a1)
{
  uint64_t v2 = v1;
  unint64_t v4 = 0xD000000000000010;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v38 = *(void *)(a1 + 24);
  uint64_t v39 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v8);
  uint64_t v37 = (char *)&v36 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v18 = (char *)&v36 - v17;
  uint64_t v19 = MEMORY[0x270FA5388](v16);
  uint64_t v21 = (char *)&v36 - v20;
  MEMORY[0x270FA5388](v19);
  uint64_t v23 = (char *)&v36 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v23, v2, a1);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v26 = &v23[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v27 = &v23[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      uint64_t v21 = v18;
      v28(v18, v23, AssociatedTypeWitness);
      v28(v15, v26, AssociatedTypeWitness);
      uint64_t v29 = v37;
      v28(v37, v27, AssociatedTypeWitness);
      swift_getAssociatedConformanceWitness();
      if (sub_24DCC9798())
      {
        unint64_t v40 = 0;
        unint64_t v41 = 0xE000000000000000;
        sub_24DCCA728();
      }
      else
      {
        unint64_t v40 = 0;
        unint64_t v41 = 0xE000000000000000;
        sub_24DCCA728();
        sub_24DCC9968();
        sub_24DCCADC8();
      }
      sub_24DCC9968();
      sub_24DCCADC8();
      sub_24DCC9968();
      sub_24DCCADC8();
      sub_24DCC9968();
      unint64_t v4 = v40;
      uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
      v33(v29, AssociatedTypeWitness);
      uint64_t v34 = v15;
      goto LABEL_12;
    case 2u:
      sub_24DCCA3F8();
      uint64_t v30 = &v23[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      int v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v30, 1, AssociatedTypeWitness);
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v32(v21, v23, AssociatedTypeWitness);
      if (v31 == 1)
      {
        unint64_t v40 = 0;
        unint64_t v41 = 0xE000000000000000;
LABEL_8:
        sub_24DCC9968();
        swift_getAssociatedConformanceWitness();
        sub_24DCCADC8();
        sub_24DCC9968();
        unint64_t v4 = v40;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v21, AssociatedTypeWitness);
      }
      else
      {
        v32(v10, v30, AssociatedTypeWitness);
        unint64_t v40 = 0;
        unint64_t v41 = 0xE000000000000000;
        sub_24DCCA728();
        sub_24DCC9968();
        swift_getAssociatedConformanceWitness();
        sub_24DCCADC8();
        sub_24DCC9968();
        sub_24DCCADC8();
        sub_24DCC9968();
        unint64_t v4 = v40;
        uint64_t v33 = *(void (**)(char *, uint64_t))(v7 + 8);
        uint64_t v34 = v10;
LABEL_12:
        v33(v34, AssociatedTypeWitness);
        v33(v21, AssociatedTypeWitness);
      }
      return v4;
    case 4u:
    case 5u:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      sub_24DCCA728();
      goto LABEL_8;
    case 7u:
      return v4;
    default:
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v21, v23, AssociatedTypeWitness);
      unint64_t v40 = 0;
      unint64_t v41 = 0xE000000000000000;
      goto LABEL_8;
  }
}

uint64_t sub_24D574E94(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  v32[3] = a1;
  uint64_t v5 = *(void *)(a2 + 16);
  v32[1] = *(void *)(a2 + 24);
  v32[2] = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = sub_24DCCA3F8();
  v32[0] = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)v32 - v9;
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v8);
  uint64_t v14 = (char *)v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v12);
  uint64_t v17 = (char *)v32 - v16;
  uint64_t v18 = MEMORY[0x270FA5388](v15);
  uint64_t v20 = (char *)v32 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v22, v3, a2);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
      uint64_t v25 = &v22[*(int *)(TupleTypeMetadata3 + 48)];
      uint64_t v26 = &v22[*(int *)(TupleTypeMetadata3 + 64)];
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
      v27(v20, v22, AssociatedTypeWitness);
      v27(v17, v25, AssociatedTypeWitness);
      v27(v14, v26, AssociatedTypeWitness);
      sub_24DCCB008();
      swift_getAssociatedConformanceWitness();
      sub_24DCC9688();
      sub_24DCC9688();
      sub_24DCC9688();
      uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
      v28(v14, AssociatedTypeWitness);
      v28(v17, AssociatedTypeWitness);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v28)(v20, AssociatedTypeWitness);
      break;
    case 2u:
      uint64_t v30 = &v22[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      uint64_t v31 = v32[0];
      (*(void (**)(char *, char *, uint64_t))(v32[0] + 32))(v10, v30, v7);
      sub_24DCCB008();
      swift_getAssociatedConformanceWitness();
      sub_24DCC9688();
      sub_24DCCA408();
      (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v7);
      goto LABEL_5;
    case 7u:
      uint64_t result = sub_24DCCB008();
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v20, v22, AssociatedTypeWitness);
      sub_24DCCB008();
      swift_getAssociatedConformanceWitness();
      sub_24DCC9688();
LABEL_5:
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v20, AssociatedTypeWitness);
      break;
  }
  return result;
}

uint64_t sub_24D575438(uint64_t a1)
{
  sub_24DCCAFF8();
  sub_24D574E94((uint64_t)v3, a1);
  return sub_24DCCB048();
}

uint64_t sub_24D575488(uint64_t a1, uint64_t a2)
{
  sub_24DCCAFF8();
  sub_24D574E94((uint64_t)v4, a2);
  return sub_24DCCB048();
}

uint64_t sub_24D5754D0(uint64_t a1, char *a2, uint64_t a3)
{
  return sub_24D5735D0(a1, a2, *(void **)(a3 + 16), *(char **)(a3 + 24));
}

uint64_t sub_24D5754DC()
{
  return sub_24D575528();
}

uint64_t sub_24D575528()
{
  type metadata accessor for JobLockRule();
  sub_24DCC9D48();
  swift_getWitnessTable();
  swift_getWitnessTable();
  *(void *)(v0 + 16) = sub_24DCC9F38();
  *(void *)(v0 + 24) = sub_24DCC9F38();
  return v0;
}

uint64_t sub_24D57562C()
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC9F28();
  swift_getWitnessTable();
  char v0 = sub_24DCC9B08();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_24D575748()
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC9F28();
  swift_getWitnessTable();
  char v0 = sub_24DCC9B08();
  swift_bridgeObjectRelease();
  return v0 & 1;
}

uint64_t sub_24D575864()
{
  return sub_24D600470(v0, (void (*)(uint64_t *__return_ptr))sub_24D57E874);
}

uint64_t sub_24D5758AC@<X0>(void *a1@<X8>)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC9E88();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  sub_24DCC9E88();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  uint64_t result = sub_24DCC9968();
  *a1 = 0x676E696E6E75723CLL;
  a1[1] = 0xE90000000000003ALL;
  return result;
}

uint64_t sub_24D575A74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_24D575A9C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLockAggregator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24D575AF4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24D575B4C()
{
  return sub_24D575864();
}

uint64_t sub_24D575B70(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  *(void *)(v6 + 64) = a1;
  sub_24D57EC10(a2, v6 + 16);
  *(void *)(v6 + 56) = a3;
  *(_WORD *)(v6 + 72) = 0;
  uint64_t v7 = *(void *)(v6 + 80);
  *(void *)(v6 + 80) = 0;
  *(void *)(v6 + 88) = 0;
  sub_24D43DD74(v7);
  return v6;
}

uint64_t sub_24D575BE0(uint64_t a1, long long *a2, uint64_t a3)
{
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  *(void *)(v3 + 64) = a1;
  sub_24D57EC10(a2, v3 + 16);
  *(void *)(v3 + 56) = a3;
  *(_WORD *)(v3 + 72) = 0;
  uint64_t v5 = *(void *)(v3 + 80);
  *(void *)(v3 + 80) = 0;
  *(void *)(v3 + 88) = 0;
  sub_24D43DD74(v5);
  return v3;
}

uint64_t sub_24D575C30()
{
  return sub_24D60053C(*(void **)(v0 + 64), (void (*)(uint64_t *__return_ptr))sub_24D57EC98) & 1;
}

uint64_t sub_24D575C88@<X0>(void *a1@<X0>, char a2@<W1>, char *a3@<X8>)
{
  uint64_t v84 = a3;
  uint64_t v5 = *(void *)(*a1 + 88);
  uint64_t v83 = *(void *)(*a1 + 80);
  uint64_t v82 = v5;
  uint64_t v6 = type metadata accessor for JobLockRule();
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v6);
  uint64_t v93 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v97 = (char *)&v76 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  int v106 = (char *)&v76 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v15 = (char *)&v76 - v14;
  uint64_t v16 = MEMORY[0x270FA5388](v13);
  uint64_t v96 = (char *)&v76 - v17;
  uint64_t v78 = v18;
  MEMORY[0x270FA5388](v16);
  uint64_t v20 = (char *)&v76 - v19;
  uint64_t v86 = a1[8];
  if (sub_24D57690C((uint64_t)a1))
  {
    uint64_t v21 = (void (*)(uint64_t))a1[10];
    if (v21)
    {
      uint64_t v22 = swift_retain();
      v21(v22);
      sub_24D43DD74((uint64_t)v21);
    }
  }
  uint64_t v87 = a1;
  if ((a2 & 1) == 0)
  {
    swift_beginAccess();
    swift_getWitnessTable();
    swift_bridgeObjectRetain();
    uint64_t v23 = sub_24DCCA958();
    uint64_t v24 = v101;
    uint64_t v25 = v102;
    uint64_t v26 = v104;
    unint64_t v27 = v105;
    int64_t v81 = (unint64_t)(v103 + 64) >> 6;
    uint64_t v92 = v94 + 16;
    uint64_t v88 = (void (**)(char *, uint64_t))(v94 + 32);
    char v95 = (uint64_t *)(v94 + 8);
    uint64_t v77 = v20;
    uint64_t v80 = v101;
    uint64_t v76 = v102;
    if (!v105) {
      goto LABEL_7;
    }
LABEL_6:
    BOOL v89 = (void (**)(char *, char *, uint64_t))((v27 - 1) & v27);
    unint64_t v28 = __clz(__rbit64(v27)) | (v26 << 6);
    while (1)
    {
      uint64_t v33 = *(void *)(v24 + 48);
      uint64_t v34 = v94;
      uint64_t v91 = *(void *)(v94 + 72);
      uint64_t v35 = *(void (**)(char *, unint64_t, uint64_t))(v94 + 16);
      v35(v20, v33 + v91 * v28, v6);
      (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v96, v20, v6);
      uint64_t v36 = v87[7];
      uint64_t v37 = swift_bridgeObjectRetain();
      uint64_t v38 = MEMORY[0x253327DC0](v37, v6);
      uint64_t v90 = (void *)v26;
      if (v38)
      {
        char v39 = sub_24DCC9CB8();
        sub_24DCC9C68();
        if (v39)
        {
          v35(v15, v36 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)), v6);
        }
        else
        {
          uint64_t v23 = sub_24DCCA778();
          if (v78 != 8) {
            goto LABEL_84;
          }
          *(void *)&v98[0] = v23;
          v35(v15, (unint64_t)v98, v6);
          swift_unknownObjectRelease();
        }
        char v40 = sub_24D571B94(v96, v6);
        uint64_t v26 = *v95;
        ((void (*)(char *, uint64_t))*v95)(v15, v6);
        if (v40)
        {
LABEL_43:
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v26)(v96, v6);
          swift_release();
          break;
        }
        uint64_t v79 = (unint64_t)v95 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
        uint64_t v41 = v36 + v91;
        uint64_t v42 = 1;
        while (v42 != MEMORY[0x253327DC0](v36, v6))
        {
          char v43 = sub_24DCC9CB8();
          sub_24DCC9C68();
          if (v43)
          {
            uint64_t v23 = ((uint64_t (*)(char *, unint64_t, uint64_t))v35)(v15, v41 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80)), v6);
            if (__OFADD__(v42, 1)) {
              goto LABEL_80;
            }
          }
          else
          {
            uint64_t v23 = sub_24DCCA778();
            if (v78 != 8) {
              goto LABEL_83;
            }
            *(void *)&v98[0] = v23;
            v35(v15, (unint64_t)v98, v6);
            uint64_t v23 = swift_unknownObjectRelease();
            if (__OFADD__(v42, 1))
            {
LABEL_80:
              __break(1u);
LABEL_81:
              __break(1u);
LABEL_82:
              __break(1u);
LABEL_83:
              __break(1u);
LABEL_84:
              __break(1u);
LABEL_85:
              MEMORY[0x270FA5388](v23);
              *(&v76 - 2) = v26;
              sub_24DA89268((uint64_t (*)(uint64_t))sub_24D57ED98, (uint64_t)(&v76 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
            }
          }
          char v44 = sub_24D571B94(v96, v6);
          ((void (*)(char *, uint64_t))v26)(v15, v6);
          ++v42;
          v41 += v91;
          if (v44) {
            goto LABEL_43;
          }
        }
        swift_bridgeObjectRelease();
        uint64_t v20 = v77;
        uint64_t v24 = v80;
        uint64_t v25 = v76;
        uint64_t v23 = ((uint64_t (*)(char *, uint64_t))v26)(v96, v6);
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = ((uint64_t (*)(char *, uint64_t))*v95)(v96, v6);
      }
      uint64_t v26 = (uint64_t)v90;
      unint64_t v27 = (unint64_t)v89;
      if (v89) {
        goto LABEL_6;
      }
LABEL_7:
      int64_t v29 = v26 + 1;
      if (__OFADD__(v26, 1)) {
        goto LABEL_81;
      }
      if (v29 >= v81)
      {
LABEL_78:
        uint64_t result = swift_release();
        char v73 = 0;
        goto LABEL_77;
      }
      unint64_t v30 = *(void *)(v25 + 8 * v29);
      uint64_t v31 = v26 + 1;
      if (!v30)
      {
        uint64_t v31 = v26 + 2;
        if (v26 + 2 >= v81) {
          goto LABEL_78;
        }
        unint64_t v30 = *(void *)(v25 + 8 * v31);
        if (!v30)
        {
          uint64_t v31 = v26 + 3;
          if (v26 + 3 >= v81) {
            goto LABEL_78;
          }
          unint64_t v30 = *(void *)(v25 + 8 * v31);
          if (!v30)
          {
            uint64_t v31 = v26 + 4;
            if (v26 + 4 >= v81) {
              goto LABEL_78;
            }
            unint64_t v30 = *(void *)(v25 + 8 * v31);
            if (!v30)
            {
              uint64_t v31 = v26 + 5;
              if (v26 + 5 >= v81) {
                goto LABEL_78;
              }
              unint64_t v30 = *(void *)(v25 + 8 * v31);
              if (!v30)
              {
                uint64_t v32 = v26 + 6;
                do
                {
                  if (v81 == v32) {
                    goto LABEL_78;
                  }
                  unint64_t v30 = *(void *)(v25 + 8 * v32++);
                }
                while (!v30);
                uint64_t v31 = v32 - 1;
              }
            }
          }
        }
      }
      BOOL v89 = (void (**)(char *, char *, uint64_t))((v30 - 1) & v30);
      unint64_t v28 = __clz(__rbit64(v30)) + (v31 << 6);
      uint64_t v26 = v31;
    }
  }
  uint64_t v45 = v87;
  *((unsigned char *)v87 + 73) = 1;
  uint64_t v46 = v45[7];
  uint64_t v47 = swift_bridgeObjectRetain();
  if (MEMORY[0x253327DC0](v47, v6))
  {
    uint64_t v48 = 0;
    uint64_t v26 = v86 + 24;
    uint64_t v90 = v87 + 2;
    uint64_t v96 = (char *)(v94 + 16);
    BOOL v89 = (void (**)(char *, char *, uint64_t))(v94 + 32);
    uint64_t v88 = (void (**)(char *, uint64_t))(v94 + 8);
    uint64_t v92 = v46;
    uint64_t v91 = v86 + 24;
    uint64_t v49 = v97;
    do
    {
      char v50 = sub_24DCC9CB8();
      sub_24DCC9C68();
      if (v50)
      {
        uint64_t v51 = *(uint64_t **)(v94 + 16);
        uint64_t v23 = ((uint64_t (*)(char *, unint64_t, uint64_t))v51)(v106, v46+ ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80))+ *(void *)(v94 + 72) * v48, v6);
        uint64_t v52 = v48 + 1;
        if (__OFADD__(v48, 1)) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v23 = sub_24DCCA778();
        if (v78 != 8) {
          goto LABEL_82;
        }
        *(void *)&v98[0] = v23;
        uint64_t v51 = *(uint64_t **)v96;
        (*(void (**)(char *, long long *, uint64_t))v96)(v106, v98, v6);
        uint64_t v23 = swift_unknownObjectRelease();
        uint64_t v52 = v48 + 1;
        if (__OFADD__(v48, 1))
        {
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }
      }
      char v95 = v51;
      uint64_t v53 = v97;
      (*v89)(v97, v106, v6);
      swift_beginAccess();
      uint64_t v54 = *(void *)v26;
      uint64_t WitnessTable = swift_getWitnessTable();
      MEMORY[0x2533276F0](&v99, v53, v54, v6, &type metadata for JobLockPendingFlushStatus, WitnessTable);
      uint64_t v56 = v99;
      uint64_t v57 = v100;
      swift_endAccess();
      if (v56) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      if (v56) {
        uint64_t v59 = v56;
      }
      else {
        uint64_t v59 = (void *)MEMORY[0x263F8EE78];
      }
      sub_24D433858((uint64_t)v90, (uint64_t)v98);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v59 = sub_24DA13C88(0, v59[2] + 1, 1, v59);
      }
      unint64_t v61 = v59[2];
      unint64_t v60 = v59[3];
      if (v61 >= v60 >> 1) {
        uint64_t v59 = sub_24DA13C88((void *)(v60 > 1), v61 + 1, 1, v59);
      }
      v59[2] = v61 + 1;
      sub_24D57EC10(v98, (uint64_t)&v59[5 * v61 + 4]);
      ((void (*)(char *, char *, uint64_t))v95)(v93, v49, v6);
      uint64_t v99 = v59;
      uint64_t v100 = v58;
      uint64_t v26 = v91;
      swift_beginAccess();
      sub_24DCC9638();
      sub_24DCC9668();
      swift_endAccess();
      (*v88)(v49, v6);
      uint64_t v46 = v92;
      ++v48;
    }
    while (v52 != MEMORY[0x253327DC0](v92, v6));
  }
  swift_bridgeObjectRelease();
  id v62 = objc_msgSend(*(id *)(v86 + 40), sel_allObjects);
  uint64_t v63 = type metadata accessor for JobLockAggregator();
  uint64_t v64 = sub_24DCC9C28();

  if (!MEMORY[0x253327DC0](v64, v63)) {
    goto LABEL_76;
  }
  uint64_t v65 = 4;
  uint64_t v66 = v85;
  while (1)
  {
    uint64_t v67 = v65 - 4;
    char v68 = sub_24DCC9CB8();
    sub_24DCC9C68();
    if ((v68 & 1) == 0) {
      break;
    }
    uint64_t v26 = *(void *)(v64 + 8 * v65);
    swift_retain();
    uint64_t v69 = v65 - 3;
    if (__OFADD__(v67, 1)) {
      goto LABEL_75;
    }
LABEL_68:
    uint64_t v70 = (void *)swift_retain();
    uint64_t v23 = objc_sync_enter(v70);
    if (v23) {
      goto LABEL_85;
    }
    sub_24D5769A0();
    if (v66)
    {
      uint64_t v74 = objc_sync_exit((id)v26);
      MEMORY[0x270FA5388](v74);
      int v75 = &v76 - 4;
      *(&v76 - 2) = v26;
      goto LABEL_88;
    }
    uint64_t v66 = 0;
    uint64_t v71 = objc_sync_exit((id)v26);
    if (v71)
    {
      MEMORY[0x270FA5388](v71);
      int v75 = &v76 - 4;
      *(&v76 - 2) = v26;
LABEL_88:
      sub_24DA89268((uint64_t (*)(uint64_t))sub_24D57ED94, (uint64_t)v75, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    swift_release_n();
    ++v65;
    if (v69 == MEMORY[0x253327DC0](v64, v63)) {
      goto LABEL_76;
    }
  }
  uint64_t v26 = sub_24DCCA778();
  uint64_t v69 = v65 - 3;
  if (!__OFADD__(v67, 1)) {
    goto LABEL_68;
  }
LABEL_75:
  __break(1u);
LABEL_76:
  uint64_t result = swift_bridgeObjectRelease();
  char v73 = 1;
LABEL_77:
  *uint64_t v84 = v73;
  return result;
}

uint64_t sub_24D57690C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    char v2 = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 1;
    MEMORY[0x270FA5388](a1);
    char v2 = sub_24D60053C(v1, (void (*)(uint64_t *__return_ptr))sub_24D57ECB8);
  }
  return v2 & 1;
}

uint64_t sub_24D5769A0()
{
  return swift_endAccess();
}

uint64_t sub_24D576AB8()
{
  sub_24D6006D8(*(void **)(v0 + 64), (void (*)(void))sub_24D57ED5C);
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_bridgeObjectRelease();
  swift_release();
  sub_24D43DD74(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_24D576B24(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  uint64_t v52 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)&v46 - v9;
  uint64_t v46 = v11;
  MEMORY[0x270FA5388](v8);
  uint64_t v13 = (char *)&v46 - v12;
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t result = sub_24D57690C(a1);
  if (result)
  {
    uint64_t v16 = *(void (**)(uint64_t))(a1 + 80);
    if (v16)
    {
      uint64_t v17 = swift_retain();
      v16(v17);
      uint64_t result = sub_24D43DD74((uint64_t)v16);
    }
  }
  if (*(unsigned char *)(a1 + 73) != 1) {
    return result;
  }
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v19 = swift_bridgeObjectRetain();
  if (!MEMORY[0x253327DC0](v19, v4)) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v20 = (uint64_t *)(v14 + 24);
  uint64_t v21 = 0;
  uint64_t v58 = v20;
  uint64_t v59 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
  uint64_t v53 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  uint64_t v50 = v4;
  uint64_t v49 = v5;
  uint64_t v48 = v10;
  uint64_t v47 = v13;
  uint64_t v51 = v18;
  while (1)
  {
    char v22 = sub_24DCC9CB8();
    sub_24DCC9C68();
    if (v22)
    {
      unint64_t v23 = v18
          + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
          + *(void *)(v5 + 72) * v21;
      uint64_t v57 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      v57(v13, v23, v4);
      BOOL v24 = __OFADD__(v21++, 1);
      if (v24) {
        goto LABEL_47;
      }
      goto LABEL_11;
    }
    uint64_t v45 = sub_24DCCA778();
    if (v46 != 8) {
      break;
    }
    *(void *)&v62[0] = v45;
    uint64_t v57 = *v59;
    v57(v13, (unint64_t)v62, v4);
    swift_unknownObjectRelease();
    BOOL v24 = __OFADD__(v21++, 1);
    if (v24)
    {
LABEL_47:
      __break(1u);
      return swift_bridgeObjectRelease();
    }
LABEL_11:
    (*v54)(v10, v13, v4);
    uint64_t v25 = v58;
    swift_beginAccess();
    uint64_t v26 = *v25;
    uint64_t WitnessTable = swift_getWitnessTable();
    MEMORY[0x2533276F0](v61, v10, v26, v4, &type metadata for JobLockPendingFlushStatus);
    unint64_t v27 = *(void **)&v61[0];
    if (!*(void *)&v61[0])
    {
      swift_endAccess();
      (*v53)(v10, v4);
      goto LABEL_8;
    }
    uint64_t v55 = *((void *)&v61[0] + 1);
    uint64_t v63 = *(void **)&v61[0];
    swift_endAccess();
    uint64_t v28 = v27[2];
    uint64_t v60 = v21;
    if (!v28)
    {
      int64_t v36 = 0;
      goto LABEL_40;
    }
    int64_t v29 = (void *)a1;
    uint64_t v30 = (uint64_t)(v27 + 4);
    swift_bridgeObjectRetain();
    unint64_t v31 = 0;
    uint64_t v32 = 9;
    unint64_t v33 = 1;
    do
    {
      sub_24D433858(v30, (uint64_t)v62);
      char v34 = sub_24D577228(v62, v29);
      if (v2) {
        goto LABEL_61;
      }
      char v35 = v34;
      uint64_t v2 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
      if (v35)
      {
        swift_bridgeObjectRelease();
        int64_t v36 = v31 + 1;
        if (!__OFADD__(v31, 1))
        {
          unint64_t v37 = v27[2];
          if (v36 == v37)
          {
            uint64_t v28 = v31;
            goto LABEL_22;
          }
          a1 = (uint64_t)v29;
          uint64_t v21 = v60;
          while (v33 < v37)
          {
            sub_24D433858((uint64_t)&v27[v32], (uint64_t)v62);
            char v38 = sub_24D577228(v62, v29);
            uint64_t v2 = 0;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
            if ((v38 & 1) == 0)
            {
              if (v33 != v31)
              {
                if ((v31 & 0x8000000000000000) != 0) {
                  goto LABEL_53;
                }
                char v39 = v63;
                unint64_t v40 = v63[2];
                if (v31 >= v40) {
                  goto LABEL_54;
                }
                sub_24D433858((uint64_t)&v63[5 * v31 + 4], (uint64_t)v62);
                if (v33 >= v40) {
                  goto LABEL_55;
                }
                sub_24D433858((uint64_t)&v39[v32], (uint64_t)v61);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  char v39 = sub_24DAFAFA4(v39);
                  uint64_t v63 = v39;
                }
                uint64_t v21 = v60;
                if (v31 >= v39[2]) {
                  goto LABEL_56;
                }
                uint64_t v41 = (uint64_t)&v39[5 * v31 + 4];
                __swift_destroy_boxed_opaque_existential_1(v41);
                sub_24D57EC10(v61, v41);
                if (v33 >= v63[2]) {
                  goto LABEL_57;
                }
                uint64_t v42 = (uint64_t)&v63[v32];
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v63[v32]);
                sub_24D57EC10(v62, v42);
              }
              BOOL v24 = __OFADD__(v31++, 1);
              if (v24) {
                goto LABEL_52;
              }
            }
            int64_t v36 = v33 + 1;
            if (__OFADD__(v33, 1)) {
              goto LABEL_51;
            }
            unint64_t v27 = v63;
            unint64_t v37 = v63[2];
            ++v33;
            v32 += 5;
            if (v36 == v37)
            {
              uint64_t v28 = v31;
              goto LABEL_39;
            }
          }
          __break(1u);
LABEL_51:
          __break(1u);
LABEL_52:
          __break(1u);
LABEL_53:
          __break(1u);
LABEL_54:
          __break(1u);
LABEL_55:
          __break(1u);
LABEL_56:
          __break(1u);
LABEL_57:
          __break(1u);
LABEL_58:
          __break(1u);
        }
        __break(1u);
        goto LABEL_60;
      }
      ++v31;
      v30 += 40;
      ++v33;
      v32 += 5;
    }
    while (v28 != v31);
    swift_bridgeObjectRelease();
    int64_t v36 = v27[2];
LABEL_22:
    a1 = (uint64_t)v29;
    uint64_t v21 = v60;
LABEL_39:
    uint64_t v4 = v50;
    uint64_t v5 = v49;
    uint64_t v10 = v48;
    uint64_t v13 = v47;
    if (v36 < v28) {
      goto LABEL_58;
    }
LABEL_40:
    sub_24DB003E8(v28, v36);
    char v43 = v63;
    uint64_t v44 = v55;
    if (v63[2] | v55)
    {
      v57(v52, (unint64_t)v10, v4);
      *(void *)&v61[0] = v43;
      *((void *)&v61[0] + 1) = v44;
      swift_beginAccess();
      sub_24DCC9638();
      uint64_t v21 = v60;
    }
    else
    {
      swift_bridgeObjectRelease();
      v57(v52, (unint64_t)v10, v4);
      v61[0] = 0uLL;
      swift_beginAccess();
      sub_24DCC9638();
    }
    sub_24DCC9668();
    swift_endAccess();
    (*v53)(v10, v4);
    uint64_t v18 = v51;
LABEL_8:
    if (v21 == MEMORY[0x253327DC0](v18, v4)) {
      return swift_bridgeObjectRelease();
    }
  }
LABEL_60:
  __break(1u);
LABEL_61:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  swift_bridgeObjectRelease();
  __break(1u);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v62);
  __break(1u);
  return result;
}

uint64_t sub_24D577228(void *a1, void *a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  uint64_t v7 = v6;
  uint64_t v8 = a2 + 2;
  uint64_t v10 = a2[5];
  uint64_t v9 = a2[6];
  __swift_project_boxed_opaque_existential_1(v8, v10);
  if (v5 == (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(v10, v9) && v7 == v11) {
    char v13 = 1;
  }
  else {
    char v13 = sub_24DCCAE28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v13 & 1;
}

uint64_t sub_24D577310()
{
  sub_24D576AB8();

  return swift_deallocClassInstance();
}

void sub_24D577344()
{
  type metadata accessor for JobLockRule();

  JUMPOUT(0x253327CD0);
}

void sub_24D57738C()
{
}

uint64_t sub_24D5773A8()
{
  type metadata accessor for JobLock.Registration();
  sub_24DCCA3F8();
  type metadata accessor for JobLock.BlockedRuleError();
  swift_getWitnessTable();
  sub_24DCCB058();
  sub_24D6006D8(v0, (void (*)(void))sub_24D57EB94);
  return v2;
}

uint64_t sub_24D5774A0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v148 = a4;
  uint64_t v130 = a5;
  uint64_t v8 = *(void *)(*a1 + 80);
  uint64_t v9 = *(void *)(*a1 + 88);
  uint64_t v10 = type metadata accessor for JobLockRule();
  uint64_t v150 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v141 = (char *)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v142 = (char *)&v126 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unsigned int v146 = (char *)&v126 - v16;
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v134 = (char *)&v126 - v18;
  uint64_t v19 = MEMORY[0x270FA5388](v17);
  uint64_t v135 = (char *)&v126 - v20;
  uint64_t v21 = MEMORY[0x270FA5388](v19);
  uint64_t v136 = (char *)&v126 - v22;
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  unint64_t v137 = (char *)&v126 - v24;
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  unint64_t v27 = (char *)&v126 - v26;
  uint64_t v127 = v28;
  MEMORY[0x270FA5388](v25);
  uint64_t v162 = (char *)&v126 - v29;
  uint64_t v30 = a1 + 2;
  swift_beginAccess();
  uint64_t v132 = (char *)a1;
  uint64_t v133 = a3;
  v152[6] = v8;
  v152[7] = v9;
  uint64_t v147 = a2;
  v152[8] = a2;
  v152[9] = a3;
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v32 = v151;
  *(void *)&long long v153 = sub_24DCC95F8();
  uint64_t v128 = v8;
  uint64_t v129 = v9;
  v152[2] = v8;
  v152[3] = v9;
  uint64_t v140 = WitnessTable;
  uint64_t v33 = sub_24DCC9638();
  uint64_t v34 = swift_getWitnessTable();
  uint64_t v151 = v33;
  uint64_t v36 = sub_24D7854B0((void (*)(char *, char *))sub_24D57EBF0, (uint64_t)v152, v33, v10, MEMORY[0x263F8E628], v34, MEMORY[0x263F8E658], v35);
  uint64_t v131 = v32;
  swift_bridgeObjectRelease();
  uint64_t v37 = swift_bridgeObjectRetain();
  uint64_t v38 = MEMORY[0x253327DC0](v37, v10);
  uint64_t v149 = a1 + 2;
  uint64_t v139 = v36;
  if (v38)
  {
    uint64_t v39 = 0;
    uint64_t v144 = (void (**)(char *, uint64_t))(v150 + 32);
    uint64_t v145 = (void (**)(char *, long long *, uint64_t))(v150 + 16);
    uint64_t v143 = (void (**)(char *, uint64_t))(v150 + 8);
    uint64_t v138 = v27;
    do
    {
      char v40 = sub_24DCC9CB8();
      sub_24DCC9C68();
      if (v40)
      {
        uint64_t v41 = (*(uint64_t (**)(char *, unint64_t, uint64_t))(v150 + 16))(v162, v36+ ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))+ *(void *)(v150 + 72) * v39, v10);
        uint64_t v33 = v39 + 1;
        if (__OFADD__(v39, 1)) {
          goto LABEL_78;
        }
      }
      else
      {
        uint64_t v41 = sub_24DCCA778();
        if (v127 != 8) {
          goto LABEL_83;
        }
        *(void *)&long long v153 = v41;
        (*v145)(v162, &v153, v10);
        uint64_t v41 = swift_unknownObjectRelease();
        uint64_t v33 = v39 + 1;
        if (__OFADD__(v39, 1))
        {
LABEL_78:
          __break(1u);
LABEL_79:
          __break(1u);
LABEL_80:
          __break(1u);
LABEL_81:
          __break(1u);
LABEL_82:
          __break(1u);
LABEL_83:
          __break(1u);
LABEL_84:
          __break(1u);
LABEL_85:
          __break(1u);
LABEL_86:
          __break(1u);
LABEL_87:
          __break(1u);
LABEL_88:
          __break(1u);
LABEL_89:
          __break(1u);
LABEL_90:
          MEMORY[0x270FA5388](v41);
          *(&v126 - 2) = v33;
          sub_24DA89268((uint64_t (*)(uint64_t))sub_24D57EC28, (uint64_t)(&v126 - 4), (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
        }
      }
      ((void (*)(char *, char *, uint64_t))*v144)(v27, v162, v10);
      swift_beginAccess();
      char v43 = (void (*)(long long *, void))sub_24DCC9648();
      if (*v42)
      {
        uint64_t v44 = v42;
        uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v153, &qword_26B1937B8);
        if (!*((void *)&v154 + 1)) {
          goto LABEL_81;
        }
        uint64_t v45 = (void *)v44[1];
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v44[1] = v45;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v45 = sub_24DA13C88(0, v45[2] + 1, 1, v45);
          v44[1] = v45;
        }
        unint64_t v48 = v45[2];
        unint64_t v47 = v45[3];
        if (v48 >= v47 >> 1)
        {
          uint64_t v45 = sub_24DA13C88((void *)(v47 > 1), v48 + 1, 1, v45);
          v44[1] = v45;
        }
        v45[2] = v48 + 1;
        sub_24D57EC10(&v153, (uint64_t)&v45[5 * v48 + 4]);
        v43(&v157, 0);
        swift_endAccess();
        unint64_t v27 = v138;
        (*v143)(v138, v10);
        uint64_t v30 = v149;
        uint64_t v36 = v139;
      }
      else
      {
        v43(&v157, 0);
        swift_endAccess();
        (*v143)(v27, v10);
      }
      ++v39;
    }
    while (v33 != MEMORY[0x253327DC0](v36, v10));
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v153 = v36;
  sub_24DCC9D48();
  swift_getWitnessTable();
  LODWORD(v138) = sub_24DCC9FE8();
  if ((v138 & 1) == 0)
  {
    uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v153, &qword_26B1937B8);
    uint64_t v33 = *((void *)&v154 + 1);
    if (*((void *)&v154 + 1))
    {
      uint64_t v72 = v155;
      __swift_project_boxed_opaque_existential_1(&v153, *((uint64_t *)&v154 + 1));
      uint64_t v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 16))(v33, v72);
      uint64_t v33 = v74;
      int v75 = v132;
      uint64_t v76 = (uint64_t)(v132 + 32);
      swift_beginAccess();
      uint64_t v77 = *((void *)v75 + 4);
      uint64_t v160 = v73;
      uint64_t v161 = v33;
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t v79 = v77;
      uint64_t v80 = (void (**)(char *, uint64_t))TupleTypeMetadata2;
      MEMORY[0x2533276F0](v159, &v160, v79, MEMORY[0x263F8D310]);
      swift_bridgeObjectRelease();
      uint64_t v81 = v159[0];
      swift_endAccess();
      sub_24D401324(v81);
      uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v153);
      uint64_t v83 = v134;
      if (!v81) {
        goto LABEL_53;
      }
      uint64_t v84 = v130;
      char v85 = (char)v138;
      uint64_t v86 = v139;
      goto LABEL_77;
    }
    goto LABEL_87;
  }
  swift_bridgeObjectRelease();
  uint64_t v49 = v147;
  uint64_t v50 = swift_bridgeObjectRetain();
  uint64_t v51 = MEMORY[0x253327DC0](v50, v10);
  uint64_t v52 = v142;
  if (v51)
  {
    uint64_t v33 = 0;
    uint64_t v162 = (char *)(v150 + 16);
    uint64_t v143 = (void (**)(char *, uint64_t))(v150 + 8);
    uint64_t v144 = (void (**)(char *, uint64_t))(v150 + 32);
    uint64_t v53 = v141;
    do
    {
      char v56 = sub_24DCC9CB8();
      sub_24DCC9C68();
      if (v56)
      {
        uint64_t v57 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v150 + 16);
        uint64_t v41 = v57(v146, v49+ ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))+ *(void *)(v150 + 72) * v33, v10);
        uint64_t v58 = (void (**)(char *, long long *, uint64_t))(v33 + 1);
        if (__OFADD__(v33, 1)) {
          goto LABEL_79;
        }
      }
      else
      {
        uint64_t v41 = sub_24DCCA778();
        if (v127 != 8) {
          goto LABEL_84;
        }
        *(void *)&long long v153 = v41;
        uint64_t v57 = *(uint64_t (**)(char *, unint64_t, uint64_t))v162;
        (*(void (**)(char *, long long *, uint64_t))v162)(v146, &v153, v10);
        uint64_t v41 = swift_unknownObjectRelease();
        uint64_t v58 = (void (**)(char *, long long *, uint64_t))(v33 + 1);
        if (__OFADD__(v33, 1)) {
          goto LABEL_79;
        }
      }
      uint64_t v145 = v58;
      ((void (*)(char *, char *, uint64_t))*v144)(v52, v146, v10);
      swift_beginAccess();
      MEMORY[0x2533276F0](&v157, v52, *v30, v10, &type metadata for JobLockRuleAssociatedJobs, v140);
      uint64_t v59 = v157;
      swift_endAccess();
      uint64_t v52 = v142;
      sub_24D401324(v59);
      if (!v59)
      {
        v57(v135, (unint64_t)v52, v10);
        *(void *)&long long v157 = MEMORY[0x263F8EE78];
        *((void *)&v157 + 1) = MEMORY[0x263F8EE78];
        swift_beginAccess();
        sub_24DCC9668();
        swift_endAccess();
      }
      v57(v53, (unint64_t)v52, v10);
      swift_beginAccess();
      unint64_t v61 = (void (*)(void *, void))sub_24DCC9648();
      if (*v60)
      {
        id v62 = (void **)v60;
        uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v157, &qword_26B1937B8);
        if (!v158) {
          goto LABEL_82;
        }
        sub_24D57EC10(&v157, (uint64_t)&v153);
        *((void *)&v155 + 1) = 0;
        char v156 = 1;
        uint64_t v63 = *v62;
        char v64 = swift_isUniquelyReferenced_nonNull_native();
        *id v62 = v63;
        if ((v64 & 1) == 0)
        {
          uint64_t v63 = sub_24DA13C9C(0, v63[2] + 1, 1, v63);
          *id v62 = v63;
        }
        unint64_t v66 = v63[2];
        unint64_t v65 = v63[3];
        if (v66 >= v65 >> 1)
        {
          uint64_t v63 = sub_24DA13C9C((void *)(v65 > 1), v66 + 1, 1, v63);
          *id v62 = v63;
        }
        v63[2] = v66 + 1;
        uint64_t v67 = &v63[7 * v66];
        long long v68 = v153;
        long long v69 = v154;
        long long v70 = v155;
        *((unsigned char *)v67 + 80) = v156;
        *((_OWORD *)v67 + 3) = v69;
        *((_OWORD *)v67 + 4) = v70;
        *((_OWORD *)v67 + 2) = v68;
        v61(v159, 0);
        swift_endAccess();
        uint64_t v71 = *v143;
        (*v143)(v141, v10);
        uint64_t v52 = v142;
        v71(v142, v10);
        uint64_t v49 = v147;
        uint64_t v30 = v149;
      }
      else
      {
        v61(v159, 0);
        swift_endAccess();
        uint64_t v54 = *v143;
        (*v143)(v53, v10);
        v54(v52, v10);
      }
      uint64_t v55 = MEMORY[0x253327DC0](v49, v10);
      ++v33;
    }
    while (v145 != (void (**)(char *, long long *, uint64_t))v55);
  }
  swift_bridgeObjectRelease();
  uint64_t v83 = v132;
  uint64_t v33 = (uint64_t)objc_msgSend(*((id *)v132 + 5), sel_allObjects);
  uint64_t v87 = type metadata accessor for JobLockAggregator();
  uint64_t v88 = sub_24DCC9C28();

  if (!MEMORY[0x253327DC0](v88, v87))
  {
LABEL_72:
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v153, &qword_26B1937B8);
    if (*((void *)&v154 + 1))
    {
      type metadata accessor for JobLock.Registration();
      uint64_t v117 = v147;
      swift_bridgeObjectRetain();
      uint64_t v118 = swift_retain();
      uint64_t result = sub_24D575B70(v118, &v153, v117);
      uint64_t v86 = result;
      goto LABEL_76;
    }
    goto LABEL_88;
  }
  uint64_t v76 = 4;
  uint64_t v10 = v131;
  while (1)
  {
    uint64_t v89 = v76 - 4;
    char v90 = sub_24DCC9CB8();
    sub_24DCC9C68();
    if ((v90 & 1) == 0) {
      break;
    }
    uint64_t v33 = *(void *)(v88 + 8 * v76);
    swift_retain();
    BOOL v91 = __OFADD__(v89, 1);
    uint64_t v80 = (void (**)(char *, uint64_t))(v76 - 3);
    if (v91) {
      goto LABEL_52;
    }
LABEL_45:
    uint64_t v92 = (void *)swift_retain();
    uint64_t v41 = objc_sync_enter(v92);
    if (v41) {
      goto LABEL_90;
    }
    sub_24D578BA8();
    if (v10)
    {
      uint64_t v123 = objc_sync_exit((id)v33);
      MEMORY[0x270FA5388](v123);
      uint64_t v124 = &v126 - 4;
      *(&v126 - 2) = v33;
      uint64_t v125 = sub_24D57EC30;
      goto LABEL_93;
    }
    uint64_t v10 = 0;
    uint64_t v93 = objc_sync_exit((id)v33);
    if (v93)
    {
      MEMORY[0x270FA5388](v93);
      uint64_t v124 = &v126 - 4;
      *(&v126 - 2) = v33;
      uint64_t v125 = sub_24D57ED94;
LABEL_93:
      sub_24DA89268((uint64_t (*)(uint64_t))v125, (uint64_t)v124, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    swift_release_n();
    ++v76;
    if (v80 == (void (**)(char *, uint64_t))MEMORY[0x253327DC0](v88, v87)) {
      goto LABEL_72;
    }
  }
  uint64_t v33 = sub_24DCCA778();
  BOOL v91 = __OFADD__(v89, 1);
  uint64_t v80 = (void (**)(char *, uint64_t))(v76 - 3);
  if (!v91) {
    goto LABEL_45;
  }
LABEL_52:
  __break(1u);
LABEL_53:
  uint64_t v143 = v80;
  uint64_t v94 = v147;
  uint64_t v95 = swift_bridgeObjectRetain();
  uint64_t v96 = MEMORY[0x253327DC0](v95, v10);
  uint64_t v97 = v136;
  if (v96)
  {
    uint64_t v33 = 0;
    uint64_t v162 = (char *)(v150 + 16);
    uint64_t v145 = (void (**)(char *, long long *, uint64_t))v76;
    unsigned int v146 = (char *)(v150 + 32);
    uint64_t v144 = (void (**)(char *, uint64_t))(v150 + 8);
    do
    {
      char v99 = sub_24DCC9CB8();
      sub_24DCC9C68();
      if (v99)
      {
        unint64_t v100 = v94
             + ((*(unsigned __int8 *)(v150 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v150 + 80))
             + *(void *)(v150 + 72) * v33;
        uint64_t v101 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v150 + 16);
        uint64_t v41 = v101(v137, v100, v10);
        uint64_t v102 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v41 = sub_24DCCA778();
        if (v127 != 8) {
          goto LABEL_86;
        }
        *(void *)&long long v153 = v41;
        uint64_t v101 = *(uint64_t (**)(char *, unint64_t, uint64_t))v162;
        (*(void (**)(char *, long long *, uint64_t))v162)(v137, &v153, v10);
        uint64_t v41 = swift_unknownObjectRelease();
        uint64_t v102 = v33 + 1;
        if (__OFADD__(v33, 1)) {
          goto LABEL_80;
        }
      }
      (*(void (**)(char *, char *, uint64_t))v146)(v97, v137, v10);
      uint64_t v103 = v149;
      swift_beginAccess();
      MEMORY[0x2533276F0](&v157, v97, *v103, v10, &type metadata for JobLockRuleAssociatedJobs, v140);
      uint64_t v104 = v157;
      swift_endAccess();
      uint64_t v97 = v136;
      sub_24D401324(v104);
      if (!v104)
      {
        v101(v135, (unint64_t)v97, v10);
        *(void *)&long long v157 = MEMORY[0x263F8EE78];
        *((void *)&v157 + 1) = MEMORY[0x263F8EE78];
        swift_beginAccess();
        sub_24DCC9668();
        swift_endAccess();
      }
      v101(v83, (unint64_t)v97, v10);
      swift_beginAccess();
      int v106 = (void (*)(void *, void))sub_24DCC9648();
      if (*v105)
      {
        uint64_t v107 = (void **)v105;
        uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v157, &qword_26B1937B8);
        if (!v158) {
          goto LABEL_85;
        }
        sub_24D57EC10(&v157, (uint64_t)&v153);
        *((void *)&v155 + 1) = v133;
        char v156 = 0;
        uint64_t v108 = *v107;
        char v109 = swift_isUniquelyReferenced_nonNull_native();
        *uint64_t v107 = v108;
        if ((v109 & 1) == 0)
        {
          uint64_t v108 = sub_24DA13C9C(0, v108[2] + 1, 1, v108);
          *uint64_t v107 = v108;
        }
        unint64_t v111 = v108[2];
        unint64_t v110 = v108[3];
        if (v111 >= v110 >> 1)
        {
          uint64_t v108 = sub_24DA13C9C((void *)(v110 > 1), v111 + 1, 1, v108);
          *uint64_t v107 = v108;
        }
        v108[2] = v111 + 1;
        uint64_t v112 = &v108[7 * v111];
        long long v113 = v153;
        long long v114 = v154;
        long long v115 = v155;
        *((unsigned char *)v112 + 80) = v156;
        *((_OWORD *)v112 + 3) = v114;
        *((_OWORD *)v112 + 4) = v115;
        *((_OWORD *)v112 + 2) = v113;
        v106(v159, 0);
        swift_endAccess();
        uint64_t v116 = *v144;
        uint64_t v83 = v134;
        (*v144)(v134, v10);
        uint64_t v97 = v136;
        v116(v136, v10);
        uint64_t v94 = v147;
      }
      else
      {
        v106(v159, 0);
        swift_endAccess();
        uint64_t v98 = *v144;
        (*v144)(v83, v10);
        v98(v97, v10);
        uint64_t v94 = v147;
      }
      ++v33;
    }
    while (v102 != MEMORY[0x253327DC0](v94, v10));
  }
  swift_bridgeObjectRelease();
  uint64_t v41 = sub_24D415FD0(v148, (uint64_t)&v153, &qword_26B1937B8);
  uint64_t v119 = *((void *)&v154 + 1);
  if (!*((void *)&v154 + 1)) {
    goto LABEL_89;
  }
  uint64_t v120 = v155;
  __swift_project_boxed_opaque_existential_1(&v153, *((uint64_t *)&v154 + 1));
  uint64_t v121 = (*(uint64_t (**)(uint64_t, uint64_t))(v120 + 16))(v119, v120);
  uint64_t v86 = v139;
  v159[0] = v94;
  v159[1] = v139;
  uint64_t v160 = v121;
  uint64_t v161 = v122;
  swift_beginAccess();
  sub_24DCC9638();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24DCC9668();
  swift_endAccess();
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v153);
LABEL_76:
  uint64_t v84 = v130;
  char v85 = (char)v138;
LABEL_77:
  *(void *)uint64_t v84 = v86;
  *(unsigned char *)(v84 + 8) = (v85 & 1) == 0;
  return result;
}

uint64_t sub_24D57871C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a4;
  uint64_t v22 = a1;
  uint64_t v8 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v26 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v16 = *a2;
  uint64_t v15 = a2[1];
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  v17((char *)&v22 - v13, v22, v8);
  uint64_t v18 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  *(void *)uint64_t v18 = v16;
  *((void *)v18 + 1) = v15;
  uint64_t v31 = a3;
  uint64_t v19 = &v12[*(int *)(TupleTypeMetadata2 + 48)];
  v17(v12, (uint64_t)v14, v8);
  *(void *)uint64_t v19 = v16;
  *((void *)v19 + 1) = v15;
  uint64_t v27 = v23;
  uint64_t v28 = v24;
  uint64_t v29 = v12;
  uint64_t v30 = v25;
  sub_24DCC9D48();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_getWitnessTable();
  LOBYTE(v15) = sub_24DCC9B08();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v14, TupleTypeMetadata2);
  v20(v12, TupleTypeMetadata2);
  return v15 & 1;
}

uint64_t sub_24D57896C(uint64_t a1, char *a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for JobLockRule();
  if ((sub_24D571B94(a2, v5) & 1) == 0) {
    return 0;
  }
  uint64_t v6 = *(void *)&a2[*(int *)(swift_getTupleTypeMetadata2() + 48)];
  uint64_t v7 = *(void *)(v6 + 16);
  if (!v7) {
    return 0;
  }
  uint64_t v8 = v6 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_24D415FD0(v8, (uint64_t)v13, qword_26B1937C0);
    if (v15) {
      break;
    }
    unint64_t v9 = v14;
    sub_24D433858((uint64_t)v13, (uint64_t)v11);
    v11[5] = v9;
    char v12 = 0;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
    sub_24D57EABC((uint64_t)v13);
    if (v9 > a3) {
      goto LABEL_10;
    }
    v8 += 56;
    if (!--v7)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  sub_24D57EABC((uint64_t)v13);
LABEL_10:
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_24D578A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = *(void *)(v4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v10 - v6, a1, v4);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v7, v4);
}

uint64_t sub_24D578BA8()
{
  return swift_endAccess();
}

uint64_t sub_24D578CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  sub_24DCCAD88();
  uint64_t v5 = *(void *)(v4 - 8);
  swift_allocObject();
  uint64_t v6 = sub_24DCC9C58();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v7, a3, v4);
  sub_24D785484(v6);
  uint64_t v8 = sub_24D5773A8();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_24D578DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v111 = a1;
  uint64_t v108 = 0;
  uint64_t v7 = type metadata accessor for JobLockRule();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v98 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v93 - v12;
  uint64_t v94 = v14;
  MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v93 - v15;
  uint64_t v120 = MEMORY[0x263F8EE88];
  uint64_t v17 = swift_bridgeObjectRetain();
  uint64_t v18 = MEMORY[0x253327DC0](v17, v7);
  uint64_t v105 = v4;
  uint64_t v109 = v7;
  if (!v18)
  {
    swift_bridgeObjectRelease();
    uint64_t v69 = MEMORY[0x263F8EE88];
    goto LABEL_73;
  }
  uint64_t v19 = 0;
  int v106 = (void *)(v4 + 16);
  uint64_t v107 = (void (**)(char *, unint64_t, uint64_t))(v8 + 16);
  uint64_t v101 = (void (**)(char *, char *, uint64_t))(v8 + 32);
  unint64_t v100 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v97 = a3;
  uint64_t v96 = v8;
  char v99 = v13;
  uint64_t v95 = v16;
  while (1)
  {
    char v20 = sub_24DCC9CB8();
    sub_24DCC9C68();
    if (v20)
    {
      unint64_t v21 = a3
          + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
          + *(void *)(v8 + 72) * v19;
      uint64_t v104 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      v104(v16, v21, v7);
      BOOL v22 = __OFADD__(v19++, 1);
      if (v22) {
        goto LABEL_70;
      }
    }
    else
    {
      uint64_t result = sub_24DCCA778();
      if (v94 != 8) {
        goto LABEL_113;
      }
      uint64_t v114 = result;
      uint64_t v104 = *v107;
      v104(v16, (unint64_t)&v114, v7);
      swift_unknownObjectRelease();
      BOOL v22 = __OFADD__(v19++, 1);
      if (v22)
      {
LABEL_70:
        __break(1u);
LABEL_71:
        swift_bridgeObjectRelease();
        uint64_t v69 = v120;
LABEL_73:
        uint64_t v70 = *(void *)(v69 + 56);
        uint64_t WitnessTable = v69 + 56;
        uint64_t v71 = 1 << *(unsigned char *)(v69 + 32);
        uint64_t v72 = -1;
        if (v71 < 64) {
          uint64_t v72 = ~(-1 << v71);
        }
        unint64_t v73 = v72 & v70;
        uint64_t v74 = (void *)(v4 + 32);
        uint64_t v104 = (void (*)(char *, unint64_t, uint64_t))((unint64_t)(v71 + 63) >> 6);
        uint64_t result = swift_bridgeObjectRetain();
        LODWORD(v101) = 0;
        uint64_t v75 = 0;
        uint64_t v76 = MEMORY[0x263F8D310];
        uint64_t v77 = MEMORY[0x263F8D320];
        uint64_t v102 = v69;
        if (v73) {
          goto LABEL_78;
        }
LABEL_79:
        BOOL v22 = __OFADD__(v75++, 1);
        if (v22) {
          goto LABEL_104;
        }
        if (v75 < (uint64_t)v104)
        {
          unint64_t v79 = *(void *)(WitnessTable + 8 * v75);
          if (v79) {
            goto LABEL_89;
          }
          uint64_t v80 = v75 + 1;
          if (v75 + 1 < (uint64_t)v104)
          {
            unint64_t v79 = *(void *)(WitnessTable + 8 * v80);
            if (v79) {
              goto LABEL_88;
            }
            uint64_t v80 = v75 + 2;
            if (v75 + 2 < (uint64_t)v104)
            {
              unint64_t v79 = *(void *)(WitnessTable + 8 * v80);
              if (v79) {
                goto LABEL_88;
              }
              uint64_t v80 = v75 + 3;
              if (v75 + 3 < (uint64_t)v104)
              {
                unint64_t v79 = *(void *)(WitnessTable + 8 * v80);
                if (!v79)
                {
                  while (1)
                  {
                    uint64_t v75 = v80 + 1;
                    if (__OFADD__(v80, 1)) {
                      goto LABEL_112;
                    }
                    if (v75 >= (uint64_t)v104) {
                      goto LABEL_100;
                    }
                    unint64_t v79 = *(void *)(WitnessTable + 8 * v75);
                    ++v80;
                    if (v79) {
                      goto LABEL_89;
                    }
                  }
                }
LABEL_88:
                uint64_t v75 = v80;
LABEL_89:
                uint64_t v111 = (v79 - 1) & v79;
                for (unint64_t i = __clz(__rbit64(v79)) + (v75 << 6); ; unint64_t i = __clz(__rbit64(v73)) | (v75 << 6))
                {
                  uint64_t v81 = (void *)(*(void *)(v69 + 48) + 16 * i);
                  uint64_t v82 = (void *)*v81;
                  uint64_t v83 = v81[1];
                  swift_beginAccess();
                  uint64_t v84 = *v74;
                  unint64_t v110 = v82;
                  uint64_t v118 = v82;
                  uint64_t v119 = v83;
                  sub_24DCC9D48();
                  swift_bridgeObjectRetain_n();
                  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
                  MEMORY[0x2533276F0](&v112, &v118, v84, v76, TupleTypeMetadata2, v77);
                  swift_bridgeObjectRelease();
                  if (v112)
                  {
                    int v106 = v112;
                    uint64_t v107 = (void (**)(char *, unint64_t, uint64_t))v75;
                    uint64_t v86 = v77;
                    uint64_t v87 = v76;
                    uint64_t v88 = v74;
                    uint64_t v89 = v113;
                    swift_endAccess();
                    uint64_t v114 = v89;
                    swift_bridgeObjectRetain();
                    swift_getWitnessTable();
                    uint64_t v90 = v108;
                    uint64_t v91 = sub_24DCCA7F8();
                    uint64_t v108 = v90;
                    uint64_t v114 = v91;
                    swift_getWitnessTable();
                    if (sub_24DCC9FE8())
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v112 = 0;
                      uint64_t v113 = 0;
                      uint64_t v92 = v110;
                      uint64_t v118 = v110;
                      uint64_t v119 = v83;
                      uint64_t v74 = v88;
                      swift_beginAccess();
                      uint64_t v76 = v87;
                      uint64_t v77 = v86;
                      sub_24DCC9638();
                      swift_bridgeObjectRetain();
                      sub_24DCC9668();
                      swift_endAccess();
                      sub_24D578DFC(v92, v83, v106);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      uint64_t result = swift_bridgeObjectRelease();
                      LODWORD(v101) = 1;
                    }
                    else
                    {
                      swift_bridgeObjectRelease();
                      uint64_t v112 = v106;
                      uint64_t v113 = v91;
                      uint64_t v118 = v110;
                      uint64_t v119 = v83;
                      uint64_t v74 = v88;
                      swift_beginAccess();
                      uint64_t v76 = v87;
                      uint64_t v77 = v86;
                      sub_24DCC9638();
                      sub_24DCC9668();
                      uint64_t result = swift_endAccess();
                    }
                    uint64_t v69 = v102;
                    uint64_t v75 = (uint64_t)v107;
                    unint64_t v73 = v111;
                    if (!v111) {
                      goto LABEL_79;
                    }
                  }
                  else
                  {
                    swift_endAccess();
                    uint64_t result = swift_bridgeObjectRelease();
                    unint64_t v73 = v111;
                    if (!v111) {
                      goto LABEL_79;
                    }
                  }
LABEL_78:
                  uint64_t v111 = (v73 - 1) & v73;
                }
              }
            }
          }
        }
LABEL_100:
        swift_release();
        swift_bridgeObjectRelease();
        return v101 & 1;
      }
    }
    (*v101)(v13, v16, v7);
    uint64_t v23 = v106;
    swift_beginAccess();
    uint64_t v24 = *v23;
    uint64_t WitnessTable = swift_getWitnessTable();
    MEMORY[0x2533276F0](&v112, v13, v24, v7, &type metadata for JobLockRuleAssociatedJobs);
    uint64_t v25 = v112;
    if (v112) {
      break;
    }
    swift_endAccess();
    (*v100)(v13, v7);
LABEL_4:
    if (v19 == MEMORY[0x253327DC0](a3, v7)) {
      goto LABEL_71;
    }
  }
  uint64_t v102 = v19;
  uint64_t v26 = v113;
  uint64_t v118 = v112;
  swift_endAccess();
  uint64_t v27 = v25[2];
  unint64_t v110 = (void *)v26;
  if (!v27)
  {
    int64_t v40 = 0;
    goto LABEL_45;
  }
  uint64_t v28 = (uint64_t)(v25 + 4);
  swift_bridgeObjectRetain();
  unint64_t v29 = 0;
  uint64_t v30 = 11;
  unint64_t v31 = 1;
  while (1)
  {
    sub_24D415FD0(v28, (uint64_t)&v114, qword_26B1937C0);
    uint64_t v32 = v115;
    uint64_t v33 = v116;
    __swift_project_boxed_opaque_existential_1(&v114, v115);
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 16))(v32, v33);
    uint64_t v36 = v111;
    if (v34 == v111 && v35 == a2)
    {
      swift_bridgeObjectRelease();
      sub_24D57EABC((uint64_t)&v114);
      uint64_t result = swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    char v38 = sub_24DCCAE28();
    swift_bridgeObjectRelease();
    sub_24D57EABC((uint64_t)&v114);
    if (v38) {
      break;
    }
    ++v29;
    v28 += 56;
    ++v31;
    v30 += 7;
    if (v27 == v29)
    {
      uint64_t result = swift_bridgeObjectRelease();
      int64_t v40 = v118[2];
      uint64_t v7 = v109;
      goto LABEL_44;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v36 = v111;
LABEL_20:
  int64_t v40 = v29 + 1;
  uint64_t v7 = v109;
  if (__OFADD__(v29, 1)) {
    goto LABEL_111;
  }
  uint64_t v41 = v118;
  unint64_t v42 = v118[2];
  if (v40 == v42)
  {
LABEL_43:
    uint64_t v27 = v29;
LABEL_44:
    uint64_t v26 = (uint64_t)v110;
    if (v40 < v27) {
      goto LABEL_105;
    }
LABEL_45:
    sub_24DB00568(v27, v40);
    uint64_t v50 = v118;
    uint64_t v51 = v118[2];
    if (v51)
    {
      uint64_t v52 = (uint64_t)(v118 + 4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v4 = v105;
      uint64_t v13 = v99;
      while (1)
      {
        sub_24D415FD0(v52, (uint64_t)&v114, qword_26B1937C0);
        char v53 = v117;
        sub_24D57EABC((uint64_t)&v114);
        if (v53) {
          break;
        }
        v52 += 56;
        if (!--v51)
        {
          uint64_t v26 = (uint64_t)v110;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_50;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v50[2]) {
        goto LABEL_60;
      }
      goto LABEL_65;
    }
LABEL_50:
    int64_t v54 = *(void *)(v26 + 16);
    if (v54)
    {
      uint64_t v112 = (void *)MEMORY[0x263F8EE78];
      swift_bridgeObjectRetain();
      sub_24D3E4C28(0, v54, 0);
      uint64_t v55 = v26 + 32;
      char v56 = v112;
      do
      {
        sub_24D433858(v55, (uint64_t)&v114);
        uint64_t v57 = v115;
        uint64_t v58 = v116;
        __swift_project_boxed_opaque_existential_1(&v114, v115);
        uint64_t v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 16))(v57, v58);
        uint64_t v61 = v60;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v114);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_24D3E4C28(0, v56[2] + 1, 1);
          char v56 = v112;
        }
        unint64_t v63 = v56[2];
        unint64_t v62 = v56[3];
        if (v63 >= v62 >> 1)
        {
          sub_24D3E4C28(v62 > 1, v63 + 1, 1);
          char v56 = v112;
        }
        v56[2] = v63 + 1;
        char v64 = &v56[2 * v63];
        v64[4] = v59;
        v64[5] = v61;
        v55 += 40;
        --v54;
      }
      while (v54);
      swift_bridgeObjectRelease();
      uint64_t v7 = v109;
      uint64_t v65 = v56[2];
      if (!v65)
      {
LABEL_64:
        swift_bridgeObjectRelease();
        uint64_t v4 = v105;
        uint64_t v13 = v99;
        if (!v50[2])
        {
LABEL_60:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v104(v98, (unint64_t)v13, v7);
          uint64_t v112 = 0;
          uint64_t v113 = 0;
LABEL_66:
          swift_beginAccess();
          sub_24DCC9638();
          sub_24DCC9668();
          swift_endAccess();
          (*v100)(v13, v7);
          a3 = v97;
          uint64_t v8 = v96;
          uint64_t v16 = v95;
          uint64_t v19 = v102;
          goto LABEL_4;
        }
LABEL_65:
        v104(v98, (unint64_t)v13, v7);
        uint64_t v112 = v50;
        uint64_t v113 = (uint64_t)v110;
        goto LABEL_66;
      }
    }
    else
    {
      char v56 = (void *)MEMORY[0x263F8EE78];
      uint64_t v65 = *(void *)(MEMORY[0x263F8EE78] + 16);
      if (!v65) {
        goto LABEL_64;
      }
    }
    unint64_t v66 = v56 + 5;
    do
    {
      uint64_t v67 = *(v66 - 1);
      uint64_t v68 = *v66;
      swift_bridgeObjectRetain();
      sub_24D813974(&v114, v67, v68);
      swift_bridgeObjectRelease();
      v66 += 2;
      --v65;
    }
    while (v65);
    goto LABEL_64;
  }
  while (v31 < v42)
  {
    sub_24D415FD0((uint64_t)&v41[v30], (uint64_t)&v114, qword_26B1937C0);
    uint64_t v43 = v115;
    uint64_t v44 = v116;
    __swift_project_boxed_opaque_existential_1(&v114, v115);
    if ((*(uint64_t (**)(uint64_t, uint64_t))(v44 + 16))(v43, v44) == v36 && v45 == a2)
    {
      swift_bridgeObjectRelease();
      uint64_t result = sub_24D57EABC((uint64_t)&v114);
    }
    else
    {
      char v47 = sub_24DCCAE28();
      swift_bridgeObjectRelease();
      uint64_t result = sub_24D57EABC((uint64_t)&v114);
      if ((v47 & 1) == 0)
      {
        if (v31 != v29)
        {
          if ((v29 & 0x8000000000000000) != 0) {
            goto LABEL_106;
          }
          unint64_t v48 = v118;
          unint64_t v49 = v118[2];
          if (v29 >= v49) {
            goto LABEL_107;
          }
          uint64_t result = sub_24D415FD0((uint64_t)&v118[7 * v29 + 4], (uint64_t)&v114, qword_26B1937C0);
          if (v31 >= v49) {
            goto LABEL_108;
          }
          sub_24D415FD0((uint64_t)&v48[v30], (uint64_t)&v112, qword_26B1937C0);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_24DAFAFB8(v48);
            unint64_t v48 = (void *)result;
            uint64_t v118 = (void *)result;
          }
          if (v29 >= v48[2]) {
            goto LABEL_109;
          }
          uint64_t result = sub_24D57ECF4((uint64_t)&v112, (uint64_t)&v48[7 * v29 + 4]);
          if (v31 >= v118[2]) {
            goto LABEL_110;
          }
          uint64_t result = sub_24D57ECF4((uint64_t)&v114, (uint64_t)&v118[v30]);
        }
        BOOL v22 = __OFADD__(v29++, 1);
        if (v22) {
          goto LABEL_103;
        }
      }
    }
    int64_t v40 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      goto LABEL_102;
    }
    uint64_t v41 = v118;
    unint64_t v42 = v118[2];
    ++v31;
    v30 += 7;
    if (v40 == v42) {
      goto LABEL_43;
    }
  }
  __break(1u);
LABEL_102:
  __break(1u);
LABEL_103:
  __break(1u);
LABEL_104:
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
LABEL_107:
  __break(1u);
LABEL_108:
  __break(1u);
LABEL_109:
  __break(1u);
LABEL_110:
  __break(1u);
LABEL_111:
  __break(1u);
LABEL_112:
  __break(1u);
LABEL_113:
  __break(1u);
  return result;
}

uint64_t sub_24D579BE8(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for JobLockRule();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x2533276F0](&v13, a1, v4, v5, &type metadata for JobLockRuleAssociatedJobs, WitnessTable);
  uint64_t v7 = v13;
  if (!v13)
  {
    swift_endAccess();
    return 0;
  }
  swift_endAccess();
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8)
  {
LABEL_7:
    sub_24D401324(v7);
    return 0;
  }
  uint64_t v9 = v7 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_24D415FD0(v9, (uint64_t)v12, qword_26B1937C0);
    char v10 = v12[48];
    sub_24D57EABC((uint64_t)v12);
    if (v10) {
      break;
    }
    v9 += 56;
    if (!--v8)
    {
      swift_bridgeObjectRelease();
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  sub_24D401324(v7);
  return 1;
}

uint64_t sub_24D579D5C@<X0>(void *a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, v4);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 16))(v4, v5);
  char v8 = sub_24D578DFC(v6, v7, a1[7]);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v8 & 1;
  return result;
}

uint64_t sub_24D579DF8(uint64_t a1)
{
  return sub_24D57A3A0(a1, (void (*)(void))sub_24D57E93C);
}

uint64_t sub_24D579E10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)a1 + 80);
  uint64_t v34 = *(void (***)(char *, uint64_t))(*(void *)a1 + 88);
  uint64_t v35 = v4;
  uint64_t v5 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v6 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v36 = (char *)v33 - v7;
  uint64_t v8 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v6);
  char v10 = (char *)v33 - v9;
  swift_beginAccess();
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v40 = a2;
  MEMORY[0x2533276F0](&v38, a2, v11, v5, &type metadata for JobLockPendingFlushStatus, WitnessTable);
  uint64_t v13 = v38;
  uint64_t v14 = v39;
  uint64_t result = swift_endAccess();
  if (v13) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v13) {
    uint64_t v17 = v13;
  }
  else {
    uint64_t v17 = MEMORY[0x263F8EE78];
  }
  uint64_t v18 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
    return result;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v40, v5);
  uint64_t v38 = v17;
  uint64_t v39 = v18;
  swift_beginAccess();
  sub_24DCC9638();
  v33[1] = v17;
  swift_bridgeObjectRetain();
  sub_24DCC9668();
  swift_endAccess();
  id v19 = objc_msgSend(*(id *)(a1 + 40), sel_allObjects);
  uint64_t v20 = type metadata accessor for JobLockAggregator();
  uint64_t v21 = sub_24DCC9C28();

  if (!MEMORY[0x253327DC0](v21, v20)) {
    goto LABEL_17;
  }
  uint64_t v34 = (void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v35 = v5;
  uint64_t v22 = 4;
  uint64_t v23 = v36;
  uint64_t v24 = TupleTypeMetadata2;
  while (1)
  {
    uint64_t v25 = v22 - 4;
    char v26 = sub_24DCC9CB8();
    sub_24DCC9C68();
    if ((v26 & 1) == 0) {
      break;
    }
    uint64_t v27 = *(void *)(v21 + 8 * v22);
    uint64_t v28 = swift_retain();
    BOOL v29 = __OFADD__(v25, 1);
    uint64_t v30 = v22 - 3;
    if (v29) {
      goto LABEL_16;
    }
LABEL_12:
    MEMORY[0x270FA5388](v28);
    uint64_t v31 = v40;
    v33[-2] = v27;
    v33[-1] = v31;
    uint64_t v32 = (void *)swift_retain();
    sub_24D6006D8(v32, (void (*)(void))sub_24D57E958);
    swift_release_n();
    (*v34)(&v23[*(int *)(v24 + 48)], v35);
    ++v22;
    if (v30 == MEMORY[0x253327DC0](v21, v20)) {
      goto LABEL_17;
    }
  }
  uint64_t v28 = sub_24DCCA778();
  uint64_t v27 = v28;
  BOOL v29 = __OFADD__(v25, 1);
  uint64_t v30 = v22 - 3;
  if (!v29) {
    goto LABEL_12;
  }
LABEL_16:
  __break(1u);
LABEL_17:
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24D57A1F0@<X0>(uint64_t a1@<X1>, unsigned char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v10 - v6;
  swift_getTupleTypeMetadata2();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  swift_beginAccess();
  swift_getWitnessTable();
  sub_24DCC9F28();
  char v8 = sub_24DCC9EB8();
  uint64_t result = swift_endAccess();
  *a2 = v8 & 1;
  return result;
}

uint64_t sub_24D57A388(uint64_t a1)
{
  return sub_24D57A3A0(a1, (void (*)(void))sub_24D57E920);
}

uint64_t sub_24D57A3A0(uint64_t a1, void (*a2)(void))
{
  return sub_24D6006D8(v2, a2);
}

uint64_t sub_24D57A3D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v15 - v6;
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x2533276F0](&v16, a2, v8, v4, &type metadata for JobLockPendingFlushStatus, WitnessTable);
  uint64_t v10 = v16;
  if (!v16) {
    return swift_endAccess();
  }
  uint64_t v11 = v17;
  uint64_t result = swift_endAccess();
  BOOL v13 = __OFSUB__(v11, 1);
  uint64_t v14 = v11 - 1;
  if (!v13)
  {
    if (*(void *)(v10 + 16) | v14)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      uint64_t v16 = v10;
      uint64_t v17 = v14;
    }
    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
      uint64_t v16 = 0;
      uint64_t v17 = 0;
    }
    swift_beginAccess();
    sub_24DCC9638();
    sub_24DCC9668();
    return swift_endAccess();
  }
  __break(1u);
  return result;
}

uint64_t sub_24D57A5E4()
{
  return sub_24D60053C(v0, (void (*)(uint64_t *__return_ptr))sub_24D57E9E0) & 1;
}

uint64_t sub_24D57A634@<X0>(unsigned char *a1@<X8>)
{
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC9638();
  swift_getWitnessTable();
  char v2 = sub_24DCC9B08();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 & 1;
  return result;
}

uint64_t sub_24D57A774(char *a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v30 = *(void *)(TupleTypeMetadata2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  BOOL v29 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v27 - v6;
  char v8 = sub_24D571B94(a1, v2);
  uint64_t v32 = TupleTypeMetadata2;
  uint64_t v9 = *(int *)(TupleTypeMetadata2 + 48);
  uint64_t v10 = &v7[v9];
  uint64_t v11 = &a1[v9];
  uint64_t v28 = *(void *)(v2 - 8);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v12(v7, a1, v2);
  uint64_t v13 = *(void *)v11;
  uint64_t v14 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = *(void *)v11;
  *((void *)v10 + 1) = v14;
  if (v8)
  {
    uint64_t v15 = v32;
    uint64_t v16 = v29;
    uint64_t v17 = &v29[*(int *)(v32 + 48)];
    v12(v29, v7, v2);
    *(void *)uint64_t v17 = v13;
    *((void *)v17 + 1) = v14;
    uint64_t v18 = *(void *)(v13 + 16);
    id v19 = v7;
    if (v18)
    {
      uint64_t v27 = v7;
      uint64_t v20 = v13 + 32;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v21 = v30;
      uint64_t v22 = v28;
      while (1)
      {
        sub_24D415FD0(v20, (uint64_t)v31, qword_26B1937C0);
        char v23 = v31[48];
        sub_24D57EABC((uint64_t)v31);
        if (v23) {
          break;
        }
        v20 += 56;
        if (!--v18)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v24 = 0;
          goto LABEL_10;
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v24 = 1;
LABEL_10:
      uint64_t v16 = v29;
      id v19 = v27;
      uint64_t v15 = v32;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v24 = 0;
      uint64_t v21 = v30;
      uint64_t v22 = v28;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v19, v15);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v16, v2);
  }
  else
  {
    uint64_t v25 = *(void (**)(char *, uint64_t))(v30 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v25(v7, v32);
    return 0;
  }
  return v24;
}

uint64_t sub_24D57AA64()
{
  return sub_24D600470(v0, (void (*)(uint64_t *__return_ptr))sub_24D57E890);
}

uint64_t sub_24D57AAAC@<X0>(void *a1@<X8>)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC95D8();
  swift_bridgeObjectRelease();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  uint64_t result = sub_24DCC9968();
  *a1 = 0x202092949FF0;
  a1[1] = 0xA600000000000000;
  return result;
}

uint64_t sub_24D57AC18()
{
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  sub_24DCC95E8();
  __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B193F80);
  swift_getWitnessTable();
  sub_24DCCA8B8();
  swift_getWitnessTable();
  sub_24D57EB38();
  sub_24DCCA898();
  swift_getWitnessTable();
  sub_24DCCA758();
  return sub_24D6006D8(v0, (void (*)(void))sub_24D57EB1C);
}

uint64_t sub_24D57AD90(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  nullsub_1(v2);
  uint64_t v3 = sub_24DCC95E8();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x253327B80](&v6, v3, WitnessTable);
  sub_24DCCA758();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B193F80);
  swift_getWitnessTable();
  sub_24D57EB38();
  sub_24DCCAA68();
  return swift_bridgeObjectRelease();
}

uint64_t sub_24D57AF40@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(a1 + 8);
  return swift_bridgeObjectRetain();
}

uint64_t sub_24D57AF4C()
{
  return sub_24D60053C(v0, (void (*)(uint64_t *__return_ptr))sub_24D57E904) & 1;
}

uint64_t sub_24D57AF98@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for JobLockRule();
  swift_bridgeObjectRetain();
  uint64_t WitnessTable = swift_getWitnessTable();
  char v7 = MEMORY[0x2533276A0](v4, v5, &type metadata for JobLockRuleAssociatedJobs, WitnessTable);
  uint64_t result = swift_bridgeObjectRelease();
  if (v7)
  {
    swift_beginAccess();
    uint64_t v9 = *(void *)(a1 + 32);
    sub_24DCC9D48();
    swift_bridgeObjectRetain();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    char v11 = MEMORY[0x2533276A0](v9, MEMORY[0x263F8D310], TupleTypeMetadata2, MEMORY[0x263F8D320]);
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    char v11 = 0;
  }
  *a2 = v11 & 1;
  return result;
}

uint64_t sub_24D57B0F8()
{
  return sub_24D6006D8(v0, (void (*)(void))sub_24D57E8AC);
}

uint64_t sub_24D57B140(uint64_t a1)
{
  type metadata accessor for JobLockRule();
  swift_getTupleTypeMetadata2();
  sub_24DCC9C98();
  swift_getWitnessTable();
  uint64_t v2 = sub_24DCC95B8();
  swift_beginAccess();
  *(void *)(a1 + 16) = v2;
  swift_bridgeObjectRelease();
  sub_24DCC9D48();
  swift_getTupleTypeMetadata2();
  swift_getTupleTypeMetadata2();
  sub_24DCC9C98();
  uint64_t v3 = sub_24DCC95B8();
  swift_beginAccess();
  *(void *)(a1 + 32) = v3;
  return swift_bridgeObjectRelease();
}

uint64_t sub_24D57B2CC()
{
  return sub_24D6006D8(v0, (void (*)(void))sub_24D57E8C8);
}

uint64_t sub_24D57B31C(uint64_t a1, void *a2, int a3)
{
  int v51 = a3;
  uint64_t v61 = a2;
  uint64_t v4 = type metadata accessor for JobLockRule();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v60 = (char *)&v49 - v6;
  uint64_t v71 = v7;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v64 = sub_24DCCA3F8();
  uint64_t v9 = *(void *)(v64 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v64);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v65 = (char *)&v49 - v13;
  swift_beginAccess();
  uint64_t v50 = a1;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v52 = v14 + 64;
  uint64_t v16 = 1 << *(unsigned char *)(v14 + 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v66 = TupleTypeMetadata2;
  uint64_t v54 = v5 + 16;
  uint64_t v55 = v5;
  unint64_t v62 = (void (**)(char *, char *, uint64_t))(v9 + 32);
  uint64_t v63 = TupleTypeMetadata2 - 8;
  uint64_t v57 = (uint64_t (**)(char *, uint64_t))(v5 + 8);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v5 + 32);
  int64_t v53 = (unint64_t)(v16 + 63) >> 6;
  int64_t v49 = v53 - 1;
  uint64_t v56 = v14;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v67 = 0;
  uint64_t v59 = v12;
  uint64_t v20 = v71;
  if (!v18) {
    goto LABEL_6;
  }
LABEL_4:
  unint64_t v21 = __clz(__rbit64(v18));
  uint64_t v22 = (v18 - 1) & v18;
  uint64_t v23 = v66;
  unint64_t v24 = v21 | (v67 << 6);
  uint64_t v25 = v65;
LABEL_5:
  uint64_t v26 = v56;
  (*(void (**)(char *, unint64_t, uint64_t))(v55 + 16))(v12, *(void *)(v56 + 48) + *(void *)(v55 + 72) * v24, v71);
  uint64_t v27 = *(int *)(v23 + 48);
  long long v68 = *(_OWORD *)(*(void *)(v26 + 56) + 16 * v24);
  *(_OWORD *)&v12[v27] = v68;
  uint64_t v28 = *(void *)(v23 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v12, 0, 1, v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  while (1)
  {
    (*v62)(v25, v12, v64);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v25, 1, v23) == 1)
    {
      uint64_t result = swift_release();
      if (v51)
      {
        uint64_t v44 = v61;
        uint64_t v45 = v61[3];
        uint64_t v46 = v61[4];
        __swift_project_boxed_opaque_existential_1(v61, v45);
        sub_24D90FFEC(0x2064656B636F6C62, 0xED00003A73626F6ALL, v45, v46);
        uint64_t v47 = v44[3];
        uint64_t v48 = v44[4];
        __swift_project_boxed_opaque_existential_1(v44, v47);
        return sub_24D9100BC(8224, 0xE200000000000000, (void (*)(void *))sub_24D57E8E8, v50, v47, MEMORY[0x263F8EE60] + 8, v48);
      }
      return result;
    }
    uint64_t v33 = &v25[*(int *)(v23 + 48)];
    uint64_t v35 = *(void *)v33;
    uint64_t v34 = *((void *)v33 + 1);
    uint64_t v36 = *v58;
    *(void *)&long long v68 = v22;
    uint64_t v37 = v60;
    v36(v60, v25, v20);
    uint64_t v39 = v61[3];
    uint64_t v38 = v61[4];
    __swift_project_boxed_opaque_existential_1(v61, v39);
    uint64_t v69 = 0;
    uint64_t v70 = 0xE000000000000000;
    sub_24DCCA728();
    swift_getWitnessTable();
    sub_24DCCADC8();
    sub_24DCC9968();
    swift_bridgeObjectRetain();
    uint64_t v40 = __swift_instantiateConcreteTypeFromMangledName(qword_26B1937C0);
    MEMORY[0x253327CD0](v35, v40);
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRetain();
    uint64_t v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B0);
    MEMORY[0x253327CD0](v34, v41);
    sub_24DCC9968();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v42 = v38;
    uint64_t v12 = v59;
    sub_24D90FFEC(v69, v70, v39, v42);
    swift_bridgeObjectRelease();
    uint64_t v43 = v37;
    unint64_t v18 = v68;
    uint64_t result = (*v57)(v43, v20);
    if (v18) {
      goto LABEL_4;
    }
LABEL_6:
    uint64_t v23 = v66;
    int64_t v29 = v67 + 1;
    uint64_t v25 = v65;
    if (__OFADD__(v67, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v29 < v53)
    {
      unint64_t v30 = *(void *)(v52 + 8 * v29);
      if (v30) {
        goto LABEL_9;
      }
      int64_t v31 = v67 + 2;
      ++v67;
      if (v29 + 1 < v53)
      {
        unint64_t v30 = *(void *)(v52 + 8 * v31);
        if (v30)
        {
          ++v29;
LABEL_9:
          uint64_t v22 = (v30 - 1) & v30;
          unint64_t v24 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v67 = v29;
          goto LABEL_5;
        }
        int64_t v32 = v29 + 2;
        int64_t v67 = v29 + 1;
        if (v29 + 2 < v53) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v28 = *(void *)(v66 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v12, 1, 1, v66);
    uint64_t v22 = 0;
  }
  unint64_t v30 = *(void *)(v52 + 8 * v32);
  if (v30)
  {
    v29 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    int64_t v29 = v32 + 1;
    if (__OFADD__(v32, 1)) {
      break;
    }
    if (v29 >= v53)
    {
      int64_t v67 = v49;
      goto LABEL_21;
    }
    unint64_t v30 = *(void *)(v52 + 8 * v29);
    ++v32;
    if (v30) {
      goto LABEL_9;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_24D57BA3C(void *a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v3 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v15 = v3 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(v3 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  uint64_t v7 = v6 & v4;
  int64_t v14 = (unint64_t)(v5 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v9 = 0;
  while (1)
  {
    if (v7)
    {
      v7 &= v7 - 1;
      goto LABEL_5;
    }
    int64_t v11 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_21;
    }
    if (v11 >= v14) {
      return swift_release();
    }
    uint64_t v12 = *(void *)(v15 + 8 * v11);
    ++v9;
    if (!v12)
    {
      int64_t v9 = v11 + 1;
      if (v11 + 1 >= v14) {
        return swift_release();
      }
      uint64_t v12 = *(void *)(v15 + 8 * v9);
      if (!v12) {
        break;
      }
    }
LABEL_18:
    uint64_t v7 = (v12 - 1) & v12;
LABEL_5:
    uint64_t v10 = a1[3];
    uint64_t v17 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24DCCA728();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    type metadata accessor for JobLockRule();
    sub_24DCC9D48();
    swift_getWitnessTable();
    sub_24DCCADC8();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    sub_24DCCADC8();
    swift_bridgeObjectRelease();
    sub_24D90FFEC(0, 0xE000000000000000, v10, v17);
    uint64_t result = swift_bridgeObjectRelease();
  }
  int64_t v13 = v11 + 2;
  if (v13 >= v14) {
    return swift_release();
  }
  uint64_t v12 = *(void *)(v15 + 8 * v13);
  if (v12)
  {
    int64_t v9 = v13;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v9 = v13 + 1;
    if (__OFADD__(v13, 1)) {
      break;
    }
    if (v9 >= v14) {
      return swift_release();
    }
    uint64_t v12 = *(void *)(v15 + 8 * v9);
    ++v13;
    if (v12) {
      goto LABEL_18;
    }
  }
LABEL_21:
  __break(1u);
  return result;
}

uint64_t sub_24D57BD24()
{
  type metadata accessor for JobLockAggregator();
  sub_24D6006D8(v0, (void (*)(void))sub_24D57EC5C);
  return v2;
}

id sub_24D57BDAC@<X0>(id *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *((void *)*a1 + 10);
  uint64_t v4 = *((void *)*a1 + 11);
  type metadata accessor for JobLockAggregator();
  swift_beginAccess();
  type metadata accessor for JobLockRule();
  swift_getWitnessTable();
  uint64_t v5 = sub_24DCC9638();
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x253327B80](&v11, v5, WitnessTable);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v4;
  sub_24DCCA758();
  swift_getWitnessTable();
  sub_24DCCAA58();
  swift_release();
  swift_getKeyPath();
  sub_24DCCA9A8();
  swift_getWitnessTable();
  sub_24DCCAA48();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_getWitnessTable();
  sub_24DCCA8B8();
  swift_getWitnessTable();
  sub_24DCC9D78();
  swift_beginAccess();
  sub_24DCC95C8();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  sub_24DCC9D78();
  swift_allocObject();
  uint64_t v8 = sub_24D575528();
  id result = objc_msgSend(a1[5], sel_addObject_, v8);
  *a2 = v8;
  return result;
}

uint64_t sub_24D57C138(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v4 = MEMORY[0x270FA5388](TupleTypeMetadata2 - 8);
  uint64_t v6 = &v19[-v5 - 8];
  uint64_t v7 = *(int *)(v4 + 56);
  uint64_t v8 = &v6[v7];
  int64_t v9 = (uint64_t *)(a1 + v7);
  uint64_t v10 = *(void *)(v2 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v10 + 16))(v6, a1, v2);
  uint64_t v11 = *v9;
  uint64_t v12 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v12;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v14 = v11 + 32;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_24D415FD0(v14, (uint64_t)v19, qword_26B1937C0);
      char v15 = v19[48];
      sub_24D57EABC((uint64_t)v19);
      if (v15) {
        break;
      }
      v14 += 56;
      if (!--v13)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = 1;
  }
  else
  {
LABEL_6:
    uint64_t v16 = 0;
  }
  (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v6, v2);
  return v16;
}

uint64_t sub_24D57C2DC@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  v20[1] = a3;
  uint64_t v3 = (uint64_t *)(*a2 + *MEMORY[0x263F8EA20]);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](a1);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = MEMORY[0x270FA5388](v6);
  uint64_t v11 = (char *)v20 - v10;
  uint64_t v12 = (uint64_t *)(v9 + *(int *)(v4 + 48));
  uint64_t v14 = *(void *)(v13 + 8);
  uint64_t v15 = *(void *)(v14 - 8);
  (*(void (**)(char *))(v15 + 16))((char *)v20 - v10);
  uint64_t v16 = *v12;
  uint64_t v17 = v12[1];
  unint64_t v18 = &v8[*(int *)(v4 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v8, v11, v14);
  *(void *)unint64_t v18 = v16;
  *((void *)v18 + 1) = v17;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_getAtKeyPath();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_24D57C4A8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_24D57C4E0()
{
  sub_24D57C4A8();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobLock()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24D57C52C()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for JobLock.Registration()
{
  return __swift_instantiateGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for JobLockPendingFlushStatus(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JobLockPendingFlushStatus(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for JobLockPendingFlushStatus(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for JobLockPendingFlushStatus()
{
  return &type metadata for JobLockPendingFlushStatus;
}

void *assignWithCopy for JobLockRuleAssociatedJobs(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for JobLockRuleAssociatedJobs(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for JobLockRuleAssociatedJobs()
{
  return &type metadata for JobLockRuleAssociatedJobs;
}

uint64_t sub_24D57C740()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v1 = AssociatedTypeWitness;
  if (v2 <= 0x3F)
  {
    uint64_t v3 = *(void *)(AssociatedTypeWitness - 8) + 64;
    uint64_t v8 = v3;
    swift_getTupleTypeLayout3();
    uint64_t v9 = &v7;
    uint64_t v1 = sub_24DCCA3F8();
    if (v4 <= 0x3F)
    {
      swift_getTupleTypeLayout2();
      uint64_t v10 = &v6;
      uint64_t v11 = v3;
      uint64_t v12 = v3;
      uint64_t v13 = v3;
      uint64_t v14 = v3;
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return v1;
}

void *sub_24D57C868(void *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  unint64_t v8 = ~(unint64_t)v7;
  unint64_t v9 = v6 + v7;
  unint64_t v10 = v9 & v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  if (v6 <= ((v6 + v7 + v10) & ~(unint64_t)v7) + v6) {
    v6 += (v6 + v7 + v10) & ~(unint64_t)v7;
  }
  if (v6 <= v10 + v11) {
    unint64_t v12 = v10 + v11;
  }
  else {
    unint64_t v12 = v6;
  }
  size_t v13 = v12 + 1;
  if (v7 > 7u || (v7 & 0x100000) != 0 || v13 > 0x18)
  {
    uint64_t v16 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v16 + ((v7 + 16) & v8));
    swift_retain();
  }
  else
  {
    uint64_t v18 = AssociatedTypeWitness;
    unsigned int v19 = a2[v12];
    unsigned int v20 = v19 - 7;
    if (v19 >= 7)
    {
      if (v12 <= 3) {
        uint64_t v21 = v12;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *a2;
          goto LABEL_28;
        case 2:
          int v22 = *(unsigned __int16 *)a2;
          goto LABEL_28;
        case 3:
          int v22 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_28;
        case 4:
          int v22 = *(_DWORD *)a2;
LABEL_28:
          int v23 = (v22 | (v20 << (8 * v12))) + 7;
          unsigned int v19 = v22 + 7;
          if (v12 < 4) {
            unsigned int v19 = v23;
          }
          break;
        default:
          break;
      }
    }
    switch(v19)
    {
      case 0u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 0;
        break;
      case 1u:
        unint64_t v24 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
        v24(a1, a2, AssociatedTypeWitness);
        unint64_t v25 = (unint64_t)&a2[v9] & v8;
        v24((void *)(((unint64_t)a1 + v9) & v8), (unsigned __int8 *)v25, v18);
        v24((void *)((v9 + (((unint64_t)a1 + v9) & v8)) & v8), (unsigned __int8 *)((v9 + v25) & v8), v18);
        *((unsigned char *)a1 + v12) = 1;
        break;
      case 2u:
        uint64_t v26 = *(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16);
        v26(a1, a2, AssociatedTypeWitness);
        __dst = (void *)(((unint64_t)a1 + v9) & v8);
        uint64_t v27 = (void *)((unint64_t)&a2[v9] & v8);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v27, 1, v18))
        {
          memcpy(__dst, v27, v11);
        }
        else
        {
          v26(__dst, (unsigned __int8 *)v27, v18);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v18);
        }
        *((unsigned char *)a1 + v12) = 2;
        break;
      case 3u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 3;
        break;
      case 4u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 4;
        break;
      case 5u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 5;
        break;
      case 6u:
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        *((unsigned char *)a1 + v12) = 6;
        break;
      default:
        memcpy(a1, a2, v13);
        break;
    }
  }
  return a1;
}

uint64_t sub_24D57CC54(unsigned __int8 *a1)
{
  uint64_t result = swift_getAssociatedTypeWitness();
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = v5 + v6;
  uint64_t v8 = (v5 + v6) & ~v6;
  unint64_t v9 = ((v5 + v6 + v8) & ~v6) + v5;
  unint64_t v10 = v8 + v5;
  if (!*(_DWORD *)(v4 + 84)) {
    ++v10;
  }
  if (v5 <= v9) {
    unint64_t v5 = v9;
  }
  if (v5 <= v10) {
    unint64_t v5 = v10;
  }
  unsigned int v11 = a1[v5];
  unsigned int v12 = v11 - 7;
  if (v11 >= 7)
  {
    if (v5 <= 3) {
      uint64_t v13 = v5;
    }
    else {
      uint64_t v13 = 4;
    }
    switch(v13)
    {
      case 1:
        int v14 = *a1;
        goto LABEL_16;
      case 2:
        int v14 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v14 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v14 = *(_DWORD *)a1;
LABEL_16:
        int v15 = (v14 | (v12 << (8 * v5))) + 7;
        unsigned int v11 = v14 + 7;
        if (v5 < 4) {
          unsigned int v11 = v15;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v16 = ~v6;
  switch(v11)
  {
    case 0u:
    case 3u:
    case 4u:
    case 5u:
    case 6u:
      uint64_t v17 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      uint64_t v18 = a1;
      uint64_t v19 = v3;
      goto LABEL_20;
    case 1u:
      int v23 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v23(a1, result);
      unint64_t v20 = (unint64_t)&a1[v7] & v16;
      v23((unsigned __int8 *)v20, v3);
      uint64_t v18 = (unsigned __int8 *)((v7 + v20) & v16);
      uint64_t v19 = v3;
      uint64_t v17 = (uint64_t (*)(unsigned __int8 *, uint64_t))v23;
LABEL_20:
      uint64_t result = v17(v18, v19);
      break;
    case 2u:
      uint64_t v24 = *(void *)(result - 8);
      int v22 = *(void (**)(unsigned __int8 *, uint64_t))(v4 + 8);
      v22(a1, result);
      unint64_t v21 = (unint64_t)&a1[v7] & v16;
      uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v24 + 48))(v21, 1, v3);
      if (!result)
      {
        uint64_t result = ((uint64_t (*)(unint64_t, uint64_t))v22)(v21, v3);
      }
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_24D57CF10(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  size_t v9 = (v6 + v7) & ~v7;
  size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  size_t v12 = v9 + v11;
  if (v6 <= v10) {
    size_t v6 = v10;
  }
  if (v6 <= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v6;
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 7;
  if (v14 >= 7)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_18;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_18:
        int v18 = (v17 | (v15 << (8 * v13))) + 7;
        unsigned int v14 = v17 + 7;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      unint64_t v20 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v20(a1, a2, AssociatedTypeWitness);
      unint64_t v21 = (unint64_t)&a2[v8] & v19;
      v20((unsigned char *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v21, AssociatedTypeWitness);
      v20((unsigned char *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v21) & v19), AssociatedTypeWitness);
      char v22 = 1;
      goto LABEL_32;
    case 2u:
      int v23 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16);
      v23(a1, a2, AssociatedTypeWitness);
      __dst = (unsigned char *)((unint64_t)&a1[v8] & v19);
      uint64_t v24 = (void *)((unint64_t)&a2[v8] & v19);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v24, 1, AssociatedTypeWitness))
      {
        memcpy(__dst, v24, v11);
      }
      else
      {
        v23(__dst, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, AssociatedTypeWitness);
      }
      char v22 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 5;
      goto LABEL_32;
    case 6u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
      char v22 = 6;
LABEL_32:
      a1[v13] = v22;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_24D57D2B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    size_t v9 = (v6 + v7) & ~v7;
    size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84)) {
      size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v11 = v6 + 1;
    }
    size_t v12 = v9 + v11;
    if (v6 <= v10) {
      size_t v6 = v10;
    }
    if (v6 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 7;
    if (v14 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 7;
          unsigned int v14 = v17 + 7;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v7;
    switch(v14)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        __dstb = (void *)v11;
        uint64_t v24 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v24(a1, AssociatedTypeWitness);
        v24((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness);
        v24((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), AssociatedTypeWitness);
        size_t v11 = (size_t)__dstb;
        break;
      case 2u:
        __dst = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        __dst(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v19, 1, AssociatedTypeWitness))__dst((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness); {
        break;
        }
      default:
        break;
    }
    unsigned int v20 = a2[v13];
    unsigned int v21 = v20 - 7;
    if (v20 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_35;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v23 | (v21 << (8 * v13))) + 7;
          unsigned int v20 = v23 + 7;
          if (v13 < 4) {
            unsigned int v20 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        uint64_t v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v26(a1, a2, AssociatedTypeWitness);
        unint64_t v27 = (unint64_t)&a2[v8] & v19;
        v26((unsigned __int8 *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v27, AssociatedTypeWitness);
        v26((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v27) & v19), AssociatedTypeWitness);
        char v28 = 1;
        goto LABEL_49;
      case 2u:
        int64_t v29 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16);
        v29(a1, a2, AssociatedTypeWitness);
        __dsta = (void *)((unint64_t)&a1[v8] & v19);
        unint64_t v30 = (void *)((unint64_t)&a2[v8] & v19);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
        {
          memcpy(__dsta, v30, v11);
        }
        else
        {
          v29((unsigned __int8 *)__dsta, (unsigned __int8 *)v30, AssociatedTypeWitness);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dsta, 0, 1, AssociatedTypeWitness);
        }
        char v28 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
        char v28 = 6;
LABEL_49:
        a1[v13] = v28;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

unsigned char *sub_24D57D81C(unsigned char *a1, unsigned __int8 *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  size_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v6 + v7;
  size_t v9 = (v6 + v7) & ~v7;
  size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  }
  else {
    size_t v11 = v6 + 1;
  }
  size_t v12 = v9 + v11;
  if (v6 <= v10) {
    size_t v6 = v10;
  }
  if (v6 <= v12) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v6;
  }
  unsigned int v14 = a2[v13];
  unsigned int v15 = v14 - 7;
  if (v14 >= 7)
  {
    if (v13 <= 3) {
      uint64_t v16 = v13;
    }
    else {
      uint64_t v16 = 4;
    }
    switch(v16)
    {
      case 1:
        int v17 = *a2;
        goto LABEL_18;
      case 2:
        int v17 = *(unsigned __int16 *)a2;
        goto LABEL_18;
      case 3:
        int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_18;
      case 4:
        int v17 = *(_DWORD *)a2;
LABEL_18:
        int v18 = (v17 | (v15 << (8 * v13))) + 7;
        unsigned int v14 = v17 + 7;
        if (v13 < 4) {
          unsigned int v14 = v18;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v19 = ~v7;
  switch(v14)
  {
    case 0u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      a1[v13] = 0;
      return a1;
    case 1u:
      unsigned int v20 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
      v20(a1, a2, AssociatedTypeWitness);
      unint64_t v21 = (unint64_t)&a2[v8] & v19;
      v20((unsigned char *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v21, AssociatedTypeWitness);
      v20((unsigned char *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v21) & v19), AssociatedTypeWitness);
      char v22 = 1;
      goto LABEL_32;
    case 2u:
      int v23 = *(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32);
      v23(a1, a2, AssociatedTypeWitness);
      __dst = (unsigned char *)((unint64_t)&a1[v8] & v19);
      uint64_t v24 = (void *)((unint64_t)&a2[v8] & v19);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v24, 1, AssociatedTypeWitness))
      {
        memcpy(__dst, v24, v11);
      }
      else
      {
        v23(__dst, (unsigned __int8 *)v24, AssociatedTypeWitness);
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, AssociatedTypeWitness);
      }
      char v22 = 2;
      goto LABEL_32;
    case 3u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 3;
      goto LABEL_32;
    case 4u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 4;
      goto LABEL_32;
    case 5u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 5;
      goto LABEL_32;
    case 6u:
      (*(void (**)(unsigned char *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
      char v22 = 6;
LABEL_32:
      a1[v13] = v22;
      break;
    default:
      memcpy(a1, a2, v13 + 1);
      break;
  }
  return a1;
}

unsigned __int8 *sub_24D57DBC4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a1 != a2)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
    size_t v6 = *(void *)(v5 + 64);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = v6 + v7;
    size_t v9 = (v6 + v7) & ~v7;
    size_t v10 = ((v6 + v7 + v9) & ~v7) + v6;
    if (*(_DWORD *)(v5 + 84)) {
      size_t v11 = *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
    }
    else {
      size_t v11 = v6 + 1;
    }
    size_t v12 = v9 + v11;
    if (v6 <= v10) {
      size_t v6 = v10;
    }
    if (v6 <= v12) {
      size_t v13 = v12;
    }
    else {
      size_t v13 = v6;
    }
    unsigned int v14 = a1[v13];
    unsigned int v15 = v14 - 7;
    if (v14 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a1;
          goto LABEL_19;
        case 2:
          int v17 = *(unsigned __int16 *)a1;
          goto LABEL_19;
        case 3:
          int v17 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_19;
        case 4:
          int v17 = *(_DWORD *)a1;
LABEL_19:
          int v18 = (v17 | (v15 << (8 * v13))) + 7;
          unsigned int v14 = v17 + 7;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v19 = ~v7;
    switch(v14)
    {
      case 0u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        (*(void (**)(unsigned __int8 *, uint64_t))(v5 + 8))(a1, AssociatedTypeWitness);
        break;
      case 1u:
        __dstb = (void *)v11;
        uint64_t v24 = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        v24(a1, AssociatedTypeWitness);
        v24((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness);
        v24((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), AssociatedTypeWitness);
        size_t v11 = (size_t)__dstb;
        break;
      case 2u:
        __dst = *(void (**)(unsigned __int8 *, uint64_t))(v5 + 8);
        __dst(a1, AssociatedTypeWitness);
        if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))((unint64_t)&a1[v8] & v19, 1, AssociatedTypeWitness))__dst((unsigned __int8 *)((unint64_t)&a1[v8] & v19), AssociatedTypeWitness); {
        break;
        }
      default:
        break;
    }
    unsigned int v20 = a2[v13];
    unsigned int v21 = v20 - 7;
    if (v20 >= 7)
    {
      if (v13 <= 3) {
        uint64_t v22 = v13;
      }
      else {
        uint64_t v22 = 4;
      }
      switch(v22)
      {
        case 1:
          int v23 = *a2;
          goto LABEL_35;
        case 2:
          int v23 = *(unsigned __int16 *)a2;
          goto LABEL_35;
        case 3:
          int v23 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_35;
        case 4:
          int v23 = *(_DWORD *)a2;
LABEL_35:
          int v25 = (v23 | (v21 << (8 * v13))) + 7;
          unsigned int v20 = v23 + 7;
          if (v13 < 4) {
            unsigned int v20 = v25;
          }
          break;
        default:
          break;
      }
    }
    switch(v20)
    {
      case 0u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        a1[v13] = 0;
        return a1;
      case 1u:
        uint64_t v26 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v26(a1, a2, AssociatedTypeWitness);
        unint64_t v27 = (unint64_t)&a2[v8] & v19;
        v26((unsigned __int8 *)((unint64_t)&a1[v8] & v19), (unsigned __int8 *)v27, AssociatedTypeWitness);
        v26((unsigned __int8 *)((v8 + ((unint64_t)&a1[v8] & v19)) & v19), (unsigned __int8 *)((v8 + v27) & v19), AssociatedTypeWitness);
        char v28 = 1;
        goto LABEL_49;
      case 2u:
        int64_t v29 = *(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32);
        v29(a1, a2, AssociatedTypeWitness);
        __dsta = (void *)((unint64_t)&a1[v8] & v19);
        unint64_t v30 = (void *)((unint64_t)&a2[v8] & v19);
        if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v5 + 48))(v30, 1, AssociatedTypeWitness))
        {
          memcpy(__dsta, v30, v11);
        }
        else
        {
          v29((unsigned __int8 *)__dsta, (unsigned __int8 *)v30, AssociatedTypeWitness);
          (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dsta, 0, 1, AssociatedTypeWitness);
        }
        char v28 = 2;
        goto LABEL_49;
      case 3u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 3;
        goto LABEL_49;
      case 4u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 4;
        goto LABEL_49;
      case 5u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 5;
        goto LABEL_49;
      case 6u:
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v5 + 32))(a1, a2, AssociatedTypeWitness);
        char v28 = 6;
LABEL_49:
        a1[v13] = v28;
        break;
      default:
        memcpy(a1, a2, v13 + 1);
        break;
    }
  }
  return a1;
}

uint64_t sub_24D57E128(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v5 + v6) & ~v6;
  unint64_t v8 = ((v5 + v6 + v7) & ~v6) + v5;
  if (v8 <= v5) {
    unint64_t v8 = *(void *)(v4 + 64);
  }
  BOOL v9 = *(_DWORD *)(v4 + 84) == 0;
  unint64_t v10 = v7 + v5;
  if (v9) {
    ++v10;
  }
  if (v10 <= v8) {
    unint64_t v10 = v8;
  }
  if (v5 > v10) {
    unint64_t v10 = v5;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_28;
  }
  unint64_t v11 = v10 + 1;
  char v12 = 8 * (v10 + 1);
  if ((v10 + 1) <= 3)
  {
    unsigned int v15 = ((a2 + ~(-1 << v12) - 248) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_28;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_28:
      unsigned int v17 = *((unsigned __int8 *)a1 + v10);
      if (v17 >= 8) {
        return (v17 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_28;
  }
LABEL_20:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v11 | v16) + 249;
}

void sub_24D57E2F4(unsigned char *a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v7 + v8) & ~v8;
  unint64_t v10 = ((v7 + v8 + v9) & ~v8) + v7;
  if (v10 <= v7) {
    unint64_t v10 = *(void *)(v6 + 64);
  }
  BOOL v11 = *(_DWORD *)(v6 + 84) == 0;
  unint64_t v12 = v9 + v7;
  if (v11) {
    ++v12;
  }
  if (v12 <= v10) {
    unint64_t v12 = v10;
  }
  if (v7 <= v12) {
    unint64_t v7 = v12;
  }
  size_t v13 = v7 + 1;
  if (a3 < 0xF9)
  {
    int v14 = 0;
  }
  else if (v13 <= 3)
  {
    unsigned int v17 = ((a3 + ~(-1 << (8 * v13)) - 248) >> (8 * v13)) + 1;
    if (HIWORD(v17))
    {
      int v14 = 4;
    }
    else if (v17 >= 0x100)
    {
      int v14 = 2;
    }
    else
    {
      int v14 = v17 > 1;
    }
  }
  else
  {
    int v14 = 1;
  }
  if (a2 > 0xF8)
  {
    unsigned int v15 = a2 - 249;
    if (v13 < 4)
    {
      int v16 = (v15 >> (8 * v13)) + 1;
      if (v7 != -1)
      {
        int v18 = v15 & ~(-1 << (8 * v13));
        bzero(a1, v13);
        if (v13 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v13 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v7 + 1);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v13] = v16;
        break;
      case 2:
        *(_WORD *)&a1[v13] = v16;
        break;
      case 3:
LABEL_40:
        __break(1u);
        JUMPOUT(0x24D57E53CLL);
      case 4:
        *(_DWORD *)&a1[v13] = v16;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v14)
    {
      case 1:
        a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      case 2:
        *(_WORD *)&a1[v13] = 0;
        goto LABEL_28;
      case 3:
        goto LABEL_40;
      case 4:
        *(_DWORD *)&a1[v13] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_29;
      default:
LABEL_28:
        if (a2) {
LABEL_29:
        }
          a1[v7] = -(char)a2;
        break;
    }
  }
}

uint64_t sub_24D57E564(unsigned __int8 *a1)
{
  uint64_t v2 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v3 + v4) & ~v4;
  unint64_t v6 = ((v3 + v4 + v5) & ~v4) + v3;
  unint64_t v7 = v5 + v3;
  if (!*(_DWORD *)(v2 + 84)) {
    ++v7;
  }
  if (v3 <= v6) {
    unint64_t v3 = v6;
  }
  if (v3 <= v7) {
    unint64_t v3 = v7;
  }
  uint64_t result = a1[v3];
  if (result >= 7)
  {
    if (v3 <= 3) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = 4;
    }
    switch(v9)
    {
      case 1:
        int v10 = *a1;
        goto LABEL_16;
      case 2:
        int v10 = *(unsigned __int16 *)a1;
        goto LABEL_16;
      case 3:
        int v10 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_16;
      case 4:
        int v10 = *(_DWORD *)a1;
LABEL_16:
        unsigned int v11 = (v10 | ((result - 7) << (8 * v3))) + 7;
        unsigned int v12 = v10 + 7;
        if (v3 >= 4) {
          uint64_t result = v12;
        }
        else {
          uint64_t result = v11;
        }
        break;
      default:
        return result;
    }
  }
  return result;
}

void sub_24D57E6A8(unsigned char *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  size_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  size_t v7 = (v5 + v6) & ~v6;
  size_t v8 = ((v5 + v6 + v7) & ~v6) + v5;
  if (v8 <= v5) {
    size_t v8 = *(void *)(v4 + 64);
  }
  BOOL v9 = *(_DWORD *)(v4 + 84) == 0;
  size_t v10 = v7 + v5;
  if (v9) {
    ++v10;
  }
  if (v10 <= v8) {
    size_t v10 = v8;
  }
  if (v5 <= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = v5;
  }
  if (a2 > 6)
  {
    if (v11 <= 3) {
      char v12 = ((a2 - 7) >> (8 * v11)) + 7;
    }
    else {
      char v12 = 7;
    }
    if (v11 <= 3) {
      int v13 = (a2 - 7) & ~(-1 << (8 * v11));
    }
    else {
      int v13 = a2 - 7;
    }
    a1[v11] = v12;
    if (v11 >= 4) {
      int v14 = 4;
    }
    else {
      int v14 = v11;
    }
    bzero(a1, v11);
    switch(v14)
    {
      case 2:
        *(_WORD *)a1 = v13;
        break;
      case 3:
        *(_WORD *)a1 = v13;
        a1[2] = BYTE2(v13);
        break;
      case 4:
        *(_DWORD *)a1 = v13;
        break;
      default:
        *a1 = v13;
        break;
    }
  }
  else
  {
    a1[v11] = a2;
  }
}

uint64_t type metadata accessor for JobLockRule()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24D57E834()
{
  return swift_getWitnessTable();
}

uint64_t sub_24D57E850()
{
  return sub_24D57AA64();
}

uint64_t sub_24D57E874@<X0>(void *a1@<X8>)
{
  return sub_24D5758AC(a1);
}

uint64_t sub_24D57E890@<X0>(void *a1@<X8>)
{
  return sub_24D57AAAC(a1);
}

uint64_t sub_24D57E8AC()
{
  return sub_24D57B140(v0);
}

uint64_t sub_24D57E8C8()
{
  return sub_24D57B31C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_24D57E8E8(void *a1)
{
  return sub_24D57BA3C(a1, v1);
}

uint64_t sub_24D57E904@<X0>(unsigned char *a1@<X8>)
{
  return sub_24D57AF98(v1, a1);
}

uint64_t sub_24D57E920()
{
  return sub_24D57A3D8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24D57E93C()
{
  return sub_24D579E10(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_24D57E958@<X0>(unsigned char *a1@<X8>)
{
  return sub_24D57A1F0(*(void *)(v1 + 24), a1);
}

uint64_t sub_24D57E974(char *a1)
{
  return sub_24D57E990(a1) & 1;
}

uint64_t sub_24D57E990(char *a1)
{
  uint64_t v2 = type metadata accessor for JobLockRule();
  return sub_24D571B94(a1, v2) & 1;
}

uint64_t sub_24D57E9E0@<X0>(unsigned char *a1@<X8>)
{
  return sub_24D57A634(a1);
}

uint64_t sub_24D57E9FC(char *a1)
{
  return sub_24D57A774(a1) & 1;
}

uint64_t sub_24D57EA20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_24D415FD0(v2, (uint64_t)v5, qword_26B1937C0);
    int v3 = v5[48];
    sub_24D57EABC((uint64_t)v5);
    if (v3 == 1) {
      break;
    }
    v2 += 56;
    if (!--v1)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  return 1;
}

uint64_t sub_24D57EABC(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(qword_26B1937C0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_24D57EB1C()
{
  return sub_24D57AD90(v0);
}

unint64_t sub_24D57EB38()
{
  unint64_t result = qword_26B193F88;
  if (!qword_26B193F88)
  {
    __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B193F80);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B193F88);
  }
  return result;
}

uint64_t sub_24D57EB94@<X0>(uint64_t a1@<X8>)
{
  return sub_24D5774A0(*(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t type metadata accessor for JobLock.BlockedRuleError()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24D57EBCC(uint64_t a1, uint64_t *a2)
{
  return sub_24D57871C(a1, a2, v2[4], v2[5], v2[2], v2[3]) & 1;
}

uint64_t sub_24D57EBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D578A9C(a1, a2);
}

uint64_t sub_24D57EC10(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  *(void *)(a2 + 32) = *((void *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_24D57EC28()
{
  return sub_24DBB02D0();
}

uint64_t sub_24D57EC30()
{
  return sub_24DBB08F0();
}

uint64_t sub_24D57EC38(uint64_t a1)
{
  return sub_24D57896C(a1, *(char **)(v1 + 32), *(void *)(v1 + 40)) & 1;
}

id sub_24D57EC5C@<X0>(uint64_t *a1@<X8>)
{
  return sub_24D57BDAC(v1, a1);
}

uint64_t sub_24D57EC78()
{
  return swift_deallocObject();
}

uint64_t sub_24D57EC88(uint64_t a1)
{
  return sub_24D57C138(a1);
}

uint64_t sub_24D57EC90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D57C2DC(a1, v2, a2);
}

uint64_t sub_24D57EC98@<X0>(char *a1@<X8>)
{
  return sub_24D575C88(*(void **)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_24D57ECB8@<X0>(unsigned char *a1@<X8>)
{
  return sub_24D579D5C(*(void **)(v1 + 24), a1);
}

uint64_t sub_24D57ECD4(uint64_t a1)
{
  return sub_24D579BE8(a1, v1) & 1;
}

uint64_t sub_24D57ECF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(qword_26B1937C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24D57ED5C()
{
  return sub_24D576B24(v0);
}

uint64_t sub_24D57ED78()
{
  return swift_getWitnessTable();
}

uint64_t sub_24D57EDA0()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24D57EDE4(uint64_t a1)
{
  return sub_24D57EE20(a1);
}

uint64_t sub_24D57EE20(uint64_t a1)
{
  *(void *)(v1 + 40) = a1;
  uint64_t v3 = sub_24D987CD0(a1);
  uint64_t v5 = v4;
  char v6 = sub_24D987D0C(a1) != 9;

  return sub_24DBB8CE0(v3, v5, v6);
}

uint64_t sub_24D57EF08()
{
  type metadata accessor for SchedulableJob();
  unint64_t v1 = sub_24D9882B4(*(void *)(v0 + 40));
  swift_allocObject();
  uint64_t v2 = sub_24D57EE20(v1);
  swift_retain();
  return v2;
}

uint64_t sub_24D57EFF0()
{
  return sub_24D912B1C(*(void *)(v0 + 40));
}

uint64_t sub_24D57F01C()
{
  return sub_24D987D50();
}

uint64_t sub_24D57F078()
{
  return swift_release();
}

uint64_t sub_24D57F084()
{
  uint64_t v0 = sub_24D580378();
  swift_release();
  return v0;
}

uint64_t sub_24D57F0B8()
{
  sub_24D580378();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SchedulableJob()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D57F11C()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24D57F154()
{
  return sub_24D57F01C();
}

void sub_24D57F178()
{
}

void sub_24D57F1DC()
{
}

void sub_24D57F240()
{
}

void sub_24D57F2A4()
{
}

void sub_24D57F308()
{
}

void sub_24D57F36C()
{
}

void sub_24D57F3D0()
{
}

void sub_24D57F434()
{
}

uint64_t sub_24D57F498()
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 248))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      char v3 = 1;
    }
    else
    {
      char v3 = 0;
    }
  }
  return v3 & 1;
}

uint64_t sub_24D57F4FC()
{
  uint64_t v2 = (*(uint64_t (**)(void))(*(void *)v0 + 256))();
  if (!v1)
  {
    if (v2)
    {
      swift_release();
      char v3 = 1;
    }
    else
    {
      char v3 = 0;
    }
  }
  return v3 & 1;
}

void sub_24D57F568()
{
}

void sub_24D57F5CC()
{
}

void sub_24D57F630()
{
}

void sub_24D57F694()
{
}

void sub_24D57F6F8()
{
}

void sub_24D57F75C()
{
}

void sub_24D57F7C0()
{
}

void sub_24D57F824()
{
}

void sub_24D57F888()
{
}

void sub_24D57F8EC()
{
}

void sub_24D57F950()
{
}

void sub_24D57F9B4()
{
}

void sub_24D57FA18()
{
}

void sub_24D57FA7C()
{
}

void sub_24D57FAE0()
{
}

void sub_24D57FB44()
{
}

void sub_24D57FBA8()
{
}

void sub_24D57FC0C()
{
}

void sub_24D57FC70()
{
}

void sub_24D57FCD4()
{
}

void sub_24D57FD38()
{
}

void sub_24D57FD9C()
{
}

void sub_24D57FE00()
{
}

void sub_24D57FE64()
{
}

void sub_24D57FEC8()
{
}

void sub_24D57FF2C()
{
}

void sub_24D57FF90()
{
}

void sub_24D57FFF4()
{
}

void sub_24D580058()
{
}

void sub_24D5800BC()
{
}

void sub_24D580120()
{
}

void sub_24D580184()
{
}

void sub_24D5801E8()
{
}

void sub_24D58024C()
{
}

void sub_24D5802B0()
{
}

void sub_24D580314()
{
}

uint64_t sub_24D580378()
{
  return v0;
}

uint64_t sub_24D580380()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for JobRegistry()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D5803A8()
{
  uint64_t result = (*(uint64_t (**)(void))(*(void *)v0 + 128))();
  if (!v1 && result < 0)
  {
    swift_release();
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D580444(void *a1, int a2)
{
  uint64_t v58 = a1;
  char v3 = v2;
  int v63 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 104);
  uint64_t v6 = *(void *)(*v2 + 88);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v53 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v52 = (char *)&v49 - v8;
  uint64_t v9 = *(void *)(v4 + 96);
  uint64_t v10 = *(void *)(v4 + 80);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v50 = (char *)&v49 - v12;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v14 = swift_getAssociatedConformanceWitness();
  uint64_t v59 = v11;
  uint64_t v60 = AssociatedTypeWitness;
  uint64_t v54 = AssociatedTypeWitness;
  uint64_t v61 = AssociatedConformanceWitness;
  uint64_t v62 = v14;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v16 = sub_24DCCA3F8();
  MEMORY[0x270FA5388](v16 - 8);
  int v18 = (char *)&v49 - v17;
  uint64_t v59 = v10;
  uint64_t v60 = v6;
  uint64_t v55 = v6;
  uint64_t v56 = v5;
  uint64_t v61 = v9;
  uint64_t v62 = v5;
  type metadata accessor for ItemJob();
  uint64_t v19 = v58;
  uint64_t v20 = swift_dynamicCastClass();
  if (v20)
  {
    unsigned int v21 = (void *)v20;
    uint64_t v22 = sub_24DB1702C();
    int v23 = (char *)v21 + *(void *)(*v21 + 576);
    uint64_t v24 = v21[15];
    int v25 = *(uint64_t (**)(uint64_t, char *, uint64_t, void))(*v3 + 320);
    swift_retain();
    char v26 = v25(v22, v23, v24, v63 & 1);
LABEL_5:
    char v34 = v26;
    swift_release();
    return v34 & 1;
  }
  uint64_t v27 = v15;
  int64_t v49 = v18;
  uint64_t v59 = v55;
  uint64_t v60 = v10;
  uint64_t v61 = v56;
  uint64_t v62 = v9;
  type metadata accessor for Propagation.PropagationJob();
  uint64_t v28 = swift_dynamicCastClass();
  if (v28)
  {
    int64_t v29 = (void *)v28;
    uint64_t v30 = sub_24DB1702C();
    int64_t v31 = (char *)v29 + *(void *)(*v29 + 576);
    uint64_t v32 = v29[15];
    uint64_t v33 = *(uint64_t (**)(uint64_t, char *, uint64_t, void))(*v3 + 328);
    swift_retain();
    char v26 = v33(v30, v31, v32, v63 & 1);
    goto LABEL_5;
  }
  uint64_t v36 = v49;
  (*(void (**)(void))(*v19 + 440))();
  int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v36, 1, v27);
  char v34 = v63;
  if (v37 == 1)
  {
    char v34 = 0;
  }
  else if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v39 = v52;
    uint64_t v38 = v53;
    uint64_t v40 = v54;
    (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v52, v36, v54);
    uint64_t v41 = sub_24DB1702C();
    uint64_t v42 = v57;
    char v43 = (*(uint64_t (**)(uint64_t, char *, void, void))(*v2 + 328))(v41, v39, v19[15], v34 & 1);
    if (!v42) {
      char v34 = v43;
    }
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
  }
  else
  {
    uint64_t v45 = v50;
    uint64_t v44 = v51;
    (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v50, v36, v11);
    uint64_t v46 = sub_24DB1702C();
    uint64_t v47 = v57;
    char v48 = (*(uint64_t (**)(uint64_t, char *, void, void))(*v2 + 320))(v46, v45, v19[15], v34 & 1);
    if (!v47) {
      char v34 = v48;
    }
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v11);
  }
  return v34 & 1;
}

unint64_t sub_24D580A30(char a1)
{
  unint64_t result = 0x6974696157746F6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D6574496F6ELL;
      break;
    case 2:
      unint64_t result = 0x6E55746E65726170;
      break;
    case 3:
      unint64_t result = 0xD000000000000013;
      break;
    case 4:
      unint64_t result = 0x7243746E65726170;
      break;
    case 5:
      unint64_t result = 0x6544746E65726170;
      break;
    case 6:
      unint64_t result = 0xD000000000000019;
      break;
    case 7:
      unint64_t result = 0x746544656C637963;
      break;
    case 8:
      unint64_t result = 0x6144746E65726170;
      break;
    case 9:
    case 10:
      unint64_t result = 0x6E6572646C696863;
      break;
    case 11:
    case 12:
    case 31:
      unint64_t result = 0xD000000000000010;
      break;
    case 13:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 14:
      unint64_t result = 0x45676E69646E6570;
      break;
    case 15:
      unint64_t result = 0x656C74746F726874;
      break;
    case 16:
      unint64_t result = 0xD000000000000016;
      break;
    case 17:
      unint64_t result = 0x656C74746F726874;
      break;
    case 18:
      unint64_t result = 0xD000000000000014;
      break;
    case 19:
      unint64_t result = 0xD000000000000011;
      break;
    case 20:
      unint64_t result = 0x6544746E65726170;
      break;
    case 21:
      unint64_t result = 0x65526D6165727473;
      break;
    case 22:
      unint64_t result = 0x6374614D68746170;
      break;
    case 23:
      unint64_t result = 0x676E697473697865;
      break;
    case 24:
      unint64_t result = 0x6E6F697463697665;
      break;
    case 25:
      unint64_t result = 0x74616761706F7270;
      break;
    case 26:
      unint64_t result = 0x746F687370616E73;
      break;
    case 27:
      unint64_t result = 0x64656E6961746572;
      break;
    case 28:
      unint64_t result = 0x496465726F6E6769;
      break;
    case 29:
      unint64_t result = 0xD000000000000018;
      break;
    case 30:
      unint64_t result = 0x6C62617463697665;
      break;
    case 32:
      unint64_t result = 0xD000000000000018;
      break;
    case 33:
      unint64_t result = 0xD000000000000011;
      break;
    case 34:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

void sub_24D580ED4(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x676E69646E6570;
  if (*v1) {
    uint64_t v2 = 0x6465696669726576;
  }
  unint64_t v3 = 0xE700000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_24D580F14@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_24D580A30(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_24D580F40(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v599 = a1;
  uint64_t v598 = a4;
  uint64_t v591 = a3;
  uint64_t v4 = *a2;
  uint64_t v5 = *(ValueMetadata **)(*a2 + 96);
  uint64_t v6 = *(void **)(*a2 + 80);
  uint64_t AssociatedTypeWitness = (void *)swift_getAssociatedTypeWitness();
  unint64_t v601 = a2;
  uint64_t v9 = *(ValueMetadata **)(v4 + 104);
  uint64_t v10 = *(void *)(v4 + 88);
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v13 = swift_getAssociatedConformanceWitness();
  id v602 = AssociatedTypeWitness;
  uint64_t v603 = v11;
  uint64_t v604 = (ValueMetadata *)AssociatedConformanceWitness;
  uint64_t v605 = (ValueMetadata *)v13;
  uint64_t v587 = type metadata accessor for ReconciliationID();
  uint64_t v585 = *(void *)(v587 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v587);
  uint64_t v515 = (char *)v512 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v517 = (char *)v512 - v16;
  id v602 = AssociatedTypeWitness;
  uint64_t v603 = v11;
  uint64_t v581 = AssociatedConformanceWitness;
  uint64_t v604 = (ValueMetadata *)AssociatedConformanceWitness;
  uint64_t v605 = (ValueMetadata *)v13;
  uint64_t v516 = v13;
  uint64_t v565 = type metadata accessor for ThrottlingKey();
  uint64_t v564 = *(void *)(v565 - 8);
  uint64_t v17 = MEMORY[0x270FA5388](v565);
  unint64_t v558 = (char *)v512 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v17);
  uint64_t v553 = (char *)v512 - v19;
  id v602 = v6;
  uint64_t v603 = v10;
  uint64_t v604 = v5;
  uint64_t v605 = v9;
  uint64_t v592 = type metadata accessor for PersistenceTrigger();
  uint64_t v20 = sub_24DCCA3F8();
  id v602 = v6;
  uint64_t v603 = v10;
  uint64_t v604 = v5;
  uint64_t v605 = v9;
  v512[1] = type metadata accessor for Job();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v570 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x270FA5388](TupleTypeMetadata2);
  int v576 = (void (*)(char *, uint64_t, uint64_t))((char *)v512 - v21);
  uint64_t v527 = sub_24DCCA3F8();
  uint64_t v531 = *(void *)(v527 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v527);
  uint64_t v524 = (char *)v512 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = MEMORY[0x270FA5388](v22);
  uint64_t v513 = (char *)v512 - v25;
  uint64_t v26 = MEMORY[0x270FA5388](v24);
  uint64_t v525 = (char *)v512 - v27;
  uint64_t v568 = v11;
  uint64_t v529 = *(void *)(v11 - 8);
  uint64_t v28 = MEMORY[0x270FA5388](v26);
  unint64_t v519 = (char *)v512 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v28);
  uint64_t v520 = (char *)v512 - v30;
  uint64_t v31 = type metadata accessor for SnapshotItem();
  uint64_t v569 = sub_24DCCA3F8();
  uint64_t v567 = *(void *)(v569 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v569);
  unint64_t v566 = (char *)v512 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = MEMORY[0x270FA5388](v32);
  int v562 = (char *)v512 - v35;
  uint64_t v577 = v31;
  uint64_t v580 = *(void *)(v31 - 8);
  uint64_t v36 = MEMORY[0x270FA5388](v34);
  uint64_t v549 = (char *)v512 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = MEMORY[0x270FA5388](v36);
  unint64_t v548 = (char *)v512 - v39;
  MEMORY[0x270FA5388](v38);
  unint64_t v551 = (char *)v512 - v40;
  id v602 = v6;
  uint64_t v603 = v10;
  uint64_t v604 = v5;
  uint64_t v605 = v9;
  uint64_t v41 = type metadata accessor for ItemReconciliation();
  uint64_t v574 = sub_24DCCA3F8();
  uint64_t v573 = *(void *)(v574 - 8);
  uint64_t v42 = MEMORY[0x270FA5388](v574);
  uint64_t v533 = (uint64_t)v512 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = MEMORY[0x270FA5388](v42);
  uint64_t v588 = (uint64_t)v512 - v45;
  uint64_t v583 = v41;
  uint64_t v586 = *(void *)(v41 - 8);
  uint64_t v46 = MEMORY[0x270FA5388](v44);
  uint64_t v575 = (char *)v512 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = MEMORY[0x270FA5388](v46);
  uint64_t v523 = (char *)v512 - v49;
  uint64_t v50 = MEMORY[0x270FA5388](v48);
  long long v543 = (char *)v512 - v51;
  uint64_t v52 = MEMORY[0x270FA5388](v50);
  unint64_t v547 = (char *)v512 - v53;
  uint64_t v54 = MEMORY[0x270FA5388](v52);
  uint64_t v546 = (char *)v512 - v55;
  uint64_t v56 = MEMORY[0x270FA5388](v54);
  uint64_t v530 = (char *)v512 - v57;
  uint64_t v58 = MEMORY[0x270FA5388](v56);
  uint64_t v578 = (char *)v512 - v59;
  uint64_t v584 = AssociatedTypeWitness;
  uint64_t v582 = *((void *)AssociatedTypeWitness - 1);
  uint64_t v60 = MEMORY[0x270FA5388](v58);
  uint64_t v528 = (char *)v512 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = MEMORY[0x270FA5388](v60);
  uint64_t v514 = (char *)v512 - v63;
  uint64_t v64 = MEMORY[0x270FA5388](v62);
  uint64_t v526 = (char *)v512 - v65;
  uint64_t v66 = MEMORY[0x270FA5388](v64);
  long long v537 = (char *)v512 - v67;
  uint64_t v68 = MEMORY[0x270FA5388](v66);
  long long v542 = (char *)v512 - v69;
  uint64_t v70 = MEMORY[0x270FA5388](v68);
  long long v541 = (char *)v512 - v71;
  uint64_t v72 = MEMORY[0x270FA5388](v70);
  long long v540 = (char *)v512 - v73;
  uint64_t v74 = MEMORY[0x270FA5388](v72);
  long long v534 = (char *)v512 - v75;
  uint64_t v76 = MEMORY[0x270FA5388](v74);
  uint64_t v552 = (char *)v512 - v77;
  uint64_t v78 = MEMORY[0x270FA5388](v76);
  uint64_t v539 = (char *)v512 - v79;
  uint64_t v80 = MEMORY[0x270FA5388](v78);
  uint64_t v538 = (char *)v512 - v81;
  uint64_t v82 = MEMORY[0x270FA5388](v80);
  uint64_t v557 = (ValueMetadata *)((char *)v512 - v83);
  uint64_t v84 = MEMORY[0x270FA5388](v82);
  uint64_t v556 = (char *)v512 - v85;
  uint64_t v86 = MEMORY[0x270FA5388](v84);
  unint64_t v554 = (char *)v512 - v87;
  uint64_t v88 = MEMORY[0x270FA5388](v86);
  unint64_t v555 = (char *)v512 - v89;
  uint64_t v90 = MEMORY[0x270FA5388](v88);
  uint64_t v550 = (char *)v512 - v91;
  uint64_t v594 = v20;
  uint64_t v595 = *(void *)(v20 - 8);
  uint64_t v92 = MEMORY[0x270FA5388](v90);
  uint64_t v521 = (char *)v512 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = MEMORY[0x270FA5388](v92);
  long long v545 = (char *)v512 - v95;
  uint64_t v96 = MEMORY[0x270FA5388](v94);
  uint64_t v522 = (char *)v512 - v97;
  uint64_t v98 = MEMORY[0x270FA5388](v96);
  uint64_t v532 = (char *)v512 - v99;
  uint64_t v100 = MEMORY[0x270FA5388](v98);
  uint64_t v544 = (char *)v512 - v101;
  uint64_t v102 = MEMORY[0x270FA5388](v100);
  long long v535 = (char *)v512 - v103;
  uint64_t v104 = MEMORY[0x270FA5388](v102);
  uint64_t v536 = (char *)v512 - v105;
  uint64_t v106 = MEMORY[0x270FA5388](v104);
  uint64_t v559 = (char *)v512 - v107;
  uint64_t v108 = MEMORY[0x270FA5388](v106);
  unint64_t v561 = (char *)v512 - v109;
  uint64_t v110 = MEMORY[0x270FA5388](v108);
  uint64_t v112 = (char *)v512 - v111;
  uint64_t v113 = MEMORY[0x270FA5388](v110);
  uint64_t v571 = (void (**)(char *, uint64_t))((char *)v512 - v114);
  uint64_t v115 = MEMORY[0x270FA5388](v113);
  char v117 = (char *)v512 - v116;
  uint64_t v118 = MEMORY[0x270FA5388](v115);
  uint64_t v120 = (char *)v512 - v119;
  uint64_t v121 = MEMORY[0x270FA5388](v118);
  uint64_t v123 = (char *)v512 - v122;
  uint64_t v124 = MEMORY[0x270FA5388](v121);
  uint64_t v126 = (char *)v512 - v125;
  uint64_t v127 = MEMORY[0x270FA5388](v124);
  uint64_t v560 = (char *)v512 - v128;
  uint64_t v129 = MEMORY[0x270FA5388](v127);
  BOOL v563 = (char *)v512 - v130;
  uint64_t v131 = MEMORY[0x270FA5388](v129);
  uint64_t v579 = (unsigned int (*)(char *, uint64_t, uint64_t))((char *)v512 - v132);
  uint64_t v133 = MEMORY[0x270FA5388](v131);
  unint64_t v518 = (char *)v512 - v134;
  uint64_t v135 = MEMORY[0x270FA5388](v133);
  unint64_t v589 = (char *)v512 - v136;
  MEMORY[0x270FA5388](v135);
  uint64_t v590 = (char *)v512 - v137;
  int v596 = (int *)v6;
  uint64_t v597 = v10;
  id v602 = v6;
  uint64_t v603 = v10;
  uint64_t v138 = v5;
  uint64_t v604 = v5;
  uint64_t v605 = v9;
  unint64_t v593 = (unint64_t)v9;
  uint64_t v139 = v599;
  type metadata accessor for Ingestion.DeleteFolderFromSnapshotIfEmpty();
  uint64_t v140 = swift_dynamicCastClass();
  if (v140 && v139 == 8)
  {
    uint64_t v141 = v140 + *(void *)(*(void *)v140 + 576);
    uint64_t v142 = *(uint64_t (**)(uint64_t, uint64_t))(*v598[4] + 368);
    swift_retain();
    uint64_t v143 = v141;
    uint64_t v144 = v600;
    char v145 = v142(v143, 1);
    uint64_t result = swift_release();
    if (!v144)
    {
LABEL_4:
      char v147 = v145 ^ 1;
      return v147 & 1;
    }
    return result;
  }
  uint64_t v148 = v596;
  id v602 = v596;
  uint64_t v603 = v597;
  uint64_t v149 = (ValueMetadata *)v593;
  uint64_t v604 = v138;
  uint64_t v605 = (ValueMetadata *)v593;
  type metadata accessor for Materialization.MaterializeItem();
  uint64_t v150 = swift_dynamicCastClass();
  if (v150 && v139 == 32)
  {
    uint64_t v599 = v150;
    uint64_t v151 = v594;
    uint64_t v152 = v595 + 16;
    long long v153 = *(void (**)(char *, uint64_t, uint64_t))(v595 + 16);
    long long v154 = v590;
    v153(v590, v591, v594);
    uint64_t v155 = v592;
    char v156 = *(void (***)(char *, uint64_t))(v592 - 8);
    long long v157 = (unsigned int (*)(char *, uint64_t, uint64_t))v156[6];
    if (v157(v154, 1, v592) == 1)
    {
      uint64_t v579 = v157;
      int v576 = v153;
      swift_retain();
LABEL_9:
      TupleTypeMetadata2 = v152;
      uint64_t v159 = v595 + 8;
      uint64_t v158 = *(void (**)(char *, uint64_t))(v595 + 8);
      v158(v154, v151);
      uint64_t v160 = v599 + *(void *)(*(void *)v599 + 576);
      uint64_t v161 = v588;
      uint64_t v162 = v600;
      sub_24D4759C8(v160, v588);
      if (v162) {
        return swift_release();
      }
      uint64_t v599 = v160;
      uint64_t v590 = (char *)v158;
      uint64_t v571 = v156;
      uint64_t v595 = v159;
      uint64_t v191 = v586;
      uint64_t v192 = v583;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v586 + 48))(v161, 1, v583) == 1)
      {
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v573 + 8))(v161, v574);
        goto LABEL_67;
      }
      uint64_t v218 = *(void (**)(char *, uint64_t, uint64_t))(v191 + 32);
      uint64_t v219 = v161;
      unint64_t v220 = v578;
      v218(v578, v219, v192);
      uint64_t v221 = type metadata accessor for ItemReconciliationHalf();
      uint64_t v222 = *(int *)(v221 + 36);
      if (v220[v222])
      {
        (*(void (**)(char *, uint64_t))(v191 + 8))(v220, v192);
        swift_release();
        goto LABEL_67;
      }
      unint64_t v589 = (char *)v218;
      int v596 = (int *)v221;
      uint64_t v223 = v598[4];
      uint64_t v216 = v562;
      (*(void (**)(uint64_t, uint64_t))(*v223 + 240))(v599, 1);
      uint64_t v326 = v580;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v580 + 48))(v216, 1, v577) == 1)
      {
        (*(void (**)(char *, uint64_t))(v586 + 8))(v220, v192);
LABEL_129:
        swift_release();
        (*(void (**)(char *, uint64_t))(v567 + 8))(v216, v569);
        goto LABEL_67;
      }
      uint64_t v588 = v222;
      uint64_t v600 = 0;
      uint64_t v333 = v326;
      uint64_t v334 = v551;
      uint64_t v335 = v577;
      (*(void (**)(char *, char *, uint64_t))(v326 + 32))(v551, v216, v577);
      uint64_t WitnessTable = swift_getWitnessTable();
      char v337 = sub_24D98BC10(v335, WitnessTable);
      uint64_t v338 = v548;
      (*(void (**)(char *, char *, uint64_t))(v326 + 16))(v548, v334, v335);
      if ((v337 & 1) == 0)
      {
        unint64_t v589 = *(char **)(v326 + 8);
        ((void (*)(char *, uint64_t))v589)(v338, v335);
LABEL_206:
        uint64_t v408 = v583;
        unsigned int v409 = v578;
        BOOL v410 = sub_24DB86F3C(v583);
        uint64_t v411 = v586;
        unsigned int v412 = v546;
        uint64_t v413 = *(void (**)(char *, char *, uint64_t))(v586 + 16);
        v413(v546, v409, v408);
        if (v410)
        {
          int v414 = &v412[*(int *)(v408 + 52)];
          int v415 = v414[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
          uint64_t v416 = v412;
          uint64_t v417 = *(void (**)(char *, uint64_t))(v411 + 8);
          v417(v416, v408);
          BOOL v418 = (v415 | 4) == 4;
          unsigned int v419 = v547;
          if (v418) {
            goto LABEL_275;
          }
        }
        else
        {
          int v446 = v412;
          uint64_t v417 = *(void (**)(char *, uint64_t))(v411 + 8);
          v417(v446, v408);
          unsigned int v419 = v547;
        }
        uint64_t v587 = v596[14];
        int v447 = v578[v587];
        unsigned int v448 = v543;
        if (v447 == 6)
        {
          uint64_t v408 = v583;
          ((void (*)(char *))v413)(v419);
        }
        else
        {
          uint64_t v408 = v583;
          ((void (*)(char *))v413)(v419);
          if (v447 == 4)
          {
            v417(v419, v408);
            goto LABEL_243;
          }
        }
        int v449 = v419[v596[14]];
        v417(v419, v408);
        if (v449 != 6) {
          goto LABEL_275;
        }
LABEL_243:
        uint64_t v450 = v578;
        BOOL v451 = sub_24DB86F3C(v408);
        v413(v448, v450, v408);
        if (v451)
        {
          uint64_t v452 = &v448[*(int *)(v408 + 52)];
          uint64_t v597 = type metadata accessor for ItemReconciliationHalf();
          LODWORD(v452) = v452[*(int *)(v597 + 52)];
          int v453 = v523;
          v413(v523, v448, v408);
          if (v452 == 3)
          {
            v417(v453, v408);
            v417(v448, v408);
LABEL_275:
            swift_release();
            ((void (*)(char *, uint64_t))v589)(v551, v577);
            v417(v578, v408);
            return 0;
          }
          int v477 = v453[*(int *)(v408 + 52) + *(int *)(v597 + 52)];
          v417(v453, v408);
          v417(v448, v408);
          if (v477 == 1) {
            goto LABEL_275;
          }
        }
        else
        {
          v417(v448, v408);
        }
        uint64_t v597 = (uint64_t)v417;
        unint64_t v464 = v578;
        uint64_t v465 = v531;
        unsigned int v466 = v525;
        if (v578[v587] != 4)
        {
          uint64_t v473 = *(int **)(v531 + 16);
          uint64_t v474 = v568;
          uint64_t v475 = v529;
          uint64_t v476 = v527;
          goto LABEL_304;
        }
        unsigned int v467 = &v578[*(int *)(v583 + 52)];
        unsigned int v468 = *(int **)(v531 + 16);
        unint64_t v593 = (v531 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
        uint64_t v469 = v527;
        int v596 = v468;
        ((void (*)(char *, char *, uint64_t))v468)(v525, v467, v527);
        uint64_t v470 = v529;
        uint64_t v474 = v568;
        uint64_t v587 = *(void *)(v529 + 48);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v587)(v466, 1, v568) == 1)
        {
          (*(void (**)(char *, uint64_t))(v465 + 8))(v466, v469);
          uint64_t v475 = v470;
          uint64_t v476 = v469;
LABEL_303:
          uint64_t v473 = v596;
LABEL_304:
          uint64_t v498 = v583;
          long long v499 = v524;
          ((void (*)(char *, char *, uint64_t))v473)(v524, &v464[*(int *)(v583 + 52)], v476);
          uint64_t v500 = v499;
          int v501 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v475 + 48))(v499, 1, v474);
          long long v502 = v598;
          if (v501 == 1)
          {
            swift_release();
            ((void (*)(char *, uint64_t))v589)(v551, v577);
            ((void (*)(char *, uint64_t))v597)(v464, v498);
            (*(void (**)(char *, uint64_t))(v531 + 8))(v500, v476);
          }
          else
          {
            long long v503 = v519;
            (*(void (**)(char *, char *, uint64_t))(v475 + 32))(v519, v500, v474);
            uint64_t v504 = v600;
            uint64_t v505 = (*(uint64_t (**)(char *))(*v502[3] + 248))(v503);
            uint64_t v506 = v577;
            if (v504)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v475 + 8))(v503, v474);
              ((void (*)(char *, uint64_t))v589)(v551, v506);
              return ((uint64_t (*)(char *, uint64_t))v597)(v578, v498);
            }
            if (v505)
            {
              uint64_t v507 = *(void *)(v505 + 136);
              swift_release();
              swift_release();
              (*(void (**)(char *, uint64_t))(v475 + 8))(v503, v568);
              ((void (*)(char *, uint64_t))v589)(v551, v506);
              ((void (*)(char *, uint64_t))v597)(v578, v498);
              if ((v507 & 2) != 0) {
                return 0;
              }
            }
            else
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v475 + 8))(v503, v568);
              ((void (*)(char *, uint64_t))v589)(v551, v506);
              ((void (*)(char *, uint64_t))v597)(v578, v498);
            }
          }
LABEL_67:
          char v147 = 1;
          return v147 & 1;
        }
        (*(void (**)(char *, char *, uint64_t))(v470 + 32))(v520, v466, v474);
        long long v488 = v518;
        uint64_t v489 = v594;
        v576(v518, v591, v594);
        uint64_t v490 = v592;
        if (v579(v488, 1, v592) == 1)
        {
          ((void (*)(char *, uint64_t))v590)(v488, v489);
        }
        else
        {
          if (swift_getEnumCaseMultiPayload() == 2)
          {
            uint64_t v475 = v529;
            uint64_t v474 = v568;
            (*(void (**)(char *, uint64_t))(v529 + 8))(v520, v568);
            v571[1](v488, v490);
LABEL_302:
            uint64_t v476 = v527;
            goto LABEL_303;
          }
          v571[1](v488, v490);
        }
        if ((v464[v588] & 0x10) == 0)
        {
          uint64_t v496 = v600;
          char v497 = (*(uint64_t (**)(uint64_t))(*v223 + 464))(v599);
          uint64_t v600 = v496;
          if (v496)
          {
            swift_release();
            (*(void (**)(char *, uint64_t))(v529 + 8))(v520, v568);
            ((void (*)(char *, uint64_t))v589)(v551, v577);
            return ((uint64_t (*)(char *, uint64_t))v597)(v578, v583);
          }
          if ((v497 & 1) == 0)
          {
            uint64_t v508 = v600;
            (*(void (**)(char *, uint64_t))(*v598[5] + 416))(v520, 1);
            uint64_t v600 = v508;
            uint64_t v509 = v568;
            (*(void (**)(char *, uint64_t))(v529 + 8))(v520, v568);
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v587)(v513, 1, v509) != 1)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v531 + 8))(v513, v527);
              ((void (*)(char *, uint64_t))v589)(v551, v577);
              ((void (*)(char *, uint64_t))v597)(v578, v583);
              return 0;
            }
            uint64_t v476 = v527;
            (*(void (**)(char *, uint64_t))(v531 + 8))(v513, v527);
            uint64_t v474 = v568;
            unint64_t v464 = v578;
            uint64_t v475 = v529;
            goto LABEL_303;
          }
        }
        uint64_t v475 = v529;
        uint64_t v474 = v568;
        (*(void (**)(char *, uint64_t))(v529 + 8))(v520, v568);
        unint64_t v464 = v578;
        goto LABEL_302;
      }
      int v339 = v338[*(int *)(v335 + 48)];
      uint64_t v340 = *(void (**)(char *, uint64_t))(v333 + 8);
      v340(v338, v335);
      if (v339 == 2)
      {
        unint64_t v589 = (char *)v340;
        goto LABEL_206;
      }
      swift_release();
      uint64_t v454 = v583;
      unint64_t v455 = v578;
      uint64_t v456 = &v578[*(int *)(v583 + 52)];
      LODWORD(v456) = v456[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
      v340(v334, v577);
      unint64_t v457 = v530;
      ((void (*)(char *, char *, uint64_t))v589)(v530, v455, v454);
      if (v456 == 4)
      {
        int v458 = v457[v596[11]];
        (*(void (**)(char *, uint64_t))(v586 + 8))(v457, v454);
        if (v458) {
          goto LABEL_67;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v586 + 8))(v457, v454);
      }
      return 0;
    }
    uint64_t v575 = (char *)(v156 + 6);
    v153(v589, (uint64_t)v154, v151);
    uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    switch((int)EnumCaseMultiPayload)
    {
      case 2:
        uint64_t v167 = v589;
        uint64_t v168 = v587;
        if (swift_getEnumCaseMultiPayload() == 1) {
          goto LABEL_71;
        }
        uint64_t v579 = v157;
        int v576 = v153;
        uint64_t v571 = v156;
        uint64_t v169 = v582;
        uint64_t v170 = v554;
        uint64_t v171 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v554, v167, v584);
        swift_retain();
        char v172 = sub_24DCC9798();
        uint64_t v151 = v594;
        char v173 = v172;
        (*(void (**)(char *, void *))(v169 + 8))(v170, v171);
        goto LABEL_106;
      case 5:
        uint64_t v579 = v157;
        uint64_t v571 = v156;
        uint64_t v557 = v138;
        uint64_t v247 = v569;
        TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
        uint64_t v249 = v589;
        uint64_t v250 = &v589[*(int *)(TupleTypeMetadata3 + 48)];
        uint64_t v251 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v580 + 48);
        uint64_t v252 = v577;
        if (v251(v589, 1, v577) == 1)
        {
          uint64_t v253 = *(void (**)(char *, uint64_t))(v567 + 8);
          v253(v250, v247);
          v253(v249, v247);
          goto LABEL_147;
        }
        if (v251(v250, 1, v252) != 1)
        {
          (*(void (**)(char *, uint64_t))(v580 + 8))(v589, v252);
          uint64_t v327 = *(void (**)(char *, uint64_t))(v567 + 8);
          uint64_t v328 = v250;
          goto LABEL_141;
        }
        int v576 = v153;
        uint64_t v301 = v582;
        uint64_t v302 = v550;
        unsigned int v303 = v589;
        uint64_t v304 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 16))(v550, v589, v584);
        uint64_t v305 = *(void (**)(char *, uint64_t))(v580 + 8);
        swift_retain();
        v305(v303, v252);
        char v173 = sub_24DCC9798();
        (*(void (**)(char *, void *))(v301 + 8))(v302, v304);
        uint64_t v151 = v594;
        long long v154 = v590;
LABEL_106:
        char v156 = v571;
        goto LABEL_107;
      case 10:
        int v576 = v153;
        uint64_t v571 = v156;
        uint64_t v258 = v587;
        id v602 = (id)v587;
        uint64_t v603 = sub_24DCCA3F8();
        uint64_t v604 = &type metadata for ContentStatus;
        uint64_t v605 = &type metadata for ContentStatus;
        uint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
        uint64_t v260 = v589;
        uint64_t v261 = &v589[*(int *)(TupleTypeMetadata + 48)];
        int v262 = v589[*(int *)(TupleTypeMetadata + 80)];
        if (swift_getEnumCaseMultiPayload() != 1)
        {
          uint64_t v311 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v311 - 8) + 8))(v261, v311);
          (*(void (**)(char *, uint64_t))(v585 + 8))(v260, v258);
          goto LABEL_112;
        }
        uint64_t v557 = v138;
        uint64_t v263 = v585;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v585 + 48))(v261, 1, v258) == 1)
        {
          (*(void (**)(char *, uint64_t))(v263 + 8))(v589, v258);
          goto LABEL_145;
        }
        uint64_t v579 = v157;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v330 = *(void (**)(char *, uint64_t))(v263 + 8);
          v330(v261, v258);
          v330(v589, v258);
          goto LABEL_147;
        }
        if (v262 == 2)
        {
          uint64_t v384 = v582;
          unsigned int v385 = v534;
          uint64_t v386 = v584;
          (*(void (**)(char *, char *, void *))(v582 + 32))(v534, v261, v584);
          swift_retain();
          char v387 = sub_24DCC9798();
          (*(void (**)(char *, void *))(v384 + 8))(v385, v386);
          if (v387)
          {
            (*(void (**)(char *, uint64_t))(v263 + 8))(v589, v258);
            uint64_t v151 = v594;
            goto LABEL_116;
          }
          swift_release();
        }
        else
        {
          (*(void (**)(char *, void *))(v582 + 8))(v261, v584);
        }
        (*(void (**)(char *, uint64_t))(v263 + 8))(v589, v258);
        goto LABEL_147;
      case 11:
        uint64_t v571 = v156;
        MEMORY[0x270FA5388](EnumCaseMultiPayload);
        strcpy((char *)&v512[-4], " otherID from to ");
        uint64_t v264 = v587;
        id v602 = (id)v587;
        uint64_t v603 = sub_24DCCA3F8();
        uint64_t v604 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B1995E0);
        uint64_t v605 = v604;
        uint64_t v265 = swift_getTupleTypeMetadata();
        uint64_t v266 = v589;
        uint64_t v261 = &v589[*(int *)(v265 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v267 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v267 - 8) + 8))(v261, v267);
          (*(void (**)(char *, uint64_t))(v585 + 8))(v266, v264);
          goto LABEL_112;
        }
        uint64_t v579 = v157;
        int v576 = v153;
        uint64_t v313 = v582;
        uint64_t v314 = v557;
        uint64_t v315 = v584;
        (*(void (**)(ValueMetadata *, char *, void *))(v582 + 32))(v557, v266, v584);
        swift_retain();
        char v316 = sub_24DCC9798();
        (*(void (**)(ValueMetadata *, void *))(v313 + 8))(v314, v315);
        if (v316)
        {
          uint64_t v317 = sub_24DCCA3F8();
          (*(void (**)(char *, uint64_t))(*(void *)(v317 - 8) + 8))(v261, v317);
          uint64_t v151 = v594;
          goto LABEL_116;
        }
        swift_release();
LABEL_145:
        uint64_t v329 = sub_24DCCA3F8();
        uint64_t v327 = *(void (**)(char *, uint64_t))(*(void *)(v329 - 8) + 8);
        uint64_t v328 = v261;
        goto LABEL_146;
      case 14:
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
        uint64_t v268 = v587;
        uint64_t v269 = swift_getTupleTypeMetadata2();
        uint64_t v270 = v589;
        unsigned int v271 = *(void **)&v589[*(int *)(v269 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {

          (*(void (**)(char *, uint64_t))(v585 + 8))(v270, v268);
          goto LABEL_112;
        }
        id v602 = v271;
        swift_retain();
        int v318 = swift_dynamicCast();
        uint64_t v312 = v595;
        if (v318)
        {
          uint64_t v319 = v584;
          if (v606 == 5)
          {
            uint64_t v320 = v582;
            uint64_t v321 = *(void (**)(uint64_t, char *, void *))(v582 + 16);
            int v322 = &v571;
          }
          else
          {
            if (v606 != 3) {
              goto LABEL_221;
            }
            uint64_t v320 = v582;
            uint64_t v321 = *(void (**)(uint64_t, char *, void *))(v582 + 16);
            int v322 = (void (***)(char *, uint64_t))&v570;
          }
          uint64_t v435 = (uint64_t)*(v322 - 32);
          v321(v435, v270, v584);
          char v436 = sub_24DCC9798();
          unsigned int v437 = *(void (**)(uint64_t, void *))(v320 + 8);
          v437(v435, v319);
          if (v436)
          {
            swift_release();

            v437((uint64_t)v270, v319);
            (*(void (**)(char *, uint64_t))(v312 + 8))(v590, v594);
            return 0;
          }
        }
        else
        {
          uint64_t v319 = v584;
        }
LABEL_221:

        uint64_t v438 = v582;
        int v439 = v552;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v552, v270, v319);
        char v440 = sub_24DCC9798();
        swift_release();
        (*(void (**)(char *, void *))(v438 + 8))(v439, v319);
        uint64_t v151 = v594;
        long long v154 = v590;
        if ((v440 & 1) == 0) {
          goto LABEL_148;
        }
        (*(void (**)(char *, uint64_t))(v312 + 8))(v590, v594);
        goto LABEL_226;
      case 15:
        uint64_t v579 = v157;
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
        uint64_t v168 = v587;
        uint64_t v245 = swift_getTupleTypeMetadata2();
        uint64_t v167 = v589;
        uint64_t v246 = *(void **)&v589[*(int *)(v245 + 48)];
        swift_retain();

        if (swift_getEnumCaseMultiPayload() == 1)
        {
          swift_release();
LABEL_71:
          (*(void (**)(char *, uint64_t))(v585 + 8))(v167, v168);
          goto LABEL_113;
        }
        int v576 = v153;
        uint64_t v295 = v582;
        uint64_t v296 = v556;
        uint64_t v297 = (char *)v156;
        uint64_t v298 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v556, v167, v584);
        char v299 = sub_24DCC9798();
        uint64_t v151 = v594;
        char v173 = v299;
        uint64_t v300 = v298;
        char v156 = (void (**)(char *, uint64_t))v297;
        (*(void (**)(char *, void *))(v295 + 8))(v296, v300);
        long long v154 = v590;
LABEL_107:
        if ((v173 & 1) == 0)
        {
          swift_release();
          goto LABEL_113;
        }
        goto LABEL_9;
      case 21:
        uint64_t v579 = v157;
        int v576 = v153;
        swift_retain();
        swift_release();
        goto LABEL_9;
      case 31:
        uint64_t v579 = v157;
        uint64_t v247 = v587;
        uint64_t v254 = swift_getTupleTypeMetadata2();
        uint64_t v255 = v589;
        uint64_t v256 = &v589[*(int *)(v254 + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v257 = *(void (**)(char *, uint64_t))(v585 + 8);
          v257(v256, v247);
          v257(v255, v247);
LABEL_112:
          uint64_t v151 = v594;
LABEL_113:
          uint64_t v312 = v595;
        }
        else
        {
          unsigned int v306 = v256;
          int v576 = v153;
          uint64_t v571 = v156;
          uint64_t v557 = v138;
          uint64_t v307 = v582;
          char v308 = v555;
          uint64_t v309 = v584;
          (*(void (**)(char *, char *, void *))(v582 + 32))(v555, v255, v584);
          swift_retain();
          char v310 = sub_24DCC9798();
          (*(void (**)(char *, void *))(v307 + 8))(v308, v309);
          if (v310)
          {
            (*(void (**)(char *, uint64_t))(v585 + 8))(v306, v247);
            uint64_t v151 = v594;
LABEL_116:
            long long v154 = v590;
            char v156 = v571;
            goto LABEL_9;
          }
          swift_release();
          uint64_t v327 = *(void (**)(char *, uint64_t))(v585 + 8);
          uint64_t v328 = v306;
LABEL_141:
          uint64_t v329 = v247;
LABEL_146:
          v327(v328, v329);
LABEL_147:
          uint64_t v151 = v594;
          uint64_t v312 = v595;
          long long v154 = v590;
        }
LABEL_148:
        (*(void (**)(char *, uint64_t))(v312 + 8))(v154, v151);
        return 0;
      default:
        v156[1](v589, v155);
        goto LABEL_113;
    }
  }
  id v602 = v148;
  uint64_t v603 = v597;
  uint64_t v557 = v138;
  uint64_t v604 = v138;
  uint64_t v605 = v149;
  type metadata accessor for Materialization.EvictItem();
  uint64_t v163 = v601;
  uint64_t v164 = swift_dynamicCastClass();
  if (!v164)
  {
    uint64_t v165 = v596;
    if (v139 == 0x40000) {
      goto LABEL_27;
    }
    if (v139 != 256)
    {
      if (v139 != 128) {
        goto LABEL_33;
      }
LABEL_22:
      uint64_t v174 = v598;
      if ((((uint64_t (*)(void))(*v598)[19])() & 0x100) != 0) {
        goto LABEL_226;
      }
      uint64_t v175 = TupleTypeMetadata2;
      uint64_t v176 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v177 = v594;
      uint64_t v178 = v163;
      uint64_t v179 = *(void (**)(char *, uint64_t, uint64_t))(v595 + 16);
      uint64_t v180 = (char *)v576;
      v179((char *)v576, v591, v594);
      uint64_t v599 = v176;
      *(void *)&v180[v176] = v178;
      uint64_t v181 = v592;
      uint64_t v182 = *(void *)(v592 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v182 + 48))(v180, 1, v592) == 1)
      {
        swift_retain();
      }
      else
      {
        uint64_t v285 = v560;
        v179(v560, (uint64_t)v180, v177);
        uint64_t v286 = v285;
        uint64_t v287 = swift_getEnumCaseMultiPayload();
        if (v287 == 11)
        {
          MEMORY[0x270FA5388](v287);
          strcpy((char *)&v512[-4], " otherID from to ");
          uint64_t v288 = v587;
          id v602 = (id)v587;
          uint64_t v603 = sub_24DCCA3F8();
          uint64_t v604 = (ValueMetadata *)__swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B1995E0);
          uint64_t v605 = v604;
          uint64_t v289 = swift_getTupleTypeMetadata();
          unsigned int v290 = &v286[*(int *)(v289 + 48)];
          int v291 = v286[*(int *)(v289 + 80)];
          id v602 = v596;
          uint64_t v603 = v597;
          uint64_t v604 = v557;
          uint64_t v605 = (ValueMetadata *)v593;
          type metadata accessor for DiskImport.ContinueDiskImport();
          uint64_t v292 = v286;
          if (swift_dynamicCastClass())
          {
            uint64_t v293 = sub_24DCCA3F8();
            uint64_t v294 = *(void (**)(char *, uint64_t))(*(void *)(v293 - 8) + 8);
            swift_retain();
            v294(v290, v293);
            (*(void (**)(char *, uint64_t))(v585 + 8))(v292, v288);
            uint64_t v180 = (char *)v576;
            if (v291 == 6)
            {
              swift_release();
              (*(void (**)(char *, uint64_t))(v595 + 8))(v180, v594);
              goto LABEL_226;
            }
          }
          else
          {
            uint64_t v363 = sub_24DCCA3F8();
            uint64_t v364 = *(void (**)(char *, uint64_t))(*(void *)(v363 - 8) + 8);
            swift_retain();
            v364(v290, v363);
            (*(void (**)(char *, uint64_t))(v585 + 8))(v286, v288);
            uint64_t v180 = (char *)v576;
          }
        }
        else
        {
          uint64_t v323 = *(void (**)(char *, uint64_t))(v182 + 8);
          swift_retain();
          v323(v285, v181);
        }
      }
      uint64_t v365 = (*(uint64_t (**)(char *, uint64_t))(v570 + 8))(v180, v175);
      uint64_t v366 = (void *)((uint64_t (*)(uint64_t))(*v174)[33])(v365);
      char v367 = sub_24DA7C0C4((uint64_t)sub_24D4367FC, 0);

      goto LABEL_168;
    }
    goto LABEL_40;
  }
  if (v139 > 255)
  {
    uint64_t v165 = v596;
    if (v139 != 256)
    {
      if (v139 != 0x40000) {
        goto LABEL_33;
      }
LABEL_27:
      if (!*((unsigned char *)v163 + 112) && (*((unsigned char *)v163 + 97) & 1) == 0) {
        goto LABEL_226;
      }
      uint64_t v183 = v594;
      uint64_t v184 = v595;
      uint64_t v185 = *(void (**)(char *, uint64_t, uint64_t))(v595 + 16);
      v185(v120, v591, v594);
      uint64_t v186 = v592;
      uint64_t v187 = *(void *)(v592 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v187 + 48))(v120, 1, v592) == 1) {
        goto LABEL_30;
      }
      v185(v117, (uint64_t)v120, v183);
      if (swift_getEnumCaseMultiPayload() == 13)
      {
        uint64_t v236 = v564;
        uint64_t v237 = v558;
        uint64_t v238 = v565;
        (*(void (**)(char *, char *, uint64_t))(v564 + 32))(v558, v117, v565);
        id v602 = (id)sub_24DA7CA48(v601, v584, v568, v596, v597, v557, v593);
        sub_24DCC9D48();
        uint64_t v599 = swift_getWitnessTable();
        swift_getWitnessTable();
        char v239 = sub_24DCC9B18();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v236 + 8))(v237, v238);
        if (v239)
        {
LABEL_30:
          (*(void (**)(char *, uint64_t))(v184 + 8))(v120, v183);
          uint64_t v189 = v600;
          uint64_t v188 = v601;
          int v190 = 1;
          goto LABEL_43;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v187 + 8))(v117, v186);
      }
      (*(void (**)(char *, uint64_t))(v184 + 8))(v120, v183);
      return 0;
    }
LABEL_40:
    if ((((uint64_t (*)(void))(*v598)[19])() & 0x100) != 0) {
      goto LABEL_226;
    }
    uint64_t v204 = v594;
    uint64_t v203 = v595;
    uint64_t v205 = *(void (**)(char *, uint64_t, uint64_t))(v595 + 16);
    v205(v126, v591, v594);
    uint64_t v206 = v592;
    uint64_t v207 = *(void *)(v592 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v207 + 48))(v126, 1, v592) == 1) {
      goto LABEL_42;
    }
    v205(v123, (uint64_t)v126, v204);
    if (swift_getEnumCaseMultiPayload() == 13)
    {
      uint64_t v280 = v564;
      uint64_t v281 = v553;
      uint64_t v282 = v565;
      (*(void (**)(char *, char *, uint64_t))(v564 + 32))(v553, v123, v565);
      id v602 = (id)sub_24DA7CA48(v163, v584, v568, v596, v597, v557, v593);
      sub_24DCC9D48();
      swift_getWitnessTable();
      swift_getWitnessTable();
      uint64_t v163 = v601;
      char v283 = sub_24DCC9B18();
      swift_bridgeObjectRelease();
      uint64_t v284 = v281;
      uint64_t v204 = v594;
      (*(void (**)(char *, uint64_t))(v280 + 8))(v284, v282);
      if (v283)
      {
LABEL_42:
        (*(void (**)(char *, uint64_t))(v203 + 8))(v126, v204);
        uint64_t v188 = v163;
        int v190 = 0;
        uint64_t v189 = v600;
LABEL_43:
        uint64_t result = sub_24D580444(v188, v190);
        if (!v189)
        {
          char v147 = result ^ 1;
          return v147 & 1;
        }
        return result;
      }
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v207 + 8))(v123, v206);
    }
    (*(void (**)(char *, uint64_t))(v203 + 8))(v126, v204);
    return 0;
  }
  if (v139 == 64)
  {
    uint64_t v208 = v164;
    uint64_t v209 = v595;
    uint64_t v210 = *(void (**)(void))(v595 + 16);
    uint64_t v211 = (char *)v579;
    ((void (*)(unsigned int (*)(char *, uint64_t, uint64_t), uint64_t, uint64_t))v210)(v579, v591, v594);
    uint64_t v212 = *(void *)(v592 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v212 + 48))(v211, 1, v592) == 1)
    {
      swift_retain();
      uint64_t v213 = v598;
LABEL_47:
      uint64_t v214 = v575;
LABEL_48:
      (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v594);
      uint64_t v215 = v208 + *(void *)(*(void *)v208 + 576);
      uint64_t v216 = v566;
      uint64_t v217 = v600;
      (*(void (**)(uint64_t, uint64_t))(*v213[4] + 240))(v215, 1);
      if (v217) {
        return swift_release();
      }
      uint64_t v324 = v580;
      uint64_t v325 = v577;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v580 + 48))(v216, 1, v577) != 1)
      {
        unsigned int v331 = v549;
        (*(void (**)(char *, char *, uint64_t))(v324 + 32))(v549, v216, v325);
        uint64_t v332 = swift_getWitnessTable();
        if (sub_24D98BCC4(v325, v332) == 2)
        {
          (*(void (**)(char *, uint64_t))(v324 + 8))(v331, v325);
          swift_release();
          char v147 = 1;
          return v147 & 1;
        }
        if ((sub_24D98BC10(v325, v332) & 1) == 0)
        {
          (*(void (**)(char *, uint64_t))(v324 + 8))(v331, v325);
          swift_release();
          char v147 = 0;
          return v147 & 1;
        }
        uint64_t v388 = v533;
        sub_24D4759C8(v215, v533);
        uint64_t v471 = v586;
        uint64_t v472 = v583;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v586 + 48))(v388, 1, v583) != 1)
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v471 + 32))(v214, v388, v472);
          BOOL v486 = sub_24DB86F3C(v472);
          swift_release();
          (*(void (**)(char *, uint64_t))(v324 + 8))(v331, v577);
          if (v486)
          {
            long long v487 = &v214[*(int *)(v472 + 52)];
            LODWORD(v487) = v487[*(int *)(type metadata accessor for ItemReconciliationHalf() + 52)];
            (*(void (**)(char *, uint64_t))(v471 + 8))(v214, v472);
            char v147 = v487 == 0;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v471 + 8))(v214, v472);
            char v147 = 1;
          }
          return v147 & 1;
        }
        (*(void (**)(char *, uint64_t))(v324 + 8))(v331, v577);
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v573 + 8))(v388, v574);
        goto LABEL_67;
      }
      goto LABEL_129;
    }
    unint64_t v240 = v563;
    v210();
    int v241 = swift_getEnumCaseMultiPayload() - 4;
    uint64_t v214 = v575;
    switch(v241)
    {
      case 0:
        uint64_t v242 = v587;
        uint64_t v243 = (uint64_t)&v240[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          unint64_t v244 = *(void (**)(uint64_t, uint64_t))(v585 + 8);
          v244(v243, v242);
          v244((uint64_t)v240, v242);
          goto LABEL_250;
        }
        uint64_t v599 = v243;
        uint64_t v420 = v582;
        uint64_t v421 = v540;
        uint64_t v422 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v540, v240, v584);
        swift_retain();
        char v423 = sub_24DCC9798();
        (*(void (**)(char *, void *))(v420 + 8))(v421, v422);
        if (v423)
        {
          (*(void (**)(uint64_t, uint64_t))(v585 + 8))(v599, v587);
          uint64_t v213 = v598;
          uint64_t v211 = (char *)v579;
          goto LABEL_48;
        }
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v585 + 8))(v599, v587);
        goto LABEL_250;
      case 1:
        uint64_t v348 = v569;
        uint64_t v349 = &v240[*(int *)(swift_getTupleTypeMetadata3() + 48)];
        uint64_t v350 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v580 + 48);
        uint64_t v351 = v240;
        unsigned int v352 = v240;
        uint64_t v353 = v577;
        if (v350(v351, 1, v577) == 1)
        {
          uint64_t v354 = *(void (**)(char *, uint64_t))(v567 + 8);
          v354(v349, v348);
          v354(v352, v348);
          uint64_t v211 = (char *)v579;
          goto LABEL_215;
        }
        if (v350(v349, 1, v353) == 1)
        {
          uint64_t v424 = v582;
          uint64_t v425 = v550;
          uint64_t v426 = v563;
          uint64_t v427 = v584;
          (*(void (**)(char *, char *, void *))(v582 + 16))(v550, v563, v584);
          uint64_t v599 = *(void *)(v580 + 8);
          swift_retain();
          ((void (*)(char *, uint64_t))v599)(v426, v353);
          char v428 = sub_24DCC9798();
          (*(void (**)(char *, void *))(v424 + 8))(v425, v427);
          uint64_t v213 = v598;
          uint64_t v214 = v575;
          if (v428) {
            goto LABEL_48;
          }
LABEL_214:
          swift_release();
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v580 + 8))(v563, v353);
          (*(void (**)(char *, uint64_t))(v567 + 8))(v349, v569);
        }
        goto LABEL_215;
      case 6:
        uint64_t v341 = v587;
        id v602 = (id)v587;
        uint64_t v603 = sub_24DCCA3F8();
        uint64_t v604 = &type metadata for ContentStatus;
        uint64_t v605 = &type metadata for ContentStatus;
        uint64_t v342 = swift_getTupleTypeMetadata();
        uint64_t v343 = &v240[*(int *)(v342 + 48)];
        uint64_t v344 = v240;
        int v345 = v240[*(int *)(v342 + 80)];
        uint64_t v346 = sub_24DCCA3F8();
        int v347 = *(void (**)(char *, uint64_t))(*(void *)(v346 - 8) + 8);
        uint64_t v213 = v598;
        if (!v345)
        {
          swift_retain();
          v347(v343, v346);
          (*(void (**)(char *, uint64_t))(v585 + 8))(v344, v341);
          uint64_t v211 = (char *)v579;
          goto LABEL_47;
        }
        v347(v343, v346);
        (*(void (**)(char *, uint64_t))(v585 + 8))(v344, v341);
LABEL_250:
        uint64_t v429 = v594;
        uint64_t v211 = (char *)v579;
        goto LABEL_251;
      case 10:
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
        uint64_t v355 = v587;
        uint64_t v356 = *(void **)&v240[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        swift_retain();

        int v357 = swift_getEnumCaseMultiPayload();
        uint64_t v213 = v598;
        if (v357 == 1) {
          goto LABEL_165;
        }
        uint64_t v358 = v240;
        uint64_t v359 = v582;
        uint64_t v360 = v541;
        int v361 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v541, v358, v584);
        LODWORD(v599) = sub_24DCC9798();
        (*(void (**)(char *, void *))(v359 + 8))(v360, v361);
        if ((v599 & 1) == 0) {
          goto LABEL_214;
        }
        goto LABEL_48;
      case 11:
        __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_26B197F30);
        uint64_t v355 = v587;
        uint64_t v362 = *(void **)&v240[*(int *)(swift_getTupleTypeMetadata2() + 48)];
        swift_retain();

        if (swift_getEnumCaseMultiPayload() == 1)
        {
LABEL_165:
          swift_release();
          (*(void (**)(char *, uint64_t))(v585 + 8))(v240, v355);
LABEL_215:
          uint64_t v429 = v594;
        }
        else
        {
          unsigned int v430 = v240;
          uint64_t v431 = v582;
          uint64_t v432 = v542;
          char v433 = v584;
          (*(void (**)(char *, char *, void *))(v582 + 32))(v542, v430, v584);
          char v434 = sub_24DCC9798();
          swift_release();
          (*(void (**)(char *, void *))(v431 + 8))(v432, v433);
          uint64_t v429 = v594;
          if (v434)
          {
            (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v594);
            goto LABEL_226;
          }
        }
LABEL_251:
        (*(void (**)(char *, uint64_t))(v209 + 8))(v211, v429);
        break;
      default:
        (*(void (**)(char *, uint64_t))(v212 + 8))(v240, v592);
        goto LABEL_215;
    }
    return 0;
  }
  uint64_t v165 = v596;
  if (v139 == 128) {
    goto LABEL_22;
  }
LABEL_33:
  uint64_t v193 = v597;
  id v602 = v165;
  uint64_t v603 = v597;
  uint64_t v604 = v557;
  uint64_t v605 = v149;
  type metadata accessor for Materialization.MaterializeParentHierarchy();
  if (swift_dynamicCastClass() && v139 == 2048)
  {
    uint64_t v194 = v594;
    uint64_t v195 = v595;
    uint64_t v196 = *(void (**)(void (**)(char *, uint64_t), uint64_t, uint64_t))(v595 + 16);
    unsigned int v197 = (char *)v571;
    v196(v571, v591, v594);
    uint64_t v198 = v592;
    uint64_t v199 = *(void *)(v592 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v199 + 48))(v197, 1, v592) == 1) {
      goto LABEL_230;
    }
    v196((void (**)(char *, uint64_t))v112, (uint64_t)v197, v194);
    int v200 = swift_getEnumCaseMultiPayload();
    if (v200 != 45)
    {
      if (v200 != 19)
      {
        (*(void (**)(char *, uint64_t))(v199 + 8))(v112, v198);
        goto LABEL_229;
      }
      uint64_t v201 = v587;
      uint64_t v202 = &v112[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(v585 + 8))(v202, v201);
LABEL_229:
        uint64_t v194 = v594;
        goto LABEL_230;
      }
      uint64_t v368 = *v112;
      if (qword_24DCD54C8[(char)sub_24DB1702C()] != qword_24DCD54C8[v368])
      {
        (*(void (**)(char *, void *))(v582 + 8))(v202, v584);
        goto LABEL_229;
      }
      uint64_t v369 = v582;
      uint64_t v370 = v537;
      uint64_t v371 = v202;
      uint64_t v372 = v584;
      (*(void (**)(char *, char *, void *))(v582 + 32))(v537, v371, v584);
      char v373 = sub_24DCC9798();
      (*(void (**)(char *, void *))(v369 + 8))(v370, v372);
      uint64_t v194 = v594;
      if ((v373 & 1) == 0)
      {
LABEL_230:
        (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
        return 0;
      }
    }
    (*(void (**)(char *, uint64_t))(v195 + 8))(v197, v194);
LABEL_226:
    char v147 = 1;
    return v147 & 1;
  }
  id v602 = v165;
  uint64_t v603 = v193;
  uint64_t v604 = v557;
  uint64_t v605 = v149;
  type metadata accessor for Materialization.BackgroundMaterializeParentHierarchy();
  uint64_t v224 = swift_dynamicCastClass();
  uint64_t v225 = v595;
  if (v224 && v139 == 2048)
  {
    uint64_t v226 = *(void (**)(char *, uint64_t, uint64_t))(v595 + 16);
    uint64_t v227 = v561;
    uint64_t v228 = v594;
    v226(v561, v591, v594);
    uint64_t v229 = v592;
    uint64_t v230 = *(void *)(v592 - 8);
    int v231 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v230 + 48))(v227, 1, v592);
    uint64_t v232 = v559;
    if (v231 == 1) {
      goto LABEL_292;
    }
    v226(v559, (uint64_t)v227, v228);
    int v233 = swift_getEnumCaseMultiPayload();
    if (v233 != 45)
    {
      if (v233 != 19)
      {
        (*(void (**)(char *, uint64_t))(v230 + 8))(v232, v229);
        goto LABEL_291;
      }
      uint64_t v234 = v587;
      uint64_t v235 = &v232[*(int *)(swift_getTupleTypeMetadata2() + 48)];
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        (*(void (**)(char *, uint64_t))(v585 + 8))(v235, v234);
LABEL_291:
        uint64_t v228 = v594;
        goto LABEL_292;
      }
      uint64_t v441 = *v232;
      if (qword_24DCD54C8[(char)sub_24DB1702C()] == qword_24DCD54C8[v441])
      {
        uint64_t v442 = v582;
        uint64_t v443 = v526;
        unsigned int v444 = v584;
        (*(void (**)(char *, char *, void *))(v582 + 32))(v526, v235, v584);
        char v445 = sub_24DCC9798();
        (*(void (**)(char *, void *))(v442 + 8))(v443, v444);
        uint64_t v228 = v594;
        if (v445) {
          goto LABEL_225;
        }
LABEL_292:
        (*(void (**)(char *, uint64_t))(v225 + 8))(v227, v228);
        return 0;
      }
      goto LABEL_290;
    }
    goto LABEL_225;
  }
  id v602 = v165;
  uint64_t v603 = v193;
  uint64_t v604 = v557;
  uint64_t v605 = v149;
  type metadata accessor for Materialization.MaterializeIgnoredItem();
  if (swift_dynamicCastClass())
  {
    uint64_t v272 = v598;
    if (v139 < 0x20000)
    {
      if (v139 < 0x2000)
      {
        if (v139 != 1)
        {
          if (v139 == 2048)
          {
            unint64_t v273 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
            uint64_t v227 = v536;
            uint64_t v228 = v594;
            v273(v536, v591, v594);
            uint64_t v274 = v592;
            uint64_t v275 = *(void *)(v592 - 8);
            int v276 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v275 + 48))(v227, 1, v592);
            uint64_t v277 = v535;
            if (v276 == 1) {
              goto LABEL_292;
            }
            v273(v535, (uint64_t)v227, v228);
            int v278 = swift_getEnumCaseMultiPayload();
            if (v278 != 45)
            {
              if (v278 != 19)
              {
                (*(void (**)(char *, uint64_t))(v275 + 8))(v277, v274);
                goto LABEL_291;
              }
              uint64_t v279 = v587;
              uint64_t v235 = &v277[*(int *)(swift_getTupleTypeMetadata2() + 48)];
              if (swift_getEnumCaseMultiPayload() == 1)
              {
                (*(void (**)(char *, uint64_t))(v585 + 8))(v235, v279);
                goto LABEL_291;
              }
              uint64_t v491 = *v277;
              if (qword_24DCD54C8[(char)sub_24DB1702C()] == qword_24DCD54C8[v491])
              {
                uint64_t v492 = v582;
                unint64_t v493 = v514;
                uint64_t v494 = v584;
                (*(void (**)(char *, char *, void *))(v582 + 32))(v514, v235, v584);
                char v495 = sub_24DCC9798();
                (*(void (**)(char *, void *))(v492 + 8))(v493, v494);
                uint64_t v228 = v594;
                if (v495) {
                  goto LABEL_225;
                }
                goto LABEL_292;
              }
LABEL_290:
              (*(void (**)(char *, void *))(v582 + 8))(v235, v584);
              goto LABEL_291;
            }
LABEL_225:
            (*(void (**)(char *, uint64_t))(v225 + 8))(v227, v228);
            goto LABEL_226;
          }
          goto LABEL_199;
        }
LABEL_189:
        uint64_t v393 = v544;
        uint64_t v394 = v594;
        (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v544, v591, v594);
        uint64_t v395 = v592;
        uint64_t v396 = *(void *)(v592 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v396 + 48))(v393, 1, v592) != 1)
        {
          char v147 = swift_getEnumCaseMultiPayload() == 42;
          (*(void (**)(char *, uint64_t))(v396 + 8))(v393, v395);
          return v147 & 1;
        }
        (*(void (**)(char *, uint64_t))(v225 + 8))(v393, v394);
        return 0;
      }
      if (v139 == 0x2000)
      {
LABEL_178:
        if (((*(uint64_t (**)(void))(*v272 + 152))() & 0x80) != 0)
        {
          uint64_t v377 = *(void (**)(char *, uint64_t, uint64_t))(v225 + 16);
          uint64_t v378 = v532;
          uint64_t v379 = v594;
          v377(v532, v591, v594);
          uint64_t v380 = v592;
          uint64_t v381 = *(void *)(v592 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v381 + 48))(v378, 1, v592) == 1
            || (unsigned int v382 = v522,
                v377(v522, (uint64_t)v378, v379),
                int v383 = swift_getEnumCaseMultiPayload(),
                (*(void (**)(char *, uint64_t))(v381 + 8))(v382, v380),
                v383 != 27))
          {
            (*(void (**)(char *, uint64_t))(v225 + 8))(v378, v379);
            return 0;
          }
          (*(void (**)(char *, uint64_t))(v225 + 8))(v378, v379);
        }
        goto LABEL_226;
      }
LABEL_175:
      if (v139 == 0x10000)
      {
        int v374 = *(uint64_t (**)(uint64_t))(**(void **)(v272[4] + 16) + 784);
        uint64_t v375 = swift_retain();
        char v376 = v374(v375);
        swift_release();
        char v147 = v376 ^ 1;
        return v147 & 1;
      }
      goto LABEL_199;
    }
  }
  else
  {
    uint64_t v272 = v598;
    if (v139 < 0x20000)
    {
      if (v139 == 1) {
        goto LABEL_189;
      }
      if (v139 == 0x2000) {
        goto LABEL_178;
      }
      goto LABEL_175;
    }
  }
  if (v139 >= 0x200000)
  {
    if (v139 != 0x200000)
    {
      if (v139 == 0x400000)
      {
        char v147 = (*(uint64_t (**)(void))(*v272 + 256))() ^ 1;
        return v147 & 1;
      }
      goto LABEL_199;
    }
    if (v163[17] != 0x8000) {
      goto LABEL_226;
    }
    id v602 = v165;
    uint64_t v603 = v193;
    uint64_t v397 = v557;
    uint64_t v398 = v193;
    uint64_t v399 = (ValueMetadata *)v593;
    uint64_t v604 = v557;
    uint64_t v605 = (ValueMetadata *)v593;
    type metadata accessor for ItemJob();
    if (!swift_dynamicCastClass()) {
      goto LABEL_67;
    }
    id v602 = v165;
    uint64_t v603 = v398;
    uint64_t v604 = v397;
    uint64_t v605 = v399;
    type metadata accessor for Ingestion.FetchItemMetadata();
    if (!swift_dynamicCastClass())
    {
      id v602 = v165;
      uint64_t v603 = v398;
      uint64_t v604 = v397;
      uint64_t v605 = v399;
      type metadata accessor for Ingestion.FetchChildrenMetadata();
      if (!swift_dynamicCastClass())
      {
        id v602 = v165;
        uint64_t v603 = v398;
        uint64_t v604 = v397;
        uint64_t v605 = v399;
        type metadata accessor for Ingestion.ReSnapshotChildren();
        if (!swift_dynamicCastClass()) {
          goto LABEL_67;
        }
      }
    }
    uint64_t v400 = qword_26B1997F0;
    swift_retain();
    if (v400 != -1) {
      swift_once();
    }
    char v367 = sub_24DA7C0C4((uint64_t)sub_24D4367FC, 0);
    swift_release();
LABEL_168:
    char v147 = v367 & 1;
    return v147 & 1;
  }
  if (v139 == 0x20000)
  {
    unsigned int v389 = v545;
    uint64_t v390 = v594;
    (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v545, v591, v594);
    uint64_t v391 = v592;
    uint64_t v392 = *(void *)(v592 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v392 + 48))(v389, 1, v592) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 23) {
        goto LABEL_67;
      }
      (*(void (**)(char *, uint64_t))(v392 + 8))(v389, v391);
      return 0;
    }
    (*(void (**)(char *, uint64_t))(v225 + 8))(v389, v390);
    return 0;
  }
  if (v139 == 0x80000)
  {
    char v147 = ((*(uint64_t (**)(void))(*v272 + 160))() & 1) == 0;
    return v147 & 1;
  }
LABEL_199:
  id v602 = v165;
  uint64_t v603 = v193;
  unsigned int v401 = (ValueMetadata *)v593;
  uint64_t v604 = v557;
  uint64_t v605 = (ValueMetadata *)v593;
  type metadata accessor for Maintenance.RefreshInheritedContentPolicy();
  uint64_t v402 = swift_dynamicCastClass();
  if (v402)
  {
    if (v139 != 0x2000000)
    {
      if (v139 != 0x1000000)
      {
        if (v139 == 0x800000)
        {
          uint64_t v403 = v402;
          uint64_t v404 = v521;
          uint64_t v405 = v594;
          (*(void (**)(char *, uint64_t, uint64_t))(v225 + 16))(v521, v591, v594);
          uint64_t v406 = v592;
          uint64_t v407 = *(void *)(v592 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v407 + 48))(v404, 1, v592) == 1)
          {
            (*(void (**)(char *, uint64_t))(v225 + 8))(v404, v405);
          }
          else
          {
            if (swift_getEnumCaseMultiPayload() != 37)
            {
              (*(void (**)(char *, uint64_t))(v407 + 8))(v404, v406);
              return 0;
            }
            uint64_t v478 = v587;
            uint64_t v479 = v404[*(int *)(swift_getTupleTypeMetadata2() + 48)];
            uint64_t v480 = v585;
            uint64_t v481 = (uint64_t)v517;
            (*(void (**)(char *, char *, uint64_t))(v585 + 32))(v517, v404, v478);
            if (qword_24DCD54C8[(char)sub_24DB1702C()] != qword_24DCD54C8[v479])
            {
              (*(void (**)(uint64_t, uint64_t))(v480 + 8))(v481, v478);
              return 0;
            }
            uint64_t v482 = v403 + *(void *)(*(void *)v403 + 576);
            uint64_t v483 = (uint64_t)v515;
            uint64_t v484 = (uint64_t)v584;
            (*(void (**)(char *, uint64_t, void *))(v582 + 16))(v515, v482, v584);
            swift_storeEnumTagMultiPayload();
            LOBYTE(v484) = sub_24D3EC388(v483, v481, v484, v568);
            uint64_t v485 = *(void (**)(uint64_t, uint64_t))(v480 + 8);
            v485(v483, v478);
            v485(v481, v478);
            if (v484) {
              goto LABEL_226;
            }
          }
          return 0;
        }
LABEL_316:
        id v602 = 0;
        uint64_t v603 = 0xE000000000000000;
        sub_24DCCA728();
        sub_24DCC9968();
        long long v606 = v163;
        swift_getWitnessTable();
        sub_24DCCADC8();
        int v511 = 0;
        uint64_t v510 = 680;
        sub_24DCCA978();
        __break(1u);
        JUMPOUT(0x24D58609CLL);
      }
LABEL_270:
      if (qword_26B194290 != -1) {
        swift_once();
      }
      char v147 = sub_24DA7C0C4((uint64_t)sub_24D4367FC, 0) & 1;
      return v147 & 1;
    }
  }
  else if (v139 != 0x2000000)
  {
    if (v139 != 0x1000000) {
      goto LABEL_316;
    }
    goto LABEL_270;
  }
  uint64_t v459 = v272[3];
  uint64_t v460 = v528;
  sub_24DBB275C();
  id v602 = v165;
  uint64_t v603 = v597;
  uint64_t v604 = v557;
  uint64_t v605 = v401;
  uint64_t v461 = type metadata accessor for Ingestion.DeferredRescan();
  uint64_t v462 = v600;
  char v463 = (*(uint64_t (**)(char *, uint64_t, void))(*(void *)v459 + 288))(v460, v461, 0);
  if (!v462)
  {
    char v145 = v463;
    (*(void (**)(char *, void *))(v582 + 8))(v460, v584);
    goto LABEL_4;
  }
  return (*(uint64_t (**)(char *, void *))(v582 + 8))(v460, v584);
}

void sub_24D586144(uint64_t a1, uint64_t a2, uint64_t a3, void **a4)
{
  if (*(unsigned char *)(a1 + 112)) {
    sub_24DA84198((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/interfaces/persistence/JobRegistry.swift", 113, 2, 691);
  }
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(a1 + 96);
  unint64_t v10 = v9 & a3;
  uint64_t v24 = *(void **)(a1 + 104);
  swift_retain();
  if (v10)
  {
    unint64_t v11 = v9;
    while (1)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      uint64_t v13 = v10 & ~(1 << v12);
      if (((1 << v12) & v10) == 0) {
        uint64_t v13 = v10;
      }
      if (v12 >= 0x40) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = 1 << v12;
      }
      if (v12 < 0x40) {
        unint64_t v10 = v13;
      }
      char v15 = sub_24D580F40(v14, (void *)a1, a2, a4);
      if (v5) {
        break;
      }
      if (v15)
      {
        uint64_t v16 = -1;
        if ((v14 & v11) != 0) {
          uint64_t v16 = ~v14;
        }
        uint64_t v17 = v16 & v11;
        uint64_t v18 = *(void **)(a1 + 104);
        uint64_t v25 = *(void **)(a1 + 96);
        *(void *)(a1 + 96) = v17;
        *(void *)(a1 + 104) = v24;
        unint64_t v19 = v17;
        uint64_t v20 = a2;
        uint64_t v21 = a4;
        char v22 = *(unsigned char *)(a1 + 112);
        *(unsigned char *)(a1 + 112) = 0;
        sub_24D3F1C98((id)v9, v24, 0);
        char v23 = v22;
        a4 = v21;
        a2 = v20;
        unint64_t v11 = v19;
        sub_24D3E380C(v25, v18, v23);
      }
      if (!v10) {
        return;
      }
    }
    sub_24D3E380C((void *)v9, v24, 0);
  }
}

uint64_t sub_24D5862B0(uint64_t a1, void **a2)
{
  uint64_t v46 = a1;
  uint64_t v4 = (*a2)[10];
  uint64_t v5 = (*a2)[13];
  uint64_t v6 = (*a2)[12];
  uint64_t v47 = (*a2)[11];
  uint64_t v3 = v47;
  uint64_t v48 = v4;
  uint64_t v49 = v5;
  uint64_t v50 = v6;
  uint64_t v41 = type metadata accessor for PersistenceTrigger();
  uint64_t v7 = sub_24DCCA3F8();
  uint64_t v42 = *(void *)(v7 - 8);
  uint64_t v43 = v7;
  MEMORY[0x270FA5388](v7);
  unint64_t v9 = (char *)&v37 - v8;
  uint64_t v47 = v4;
  uint64_t v48 = v3;
  uint64_t v49 = v6;
  uint64_t v50 = v5;
  uint64_t v10 = type metadata accessor for PersistenceTrigger();
  uint64_t v11 = sub_24DCCA3F8();
  uint64_t v44 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v13 = (char *)&v37 - v12;
  uint64_t result = sub_24D9882BC(v46);
  if (!v15)
  {
    uint64_t v38 = v13;
    uint64_t v39 = v11;
    uint64_t v40 = v6;
    uint64_t v16 = v46;
    uint64_t v51 = v46;
    if (v46 < 0)
    {
      uint64_t v24 = v46 & 0x7FFFFFFFFFFFFFFFLL;
      uint64_t v47 = v3;
      uint64_t v48 = v4;
      uint64_t v49 = v5;
      uint64_t v50 = v40;
      type metadata accessor for JobRegistry();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v9, 1, 1);
      uint64_t v25 = qword_26B193080;
      swift_retain_n();
      uint64_t v26 = a2;
      if (v25 != -1) {
        swift_once();
      }
      uint64_t v27 = qword_26B1A2270;
      uint64_t v28 = (void **)((uint64_t (*)(void))(*v26)[22])();
      uint64_t v29 = v45;
      sub_24D586144(v24, (uint64_t)v9, v27, v28);
      uint64_t v33 = v9;
      if (v29)
      {
        swift_release();
        swift_release();
        (*(void (**)(char *, uint64_t))(v42 + 8))(v9, v43);
        return swift_release();
      }
      uint64_t v23 = v31;
      char v35 = v32;
      uint64_t v36 = *(void (**)(char *, uint64_t))(v42 + 8);
      uint64_t v46 = v30;
      v36(v33, v43);
      swift_release();
      swift_release();
      uint64_t v34 = v46;
    }
    else
    {
      uint64_t v47 = v4;
      uint64_t v48 = v3;
      uint64_t v49 = v40;
      uint64_t v50 = v5;
      type metadata accessor for JobRegistry();
      uint64_t v17 = (uint64_t)v38;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v38, 1, 1, v10);
      uint64_t v18 = qword_26B193080;
      swift_retain();
      if (v18 != -1) {
        swift_once();
      }
      uint64_t v19 = v45;
      sub_24D586144(v16, v17, qword_26B1A2270, a2);
      uint64_t v23 = v22;
      if (v19)
      {
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v17, v39);
        return swift_release();
      }
      uint64_t v34 = v20;
      char v35 = v21;
      (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v17, v39);
    }
    uint64_t v47 = v4;
    uint64_t v48 = v3;
    uint64_t v49 = v40;
    uint64_t v50 = v5;
    type metadata accessor for FSOrFPJob();
    sub_24D987E64(v34, v23, v35);
    return swift_release();
  }
  return result;
}

uint64_t sub_24D58672C()
{
  return sub_24DCCB008();
}

uint64_t sub_24D586754()
{
  return sub_24DCCB048();
}

uint64_t sub_24D58679C()
{
  sub_24DCC8718();
  swift_allocObject();
  sub_24DCC8708();
  sub_24DCC86E8();
  uint64_t v0 = sub_24DCC86F8();
  unint64_t v2 = v1;
  uint64_t v3 = sub_24DCC8B38();
  sub_24D400DCC(v0, v2);
  swift_release();
  return v3;
}

uint64_t sub_24D5868C0()
{
  return 0;
}

uint64_t sub_24D586964()
{
  return sub_24D5868C0();
}

uint64_t sub_24D586970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x270FA5388](a1);
  uint64_t v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24DCC8AB8();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v10 >> 60 == 15)
  {
    uint64_t v11 = 1;
  }
  else
  {
    sub_24DCC86D8();
    swift_allocObject();
    sub_24DCC86C8();
    sub_24DCC86B8();
    swift_release();
    sub_24D416034(v8, v10);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(a3, v7, a2);
    uint64_t v11 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a3, v11, 1, a2);
}

uint64_t sub_24D586AFC(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 64))()) {
    return 0;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2)) {
    return 1;
  }
  return 2;
}

uint64_t sub_24D586B70(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 48))(v3);
  char v7 = sub_24DCC9798();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_24D586C68(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = MEMORY[0x270FA5388](a1);
  uint64_t v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(v6 + 56))(v3);
  char v7 = sub_24DCC9798();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, a1);
  return v7 & 1;
}

uint64_t sub_24D586D60(uint64_t a1, uint64_t a2)
{
  if ((*(uint64_t (**)(void))(a2 + 64))()) {
    return 1953460082;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 72))(a1, a2)) {
    return 0x6873617274;
  }
  return 0;
}

unint64_t sub_24D586DF4()
{
  unint64_t result = qword_26986BDC8;
  if (!qword_26986BDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26986BDC8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FileItemIDKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24D586F14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileItemIDKind()
{
  return &type metadata for FileItemIDKind;
}

uint64_t sub_24D586F4C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24D586FE0(uint64_t a1)
{
  swift_getObjectType();
  sub_24D3E45F4(a1, (uint64_t)v5);
  if (!v6)
  {
    sub_24D3E3E54((uint64_t)v5);
    goto LABEL_5;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_5:
    char v2 = 0;
    return v2 & 1;
  }
  char v2 = sub_24DCC9798();

  return v2 & 1;
}

uint64_t sub_24D587104(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v4 = a1;
    swift_unknownObjectRetain();
    sub_24DCCA528();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v8, 0, sizeof(v8));
    id v5 = a1;
  }
  char v6 = sub_24D586FE0((uint64_t)v8);

  sub_24D3E3E54((uint64_t)v8);
  return v6 & 1;
}

uint64_t sub_24D58717C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = sub_24D5871B0();

  return v2;
}

uint64_t sub_24D5871B0()
{
  return sub_24DCC9698();
}

void sub_24D58722C()
{
}

id sub_24D587270()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_24D5872A8(char *a1)
{
  return (*(uint64_t (**)(char *))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x50)
                                                       - 8)
                                           + 8))(&a1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)a1) + 0x60)]);
}

uint64_t type metadata accessor for FileItemIDObject()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_24D587328(uint64_t a1, uint64_t a2)
{
  return sub_24D587370(a1, a2, &qword_26B194080);
}

uint64_t sub_24D58734C(uint64_t a1, uint64_t a2)
{
  return sub_24D587370(a1, a2, &qword_26B194088);
}

uint64_t sub_24D587370(uint64_t a1, uint64_t a2, void *a3)
{
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_24DCC97E8();
  uint64_t v5 = v4;
  if (v3 == sub_24DCC97E8() && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_24DCCAE28();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

id sub_24D58741C(uint64_t a1)
{
  ObjectType = (objc_class *)swift_getObjectType();
  (*(void (**)(char *, uint64_t))(*(void *)(*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x50)
                                                      - 8)
                                          + 16))(&v1[*(void *)((*MEMORY[0x263F8EED0] & *(void *)v1) + 0x60)], a1);
  v5.receiver = v1;
  v5.super_class = ObjectType;
  return objc_msgSendSuper2(&v5, sel_init);
}

id sub_24D5874D8(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return sub_24D58741C(a1);
}

void sub_24D58750C()
{
}

unint64_t sub_24D58753C()
{
  uint64_t v0 = sub_24DCC8A58();
  MEMORY[0x270FA5388](v0);
  uint64_t v1 = sub_24DCC9078();
  MEMORY[0x270FA5388](v1);
  uint64_t v2 = sub_24DCC8A18();
  unsigned int v6 = 0;
  __int16 v7 = 256;
  unint64_t result = sub_24DBAA090(4294967294, v2, v3, 0, 0, 0, (uint64_t)&v6, (uint64_t)sub_24D5879B0, 0);
  if ((v7 & 0x100) != 0)
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = v6;
    LOBYTE(v6) = v7 & 1;
    return v5 | ((unint64_t)(v7 & 1) << 32);
  }
  return result;
}

uint64_t sub_24D5879B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = fpfs_track_document();
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  return result;
}

id *sub_24D587A24(char *a1)
{
  uint64_t v2 = (id *)v1;
  aBlock[14] = *(id *)MEMORY[0x263EF8340];
  uint64_t v164 = sub_24DCC8A58();
  uint64_t v4 = *(void *)(v164 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v164);
  uint64_t v152 = (char *)&v148 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  long long v153 = (char *)&v148 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  long long v157 = (char *)&v148 - v10;
  MEMORY[0x270FA5388](v9);
  uint64_t v155 = (char *)&v148 - v11;
  uint64_t v12 = sub_24DCC9078();
  uint64_t v160 = *(void *)(v12 - 8);
  uint64_t v161 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v151 = (char *)&v148 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  os_log_t v154 = (os_log_t)((char *)&v148 - v16);
  uint64_t v17 = MEMORY[0x270FA5388](v15);
  uint64_t v158 = (char *)&v148 - v18;
  MEMORY[0x270FA5388](v17);
  char v156 = (id *)((char *)&v148 - v19);
  *((void *)v1 + 2) = 1;
  *((void *)v1 + 3) = objc_msgSend(objc_allocWithZone(MEMORY[0x263F8C708]), sel_init);
  *((void *)v1 + 4) = 0x6D5F70756B636162;
  *((void *)v1 + 5) = 0xEF74736566696E61;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B190940);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24DCD57D0;
  char v21 = (void *)*MEMORY[0x263EFF5E0];
  *(void *)(inited + 32) = *MEMORY[0x263EFF5E0];
  uint64_t v22 = (void *)*MEMORY[0x263EFFAD0];
  if (!*MEMORY[0x263EFFAD0]) {
    goto LABEL_37;
  }
  uint64_t v23 = inited;
  uint64_t v24 = OBJC_IVAR____TtC9libfssync17SQLBackupManifest_resourceValuesToFetch;
  uint64_t v25 = (void *)*MEMORY[0x263EFF620];
  *(void *)(inited + 40) = v22;
  *(void *)(inited + 48) = v25;
  id v26 = v21;
  id v27 = v22;
  id v28 = v25;
  *(void *)(v23 + 56) = sub_24DCC97B8();
  uint64_t v29 = sub_24D58F26C(v23);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  *(void *)&v1[v24] = v29;
  uint64_t v163 = v4;
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v30(&v1[OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url], (uint64_t)a1, v164);
  uint64_t v31 = (void *)*((void *)v1 + 3);
  char v32 = (void *)sub_24DCC8948();
  aBlock[0] = 0;
  LODWORD(v31) = objc_msgSend(v31, sel_openAtURL_withFlags_error_, v32, 3145734, aBlock);

  uint64_t v33 = v2;
  if (!v31)
  {
    id v40 = aBlock[0];
    swift_release();
    uint64_t v41 = sub_24DCC8828();
    char v156 = v2;
    uint64_t v42 = v30;
    uint64_t v43 = (void *)v41;

    swift_willThrow();
    id v44 = (id)fpfs_current_or_default_log();
    uint64_t v45 = v158;
    sub_24DCC9088();
    uint64_t v46 = v157;
    v42(v157, (uint64_t)a1, v164);
    id v47 = v43;
    id v48 = v43;
    uint64_t v49 = sub_24DCC9068();
    os_log_type_t v50 = sub_24DCCA128();
    uint64_t v51 = a1;
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v162 = a1;
      uint64_t v53 = v52;
      uint64_t v155 = (char *)swift_slowAlloc();
      id v159 = (id)swift_slowAlloc();
      aBlock[0] = v159;
      *(_DWORD *)uint64_t v53 = 136315394;
      uint64_t v54 = (void *)sub_24DCC8948();
      id v55 = objc_msgSend(v54, sel_fp_shortDescription);
      os_log_t v154 = v49;
      id v56 = v55;

      uint64_t v57 = sub_24DCC97E8();
      unint64_t v59 = v58;

      uint64_t v169 = (char *)sub_24D418FB4(v57, v59, (uint64_t *)aBlock);
      sub_24DCCA428();
      swift_bridgeObjectRelease();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v163 + 8);
      v60(v46, v164);
      *(_WORD *)(v53 + 12) = 2112;
      swift_getErrorValue();
      uint64_t v61 = (char *)sub_24DBA2828(v168);
      uint64_t v169 = v61;
      uint64_t v33 = v156;
      sub_24DCCA428();
      uint64_t v62 = v155;
      *(void *)uint64_t v155 = v61;

      os_log_t v63 = v154;
      _os_log_impl(&dword_24D3D0000, v154, v50, "Failed to open database %s: %@", (uint8_t *)v53, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v62, -1, -1);
      id v64 = v159;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v64, -1, -1);
      uint64_t v65 = v53;
      uint64_t v51 = v162;
      MEMORY[0x25332B030](v65, -1, -1);

      (*(void (**)(char *, uint64_t))(v160 + 8))(v158, v161);
      uint64_t v66 = v164;
    }
    else
    {
      uint64_t v66 = v164;
      uint64_t v60 = *(void (**)(char *, uint64_t))(v163 + 8);
      v60(v46, v164);

      (*(void (**)(char *, uint64_t))(v160 + 8))(v45, v161);
      uint64_t v33 = v156;
    }
    swift_willThrow();
    goto LABEL_29;
  }
  uint64_t v162 = a1;
  id v34 = v2[3];
  id v35 = aBlock[0];
  if (objc_msgSend(v34, sel_setupPragmas))
  {
    id v36 = objc_msgSend(v34, sel_userVersion);
    id v37 = objc_msgSend(v36, sel_integerValue);

    uint64_t v38 = v162;
    if ((uint64_t)v37 > 0)
    {
      uint64_t v39 = 0;
LABEL_15:
      objc_msgSend(v33[3], sel_useBatchingWithDelay_changeCount_, 1000, 0.5);
      (*(void (**)(char *, uint64_t))(v163 + 8))(v38, v164);
      sub_24D43DD74((uint64_t)v39);
      return v33;
    }
    uint64_t v72 = v30;
    id v73 = v33[3];
    uint64_t v74 = (void *)swift_allocObject();
    v74[2] = sub_24D58F328;
    v74[3] = v33;
    aBlock[4] = sub_24D3E3980;
    aBlock[5] = v74;
    aBlock[0] = (id)MEMORY[0x263EF8330];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_24D3E38DC;
    aBlock[3] = &block_descriptor_61;
    uint64_t v75 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned int v76 = objc_msgSend(v73, sel_executeSwift_error_, v75, aBlock);
    _Block_release(v75);
    id v77 = aBlock[0];
    LOBYTE(v75) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v75 & 1) == 0)
    {
      uint64_t v78 = v152;
      if (v76)
      {
        objc_msgSend(v33[3], sel_setUserVersion_, 1);
        uint64_t v39 = sub_24D58F328;
        uint64_t v38 = v162;
        goto LABEL_15;
      }
      swift_release();
      uint64_t v128 = (void *)sub_24DCC8828();

      swift_willThrow();
      id v129 = (id)fpfs_current_or_default_log();
      uint64_t v130 = v151;
      sub_24DCC9088();
      uint64_t v131 = v164;
      v72(v78, (uint64_t)v162, v164);
      id v132 = v128;
      id v133 = v128;
      uint64_t v134 = v78;
      uint64_t v135 = sub_24DCC9068();
      os_log_type_t v136 = sub_24DCCA128();
      if (os_log_type_enabled(v135, v136))
      {
        uint64_t v137 = swift_slowAlloc();
        id v159 = v128;
        uint64_t v138 = v137;
        uint64_t v155 = (char *)swift_slowAlloc();
        uint64_t v158 = (char *)swift_slowAlloc();
        aBlock[0] = v158;
        *(_DWORD *)uint64_t v138 = 136315394;
        char v156 = v33;
        os_log_t v154 = v135;
        uint64_t v139 = (void *)sub_24DCC8948();
        id v140 = objc_msgSend(v139, sel_fp_shortDescription);

        uint64_t v141 = sub_24DCC97E8();
        unint64_t v143 = v142;

        uint64_t v169 = (char *)sub_24D418FB4(v141, v143, (uint64_t *)aBlock);
        sub_24DCCA428();
        swift_bridgeObjectRelease();
        long long v157 = *(char **)(v163 + 8);
        ((void (*)(char *, uint64_t))v157)(v134, v131);
        *(_WORD *)(v138 + 12) = 2112;
        swift_getErrorValue();
        uint64_t v144 = (char *)sub_24DBA2828(v165);
        uint64_t v169 = v144;
        uint64_t v33 = v156;
        sub_24DCCA428();
        char v145 = v155;
        *(void *)uint64_t v155 = v144;

        os_log_t v146 = v154;
        _os_log_impl(&dword_24D3D0000, v154, v136, "Failed to create table %s: %@", (uint8_t *)v138, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v145, -1, -1);
        char v147 = v158;
        swift_arrayDestroy();
        MEMORY[0x25332B030](v147, -1, -1);
        MEMORY[0x25332B030](v138, -1, -1);

        (*(void (**)(char *, uint64_t))(v160 + 8))(v151, v161);
      }
      else
      {
        long long v157 = *(char **)(v163 + 8);
        ((void (*)(char *, uint64_t))v157)(v134, v131);

        (*(void (**)(char *, uint64_t))(v160 + 8))(v130, v161);
      }
      swift_willThrow();
      uint64_t v127 = sub_24D58F328;
      ((void (*)(char *, uint64_t))v157)(v162, v131);
LABEL_30:
      sub_24D43DD74((uint64_t)v127);
      return v33;
    }
    __break(1u);
LABEL_37:
    __break(1u);
  }
  uint64_t v67 = (char *)objc_msgSend(v34, sel_lastError);
  if (v67)
  {
    swift_getErrorValue();
    uint64_t v68 = v166;
    uint64_t v69 = v30;
    uint64_t v70 = v67;
    uint64_t v71 = sub_24DBA2828(v68);

    uint64_t v30 = v69;
    uint64_t v33 = v2;
    id v159 = v67;
  }
  else
  {
    sub_24D3FB6F8(0, &qword_26B194880);
    uint64_t v71 = (void *)sub_24DCCA3C8();
    id v159 = 0;
  }
  uint64_t v152 = v67;
  id v79 = (id)fpfs_current_or_default_log();
  uint64_t v80 = v156;
  sub_24DCC9088();
  uint64_t v81 = v155;
  uint64_t v66 = v164;
  uint64_t v151 = (char *)v30;
  v30(v155, (uint64_t)v162, v164);
  uint64_t v158 = v71;
  uint64_t v82 = sub_24DCC9068();
  os_log_type_t v83 = sub_24DCCA128();
  int v84 = v83;
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v85 = swift_slowAlloc();
    os_log_t v149 = (os_log_t)swift_slowAlloc();
    uint64_t v150 = (void *)swift_slowAlloc();
    aBlock[0] = v150;
    *(_DWORD *)uint64_t v85 = 136315394;
    long long v157 = (char *)(v85 + 4);
    os_log_t v148 = v82;
    uint64_t v86 = (void *)sub_24DCC8948();
    id v87 = objc_msgSend(v86, sel_fp_shortDescription);

    uint64_t v88 = sub_24DCC97E8();
    unint64_t v90 = v89;

    uint64_t v169 = (char *)sub_24D418FB4(v88, v90, (uint64_t *)aBlock);
    sub_24DCCA428();
    swift_bridgeObjectRelease();
    long long v157 = *(char **)(v163 + 8);
    ((void (*)(char *, uint64_t))v157)(v81, v164);
    *(_WORD *)(v85 + 12) = 2112;
    uint64_t v91 = (objc_class *)v158;
    LODWORD(v155) = v84;
    uint64_t v169 = v158;
    uint64_t v92 = v158;
    sub_24DCCA428();
    os_log_t v93 = v149;
    v149->isa = v91;

    uint64_t v66 = v164;
    os_log_t v94 = v148;
    _os_log_impl(&dword_24D3D0000, v148, (os_log_type_t)v155, "Failed to set up pragmas %s: %@", (uint8_t *)v85, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v93, -1, -1);
    uint64_t v95 = v150;
    swift_arrayDestroy();
    MEMORY[0x25332B030](v95, -1, -1);
    uint64_t v96 = v85;
    uint64_t v60 = (void (*)(char *, uint64_t))v157;
    MEMORY[0x25332B030](v96, -1, -1);

    uint64_t v97 = *(void (**)(id *, uint64_t))(v160 + 8);
    v97(v156, v161);
  }
  else
  {
    uint64_t v60 = *(void (**)(char *, uint64_t))(v163 + 8);
    v60(v81, v66);

    uint64_t v98 = v158;
    uint64_t v97 = *(void (**)(id *, uint64_t))(v160 + 8);
    v97(v80, v161);
  }
  id v99 = v33[3];
  aBlock[0] = 0;
  unsigned int v100 = objc_msgSend(v99, sel_close_, aBlock);
  swift_release();
  id v101 = v159;
  if (v100)
  {
    id v102 = aBlock[0];
    uint64_t v51 = v162;
    if (v101)
    {
LABEL_28:
      uint64_t v126 = v152;
      swift_willThrow();

LABEL_29:
      uint64_t v127 = 0;
      v60(v51, v66);
      goto LABEL_30;
    }
  }
  else
  {
    uint64_t v155 = (char *)v97;
    char v156 = v33;
    long long v157 = (char *)v60;
    id v103 = aBlock[0];
    uint64_t v104 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v105 = (id)fpfs_current_or_default_log();
    os_log_t v106 = v154;
    sub_24DCC9088();
    uint64_t v107 = v153;
    ((void (*)(char *, char *, uint64_t))v151)(v153, v162, v66);
    id v108 = v104;
    id v109 = v104;
    uint64_t v110 = sub_24DCC9068();
    os_log_type_t v111 = sub_24DCCA128();
    if (os_log_type_enabled(v110, v111))
    {
      uint64_t v112 = swift_slowAlloc();
      uint64_t v150 = (void *)swift_slowAlloc();
      uint64_t v151 = (char *)swift_slowAlloc();
      aBlock[0] = v151;
      *(_DWORD *)uint64_t v112 = 136315394;
      os_log_t v149 = v110;
      uint64_t v113 = (void *)sub_24DCC8948();
      id v114 = objc_msgSend(v113, sel_fp_shortDescription);

      uint64_t v115 = sub_24DCC97E8();
      unint64_t v117 = v116;

      uint64_t v169 = (char *)sub_24D418FB4(v115, v117, (uint64_t *)aBlock);
      sub_24DCCA428();
      uint64_t v66 = v164;
      swift_bridgeObjectRelease();
      uint64_t v118 = v107;
      uint64_t v60 = (void (*)(char *, uint64_t))v157;
      ((void (*)(char *, uint64_t))v157)(v118, v66);
      *(_WORD *)(v112 + 12) = 2112;
      swift_getErrorValue();
      uint64_t v119 = (char *)sub_24DBA2828(v167);
      uint64_t v169 = v119;
      id v101 = v159;
      sub_24DCCA428();
      uint64_t v120 = v150;
      *uint64_t v150 = v119;

      os_log_t v121 = v149;
      _os_log_impl(&dword_24D3D0000, v149, v111, "Failed to close database %s: %@", (uint8_t *)v112, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v120, -1, -1);
      uint64_t v122 = v151;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v122, -1, -1);
      MEMORY[0x25332B030](v112, -1, -1);

      os_log_t v123 = v154;
    }
    else
    {

      uint64_t v124 = v107;
      uint64_t v60 = (void (*)(char *, uint64_t))v157;
      ((void (*)(char *, uint64_t))v157)(v124, v66);

      os_log_t v123 = v106;
    }
    ((void (*)(os_log_t, uint64_t))v155)(v123, v161);
    uint64_t v33 = v156;
    uint64_t v51 = v162;
    if (v101) {
      goto LABEL_28;
    }
  }
  uint64_t result = (id *)(id)FPNotPermittedWriteError();
  if (result) {
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

uint64_t sub_24D588C84()
{
  return 0;
}

uint64_t sub_24D588D40()
{
  uint64_t v1 = sub_24DCC8A58();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v4 = MEMORY[0x270FA5388](v1);
  uint64_t v5 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v22 - v6;
  uint64_t v8 = *(void (**)(char *))(v2 + 16);
  uint64_t v23 = (char *)(v0 + OBJC_IVAR____TtC9libfssync17SQLBackupManifest_url);
  v8((char *)&v22 - v6);
  uint64_t v9 = *(void **)(v0 + 24);
  uint64_t v10 = objc_msgSend(v9, sel_serialQueue);
  if (!v10)
  {
    uint64_t v19 = *(void (**)(char *, uint64_t))(v2 + 8);
    v19(v7, v1);
    uint64_t v21 = 0;
    goto LABEL_5;
  }
  uint64_t v11 = v10;
  ((void (*)(char *, char *, uint64_t))v8)(v5, v7, v1);
  unint64_t v12 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v13 + v12, v5, v1);
  uint64_t v14 = swift_allocObject();
  uint64_t v22 = sub_24D58FC00;
  *(void *)(v14 + 16) = sub_24D58FC00;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_24D58FF7C;
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_24DCA4078;
  aBlock[3] = &block_descriptor_104;
  uint64_t v15 = v1;
  uint64_t v16 = _Block_copy(aBlock);
  id v17 = v9;
  swift_retain();
  swift_release();
  dispatch_sync(v11, v16);
  uint64_t v18 = v16;
  uint64_t v1 = v15;
  _Block_release(v18);

  uint64_t v19 = *(void (**)(char *, uint64_t))(v2 + 8);
  v19(v7, v15);
  LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v12 & 1) == 0)
  {
    uint64_t v21 = (uint64_t)v22;
LABEL_5:

    swift_bridgeObjectRelease();
    v19(v23, v1);
    swift_bridgeObjectRelease();
    sub_24D43DD74(v21);
    return v0;
  }
  __break(1u);
  return result;
}

id sub_24D589058(void *a1, uint64_t a2)
{
  v42[1] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = sub_24DCC8A58();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_24DCC9078();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42[0] = 0;
  unsigned int v12 = objc_msgSend(a1, sel_close_, v42);
  id v13 = v42[0];
  if (v12)
  {
    return v13;
  }
  else
  {
    id v39 = v42[0];
    id v15 = v42[0];
    uint64_t v16 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v17 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
    id v18 = v16;
    id v19 = v16;
    uint64_t v20 = sub_24DCC9068();
    os_log_type_t v21 = sub_24DCCA128();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      id v39 = (id)v8;
      uint64_t v23 = v22;
      id v36 = (void *)swift_slowAlloc();
      id v37 = (void *)swift_slowAlloc();
      v42[0] = v37;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v34 = v23 + 4;
      uint64_t v24 = (void *)sub_24DCC8948();
      id v25 = objc_msgSend(v24, sel_fp_shortDescription);
      uint64_t v38 = v9;
      id v26 = v25;

      uint64_t v27 = sub_24DCC97E8();
      os_log_t v35 = v20;
      unint64_t v29 = v28;

      uint64_t v41 = sub_24D418FB4(v27, v29, (uint64_t *)v42);
      sub_24DCCA428();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      *(_WORD *)(v23 + 12) = 2112;
      swift_getErrorValue();
      id v30 = sub_24DBA2828(v40);
      uint64_t v41 = (uint64_t)v30;
      sub_24DCCA428();
      uint64_t v31 = v36;
      *id v36 = v30;

      os_log_t v32 = v35;
      _os_log_impl(&dword_24D3D0000, v35, v21, "Can't close database %s: %@", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v31, -1, -1);
      uint64_t v33 = v37;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v33, -1, -1);
      MEMORY[0x25332B030](v23, -1, -1);

      return (id)(*(uint64_t (**)(char *, id))(v38 + 8))(v11, v39);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    }
  }
}

uint64_t sub_24D5894F8()
{
  sub_24D588D40();

  return swift_deallocClassInstance();
}

uint64_t sub_24D589550()
{
  return type metadata accessor for SQLBackupManifest();
}

uint64_t type metadata accessor for SQLBackupManifest()
{
  uint64_t result = qword_26986BDD0;
  if (!qword_26986BDD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_24D5895A4()
{
  uint64_t result = sub_24DCC8A58();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_updateClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_24D589668(uint64_t a1)
{
  uint64_t v4 = sub_24DCC9078();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v1;
  uint64_t v32 = a1;
  uint64_t result = sub_24DC1C7EC(1, (uint64_t)sub_24D58FABC, (uint64_t)v30);
  if (v2)
  {
    id v9 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    swift_retain();
    id v10 = v2;
    swift_retain();
    id v11 = v2;
    unsigned int v12 = sub_24DCC9068();
    os_log_type_t v13 = sub_24DCCA128();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v29 = v5;
      uint64_t v15 = v14;
      id v26 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v35 = v28;
      *(_DWORD *)uint64_t v15 = 136315394;
      v25[1] = v15 + 4;
      uint64_t v16 = (void *)sub_24DCC8948();
      id v17 = objc_msgSend(v16, sel_fp_shortDescription);
      uint64_t v27 = v4;
      id v18 = v17;

      uint64_t v19 = sub_24DCC97E8();
      unint64_t v21 = v20;

      uint64_t v34 = sub_24D418FB4(v19, v21, &v35);
      sub_24DCCA428();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v15 + 12) = 2112;
      swift_getErrorValue();
      id v22 = sub_24DBA2828(v33);
      uint64_t v34 = (uint64_t)v22;
      sub_24DCCA428();
      uint64_t v23 = v26;
      *id v26 = v22;

      _os_log_impl(&dword_24D3D0000, v12, v13, "Can't insert into the database %s: %@", (uint8_t *)v15, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v23, -1, -1);
      uint64_t v24 = v28;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v24, -1, -1);
      MEMORY[0x25332B030](v15, -1, -1);

      (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v27);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    }
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_24D5899E8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned char *a4@<X8>)
{
  void aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = sub_24DCC9078();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v38 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  long long v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a3;
  *(_OWORD *)(v10 + 40) = v11;
  *(void *)(v10 + 56) = *(void *)(a3 + 32);
  unsigned int v12 = (void *)swift_allocObject();
  v12[2] = sub_24D58FB18;
  v12[3] = v10;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_94;
  os_log_type_t v13 = _Block_copy(aBlock);
  swift_retain();
  sub_24D43E368(a3);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned __int8 v14 = objc_msgSend(a1, sel_executeSwift_error_, v13, aBlock);
  _Block_release(v13);
  id v15 = aBlock[0];
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v13) {
    __break(1u);
  }
  if (v14)
  {
    uint64_t result = swift_release();
    *a4 = 1;
  }
  else
  {
    id v17 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v18 = (id)fpfs_current_or_default_log();
    uint64_t v19 = v38;
    sub_24DCC9088();
    swift_retain();
    id v20 = v17;
    swift_retain();
    id v21 = v17;
    id v22 = sub_24DCC9068();
    os_log_type_t v23 = sub_24DCCA128();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      aBlock[0] = v35;
      *(_DWORD *)uint64_t v24 = 136315394;
      uint64_t v33 = v24 + 4;
      id v25 = (void *)sub_24DCC8948();
      id v26 = objc_msgSend(v25, sel_fp_shortDescription);

      uint64_t v27 = sub_24DCC97E8();
      unint64_t v29 = v28;

      uint64_t v40 = sub_24D418FB4(v27, v29, (uint64_t *)aBlock);
      sub_24DCCA428();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2112;
      swift_getErrorValue();
      id v30 = sub_24DBA2828(v39);
      uint64_t v40 = (uint64_t)v30;
      sub_24DCCA428();
      uint64_t v31 = v34;
      *uint64_t v34 = v30;

      _os_log_impl(&dword_24D3D0000, v22, v23, "Failed to insert into %s: %@", (uint8_t *)v24, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v31, -1, -1);
      uint64_t v32 = v35;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v32, -1, -1);
      MEMORY[0x25332B030](v24, -1, -1);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v38, v37);
    }
    else
    {
      swift_release_n();

      (*(void (**)(char *, uint64_t))(v36 + 8))(v19, v37);
    }
    swift_willThrow();
    return swift_release();
  }
  return result;
}

uint64_t sub_24D589EDC(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = (void *)sub_24DCC97B8();
  id v6 = objc_msgSend(a1, sel_bindStringParameter_, v5);

  sub_24DCC97E8();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v7 = objc_msgSend(a1, sel_bindLongParameter_, *(void *)(a3 + 16));
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24D5F1F74(*(void *)(a3 + 24), *(unsigned char *)(a3 + 32));
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v8 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, *(unsigned int *)(a3 + 36));
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return 0;
}

NSObject *sub_24D58A124()
{
  uint64_t result = objc_msgSend(*(id *)(v0 + 24), sel_serialQueue);
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = sub_24D58FA84;
    *(void *)(v3 + 24) = v0;
    v5[4] = sub_24D58FA9C;
    v5[5] = v3;
    v5[0] = MEMORY[0x263EF8330];
    v5[1] = 1107296256;
    v5[2] = sub_24DCA4078;
    v5[3] = &block_descriptor_77;
    uint64_t v4 = _Block_copy(v5);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v2, v4);

    _Block_release(v4);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v2) {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_24D58A278(uint64_t a1)
{
  void aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v2 = sub_24DCC9078();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  id v56 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  id v7 = (char *)&v51 - v6;
  id v8 = *(void **)(a1 + 24);
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = sub_24D58FAA4;
  v9[3] = a1;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v9;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_84;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned int v11 = objc_msgSend(v8, sel_executeSwift_error_, v10, aBlock);
  _Block_release(v10);
  id v12 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v11)
  {
    unsigned __int8 v14 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v15 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    swift_retain();
    id v16 = v14;
    swift_retain();
    id v17 = v14;
    id v18 = sub_24DCC9068();
    os_log_type_t v19 = sub_24DCCA128();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v55 = v2;
      uint64_t v21 = v20;
      uint64_t v52 = (void *)swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      aBlock[0] = v53;
      *(_DWORD *)uint64_t v21 = 136315394;
      uint64_t v51 = v21 + 4;
      id v22 = (void *)sub_24DCC8948();
      id v23 = objc_msgSend(v22, sel_fp_shortDescription);

      uint64_t v24 = sub_24DCC97E8();
      uint64_t v54 = v3;
      unint64_t v26 = v25;

      uint64_t v59 = sub_24D418FB4(v24, v26, (uint64_t *)aBlock);
      sub_24DCCA428();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2112;
      swift_getErrorValue();
      id v27 = sub_24DBA2828(v57);
      uint64_t v59 = (uint64_t)v27;
      uint64_t v3 = v54;
      sub_24DCCA428();
      unint64_t v28 = v52;
      *uint64_t v52 = v27;

      _os_log_impl(&dword_24D3D0000, v18, v19, "Could not create a unique index %s: %@", (uint8_t *)v21, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v28, -1, -1);
      unint64_t v29 = v53;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v29, -1, -1);
      uint64_t v30 = v21;
      uint64_t v2 = v55;
      MEMORY[0x25332B030](v30, -1, -1);
    }
    else
    {

      swift_release_n();
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  }
  objc_msgSend(v8, sel_makeNextFlushFullSync);
  objc_msgSend(v8, sel_flush);
  aBlock[0] = 0;
  if (objc_msgSend(v8, sel_close_, aBlock))
  {
    id v31 = aBlock[0];
  }
  else
  {
    id v32 = aBlock[0];
    uint64_t v33 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v34 = (id)fpfs_current_or_default_log();
    uint64_t v35 = v56;
    sub_24DCC9088();
    swift_retain();
    id v36 = v33;
    swift_retain();
    id v37 = v33;
    uint64_t v38 = sub_24DCC9068();
    os_log_type_t v39 = sub_24DCCA128();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc();
      uint64_t v41 = (void *)swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      aBlock[0] = v53;
      *(_DWORD *)uint64_t v40 = 136315394;
      uint64_t v55 = v2;
      uint64_t v42 = (void *)sub_24DCC8948();
      id v43 = objc_msgSend(v42, sel_fp_shortDescription);
      uint64_t v54 = v3;
      id v44 = v43;

      uint64_t v45 = sub_24DCC97E8();
      unint64_t v47 = v46;

      uint64_t v59 = sub_24D418FB4(v45, v47, (uint64_t *)aBlock);
      sub_24DCCA428();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v40 + 12) = 2112;
      swift_getErrorValue();
      id v48 = sub_24DBA2828(v58);
      uint64_t v59 = (uint64_t)v48;
      sub_24DCCA428();
      *uint64_t v41 = v48;

      _os_log_impl(&dword_24D3D0000, v38, v39, "Can't close database %s: %@", (uint8_t *)v40, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v41, -1, -1);
      uint64_t v49 = v53;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v49, -1, -1);
      MEMORY[0x25332B030](v40, -1, -1);

      (*(void (**)(char *, uint64_t))(v54 + 8))(v56, v55);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v35, v2);
    }
  }
  return swift_release();
}

uint64_t sub_24D58AA2C()
{
  return 0;
}

uint64_t sub_24D58AAE8(void *a1, uint64_t *a2)
{
  id v206 = a1;
  uint64_t v243 = *MEMORY[0x263EF8340];
  uint64_t v217 = sub_24DCC8288();
  uint64_t v216 = *(void **)(v217 - 8);
  MEMORY[0x270FA5388](v217);
  uint64_t v215 = (char *)&v204 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v221 = sub_24DCC8408();
  uint64_t v219 = *(void *)(v221 - 8);
  MEMORY[0x270FA5388](v221);
  unint64_t v220 = (char *)&v204 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v227 = sub_24DCC9078();
  uint64_t v228 = *(void *)(v227 - 8);
  uint64_t v5 = MEMORY[0x270FA5388](v227);
  uint64_t v211 = (char *)&v204 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v210 = (char *)&v204 - v8;
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v213 = (char *)&v204 - v10;
  uint64_t v11 = MEMORY[0x270FA5388](v9);
  uint64_t v218 = (uint64_t)&v204 - v12;
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  uint64_t v222 = (char *)&v204 - v14;
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  uint64_t v212 = (char *)&v204 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v207 = (char *)&v204 - v17;
  uint64_t v223 = sub_24DCC8698();
  uint64_t v225 = *(void *)(v223 - 8);
  uint64_t v18 = MEMORY[0x270FA5388](v223);
  uint64_t v20 = (char *)&v204 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v18);
  id v22 = (char *)&v204 - v21;
  uint64_t v231 = sub_24DCC8A58();
  uint64_t v226 = *(void *)(v231 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v231);
  uint64_t v209 = (char *)&v204 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v208 = (char *)&v204 - v26;
  uint64_t v27 = MEMORY[0x270FA5388](v25);
  uint64_t v214 = (char *)&v204 - v28;
  uint64_t v29 = MEMORY[0x270FA5388](v27);
  uint64_t v224 = (char *)&v204 - v30;
  MEMORY[0x270FA5388](v29);
  id v32 = (char *)&v204 - v31;
  uint64_t v33 = (void *)sub_24DCC97B8();
  uint64_t v35 = *a2;
  id v34 = (char *)a2[1];
  id v36 = a2;
  id v37 = (void *)sub_24DCC97B8();
  id v38 = objc_msgSend(v33, sel_stringByAppendingPathComponent_, v37);

  sub_24DCC97E8();
  uint64_t v39 = v230;
  sub_24DCC88F8();
  swift_bridgeObjectRelease();
  uint64_t v232 = v32;
  uint64_t v40 = v229;
  sub_24DCC88D8();
  if (v40)
  {
    uint64_t v41 = v40;
    LODWORD(aBlock) = sub_24DCC8368();
    sub_24D4C5C60();
    char v42 = sub_24DCC86A8();

    if (v42)
    {

      id v43 = (id)fpfs_current_or_default_log();
      uint64_t v44 = v218;
      sub_24DCC9088();
      uint64_t v45 = v226;
      unint64_t v46 = v224;
      unint64_t v47 = v232;
      uint64_t v48 = v231;
      (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v224, v232, v231);
      uint64_t v49 = sub_24DCC9068();
      os_log_type_t v50 = sub_24DCCA128();
      if (os_log_type_enabled(v49, v50))
      {
        uint64_t v51 = (uint8_t *)swift_slowAlloc();
        uint64_t v230 = swift_slowAlloc();
        *(void *)&long long aBlock = v230;
        *(_DWORD *)uint64_t v51 = 136315138;
        uint64_t v229 = v51 + 4;
        uint64_t v52 = (void *)sub_24DCC8948();
        id v53 = objc_msgSend(v52, sel_fp_shortDescription);

        uint64_t v54 = sub_24DCC97E8();
        unint64_t v56 = v55;

        *(void *)&long long v240 = sub_24D418FB4(v54, v56, (uint64_t *)&aBlock);
        sub_24DCCA428();
        swift_bridgeObjectRelease();
        uint64_t v57 = *(void (**)(char *, uint64_t))(v45 + 8);
        uint64_t v58 = v231;
        v57(v224, v231);
        _os_log_impl(&dword_24D3D0000, v49, v50, "Failed to populate new columns. ENOENT %s does not exist.", v51, 0xCu);
        uint64_t v59 = v230;
        swift_arrayDestroy();
        MEMORY[0x25332B030](v59, -1, -1);
        MEMORY[0x25332B030](v51, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v44, v227);
        return ((uint64_t (*)(char *, uint64_t))v57)(v232, v58);
      }
      else
      {

        unint64_t v89 = *(void (**)(char *, uint64_t))(v45 + 8);
        v89(v46, v48);
        (*(void (**)(uint64_t, uint64_t))(v228 + 8))(v44, v227);
        return ((uint64_t (*)(char *, uint64_t))v89)(v47, v48);
      }
    }
    else
    {
      uint64_t v67 = v40;
      uint64_t v68 = v215;
      sub_24DCC8148();
      sub_24D58FCC8((unint64_t *)&qword_26B1943D0, MEMORY[0x263F06038]);
      uint64_t v69 = v217;
      char v70 = sub_24DCC86A8();

      uint64_t v71 = (void (*)(char *, uint64_t))v216[1];
      v71(v68, v69);
      if (v70)
      {

        id v72 = (id)fpfs_current_or_default_log();
        id v73 = v213;
        sub_24DCC9088();
        uint64_t v74 = v226;
        uint64_t v75 = v214;
        unsigned int v76 = v232;
        uint64_t v77 = v231;
        (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v214, v232, v231);
        uint64_t v78 = sub_24DCC9068();
        os_log_type_t v79 = sub_24DCCA128();
        if (os_log_type_enabled(v78, v79))
        {
          uint64_t v80 = (uint8_t *)swift_slowAlloc();
          uint64_t v230 = swift_slowAlloc();
          *(void *)&long long aBlock = v230;
          *(_DWORD *)uint64_t v80 = 136315138;
          uint64_t v229 = v80 + 4;
          uint64_t v81 = (void *)sub_24DCC8948();
          id v82 = objc_msgSend(v81, sel_fp_shortDescription);

          uint64_t v83 = sub_24DCC97E8();
          unint64_t v85 = v84;

          *(void *)&long long v240 = sub_24D418FB4(v83, v85, (uint64_t *)&aBlock);
          sub_24DCCA428();
          swift_bridgeObjectRelease();
          uint64_t v86 = *(void (**)(char *, uint64_t))(v74 + 8);
          uint64_t v87 = v231;
          v86(v214, v231);
          _os_log_impl(&dword_24D3D0000, v78, v79, "Failed to populate new columns. fileNoSuchFile %s does not exist.", v80, 0xCu);
          uint64_t v88 = v230;
          swift_arrayDestroy();
          MEMORY[0x25332B030](v88, -1, -1);
          MEMORY[0x25332B030](v80, -1, -1);

          (*(void (**)(char *, uint64_t))(v228 + 8))(v73, v227);
          return ((uint64_t (*)(char *, uint64_t))v86)(v232, v87);
        }
        else
        {

          uint64_t v131 = *(void (**)(char *, uint64_t))(v74 + 8);
          v131(v75, v77);
          (*(void (**)(char *, uint64_t))(v228 + 8))(v73, v227);
          return ((uint64_t (*)(char *, uint64_t))v131)(v76, v77);
        }
      }
      else
      {
        unint64_t v90 = v40;
        sub_24DCC8168();
        char v91 = sub_24DCC86A8();

        v71(v68, v69);
        if (v91)
        {

          id v92 = (id)fpfs_current_or_default_log();
          os_log_t v93 = v210;
          sub_24DCC9088();
          uint64_t v94 = v226;
          uint64_t v95 = v208;
          uint64_t v96 = v232;
          uint64_t v97 = v231;
          (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v208, v232, v231);
          uint64_t v98 = sub_24DCC9068();
          os_log_type_t v99 = sub_24DCCA128();
          if (os_log_type_enabled(v98, v99))
          {
            unsigned int v100 = (uint8_t *)swift_slowAlloc();
            uint64_t v230 = swift_slowAlloc();
            *(void *)&long long aBlock = v230;
            *(_DWORD *)unsigned int v100 = 136315138;
            uint64_t v229 = v100 + 4;
            id v101 = (void *)sub_24DCC8948();
            id v102 = objc_msgSend(v101, sel_fp_shortDescription);

            uint64_t v103 = sub_24DCC97E8();
            uint64_t v104 = v97;
            unint64_t v106 = v105;

            *(void *)&long long v240 = sub_24D418FB4(v103, v106, (uint64_t *)&aBlock);
            sub_24DCCA428();
            swift_bridgeObjectRelease();
            uint64_t v107 = *(void (**)(char *, uint64_t))(v94 + 8);
            v107(v208, v104);
            _os_log_impl(&dword_24D3D0000, v98, v99, "Failed to populate new columns. fileReadNoSuchFile %s does not exist.", v100, 0xCu);
            uint64_t v108 = v230;
            swift_arrayDestroy();
            MEMORY[0x25332B030](v108, -1, -1);
            MEMORY[0x25332B030](v100, -1, -1);

            (*(void (**)(char *, uint64_t))(v228 + 8))(v210, v227);
            return ((uint64_t (*)(char *, uint64_t))v107)(v232, v104);
          }
          else
          {

            uint64_t v162 = *(void (**)(char *, uint64_t))(v94 + 8);
            v162(v95, v97);
            (*(void (**)(char *, uint64_t))(v228 + 8))(v93, v227);
            return ((uint64_t (*)(char *, uint64_t))v162)(v96, v97);
          }
        }
        else
        {
          id v132 = (id)fpfs_current_or_default_log();
          id v133 = v211;
          sub_24DCC9088();
          uint64_t v134 = v226;
          uint64_t v135 = v209;
          os_log_type_t v136 = v232;
          uint64_t v137 = v231;
          (*(void (**)(char *, char *, uint64_t))(v226 + 16))(v209, v232, v231);
          uint64_t v138 = v40;
          uint64_t v139 = v40;
          id v140 = sub_24DCC9068();
          os_log_type_t v141 = sub_24DCCA128();
          if (os_log_type_enabled(v140, v141))
          {
            uint64_t v142 = swift_slowAlloc();
            uint64_t v229 = (void *)swift_slowAlloc();
            uint64_t v230 = swift_slowAlloc();
            *(void *)&long long aBlock = v230;
            *(_DWORD *)uint64_t v142 = 136315394;
            unint64_t v143 = (void *)sub_24DCC8948();
            id v144 = objc_msgSend(v143, sel_fp_shortDescription);

            uint64_t v145 = sub_24DCC97E8();
            unint64_t v147 = v146;

            *(void *)&long long v240 = sub_24D418FB4(v145, v147, (uint64_t *)&aBlock);
            sub_24DCCA428();
            swift_bridgeObjectRelease();
            uint64_t v226 = *(void *)(v134 + 8);
            ((void (*)(char *, uint64_t))v226)(v209, v231);
            *(_WORD *)(v142 + 12) = 2112;
            swift_getErrorValue();
            id v148 = sub_24DBA2828(v234);
            *(void *)&long long v240 = v148;
            uint64_t v137 = v231;
            os_log_type_t v136 = v232;
            sub_24DCCA428();
            os_log_t v149 = v229;
            *uint64_t v229 = v148;

            os_log_type_t v150 = v141;
            uint64_t v151 = (void (*)(char *, uint64_t))v226;
            _os_log_impl(&dword_24D3D0000, v140, v150, "Failed to populate new columns for %s: %@", (uint8_t *)v142, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
            swift_arrayDestroy();
            MEMORY[0x25332B030](v149, -1, -1);
            uint64_t v152 = v230;
            swift_arrayDestroy();
            MEMORY[0x25332B030](v152, -1, -1);
            MEMORY[0x25332B030](v142, -1, -1);

            (*(void (**)(char *, uint64_t))(v228 + 8))(v211, v227);
          }
          else
          {
            uint64_t v151 = *(void (**)(char *, uint64_t))(v134 + 8);
            v151(v135, v137);

            (*(void (**)(char *, uint64_t))(v228 + 8))(v133, v227);
          }
          swift_willThrow();
          return ((uint64_t (*)(char *, uint64_t))v151)(v136, v137);
        }
      }
    }
  }
  uint64_t v224 = v34;
  uint64_t v218 = v35;
  uint64_t v229 = v36;
  uint64_t v61 = v225;
  uint64_t v62 = v223;
  (*(void (**)(char *, char *, uint64_t))(v225 + 32))(v22, v20, v223);
  uint64_t result = sub_24DCC85D8();
  if (!*MEMORY[0x263EFFAD0])
  {
    __break(1u);
    return result;
  }
  uint64_t v63 = result;
  if (*(void *)(result + 16))
  {
    id v64 = (id)*MEMORY[0x263EFFAD0];
    uint64_t v65 = sub_24D4060A4(v64);
    if (v66)
    {
      sub_24D3F7E8C(*(void *)(v63 + 56) + 32 * v65, (uint64_t)&aBlock);
    }
    else
    {
      long long aBlock = 0u;
      long long v236 = 0u;
    }
  }
  else
  {
    long long aBlock = 0u;
    long long v236 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v236 + 1))
  {
    sub_24D415F74((uint64_t)&aBlock, qword_26B197F50);
LABEL_25:
    id v113 = (id)fpfs_current_or_default_log();
    id v114 = v222;
    sub_24DCC9088();
    swift_retain_n();
    uint64_t v115 = sub_24DCC9068();
    os_log_type_t v116 = sub_24DCCA128();
    if (os_log_type_enabled(v115, v116))
    {
      unint64_t v117 = (uint8_t *)swift_slowAlloc();
      uint64_t v118 = (void *)swift_slowAlloc();
      uint64_t v229 = v118;
      *(_DWORD *)unint64_t v117 = 136315138;
      *(void *)&long long aBlock = v118;
      uint64_t v224 = (char *)(v117 + 4);
      uint64_t v119 = (void *)sub_24DCC8948();
      uint64_t v120 = v22;
      id v121 = objc_msgSend(v119, sel_fp_shortDescription);

      uint64_t v122 = sub_24DCC97E8();
      uint64_t v123 = v62;
      unint64_t v125 = v124;

      id v22 = v120;
      *(void *)&long long v240 = sub_24D418FB4(v122, v125, (uint64_t *)&aBlock);
      uint64_t v61 = v225;
      sub_24DCCA428();
      swift_release_n();
      uint64_t v62 = v123;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24D3D0000, v115, v116, "Failed to get canonical path for %s", v117, 0xCu);
      uint64_t v126 = v229;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v126, -1, -1);
      MEMORY[0x25332B030](v117, -1, -1);

      (*(void (**)(char *, uint64_t))(v228 + 8))(v222, v227);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v228 + 8))(v114, v227);
    }
    uint64_t v127 = v231;
    uint64_t v128 = v226;
    uint64_t v129 = v221;
    uint64_t v130 = v220;
    LODWORD(aBlock) = 2;
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D58FCC8((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
    sub_24DCC8808();
    sub_24DCC83E8();
    (*(void (**)(char *, uint64_t))(v219 + 8))(v130, v129);
    swift_willThrow();
    goto LABEL_54;
  }
  sub_24D3F7E7C(&aBlock, &v240);
  sub_24D3F7E8C((uint64_t)&v240, (uint64_t)&aBlock);
  sub_24D3FB6F8(0, (unint64_t *)&qword_26B199EA0);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
    goto LABEL_25;
  }
  id v109 = (void *)v239;
  uint64_t v110 = objc_msgSend((id)v239, sel_integerValue);

  sub_24D3F0BA0((uint64_t)(v229 + 3), (uint64_t)v241, (uint64_t *)&unk_26B199DF8);
  sub_24D3F0BA0((uint64_t)v241, (uint64_t)v242, (uint64_t *)&unk_26B199DF8);
  uint64_t v216 = v110;
  if (v242[8])
  {
    unint64_t v111 = 0;
    uint64_t v112 = 1;
  }
  else
  {
    unint64_t v111 = sub_24D58753C();
    uint64_t v112 = HIDWORD(v111) & 1;
  }
  uint64_t v217 = v112;
  long long v153 = (char *)sub_24DCC97B8();
  uint64_t v154 = sub_24DCC85D8();
  uint64_t v155 = *(void *)(v154 + 16);
  uint64_t v205 = v22;
  if (v155)
  {
    uint64_t v156 = v62;
    unint64_t v157 = v111;
    uint64_t v158 = v153;
    id v159 = v153;
    uint64_t v160 = sub_24D4060A4(v159);
    if (v161)
    {
      sub_24D3F7E8C(*(void *)(v154 + 56) + 32 * v160, (uint64_t)&aBlock);
    }
    else
    {
      long long aBlock = 0u;
      long long v236 = 0u;
    }

    long long v153 = v158;
    unint64_t v111 = v157;
    uint64_t v62 = v156;
    id v22 = v205;
  }
  else
  {
    long long aBlock = 0u;
    long long v236 = 0u;
  }
  swift_bridgeObjectRelease();
  uint64_t v222 = v153;
  if (!*((void *)&v236 + 1))
  {
    sub_24D415F74((uint64_t)&aBlock, qword_26B197F50);
LABEL_50:
    id v181 = (id)fpfs_current_or_default_log();
    uint64_t v182 = v212;
    sub_24DCC9088();
    swift_retain_n();
    uint64_t v183 = sub_24DCC9068();
    os_log_type_t v184 = sub_24DCCA128();
    if (os_log_type_enabled(v183, v184))
    {
      uint64_t v185 = (uint8_t *)swift_slowAlloc();
      uint64_t v186 = (void *)swift_slowAlloc();
      uint64_t v229 = v186;
      *(_DWORD *)uint64_t v185 = 136315138;
      *(void *)&long long aBlock = v186;
      uint64_t v224 = (char *)(v185 + 4);
      uint64_t v187 = (void *)sub_24DCC8948();
      uint64_t v188 = v22;
      id v189 = objc_msgSend(v187, sel_fp_shortDescription);

      uint64_t v190 = sub_24DCC97E8();
      uint64_t v191 = v62;
      unint64_t v193 = v192;

      id v22 = v188;
      *(void *)&long long v239 = sub_24D418FB4(v190, v193, (uint64_t *)&aBlock);
      uint64_t v61 = v225;
      sub_24DCCA428();
      swift_release_n();
      uint64_t v62 = v191;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24D3D0000, v183, v184, "Failed to get the gen count for %s", v185, 0xCu);
      uint64_t v194 = v229;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v194, -1, -1);
      MEMORY[0x25332B030](v185, -1, -1);

      (*(void (**)(char *, uint64_t))(v228 + 8))(v212, v227);
    }
    else
    {

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v228 + 8))(v182, v227);
    }
    uint64_t v127 = v231;
    uint64_t v128 = v226;
    uint64_t v195 = v221;
    uint64_t v196 = v220;
    LODWORD(aBlock) = 2;
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D58FCC8((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
    sub_24DCC8808();
    sub_24DCC83E8();
    (*(void (**)(char *, uint64_t))(v219 + 8))(v196, v195);
    swift_willThrow();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
LABEL_54:
    (*(void (**)(char *, uint64_t))(v61 + 8))(v22, v62);
    return (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(v232, v127);
  }
  sub_24D3F7E7C(&aBlock, &v239);
  sub_24D3F7E8C((uint64_t)&v239, (uint64_t)&aBlock);
  if ((swift_dynamicCast() & 1) == 0)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v239);
    goto LABEL_50;
  }
  unint64_t v220 = (char *)v111;
  id v163 = v233;
  LODWORD(v221) = objc_msgSend(v233, sel_unsignedIntValue);

  id v164 = (id)fpfs_current_or_default_log();
  uint64_t v165 = v207;
  sub_24DCC9088();
  unint64_t v166 = (unint64_t)v224;
  swift_bridgeObjectRetain_n();
  uint64_t v167 = sub_24DCC9068();
  os_log_type_t v168 = sub_24DCCA118();
  if (os_log_type_enabled(v167, v168))
  {
    uint64_t v169 = swift_slowAlloc();
    uint64_t v219 = swift_slowAlloc();
    *(void *)&long long aBlock = v219;
    *(_DWORD *)uint64_t v169 = 134218754;
    uint64_t v170 = v216;
    id v233 = v216;
    sub_24DCCA428();
    *(_WORD *)(v169 + 12) = 1024;
    int v171 = (int)v220;
    if (v217) {
      int v171 = 0;
    }
    LODWORD(v233) = v171;
    sub_24DCCA428();
    *(_WORD *)(v169 + 18) = 1024;
    LODWORD(v233) = v221;
    sub_24DCCA428();
    *(_WORD *)(v169 + 24) = 2082;
    swift_bridgeObjectRetain();
    char v172 = v170;
    id v233 = (id)sub_24D418FB4(v218, v166, (uint64_t *)&aBlock);
    uint64_t v62 = v223;
    sub_24DCCA428();
    char v173 = v229;
    sub_24D58F9DC((uint64_t)v229);
    sub_24D58F9DC((uint64_t)v173);
    sub_24D58F9DC((uint64_t)v173);
    os_log_type_t v174 = v168;
    uint64_t v175 = v173;
    char v176 = v217;
    _os_log_impl(&dword_24D3D0000, v167, v174, "Updating %ld %u %u into database for %{public}s", (uint8_t *)v169, 0x22u);
    uint64_t v177 = v219;
    swift_arrayDestroy();
    MEMORY[0x25332B030](v177, -1, -1);
    uint64_t v178 = v169;
    int v179 = (int)v220;
    MEMORY[0x25332B030](v178, -1, -1);

    (*(void (**)(char *, uint64_t))(v228 + 8))(v207, v227);
    uint64_t v180 = v231;
  }
  else
  {
    uint64_t v175 = v229;
    sub_24D58F9DC((uint64_t)v229);
    sub_24D58F9DC((uint64_t)v175);

    (*(void (**)(char *, uint64_t))(v228 + 8))(v165, v227);
    uint64_t v180 = v231;
    char v172 = v216;
    int v179 = (int)v220;
    char v176 = v217;
  }
  uint64_t v197 = swift_allocObject();
  *(void *)(v197 + 16) = v39;
  *(void *)(v197 + 24) = v172;
  *(_DWORD *)(v197 + 32) = v179;
  *(unsigned char *)(v197 + 36) = v176;
  *(_DWORD *)(v197 + 40) = v221;
  long long v198 = *((_OWORD *)v175 + 1);
  *(_OWORD *)(v197 + 48) = *(_OWORD *)v175;
  *(_OWORD *)(v197 + 64) = v198;
  *(void *)(v197 + 80) = v175[4];
  uint64_t v199 = swift_allocObject();
  *(void *)(v199 + 16) = sub_24D58FA48;
  *(void *)(v199 + 24) = v197;
  uint64_t v237 = sub_24D3E3980;
  uint64_t v238 = v199;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v236 = sub_24D3E38DC;
  *((void *)&v236 + 1) = &block_descriptor_71;
  int v200 = _Block_copy(&aBlock);
  sub_24D43E368((uint64_t)v175);
  swift_retain();
  swift_retain();
  swift_release();
  *(void *)&long long aBlock = 0;
  unsigned int v201 = objc_msgSend(v206, sel_executeSwift_error_, v200, &aBlock);
  _Block_release(v200);
  id v202 = (id)aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (!v201)
  {
    sub_24DCC8828();

    swift_willThrow();
  }

  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v239);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v240);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v205, v62);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v232, v180);
  return swift_release();
}

uint64_t sub_24D58C93C(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v9 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24D5F1848(a4 | ((HIDWORD(a4) & 1) << 32));
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v10 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, a5);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = (void *)sub_24DCC97B8();
  id v12 = objc_msgSend(a1, sel_bindStringParameter_, v11);

  sub_24DCC97E8();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_24D58CB84(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = sub_24D58F254;
  v7[3] = a2;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_54;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  uint64_t v24 = a1;
  id v9 = objc_msgSend(a1, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  id v10 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v9)
  {
    id v22 = a3;
    if (objc_msgSend(v9, sel_next))
    {
      id v12 = &selRef_createIndexerWithExtension_enabled_error_;
      id v23 = v9;
      while (1)
      {
        id v13 = v9;
        id v14 = objc_msgSend(v13, sel_stringAtIndex_, 0);
        uint64_t v15 = sub_24DCC97E8();
        uint64_t v17 = v16;

        id v18 = objc_msgSend(v13, v12[202], 1);
        unsigned __int8 v19 = objc_msgSend(v13, sel_isNullAtIndex_, 2);
        id v20 = (v19 & 1) != 0 ? 0 : objc_msgSend(v13, v12[202], 2);
        unsigned int v21 = objc_msgSend(v13, sel_unsignedIntAtIndex_, 3);

        v26[0] = v15;
        v26[1] = v17;
        v26[2] = (uint64_t)v18;
        v26[3] = (uint64_t)v20;
        unsigned __int8 v27 = v19;
        unsigned int v28 = v21;
        sub_24D58AAE8(v24, v26);
        if (v3) {
          break;
        }
        swift_bridgeObjectRelease();
        id v9 = v23;
        id v12 = &selRef_createIndexerWithExtension_enabled_error_;
        if ((objc_msgSend(v13, sel_next) & 1) == 0) {
          goto LABEL_10;
        }
      }
      swift_release();

      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_10:
      swift_release();

      *id v22 = 1;
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_24D58CE88()
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "SELECT *\nFROM ");
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return v1[0];
}

uint64_t sub_24D58CF40@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v40 = a3;
  uint64_t v52 = *MEMORY[0x263EF8340];
  uint64_t v5 = sub_24DCC9078();
  uint64_t v41 = *(void *)(v5 - 8);
  uint64_t v42 = v5;
  uint64_t v6 = MEMORY[0x270FA5388](v5);
  uint64_t v39 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v9 = (char *)&v39 - v8;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = sub_24D58F224;
  *(void *)(v10 + 24) = a2;
  os_log_type_t v50 = sub_24D3E3980;
  uint64_t v51 = v10;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_24D3E38DC;
  uint64_t v49 = &block_descriptor_40;
  uint64_t v11 = _Block_copy(&aBlock);
  uint64_t v43 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v12 = objc_msgSend(a1, sel_executeSwift_error_, v11, &aBlock);
  _Block_release(v11);
  id v13 = aBlock;
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (a2)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (!v12)
  {
    id v20 = (void *)sub_24DCC8828();

    swift_willThrow();
    id v21 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    id v22 = v20;
    id v23 = sub_24DCC9068();
    os_log_type_t v24 = sub_24DCCA128();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 138412290;
      swift_getErrorValue();
      id v27 = sub_24DBA2828(v45);
      id aBlock = v27;
      sub_24DCCA428();
      *uint64_t v26 = v27;

      _os_log_impl(&dword_24D3D0000, v23, v24, "Failed to create file_id_gen_count_index: %@", v25, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v26, -1, -1);
      MEMORY[0x25332B030](v25, -1, -1);
    }
    else
    {
    }
    uint64_t v29 = v41;
    uint64_t v28 = v42;

    uint64_t v30 = 0;
    goto LABEL_14;
  }
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = v43;
  *(void *)(v14 + 16) = sub_24D58F23C;
  *(void *)(v14 + 24) = v15;
  os_log_type_t v50 = sub_24D3E3980;
  uint64_t v51 = v14;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v47 = 1107296256;
  uint64_t v48 = sub_24D3E38DC;
  uint64_t v49 = &block_descriptor_47;
  uint64_t v16 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned __int8 v17 = objc_msgSend(a1, sel_executeSwift_error_, v16, &aBlock);
  _Block_release(v16);
  id v18 = aBlock;
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v16) {
LABEL_16:
  }
    __break(1u);
  if (v17)
  {
    uint64_t result = swift_release_n();
    *uint64_t v40 = 1;
    return result;
  }
  id v9 = v39;
  uint64_t v31 = (void *)sub_24DCC8828();

  swift_willThrow();
  id v32 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  id v33 = v31;
  id v34 = sub_24DCC9068();
  os_log_type_t v35 = sub_24DCCA128();
  if (os_log_type_enabled(v34, v35))
  {
    id v36 = (uint8_t *)swift_slowAlloc();
    id v37 = (void *)swift_slowAlloc();
    *(_DWORD *)id v36 = 138412290;
    swift_getErrorValue();
    id v38 = sub_24DBA2828(v44);
    id aBlock = v38;
    sub_24DCCA428();
    *id v37 = v38;

    _os_log_impl(&dword_24D3D0000, v34, v35, "Failed to create doc_id_index: %@", v36, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v37, -1, -1);
    MEMORY[0x25332B030](v36, -1, -1);
  }
  else
  {
  }
  uint64_t v29 = v41;
  uint64_t v28 = v42;

  uint64_t v30 = sub_24D58F23C;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v28);
  swift_willThrow();
  swift_release();
  return sub_24D43DD74((uint64_t)v30);
}

uint64_t sub_24D58D5A8()
{
  return 0;
}

uint64_t sub_24D58D664()
{
  return 0;
}

unint64_t sub_24D58D714@<X0>(uint64_t a1@<X1>, int a2@<W2>, uint64_t a3@<X8>)
{
  v6[2] = a1;
  int v7 = a2;
  unint64_t result = sub_24D58DADC((uint64_t)sub_24D58D880, (uint64_t)v6);
  if (!v3)
  {
    *(_DWORD *)a3 = result;
    *(unsigned char *)(a3 + 4) = BYTE4(result) & 1;
  }
  return result;
}

unint64_t sub_24D58D774(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v5 = objc_msgSend(a1, sel_bindUnsignedIntegerParameter_, a3);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0xD000000000000017;
}

unint64_t sub_24D58D880(void *a1)
{
  return sub_24D58D774(a1, *(void *)(v1 + 16), *(unsigned int *)(v1 + 24));
}

void *sub_24D58D88C(uint64_t a1, uint64_t a2)
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_33;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  id v8 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0)) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      }
      if (swift_dynamicCastMetatype()) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      }
      id v5 = objc_msgSend(v7, sel_longAtIndex_, 0);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  return v5;
}

unint64_t sub_24D58DADC(uint64_t a1, uint64_t a2)
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_24D3E3974;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_4;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  id v8 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0)) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      }
      if (swift_dynamicCastMetatype()) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      }
      unsigned int v13 = objc_msgSend(v7, sel_unsignedIntAtIndex_, 0);

      unsigned __int8 v11 = 0;
      uint64_t v10 = v13;
    }
    else
    {

      uint64_t v10 = 0;
      unsigned __int8 v11 = 1;
    }
    LOBYTE(aBlock[0]) = v11;
    return v10 | ((unint64_t)v11 << 32);
  }
  else
  {
    sub_24DCC8828();

    return swift_willThrow();
  }
}

uint64_t sub_24D58DD38()
{
  return swift_deallocObject();
}

void *sub_24D58DD48(uint64_t a1, uint64_t a2)
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_16;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  id v8 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0)) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      }
      if (swift_dynamicCastMetatype()) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      }
      id v5 = objc_msgSend(v7, sel_unsignedLongLongAtIndex_, 0);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  return v5;
}

void *sub_24D58DF98(uint64_t a1, uint64_t a2)
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  id v5 = (void *)swift_allocObject();
  v5[2] = a1;
  v5[3] = a2;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_131;
  uint64_t v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v7 = objc_msgSend(v2, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  id v8 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v7)
  {
    if ((objc_msgSend(v7, sel_next) & 1) != 0
      && (objc_msgSend(v7, sel_isNullAtIndex_, 0) & 1) == 0)
    {
      if (objc_msgSend(v7, sel_isNullAtIndex_, 0)) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
      }
      if (swift_dynamicCastMetatype()) {
        sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
      }
      id v5 = objc_msgSend(v7, sel_longLongAtIndex_, 0);
    }
    else
    {
      id v5 = 0;
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  return v5;
}

void *sub_24D58E1E8@<X0>(uint64_t a1@<X1>, void *a2@<X2>, void *a3@<X8>)
{
  v9[3] = a2;
  v9[2] = a1;
  unint64_t result = sub_24D58DD48((uint64_t)sub_24D58EC70, (uint64_t)v9);
  if (!v3)
  {
    if (v7) {
      id v8 = a2;
    }
    else {
      id v8 = result;
    }
    *a3 = v8;
  }
  return result;
}

unint64_t sub_24D58E250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0xD000000000000018;
}

void sub_24D58E338(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, void *a5@<X8>)
{
  uint64_t v29 = a5;
  int v27 = a4;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v28 = sub_24DCC9078();
  uint64_t v8 = *(void *)(v28 - 8);
  MEMORY[0x270FA5388](v28);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  unsigned int v12 = (void *)swift_allocObject();
  v12[2] = sub_24D58EC88;
  v12[3] = v11;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_26;
  unsigned int v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  id v15 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v14)
  {
    if (!objc_msgSend(v14, sel_next)
      || (objc_msgSend(v14, sel_isNullAtIndex_, 0) & 1) != 0
      || (objc_msgSend(v14, sel_isNullAtIndex_, 1) & 1) != 0
      || (objc_msgSend(v14, sel_isNullAtIndex_, 2) & 1) != 0)
    {
      id v17 = (id)fpfs_current_or_default_log();
      sub_24DCC9088();
      id v18 = sub_24DCC9068();
      os_log_type_t v19 = sub_24DCCA128();
      if (os_log_type_enabled(v18, v19))
      {
        id v20 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)id v20 = 134217984;
        aBlock[0] = a3;
        sub_24DCCA428();
        _os_log_impl(&dword_24D3D0000, v18, v19, "Failed to find new fileID for %llu", v20, 0xCu);
        MEMORY[0x25332B030](v20, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v28);
      swift_release();
      id v21 = v29;
      *uint64_t v29 = a3;
      *((_DWORD *)v21 + 2) = 0;
      *((unsigned char *)v21 + 12) = 0;
    }
    else
    {
      id v22 = objc_msgSend(v14, sel_unsignedLongLongAtIndex_, 0);
      unsigned int v23 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
      unsigned int v24 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 2);
      swift_release();

      uint64_t v25 = v29;
      *uint64_t v29 = v22;
      if (v24 == v27) {
        *((_DWORD *)v25 + 2) = v23;
      }
      else {
        *((_DWORD *)v25 + 2) = 0;
      }
      *((unsigned char *)v25 + 12) = 1;
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
}

void sub_24D58E744(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  unsigned int v24 = a4;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v7 = sub_24DCC8288();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = sub_24DCC82A8();
  uint64_t v23 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  unsigned int v12 = (void *)swift_allocObject();
  v12[2] = sub_24D58FD48;
  v12[3] = v11;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_124;
  unsigned int v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  id v15 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v14)
  {
    if (objc_msgSend(v14, sel_next))
    {
      if (!objc_msgSend(v14, sel_isNullAtIndex_, 0))
      {
        if (swift_dynamicCastMetatype()) {
          goto LABEL_14;
        }
        id v17 = objc_msgSend(v14, sel_stringAtIndex_, 0);
        uint64_t v18 = sub_24DCC97E8();
        uint64_t v20 = v19;

        if (!objc_msgSend(v14, sel_isNullAtIndex_, 1))
        {
          if (!swift_dynamicCastMetatype())
          {
            unsigned int v21 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
            swift_release();

            id v22 = v24;
            *unsigned int v24 = v18;
            v22[1] = v20;
            *((_DWORD *)v22 + 4) = v21;
            return;
          }
LABEL_14:
          sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
        }
      }
      sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
    }
    sub_24DCC8148();
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D58FCC8((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
    sub_24DCC8808();
    sub_24DCC8128();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_24D58EB90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

unint64_t sub_24D58EC70(uint64_t a1)
{
  return sub_24D58E250(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D58EC78()
{
  return swift_deallocObject();
}

uint64_t sub_24D58EC88(uint64_t a1)
{
  return sub_24D58EB90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D58ECC0()
{
  return swift_deallocObject();
}

void sub_24D58ECD0(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  unsigned int v24 = a4;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v7 = sub_24DCC8288();
  MEMORY[0x270FA5388](v7 - 8);
  uint64_t v8 = sub_24DCC82A8();
  uint64_t v23 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 24) = a3;
  unsigned int v12 = (void *)swift_allocObject();
  v12[2] = sub_24D58FCAC;
  v12[3] = v11;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_114;
  unsigned int v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v14 = objc_msgSend(a1, sel_fetchSwift_error_, v13, aBlock);
  _Block_release(v13);
  id v15 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v14)
  {
    if (objc_msgSend(v14, sel_next))
    {
      if (!objc_msgSend(v14, sel_isNullAtIndex_, 0))
      {
        if (swift_dynamicCastMetatype()) {
          goto LABEL_14;
        }
        id v17 = objc_msgSend(v14, sel_stringAtIndex_, 0);
        uint64_t v18 = sub_24DCC97E8();
        uint64_t v20 = v19;

        if (!objc_msgSend(v14, sel_isNullAtIndex_, 1))
        {
          if (!swift_dynamicCastMetatype())
          {
            unsigned int v21 = objc_msgSend(v14, sel_unsignedIntAtIndex_, 1);
            swift_release();

            id v22 = v24;
            *unsigned int v24 = v18;
            v22[1] = v20;
            *((_DWORD *)v22 + 4) = v21;
            return;
          }
LABEL_14:
          sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 261);
        }
      }
      sub_24DA8313C((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/Prequelite+FSSyncAdditions.swift", 145, 2, 260);
    }
    sub_24DCC8148();
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D58FCC8((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
    sub_24DCC8808();
    sub_24DCC8128();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
    swift_willThrow();
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
}

uint64_t sub_24D58F120(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return 0;
}

uint64_t sub_24D58F214()
{
  return swift_deallocObject();
}

uint64_t sub_24D58F224()
{
  return sub_24D58D5A8();
}

uint64_t sub_24D58F22C()
{
  return swift_deallocObject();
}

uint64_t sub_24D58F23C()
{
  return sub_24D58D664();
}

uint64_t sub_24D58F244()
{
  return swift_deallocObject();
}

uint64_t sub_24D58F254()
{
  return sub_24D58CE88();
}

uint64_t sub_24D58F25C()
{
  return swift_deallocObject();
}

uint64_t sub_24D58F26C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for URLResourceKey(0);
  sub_24D58FCC8((unint64_t *)&unk_26B194000, type metadata accessor for URLResourceKey);
  uint64_t result = sub_24DCC9E98();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      id v5 = *v4++;
      sub_24D813B24(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_24D58F328()
{
  return sub_24D588C84();
}

uint64_t sub_24D58F330()
{
  return swift_deallocObject();
}

uint64_t sub_24D58F340(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_24DCC9E98();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_24D813B6C(&v6, v5);
      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_24D58F3B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = sub_24DCC9E98();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (uint64_t *)(a1 + 40);
    do
    {
      uint64_t v5 = *(v4 - 1);
      uint64_t v6 = *v4;
      swift_bridgeObjectRetain();
      sub_24D813974(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_24D58F44C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26986BDF0);
  sub_24D3E4A9C(&qword_26986BDF8, &qword_26986BDF0);
  uint64_t result = sub_24DCC9E98();
  uint64_t v9 = result;
  if (v2)
  {
    uint64_t v4 = (char *)(a1 + 48);
    do
    {
      uint64_t v5 = (void *)*((void *)v4 - 2);
      uint64_t v6 = *((void *)v4 - 1);
      char v7 = *v4;
      v4 += 24;
      sub_24D813E2C((uint64_t)v8, v5, v6, v7);

      --v2;
    }
    while (v2);
    return v9;
  }
  return result;
}

uint64_t sub_24D58F514(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  type metadata accessor for NSFileProviderItemIdentifier(0);
  sub_24D58FCC8((unint64_t *)&unk_26B199E40, type metadata accessor for NSFileProviderItemIdentifier);
  uint64_t result = sub_24DCC9E98();
  uint64_t v7 = result;
  if (v2)
  {
    uint64_t v4 = (void **)(a1 + 32);
    do
    {
      uint64_t v5 = *v4++;
      sub_24D813BA8(&v6, v5);

      --v2;
    }
    while (v2);
    return v7;
  }
  return result;
}

uint64_t sub_24D58F5D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  sub_24D58F648();
  uint64_t result = sub_24DCC9E98();
  uint64_t v8 = result;
  if (v2)
  {
    uint64_t v4 = (char *)(a1 + 40);
    do
    {
      uint64_t v5 = *((void *)v4 - 1);
      char v6 = *v4;
      v4 += 16;
      sub_24D813790((uint64_t)v7, v5, v6);
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

unint64_t sub_24D58F648()
{
  unint64_t result = qword_26B199D10;
  if (!qword_26B199D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B199D10);
  }
  return result;
}

uint64_t sub_24D58F69C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B199600);
  sub_24D3E4A9C(&qword_26986BDE0, &qword_26B199600);
  uint64_t result = sub_24DCC9E98();
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 + 41);
    do
    {
      uint64_t v5 = *(void **)(v4 - 9);
      uint64_t v6 = *(v4 - 1);
      int v7 = *v4;
      v4 += 16;
      sub_24D4018B8(v5, v6, v7);
      sub_24D814214((uint64_t)&v8, v5, v6 | (v7 << 8));
      sub_24D40160C(v8, v9, v10);
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

uint64_t sub_24D58F778(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26986BDE8);
  sub_24D3E4A9C((unint64_t *)&unk_26986EF40, &qword_26986BDE8);
  uint64_t result = sub_24DCC9E98();
  uint64_t v11 = result;
  if (v2)
  {
    uint64_t v4 = (char *)(a1 + 56);
    do
    {
      uint64_t v5 = (void *)*((void *)v4 - 3);
      uint64_t v6 = (void *)*((void *)v4 - 2);
      int v7 = (void *)*((void *)v4 - 1);
      char v8 = *v4;
      v4 += 32;
      sub_24D433278(v5, v6, v7, v8);
      sub_24D814678((uint64_t)v9, v5, v6, v7, v8);
      sub_24D58F884(v9[0], v9[1], v9[2], v10);
      --v2;
    }
    while (v2);
    return v11;
  }
  return result;
}

void sub_24D58F884(void *a1, void *a2, void *a3, char a4)
{
  switch(a4)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
      goto LABEL_4;
    case 1:

      a1 = a2;
      a2 = a3;
      goto LABEL_3;
    case 2:
LABEL_3:

      a1 = a2;
LABEL_4:

      break;
    default:
      return;
  }
}

uint64_t sub_24D58F91C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B1926A0);
  sub_24D3E4A9C((unint64_t *)&unk_26B192690, (uint64_t *)&unk_26B1926A0);
  uint64_t result = sub_24DCC9E98();
  uint64_t v6 = result;
  if (v2)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_24D3F0BA0(v4, (uint64_t)v7, (uint64_t *)&unk_26B1926A0);
      sub_24D814990((uint64_t)v5, (uint64_t)v7);
      v4 += 48;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_24D58F9DC(uint64_t a1)
{
  return a1;
}

uint64_t sub_24D58FA08()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D58FA48(void *a1)
{
  return sub_24D58C93C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned int *)(v1 + 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 36) << 32), *(unsigned int *)(v1 + 40));
}

uint64_t sub_24D58FA74()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FA84()
{
  return sub_24D58A278(v0);
}

uint64_t sub_24D58FA8C()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FA9C()
{
  return sub_24D7D0410(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_24D58FAA4()
{
  return sub_24D58AA2C();
}

uint64_t sub_24D58FAAC()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FABC@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  return sub_24D5899E8(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_24D58FAD8()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D58FB18(void *a1)
{
  return sub_24D589EDC(a1, *(void *)(v1 + 16), v1 + 24);
}

uint64_t sub_24D58FB24()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FB34()
{
  uint64_t v1 = sub_24DCC8A58();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  return swift_deallocObject();
}

id sub_24D58FC00()
{
  uint64_t v1 = *(void *)(sub_24DCC8A58() - 8);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_24D589058(v2, v3);
}

uint64_t sub_24D58FC64()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FC74()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D58FCAC(uint64_t a1)
{
  return sub_24D58F120(a1, *(void *)(v1 + 16), *(_DWORD *)(v1 + 24));
}

uint64_t sub_24D58FCB8()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FCC8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24D58FD10()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D58FD48(uint64_t a1)
{
  return sub_24D58EB90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D58FD80()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FD90(uint64_t a1)
{
  uint64_t v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18FF40);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v2);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  char v8 = (char *)&v13 - v7;
  uint64_t v9 = *(void *)(a1 + 16);
  sub_24D3E4A9C((unint64_t *)&unk_26986BE00, &qword_26B18FF40);
  uint64_t result = sub_24DCC9E98();
  uint64_t v14 = result;
  if (v9)
  {
    uint64_t v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v12 = *(void *)(v3 + 72);
    do
    {
      sub_24D58FF04(v11, (uint64_t)v6);
      sub_24D814CEC((uint64_t)v8, (uint64_t)v6);
      sub_24D415F74((uint64_t)v8, &qword_26B18FF40);
      v11 += v12;
      --v9;
    }
    while (v9);
    return v14;
  }
  return result;
}

uint64_t sub_24D58FF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18FF40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24D58FF6C()
{
  return swift_deallocObject();
}

uint64_t sub_24D58FFF4()
{
  return swift_initClassMetadata2();
}

void *sub_24D59006C(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return (void *)MEMORY[0x263F8EE78];
  }
  uint64_t v6 = a3 + 32;
  uint64_t v14 = a3;
  swift_bridgeObjectRetain();
  uint64_t v7 = (void *)MEMORY[0x263F8EE78];
  do
  {
    a1(&v12, v6);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7;
    }
    if ((v13 & 1) == 0)
    {
      uint64_t v8 = v12;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v7 = sub_24DA13DC4(0, v7[2] + 1, 1, v7);
      }
      unint64_t v10 = v7[2];
      unint64_t v9 = v7[3];
      if (v10 >= v9 >> 1) {
        uint64_t v7 = sub_24DA13DC4((void *)(v9 > 1), v10 + 1, 1, v7);
      }
      v7[2] = v10 + 1;
      v7[v10 + 4] = v8;
    }
    v6 += 40;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_24D5901AC(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = sub_24DCCA9C8())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a3 & 0xC000000000000001) != 0 ? (id)MEMORY[0x253328820](i - 4, a3) : *(id *)(a3 + 8 * i);
      uint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return swift_bridgeObjectRelease();
      }

      if (v12)
      {
        MEMORY[0x253327CA0]();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          sub_24DCC9C78();
        }
        sub_24DCC9CD8();
        sub_24DCC9C48();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x263F8EE78];
}

uint64_t sub_24D590350()
{
  return 0;
}

void sub_24D5903E4()
{
  qword_26B1A22C0 = (uint64_t)&unk_26FFA31D8;
}

void sub_24D5903F8()
{
  uint64_t v0 = MEMORY[0x263F8EE78];
  uint64_t v11 = MEMORY[0x263F8EE78];
  uint64_t v1 = qword_26FFA11D8;
  if (qword_26FFA11D8)
  {
    unint64_t v2 = 0;
    while (2)
    {
      if (v2 >= qword_26FFA11D8)
      {
        __break(1u);
        JUMPOUT(0x24D59143CLL);
      }
      uint64_t v5 = *((unsigned __int8 *)&unk_26FFA11C8 + v2++ + 32);
      uint64_t v6 = 1;
      switch(v5)
      {
        case 1:
          uint64_t v6 = 3;
          goto LABEL_76;
        case 2:
          uint64_t v6 = 4;
          goto LABEL_76;
        case 3:
          uint64_t v6 = 5;
          goto LABEL_76;
        case 4:
          uint64_t v6 = 6;
          goto LABEL_76;
        case 5:
          uint64_t v6 = 7;
          goto LABEL_76;
        case 6:
          uint64_t v6 = 8;
          goto LABEL_76;
        case 7:
          uint64_t v6 = 9;
          goto LABEL_76;
        case 8:
          uint64_t v6 = 10;
          goto LABEL_76;
        case 9:
          uint64_t v6 = 11;
          goto LABEL_76;
        case 10:
          uint64_t v6 = 12;
          goto LABEL_76;
        case 11:
          uint64_t v6 = 13;
          goto LABEL_76;
        case 12:
          uint64_t v6 = 15;
          goto LABEL_76;
        case 13:
          uint64_t v6 = 16;
          goto LABEL_76;
        case 14:
          uint64_t v6 = 17;
          goto LABEL_76;
        case 15:
          uint64_t v6 = 18;
          goto LABEL_76;
        case 16:
          uint64_t v6 = 19;
          goto LABEL_76;
        case 17:
          uint64_t v6 = 20;
          goto LABEL_76;
        case 18:
          uint64_t v6 = 21;
          goto LABEL_76;
        case 19:
          uint64_t v6 = 22;
          goto LABEL_76;
        case 20:
          uint64_t v6 = 23;
          goto LABEL_76;
        case 21:
          uint64_t v6 = 24;
          goto LABEL_76;
        case 22:
          uint64_t v6 = 25;
          goto LABEL_76;
        case 23:
        case 37:
          goto LABEL_6;
        case 24:
          uint64_t v6 = 27;
          goto LABEL_76;
        case 25:
          uint64_t v6 = 28;
          goto LABEL_76;
        case 26:
          uint64_t v6 = 29;
          goto LABEL_76;
        case 27:
          uint64_t v6 = 30;
          goto LABEL_76;
        case 28:
          uint64_t v6 = 31;
          goto LABEL_76;
        case 29:
          uint64_t v6 = 32;
          goto LABEL_76;
        case 30:
          uint64_t v6 = 33;
          goto LABEL_76;
        case 31:
          uint64_t v6 = 34;
          goto LABEL_76;
        case 32:
          uint64_t v6 = 35;
          goto LABEL_76;
        case 33:
          uint64_t v6 = 36;
          goto LABEL_76;
        case 34:
          uint64_t v6 = 37;
          goto LABEL_76;
        case 35:
          uint64_t v6 = 38;
          goto LABEL_76;
        case 36:
          uint64_t v6 = 39;
          goto LABEL_76;
        case 38:
          uint64_t v6 = 41;
          goto LABEL_76;
        case 39:
          uint64_t v6 = 42;
          goto LABEL_76;
        case 40:
          uint64_t v6 = 43;
          goto LABEL_76;
        case 41:
          uint64_t v6 = 44;
          goto LABEL_76;
        case 42:
          uint64_t v6 = 45;
          goto LABEL_76;
        case 43:
          uint64_t v6 = 46;
          goto LABEL_76;
        case 44:
          uint64_t v6 = 47;
          goto LABEL_76;
        case 45:
          uint64_t v6 = 48;
          goto LABEL_76;
        case 46:
          uint64_t v6 = 49;
          goto LABEL_76;
        case 47:
          uint64_t v6 = 50;
          goto LABEL_76;
        case 48:
          uint64_t v6 = 1000;
          goto LABEL_76;
        case 49:
          uint64_t v6 = 1001;
          goto LABEL_76;
        case 50:
          uint64_t v6 = 1002;
          goto LABEL_76;
        case 51:
          uint64_t v6 = 1003;
          goto LABEL_76;
        case 52:
          uint64_t v6 = 1004;
          goto LABEL_76;
        case 53:
          uint64_t v6 = 1005;
          goto LABEL_76;
        case 54:
          uint64_t v6 = 1006;
          goto LABEL_76;
        case 55:
          uint64_t v6 = 2000;
          goto LABEL_76;
        case 56:
          uint64_t v6 = 2001;
          goto LABEL_76;
        case 57:
          uint64_t v6 = 2002;
          goto LABEL_76;
        case 58:
          uint64_t v6 = 2003;
          goto LABEL_76;
        case 59:
          uint64_t v6 = 2004;
          goto LABEL_76;
        case 60:
          uint64_t v6 = 2005;
          goto LABEL_76;
        case 61:
          uint64_t v6 = 2006;
          goto LABEL_76;
        case 62:
          uint64_t v6 = 3500;
          goto LABEL_76;
        case 63:
          uint64_t v6 = 3600;
          goto LABEL_76;
        case 64:
          uint64_t v6 = 3601;
          goto LABEL_76;
        case 65:
          uint64_t v6 = 3604;
          goto LABEL_76;
        case 66:
          uint64_t v6 = 3605;
          goto LABEL_76;
        case 67:
          uint64_t v6 = 3606;
          goto LABEL_76;
        case 68:
          uint64_t v6 = 3607;
          goto LABEL_76;
        case 69:
          uint64_t v6 = 3608;
          goto LABEL_76;
        default:
LABEL_76:
          uint64_t v7 = 1;
          switch(byte_26FFA3222)
          {
            case 1:
              if (v6 != 3) {
                goto LABEL_209;
              }
              break;
            case 2:
              if (v6 != 4) {
                goto LABEL_209;
              }
              break;
            case 3:
              if (v6 != 5) {
                goto LABEL_209;
              }
              break;
            case 4:
              if (v6 != 6) {
                goto LABEL_209;
              }
              break;
            case 5:
              if (v6 != 7) {
                goto LABEL_209;
              }
              break;
            case 6:
              if (v6 != 8) {
                goto LABEL_209;
              }
              break;
            case 7:
              if (v6 != 9) {
                goto LABEL_209;
              }
              break;
            case 8:
              if (v6 != 10) {
                goto LABEL_209;
              }
              break;
            case 9:
              if (v6 != 11) {
                goto LABEL_209;
              }
              break;
            case 10:
              if (v6 != 12) {
                goto LABEL_209;
              }
              break;
            case 11:
              if (v6 != 13) {
                goto LABEL_209;
              }
              break;
            case 12:
              if (v6 != 15) {
                goto LABEL_209;
              }
              break;
            case 13:
              if (v6 != 16) {
                goto LABEL_209;
              }
              break;
            case 14:
              if (v6 != 17) {
                goto LABEL_209;
              }
              break;
            case 15:
              if (v6 != 18) {
                goto LABEL_209;
              }
              break;
            case 16:
              if (v6 != 19) {
                goto LABEL_209;
              }
              break;
            case 17:
              if (v6 != 20) {
                goto LABEL_209;
              }
              break;
            case 18:
              if (v6 != 21) {
                goto LABEL_209;
              }
              break;
            case 19:
              if (v6 != 22) {
                goto LABEL_209;
              }
              break;
            case 20:
              if (v6 != 23) {
                goto LABEL_209;
              }
              break;
            case 21:
              if (v6 != 24) {
                goto LABEL_209;
              }
              break;
            case 22:
              if (v6 != 25) {
                goto LABEL_209;
              }
              break;
            case 23:
            case 37:
              goto LABEL_209;
            case 24:
              if (v6 == 27) {
                break;
              }
              goto LABEL_209;
            case 25:
              if (v6 == 28) {
                break;
              }
              goto LABEL_209;
            case 26:
              if (v6 == 29) {
                break;
              }
              goto LABEL_209;
            case 27:
              if (v6 == 30) {
                break;
              }
              goto LABEL_209;
            case 28:
              if (v6 == 31) {
                break;
              }
              goto LABEL_209;
            case 29:
              if (v6 == 32) {
                break;
              }
              goto LABEL_209;
            case 30:
              if (v6 == 33) {
                break;
              }
              goto LABEL_209;
            case 31:
              if (v6 == 34) {
                break;
              }
              goto LABEL_209;
            case 32:
              if (v6 == 35) {
                break;
              }
              goto LABEL_209;
            case 33:
              if (v6 == 36) {
                break;
              }
              goto LABEL_209;
            case 34:
              if (v6 == 37) {
                break;
              }
              goto LABEL_209;
            case 35:
              if (v6 == 38) {
                break;
              }
              goto LABEL_209;
            case 36:
              if (v6 == 39) {
                break;
              }
              goto LABEL_209;
            case 38:
              if (v6 == 41) {
                break;
              }
              goto LABEL_209;
            case 39:
              if (v6 == 42) {
                break;
              }
              goto LABEL_209;
            case 40:
              if (v6 == 43) {
                break;
              }
              goto LABEL_209;
            case 41:
              if (v6 == 44) {
                break;
              }
              goto LABEL_209;
            case 42:
              if (v6 == 45) {
                break;
              }
              goto LABEL_209;
            case 43:
              if (v6 == 46) {
                break;
              }
              goto LABEL_209;
            case 44:
              if (v6 == 47) {
                break;
              }
              goto LABEL_209;
            case 45:
              if (v6 == 48) {
                break;
              }
              goto LABEL_209;
            case 46:
              if (v6 == 49) {
                break;
              }
              goto LABEL_209;
            case 47:
              if (v6 == 50) {
                break;
              }
              goto LABEL_209;
            case 48:
              if (v6 == 1000) {
                break;
              }
              goto LABEL_209;
            case 49:
              if (v6 == 1001) {
                break;
              }
              goto LABEL_209;
            case 50:
              if (v6 == 1002) {
                break;
              }
              goto LABEL_209;
            case 51:
              if (v6 == 1003) {
                break;
              }
              goto LABEL_209;
            case 52:
              if (v6 == 1004) {
                break;
              }
              goto LABEL_209;
            case 53:
              if (v6 == 1005) {
                break;
              }
              goto LABEL_209;
            case 54:
              if (v6 == 1006) {
                break;
              }
              goto LABEL_209;
            case 55:
              if (v6 == 2000) {
                break;
              }
              goto LABEL_209;
            case 56:
              if (v6 == 2001) {
                break;
              }
              goto LABEL_209;
            case 57:
              if (v6 == 2002) {
                break;
              }
              goto LABEL_209;
            case 58:
              if (v6 == 2003) {
                break;
              }
              goto LABEL_209;
            case 59:
              if (v6 == 2004) {
                break;
              }
              goto LABEL_209;
            case 60:
              if (v6 == 2005) {
                break;
              }
              goto LABEL_209;
            case 61:
              if (v6 == 2006) {
                break;
              }
              goto LABEL_209;
            case 62:
              if (v6 == 3500) {
                break;
              }
              goto LABEL_209;
            case 63:
              if (v6 == 3600) {
                break;
              }
              goto LABEL_209;
            case 64:
              if (v6 == 3601) {
                break;
              }
              goto LABEL_209;
            case 65:
              if (v6 == 3604) {
                break;
              }
              goto LABEL_209;
            case 66:
              if (v6 == 3605) {
                break;
              }
              goto LABEL_209;
            case 67:
              if (v6 == 3606) {
                break;
              }
              goto LABEL_209;
            case 68:
              uint64_t v7 = 3607;
              goto LABEL_208;
            case 69:
              if (v6 == 3608) {
                break;
              }
              goto LABEL_209;
            default:
LABEL_208:
              if (v7 != v6)
              {
LABEL_209:
                uint64_t v8 = 1;
                switch(byte_26FFA3223)
                {
                  case 1:
                    if (v6 != 3) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 2:
                    if (v6 != 4) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 3:
                    if (v6 != 5) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 4:
                    if (v6 != 6) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 5:
                    if (v6 != 7) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 6:
                    if (v6 != 8) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 7:
                    if (v6 != 9) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 8:
                    if (v6 != 10) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 9:
                    if (v6 != 11) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 10:
                    if (v6 != 12) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 11:
                    if (v6 != 13) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 12:
                    if (v6 != 15) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 13:
                    if (v6 != 16) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 14:
                    if (v6 != 17) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 15:
                    if (v6 != 18) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 16:
                    if (v6 != 19) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 17:
                    if (v6 != 20) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 18:
                    if (v6 != 21) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 19:
                    if (v6 != 22) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 20:
                    if (v6 != 23) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 21:
                    if (v6 != 24) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 22:
                    if (v6 != 25) {
                      goto LABEL_344;
                    }
                    goto LABEL_6;
                  case 23:
                  case 37:
                    goto LABEL_344;
                  case 24:
                    if (v6 == 27) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 25:
                    if (v6 == 28) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 26:
                    if (v6 == 29) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 27:
                    if (v6 == 30) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 28:
                    if (v6 == 31) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 29:
                    if (v6 == 32) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 30:
                    if (v6 == 33) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 31:
                    if (v6 == 34) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 32:
                    if (v6 == 35) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 33:
                    if (v6 == 36) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 34:
                    if (v6 == 37) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 35:
                    if (v6 == 38) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 36:
                    if (v6 == 39) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 38:
                    if (v6 == 41) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 39:
                    if (v6 == 42) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 40:
                    if (v6 == 43) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 41:
                    if (v6 == 44) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 42:
                    if (v6 == 45) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 43:
                    if (v6 == 46) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 44:
                    if (v6 == 47) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 45:
                    if (v6 == 48) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 46:
                    if (v6 == 49) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 47:
                    if (v6 == 50) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 48:
                    if (v6 == 1000) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 49:
                    if (v6 == 1001) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 50:
                    if (v6 == 1002) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 51:
                    if (v6 == 1003) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 52:
                    if (v6 == 1004) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 53:
                    if (v6 == 1005) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 54:
                    if (v6 == 1006) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 55:
                    if (v6 == 2000) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 56:
                    if (v6 == 2001) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 57:
                    if (v6 == 2002) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 58:
                    if (v6 == 2003) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 59:
                    if (v6 == 2004) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 60:
                    if (v6 == 2005) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 61:
                    if (v6 == 2006) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 62:
                    if (v6 == 3500) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 63:
                    if (v6 == 3600) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 64:
                    if (v6 == 3601) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 65:
                    if (v6 == 3604) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 66:
                    if (v6 == 3605) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 67:
                    if (v6 == 3606) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  case 68:
                    uint64_t v8 = 3607;
                    goto LABEL_343;
                  case 69:
                    if (v6 == 3608) {
                      goto LABEL_6;
                    }
                    goto LABEL_344;
                  default:
LABEL_343:
                    if (v8 != v6)
                    {
LABEL_344:
                      uint64_t v9 = 1;
                      switch(byte_26FFA3224)
                      {
                        case 1:
                          if (v6 != 3) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 2:
                          if (v6 != 4) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 3:
                          if (v6 != 5) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 4:
                          if (v6 != 6) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 5:
                          if (v6 != 7) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 6:
                          if (v6 != 8) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 7:
                          if (v6 != 9) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 8:
                          if (v6 != 10) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 9:
                          if (v6 != 11) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 10:
                          if (v6 != 12) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 11:
                          if (v6 != 13) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 12:
                          if (v6 != 15) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 13:
                          if (v6 != 16) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 14:
                          if (v6 != 17) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 15:
                          if (v6 != 18) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 16:
                          if (v6 != 19) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 17:
                          if (v6 != 20) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 18:
                          if (v6 != 21) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 19:
                          if (v6 != 22) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 20:
                          if (v6 != 23) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 21:
                          if (v6 != 24) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 22:
                          if (v6 != 25) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 23:
                        case 37:
                          goto LABEL_479;
                        case 24:
                          if (v6 != 27) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 25:
                          if (v6 != 28) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 26:
                          if (v6 != 29) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 27:
                          if (v6 != 30) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 28:
                          if (v6 != 31) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 29:
                          if (v6 != 32) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 30:
                          if (v6 != 33) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 31:
                          if (v6 != 34) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 32:
                          if (v6 != 35) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 33:
                          if (v6 != 36) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 34:
                          if (v6 != 37) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 35:
                          if (v6 != 38) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 36:
                          if (v6 != 39) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 38:
                          if (v6 != 41) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 39:
                          if (v6 != 42) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 40:
                          if (v6 != 43) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 41:
                          if (v6 != 44) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 42:
                          if (v6 != 45) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 43:
                          if (v6 != 46) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 44:
                          if (v6 != 47) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 45:
                          if (v6 != 48) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 46:
                          if (v6 != 49) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 47:
                          if (v6 != 50) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 48:
                          if (v6 != 1000) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 49:
                          if (v6 != 1001) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 50:
                          if (v6 != 1002) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 51:
                          if (v6 != 1003) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 52:
                          if (v6 != 1004) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 53:
                          if (v6 != 1005) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 54:
                          if (v6 != 1006) {
                            goto LABEL_479;
                          }
                          goto LABEL_6;
                        case 55:
                          if (v6 == 2000) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 56:
                          if (v6 == 2001) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 57:
                          if (v6 == 2002) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 58:
                          if (v6 == 2003) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 59:
                          if (v6 == 2004) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 60:
                          if (v6 == 2005) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 61:
                          if (v6 == 2006) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 62:
                          if (v6 == 3500) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 63:
                          if (v6 == 3600) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 64:
                          if (v6 == 3601) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 65:
                          if (v6 == 3604) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 66:
                          if (v6 == 3605) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 67:
                          if (v6 == 3606) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        case 68:
                          uint64_t v9 = 3607;
                          goto LABEL_478;
                        case 69:
                          if (v6 == 3608) {
                            goto LABEL_6;
                          }
                          goto LABEL_479;
                        default:
LABEL_478:
                          if (v9 != v6)
                          {
LABEL_479:
                            uint64_t v10 = v11;
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                            {
                              sub_24D7C6FF0(0, *(void *)(v11 + 16) + 1, 1);
                              uint64_t v10 = v11;
                            }
                            unint64_t v4 = *(void *)(v10 + 16);
                            unint64_t v3 = *(void *)(v10 + 24);
                            if (v4 >= v3 >> 1)
                            {
                              sub_24D7C6FF0(v3 > 1, v4 + 1, 1);
                              uint64_t v10 = v11;
                            }
                            *(void *)(v10 + 16) = v4 + 1;
                            *(unsigned char *)(v10 + v4 + 32) = v5;
                          }
                          break;
                      }
                    }
                    break;
                }
              }
              break;
          }
LABEL_6:
          if (v1 != v2) {
            continue;
          }
          uint64_t v0 = v11;
          break;
      }
      break;
    }
  }
  qword_26B1A22C8 = v0;
}

unint64_t sub_24D59189C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v5 = *(unsigned char *)(v2 + 24);
  *(void *)(a2 + 24) = &type metadata for SQLItemJobID;
  unint64_t result = sub_24D5A2F5C();
  *(void *)(a2 + 32) = result;
  *(void *)a2 = a1;
  *(unsigned char *)(a2 + 8) = v5;
  return result;
}

uint64_t sub_24D5918E8(uint64_t result)
{
  uint64_t v3 = v2;
  unint64_t v4 = *(uint64_t (**)(uint64_t))(v1 + 80);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = swift_retain();
    uint64_t v7 = v4(v6);
    unint64_t result = sub_24D43DD74((uint64_t)v4);
    if (v7)
    {
      uint64_t v8 = *(void **)(v5 + 96);
      uint64_t v9 = *(void **)(v5 + 104);
      int v10 = *(unsigned __int8 *)(v5 + 112);
      if (*(unsigned char *)(v5 + 112))
      {
        if (v10 != 1) {
          goto LABEL_12;
        }
        uint64_t v11 = *(void (**)(uint64_t))(*(void *)v7 + 304);
        uint64_t v12 = swift_retain();
        v11(v12);
LABEL_11:
        sub_24D3E380C(v8, v9, v10);
LABEL_12:
        type metadata accessor for Materialization.MaterializeItem();
        uint64_t v16 = swift_dynamicCastClass();
        if (v16)
        {
          uint64_t v17 = v16;
          uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)v7 + 512);
          swift_retain();
          v18(v17, 1);
          if (v3) {
            goto LABEL_17;
          }
          uint64_t v16 = swift_release();
        }
        uint64_t v19 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 184))(v16);
        if (!v19) {
          return swift_release();
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 120))(v7, v5);
LABEL_17:
        swift_release();
        return swift_release();
      }
      if ((v8 & 0x200000) != 0)
      {
        uint64_t v14 = *(uint64_t (**)(uint64_t))(*(void *)v7 + 352);
        uint64_t v15 = swift_retain();
        uint64_t v13 = v14(v15);
        if ((v8 & 0x1000000) == 0) {
          goto LABEL_11;
        }
      }
      else
      {
        uint64_t v13 = swift_retain();
        if ((v8 & 0x1000000) == 0) {
          goto LABEL_11;
        }
      }
      (*(void (**)(uint64_t))(*(void *)v7 + 560))(v13);
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_24D591B60(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 80);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = swift_retain();
    uint64_t v5 = v2(v4);
    unint64_t result = sub_24D43DD74((uint64_t)v2);
    if (v5)
    {
      if (*(unsigned char *)(v3 + 112) == 1)
      {
        uint64_t v6 = *(uint64_t (**)(uint64_t))(v1 + 80);
        if (v6)
        {
          uint64_t v7 = swift_retain();
          uint64_t v8 = v6(v7);
          unint64_t result = sub_24D43DD74((uint64_t)v6);
          if (v8)
          {
            (*(void (**)(uint64_t))(*(void *)v8 + 304))(result);
            unint64_t result = swift_release();
          }
        }
      }
      uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(result);
      if (v9)
      {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 136))(v5, v3);
        swift_release();
      }
      return swift_release();
    }
  }
  return result;
}

void sub_24D591CC4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(v2 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = a1;
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = sub_24D5A3D30;
  *(void *)(v6 + 24) = v5;
  uint64_t v42 = sub_24D3E3980;
  uint64_t v43 = v6;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v39 = 1107296256;
  uint64_t v40 = sub_24D3E38DC;
  uint64_t v41 = (ValueMetadata *)&block_descriptor_344;
  uint64_t v7 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v36 = v4;
  id v8 = objc_msgSend(v4, sel_fetchSwift_error_, v7, &aBlock);
  _Block_release(v7);
  id v9 = aBlock;
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v4)
  {
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v8)
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
    return;
  }
  if (!objc_msgSend(v8, sel_next))
  {
    id v34 = v8;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v2;
    *(void *)(v12 + 24) = a1;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_24D5A3D50;
    *(void *)(v13 + 24) = v12;
    uint64_t v42 = sub_24D3E3980;
    uint64_t v43 = v13;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_24D3E38DC;
    uint64_t v41 = (ValueMetadata *)&block_descriptor_354;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    unsigned int v15 = objc_msgSend(v36, sel_executeSwift_error_, v14, &aBlock);
    _Block_release(v14);
    id v16 = aBlock;
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      if (v15)
      {
        id v18 = objc_msgSend(v36, sel_lastInsertedRowID, v34);
        char v19 = *(unsigned char *)(v2 + 24);
        uint64_t v41 = &type metadata for SQLItemJobID;
        uint64_t v42 = (uint64_t (*)())sub_24D5A2F5C();
        id aBlock = v18;
        LOBYTE(v39) = v19;
        sub_24D5A2FB0((uint64_t)&aBlock, (uint64_t)v37);
        swift_beginAccess();
        sub_24D5A3018((uint64_t)v37, a1 + 56);
        swift_endAccess();
        uint64_t v20 = a1;
LABEL_10:
        sub_24D5918E8(v20);
LABEL_23:
        swift_release();
LABEL_24:
        swift_release();

        return;
      }
      sub_24DCC8828();

LABEL_22:
      swift_willThrow();
      goto LABEL_23;
    }
    goto LABEL_32;
  }
  id v10 = objc_msgSend(v8, sel_longAtIndex_, 0);
  if (objc_msgSend(v8, sel_isNullAtIndex_, 1)) {
    uint64_t v11 = 4;
  }
  else {
    uint64_t v11 = (uint64_t)objc_msgSend(v8, sel_longAtIndex_, 1);
  }
  unsigned int v21 = v8;
  unsigned __int8 v22 = objc_msgSend(v8, sel_isNullAtIndex_, 2);
  char v23 = *(unsigned char *)(v2 + 24);
  uint64_t v41 = &type metadata for SQLItemJobID;
  uint64_t v42 = (uint64_t (*)())sub_24D5A2F5C();
  id aBlock = v10;
  LOBYTE(v39) = v23;
  sub_24D5A2FB0((uint64_t)&aBlock, (uint64_t)v37);
  swift_beginAccess();
  sub_24D5A3018((uint64_t)v37, a1 + 56);
  swift_endAccess();
  if (v11 == 2)
  {
    sub_24D59272C(v2, a1, (uint64_t)v10);
    swift_release();

    return;
  }
  id v34 = v21;
  if (v11 >= 2)
  {
    uint64_t v29 = (void *)swift_allocObject();
    v29[2] = v2;
    v29[3] = a1;
    v29[4] = v10;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_24D5A3D70;
    *(void *)(v30 + 24) = v29;
    uint64_t v42 = sub_24D3E3980;
    uint64_t v43 = v30;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v39 = 1107296256;
    uint64_t v40 = sub_24D3E38DC;
    uint64_t v41 = (ValueMetadata *)&block_descriptor_364;
    uint64_t v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    unsigned int v32 = objc_msgSend(v36, sel_executeSwift_error_, v31, &aBlock);
    _Block_release(v31);
    id v35 = aBlock;
    char v33 = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v33 & 1) == 0)
    {
      if (v32)
      {
        if (!objc_msgSend(v36, sel_changes)) {
          goto LABEL_23;
        }
        uint64_t v20 = a1;
        goto LABEL_10;
      }
      sub_24DCC8828();

      goto LABEL_22;
    }
    goto LABEL_33;
  }
  if ((v22 & 1) == 0)
  {
    sub_24D59272C(v2, a1, (uint64_t)v10);
    goto LABEL_24;
  }
  unsigned int v24 = (void *)swift_allocObject();
  v24[2] = v2;
  v24[3] = a1;
  v24[4] = v10;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_24D5A3D94;
  *(void *)(v25 + 24) = v24;
  uint64_t v42 = sub_24D3E3980;
  uint64_t v43 = v25;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v39 = 1107296256;
  uint64_t v40 = sub_24D3E38DC;
  uint64_t v41 = (ValueMetadata *)&block_descriptor_374;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v27 = objc_msgSend(v36, sel_executeSwift_error_, v26, &aBlock);
  _Block_release(v26);
  id v28 = aBlock;
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v26) {
LABEL_34:
  }
    __break(1u);
  if (!v27)
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  swift_release();
  swift_release();
}

uint64_t sub_24D5924B0(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v2 = qword_24DCD5980[(char)sub_24DB1702C()];
  v9[3] = MEMORY[0x263F8D6C8];
  v9[0] = v2;
  sub_24D3E3EB4((uint64_t)v9);
  uint64_t v4 = v3;
  sub_24D415F74((uint64_t)v9, qword_26B197F50);
  if (v4)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    uint64_t v7 = swift_checkMetadataState();
    v6(a1, v7, v5);
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59272C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v6 = *(void **)(a1 + 16);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  id v8 = (void *)swift_allocObject();
  _OWORD v8[2] = sub_24D5A3E04;
  id v8[3] = v7;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v8;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_384;
  id v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  uint64_t v10 = v6;
  unsigned int v11 = objc_msgSend(v6, sel_executeSwift_error_, v9, aBlock);
  _Block_release(v9);
  id v12 = aBlock[0];
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6) {
    __break(1u);
  }
  if (v11)
  {
    if (!objc_msgSend(v10, sel_changes)) {
      return swift_release();
    }
    sub_24D5918E8(a2);
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_24D592950(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v7 = a3[17];
  uint64_t v8 = MEMORY[0x263F8D9D0];
  uint64_t v20 = MEMORY[0x263F8D9D0];
  v19[0] = v7;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v10 = v9;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (!v10) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = a3[15];
  uint64_t v20 = v8;
  v19[0] = v11;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (!v13) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v14 = a3[16];
  uint64_t v20 = MEMORY[0x263F8D6C8];
  v19[0] = v14;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v16 = v15;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (v16)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v17 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
LABEL_5:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D592C08(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v7 = *(void **)(a3 + 96);
  uint64_t v8 = *(void **)(a3 + 104);
  char v9 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v7, v8, v9);
  sub_24D833860((unint64_t)v7, (unint64_t)v8, v9, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v7, v8, v9);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v10 = *(void *)(a3 + 136);
  uint64_t v11 = MEMORY[0x263F8D9D0];
  uint64_t v23 = MEMORY[0x263F8D9D0];
  v22[0] = v10;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (!v13) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v14 = *(void *)(a3 + 120);
  uint64_t v23 = v11;
  v22[0] = v14;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v16 = v15;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (!v16) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v17 = *(void *)(a3 + 128);
  uint64_t v23 = MEMORY[0x263F8D6C8];
  v22[0] = v17;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v19 = v18;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (v19)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v20 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
LABEL_5:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D592F60(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  v19[0] = 0;
  v19[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v21 = 0;
  unint64_t v22 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v7 = a3[17];
  uint64_t v8 = MEMORY[0x263F8D9D0];
  uint64_t v20 = MEMORY[0x263F8D9D0];
  v19[0] = v7;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v10 = v9;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (!v10) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = a3[15];
  uint64_t v20 = v8;
  v19[0] = v11;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (!v13) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v14 = a3[16];
  uint64_t v20 = MEMORY[0x263F8D6C8];
  v19[0] = v14;
  sub_24D3E3EB4((uint64_t)v19);
  uint64_t v16 = v15;
  sub_24D415F74((uint64_t)v19, qword_26B197F50);
  if (v16)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v17 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v21;
  }
  else
  {
LABEL_5:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D593218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v30 = 0;
  unint64_t v31 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  char v8 = sub_24DB1702C();
  uint64_t v9 = MEMORY[0x263F8D6C8];
  uint64_t v10 = qword_24DCD5980[v8];
  uint64_t v29 = MEMORY[0x263F8D6C8];
  v28[0] = v10;
  sub_24D3E3EB4((uint64_t)v28);
  uint64_t v12 = v11;
  sub_24D415F74((uint64_t)v28, qword_26B197F50);
  if (!v12) {
    goto LABEL_6;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v13 = *(void **)(a3 + 96);
  uint64_t v14 = *(void **)(a3 + 104);
  char v15 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v13, v14, v15);
  uint64_t v16 = sub_24D786AD8();
  sub_24D855DD4((uint64_t)v16, (unint64_t)v13, (unint64_t)v14, v15);
  swift_bridgeObjectRelease();
  sub_24D3E380C(v13, v14, v15);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v17 = *(void *)(a3 + 136);
  uint64_t v18 = MEMORY[0x263F8D9D0];
  uint64_t v29 = MEMORY[0x263F8D9D0];
  v28[0] = v17;
  sub_24D3E3EB4((uint64_t)v28);
  uint64_t v20 = v19;
  sub_24D415F74((uint64_t)v28, qword_26B197F50);
  if (!v20) {
    goto LABEL_6;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v21 = *(void *)(a3 + 128);
  uint64_t v29 = v9;
  v28[0] = v21;
  sub_24D3E3EB4((uint64_t)v28);
  uint64_t v23 = v22;
  sub_24D415F74((uint64_t)v28, qword_26B197F50);
  if (!v23) {
    goto LABEL_6;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v24 = *(void *)(a3 + 120);
  uint64_t v29 = v18;
  v28[0] = v24;
  sub_24D3E3EB4((uint64_t)v28);
  uint64_t v26 = v25;
  sub_24D415F74((uint64_t)v28, qword_26B197F50);
  if (v26)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    return v30;
  }
  else
  {
LABEL_6:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

void sub_24D593694(uint64_t *a1)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(v1 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = a1;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_24D5A3C34;
  *(void *)(v5 + 24) = v4;
  id v36 = sub_24D3E3980;
  uint64_t v37 = v5;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v33 = 1107296256;
  id v34 = sub_24D3E38DC;
  id v35 = &block_descriptor_304;
  uint64_t v6 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v7 = objc_msgSend(v3, sel_fetchSwift_error_, v6, &aBlock);
  _Block_release(v6);
  id v8 = aBlock;
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v6)
  {
    __break(1u);
    goto LABEL_27;
  }
  if (!v7)
  {
    sub_24DCC8828();

    swift_willThrow();
    goto LABEL_10;
  }
  if (!objc_msgSend(v7, sel_next)) {
    goto LABEL_24;
  }
  id v9 = objc_msgSend(v7, sel_longAtIndex_, 0);
  id v30 = objc_msgSend(v7, sel_unsignedLongAtIndex_, 1);
  id v10 = objc_msgSend(v7, sel_longAtIndex_, 2);
  id v11 = objc_msgSend(v7, sel_unsignedLongAtIndex_, 3);
  if (v10 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v28 = (uint64_t)v11;
    uint64_t v29 = (uint64_t)v10;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 24) = 0;
    *(void *)(v17 + 32) = 0;
    *(void *)(v17 + 16) = v1;
    *(unsigned char *)(v17 + 40) = 1;
    *(void *)(v17 + 48) = v9;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_24D5A3C90;
    *(void *)(v18 + 24) = v17;
    id v36 = sub_24D3E3980;
    uint64_t v37 = v18;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v33 = 1107296256;
    id v34 = sub_24D3E38DC;
    id v35 = &block_descriptor_314;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    unsigned int v20 = objc_msgSend(v3, sel_executeSwift_error_, v19, &aBlock);
    _Block_release(v19);
    id v27 = aBlock;
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v19 & 1) == 0)
    {
      if (!v20)
      {
        sub_24DCC8828();

        goto LABEL_22;
      }
      uint64_t v21 = sub_24D5A2620(a1, (uint64_t)v30, v28, v29);
      swift_beginAccess();
      sub_24D415FD0((uint64_t)(a1 + 7), (uint64_t)&aBlock, &qword_26B1937B8);
      swift_beginAccess();
      sub_24D5A3018((uint64_t)&aBlock, v21 + 56);
      swift_endAccess();
      sub_24D5918E8(v21);
      swift_release();
      swift_release();
      if (!v31) {
        goto LABEL_24;
      }

LABEL_10:
      swift_release();
      return;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
  }
  if (*(unsigned char *)(v1 + 72) == 1)
  {
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = v1;
    *(void *)(v12 + 24) = v9;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_24D5A3D10;
    *(void *)(v13 + 24) = v12;
    id v36 = sub_24D3E3980;
    uint64_t v37 = v13;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v33 = 1107296256;
    id v34 = sub_24D3E38DC;
    id v35 = &block_descriptor_334;
    uint64_t v14 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    unsigned int v15 = objc_msgSend(v3, sel_executeSwift_error_, v14, &aBlock);
    _Block_release(v14);
    id v16 = aBlock;
    LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v14 & 1) == 0)
    {
      if (v15) {
        goto LABEL_17;
      }
      sub_24DCC8828();

      swift_willThrow();
      goto LABEL_23;
    }
    goto LABEL_28;
  }
  uint64_t v22 = (void *)swift_allocObject();
  v22[2] = v1;
  void v22[3] = a1;
  v22[4] = v9;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = sub_24D5A3CBC;
  *(void *)(v23 + 24) = v22;
  id v36 = sub_24D3E3980;
  uint64_t v37 = v23;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v33 = 1107296256;
  id v34 = sub_24D3E38DC;
  id v35 = &block_descriptor_324;
  uint64_t v24 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v25 = objc_msgSend(v3, sel_executeSwift_error_, v24, &aBlock);
  _Block_release(v24);
  id v26 = aBlock;
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v24) {
    goto LABEL_29;
  }
  if (v25)
  {
LABEL_17:
    swift_release();
    goto LABEL_24;
  }
  sub_24DCC8828();

LABEL_22:
  swift_willThrow();
LABEL_23:
  swift_release();
LABEL_24:
  swift_release();
}

uint64_t sub_24D593DCC(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v2 = qword_24DCD5980[(char)sub_24DB1702C()];
  v9[3] = MEMORY[0x263F8D6C8];
  v9[0] = v2;
  sub_24D3E3EB4((uint64_t)v9);
  uint64_t v4 = v3;
  sub_24D415F74((uint64_t)v9, qword_26B197F50);
  if (v4)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_getAssociatedTypeWitness();
    uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
    uint64_t v7 = swift_checkMetadataState();
    v6(a1, v7, v5);
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D594048(void *a1, uint64_t a2, void *a3, void *a4, char a5, uint64_t a6)
{
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24D3F1C98(a3, a4, a5);
  sub_24D833860((unint64_t)a3, (unint64_t)a4, a5, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(a3, a4, a5);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v11 = objc_msgSend(a1, sel_bindLongParameter_, a6);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24D594248(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  strcpy((char *)v7, "DELETE FROM ");
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v5 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return v7[0];
}

uint64_t sub_24D594354(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v7 = *(void **)(a3 + 96);
  id v8 = *(void **)(a3 + 104);
  LOBYTE(a3) = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v7, v8, a3);
  sub_24D833860((unint64_t)v7, (unint64_t)v8, a3, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v7, v8, a3);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v9 = objc_msgSend(a1, sel_bindLongParameter_, a4);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0x20455441445055;
}

uint64_t sub_24D594500(uint64_t a1)
{
  uint64_t v2 = v1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = (void *)*v2;
  uint64_t v18 = *(void *)(*v2 + 96);
  uint64_t v5 = v4[10];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v9 = (char *)&v17 - v8;
  id v19 = (id)v2[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v17 - v8, a1, AssociatedTypeWitness);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  id v11 = (char *)swift_allocObject();
  *((void *)v11 + 2) = v5;
  *((void *)v11 + 3) = v4[11];
  *((void *)v11 + 4) = v18;
  *((void *)v11 + 5) = v4[13];
  *((void *)v11 + 6) = v2;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, AssociatedTypeWitness);
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = sub_24D5A3B90;
  v12[3] = v11;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v12;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_294;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned __int8 v14 = objc_msgSend(v19, sel_executeSwift_error_, v13, aBlock);
  _Block_release(v13);
  id v15 = aBlock[0];
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v13) {
    __break(1u);
  }
  if (v14) {
    return swift_release();
  }
  sub_24DCC8828();

  swift_willThrow();
  return swift_release();
}

uint64_t sub_24D594828(uint64_t a1)
{
  sub_24DCCA728();
  sub_24DCC9968();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  uint64_t v4 = swift_checkMetadataState();
  v3(a1, v4, v2);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_24D5949A8(uint64_t a1)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  uint64_t v3 = (void *)*v1;
  uint64_t v133 = sub_24DCC9078();
  *(void *)&long long v130 = *(void *)(v133 - 8);
  uint64_t v4 = MEMORY[0x270FA5388](v133);
  *(void *)&long long v129 = (char *)&v127 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v4);
  uint64_t v131 = (void (**)(uint64_t, uint64_t))((char *)&v127 - v6);
  uint64_t v7 = (void *)v3[10];
  uint64_t v8 = v3[11];
  id v9 = (id (*)(uint64_t, void *))v3[12];
  os_log_type_t v136 = v1;
  unint64_t v10 = (void *)v3[13];
  id aBlock = v7;
  uint64_t v138 = v8;
  uint64_t v132 = v8;
  uint64_t v139 = v9;
  id v140 = v10;
  uint64_t v11 = type metadata accessor for PersistenceTrigger();
  MEMORY[0x270FA5388](v11);
  unsigned __int8 v14 = (uint64_t *)((char *)&v127 - v13);
  id v15 = *(void **)(a1 + 96);
  id v16 = *(void **)(a1 + 104);
  uint64_t v134 = (uint64_t *)a1;
  uint64_t v17 = *(unsigned __int8 *)(a1 + 112);
  switch(v17)
  {
    case 1:
      id v27 = v15;
      if (!v15) {
        goto LABEL_20;
      }
      goto LABEL_8;
    case 2:
      goto LABEL_35;
    case 3:
    case 4:
      uint64_t v18 = (uint64_t (*)(uint64_t))v136[10];
      if (v18)
      {
        uint64_t v133 = v12;
        uint64_t v19 = swift_retain();
        uint64_t v20 = v18(v19);
        sub_24D43DD74((uint64_t)v18);
        if (v20)
        {
          id aBlock = v7;
          uint64_t v138 = v132;
          uint64_t v139 = v9;
          id v140 = v10;
          type metadata accessor for Materialization.MaterializeItem();
          uint64_t v21 = (uint64_t)v134;
          uint64_t v22 = swift_dynamicCastClass();
          if (v22)
          {
            uint64_t v23 = v22;
            uint64_t v24 = *(void (**)(uint64_t, void))(*(void *)v20 + 512);
            swift_retain();
            uint64_t v25 = v23;
            uint64_t v26 = v135;
            v24(v25, 0);
            if (v26)
            {
              swift_release();
              goto LABEL_42;
            }
            uint64_t v135 = 0;
            swift_release();
          }
          *unsigned __int8 v14 = v21;
          swift_storeEnumTagMultiPayload();
          uint64_t v122 = *(void (**)(uint64_t *))(*(void *)v20 + 312);
          swift_retain();
          v122(v14);
          uint64_t v41 = v134;
          uint64_t v123 = (*(uint64_t (**)(uint64_t *, uint64_t))(v133 + 8))(v14, v11);
          uint64_t v124 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 184))(v123);
          if (v124)
          {
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v124 + 128))(v20, v41);
            swift_release();
          }
          swift_release();
          uint64_t v88 = v135;
        }
        else
        {
          uint64_t v41 = v134;
          uint64_t v88 = v135;
        }
      }
      else
      {
        uint64_t v41 = v134;
        uint64_t v88 = v135;
      }
      sub_24D593694(v41);
      if (v88) {
        return;
      }
      uint64_t v48 = 0;
      uint64_t v47 = 0;
      goto LABEL_77;
    default:
      id v27 = v16;
      if (v16)
      {
LABEL_8:
        uint64_t v28 = *(uint64_t (**)(id))(*(void *)v27 + 88);
        id v29 = sub_24D3F1C98(v15, v16, v17);
        uint64_t v30 = v28(v29);
        uint64_t v32 = v31;
        char v34 = v33;
        int v35 = v33;
        sub_24D3E380C(v15, v16, v17);
        if (v35 == 3 && v30 == 1 && v32 == 0)
        {
          id v114 = v136;
          uint64_t v115 = (void *)v136[2];
          uint64_t v116 = swift_allocObject();
          uint64_t v41 = v134;
          *(void *)(v116 + 16) = v114;
          *(void *)(v116 + 24) = v41;
          uint64_t v117 = swift_allocObject();
          *(void *)(v117 + 16) = sub_24D5A3A94;
          *(void *)(v117 + 24) = v116;
          os_log_type_t v141 = sub_24D3E3980;
          uint64_t v142 = v117;
          id aBlock = (id)MEMORY[0x263EF8330];
          uint64_t v138 = 1107296256;
          uint64_t v139 = sub_24D3E38DC;
          id v140 = &block_descriptor_284;
          uint64_t v118 = _Block_copy(&aBlock);
          swift_retain();
          swift_retain();
          swift_retain();
          swift_release();
          id aBlock = 0;
          unsigned int v119 = objc_msgSend(v115, sel_executeSwift_error_, v118, &aBlock);
          _Block_release(v118);
          id v120 = aBlock;
          char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
          swift_release();
          if ((isEscapingClosureAtFileLocation & 1) == 0)
          {
            if (v119)
            {
              if (objc_msgSend(v115, sel_changes))
              {
                uint64_t v48 = sub_24D5A3A94;
                uint64_t v47 = 0;
                goto LABEL_76;
              }
              uint64_t v126 = v135;
              sub_24D591CC4((uint64_t)v41);
              if (!v126)
              {
                uint64_t v48 = sub_24D5A3A94;
                uint64_t v47 = 0;
                goto LABEL_76;
              }
            }
            else
            {
              sub_24DCC8828();

              swift_willThrow();
            }
LABEL_42:
            swift_release();
            return;
          }
LABEL_89:
          __break(1u);
        }
        sub_24D512AEC(v30, v32, v34);
        uint64_t v38 = v136;
        uint64_t v39 = (void *)v136[2];
        uint64_t v40 = swift_allocObject();
        uint64_t v41 = v134;
        *(void *)(v40 + 16) = v38;
        *(void *)(v40 + 24) = v41;
        uint64_t v42 = swift_allocObject();
        *(void *)(v42 + 16) = sub_24D5A3A74;
        *(void *)(v42 + 24) = v40;
        os_log_type_t v141 = sub_24D3E3980;
        uint64_t v142 = v42;
        id aBlock = (id)MEMORY[0x263EF8330];
        uint64_t v138 = 1107296256;
        uint64_t v139 = sub_24D3E38DC;
        id v140 = &block_descriptor_274;
        uint64_t v43 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_retain();
        swift_release();
        id aBlock = 0;
        unsigned int v44 = objc_msgSend(v39, sel_executeSwift_error_, v43, &aBlock);
        _Block_release(v43);
        id v45 = aBlock;
        char v46 = swift_isEscapingClosureAtFileLocation();
        swift_release();
        if ((v46 & 1) == 0)
        {
          if (v44)
          {
            if (objc_msgSend(v39, sel_changes))
            {
              uint64_t v47 = sub_24D5A3A74;
              uint64_t v48 = 0;
LABEL_76:
              sub_24D591B60((uint64_t)v41);
LABEL_77:
              uint64_t v87 = 0;
LABEL_78:
              if (sub_24DB1702C() == 23 || sub_24DB1702C() == 7) {
                sub_24D594500((uint64_t)v41 + *(void *)(*v41 + 576));
              }
              sub_24D43DD74((uint64_t)v48);
              sub_24D43DD74((uint64_t)v47);
              sub_24D43DD74((uint64_t)v87);
              return;
            }
            uint64_t v125 = v135;
            sub_24D591CC4((uint64_t)v41);
            if (!v125)
            {
              uint64_t v47 = sub_24D5A3A74;
              uint64_t v48 = 0;
              goto LABEL_76;
            }
          }
          else
          {
            sub_24DCC8828();

            swift_willThrow();
          }
          goto LABEL_42;
        }
        goto LABEL_87;
      }
LABEL_20:
      uint64_t v49 = (uint64_t)v134;
      if (sub_24DB1702C() != 8)
      {
        char v89 = sub_24DB1702C();
        uint64_t v53 = v135;
        if (v89 == 7)
        {
          uint64_t v90 = sub_24D597A24(v49 + *(void *)(*(void *)v49 + 576), (uint64_t)&unk_26FFA2238);
          if (v53) {
            return;
          }
          uint64_t v91 = v90;
          id aBlock = v7;
          uint64_t v138 = v132;
          uint64_t v139 = v9;
          id v140 = v10;
          uint64_t v92 = type metadata accessor for ItemJob();
          if (MEMORY[0x253327DC0](v91, v92))
          {
            uint64_t v131 = (void (**)(uint64_t, uint64_t))(v130 + 8);
            *(void *)&long long v93 = 136315138;
            long long v130 = v93;
            uint64_t v127 = MEMORY[0x263F8EE58] + 8;
            uint64_t v128 = v92;
            uint64_t v94 = 4;
            uint64_t v95 = v129;
            do
            {
              char v96 = sub_24DCC9CB8();
              sub_24DCC9C68();
              if (v96)
              {
                uint64_t v97 = *(void *)(v91 + 8 * v94);
                swift_retain();
              }
              else
              {
                uint64_t v97 = sub_24DCCA778();
              }
              uint64_t v132 = v94 - 3;
              if (__OFADD__(v94 - 4, 1)) {
                goto LABEL_88;
              }
              uint64_t v98 = *(void **)(v97 + 96);
              os_log_type_t v99 = *(void **)(v97 + 104);
              *(void *)(v97 + 96) = 0;
              *(void *)(v97 + 104) = 0;
              char v100 = *(unsigned char *)(v97 + 112);
              *(unsigned char *)(v97 + 112) = 4;
              sub_24D3E380C(v98, v99, v100);
              id v101 = (id)fpfs_current_or_default_log();
              sub_24DCC9088();
              swift_retain();
              id v102 = sub_24DCC9068();
              os_log_type_t v103 = sub_24DCCA108();
              if (os_log_type_enabled(v102, v103))
              {
                uint64_t v104 = swift_slowAlloc();
                uint64_t v135 = 0;
                uint64_t v105 = v104;
                uint64_t v106 = v91;
                uint64_t v107 = (void *)swift_slowAlloc();
                id aBlock = v107;
                *(_DWORD *)uint64_t v105 = v130;
                uint64_t v108 = sub_24D982AC4();
                *(void *)(v105 + 4) = sub_24D418FB4(v108, v109, (uint64_t *)&aBlock);
                swift_release();
                swift_bridgeObjectRelease();
                _os_log_impl(&dword_24D3D0000, v102, v103, "✍️  Cancelling eviction job due to new materialize job: %s", (uint8_t *)v105, 0xCu);
                swift_arrayDestroy();
                uint64_t v110 = v107;
                uint64_t v91 = v106;
                unint64_t v111 = v131;
                MEMORY[0x25332B030](v110, -1, -1);
                uint64_t v112 = v105;
                uint64_t v53 = v135;
                uint64_t v92 = v128;
                MEMORY[0x25332B030](v112, -1, -1);

                (*v111)(v95, v133);
              }
              else
              {

                swift_release();
                (*v131)(v95, v133);
              }
              sub_24D5949A8(v97);
              swift_release();
              if (v53)
              {
LABEL_73:
                swift_bridgeObjectRelease();
                return;
              }
              uint64_t v113 = MEMORY[0x253327DC0](v91, v92);
              ++v94;
            }
            while (v132 != v113);
          }
          swift_bridgeObjectRelease();
        }
LABEL_84:
        sub_24D591CC4((uint64_t)v134);
        if (!v53)
        {
          uint64_t v48 = 0;
          uint64_t v47 = 0;
          uint64_t v87 = 0;
          uint64_t v41 = v134;
          goto LABEL_78;
        }
        return;
      }
      uint64_t v50 = v49 + *(void *)(*(void *)v49 + 576);
      uint64_t v51 = v135;
      uint64_t v52 = sub_24D597A24(v50, (uint64_t)&unk_26FFA2210);
      uint64_t v53 = v51;
      if (v51) {
        return;
      }
      uint64_t v54 = v52;
      uint64_t v127 = v50;
      id aBlock = v7;
      uint64_t v138 = v132;
      uint64_t v139 = v9;
      id v140 = v10;
      uint64_t v55 = type metadata accessor for ItemJob();
      if (!MEMORY[0x253327DC0](v54, v55))
      {
LABEL_72:
        swift_bridgeObjectRelease();
        sub_24D594500(v127);
        goto LABEL_84;
      }
      *(void *)&long long v130 = v130 + 8;
      *(void *)&long long v56 = 136315138;
      long long v129 = v56;
      uint64_t v128 = MEMORY[0x263F8EE58] + 8;
      uint64_t v57 = 4;
      uint64_t v58 = (char *)v131;
      while (1)
      {
        uint64_t v59 = v57 - 4;
        char v60 = sub_24DCC9CB8();
        sub_24DCC9C68();
        if ((v60 & 1) == 0) {
          break;
        }
        uint64_t v61 = *(void *)(v54 + 8 * v57);
        swift_retain();
        uint64_t v62 = v57 - 3;
        if (__OFADD__(v59, 1)) {
          goto LABEL_34;
        }
LABEL_26:
        uint64_t v132 = v62;
        uint64_t v63 = *(void **)(v61 + 96);
        id v64 = *(void **)(v61 + 104);
        *(void *)(v61 + 96) = 0;
        *(void *)(v61 + 104) = 0;
        char v65 = *(unsigned char *)(v61 + 112);
        *(unsigned char *)(v61 + 112) = 4;
        sub_24D3E380C(v63, v64, v65);
        id v66 = (id)fpfs_current_or_default_log();
        sub_24DCC9088();
        swift_retain();
        uint64_t v67 = sub_24DCC9068();
        os_log_type_t v68 = sub_24DCCA108();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc();
          uint64_t v135 = 0;
          uint64_t v70 = v69;
          uint64_t v71 = v55;
          uint64_t v72 = v54;
          id v73 = (void *)swift_slowAlloc();
          id aBlock = v73;
          *(_DWORD *)uint64_t v70 = v129;
          uint64_t v74 = sub_24D982AC4();
          *(void *)(v70 + 4) = sub_24D418FB4(v74, v75, (uint64_t *)&aBlock);
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_24D3D0000, v67, v68, "✍️  Cancelling materialize job due to new eviction job: %s", (uint8_t *)v70, 0xCu);
          swift_arrayDestroy();
          unsigned int v76 = v73;
          uint64_t v54 = v72;
          uint64_t v55 = v71;
          MEMORY[0x25332B030](v76, -1, -1);
          uint64_t v77 = v70;
          uint64_t v53 = v135;
          uint64_t v58 = (char *)v131;
          MEMORY[0x25332B030](v77, -1, -1);
        }
        else
        {

          swift_release();
        }
        (*(void (**)(char *, uint64_t))v130)(v58, v133);
        sub_24D5949A8(v61);
        swift_release();
        if (v53) {
          goto LABEL_73;
        }
        uint64_t v78 = MEMORY[0x253327DC0](v54, v55);
        ++v57;
        if (v132 == v78) {
          goto LABEL_72;
        }
      }
      uint64_t v61 = sub_24DCCA778();
      uint64_t v62 = v57 - 3;
      if (!__OFADD__(v59, 1)) {
        goto LABEL_26;
      }
LABEL_34:
      __break(1u);
LABEL_35:
      os_log_type_t v79 = v136;
      uint64_t v80 = (void *)v136[2];
      uint64_t v81 = swift_allocObject();
      uint64_t v41 = v134;
      *(void *)(v81 + 16) = v79;
      *(void *)(v81 + 24) = v41;
      uint64_t v82 = swift_allocObject();
      *(void *)(v82 + 16) = sub_24D5A3A54;
      *(void *)(v82 + 24) = v81;
      os_log_type_t v141 = sub_24D3E3980;
      uint64_t v142 = v82;
      id aBlock = (id)MEMORY[0x263EF8330];
      uint64_t v138 = 1107296256;
      uint64_t v139 = sub_24D3E38DC;
      id v140 = &block_descriptor_262;
      uint64_t v83 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      id aBlock = 0;
      unsigned int v84 = objc_msgSend(v80, sel_executeSwift_error_, v83, &aBlock);
      _Block_release(v83);
      id v85 = aBlock;
      char v86 = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v86)
      {
        __break(1u);
LABEL_87:
        __break(1u);
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      if (v84)
      {
        uint64_t v48 = 0;
        uint64_t v47 = 0;
        uint64_t v87 = sub_24D5A3A54;
        goto LABEL_78;
      }
      sub_24DCC8828();

      swift_willThrow();
      swift_release();
      return;
  }
}

uint64_t sub_24D5959E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = *(void **)(a3 + 96);
  uint64_t v6 = *(void **)(a3 + 104);
  char v7 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v5, v6, v7);
  sub_24D833860((unint64_t)v5, (unint64_t)v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v5, v6, v7);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = qword_24DCD5980[(char)sub_24DB1702C()];
  v15[3] = MEMORY[0x263F8D6C8];
  v15[0] = v11;
  sub_24D3E3EB4((uint64_t)v15);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v15, qword_26B197F50);
  if (v13)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D595CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v22[0] = 0;
  v22[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = *(void **)(a3 + 96);
  uint64_t v6 = *(void **)(a3 + 104);
  char v7 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v5, v6, v7);
  sub_24D833860((unint64_t)v5, (unint64_t)v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v5, v6, v7);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v8 = *(void *)(a3 + 128);
  uint64_t v9 = MEMORY[0x263F8D6C8];
  uint64_t v23 = MEMORY[0x263F8D6C8];
  v22[0] = v8;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v11 = v10;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (!v11) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v12 = *(void *)(a3 + 136);
  uint64_t v23 = MEMORY[0x263F8D9D0];
  v22[0] = v12;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v14 = v13;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (!v14) {
    goto LABEL_5;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v15 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
  uint64_t v17 = swift_checkMetadataState();
  v16(a1, v17, v15);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v18 = qword_24DCD5980[(char)sub_24DB1702C()];
  uint64_t v23 = v9;
  v22[0] = v18;
  sub_24D3E3EB4((uint64_t)v22);
  uint64_t v20 = v19;
  sub_24D415F74((uint64_t)v22, qword_26B197F50);
  if (v20)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v24;
  }
  else
  {
LABEL_5:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5960DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v18[0] = 0;
  v18[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v20 = 0;
  unint64_t v21 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = *(void **)(a3 + 96);
  uint64_t v6 = *(void **)(a3 + 104);
  char v7 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v5, v6, v7);
  sub_24D833860((unint64_t)v5, (unint64_t)v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v5, v6, v7);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v8 = *(void *)(a3 + 136);
  uint64_t v19 = MEMORY[0x263F8D9D0];
  v18[0] = v8;
  sub_24D3E3EB4((uint64_t)v18);
  uint64_t v10 = v9;
  sub_24D415F74((uint64_t)v18, qword_26B197F50);
  if (!v10) {
    goto LABEL_4;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  uint64_t v13 = swift_checkMetadataState();
  v12(a1, v13, v11);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v14 = qword_24DCD5980[(char)sub_24DB1702C()];
  uint64_t v19 = MEMORY[0x263F8D6C8];
  v18[0] = v14;
  sub_24D3E3EB4((uint64_t)v18);
  uint64_t v16 = v15;
  sub_24D415F74((uint64_t)v18, qword_26B197F50);
  if (v16)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v20;
  }
  else
  {
LABEL_4:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

void sub_24D596464(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v38 = objc_msgSend(a1, sel_longAtIndex_, 0);
  id v5 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  id v6 = objc_msgSend(a1, sel_longAtIndex_, 2);
  id v7 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  id v45 = objc_msgSend(a1, sel_longAtIndex_, 4);
  id v37 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  char v8 = sub_24DB1B818((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v8 == 70)
  {
    sub_24D511F64();
    swift_allocError();
    *uint64_t v9 = 0;
    swift_willThrow();
  }
  else
  {
    char v10 = v8;
    id v35 = v5;
    uint64_t v36 = a2;
    uint64_t v11 = sub_24D786AD8();
    uint64_t v12 = sub_24D8C0674((uint64_t)v11, a1, 9);
    uint64_t v14 = v13;
    char v16 = v15;
    swift_bridgeObjectRelease();
    if (!v2)
    {
      uint64_t v17 = v12;
      char v34 = v16;
      id v18 = a1;
      unint64_t v19 = sub_24D3FAE2C(v18, 6);
      char v21 = v20;

      id v22 = objc_msgSend(v18, sel_unsignedLongAtIndex_, 8);
      sub_24D83C8FC(v10);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26986F130);
      uint64_t v23 = swift_dynamicCastMetatype();
      if (v23)
      {
        unint64_t v41 = v19;
        char v42 = v21;
        uint64_t v24 = (*(uint64_t (**)(unint64_t *, id, id, id))(v23 + 592))(&v41, v35, v6, v22);
        unint64_t v25 = *(void **)(v24 + 96);
        uint64_t v26 = *(void **)(v24 + 104);
        *(void *)(v24 + 96) = v17;
        *(void *)(v24 + 104) = v14;
        char v27 = *(unsigned char *)(v24 + 112);
        *(unsigned char *)(v24 + 112) = v34;
        sub_24D3E380C(v25, v26, v27);
        char v28 = *(unsigned char *)(v39 + 24);
        uint64_t v43 = &type metadata for SQLItemJobID;
        unint64_t v44 = sub_24D5A2F5C();
        unint64_t v41 = (unint64_t)v38;
        char v42 = v28;
        sub_24D5A2FB0((uint64_t)&v41, (uint64_t)v40);
        swift_beginAccess();
        swift_retain();
        sub_24D5A3018((uint64_t)v40, v24 + 56);
        swift_endAccess();
        swift_release();
        id v29 = v45;
        BOOL v30 = v45 == (id)0x7FFFFFFFFFFFFFFFLL;
        BOOL v31 = v45 == (id)0x7FFFFFFFFFFFFFFFLL;
        id v32 = v37;
        if (v45 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          id v32 = 0;
          id v29 = 0;
        }
        *(void *)uint64_t v36 = v24;
        *(void *)(v36 + 8) = v32;
        id v33 = v7;
        if (v30) {
          id v33 = 0;
        }
        *(void *)(v36 + 16) = v29;
        *(void *)(v36 + 24) = v33;
        *(unsigned char *)(v36 + 32) = v31;
      }
      else
      {
        sub_24DCCA978();
        __break(1u);
      }
    }
  }
}

uint64_t sub_24D596798@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v39 = objc_msgSend(a1, sel_longAtIndex_, 0);
  id v5 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  id v6 = objc_msgSend(a1, sel_longAtIndex_, 2);
  id v7 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  id v8 = objc_msgSend(a1, sel_longAtIndex_, 4);
  id v38 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  char v9 = sub_24DB1B818((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v9 == 70)
  {
    sub_24D511F64();
    swift_allocError();
    *char v10 = 0;
    return swift_willThrow();
  }
  else
  {
    char v12 = v9;
    uint64_t v34 = a2;
    id v35 = v6;
    id v36 = v5;
    id v37 = v8;
    uint64_t v13 = sub_24D786AD8();
    uint64_t v14 = sub_24D8C0674((uint64_t)v13, a1, 9);
    uint64_t v16 = v15;
    char v18 = v17;
    uint64_t result = swift_bridgeObjectRelease();
    if (!v2)
    {
      char v32 = v18;
      id v19 = a1;
      id v20 = objc_msgSend(v19, sel_stringAtIndex_, 6);
      id v33 = v7;
      if (!v20)
      {
        sub_24DCC97E8();
        id v20 = (id)sub_24DCC97B8();
        swift_bridgeObjectRelease();
      }

      id v21 = objc_msgSend(v19, sel_unsignedLongAtIndex_, 8);
      sub_24D83C910(v12);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26986F580);
      uint64_t v22 = swift_dynamicCastMetatype();
      if (v22)
      {
        id v41 = v20;
        uint64_t v23 = *(uint64_t (**)(id *, id, id, id))(v22 + 592);
        id v24 = v20;
        uint64_t v25 = v23(&v41, v36, v35, v21);
        uint64_t v26 = *(void **)(v25 + 96);
        char v27 = *(void **)(v25 + 104);
        *(void *)(v25 + 96) = v14;
        *(void *)(v25 + 104) = v16;
        char v28 = *(unsigned char *)(v25 + 112);
        *(unsigned char *)(v25 + 112) = v32;
        sub_24D3E380C(v26, v27, v28);

        LOBYTE(v24) = *(unsigned char *)(v45 + 24);
        uint64_t v43 = &type metadata for SQLItemJobID;
        unint64_t v44 = sub_24D5A2F5C();
        id v41 = v39;
        char v42 = (char)v24;
        sub_24D5A2FB0((uint64_t)&v41, (uint64_t)v40);
        swift_beginAccess();
        swift_retain();
        sub_24D5A3018((uint64_t)v40, v25 + 56);
        swift_endAccess();
        uint64_t result = swift_release();
        id v30 = v37;
        id v29 = v38;
        if (v37 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          id v29 = 0;
          id v30 = 0;
        }
        *(void *)uint64_t v34 = v25;
        *(void *)(v34 + 8) = v29;
        id v31 = v33;
        if (v37 == (id)0x7FFFFFFFFFFFFFFFLL) {
          id v31 = 0;
        }
        *(void *)(v34 + 16) = v30;
        *(void *)(v34 + 24) = v31;
        *(unsigned char *)(v34 + 32) = v37 == (id)0x7FFFFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t result = sub_24DCCA978();
        __break(1u);
      }
    }
  }
  return result;
}

void sub_24D596AD8(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v52 = a2;
  uint64_t v50 = (void *)*v2;
  uint64_t v5 = v50[10];
  uint64_t v60 = v50[12];
  uint64_t v53 = v5;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v51 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  id v8 = (char *)&v39 - v7;
  id v49 = objc_msgSend(a1, sel_longAtIndex_, 0);
  id v48 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 1);
  id v9 = objc_msgSend(a1, sel_longAtIndex_, 2);
  id v10 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 3);
  id v11 = objc_msgSend(a1, sel_longAtIndex_, 4);
  id v12 = objc_msgSend(a1, sel_unsignedLongAtIndex_, 5);
  char v13 = sub_24DB1B818((uint64_t)objc_msgSend(a1, sel_longAtIndex_, 7));
  if (v13 == 70)
  {
    sub_24D511F64();
    swift_allocError();
    *uint64_t v14 = 0;
    swift_willThrow();
  }
  else
  {
    char v15 = v13;
    uint64_t v42 = (uint64_t)v9;
    uint64_t v43 = (uint64_t)v12;
    uint64_t v47 = v8;
    uint64_t v46 = AssociatedTypeWitness;
    id v44 = v11;
    uint64_t v45 = (uint64_t)v10;
    uint64_t v16 = sub_24D786AD8();
    char v17 = v54;
    char v18 = sub_24D8C0674((uint64_t)v16, a1, 9);
    id v20 = v19;
    int v22 = v21;
    swift_bridgeObjectRelease();
    if (!v17)
    {
      id v39 = v18;
      uint64_t v40 = v20;
      int v41 = v22;
      uint64_t v23 = v53;
      uint64_t v24 = v46;
      uint64_t v54 = *(void (**)(void))(*(void *)(swift_getAssociatedConformanceWitness() + 40) + 16);
      id v25 = a1;
      uint64_t v26 = (uint64_t)v47;
      v54();
      id v27 = objc_msgSend(v25, sel_unsignedLongAtIndex_, 8);
      char v28 = v15;
      id v29 = v39;
      id v30 = v40;
      char v31 = v41;
      uint64_t v32 = sub_24D5A2410(v28, v39, v40, v41, v26, (uint64_t)v48, v42, (uint64_t)v27, v23, v50[11], v60, v50[13]);
      sub_24D3E380C(v29, v30, v31);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v26, v24);
      LOBYTE(v24) = *((unsigned char *)v3 + 24);
      uint64_t v58 = &type metadata for SQLItemJobID;
      unint64_t v59 = sub_24D5A2F5C();
      id v56 = v49;
      char v57 = v24;
      sub_24D5A2FB0((uint64_t)&v56, (uint64_t)v55);
      swift_beginAccess();
      swift_retain();
      sub_24D5A3018((uint64_t)v55, v32 + 56);
      swift_endAccess();
      swift_release();
      uint64_t v33 = (uint64_t)v44;
      BOOL v34 = v44 == (id)0x7FFFFFFFFFFFFFFFLL;
      BOOL v35 = v44 == (id)0x7FFFFFFFFFFFFFFFLL;
      uint64_t v36 = v43;
      if (v44 == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        uint64_t v36 = 0;
        uint64_t v33 = 0;
      }
      id v37 = v52;
      *uint64_t v52 = v32;
      v37[1] = v36;
      uint64_t v38 = v45;
      if (v34) {
        uint64_t v38 = 0;
      }
      v37[2] = v33;
      v37[3] = v38;
      *((unsigned char *)v37 + 32) = v35;
    }
  }
}

uint64_t sub_24D596F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t, uint64_t, void), uint64_t a6)
{
  int v41 = a5;
  uint64_t v42 = a6;
  uint64_t v47 = a2;
  uint64_t v48 = a4;
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v8 = sub_24DCC8FC8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  id v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1990B0);
  uint64_t v13 = MEMORY[0x270FA5388](v12 - 8);
  char v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  char v17 = (char *)&v40 - v16;
  uint64_t v18 = type metadata accessor for Signpost(0);
  MEMORY[0x270FA5388](v18);
  uint64_t v50 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B1990F8 != -1) {
    swift_once();
  }
  id v20 = (void *)qword_26B1A23B0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v17, 1, 1, v8);
  sub_24D415FD0((uint64_t)v17, (uint64_t)v15, &qword_26B1990B0);
  int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8);
  uint64_t v49 = v6;
  if (v21 == 1)
  {
    id v22 = v20;
    sub_24DCC8FA8();
    sub_24D415F74((uint64_t)v15, &qword_26B1990B0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v15, v8);
  }
  uint64_t v23 = v50;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v50, v11, v8);
  uint64_t v43 = *(int *)(v18 + 20);
  *(void *)&v23[v43] = v20;
  uint64_t v24 = &v23[*(int *)(v18 + 24)];
  *(void *)uint64_t v24 = "SQLDB: Fetch Jobs";
  *((void *)v24 + 1) = 17;
  id v44 = v24;
  v24[16] = 2;
  id v25 = v20;
  sub_24DCCA2D8();
  sub_24DCC8F98();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_24D415F74((uint64_t)v17, &qword_26B1990B0);
  uint64_t v26 = v49;
  id v27 = *(void **)(v49 + 16);
  char v28 = (void *)swift_allocObject();
  uint64_t v29 = v45;
  v28[2] = v26;
  void v28[3] = v29;
  uint64_t v30 = v46;
  v28[4] = v48;
  v28[5] = v30;
  v28[6] = v47;
  char v31 = (void *)swift_allocObject();
  v31[2] = sub_24D5A3A2C;
  v31[3] = v28;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v31;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_252;
  uint64_t v32 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v33 = objc_msgSend(v27, sel_fetchSwift_error_, v32, aBlock);
  _Block_release(v32);
  id v34 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v33)
  {
    if (objc_msgSend(v33, sel_next))
    {
      uint64_t v36 = v41;
      while (1)
      {
        id v37 = (void *)MEMORY[0x253329610]();
        sub_24D5978AC(v26, v33, v36);
        if (v7) {
          break;
        }
        if ((objc_msgSend(v33, sel_next) & 1) == 0) {
          goto LABEL_15;
        }
      }
    }
LABEL_15:
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  sub_24DCCA2C8();
  uint64_t v38 = (uint64_t)v50;
  sub_24DCC8F98();
  sub_24D5A2F00(v38);
  return swift_release();
}

uint64_t sub_24D59749C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  a5(a1);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24D597670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t))
{
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (a4)
  {
    v10[2] = a3;
    v10[3] = a4;
    swift_bridgeObjectRetain();
    sub_24D59780C(v10);
    swift_bridgeObjectRelease();
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  a5(a1);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_24D59780C@<X0>(void *a1@<X8>)
{
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  uint64_t result = sub_24DCC9968();
  *a1 = 0x2044455845444E49;
  a1[1] = 0xEB00000000205942;
  return result;
}

void sub_24D5978AC(uint64_t a1, void *a2, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, void))
{
  sub_24D596AD8(a2, v5);
  if (!v3)
  {
    a3(v5[0], v5[1], v5[2], v5[3], v6);
    swift_release();
  }
}

uint64_t sub_24D597930(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = 0;
  uint64_t v7 = a1;
  uint64_t v8 = a2;
  v5[2] = &v9;
  sub_24D596F48((uint64_t)sub_24D5A39A0, (uint64_t)v6, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A39A8, (uint64_t)v5);
  uint64_t v3 = v9;
  if (v2) {
    swift_release();
  }
  return v3;
}

uint64_t sub_24D5979BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_24D597A24(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(*(void *)v2 + 88);
  uint64_t v7 = *(void *)(*(void *)v2 + 96);
  uint64_t v8 = *(void *)(*(void *)v2 + 104);
  uint64_t v20 = *(void *)(*(void *)v2 + 80);
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v8;
  type metadata accessor for ItemJob();
  uint64_t v24 = sub_24DCC9C98();
  uint64_t v14 = v20;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  v11[2] = &v24;
  uint64_t v12 = v2;
  sub_24D596F48((uint64_t)sub_24D5A3970, (uint64_t)v13, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A3980, (uint64_t)v11);
  uint64_t v9 = v24;
  if (v3) {
    swift_bridgeObjectRelease();
  }
  return v9;
}

uint64_t sub_24D597B54(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v6 = *(void (**)(void *, uint64_t, uint64_t))(v5 + 32);
  uint64_t v7 = swift_checkMetadataState();
  v6(a1, v7, v5);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B197990 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
  sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  if (a3)
  {
    *(void *)(swift_allocObject() + 16) = a1;
    swift_bridgeObjectRetain_n();
    id v8 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908A0);
    sub_24D3E4A9C(&qword_26B1940D8, &qword_26B1908A0);
    sub_24DCC9B28();
    swift_release();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return 0x2064695F6D657469;
}

uint64_t sub_24D597F0C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) == 0)
  {
    sub_24D5A2620(a1, a4, a2, a3);
    sub_24DCC9D08();
  }
  return 0;
}

uint64_t sub_24D597FF4(uint64_t a1, int a2, uint64_t a3)
{
  int v38 = a2;
  uint64_t v46 = *MEMORY[0x263EF8340];
  id v37 = (void *)*v3;
  uint64_t v6 = v37[10];
  uint64_t v36 = v37[12];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v34 - v10;
  id v39 = (id)v3[2];
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v34 - v10, a1, AssociatedTypeWitness);
  unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = v12 + v9;
  uint64_t v35 = a3;
  if (!a3)
  {
    uint64_t v26 = (char *)swift_allocObject();
    *((void *)v26 + 2) = v6;
    id v27 = v37;
    uint64_t v28 = v36;
    *((void *)v26 + 3) = v37[11];
    *((void *)v26 + 4) = v28;
    *((void *)v26 + 5) = v27[13];
    *((void *)v26 + 6) = v3;
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    unsigned __int8 v17 = v8 + 32;
    v29(&v26[v12], v11, AssociatedTypeWitness);
    v26[v13] = v38;
    uint64_t v30 = swift_allocObject();
    *(void *)(v30 + 16) = sub_24D5A38B0;
    *(void *)(v30 + 24) = v26;
    id v44 = sub_24D3E3980;
    uint64_t v45 = v30;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v41 = 1107296256;
    uint64_t v42 = sub_24D3E38DC;
    uint64_t v43 = &block_descriptor_238;
    char v31 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    id v21 = objc_msgSend(v39, sel_fetchSwift_error_, v31, &aBlock);
    _Block_release(v31);
    id v22 = aBlock;
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      if (v21)
      {
        id v25 = 0;
        uint64_t v24 = sub_24D5A38B0;
        goto LABEL_8;
      }
LABEL_9:
      sub_24DCC8828();

      swift_willThrow();
      swift_release();
      return v17 & 1;
    }
LABEL_12:
    __break(1u);
  }
  uint64_t v14 = (char *)swift_allocObject();
  *((void *)v14 + 2) = v6;
  uint64_t v15 = v37;
  uint64_t v16 = v36;
  *((void *)v14 + 3) = v37[11];
  *((void *)v14 + 4) = v16;
  *((void *)v14 + 5) = v15[13];
  *((void *)v14 + 6) = v3;
  uint64_t v18 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  unsigned __int8 v17 = v8 + 32;
  v18(&v14[v12], v11, AssociatedTypeWitness);
  v14[v13] = v38;
  *(void *)&v14[(v13 & 0xFFFFFFFFFFFFFFF8) + 8] = v35;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_24D5A36FC;
  *(void *)(v19 + 24) = v14;
  id v44 = sub_24D3E3980;
  uint64_t v45 = v19;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v41 = 1107296256;
  uint64_t v42 = sub_24D3E38DC;
  uint64_t v43 = &block_descriptor_228;
  uint64_t v20 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v21 = objc_msgSend(v39, sel_fetchSwift_error_, v20, &aBlock);
  _Block_release(v20);
  id v22 = aBlock;
  char v23 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v23)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (!v21) {
    goto LABEL_9;
  }
  uint64_t v24 = 0;
  id v25 = sub_24D5A36FC;
LABEL_8:
  unsigned __int8 v17 = objc_msgSend(v21, sel_next);

  sub_24D43DD74((uint64_t)v24);
  sub_24D43DD74((uint64_t)v25);
  return v17 & 1;
}

uint64_t sub_24D59852C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v13 = 0;
  uint64_t v14 = (uint64_t (*)())0xE000000000000000;
  sub_24DCCA728();
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32);
  uint64_t v8 = swift_checkMetadataState();
  v7(a1, v8, v6);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v9 = qword_24DCD5980[a4];
  uint64_t v16 = MEMORY[0x263F8D6C8];
  uint64_t v13 = v9;
  sub_24D3E3EB4((uint64_t)&v13);
  uint64_t v11 = v10;
  sub_24D415F74((uint64_t)&v13, qword_26B197F50);
  if (v11)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    if (qword_26B197990 != -1) {
      swift_once();
    }
    uint64_t v13 = qword_26B1A24B8;
    uint64_t v14 = sub_24DAFB0AC;
    uint64_t v15 = 0;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
    sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
    sub_24D3F0EB8();
    sub_24DCC9B28();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    sub_24DCCAD78();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    return v17;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D598910(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v20 = 0;
  id v21 = (uint64_t (*)())0xE000000000000000;
  sub_24DCCA728();
  uint64_t v24 = 0;
  unint64_t v25 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = qword_24DCD5980[a4];
  uint64_t v23 = MEMORY[0x263F8D6C8];
  uint64_t v20 = v11;
  sub_24D3E3EB4((uint64_t)&v20);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)&v20, qword_26B197F50);
  if (!v13) {
    goto LABEL_7;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B197990 != -1) {
    swift_once();
  }
  uint64_t v20 = qword_26B1A24B8;
  id v21 = sub_24DAFB0AC;
  uint64_t v22 = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
  sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v14 = MEMORY[0x263F8D9D0];
  uint64_t v23 = MEMORY[0x263F8D9D0];
  uint64_t v20 = a5;
  sub_24D3E3EB4((uint64_t)&v20);
  uint64_t v16 = v15;
  sub_24D415F74((uint64_t)&v20, qword_26B197F50);
  if (!v16) {
    goto LABEL_7;
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v23 = v14;
  uint64_t v20 = a5;
  sub_24D3E3EB4((uint64_t)&v20);
  uint64_t v18 = v17;
  sub_24D415F74((uint64_t)&v20, qword_26B197F50);
  if (v18)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    return v24;
  }
  else
  {
LABEL_7:
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D598D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v3 + 80);
  if (!v6 || (uint64_t v10 = swift_retain(), v11 = v6(v10), sub_24D43DD74((uint64_t)v6), !v11))
  {
    long long v17 = *(_OWORD *)(v5 + 96);
    long long v29 = *(_OWORD *)(v5 + 80);
    long long v30 = v17;
    type metadata accessor for SchedulableJob();
    return sub_24DCC9C98();
  }
  long long v12 = *(_OWORD *)(v5 + 96);
  long long v29 = *(_OWORD *)(v5 + 80);
  long long v30 = v12;
  type metadata accessor for SchedulableJob();
  uint64_t v31 = sub_24DCC9C98();
  uint64_t v13 = sub_24D59006C((void (*)(uint64_t *__return_ptr, uint64_t))sub_24D5A3584, v3, a1);
  uint64_t v14 = sub_24D58F340((uint64_t)v13);
  uint64_t v15 = swift_bridgeObjectRelease();
  if (*(unsigned char *)(v3 + 24) == 1)
  {
    uint64_t v15 = sub_24D597930((uint64_t)sub_24D5A35D0, v11);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    if (v15)
    {
      uint64_t v18 = v15;
      uint64_t v19 = v15 + 56;
      swift_beginAccess();
      sub_24D415FD0(v19, (uint64_t)&v29, &qword_26B1937B8);
      if (*((void *)&v30 + 1))
      {
        swift_retain();
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B0);
        if ((swift_dynamicCast() & 1) != 0 && (sub_24D82CEC0(v28, v14) & 1) == 0)
        {
          *(void *)&long long v29 = sub_24D57EDE4(v18);
          sub_24DCC9D48();
          sub_24DCC9D08();
          uint64_t v15 = swift_release();
        }
        else
        {
          uint64_t v15 = swift_release_n();
        }
      }
      else
      {
        swift_release();
        uint64_t v15 = sub_24D415F74((uint64_t)&v29, &qword_26B1937B8);
      }
    }
  }
  if (a2 >= 1)
  {
    uint64_t v20 = MEMORY[0x270FA5388](v15);
    uint64_t v26 = v14;
    uint64_t v27 = a2;
    MEMORY[0x270FA5388](v20);
    unint64_t v25 = &v31;
    uint64_t v15 = sub_24D596F48((uint64_t)sub_24D5A35A8, v21, 0xD000000000000020, 0x800000024DCFEC50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A35B0, (uint64_t)v24);
    if (v4)
    {
      swift_bridgeObjectRelease();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  if (a3 < 1)
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v22 = MEMORY[0x270FA5388](v15);
    uint64_t v26 = v14;
    uint64_t v27 = a3;
    MEMORY[0x270FA5388](v22);
    unint64_t v25 = &v31;
    sub_24D596F48((uint64_t)sub_24D5A35A0, v23, 0xD000000000000020, 0x800000024DCFEC50, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A3F38, (uint64_t)v24);
    swift_bridgeObjectRelease();
    swift_release();
    if (v4) {
      return swift_bridgeObjectRelease();
    }
  }
  return v31;
}

uint64_t sub_24D599198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_24D433858(a1, (uint64_t)v8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B0);
  uint64_t result = swift_dynamicCast();
  if ((result & 1) != 0 && v7 == *(unsigned char *)(a2 + 24))
  {
    *(void *)a3 = v6;
    *(unsigned char *)(a3 + 8) = 0;
  }
  else
  {
    *(void *)a3 = 0;
    *(unsigned char *)(a3 + 8) = 1;
  }
  return result;
}

uint64_t sub_24D599234(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v5 = (char *)&v8 - v4;
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_24DCCA728();
  sub_24DCC9968();
  sub_24DBB275C();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 40) + 32))(a1, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, AssociatedTypeWitness);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v9 = 27;
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v9 = 1;
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_24D5994A0(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B193878 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908A0);
  sub_24D3E4A9C(&qword_26B1940D8, &qword_26B1908A0);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (*(void *)(a2 + 16))
  {
    sub_24DCCA728();
    swift_bridgeObjectRelease();
    *(void *)(swift_allocObject() + 16) = a1;
    swift_bridgeObjectRetain();
    id v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908C0);
    sub_24D3E4A9C((unint64_t *)&unk_26B194108, &qword_26B1908C0);
    sub_24DCC9B28();
    swift_release();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v7 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24D59986C(void *a1, uint64_t a2, uint64_t a3)
{
  sub_24DCCA728();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B190340 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908A0);
  sub_24D3E4A9C(&qword_26B1940D8, &qword_26B1908A0);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (*(void *)(a2 + 16))
  {
    sub_24DCCA728();
    swift_bridgeObjectRelease();
    *(void *)(swift_allocObject() + 16) = a1;
    swift_bridgeObjectRetain();
    id v6 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908C0);
    sub_24D3E4A9C((unint64_t *)&unk_26B194108, &qword_26B1908C0);
    sub_24DCC9B28();
    swift_release();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v7 = objc_msgSend(a1, sel_bindLongParameter_, a3);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24D599C38(uint64_t a1)
{
  return 0;
}

uint64_t sub_24D599CE8(uint64_t a1, char a2)
{
  long long v6 = *(_OWORD *)(*(void *)v2 + 96);
  v15[0] = *(_OWORD *)(*(void *)v2 + 80);
  v15[1] = v6;
  uint64_t v7 = type metadata accessor for ItemJob();
  uint64_t v16 = sub_24DCC9C98();
  *(void *)&v15[0] = 0;
  BYTE8(v15[0]) = 1;
  uint64_t v12 = a1;
  char v13 = a2 & 1;
  uint64_t v14 = 100;
  v10[2] = &v16;
  v10[3] = v15;
  sub_24D596F48((uint64_t)sub_24D5A3554, (uint64_t)v11, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A3564, (uint64_t)v10);
  if (!v3)
  {
    uint64_t v2 = v16;
    uint64_t v8 = swift_bridgeObjectRetain();
    MEMORY[0x253327D80](v8, v7);
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_24D599E38(void *a1, uint64_t a2, char a3)
{
  sub_24DCCA728();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if ((a3 & 1) == 0)
  {
    id v6 = a1;
    id v7 = objc_msgSend(v6, sel_bindLongParameter_, a2, 0x203E204449776F72, 0xE800000000000000);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
  }
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_24D59A050(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9 = *a1;
  swift_retain();
  long long v10 = *(_OWORD *)(v9 + 560);
  long long v15 = *(_OWORD *)(v9 + 544);
  long long v16 = v10;
  type metadata accessor for ItemJob();
  sub_24DCC9D48();
  sub_24DCC9D08();
  swift_beginAccess();
  sub_24D415FD0((uint64_t)(a1 + 7), (uint64_t)&v15, &qword_26B1937B8);
  if (!*((void *)&v16 + 1))
  {
    sub_24D415F74((uint64_t)&v15, &qword_26B1937B8);
    goto LABEL_5;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B0);
  if (!swift_dynamicCast())
  {
LABEL_5:
    uint64_t v12 = 0;
    char v11 = 1;
    goto LABEL_6;
  }
  char v11 = 0;
  uint64_t v12 = v14;
LABEL_6:
  *(void *)a7 = v12;
  *(unsigned char *)(a7 + 8) = v11;
  return 0;
}

void *sub_24D59A17C()
{
  uint64_t v2 = v1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(v0 + 16);
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 100;
  uint64_t v5 = (void *)swift_allocObject();
  v5[2] = sub_24D5A353C;
  v5[3] = v4;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v5;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_208;
  id v6 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v7 = objc_msgSend(v3, sel_fetchSwift_error_, v6, aBlock);
  _Block_release(v6);
  id v8 = aBlock[0];
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
  uint64_t v9 = swift_release();
  if (v6) {
    __break(1u);
  }
  if (v7)
  {
    MEMORY[0x270FA5388](v9);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    char v11 = sub_24D734D78();
    if (!v1)
    {
      uint64_t v2 = v11;
      MEMORY[0x253327D80](v11, AssociatedTypeWitness);
    }
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v2;
}

uint64_t sub_24D59A434()
{
  return 0;
}

void *sub_24D59A5CC(uint64_t a1)
{
  uint64_t v3 = v2;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v5 = *(void **)(v1 + 16);
  id v6 = (void *)swift_allocObject();
  v6[2] = v1;
  void v6[3] = a1;
  v6[4] = 100;
  id v7 = (void *)swift_allocObject();
  void v7[2] = sub_24D5A3510;
  v7[3] = v6;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v7;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_198;
  id v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v9 = objc_msgSend(v5, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  id v10 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t v12 = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v9)
  {
    MEMORY[0x270FA5388](v12);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v14 = sub_24D734D78();
    if (!v2)
    {
      uint64_t v3 = v14;
      MEMORY[0x253327D80](v14, AssociatedTypeWitness);
    }
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v3;
}

uint64_t sub_24D59A898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v10[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v11 = 0;
  unint64_t v12 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v6 = MEMORY[0x263F8D6C8];
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  v10[3] = v6;
  v10[0] = a3;
  sub_24D3E3EB4((uint64_t)v10);
  uint64_t v8 = v7;
  sub_24D415F74((uint64_t)v10, qword_26B197F50);
  if (v8)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    v10[0] = a4;
    sub_24DCCAD78();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v11;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

void *sub_24D59ABBC(char a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = v5;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v11 = *(void **)(v4 + 16);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v4;
  *(unsigned char *)(v12 + 24) = a1;
  *(void *)(v12 + 32) = a2;
  *(unsigned char *)(v12 + 40) = a3 & 1;
  *(void *)(v12 + 48) = a4;
  char v13 = (void *)swift_allocObject();
  v13[2] = sub_24D5A34C4;
  v13[3] = v12;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v13;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_188;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v15 = objc_msgSend(v11, sel_fetchSwift_error_, v14, aBlock);
  _Block_release(v14);
  id v16 = aBlock[0];
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation();
  uint64_t v17 = swift_release();
  if (a2) {
    __break(1u);
  }
  if (v15)
  {
    MEMORY[0x270FA5388](v17);
    swift_getAssociatedTypeWitness();
    uint64_t v6 = sub_24D734D78();
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v6;
}

uint64_t sub_24D59AE78(void *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6)
{
  v17[0] = 0;
  v17[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v18 = 0;
  unint64_t v19 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = qword_24DCD5980[a3];
  v17[3] = MEMORY[0x263F8D6C8];
  v17[0] = v11;
  sub_24D3E3EB4((uint64_t)v17);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v17, qword_26B197F50);
  if (v13)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    v17[0] = 0;
    sub_24DCCAD78();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v14 = a1;
    sub_24D5A26FC(a4, a5 & 1);

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v15 = objc_msgSend(v14, sel_bindLongParameter_, a6);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v18;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59B11C@<X0>(uint64_t *a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  v8[1] = 0xE000000000000000;
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  unint64_t v9 = 0xD000000000000022;
  unint64_t v10 = 0x800000024DCFEA90;
  id v8[3] = MEMORY[0x263F8D6C8];
  v8[0] = v3;
  sub_24D3E3EB4((uint64_t)v8);
  uint64_t v5 = v4;
  sub_24D415F74((uint64_t)v8, qword_26B197F50);
  if (v5)
  {
    sub_24DCC9968();
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t v7 = v10;
    *a2 = v9;
    a2[1] = v7;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59B244(void *a1, uint64_t a2)
{
  uint64_t v40 = a1;
  uint64_t v51 = *MEMORY[0x263EF8340];
  uint64_t v5 = *v2;
  uint64_t v6 = *(id (**)(uint64_t, void *))(*v2 + 96);
  uint64_t v43 = *(void **)(*v2 + 80);
  id v44 = v6;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v42 = (char *)&v34 - v9;
  unint64_t v10 = (uint64_t (*)(uint64_t))v2[10];
  if (!v10) {
    goto LABEL_11;
  }
  uint64_t v39 = a2;
  uint64_t v35 = v3;
  uint64_t v11 = v2;
  uint64_t v12 = swift_retain();
  uint64_t v13 = v10(v12);
  sub_24D43DD74((uint64_t)v10);
  if (!v13) {
    goto LABEL_12;
  }
  uint64_t v37 = *(void *)(v13 + 32);
  swift_retain();
  swift_release();
  uint64_t v14 = *(void *)(v5 + 88);
  id v15 = *(void **)(v5 + 104);
  id aBlock = v43;
  uint64_t v46 = v14;
  uint64_t v47 = v44;
  uint64_t v48 = v15;
  type metadata accessor for SQLSnapshot();
  uint64_t v36 = swift_dynamicCastClassUnconditional();
  id v38 = (id)v2[2];
  uint64_t v16 = AssociatedTypeWitness;
  (*(void (**)(char *, void *, uint64_t))(v7 + 16))(v42, v40, AssociatedTypeWitness);
  unint64_t v17 = (*(unsigned __int8 *)(v7 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v18 = (v8 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (char *)swift_allocObject();
  uint64_t v20 = v42;
  *((void *)v19 + 2) = v43;
  *((void *)v19 + 3) = v14;
  uint64_t v34 = v14;
  *((void *)v19 + 4) = v44;
  *((void *)v19 + 5) = v15;
  uint64_t v40 = v15;
  uint64_t v21 = v39;
  *((void *)v19 + 6) = v11;
  *((void *)v19 + 7) = v21;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v19[v17], v20, v16);
  *(void *)&v19[v18] = v36;
  *(void *)&v19[(v18 + 15) & 0xFFFFFFFFFFFFFFF8] = 100;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_24D5A33A0;
  *(void *)(v22 + 24) = v19;
  uint64_t v49 = sub_24D3E3980;
  uint64_t v50 = v22;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v46 = 1107296256;
  uint64_t v47 = sub_24D3E38DC;
  uint64_t v48 = &block_descriptor_178;
  uint64_t v23 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v24 = objc_msgSend(v38, sel_fetchSwift_error_, v23, &aBlock);
  _Block_release(v23);
  id v25 = aBlock;
  uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  uint64_t v27 = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  if (v24)
  {
    MEMORY[0x270FA5388](v27);
    uint64_t v28 = v34;
    uint64_t v29 = v35;
    *(&v34 - 6) = (uint64_t)v43;
    *(&v34 - 5) = v28;
    uint64_t v30 = (uint64_t)v40;
    uint64_t v31 = AssociatedTypeWitness;
    *(&v34 - 4) = (uint64_t)v44;
    *(&v34 - 3) = v30;
    *(&v34 - 2) = (uint64_t)v24;
    uint64_t v32 = sub_24D734D78();
    if (v29)
    {
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t isEscapingClosureAtFileLocation = (uint64_t)v32;
      MEMORY[0x253327D80](v32, v31);
      swift_release();

      swift_release();
    }
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
    swift_release();
  }
  return isEscapingClosureAtFileLocation;
}

uint64_t sub_24D59B6F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v16[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v17 = 0;
  unint64_t v18 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v8 = MEMORY[0x263F8D6C8];
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  v16[3] = v8;
  v16[0] = a3;
  sub_24D3E3EB4((uint64_t)v16);
  uint64_t v10 = v9;
  sub_24D415F74((uint64_t)v16, qword_26B197F50);
  if (v10)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_getAssociatedTypeWitness();
    uint64_t v11 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    uint64_t v13 = swift_checkMetadataState();
    v12(a1, v13, v11);
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    sub_24D940200();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    v16[0] = a6;
    sub_24DCCAD78();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v17;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59BAD8(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  return (*(uint64_t (**)(void *, void, uint64_t, uint64_t))(v3 + 16))(a1, 0, AssociatedTypeWitness, v3);
}

uint64_t sub_24D59BB98()
{
  long long v2 = *(_OWORD *)(*(void *)v0 + 96);
  long long v6 = *(_OWORD *)(*(void *)v0 + 80);
  long long v7 = v2;
  type metadata accessor for TestingOperation();
  uint64_t v8 = sub_24DCC9C98();
  v5[2] = &v8;
  sub_24D596F48((uint64_t)sub_24D59BC6C, 0, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A3270, (uint64_t)v5);
  uint64_t v3 = v8;
  if (v1) {
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_24D59BC6C()
{
  return 0;
}

uint64_t sub_24D59BD68(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 544);
  uint64_t v4 = *(void *)(*(void *)a1 + 552);
  uint64_t v5 = *(void *)(*(void *)a1 + 560);
  uint64_t v6 = *(void *)(*(void *)a1 + 568);
  uint64_t v7 = type metadata accessor for TestingOperation();
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  type metadata accessor for Ingestion.FetchItemMetadata();
  if (!swift_dynamicCastClass())
  {
    uint64_t v13 = v3;
    uint64_t v14 = v4;
    uint64_t v15 = v5;
    uint64_t v16 = v6;
    type metadata accessor for Ingestion.FetchChildrenMetadata();
    if (!swift_dynamicCastClass()) {
      sub_24DA89268((uint64_t (*)(uint64_t))sub_24D5A3290, a1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLItemJobRegistry.swift", 137, 2, 708);
    }
  }
  uint64_t v10 = a1 + *(void *)(v2 + 576);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(v9, v10, AssociatedTypeWitness);
  uint64_t v13 = v3;
  uint64_t v14 = v4;
  uint64_t v15 = v5;
  uint64_t v16 = v6;
  type metadata accessor for DirectionalTestingOperation();
  swift_storeEnumTagMultiPayload();
  swift_storeEnumTagMultiPayload();
  sub_24DCC9D48();
  sub_24DCC9D08();
  return 0;
}

uint64_t sub_24D59C02C()
{
  return 0;
}

uint64_t sub_24D59C120()
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)swift_allocObject();
  unsigned __int8 v3 = v2;
  v2[2] = sub_24D5A3258;
  v2[3] = v0;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_168;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  id v6 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v5)
  {
    unsigned __int8 v3 = objc_msgSend(v5, sel_next);
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

void sub_24D59C2EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(a2 + 80);
  if (!v2)
  {
    __break(1u);
    goto LABEL_10;
  }
  uint64_t v3 = swift_retain();
  uint64_t v4 = v2(v3);
  uint64_t v5 = sub_24D43DD74((uint64_t)v2);
  if (!v4)
  {
LABEL_10:
    __break(1u);
    return;
  }
  char v6 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 152))(v5);
  swift_release();
  sub_24DCCA728();
  if (v6 < 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_24DCC9968();
    sub_24DCCAD78();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
  }
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B194628 != -1) {
    swift_once();
  }
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
  sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
}

uint64_t sub_24D59C71C(char a1)
{
  uint64_t v2 = v1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(unsigned char *)(v5 + 24) = a1;
  char v6 = (void *)swift_allocObject();
  unsigned __int8 v7 = v6;
  v6[2] = sub_24D5A323C;
  void v6[3] = v5;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_161;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v9 = objc_msgSend(v4, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  id v10 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v9)
  {
    unsigned __int8 v7 = objc_msgSend(v9, sel_next);
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v7 & 1;
}

uint64_t sub_24D59C918(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  v9[0] = 2;
  uint64_t v4 = MEMORY[0x263F8D6C8];
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = qword_24DCD5980[a3];
  v9[3] = v4;
  v9[0] = v5;
  sub_24D3E3EB4((uint64_t)v9);
  uint64_t v7 = v6;
  sub_24D415F74((uint64_t)v9, qword_26B197F50);
  if (v7)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    return v10;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

char *sub_24D59CAF8(char a1, uint64_t a2, char a3)
{
  uint64_t v4 = v3;
  LOBYTE(v5) = a1;
  uint64_t v22 = *MEMORY[0x263EF8340];
  id v6 = (id)*((void *)v3 + 2);
  if ((a3 & 1) == 0 && a2 <= 100)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = v4;
    *(unsigned char *)(v8 + 24) = (_BYTE)v5;
    *(void *)(v8 + 32) = a2;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = sub_24D5A321C;
    *(void *)(v9 + 24) = v8;
    uint64_t v20 = sub_24D3E3980;
    uint64_t v21 = v9;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v17 = 1107296256;
    unint64_t v18 = sub_24D3E38DC;
    unint64_t v19 = &block_descriptor_151;
    uint64_t v10 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    id aBlock = 0;
    id v6 = objc_msgSend(v6, sel_fetchSwift_error_, v10, &aBlock);
    _Block_release(v10);
    uint64_t v4 = (char *)aBlock;
    LOBYTE(v10) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (v10)
    {
      __break(1u);
LABEL_19:
      __break(1u);
    }
    if (!v6)
    {
LABEL_15:
      sub_24DCC8828();

      swift_willThrow();
      swift_release();
      return v4;
    }
    uint64_t v4 = 0;
    uint64_t v5 = &selRef_createIndexerWithExtension_enabled_error_;
    do
    {
      if (!objc_msgSend(v6, sel_next)) {
        goto LABEL_14;
      }
    }
    while (!__OFADD__(v4++, 1));
    __break(1u);
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v4;
  *(unsigned char *)(v12 + 24) = (_BYTE)v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_24D5A31C8;
  *(void *)(v13 + 24) = v12;
  uint64_t v20 = sub_24D3E3980;
  uint64_t v21 = v13;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v17 = 1107296256;
  unint64_t v18 = sub_24D3E38DC;
  unint64_t v19 = &block_descriptor_141;
  uint64_t v14 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v6 = objc_msgSend(v6, sel_fetchSwift_error_, v14, &aBlock);
  _Block_release(v14);
  uint64_t v4 = (char *)aBlock;
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v14) {
    goto LABEL_19;
  }
  if (!v6) {
    goto LABEL_15;
  }
  if (objc_msgSend(v6, sel_next))
  {
    uint64_t v4 = (char *)objc_msgSend(v6, sel_longAtIndex_, 0);
LABEL_14:
    swift_release();
  }
  else
  {
    swift_release();

    return 0;
  }
  return v4;
}

uint64_t sub_24D59CE8C(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  v13[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  v13[0] = 2;
  uint64_t v7 = MEMORY[0x263F8D6C8];
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v8 = qword_24DCD5980[a3];
  v13[3] = v7;
  v13[0] = v8;
  sub_24D3E3EB4((uint64_t)v13);
  uint64_t v10 = v9;
  sub_24D415F74((uint64_t)v13, qword_26B197F50);
  if (v10)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v11 = objc_msgSend(a1, sel_bindLongParameter_, a4);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59D0C8(uint64_t a1, uint64_t a2, char a3)
{
  v9[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  v9[0] = 2;
  uint64_t v4 = MEMORY[0x263F8D6C8];
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = qword_24DCD5980[a3];
  v9[3] = v4;
  v9[0] = v5;
  sub_24D3E3EB4((uint64_t)v9);
  uint64_t v7 = v6;
  sub_24D415F74((uint64_t)v9, qword_26B197F50);
  if (v7)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v10;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59D294(char a1)
{
  uint64_t v2 = v1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(v1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(unsigned char *)(v5 + 24) = a1;
  uint64_t v6 = (void *)swift_allocObject();
  unsigned __int8 v7 = v6;
  v6[2] = sub_24D5A31AC;
  void v6[3] = v5;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_131_0;
  uint64_t v8 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v9 = objc_msgSend(v4, sel_fetchSwift_error_, v8, aBlock);
  _Block_release(v8);
  id v10 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v9)
  {
    unsigned __int8 v7 = objc_msgSend(v9, sel_next);
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v7 & 1;
}

uint64_t sub_24D59D490(uint64_t a1, uint64_t a2, char a3)
{
  sub_24DCCA728();
  uint64_t v9 = 0;
  unint64_t v10 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B197990 != -1) {
    swift_once();
  }
  void v8[4] = 40;
  v8[5] = 0xE100000000000000;
  v8[0] = qword_26B1A24B8;
  v8[1] = sub_24DAFB0AC;
  _OWORD v8[2] = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
  sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v4 = qword_24DCD5980[a3];
  id v8[3] = MEMORY[0x263F8D6C8];
  v8[0] = v4;
  sub_24D3E3EB4((uint64_t)v8);
  uint64_t v6 = v5;
  sub_24D415F74((uint64_t)v8, qword_26B197F50);
  if (v6)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    return v9;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59D748()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_24D43DD74(*(void *)(v0 + 80));
  return v0;
}

uint64_t sub_24D59D788()
{
  sub_24D59D748();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SQLItemJobRegistry()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D59D7D4(uint64_t a1)
{
  uint64_t v2 = v1;
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v4 = *(void **)(v1 + 16);
  objc_msgSend(v4, sel_assertOnQueue);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v2;
  *(void *)(v5 + 24) = a1;
  uint64_t v6 = (void *)swift_allocObject();
  v6[2] = sub_24D5A3088;
  void v6[3] = v5;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v6;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_90;
  unsigned __int8 v7 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  unsigned __int8 v8 = objc_msgSend(v4, sel_executeSwift_error_, v7, aBlock);
  _Block_release(v7);
  id v9 = aBlock[0];
  LOBYTE(v7) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v7) {
    __break(1u);
  }
  if ((v8 & 1) == 0)
  {
    sub_24DCC8828();

    swift_willThrow();
  }
  return swift_release();
}

uint64_t sub_24D59D9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v15[0] = 0;
  v15[1] = 0xE000000000000000;
  sub_24DCCA728();
  uint64_t v16 = 0;
  unint64_t v17 = 0xE000000000000000;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v5 = *(void **)(a3 + 96);
  uint64_t v6 = *(void **)(a3 + 104);
  char v7 = *(unsigned char *)(a3 + 112);
  sub_24D3F1C98(v5, v6, v7);
  sub_24D833860((unint64_t)v5, (unint64_t)v6, v7, 0x696C756465686373, 0xEB000000005F676ELL);
  sub_24D3E380C(v5, v6, v7);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(swift_getAssociatedConformanceWitness() + 40);
  id v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32);
  uint64_t v10 = swift_checkMetadataState();
  v9(a1, v10, v8);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v11 = qword_24DCD5980[(char)sub_24DB1702C()];
  v15[3] = MEMORY[0x263F8D6C8];
  v15[0] = v11;
  sub_24D3E3EB4((uint64_t)v15);
  uint64_t v13 = v12;
  sub_24D415F74((uint64_t)v15, qword_26B197F50);
  if (v13)
  {
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    return v16;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D59DCC8(uint64_t a1)
{
  uint64_t v40 = a1;
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 96);
  uint64_t v6 = *(void *)(*v1 + 104);
  uint64_t v41 = *(void *)(*v1 + 80);
  uint64_t v3 = v41;
  uint64_t v42 = v4;
  uint64_t v38 = v4;
  uint64_t v43 = v5;
  uint64_t v44 = v6;
  uint64_t v36 = v6;
  uint64_t v7 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v8 = MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v9;
  MEMORY[0x270FA5388](v8);
  uint64_t v45 = (char *)&v31 - v11;
  uint64_t v37 = v5;
  uint64_t v39 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t result = MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v16 = (uint64_t *)((char *)&v31 - v15);
  unint64_t v17 = (uint64_t (*)(uint64_t))v1[10];
  if (!v17)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v34 = v1;
  uint64_t v18 = swift_retain();
  uint64_t v19 = v17(v18);
  uint64_t result = sub_24D43DD74((uint64_t)v17);
  if (!v19)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  swift_retain();
  swift_release();
  sub_24DBB275C();
  swift_release();
  uint64_t v41 = v39;
  uint64_t v42 = v38;
  uint64_t v43 = v37;
  uint64_t v44 = v36;
  uint64_t v20 = type metadata accessor for PersistenceTrigger();
  uint64_t v21 = sub_24D566334(v16, v20);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v16, AssociatedTypeWitness);
  if (MEMORY[0x253327DC0](v21, v7))
  {
    uint64_t v22 = 0;
    uint64_t v23 = (uint64_t (**)(char *, char *, uint64_t))(v35 + 32);
    uint64_t v32 = (uint64_t (**)(char *, uint64_t))(v35 + 8);
    id v33 = (void (**)(char *, uint64_t *, uint64_t))(v35 + 16);
    do
    {
      char v24 = sub_24DCC9CB8();
      sub_24DCC9C68();
      if (v24)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v35 + 16))(v45, v21+ ((*(unsigned __int8 *)(v35 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80))+ *(void *)(v35 + 72) * v22, v7);
        uint64_t v25 = v22 + 1;
        if (__OFADD__(v22, 1)) {
          goto LABEL_13;
        }
      }
      else
      {
        uint64_t result = sub_24DCCA778();
        if (v31 != 8)
        {
          __break(1u);
          goto LABEL_17;
        }
        uint64_t v41 = result;
        (*v33)(v45, &v41, v7);
        swift_unknownObjectRelease();
        uint64_t v25 = v22 + 1;
        if (__OFADD__(v22, 1))
        {
LABEL_13:
          __break(1u);
          return swift_bridgeObjectRelease();
        }
      }
      uint64_t v26 = (*v23)(v10, v45, v7);
      uint64_t v27 = MEMORY[0x270FA5388](v26);
      uint64_t v28 = v38;
      *(&v31 - 6) = v39;
      *(&v31 - 5) = v28;
      uint64_t v29 = v36;
      *(&v31 - 4) = v37;
      *(&v31 - 3) = v29;
      *(&v31 - 2) = (uint64_t)v10;
      MEMORY[0x270FA5388](v27);
      *(&v31 - 4) = v40;
      *(&v31 - 3) = (uint64_t)v10;
      *(&v31 - 2) = (uint64_t)v34;
      sub_24D596F48((uint64_t)sub_24D5A30A0, v30, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A30B0, (uint64_t)(&v31 - 6));
      if (v2)
      {
        swift_bridgeObjectRelease();
        return (*v32)(v10, v7);
      }
      (*v32)(v10, v7);
      ++v22;
    }
    while (v25 != MEMORY[0x253327DC0](v21, v7));
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_24D59E18C(void *a1, char *a2, uint64_t a3, char *(*a4)@<X0>(char *result@<X0>, void *a2@<X8>), uint64_t a5, void (*a6)(void *a1@<X0>, uint64_t *a2@<X8>))
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v13 = sub_24DCCA3F8();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v13);
  unint64_t v17 = (char *)&v40 - v16;
  MEMORY[0x270FA5388](v15);
  uint64_t v40 = (char *)&v40 - v18;
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v19 = a2;
  uint64_t v21 = v20;
  uint64_t v44 = a6;
  uint64_t v22 = type metadata accessor for PersistenceTrigger.AffectedItemJobs();
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v17, &v19[*(int *)(v22 + 56)], v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v17, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
    uint64_t v41 = 0;
    uint64_t v42 = (char *(*)@<X0>(char *@<X0>, void *@<X8>))0xE000000000000000;
    sub_24DCCA728();
    uint64_t v48 = v41;
    uint64_t v49 = v42;
    sub_24DCC9968();
    uint64_t v23 = *((void *)v19 + 1);
    uint64_t v46 = 40;
    unint64_t v47 = 0xE100000000000000;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = a1;
    uint64_t v41 = v23;
    uint64_t v42 = sub_24D8F35D0;
    uint64_t v43 = 0;
    uint64_t v44 = sub_24D5127F8;
    uint64_t v45 = v24;
    swift_bridgeObjectRetain_n();
    id v25 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908A0);
    sub_24D3E4A9C(&qword_26B1940D8, &qword_26B1908A0);
    sub_24D3F0EB8();
    sub_24DCC9B28();
    swift_release();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v26 = objc_msgSend(v25, sel_bindLongParameter_, 0);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    uint64_t v27 = *(void *)v19;
    uint64_t v44 = (void (*)(void *@<X0>, uint64_t *@<X8>))MEMORY[0x263F8D6C8];
    uint64_t v41 = v27;
    sub_24D3E3EB4((uint64_t)&v41);
    uint64_t v29 = v28;
    sub_24D415F74((uint64_t)&v41, qword_26B197F50);
    if (v29)
    {
      sub_24DCC9968();
      swift_bridgeObjectRelease();
      sub_24DCC9968();
      return v48;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v40, v17, AssociatedTypeWitness);
    uint64_t v41 = 0;
    uint64_t v42 = (char *(*)@<X0>(char *@<X0>, void *@<X8>))0xE000000000000000;
    sub_24DCCA728();
    uint64_t v48 = v41;
    uint64_t v49 = v42;
    sub_24DCC9968();
    uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(void *, uint64_t))(*(void *)(AssociatedConformanceWitness + 40) + 32))(a1, AssociatedTypeWitness);
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    uint64_t v32 = *((void *)v19 + 1);
    uint64_t v46 = 40;
    unint64_t v47 = 0xE100000000000000;
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = a1;
    uint64_t v41 = v32;
    uint64_t v42 = sub_24D8F35D0;
    uint64_t v43 = 0;
    uint64_t v44 = sub_24D5A3F34;
    uint64_t v45 = v33;
    swift_bridgeObjectRetain();
    id v34 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B1908A0);
    sub_24D3E4A9C(&qword_26B1940D8, &qword_26B1908A0);
    sub_24D3F0EB8();
    sub_24DCC9B28();
    swift_release();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    id v35 = objc_msgSend(v34, sel_bindLongParameter_, 0);
    sub_24DCC97E8();

    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24DCC9968();
    uint64_t v36 = *(void *)v19;
    uint64_t v44 = (void (*)(void *@<X0>, uint64_t *@<X8>))MEMORY[0x263F8D6C8];
    uint64_t v41 = v36;
    sub_24D3E3EB4((uint64_t)&v41);
    uint64_t v38 = v37;
    sub_24D415F74((uint64_t)&v41, qword_26B197F50);
    if (v38)
    {
      sub_24DCC9968();
      swift_bridgeObjectRelease();
      sub_24DCC9968();
      uint64_t v30 = v48;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v40, AssociatedTypeWitness);
      return v30;
    }
  }
  uint64_t result = sub_24DCCA978();
  __break(1u);
  return result;
}

uint64_t sub_24D59E90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, uint64_t *a8)
{
  unint64_t v47 = a7;
  uint64_t v11 = *(void *)(*(void *)a1 + 544);
  uint64_t v12 = *(void *)(*(void *)a1 + 560);
  uint64_t v13 = *(void *)(*(void *)a1 + 568);
  uint64_t v39 = *(void *)(*(void *)a1 + 552);
  uint64_t v40 = v11;
  uint64_t v43 = v11;
  uint64_t v44 = v39;
  uint64_t v45 = v12;
  uint64_t v46 = v13;
  uint64_t v14 = type metadata accessor for PersistenceTrigger();
  uint64_t v41 = sub_24DCCA3F8();
  uint64_t v15 = *(void *)(v41 - 8);
  MEMORY[0x270FA5388](v41);
  unint64_t v17 = (char *)&v39 - v16;
  if (*(unsigned char *)(a1 + 112)) {
LABEL_15:
  }
    sub_24DA85370((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/implementations/file-system/persistence/SQLItemJobRegistry.swift", 137, 2, 846);
  uint64_t v18 = *(void *)(v14 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, a6, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v17, 0, 1, v14);
  uint64_t v19 = (uint64_t (*)(uint64_t))a8[10];
  if (!v19)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v20 = *v47;
  unint64_t v47 = a8;
  uint64_t v21 = swift_retain();
  uint64_t v22 = (void **)v19(v21);
  sub_24D43DD74((uint64_t)v19);
  if (!v22)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v43 = v40;
  uint64_t v44 = v39;
  uint64_t v45 = v12;
  uint64_t v46 = v13;
  type metadata accessor for JobRegistry();
  uint64_t v23 = v42;
  sub_24D586144(a1, (uint64_t)v17, v20, v22);
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v41);
LABEL_6:
    swift_release();
    return 0;
  }
  uint64_t v27 = v24;
  uint64_t v28 = v25;
  char v29 = v26;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v41);
  swift_release();
  uint64_t v30 = *(void **)(a1 + 96);
  uint64_t v31 = *(void **)(a1 + 104);
  *(void *)(a1 + 96) = v27;
  *(void *)(a1 + 104) = v28;
  char v32 = *(unsigned char *)(a1 + 112);
  *(unsigned char *)(a1 + 112) = v29;
  sub_24D3E380C(v30, v31, v32);
  uint64_t v33 = v47;
  sub_24D59D7D4(a1);
  if (*(unsigned char *)(a1 + 112) == 1)
  {
    id v34 = (uint64_t (*)(uint64_t))v33[10];
    if (v34)
    {
      uint64_t v35 = swift_retain();
      uint64_t v36 = v34(v35);
      uint64_t v37 = sub_24D43DD74((uint64_t)v34);
      if (v36)
      {
        (*(void (**)(uint64_t))(*(void *)v36 + 304))(v37);
        goto LABEL_6;
      }
    }
  }
  return 0;
}

void sub_24D59EC6C()
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  sub_24D50A7D0();
  if (!v1)
  {
    sub_24D596F48((uint64_t)sub_24D59EE74, 0, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A30D4, v0);
    uint64_t v2 = *(void **)(v0 + 16);
    uint64_t v3 = (void *)swift_allocObject();
    v3[2] = sub_24D5A30F4;
    v3[3] = v0;
    aBlock[4] = sub_24D3E3980;
    aBlock[5] = v3;
    aBlock[0] = (id)MEMORY[0x263EF8330];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_24D3E38DC;
    aBlock[3] = &block_descriptor_104_0;
    uint64_t v4 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    unsigned __int8 v5 = objc_msgSend(v2, sel_executeSwift_error_, v4, aBlock);
    _Block_release(v4);
    id v6 = aBlock[0];
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    if ((v5 & 1) == 0)
    {
      sub_24DCC8828();

      swift_willThrow();
    }
    swift_release();
  }
}

unint64_t sub_24D59EE74()
{
  return 0xD000000000000013;
}

uint64_t sub_24D59EF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = sub_24DCC8CE8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v41 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24DCC9078();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v40 = v12;
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  swift_retain();
  uint64_t v16 = sub_24DCC9068();
  os_log_type_t v17 = sub_24DCCA108();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v36 = v10;
    uint64_t v19 = (uint8_t *)v18;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v38 = v6;
    uint64_t v21 = v20;
    uint64_t v43 = v20;
    v35[1] = a6;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v37 = v9;
    uint64_t v22 = sub_24D982AC4();
    uint64_t v42 = sub_24D418FB4(v22, v23, &v43);
    uint64_t v9 = v37;
    sub_24DCCA428();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24D3D0000, v16, v17, "recovering running job %s", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v21, -1, -1);
    uint64_t v24 = v19;
    uint64_t v10 = v36;
    MEMORY[0x25332B030](v24, -1, -1);
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v39 + 8))(v14, v40);
  sub_24D5129BC();
  uint64_t v25 = swift_allocError();
  *(void *)uint64_t v26 = 0;
  *(void *)(v26 + 8) = 0;
  *(unsigned char *)(v26 + 16) = -1;
  uint64_t v28 = *(void **)(a1 + 96);
  uint64_t v27 = *(void **)(a1 + 104);
  *(void *)(a1 + 96) = v25;
  *(void *)(a1 + 104) = 0;
  char v29 = *(unsigned char *)(a1 + 112);
  *(unsigned char *)(a1 + 112) = 3;
  sub_24D3E380C(v28, v27, v29);
  uint64_t v30 = v41;
  sub_24DCC8CD8();
  sub_24DCC8C88();
  double v32 = v31;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v30, v9);
  double v34 = v32 * 1000000000.0;
  if ((~COERCE__INT64(v32 * 1000000000.0) & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v34 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v34 < 9.22337204e18)
  {
    sub_24D50D7F4(a1, (void (**)(char *, uint64_t))(uint64_t)v34);
    return 0;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_24D59F290()
{
  return 0;
}

void sub_24D59F3C8()
{
}

uint64_t sub_24D59F3EC()
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 80);
  if (v1 && (v2 = v0, uint64_t v3 = swift_retain(), v4 = v1(v3), sub_24D43DD74((uint64_t)v1), v4))
  {
    unsigned __int8 v5 = *(void **)(v2 + 16);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v2;
    *(void *)(v6 + 24) = v4;
    uint64_t v7 = (void *)swift_allocObject();
    unsigned __int8 v8 = v7;
    void v7[2] = sub_24D5A315C;
    v7[3] = v6;
    aBlock[4] = sub_24D3E3980;
    aBlock[5] = v7;
    aBlock[0] = (id)MEMORY[0x263EF8330];
    aBlock[1] = (id)1107296256;
    aBlock[2] = sub_24D3E38DC;
    aBlock[3] = &block_descriptor_121;
    uint64_t v9 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release();
    aBlock[0] = 0;
    id v10 = objc_msgSend(v5, sel_fetchSwift_error_, v9, aBlock);
    _Block_release(v9);
    id v11 = aBlock[0];
    char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if (isEscapingClosureAtFileLocation) {
      __break(1u);
    }
    if (v10)
    {
      unsigned __int8 v8 = objc_msgSend(v10, sel_next);
      swift_release();
      swift_release();
    }
    else
    {
      sub_24DCC8828();

      swift_willThrow();
      swift_release();
      swift_release();
    }
  }
  else
  {
    unsigned __int8 v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_24D59F634(uint64_t a1)
{
  uint64_t v7 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v4 = (char *)&v7 - v3;
  uint64_t v8 = 0;
  uint64_t v9 = (uint64_t (*)())0xE000000000000000;
  sub_24DCCA728();
  uint64_t v13 = v8;
  uint64_t v14 = v9;
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DBB275C();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(AssociatedConformanceWitness + 40) + 32))(v7, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, AssociatedTypeWitness);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t v8 = 20;
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if (qword_26B197990 != -1) {
    swift_once();
  }
  uint64_t v11 = 40;
  unint64_t v12 = 0xE100000000000000;
  uint64_t v8 = qword_26B1A24B8;
  uint64_t v9 = sub_24DAFB0AC;
  uint64_t v10 = 0;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_26B197E50);
  sub_24D3E4A9C(&qword_26B199EE0, &qword_26B197E50);
  sub_24D3F0EB8();
  sub_24DCC9B28();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return v13;
}

uint64_t sub_24D59F9DC()
{
  id aBlock[6] = *(id *)MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = (void *)swift_allocObject();
  unsigned __int8 v3 = v2;
  v2[2] = sub_24D5A313C;
  v2[3] = v0;
  aBlock[4] = sub_24D3E3980;
  aBlock[5] = v2;
  aBlock[0] = (id)MEMORY[0x263EF8330];
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_24D3E38DC;
  aBlock[3] = &block_descriptor_111;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  aBlock[0] = 0;
  id v5 = objc_msgSend(v1, sel_fetchSwift_error_, v4, aBlock);
  _Block_release(v4);
  id v6 = aBlock[0];
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  if (v5)
  {
    unsigned __int8 v3 = objc_msgSend(v5, sel_next);
    swift_release();
  }
  else
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
  }
  return v3 & 1;
}

uint64_t sub_24D59FBA8()
{
  return 0;
}

uint64_t sub_24D59FDE8()
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B1941D0);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_24DCCECE0;
  uint64_t v2 = *(void *)(v0 + 64);
  *(void *)(v1 + 56) = type metadata accessor for SQLThrottler();
  *(void *)(v1 + 64) = &off_26FFA9728;
  *(void *)(v1 + 32) = v2;
  swift_retain();
  return v1;
}

uint64_t sub_24D59FE98()
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_24D5A1A2C;
  *(void *)(v2 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v2;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_14;
  unsigned __int8 v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  id v5 = aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_29;
  }
  if (!v4)
  {
    sub_24DCC8828();

    swift_willThrow();
LABEL_23:
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    goto LABEL_24;
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_24D5A1A44;
  *(void *)(v7 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v7;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_21;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  id v10 = aBlock;
  char v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (!v9)
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release();
    goto LABEL_23;
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_24D5A1A5C;
  *(void *)(v12 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v12;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_28;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v14 = objc_msgSend(v1, sel_executeSwift_error_, v13, &aBlock);
  _Block_release(v13);
  id v15 = aBlock;
  char v16 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v16)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!v14)
  {
LABEL_22:
    sub_24DCC8828();

    swift_willThrow();
    swift_release_n();
    goto LABEL_23;
  }
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_24D5A1A74;
  *(void *)(v17 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v17;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_35;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v19 = objc_msgSend(v1, sel_executeSwift_error_, v18, &aBlock);
  _Block_release(v18);
  id v15 = aBlock;
  char v20 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v20)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!v19) {
    goto LABEL_22;
  }
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_24D5A1A8C;
  *(void *)(v21 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v21;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_42;
  uint64_t v22 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v23 = objc_msgSend(v1, sel_executeSwift_error_, v22, &aBlock);
  _Block_release(v22);
  id v15 = aBlock;
  char v24 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v24)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (!v23) {
    goto LABEL_22;
  }
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_24D5A1AA4;
  *(void *)(v25 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v25;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_49;
  uint64_t v26 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v27 = objc_msgSend(v1, sel_executeSwift_error_, v26, &aBlock);
  _Block_release(v26);
  id v15 = aBlock;
  char v28 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v28)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  if (!v27) {
    goto LABEL_22;
  }
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = sub_24D5A1ABC;
  *(void *)(v29 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v29;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_56;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v31 = objc_msgSend(v1, sel_executeSwift_error_, v30, &aBlock);
  _Block_release(v30);
  id v32 = aBlock;
  char v33 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v33)
  {
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  if (!v31)
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release_n();
    uint64_t v46 = 0;
    unint64_t v47 = 0;
    uint64_t v45 = sub_24D5A1ABC;
    goto LABEL_24;
  }
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = sub_24D5A1AD4;
  *(void *)(v34 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v34;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_63;
  uint64_t v35 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v36 = objc_msgSend(v1, sel_executeSwift_error_, v35, &aBlock);
  _Block_release(v35);
  id v37 = aBlock;
  char v38 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v38) {
    goto LABEL_35;
  }
  if (!v36)
  {
    sub_24DCC8828();

    swift_willThrow();
    swift_release_n();
    unint64_t v47 = 0;
    uint64_t v46 = sub_24D5A1AD4;
    uint64_t v45 = sub_24D5A1ABC;
    goto LABEL_24;
  }
  uint64_t v39 = swift_allocObject();
  *(void *)(v39 + 16) = sub_24D5A1AEC;
  *(void *)(v39 + 24) = v0;
  uint64_t v52 = sub_24D3E3980;
  uint64_t v53 = v39;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v49 = 1107296256;
  uint64_t v50 = sub_24D3E38DC;
  uint64_t v51 = &block_descriptor_70;
  uint64_t v40 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned __int8 v41 = objc_msgSend(v1, sel_executeSwift_error_, v40, &aBlock);
  _Block_release(v40);
  id v42 = aBlock;
  char v43 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v43) {
LABEL_36:
  }
    __break(1u);
  if (v41) {
    return swift_release_n();
  }
  sub_24DCC8828();

  swift_willThrow();
  swift_release_n();
  unint64_t v47 = sub_24D5A1AEC;
  uint64_t v46 = sub_24D5A1AD4;
  uint64_t v45 = sub_24D5A1ABC;
LABEL_24:
  swift_release();
  sub_24D43DD74((uint64_t)v45);
  sub_24D43DD74((uint64_t)v46);
  return sub_24D43DD74((uint64_t)v47);
}

uint64_t sub_24D5A0AD0()
{
  sub_24DCCA728();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t))(*(void *)(AssociatedConformanceWitness + 40) + 8))(AssociatedTypeWitness);
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return 0;
}

uint64_t sub_24D5A0CAC()
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return v1[0];
}

unint64_t sub_24D5A0DAC()
{
  return 0xD000000000000014;
}

uint64_t sub_24D5A0EA4()
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  strcpy((char *)v1, "CREATE INDEX ");
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  swift_bridgeObjectRetain();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return v1[0];
}

uint64_t sub_24D5A0F9C()
{
  return 0;
}

uint64_t sub_24D5A109C()
{
  return 0;
}

uint64_t sub_24D5A119C()
{
  return 0;
}

uint64_t sub_24D5A129C()
{
  return 0;
}

uint64_t sub_24D5A139C()
{
  return 0;
}

uint64_t sub_24D5A149C()
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_24D5A19FC;
  *(void *)(v2 + 24) = v0;
  uint64_t v17 = sub_24D3E3974;
  uint64_t v18 = v2;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  id v15 = sub_24D3E38DC;
  char v16 = &block_descriptor_5;
  unsigned __int8 v3 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned int v4 = objc_msgSend(v1, sel_executeSwift_error_, v3, &aBlock);
  _Block_release(v3);
  id v5 = aBlock;
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (!v4)
  {
    sub_24DCC8828();

    swift_willThrow();
    return swift_release();
  }
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_24D5A1A14;
  *(void *)(v7 + 24) = v0;
  uint64_t v17 = (uint64_t (*)(uint64_t))sub_24D3E3980;
  uint64_t v18 = v7;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v14 = 1107296256;
  id v15 = sub_24D3E38DC;
  char v16 = &block_descriptor_7;
  uint64_t v8 = _Block_copy(&aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  unsigned __int8 v9 = objc_msgSend(v1, sel_executeSwift_error_, v8, &aBlock);
  _Block_release(v8);
  id v10 = aBlock;
  char v11 = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v11) {
LABEL_10:
  }
    __break(1u);
  if (v9) {
    return swift_release_n();
  }
  sub_24DCC8828();

  swift_willThrow();
  swift_release();
  return swift_release();
}

uint64_t sub_24D5A1790()
{
  return 0;
}

uint64_t sub_24D5A1890()
{
  return 0;
}

uint64_t sub_24D5A1990()
{
  return sub_24D59FDE8();
}

uint64_t sub_24D5A19B4()
{
  return sub_24D59FE98();
}

uint64_t sub_24D5A19D8()
{
  return sub_24D5A149C();
}

uint64_t sub_24D5A19FC()
{
  return sub_24D5A1790();
}

uint64_t sub_24D5A1A04()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1A14()
{
  return sub_24D5A1890();
}

uint64_t sub_24D5A1A1C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1A2C()
{
  return sub_24D5A0AD0();
}

uint64_t sub_24D5A1A34()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1A44()
{
  return sub_24D5A0CAC();
}

uint64_t sub_24D5A1A4C()
{
  return swift_deallocObject();
}

unint64_t sub_24D5A1A5C()
{
  return sub_24D5A0DAC();
}

uint64_t sub_24D5A1A64()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1A74()
{
  return sub_24D5A0EA4();
}

uint64_t sub_24D5A1A7C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1A8C()
{
  return sub_24D5A0F9C();
}

uint64_t sub_24D5A1A94()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1AA4()
{
  return sub_24D5A109C();
}

uint64_t sub_24D5A1AAC()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1ABC()
{
  return sub_24D5A119C();
}

uint64_t sub_24D5A1AC4()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1AD4()
{
  return sub_24D5A129C();
}

uint64_t sub_24D5A1ADC()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1AEC()
{
  return sub_24D5A139C();
}

uint64_t sub_24D5A1AF4()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A1B04(uint64_t result)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v1 + 80);
  if (v2)
  {
    uint64_t v3 = v1;
    uint64_t v4 = result;
    uint64_t v5 = swift_retain();
    uint64_t v6 = v2(v5);
    uint64_t result = sub_24D43DD74((uint64_t)v2);
    if (v6)
    {
      (*(void (**)(uint64_t))(*(void *)v6 + 216))(result);
      sub_24D57AC18();
      swift_release();
      long long v14 = v16;
      uint64_t v15 = v17;
      type metadata accessor for JobLockRule();
      swift_getWitnessTable();
      sub_24DCC95E8();
      __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_26B193F80);
      swift_getWitnessTable();
      sub_24DCCA8B8();
      swift_getWitnessTable();
      sub_24D3E4A9C((unint64_t *)&qword_26B193F88, &qword_26B193F80);
      sub_24DCCA898();
      swift_getWitnessTable();
      uint64_t v7 = sub_24DCCA758();
      uint64_t WitnessTable = swift_getWitnessTable();
      v13[8] = swift_getWitnessTable();
      v13[9] = sub_24D3E4A9C(&qword_26B193F90, &qword_26B193F80);
      v13[7] = swift_getWitnessTable();
      uint64_t v8 = swift_getWitnessTable();
      uint64_t v10 = sub_24D7854B0((void (*)(char *, char *))sub_24D5A1EC0, 0, v7, MEMORY[0x263F8D310], MEMORY[0x263F8E628], v8, MEMORY[0x263F8E658], v9);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v11 = sub_24D58F3B4(v10);
      uint64_t v12 = swift_bridgeObjectRelease();
      MEMORY[0x270FA5388](v12);
      v13[2] = v11;
      v13[3] = v6;
      void v13[4] = v4;
      v13[5] = v3;
      sub_24D596F48((uint64_t)sub_24D5A1F28, 0, 0, 0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, void))sub_24D5A310C, (uint64_t)v13);
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_24D5A1EC0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 16))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

unint64_t sub_24D5A1F28()
{
  return 0xD000000000000039;
}

uint64_t sub_24D5A1F44(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v44 = a8;
  int v43 = a5;
  uint64_t v39 = a4;
  uint64_t v40 = a3;
  uint64_t v38 = a2;
  uint64_t v10 = a1;
  uint64_t v11 = (uint64_t)(a1 + 7);
  uint64_t v12 = (void *)*a1;
  swift_beginAccess();
  sub_24D415FD0(v11, (uint64_t)&v47, &qword_26B1937B8);
  uint64_t v13 = v50;
  if (v50)
  {
    uint64_t v14 = v51;
    uint64_t v15 = __swift_project_boxed_opaque_existential_1(&v47, v50);
    id v37 = v10;
    uint64_t v16 = *(void *)(v13 - 8);
    MEMORY[0x270FA5388](v15);
    uint64_t v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v16 + 16))(v18);
    sub_24D415F74((uint64_t)&v47, &qword_26B1937B8);
    uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v13);
    uint64_t v10 = v37;
    LOBYTE(v18) = sub_24D3E12EC(v19, v21, a6);
    swift_bridgeObjectRelease();
    if (v18)
    {
      int v42 = 0;
      unsigned __int8 v41 = " 🔏";
      goto LABEL_6;
    }
  }
  else
  {
    sub_24D415F74((uint64_t)&v47, &qword_26B1937B8);
  }
  unsigned __int8 v41 = "";
  int v42 = 2;
LABEL_6:
  uint64_t v22 = (*(uint64_t (**)(uint64_t *))(*(void *)a7 + 376))(v10);
  unsigned int v23 = v44;
  if (v22 < 0)
  {
    swift_release();
    uint64_t v28 = v23[3];
    uint64_t v34 = v23[4];
    __swift_project_boxed_opaque_existential_1(v23, v28);
    uint64_t v45 = 0;
    uint64_t v46 = 0xE000000000000000;
    sub_24DCC9968();
    uint64_t v52 = (uint64_t)v10;
    uint64_t v29 = (uint64_t *)v12[68];
    uint64_t v30 = v12[70];
    uint64_t v27 = v12[71];
    uint64_t v36 = v12[69];
    id v37 = v29;
    unint64_t v47 = v29;
    uint64_t v48 = v36;
    uint64_t v35 = v30;
    uint64_t v49 = v30;
    uint64_t v50 = v27;
    type metadata accessor for ItemJob();
    swift_getWitnessTable();
    sub_24DCCADC8();
    sub_24DCCA768();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24D90FFEC(v45, v46, v28, v34);
  }
  else
  {
    uint64_t v24 = v44[3];
    uint64_t v34 = v44[4];
    __swift_project_boxed_opaque_existential_1(v44, v24);
    uint64_t v45 = 0;
    uint64_t v46 = 0xE000000000000000;
    sub_24DCC9968();
    uint64_t v52 = v22;
    uint64_t v25 = (uint64_t *)v12[68];
    uint64_t v26 = v12[70];
    uint64_t v27 = v12[71];
    uint64_t v36 = v12[69];
    id v37 = v25;
    unint64_t v47 = v25;
    uint64_t v48 = v36;
    uint64_t v35 = v26;
    uint64_t v49 = v26;
    uint64_t v50 = v27;
    type metadata accessor for Job();
    swift_getWitnessTable();
    sub_24DCCADC8();
    sub_24DCCA768();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    sub_24D90FFEC(v45, v46, v24, v34);
    swift_release();
  }
  swift_bridgeObjectRelease();
  if ((v43 & 1) == 0)
  {
    uint64_t v31 = v23[3];
    uint64_t v32 = v23[4];
    __swift_project_boxed_opaque_existential_1(v23, v31);
    uint64_t v45 = 0;
    uint64_t v46 = 0xE000000000000000;
    sub_24DCC9968();
    uint64_t v52 = sub_24D5A2620(v10, v39, v38, v40);
    unint64_t v47 = v37;
    uint64_t v48 = v36;
    uint64_t v49 = v35;
    uint64_t v50 = v27;
    type metadata accessor for ItemJob();
    swift_getWitnessTable();
    sub_24DCCADC8();
    swift_release();
    sub_24D90FFEC(v45, v46, v31, v32);
    swift_bridgeObjectRelease();
  }
  return 0;
}

uint64_t sub_24D5A2410(char a1, void *a2, void *a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v30 = a7;
  uint64_t v31 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  int v32 = a4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x270FA5388](AssociatedTypeWitness);
  uint64_t v18 = (char *)&v27 - v17;
  uint64_t v33 = a9;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v36 = a12;
  type metadata accessor for Job();
  sub_24DB16820(a1);
  uint64_t v33 = a9;
  uint64_t v34 = a10;
  uint64_t v35 = a11;
  uint64_t v36 = a12;
  type metadata accessor for ItemJob();
  uint64_t v19 = swift_dynamicCastMetatype();
  if (v19)
  {
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v28, AssociatedTypeWitness);
    uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 592))(v18, v29, v30, v31);
    uint64_t v22 = *(void **)(v21 + 96);
    unsigned int v23 = *(void **)(v21 + 104);
    *(void *)(v21 + 96) = a2;
    *(void *)(v21 + 104) = a3;
    char v24 = *(unsigned char *)(v21 + 112);
    char v25 = v32;
    *(unsigned char *)(v21 + 112) = v32;
    sub_24D3F1C98(a2, a3, v25);
    sub_24D3E380C(v22, v23, v24);
    return v21;
  }
  else
  {
    uint64_t result = sub_24DCCA978();
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5A2620(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *a1;
  uint64_t v9 = *a1;
  char v10 = sub_24DB1702C();
  return sub_24D5A2410(v10, 0, 0, 0, (uint64_t)a1 + *(void *)(*a1 + 576), a3, a4, a2, *(void *)(v9 + 544), *(void *)(v9 + 552), *(void *)(v8 + 560), *(void *)(v8 + 568));
}

uint64_t sub_24D5A26FC(uint64_t a1, char a2)
{
  if (a2) {
    return 0;
  }
  uint64_t v4 = a1;
  uint64_t result = sub_24D59B11C(&v4, &v5);
  if (!v2) {
    return v5;
  }
  return result;
}

uint64_t sub_24D5A274C(char *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v7 = v6;
  uint64_t v62 = a6;
  uint64_t v64 = a5;
  char v65 = a4;
  unint64_t v59 = a3;
  uint64_t v60 = a1;
  uint64_t v72 = *MEMORY[0x263EF8340];
  uint64_t v9 = sub_24DCC8FC8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1990B0);
  uint64_t v14 = MEMORY[0x270FA5388](v13 - 8);
  uint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v57 - v17;
  uint64_t v19 = type metadata accessor for Signpost(0);
  MEMORY[0x270FA5388](v19);
  uint64_t v61 = (char *)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_26B1990F8 != -1) {
    swift_once();
  }
  uint64_t v21 = (void *)qword_26B1A23B0;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v18, 1, 1, v9);
  uint64_t v58 = v18;
  sub_24D415FD0((uint64_t)v18, (uint64_t)v16, &qword_26B1990B0);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48))(v16, 1, v9);
  id v63 = a2;
  if (v22 == 1)
  {
    id v23 = v21;
    char v24 = v12;
    sub_24DCC8FA8();
    sub_24D415F74((uint64_t)v16, &qword_26B1990B0);
  }
  else
  {
    char v24 = v12;
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v16, v9);
  }
  char v25 = v61;
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v61, v24, v9);
  uint64_t v57 = *(int *)(v19 + 20);
  *(void *)&v25[v57] = v21;
  uint64_t v26 = &v25[*(int *)(v19 + 24)];
  *(void *)uint64_t v26 = "SQLDB: Fetch Jobs";
  *((void *)v26 + 1) = 17;
  v26[16] = 2;
  id v27 = v21;
  sub_24DCCA2D8();
  sub_24DCC8F98();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v24, v9);
  sub_24D415F74((uint64_t)v58, &qword_26B1990B0);
  uint64_t v28 = v64;
  uint64_t v29 = *(void **)(v64 + 16);
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v59;
  v30[2] = v28;
  v30[3] = v31;
  int v32 = v60;
  v30[4] = v65;
  v30[5] = v32;
  v30[6] = v63;
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = sub_24D5A2ECC;
  *(void *)(v33 + 24) = v30;
  uint64_t v70 = sub_24D3E3980;
  uint64_t v71 = v33;
  id aBlock = (id)MEMORY[0x263EF8330];
  uint64_t v67 = 1107296256;
  os_log_type_t v68 = sub_24D3E38DC;
  uint64_t v69 = &block_descriptor_80;
  uint64_t v34 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_release();
  id aBlock = 0;
  id v35 = objc_msgSend(v29, sel_fetchSwift_error_, v34, &aBlock);
  _Block_release(v34);
  id v36 = aBlock;
  LOBYTE(v34) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if (v34) {
    __break(1u);
  }
  if (!v35)
  {
    sub_24DCC8828();

    swift_willThrow();
LABEL_23:
    sub_24DCCA2C8();
    uint64_t v55 = (uint64_t)v61;
    sub_24DCC8F98();
    sub_24D5A2F00(v55);
    return swift_release();
  }
  unint64_t v59 = v30;
  uint64_t v60 = v26;
  if (!objc_msgSend(v35, sel_next))
  {
LABEL_20:

    sub_24DCCA2C8();
    uint64_t v54 = (uint64_t)v61;
    sub_24DCC8F98();
    sub_24D5A2F00(v54);
    return swift_release();
  }
  id v37 = v62;
  id v63 = v35;
  while (1)
  {
    uint64_t v38 = (void *)MEMORY[0x253329610]();
    uint64_t v39 = v7;
    sub_24D596464(v35, (uint64_t)&aBlock);
    if (v7)
    {

      goto LABEL_23;
    }
    unsigned __int8 v41 = aBlock;
    uint64_t v40 = v67;
    int v42 = v68;
    char v65 = v69;
    char v43 = (char)v70;
    uint64_t v44 = swift_retain();
    MEMORY[0x253327CA0](v44);
    if (*(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_24DCC9C78();
    }
    sub_24DCC9CD8();
    sub_24DCC9C48();
    if ((v43 & 1) == 0) {
      break;
    }
    swift_release();
LABEL_11:
    id v35 = v63;
    if ((objc_msgSend(v35, sel_next) & 1) == 0) {
      goto LABEL_20;
    }
  }
  char v45 = sub_24D899B04();
  uint64_t v46 = (void *)v41[18];
  char v47 = *((unsigned char *)v41 + 152);
  sub_24D83C8FC(v45);
  __swift_instantiateConcreteTypeFromMangledName(&qword_26986F130);
  uint64_t v48 = swift_dynamicCastMetatype();
  if (v48)
  {
    id aBlock = v46;
    LOBYTE(v67) = v47;
    uint64_t v49 = (*(uint64_t (**)(id *, uint64_t, id (*)(uint64_t, void *), void *))(v48 + 592))(&aBlock, v40, v42, v65);
    uint64_t v50 = *(void **)(v49 + 96);
    uint64_t v51 = *(void **)(v49 + 104);
    *(void *)(v49 + 96) = 0;
    *(void *)(v49 + 104) = 0;
    char v52 = *(unsigned char *)(v49 + 112);
    *(unsigned char *)(v49 + 112) = 0;
    sub_24D3E380C(v50, v51, v52);
    uint64_t v53 = v62;
    MEMORY[0x253327CA0]();
    if (*(void *)((*v53 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v53 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_24DCC9C78();
    }
    sub_24DCC9CD8();
    sub_24DCC9C48();
    swift_release();
    uint64_t v7 = v39;
    id v37 = v53;
    goto LABEL_11;
  }
  uint64_t result = sub_24DCCA978();
  __break(1u);
  return result;
}

uint64_t sub_24D5A2ECC(uint64_t a1)
{
  return sub_24D59749C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_24D5A2EF0()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A2F00(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Signpost(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_24D5A2F5C()
{
  unint64_t result = qword_26B18FA40;
  if (!qword_26B18FA40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B18FA40);
  }
  return result;
}

uint64_t sub_24D5A2FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_24D5A3018(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B1937B8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_24D5A3080()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3088(uint64_t a1)
{
  return sub_24D59D9BC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3090()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A30A0(void *a1)
{
  return sub_24D59E18C(a1, *(char **)(v1 + 48), *(void *)(v1 + 16), *(char *(**)@<X0>(char *@<X0>, void *@<X8>))(v1 + 24), *(void *)(v1 + 32), *(void (**)(void *@<X0>, uint64_t *@<X8>))(v1 + 40));
}

uint64_t sub_24D5A30B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24D59E90C(a1, a2, a3, a4, a5 & 1, *(void *)(v5 + 16), *(uint64_t **)(v5 + 24), *(uint64_t **)(v5 + 32));
}

uint64_t sub_24D5A30D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24D59EF08(a1, a2, a3, a4, a5 & 1, v5);
}

uint64_t sub_24D5A30F4()
{
  return sub_24D59F290();
}

uint64_t sub_24D5A30FC()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A310C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24D5A1F44(a1, a2, a3, a4, a5 & 1, *(void *)(v5 + 16), *(void *)(v5 + 24), *(void **)(v5 + 32));
}

uint64_t sub_24D5A313C()
{
  return sub_24D59FBA8();
}

uint64_t sub_24D5A3144()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3154()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A315C(uint64_t a1)
{
  return sub_24D59F634(a1);
}

uint64_t sub_24D5A3164()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3174()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A31AC(uint64_t a1)
{
  return sub_24D59D490(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_24D5A31B8()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A31C8(uint64_t a1)
{
  return sub_24D59D0C8(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_24D5A31D4()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A31E4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A321C(void *a1)
{
  return sub_24D59CE8C(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5A322C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A323C(uint64_t a1)
{
  return sub_24D59C918(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_24D5A3248()
{
  return swift_deallocObject();
}

void sub_24D5A3258(uint64_t a1)
{
  sub_24D59C2EC(a1, v1);
}

uint64_t sub_24D5A3260()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3270(uint64_t a1)
{
  return sub_24D59BD68(a1);
}

uint64_t sub_24D5A3290()
{
  return sub_24D59C02C();
}

uint64_t sub_24D5A3298()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A33A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_24D59B6F4(a1, v6, v7, v1 + v4, v8, v9);
}

uint64_t sub_24D5A3464()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3474()
{
  return sub_24D5A34EC();
}

uint64_t sub_24D5A348C()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A34C4(void *a1)
{
  return sub_24D59AE78(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_24D5A34DC()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A34EC()
{
  return sub_24D59BAD8(*(void **)(v0 + 48));
}

uint64_t sub_24D5A3510(uint64_t a1)
{
  return sub_24D59A898(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24D5A351C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A352C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A353C()
{
  return sub_24D59A434();
}

uint64_t sub_24D5A3544()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3554(void *a1)
{
  return sub_24D599E38(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24));
}

uint64_t sub_24D5A3564(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24D59A050(a1, a2, a3, a4, a5 & 1, *(void *)(v5 + 16), *(void *)(v5 + 24));
}

uint64_t sub_24D5A3584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D599198(a1, v2, a2);
}

uint64_t sub_24D5A35A0(void *a1)
{
  return sub_24D59986C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A35A8(void *a1)
{
  return sub_24D5994A0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A35B0(uint64_t a1)
{
  return sub_24D599C38(a1);
}

uint64_t sub_24D5A35D0(uint64_t a1)
{
  return sub_24D599234(a1);
}

uint64_t sub_24D5A35D8()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3610()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_24D5A36FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(v1 + 48);
  char v7 = *(unsigned char *)(v1 + v5);
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);

  return sub_24D598910(a1, v6, v1 + v4, v7, v8);
}

uint64_t sub_24D5A37B8()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A37C8()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_24D5A38B0(uint64_t a1)
{
  uint64_t v3 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 48);
  char v6 = *(unsigned char *)(v1 + v4 + *(void *)(v3 + 64));

  return sub_24D59852C(a1, v5, v1 + v4, v6);
}

uint64_t sub_24D5A3960()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3970(void *a1)
{
  return sub_24D597B54(a1, *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_24D5A3980(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  return sub_24D597F0C(a1, a2, a3, a4, a5 & 1);
}

uint64_t sub_24D5A39A0(uint64_t a1)
{
  return sub_24D5979BC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_24D5A39A8(uint64_t a1)
{
  **(void **)(v1 + 16) = a1;
  swift_retain();
  swift_release();
  return 1;
}

uint64_t objectdestroy_72Tm()
{
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D5A3A2C(uint64_t a1)
{
  return sub_24D597670(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40));
}

uint64_t sub_24D5A3A3C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3A4C()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3A54(uint64_t a1)
{
  return sub_24D5959E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3A5C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3A6C()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3A74(uint64_t a1)
{
  return sub_24D5960DC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3A7C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3A8C()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3A94(uint64_t a1)
{
  return sub_24D595CF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3A9C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3AAC()
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v2 = *(void *)(AssociatedTypeWitness - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, AssociatedTypeWitness);

  return swift_deallocObject();
}

uint64_t sub_24D5A3B90(uint64_t a1)
{
  swift_getAssociatedTypeWitness();

  return sub_24D594828(a1);
}

uint64_t sub_24D5A3C1C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3C2C()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3C34(uint64_t a1)
{
  return sub_24D593DCC(a1);
}

uint64_t sub_24D5A3C3C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3C4C()
{
  swift_release();
  sub_24D3E380C(*(void **)(v0 + 24), *(id *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return swift_deallocObject();
}

uint64_t sub_24D5A3C90(void *a1)
{
  return sub_24D594048(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void **)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_24D5A3CA4()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3CB4()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3CBC(void *a1)
{
  return sub_24D594354(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24D5A3CC8()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3CD8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A3D10(void *a1)
{
  return sub_24D594248(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3D18()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3D28()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3D30(uint64_t a1)
{
  return sub_24D5924B0(a1);
}

uint64_t sub_24D5A3D38()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3D48()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3D50(uint64_t a1)
{
  return sub_24D593218(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5A3D58()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3D68()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3D70(void *a1)
{
  return sub_24D592C08(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_24D5A3D7C()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3D8C()
{
  return objectdestroy_82Tm();
}

uint64_t sub_24D5A3D94(void *a1)
{
  return sub_24D592F60(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5A3DA0()
{
  return swift_deallocObject();
}

uint64_t sub_24D5A3DB0()
{
  return objectdestroy_82Tm();
}

uint64_t objectdestroy_82Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5A3E04(void *a1)
{
  return sub_24D592950(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5A3E10()
{
  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for SQLItemJobID(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SQLItemJobID(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SQLItemJobID()
{
  return &type metadata for SQLItemJobID;
}

unint64_t sub_24D5A3EB8(uint64_t a1)
{
  unint64_t result = sub_24D5A3EE0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_24D5A3EE0()
{
  unint64_t result = qword_26B18FA30;
  if (!qword_26B18FA30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B18FA30);
  }
  return result;
}

uint64_t sub_24D5A3F38(uint64_t a1)
{
  return sub_24D5A35B0(a1);
}

id sub_24D5A40EC()
{
  return sub_24D5A4958(0, type metadata accessor for ProxyCancellable);
}

uint64_t type metadata accessor for ProxyCancellable()
{
  return self;
}

void sub_24D5A41D0(uint64_t a1)
{
  if (a1)
  {
    unsigned int v3 = *(void **)(v1 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client);
    BOOL v4 = (objc_class *)type metadata accessor for ProxyCancellable();
    int v5 = (char *)objc_allocWithZone(v4);
    *(void *)&v5[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB316ProxyCancellable_cancellable] = a1;
    v8.receiver = v5;
    v8.super_class = v4;
    swift_unknownObjectRetain_n();
    id v6 = objc_msgSendSuper2(&v8, sel_init);
    objc_msgSend(v3, sel_setCancellationHandler_, v6, v8.receiver, v8.super_class);
    swift_unknownObjectRelease();
  }
  else
  {
    char v7 = *(void **)(v1 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client);
    objc_msgSend(v7, sel_setCancellationHandler_, 0);
  }
}

uint64_t sub_24D5A4330(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  *(void *)&v20[0] = 0x696669746E656469;
  *((void *)&v20[0] + 1) = 0xEA00000000007265;
  swift_bridgeObjectRetain();
  sub_24DCCA688();
  if (*(void *)(a1 + 16) && (unint64_t v10 = sub_24D6AD6FC((uint64_t)&aBlock), (v11 & 1) != 0))
  {
    sub_24D3F7E8C(*(void *)(a1 + 56) + 32 * v10, (uint64_t)&v25);
  }
  else
  {
    long long v25 = 0u;
    long long v26 = 0u;
  }
  sub_24D5B3E28((uint64_t)&aBlock);
  if (!*((void *)&v26 + 1))
  {
    sub_24D415F74((uint64_t)&v25, qword_26B197F50);
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v29 = 0;
    goto LABEL_15;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v29 = 0;
    long long v28 = 0u;
    long long v27 = 0u;
    goto LABEL_15;
  }
  if (!*((void *)&v28 + 1))
  {
LABEL_15:
    sub_24D415F74((uint64_t)&v27, (uint64_t *)&unk_26986BE70);
    goto LABEL_16;
  }
  long long aBlock = v27;
  long long v22 = v28;
  uint64_t v23 = v29;
  uint64_t v12 = *(void *)(v4 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_idMap);
  if (v12)
  {
    if (*(void *)(v12 + 16))
    {
      unint64_t v13 = sub_24D6AD6FC((uint64_t)&aBlock);
      if (v14)
      {
        sub_24D3F7E8C(*(void *)(v12 + 56) + 32 * v13, (uint64_t)&v27);
        sub_24D3F7E7C(&v27, &v25);
        *(void *)&v20[0] = 0x696669746E656469;
        *((void *)&v20[0] + 1) = 0xEA00000000007265;
        sub_24DCCA688();
        sub_24D3F7E8C((uint64_t)&v25, (uint64_t)v20);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_24D714668(v20, (uint64_t)&v27, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
        sub_24D5B3E28((uint64_t)&v27);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v25);
      }
    }
  }
  sub_24D5B3E28((uint64_t)&aBlock);
LABEL_16:
  uint64_t v16 = *(void **)(v5 + OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client);
  if ((objc_msgSend(v16, sel_respondsToSelector_, sel_operationDidProgressWithInfo_error_completionHandler_) & 1) == 0)return swift_bridgeObjectRelease(); {
  swift_unknownObjectRetain();
  }
  uint64_t v17 = (void *)sub_24DCC9558();
  if (a2) {
    a2 = (void *)sub_24DCC8818();
  }
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v22 = sub_24D3D2E94;
  *((void *)&v22 + 1) = &block_descriptor_435;
  uint64_t v18 = _Block_copy(&aBlock);
  swift_retain();
  objc_msgSend(v16, sel_operationDidProgressWithInfo_error_completionHandler_, v17, a2, v18);
  _Block_release(v18);

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_release();
}

id sub_24D5A4764()
{
  return sub_24D5A4958(0, type metadata accessor for ProxyOperationClient);
}

uint64_t type metadata accessor for ProxyOperationClient()
{
  return self;
}

unint64_t sub_24D5A4858()
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  id v1 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v0
                                                             + OBJC_IVAR____TtC9libfssync20FPFSServicerExtender_request), sel_shortDescription));
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0xD000000000000012;
}

id sub_24D5A4940(uint64_t a1)
{
  return sub_24D5A4958(a1, type metadata accessor for FPFSServicerExtender);
}

id sub_24D5A4958(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void sub_24D5A4A6C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7, double a8, double a9)
{
  if (a1)
  {
    uint64_t v17 = (void *)MEMORY[0x25332B1A0](*(void *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v17)
    {
      uint64_t v18 = v17;
      id v19 = objc_msgSend(v17, sel_session);

      id v20 = objc_msgSend(v19, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      if (a2) {
        a2 = sub_24DC32038(a2);
      }
      uint64_t v21 = (objc_class *)type metadata accessor for ProxyOperationClient();
      long long v22 = (char *)objc_allocWithZone(v21);
      *(void *)&v22[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_client] = a7;
      *(void *)&v22[OBJC_IVAR____TtC9libfssyncP33_7F4FBB69DAA1D0B2DA22684CBB0F5CB320ProxyOperationClient_idMap] = a2;
      v27.receiver = v22;
      v27.super_class = v21;
      swift_unknownObjectRetain();
      id v23 = objc_msgSendSuper2(&v27, sel_init);
      sub_24DC3202C(a1);
      sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26986BE60);
      sub_24D5B3CD4();
      uint64_t v24 = (void *)sub_24DCC9558();
      swift_bridgeObjectRelease();
      uint64_t v26[4] = a4;
      v26[5] = a5;
      v26[0] = MEMORY[0x263EF8330];
      v26[1] = 1107296256;
      v26[2] = sub_24D6024BC;
      v26[3] = &block_descriptor_432;
      long long v25 = _Block_copy(v26);
      swift_retain();
      swift_release();
      objc_msgSend(v20, sel_startOperation_toFetchThumbnailsWithDictionary_size_completionHandler_, v23, v24, v25, a8, a9);
      _Block_release(v25);
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a4(a3);
  }
}

uint64_t sub_24D5A4DB8(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  swift_bridgeObjectRetain();
  id v9 = a2;
  MEMORY[0x253327CA0]();
  if (*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_24DCC9C78();
  }
  sub_24DCC9CD8();
  sub_24DCC9C48();
  unint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  v10[3] = a4;
  void v10[4] = v5;
  swift_retain();
  swift_retain();
  sub_24D628640(a1, (uint64_t)sub_24D5B1FD8, (uint64_t)v10);
  swift_bridgeObjectRelease();

  return swift_release();
}

void sub_24D5A4ED0(unint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    unint64_t v11 = a1 >> 62;
    if (a1 >> 62)
    {
      swift_bridgeObjectRetain();
      if (sub_24DCCA9C8() < 2) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v12 < 2)
      {
LABEL_4:
        swift_bridgeObjectRelease();
        goto LABEL_5;
      }
    }
    uint64_t v15 = (void *)MEMORY[0x25332B1A0](*(void *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v15)
    {
      uint64_t v16 = v15;
      id v17 = objc_msgSend(v15, sel_session);

      id v18 = objc_msgSend(v17, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      id v19 = (void *)sub_24DCC9C18();
      if (v11)
      {
        swift_bridgeObjectRetain();
        uint64_t v20 = sub_24DCCA9C8();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      if (!v20) {
        goto LABEL_28;
      }
      unint64_t v21 = v20 - 1;
      if (__OFSUB__(v20, 1))
      {
        __break(1u);
      }
      else if ((a1 & 0xC000000000000001) == 0)
      {
        if ((v21 & 0x8000000000000000) != 0)
        {
          __break(1u);
        }
        else if (v21 < *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          id v22 = *(id *)(a1 + 8 * v21 + 32);
LABEL_22:
          id v23 = v22;
          swift_bridgeObjectRelease();
          v25[4] = a4;
          v25[5] = a5;
          v25[0] = MEMORY[0x263EF8330];
          v25[1] = 1107296256;
          void v25[2] = sub_24D5A51BC;
          v25[3] = &block_descriptor_127;
          uint64_t v24 = _Block_copy(v25);
          swift_retain();
          swift_release();
          objc_msgSend(v18, sel_preflightReparentItemIDs_underParentID_reply_, v19, v23, v24);
          swift_unknownObjectRelease();

          _Block_release(v24);
          return;
        }
        __break(1u);
        goto LABEL_27;
      }
      id v22 = (id)MEMORY[0x253328820](v21, a1);
      goto LABEL_22;
    }
LABEL_27:
    __break(1u);
LABEL_28:
    swift_bridgeObjectRelease();
    __break(1u);
    return;
  }
LABEL_5:
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_26986BE48);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_24DCCECE0;
    *(void *)(v13 + 32) = a3;
  }
  else
  {
    uint64_t v13 = 0;
  }
  id v14 = a3;
  a4(v13);

  swift_bridgeObjectRelease();
}

uint64_t sub_24D5A51BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  unsigned int v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
    uint64_t v2 = sub_24DCC9C28();
  }
  swift_retain();
  v3(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_24D5A531C(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
    uint64_t v3 = sub_24DCC9C18();
  }
  else
  {
    uint64_t v3 = 0;
  }
  id v4 = (id)v3;
  (*(void (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_24D5A5398(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = *(void **)(v5 + 16);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = objc_msgSend(a1, sel_itemIdentifier);
  *(_WORD *)(v11 + 24) = 256;
  uint64_t v12 = *(void **)(v5 + 32);
  *(void *)(v11 + 32) = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a1;
  *(void *)(v14 + 32) = v11 | 0x4000000000000004;
  *(void *)(v14 + 40) = a4;
  *(void *)(v14 + 48) = a5;
  *(void *)(v14 + 56) = v10;
  *(unsigned char *)(v14 + 64) = 1;
  *(unsigned char *)(v14 + 65) = a3;
  swift_retain_n();
  id v15 = v12;
  id v16 = a1;
  swift_retain();
  id v17 = v10;
  sub_24D622700((uint64_t)"singleItemChange(_:changedFields:bounce:coordinate:request:completionHandler:)", 78, 2, (void (*)(void *, id))sub_24D5B1E8C, v13, (uint64_t)sub_24D5B1F88, v14);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t sub_24D5A55E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    sub_24D3FB6F8(0, (unint64_t *)&unk_26B199E90);
    sub_24D5B06D0((unint64_t *)&unk_26B199E40, type metadata accessor for NSFileProviderItemIdentifier);
    uint64_t v4 = sub_24DCC9578();
  }
  if (a3)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
    sub_24D5B06D0((unint64_t *)&unk_26B199E40, type metadata accessor for NSFileProviderItemIdentifier);
    a3 = sub_24DCC9578();
  }
  swift_retain();
  v5(v4, a3);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void sub_24D5A58E0(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  char v7 = a1;
  if (a1)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    sub_24D3FB6F8(0, (unint64_t *)&unk_26B199E90);
    sub_24D5B06D0((unint64_t *)&unk_26B199E40, type metadata accessor for NSFileProviderItemIdentifier);
    char v7 = (void *)sub_24DCC9558();
  }
  if (a2)
  {
    type metadata accessor for NSFileProviderItemIdentifier(0);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
    sub_24D5B06D0((unint64_t *)&unk_26B199E40, type metadata accessor for NSFileProviderItemIdentifier);
    a2 = (void *)sub_24DCC9558();
  }
  if (a3) {
    uint64_t v8 = sub_24DCC8818();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = (id)v8;
  (*(void (**)(uint64_t, void *, void *))(a4 + 16))(a4, v7, a2);
}

void sub_24D5A5A58(void *a1, id a2, void (*a3)(void, id), uint64_t a4, id a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v11 = a2;
  if (a1)
  {
    if (!a2)
    {
      v29[0] = a6;
      id v14 = a1;
      uint64_t v15 = swift_bridgeObjectRetain();
      MEMORY[0x253327CA0](v15);
      if (*(void *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v29[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        sub_24DCC9C78();
      }
      sub_24DCC9CD8();
      sub_24DCC9C48();
      uint64_t v16 = v29[0];

      sub_24D3FB6F8(0, &qword_26B19A050);
      id v17 = objc_msgSend(v14, sel_parentItemID);
      char v18 = sub_24DCCA398();

      if ((v18 & 1) != 0 || a7 == 1)
      {
        a3(v29[0], 0);

        swift_bridgeObjectRelease();
      }
      else
      {
        id v19 = objc_msgSend(v14, sel_parentItemID);
        uint64_t v20 = a7 - 1;
        if (__OFSUB__(a7, 1))
        {
          __break(1u);
        }
        else
        {
          unint64_t v21 = v19;
          id v22 = *(void **)(a8 + 16);
          uint64_t v23 = *(void *)(a8 + 32);
          uint64_t v24 = (void *)swift_allocObject();
          v24[2] = a3;
          v24[3] = a4;
          v24[4] = v21;
          v24[5] = v16;
          v24[6] = v20;
          v24[7] = a8;
          v29[4] = sub_24D5B3720;
          v29[5] = v24;
          v29[0] = MEMORY[0x263EF8330];
          v29[1] = 1107296256;
          v29[2] = sub_24D418084;
          v29[3] = &block_descriptor_377;
          long long v25 = _Block_copy(v29);
          swift_retain();
          id v26 = v21;
          swift_bridgeObjectRetain();
          swift_retain();
          swift_release();
          objc_msgSend(v22, sel_itemForItemID_creatingPlaceholderIfMissing_ignoreAlternateContentsURL_request_completionHandler_, v26, 0, 0, v23, v25);
          _Block_release(v25);

          swift_bridgeObjectRelease();
        }
      }
      return;
    }
  }
  else if (!a2)
  {
    id v27 = objc_msgSend(a5, sel_identifier, a3, a4, a5);
    id v11 = (id)FPItemNotFoundError();
  }
  id v28 = a2;
  a3(0, v11);
}

uint64_t sub_24D5A5D78(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3(*a1);
}

uint64_t sub_24D5A5DA4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5, uint64_t a6, char a7)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_24D5B3538;
  *(void *)(v13 + 24) = v12;
  uint64_t v14 = swift_allocObject();
  swift_weakInit();
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = sub_24D5B3FA4;
  v15[3] = v13;
  void v15[4] = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_24D5B35A4;
  *(void *)(v16 + 24) = v15;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = sub_24D5B3608;
  *(void *)(v17 + 24) = v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a4;
  *(void *)(v18 + 24) = a1;
  *(unsigned char *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(unsigned char *)(v18 + 48) = a7;
  *(void *)(v18 + 56) = sub_24D5B3608;
  *(void *)(v18 + 64) = v16;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_24D5B3FA4;
  *(void *)(v19 + 24) = v17;
  swift_retain_n();
  swift_retain();
  swift_retain();
  id v20 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_24D3FBC7C((uint64_t)"fetchHierarchy(for:recursively:ignoreAlternateContentURL:reply:)", 64, 2, sub_24D5B36BC, v19, (uint64_t)sub_24D5B3690, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_24D5A600C(void *a1, uint64_t a2, int a3, uint64_t a4, int a5, void (*a6)(void, void *), uint64_t a7)
{
  unsigned int v76 = a6;
  int v74 = a5;
  int v75 = a3;
  uint64_t v73 = a4;
  uint64_t v11 = sub_24DCC9078();
  uint64_t v72 = *(void *)(v11 - 8);
  uint64_t v12 = MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  uint64_t v16 = (char *)&v68 - v15;
  sub_24D3D3C4C(objc_msgSend(a1, sel_identifier));
  sub_24D418298(*(void *)(a2 + 16), 0);
  if (v7)
  {
    swift_release();
    id v19 = v7;
    v76(0, v7);
  }
  else
  {
    id v20 = v17;
    uint64_t v21 = v18;
    uint64_t v70 = a7;
    uint64_t v71 = v11;
    sub_24D4018B8(v17, v18, BYTE1(v18) & 1);
    swift_release();
    if ((v21 & 0x100) != 0)
    {
      sub_24D40160C(v20, v21, 1);
      id v22 = (id)fpfs_current_or_default_log();
      uint64_t v23 = v14;
      sub_24DCC9088();
      id v24 = a1;
      long long v25 = sub_24DCC9068();
      os_log_type_t v26 = sub_24DCCA118();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        uint64_t aBlock = v28;
        *(_DWORD *)uint64_t v27 = 136315394;
        id v29 = objc_msgSend(v24, sel_identifier, v27 + 4);
        uint64_t v30 = sub_24D3D79D4();
        uint64_t v69 = (uint64_t)v23;
        uint64_t v31 = v24;
        unint64_t v33 = v32;

        uint64_t v83 = sub_24D418FB4(v30, v33, &aBlock);
        sub_24DCCA428();

        id v24 = v31;
        swift_bridgeObjectRelease();
        *(_WORD *)(v27 + 12) = 1024;
        LODWORD(v83) = v75 & 1;
        sub_24DCCA428();
        _os_log_impl(&dword_24D3D0000, v25, v26, "fetching hierarchy from provider: %s (recursive: %{BOOL}d)", (uint8_t *)v27, 0x12u);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v28, -1, -1);
        MEMORY[0x25332B030](v27, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v69, v71);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v72 + 8))(v14, v71);
      }
      char v49 = v74;
      uint64_t v50 = v70;
      uint64_t v51 = v73;
      char v52 = (void (*)(void, void))v76;
      uint64_t v53 = (void *)MEMORY[0x25332B1A0](*(void *)(v73 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
      if (v53)
      {
        uint64_t v54 = v53;
        id v55 = objc_msgSend(v53, sel_session);

        id v56 = objc_msgSend(v55, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(v51 + 32), sel_pid), -1.0);
        swift_unknownObjectRelease();
        uint64_t v57 = (void *)swift_allocObject();
        v57[2] = v52;
        v57[3] = v50;
        v57[4] = v51;
        uint64_t v81 = sub_24D5B3710;
        uint64_t v82 = v57;
        uint64_t aBlock = MEMORY[0x263EF8330];
        uint64_t v78 = 1107296256;
        os_log_type_t v79 = sub_24D5A694C;
        uint64_t v80 = &block_descriptor_364_0;
        uint64_t v58 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        swift_release();
        objc_msgSend(v56, sel_fetchHierarchyForItemID_recursively_ignoreAlternateContentURL_reply_, v24, v75 & 1, v49 & 1, v58);
        _Block_release(v58);
        swift_unknownObjectRelease();
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      id v34 = (id)fpfs_current_or_default_log();
      id v35 = v16;
      sub_24DCC9088();
      id v36 = a1;
      id v37 = sub_24DCC9068();
      os_log_type_t v38 = sub_24DCCA118();
      BOOL v39 = os_log_type_enabled(v37, v38);
      uint64_t v40 = v71;
      if (v39)
      {
        uint64_t v41 = swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        uint64_t aBlock = v69;
        *(_DWORD *)uint64_t v41 = 136315394;
        id v42 = objc_msgSend(v36, sel_identifier, v41 + 4);
        uint64_t v43 = sub_24D3D79D4();
        unint64_t v45 = v44;

        uint64_t v83 = sub_24D418FB4(v43, v45, &aBlock);
        sub_24DCCA428();

        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 12) = 1024;
        char v46 = v75;
        LODWORD(v83) = v75 & 1;
        sub_24DCCA428();
        _os_log_impl(&dword_24D3D0000, v37, v38, "fetching hierarchy from cache: %s (recursive: %{BOOL}d)", (uint8_t *)v41, 0x12u);
        uint64_t v47 = v69;
        swift_arrayDestroy();
        MEMORY[0x25332B030](v47, -1, -1);
        MEMORY[0x25332B030](v41, -1, -1);

        (*(void (**)(char *, uint64_t))(v72 + 8))(v35, v71);
        char v48 = v74;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v72 + 8))(v35, v40);
        char v48 = v74;
        char v46 = v75;
      }
      if (v46) {
        uint64_t v59 = 200;
      }
      else {
        uint64_t v59 = 2;
      }
      uint64_t v60 = v73;
      uint64_t v61 = *(void **)(v73 + 16);
      uint64_t v62 = *(void *)(v73 + 32);
      id v63 = (void *)swift_allocObject();
      uint64_t v64 = v70;
      v63[2] = v76;
      v63[3] = v64;
      uint64_t v65 = MEMORY[0x263F8EE78];
      v63[4] = v36;
      v63[5] = v65;
      v63[6] = v59;
      v63[7] = v60;
      uint64_t v81 = sub_24D5B3720;
      uint64_t v82 = v63;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v78 = 1107296256;
      os_log_type_t v79 = (uint64_t (*)(uint64_t, uint64_t, void *))sub_24D418084;
      uint64_t v80 = &block_descriptor_370;
      id v66 = _Block_copy(&aBlock);
      id v67 = v36;
      swift_retain();
      swift_retain();
      swift_release();
      objc_msgSend(v61, sel_itemForItemID_creatingPlaceholderIfMissing_ignoreAlternateContentsURL_request_completionHandler_, v67, 0, v48 & 1, v62, v66);
      _Block_release(v66);
    }
  }
}

void sub_24D5A6780(uint64_t a1, void *a2, void (*a3)(void, void *), uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    uint64_t v8 = *(void **)(a5 + 16);
    sub_24D3FB6F8(0, (unint64_t *)&unk_26B199E90);
    id v9 = (void *)sub_24DCC9C18();
    unint64_t v10 = (void *)swift_allocObject();
    v10[2] = a3;
    v10[3] = a4;
    void v10[4] = a2;
    void v13[4] = sub_24D5B37BC;
    v13[5] = v10;
    v13[0] = MEMORY[0x263EF8330];
    v13[1] = 1107296256;
    v13[2] = sub_24D5A68C8;
    v13[3] = &block_descriptor_383;
    uint64_t v11 = _Block_copy(v13);
    swift_retain();
    id v12 = a2;
    swift_release();
    objc_msgSend(v8, sel_decorateItems_completionHandler_, v9, v11);
    _Block_release(v11);
  }
  else
  {
    a3(0, a2);
  }
}

uint64_t sub_24D5A68C8(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  sub_24D3FB6F8(0, (unint64_t *)&unk_26B199E90);
  uint64_t v2 = sub_24DCC9C28();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_24D5A694C(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24D5A7E6C(a1, a2, a3, (unint64_t *)&unk_26B199E90);
}

void sub_24D5A6AD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(v11, sel_session);

    id v14 = objc_msgSend(v13, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    uint64_t v15 = (void *)sub_24DCC97B8();
    void v17[4] = a6;
    v17[5] = a7;
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 1107296256;
    v17[2] = sub_24D6024BC;
    v17[3] = &block_descriptor_323;
    uint64_t v16 = _Block_copy(v17);
    swift_retain();
    swift_release();
    objc_msgSend(v14, sel_userCheckedSuppressionCheckboxForUserInteractionIdentifier_domainIdentifier_completionHandler_, v15, a5, v16);
    _Block_release(v16);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A6CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v14 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = objc_msgSend(v14, sel_session);

    id v17 = objc_msgSend(v16, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    uint64_t v18 = (void *)sub_24DCC97B8();
    id v19 = (void *)sub_24DCC97B8();
    id v20 = (void *)swift_allocObject();
    _OWORD v20[2] = a2;
    v20[3] = a8;
    v20[4] = a9;
    v20[5] = a1;
    v20[6] = a5;
    v20[7] = a6;
    aBlock[4] = sub_24D5B33AC;
    aBlock[5] = v20;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_24D418084;
    aBlock[3] = &block_descriptor_295;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_release();
    objc_msgSend(v17, sel_fetchDefaultContainerForBundleIdentifier_defaultName_inDomainIdentifier_lookupOnly_reply_, v18, v19, a7, 1, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A6EDC(void *a1, void *a2, uint64_t a3, void (*a4)(void, id), uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v54 = a5;
  id v55 = a4;
  uint64_t v14 = sub_24DCC9078();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  uint64_t v18 = (char *)&v53 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v16);
  id v20 = (char *)&v53 - v19;
  if (a1)
  {
    id v21 = a1;
    id v22 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    uint64_t v23 = sub_24DCC9068();
    os_log_type_t v24 = sub_24DCCA108();
    if (os_log_type_enabled(v23, v24))
    {
      long long v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v25 = 0;
      _os_log_impl(&dword_24D3D0000, v23, v24, "received special default container from extension process, looking up and returning", v25, 2u);
      MEMORY[0x25332B030](v25, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    os_log_type_t v26 = (void *)swift_allocObject();
    uint64_t v27 = v54;
    v26[2] = v55;
    v26[3] = v27;
    uint64_t v26[4] = a2;
    uint64_t v28 = *(unsigned char **)(a3 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B190950);
    uint64_t v29 = swift_allocObject();
    *(_OWORD *)(v29 + 16) = xmmword_24DCD3BE0;
    *(void *)(v29 + 32) = v21;
    unint64_t v56 = v29;
    sub_24DCC9C48();
    unint64_t v30 = v56;
    id v31 = v21;
    swift_retain();
    swift_retain();
    id v32 = a2;
    sub_24D3DBBC0(v30, 0, v28, (void (*)(void *))sub_24D5B33DC, (uint64_t)v26);

    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v53 = a7;
    id v33 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    id v34 = sub_24DCC9068();
    uint64_t v35 = sub_24DCCA118();
    if (os_log_type_enabled(v34, (os_log_type_t)v35))
    {
      id v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v36 = 0;
      _os_log_impl(&dword_24D3D0000, v34, (os_log_type_t)v35, "didn't receive a special default container from extension process, creating a folder", v36, 2u);
      MEMORY[0x25332B030](v36, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    id v37 = (void *)MEMORY[0x25332B1A0](*(void *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    id v38 = objc_msgSend(v37, sel_provider);

    if (!v38)
    {
      id v52 = (id)FPDomainUnavailableError();
      v55(0, v52);

      return;
    }
    uint64_t v39 = a6;
    id v40 = objc_msgSend(v38, sel_identifier);

    sub_24DCC97E8();
    uint64_t v41 = (void *)sub_24DCC97B8();
    swift_bridgeObjectRelease();
    unsigned int v42 = objc_msgSend(v41, sel_fp_isiCloudDriveIdentifier);

    uint64_t v43 = (id *)MEMORY[0x263F05358];
    if (!v42) {
      uint64_t v43 = (id *)MEMORY[0x263F053F0];
    }
    id v44 = *v43;
    uint64_t v45 = sub_24D3D3C4C(v44);
    uint64_t v46 = swift_allocObject();
    uint64_t v47 = *(void **)(a3 + 32);
    *(void *)(v46 + 16) = v44;
    *(void *)(v46 + 24) = v47;
    unint64_t v48 = v46 | 6;
    uint64_t v49 = v54;
    swift_retain_n();
    id v50 = v44;
    swift_bridgeObjectRetain();
    swift_retain();
    id v51 = v47;
    sub_24DB5E1FC(v45, 0, v48, v39, v53, a8, a3, v55, v49);

    swift_release();
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_release_n();
}

void sub_24D5A7384(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void, id), uint64_t a6)
{
  unsigned int v42 = a5;
  uint64_t v43 = a6;
  uint64_t v38 = a4;
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  uint64_t v50 = *MEMORY[0x263EF8340];
  uint64_t v7 = sub_24DCC88B8();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194990);
  MEMORY[0x270FA5388](v11);
  id v13 = (id *)((char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v41 = sub_24DCC8A58();
  uint64_t v14 = *(void *)(v41 - 8);
  uint64_t v15 = MEMORY[0x270FA5388](v41);
  uint64_t v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v15);
  uint64_t v19 = (char *)&v38 - v18;
  sub_24D415FD0(a1, (uint64_t)v13, &qword_26B194990);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v20 = *v13;
    id aBlock = *v13;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
    swift_willThrowTypedImpl();
LABEL_6:
    id v31 = v20;
    v42(0, v20);

    return;
  }
  uint64_t v21 = v14;
  uint64_t v22 = v41;
  (*(void (**)(char *, id *, uint64_t))(v14 + 32))(v19, v13, v41);
  id aBlock = v39;
  uint64_t v45 = v40;
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, *MEMORY[0x263F06E50], v7);
  sub_24D3F0EB8();
  sub_24DCC8A48();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  id v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F08850]), sel_init);
  os_log_type_t v24 = (void *)sub_24DCC8948();
  id aBlock = 0;
  unsigned __int8 v25 = objc_msgSend(v23, sel_createDirectoryAtURL_withIntermediateDirectories_attributes_error_, v24, 1, 0, &aBlock);

  if ((v25 & 1) == 0)
  {
    id v29 = aBlock;
    id v20 = (id)sub_24DCC8828();

    swift_willThrow();
    unint64_t v30 = *(void (**)(char *, uint64_t))(v21 + 8);
    v30(v17, v22);
    v30(v19, v22);
    goto LABEL_6;
  }
  id v26 = aBlock;
  uint64_t v27 = sub_24DCC8A18();
  LOBYTE(aBlock) = 1;
  sub_24DBA9CA8(4294967294, v27, v28, 0x100000, 0, 0, (uint64_t)&aBlock, (uint64_t)sub_24D5A7888, 0);
  if (aBlock)
  {
    __break(1u);
  }
  else
  {
    uint64_t v32 = v38;
    id v33 = *(void **)(v38 + 16);
    id v34 = (void *)sub_24DCC8948();
    uint64_t v35 = *(void *)(v32 + 32);
    unint64_t v48 = (void (*)(void, void))v42;
    uint64_t v49 = v43;
    id aBlock = (id)MEMORY[0x263EF8330];
    uint64_t v45 = 1107296256;
    uint64_t v46 = sub_24D418084;
    uint64_t v47 = &block_descriptor_302;
    id v36 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v33, sel_itemForURL_request_completionHandler_, v34, v35, v36);
    _Block_release(v36);

    id v37 = *(void (**)(char *, uint64_t))(v21 + 8);
    v37(v17, v22);
    v37(v19, v22);
  }
}

uint64_t sub_24D5A7888()
{
  return sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5B340C);
}

void sub_24D5A7A7C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    uint64_t v9 = (void *)MEMORY[0x25332B1A0](*(void *)(a6 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
    if (v9)
    {
      unint64_t v10 = v9;
      id v11 = objc_msgSend(v9, sel_session);

      id v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a6 + 32), sel_pid), -1.0);
      swift_unknownObjectRelease();
      sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      id v13 = (void *)sub_24DCC9C18();
      void v15[4] = a4;
      v15[5] = a5;
      v15[0] = MEMORY[0x263EF8330];
      v15[1] = 1107296256;
      _OWORD v15[2] = sub_24D5A51BC;
      v15[3] = &block_descriptor_275;
      uint64_t v14 = _Block_copy(v15);
      swift_retain();
      swift_release();
      objc_msgSend(v12, sel_preflightTrashItemIDs_completionHandler_, v13, v14);
      _Block_release(v14);
      swift_unknownObjectRelease();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    a4();
  }
}

void *sub_24D5A7D18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (result)
  {
    uint64_t v8 = result;
    id v9 = objc_msgSend(result, sel_session);

    id v10 = objc_msgSend(v9, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    v12[4] = a3;
    v12[5] = a4;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 1107296256;
    v12[2] = sub_24D5A7E58;
    v12[3] = &block_descriptor_266;
    id v11 = _Block_copy(v12);
    swift_retain();
    swift_release();
    objc_msgSend(v10, sel_fetchTrashIdentifiersWithCompletionHandler_, v11);
    _Block_release(v11);
    return (void *)swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5A7E58(uint64_t a1, uint64_t a2, void *a3)
{
  return sub_24D5A7E6C(a1, a2, a3, (unint64_t *)&unk_26B1940B0);
}

uint64_t sub_24D5A7E6C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v5 = a2;
  id v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  if (a2)
  {
    sub_24D3FB6F8(0, a4);
    uint64_t v5 = sub_24DCC9C28();
  }
  swift_retain();
  id v7 = a3;
  v6(v5, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_24D5A803C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (a1)
  {
    sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
    uint64_t v5 = (void *)sub_24DCC9C18();
  }
  if (a2) {
    uint64_t v6 = sub_24DCC8818();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, void *))(a3 + 16))(a3, v5);
}

void sub_24D5A80E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v9 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_msgSend(v9, sel_session);

    id v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    void v15[4] = a4;
    v15[5] = a5;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 1107296256;
    _OWORD v15[2] = sub_24D5B75F0;
    v15[3] = &block_descriptor_254;
    id v13 = _Block_copy(v15);
    swift_retain();
    swift_release();
    id v14 = objc_msgSend(v12, sel_fetchPublishingURLForItemID_completionHandler_, a3, v13);
    _Block_release(v13);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A835C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v11)
  {
    id v12 = v11;
    id v13 = objc_msgSend(v11, sel_session);

    id v14 = objc_msgSend(v13, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    void v17[4] = a5;
    v17[5] = a6;
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 1107296256;
    v17[2] = sub_24D6024BC;
    v17[3] = &block_descriptor_245;
    uint64_t v15 = _Block_copy(v17);
    swift_retain();
    swift_release();
    id v16 = objc_msgSend(v14, sel_disconnectDomainID_options_completionHandler_, a3, a4, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A855C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v9 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v9)
  {
    id v10 = v9;
    id v11 = objc_msgSend(v9, sel_session);

    id v12 = objc_msgSend(v11, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    id v13 = (void *)sub_24DCC97B8();
    void v15[4] = a5;
    v15[5] = a6;
    v15[0] = MEMORY[0x263EF8330];
    v15[1] = 1107296256;
    _OWORD v15[2] = sub_24D6024BC;
    v15[3] = &block_descriptor_224;
    id v14 = _Block_copy(v15);
    swift_retain();
    swift_release();
    objc_msgSend(v12, sel_wakeForSessionIdentifier_completionHandler_, v13, v14);
    _Block_release(v14);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A875C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v10 = (void *)MEMORY[0x25332B1A0](*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v10)
  {
    id v11 = v10;
    id v12 = objc_msgSend(v10, sel_session);

    id v13 = objc_msgSend(v12, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a2 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    id v14 = (void *)sub_24DCC8818();
    void v16[4] = a5;
    v16[5] = a6;
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 1107296256;
    v16[2] = sub_24D5A88C4;
    v16[3] = &block_descriptor_203;
    uint64_t v15 = _Block_copy(v16);
    swift_retain();
    swift_release();
    objc_msgSend(v13, sel_attemptRecoveryFromError_optionIndex_completionHandler_, v14, a4, v15);
    _Block_release(v15);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5A88C4(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3();
  swift_release();
}

uint64_t sub_24D5A8A48(void *a1, void *a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = MEMORY[0x263F8EE78];
  if (a3)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B190950);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_24DCD3BE0;
    *(void *)(v15 + 32) = a3;
    unint64_t v29 = v15;
    sub_24DCC9C48();
    unint64_t v16 = v29;
  }
  else
  {
    unint64_t v16 = MEMORY[0x263F8EE78];
  }
  if (a2) {
    uint64_t v17 = (uint64_t)a2;
  }
  else {
    uint64_t v17 = v14;
  }
  uint64_t v30 = v17;
  swift_bridgeObjectRetain();
  id v18 = a3;
  sub_24D785B90(v16);
  uint64_t v19 = *(unsigned char **)(v8 + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v25 = v18;
  swift_retain();
  id v20 = a1;
  uint64_t v21 = a8;
  id v22 = v20;
  id v24 = a4;
  swift_bridgeObjectRetain();
  sub_24D6B86C0(v30, v19, v8, v22, a2, a3, a4, a5, a6, a7, v21);
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

void sub_24D5A8BF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v17 = (void *)MEMORY[0x25332B1A0](*(void *)(a1 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v17)
  {
    id v18 = v17;
    id v19 = objc_msgSend(v17, sel_session);

    id v20 = objc_msgSend(v19, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a1 + 32), sel_pid), -1.0);
    swift_unknownObjectRelease();
    if (a3)
    {
      sub_24D3FB6F8(0, (unint64_t *)&unk_26B199E90);
      a3 = (void *)sub_24DCC9C18();
    }
    if (a6) {
      a6 = (void *)sub_24DCC9E68();
    }
    if (a7) {
      a7 = (void *)sub_24DCC9E68();
    }
    aBlock[4] = a8;
    aBlock[5] = a9;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_24D5A8DEC;
    aBlock[3] = &block_descriptor_103;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v20, sel_userInteractionErrorsForPerformingAction_sourceItems_destinationItem_fpProviderDomainId_sourceItemKeysAllowList_destinationItemKeysAllowList_completionHandler_, a2, a3, a4, a5, a6, a7, v21);
    _Block_release(v21);
    swift_unknownObjectRelease();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24D5A8DEC(uint64_t a1)
{
  id v1 = *(void (**)(uint64_t))(a1 + 32);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
  uint64_t v2 = sub_24DCC9C28();
  swift_retain();
  v1(v2);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_24D5A8FE4(uint64_t a1, uint64_t a2)
{
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
  id v3 = (id)sub_24DCC9C18();
  (*(void (**)(uint64_t, id))(a2 + 16))(a2, v3);
}

void sub_24D5A9054(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, unsigned char *a6)
{
  id v7 = v6;
  uint64_t v77 = a6;
  uint64_t v81 = a5;
  uint64_t v12 = sub_24DCC9078();
  uint64_t v78 = *(void *)(v12 - 8);
  uint64_t v79 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v15 = &v70[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x270FA5388](v13);
  uint64_t v17 = &v70[-v16];
  id v18 = a1;
  uint64_t v19 = sub_24D3D3C4C(objc_msgSend(v18, sel_identifier));

  id v20 = sub_24DAC6F8C(a2);
  uint64_t v80 = v19;
  if (v6)
  {

    id v21 = 0;
    id v7 = 0;
  }
  else
  {
    id v22 = v20;
    if (v20)
    {
      id v23 = a4;
      id v24 = *(void **)(*(void *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
      id v25 = objc_allocWithZone(MEMORY[0x263F054B8]);
      id v26 = v24;
      a4 = v23;
      id v7 = 0;
      id v27 = v26;
      id v21 = objc_msgSend(v25, sel_initWithProviderDomainID_itemIdentifier_, v26, v22);
    }
    else
    {
      id v21 = 0;
    }
  }
  unint64_t v84 = MEMORY[0x263F8EE78];
  id v82 = v21;
  id v28 = v18;
  MEMORY[0x253327CA0]();
  if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_24DCC9C78();
  }
  sub_24DCC9CD8();
  sub_24DCC9C48();
  if (v21)
  {
    id v29 = v82;
    MEMORY[0x253327CA0]();
    if (*(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v84 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_24DCC9C78();
    }
    sub_24DCC9CD8();
    sub_24DCC9C48();
  }
  unint64_t v30 = v84;

  id v31 = (void *)MEMORY[0x25332B1A0](*(void *)(a3 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (v31)
  {
    uint64_t v32 = v31;
    id v33 = objc_msgSend(v31, sel_indexer);

    if (v33)
    {
      type metadata accessor for FPFSIndexer();
      uint64_t v34 = swift_dynamicCastClass();
      if (v34)
      {
        uint64_t v35 = v34;
        if (v30 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v58 = sub_24DCCA9C8();
          swift_bridgeObjectRelease();
          if (v58 >= 1) {
            goto LABEL_17;
          }
        }
        else if (*(uint64_t *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10) >= 1)
        {
LABEL_17:
          id v36 = (id)fpfs_current_or_default_log();
          sub_24DCC9088();
          swift_bridgeObjectRetain_n();
          id v37 = v33;
          uint64_t v38 = sub_24DCC9068();
          os_log_type_t v39 = sub_24DCCA118();
          int v40 = v39;
          if (os_log_type_enabled(v38, v39))
          {
            uint64_t v41 = swift_slowAlloc();
            int v74 = v7;
            int v75 = (uint8_t *)v30;
            unsigned int v76 = a4;
            uint64_t v42 = v41;
            uint64_t v72 = (void *)swift_slowAlloc();
            uint64_t v73 = swift_slowAlloc();
            unint64_t v84 = v73;
            *(_DWORD *)uint64_t v42 = 136315394;
            uint64_t v43 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
            swift_bridgeObjectRetain();
            id v44 = v37;
            uint64_t v45 = v35;
            uint64_t v46 = MEMORY[0x253327CD0](v75, v43);
            unint64_t v48 = v47;
            swift_bridgeObjectRelease();
            uint64_t v83 = sub_24D418FB4(v46, v48, (uint64_t *)&v84);
            sub_24DCCA428();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v42 + 12) = 2112;
            int v71 = v40;
            uint64_t v83 = v45;
            uint64_t v49 = v38;
            id v50 = v44;
            uint64_t v51 = v45;
            id v37 = v44;
            sub_24DCCA428();
            id v52 = v72;
            *uint64_t v72 = v51;

            uint64_t v53 = v49;
            _os_log_impl(&dword_24D3D0000, v49, (os_log_type_t)v71, "Deleting item ids:%s, with indexer %@", (uint8_t *)v42, 0x16u);
            __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
            swift_arrayDestroy();
            MEMORY[0x25332B030](v52, -1, -1);
            uint64_t v54 = v73;
            swift_arrayDestroy();
            MEMORY[0x25332B030](v54, -1, -1);
            uint64_t v55 = v42;
            unint64_t v30 = (unint64_t)v75;
            a4 = v76;
            MEMORY[0x25332B030](v55, -1, -1);
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v17, v79);
          uint64_t v56 = (uint64_t)v77;
          uint64_t v57 = (void *)swift_allocObject();
          v57[2] = v30;
          v57[3] = a4;
          v57[4] = v81;
          swift_bridgeObjectRetain();
          swift_retain();
          sub_24DB79E5C(MEMORY[0x263F8EE78], v30, v56, (uint64_t)sub_24D5B098C, (uint64_t)v57);
          swift_release();
          swift_bridgeObjectRelease();

          goto LABEL_27;
        }
      }
    }
  }
  id v59 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  swift_bridgeObjectRetain();
  uint64_t v60 = sub_24DCC9068();
  os_log_type_t v61 = sub_24DCCA128();
  if (os_log_type_enabled(v60, v61))
  {
    unsigned int v76 = a4;
    uint64_t v62 = (uint8_t *)swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    uint64_t v77 = v15;
    uint64_t v64 = v63;
    unint64_t v84 = v63;
    *(_DWORD *)uint64_t v62 = 136315138;
    int v75 = v62 + 4;
    uint64_t v65 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
    uint64_t v66 = swift_bridgeObjectRetain();
    uint64_t v67 = MEMORY[0x253327CD0](v66, v65);
    unint64_t v69 = v68;
    swift_bridgeObjectRelease();
    uint64_t v83 = sub_24D418FB4(v67, v69, (uint64_t *)&v84);
    sub_24DCCA428();
    swift_bridgeObjectRelease_n();
    a4 = v76;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24D3D0000, v60, v61, "FPFSIndexer is missing for fpfs backed or no ids to delete: %s.", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v64, -1, -1);
    MEMORY[0x25332B030](v62, -1, -1);

    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v77, v79);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(unsigned char *, uint64_t))(v78 + 8))(v15, v79);
  }
  a4(0);
LABEL_27:
  swift_release();
}

void sub_24D5A981C(void *a1, unint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8 = sub_24DCC9078();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v10);
  uint64_t v14 = (char *)&v47 - v13;
  if (!a1)
  {
    id v32 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    swift_bridgeObjectRetain_n();
    id v33 = sub_24DCC9068();
    uint64_t v34 = sub_24DCCA118();
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      uint64_t v51 = a4;
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      uint64_t v55 = v36;
      id v52 = a3;
      *(_DWORD *)uint64_t v35 = 136315138;
      uint64_t v49 = (uint64_t)(v35 + 4);
      uint64_t v37 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      uint64_t v38 = swift_bridgeObjectRetain();
      uint64_t v39 = MEMORY[0x253327CD0](v38, v37);
      uint64_t v50 = v8;
      unint64_t v41 = v40;
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_24D418FB4(v39, v41, &v55);
      a3 = v52;
      sub_24DCCA428();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24D3D0000, v33, (os_log_type_t)v34, "Succeeded deleting %s from spotlight index.", v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v36, -1, -1);
      MEMORY[0x25332B030](v35, -1, -1);

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v50);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
    a3(0);
    return;
  }
  id v15 = a1;
  id v16 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  swift_bridgeObjectRetain();
  id v17 = a1;
  swift_bridgeObjectRetain();
  id v18 = a1;
  uint64_t v19 = sub_24DCC9068();
  os_log_type_t v20 = sub_24DCCA118();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = swift_slowAlloc();
    uint64_t v51 = a4;
    uint64_t v22 = v21;
    unint64_t v48 = (void *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    uint64_t v55 = v49;
    *(_DWORD *)uint64_t v22 = 136315394;
    uint64_t v23 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
    id v52 = a3;
    uint64_t v24 = v23;
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = MEMORY[0x253327CD0](v25, v24);
    uint64_t v50 = v8;
    unint64_t v28 = v27;
    swift_bridgeObjectRelease();
    uint64_t v54 = sub_24D418FB4(v26, v28, &v55);
    sub_24DCCA428();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2112;
    swift_getErrorValue();
    id v29 = sub_24DBA2828(v53);
    uint64_t v54 = (uint64_t)v29;
    a3 = v52;
    sub_24DCCA428();
    unint64_t v30 = v48;
    *unint64_t v48 = v29;

    _os_log_impl(&dword_24D3D0000, v19, v20, "Could not delete %s from spotlight index: %@", (uint8_t *)v22, 0x16u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v30, -1, -1);
    uint64_t v31 = v49;
    swift_arrayDestroy();
    MEMORY[0x25332B030](v31, -1, -1);
    MEMORY[0x25332B030](v22, -1, -1);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v50);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  if (!(a2 >> 62))
  {
    uint64_t v42 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v42) {
      goto LABEL_9;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    __break(1u);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  if (!sub_24DCCA9C8()) {
    goto LABEL_17;
  }
LABEL_9:
  if ((a2 & 0xC000000000000001) != 0)
  {
LABEL_18:
    id v43 = (id)MEMORY[0x253328820](0, a2);
    goto LABEL_12;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v43 = *(id *)(a2 + 32);
LABEL_12:
    id v44 = v43;
    swift_bridgeObjectRelease();
    id v45 = objc_msgSend(v44, sel_identifier);

    id v46 = (id)FPItemNotFoundError();
    a3(v46);

    return;
  }
  __break(1u);
}

uint64_t sub_24D5A9E14(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v12 = sub_24DCC9078();
  uint64_t v41 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v15 = a2 & 1;
  uint64_t v16 = swift_allocObject();
  uint64_t v43 = a1;
  swift_weakInit();
  id v17 = (void *)swift_allocObject();
  v17[2] = a3;
  v17[3] = a4;
  uint64_t v42 = v17;
  void v17[4] = v16;
  swift_retain();
  id v18 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  uint64_t v19 = a5;
  uint64_t v39 = v14;
  os_log_type_t v20 = sub_24DCC9068();
  os_log_type_t v21 = sub_24DCCA118();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v40 = a2 & 1;
  if (v22)
  {
    uint64_t v23 = swift_slowAlloc();
    uint64_t v37 = (void *)swift_slowAlloc();
    uint64_t v38 = a6;
    *(_DWORD *)uint64_t v23 = 138412546;
    id v45 = v19;
    uint64_t v24 = v19;
    sub_24DCCA428();
    uint64_t v25 = v37;
    *uint64_t v37 = v19;

    *(_WORD *)(v23 + 12) = 1024;
    int v44 = v15;
    sub_24DCCA428();
    _os_log_impl(&dword_24D3D0000, v20, v21, "Request to delete item with ID: %@; recursively %{BOOL}d",
      (uint8_t *)v23,
      0x12u);
    __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
    swift_arrayDestroy();
    a6 = v38;
    MEMORY[0x25332B030](v25, -1, -1);
    MEMORY[0x25332B030](v23, -1, -1);
  }
  else
  {

    os_log_type_t v20 = v19;
  }

  (*(void (**)(char *, uint64_t))(v41 + 8))(v39, v12);
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = [v19 identifier];
  *(void *)(v26 + 24) = objc_msgSend(self, sel_requestForSelf);
  uint64_t v27 = v43;
  uint64_t v28 = *(void *)(v43 + 16);
  id v29 = v19;
  uint64_t v30 = sub_24D3D3C4C([v29 identifier]);

  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = v29;
  *(void *)(v31 + 24) = a6;
  *(void *)(v31 + 32) = v27;
  *(void *)(v31 + 40) = sub_24D472988;
  *(void *)(v31 + 48) = v42;
  *(unsigned char *)(v31 + 56) = v40;
  id v32 = objc_allocWithZone(MEMORY[0x263F08AB8]);
  id v33 = v29;
  swift_retain();
  swift_retain();
  swift_retain();
  id v34 = objc_msgSend(v32, sel_init);
  swift_retain();
  swift_retain();
  sub_24D466E74(v30, 1, 0, v26 | 2, v34, 0, v28, (void (*)(uint64_t *))sub_24D5B0778, v31, v26 | 2);
  swift_release();
  swift_release();

  swift_release_n();
  return swift_release_n();
}

void sub_24D5AA234(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, int a7)
{
  LODWORD(v84) = a7;
  uint64_t v88 = a2;
  uint64_t v89 = a6;
  id v85 = a5;
  uint64_t v86 = a4;
  uint64_t v87 = a3;
  uint64_t v8 = type metadata accessor for VFSItem(0);
  MEMORY[0x270FA5388](v8);
  uint64_t v10 = (char *)&v78 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24DCC9078();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = MEMORY[0x270FA5388](v11);
  int v15 = (char *)&v78 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  id v17 = (char *)&v78 - v16;
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194250);
  MEMORY[0x270FA5388](v18);
  os_log_type_t v20 = (void **)((char *)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24D415FD0(a1, (uint64_t)v20, &qword_26B194250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    os_log_type_t v21 = v88;
    uint64_t v83 = v12;
    uint64_t v84 = v11;
    BOOL v22 = *v20;
    _s3__C4CodeOMa_1(0);
    v90[0] = -1005;
    id v23 = v22;
    sub_24D5B06D0((unint64_t *)&qword_26B194040, _s3__C4CodeOMa_1);
    char v24 = sub_24DCC86A8();

    if (v24)
    {

      id v25 = (id)fpfs_current_or_default_log();
      uint64_t v26 = v17;
      sub_24DCC9088();
      uint64_t v27 = v21;
      uint64_t v28 = sub_24DCC9068();
      os_log_type_t v29 = sub_24DCCA118();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v31 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 138412290;
        v90[0] = v27;
        id v32 = v27;
        sub_24DCCA428();
        *uint64_t v31 = v27;

        _os_log_impl(&dword_24D3D0000, v28, v29, "Item %@ does not exist, deleting from index", v30, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v31, -1, -1);
        MEMORY[0x25332B030](v30, -1, -1);
      }
      else
      {

        uint64_t v28 = v27;
      }
      uint64_t v67 = v86;
      uint64_t v68 = v87;
      uint64_t v69 = v83;

      (*(void (**)(char *, uint64_t))(v69 + 8))(v26, v84);
      uint64_t v70 = *(void *)(v67 + 16);
      uint64_t v71 = swift_allocObject();
      uint64_t v72 = v85;
      uint64_t v73 = v89;
      *(void *)(v71 + 16) = v85;
      *(void *)(v71 + 24) = v73;
      int v74 = (void *)swift_allocObject();
      v74[2] = v27;
      v74[3] = v70;
      v74[4] = v68;
      v74[5] = v72;
      v74[6] = v73;
      v74[7] = 0;
      swift_retain_n();
      int v75 = v27;
      swift_retain();
      swift_retain();
      sub_24D3FBC7C((uint64_t)"deleteSearchableItem(itemID:db:indexReason:completionHandler:)", 62, 2, sub_24D475710, v71, (uint64_t)sub_24D5B095C, (uint64_t)v74);
      swift_release();
      swift_release();
    }
    else
    {
      id v51 = (id)fpfs_current_or_default_log();
      id v52 = v15;
      sub_24DCC9088();
      id v53 = v22;
      uint64_t v54 = v21;
      id v55 = v22;
      uint64_t v56 = v54;
      uint64_t v57 = sub_24DCC9068();
      os_log_type_t v58 = sub_24DCCA128();
      int v59 = v58;
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v60 = swift_slowAlloc();
        LODWORD(v87) = v59;
        uint64_t v61 = v60;
        uint64_t v62 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 138412546;
        v90[0] = v56;
        uint64_t v63 = v56;
        uint64_t v88 = v57;
        uint64_t v64 = v63;
        sub_24DCCA428();
        *uint64_t v62 = v56;

        *(_WORD *)(v61 + 12) = 2112;
        id v65 = v22;
        uint64_t v66 = _swift_stdlib_bridgeErrorToNSError();
        v90[0] = v66;
        uint64_t v57 = v88;
        sub_24DCCA428();
        v62[1] = v66;

        _os_log_impl(&dword_24D3D0000, v57, (os_log_type_t)v87, "Can't find %@ error %@", (uint8_t *)v61, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v62, -1, -1);
        MEMORY[0x25332B030](v61, -1, -1);
      }
      else
      {
      }
      uint64_t v76 = v84;

      (*(void (**)(char *, uint64_t))(v83 + 8))(v52, v76);
      id v77 = v22;
      v85(v22);
    }
  }
  else
  {
    sub_24D46A4D0((uint64_t)v20, (uint64_t)v10);
    uint64_t v33 = v86;
    uint64_t v81 = *(void *)(*(void *)(*(void *)(v86 + 16) + 32) + 16);
    type metadata accessor for VFSFileTree(0);
    uint64_t v34 = swift_dynamicCastClassUnconditional();
    uint64_t v35 = *(void *)v10;
    uint64_t v82 = v34;
    uint64_t v83 = v35;
    uint64_t v36 = &v10[*(int *)(v8 + 36)];
    uint64_t v37 = *(void *)v36;
    uint64_t v38 = *((unsigned int *)v36 + 2);
    uint64_t v79 = v38;
    uint64_t v39 = *((void *)v36 + 2);
    uint64_t v40 = v36[24];
    uint64_t v41 = *((void *)v10 + 2);
    uint64_t v80 = v10[24];
    uint64_t v42 = *((void *)v10 + 4);
    uint64_t v78 = *((void *)v10 + 5);
    char v91 = v40;
    int v43 = v10[8];
    int v44 = (void *)swift_allocObject();
    id v45 = v85;
    v44[2] = v88;
    v44[3] = v45;
    uint64_t v46 = v87;
    v44[4] = v89;
    v44[5] = v46;
    v44[6] = v33;
    v90[0] = v37;
    v90[1] = v38;
    v90[2] = v39;
    v90[3] = v40;
    v90[4] = 0;
    v90[5] = v41;
    LOBYTE(v38) = v80;
    v90[6] = v80;
    v90[7] = v42;
    uint64_t v47 = v78;
    v90[8] = v78;
    memset(&v90[9], 0, 24);
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v83;
    *(unsigned char *)(v48 + 24) = v43;
    *(void *)(v48 + 32) = v82;
    *(void *)(v48 + 40) = sub_24D5B08C8;
    *(void *)(v48 + 48) = v44;
    *(void *)(v48 + 56) = v37;
    *(_DWORD *)(v48 + 64) = v79;
    *(void *)(v48 + 72) = v39;
    *(unsigned char *)(v48 + 80) = v91;
    *(void *)(v48 + 88) = 0;
    *(void *)(v48 + 96) = v41;
    *(unsigned char *)(v48 + 104) = v38;
    *(void *)(v48 + 112) = v42;
    *(void *)(v48 + 120) = v47;
    char v49 = v84 & 1;
    *(void *)(v48 + 136) = 0;
    *(void *)(v48 + 144) = 0;
    *(void *)(v48 + 128) = 0;
    *(unsigned char *)(v48 + 152) = v49;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v50 = v88;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_24D3DC118(v83, v43, (uint64_t)v90, 0, 0, (uint64_t)sub_24D5B0938, v48);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release();
    sub_24D4C5988((uint64_t)v10);
  }
}

void sub_24D5AAA84(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, NSObject *a5, uint64_t a6)
{
  uint64_t v57 = a6;
  os_log_type_t v58 = a5;
  uint64_t v10 = sub_24DCC9078();
  uint64_t v59 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  int v15 = (char *)&v52 - v14;
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26986BE40);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (void **)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24D415FD0(a1, (uint64_t)v18, &qword_26986BE40);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *v18;
    id v20 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    id v21 = a2;
    id v22 = v19;
    id v23 = v21;
    id v24 = v19;
    id v25 = sub_24DCC9068();
    os_log_type_t v26 = sub_24DCCA128();
    int v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v28 = swift_slowAlloc();
      LODWORD(v57) = v27;
      uint64_t v29 = v28;
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 138412546;
      os_log_type_t v58 = v25;
      uint64_t v55 = v10;
      uint64_t v56 = a4;
      aBlock[0] = v23;
      uint64_t v31 = a3;
      id v32 = v23;
      sub_24DCCA428();
      *uint64_t v30 = v23;

      a3 = v31;
      *(_WORD *)(v29 + 12) = 2112;
      swift_getErrorValue();
      id v33 = sub_24DBA2828(v60);
      aBlock[0] = v33;
      uint64_t v10 = v55;
      sub_24DCCA428();
      v30[1] = v33;
      id v25 = v58;

      _os_log_impl(&dword_24D3D0000, v25, (os_log_type_t)v57, "Failed to delete item %@ with error %@", (uint8_t *)v29, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v30, -1, -1);
      MEMORY[0x25332B030](v29, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v10);
    id v42 = v19;
    a3(v19);
  }
  else
  {
    id v34 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    uint64_t v35 = a2;
    uint64_t v36 = sub_24DCC9068();
    os_log_type_t v37 = sub_24DCCA118();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v56 = a4;
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      id v53 = (void *)swift_slowAlloc();
      uint64_t v54 = v38;
      uint64_t v55 = v10;
      *(_DWORD *)uint64_t v38 = 138412290;
      aBlock[0] = v35;
      uint64_t v39 = v35;
      uint64_t v10 = v55;
      sub_24DCCA428();
      uint64_t v40 = v53;
      *id v53 = v35;

      a4 = v56;
      uint64_t v41 = v54;
      _os_log_impl(&dword_24D3D0000, v36, v37, "Succeeded deleting item with itemID %@, not wating on ingestion", v54, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v40, -1, -1);
      MEMORY[0x25332B030](v41, -1, -1);
    }
    else
    {

      uint64_t v36 = v35;
    }

    (*(void (**)(char *, uint64_t))(v59 + 8))(v13, v10);
    uint64_t v43 = *(void *)(v57 + 16);
    uint64_t v44 = swift_allocObject();
    *(void *)(v44 + 16) = a3;
    *(void *)(v44 + 24) = a4;
    id v45 = (void *)swift_allocObject();
    v45[2] = v35;
    v45[3] = v43;
    uint64_t v46 = v58;
    v45[4] = v58;
    v45[5] = a3;
    v45[6] = a4;
    v45[7] = 0;
    swift_retain_n();
    uint64_t v47 = v35;
    swift_retain();
    swift_retain();
    sub_24D3FBC7C((uint64_t)"deleteSearchableItem(itemID:db:indexReason:completionHandler:)", 62, 2, sub_24D475710, v44, (uint64_t)sub_24D5B095C, (uint64_t)v45);
    swift_release();
    swift_release();
    Class isa = v46[2].isa;
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = v47;
    aBlock[4] = sub_24D5B0A58;
    aBlock[5] = v49;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_24D418084;
    aBlock[3] = &block_descriptor_100;
    uint64_t v50 = _Block_copy(aBlock);
    id v51 = v47;
    swift_release();
    [(objc_class *)isa forceFSIngestionForItemID:v51 completionHandler:v50];
    _Block_release(v50);
    sub_24D415F74((uint64_t)v18, &qword_26986BE40);
  }
}

uint64_t sub_24D5AB0D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5 = sub_24DCC9078();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = MEMORY[0x270FA5388](v5);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v35 - v10;
  if (a2)
  {
    id v12 = a2;
    id v13 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    uint64_t v14 = a3;
    id v15 = a2;
    uint64_t v16 = sub_24DCC9068();
    os_log_type_t v17 = sub_24DCCA128();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      uint64_t v36 = v6;
      id v20 = (void *)v19;
      *(_DWORD *)uint64_t v18 = 138412546;
      os_log_t v35 = v16;
      uint64_t v39 = v14;
      uint64_t v37 = v5;
      id v21 = v14;
      sub_24DCCA428();
      *id v20 = v14;

      *(_WORD *)(v18 + 12) = 2112;
      swift_getErrorValue();
      id v22 = sub_24DBA2828(v38);
      uint64_t v39 = v22;
      uint64_t v5 = v37;
      sub_24DCCA428();
      v20[1] = v22;

      os_log_t v23 = v35;
      _os_log_impl(&dword_24D3D0000, v35, v17, "Failed to force ingestion of item %@ with error %@", (uint8_t *)v18, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      id v24 = v20;
      uint64_t v6 = v36;
      MEMORY[0x25332B030](v24, -1, -1);
      MEMORY[0x25332B030](v18, -1, -1);
    }
    else
    {
    }
    uint64_t v11 = v9;
  }
  else
  {
    id v25 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    os_log_type_t v26 = a3;
    int v27 = sub_24DCC9068();
    os_log_type_t v28 = sub_24DCCA118();
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v36 = v6;
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      uint64_t v37 = v5;
      uint64_t v31 = (void *)v30;
      *(_DWORD *)uint64_t v29 = 138412290;
      uint64_t v39 = v26;
      id v32 = v26;
      uint64_t v6 = v36;
      sub_24DCCA428();
      *uint64_t v31 = v26;

      _os_log_impl(&dword_24D3D0000, v27, v28, "Succeeded ingesting deletion for item with itemID %@", v29, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      id v33 = v31;
      uint64_t v5 = v37;
      MEMORY[0x25332B030](v33, -1, -1);
      MEMORY[0x25332B030](v29, -1, -1);
    }
    else
    {

      int v27 = v26;
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

void *sub_24D5AB4BC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v87 = a2;
  uint64_t v77 = sub_24DCC92F8();
  uint64_t v7 = *(void *)(v77 - 8);
  MEMORY[0x270FA5388](v77);
  uint64_t v76 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_24DCC9398();
  uint64_t v9 = *(void **)(v75 - 8);
  MEMORY[0x270FA5388](v75);
  int v74 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_24DCC9078();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v15 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  swift_bridgeObjectRetain_n();
  uint64_t v16 = sub_24DCC9068();
  os_log_type_t v17 = sub_24DCCA118();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v69 = a4;
  uint64_t v68 = a3;
  if (v18)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    long long v93 = v9;
    uint64_t v21 = v20;
    aBlock[0] = v20;
    uint64_t v92 = v11;
    *(_DWORD *)uint64_t v19 = 136315138;
    char v91 = v19 + 4;
    uint64_t v22 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = MEMORY[0x253327CD0](v23, v22);
    uint64_t v94 = v7;
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    v97[4] = sub_24D418FB4(v24, v26, aBlock);
    sub_24DCCA428();
    swift_bridgeObjectRelease_n();
    uint64_t v7 = v94;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_24D3D0000, v16, v17, "Request to delete items: %s", v19, 0xCu);
    swift_arrayDestroy();
    uint64_t v27 = v21;
    uint64_t v9 = v93;
    MEMORY[0x25332B030](v27, -1, -1);
    MEMORY[0x25332B030](v19, -1, -1);

    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v92);
  }
  else
  {

    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = 0;
  uint64_t v78 = (void **)(v28 + 16);
  dispatch_group_t v88 = dispatch_group_create();
  if (a1 >> 62)
  {
LABEL_29:
    swift_bridgeObjectRetain();
    uint64_t v29 = sub_24DCCA9C8();
    if (v29) {
      goto LABEL_6;
    }
LABEL_30:
    swift_bridgeObjectRelease();
    uint64_t v59 = *(void *)(v89 + 16);
    unint64_t v60 = a1;
    uint64_t v61 = *(void **)(v59 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log);
    uint64_t v62 = *(void **)(v59 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
    uint64_t v63 = (void *)swift_allocObject();
    v63[2] = v28;
    v63[3] = v60;
    uint64_t v64 = v69;
    v63[4] = v68;
    v63[5] = v64;
    swift_bridgeObjectRetain();
    swift_retain();
    id v65 = v61;
    id v66 = v62;
    swift_retain();
    dispatch_group_t v67 = v88;
    sub_24D3E2DA8((uint64_t)"deleteItems(with:options:completionHandler:)", 44, 2, v61, v66, (uint64_t)sub_24D5B06C4, (uint64_t)v63);
    swift_release();

    return (void *)swift_release();
  }
  uint64_t v29 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v29) {
    goto LABEL_30;
  }
LABEL_6:
  char v91 = *(uint8_t **)(v89 + 16);
  uint64_t v92 = (uint64_t)&v91[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  uint64_t v83 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started;
  uint64_t v82 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_initializationGroup;
  uint64_t v81 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log;
  uint64_t v80 = OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue;
  unint64_t v86 = a1 & 0xC000000000000001;
  swift_beginAccess();
  uint64_t v72 = v97;
  uint64_t v71 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v70 = (void (**)(char *, uint64_t))(v9 + 1);
  uint64_t v30 = 4;
  unint64_t v84 = a1;
  uint64_t v73 = v28;
  uint64_t v85 = v29;
  while (1)
  {
    if (v86) {
      id v36 = (id)MEMORY[0x253328820](v30 - 4, a1);
    }
    else {
      id v36 = *(id *)(a1 + 8 * v30);
    }
    uint64_t v37 = v36;
    if (__OFADD__(v30 - 4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    uint64_t v94 = v30 - 3;
    dispatch_group_t v38 = v88;
    dispatch_group_enter(v88);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v28;
    *(void *)(v39 + 24) = v38;
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_24D5B0610;
    *(void *)(v7 + 24) = v39;
    uint64_t v40 = (void *)swift_allocObject();
    v40[2] = v87;
    v40[3] = sub_24D5B0610;
    v40[4] = v39;
    v40[5] = v37;
    v40[6] = v89;
    uint64_t v41 = (void *)MEMORY[0x25332B1A0](v92);
    swift_retain_n();
    swift_retain_n();
    id v42 = v38;
    long long v93 = v37;
    swift_retain();
    if (!v41) {
      goto LABEL_20;
    }
    if (!objc_msgSend(v41, sel_unableToStartup))
    {

LABEL_20:
      unint64_t v90 = (unint64_t)v42;
      if ((v91[v83] & 1) == 0)
      {
        uint64_t v47 = (void *)MEMORY[0x25332B1A0](v92);
        if (v47)
        {
          uint64_t v48 = v47;
          id v79 = objc_msgSend(v47, sel_serialQueue);

          v97[2] = nullsub_1;
          v97[3] = 0;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 1107296256;
          v97[0] = sub_24D3D2E94;
          v97[1] = &block_descriptor_6;
          uint64_t v49 = _Block_copy(aBlock);
          uint64_t v50 = v74;
          sub_24DCC9348();
          uint64_t v95 = MEMORY[0x263F8EE78];
          sub_24D5B06D0((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
          sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
          id v51 = v76;
          uint64_t v52 = v77;
          sub_24DCCA5B8();
          id v53 = v79;
          MEMORY[0x2533282B0](0, v50, v51, v49);
          _Block_release(v49);

          (*v71)(v51, v52);
          uint64_t v54 = v50;
          uint64_t v28 = v73;
          (*v70)(v54, v75);
        }
      }
      uint64_t v31 = v91;
      id v32 = *(void **)&v91[v81];
      id v33 = *(void **)&v91[v80];
      uint64_t v9 = (void *)swift_allocObject();
      v9[2] = v31;
      v9[3] = sub_24D44DA8C;
      void v9[4] = v7;
      v9[5] = sub_24D5B0660;
      v9[6] = v40;
      id v34 = v31;
      swift_retain();
      swift_retain();
      sub_24D3E2DA8((uint64_t)"deleteItem(with:options:completionHandler:)", 43, 2, v32, v33, (uint64_t)sub_24D3E5BC4, (uint64_t)v9);
      swift_release();
      swift_release();
      swift_release();
      a1 = v84;
      os_log_t v35 = v90;
      goto LABEL_8;
    }
    os_log_t v35 = v42;
    uint64_t v43 = (void *)MEMORY[0x25332B1A0](v92);
    if (!v43) {
      break;
    }
    uint64_t v44 = v43;
    id v45 = objc_msgSend(v43, sel_indexer);

    if (!v45) {
      break;
    }
    if ((objc_msgSend(v45, sel_needsAuthentication) & 1) == 0)
    {

      break;
    }
    type metadata accessor for NSFileProviderError(0);
    uint64_t v95 = -1000;
    unint64_t v90 = sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D5B06D0(&qword_26B193F20, type metadata accessor for NSFileProviderError);
    sub_24DCC8808();

    uint64_t v46 = (void *)aBlock[0];
LABEL_27:
    uint64_t v9 = *v78;
    *uint64_t v78 = v46;
    os_log_type_t v58 = v46;

    dispatch_group_leave(v35);
    swift_release();
    swift_release();

LABEL_8:
    swift_release();
    swift_release_n();
    ++v30;
    if (v94 == v85) {
      goto LABEL_30;
    }
  }
  uint64_t v55 = (void *)MEMORY[0x25332B1A0](v92);
  if (v55)
  {
    uint64_t v56 = v55;
    uint64_t v46 = objc_msgSend(v55, sel_startupError);

    if (v46) {
      goto LABEL_27;
    }
  }
  unint64_t result = (id)FPDomainUnavailableError();
  uint64_t v46 = result;
  if (result) {
    goto LABEL_27;
  }
  __break(1u);
  return result;
}

void sub_24D5ABFE0(void *a1, uint64_t a2, dispatch_group_t group)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t v6 = *(void **)(a2 + 16);
    *(void *)(a2 + 16) = a1;
    id v7 = a1;
  }
  dispatch_group_leave(group);
}

void sub_24D5AC050(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v7 = sub_24DCC9078();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v7);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v9);
  uint64_t v13 = (char *)&v48 - v12;
  uint64_t v14 = (id *)(a1 + 16);
  swift_beginAccess();
  id v15 = *(void **)(a1 + 16);
  if (v15)
  {
    uint64_t v53 = v8;
    uint64_t v54 = v7;
    id v16 = v15;
    id v17 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    swift_bridgeObjectRetain();
    id v18 = v15;
    swift_bridgeObjectRetain();
    id v19 = v15;
    uint64_t v20 = sub_24DCC9068();
    os_log_type_t v21 = sub_24DCCA128();
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v51 = (uint64_t)a3;
      uint64_t v23 = v22;
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v50 = swift_slowAlloc();
      v57[0] = v50;
      *(_DWORD *)uint64_t v23 = 136315394;
      uint64_t v24 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      uint64_t v25 = swift_bridgeObjectRetain();
      uint64_t v26 = MEMORY[0x253327CD0](v25, v24);
      uint64_t v52 = a4;
      unint64_t v28 = v27;
      swift_bridgeObjectRelease();
      uint64_t v56 = sub_24D418FB4(v26, v28, v57);
      sub_24DCCA428();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v23 + 12) = 2112;
      swift_getErrorValue();
      id v29 = sub_24DBA2828(v55);
      uint64_t v56 = (uint64_t)v29;
      sub_24DCCA428();
      uint64_t v30 = v49;
      *uint64_t v49 = v29;

      _os_log_impl(&dword_24D3D0000, v20, v21, "Failed to delete items %s with error %@", (uint8_t *)v23, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v30, -1, -1);
      uint64_t v31 = v50;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v31, -1, -1);
      uint64_t v32 = v23;
      a3 = (void (*)(void))v51;
      MEMORY[0x25332B030](v32, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
  }
  else
  {
    uint64_t v52 = a4;
    id v33 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    swift_bridgeObjectRetain_n();
    id v34 = sub_24DCC9068();
    os_log_type_t v35 = sub_24DCCA118();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v53 = v8;
      uint64_t v36 = swift_slowAlloc();
      uint64_t v54 = v7;
      uint64_t v37 = (uint8_t *)v36;
      uint64_t v51 = swift_slowAlloc();
      v57[0] = v51;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v50 = (uint64_t)(v37 + 4);
      dispatch_group_t v38 = a3;
      uint64_t v39 = sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
      uint64_t v40 = swift_bridgeObjectRetain();
      uint64_t v41 = MEMORY[0x253327CD0](v40, v39);
      unint64_t v43 = v42;
      swift_bridgeObjectRelease();
      uint64_t v44 = v41;
      a3 = v38;
      uint64_t v56 = sub_24D418FB4(v44, v43, v57);
      sub_24DCCA428();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_24D3D0000, v34, v35, "Succeeded deleting items: %s", v37, 0xCu);
      uint64_t v45 = v51;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v45, -1, -1);
      MEMORY[0x25332B030](v37, -1, -1);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v13, v54);
    }
    else
    {

      swift_bridgeObjectRelease_n();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
  }
  swift_beginAccess();
  id v46 = *v14;
  id v47 = *v14;
  a3(v46);
}

void sub_24D5AC6A0(unint64_t a1, int a2, uint64_t a3, id a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10)
{
  id v12 = a4;
  if (!a1)
  {
    objc_msgSend(a4, sel_setCompletedUnitCount_, 1);
    a5(a3);
    return;
  }
  id v15 = (void *)MEMORY[0x25332B1A0](*(void *)(a7 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
  if (!v15) {
    goto LABEL_21;
  }
  id v16 = v15;
  id v17 = objc_msgSend(v15, sel_session);

  id v18 = objc_msgSend(v17, sel_newFileProviderProxyWithTimeout_pid_, objc_msgSend(*(id *)(a7 + 32), sel_pid), -1.0);
  swift_unknownObjectRelease();
  id v34 = (void *)sub_24DCC97B8();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = sub_24DCCA9C8();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v19)
  {
    aBlock[0] = MEMORY[0x263F8EE78];
    sub_24D7C7018(0, v19 & ~(v19 >> 63), 0);
    if ((v19 & 0x8000000000000000) == 0)
    {
      id v31 = v18;
      uint64_t v32 = a5;
      id v33 = v12;
      uint64_t v20 = 0;
      uint64_t v21 = aBlock[0];
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v22 = (id)MEMORY[0x253328820](v20, a1);
        }
        else {
          id v22 = *(id *)(a1 + 8 * v20 + 32);
        }
        uint64_t v23 = v22;
        id v24 = objc_msgSend(v22, sel_identifier, v31, v32, v33);

        aBlock[0] = v21;
        unint64_t v26 = *(void *)(v21 + 16);
        unint64_t v25 = *(void *)(v21 + 24);
        if (v26 >= v25 >> 1)
        {
          sub_24D7C7018(v25 > 1, v26 + 1, 1);
          uint64_t v21 = aBlock[0];
        }
        ++v20;
        *(void *)(v21 + 16) = v26 + 1;
        *(void *)(v21 + 8 * v26 + 32) = v24;
      }
      while (v19 != v20);
      a5 = v32;
      id v12 = v33;
      id v18 = v31;
      goto LABEL_15;
    }
    __break(1u);
LABEL_21:
    __break(1u);
    return;
  }
LABEL_15:
  type metadata accessor for NSFileProviderItemIdentifier(0);
  unint64_t v27 = (void *)sub_24DCC9C18();
  swift_bridgeObjectRelease();
  aBlock[4] = a5;
  aBlock[5] = a6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D6024BC;
  aBlock[3] = &block_descriptor_187;
  unint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  id v29 = objc_msgSend(v18, sel_performActionWithIdentifier_onItemsWithIdentifiers_domainIdentifier_completionHandler_, v34, v27, a10, v28);
  swift_unknownObjectRelease();
  _Block_release(v28);

  if (v29)
  {
    objc_msgSend(v12, sel_addChild_withPendingUnitCount_, v29, 1);
  }
}

void sub_24D5ACB78(uint64_t a1, void (*a2)(void *, uint64_t), uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v80 = a6;
  LODWORD(v79) = a5;
  v103[2] = *MEMORY[0x263EF8340];
  uint64_t v10 = type metadata accessor for VFSItem(0);
  uint64_t v76 = *(void *)(v10 - 8);
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v77 = v12;
  uint64_t v78 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v11);
  uint64_t v14 = (char *)&v69 - v13;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194250);
  MEMORY[0x270FA5388](v15);
  id v17 = (void **)((char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24D415FD0(a1, (uint64_t)v17, &qword_26B194250);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    id v18 = *v17;
    id v19 = v18;
    a2(v18, 1);

    return;
  }
  int v74 = a2;
  uint64_t v75 = a3;
  sub_24D46A4D0((uint64_t)v17, (uint64_t)v14);
  uint64_t v20 = *(void *)(a4 + 16);
  uint64_t v21 = type metadata accessor for VFSFileTree(0);
  swift_dynamicCastClassUnconditional();
  uint64_t v22 = *(void *)v14;
  uint64_t v23 = &v14[*(int *)(v10 + 36)];
  uint64_t v24 = *(void *)v23;
  uint64_t v25 = *((unsigned int *)v23 + 2);
  uint64_t v26 = *((void *)v23 + 2);
  uint64_t v70 = v23;
  uint64_t v27 = v23[24];
  uint64_t v28 = *((void *)v14 + 2);
  uint64_t v29 = v14[24];
  uint64_t v30 = *((void *)v14 + 4);
  uint64_t v31 = *((void *)v14 + 5);
  v102[0] = v24;
  v102[1] = v25;
  v102[2] = v26;
  v102[3] = v27;
  v102[4] = 0;
  v102[5] = v28;
  v102[6] = v29;
  v102[7] = v30;
  char v32 = v14[8];
  v102[8] = v31;
  memset(&v102[9], 0, 24);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_24D3D4C7C(v22, v32, (uint64_t)v102, (uint64_t)&v87);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  uint64_t v71 = v21;
  uint64_t v72 = v20;
  id v33 = (void *)swift_dynamicCastClassUnconditional();
  swift_retain();
  if (objc_sync_enter(v33)) {
    sub_24DA82DB0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v33);
  }
  uint64_t v73 = a4;
  uint64_t v34 = v33[20];
  swift_retain();
  if (objc_sync_exit(v33)) {
    sub_24DA82DC4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v33);
  }
  swift_release();
  int v35 = *(_DWORD *)(v34 + 16);
  uint64_t v36 = swift_release();
  MEMORY[0x270FA5388](v36);
  *((_DWORD *)&v69 - 4) = v35;
  *((_DWORD *)&v69 - 3) = 0x200000;
  long long v93 = 0;
  uint64_t v94 = 0;
  long long v37 = v87;
  long long v91 = v87;
  unsigned int v39 = v88;
  unsigned int v38 = HIDWORD(v88);
  unint64_t v92 = v88;
  sub_24D3F0BA0((uint64_t)&v89, (uint64_t)v90, qword_26B199BD0);
  uint64_t v40 = sub_24D3F0BA0((uint64_t)v90, (uint64_t)v103, qword_26B199BD0);
  if (v103[1])
  {
    uint64_t v41 = MEMORY[0x270FA5388](v40);
    *(&v69 - 4) = (uint64_t)&v91;
    *(&v69 - 3) = (uint64_t)sub_24D5B22B8;
    *(&v69 - 2) = (uint64_t)(&v69 - 4);
    if ((v43 & 0x1000000000000000) != 0 || !(v43 & 0x2000000000000000 | v42 & 0x1000000000000000))
    {
      uint64_t v50 = sub_24DCCA718();
      uint64_t v47 = v75;
      uint64_t v51 = v82;
      goto LABEL_16;
    }
    MEMORY[0x270FA5388](v41);
    *(&v69 - 2) = (uint64_t)sub_24D5B2770;
    *(&v69 - 1) = v46;
    uint64_t v47 = v75;
    if ((v45 & 0x2000000000000000) == 0)
    {
      if ((v44 & 0x1000000000000000) != 0)
      {
        uint64_t v48 = (v45 & 0xFFFFFFFFFFFFFFFLL) + 32;
        uint64_t v49 = v44 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        uint64_t v48 = sub_24DCCA7E8();
      }
      uint64_t v50 = (uint64_t)sub_24D7C3ECC(v48, v49, (void *(*)(uint64_t *__return_ptr))sub_24D5B2790);
      uint64_t v51 = v50;
      goto LABEL_16;
    }
    v81[0] = v44;
    v81[1] = v45 & 0xFFFFFFFFFFFFFFLL;
    long long v93 = v81;
    long long v83 = v91;
    unint64_t v84 = v92;
    uint64_t v85 = v81;
    uint64_t v86 = v94;
    uint64_t v50 = fpfs_openfdbyhandle();
    if ((v50 & 0x80000000) == 0)
    {
      uint64_t v51 = v50;
      goto LABEL_16;
    }
LABEL_17:
    int v64 = MEMORY[0x253327160]();
    id v65 = (void *)sub_24D90CF14(v64, 0, 0, 0xAu);
    swift_willThrow();
    id v66 = v65;
    LODWORD(v91) = sub_24DCC8348();
    sub_24D4C5C60();
    sub_24DCC86A8();

    sub_24D5B22F8((uint64_t)&v87);
    dispatch_group_t v67 = v74;
    id v68 = v65;
    v67(v65, 1);

    goto LABEL_18;
  }
  long long v83 = v37;
  unint64_t v84 = __PAIR64__(v38, v39);
  uint64_t v85 = 0;
  uint64_t v86 = 0;
  uint64_t v50 = fpfs_openfdbyhandle();
  if ((v50 & 0x80000000) != 0) {
    goto LABEL_17;
  }
  uint64_t v51 = v50;
  uint64_t v47 = v75;
LABEL_16:
  MEMORY[0x270FA5388](v50);
  *((_DWORD *)&v69 - 4) = v51;
  *((unsigned char *)&v69 - 12) = v79 & 1;
  uint64_t v52 = v80;
  *(&v69 - 1) = v80;
  sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5B22D4);
  sub_24D40CB10(v51);
  sub_24D5B22F8((uint64_t)&v87);
  uint64_t v79 = swift_dynamicCastClassUnconditional();
  uint64_t v75 = *(void *)v14;
  uint64_t v53 = *((unsigned int *)v70 + 2);
  unint64_t v54 = *((void *)v70 + 2);
  unint64_t v55 = v70[24];
  uint64_t v56 = *((void *)v14 + 2);
  uint64_t v57 = v14[24];
  uint64_t v58 = *((void *)v14 + 4);
  uint64_t v59 = *((void *)v14 + 5);
  *(void *)&long long v91 = *(void *)v70;
  *((void *)&v91 + 1) = v53;
  unint64_t v92 = v54;
  long long v93 = (void *)v55;
  uint64_t v94 = 0;
  uint64_t v95 = v56;
  uint64_t v96 = v57;
  uint64_t v97 = v58;
  LODWORD(v72) = v14[8];
  uint64_t v98 = v59;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v60 = v78;
  sub_24D5B2324((uint64_t)v14, v78);
  unint64_t v61 = (*(unsigned __int8 *)(v76 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
  uint64_t v62 = (void *)swift_allocObject();
  uint64_t v63 = v74;
  v62[2] = v73;
  long long v62[3] = v63;
  v62[4] = v47;
  v62[5] = v52;
  sub_24D46A4D0(v60, (uint64_t)v62 + v61);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_24D3DC118(v75, v72, (uint64_t)&v91, 0, 3, (uint64_t)sub_24D5B26F8, (uint64_t)v62);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release();
  swift_release();
LABEL_18:
  sub_24D4C5988((uint64_t)v14);
}

uint64_t sub_24D5AD390@<X0>(char a1@<W1>, _DWORD *a2@<X8>)
{
  if (a1)
  {
    sub_24DCC97E8();
    sub_24DCC9898();
    swift_bridgeObjectRelease();
  }
  int is_ignore_root = fpfs_set_is_ignore_root();
  uint64_t result = swift_unknownObjectRelease();
  *a2 = is_ignore_root;
  return result;
}

uint64_t sub_24D5AD424(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v28 = a6;
  uint64_t v29 = a5;
  uint64_t v24 = a3;
  uint64_t v25 = a2;
  uint64_t v26 = a1;
  uint64_t v9 = type metadata accessor for VFSItem(0);
  uint64_t v27 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v27 + 64);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B194240);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(a2 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  sub_24D415FD0(v26, (uint64_t)v14, (uint64_t *)&unk_26B194240);
  sub_24D5B2324(v28, (uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (*(unsigned __int8 *)(v27 + 80) + v18 + 8) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v24;
  *(void *)(v20 + 24) = a4;
  sub_24D3F0BA0((uint64_t)v14, v20 + v16, (uint64_t *)&unk_26B194240);
  *(void *)(v20 + v17) = v25;
  *(void *)(v20 + v18) = v29;
  sub_24D46A4D0((uint64_t)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v20 + v19);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = sub_24D417998;
  *(void *)(v21 + 24) = v15;
  swift_retain_n();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_24D3FBC7C((uint64_t)"updateIgnoreStateOfItem(_:ignoreState:fpfs:completionHandler:)", 62, 2, sub_24D5B2F84, v21, (uint64_t)sub_24D5B2E98, v20);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_24D5AD6E0(void (*a1)(void *, BOOL), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a4;
  uint64_t v35 = a2;
  uint64_t v36 = a1;
  uint64_t v7 = type metadata accessor for VFSItem(0);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199BC0);
  uint64_t v12 = MEMORY[0x270FA5388](v11 - 8);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v12);
  unint64_t v16 = (char *)&v32 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B194240);
  MEMORY[0x270FA5388](v17);
  unint64_t v19 = (void **)((char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24D415FD0(a3, (uint64_t)v19, (uint64_t *)&unk_26B194240);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = *v19;
    v36(*v19, 1);
  }
  else
  {
    sub_24D3F0BA0((uint64_t)v19, (uint64_t)v16, (uint64_t *)&unk_26B199BC0);
    sub_24D415FD0((uint64_t)v16, (uint64_t)v14, (uint64_t *)&unk_26B199BC0);
    int v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v14, 1, v7);
    BOOL v22 = v21 == 1;
    if (v21 == 1)
    {
      sub_24D415F74((uint64_t)v14, (uint64_t *)&unk_26B199BC0);
      char v23 = *((unsigned char *)v34 + 8);
      uint64_t v37 = *v34;
      char v38 = v23;
      long long v39 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v44 = 0u;
      uint64_t v45 = 0;
      sub_24D46A4C8((uint64_t)&v37);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A40);
      sub_24D3E4A9C((unint64_t *)&qword_26B192A30, (uint64_t *)&unk_26B192A40);
      uint64_t v20 = (void *)swift_allocError();
      sub_24D3F0BA0((uint64_t)&v37, v24, (uint64_t *)&unk_26B192A40);
      uint64_t v25 = v36;
    }
    else
    {
      sub_24D46A4D0((uint64_t)v14, (uint64_t)v10);
      uint64_t v26 = (void *)MEMORY[0x25332B1A0](*(void *)(v33 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain);
      if (v26
        && (uint64_t v27 = v26,
            id v28 = objc_msgSend(v26, sel_indexer, v32),
            v27,
            v28))
      {
        unsigned int v29 = objc_msgSend(v28, sel_needsAuthentication);

        if (v29) {
          uint64_t v30 = 29;
        }
        else {
          uint64_t v30 = 21;
        }
      }
      else
      {
        uint64_t v30 = 21;
      }
      uint64_t v25 = v36;
      uint64_t v31 = (int *)sub_24D3E7C08(MEMORY[0x263F8EE78]);
      uint64_t v20 = sub_24D4077D0((uint64_t)v10, v30, 0, v31);
      swift_bridgeObjectRelease();
      sub_24D4C5988((uint64_t)v10);
    }
    sub_24D415F74((uint64_t)v16, (uint64_t *)&unk_26B199BC0);
    v25(v20, v22);
  }
  sub_24D4178C8(v20);
}

uint64_t sub_24D5ADAA0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = swift_allocObject();
  uint64_t v12 = MEMORY[0x263F8EE78];
  uint64_t v71 = v11;
  *(void *)(v11 + 16) = sub_24D429330(MEMORY[0x263F8EE78]);
  uint64_t v68 = swift_allocObject();
  *(void *)(v68 + 16) = sub_24D42943C(v12);
  uint64_t v13 = dispatch_group_create();
  uint64_t v66 = *(void *)(a2 + 16);
  if (v66)
  {
    uint64_t v59 = a5;
    uint64_t v60 = a6;
    uint64_t v63 = *(void *)(a1 + 16);
    uint64_t v64 = a1;
    swift_bridgeObjectRetain();
    uint64_t v14 = 0;
    char v62 = a4 & 1;
    uint64_t v15 = 0x4000000000000002;
    if (a4) {
      uint64_t v15 = 0x4000000000000000;
    }
    uint64_t v61 = v15;
    uint64_t v65 = a2;
    uint64_t v70 = v13;
    do
    {
      id v34 = *(id *)(a2 + 8 * v14 + 32);
      dispatch_group_enter(v13);
      sub_24DCC97E8();
      id v35 = v34;
      char v36 = sub_24D402984();
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v37 = sub_24DCC97E8();
      unint64_t v39 = sub_24D41824C(0x80007uLL, v37, v38);
      uint64_t v41 = v40;
      uint64_t v43 = v42;
      uint64_t v45 = v44;
      swift_bridgeObjectRelease();
      uint64_t v46 = MEMORY[0x253327950](v39, v41, v43, v45);
      uint64_t v48 = v47;
      swift_bridgeObjectRelease();
      unint64_t v49 = sub_24D3D53F4(v46, v48);
      if ((_BYTE)v50 == 0xFF)
      {
LABEL_5:
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B190330);
        uint64_t v16 = swift_allocObject();
        *(void *)(v16 + 16) = v34;
        *(_WORD *)(v16 + 24) = 256;
        *(unsigned char *)(v16 + 42) = 0;
        *(void *)(v16 + 32) = v34;
        *(_WORD *)(v16 + 40) = 256;
        id v17 = v35;
        uint64_t v18 = 0;
        char v19 = 1;
      }
      else
      {
        uint64_t v51 = (void *)v49;
        uint64_t v18 = v50;

        __swift_instantiateConcreteTypeFromMangledName(&qword_26B190330);
        uint64_t v16 = swift_allocObject();
        char v19 = 0;
        *(void *)(v16 + 16) = v51;
        *(_WORD *)(v16 + 24) = v18;
        *(void *)(v16 + 32) = v51;
        *(unsigned char *)(v16 + 40) = v18;
        id v34 = v51;
        *(_WORD *)(v16 + 41) = 0;
      }
      uint64_t v20 = (void *)swift_allocObject();
      _OWORD v20[2] = v13;
      v20[3] = v68;
      v20[4] = v35;
      v20[5] = v71;
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = v34;
      *(unsigned char *)(v21 + 24) = v18;
      *(unsigned char *)(v21 + 25) = v19;
      uint64_t v69 = v35;
      BOOL v22 = *(void **)(a3 + 32);
      *(void *)(v21 + 32) = v22;
      sub_24D4018B8(v34, v18, v19);
      id v23 = v22;
      unint64_t v24 = v61 | v21;
      uint64_t v25 = swift_allocObject();
      *(void *)(v25 + 16) = sub_24D5B2118;
      *(void *)(v25 + 24) = v20;
      uint64_t v26 = swift_allocObject();
      swift_weakInit();
      uint64_t v27 = (void *)swift_allocObject();
      v27[2] = sub_24D417998;
      v27[3] = v25;
      v27[4] = v26;
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = sub_24D5B2178;
      *(void *)(v28 + 24) = v27;
      uint64_t v29 = swift_allocObject();
      *(void *)(v29 + 16) = sub_24D4178D4;
      *(void *)(v29 + 24) = v28;
      *(void *)(v29 + 32) = v64;
      *(unsigned char *)(v29 + 40) = v62;
      *(void *)(v29 + 48) = a3;
      id v30 = objc_allocWithZone(MEMORY[0x263F08AB8]);
      id v31 = v69;
      uint64_t v32 = v70;
      swift_retain();
      uint64_t v13 = v70;
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      ++v14;
      swift_retain();
      id v33 = objc_msgSend(v30, sel_init);
      swift_retain();
      sub_24D40B3C8(v24);
      sub_24D466E74(v16, 1, 0, v24, v33, 0, v63, (void (*)(uint64_t *))sub_24D5B21D8, v29, v24);
      sub_24D4170B0(v24);
      swift_release();

      swift_release_n();
      sub_24D4170B0(v24);

      swift_release();
      swift_release();
      a2 = v65;
    }
    while (v66 != v14);
    swift_bridgeObjectRelease();
    a5 = v59;
    a6 = v60;
  }
  uint64_t v52 = *(void *)(a3 + 16);
  uint64_t v53 = *(void **)(v52 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log);
  unint64_t v54 = *(void **)(v52 + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue);
  unint64_t v55 = (void *)swift_allocObject();
  v55[2] = a5;
  v55[3] = a6;
  v55[4] = v71;
  v55[5] = v68;
  swift_retain();
  swift_retain();
  id v56 = v53;
  id v57 = v54;
  swift_retain();
  sub_24D3E2DA8((uint64_t)"updateIgnoreStateOfItem(withIdentifiers:ignoreState:completionHandler:)", 71, 2, v53, v57, (uint64_t)sub_24D5B22AC, (uint64_t)v55);
  swift_release();
  swift_release();

  return swift_release();
}

void sub_24D5AE060(void *a1, char a2, NSObject *a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9 = (uint64_t *)(a4 + 16);
  uint64_t v10 = (uint64_t *)(a6 + 16);
  char v11 = a2 & 1;
  sub_24D4178BC(a1);
  sub_24DBA2D30(a3, a1, v11, v9, a5, v10);

  dispatch_group_leave(a3);
}

void sub_24D5AE0EC(void *a1, char a2, uint64_t *a3, void *a4, uint64_t *a5)
{
  if (a2)
  {
    swift_beginAccess();
    sub_24D4178BC(a1);
    sub_24D4178BC(a1);
    id v8 = a4;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *a3;
    *a3 = 0x8000000000000000;
    sub_24D714958((uint64_t)a1, v8, isUniquelyReferenced_nonNull_native);
    *a3 = v13;
  }
  else
  {
    swift_beginAccess();
    sub_24D4178BC(a1);
    sub_24D4178BC(a1);
    id v11 = a4;
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v14 = *a5;
    *a5 = 0x8000000000000000;
    sub_24D714938((uint64_t)a1, v11, v12);
    *a5 = v14;
  }
  swift_bridgeObjectRelease();
  swift_endAccess();
  sub_24D4178C8(a1);
}

uint64_t sub_24D5AE240(void (*a1)(uint64_t, uint64_t, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  swift_beginAccess();
  uint64_t v7 = *(void *)(a3 + 16);
  swift_beginAccess();
  uint64_t v8 = *(void *)(a4 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a1(v7, v8, 0);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_24D5AE460(void *a1, int a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v154 = a4;
  uint64_t v9 = sub_24DCC8408();
  uint64_t v149 = *(void *)(v9 - 8);
  uint64_t v150 = v9;
  MEMORY[0x270FA5388](v9);
  id v148 = &v146[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_24DCC8288();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v151 = &v146[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = sub_24DCC82A8();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x270FA5388](v13);
  dispatch_group_t v152 = (dispatch_group_t)&v146[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v166 = a1;
  id v16 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A40);
  if (swift_dynamicCast())
  {
    unint64_t v5 = v17;
    sub_24D3F0BA0((uint64_t)&v157, (uint64_t)v155, (uint64_t *)&unk_26B192A40);
    sub_24D3F0BA0((uint64_t)v155, (uint64_t)v156, (uint64_t *)&unk_26B192A40);
    if (sub_24D5B3C48((uint64_t)v156))
    {
      int v147 = a2;
      sub_24D5B3AB4((uint64_t)v155);

      goto LABEL_5;
    }
    uint64_t v25 = nullsub_1(v156);
    uint64_t v26 = *(void *)v25;
    int v27 = *(unsigned __int8 *)(v25 + 8);
    uint64_t v29 = *(void *)(v25 + 16);
    uint64_t v28 = *(void *)(v25 + 24);
    uint64_t v30 = *(void *)(v25 + 32);
    uint64_t v31 = *(void *)(v25 + 40);
    uint64_t v32 = *(void *)(v25 + 48);
    uint64_t v33 = *(void *)(v25 + 56);
    uint64_t v34 = *(void *)(v25 + 64);
    uint64_t v35 = *(void *)(v25 + 72);
    long long v36 = *(_OWORD *)(v25 + 80);
    uint64_t v37 = *(void *)(v25 + 104);
    unint64_t v38 = *(void **)(v25 + 112);
    dispatch_group_t v144 = *(dispatch_group_t *)(v25 + 96);
    uint64_t v145 = v37;
    *((void *)&v143 + 1) = *((void *)&v36 + 1);
    sub_24D3E386C(v29, v28, v30, v31, v32, v33, v34, v35, v36);
    if (v27 != 2 || v26)
    {
      if (v27 != 2 || v26 != 1)
      {
        *(void *)&long long v167 = 0x2F73662F70665F5FLL;
        *((void *)&v167 + 1) = 0xE800000000000000;
        sub_24D3D4384(v26, v27);
        sub_24DCC9968();
        swift_bridgeObjectRelease();
        id v51 = (id)sub_24DCC97B8();
        swift_bridgeObjectRelease();
        if (v38) {
          goto LABEL_36;
        }
        goto LABEL_53;
      }
      unint64_t v39 = (id *)MEMORY[0x263F053F8];
    }
    else
    {
      unint64_t v39 = (id *)MEMORY[0x263F053F0];
    }
    id v51 = *v39;
    if (v38)
    {
LABEL_36:
      id v52 = v38;
LABEL_54:
      id v75 = v38;
      a3(v52);

LABEL_55:
      id v71 = v166;
      goto LABEL_56;
    }
LABEL_53:
    id v52 = objc_msgSend(self, sel_fileProviderErrorForNonExistentItemWithIdentifier_, v51);
    goto LABEL_54;
  }
  int v147 = a2;

LABEL_5:
  *(void *)&v156[0] = a1;
  id v18 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
  int v19 = swift_dynamicCast();
  long long v153 = a3;
  if (v19)
  {
    uint64_t v20 = (void *)v157;
    unint64_t v5 = (unint64_t)v164;
    if (!v165)
    {
      sub_24D400D4C(*((uint64_t *)&v157 + 1), v158, *((uint64_t *)&v158 + 1), v159, v160);
      if (v5) {
        id v40 = (id)v5;
      }
      else {
        id v40 = objc_msgSend(self, sel_fileProviderErrorForNonExistentItemWithIdentifier_, v20);
      }
      uint64_t v72 = (id)v5;
      v153(v40);

      id v71 = *(id *)&v156[0];
      goto LABEL_56;
    }
    sub_24D5B38F0((void *)v157, *((void **)&v157 + 1), v158, *((void **)&v158 + 1), v159, v160, v161, v162, v163, v164, v165);
    a3 = v153;
  }

  id v166 = a1;
  id v21 = a1;
  if (!swift_dynamicCast())
  {

    goto LABEL_14;
  }
  unint64_t v5 = v13;
  sub_24D3F0BA0((uint64_t)&v157, (uint64_t)v155, (uint64_t *)&unk_26B192A40);
  sub_24D3F0BA0((uint64_t)v155, (uint64_t)v156, (uint64_t *)&unk_26B192A40);
  int v22 = sub_24D5B3C48((uint64_t)v156);
  if (v22 == 1)
  {
    uint64_t v61 = nullsub_1(v156);
    uint64_t v62 = *(void *)v61;
    int v63 = *(unsigned __int8 *)(v61 + 8);
    uint64_t v64 = *(void *)(v61 + 48);
    unint64_t v65 = *(void *)(v61 + 56);

    sub_24D4A479C(v64, v65);
    swift_bridgeObjectRelease();
    if (v147)
    {
      sub_24DCC8178();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5B06D0((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      dispatch_group_t v66 = v152;
      sub_24DCC8808();
      dispatch_group_t v67 = (void *)sub_24DCC8128();
      (*(void (**)(dispatch_group_t, uint64_t))(v14 + 8))(v66, v13);
      v153(v67);
    }
    else
    {
      type metadata accessor for VFSFileTree(0);
      swift_dynamicCastClassUnconditional();
      long long v167 = 0u;
      long long v168 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      uint64_t v77 = (void *)swift_allocObject();
      uint64_t v78 = v154;
      v77[2] = v153;
      v77[3] = v78;
      v77[4] = v4;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_24D3DC118(v62, v63, (uint64_t)&v167, 0, 1, (uint64_t)sub_24D5B3C9C, (uint64_t)v77);
      swift_release();
      swift_release();
    }
    goto LABEL_55;
  }
  if (v22 == 3)
  {
    uint64_t v53 = v4;
    uint64_t v54 = nullsub_1(v156);
    uint64_t v55 = *(void *)v54;
    int v56 = *(unsigned __int8 *)(v54 + 8);
    sub_24D5B3AB4((uint64_t)v155);
    id v57 = v153;
    if (v147)
    {
      LODWORD(v167) = 66;
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5B06D0((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
      uint64_t v58 = v148;
      uint64_t v59 = v150;
      sub_24DCC8808();
      uint64_t v60 = (void *)sub_24DCC83E8();
      (*(void (**)(unsigned char *, uint64_t))(v149 + 8))(v58, v59);
      v57(v60);
    }
    else
    {
      type metadata accessor for VFSFileTree(0);
      swift_dynamicCastClassUnconditional();
      long long v167 = 0u;
      long long v168 = 0u;
      long long v169 = 0u;
      long long v170 = 0u;
      long long v171 = 0u;
      long long v172 = 0u;
      uint64_t v76 = (void *)swift_allocObject();
      v76[2] = v57;
      v76[3] = v154;
      v76[4] = v53;
      swift_retain();
      swift_retain();
      swift_retain();
      sub_24D3DC118(v55, v56, (uint64_t)&v167, 0, 1, (uint64_t)sub_24D5B3C78, (uint64_t)v76);
      swift_release();
      swift_release();
    }
    goto LABEL_55;
  }
  a3 = v153;
  if (v22 == 5)
  {
    nullsub_1(v156);

LABEL_18:
    sub_24DCC8138();
LABEL_50:
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D5B06D0((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
    dispatch_group_t v74 = v152;
    sub_24DCC8808();
    uint64_t v50 = (void *)sub_24DCC8128();
    (*(void (**)(dispatch_group_t, uint64_t))(v14 + 8))(v74, v13);
    goto LABEL_51;
  }
  sub_24D5B3AB4((uint64_t)v155);

LABEL_14:
  *(void *)&v156[0] = a1;
  id v23 = a1;
  if (swift_dynamicCast())
  {
    if (v165 == 5)
    {
      unint64_t v24 = *(void **)&v156[0];
LABEL_17:

      goto LABEL_18;
    }
    sub_24D5B38F0((void *)v157, *((void **)&v157 + 1), v158, *((void **)&v158 + 1), v159, v160, v161, v162, v163, v164, v165);
  }

  *(void *)&long long v157 = a1;
  id v41 = a1;
  if (swift_dynamicCast())
  {
    switch(LOBYTE(v156[0]))
    {
      case 1:
      case 2:

        sub_24DCC8168();
        goto LABEL_50;
      case 3:
      case 5:
        uint64_t v73 = (void *)v157;
        goto LABEL_48;
      case 4:
        sub_24DCC81F8();
        sub_24D5F77E0(MEMORY[0x263F8EE78]);
        sub_24D5B06D0((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
        dispatch_group_t v79 = v152;
        sub_24DCC8808();
        uint64_t v80 = (void *)sub_24DCC8128();
        (*(void (**)(dispatch_group_t, uint64_t))(v14 + 8))(v79, v13);
        goto LABEL_66;
      default:
        unint64_t v24 = (void *)v157;
        goto LABEL_17;
    }
  }

  *(void *)&v156[0] = a1;
  id v42 = a1;
  if (swift_dynamicCast())
  {
    if (v158 == 253 || v158 == 254)
    {

      type metadata accessor for NSFileProviderError(0);
      *(void *)&v156[0] = -2005;
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B197EF0);
      uint64_t v43 = swift_allocObject();
      *(_OWORD *)(v43 + 16) = xmmword_24DCCECE0;
      *(void *)(v43 + 32) = sub_24DCC97E8();
      *(void *)(v43 + 40) = v44;
      uint64_t v45 = (void *)sub_24DCC97B8();
      sub_24DCCB128();
      id v46 = (id)FPLocv();

      uint64_t v47 = sub_24DCC97E8();
      uint64_t v49 = v48;

      *(void *)(v43 + 72) = MEMORY[0x263F8D310];
      *(void *)(v43 + 48) = v47;
      *(void *)(v43 + 56) = v49;
      sub_24D428D08(v43);
      sub_24D5B06D0(&qword_26B193F20, type metadata accessor for NSFileProviderError);
      sub_24DCC8808();
      uint64_t v50 = (void *)v157;
LABEL_51:
      a3(v50);

      return;
    }
    sub_24D512AD8(v157, *((uint64_t *)&v157 + 1), v158);
    LODWORD(v155[0]) = 16;
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D5B06D0((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
    uint64_t v81 = v148;
    uint64_t v82 = v150;
    sub_24DCC8808();
    long long v83 = (void *)sub_24DCC83E8();
    (*(void (**)(unsigned char *, uint64_t))(v149 + 8))(v81, v82);
    a3(v83);

    id v71 = *(id *)&v156[0];
LABEL_56:

    return;
  }
  uint64_t v150 = v14;

  *(void *)&long long v167 = a1;
  id v68 = a1;
  uint64_t v149 = v17;
  if (swift_dynamicCast())
  {
    sub_24D3F0BA0((uint64_t)&v157, (uint64_t)v155, (uint64_t *)&unk_26B192A40);
    sub_24D3F0BA0((uint64_t)v155, (uint64_t)v156, (uint64_t *)&unk_26B192A40);
    if (sub_24D5B3C48((uint64_t)v156) == 15)
    {
      sub_24DCC81B8();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5B06D0((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      dispatch_group_t v69 = v152;
      sub_24DCC8808();
      uint64_t v70 = (void *)sub_24DCC8128();
      (*(void (**)(dispatch_group_t, uint64_t))(v150 + 8))(v69, v13);
      a3(v70);

      id v71 = (id)v167;
      goto LABEL_56;
    }
    sub_24D5B3AB4((uint64_t)v155);
  }

  *(void *)&long long v157 = a1;
  id v84 = a1;
  if (swift_dynamicCast())
  {
    uint64_t v85 = (uint64_t)(id)FPDomainUnavailableError();
    if (!v85)
    {
LABEL_114:
      __break(1u);
LABEL_115:
      MEMORY[0x270FA5388](v85);
      dispatch_group_t v144 = (dispatch_group_t)v5;
      sub_24DA89268((uint64_t (*)(uint64_t))sub_24D57EC30, (uint64_t)&v143, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318);
    }
    uint64_t v80 = (void *)v85;
LABEL_66:
    a3(v80);

    id v71 = (id)v157;
    goto LABEL_56;
  }

  v155[0] = a1;
  id v86 = a1;
  if (swift_dynamicCast())
  {
    sub_24D3F0BA0((uint64_t)&v157, (uint64_t)v156, (uint64_t *)&unk_26B192A40);
    sub_24D5B3AB4((uint64_t)v156);

    uint64_t v14 = v150;
    goto LABEL_49;
  }

  *(void *)&v156[0] = a1;
  id v87 = a1;
  char v88 = swift_dynamicCast();
  uint64_t v14 = v150;
  if (v88)
  {
    sub_24D5B38F0((void *)v157, *((void **)&v157 + 1), v158, *((void **)&v158 + 1), v159, v160, v161, v162, v163, v164, v165);
    uint64_t v73 = *(void **)&v156[0];
LABEL_48:

LABEL_49:
    sub_24DCC81E8();
    goto LABEL_50;
  }

  *(void *)&long long v157 = a1;
  id v89 = a1;
  char v90 = swift_dynamicCast();

  if (v90) {
    goto LABEL_49;
  }
  *(void *)&v156[0] = a1;
  id v91 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192990);
  if (swift_dynamicCast())
  {
    swift_bridgeObjectRelease();
    uint64_t v73 = *(void **)&v156[0];
    goto LABEL_48;
  }

  *(void *)&v156[0] = a1;
  id v92 = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B1929A0);
  if (swift_dynamicCast())
  {
    sub_24D5B38B0((void *)v157);
    uint64_t v73 = *(void **)&v156[0];
    goto LABEL_48;
  }

  *(void *)&v156[0] = a1;
  id v93 = a1;
  if (swift_dynamicCast())
  {
    sub_24D5B385C((uint64_t)&v157);
    uint64_t v73 = *(void **)&v156[0];
    goto LABEL_48;
  }
  uint64_t v94 = v4;

  uint64_t v95 = (void *)sub_24DCC8818();
  id v96 = objc_msgSend(v95, sel_userInfo);
  uint64_t v97 = sub_24DCC9578();

  uint64_t v98 = sub_24DCC97E8();
  if (*(void *)(v97 + 16) && (unint64_t v100 = sub_24D4053BC(v98, v99), (v101 & 1) != 0))
  {
    sub_24D3F7E8C(*(void *)(v97 + 56) + 32 * v100, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((void *)&v158 + 1))
  {
    sub_24D3FB6F8(0, (unint64_t *)&qword_26B1940A0);
    if (swift_dynamicCast())
    {
      id v102 = *(void **)&v156[0];
      uint64_t v103 = v154;
      swift_retain();
      id v104 = v95;
      id v105 = v102;
      sub_24DB4E6C0(v105, v147 & 1, v94, v104, v153, v103);

      goto LABEL_110;
    }
  }
  else
  {
    sub_24D415F74((uint64_t)&v157, qword_26B197F50);
  }
  id v106 = objc_msgSend(v95, sel_userInfo);
  uint64_t v107 = sub_24DCC9578();

  uint64_t v108 = (unsigned char *)*MEMORY[0x263F083F0];
  uint64_t v109 = sub_24DCC97E8();
  if (*(void *)(v107 + 16) && (unint64_t v111 = sub_24D4053BC(v109, v110), (v112 & 1) != 0))
  {
    sub_24D3F7E8C(*(void *)(v107 + 56) + 32 * v111, (uint64_t)&v157);
  }
  else
  {
    long long v157 = 0u;
    long long v158 = 0u;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v113 = swift_allocObject();
  if (!*((void *)&v158 + 1))
  {
    sub_24D415F74((uint64_t)&v157, qword_26B197F50);
    goto LABEL_106;
  }
  uint64_t v114 = __swift_instantiateConcreteTypeFromMangledName(&qword_269870660);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_106:
    swift_deallocUninitializedObject();
    v153(a1);

    return;
  }
  uint64_t v150 = v114;
  uint64_t v151 = v108;
  uint64_t v115 = (uint64_t *)(v113 + 16);
  *(void *)(v113 + 16) = *(void *)&v156[0];
  dispatch_group_t v152 = dispatch_group_create();
  unint64_t v5 = *(void *)(v113 + 16);
  if (v5 >> 62) {
    goto LABEL_112;
  }
  uint64_t v116 = *(void *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (v116)
  {
    unint64_t v5 = v152;
    uint64_t v117 = objc_sync_enter((id)v5);
    if (v117)
    {
LABEL_116:
      MEMORY[0x270FA5388](v117);
      dispatch_group_t v144 = (dispatch_group_t)v5;
      sub_24DA89268((uint64_t (*)(uint64_t))sub_24D57EC28, (uint64_t)&v143, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314);
    }
    unint64_t v118 = 0;
    uint64_t v119 = v116 - 1;
    while (1)
    {
      swift_beginAccess();
      uint64_t v120 = *v115;
      if ((*v115 & 0xC000000000000001) == 0) {
        break;
      }
      id v121 = (id)MEMORY[0x253328820](v118);
LABEL_100:
      uint64_t v122 = v121;
      swift_endAccess();
      uint64_t v85 = objc_sync_exit((id)v5);
      if (v85) {
        goto LABEL_115;
      }

      dispatch_group_enter((dispatch_group_t)v5);
      uint64_t v123 = (id)v5;
      swift_retain();
      id v124 = v122;
      sub_24DB4FE84(v124, v147 & 1, v94, v123, v113, v118);

      swift_release();
      if (v119 == v118) {
        goto LABEL_107;
      }
      uint64_t v117 = objc_sync_enter(v123);
      ++v118;
      if (v117) {
        goto LABEL_116;
      }
    }
    if (v118 < *(void *)((v120 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v121 = *(id *)(v120 + 8 * v118 + 32);
      goto LABEL_100;
    }
    __break(1u);
LABEL_112:
    swift_bridgeObjectRetain();
    uint64_t v116 = sub_24DCCA9C8();
    uint64_t v85 = swift_bridgeObjectRelease();
    if (v116 < 0)
    {
      __break(1u);
      goto LABEL_114;
    }
  }
LABEL_107:
  if (v147)
  {
    id v125 = objc_msgSend(v95, sel_userInfo);
    uint64_t v126 = sub_24DCC9578();

    uint64_t v127 = sub_24DCC97E8();
    uint64_t v129 = v128;
    swift_beginAccess();
    uint64_t v130 = *(void *)(v113 + 16);
    *((void *)&v158 + 1) = v150;
    *(void *)&long long v157 = v130;
    sub_24D3F7E7C(&v157, v156);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&long long v167 = v126;
    sub_24D706588(v156, v127, v129, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v132 = objc_msgSend(v95, sel_domain);
    sub_24DCC97E8();

    id v133 = objc_msgSend(v95, sel_code);
    id v134 = objc_allocWithZone(MEMORY[0x263F087E8]);
    uint64_t v135 = (void *)sub_24DCC97B8();
    swift_bridgeObjectRelease();
    os_log_type_t v136 = (void *)sub_24DCC9558();
    swift_bridgeObjectRelease();
    id v137 = objc_msgSend(v134, sel_initWithDomain_code_userInfo_, v135, v133, v136);

    v153(v137);
    swift_release();

    return;
  }
  uint64_t v138 = *(void **)(*(void *)(v94 + 16) + 64);
  uint64_t v139 = (void *)swift_allocObject();
  v139[2] = v95;
  v139[3] = v113;
  v139[4] = v153;
  v139[5] = v154;
  swift_retain();
  id v140 = v95;
  swift_retain();
  id v141 = v138;
  dispatch_group_t v142 = v152;
  sub_24D3E2DA8((uint64_t)"normalizeError(_:synchronous:completionHandler:)", 48, 2, 0, v141, (uint64_t)sub_24D5B3850, (uint64_t)v139);

  swift_release();
LABEL_110:
  swift_release();
}

uint64_t sub_24D5AFB68(uint64_t a1, uint64_t (*a2)(void *, uint64_t))
{
  v3[0] = 0;
  v3[1] = 0;
  return a2(v3, a1);
}

uint64_t sub_24D5AFBA8(uint64_t a1, uint64_t (*a2)(uint64_t *, uint64_t))
{
  uint64_t v3 = 0;
  return a2(&v3, a1);
}

void sub_24D5AFBE8(void *a1, void (*a2)(void), uint64_t a3)
{
  if (a1)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = Strong;
      swift_retain();
      id v8 = a1;
      sub_24DB5C8EC(a1, 0, v7, (unint64_t)a2, a3);
      swift_release();
      swift_release();
    }
    else
    {
      id v9 = a1;
      id v10 = (id)FPDomainUnavailableError();
      a2();
    }
  }
  else
  {
    a2();
  }
}

void sub_24D5AFCC0(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5)
{
}

void sub_24D5AFCE8(uint64_t a1, void *a2, void (*a3)(uint64_t *, id), uint64_t a4, uint64_t a5)
{
}

void sub_24D5AFD40(uint64_t a1, void *a2, void (*a3)(uint64_t *, id), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, void (*a8)(uint64_t), void (*a9)(id))
{
  uint64_t v20 = a1;
  if (a2)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v19 = a1;
      uint64_t v15 = swift_allocObject();
      *(void *)(v15 + 16) = a3;
      *(void *)(v15 + 24) = a4;
      sub_24D3F0BA0((uint64_t)&v19, v15 + 32, a7);
      id v16 = a2;
      a8(a1);
      swift_retain();
      sub_24D5AE460(a2, 0, a9, v15);
      swift_release();

      swift_release();
    }
    else
    {
      id v17 = a2;
      id v18 = (id)FPDomainUnavailableError();
      a3(&v20, v18);
    }
  }
  else
  {
    ((void (*)(uint64_t *))a3)(&v20);
  }
}

void sub_24D5AFE94(uint64_t a1, void *a2, void (*a3)(uint64_t *, id), uint64_t a4)
{
  uint64_t v12 = a1;
  if (a2)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      id v8 = (void *)swift_allocObject();
      _OWORD v8[2] = a3;
      id v8[3] = a4;
      void v8[4] = a1;
      id v9 = a2;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_24D5AE460(a2, 0, (void (*)(id))sub_24D5B3EDC, (uint64_t)v8);
      swift_release();

      swift_release();
    }
    else
    {
      id v10 = a2;
      id v11 = (id)FPDomainUnavailableError();
      a3(&v12, v11);
    }
  }
  else
  {
    ((void (*)(uint64_t *))a3)(&v12);
  }
}

void sub_24D5AFFC8(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5)
{
}

void sub_24D5AFFF0(void *a1, void *a2, void (*a3)(void **, id), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7, void (*a8)(id))
{
  uint64_t v20 = a1;
  if (a2)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      uint64_t v19 = a1;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = a3;
      *(void *)(v14 + 24) = a4;
      sub_24D3F0BA0((uint64_t)&v19, v14 + 32, a7);
      id v15 = a2;
      id v16 = a1;
      swift_retain();
      sub_24D5AE460(a2, 0, a8, v14);
      swift_release();

      swift_release();
    }
    else
    {
      id v17 = a2;
      id v18 = (id)FPDomainUnavailableError();
      a3(&v20, v18);
    }
  }
  else
  {
    ((void (*)(void **))a3)(&v20);
  }
}

void sub_24D5B0130(void *a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(long long *), uint64_t a6)
{
  v21[0] = a1;
  v21[1] = a2;
  v21[2] = a3;
  char v22 = a4 & 1;
  if (a4)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v12 = Strong;
      swift_retain();
      sub_24D4C5C00(a1, a2, a3, 1);
      sub_24DB6EDFC(a1, 0, v12, a5, a6);
      swift_release();
      swift_release();
      uint64_t v13 = a1;
      uint64_t v14 = a2;
      uint64_t v15 = a3;
      char v16 = 1;
LABEL_9:
      sub_24D4C5B00(v13, v14, v15, v16);
      return;
    }
    id v17 = a1;
    id v18 = (id)FPDomainUnavailableError();
    if (v18)
    {
      v19[0] = v18;
      char v20 = 1;
      a5((long long *)v19);
      sub_24D4C5B00(a1, a2, a3, 1);
      uint64_t v13 = (void *)v19[0];
      uint64_t v14 = v19[1];
      uint64_t v15 = v19[2];
      char v16 = v20;
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    a5((long long *)v21);
    sub_24D4C5B00(a1, a2, a3, 0);
  }
}

void sub_24D5B02B8(uint64_t a1, void (*a2)(long long *), uint64_t a3)
{
  sub_24D3F0BA0(a1, (uint64_t)&v14, (uint64_t *)&unk_26B190970);
  uint64_t v6 = v14;
  sub_24D3F0BA0(a1, (uint64_t)v13, (uint64_t *)&unk_26B190970);
  sub_24D3F0BA0(a1, (uint64_t)v15, (uint64_t *)&unk_26B190970);
  if ((v15[32] & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    a2((long long *)v13);
    goto LABEL_5;
  }
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v8 = Strong;
    swift_retain();
    sub_24D5B3E7C(a1, (void (*)(void, void, void, void, void))sub_24D4C6B10);
    sub_24DB70870(v6, 0, v8, a2, a3);
    swift_release();
    swift_release();
LABEL_5:
    sub_24D5B3E7C(a1, (void (*)(void, void, void, void, void))sub_24D4C6B9C);
    return;
  }
  id v9 = v6;
  id v10 = (id)FPDomainUnavailableError();
  if (v10)
  {
    v11[0] = v10;
    char v12 = 1;
    a2((long long *)v11);
    sub_24D5B3E7C(a1, (void (*)(void, void, void, void, void))sub_24D4C6B9C);
    sub_24D4C6B9C(v11[0], (uint64_t)v11[1], (uint64_t)v11[2], (uint64_t)v11[3], v12);
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5B0458(void *a1, char a2, void (*a3)(id *), uint64_t a4)
{
  uint64_t v15 = a1;
  char v16 = a2 & 1;
  if (a2)
  {
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v8 = Strong;
      sub_24D4178BC(a1);
      swift_retain();
      sub_24DB722E4(a1, 0, v8, (unint64_t)a3, a4);
      swift_release();
      swift_release();
      id v9 = a1;
LABEL_9:
      sub_24D4178C8(v9);
      return;
    }
    id v11 = a1;
    id v12 = (id)FPDomainUnavailableError();
    if (v12)
    {
      id v13 = v12;
      char v14 = 1;
      a3(&v13);
      sub_24D4178C8(a1);
      id v9 = v13;
      goto LABEL_9;
    }
    __break(1u);
  }
  else
  {
    id v10 = a1;
    a3(&v15);
    sub_24D4178C8(a1);
  }
}

uint64_t sub_24D5B0598()
{
  return swift_deallocObject();
}

uint64_t sub_24D5B05D0()
{
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B0610(void *a1)
{
  sub_24D5ABFE0(a1, *(void *)(v1 + 16), *(dispatch_group_t *)(v1 + 24));
}

uint64_t sub_24D5B0618()
{
  swift_release();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B0660(uint64_t a1)
{
  return sub_24D5B31E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24D5A9E14);
}

uint64_t sub_24D5B067C()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B06C4()
{
  sub_24D5AC050(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void))(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_24D5B06D0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_24D5B0718()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

uint64_t sub_24D5B0730()
{
  return swift_deallocObject();
}

uint64_t sub_24D5B0770()
{
  return objectdestroy_69Tm();
}

void sub_24D5B0778(uint64_t a1)
{
  sub_24D5AA234(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void))(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_24D5B078C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x263F8EE78];
  if (v3)
  {
    uint64_t v9 = MEMORY[0x263F8EE78];
    sub_24DCCA838();
    uint64_t v6 = (uint64_t *)(a1 + 32);
    uint64_t v7 = *(void *)(*(void *)(a2 + 16) + OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_providerDomainID);
    do
    {
      uint64_t v8 = *v6++;
      objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderDomainID_itemIdentifier_, v7, v8);
      sub_24DCCA808();
      sub_24DCCA848();
      sub_24DCCA858();
      sub_24DCCA818();
      --v3;
    }
    while (v3);
    return v9;
  }
  return result;
}

uint64_t sub_24D5B0878()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B08C8(uint64_t a1)
{
  sub_24D5AAA84(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_24D5B08D8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D5B0938(uint64_t a1)
{
  return sub_24DC5FC00(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32), *(void (**)(uint64_t *))(v1 + 40), *(void *)(v1 + 48), v1 + 56, *(unsigned __int8 *)(v1 + 152));
}

uint64_t sub_24D5B0954()
{
  return objectdestroy_69Tm();
}

void sub_24D5B095C()
{
}

uint64_t sub_24D5B0974()
{
  return objectdestroy_85Tm(MEMORY[0x263F8EEA0]);
}

void sub_24D5B098C(void *a1)
{
  sub_24D5A981C(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5B0998()
{
  return objectdestroy_69Tm();
}

uint64_t objectdestroy_69Tm()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B09FC()
{
  sub_24D5A9054(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void))(v0 + 40), *(void *)(v0 + 48), *(unsigned char **)(v0 + 56));
}

uint64_t sub_24D5B0A20()
{
  return swift_deallocObject();
}

uint64_t sub_24D5B0A58(uint64_t a1, void *a2)
{
  return sub_24D5AB0D0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_24D5B0A60(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void), double a5, double a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  _Block_copy(a4);
  uint64_t v13 = sub_24D6084A4(a2);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void **)(a3 + 16);
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = sub_24D5B3F9C;
    *(void *)(v16 + 24) = v12;
    *(void *)(v16 + 32) = a3;
    *(void *)(v16 + 40) = a1;
    *(double *)(v16 + 48) = a5;
    *(double *)(v16 + 56) = a6;
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = sub_24D5B3DBC;
    *(void *)(v17 + 24) = v16;
    id v18 = (void *)swift_allocObject();
    v18[2] = v14;
    void v18[3] = sub_24D5B3DBC;
    v18[4] = v16;
    v18[5] = v15;
    swift_retain_n();
    swift_retain();
    swift_retain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    id v19 = v15;
    sub_24D626FCC((uint64_t)"withFPItemIdentifier(forDictionary:cb:)", 39, 2, (void (*)(void *, uint64_t *, id))sub_24D5B3DCC, v17, (uint64_t)sub_24D5B3E1C, (uint64_t)v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    a4[2](a4, 0);
  }

  return swift_release();
}

void sub_24D5B0C40(uint64_t a1, unint64_t a2, uint64_t a3, void *aBlock, double a5, double a6)
{
  _Block_copy(aBlock);
  uint64_t v9 = (void *)sub_24D429324(MEMORY[0x263F8EE78]);
  if (a2 >> 62)
  {
LABEL_25:
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_24DCCA9C8();
    if (v10) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v10)
    {
LABEL_3:
      uint64_t v11 = 4;
      do
      {
        uint64_t v13 = v11 - 4;
        if ((a2 & 0xC000000000000001) != 0)
        {
          id v14 = (id)MEMORY[0x253328820](v11 - 4, a2);
          uint64_t v15 = v11 - 3;
          if (__OFADD__(v13, 1)) {
            goto LABEL_22;
          }
        }
        else
        {
          id v14 = *(id *)(a2 + 8 * v11);
          uint64_t v15 = v11 - 3;
          if (__OFADD__(v13, 1))
          {
LABEL_22:
            __break(1u);
LABEL_23:
            __break(1u);
LABEL_24:
            __break(1u);
            goto LABEL_25;
          }
        }
        id v16 = v14;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v19 = sub_24D6AD808((uint64_t)v16);
        uint64_t v20 = v9[2];
        BOOL v21 = (v18 & 1) == 0;
        uint64_t v22 = v20 + v21;
        if (__OFADD__(v20, v21)) {
          goto LABEL_23;
        }
        char v23 = v18;
        if (v9[3] >= v22)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            if (v18) {
              goto LABEL_4;
            }
          }
          else
          {
            sub_24DC78F4C();
            if (v23) {
              goto LABEL_4;
            }
          }
        }
        else
        {
          sub_24D6FD0D4(v22, isUniquelyReferenced_nonNull_native);
          unint64_t v24 = sub_24D6AD808((uint64_t)v16);
          if ((v23 & 1) != (v25 & 1))
          {
            sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
            _Block_release(aBlock);
            _Block_release(aBlock);
            sub_24DCCAF18();
            __break(1u);
            return;
          }
          unint64_t v19 = v24;
          if (v23)
          {
LABEL_4:
            uint64_t v12 = v9[7];
            swift_bridgeObjectRelease();
            *(void *)(v12 + 8 * v19) = MEMORY[0x263F8EE78];
            goto LABEL_5;
          }
        }
        v9[(v19 >> 6) + 8] |= 1 << v19;
        uint64_t v26 = 8 * v19;
        *(void *)(v9[6] + v26) = v16;
        *(void *)(v9[7] + v26) = MEMORY[0x263F8EE78];
        uint64_t v27 = v9[2];
        BOOL v28 = __OFADD__(v27, 1);
        uint64_t v29 = v27 + 1;
        if (v28) {
          goto LABEL_24;
        }
        v9[2] = v29;
        id v30 = v16;
LABEL_5:

        swift_bridgeObjectRelease();
        ++v11;
      }
      while (v15 != v10);
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_24DC3202C((uint64_t)v9);
  swift_bridgeObjectRelease();
  _Block_copy(aBlock);
  sub_24D5B0A60(a1, v31, a3, (void (**)(void, void))aBlock, a5, a6);
  _Block_release(aBlock);
  swift_bridgeObjectRelease();

  _Block_release(aBlock);
}

uint64_t sub_24D5B0F08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void (**a5)(void, void))
{
  uint64_t v10 = sub_24DCC92F8();
  uint64_t v39 = *(void *)(v10 - 8);
  uint64_t v40 = v10;
  MEMORY[0x270FA5388](v10);
  uint64_t v37 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = sub_24DCC9398();
  uint64_t v36 = *(void *)(v38 - 8);
  MEMORY[0x270FA5388](v38);
  uint64_t v35 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a5;
  id v14 = *(unsigned char **)(a4 + 16);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_24D5B3F9C;
  *(void *)(v15 + 24) = v13;
  id v16 = (void *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a1;
  void v16[4] = a2;
  v16[5] = a3;
  void v16[6] = sub_24D5B3F9C;
  v16[7] = v13;
  uint64_t v17 = &v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  char v18 = (void *)MEMORY[0x25332B1A0](&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a5);
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = a3;
  if (v18)
  {
    if (objc_msgSend(v18, sel_unableToStartup))
    {
      id v20 = sub_24D621D5C();
      BOOL v21 = (void *)sub_24DCC8818();
      ((void (**)(void, void *))a5)[2](a5, v21);

      swift_release();
      swift_release();

      return swift_release_n();
    }
  }
  if ((v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    uint64_t v22 = (void *)MEMORY[0x25332B1A0](v17);
    if (v22)
    {
      char v23 = v22;
      id v34 = objc_msgSend(v22, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_24D3D2E94;
      aBlock[3] = &block_descriptor_316;
      unint64_t v24 = _Block_copy(aBlock);
      char v25 = v35;
      sub_24DCC9348();
      uint64_t v41 = MEMORY[0x263F8EE78];
      sub_24D5B06D0((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
      sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
      uint64_t v26 = v37;
      uint64_t v27 = v40;
      sub_24DCCA5B8();
      BOOL v28 = v34;
      MEMORY[0x2533282B0](0, v25, v26, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v39 + 8))(v26, v27);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v38);
    }
  }
  uint64_t v29 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  id v30 = *(void **)&v14[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  uint64_t v31 = (void *)swift_allocObject();
  v31[2] = v14;
  v31[3] = sub_24D475710;
  v31[4] = v15;
  v31[5] = sub_24D5B3490;
  v31[6] = v16;
  uint64_t v32 = v14;
  swift_retain();
  swift_retain();
  sub_24D3E2DA8((uint64_t)"userCheckedSuppressionCheckbox(forUserInteractionIdentifier:domainIdentifier:completionHandler:)", 96, 2, v29, v30, (uint64_t)sub_24D3E5BC4, (uint64_t)v31);
  swift_release();
  swift_release();
  swift_release();
  return swift_release_n();
}

uint64_t sub_24D5B1404(void *a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = sub_24DCC92F8();
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v35 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = sub_24DCC9398();
  uint64_t v34 = *(void *)(v36 - 8);
  MEMORY[0x270FA5388](v36);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  uint64_t v13 = *(unsigned char **)(a3 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_24D5B3F9C;
  *(void *)(v14 + 24) = v12;
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a3;
  v15[3] = a1;
  void v15[4] = a2;
  v15[5] = sub_24D5B3F9C;
  void v15[6] = v12;
  id v16 = &v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  uint64_t v17 = (void *)MEMORY[0x25332B1A0](&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  id v18 = a1;
  if (v17)
  {
    if (objc_msgSend(v17, sel_unableToStartup))
    {
      id v19 = sub_24D621D5C();
      id v20 = (void *)sub_24DCC8818();
      ((void (**)(void, void *))a4)[2](a4, v20);

      swift_release();
      swift_release();

      goto LABEL_9;
    }
  }
  if ((v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    BOOL v21 = (void *)MEMORY[0x25332B1A0](v16);
    if (v21)
    {
      uint64_t v22 = v21;
      id v33 = objc_msgSend(v21, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_24D3D2E94;
      aBlock[3] = &block_descriptor_238_0;
      char v23 = _Block_copy(aBlock);
      sub_24DCC9348();
      uint64_t v39 = MEMORY[0x263F8EE78];
      sub_24D5B06D0((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
      sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
      unint64_t v24 = v35;
      uint64_t v25 = v38;
      sub_24DCCA5B8();
      uint64_t v26 = v33;
      MEMORY[0x2533282B0](0, v11, v24, v23);
      _Block_release(v23);

      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v25);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v36);
    }
  }
  uint64_t v27 = *(void **)&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  BOOL v28 = *(void **)&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = v13;
  v29[3] = sub_24D475710;
  v29[4] = v14;
  v29[5] = sub_24D5B31D0;
  void v29[6] = v15;
  id v30 = v13;
  swift_retain();
  swift_retain();
  sub_24D3E2DA8((uint64_t)"disconnectDomainID(_:options:completionHandler:)", 48, 2, v27, v28, (uint64_t)sub_24D3E5BC4, (uint64_t)v29);
  swift_release();
  swift_release();
  swift_release();
LABEL_9:
  swift_release_n();
  return 0;
}

uint64_t sub_24D5B18F0(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  uint64_t v8 = sub_24DCC92F8();
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  MEMORY[0x270FA5388](v8);
  uint64_t v34 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = sub_24DCC9398();
  uint64_t v33 = *(void *)(v35 - 8);
  MEMORY[0x270FA5388](v35);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a4;
  uint64_t v13 = *(unsigned char **)(a3 + 16);
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_24D5B3F9C;
  *(void *)(v14 + 24) = v12;
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a3;
  v15[3] = a1;
  void v15[4] = a2;
  v15[5] = sub_24D5B3F9C;
  void v15[6] = v12;
  id v16 = &v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain];
  uint64_t v17 = (void *)MEMORY[0x25332B1A0](&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_domain]);
  swift_retain_n();
  _Block_copy(a4);
  swift_retain();
  swift_bridgeObjectRetain();
  if (v17)
  {
    if (objc_msgSend(v17, sel_unableToStartup))
    {
      id v18 = sub_24D621D5C();
      id v19 = (void *)sub_24DCC8818();
      ((void (**)(void, void *))a4)[2](a4, v19);

      swift_release();
      swift_release();

      return swift_release_n();
    }
  }
  if ((v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_started] & 1) == 0)
  {
    id v20 = (void *)MEMORY[0x25332B1A0](v16);
    if (v20)
    {
      BOOL v21 = v20;
      id v32 = objc_msgSend(v20, sel_serialQueue);

      aBlock[4] = nullsub_1;
      aBlock[5] = 0;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_24D3D2E94;
      aBlock[3] = &block_descriptor_217;
      uint64_t v22 = _Block_copy(aBlock);
      sub_24DCC9348();
      uint64_t v38 = MEMORY[0x263F8EE78];
      sub_24D5B06D0((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
      sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
      char v23 = v34;
      uint64_t v24 = v37;
      sub_24DCCA5B8();
      uint64_t v25 = v32;
      MEMORY[0x2533282B0](0, v11, v23, v22);
      _Block_release(v22);

      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, v24);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v11, v35);
    }
  }
  uint64_t v26 = *(void **)&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_log];
  uint64_t v27 = *(void **)&v13[OBJC_IVAR____TtC9libfssync20FPDDomainFPFSBackend_queue];
  BOOL v28 = (void *)swift_allocObject();
  v28[2] = v13;
  void v28[3] = sub_24D475710;
  v28[4] = v14;
  v28[5] = sub_24D5B316C;
  v28[6] = v15;
  uint64_t v29 = v13;
  swift_retain();
  swift_retain();
  sub_24D3E2DA8((uint64_t)"wake(forSessionIdentifier:completionHandler:)", 45, 2, v26, v27, (uint64_t)sub_24D3E5BC4, (uint64_t)v28);
  swift_release();
  swift_release();
  swift_release();
  return swift_release_n();
}

uint64_t sub_24D5B1DDC()
{
  return objectdestroy_105Tm_0(MEMORY[0x263F8EED8]);
}

uint64_t sub_24D5B1DF4()
{
  return objectdestroy_105Tm_0(MEMORY[0x263F8EEB0]);
}

uint64_t sub_24D5B1E0C()
{
  sub_24D40160C(*(id *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(unsigned char *)(v0 + 25));

  return swift_deallocObject();
}

uint64_t sub_24D5B1E54()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B1E8C(void *a1, uint64_t a2)
{
  return sub_24D609004(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

uint64_t sub_24D5B1E94()
{
  sub_24D4170B0(*(void *)(v0 + 32));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B1F88(uint64_t a1)
{
  return sub_24D67C0E0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void **)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(unsigned char *)(v1 + 65));
}

uint64_t sub_24D5B1FC0()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B1FD8(unint64_t a1, uint64_t a2, void *a3)
{
  sub_24D5A4ED0(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_24D5B1FE4()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

void sub_24D5B201C(void *a1, void *a2, uint64_t a3)
{
  sub_24D5A58E0(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_24D5B2024(void *a1, void *a2)
{
  return (*(uint64_t (**)(void, void))(v2 + 16))(*a1, *a2);
}

uint64_t sub_24D5B2054()
{
  return objectdestroy_135Tm(MEMORY[0x263F8EEA0], MEMORY[0x263F8EED8]);
}

uint64_t sub_24D5B2080(uint64_t a1)
{
  return sub_24D5ADAA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_24D5B2090()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D5B20C8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B2118(void *a1, char a2)
{
  sub_24D5AE060(a1, a2 & 1, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void **)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_24D5B2128()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t sub_24D5B2160()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B2178(uint64_t a1)
{
  sub_24D5B0458(*(void **)a1, *(unsigned char *)(a1 + 8), *(void (**)(id *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_24D5B2190()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B21D8(uint64_t a1)
{
  sub_24D5ACB78(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_24D5B2290()
{
  return objectdestroy_163Tm(MEMORY[0x263F8EED8]);
}

uint64_t sub_24D5B22AC()
{
  return sub_24D5AE240(*(void (**)(uint64_t, uint64_t, void))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_24D5B22B8@<X0>(_DWORD *a1@<X8>)
{
  return sub_24D90C254(a1);
}

uint64_t sub_24D5B22D4@<X0>(_DWORD *a1@<X8>)
{
  return sub_24D5AD390(*(unsigned char *)(v1 + 20), a1);
}

uint64_t sub_24D5B22F8(uint64_t a1)
{
  return a1;
}

uint64_t sub_24D5B2324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for VFSItem(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_24D5B2388()
{
  uint64_t v1 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v19 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v2 = v0 + ((v19 + 48) & ~v19);
  swift_bridgeObjectRelease();
  uint64_t v3 = v2 + v1[7];
  uint64_t v4 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v5 = v3 + v4[7];
  uint64_t v6 = sub_24DCC8CE8();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v3 + v4[8], v6);
  swift_bridgeObjectRelease();
  uint64_t v9 = v3 + v4[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v6)) {
    v8(v9, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t *)(v3 + v4[33]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_24D400DCC(*v10, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = v2 + v1[8];
  uint64_t v13 = *(void **)(v12 + 16);
  if (v13 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v12 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v2 + v1[12];
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    uint64_t v16 = sub_24DCC8A58();
    uint64_t v17 = *(void *)(v16 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16)) {
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v14, v16);
    }
  }

  return swift_deallocObject();
}

uint64_t sub_24D5B26F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_24D5AD424(a1, v4, v5, v6, v7, v8);
}

void *sub_24D5B2770@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_24D7C3F84(a1, *(void *)(v2 + 16), *(void *(**)(uint64_t *__return_ptr, uint64_t))(v2 + 24), a2);
}

void *sub_24D5B2790@<X0>(_DWORD *a1@<X8>)
{
  return sub_24D7C3FD0(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

uint64_t sub_24D5B27AC()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B194240) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (int *)type metadata accessor for VFSItem(0);
  uint64_t v5 = *((void *)v4 - 1);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v3 + v6 + 8) & ~v6;
  swift_release();
  uint64_t v8 = (id *)(v0 + v2);
  uint64_t v43 = v4;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else if (!(*(unsigned int (**)(id *, uint64_t, int *))(v5 + 48))(v8, 1, v4))
  {
    uint64_t v9 = v0;
    uint64_t v10 = (v3 + v6 + 8) & ~v6;
    swift_bridgeObjectRelease();
    unint64_t v11 = (char *)v8 + v4[7];
    uint64_t v12 = (int *)type metadata accessor for ItemMetadata();
    uint64_t v13 = &v11[v12[7]];
    uint64_t v14 = sub_24DCC8CE8();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(void (**)(char *, uint64_t))(v15 + 8);
    v16(v13, v14);
    v16(&v11[v12[8]], v14);
    swift_bridgeObjectRelease();
    uint64_t v17 = &v11[v12[29]];
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v17, 1, v14)) {
      v16(v17, v14);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v18 = (uint64_t *)&v11[v12[33]];
    unint64_t v19 = v18[1];
    if (v19 >> 60 != 15) {
      sub_24D400DCC(*v18, v19);
    }
    swift_bridgeObjectRelease();
    id v20 = (char *)v8 + v4[8];
    BOOL v21 = (void *)*((void *)v20 + 2);
    uint64_t v7 = v10;
    uint64_t v0 = v9;
    if (v21 != (void *)1)
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)v20 + 24))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    uint64_t v22 = (char *)v8 + v4[12];
    uint64_t v23 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23))
    {
      uint64_t v24 = sub_24DCC8A58();
      uint64_t v25 = *(void *)(v24 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v22, 1, v24)) {
        (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
      }
    }
  }
  swift_release();
  swift_release();
  uint64_t v26 = v0 + v7;
  swift_bridgeObjectRelease();
  uint64_t v27 = v0 + v7 + v4[7];
  BOOL v28 = (int *)type metadata accessor for ItemMetadata();
  uint64_t v29 = v27 + v28[7];
  uint64_t v30 = sub_24DCC8CE8();
  uint64_t v31 = *(void *)(v30 - 8);
  id v32 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
  v32(v29, v30);
  v32(v27 + v28[8], v30);
  swift_bridgeObjectRelease();
  uint64_t v33 = v27 + v28[29];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v33, 1, v30)) {
    v32(v33, v30);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v34 = (uint64_t *)(v27 + v28[33]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_24D400DCC(*v34, v35);
  }
  swift_bridgeObjectRelease();
  uint64_t v36 = v26 + v43[8];
  uint64_t v37 = *(void **)(v36 + 16);
  if (v37 != (void *)1)
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v36 + 192))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v38 = v26 + v43[12];
  uint64_t v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v38, 1, v39))
  {
    uint64_t v40 = sub_24DCC8A58();
    uint64_t v41 = *(void *)(v40 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v38, 1, v40)) {
      (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v38, v40);
    }
  }

  return swift_deallocObject();
}

void sub_24D5B2E98()
{
  uint64_t v1 = *(void *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B194240) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for VFSItem(0) - 8);
  sub_24D5AD6E0(*(void (**)(void *, BOOL))(v0 + 16), *(void *)(v0 + 24), v0 + v2, *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), (uint64_t *)(v0+ ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))));
}

uint64_t sub_24D5B2F84(uint64_t a1)
{
  return sub_24D465988(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_24D5B2F8C(uint64_t a1)
{
  sub_24DB78E7C(a1, *(void *)(v1 + 16));
}

uint64_t sub_24D5B2F94()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

void sub_24D5B2FEC(unint64_t a1, int a2, uint64_t a3)
{
  sub_24D5AC6A0(a1, a2, a3, *(id *)(v3 + 16), *(void (**)(uint64_t))(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(void *)(v3 + 56), *(void *)(v3 + 64));
}

void sub_24D5B3020(uint64_t a1)
{
  sub_24D5A8FE4(a1, *(void *)(v1 + 16));
}

void sub_24D5B3028()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = (id)sub_24DCC8818();
  (*(void (**)(uint64_t, id))(v1 + 16))(v1, v2);
}

uint64_t sub_24D5B3080()
{
  return objectdestroy_135Tm(MEMORY[0x263F8EED8], MEMORY[0x263F8EEB0]);
}

uint64_t objectdestroy_135Tm(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B310C(uint64_t a1)
{
  return sub_24D5B31E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24D5A875C);
}

uint64_t sub_24D5B3124()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B316C(uint64_t a1)
{
  return sub_24D5B31E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24D5A855C);
}

uint64_t sub_24D5B3188()
{
  swift_release();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B31D0(uint64_t a1)
{
  return sub_24D5B31E8(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_24D5A835C);
}

uint64_t sub_24D5B31E8(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

void sub_24D5B3204(uint64_t a1, uint64_t a2)
{
  sub_24D609030(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_24D5B320C()
{
  return objectdestroy_105Tm_0(MEMORY[0x263F8EED8]);
}

void sub_24D5B3224(uint64_t a1)
{
  sub_24D5A80E8(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_24D5B3230(void *a1, uint64_t a2)
{
  sub_24D5A803C(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_24D5B3238()
{
  return objectdestroy_85Tm(MEMORY[0x263F8EED8]);
}

uint64_t objectdestroy_85Tm(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return swift_deallocObject();
}

void *sub_24D5B3298(uint64_t a1)
{
  return sub_24D5A7D18(a1, v1[2], v1[3], v1[4]);
}

void sub_24D5B32A4(uint64_t a1)
{
  sub_24D5A531C(a1, *(void *)(v1 + 16));
}

uint64_t sub_24D5B32AC()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B32C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24D5A7A7C(a1, a2, a3, *(void (**)(void))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32));
}

uint64_t sub_24D5B32D0()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

void sub_24D5B3328(uint64_t a1)
{
  sub_24D5A6CF4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_24D5B335C()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_24D5B33AC(uint64_t a1, uint64_t a2)
{
  return sub_24D5B378C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_24D5A6EDC);
}

uint64_t sub_24D5B33C4()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_24D5B33DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, *(void *)(v1 + 32));
}

uint64_t sub_24D5B340C@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = fpfs_make_fsevent();
  *a1 = result;
  return result;
}

uint64_t sub_24D5B3440()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();

  return swift_deallocObject();
}

void sub_24D5B3490(uint64_t a1)
{
  sub_24D5A6AD0(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_24D5B34A4(void *a1, uint64_t a2)
{
  sub_24D98EF90(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_24D5B34AC(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_24D5B34D8()
{
  swift_release();

  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B3520(uint64_t a1)
{
  return sub_24D5A5DA4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56));
}

uint64_t sub_24D5B3538(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(unint64_t, uint64_t))(v2 + 16);
  unint64_t v5 = sub_24D91A820(a1);
  v4(v5, a2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_24D5B358C()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B35A4(uint64_t *a1, void *a2)
{
  sub_24D5AFD40(*a1, a2, *(void (**)(uint64_t *, id))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), (uint64_t)&unk_26FFAD790, (uint64_t *)&unk_26986BE50, MEMORY[0x263F8EEA8], (void (*)(id))sub_24D5B3804);
}

uint64_t sub_24D5B3608(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  uint64_t v4 = a1;
  return v2(&v4);
}

uint64_t sub_24D5B3640()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B3690()
{
  sub_24D5A600C(*(void **)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(void (**)(void, void *))(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_24D5B36BC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *, uint64_t))(v1 + 16);
  uint64_t v4 = 0;
  return v2(&v4, a1);
}

uint64_t sub_24D5B36F8()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B3710(uint64_t a1, void *a2)
{
  sub_24D5A6780(a1, a2, *(void (**)(void, void *))(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_24D5B3720(uint64_t a1, uint64_t a2)
{
  return sub_24D5B378C(a1, a2, (uint64_t (*)(uint64_t, uint64_t, void, void, void, void, void, void))sub_24D5A5A58);
}

uint64_t objectdestroy_366Tm()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B378C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, void, void, void, void, void, void))
{
  return a3(a1, a2, v3[2], v3[3], v3[4], v3[5], v3[6], v3[7]);
}

uint64_t sub_24D5B37A4()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EEB0]);
}

uint64_t sub_24D5B37BC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(v1 + 16))(a1, *(void *)(v1 + 32));
}

uint64_t sub_24D5B37EC()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EEA0]);
}

uint64_t sub_24D5B3808()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void sub_24D5B3850()
{
  sub_24DB49CC8(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void (**)(id))(v0 + 32));
}

uint64_t sub_24D5B385C(uint64_t a1)
{
  return a1;
}

void *sub_24D5B38B0(void *result)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void sub_24D5B38F0(void *a1, void *a2, unint64_t a3, void *a4, uint64_t a5, unint64_t a6, void *a7, uint64_t a8, uint64_t a9, void *a10, char a11)
{
  switch(a11)
  {
    case 0:

      sub_24D400D4C((uint64_t)a2, a3, (uint64_t)a4, a5, a6);
      a1 = a10;
      goto LABEL_6;
    case 1:

      swift_bridgeObjectRelease();
      sub_24D4A479C(a5, a6);
      a1 = a7;
      goto LABEL_6;
    case 2:
      id v17 = (id)a3;
      swift_bridgeObjectRelease();
      goto LABEL_10;
    case 3:

      a1 = a2;
      goto LABEL_6;
    case 4:
      id v17 = a1;

LABEL_10:
      a1 = v17;
      goto LABEL_11;
    case 6:
    case 9:
LABEL_11:
      goto LABEL_8;
    case 7:
      sub_24D400DCC((uint64_t)a1, (unint64_t)a2);
      sub_24D400DCC(a3, (unint64_t)a4);
      return;
    case 8:
LABEL_6:
LABEL_8:

      break;
    default:
      return;
  }
}

uint64_t sub_24D5B3AB4(uint64_t a1)
{
  return a1;
}

void sub_24D5B3B18(id a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16)
{
  switch(a16)
  {
    case 0:
      sub_24D3E386C(a3, a4, a5, a6, a7, a8, (uint64_t)a9, a10, a11);
      a1 = a15;
      goto LABEL_8;
    case 1:
      swift_bridgeObjectRelease();
      sub_24D4A479C(a7, a8);
      a1 = a9;
      goto LABEL_8;
    case 2:
      swift_bridgeObjectRelease();
      return;
    case 3:
      a1 = (id)a3;
      goto LABEL_8;
    case 8:
LABEL_8:

      break;
    default:
      return;
  }
}

uint64_t sub_24D5B3C48(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 120) <= 9u) {
    return *(unsigned __int8 *)(a1 + 120);
  }
  else {
    return (*(_DWORD *)a1 + 10);
  }
}

uint64_t sub_24D5B3C60()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B3C78(uint64_t a1)
{
  sub_24DB49648(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5B3C84()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EED8]);
}

void sub_24D5B3C9C(uint64_t a1)
{
  sub_24DB4918C(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_24D5B3CA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v2 + 16))(a1, a2, 0);
}

unint64_t sub_24D5B3CD4()
{
  unint64_t result = qword_26B1940C0;
  if (!qword_26B1940C0)
  {
    sub_24D3FB6F8(255, (unint64_t *)&unk_26B1940B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1940C0);
  }
  return result;
}

uint64_t sub_24D5B3D3C()
{
  return objectdestroy_163Tm(MEMORY[0x263F8EEE8]);
}

uint64_t objectdestroy_163Tm(void (*a1)(void))
{
  swift_release();
  swift_release();
  a1(*(void *)(v1 + 40));

  return swift_deallocObject();
}

void sub_24D5B3DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_24D5A4A6C(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(void *)(v3 + 24), *(void *)(v3 + 32), *(void *)(v3 + 40), *(double *)(v3 + 48), *(double *)(v3 + 56));
}

uint64_t sub_24D5B3DCC(void *a1, void *a2, uint64_t a3)
{
  return sub_24D628A30(a1, a2, a3, *(uint64_t (**)(void, void))(v3 + 16));
}

uint64_t sub_24D5B3DD4()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_24D5B3E1C(uint64_t a1)
{
  return sub_24D628A60(a1, *(void *)(v1 + 16), *(void (**)(uint64_t, unint64_t, void))(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_24D5B3E28(uint64_t a1)
{
  return a1;
}

uint64_t sub_24D5B3E7C(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_24D5B3EC4()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EEA0]);
}

uint64_t sub_24D5B3EDC(uint64_t a1)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t *, uint64_t))(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 32);
  return v2(&v4, a1);
}

uint64_t sub_24D5B3F20()
{
  return objectdestroy_63Tm(MEMORY[0x263F8EEE8]);
}

uint64_t objectdestroy_63Tm(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return swift_deallocObject();
}

id sub_24D5B3F88(id a1)
{
  return a1;
}

unint64_t sub_24D5B4114@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_24D5B4EA0(*a1);
  *a2 = result;
  return result;
}

void sub_24D5B4140(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_24D5B414C()
{
  uint64_t result = 0x656C646E6168;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7269447369;
      break;
    case 2:
      uint64_t result = 0x664F746E65747865;
      break;
    case 3:
      uint64_t result = 0x654C746E65747865;
      break;
    case 4:
      uint64_t result = 0x7367616C66;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_24D5B41FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_24D5B4EB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_24D5B4224()
{
  return *v0;
}

unint64_t sub_24D5B4230@<X0>(unint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_24D5B4EA0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_24D5B4258(uint64_t a1)
{
  unint64_t v2 = sub_24D5B4B98();

  return MEMORY[0x270FA00B0](a1, v2);
}

uint64_t sub_24D5B4294(uint64_t a1)
{
  unint64_t v2 = sub_24D5B4B98();

  return MEMORY[0x270FA00B8](a1, v2);
}

uint64_t sub_24D5B42D0(void *a1)
{
  uint64_t v2 = swift_allocObject();
  sub_24D5B4320(a1);
  return v2;
}

uint64_t sub_24D5B4320(void *a1)
{
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194908);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(unsigned char *)(v1 + 80) = 1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24D5B4B98();
  swift_retain();
  sub_24DCCB0B8();
  if (v2)
  {
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    type metadata accessor for VFSStagedContext();
    swift_deallocPartialClassInstance();
  }
  else
  {
    char v23 = 0;
    sub_24D5B4C40();
    sub_24DCCAB98();
    *(_OWORD *)(v1 + 16) = v20;
    *(void *)(v1 + 32) = v21;
    *(_OWORD *)(v1 + 40) = v22;
    LOBYTE(v20) = 1;
    *(unsigned char *)(v1 + 56) = sub_24DCCAB68() & 1;
    LOBYTE(v20) = 2;
    uint64_t v9 = sub_24DCCAAE8();
    if (v10)
    {
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      BOOL v16 = 1;
    }
    else
    {
      uint64_t v11 = v9;
      LOBYTE(v20) = 3;
      uint64_t v12 = sub_24DCCAAE8();
      if (v13) {
        uint64_t v14 = 0;
      }
      else {
        uint64_t v14 = v11;
      }
      if (v13) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = v12;
      }
      BOOL v16 = (v13 & 1) != 0;
    }
    *(void *)(v1 + 64) = v14;
    *(void *)(v1 + 72) = v15;
    *(unsigned char *)(v1 + 80) = v16;
    LOBYTE(v20) = 4;
    uint64_t v17 = sub_24DCCAAF8();
    if (v18) {
      uint64_t v19 = 0;
    }
    else {
      uint64_t v19 = v17;
    }
    *(void *)(v1 + 88) = v19;
    swift_release();
    sub_24DCCAAB8();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  return v1;
}

uint64_t sub_24D5B4668(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194920);
  uint64_t v18 = *(void *)(v4 - 8);
  MEMORY[0x270FA5388](v4);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194930);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  char v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_24D5B4B98();
  sub_24DCCB0D8();
  long long v20 = *(_OWORD *)(v2 + 16);
  uint64_t v21 = *(void *)(v2 + 32);
  long long v22 = *(_OWORD *)(v2 + 40);
  char v23 = 0;
  sub_24D5B4BEC();
  uint64_t v11 = v19;
  sub_24DCCACF8();
  if (v11) {
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  uint64_t v19 = v6;
  uint64_t v12 = v18;
  LOBYTE(v20) = 1;
  sub_24DCCACB8();
  if (*(unsigned char *)(v2 + 80))
  {
    uint64_t v14 = v8;
  }
  else
  {
    LOBYTE(v20) = 2;
    sub_24DCCACD8();
    LOBYTE(v20) = 3;
    sub_24DCCACD8();
    uint64_t v14 = v8;
  }
  LOBYTE(v20) = 4;
  uint64_t v15 = v7;
  sub_24DCCACE8();
  sub_24DCCAC28();
  v17[1] = *((void *)&v22 + 1);
  __swift_project_boxed_opaque_existential_1(&v20, v22);
  sub_24D502B78();
  BOOL v16 = v19;
  sub_24DCCB0D8();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v4);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v20);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v10, v15);
}

uint64_t sub_24D5B49B4()
{
  uint64_t v1 = 1701603686;
  if (*(unsigned char *)(v0 + 56)) {
    uint64_t v1 = 7498084;
  }
  uint64_t v3 = v1;
  sub_24DCC9968();
  sub_24DCCAD78();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  if ((*(unsigned char *)(v0 + 80) & 1) == 0 && (*(void *)(v0 + 64) & 0x8000000000000000) == 0)
  {
    sub_24DCC9968();
    type metadata accessor for CFRange(0);
    sub_24DCCA948();
    sub_24DCC9968();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
  }
  if (*(unsigned char *)(v0 + 88)) {
    sub_24DCC9968();
  }
  return v3;
}

uint64_t sub_24D5B4B10()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_24D5B4B18()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFSStagedContext()
{
  return self;
}

uint64_t sub_24D5B4B74()
{
  return sub_24D5B49B4();
}

unint64_t sub_24D5B4B98()
{
  unint64_t result = qword_26B194608;
  if (!qword_26B194608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B194608);
  }
  return result;
}

unint64_t sub_24D5B4BEC()
{
  unint64_t result = qword_26B1945E0;
  if (!qword_26B1945E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1945E0);
  }
  return result;
}

unint64_t sub_24D5B4C40()
{
  unint64_t result = qword_26B1945E8;
  if (!qword_26B1945E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B1945E8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for VFSStagedContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x24D5B4D60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for VFSStagedContext.CodingKeys()
{
  return &type metadata for VFSStagedContext.CodingKeys;
}

unint64_t sub_24D5B4D9C()
{
  unint64_t result = qword_26986BEA0;
  if (!qword_26986BEA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26986BEA0);
  }
  return result;
}

unint64_t sub_24D5B4DF4()
{
  unint64_t result = qword_26B194618;
  if (!qword_26B194618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B194618);
  }
  return result;
}

unint64_t sub_24D5B4E4C()
{
  unint64_t result = qword_26B194610;
  if (!qword_26B194610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_26B194610);
  }
  return result;
}

unint64_t sub_24D5B4EA0(unint64_t result)
{
  if (result >= 5) {
    return 5;
  }
  return result;
}

uint64_t sub_24D5B4EB0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C646E6168 && a2 == 0xE600000000000000;
  if (v2 || (sub_24DCCAE28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7269447369 && a2 == 0xE500000000000000 || (sub_24DCCAE28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x664F746E65747865 && a2 == 0xEC00000074657366 || (sub_24DCCAE28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x654C746E65747865 && a2 == 0xEC0000006874676ELL || (sub_24DCCAE28() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x7367616C66 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = sub_24DCCAE28();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_24D5B50E8()
{
  return swift_initClassMetadata2();
}

uint64_t sub_24D5B512C(uint64_t a1)
{
  *(void *)(swift_allocObject() + 24) = a1;
  return sub_24D47C264();
}

uint64_t sub_24D5B5168(uint64_t a1)
{
  *(void *)(v1 + 24) = a1;
  return sub_24D47C264();
}

uint64_t sub_24D5B5170(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(void (**)(uint64_t))(*(void *)v2 + 152);
    swift_retain();
    v4(v3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B51F4(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 24);
  if (v2)
  {
    uint64_t v3 = result;
    unsigned int v4 = *(void (**)(uint64_t))(*(void *)v2 + 160);
    swift_retain();
    v4(v3);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B5278@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v42 = a2;
  uint64_t v41 = a1;
  uint64_t v36 = a3;
  uint64_t v4 = *v3;
  uint64_t v5 = *(void *)(*v3 + 568);
  uint64_t v6 = *(void *)(*v3 + 552);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(v4 + 576);
  uint64_t v9 = *(void *)(v4 + 560);
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v12 = swift_getAssociatedConformanceWitness();
  uint64_t v39 = AssociatedConformanceWitness;
  uint64_t v40 = AssociatedTypeWitness;
  uint64_t v43 = AssociatedTypeWitness;
  uint64_t v44 = v10;
  uint64_t v38 = v10;
  uint64_t v45 = AssociatedConformanceWitness;
  uint64_t v46 = v12;
  uint64_t v37 = type metadata accessor for ReconciliationID();
  uint64_t v13 = *(void *)(v37 - 8);
  MEMORY[0x270FA5388](v37);
  uint64_t v15 = (char *)&v31 - v14;
  uint64_t v34 = v6;
  uint64_t v35 = v5;
  uint64_t v43 = v6;
  uint64_t v44 = v9;
  uint64_t v32 = v9;
  uint64_t v33 = v8;
  uint64_t v45 = v5;
  uint64_t v46 = v8;
  type metadata accessor for ItemReconciliation();
  swift_getTupleTypeMetadata2();
  uint64_t v16 = sub_24DCCA3F8();
  uint64_t v31 = *(void *)(v16 - 8);
  uint64_t result = MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v31 - v18;
  uint64_t v20 = v3[3];
  if (v20)
  {
    uint64_t v43 = v38;
    uint64_t v44 = v40;
    uint64_t v45 = v12;
    uint64_t v46 = v39;
    uint64_t v21 = (int8x16_t *)type metadata accessor for ReconciliationID();
    sub_24D95FD44(v21, (uint64_t)v15);
    long long v22 = *(void (**)(char *, void))(*(void *)v20 + 168);
    swift_retain();
    uint64_t v23 = v47;
    v22(v15, v42 & 1);
    if (v23)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v37);
      return swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v37);
      uint64_t v24 = swift_release();
      MEMORY[0x270FA5388](v24);
      uint64_t v26 = v34;
      uint64_t v25 = v35;
      uint64_t v28 = v32;
      uint64_t v27 = v33;
      *(&v31 - 4) = v34;
      *(&v31 - 3) = v28;
      *(&v31 - 2) = v25;
      *(&v31 - 1) = v27;
      uint64_t v43 = v28;
      uint64_t v44 = v26;
      uint64_t v45 = v27;
      uint64_t v46 = v25;
      type metadata accessor for ItemReconciliation();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      sub_24DB86C94((void (*)(char *, char *))sub_24D5B75B4, (uint64_t)(&v31 - 6), MEMORY[0x263F8E628], TupleTypeMetadata2, v30, v36);
      return (*(uint64_t (**)(char *, uint64_t))(v31 + 8))(v19, v16);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B567C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v33 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  uint64_t v32 = a5;
  uint64_t v11 = type metadata accessor for ItemReconciliation();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v13 = TupleTypeMetadata2 - 8;
  uint64_t v14 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v28 = (char *)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = (char *)&v26 - v16;
  uint64_t v29 = a3;
  uint64_t v30 = a2;
  uint64_t v31 = a5;
  uint64_t v32 = a4;
  type metadata accessor for ItemReconciliation();
  uint64_t v27 = *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v18 = *(int *)(v13 + 56);
  uint64_t v19 = *(void *)(v11 - 8);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20(v17, a1, v11);
  *(void *)&v17[v18] = *(void *)(a1 + v18);
  sub_24DB864D4(v11, v33);
  uint64_t v21 = *(void (**)(char *, uint64_t))(v19 + 8);
  v21(v17, v11);
  uint64_t v22 = *(int *)(v13 + 56);
  uint64_t v23 = v28;
  v20(v28, a1, v11);
  uint64_t v24 = *(void *)(a1 + v18);
  *(void *)&v23[v22] = v24;
  *(void *)(v33 + v27) = v24;
  return ((uint64_t (*)(char *, uint64_t))v21)(v23, v11);
}

uint64_t sub_24D5B5880(uint64_t a1)
{
  v13[1] = a1;
  uint64_t v2 = *(void *)(*v1 + 552);
  uint64_t v3 = *(void *)(*v1 + 560);
  uint64_t v4 = *(void *)(*v1 + 568);
  uint64_t v5 = *(void *)(*v1 + 576);
  uint64_t v14 = v2;
  uint64_t v15 = v3;
  uint64_t v16 = v4;
  uint64_t v17 = v5;
  uint64_t v6 = type metadata accessor for ItemReconciliation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = MEMORY[0x270FA5388](v6);
  uint64_t v10 = (char *)v13 - v9;
  uint64_t v11 = v1[3];
  if (v11)
  {
    swift_retain();
    uint64_t v14 = v3;
    uint64_t v15 = v2;
    uint64_t v16 = v5;
    uint64_t v17 = v4;
    uint64_t v12 = type metadata accessor for ItemReconciliation();
    sub_24DB864D4(v12, (uint64_t)v10);
    (*(void (**)(char *))(*(void *)v11 + 176))(v10);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B5A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _OWORD v20[2] = a2;
  uint64_t v21 = a3;
  v20[1] = a1;
  uint64_t v4 = *(void *)(*v3 + 552);
  uint64_t v5 = *(void *)(*v3 + 560);
  uint64_t v6 = *(void *)(*v3 + 568);
  uint64_t v7 = *(void *)(*v3 + 576);
  uint64_t v22 = v4;
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  v20[0] = type metadata accessor for ItemReconciliation();
  uint64_t v8 = *(void *)(v20[0] - 8);
  uint64_t v9 = MEMORY[0x270FA5388](v20[0]);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = MEMORY[0x270FA5388](v9);
  uint64_t v14 = (char *)v20 - v13;
  uint64_t v15 = v3[3];
  if (v15)
  {
    swift_retain();
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    uint64_t v24 = v7;
    uint64_t v25 = v6;
    uint64_t v16 = type metadata accessor for ItemReconciliation();
    sub_24DB864D4(v16, (uint64_t)v14);
    sub_24DB864D4(v16, (uint64_t)v11);
    LOBYTE(v16) = (*(uint64_t (**)(char *, char *, uint64_t))(*(void *)v15 + 192))(v14, v11, v21);
    swift_release();
    uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v18 = v11;
    uint64_t v19 = v20[0];
    v17(v18, v20[0]);
    v17(v14, v19);
    return v16 & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B5C3C(uint64_t a1, uint64_t a2, int a3)
{
  int v16 = a3;
  uint64_t v17 = a2;
  v15[1] = a1;
  uint64_t v4 = *(void *)(*v3 + 552);
  uint64_t v5 = *(void *)(*v3 + 560);
  uint64_t v6 = *(void *)(*v3 + 568);
  uint64_t v7 = *(void *)(*v3 + 576);
  uint64_t v18 = v4;
  uint64_t v19 = v5;
  uint64_t v20 = v6;
  uint64_t v21 = v7;
  uint64_t v8 = type metadata accessor for ItemReconciliation();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t result = MEMORY[0x270FA5388](v8);
  uint64_t v12 = (char *)v15 - v11;
  uint64_t v13 = v3[3];
  if (v13)
  {
    swift_retain();
    uint64_t v18 = v5;
    uint64_t v19 = v4;
    uint64_t v20 = v7;
    uint64_t v21 = v6;
    uint64_t v14 = type metadata accessor for ItemReconciliation();
    sub_24DB864D4(v14, (uint64_t)v12);
    (*(void (**)(char *, uint64_t, void))(*(void *)v13 + 200))(v12, v17, v16 & 1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B5DFC(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedConformanceWitness();
  uint64_t v18 = AssociatedTypeWitness;
  uint64_t v19 = v4;
  uint64_t v20 = AssociatedConformanceWitness;
  uint64_t v21 = v6;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v7 = *(void *)(v15 - 8);
  uint64_t result = MEMORY[0x270FA5388](v15);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void *)(v2 + 24);
  if (v11)
  {
    uint64_t v18 = v4;
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = v6;
    uint64_t v21 = AssociatedConformanceWitness;
    uint64_t v12 = (int8x16_t *)type metadata accessor for ReconciliationID();
    sub_24D95FD44(v12, (uint64_t)v10);
    uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)v11 + 216);
    swift_retain();
    v13(v10, v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v15);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B6034(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = a1;
  uint64_t v17 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v6 = swift_getAssociatedConformanceWitness();
  uint64_t v18 = AssociatedTypeWitness;
  uint64_t v19 = v4;
  uint64_t v20 = AssociatedConformanceWitness;
  uint64_t v21 = v6;
  uint64_t v15 = type metadata accessor for ReconciliationID();
  uint64_t v7 = *(void *)(v15 - 8);
  uint64_t result = MEMORY[0x270FA5388](v15);
  uint64_t v10 = (char *)&v14 - v9;
  uint64_t v11 = *(void *)(v2 + 24);
  if (v11)
  {
    uint64_t v18 = v4;
    uint64_t v19 = AssociatedTypeWitness;
    uint64_t v20 = v6;
    uint64_t v21 = AssociatedConformanceWitness;
    uint64_t v12 = (int8x16_t *)type metadata accessor for ReconciliationID();
    sub_24D95FD44(v12, (uint64_t)v10);
    uint64_t v13 = *(void (**)(char *, uint64_t))(*(void *)v11 + 208);
    swift_retain();
    v13(v10, v17);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v15);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B626C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v32 = v3;
  uint64_t v33 = AssociatedTypeWitness;
  uint64_t v35 = AssociatedTypeWitness;
  uint64_t v36 = v3;
  uint64_t v30 = swift_getAssociatedConformanceWitness();
  uint64_t v31 = AssociatedConformanceWitness;
  uint64_t v37 = AssociatedConformanceWitness;
  uint64_t v38 = v30;
  uint64_t v5 = (int8x16_t *)type metadata accessor for ReconciliationID();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = sub_24DCCA3F8();
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v27 - v8;
  uint64_t v10 = swift_getTupleTypeMetadata2();
  uint64_t v11 = MEMORY[0x270FA5388](v10);
  uint64_t v13 = (char *)&v27 - v12;
  uint64_t v29 = v5[-1].i64[1];
  uint64_t result = MEMORY[0x270FA5388](v11);
  uint64_t v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void *)(v1 + 24);
  if (v17)
  {
    uint64_t v18 = *(void (**)(uint64_t))(*(void *)v17 + 224);
    uint64_t v19 = swift_retain();
    uint64_t v20 = v39;
    v18(v19);
    uint64_t result = swift_release();
    if (!v20)
    {
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(TupleTypeMetadata2 - 8) + 48))(v9, 1, TupleTypeMetadata2) == 1)
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v9, v28);
        uint64_t v35 = v32;
        uint64_t v36 = v33;
        uint64_t v37 = v30;
        uint64_t v38 = v31;
        type metadata accessor for ReconciliationID();
        uint64_t v21 = swift_getTupleTypeMetadata2();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v34, 1, 1, v21);
      }
      else
      {
        LODWORD(v39) = v9[*(int *)(TupleTypeMetadata2 + 48)];
        uint64_t v28 = *(int *)(v10 + 48);
        uint64_t v22 = v29;
        uint64_t v23 = *(void (**)(char *, char *, int8x16_t *))(v29 + 32);
        v23(v13, v9, v5);
        v13[v28] = v39;
        LODWORD(v39) = v13[*(int *)(v10 + 48)];
        v23(v16, v13, v5);
        uint64_t v35 = v32;
        uint64_t v36 = v33;
        uint64_t v37 = v30;
        uint64_t v38 = v31;
        type metadata accessor for ReconciliationID();
        uint64_t v24 = swift_getTupleTypeMetadata2();
        uint64_t v25 = *(int *)(v24 + 48);
        uint64_t v26 = v34;
        sub_24D95FD44(v5, v34);
        (*(void (**)(char *, int8x16_t *))(v22 + 8))(v16, v5);
        *(unsigned char *)(v26 + v25) = v39;
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v26, 0, 1, v24);
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_24D5B6748()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 232);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

void sub_24D5B67BC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 240);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24D5B6830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v29 = a1;
  uint64_t v6 = (void *)*v3;
  uint64_t v7 = sub_24DCCA758();
  uint64_t v30 = *(void *)(v7 - 8);
  MEMORY[0x270FA5388](v7);
  uint64_t v9 = (char *)&v23 - v8;
  uint64_t v10 = v6[69];
  uint64_t v11 = v6[71];
  uint64_t v12 = v6[72];
  uint64_t v26 = v6[70];
  uint64_t v27 = v10;
  uint64_t v31 = v10;
  uint64_t v32 = v26;
  uint64_t v24 = v12;
  uint64_t v25 = v11;
  uint64_t v33 = v11;
  uint64_t v34 = v12;
  uint64_t v28 = type metadata accessor for ReconciliationMutation();
  uint64_t v13 = sub_24DCCA8B8();
  uint64_t v23 = *(void *)(v13 - 8);
  uint64_t result = MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)&v23 - v15;
  uint64_t v17 = v3[3];
  if (v17)
  {
    swift_retain();
    MEMORY[0x253327B80](a2, a3);
    uint64_t v18 = (void *)swift_allocObject();
    uint64_t v19 = v26;
    v18[2] = v27;
    void v18[3] = v19;
    uint64_t v20 = v25;
    v18[4] = a2;
    v18[5] = v20;
    v18[6] = v24;
    v18[7] = a3;
    swift_getWitnessTable();
    sub_24DCCAA48();
    swift_release();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v9, v7);
    uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(*(void *)v17 + 520);
    uint64_t WitnessTable = swift_getWitnessTable();
    v21(v16, v13, WitnessTable);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v16, v13);
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B6B4C(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v5 = (void *)*v3;
  uint64_t v6 = v3[3];
  if (v6)
  {
    uint64_t v8 = v5;
    uint64_t v9 = a3 & 1;
    uint64_t v10 = *(uint64_t (**)(BOOL, uint64_t, uint64_t))(*(void *)v6 + 384);
    BOOL v11 = (result & 1) == 0;
    swift_retain();
    uint64_t v12 = v10(v11, a2, v9);
    char v14 = v13;
    uint64_t v15 = swift_release();
    if (!v4)
    {
      uint64_t v25 = v24;
      v24[1] = v14 & 1;
      uint64_t v26 = v12;
      MEMORY[0x270FA5388](v15);
      uint64_t v16 = v8[70];
      v23[2] = v8[69];
      v23[3] = v16;
      uint64_t v17 = v8[71];
      uint64_t v18 = v8[72];
      v23[4] = v17;
      v23[5] = v18;
      swift_getAssociatedTypeWitness();
      sub_24DCCA3F8();
      swift_getAssociatedTypeWitness();
      sub_24DCCA3F8();
      swift_getTupleTypeMetadata2();
      uint64_t v19 = sub_24DCC9D48();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v6 = sub_24D7854B0((void (*)(char *, char *))sub_24D5B75D8, (uint64_t)v23, v19, TupleTypeMetadata2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v22);
      swift_bridgeObjectRelease();
    }
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B6DA0(uint64_t result, char a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v7 = (void *)*v5;
  uint64_t v8 = v5[3];
  if (v8)
  {
    uint64_t v11 = result;
    uint64_t v12 = v7;
    uint64_t v13 = a5 & 1;
    char v14 = *(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, uint64_t))(*(void *)v8 + 392);
    BOOL v15 = (a2 & 1) == 0;
    swift_retain();
    uint64_t v16 = v14(v11, v15, a3, a4, v13);
    char v18 = v17;
    uint64_t v19 = swift_release();
    if (!v6)
    {
      uint64_t v29 = v28;
      v28[1] = v18 & 1;
      uint64_t v30 = v16;
      MEMORY[0x270FA5388](v19);
      uint64_t v20 = v12[70];
      v27[2] = v12[69];
      v27[3] = v20;
      uint64_t v21 = v12[71];
      uint64_t v22 = v12[72];
      v27[4] = v21;
      v27[5] = v22;
      swift_getAssociatedTypeWitness();
      sub_24DCCA3F8();
      swift_getAssociatedTypeWitness();
      sub_24DCCA3F8();
      swift_getTupleTypeMetadata2();
      uint64_t v23 = sub_24DCC9D48();
      TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v8 = sub_24D7854B0((void (*)(char *, char *))sub_24D5B7520, (uint64_t)v27, v23, TupleTypeMetadata2, MEMORY[0x263F8E628], WitnessTable, MEMORY[0x263F8E658], v26);
      swift_bridgeObjectRelease();
    }
    return v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B7004@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  swift_getAssociatedTypeWitness();
  uint64_t v4 = sub_24DCCA3F8();
  swift_getAssociatedTypeWitness();
  uint64_t v5 = sub_24DCCA3F8();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v7 = TupleTypeMetadata2 - 8;
  uint64_t v8 = MEMORY[0x270FA5388](TupleTypeMetadata2);
  uint64_t v30 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t v29 = a2 + *(int *)(swift_getTupleTypeMetadata2() + 48);
  uint64_t v12 = *(int *)(v7 + 56);
  uint64_t v31 = v11;
  uint64_t v13 = &v11[v12];
  uint64_t v14 = a1;
  uint64_t v27 = a1;
  uint64_t v15 = a1 + v12;
  uint64_t v24 = a1 + v12;
  uint64_t v25 = v4;
  uint64_t v16 = *(void *)(v4 - 8);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v26(v11, v14, v4);
  uint64_t v17 = *(void *)(v5 - 8);
  char v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v13, v15, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v28, v13, v5);
  uint64_t v19 = *(int *)(v7 + 56);
  uint64_t v20 = v30;
  uint64_t v21 = &v30[v19];
  uint64_t v22 = v25;
  v26(v30, v27, v25);
  v18(v21, v24, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v16 + 32))(v29, v20, v22);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v5);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v31, v22);
}

void sub_24D5B72CC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (v1)
  {
    uint64_t v2 = *(void (**)(uint64_t))(*(void *)v1 + 304);
    uint64_t v3 = swift_retain();
    v2(v3);
    swift_release();
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_24D5B7348(uint64_t result, char a2)
{
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 & 1;
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 368);
    swift_retain();
    uint64_t v8 = v7(v5, v6);
    swift_release();
    if (v3) {
      return v9;
    }
    else {
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B73E8(uint64_t result, char a2)
{
  uint64_t v4 = *(void *)(v2 + 24);
  if (v4)
  {
    uint64_t v5 = result;
    uint64_t v6 = a2 & 1;
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 440);
    swift_retain();
    uint64_t v8 = v7(v5, v6);
    swift_release();
    if (v3) {
      return v9;
    }
    else {
      return v8;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_24D5B7488()
{
  return swift_release();
}

uint64_t sub_24D5B7490()
{
  uint64_t v0 = sub_24D47C1F4();
  swift_release();
  return v0;
}

uint64_t sub_24D5B74C0()
{
  sub_24D47C1F4();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SwappedReconciliationTable()
{
  return swift_getGenericMetadata();
}

uint64_t sub_24D5B7520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D5B7004(a1, a2);
}

uint64_t sub_24D5B7544()
{
  return swift_deallocObject();
}

uint64_t sub_24D5B7554@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (void *)type metadata accessor for ReconciliationMutation();
  return sub_24D4E26F8(v2, a1);
}

uint64_t sub_24D5B75B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D5B567C(a1, v2[2], v2[3], v2[4], v2[5], a2);
}

uint64_t sub_24D5B75D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_24D5B7520(a1, a2);
}

uint64_t sub_24D5B75F0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
  MEMORY[0x270FA5388](v6 - 8);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void (**)(char *, void *))(a1 + 32);
  if (a2)
  {
    sub_24DCC89E8();
    uint64_t v10 = sub_24DCC8A58();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 0, 1, v10);
  }
  else
  {
    uint64_t v11 = sub_24DCC8A58();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v8, 1, 1, v11);
  }
  swift_retain();
  id v12 = a3;
  v9(v8, a3);
  swift_release();

  return sub_24D415F74((uint64_t)v8, (uint64_t *)&unk_26B199050);
}

unint64_t sub_24D5B77E8()
{
  sub_24DCCA728();
  swift_bridgeObjectRelease();
  id v1 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_itemIdentifier));
  sub_24D3D79D4();
  sub_24DCC9968();

  swift_bridgeObjectRelease();
  sub_24DCC9968();
  id v2 = objc_retain(*(id *)(v0
                         + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor));
  id v3 = objc_msgSend(v2, sel_description);
  sub_24DCC97E8();

  sub_24DCC9968();
  swift_bridgeObjectRelease();
  return 0xD000000000000014;
}

double sub_24D5B78F4(uint64_t a1, char a2)
{
  id v4 = objc_msgSend(self, sel_defaultStore);
  if (objc_msgSend(v4, sel_hasUpcallExecutionTimeLimits)) {
    goto LABEL_5;
  }
  if (qword_26986A750 != -1) {
    swift_once();
  }
  if (byte_26986BEB0)
  {
LABEL_5:
    objc_msgSend(v4, sel_upcallExecutionTimeLimitBase);
    double v6 = v5;
    if (a2)
    {
    }
    else
    {
      objc_msgSend(v4, sel_upcallExecutionTimeLimitPerKiloByte);
      double v8 = v7;

      return v6 + (double)a1 / 1000.0 * v8;
    }
  }
  else
  {

    return -1.0;
  }
  return v6;
}

id sub_24D5B7A34()
{
  return sub_24D5D2888(0, type metadata accessor for FPFileTreeLifetimeExtender);
}

uint64_t type metadata accessor for FPFileTreeLifetimeExtender()
{
  return self;
}

id sub_24D5B7C08(uint64_t a1)
{
  return sub_24D5D2888(a1, type metadata accessor for FPXPCNonSanitizingErrorProxy);
}

uint64_t type metadata accessor for FPXPCNonSanitizingErrorProxy()
{
  return self;
}

NSObject *sub_24D5B7C44()
{
  uint64_t result = FPCreateWorkloop("com.apple.fssync.fpfiletree");
  qword_26B1A2210 = (uint64_t)result;
  return result;
}

uint64_t sub_24D5B7C74()
{
  uint64_t v0 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B196B20);
  uint64_t v1 = MEMORY[0x270FA5388](v0 - 8);
  id v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v1);
  double v5 = (char *)v19 - v4;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v7 = objc_msgSend(Strong, sel_provider);

  if (v7)
  {
    id v8 = objc_msgSend(v7, sel_bundleVersion);

    uint64_t v9 = sub_24DCC97E8();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v9 = 0x6E776F6E6B6E753CLL;
    unint64_t v11 = 0xE90000000000003ELL;
  }
  id v12 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v13 = objc_msgSend(v12, sel_provider);

  if (v13)
  {
    id v14 = objc_msgSend(v13, sel_descriptor);

    id v15 = objc_msgSend(v14, sel_extensionUUID);
    if (v15)
    {
      sub_24DCC8D48();

      uint64_t v16 = sub_24DCC8D88();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v3, 0, 1, v16);
    }
    else
    {
      uint64_t v16 = sub_24DCC8D88();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v3, 1, 1, v16);
    }
    sub_24D3F0BA0((uint64_t)v3, (uint64_t)v5, (uint64_t *)&unk_26B196B20);
    sub_24DCC8D88();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v5, 1, v16) == 1)
    {
      sub_24D415F74((uint64_t)v5, (uint64_t *)&unk_26B196B20);
    }
    else
    {
      sub_24DCC8D18();
      (*(void (**)(char *, uint64_t))(v17 + 8))(v5, v16);
    }
  }
  v19[0] = v9;
  v19[1] = v11;
  sub_24DCC9968();
  sub_24DCC9968();
  swift_bridgeObjectRelease();
  sub_24DCC9968();
  return v19[0];
}

id sub_24D5B7F8C()
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v1 = objc_msgSend(Strong, sel_provider);

  if (v1)
  {
    id v2 = objc_msgSend(v1, sel_descriptor);

    id v1 = objc_msgSend(v2, sel_appliesChangesAtomically);
  }
  return v1;
}

uint64_t sub_24D5B8010()
{
  if (*(unsigned char *)(v0 + 272)) {
    return 1;
  }
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  unsigned int v3 = objc_msgSend(Strong, sel_isConnectedToAppExtension);

  if (!v3) {
    return 0;
  }
  uint64_t v4 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v1 = objc_msgSend(v4, sel_provider);

  if (v1)
  {
    id v5 = objc_msgSend(v1, sel_asAppExtensionBackedProvider);

    id v6 = objc_msgSend(v5, sel_descriptor);
    id v1 = objc_msgSend(v6, sel_wantsFlattenedPackages);
  }
  return (uint64_t)v1;
}

void *sub_24D5B80FC()
{
  uint64_t v1 = v0;
  id v2 = *(void **)(v0 + 280);
  unsigned int v3 = v2;
  if (v2 == (void *)1)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v1 + 216);
    if (v4)
    {
      unsigned int v3 = (void *)v4();
      if (v3)
      {
        uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
        id v6 = objc_msgSend(Strong, sel_providerDomainID);

        id v7 = (void *)sub_24D4F0070();
        uint64_t v8 = swift_allocObject();
        *(void *)(v8 + 16) = v7;
        v14[4] = sub_24D5DC17C;
        v14[5] = v8;
        v14[0] = MEMORY[0x263EF8330];
        v14[1] = 1107296256;
        v14[2] = sub_24DC3390C;
        v14[3] = &block_descriptor_581;
        uint64_t v9 = _Block_copy(v14);
        id v10 = v7;
        swift_release();
        objc_msgSend(v3, sel_setModifyDecoratedPayloadHook_forCategory_, v9, 1);
        _Block_release(v9);
      }
    }
    else
    {
      unsigned int v3 = 0;
    }
    unint64_t v11 = *(void **)(v1 + 280);
    *(void *)(v1 + 280) = v3;
    id v12 = v3;
    sub_24D5D6F8C(v11);
  }
  sub_24D5DC16C(v2);
  return v3;
}

void sub_24D5B8274(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (sub_24DBA5124(a4))
  {
    id v6 = (void *)sub_24DCC97B8();
    objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v6, sub_24DCCAEF8());

    swift_unknownObjectRelease();
    if (a2)
    {
      id v7 = a2;
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B197F30);
      sub_24D3FB6F8(0, (unint64_t *)&qword_26B1940A0);
      if (swift_dynamicCast())
      {
        id v8 = objc_msgSend(v19, sel_fp_protectionClassBehindError);
        if (v8)
        {
          uint64_t v9 = v8;
          sub_24DCC97E8();
          id v10 = (void *)sub_24DCC97B8();
          swift_bridgeObjectRelease();
          objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v10, sub_24DCCAEF8());

          swift_unknownObjectRelease();
        }
        if (!os_variant_has_internal_content()) {
          goto LABEL_19;
        }
        id v11 = objc_msgSend(v19, sel_domain);
        uint64_t v12 = sub_24DCC97E8();
        uint64_t v14 = v13;

        if (v12 == sub_24DCC97E8() && v14 == v15)
        {
          swift_bridgeObjectRelease_n();
        }
        else
        {
          char v16 = sub_24DCCAE28();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v16 & 1) == 0)
          {
LABEL_19:

            return;
          }
        }
        if ((uint64_t)objc_msgSend(v19, sel_code) >= 4096 && (uint64_t)objc_msgSend(v19, sel_code) <= 4224)
        {
          id v17 = objc_msgSend(self, sel_sharedInstance);
          id v18 = objc_msgSend(v17, sel_crashReporterKey);

          if (!v18)
          {
            sub_24DCC97E8();
            id v18 = (id)sub_24DCC97B8();
            swift_bridgeObjectRelease();
          }
          objc_msgSend(a3, sel___swift_setObject_forKeyedSubscript_, v18, sub_24DCCAEF8());

          swift_unknownObjectRelease();
        }
        goto LABEL_19;
      }
    }
  }
  else
  {
    objc_msgSend(a3, sel_removeAllObjects);
  }
}

uint64_t sub_24D5B85CC()
{
  uint64_t v0 = type metadata accessor for FileProviderPageToken();

  return sub_24DC8B11C(v0);
}

fp_task_tracker *sub_24D5B85F8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for TaskTracker();
  uint64_t v9 = swift_allocObject();
  swift_retain();
  uint64_t result = fp_task_tracker_create("fpfiletree");
  if (!result)
  {
    __break(1u);
    return result;
  }
  uint64_t v46 = a2;
  *(_OWORD *)(v4 + 232) = 0u;
  uint64_t v11 = MEMORY[0x263F8EE80];
  *(void *)(v9 + 16) = result;
  *(void *)(v4 + 168) = v9;
  *(void *)(v4 + 176) = v11;
  *(void *)(v4 + 184) = v11;
  *(unsigned char *)(v4 + 192) = 0;
  *(void *)(v4 + 200) = 0;
  *(unsigned char *)(v4 + 208) = 0;
  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 257) = 0u;
  *(void *)(v4 + 280) = 1;
  *(void *)(v4 + 288) = 0;
  *(void *)(v4 + 296) = 0;
  *(void *)(v4 + 304) = 0;
  *(void *)(v4 + 312) = 1;
  if (qword_26B193428 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_26B1A2350;
  uint64_t v13 = *(void **)algn_26B1A2358;
  *(void *)(v4 + 320) = qword_26B1A2350;
  *(void *)(v4 + 328) = v13;
  swift_unknownObjectUnownedInit();
  uint64_t v14 = qword_26B192568;
  id v15 = v12;
  id v16 = v13;
  if (v14 != -1) {
    swift_once();
  }
  id v17 = (void *)qword_26B1A2210;
  *(void *)(v4 + 160) = qword_26B1A2210;
  *(void *)(v4 + 216) = a3;
  *(void *)(v4 + 224) = a4;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v19 = v17;
  sub_24D3EBEF0(a3);
  id v20 = objc_msgSend(Strong, sel_provider);

  uint64_t v47 = a3;
  if (!v20)
  {
    swift_release();
    goto LABEL_11;
  }
  id v21 = objc_msgSend(v20, sel_descriptor);

  swift_release();
  if (!v21)
  {
LABEL_11:
    char v25 = 1;
    uint64_t v26 = sub_24D5D419C(0x64616F6C6E776F64, 0xE800000000000000, 0, 1);
    uint64_t v27 = sub_24D5D419C(0x64616F6C7075, 0xE600000000000000, 0, 1);
    id v21 = 0;
    id v28 = 0;
    goto LABEL_19;
  }
  id v22 = objc_msgSend(v21, sel_downloadPipelineDepth);
  uint64_t v23 = v22;
  if (v22)
  {
    id v24 = objc_msgSend(v22, sel_integerValue);
  }
  else
  {
    id v24 = 0;
  }
  uint64_t v26 = sub_24D5D419C(0x64616F6C6E776F64, 0xE800000000000000, (uint64_t)v24, v23 == 0);
  id v29 = objc_msgSend(v21, sel_uploadPipelineDepth);
  uint64_t v30 = v29;
  if (v29)
  {
    id v31 = objc_msgSend(v29, sel_integerValue);
  }
  else
  {
    id v31 = 0;
  }
  uint64_t v27 = sub_24D5D419C(0x64616F6C7075, 0xE600000000000000, (uint64_t)v31, v30 == 0);
  id v32 = objc_msgSend(v21, sel_metadataOnlyUploadPipelineDepth);
  if (v32)
  {
    uint64_t v33 = v32;
    id v28 = objc_msgSend(v32, sel_integerValue);

    char v25 = 0;
  }
  else
  {
    id v28 = 0;
    char v25 = 1;
  }
LABEL_19:
  uint64_t v34 = sub_24D5D419C(0xD000000000000012, 0x800000024DCFFEE0, (uint64_t)v28, v25);
  uint64_t v35 = v34;
  if (!v27)
  {
    type metadata accessor for JobLimit();
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = xmmword_24DCD5EA0;
    *(_OWORD *)(v36 + 32) = xmmword_24DCD5EB0;
    if (v35) {
      goto LABEL_21;
    }
LABEL_23:
    type metadata accessor for JobLimit();
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_24DCD5EA0;
    *(_OWORD *)(v37 + 32) = xmmword_24DCD5EB0;
    goto LABEL_24;
  }
  uint64_t v36 = (uint64_t)v27;
  if (!v34) {
    goto LABEL_23;
  }
LABEL_21:
  uint64_t v37 = (uint64_t)v35;
LABEL_24:
  uint64_t v48 = a1;
  uint64_t v45 = v21;
  if (v26)
  {
    uint64_t v38 = (uint64_t)v26;
  }
  else
  {
    type metadata accessor for JobLimit();
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = xmmword_24DCD5EC0;
    *(_OWORD *)(v38 + 32) = xmmword_24DCD5ED0;
  }
  uint64_t v39 = self;
  swift_retain();
  swift_retain();
  swift_retain();
  id v40 = objc_msgSend(v39, sel_defaultStore);
  uint64_t v41 = (int)objc_msgSend(v40, sel_softConcurrentOperationLimit);
  signed int v42 = objc_msgSend(v40, sel_hardConcurrentOperationLimit);

  type metadata accessor for JobLimit();
  uint64_t v43 = (void *)swift_allocObject();
  v43[2] = 0;
  v43[3] = v41;
  v43[4] = v41;
  v43[5] = v42;
  uint64_t v44 = sub_24DC339A0(v46, (uint64_t)v43, v36, v37, v38);
  sub_24D43DD74(v47);
  swift_release();
  swift_release();
  swift_release();

  return (fp_task_tracker *)v44;
}

void sub_24D5B8AF4(void *a1)
{
  uint64_t v3 = sub_24DCC8F78();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x270FA5388](v3);
  id v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    id v16 = a1;
    id v7 = objc_msgSend(v16, sel_extendedAttributes);
    if (v7)
    {
      id v8 = v7;
      uint64_t v9 = sub_24DCC9578();

      swift_retain();
      sub_24D5D4678(v9, v1);
      swift_bridgeObjectRelease();
      swift_release();
      id v10 = (void *)sub_24DCC9558();
      swift_release();
      objc_msgSend(v16, sel_setExtendedAttributes_, v10);
    }
    if (objc_msgSend(v16, sel_isFlattenedPackage))
    {
      id v11 = objc_msgSend(v16, sel_filename);
      if (v11)
      {
        uint64_t v12 = v11;
        id v13 = objc_msgSend(v11, sel_stringByDeletingPathExtension);

        if (!v13)
        {
          sub_24DCC97E8();
          id v13 = (id)sub_24DCC97B8();
          swift_bridgeObjectRelease();
        }
        objc_msgSend(v16, sel_setFilename_, v13);

        sub_24DCC8F28();
        uint64_t v14 = (void *)sub_24DCC8EC8();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        objc_msgSend(v16, sel_setContentType_, v14);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      id v15 = v16;
    }
  }
}

void sub_24D5B8D7C(void *a1, void *a2)
{
  uint64_t v4 = sub_24DCC9078();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)aBlock - v9;
  id v11 = objc_msgSend(a1, sel_domainVersion);
  LOBYTE(a2) = sub_24D5FC2A4(v11, a2);

  if (a2)
  {
    id v12 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    id v13 = sub_24DCC9068();
    os_log_type_t v14 = sub_24DCCA108();
    if (os_log_type_enabled(v13, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl(&dword_24D3D0000, v13, v14, "found new domain version, setting new domainUserInfo", v15, 2u);
      MEMORY[0x25332B030](v15, -1, -1);
    }

    id v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v10, v4);
    uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    id v18 = objc_msgSend(Strong, sel_provider);

    if (v18)
    {
      id v19 = objc_msgSend(a1, sel_domainUserInfo);
      if (v19)
      {
        sub_24DCC9578();

        id v19 = (id)sub_24DCC9558();
        swift_bridgeObjectRelease();
      }
      id v20 = (void *)swift_unknownObjectUnownedLoadStrong();
      id v21 = objc_msgSend(v20, sel_identifier);

      if (v21)
      {
        uint64_t v22 = swift_allocObject();
        *(void *)(v22 + 16) = v18;
        aBlock[4] = sub_24D5DC164;
        aBlock[5] = v22;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        uint64_t aBlock[2] = sub_24D6024BC;
        aBlock[3] = &block_descriptor_575;
        uint64_t v23 = _Block_copy(aBlock);
        id v24 = v18;
        swift_release();
        objc_msgSend(v24, sel_setDomainUserInfo_forDomainIdentifier_completionHandler_, v19, v21, v23);
        _Block_release(v23);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {
      id v25 = (id)fpfs_current_or_default_log();
      sub_24DCC9088();
      uint64_t v26 = sub_24DCC9068();
      os_log_type_t v27 = sub_24DCCA128();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v28 = 0;
        _os_log_impl(&dword_24D3D0000, v26, v27, "Error setting new domainUserInfo, provider was nil", v28, 2u);
        MEMORY[0x25332B030](v28, -1, -1);
      }

      v16(v8, v4);
    }
  }
}

void sub_24D5B9160(void *a1, void *a2)
{
  uint64_t v4 = sub_24DCC9078();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = MEMORY[0x270FA5388](v4);
  id v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v6);
  id v10 = (char *)&v29 - v9;
  if (a1)
  {
    id v11 = a1;
    id v12 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    id v13 = a1;
    id v14 = a1;
    id v15 = sub_24DCC9068();
    os_log_type_t v16 = sub_24DCCA128();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      id v31 = (id)v4;
      id v19 = (void *)v18;
      uint64_t v30 = v5;
      *(_DWORD *)id v17 = 138412290;
      id v20 = (void *)sub_24DCC8818();
      id v21 = objc_msgSend(v20, sel_fp_prettyDescription);

      id v32 = v21;
      uint64_t v5 = v30;
      sub_24DCCA428();
      *id v19 = v21;

      _os_log_impl(&dword_24D3D0000, v15, v16, "Error setting domain user info: %@", v17, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      uint64_t v22 = v19;
      uint64_t v4 = (uint64_t)v31;
      MEMORY[0x25332B030](v22, -1, -1);
      MEMORY[0x25332B030](v17, -1, -1);
    }
    else
    {
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
  }
  else
  {
    id v23 = objc_msgSend(a2, sel_server);
    if (v23)
    {
      id v31 = v23;
      objc_msgSend(v23, sel_signalProviderChangesWithLowPriority);
      id v24 = v31;
    }
    else
    {
      id v25 = (id)fpfs_current_or_default_log();
      sub_24DCC9088();
      uint64_t v26 = sub_24DCC9068();
      os_log_type_t v27 = sub_24DCCA128();
      if (os_log_type_enabled(v26, v27))
      {
        id v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v28 = 0;
        _os_log_impl(&dword_24D3D0000, v26, v27, "Error signaling change after setting new domainUserInfo, server was nil", v28, 2u);
        MEMORY[0x25332B030](v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
}

void sub_24D5B94C8(void *a1, void *a2)
{
  uint64_t v5 = sub_24DCC9078();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x270FA5388](v5);
  id v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_24DCC93F8();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x270FA5388](v9);
  id v12 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v13 = (void *)v2[20];
  *id v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, *MEMORY[0x263F8F0E0], v9);
  id v14 = v13;
  LOBYTE(v13) = sub_24DCC9418();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (!a1) {
    return;
  }
  id v15 = a1;
  sub_24D5B8D7C(v15, a2);
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v17 = objc_msgSend(Strong, sel_provider);

  if (!v17
    || (id v18 = objc_msgSend(v17, sel_descriptor),
        v17,
        unsigned __int8 v19 = objc_msgSend(v18, sel_appliesChangesAtomically),
        v18,
        (v19 & 1) == 0))
  {

    return;
  }
  uint64_t v20 = v2[39];
  if (v20 == 1)
  {
LABEL_12:
    unsigned int v31 = objc_msgSend(v15, sel_extensionPid);
    id v32 = objc_msgSend(v15, sel_sequenceNumber);
    id v33 = objc_msgSend(v15, sel_callDescription);
    if (v33)
    {
      uint64_t v34 = v33;
      uint64_t v28 = sub_24DCC97E8();
      uint64_t v30 = v35;
    }
    else
    {

      uint64_t v28 = 0;
      uint64_t v30 = 0;
    }
    uint64_t v36 = v2[36];
    uint64_t v37 = v2[37];
    uint64_t v38 = v2[38];
    uint64_t v39 = v2[39];
    v2[36] = v31;
    v2[37] = v32;
    goto LABEL_16;
  }
  uint64_t v22 = v2[36];
  uint64_t v21 = v2[37];
  uint64_t v23 = v2[38];
  swift_bridgeObjectRetain();
  if (objc_msgSend(v15, sel_extensionPid) != v22)
  {
    sub_24D5D6F9C(v22, v21, v23, v20);
    goto LABEL_12;
  }
  uint64_t v66 = v23;
  if (v21 < (uint64_t)objc_msgSend(v15, sel_sequenceNumber))
  {
    sub_24D5D6F9C(v22, v21, v66, v20);
    unsigned int v24 = objc_msgSend(v15, sel_extensionPid);
    id v25 = objc_msgSend(v15, sel_sequenceNumber);
    id v26 = objc_msgSend(v15, sel_callDescription);
    if (v26)
    {
      os_log_type_t v27 = v26;
      uint64_t v28 = sub_24DCC97E8();
      uint64_t v30 = v29;
    }
    else
    {

      uint64_t v28 = 0;
      uint64_t v30 = 0;
    }
    uint64_t v36 = v2[36];
    uint64_t v37 = v2[37];
    uint64_t v38 = v2[38];
    uint64_t v39 = v2[39];
    v2[36] = v24;
    v2[37] = v25;
LABEL_16:
    v2[38] = v28;
    v2[39] = v30;
    sub_24D5D6F9C(v36, v37, v38, v39);
    return;
  }
  id v40 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  id v41 = v15;
  uint64_t v42 = v66;
  sub_24D5DC150(v22, v21, v66, v20);
  id v43 = v41;
  sub_24D5DC150(v22, v21, v42, v20);
  id v44 = v43;
  sub_24D5DC150(v22, v21, v42, v20);
  uint64_t v45 = sub_24DCC9068();
  int v46 = sub_24DCCA138();
  if (os_log_type_enabled(v45, (os_log_type_t)v46))
  {
    int v63 = v46;
    os_log_t v64 = v45;
    uint64_t v47 = swift_slowAlloc();
    uint64_t v62 = swift_slowAlloc();
    uint64_t v68 = v62;
    *(_DWORD *)uint64_t v47 = 134219266;
    id v65 = (id)(v47 + 4);
    id v67 = objc_msgSend(v44, sel_sequenceNumber);
    sub_24DCCA428();
    *(_WORD *)(v47 + 12) = 2048;
    id v67 = (id)v21;
    sub_24DCCA428();
    *(_WORD *)(v47 + 22) = 2048;
    sub_24D5D6F9C(v22, v21, v42, v20);
    id v67 = (id)v21;
    sub_24DCCA428();
    sub_24D5D6F9C(v22, v21, v42, v20);
    *(_WORD *)(v47 + 32) = 2082;
    if (v20) {
      uint64_t v48 = v42;
    }
    else {
      uint64_t v48 = 0x6E776F6E6B6E753CLL;
    }
    id v65 = v44;
    if (v20) {
      unint64_t v49 = v20;
    }
    else {
      unint64_t v49 = 0xE90000000000003ELL;
    }
    uint64_t v60 = v48;
    uint64_t v61 = v47 + 34;
    swift_bridgeObjectRetain();
    id v67 = (id)sub_24D418FB4(v60, v49, &v68);
    sub_24DCCA428();
    swift_bridgeObjectRelease();
    sub_24D5D6F9C(v22, v21, v42, v20);
    sub_24D5D6F9C(v22, v21, v42, v20);
    *(_WORD *)(v47 + 42) = 2048;
    id v50 = objc_msgSend(v65, sel_sequenceNumber);

    id v67 = v50;
    id v51 = v65;
    sub_24DCCA428();

    *(_WORD *)(v47 + 52) = 2082;
    id v52 = objc_msgSend(v51, sel_callDescription);
    if (v52)
    {
      uint64_t v53 = v52;
      uint64_t v54 = sub_24DCC97E8();
      unint64_t v56 = v55;
    }
    else
    {
      uint64_t v54 = 0x6E776F6E6B6E753CLL;
      unint64_t v56 = 0xE90000000000003ELL;
    }
    id v67 = (id)sub_24D418FB4(v54, v56, &v68);
    sub_24DCCA428();

    swift_bridgeObjectRelease();
    os_log_t v57 = v64;
    _os_log_impl(&dword_24D3D0000, v64, (os_log_type_t)v63, "sequence number received out of order: %ld <= %ld\n    %ld: %{public}s\n    %ld: %{public}s", (uint8_t *)v47, 0x3Eu);
    uint64_t v58 = v62;
    swift_arrayDestroy();
    MEMORY[0x25332B030](v58, -1, -1);
    MEMORY[0x25332B030](v47, -1, -1);
  }
  else
  {

    sub_24D5D6F9C(v22, v21, v42, v20);
    sub_24D5D6F9C(v22, v21, v42, v20);

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_24D5B9C14(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v11 = objc_msgSend(Strong, sel_provider);

  if (!v11) {
    goto LABEL_13;
  }
  id v12 = objc_msgSend(v11, sel_identifier);

  id v13 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v14 = objc_msgSend(v13, sel_identifier);

  if (!v14)
  {
    __break(1u);
LABEL_13:
    sub_24DCCA978();
    __break(1u);
    return;
  }
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v12, v14, a2);

  id v16 = (id)fpfs_current_log();
  id v17 = (void *)swift_unknownObjectUnownedLoadStrong();
  unsigned __int8 v18 = objc_msgSend(v17, sel_userEnabled);

  if (v18)
  {
    unsigned __int8 v19 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v20 = objc_msgSend(v19, sel_session);

    id v21 = objc_msgSend(self, sel_defaultStore);
    if (objc_msgSend(v21, sel_hasUpcallExecutionTimeLimits)) {
      goto LABEL_8;
    }
    if (qword_26986A750 != -1) {
      swift_once();
    }
    double v22 = -1.0;
    if (byte_26986BEB0 == 1)
    {
LABEL_8:
      objc_msgSend(v21, sel_upcallExecutionTimeLimitBase);
      double v22 = v23;
    }

    id v24 = objc_msgSend(v20, sel_newFileProviderProxyWithTimeout_pid_, 0, v22);
    swift_unknownObjectRelease();
  }
  else
  {
    id v24 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
  }
  id v25 = objc_msgSend(self, sel_requestForSelf);
  id v26 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v27 = objc_msgSend(v26, sel_session);

  id v28 = objc_msgSend(v25, sel_nsfpRequestForSession_isSpeculative_, v27, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v28, sel_setDomainVersion_, a3);
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a1;
  v29[3] = v16;
  v29[4] = a3;
  v29[5] = a4;
  void v29[6] = a5;
  aBlock[4] = sub_24D5DBF5C;
  aBlock[5] = v29;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D5BA278;
  aBlock[3] = &block_descriptor_547;
  uint64_t v30 = _Block_copy(aBlock);
  swift_retain();
  id v31 = v16;
  id v32 = a3;
  swift_retain();
  swift_release();
  objc_msgSend(v24, sel_itemForItemID_request_completionHandler_, v15, v28, v30);
  _Block_release(v30);

  swift_unknownObjectRelease();
}

uint64_t sub_24D5BA01C(void *a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8)
{
  id v16 = (void *)swift_allocObject();
  v16[2] = a4;
  v16[3] = a2;
  void v16[4] = a6;
  v16[5] = a3;
  void v16[6] = a7;
  v16[7] = a8;
  v16[8] = a1;
  swift_retain();
  id v17 = a2;
  id v18 = a6;
  id v19 = a3;
  id v20 = a1;
  swift_retain();
  sub_24D3E29E4(a5, (uint64_t)"lookupItem(by:lastKnownVersion:domainVersion:options:completion:)", 65, 2, (uint64_t)sub_24D5DBFCC, (uint64_t)v16);

  return swift_release();
}

void sub_24D5BA10C(uint64_t a1, void *a2, void *a3, void *a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7)
{
  sub_24D5B94C8(a2, a3);
  if (a4)
  {
    _s3__C4CodeOMa_1(0);
    id v10 = a4;
    sub_24D5D78EC((unint64_t *)&qword_26B194040, _s3__C4CodeOMa_1);
    char v11 = sub_24DCC86A8();

    if ((v11 & 1) == 0)
    {
      id v12 = a4;
      a5(a4, 1);

      return;
    }
    goto LABEL_8;
  }
  if (!a7)
  {
LABEL_8:
    a5(0, 0);
    return;
  }
  id v13 = a7;
  sub_24D5B8AF4(a7);
  id v14 = v13;
  a5(a7, 0);
}

void sub_24D5BA278(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7 = *(void (**)(void *, void *, void *))(a1 + 32);
  swift_retain();
  id v10 = a2;
  id v8 = a3;
  id v9 = a4;
  v7(a2, a3, a4);
  swift_release();
}

void sub_24D5BA320(void *a1, void *a2, void (*a3)(void, void, void, void), uint64_t a4)
{
  uint64_t v5 = v4;
  id v10 = objc_allocWithZone((Class)type metadata accessor for FPFileTreeLifetimeExtender());
  id v11 = a2;
  id v12 = a1;
  id v13 = sub_24D5D3F08(v12, a2, 0, 1);

  uint64_t v48 = v11;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v15 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v15, sel_registerLifetimeExtensionForObject_, v13);
  swift_unknownObjectRelease();
  id v16 = (void *)swift_unknownObjectUnownedLoadStrong();
  LODWORD(v15) = objc_msgSend(v16, sel_userEnabled);

  if (v15)
  {
    uint64_t v45 = v5;
    uint64_t v46 = a4;
    id v47 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F05460]), sel_init);
    id v17 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v18 = objc_msgSend(v17, sel_provider);

    if (v18)
    {
      id v19 = objc_msgSend(v18, sel_identifier);

      id v20 = (void *)swift_unknownObjectUnownedLoadStrong();
      id v21 = objc_msgSend(v20, sel_identifier);

      if (v21)
      {
        id v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v19, v21, v12);

        objc_msgSend(v47, sel_setEnumeratedItemID_, v22);
        double v23 = (void *)swift_unknownObjectUnownedLoadStrong();
        unsigned __int8 v24 = objc_msgSend(v23, sel_userEnabled);

        if (v24)
        {
          id v25 = (void *)swift_unknownObjectUnownedLoadStrong();
          id v26 = objc_msgSend(v25, sel_session);

          id v27 = objc_msgSend(self, sel_defaultStore);
          id v28 = a3;
          if (objc_msgSend(v27, sel_hasUpcallExecutionTimeLimits)) {
            goto LABEL_9;
          }
          if (qword_26986A750 != -1) {
            swift_once();
          }
          double v29 = -1.0;
          if (byte_26986BEB0 == 1)
          {
LABEL_9:
            objc_msgSend(v27, sel_upcallExecutionTimeLimitBase);
            double v29 = v30;
          }

          id v31 = objc_msgSend(v26, sel_newFileProviderProxyWithTimeout_pid_, 0, v29);
          swift_unknownObjectRelease();
        }
        else
        {
          id v31 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
          id v28 = a3;
        }
        id v35 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()), sel_init);
        id v36 = v48;
        if (!a2) {
          id v36 = objc_msgSend(self, sel_requestForSelf);
        }
        uint64_t v37 = (void *)swift_unknownObjectUnownedLoadStrong();
        id v38 = v48;
        id v39 = objc_msgSend(v37, sel_session);

        id v40 = objc_msgSend(v36, sel_nsfpRequestForSession_isSpeculative_, v39, 0);
        swift_unknownObjectRelease();
        objc_msgSend(v40, sel_setDomainVersion_, 0);
        id v41 = (void *)swift_allocObject();
        v41[2] = v45;
        v41[3] = v13;
        v41[4] = v12;
        v41[5] = v28;
        v41[6] = v46;
        aBlock[4] = sub_24D5DBE34;
        aBlock[5] = v41;
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 1107296256;
        uint64_t aBlock[2] = sub_24D6017D4;
        aBlock[3] = &block_descriptor_569;
        uint64_t v42 = _Block_copy(aBlock);
        id v43 = v12;
        swift_retain();
        id v44 = v13;
        swift_retain();
        swift_release();
        objc_msgSend(v31, sel_fetchAndStartEnumeratingWithSettings_observer_request_completionHandler_, v47, v35, v40, v42);
        _Block_release(v42);

        swift_unknownObjectRelease();
        return;
      }
      __break(1u);
    }
    sub_24DCCA978();
    __break(1u);
    return;
  }
  uint64_t v32 = sub_24D5D4A18((void **)&protocolRef_FPXEnumerator);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v5;
  *(void *)(v33 + 24) = v13;
  swift_retain();
  id v34 = v13;
  a3(v32, v34, sub_24D5DC184, v33);

  swift_unknownObjectRelease();

  swift_release();
}

uint64_t sub_24D5BA90C(uint64_t a1, uint64_t a2)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v4 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v4, sel_unregisterLifetimeExtensionForObject_, a2);

  return swift_unknownObjectRelease();
}

void sub_24D5BA984(uint64_t a1, void *a2, uint64_t a3, char *a4, uint64_t a5, void (*a6)(uint64_t, char *, uint64_t (*)(void), void *), uint64_t a7)
{
  v38[1] = a7;
  id v39 = a6;
  uint64_t v11 = sub_24DCC8288();
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v12 = sub_24DCC82A8();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  id v15 = (char *)v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1 || a2)
  {
    uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    id v26 = objc_msgSend(Strong, sel_session);

    objc_msgSend(v26, sel_unregisterLifetimeExtensionForObject_, a4);
    swift_unknownObjectRelease();
    id v27 = &unk_26FFF26E0;
    if (a2)
    {
      id v28 = a2;
    }
    else
    {
      sub_24DCC8138();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5D78EC((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      sub_24DCC8808();
      id v28 = (void *)sub_24DCC8128();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    }
    uint64_t v44 = 0;
    unint64_t v45 = 0xE000000000000000;
    id v29 = a2;
    sub_24DCCA728();
    swift_bridgeObjectRelease();
    uint64_t v44 = 0x746172656D756E65;
    unint64_t v45 = 0xEF20726F6620726FLL;
    sub_24D3D79D4();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    id v30 = objc_msgSend(*(id *)&a4[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor], sel_pid);
    id v31 = (objc_class *)type metadata accessor for FPXPCNonSanitizingErrorProxy();
    id v32 = objc_allocWithZone(v31);
    uint64_t v33 = (void *)sub_24DCC8818();
    id v34 = (void *)sub_24DCC97B8();
    swift_bridgeObjectRelease();
    v43.receiver = v32;
    v43.super_class = v31;
    id v35 = objc_msgSendSuper2(&v43, sel_initWithConnection_protocol_orError_name_requestPid_, 0, &unk_26FFF26E0, v33, v34, v30);

    uint64_t v42 = &unk_26FFF26E0;
    uint64_t v36 = swift_dynamicCastObjCProtocolUnconditional();
    id v37 = v35;
    v39(v36, a4, nullsub_1, 0);
  }
  else
  {
    id v41 = &unk_2700043C0;
    uint64_t v16 = swift_dynamicCastObjCProtocolUnconditional();
    uint64_t v44 = 0x746172656D756E65;
    unint64_t v45 = 0xEB0000000020726FLL;
    swift_unknownObjectRetain_n();
    id v17 = &unk_26FFF26E0;
    sub_24D3D79D4();
    sub_24DCC9968();
    swift_bridgeObjectRelease();
    id v18 = objc_allocWithZone(MEMORY[0x263F05578]);
    id v19 = (void *)sub_24DCC97B8();
    swift_bridgeObjectRelease();
    id v20 = objc_msgSend(v18, sel_initWithConnection_protocol_orError_name_requestPid_, v16, v17, 0, v19, 0);

    swift_unknownObjectRelease();
    id v40 = &unk_26FFF26E0;
    uint64_t v21 = swift_dynamicCastObjCProtocolUnconditional();
    id v22 = (void *)swift_allocObject();
    v22[2] = v21;
    void v22[3] = a3;
    v22[4] = a4;
    id v23 = v20;
    swift_retain();
    unsigned __int8 v24 = a4;
    v39(v21, v24, (uint64_t (*)(void))sub_24D5DBE80, v22);
    swift_unknownObjectRelease();

    swift_release();
  }
}

uint64_t sub_24D5BAE64(void *a1, uint64_t a2, uint64_t a3)
{
  objc_msgSend(a1, sel_invalidate);
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v5 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v5, sel_unregisterLifetimeExtensionForObject_, a3);

  return swift_unknownObjectRelease();
}

uint64_t sub_24D5BAEEC(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v15 = (id)fpfs_current_log();
  if (a1)
  {
    type metadata accessor for FileProviderPageToken();
    uint64_t v16 = swift_dynamicCastClass();
    if (v16) {
      goto LABEL_5;
    }
    sub_24DCCA978();
    __break(1u);
  }
  uint64_t v17 = sub_24DCC8B68();
  unint64_t v19 = v18;
  id v26 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = sub_24DCC8B28();
  sub_24D400DCC(v17, v19);
  type metadata accessor for FileProviderPageToken();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a2;
  *(void *)(v16 + 24) = v21;
  a5 = v20;
  a4 = v26;
  id v22 = a2;
LABEL_5:
  id v23 = a2;
  id v24 = v15;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_24D5D4B68(v23, a4, a3, v15, v16, a5, a6, a3, v23, a7, a8);

  swift_release_n();
  swift_release();
  swift_release();

  return swift_release();
}

void sub_24D5BB0D4(void *a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  id v18 = (id)fpfs_adopt_log();
  uint64_t v26 = *(void *)(a6 + 24);
  id v27 = v18;
  unint64_t v19 = (void *)swift_allocObject();
  void v19[2] = a5;
  void v19[3] = a3;
  v19[4] = a4;
  v19[5] = a7;
  v19[6] = a8;
  v19[7] = a9;
  v19[8] = a10;
  v19[9] = a2;
  v19[10] = a11;
  v19[11] = a12;
  v19[12] = a6;
  aBlock[4] = sub_24D5DBEFC;
  aBlock[5] = v19;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D98F14C;
  aBlock[3] = &block_descriptor_529;
  uint64_t v20 = _Block_copy(aBlock);
  id v21 = a5;
  swift_retain();
  swift_retain();
  swift_retain();
  id v22 = a10;
  id v23 = a2;
  swift_retain();
  swift_retain();
  swift_release();
  objc_msgSend(a1, sel_enumerateItemsFromPage_suggestedPageSize_reply_, v26, 200, v20);
  _Block_release(v20);
  id v24 = (id)fpfs_adopt_log();
}

void sub_24D5BB270(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(void), uint64_t a8, void (*a9)(void *, uint64_t), uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t (*a14)(unint64_t), uint64_t a15, uint64_t a16)
{
  uint64_t v65 = a11;
  uint64_t v61 = a10;
  uint64_t v62 = a9;
  uint64_t v19 = sub_24DCC8F78();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  id v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v23 = (id)fpfs_adopt_log();
  a7();
  if (a5)
  {
    _s3__C4CodeOMa_1(0);
    uint64_t v69 = -1002;
    id v24 = a5;
    sub_24D5D78EC((unint64_t *)&qword_26B194040, _s3__C4CodeOMa_1);
    char v25 = sub_24DCC86A8();

    if (v25)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
      sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
      a5 = (void *)swift_allocError();
      *(void *)uint64_t v26 = 3;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_OWORD *)(v26 + 24) = 0u;
      *(_OWORD *)(v26 + 40) = 0u;
      *(_OWORD *)(v26 + 56) = 0u;
      *(void *)(v26 + 72) = 0;
      *(unsigned char *)(v26 + 80) = 10;
      v62(a5, 1);
    }
    else
    {
      uint64_t v49 = *(void *)(a13
                      + OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState);
      id v50 = a5;
      id v51 = sub_24D5C7D64(a5, a12, 0, v49);
      v62(v51, 1);
    }
LABEL_31:
    id v58 = (id)fpfs_adopt_log();

    return;
  }
  uint64_t v27 = v20;
  uint64_t v64 = v19;
  uint64_t v60 = a2;
  id v28 = a12;
  unint64_t v29 = swift_bridgeObjectRetain();
  unint64_t v30 = sub_24D5D31F0(v29);
  swift_bridgeObjectRelease();

  if (v30 >> 62)
  {
LABEL_25:
    swift_retain_n();
    swift_bridgeObjectRetain();
    uint64_t v31 = sub_24DCCA9C8();
    id v32 = v62;
    if (v31) {
      goto LABEL_6;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    swift_release();
LABEL_27:
    swift_release();
    char v52 = a14(v30);
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0 || (uint64_t v53 = v60) == 0)
    {
      v32(0, 0);
    }
    else
    {
      uint64_t v54 = *(void **)(a16 + 16);
      type metadata accessor for FileProviderPageToken();
      uint64_t v55 = swift_allocObject();
      *(void *)(v55 + 16) = v54;
      *(void *)(v55 + 24) = v53;
      id v56 = v53;
      id v57 = v54;
      v32((void *)v55, 0);
      swift_release();
    }
    goto LABEL_31;
  }
  uint64_t v31 = *(void *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_retain_n();
  swift_bridgeObjectRetain();
  id v32 = v62;
  if (!v31) {
    goto LABEL_26;
  }
LABEL_6:
  id v59 = v23;
  uint64_t v66 = v31;
  unint64_t v67 = v30 & 0xC000000000000001;
  int v63 = (void (**)(char *, uint64_t))(v27 + 8);
  uint64_t v33 = 4;
  id v23 = (id)MEMORY[0x263F8D320];
  while (1)
  {
    uint64_t v27 = v33 - 4;
    if (v67)
    {
      id v34 = (id)MEMORY[0x253328820](v33 - 4, v30);
      uint64_t v35 = v33 - 3;
      if (__OFADD__(v27, 1)) {
        goto LABEL_24;
      }
    }
    else
    {
      id v34 = *(id *)(v30 + 8 * v33);
      uint64_t v35 = v33 - 3;
      if (__OFADD__(v27, 1))
      {
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
    }
    id v36 = v34;
    id v37 = objc_msgSend(v36, sel_extendedAttributes);
    if (v37)
    {
      id v38 = v37;
      uint64_t v68 = v35;
      uint64_t v39 = v33;
      unint64_t v40 = v30;
      uint64_t v41 = sub_24DCC9578();

      uint64_t v42 = v22;
      uint64_t v43 = v65;
      swift_retain();
      sub_24D5D4678(v41, v43);
      swift_bridgeObjectRelease();
      id v22 = v42;
      swift_release();
      unint64_t v30 = v40;
      uint64_t v33 = v39;
      uint64_t v35 = v68;
      uint64_t v44 = (void *)sub_24DCC9558();
      swift_release();
      objc_msgSend(v36, sel_setExtendedAttributes_, v44);
    }
    if (objc_msgSend(v36, sel_isFlattenedPackage, v59)) {
      break;
    }
LABEL_19:

    if (v35 == v66)
    {
      swift_bridgeObjectRelease();
      swift_release();
      id v23 = v59;
      id v32 = v62;
      goto LABEL_27;
    }
    ++v33;
  }
  id v45 = objc_msgSend(v36, sel_filename);
  if (v45)
  {
    uint64_t v46 = v45;
    id v47 = objc_msgSend(v45, sel_stringByDeletingPathExtension);

    if (!v47)
    {
      sub_24DCC97E8();
      id v47 = (id)sub_24DCC97B8();
      swift_bridgeObjectRelease();
    }
    objc_msgSend(v36, sel_setFilename_, v47);

    sub_24DCC8F28();
    uint64_t v48 = (void *)sub_24DCC8EC8();
    (*v63)(v22, v64);
    objc_msgSend(v36, sel_setContentType_, v48);

    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_24D5BB860(void *a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  id v34 = a3;
  uint64_t v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18F680);
  MEMORY[0x270FA5388](v11 - 8);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_allocWithZone((Class)type metadata accessor for FPFileTreeLifetimeExtender());
  id v15 = a2;
  id v33 = v15;
  id v16 = a1;
  id v17 = sub_24D5D3F08(v16, a2, 0, 1);

  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v19 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v19, sel_registerLifetimeExtensionForObject_, v17);
  swift_unknownObjectRelease();
  uint64_t v20 = *(void *)(v6 + 168);
  id v32 = *(void **)(v6 + 160);
  uint64_t v21 = sub_24DCC9398();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v13, 1, 1, v21);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a4;
  *(void *)(v22 + 24) = a5;
  id v23 = (void *)swift_allocObject();
  v23[2] = v6;
  v23[3] = a2;
  id v24 = v34;
  v23[4] = v34;
  v23[5] = v16;
  void v23[6] = v17;
  v23[7] = a4;
  v23[8] = a5;
  char v25 = (void *)swift_allocObject();
  void v25[2] = sub_24D417998;
  v25[3] = v22;
  v25[4] = v20;
  id v26 = v24;
  id v27 = v17;
  swift_retain();
  swift_retain();
  swift_retain_n();
  id v28 = v16;
  id v29 = v33;
  swift_retain();
  sub_24D3FD33C(v32, (uint64_t)v13, sub_24D5DBC80, v25, (uint64_t)sub_24D5DBC64, (uint64_t)v23);

  swift_release();
  swift_release();
  swift_release();
  return sub_24D415F74((uint64_t)v13, &qword_26B18F680);
}

void sub_24D5BBAEC(uint64_t a1, void *a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  unsigned int v12 = objc_msgSend(Strong, sel_userEnabled);

  if (v12)
  {
    uint64_t v13 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v14 = objc_msgSend(v13, sel_session);

    id v15 = objc_msgSend(self, sel_defaultStore);
    if (objc_msgSend(v15, sel_hasUpcallExecutionTimeLimits)) {
      goto LABEL_6;
    }
    if (qword_26986A750 != -1) {
      swift_once();
    }
    double v16 = -1.0;
    if (byte_26986BEB0 == 1)
    {
LABEL_6:
      objc_msgSend(v15, sel_upcallExecutionTimeLimitBase);
      double v16 = v17;
    }

    id v18 = objc_msgSend(v14, sel_newFileProviderProxyWithTimeout_pid_, 0, v16);
    swift_unknownObjectRelease();
    uint64_t v40 = a7;
    if (a2) {
      goto LABEL_8;
    }
  }
  else
  {
    id v18 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
    uint64_t v40 = a7;
    if (a2)
    {
LABEL_8:
      id v19 = a2;
      goto LABEL_11;
    }
  }
  id v19 = objc_msgSend(self, sel_requestForSelf);
LABEL_11:
  uint64_t v20 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v21 = a2;
  id v22 = objc_msgSend(v20, sel_session);

  id v23 = objc_msgSend(v19, sel_nsfpRequestForSession_isSpeculative_, v22, 0);
  swift_unknownObjectRelease();
  objc_msgSend(v23, sel_setDomainVersion_, a3);
  id v24 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F05460]), sel_init);
  char v25 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v26 = objc_msgSend(v25, sel_provider);

  if (v26)
  {
    id v27 = objc_msgSend(v26, sel_identifier);

    id v28 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v29 = objc_msgSend(v28, sel_identifier);

    if (v29)
    {
      id v30 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v27, v29, a4);

      objc_msgSend(v24, sel_setEnumeratedItemID_, v30);
      id v31 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for DummyEnumeratorObserver()), sel_init);
      id v32 = (void *)swift_allocObject();
      v32[2] = a1;
      v32[3] = a5;
      void v32[4] = a6;
      v32[5] = v40;
      v32[6] = a4;
      v32[7] = v18;
      aBlock[4] = sub_24D5DBCE4;
      aBlock[5] = v32;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_24D6017D4;
      aBlock[3] = &block_descriptor_499;
      id v33 = _Block_copy(aBlock);
      id v34 = v23;
      swift_retain();
      id v35 = a5;
      swift_retain();
      id v36 = a4;
      swift_unknownObjectRetain();
      swift_release();
      objc_msgSend(v18, sel_listRemoteVersionsWithSettings_observer_request_completionHandler_, v24, v31, v34, v33);
      _Block_release(v33);
      swift_unknownObjectRelease();

      return;
    }
    __break(1u);
  }
  sub_24DCCA978();
  __break(1u);
}

uint64_t sub_24D5BBF78(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, void *a7, void *a8)
{
  uint64_t v32 = a4;
  uint64_t v13 = sub_24DCC8288();
  MEMORY[0x270FA5388](v13 - 8);
  uint64_t v14 = sub_24DCC82A8();
  MEMORY[0x270FA5388](v14);
  double v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    id v18 = a2;
    a5(a2, 1);

    uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
    id v20 = objc_msgSend(Strong, sel_session);

    objc_msgSend(v20, sel_unregisterLifetimeExtensionForObject_, v32, v31);
  }
  else
  {
    id v31 = a8;
    uint64_t v21 = v32;
    if (!a1)
    {
      uint64_t v26 = v15;
      sub_24DCC8138();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5D78EC((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      sub_24DCC8808();
      id v27 = (void *)sub_24DCC8128();
      (*(void (**)(char *, uint64_t))(v26 + 8))(v17, v14);
      id v28 = sub_24D5C7D64(v27, a7, 0, (uint64_t)objc_msgSend(v31, sel_timeoutState));

      a5(v28, 1);
      id v29 = (void *)swift_unknownObjectUnownedLoadStrong();
      id v30 = objc_msgSend(v29, sel_session);

      objc_msgSend(v30, sel_unregisterLifetimeExtensionForObject_, v21);
      return swift_unknownObjectRelease();
    }
    uint64_t v22 = swift_unknownObjectRetain();
    a5((void *)v22, 0);
    swift_unknownObjectRelease();
    id v23 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v24 = objc_msgSend(v23, sel_session);

    objc_msgSend(v24, sel_unregisterLifetimeExtensionForObject_, v21, v31);
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_24D5BC2BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, double a7, double a8)
{
  uint64_t v42 = (char *)a3;
  uint64_t v43 = a2;
  uint64_t v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18F680);
  MEMORY[0x270FA5388](v15 - 8);
  double v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v18 = (objc_class *)type metadata accessor for FPFileTreeLifetimeExtender();
  id v19 = (char *)objc_allocWithZone(v18);
  *(void *)&v19[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeoutState] = 0;
  *(void *)&v19[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_itemIdentifier] = a1;
  id v20 = self;
  id v41 = a1;
  uint64_t v21 = v19;
  id v22 = objc_msgSend(v20, sel_requestForSelf);
  *(void *)&v21[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_requestor] = v22;
  id v23 = objc_msgSend(self, sel_defaultStore);
  if (objc_msgSend(v23, sel_hasUpcallExecutionTimeLimits)) {
    goto LABEL_5;
  }
  if (qword_26986A750 != -1) {
    swift_once();
  }
  double v24 = -1.0;
  if (byte_26986BEB0 == 1)
  {
LABEL_5:
    objc_msgSend(v23, sel_upcallExecutionTimeLimitBase);
    double v24 = v25;
  }

  *(double *)&v21[OBJC_IVAR____TtC9libfssyncP33_4832980660C328E96B083C662469F36526FPFileTreeLifetimeExtender_timeout] = v24;
  v44.receiver = v21;
  v44.super_class = v18;
  id v26 = objc_msgSendSuper2(&v44, sel_init);
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v28 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v28, sel_registerLifetimeExtensionForObject_, v26);
  swift_unknownObjectRelease();
  uint64_t v29 = *(void *)(v8 + 168);
  uint64_t v40 = *(void **)(v8 + 160);
  uint64_t v30 = sub_24DCC9398();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v17, 1, 1, v30);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = a5;
  *(void *)(v31 + 24) = a6;
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v42;
  *(void *)(v32 + 24) = a4;
  *(void *)(v32 + 32) = v8;
  id v33 = v41;
  uint64_t v42 = v17;
  uint64_t v34 = v43;
  *(void *)(v32 + 40) = v41;
  *(void *)(v32 + 48) = v34;
  *(double *)(v32 + 56) = a7;
  *(double *)(v32 + 64) = a8;
  *(void *)(v32 + 72) = v26;
  *(void *)(v32 + 80) = a5;
  *(void *)(v32 + 88) = a6;
  id v35 = (void *)swift_allocObject();
  void v35[2] = sub_24D475710;
  v35[3] = v31;
  v35[4] = v29;
  swift_retain_n();
  id v36 = v33;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v37 = v26;
  swift_retain();
  swift_retain();
  uint64_t v38 = (uint64_t)v42;
  sub_24D3FD33C(v40, (uint64_t)v42, sub_24D5DC2E0, v35, (uint64_t)sub_24D5DBB8C, v32);

  swift_release();
  swift_release();
  swift_release();
  return sub_24D415F74(v38, &qword_26B18F680);
}

void sub_24D5BC66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  id v18 = (objc_class *)type metadata accessor for DummyOperationClient();
  id v19 = (char *)objc_allocWithZone(v18);
  *(void *)&v19[OBJC_IVAR____TtC9libfssync20DummyOperationClient_cancellationHandler] = 0;
  id v20 = &v19[OBJC_IVAR____TtC9libfssync20DummyOperationClient_perThumbnailCompletionHandler];
  *(void *)id v20 = a1;
  *((void *)v20 + 1) = a2;
  v45.receiver = v19;
  v45.super_class = v18;
  swift_retain();
  id v41 = objc_msgSendSuper2(&v45, sel_init);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26986BFB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_24DCCECE0;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v23 = objc_msgSend(Strong, sel_provider);

  if (!v23) {
    goto LABEL_13;
  }
  id v24 = objc_msgSend(v23, sel_identifier);

  double v25 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v26 = objc_msgSend(v25, sel_identifier);

  if (!v26)
  {
    __break(1u);
LABEL_13:
    sub_24DCCA978();
    __break(1u);
    return;
  }
  id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v24, v26, a4);

  *(void *)(inited + 32) = v27;
  *(void *)(inited + 40) = a5;
  swift_bridgeObjectRetain();
  unint64_t v28 = sub_24D42975C(inited);
  uint64_t v29 = (void *)swift_unknownObjectUnownedLoadStrong();
  LOBYTE(v27) = objc_msgSend(v29, sel_userEnabled);

  if (v27)
  {
    uint64_t v30 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v31 = objc_msgSend(v30, sel_session);

    id v32 = objc_msgSend(self, sel_defaultStore);
    if (objc_msgSend(v32, sel_hasUpcallExecutionTimeLimits)) {
      goto LABEL_8;
    }
    if (qword_26986A750 != -1) {
      swift_once();
    }
    double v33 = -1.0;
    if (byte_26986BEB0 == 1)
    {
LABEL_8:
      objc_msgSend(v32, sel_upcallExecutionTimeLimitBase);
      double v33 = v34;
    }

    id v35 = objc_msgSend(v31, sel_newFileProviderProxyWithTimeout_pid_, 0, v33);
    swift_unknownObjectRelease();
  }
  else
  {
    id v35 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
  }
  id v36 = v41;
  sub_24DC323F4(v28);
  swift_bridgeObjectRelease();
  sub_24D3FB6F8(0, (unint64_t *)&unk_26B1940B0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26986BE60);
  sub_24D5B3CD4();
  id v37 = (void *)sub_24DCC9558();
  swift_bridgeObjectRelease();
  uint64_t v38 = (void *)swift_allocObject();
  void v38[2] = a3;
  v38[3] = a6;
  v38[4] = a7;
  v38[5] = a8;
  aBlock[4] = sub_24D5DBBF8;
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D6024BC;
  aBlock[3] = &block_descriptor_484;
  uint64_t v39 = _Block_copy(aBlock);
  swift_retain();
  id v40 = a6;
  swift_retain();
  swift_release();
  objc_msgSend(v35, sel_startOperation_toFetchThumbnailsWithDictionary_size_completionHandler_, v36, v37, v39, a9, a10);
  _Block_release(v39);
  swift_unknownObjectRelease();
}

uint64_t sub_24D5BCAE8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  a4();
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v6 = objc_msgSend(Strong, sel_session);

  objc_msgSend(v6, sel_unregisterLifetimeExtensionForObject_, a3);

  return swift_unknownObjectRelease();
}

uint64_t sub_24D5BCB70(void *a1, int a2, uint64_t a3, void *a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = a8;
  uint64_t v34 = a7;
  int v33 = a6;
  uint64_t v39 = a5;
  uint64_t v38 = a3;
  int v37 = a2;
  id v35 = a1;
  sub_24D3F0BA0((uint64_t)a4, (uint64_t)v43, qword_26B1994D0);
  uint64_t v9 = v43[0];
  unint64_t v10 = v43[1];
  uint64_t v11 = v43[3];
  unint64_t v12 = v43[4];
  uint64_t v32 = sub_24DCC9078();
  uint64_t v31 = *(void *)(v32 - 8);
  MEMORY[0x270FA5388](v32);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_24D3F0BA0((uint64_t)a4, (uint64_t)&v44, qword_26B1994D0);
  if ((void)v45 == 1)
  {
    unint64_t v15 = 0xE300000000000000;
    uint64_t v16 = 7104878;
  }
  else
  {
    long long v48 = v44;
    long long v49 = v45;
    long long v50 = v46;
    long long v51 = v47;
    sub_24D3F9C18(v9, v10);
    swift_bridgeObjectRetain();
    sub_24D3F9C18(v11, v12);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_24DA11BFC();
    unint64_t v15 = v17;
    sub_24D5DC064(a4, (void (*)(void, void, void, void, void, void, void, void))sub_24D400D4C);
  }
  id v18 = (id)fpfs_current_or_default_log();
  sub_24DCC9088();
  swift_bridgeObjectRetain_n();
  id v19 = sub_24DCC9068();
  os_log_type_t v20 = sub_24DCCA108();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    uint64_t v42 = v22;
    *(_DWORD *)uint64_t v21 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_24D418FB4(v16, v15, &v42);
    sub_24DCCA428();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_24D3D0000, v19, v20, "⚔️  Fetching version %s...", v21, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x25332B030](v22, -1, -1);
    MEMORY[0x25332B030](v21, -1, -1);
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, uint64_t))(v31 + 8))(v14, v32);
  if (v33) {
    uint64_t v23 = 8;
  }
  else {
    uint64_t v23 = 0;
  }
  id v24 = (void *)swift_allocObject();
  uint64_t v25 = v36;
  _DWORD v24[2] = v34;
  v24[3] = v25;
  id v26 = v35;
  uint64_t v27 = v40;
  v24[4] = v35;
  v24[5] = v27;
  v24[6] = v16;
  v24[7] = v15;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_24D5DB6AC;
  *(void *)(v28 + 24) = v24;
  swift_retain();
  id v29 = v26;
  swift_retain();
  swift_retain();
  sub_24D5BEB9C(v29, v37, v38, (uint64_t)a4, v39, 0, v23, sub_24D5DA704, v28);
  swift_release();
  return swift_release();
}

uint64_t sub_24D5BCFB8(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v148 = (void *)a7;
  uint64_t v149 = a4;
  uint64_t v145 = a6;
  uint64_t v141 = a5;
  uint64_t v150 = a3;
  uint64_t v151 = a2;
  long long v143 = (unsigned __int8 *)__swift_instantiateConcreteTypeFromMangledName(&qword_26986BFB0);
  MEMORY[0x270FA5388](v143);
  dispatch_group_t v144 = (void *)((char *)v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18F680);
  MEMORY[0x270FA5388](v9 - 8);
  uint64_t v11 = ((char *)v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_24DCC9078();
  uint64_t v146 = *(void *)(v12 - 8);
  uint64_t v147 = v12;
  uint64_t v13 = MEMORY[0x270FA5388](v12);
  uint64_t v156 = (char *)v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v13);
  uint64_t v16 = (char *)v136 - v15;
  uint64_t v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B193EB8);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  id v19 = (int *)MEMORY[0x270FA5388](v18);
  uint64_t v25 = *(void **)a1;
  uint64_t v24 = *(void *)(a1 + 8);
  unint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = *(void *)(a1 + 24);
  uint64_t v29 = *(void *)(a1 + 32);
  uint64_t v28 = *(void *)(a1 + 40);
  uint64_t v31 = *(void *)(a1 + 48);
  uint64_t v30 = *(int **)(a1 + 56);
  int v32 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v152 = v27;
  uint64_t v153 = v31;
  unint64_t v157 = v26;
  uint64_t v154 = v24;
  id v155 = v25;
  if (v32 == 1)
  {
    unint64_t v33 = v26;
    uint64_t v34 = v27;
    id v35 = v25;
    id v36 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    sub_24D5DB6B0(v25, v24, v33, v34, v29, v28, v31, v30, 1);
    uint64_t v149 = v149;
    swift_bridgeObjectRetain();
    sub_24D5DB6B0(v25, v24, v33, v34, v29, v28, v31, v30, 1);
    int v37 = v149;
    swift_bridgeObjectRetain();
    uint64_t v38 = sub_24DCC9068();
    os_log_type_t v39 = sub_24DCCA108();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      os_log_t v140 = v38;
      uint64_t v42 = v41;
      uint64_t v43 = (void *)swift_slowAlloc();
      uint64_t v138 = v43;
      uint64_t v141 = swift_slowAlloc();
      v171[0] = v141;
      *(_DWORD *)uint64_t v42 = 136315650;
      uint64_t v149 = v30;
      uint64_t v142 = v28;
      LODWORD(v139) = v40;
      unint64_t v44 = (unint64_t)v148;
      swift_bridgeObjectRetain();
      v158[0] = sub_24D418FB4(v145, v44, v171);
      uint64_t v145 = v29;
      sub_24DCCA428();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v42 + 12) = 2080;
      long long v45 = v37;
      uint64_t v46 = sub_24D3D79D4();
      uint64_t v47 = v31;
      unint64_t v49 = v48;

      v158[0] = sub_24D418FB4(v46, v49, v171);
      sub_24DCCA428();

      uint64_t v50 = v47;
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2112;
      id v51 = v155;
      id v52 = v155;
      uint64_t v53 = _swift_stdlib_bridgeErrorToNSError();
      v158[0] = v53;
      uint64_t v29 = v145;
      uint64_t v28 = v142;
      uint64_t v30 = v149;
      sub_24DCCA428();
      *uint64_t v43 = v53;
      uint64_t v54 = v154;
      unint64_t v55 = v157;
      uint64_t v56 = v152;
      sub_24D5DAFB8(v51, v154, v157, v152, v29, v28, v50, v30, 1);
      uint64_t v57 = v54;
      uint64_t v58 = v56;
      sub_24D5DAFB8(v51, v57, v55, v56, v29, v28, v50, v30, 1);
      os_log_t v59 = v140;
      _os_log_impl(&dword_24D3D0000, v140, (os_log_type_t)v139, "⚔️  Failed fetching version %s for %s: %@", (uint8_t *)v42, 0x20u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      uint64_t v60 = v138;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v60, -1, -1);
      uint64_t v61 = v141;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v61, -1, -1);
      MEMORY[0x25332B030](v42, -1, -1);

      (*(void (**)(char *, uint64_t))(v146 + 8))(v156, v147);
      uint64_t v62 = v154;
    }
    else
    {

      swift_bridgeObjectRelease_n();
      uint64_t v62 = v154;
      id v51 = v155;
      unint64_t v90 = v157;
      uint64_t v58 = v152;
      sub_24D5DAFB8(v155, v154, v157, v152, v29, v28, v31, v30, 1);
      sub_24D5DAFB8(v51, v62, v90, v58, v29, v28, v31, v30, 1);

      (*(void (**)(char *, uint64_t))(v146 + 8))(v156, v147);
    }
    id v91 = v144;
    *dispatch_group_t v144 = (uint64_t)v51;
    swift_storeEnumTagMultiPayload();
    id v92 = v51;
    v151(v91);
    sub_24D5DAFB8(v51, v62, v157, v58, v29, v28, v153, v30, 1);
    id v93 = &qword_26986BFB0;
    uint64_t v94 = (uint64_t)v91;
  }
  else
  {
    int v63 = v149;
    uint64_t v156 = v16;
    os_log_t v140 = v11;
    uint64_t v145 = v29;
    uint64_t v142 = v28;
    if (v30)
    {
      uint64_t v137 = v23;
      uint64_t v138 = v22;
      uint64_t v139 = v21;
      uint64_t v64 = v142;
      uint64_t v65 = v154;
      uint64_t v66 = (uint64_t)v155;
      *(void *)&long long v160 = v155;
      *((void *)&v160 + 1) = v154;
      unint64_t v67 = v157;
      *(void *)&long long v161 = v157;
      uint64_t v69 = v152;
      uint64_t v68 = v153;
      *((void *)&v161 + 1) = v152;
      uint64_t v70 = v145;
      *(void *)&long long v162 = v145;
      dispatch_group_t v144 = (uint64_t *)(v142 & 1);
      BYTE8(v162) = v142 & 1;
      uint64_t v163 = v153;
      id v71 = (void *)((char *)v136 - v20);
      uint64_t v149 = v19;
      sub_24D5DB6C0((uint64_t)v155, v154, v157, v152, v145, v142, v153, v30);
      sub_24D5DB6C0(v66, v65, v67, v69, v70, v64, v68, v30);

      sub_24D5DB6C0(v66, v65, v67, v69, v70, v64, v68, v30);
      unint64_t v72 = v67;
      sub_24D416034(v65, v67);
      sub_24D7C43F4((uint64_t *)v159);
      id v73 = objc_msgSend(v30, sel_filename);
      uint64_t v74 = sub_24DCC97E8();
      uint64_t v76 = v75;

      v171[0] = v74;
      v171[1] = v76;
      v158[0] = 58;
      v158[1] = 0xE100000000000000;
      uint64_t v164 = 47;
      unint64_t v165 = 0xE100000000000000;
      sub_24D3F0EB8();
      uint64_t v77 = sub_24DCCA478();
      uint64_t v79 = v78;
      swift_bridgeObjectRelease();
      id v80 = sub_24D7C479C();
      long long v143 = (unsigned __int8 *)v71 + v149[10];
      uint64_t v149 = v30;
      sub_24D3F9CA0((uint64_t)v143);
      void *v71 = v80;
      v71[1] = v77;
      id v148 = v71;
      v71[2] = v79;
      id v81 = (id)fpfs_current_or_default_log();
      uint64_t v82 = v156;
      sub_24DCC9088();
      sub_24D5D7CE8((uint64_t *)v159);
      sub_24D5D7CE8((uint64_t *)v159);
      long long v83 = sub_24DCC9068();
      os_log_type_t v84 = sub_24DCCA108();
      if (os_log_type_enabled(v83, v84))
      {
        uint64_t v85 = (uint8_t *)swift_slowAlloc();
        uint64_t v86 = swift_slowAlloc();
        v171[0] = v86;
        *(_DWORD *)uint64_t v85 = 136315138;
        v136[1] = v85 + 4;
        sub_24D5D7CE8((uint64_t *)v159);
        uint64_t v87 = sub_24DA11BFC();
        unint64_t v89 = v88;
        sub_24D5DA4D8((uint64_t *)v159);
        v158[0] = sub_24D418FB4(v87, v89, v171);
        sub_24DCCA428();
        swift_bridgeObjectRelease();
        sub_24D5DA4D8((uint64_t *)v159);
        sub_24D5DA4D8((uint64_t *)v159);
        _os_log_impl(&dword_24D3D0000, v83, v84, "⚔️  Staging version %s...", v85, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v86, -1, -1);
        MEMORY[0x25332B030](v85, -1, -1);
      }
      else
      {
        sub_24D5DA4D8((uint64_t *)v159);
        sub_24D5DA4D8((uint64_t *)v159);
      }

      (*(void (**)(char *, uint64_t))(v146 + 8))(v82, v147);
      os_log_t v99 = v140;
      uint64_t v100 = v154;
      uint64_t v164 = (uint64_t)v155;
      unint64_t v165 = v154;
      unint64_t v101 = v72;
      unint64_t v166 = v72;
      uint64_t v102 = v152;
      uint64_t v103 = v153;
      uint64_t v167 = v152;
      uint64_t v104 = v145;
      uint64_t v168 = v145;
      long long v169 = v144;
      uint64_t v170 = v153;
      sub_24D416048(v154, v72);
      sub_24D414684((uint64_t)v158);
      sub_24D3F0BA0((uint64_t)v158, (uint64_t)v171, &qword_26B197970);
      uint64_t v105 = swift_allocObject();
      uint64_t v106 = v141;
      *(void *)(v105 + 16) = v141;
      long long v107 = v161;
      *(_OWORD *)(v105 + 24) = v160;
      *(_OWORD *)(v105 + 40) = v107;
      *(_OWORD *)(v105 + 56) = v162;
      *(void *)(v105 + 72) = v163;
      long long v108 = v159[1];
      *(_OWORD *)(v105 + 80) = v159[0];
      *(_OWORD *)(v105 + 96) = v108;
      long long v109 = v159[3];
      *(_OWORD *)(v105 + 112) = v159[2];
      *(_OWORD *)(v105 + 128) = v109;
      uint64_t v110 = v150;
      *(void *)(v105 + 144) = v151;
      *(void *)(v105 + 152) = v110;
      unsigned int v111 = *v143 - 1;
      *(void *)(v105 + 160) = v149;
      if (v111 > 1)
      {
        uint64_t v151 = *(void (**)(uint64_t *))(v106 + 168);
        uint64_t v156 = *(char **)(v106 + 160);
        uint64_t v120 = sub_24DCC9398();
        (*(void (**)(os_log_t, uint64_t, uint64_t, uint64_t))(*(void *)(v120 - 8) + 56))(v99, 1, 1, v120);
        uint64_t v121 = swift_allocObject();
        uint64_t v147 = v121;
        *(void *)(v121 + 16) = sub_24D5DB790;
        *(void *)(v121 + 24) = v105;
        uint64_t v122 = v139;
        sub_24D415FD0((uint64_t)v148, v139, &qword_26B193EB8);
        uint64_t v123 = v106;
        unint64_t v124 = (*(unsigned __int8 *)(v137 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80);
        unint64_t v125 = ((unint64_t)v138 + v124 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v126 = swift_allocObject();
        *(void *)(v126 + 16) = v123;
        sub_24D3F0BA0((uint64_t)&v164, v126 + 24, qword_26B197140);
        sub_24D3F0BA0(v122, v126 + v124, &qword_26B193EB8);
        sub_24D3F0BA0((uint64_t)v171, v126 + v125, &qword_26B197970);
        uint64_t v127 = (void (**)(void *, char))(v126 + ((v125 + 255) & 0xFFFFFFFFFFFFFFF8));
        *uint64_t v127 = sub_24D5DB790;
        v127[1] = (void (*)(void *, char))v105;
        uint64_t v128 = (void *)swift_allocObject();
        uint64_t v129 = v147;
        v128[2] = sub_24D5DC308;
        v128[3] = v129;
        v128[4] = v151;
        swift_retain();
        sub_24D5D7CE8((uint64_t *)v159);
        swift_retain();
        sub_24D416048(v100, v157);
        swift_retain();
        uint64_t v130 = v149;
        swift_retain();
        sub_24D5D7CE8((uint64_t *)v159);
        swift_retain();
        sub_24D416048(v100, v157);
        swift_retain();
        uint64_t v131 = v130;
        swift_retain();
        sub_24D416048(v100, v157);
        swift_retain();
        swift_retain();
        os_log_t v132 = v140;
        sub_24D3FD33C(v156, (uint64_t)v140, sub_24D5DC2E4, v128, (uint64_t)sub_24D5DBA70, v126);
        swift_release();
        uint64_t v118 = v152;
        swift_release();
        unint64_t v101 = v157;
        uint64_t v119 = v145;
        swift_release();
        uint64_t v133 = (uint64_t)v132;
        uint64_t v117 = v153;
        sub_24D415F74(v133, &qword_26B18F680);
      }
      else
      {
        type metadata accessor for StagedContext();
        uint64_t v156 = (char *)swift_allocObject();
        sub_24D5D7CE8((uint64_t *)v159);
        swift_retain();
        sub_24D416048(v100, v101);
        swift_retain();
        uint64_t v112 = v104;
        uint64_t v113 = v102;
        uint64_t v114 = v103;
        uint64_t v115 = v149;
        sub_24D5D7CE8((uint64_t *)v159);
        swift_retain();
        sub_24D416048(v100, v101);
        swift_retain();
        uint64_t v116 = v115;
        uint64_t v117 = v114;
        uint64_t v118 = v113;
        uint64_t v119 = v112;
        sub_24D5BDEC4(v156, 0, v106, &v160, (uint64_t *)v159, (void (*)(void))v151, v110, (uint64_t)v116);
        swift_release();
      }
      swift_release();
      swift_release();
      sub_24D416034(v100, v101);
      sub_24D5DA4D8((uint64_t *)v159);
      id v134 = v149;

      swift_release();
      sub_24D416034(v100, v101);

      sub_24D416034(v100, v101);
      sub_24D5DA4D8((uint64_t *)v159);
      sub_24D5DAFB8(v155, v100, v101, v118, v119, v142, v117, v134, 0);
      id v93 = &qword_26B193EB8;
      uint64_t v94 = (uint64_t)v148;
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
      sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
      uint64_t v95 = swift_allocError();
      *(void *)uint64_t v96 = v63;
      *(void *)(v96 + 8) = 0;
      *(void *)(v96 + 16) = 0;
      *(void *)(v96 + 24) = 1;
      *(_OWORD *)(v96 + 32) = 0u;
      *(_OWORD *)(v96 + 48) = 0u;
      *(_OWORD *)(v96 + 64) = 0u;
      *(unsigned char *)(v96 + 80) = 0;
      uint64_t v97 = v144;
      *dispatch_group_t v144 = v95;
      swift_storeEnumTagMultiPayload();
      uint64_t v98 = v63;
      v151(v97);
      id v93 = &qword_26986BFB0;
      uint64_t v94 = (uint64_t)v97;
    }
  }
  return sub_24D415F74(v94, v93);
}

void sub_24D5BDEC4(void *a1, char a2, uint64_t a3, void *a4, uint64_t *a5, void (*a6)(void), uint64_t a7, uint64_t a8)
{
  uint64_t v90 = a3;
  uint64_t v91 = a7;
  unint64_t v89 = a4;
  uint64_t v13 = 0;
  uint64_t v87 = __swift_instantiateConcreteTypeFromMangledName(&qword_26986BFB0);
  MEMORY[0x270FA5388](v87);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_24DCC9078();
  uint64_t v92 = *(void *)(v16 - 8);
  uint64_t v93 = v16;
  uint64_t v17 = MEMORY[0x270FA5388](v16);
  uint64_t v18 = MEMORY[0x270FA5388](v17);
  uint64_t v20 = (char *)&v81 - v19;
  MEMORY[0x270FA5388](v18);
  uint64_t v23 = (char *)&v81 - v22;
  unint64_t v88 = v15;
  if (a2)
  {
    id v34 = a1;
    id v35 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    sub_24D46C820(a1, 1);
    sub_24D5D7CE8(a5);
    sub_24D46C820(a1, 1);
    sub_24D5D7CE8(a5);
    id v36 = sub_24DCC9068();
    os_log_type_t v37 = sub_24DCCA108();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = swift_slowAlloc();
      uint64_t v86 = a6;
      uint64_t v39 = v38;
      int v40 = (void *)swift_slowAlloc();
      uint64_t v85 = swift_slowAlloc();
      v95[0] = v85;
      *(_DWORD *)uint64_t v39 = 136315394;
      os_log_type_t v84 = 0;
      sub_24D5D7CE8(a5);
      uint64_t v41 = sub_24DA11BFC();
      unint64_t v43 = v42;
      sub_24D5DA4D8(a5);
      uint64_t v94 = sub_24D418FB4(v41, v43, v95);
      sub_24DCCA428();
      swift_bridgeObjectRelease();
      sub_24D5DA4D8(a5);
      sub_24D5DA4D8(a5);
      *(_WORD *)(v39 + 12) = 2112;
      id v44 = a1;
      uint64_t v45 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v94 = v45;
      uint64_t v13 = v84;
      sub_24DCCA428();
      *int v40 = v45;
      sub_24D46C814(a1, 1);
      sub_24D46C814(a1, 1);
      _os_log_impl(&dword_24D3D0000, v36, v37, "⚔️  Failed fetching URL in the wharf for %s: %@", (uint8_t *)v39, 0x16u);
      __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
      swift_arrayDestroy();
      MEMORY[0x25332B030](v40, -1, -1);
      uint64_t v46 = v85;
      swift_arrayDestroy();
      MEMORY[0x25332B030](v46, -1, -1);
      uint64_t v47 = v39;
      a6 = v86;
      MEMORY[0x25332B030](v47, -1, -1);
    }
    else
    {
      sub_24D5DA4D8(a5);
      sub_24D5DA4D8(a5);
      sub_24D46C814(a1, 1);
      sub_24D46C814(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v92 + 8))(v20, v93);
    uint64_t v48 = v90;
    uint64_t v57 = (uint64_t)v88;
    uint64_t v58 = v89;
    *unint64_t v88 = a1;
    swift_storeEnumTagMultiPayload();
    id v59 = a1;
    a6(v57);
    sub_24D46C814(a1, 1);
    uint64_t v60 = sub_24D415F74(v57, &qword_26986BFB0);
    if (!*v58) {
      return;
    }
  }
  else
  {
    uint64_t v85 = a8;
    long long v83 = v21;
    swift_retain();
    id v24 = (id)fpfs_current_or_default_log();
    sub_24DCC9088();
    sub_24D5D7CE8(a5);
    sub_24D5D7CE8(a5);
    uint64_t v25 = sub_24DCC9068();
    os_log_type_t v26 = sub_24DCCA108();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      uint64_t v86 = a6;
      uint64_t v29 = v28;
      v95[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v82 = (void (*)(char *, uint64_t))(v27 + 4);
      sub_24D5D7CE8(a5);
      uint64_t v30 = sub_24DA11BFC();
      os_log_type_t v84 = 0;
      unint64_t v32 = v31;
      sub_24D5DA4D8(a5);
      uint64_t v94 = sub_24D418FB4(v30, v32, v95);
      sub_24DCCA428();
      uint64_t v13 = v84;
      swift_bridgeObjectRelease();
      sub_24D5DA4D8(a5);
      sub_24D5DA4D8(a5);
      _os_log_impl(&dword_24D3D0000, v25, v26, "⚔️  Fetching URL in the wharf for version %s...", v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v33 = v29;
      a6 = v86;
      MEMORY[0x25332B030](v33, -1, -1);
      MEMORY[0x25332B030](v27, -1, -1);
    }
    else
    {
      sub_24D5DA4D8(a5);
      sub_24D5DA4D8(a5);
    }

    uint64_t v82 = *(void (**)(char *, uint64_t))(v92 + 8);
    v82(v23, v93);
    uint64_t v48 = v90;
    uint64_t v49 = v91;
    uint64_t v50 = *(void *)(v90 + 136);
    type metadata accessor for VFSStagedContext();
    uint64_t v51 = swift_dynamicCastClassUnconditional();
    MEMORY[0x270FA5388](v51);
    *(&v81 - 4) = v48;
    *(&v81 - 3) = (uint64_t)a6;
    uint64_t v52 = v85;
    *(&v81 - 2) = v49;
    *(&v81 - 1) = v52;
    sub_24D46C820(a1, 0);
    sub_24DCA9CE8(v51, 0x200000, v50, (void (*)(uint64_t, void, void, void))sub_24D5DBB20, (uint64_t)(&v81 - 6), v53);
    if (v13)
    {
      sub_24D46C814(a1, 0);
      sub_24D46C814(a1, 0);
      unint64_t v55 = v83;
      if (*v89)
      {
        MEMORY[0x270FA5388](v54);
        *(&v81 - 4) = v50;
        *((_DWORD *)&v81 - 6) = 0;
        *(&v81 - 2) = v56;
        sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5DC2F0);
        *(unsigned char *)(v50 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
        if (*(void *)(v50 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
        {
          uint64_t ObjectType = swift_getObjectType();
          swift_unknownObjectRetain();
          MEMORY[0x2533283F0](1, ObjectType);
          swift_unknownObjectRelease();
        }
      }
      id v65 = (id)fpfs_current_or_default_log();
      sub_24DCC9088();
      sub_24D5D7CE8(a5);
      id v66 = v13;
      sub_24D5D7CE8(a5);
      id v67 = v13;
      uint64_t v68 = sub_24DCC9068();
      os_log_type_t v69 = sub_24DCCA108();
      if (os_log_type_enabled(v68, v69))
      {
        uint64_t v70 = swift_slowAlloc();
        id v71 = (void *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        v95[0] = v72;
        *(_DWORD *)uint64_t v70 = 136315394;
        sub_24D5D7CE8(a5);
        uint64_t v73 = sub_24DA11BFC();
        uint64_t v86 = a6;
        unint64_t v75 = v74;
        sub_24D5DA4D8(a5);
        uint64_t v94 = sub_24D418FB4(v73, v75, v95);
        sub_24DCCA428();
        swift_bridgeObjectRelease();
        sub_24D5DA4D8(a5);
        sub_24D5DA4D8(a5);
        *(_WORD *)(v70 + 12) = 2112;
        id v76 = v13;
        uint64_t v77 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v94 = v77;
        sub_24DCCA428();
        void *v71 = v77;
        a6 = v86;

        _os_log_impl(&dword_24D3D0000, v68, v69, "⚔️  Failed staging version %s: %@", (uint8_t *)v70, 0x16u);
        __swift_instantiateConcreteTypeFromMangledName(&qword_26B199EB0);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v71, -1, -1);
        swift_arrayDestroy();
        MEMORY[0x25332B030](v72, -1, -1);
        MEMORY[0x25332B030](v70, -1, -1);

        uint64_t v78 = v83;
      }
      else
      {
        sub_24D5DA4D8(a5);
        sub_24D5DA4D8(a5);

        uint64_t v78 = v55;
      }
      v82(v78, v93);
      uint64_t v79 = (uint64_t)v88;
      *unint64_t v88 = v13;
      swift_storeEnumTagMultiPayload();
      id v80 = v13;
      a6(v79);

      sub_24D415F74(v79, &qword_26986BFB0);
      return;
    }
    sub_24D46C814(a1, 0);
    sub_24D46C814(a1, 0);
    if (!*v89) {
      return;
    }
  }
  uint64_t v61 = *(void *)(v48 + 136);
  MEMORY[0x270FA5388](v60);
  *(&v81 - 4) = v61;
  *((_DWORD *)&v81 - 6) = 0;
  *(&v81 - 2) = v62;
  sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5DC2F0);
  if (v13)
  {
  }
  else
  {
    *(unsigned char *)(v61 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
    if (*(void *)(v61 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
    {
      uint64_t v63 = swift_getObjectType();
      swift_unknownObjectRetain();
      MEMORY[0x2533283F0](1, v63);
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_24D5BE94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *), uint64_t a7, void *a8)
{
  uint64_t v24 = a7;
  uint64_t v25 = a6;
  uint64_t v12 = sub_24DCC8408();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_26986BFB0);
  MEMORY[0x270FA5388](v16);
  uint64_t v18 = (uint64_t *)((char *)&v24 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a4
    && (uint64_t v19 = *(void *)(a5 + 136),
        uint64_t v20 = *(void *)(a2 + 8),
        uint64_t v21 = v19 + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle,
        swift_beginAccess(),
        v20 == *(void *)(v21 + 32)))
  {
    type metadata accessor for StagedRemoteVersion(0);
    id v22 = a8;
    sub_24DCC88F8();
  }
  else
  {
    int v26 = 2;
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D5D78EC((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
    sub_24DCC8808();
    id v22 = (id)sub_24DCC83E8();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  }
  *uint64_t v18 = v22;
  swift_storeEnumTagMultiPayload();
  v25(v18);
  return sub_24D415F74((uint64_t)v18, &qword_26986BFB0);
}

uint64_t sub_24D5BEB9C(void *a1, int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7, void *a8, uint64_t a9)
{
  id v78 = a1;
  uint64_t v73 = a5;
  unint64_t v74 = a8;
  uint64_t v70 = a3;
  uint64_t v71 = a7;
  unint64_t v75 = (void *)a4;
  int v72 = a2;
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(qword_26B1923D0);
  MEMORY[0x270FA5388](v10 - 8);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_24DCC9328();
  uint64_t v13 = *(void *)(v67 - 8);
  uint64_t v14 = MEMORY[0x270FA5388](v67);
  uint64_t v68 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = MEMORY[0x270FA5388](v14);
  id v65 = (char *)&v62 - v17;
  MEMORY[0x270FA5388](v16);
  uint64_t v19 = (char *)&v62 - v18;
  uint64_t v20 = sub_24DCC9398();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = MEMORY[0x270FA5388](v20);
  uint64_t v24 = (char *)&v62 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v22);
  int v26 = (char *)&v62 - v25;
  uint64_t v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18F680);
  MEMORY[0x270FA5388](v27 - 8);
  uint64_t v76 = (uint64_t)&v62 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = nullsub_1;
  *(void *)(v29 + 24) = 0;
  uint64_t v30 = (void *)swift_allocObject();
  uint64_t v31 = v79;
  v30[2] = v79;
  v30[3] = v29;
  v30[4] = v74;
  v30[5] = a9;
  unint64_t v74 = a6;
  uint64_t v77 = v29;
  os_log_type_t v69 = v30;
  if (a6)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    id v32 = objc_msgSend(a6, sel_requestedExtent);
    if (v32 == (id)-1) {
      id v63 = 0;
    }
    else {
      id v63 = objc_msgSend(self, sel_valueWithRange_, v32, v33);
    }
    uint64_t v34 = v79;
  }
  else
  {
    uint64_t v34 = v31;
    swift_retain();
    swift_retain();
    swift_retain();
    id v63 = 0;
  }
  uint64_t v35 = v67;
  uint64_t materialization_alignment = fpfs_get_materialization_alignment();
  uint64_t v36 = *(void *)(v34 + 168);
  id v66 = *(void **)(v34 + 160);
  uint64_t v67 = v36;
  sub_24DCC9368();
  qos_class_self();
  sub_24DCC9308();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v35) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v13 + 104))(v19, *MEMORY[0x263F8F090], v35);
    sub_24D415F74((uint64_t)v12, qword_26B1923D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v19, v12, v35);
  }
  sub_24DCC9378();
  os_log_type_t v37 = v65;
  sub_24DCC9388();
  unsigned int v38 = sub_24DCC9318();
  uint64_t v39 = *(void (**)(char *, uint64_t))(v13 + 8);
  v39(v37, v35);
  int v40 = v68;
  sub_24DCC9388();
  unsigned int v41 = sub_24DCC9318();
  v39(v40, v35);
  if (v38 >= v41) {
    unint64_t v42 = v26;
  }
  else {
    unint64_t v42 = v24;
  }
  uint64_t v43 = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v21 + 16))(v76, v42, v20);
  id v44 = *(void (**)(char *, uint64_t))(v21 + 8);
  v44(v24, v20);
  v44(v26, v20);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56))(v43, 0, 1, v20);
  uint64_t v45 = swift_allocObject();
  uint64_t v46 = v69;
  *(void *)(v45 + 16) = sub_24D5DB230;
  *(void *)(v45 + 24) = v46;
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v70;
  *(void *)(v47 + 16) = v79;
  *(void *)(v47 + 24) = v48;
  uint64_t v49 = v71;
  *(void *)(v47 + 32) = v78;
  *(void *)(v47 + 40) = v49;
  uint64_t v51 = v73;
  uint64_t v50 = v74;
  *(void *)(v47 + 48) = v74;
  *(void *)(v47 + 56) = v51;
  uint64_t v52 = v75;
  sub_24D3F0BA0((uint64_t)v75, v47 + 64, qword_26B1994D0);
  *(void *)(v47 + 128) = sub_24D5DB230;
  *(void *)(v47 + 136) = v46;
  *(unsigned char *)(v47 + 144) = v72;
  uint64_t v54 = v63;
  uint64_t v53 = materialization_alignment;
  *(void *)(v47 + 152) = v63;
  *(void *)(v47 + 160) = v53;
  *(void *)(v47 + 168) = v77;
  unint64_t v55 = (void *)swift_allocObject();
  v55[2] = sub_24D5DA704;
  v55[3] = v45;
  v55[4] = v67;
  id v56 = v51;
  swift_retain_n();
  swift_retain();
  swift_retain();
  id v57 = v78;
  id v58 = v50;
  sub_24D5DC064(v52, (void (*)(void, void, void, void, void, void, void, void))sub_24D3F9B98);
  id v59 = v54;
  swift_retain();
  swift_retain();
  uint64_t v60 = v76;
  sub_24D3FD33C(v66, v76, (void (*)())sub_24D5DC2EC, v55, (uint64_t)sub_24D5DB2D8, v47);

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_24D415F74(v60, &qword_26B18F680);
  return swift_release();
}

uint64_t sub_24D5BF230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v19 = a4;
  uint64_t v17 = a1;
  uint64_t v6 = sub_24DCC92F8();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_24DCC9398();
  uint64_t v10 = *(void *)(v16 - 8);
  MEMORY[0x270FA5388](v16);
  uint64_t v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_24D5DB210;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D3D2E94;
  aBlock[3] = &block_descriptor_444_0;
  uint64_t v13 = _Block_copy(aBlock);
  swift_retain();
  sub_24DCC9348();
  uint64_t v20 = MEMORY[0x263F8EE78];
  sub_24D5D78EC((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
  sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
  sub_24DCCA5B8();
  MEMORY[0x2533282B0](0, v12, v9, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v16);
  swift_release();
  return v19(v17);
}

void sub_24D5BF4F0(void *a1, uint64_t a2, void *a3, unint64_t a4, void *a5, void *a6, uint64_t a7, void (*a8)(void **), uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  sub_24D3F0BA0(a7, (uint64_t)v79, qword_26B1994D0);
  unint64_t v62 = v79[1];
  uint64_t v63 = v79[0];
  unint64_t v64 = v79[4];
  uint64_t v17 = a1;
  uint64_t v65 = v79[3];
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  unsigned int v19 = objc_msgSend(Strong, sel_userEnabled);

  if (v19)
  {
    uint64_t v20 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v21 = objc_msgSend(v20, sel_session);

    id v22 = objc_msgSend(self, sel_defaultStore);
    if (objc_msgSend(v22, sel_hasUpcallExecutionTimeLimits)) {
      goto LABEL_6;
    }
    if (qword_26986A750 != -1) {
      swift_once();
    }
    if (byte_26986BEB0 == 1)
    {
LABEL_6:
      objc_msgSend(v22, sel_upcallExecutionTimeLimitBase);
      double v24 = v23;
      objc_msgSend(v22, sel_upcallExecutionTimeLimitPerKiloByte);
      double v26 = v25;

      double v27 = v24 + (double)a2 / 1000.0 * v26;
    }
    else
    {

      double v27 = -1.0;
    }
    id v28 = objc_msgSend(v21, sel_newFileProviderProxyWithTimeout_pid_, 0, v27);
    swift_unknownObjectRelease();
  }
  else
  {
    id v28 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
  }
  int v72 = v28;
  id v67 = (id)fpfs_current_log();
  uint64_t v29 = (unsigned char *)swift_unknownObjectUnownedLoadStrong();
  id v30 = objc_msgSend(v29, sel_provider);

  if (!v30) {
    goto LABEL_29;
  }
  uint64_t v29 = objc_msgSend(v30, sel_identifier);

  uint64_t v31 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v32 = objc_msgSend(v31, sel_identifier);

  if (!v32)
  {
    __break(1u);
LABEL_29:
    sub_24DCCA978();
    __break(1u);
    goto LABEL_30;
  }
  id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v29, v32, a3);

  if (a5) {
    id v33 = a5;
  }
  else {
    id v33 = objc_msgSend(self, sel_requestForSelf);
  }
  uint64_t v34 = (void *)swift_unknownObjectUnownedLoadStrong();
  id v66 = a5;
  id v35 = objc_msgSend(v34, sel_session);

  id v36 = objc_msgSend(v33, sel_nsfpRequestForSession_isSpeculative_, v35, (a4 >> 8) & 1);
  swift_unknownObjectRelease();
  uint64_t v70 = v36;
  objc_msgSend(v36, sel_setDomainVersion_, a6);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = 0;
  sub_24D3F0BA0(a7, (uint64_t)&v80, qword_26B1994D0);
  id v38 = 0;
  if ((void)v81 != 1)
  {
    v84[0] = v80;
    v84[1] = v81;
    v84[2] = v82;
    v84[3] = v83;
    sub_24D3FB6F8(0, (unint64_t *)&unk_26B194070);
    sub_24D3F9C18(v63, v62);
    swift_bridgeObjectRetain();
    sub_24D3F9C18(v65, v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    id v38 = sub_24D910750(v84);
  }
  if ((a4 & 0x100) == 0) {
    goto LABEL_21;
  }
  uint64_t v29 = (unsigned char *)v17[18];
  uint64_t v39 = (void *)swift_retain();
  if (objc_sync_enter(v39)) {
    sub_24DA82DB0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v29);
  }
  BOOL v40 = sub_24D5D2AE8(v29);
  if (objc_sync_exit(v29)) {
LABEL_30:
  }
    sub_24DA82DC4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v29);
  swift_release();
  if (!v40)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
    sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
    id v58 = (void *)swift_allocError();
    *(void *)uint64_t v59 = 10;
    *(_OWORD *)(v59 + 8) = 0u;
    *(_OWORD *)(v59 + 24) = 0u;
    *(_OWORD *)(v59 + 40) = 0u;
    *(_OWORD *)(v59 + 56) = 0u;
    *(void *)(v59 + 72) = 0;
    *(unsigned char *)(v59 + 80) = 10;
    long long v86 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    id aBlock = v58;
    uint64_t v89 = 0;
    char v90 = 1;
    a8(&aBlock);

    swift_release();
    swift_unknownObjectRelease();

    return;
  }
LABEL_21:
  unsigned int v41 = (void *)swift_allocObject();
  v41[2] = v17;
  v41[3] = v67;
  v41[4] = a6;
  v41[5] = v37;
  v41[6] = a3;
  v41[7] = a8;
  v41[8] = a9;
  v41[9] = v72;
  v41[10] = a5;
  *((void *)&v87 + 1) = sub_24D5DB39C;
  *(void *)&long long v88 = v41;
  id aBlock = (void *)MEMORY[0x263EF8330];
  *(void *)&long long v86 = 1107296256;
  *((void *)&v86 + 1) = sub_24D5C0D54;
  *(void *)&long long v87 = &block_descriptor_432_0;
  unint64_t v42 = _Block_copy(&aBlock);
  id v43 = v66;
  swift_retain();
  swift_retain();
  id v75 = a3;
  swift_retain();
  swift_unknownObjectRetain();
  id v44 = v67;
  id v45 = a6;
  swift_release();
  id v46 = objc_msgSend(v72, sel_fetchContentsForItemWithID_version_request_estimatedItemSize_isSymlink_extent_alignment_options_completionHandler_, v71, v38, v36, a2, a10 == 2, a11, a12, (a4 >> 3) & 1, v42);
  _Block_release(v42);
  swift_beginAccess();
  uint64_t v47 = *(void **)(v37 + 16);
  *(void *)(v37 + 16) = v46;

  uint64_t v48 = *(void **)(v37 + 16);
  if (v48)
  {
    os_log_type_t v69 = v44;
    swift_beginAccess();
    id v49 = v48;
    id v50 = v75;
    id v51 = v49;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v77 = v17[22];
    v17[22] = 0x8000000000000000;
    sub_24D714C20((uint64_t)v51, v50, isUniquelyReferenced_nonNull_native);
    v17[22] = v77;

    swift_bridgeObjectRelease();
    swift_endAccess();
    uint64_t v53 = (uint64_t (*)(id *, id, uint64_t, uint64_t))v17[15];
    if (v53)
    {
      uint64_t v54 = *MEMORY[0x263F08478];
      v78[0] = v50;
      swift_retain_n();
      uint64_t v55 = v53(v78, v51, v54, a2);
      uint64_t v57 = v56;

      sub_24D43DD74((uint64_t)v53);
      sub_24D43DD74((uint64_t)v53);
      swift_unknownObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();

      uint64_t v55 = 0;
      uint64_t v57 = 0;
    }
    uint64_t v60 = (void *)swift_allocObject();
    v60[2] = v17;
    v60[3] = v50;
    v60[4] = v55;
    v60[5] = v57;
    swift_beginAccess();
    *(void *)(a13 + 16) = sub_24D5DB42C;
    *(void *)(a13 + 24) = v60;
    swift_retain();
    id v61 = v50;
    swift_release();
    swift_release();
  }
  else
  {
    swift_release();
    swift_unknownObjectRelease();
  }
}

uint64_t sub_24D5BFE58(void *a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7, void *a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  unsigned int v19 = (void *)swift_allocObject();
  void v19[2] = a7;
  void v19[3] = a3;
  v19[4] = a9;
  v19[5] = a1;
  v19[6] = a2;
  v19[7] = a6;
  v19[8] = a10;
  v19[9] = a11;
  v19[10] = a12;
  v19[11] = a13;
  v19[12] = a14;
  v19[13] = a15;
  v19[14] = a4;
  v19[15] = a5;
  swift_retain();
  id v20 = a3;
  id v21 = a9;
  id v22 = a1;
  id v23 = a2;
  id v24 = a6;
  id v25 = a4;
  swift_retain();
  id v26 = a11;
  swift_retain();
  swift_unknownObjectRetain();
  id v27 = a15;
  sub_24D3E29E4(a8, (uint64_t)"provideFile(for:kind:expectedFileSize:lastKnownVersion:domainVersion:requestor:options:completion:)", 99, 2, (uint64_t)sub_24D5DB4DC, (uint64_t)v19);

  return swift_release();
}

void sub_24D5BFFB4(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, id *a7, void *a8, void (*a9)(id *), uint64_t a10, void *a11, void *a12, void *a13, char a14)
{
  uint64_t v98 = a8;
  uint64_t v100 = a7;
  unint64_t v101 = a6;
  id v96 = a5;
  uint64_t v102 = a10;
  uint64_t v103 = a9;
  uint64_t v18 = sub_24DCC8288();
  MEMORY[0x270FA5388](v18 - 8);
  unint64_t v93 = (unint64_t)v89 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = sub_24DCC82A8();
  uint64_t v94 = *(void *)(v95 - 8);
  MEMORY[0x270FA5388](v95);
  id v21 = (char *)v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
  MEMORY[0x270FA5388](v22 - 8);
  id v24 = (char *)v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v25 = (void *)sub_24DCC8A58();
  uint64_t v26 = *(v25 - 1);
  uint64_t v27 = *(void *)(v26 + 64);
  uint64_t v28 = MEMORY[0x270FA5388](v25);
  uint64_t v92 = (uint64_t)v89 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = MEMORY[0x270FA5388](v28);
  uint64_t v91 = (char *)v89 - v30;
  uint64_t v31 = MEMORY[0x270FA5388](v29);
  id v33 = (char *)v89 - v32;
  MEMORY[0x270FA5388](v31);
  uint64_t v97 = (char *)v89 - v34;
  os_log_t v99 = (void *)a1;
  sub_24D5B94C8(a2, a3);
  if (a4)
  {
    id v35 = [a4 url];
    sub_24DCC89E8();

    id v36 = *(void (**)(char *, char *, void *))(v26 + 32);
    v36(v24, v33, v25);
    (*(void (**)(char *, void, uint64_t, void *))(v26 + 56))(v24, 0, 1, v25);
    if ((*(unsigned int (**)(char *, uint64_t, void *))(v26 + 48))(v24, 1, v25) != 1)
    {
      uint64_t v37 = (uint64_t)v97;
      v36(v97, v24, v25);
      id v38 = v101;
      if (!v96 || v101)
      {
        (*(void (**)(uint64_t, void *))(v26 + 8))(v37, v25);
        goto LABEL_8;
      }
      uint64_t v100 = (id *)v96;
      LODWORD(v101) = sub_24DCC89F8();
      uint64_t v90 = v26;
      uint64_t v95 = (uint64_t)a12;
      if (!a12)
      {
        id v96 = 0;
        uint64_t v94 = 0;
        unint64_t v93 = 0;
        uint64_t v54 = v92;
        goto LABEL_40;
      }
      if (!a13)
      {
        id v55 = a12;
        objc_msgSend(v55, sel_setProvidedExtent_, -1, -1);

        unint64_t v93 = 0;
LABEL_39:
        uint64_t v54 = v92;
        id v96 = objc_msgSend(a12, sel_providedExtent);
        uint64_t v94 = v62;
LABEL_40:
        uint64_t v63 = *(void (**)(char *, uint64_t, void *))(v26 + 16);
        unint64_t v64 = v91;
        v63(v91, v37, v25);
        v63((char *)v54, (uint64_t)v64, v25);
        unint64_t v65 = (*(unsigned __int8 *)(v26 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        uint64_t v66 = v65 + v27;
        unint64_t v67 = (v65 + v27) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v68 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v69 = swift_allocObject();
        uint64_t v98 = v25;
        v36((char *)(v69 + v65), v64, v25);
        *(unsigned char *)(v69 + v66) = v101 & 1;
        uint64_t v70 = v99;
        *(void *)(v67 + v69 + 8) = v99;
        id v71 = v100;
        *(void *)(v69 + v68) = v100;
        int v72 = (void *)(v69 + ((v68 + 15) & 0xFFFFFFFFFFFFFFF8));
        uint64_t v73 = v102;
        *int v72 = v103;
        v72[1] = v73;
        unint64_t v74 = v71;
        swift_retain_n();
        swift_retain_n();
        id v75 = v74;
        if ((sub_24D5B8010() & 1) != 0 && objc_msgSend(v75, sel_isFlattenedPackage))
        {
          swift_retain();
          swift_retain();
          sub_24D5D529C((uint64_t)v97, (void (*)(uint64_t *))sub_24D5DB5EC, v69, v70);
          swift_release_n();
          swift_release();
          uint64_t v76 = v92;
        }
        else
        {
          uint64_t v77 = v70[17];
          uint64_t v78 = sub_24DCC8A18();
          (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v77 + 344))(v104, v78);
          v89[1] = v69;
          long long v80 = (void *)v104[0];
          uint64_t v79 = v104[1];
          unint64_t v81 = v104[2];
          uint64_t v82 = v104[3];
          long long v83 = (id *)v104[4];
          uint64_t v84 = v105;
          uint64_t v85 = v106;
          swift_bridgeObjectRelease();
          uint64_t v100 = v83;
          uint64_t v102 = v84;
          long long v107 = v80;
          *(void *)&long long v108 = v79;
          *((void *)&v108 + 1) = v81;
          *(void *)&long long v109 = v82;
          *((void *)&v109 + 1) = v83;
          *(void *)&long long v110 = v84;
          *((void *)&v110 + 1) = v85;
          LOBYTE(v111) = 0;
          uint64_t v76 = v92;
          sub_24D5C0B50((uint64_t)&v107, v92, v101 & 1, (uint64_t)v99, v75, v103);
          sub_24D5DB010(v80, v79, v81, v82, (uint64_t)v100, v102, v85, 0);
          swift_release();
        }
        long long v86 = *(void (**)(uint64_t, void *))(v90 + 8);
        uint64_t v87 = v76;
        long long v88 = v98;
        v86(v87, v98);
        swift_release();

        swift_release();
        v86((uint64_t)v97, v88);
        return;
      }
      id v50 = a12;
      id v51 = a13;
      id v52 = objc_msgSend(v51, sel_rangeValue);
      objc_msgSend(v51, sel_rangeValue);
      objc_msgSend(v50, sel_setProvidedExtent_, v52, v53);
      if (objc_msgSend(v51, sel_rangeValue))
      {

LABEL_26:
        unint64_t v93 = 0;
LABEL_38:
        uint64_t v37 = (uint64_t)v97;
        goto LABEL_39;
      }
      objc_msgSend(v51, sel_rangeValue);
      id v57 = v56;
      id v58 = objc_msgSend(v100, sel_documentSize);
      if (!v58)
      {

        goto LABEL_26;
      }
      uint64_t v59 = v58;
      id v60 = objc_msgSend(v58, sel_integerValue);

      if (v57 == v60)
      {
        if (a14)
        {
          unsigned int v61 = fpfs_supports_brm_sparse_files();

          unint64_t v93 = v61;
          goto LABEL_37;
        }
      }
      else
      {
      }
      unint64_t v93 = 0;
LABEL_37:
      uint64_t v26 = v90;
      goto LABEL_38;
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, void *))(v26 + 56))(v24, 1, 1, v25);
  }
  sub_24D415F74((uint64_t)v24, (uint64_t *)&unk_26B199050);
  id v38 = v101;
LABEL_8:
  uint64_t v39 = v100 + 2;
  swift_beginAccess();
  if (*v39 && (objc_msgSend(*v39, sel_isCancelled) & 1) != 0)
  {
    swift_beginAccess();
    if (*v39
      && objc_msgSend(*v39, sel_isCancelled)
      && (uint64_t v40 = (uint64_t)v99, swift_beginAccess(), *(void *)(*(void *)(v40 + 176) + 16)))
    {
      unsigned int v41 = v98;
      swift_bridgeObjectRetain();
      sub_24D4060A4(v41);
      uint64_t v43 = v42 & 1;

      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v43 = 0;
    }
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
    sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
    uint64_t v48 = (void *)swift_allocError();
    *(void *)uint64_t v49 = v43;
    *(_OWORD *)(v49 + 8) = 0u;
    *(_OWORD *)(v49 + 24) = 0u;
    *(_OWORD *)(v49 + 40) = 0u;
    *(_OWORD *)(v49 + 56) = 0u;
    *(void *)(v49 + 72) = 0;
    *(unsigned char *)(v49 + 80) = 5;
    long long v107 = v48;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    char v112 = 1;
  }
  else
  {
    if (v38)
    {
      id v44 = v38;
    }
    else
    {
      sub_24DCC81E8();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5D78EC((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      uint64_t v45 = v95;
      sub_24DCC8808();
      id v44 = (void *)sub_24DCC8128();
      (*(void (**)(char *, uint64_t))(v94 + 8))(v21, v45);
    }
    id v46 = v38;
    id v47 = objc_msgSend(a11, sel_timeoutState);
    uint64_t v48 = sub_24D5C7D64(v44, v98, 0, (uint64_t)v47);

    long long v107 = v48;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    uint64_t v111 = 0;
    char v112 = 1;
  }
  v103(&v107);
}

void sub_24D5C0B50(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void *a5, void (*a6)(id *))
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  sub_24D3F0BA0(a1, (uint64_t)v29, &qword_26B1949A8);
  uint64_t v27 = (void *)v29[0];
  uint64_t v8 = (void *)v29[2];
  uint64_t v10 = (void *)v29[3];
  uint64_t v9 = (void *)v29[4];
  uint64_t v11 = v31;
  char v24 = v30;
  id v25 = (void *)v29[1];
  id v12 = objc_msgSend(self, sel_defaultManager);
  uint64_t v13 = (void *)sub_24DCC8948();
  v34[0] = 0;
  unsigned int v14 = objc_msgSend(v12, sel_removeItemAtURL_error_, v13, v34);

  if (!v14)
  {
    id v16 = v34[0];
    uint64_t v17 = (void *)sub_24DCC8828();

    swift_willThrow();
    if ((a3 & 1) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  id v15 = v34[0];
  if (a3) {
LABEL_5:
  }
    sub_24DCC89D8();
LABEL_6:
  sub_24D5B8AF4(a5);
  sub_24D3F0BA0(a1, (uint64_t)v32, &qword_26B1949A8);
  char v18 = v33;
  if (v33)
  {
    uint64_t v19 = 0;
    uint64_t v8 = 0;
    uint64_t v10 = 0;
    uint64_t v9 = 0;
    uint64_t v20 = 0;
    uint64_t v11 = 0;
    a5 = 0;
  }
  else
  {
    uint64_t v20 = v24 & 1;
    id v21 = a5;
    uint64_t v19 = v25;
  }
  v34[0] = v27;
  v34[1] = v19;
  v34[2] = v8;
  v34[3] = v10;
  v34[4] = v9;
  v34[5] = (id)v20;
  v34[6] = v11;
  v34[7] = a5;
  char v35 = v18;
  uint64_t v22 = a1;
  uint64_t v23 = (uint64_t)v19;
  sub_24D5DB1D4(v22);
  a6(v34);
  sub_24D5DAFB8(v27, v23, (unint64_t)v8, (uint64_t)v10, (uint64_t)v9, v20, (uint64_t)v11, a5, v18);
}

void sub_24D5C0D54(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, void *a7)
{
  uint64_t v13 = *(void (**)(void *, void *, id, void *, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v18 = a2;
  id v17 = a3;
  id v14 = a4;
  id v15 = a5;
  id v16 = a7;
  v13(a2, a3, v14, a5, a6, a7);
  swift_release();
}

void sub_24D5C0E38(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v6 = sub_24DCC8A58();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x270FA5388](v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B194990);
  MEMORY[0x270FA5388](v10);
  id v12 = (void **)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_24D415FD0(a1, (uint64_t)v12, &qword_26B194990);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = *v12;
    char v20 = 1;
  }
  else
  {
    uint64_t v24 = v7;
    uint64_t v25 = v6;
    (*(void (**)(char *, void **, uint64_t))(v7 + 32))(v9, v12, v6);
    uint64_t v21 = *(void *)(a4 + 136);
    uint64_t v22 = sub_24DCC8A18();
    (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v21 + 344))(v28, v22);
    char v20 = 0;
    uint64_t v19 = (void *)v28[0];
    uint64_t v13 = v28[1];
    unint64_t v14 = v28[2];
    uint64_t v15 = v28[3];
    uint64_t v16 = v28[4];
    uint64_t v17 = v29;
    uint64_t v18 = v30;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  }
  v31[0] = v19;
  v31[1] = v13;
  v31[2] = v14;
  v31[3] = v15;
  v31[4] = v16;
  v31[5] = v17;
  v31[6] = v18;
  char v32 = v20;
  v27(v31);
  sub_24D5DB010(v19, v13, v14, v15, v16, v17, v18, v20);
}

uint64_t sub_24D5C10E4(void *a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void *a6, void *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v81 = a8;
  id v96 = a7;
  id v92 = a1;
  id v93 = a6;
  int v80 = a2;
  uint64_t v77 = a9;
  uint64_t v78 = a3;
  uint64_t v11 = *a5;
  unint64_t v12 = a5[1];
  uint64_t v84 = a10;
  unint64_t v85 = v12;
  uint64_t v13 = a5[2];
  uint64_t v86 = v11;
  uint64_t v87 = v13;
  uint64_t v14 = a5[3];
  unint64_t v90 = a5[4];
  uint64_t v91 = v14;
  uint64_t v15 = a5[5];
  uint64_t v79 = a5[6];
  uint64_t v16 = a5[7];
  uint64_t v94 = v15;
  uint64_t v95 = v16;
  uint64_t v75 = *a4;
  uint64_t v17 = a4[1];
  unint64_t v82 = a4[2];
  uint64_t v83 = v17;
  uint64_t v74 = a4[3];
  uint64_t v73 = a4[4];
  int v72 = *((unsigned __int8 *)a4 + 40);
  uint64_t v76 = a4[6];
  uint64_t v18 = __swift_instantiateConcreteTypeFromMangledName(qword_26B1923D0);
  MEMORY[0x270FA5388](v18 - 8);
  char v20 = (char *)&v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_24DCC9328();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = MEMORY[0x270FA5388](v21);
  uint64_t v69 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)&v68 - v26;
  MEMORY[0x270FA5388](v25);
  unsigned __int8 v29 = (char *)&v68 - v28;
  uint64_t v30 = sub_24DCC9398();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = MEMORY[0x270FA5388](v30);
  uint64_t v34 = (char *)&v68 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v32);
  uint64_t v36 = (char *)&v68 - v35;
  uint64_t v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_26B18F680);
  MEMORY[0x270FA5388](v37 - 8);
  uint64_t v89 = (uint64_t)&v68 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = *(void *)(v10 + 168);
  uint64_t v88 = v10;
  uint64_t v70 = *(void **)(v10 + 160);
  sub_24DCC9368();
  qos_class_self();
  sub_24DCC9308();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1)
  {
    (*(void (**)(char *, void, uint64_t))(v22 + 104))(v29, *MEMORY[0x263F8F090], v21);
    sub_24D415F74((uint64_t)v20, qword_26B1923D0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v29, v20, v21);
  }
  sub_24DCC9378();
  sub_24DCC9388();
  unsigned int v39 = sub_24DCC9318();
  uint64_t v40 = *(void (**)(char *, uint64_t))(v22 + 8);
  v40(v27, v21);
  unsigned int v41 = v69;
  sub_24DCC9388();
  unsigned int v42 = sub_24DCC9318();
  v40(v41, v21);
  if (v39 >= v42) {
    uint64_t v43 = v36;
  }
  else {
    uint64_t v43 = v34;
  }
  uint64_t v44 = v89;
  (*(void (**)(uint64_t, char *, uint64_t))(v31 + 16))(v89, v43, v30);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v31 + 8);
  v45(v34, v30);
  v45(v36, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v44, 0, 1, v30);
  uint64_t v46 = swift_allocObject();
  uint64_t v47 = v77;
  uint64_t v48 = v84;
  *(void *)(v46 + 16) = v77;
  *(void *)(v46 + 24) = v48;
  uint64_t v49 = v46;
  uint64_t v69 = (char *)v46;
  uint64_t v50 = swift_allocObject();
  *(void *)(v50 + 16) = v47;
  *(void *)(v50 + 24) = v48;
  uint64_t v51 = v78;
  *(void *)(v50 + 32) = v88;
  *(void *)(v50 + 40) = v51;
  unint64_t v52 = v82;
  uint64_t v53 = v83;
  *(void *)(v50 + 48) = v75;
  *(void *)(v50 + 56) = v53;
  uint64_t v54 = v74;
  *(void *)(v50 + 64) = v52;
  *(void *)(v50 + 72) = v54;
  *(void *)(v50 + 80) = v73;
  *(unsigned char *)(v50 + 88) = v72 & 1;
  unint64_t v56 = v85;
  uint64_t v55 = v86;
  *(void *)(v50 + 96) = v76;
  *(void *)(v50 + 104) = v55;
  uint64_t v57 = v87;
  *(void *)(v50 + 112) = v56;
  *(void *)(v50 + 120) = v57;
  unint64_t v58 = v90;
  *(void *)(v50 + 128) = v91;
  *(void *)(v50 + 136) = v58;
  uint64_t v59 = v79;
  *(void *)(v50 + 144) = v94;
  *(void *)(v50 + 152) = v59;
  uint64_t v60 = v81;
  *(void *)(v50 + 160) = v95;
  *(void *)(v50 + 168) = v60;
  id v61 = v93;
  *(void *)(v50 + 176) = v96;
  *(void *)(v50 + 184) = v61;
  *(void *)(v50 + 192) = v92;
  *(unsigned char *)(v50 + 200) = v80;
  uint64_t v62 = (void *)swift_allocObject();
  v62[2] = sub_24D5DA704;
  long long v62[3] = v49;
  v62[4] = v71;
  swift_retain_n();
  swift_retain();
  sub_24D416048(v53, v52);
  sub_24D3F9C18(v55, v56);
  swift_bridgeObjectRetain();
  sub_24D3F9C18(v91, v90);
  id v63 = v93;
  id v64 = v92;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v65 = v96;
  uint64_t v66 = v89;
  sub_24D3FD33C(v70, v89, sub_24D5DA858, v62, (uint64_t)sub_24D5DA7E4, v50);
  swift_release();
  swift_release();
  swift_release();
  return sub_24D415F74(v66, &qword_26B18F680);
}

uint64_t sub_24D5C174C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t v77 = a7;
  uint64_t v78 = a8;
  uint64_t v79 = a4;
  uint64_t v84 = *a5;
  uint64_t v13 = a5[1];
  uint64_t v14 = a5[3];
  uint64_t v89 = a5[2];
  uint64_t v90 = v13;
  uint64_t v15 = a5[4];
  uint64_t v91 = *((unsigned __int8 *)a5 + 40);
  uint64_t v87 = a5[6];
  uint64_t v88 = v15;
  uint64_t v75 = a5[7];
  uint64_t v76 = a6;
  uint64_t v16 = a5[8];
  uint64_t v73 = a5[9];
  uint64_t v74 = v16;
  uint64_t v17 = a5[10];
  uint64_t v71 = a5[11];
  uint64_t v72 = v17;
  uint64_t v18 = a5[12];
  uint64_t v69 = a5[13];
  uint64_t v70 = v18;
  uint64_t v68 = a5[14];
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B196B10);
  uint64_t v20 = MEMORY[0x270FA5388](v19 - 8);
  uint64_t v22 = (char *)v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = MEMORY[0x270FA5388](v20);
  uint64_t v25 = (char *)v62 - v24;
  MEMORY[0x270FA5388](v23);
  uint64_t v27 = (char *)v62 - v26;
  uint64_t v28 = type metadata accessor for ItemMetadata();
  MEMORY[0x270FA5388](v28 - 8);
  uint64_t v82 = (uint64_t)v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = swift_allocObject();
  uint64_t v66 = a1;
  *(void *)(v30 + 16) = a1;
  uint64_t v80 = v30 + 16;
  *(void *)(v30 + 24) = a2;
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = nullsub_1;
  uint64_t v65 = v31 + 16;
  *(void *)(v31 + 24) = 0;
  uint64_t v83 = a3;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v67 = a2;
  swift_retain();
  LODWORD(a2) = objc_msgSend(Strong, sel_userEnabled);

  uint64_t v85 = v30;
  uint64_t v86 = v31;
  if (a2)
  {
    uint64_t v33 = (void *)swift_unknownObjectUnownedLoadStrong();
    id v34 = objc_msgSend(v33, sel_session);

    id v35 = objc_msgSend(self, sel_defaultStore);
    if (objc_msgSend(v35, sel_hasUpcallExecutionTimeLimits)) {
      goto LABEL_6;
    }
    if (qword_26986A750 != -1) {
      swift_once();
    }
    if (byte_26986BEB0 == 1)
    {
LABEL_6:
      objc_msgSend(v35, sel_upcallExecutionTimeLimitBase);
      double v37 = v36;
      double v38 = (double)v79 / 1000.0;
      objc_msgSend(v35, sel_upcallExecutionTimeLimitPerKiloByte);
      double v40 = v39;

      double v41 = v37 + v38 * v40;
    }
    else
    {

      double v41 = -1.0;
    }
    id v81 = objc_msgSend(v34, sel_newFileProviderProxyWithTimeout_pid_, 0, v41);
    swift_unknownObjectRelease();
  }
  else
  {
    id v81 = (id)sub_24D5D4A18((void **)&protocolRef_FPXVendor);
  }
  uint64_t v42 = sub_24DCC8CE8();
  uint64_t v43 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56);
  v43(v27, 1, 1, v42);
  v43(v25, 1, 1, v42);
  v43(v22, 1, 1, v42);
  v98[0] = 1;
  LOBYTE(v58) = 0;
  uint64_t v44 = v82;
  sub_24D40243C(0, 0, 0, 1, 0x100000000uLL, 1, 1, 0, v82, 0, 2u, (uint64_t)v27, (uint64_t)v25, 0, 0, 0, (uint64_t)v22, 0, 0,
    1,
    0,
    0,
    0xF000000000000000,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0x100000000uLL,
    v58,
    0,
    0,
    0,
    0,
    0);
  uint64_t v45 = v83;
  uint64_t v46 = *(void *)(v83 + 136);
  v97[0] = v84;
  v97[1] = v90;
  v97[2] = v89;
  uint64_t v64 = v14;
  v97[3] = v14;
  v97[4] = v88;
  void v97[5] = v91;
  v97[6] = v87;
  sub_24D414684((uint64_t)v96);
  sub_24D3F0BA0((uint64_t)v96, (uint64_t)v98, &qword_26B197970);
  v96[31] = 6516580;
  v96[32] = 0xE300000000000000;
  uint64_t v92 = 58;
  unint64_t v93 = 0xE100000000000000;
  uint64_t v94 = 47;
  unint64_t v95 = 0xE100000000000000;
  unint64_t v60 = sub_24D3F0EB8();
  unint64_t v61 = v60;
  uint64_t v58 = MEMORY[0x263F8D310];
  unint64_t v59 = v60;
  uint64_t v47 = sub_24DCCA478();
  uint64_t v49 = (*(uint64_t (**)(void *, uint64_t, unsigned char *, uint64_t, uint64_t, void))(*(void *)v46 + 360))(v97, v44, v98, v47, v48, 0);
  int v63 = a10;
  v62[1] = a9;
  swift_bridgeObjectRelease();
  uint64_t v50 = (void *)swift_allocObject();
  uint64_t v51 = v85;
  uint64_t v52 = v86;
  v50[2] = v45;
  v50[3] = v52;
  uint64_t v53 = v66;
  v50[4] = v49;
  v50[5] = v53;
  v50[6] = v67;
  *(void *)(v51 + 16) = sub_24D5DA8B4;
  *(void *)(v51 + 24) = v50;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v54 = swift_release();
  MEMORY[0x270FA5388](v54);
  uint64_t v55 = v76;
  v62[-26] = v45;
  v62[-25] = v55;
  uint64_t v56 = v78;
  v62[-24] = v77;
  v62[-23] = v56;
  sub_24DCAA66C(v49, 0x200000, v46, (void (*)(uint64_t, void, void, void))sub_24D5DA8C4, (uint64_t)&v62[-28], (uint64_t)v62);
  sub_24D409FE4(v44);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_24D5C1F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v27 = a6;
  uint64_t v28 = a5;
  uint64_t v24 = a2;
  uint64_t v25 = a4;
  uint64_t v26 = a1;
  uint64_t v8 = sub_24DCC92F8();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x270FA5388](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_24DCC9398();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x270FA5388](v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(a2 + 160);
  aBlock[4] = sub_24D5DB210;
  aBlock[5] = a3;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D3D2E94;
  aBlock[3] = &block_descriptor_405;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  sub_24DCC9348();
  uint64_t v32 = MEMORY[0x263F8EE78];
  sub_24D5D78EC((unint64_t *)&unk_26B196BB0, MEMORY[0x263F8F030]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199D90);
  sub_24D3E4A9C((unint64_t *)&qword_26B199DA0, (uint64_t *)&unk_26B199D90);
  sub_24DCCA5B8();
  MEMORY[0x2533282B0](0, v15, v11, v16);
  uint64_t v17 = v16;
  uint64_t v18 = v25;
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  swift_release();
  uint64_t v19 = *(void *)(v24 + 136);
  uint64_t v20 = *(void *)(v18 + 16);
  uint64_t v29 = v19;
  int v30 = 1;
  uint64_t v31 = v20;
  swift_retain();
  sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5DC2F0);
  *(unsigned char *)(v19 + OBJC_IVAR____TtC9libfssync13DocumentWharf_deleteBusy) = 0;
  if (*(void *)(v19 + OBJC_IVAR____TtC9libfssync13DocumentWharf_garbageCollectionSource))
  {
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    MEMORY[0x2533283F0](1, ObjectType);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
  }
  return v28(v26);
}

uint64_t sub_24D5C22C8(uint64_t a1)
{
  swift_beginAccess();
  id v2 = *(void (**)(uint64_t))(a1 + 16);
  uint64_t v3 = swift_retain();
  v2(v3);
  return swift_release();
}

void sub_24D5C2328(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void *a7, void *a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, char a14, void (**a15)())
{
  id v127 = a8;
  uint64_t v118 = a7;
  uint64_t v119 = a6;
  uint64_t v114 = *(void *)a12;
  uint64_t v122 = *(void *)(a12 + 8);
  unint64_t v115 = *(void *)(a12 + 16);
  id v113 = *(id *)(a12 + 24);
  uint64_t v112 = *(void *)(a12 + 32);
  int v111 = *(unsigned __int8 *)(a12 + 40);
  uint64_t v110 = *(void *)(a12 + 48);
  uint64_t v126 = *(void *)(a12 + 56);
  unint64_t v121 = *(void *)(a12 + 64);
  uint64_t v123 = *(void *)(a12 + 72);
  uint64_t v125 = *(void *)(a12 + 80);
  unint64_t v124 = *(void *)(a12 + 88);
  uint64_t v116 = *(void *)(a12 + 96);
  uint64_t v18 = *(void *)(a12 + 112);
  id v120 = *(id *)(a12 + 104);
  uint64_t v117 = v18;
  uint64_t v19 = sub_24DCC8408();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x270FA5388](v19);
  uint64_t v22 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_24DCC8A58();
  MEMORY[0x270FA5388](v23 - 8);
  uint64_t v25 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a4
    || (uint64_t v26 = *(void *)(a5 + 136),
        uint64_t v146 = a5,
        uint64_t v27 = a2[1],
        uint64_t v28 = v26 + OBJC_IVAR____TtC9libfssync13DocumentWharf_wharfHandle,
        swift_beginAccess(),
        BOOL v29 = v27 == *(void *)(v28 + 32),
        uint64_t v30 = v146,
        !v29))
  {
    LODWORD(aBlock[0]) = 2;
    sub_24D5F77E0(MEMORY[0x263F8EE78]);
    sub_24D5D78EC((unint64_t *)&qword_26B196AF0, MEMORY[0x263F06080]);
    sub_24DCC8808();
    sub_24DCC83E8();
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    swift_willThrow();
    return;
  }
  uint64_t v31 = *a2;
  int v32 = *((_DWORD *)a2 + 5);
  id v109 = (id)fpfs_current_log();
  sub_24D3FB6F8(0, &qword_26B194038);
  sub_24DCC88E8();
  id v33 = v128;
  id v128 = sub_24D609184((uint64_t)v25, 1);
  if (v33)
  {

    return;
  }
  int v106 = v32;
  uint64_t v108 = 0;
  uint64_t v107 = v31;
  if (v118)
  {
    id v34 = v118;
    id v35 = v118;
  }
  else
  {
    id v35 = 0;
    id v34 = objc_msgSend(self, sel_requestForSelf);
  }
  unint64_t v36 = (unint64_t)v119;
  uint64_t Strong = (void *)swift_unknownObjectUnownedLoadStrong();
  id v38 = v35;
  uint64_t v39 = v30;
  id v40 = objc_msgSend(Strong, sel_session);

  id v41 = objc_msgSend(v34, sel_nsfpRequestForSession_isSpeculative_, v40, (v36 >> 8) & 1);
  swift_unknownObjectRelease();
  objc_msgSend(v41, sel_setDomainVersion_, v127);
  uint64_t v42 = swift_allocObject();
  uint64_t v118 = (void *)v42;
  *(void *)(v42 + 16) = 0;
  uint64_t v43 = v42 + 16;
  if ((v36 & 0x100) == 0) {
    goto LABEL_15;
  }
  uint64_t v44 = *(unsigned char **)(v39 + 144);
  uint64_t v45 = (void *)swift_retain();
  if (objc_sync_enter(v45)) {
    goto LABEL_27;
  }
  uint64_t v46 = v108;
  BOOL v47 = sub_24D5D2AE8(v44);
  uint64_t v108 = v46;
  if (v46)
  {
    objc_sync_exit(v44);
LABEL_29:
    sub_24DA82DC4((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 318, (uint64_t)v44);
  }
  BOOL v48 = v47;
  if (objc_sync_exit(v44)) {
    goto LABEL_29;
  }
  swift_release();
  if (!v48)
  {
    swift_beginAccess();
    uint64_t v90 = v41;
    uint64_t v91 = *(void (**)(void **))(a9 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
    sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
    uint64_t v92 = (void *)swift_allocError();
    *(void *)uint64_t v93 = 10;
    *(_OWORD *)(v93 + 8) = 0u;
    *(_OWORD *)(v93 + 24) = 0u;
    *(_OWORD *)(v93 + 40) = 0u;
    *(_OWORD *)(v93 + 56) = 0u;
    *(void *)(v93 + 72) = 0;
    *(unsigned char *)(v93 + 80) = 10;
    long long v141 = 0u;
    long long v142 = 0u;
    long long v143 = 0u;
    os_log_t v140 = v92;
    uint64_t v144 = 0;
    char v145 = 1;
    swift_retain();
    v91(&v140);

    goto LABEL_24;
  }
LABEL_15:
  id v105 = v41;
  uint64_t v49 = (void *)swift_unknownObjectUnownedLoadStrong();
  uint64_t v44 = objc_msgSend(v49, sel_provider);

  if (!v44)
  {
LABEL_26:
    sub_24DCCA978();
    __break(1u);
LABEL_27:
    sub_24DA82DB0((uint64_t)"/Library/Caches/com.apple.xbs/Sources/FileProviderTools/fssync/libfssync/utilities/Utilities.swift", 98, 2, 314, (uint64_t)v44);
  }
  uint64_t v103 = v43;
  uint64_t v104 = a9;
  uint64_t v98 = a2;
  id v50 = objc_msgSend(v44, sel_identifier);

  uint64_t v44 = (unsigned char *)swift_unknownObjectUnownedLoadStrong();
  id v51 = objc_msgSend(v44, sel_identifier);

  if (!v51)
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v102 = a13;
  uint64_t v119 = a10;
  id v101 = objc_msgSend(objc_allocWithZone(MEMORY[0x263F054B8]), sel_initWithProviderID_domainIdentifier_itemIdentifier_, v50, v51, a11);

  sub_24D3FB6F8(0, (unint64_t *)&unk_26B194070);
  unint64_t v52 = v121;
  *(void *)&long long v133 = v126;
  *((void *)&v133 + 1) = v121;
  uint64_t v53 = v123;
  uint64_t v54 = v125;
  uint64_t v134 = v123;
  uint64_t v135 = v125;
  unint64_t v55 = v124;
  uint64_t v56 = v116;
  unint64_t v136 = v124;
  uint64_t v137 = v116;
  uint64_t v57 = v117;
  id v138 = v120;
  uint64_t v139 = v117;
  sub_24D3F9C18(v126, v121);
  swift_bridgeObjectRetain();
  sub_24D3F9C18(v54, v55);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v100 = sub_24D910750(&v133);
  BOOL v99 = a14 == 2;
  uint64_t v58 = swift_allocObject();
  uint64_t v59 = v146;
  id v60 = v109;
  *(void *)(v58 + 16) = v146;
  *(void *)(v58 + 24) = v60;
  unint64_t v61 = v118;
  *(void *)(v58 + 32) = v127;
  *(void *)(v58 + 40) = v61;
  uint64_t v62 = v104;
  *(void *)(v58 + 48) = a11;
  *(void *)(v58 + 56) = v62;
  uint64_t v63 = v114;
  *(void *)(v58 + 64) = v119;
  *(void *)(v58 + 72) = v63;
  unint64_t v64 = v115;
  *(void *)(v58 + 80) = v122;
  *(void *)(v58 + 88) = v64;
  uint64_t v65 = v112;
  *(void *)(v58 + 96) = v113;
  *(void *)(v58 + 104) = v65;
  *(unsigned char *)(v58 + 112) = v111;
  uint64_t v66 = v126;
  *(void *)(v58 + 120) = v110;
  *(void *)(v58 + 128) = v66;
  *(void *)(v58 + 136) = v52;
  *(void *)(v58 + 144) = v53;
  *(void *)(v58 + 152) = v54;
  unint64_t v67 = v124;
  *(void *)(v58 + 160) = v124;
  *(void *)(v58 + 168) = v56;
  *(void *)(v58 + 176) = v120;
  *(void *)(v58 + 184) = v57;
  *(void *)(v58 + 192) = v107;
  *(_DWORD *)(v58 + 200) = v106;
  aBlock[4] = sub_24D5DA9F8;
  uint64_t v132 = v58;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D5C4778;
  aBlock[3] = &block_descriptor_372;
  uint64_t v68 = v59;
  uint64_t v69 = _Block_copy(aBlock);
  uint64_t v114 = v132;
  swift_retain();
  swift_retain();
  id v113 = a11;
  swift_retain();
  uint64_t v70 = v119;
  swift_unknownObjectRetain();
  id v120 = v109;
  id v71 = v127;
  sub_24D416048(v122, v64);
  sub_24D3F9C18(v126, v121);
  swift_bridgeObjectRetain();
  sub_24D3F9C18(v125, v67);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v72 = v69;
  uint64_t v97 = v69;
  LOBYTE(v96) = v99;
  uint64_t v73 = v101;
  uint64_t v74 = v100;
  uint64_t v75 = v105;
  id v76 = objc_msgSend(v70, sel_fetchContentsForItemWithID_version_usingExistingContentsAtURL_existingVersion_request_estimatedItemSize_isSymlink_completionHandler_, v101, 0, v128, v100, v105, v102, v96, v97);

  uint64_t v77 = v118;
  _Block_release(v72);
  swift_beginAccess();
  uint64_t v78 = (void *)v77[2];
  v77[2] = v76;

  uint64_t v79 = (void *)v77[2];
  if (!v79)
  {
    swift_release();

    return;
  }
  swift_beginAccess();
  id v80 = v79;
  id v81 = v113;
  id v82 = v80;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v129 = *(void *)(v68 + 176);
  *(void *)(v68 + 176) = 0x8000000000000000;
  sub_24D714C20((uint64_t)v82, v81, isUniquelyReferenced_nonNull_native);
  *(void *)(v68 + 176) = v129;

  swift_bridgeObjectRelease();
  swift_endAccess();
  uint64_t v84 = *(uint64_t (**)(id *, id, uint64_t, uint64_t))(v68 + 120);
  if (v84)
  {
    uint64_t v85 = *MEMORY[0x263F08478];
    uint64_t v86 = v98[7];
    id v130 = v81;
    swift_retain_n();
    uint64_t v87 = v84(&v130, v82, v85, v86);
    uint64_t v89 = v88;

    sub_24D43DD74((uint64_t)v84);
    sub_24D43DD74((uint64_t)v84);
  }
  else
  {

    uint64_t v87 = 0;
    uint64_t v89 = 0;
  }
  uint64_t v94 = (void (*)())swift_allocObject();
  *((void *)v94 + 2) = v68;
  *((void *)v94 + 3) = v81;
  *((void *)v94 + 4) = v87;
  *((void *)v94 + 5) = v89;
  swift_beginAccess();
  *a15 = sub_24D5DC188;
  a15[1] = v94;
  swift_retain();
  id v95 = v81;
LABEL_24:
  swift_release();
  swift_release();
}

uint64_t sub_24D5C2FD0(void *a1, void *a2, void *a3, uint64_t a4, void *a5, uint64_t a6, void *a7, void *a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, int a15)
{
  uint64_t v37 = *a13;
  unint64_t v16 = a13[2];
  uint64_t v42 = a13[1];
  uint64_t v35 = a13[4];
  uint64_t v36 = a13[3];
  char v34 = *((unsigned char *)a13 + 40);
  uint64_t v17 = a13[9];
  unint64_t v30 = a13[8];
  uint64_t v31 = a13[7];
  uint64_t v18 = a13[10];
  unint64_t v19 = a13[11];
  uint64_t v20 = a13[12];
  uint64_t v32 = a13[13];
  uint64_t v33 = a13[6];
  uint64_t v21 = a13[14];
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = a6;
  *(void *)(v22 + 24) = a3;
  *(void *)(v22 + 32) = a8;
  *(void *)(v22 + 40) = a1;
  *(void *)(v22 + 48) = a2;
  *(void *)(v22 + 56) = a5;
  *(void *)(v22 + 64) = a9;
  *(void *)(v22 + 72) = a10;
  *(void *)(v22 + 80) = a11;
  *(void *)(v22 + 88) = a12;
  *(void *)(v22 + 96) = v37;
  *(void *)(v22 + 104) = v42;
  *(void *)(v22 + 112) = v16;
  *(void *)(v22 + 120) = v36;
  *(void *)(v22 + 128) = v35;
  *(unsigned char *)(v22 + 136) = v34;
  *(void *)(v22 + 144) = v33;
  *(void *)(v22 + 152) = v31;
  *(void *)(v22 + 160) = v30;
  *(void *)(v22 + 168) = v17;
  *(void *)(v22 + 176) = v18;
  *(void *)(v22 + 184) = v19;
  *(void *)(v22 + 192) = v20;
  *(void *)(v22 + 200) = v32;
  *(void *)(v22 + 208) = v21;
  *(void *)(v22 + 216) = a14;
  *(_DWORD *)(v22 + 224) = a15;
  swift_retain();
  id v23 = a3;
  id v24 = a8;
  id v25 = a1;
  id v26 = a2;
  id v27 = a5;
  swift_retain();
  id v28 = a10;
  swift_retain();
  swift_unknownObjectRetain();
  sub_24D416048(v42, v16);
  sub_24D3F9C18(v31, v30);
  swift_bridgeObjectRetain();
  sub_24D3F9C18(v18, v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_24D3E29E4(a7, (uint64_t)"provideFile(for:kind:expectedFileSize:updating:domainVersion:requestor:options:completion:)", 91, 2, (uint64_t)sub_24D5DAB40, v22);

  return swift_release();
}

uint64_t sub_24D5C3210(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6, id *a7, void *a8, uint64_t a9, void *a10, uint64_t a11)
{
  id v95 = a8;
  uint64_t v97 = a7;
  BOOL v99 = a6;
  uint64_t v93 = a5;
  uint64_t v85 = *(void **)a11;
  long long v88 = *(_OWORD *)(a11 + 8);
  long long v86 = *(_OWORD *)(a11 + 24);
  *(void *)&long long v87 = *(unsigned __int8 *)(a11 + 40);
  *((void *)&v87 + 1) = *(void *)(a11 + 48);
  uint64_t v84 = *(void *)(a11 + 56);
  unint64_t v83 = *(void *)(a11 + 64);
  uint64_t v82 = *(void *)(a11 + 72);
  uint64_t v81 = *(void *)(a11 + 80);
  uint64_t v80 = *(void *)(a11 + 88);
  uint64_t v79 = *(void *)(a11 + 96);
  uint64_t v15 = *(void *)(a11 + 112);
  uint64_t v78 = *(void *)(a11 + 104);
  uint64_t v77 = v15;
  uint64_t v16 = sub_24DCC8288();
  MEMORY[0x270FA5388](v16 - 8);
  uint64_t v90 = (char *)&v77 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = sub_24DCC82A8();
  uint64_t v91 = *(void *)(v92 - 8);
  MEMORY[0x270FA5388](v92);
  uint64_t v89 = (char *)&v77 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B199050);
  MEMORY[0x270FA5388](v19 - 8);
  uint64_t v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_24DCC8A58();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(void *)(v23 + 64);
  uint64_t v25 = MEMORY[0x270FA5388](v22);
  id v26 = (char *)&v77 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x270FA5388](v25);
  uint64_t v94 = (char *)&v77 - v27;
  uint64_t v98 = a9;
  uint64_t v96 = a1;
  sub_24D5B94C8(a2, a3);
  if (!a4)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56))(v21, 1, 1, v22);
    uint64_t v31 = v99;
    goto LABEL_7;
  }
  id v28 = [a4 url];
  sub_24DCC89E8();

  BOOL v29 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v29(v21, v26, v22);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v21, 0, 1, v22);
  int v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22);
  uint64_t v31 = v99;
  if (v30 == 1)
  {
LABEL_7:
    sub_24D415F74((uint64_t)v21, (uint64_t *)&unk_26B199050);
    goto LABEL_8;
  }
  uint64_t v32 = v94;
  v29(v94, v21, v22);
  if (v93 && !v31)
  {
    uint64_t v97 = v93;
    LODWORD(v95) = sub_24DCC89F8();
    swift_beginAccess();
    uint64_t v50 = v98;
    uint64_t v92 = *(void *)(v98 + 16);
    uint64_t v91 = *(void *)(v98 + 24);
    BOOL v99 = (void *)(a9 + 16);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v32, v22);
    unint64_t v51 = (*(unsigned __int8 *)(v23 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
    uint64_t v52 = v51 + v24;
    unint64_t v53 = (v51 + v24) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v54 = swift_allocObject();
    unint64_t v55 = v53 + v54;
    v29((char *)(v54 + v51), v26, v22);
    uint64_t v56 = v91;
    uint64_t v57 = v50;
    uint64_t v58 = v97;
    *(unsigned char *)(v54 + v52) = v95 & 1;
    *(void *)(v55 + 8) = v92;
    *(void *)(v55 + 16) = v56;
    swift_beginAccess();
    *(void *)(v57 + 16) = sub_24D5DAC5C;
    *(void *)(v57 + 24) = v54;
    swift_retain_n();
    swift_release();
    sub_24D7C43F4((uint64_t *)&v100);
    long long v101 = v100;
    sub_24D5D7D58((uint64_t)&v101);
    sub_24D5DA4D8((uint64_t *)&v100);
    uint64_t v59 = v84;
    unint64_t v60 = v83;
    LOBYTE(v54) = sub_24D401DDC(v101, *((unint64_t *)&v101 + 1), v84, v83);
    uint64_t v61 = sub_24D5D7D88((uint64_t)&v101);
    if (v54)
    {
      uint64_t v62 = v58;
      uint64_t v63 = v93;
      sub_24D5B8AF4(v93);

      swift_beginAccess();
      unint64_t v64 = *(void (**)(void **))(v57 + 16);
      uint64_t v65 = v88;
      uint64_t v102 = v85;
      long long v103 = v88;
      unint64_t v66 = *((void *)&v88 + 1);
      long long v104 = v86;
      long long v105 = v87;
      int v106 = v63;
      char v107 = 0;
      unint64_t v67 = v62;
      swift_retain();
      sub_24D416048(v65, v66);
      v64(&v102);

      swift_release();
      sub_24D416034(v65, v66);
      swift_release();

      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v94, v22);
    }
    else
    {
      MEMORY[0x270FA5388](v61);
      uint64_t v68 = v94;
      *(&v77 - 22) = (uint64_t)v94;
      *(&v77 - 21) = v69;
      *((_DWORD *)&v77 - 40) = v70;
      uint64_t v71 = (uint64_t)v85;
      *(&v77 - 19) = v57;
      *(&v77 - 18) = v71;
      uint64_t v72 = *((void *)&v88 + 1);
      *(&v77 - 17) = v88;
      *(&v77 - 16) = v72;
      uint64_t v73 = *((void *)&v86 + 1);
      *(&v77 - 15) = v86;
      *(&v77 - 14) = v73;
      *((unsigned char *)&v77 - 104) = v87;
      *(&v77 - 12) = *((void *)&v87 + 1);
      *(&v77 - 11) = v59;
      uint64_t v74 = v82;
      *(&v77 - 10) = v60;
      *(&v77 - 9) = v74;
      uint64_t v75 = v80;
      *(&v77 - 8) = v81;
      *(&v77 - 7) = v75;
      uint64_t v76 = v78;
      *(&v77 - 6) = v79;
      *(&v77 - 5) = v76;
      *(&v77 - 4) = v77;
      *(&v77 - 3) = (uint64_t)v58;
      *(&v77 - 2) = v96;
      sub_24D412FF0((void *(*)(void *__return_ptr, uint64_t))sub_24D5DACFC);

      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v68, v22);
    }
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v32, v22);
LABEL_8:
  uint64_t v33 = v97 + 2;
  swift_beginAccess();
  uint64_t v34 = v98;
  if (*v33 && (objc_msgSend(*v33, sel_isCancelled) & 1) != 0)
  {
    swift_beginAccess();
    if (*v33)
    {
      if (objc_msgSend(*v33, sel_isCancelled)
        && (uint64_t v35 = v96, swift_beginAccess(), *(void *)(*(void *)(v35 + 176) + 16)))
      {
        id v36 = v95;
        swift_bridgeObjectRetain();
        sub_24D4060A4(v36);
        uint64_t v38 = v37 & 1;

        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v38 = 0;
      }
    }
    else
    {
      uint64_t v38 = 0;
    }
    swift_beginAccess();
    uint64_t v46 = *(void (**)(void **))(v34 + 16);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_26B192A50);
    sub_24D3E4A9C(qword_26B18FAE0, (uint64_t *)&unk_26B192A50);
    BOOL v47 = (void *)swift_allocError();
    *(void *)uint64_t v48 = v38;
    *(_OWORD *)(v48 + 8) = 0u;
    *(_OWORD *)(v48 + 24) = 0u;
    *(_OWORD *)(v48 + 40) = 0u;
    *(_OWORD *)(v48 + 56) = 0u;
    *(void *)(v48 + 72) = 0;
    *(unsigned char *)(v48 + 80) = 5;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v102 = v47;
    int v106 = 0;
    char v107 = 1;
    swift_retain();
    v46(&v102);
  }
  else
  {
    swift_beginAccess();
    uint64_t v39 = *(void (**)(void **))(v34 + 16);
    swift_retain();
    if (v31)
    {
      id v40 = v31;
    }
    else
    {
      sub_24DCC81E8();
      sub_24D5F77E0(MEMORY[0x263F8EE78]);
      sub_24D5D78EC((unint64_t *)&qword_26986C390, MEMORY[0x263F06060]);
      id v41 = v89;
      uint64_t v42 = v92;
      sub_24DCC8808();
      id v40 = (void *)sub_24DCC8128();
      (*(void (**)(char *, uint64_t))(v91 + 8))(v41, v42);
    }
    id v43 = v95;
    id v44 = v31;
    uint64_t v45 = sub_24D5C7D64(v40, v43, 0, (uint64_t)objc_msgSend(a10, sel_timeoutState));

    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    uint64_t v102 = v45;
    int v106 = 0;
    char v107 = 1;
    v39(&v102);
  }
  return swift_release();
}

uint64_t sub_24D5C3D64(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(uint64_t))
{
  v14[1] = *(id *)MEMORY[0x263EF8340];
  id v7 = objc_msgSend(self, sel_defaultManager);
  uint64_t v8 = (void *)sub_24DCC8948();
  v14[0] = 0;
  unsigned int v9 = objc_msgSend(v7, sel_removeItemAtURL_error_, v8, v14);

  if (v9)
  {
    id v10 = v14[0];
    if ((a3 & 1) == 0) {
      return a4(a1);
    }
    goto LABEL_5;
  }
  id v11 = v14[0];
  uint64_t v12 = (void *)sub_24DCC8828();

  swift_willThrow();
  if (a3) {
LABEL_5:
  }
    sub_24DCC89D8();
  return a4(a1);
}

uint64_t sub_24D5C3E88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, void *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v54 = a7;
  id v56 = a6;
  uint64_t v43 = a4;
  int v42 = a3;
  uint64_t v41 = a2;
  v33[0] = a8;
  uint64_t v40 = *a5;
  uint64_t v9 = a5[1];
  unint64_t v51 = a5[2];
  uint64_t v52 = v9;
  uint64_t v39 = a5[3];
  uint64_t v38 = a5[4];
  int v37 = *((unsigned __int8 *)a5 + 40);
  uint64_t v36 = a5[6];
  uint64_t v10 = a5[7];
  unint64_t v49 = a5[8];
  uint64_t v50 = v10;
  uint64_t v11 = a5[10];
  uint64_t v53 = a5[9];
  uint64_t v44 = v11;
  uint64_t v12 = a5[12];
  unint64_t v34 = a5[11];
  uint64_t v46 = v12;
  uint64_t v13 = a5[14];
  uint64_t v35 = a5[13];
  uint64_t v45 = v13;
  uint64_t v14 = sub_24DCC8A58();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x270FA5388](v14);
  uint64_t v17 = sub_24DCC8A18();
  uint64_t v47 = v18;
  uint64_t v48 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))((char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14);
  unint64_t v19 = (*(unsigned __int8 *)(v15 + 80) + 176) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = v41;
  *(_DWORD *)(v20 + 24) = v42;
  uint64_t v21 = v40;
  *(void *)(v20 + 32) = v43;
  *(void *)(v20 + 40) = v21;
  unint64_t v22 = v51;
  *(void *)(v20 + 48) = v52;
  *(void *)(v20 + 56) = v22;
  uint64_t v23 = v38;
  *(void *)(v20 + 64) = v39;
  *(void *)(v20 + 72) = v23;
  *(unsigned char *)(v20 + 80) = v37;
  uint64_t v24 = v50;
  *(void *)(v20 + 88) = v36;
  *(void *)(v20 + 96) = v24;
  uint64_t v25 = v53;
  *(void *)(v20 + 104) = v49;
  *(void *)(v20 + 112) = v25;
  *(void *)(v20 + 120) = v11;
  unint64_t v26 = v34;
  *(void *)(v20 + 128) = v34;
  *(void *)(v20 + 136) = v12;
  *(void *)(v20 + 144) = v35;
  *(void *)(v20 + 152) = v13;
  uint64_t v27 = v54;
  *(void *)(v20 + 160) = v56;
  *(void *)(v20 + 168) = v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v15 + 32))(v20 + v19, (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v14);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = sub_24D5DAE84;
  *(void *)(v28 + 24) = v20;
  aBlock[4] = sub_24D3E1450;
  void aBlock[5] = v28;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_24D3E1424;
  aBlock[3] = &block_descriptor_390;
  BOOL v29 = _Block_copy(aBlock);
  swift_retain();
  sub_24D416048(v52, v51);
  sub_24D3F9C18(v50, v49);
  swift_bridgeObjectRetain();
  sub_24D3F9C18(v44, v26);
  swift_bridgeObjectRetain();
  id v30 = v56;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  sub_24DCC9898();
  swift_bridgeObjectRelease();
  int v31 = fpfs_gethandle_at();
  swift_release();
  _Block_release(v29);
  LOBYTE(v16) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v16) {
    __break(1u);
  }
  else {
    *(_DWORD *)v33[0] = v31;
  }
  return result;
}

uint64_t sub_24D5C4258(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8)
{
  if (*(void *)a1 == a2 && *(_DWORD *)(a1 + 20) == a3)
  {
    uint64_t v12 = *(void **)a5;
    uint64_t v13 = *(void *)(a5 + 8);
    unint64_t v14 = *(void *)(a5 + 16);
    uint64_t v15 = *(void *)(a5 + 24);
    uint64_t v16 = *(void *)(a5 + 32);
    uint64_t v17 = *(unsigned __int8 *)(a5 + 40);
    uint64_t v18 = *(void *)(a5 + 48);
    swift_beginAccess();
    unint64_t v19 = *(void (**)(void **))(a4 + 16);
    uint64_t v39 = v12;
    uint64_t v40 = v13;
    unint64_t v41 = v14;
    uint64_t v42 = v15;
    uint64_t v43 = v16;
    uint64_t v44 = v17;
    uint64_t v45 = v18;
    id v46 = a6;
    char v47 = 0;
    swift_retain();
    v19(&v39);
    swift_release();
  }
  else
  {
    uint64_t v20 = (void *)swift_allocObject();
    _OWORD v20[2] = a7;
    void v20[3] = a6;
    v20[4] = a4;
    swift_retain_n();
    id v21 = a6;
    swift_retain_n();
    id v22 = v21;
    if ((sub_24D5B8010() & 1) != 0 && objc_msgSend(v22, sel_isFlattenedPackage))
    {
      swift_retain();
      swift_retain();
      sub_24D5D529C(a8, (void (*)(uint64_t *))sub_24D5DAF98, (uint64_t)v20, a7);
      swift_release_n();
      swift_release_n();
    }
    else
    {
      uint64_t v23 = a7[17];
      uint64_t v24 = sub_24DCC8A18();
      (*(void (**)(void *__return_ptr, uint64_t))(*(void *)v23 + 344))(v36, v24);
      uint64_t v35 = a4;
      uint64_t v25 = v36[1];
      uint64_t v32 = (void *)v36[0];
      unint64_t v27 = v36[2];
      uint64_t v26 = v36[3];
      uint64_t v28 = v36[4];
      uint64_t v29 = v37;
      uint64_t v34 = v38;
      swift_bridgeObjectRelease();
      sub_24D5B8AF4(v22);
      swift_beginAccess();
      uint64_t v33 = *(void (**)(void **))(v35 + 16);
      id v30 = v22;
      uint64_t v39 = v32;
      uint64_t v40 = v25;
      unint64_t v41 = v27;
      uint64_t v42 = v26;
      uint64_t v43 = v28;
      uint64_t v44 = v29;
      uint64_t v45 = v34;
      id v46 = v22;
      char v47 = 0;
      swift_retain();
      sub_24D5DAFA4(v32, v25, v27, v26, v28, v29, v34, 0);
      v33(&v39);
      swift_release();
      sub_24D5DAFB8(v32, v25, v27, v26, v28, v29, v34, v22, 0);
      sub_24D5DB010(v32, v25, v27, v26, v28, v29, v34, 0);
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return 0;
}

void sub_24D5C45FC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_24D3F0BA0(a1, (uint64_t)v26, &qword_26B1949A8);
  uint64_t v24 = (void *)v26[0];
  unint64_t v21 = v26[2];
  uint64_t v22 = v26[1];
  uint64_t v19 = v26[4];
  uint64_t v20 = v26[3];
  char v17 = v27;
  uint64_t v18 = v28;
  id v7 = a3;
  sub_24D5B8AF4(a3);
  swift_beginAccess();
  uint64_t v23 = *(void (**)(void *))(a4 + 16);
  uint64_t v25 = a1;
  sub_24D3F0BA0(a1, (uint64_t)v29, &qword_26B1949A8);
  uint64_t v8 = 0;
  unint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  unint64_t v14 = 0;
  char v15 = v30;
  if ((v30 & 1) == 0)
  {
    uint64_t v12 = v17 & 1;
    id v16 = v7;
    unint64_t v9 = v21;
    uint64_t v8 = v22;
    uint64_t v11 = v19;
    uint64_t v10 = v20;
    uint64_t v13 = v18;
    unint64_t v14 = v7;
  }
  v31[0] = v24;
  v31[1] = v8;
  v31[2] = v9;
  v31[3] = v10;
  v31[4] = v11;
  v31[5] = v12;
  v31[6] = v13;
  void v31[7] = v14;
  char v32 = v15;
  swift_retain();
  sub_24D5DB1D4(v25);
  v23(v31);
  swift_release();
  sub_24D5DAFB8(v24, v8, v9, v10, v11, v12, v13, v14, v15);
}

void sub_24D5C4778(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  uint64_t v11 = *(void (**)(void *, void *, id, uint64_t, void *))(a1 + 32);
  swift_retain();
  id v15 = a2;
  id v12 = a3;
  id v13 = a4;
  id v14 = a6;
  v11(a2, a3, v13, a5, a6);
  swift_release();
}